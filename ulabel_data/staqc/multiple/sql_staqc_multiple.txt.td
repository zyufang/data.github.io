[[(2840, 0), [['You can use  the Row_Number()  function.\nIts used as follows:'], ['From which it will yield a result set with a  RowID  field which you can use to page between.']], [[' SELECT Row_Number() OVER(ORDER BY UserName) As RowID, UserFirstName, UserLastName\nFROM Users\n']], ['Paging SQL Server 2005 Results'], 2], [(2840, 1), [['From which it will yield a result set with a  RowID  field which you can use to page between.'], ['etc']], [[' SELECT * \nFROM \n    ( SELECT Row_Number() OVER(ORDER BY UserName) As RowID, UserFirstName, UserLastName\n      FROM Users \n    ) As RowResults\nWHERE RowID Between 5 AND 10\n']], ['Paging SQL Server 2005 Results'], 2], [(3196, 0), [["Couldn't be simpler..."], ['This could also be extended to delete duplicates:']], [[' Select\nName,\nCount(Name) As Count\nFrom\nTable\nGroup By\nName\nHaving\nCount(Name) > 1\nOrder By\nCount(Name) Desc\n']], ['SQL query, count and group by'], 2], [(3196, 1), [['This could also be extended to delete duplicates:'], ['-10000']], [[' Delete\nFrom\nTable\nWhere\nKey In (\n    Select\n    Max(Key)\n    From\n    Table\n    Group By\n    Name\n    Having\nCount(Name) > 1)\n']], ['SQL query, count and group by'], 2], [(4622, 0), [['For SQL Server:'], ['or:']], [[' CASE case-expression\n    WHEN when-expression-1 THEN value-1\n  [ WHEN when-expression-n THEN value-n ... ]\n  [ ELSE else-value ]\nEND\n']], ['SQL Case Statement Syntax?'], 3], [(4622, 1), [['or:'], ['expressions, etc:']], [[' CASE\n    WHEN boolean-when-expression-1 THEN value-1\n  [ WHEN boolean-when-expression-n THEN value-n ... ]\n  [ ELSE else-value ]\nEND\n']], ['SQL Case Statement Syntax?'], 3], [(4622, 2), [['expressions, etc:'], ['Link:  CASE (Transact-SQL)']], [[' case-expression    - something that produces a value\nwhen-expression-x  - something that is compared against the case-expression\nvalue-1            - the result of the CASE statement if:\n                         the when-expression == case-expression\n                      OR the boolean-when-expression == TRUE\nboolean-when-exp.. - something that produces a TRUE/FALSE answer\n']], ['SQL Case Statement Syntax?'], 3], [(10819, 0), [['With the thought of actually doing some testing before making any subjective claims about what any code does or what someone "likes", here\'s some code you can do your own testing with.  Setup profiler for the SPID you\'re running the test from and check it out for yourself... just do a "Search\'n\'Replace" of the number 1000000 for your "favorite" number and see...'], ["While we're at it, here's the numbers I get from SQL Profiler for the values of 100, 1000, 10000, 100000, and 1000000..."]], [[" --===== Test for 1000000 rows ==================================\nGO\n--===== Traditional RECURSIVE CTE method\n   WITH Tally (N) AS \n        ( \n         SELECT 1 UNION ALL \n         SELECT 1 + N FROM Tally WHERE N < 1000000 \n        ) \n SELECT N \n   INTO #Tally1 \n   FROM Tally \n OPTION (MAXRECURSION 0);\nGO\n--===== Traditional WHILE LOOP method\n CREATE TABLE #Tally2 (N INT);\n    SET NOCOUNT ON;\nDECLARE @Index INT;\n    SET @Index = 1;\n  WHILE @Index <= 1000000 \n  BEGIN \n         INSERT #Tally2 (N) \n         VALUES (@Index);\n            SET @Index = @Index + 1;\n    END;\nGO\n--===== Traditional CROSS JOIN table method\n SELECT TOP (1000000)\n        ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS N\n   INTO #Tally3\n   FROM Master.sys.All_Columns ac1\n  CROSS JOIN Master.sys.ALL_Columns ac2;\nGO\n--===== Itzik's CROSS JOINED CTE method\n   WITH E00(N) AS (SELECT 1 UNION ALL SELECT 1),\n        E02(N) AS (SELECT 1 FROM E00 a, E00 b),\n        E04(N) AS (SELECT 1 FROM E02 a, E02 b),\n        E08(N) AS (SELECT 1 FROM E04 a, E04 b),\n        E16(N) AS (SELECT 1 FROM E08 a, E08 b),\n        E32(N) AS (SELECT 1 FROM E16 a, E16 b),\n   cteTally(N) AS (SELECT ROW_NUMBER() OVER (ORDER BY N) FROM E32)\n SELECT N\n   INTO #Tally4\n   FROM cteTally\n  WHERE N <= 1000000;\nGO\n--===== Housekeeping\n   DROP TABLE #Tally1, #Tally2, #Tally3, #Tally4;\nGO\n"]], ['SQL, Auxiliary table of numbers'], 2], [(10819, 1), [["While we're at it, here's the numbers I get from SQL Profiler for the values of 100, 1000, 10000, 100000, and 1000000..."], ["As you can see,  the Recursive CTE method is the second worst only to the While Loop for Duration and CPU and has 8 times the memory pressure in the form of logical reads than the While Loop . It's RBAR on steroids and should be avoided, at all cost, for any single row calculations just as a While Loop should be avoided.   There are places where recursion is quite valuable but this ISN'T one of them ."]], [[" SPID TextData                                 Dur(ms) CPU   Reads   Writes\n---- ---------------------------------------- ------- ----- ------- ------\n  51 --===== Test for 100 rows ==============       8     0       0      0\n  51 --===== Traditional RECURSIVE CTE method      16     0     868      0\n  51 --===== Traditional WHILE LOOP method CR      73    16     175      2\n  51 --===== Traditional CROSS JOIN table met      11     0      80      0\n  51 --===== Itzik's CROSS JOINED CTE method        6     0      63      0\n  51 --===== Housekeeping   DROP TABLE #Tally      35    31     401      0\n\n  51 --===== Test for 1000 rows =============       0     0       0      0\n  51 --===== Traditional RECURSIVE CTE method      47    47    8074      0\n  51 --===== Traditional WHILE LOOP method CR      80    78    1085      0\n  51 --===== Traditional CROSS JOIN table met       5     0      98      0\n  51 --===== Itzik's CROSS JOINED CTE method        2     0      83      0\n  51 --===== Housekeeping   DROP TABLE #Tally       6    15     426      0\n\n  51 --===== Test for 10000 rows ============       0     0       0      0\n  51 --===== Traditional RECURSIVE CTE method     434   344   80230     10\n  51 --===== Traditional WHILE LOOP method CR     671   563   10240      9\n  51 --===== Traditional CROSS JOIN table met      25    31     302     15\n  51 --===== Itzik's CROSS JOINED CTE method       24     0     192     15\n  51 --===== Housekeeping   DROP TABLE #Tally       7    15     531      0\n\n  51 --===== Test for 100000 rows ===========       0     0       0      0\n  51 --===== Traditional RECURSIVE CTE method    4143  3813  800260    154\n  51 --===== Traditional WHILE LOOP method CR    5820  5547  101380    161\n  51 --===== Traditional CROSS JOIN table met     160   140     479    211\n  51 --===== Itzik's CROSS JOINED CTE method      153   141     276    204\n  51 --===== Housekeeping   DROP TABLE #Tally      10    15     761      0\n\n  51 --===== Test for 1000000 rows ==========       0     0       0      0\n  51 --===== Traditional RECURSIVE CTE method   41349 37437 8001048   1601\n  51 --===== Traditional WHILE LOOP method CR   59138 56141 1012785   1682\n  51 --===== Traditional CROSS JOIN table met    1224  1219    2429   2101\n  51 --===== Itzik's CROSS JOINED CTE method     1448  1328    1217   2095\n  51 --===== Housekeeping   DROP TABLE #Tally       8     0     415      0\n"]], ['SQL, Auxiliary table of numbers'], 2], [(12374, 0), [['Here is a snippet of the abstract base class used for data access'], ['next you will see a sample data access class using the above base to get a list of products']], [[' Public MustInherit Class Repository(Of T As Class)\n    Implements IRepository(Of T)\n\n    Private mConnectionString As String = ConfigurationManager.ConnectionStrings("Northwind.ConnectionString").ConnectionString\n    Private mConnection As IDbConnection\n    Private mTransaction As IDbTransaction\n\n    Public Sub New()\n        mConnection = Nothing\n        mTransaction = Nothing\n    End Sub\n\n    Public Sub New(ByVal connection As IDbConnection, ByVal transaction As IDbTransaction)\n        mConnection = connection\n        mTransaction = transaction\n    End Sub\n\n    Public MustOverride Function BuildEntity(ByVal cmd As SqlCommand) As List(Of T)\n\n    Public Function ExecuteReader(ByVal Parameter As Parameter) As List(Of T) Implements IRepository(Of T).ExecuteReader\n        Dim entityList As List(Of T)\n        If Not mConnection Is Nothing Then\n            Using cmd As SqlCommand = mConnection.CreateCommand()\n                cmd.Transaction = mTransaction\n                cmd.CommandType = Parameter.Type\n                cmd.CommandText = Parameter.Text\n                If Not Parameter.Items Is Nothing Then\n                    For Each param As SqlParameter In Parameter.Items\n                        cmd.Parameters.Add(param)\n                    Next\n                End If\n                entityList = BuildEntity(cmd)\n                If Not entityList Is Nothing Then\n                    Return entityList\n                End If\n            End Using\n        Else\n            Using conn As SqlConnection = New SqlConnection(mConnectionString)\n                Using cmd As SqlCommand = conn.CreateCommand()\n                    cmd.CommandType = Parameter.Type\n                    cmd.CommandText = Parameter.Text\n                    If Not Parameter.Items Is Nothing Then\n                        For Each param As SqlParameter In Parameter.Items\n                            cmd.Parameters.Add(param)\n                        Next\n                    End If\n                    conn.Open()\n                    entityList = BuildEntity(cmd)\n                    If Not entityList Is Nothing Then\n                        Return entityList\n                    End If\n                End Using\n            End Using\n        End If\n\n        Return Nothing\n    End Function\nEnd Class\n']], ['Has anyone had any success in unit testing SQL stored procedures?'], 4], [(12374, 1), [['next you will see a sample data access class using the above base to get a list of products'], ['below is the simple testing base class I used']], [[' Public Class ProductRepository\n    Inherits Repository(Of Product)\n    Implements IProductRepository\n\n    Private mCache As IHttpCache\n\n    \'This const is what you will use in your app\n    Public Sub New(ByVal cache As IHttpCache)\n        MyBase.New()\n        mCache = cache\n    End Sub\n\n    \'This const is only used for testing so we can inject a connectin/transaction and have them roll\'d back after the test\n    Public Sub New(ByVal cache As IHttpCache, ByVal connection As IDbConnection, ByVal transaction As IDbTransaction)\n        MyBase.New(connection, transaction)\n        mCache = cache\n    End Sub\n\n    Public Function GetProducts() As System.Collections.Generic.List(Of Product) Implements IProductRepository.GetProducts\n        Dim Parameter As New Parameter()\n        Parameter.Type = CommandType.StoredProcedure\n        Parameter.Text = "spGetProducts"\n        Dim productList As List(Of Product)\n        productList = MyBase.ExecuteReader(Parameter)\n        Return productList\n    End Function\n\n    \'This function is used in each class that inherits from the base data access class so we can keep all the boring left-right mapping code in 1 place per object\n    Public Overrides Function BuildEntity(ByVal cmd As System.Data.SqlClient.SqlCommand) As System.Collections.Generic.List(Of Product)\n        Dim productList As New List(Of Product)\n        Using reader As SqlDataReader = cmd.ExecuteReader()\n            Dim product As Product\n            While reader.Read()\n                product = New Product()\n                product.ID = reader("ProductID")\n                product.SupplierID = reader("SupplierID")\n                product.CategoryID = reader("CategoryID")\n                product.ProductName = reader("ProductName")\n                product.QuantityPerUnit = reader("QuantityPerUnit")\n                product.UnitPrice = reader("UnitPrice")\n                product.UnitsInStock = reader("UnitsInStock")\n                product.UnitsOnOrder = reader("UnitsOnOrder")\n                product.ReorderLevel = reader("ReorderLevel")\n                productList.Add(product)\n            End While\n            If productList.Count > 0 Then\n                Return productList\n            End If\n        End Using\n        Return Nothing\n    End Function\nEnd Class\n']], ['Has anyone had any success in unit testing SQL stored procedures?'], 4], [(12374, 2), [['below is the simple testing base class I used'], ['I know this doesn\'t test the "spGetProducts" sproc used in the above data access sample, but you should see the power behind this approach to unit testing sprocs']], [[' Imports System.Configuration\nImports System.Data\nImports System.Data.SqlClient\nImports Microsoft.VisualStudio.TestTools.UnitTesting\n\nPublic MustInherit Class TransactionFixture\n    Protected mConnection As IDbConnection\n    Protected mTransaction As IDbTransaction\n    Private mConnectionString As String = ConfigurationManager.ConnectionStrings("Northwind.ConnectionString").ConnectionString\n\n    <TestInitialize()> _\n    Public Sub CreateConnectionAndBeginTran()\n        mConnection = New SqlConnection(mConnectionString)\n        mConnection.Open()\n        mTransaction = mConnection.BeginTransaction()\n    End Sub\n\n    <TestCleanup()> _\n    Public Sub RollbackTranAndCloseConnection()\n        mTransaction.Rollback()\n        mTransaction.Dispose()\n        mConnection.Close()\n        mConnection.Dispose()\n    End Sub\nEnd Class\n']], ['Has anyone had any success in unit testing SQL stored procedures?'], 4], [(12374, 3), [['I know this doesn\'t test the "spGetProducts" sproc used in the above data access sample, but you should see the power behind this approach to unit testing sprocs'], ["I know this is a long example, but it helped to have a reusable class for the data access work, and yet another reusable class for my testing so I didn't have to do the setup/teardown work over and over again ;)"]], [[' Imports SampleApplication.Library\nImports System.Collections.Generic\nImports Microsoft.VisualStudio.TestTools.UnitTesting\n\n<TestClass()> _\nPublic Class ProductRepositoryUnitTest\n    Inherits TransactionFixture\n\n    Private mRepository As ProductRepository\n\n    <TestMethod()> _\n    Public Sub Should-Insert-Update-And-Delete-Product()\n        mRepository = New ProductRepository(New HttpCache(), mConnection, mTransaction)\n        \'** Create a test product to manipulate throughout **\'\n        Dim Product As New Product()\n        Product.ProductName = "TestProduct"\n        Product.SupplierID = 1\n        Product.CategoryID = 2\n        Product.QuantityPerUnit = "10 boxes of stuff"\n        Product.UnitPrice = 14.95\n        Product.UnitsInStock = 22\n        Product.UnitsOnOrder = 19\n        Product.ReorderLevel = 12\n        \'** Insert the new product object into SQL using your insert sproc **\'\n        mRepository.InsertProduct(Product)\n        \'** Select the product object that was just inserted and verify it does exist **\'\n        \'** Using your GetProductById sproc **\'\n        Dim Product2 As Product = mRepository.GetProduct(Product.ID)\n        Assert.AreEqual("TestProduct", Product2.ProductName)\n        Assert.AreEqual(1, Product2.SupplierID)\n        Assert.AreEqual(2, Product2.CategoryID)\n        Assert.AreEqual("10 boxes of stuff", Product2.QuantityPerUnit)\n        Assert.AreEqual(14.95, Product2.UnitPrice)\n        Assert.AreEqual(22, Product2.UnitsInStock)\n        Assert.AreEqual(19, Product2.UnitsOnOrder)\n        Assert.AreEqual(12, Product2.ReorderLevel)\n        \'** Update the product object **\'\n        Product2.ProductName = "UpdatedTestProduct"\n        Product2.SupplierID = 2\n        Product2.CategoryID = 1\n        Product2.QuantityPerUnit = "a box of stuff"\n        Product2.UnitPrice = 16.95\n        Product2.UnitsInStock = 10\n        Product2.UnitsOnOrder = 20\n        Product2.ReorderLevel = 8\n        mRepository.UpdateProduct(Product2) \'**using your update sproc\n        \'** Select the product object that was just updated to verify it completed **\'\n        Dim Product3 As Product = mRepository.GetProduct(Product2.ID)\n        Assert.AreEqual("UpdatedTestProduct", Product2.ProductName)\n        Assert.AreEqual(2, Product2.SupplierID)\n        Assert.AreEqual(1, Product2.CategoryID)\n        Assert.AreEqual("a box of stuff", Product2.QuantityPerUnit)\n        Assert.AreEqual(16.95, Product2.UnitPrice)\n        Assert.AreEqual(10, Product2.UnitsInStock)\n        Assert.AreEqual(20, Product2.UnitsOnOrder)\n        Assert.AreEqual(8, Product2.ReorderLevel)\n        \'** Delete the product and verify it does not exist **\'\n        mRepository.DeleteProduct(Product3.ID)\n        \'** The above will use your delete product by id sproc **\'\n        Dim Product4 As Product = mRepository.GetProduct(Product3.ID)\n        Assert.AreEqual(Nothing, Product4)\n    End Sub\n\nEnd Class\n']], ['Has anyone had any success in unit testing SQL stored procedures?'], 4], [(12613, 0), [['I added this to my Emacs init file:'], ["The default port is 0. If you'd like to set that to the default MySQL port you can customize  sql-port"]], [[" (setq sql-mysql-login-params (append sql-mysql-login-params '(port)))\n"]], ['Specify a Port Number in Emacs sql-mysql'], 2], [(12613, 1), [["The default port is 0. If you'd like to set that to the default MySQL port you can customize  sql-port"], ['There is a  sql-*-login-params  variable for all the popular RDMS systems in GNU Emacs 24.1.  sql-port  is used for both MySQL and PostreSQL']], [[' (setq sql-port 3306) ;; default MySQL port\n']], ['Specify a Port Number in Emacs sql-mysql'], 2], [(16568, 0), [['Basically, PostgreSQL and MySQL supports the non-standard:'], ['Oracle, DB2 and MSSQL supports the standard windowing functions:']], [[' SELECT...\nLIMIT y OFFSET x \n']], ['How to select the nth row in a SQL database table?'], 2], [(16568, 1), [['Oracle, DB2 and MSSQL supports the standard windowing functions:'], ['(which I just copied from the site linked above since I never use those DBs)']], [[' SELECT * FROM (\n  SELECT\n    ROW_NUMBER() OVER (ORDER BY key ASC) AS rownumber,\n    columns\n  FROM tablename\n) AS foo\nWHERE rownumber <= n\n']], ['How to select the nth row in a SQL database table?'], 2], [(17194, 0), [['Example 1 without empty rows:'], ['RETURNS:']], [[' select\n    Category\n    ,month\n    ,SUM(CASE WHEN YEAR = 2008 THEN Revenue ELSE 0 END) this_year\n    ,SUM(CASE WHEN YEAR = 2007 THEN Revenue ELSE 0 END) last_year\n\nfrom\n    sales\n\nwhere\n    year in (2008,2007)\n\ngroup by\n    Category\n    ,month\n']], ['SQL query to compare product sales by month'], 4], [(17194, 1), [['RETURNS:'], ['Example 2 with empty rows:\nI am going to use a sub query (but others may not) and will return an empty row for every product and year month combo.']], [[' Category  |  Month  |  Rev. This Year  |  Rev. Last Year\nBikes          1          10 000               0\nBikes          2          12 000               11 000\nBikes          3          12 000               11 500\nBikes          4          0                    15 400\n']], ['SQL query to compare product sales by month'], 4], [(17194, 2), [['Example 2 with empty rows:\nI am going to use a sub query (but others may not) and will return an empty row for every product and year month combo.'], ['RETURNS:']], [[' select\n    fill.Category\n    ,fill.month\n    ,SUM(CASE WHEN YEAR = 2008 THEN Revenue ELSE 0 END) this_year\n    ,SUM(CASE WHEN YEAR = 2007 THEN Revenue ELSE 0 END) last_year\n\nfrom\n    sales\n    Right join (select distinct  --try out left, right and cross joins to test results.\n                   product\n                   ,year\n                   ,month\n               from\n                  sales --this ideally would be from a products table\n                  cross join tm\n               where\n                    year in (2008,2007)) fill\n\n\nwhere\n    fill.year in (2008,2007)\n\ngroup by\n    fill.Category\n    ,fill.month\n']], ['SQL query to compare product sales by month'], 4], [(17194, 3), [['RETURNS:'], ['Note that most reporting tools will do this crosstab or matrix functionality, and now that i think of it SQL Server 2005 has pivot syntax that will do this as well.']], [[' Category  |  Month  |  Rev. This Year  |  Rev. Last Year\nBikes          1          10 000               0\nBikes          2          12 000               11 000\nBikes          3          12 000               11 500\nBikes          4          0                    15 400\nBikes          5          0                    0\nBikes          6          0                    0\nBikes          7          0                    0\nBikes          8          0                    0\n']], ['SQL query to compare product sales by month'], 4], [(18932, 0), [["Assuming no nulls, you  GROUP BY  the unique columns, and  SELECT  the  MIN (or MAX)  RowId as the row to keep. Then, just delete everything that didn't have a row id:"], ['In case you have a GUID instead of an integer, you can replace']], [[' DELETE FROM MyTable\nLEFT OUTER JOIN (\n   SELECT MIN(RowId) as RowId, Col1, Col2, Col3 \n   FROM MyTable \n   GROUP BY Col1, Col2, Col3\n) as KeepRows ON\n   MyTable.RowId = KeepRows.RowId\nWHERE\n   KeepRows.RowId IS NULL\n']], ['How can I remove duplicate rows?'], 3], [(18932, 1), [['In case you have a GUID instead of an integer, you can replace'], ['with']], [[' MIN(RowId)\n']], ['How can I remove duplicate rows?'], 3], [(18932, 2), [['with'], ['-10000']], [[' CONVERT(uniqueidentifier, MIN(CONVERT(char(36), MyGuidColumn)))\n']], ['How can I remove duplicate rows?'], 3], [(19412, 0), [['Select a random row with MySQL:'], ['Select a random row with PostgreSQL:']], [[' SELECT column FROM table\nORDER BY RAND()\nLIMIT 1\n']], ['How to request a random row in SQL?'], 5], [(19412, 1), [['Select a random row with PostgreSQL:'], ['Select a random row with Microsoft SQL Server:']], [[' SELECT column FROM table\nORDER BY RANDOM()\nLIMIT 1\n']], ['How to request a random row in SQL?'], 5], [(19412, 2), [['Select a random row with Microsoft SQL Server:'], ['Select a random row with IBM DB2']], [[' SELECT TOP 1 column FROM table\nORDER BY NEWID()\n']], ['How to request a random row in SQL?'], 5], [(19412, 3), [['Select a random row with IBM DB2'], ['Select a random record with Oracle:']], [[' SELECT column, RAND() as IDX \nFROM table \nORDER BY IDX FETCH FIRST 1 ROWS ONLY\n']], ['How to request a random row in SQL?'], 5], [(19412, 4), [['Select a random record with Oracle:'], ['-10000']], [[' SELECT column FROM\n( SELECT column FROM table\nORDER BY dbms_random.value )\nWHERE rownum = 1\n']], ['How to request a random row in SQL?'], 5], [(19516, 0), [['Create one Message table, containing a unique MessageId and the various properties you need to store for a message.'], ['Create two link tables - QuoteMessage and JobMessage. These will just contain two fields each, foreign keys to the Quote/Job and the Message.']], [[' Table: Message\nFields: Id, TimeReceived, MessageDetails, WhateverElse...\n']], ['SQL2005: Linking a table to multiple tables and retaining Ref Integrity?'], 2], [(19516, 1), [['Create two link tables - QuoteMessage and JobMessage. These will just contain two fields each, foreign keys to the Quote/Job and the Message.'], ["In this way you have defined the data properties of a Message in one place only (making it easy to extend, and to query across all messages), but you also have the referential integrity linking Quotes and Jobs to any number of messages. Indeed, both a Quote and Job could be linked to the  same  message (I'm not sure if that is appropriate to your business model, but at least the data model gives you the option)."]], [[' Table: QuoteMessage\nFields: QuoteId, MessageId\n\nTable: JobMessage\nFields: JobId, MessageId\n']], ['SQL2005: Linking a table to multiple tables and retaining Ref Integrity?'], 2], [(20081, 0), [['I set up your test case using:'], ['I\'ve used the  lead  function to get the next date and then wrapped it all as a sub-query just to get the "A" records and add the end date if there is one.']], [[" create table employee_job (\n    emp_id integer,\n    job_id integer,\n    status varchar2(1 char),\n    eff_date date\n    );  \n\ninsert into employee_job values (1,10,'A',to_date('10-JAN-2008','DD-MON-YYYY'));\ninsert into employee_job values (2,11,'A',to_date('13-JAN-2008','DD-MON-YYYY'));\ninsert into employee_job values (1,12,'A',to_date('20-JAN-2008','DD-MON-YYYY'));\ninsert into employee_job values (2,11,'T',to_date('01-FEB-2008','DD-MON-YYYY'));\ninsert into employee_job values (1,10,'T',to_date('02-FEB-2008','DD-MON-YYYY'));\ninsert into employee_job values (2,11,'A',to_date('20-FEB-2008','DD-MON-YYYY'));\n\ncommit;\n"]], ['Best way to encapsulate complex Oracle PL/SQL cursor logic as a view?'], 3], [(20081, 1), [['I\'ve used the  lead  function to get the next date and then wrapped it all as a sub-query just to get the "A" records and add the end date if there is one.'], ["I'm sure there's some use cases I've missed but you get the idea. Analytic functions are your friend :)"]], [[" select\n    emp_id,\n    job_id,\n    eff_date start_date,\n    decode(next_status,'T',next_eff_date,null) end_date\nfrom\n    (\n    select\n        emp_id,\n        job_id,\n        eff_date,\n        status,\n        lead(eff_date,1,null) over (partition by emp_id, job_id order by eff_date, status) next_eff_date,\n        lead(status,1,null) over (partition by emp_id, job_id order by eff_date, status) next_status\n    from\n        employee_job\n    )\nwhere\n    status = 'A'\norder by\n    start_date,\n    emp_id,\n    job_id\n"]], ['Best way to encapsulate complex Oracle PL/SQL cursor logic as a view?'], 3], [(20081, 2), [["I'm sure there's some use cases I've missed but you get the idea. Analytic functions are your friend :)"], ['-10000']], [[' EMP_ID   JOB_ID     START_DATE     END_DATE            \n  1        10       10-JAN-2008    02-FEB-2008         \n  2        11       13-JAN-2008    01-FEB-2008         \n  2        11       20-FEB-2008                              \n  1        12       20-JAN-2008                              \n']], ['Best way to encapsulate complex Oracle PL/SQL cursor logic as a view?'], 3], [(23399, 0), [["If it's only going to be Allow/Deny, then a simple linking table between Users and Resources would work fine.  If there is an entry keyed to the User-Resource in the linking table, allow access."], ['and the sql would be something like ']], [[' UserResources\n-------------\nUserId FK->Users\nResourceId FK->Resources\n']], ['Is it better to structure an SQL table to have a match, or return no result'], 2], [(23399, 1), [['and the sql would be something like '], ['With a clustered index on (UserId and ResourceId), the query would be blindingly fast even with millions of records.']], [[' if exists (select 1 from UserResources \nwhere UserId = @uid and ResourceId=@rid)\nset @allow=1;\n']], ['Is it better to structure an SQL table to have a match, or return no result'], 2], [(24715, 0), [['tags table (primary key id)'], ['If you wish to really do an and in this case, you will need a  group by , and a  having count = <number of ors>  in your query for example.']], [[" SELECT distinct o.*\n  from object o join objecttags ot on o.Id = ot.objectid\n                join tags t on ot.tagid = t.id\n where t.Name = 'fruit' or t.name = 'food';\n"]], ['SQL many-to-many matching'], 2], [(24715, 1), [['If you wish to really do an and in this case, you will need a  group by , and a  having count = <number of ors>  in your query for example.'], ['-10000']], [["   SELECT distinct o.name, count(*) as count\n    from object o join objecttags ot on o.Id = ot.objectid\n                  join tags t on ot.tagid = t.id\n   where t.Name = 'fruit' or t.name = 'food'\ngroup by o.name\n  having count = 2;\n"]], ['SQL many-to-many matching'], 2], [(30563, 0), [["Maybe I'm not understanding the complexity of what you're asking but... shouldn't this do?"], ["And if you don't care which of a or b the item belongs to then this will do:"]], [[" SELECT groupname, SUM(value)\nFROM items\nWHERE groupname IN ('a', 'b')\nGROUP BY groupname\n"]], ['Returning the sum of items depending on which type it is'], 2], [(30563, 1), [["And if you don't care which of a or b the item belongs to then this will do:"], ['-10000']], [[" SELECT SUM(value)\nFROM items\nWHERE groupname IN ('a', 'b')\n"]], ['Returning the sum of items depending on which type it is'], 2], [(30710, 0), [['In order to set up your objects for mocking, you probably need to use some sort of inversion of control/ dependency injection pattern, as in the following pseudo-code:'], ['Now in your unit test, you create a mock of FooDataProvider, which allows you to call the method GetAllFoos without having to actually hit the database.']], [[' class Bar\n{\n    private FooDataProvider _dataProvider;\n\n    public instantiate(FooDataProvider dataProvider) {\n        _dataProvider = dataProvider;\n    }\n\n    public getAllFoos() {\n        // instead of calling Foo.GetAll() here, we are introducing an extra layer of abstraction\n        return _dataProvider.GetAllFoos();\n    }\n}\n\nclass FooDataProvider\n{\n    public Foo[] GetAllFoos() {\n        return Foo.GetAll();\n    }\n}\n']], ['How to unit test an object with database queries'], 2], [(30710, 1), [['Now in your unit test, you create a mock of FooDataProvider, which allows you to call the method GetAllFoos without having to actually hit the database.'], ['A common mocking scenario, in a nutshell.  Of course you will still probably want to unit test your actual database calls too, for which you will need to hit the database.']], [[' class BarTests\n{\n    public TestGetAllFoos() {\n        // here we set up our mock FooDataProvider\n        mockRepository = MockingFramework.new()\n        mockFooDataProvider = mockRepository.CreateMockOfType(FooDataProvider);\n\n        // create a new array of Foo objects\n        testFooArray = new Foo[] {Foo.new(), Foo.new(), Foo.new()}\n\n        // the next statement will cause testFooArray to be returned every time we call FooDAtaProvider.GetAllFoos,\n        // instead of calling to the database and returning whatever is in there\n        // ExpectCallTo and Returns are methods provided by our imaginary mocking framework\n        ExpectCallTo(mockFooDataProvider.GetAllFoos).Returns(testFooArray)\n\n        // now begins our actual unit test\n        testBar = new Bar(mockFooDataProvider)\n        baz = testBar.GetAllFoos()\n\n        // baz should now equal the testFooArray object we created earlier\n        Assert.AreEqual(3, baz.length)\n    }\n}\n']], ['How to unit test an object with database queries'], 2], [(30856, 0), [['-10000'], ['INTO OUTFILE creates a file on the server; if you are on a client and want it there, do:']], [[' SELECT a,b,a+b \n  FROM test_table\n  INTO OUTFILE \'/tmp/result.txt\'\n  FIELDS TERMINATED BY \',\' OPTIONALLY ENCLOSED BY \'"\'\n  LINES TERMINATED BY \'\\n\'\n']], ['MySQL Results to a File'], 2], [(30856, 1), [['INTO OUTFILE creates a file on the server; if you are on a client and want it there, do:'], ['-10000']], [[' mysql -u you -p -e "SELECT ..." >  file_name \n']], ['MySQL Results to a File'], 2], [(32059, 0), [['I would suggest this:'], ['This may not give the output in descending order of number of tags, but try adding:']], [[' SELECT page.ID, page.content, count(*) AS uniquetags\nFROM\n   (  SELECT DISTINCT page.content, page.ID, page-tag.tag-id \n      FROM page INNER JOIN page-tag ON page.ID=page-tag.page-ID \n      WHERE page-tag.tag-id IN (1, 3, 8) \n   )\n    GROUP BY page.ID\n']], ['How can I get the number of occurrences in a SQL IN clause?'], 2], [(32059, 1), [['This may not give the output in descending order of number of tags, but try adding:'], ['at the end. My uncertainty is whether you can use  ORDER BY  outside of grouping in SQL Server. If not, then you may need to nest the whole thing in another  SELECT .']], [['       ORDER BY uniquetags DESC\n']], ['How can I get the number of occurrences in a SQL IN clause?'], 2], [(35320, 0), [["If you just want want the highest recursion depth couldn't you do something like this?Then, when you actually query the CTE just look for the row with max(Depth)?  Like so:"], ['or, adapting what trevor suggests, this could be used with the same CTE:  ']], [[' DECLARE @LookupID int\n\n--Our test value\nSET @LookupID = 1;\n\nWITH cteLevelOne (ParentID, CustID, Depth) AS\n(\n        SELECT   a.ParentID, a.CustID, 1\n        FROM     tblCustomer AS a\n        WHERE    a.CustID = @LookupID\n    UNION ALL\n        SELECT   a.ParentID, a.CustID, c.Depth + 1\n        FROM     tblCustomer AS a\n        INNER JOIN cteLevelOne AS c ON a.CustID = c.ParentID \n        WHERE c.CustID <> a.CustID\n)\nselect * from CTELevelone where Depth = (select max(Depth) from CTELevelone)\n']], ['How do you get the last record generated in a recursive CTE?'], 2], [(35320, 1), [['or, adapting what trevor suggests, this could be used with the same CTE:  '], ["I don't think CustomerID was necessarily what you wanted to order by in the case you described, but I wasn't perfectly clear on the question either."]], [[' select top 1 * from CTELevelone order by Depth desc\n']], ['How do you get the last record generated in a recursive CTE?'], 2], [(36959, 0), [['Postgres variables are created through the \\set command, for example ...'], ['... and can then be substituted, for example, as ...']], [[' \\set myvariable value\n']], ['How do you use script variables in PostgreSQL?'], 7], [(36959, 1), [['... and can then be substituted, for example, as ...'], ['... or ...']], [[' SELECT * FROM :myvariable.table1;\n']], ['How do you use script variables in PostgreSQL?'], 7], [(36959, 2), [['... or ...'], ['... but, if you want to use the variable as the value in a conditional string query, such as ...']], [[' SELECT * FROM table1 WHERE :myvariable IS NULL;\n']], ['How do you use script variables in PostgreSQL?'], 7], [(36959, 3), [['... but, if you want to use the variable as the value in a conditional string query, such as ...'], ['... then you need to include the quotes in the variable itself as the above will not work.  Instead define your variable as such ...']], [[" SELECT * FROM table1 WHERE column1 = ':myvariable';\n"]], ['How do you use script variables in PostgreSQL?'], 7], [(36959, 4), [['... then you need to include the quotes in the variable itself as the above will not work.  Instead define your variable as such ...'], ['However, if, like me, you ran into a situation in which you wanted to make a string from an existing variable, I found the trick to be this ...']], [[" \\set myvariable 'value'\n"]], ['How do you use script variables in PostgreSQL?'], 7], [(36959, 5), [['However, if, like me, you ran into a situation in which you wanted to make a string from an existing variable, I found the trick to be this ...'], ['Now you have both a quoted and unquoted variable of the same string!  And you can do something like this ....']], [[" \\set quoted_myvariable '\\'' :myvariable '\\''\n"]], ['How do you use script variables in PostgreSQL?'], 7], [(36959, 6), [['Now you have both a quoted and unquoted variable of the same string!  And you can do something like this ....'], ['-10000']], [[' INSERT INTO :myvariable.table1 SELECT * FROM table2 WHERE column1 = :quoted_myvariable;\n']], ['How do you use script variables in PostgreSQL?'], 7], [(38549, 0), [['Suppose you have two tables, with a single column each, and data as follows:'], ['An inner join using either of the equivalent queries gives the intersection of the two tables, i.e. the two rows they have in common.']], [[' A    B\n-    -\n1    3\n2    4\n3    5\n4    6\n']], ['What is the difference between "INNER JOIN" and "OUTER JOIN"?'], 5], [(38549, 1), [['An inner join using either of the equivalent queries gives the intersection of the two tables, i.e. the two rows they have in common.'], ['A left outer join will give all rows in A, plus any common rows in B.']], [[' select * from a INNER JOIN b on a.a = b.b;\nselect a.*, b.*  from a,b where a.a = b.b;\n\na | b\n--+--\n3 | 3\n4 | 4\n']], ['What is the difference between "INNER JOIN" and "OUTER JOIN"?'], 5], [(38549, 2), [['A left outer join will give all rows in A, plus any common rows in B.'], ['A right outer join will give all rows in B, plus any common rows in A.']], [[' select * from a LEFT OUTER JOIN b on a.a = b.b;\nselect a.*, b.*  from a,b where a.a = b.b(+);\n\na |  b\n--+-----\n1 | null\n2 | null\n3 |    3\n4 |    4\n']], ['What is the difference between "INNER JOIN" and "OUTER JOIN"?'], 5], [(38549, 3), [['A right outer join will give all rows in B, plus any common rows in A.'], ["A full outer join will give you the union of A and B, i.e. all the rows in A and all the rows in B. If something in A doesn't have a corresponding datum in B, then the B portion is null, and vice versa."]], [[' select * from a RIGHT OUTER JOIN b on a.a = b.b;\nselect a.*, b.*  from a,b where a.a(+) = b.b;\n\na    |  b\n-----+----\n3    |  3\n4    |  4\nnull |  5\nnull |  6\n']], ['What is the difference between "INNER JOIN" and "OUTER JOIN"?'], 5], [(38549, 4), [["A full outer join will give you the union of A and B, i.e. all the rows in A and all the rows in B. If something in A doesn't have a corresponding datum in B, then the B portion is null, and vice versa."], ['-10000']], [[' select * from a FULL OUTER JOIN b on a.a = b.b;\n\n a   |  b\n-----+-----\n   1 | null\n   2 | null\n   3 |    3\n   4 |    4\nnull |    6\nnull |    5\n']], ['What is the difference between "INNER JOIN" and "OUTER JOIN"?'], 5], [(38940, 0), [['-10000'], ['or for clarity']], [[" SELECT Field1, Field2, 'Value' Field3 FROM Table\n"]], ['Generate field in MySQL SELECT'], 2], [(38940, 1), [['or for clarity'], ['-10000']], [[" SELECT Field1, Field2, 'Value' AS Field3 FROM Table\n"]], ['Generate field in MySQL SELECT'], 2], [(43870, 0), [['Recent versions of Postgres (since late 2010) have the  string_agg(expression, delimiter)  function that will do exactly what the question asked for, even letting you specify the delimiter string:'], ['-10000']], [[" SELECT company_id, string_agg(employee, ', ')\nFROM mytable\nGROUP BY company_id;\n"]], ["How to concatenate strings of a string field in a PostgreSQL 'group by' query?"], 7], [(43870, 1), [['-10000'], ['-10000']], [[" SELECT company_id, array_to_string(array_agg(employee), ', ')\nFROM mytable\nGROUP BY company_id;\n"]], ["How to concatenate strings of a string field in a PostgreSQL 'group by' query?"], 7], [(43870, 2), [['-10000'], ['In order to get the ", " inserted in between them without having it at the end, you might want to make your own concatenation function and substitute it for the "textcat" above. Here is one I put together but haven\'t tested ( update:  tested on 8.3.12 and working fine):']], [[" CREATE AGGREGATE textcat_all(\n  basetype    = text,\n  sfunc       = textcat,\n  stype       = text,\n  initcond    = ''\n);\n"]], ["How to concatenate strings of a string field in a PostgreSQL 'group by' query?"], 7], [(43870, 3), [['In order to get the ", " inserted in between them without having it at the end, you might want to make your own concatenation function and substitute it for the "textcat" above. Here is one I put together but haven\'t tested ( update:  tested on 8.3.12 and working fine):'], ['Note:  The function above will output a comma even if the value in the row is null/empty, which outputs:']], [[" CREATE FUNCTION commacat(acc text, instr text) RETURNS text AS $$\n  BEGIN\n    IF acc IS NULL OR acc = '' THEN\n      RETURN instr;\n    ELSE\n      RETURN acc || ', ' || instr;\n    END IF;\n  END;\n$$ LANGUAGE plpgsql;\n"]], ["How to concatenate strings of a string field in a PostgreSQL 'group by' query?"], 7], [(43870, 4), [['Note:  The function above will output a comma even if the value in the row is null/empty, which outputs:'], ['If you would prefer to remove extra commas to output:']], [[' a, b, c, , e, , g\n']], ["How to concatenate strings of a string field in a PostgreSQL 'group by' query?"], 7], [(43870, 5), [['If you would prefer to remove extra commas to output:'], ['just add an  ELSIF  check to the function:']], [[' a, b, c, e, g\n']], ["How to concatenate strings of a string field in a PostgreSQL 'group by' query?"], 7], [(43870, 6), [['just add an  ELSIF  check to the function:'], ['-10000']], [[" CREATE FUNCTION commacat_ignore_nulls(acc text, instr text) RETURNS text AS $$\n  BEGIN\n    IF acc IS NULL OR acc = '' THEN\n      RETURN instr;\n    ELSIF instr IS NULL OR instr = '' THEN\n      RETURN acc;\n    ELSE\n      RETURN acc || ', ' || instr;\n    END IF;\n  END;\n$$ LANGUAGE plpgsql;\n"]], ["How to concatenate strings of a string field in a PostgreSQL 'group by' query?"], 7], [(44780, 0), [["Dr Zimmerman is on the right track here. I'd be looking to write a stored procedure that has a cursor looping through user objects using execute immediate to affect the grant. Something like this:"], ['Then you can fire and forget:']], [["  IF EXISTS (\n    SELECT 1 FROM sysobjects\n    WHERE name = 'sp_grantastic'\n    AND type = 'P'\n)\nDROP PROCEDURE sp_grantastic\nGO\nCREATE PROCEDURE sp_grantastic\nAS\nDECLARE\n @object_name VARCHAR(30)\n,@time       VARCHAR(8)\n,@rights     VARCHAR(20)\n,@role       VARCHAR(20)\n\nDECLARE c_objects CURSOR FOR\n    SELECT  name\n    FROM    sysobjects\n    WHERE   type IN ('P', 'U', 'V')\n    FOR READ ONLY\n\nBEGIN\n\n    SELECT  @rights = 'ALL'\n           ,@role = 'PUBLIC'\n\n    OPEN c_objects\n    WHILE (1=1)\n    BEGIN\n        FETCH c_objects INTO @object_name\n        IF @@SQLSTATUS <> 0 BREAK\n\n        SELECT @time = CONVERT(VARCHAR, GetDate(), 108)\n        PRINT '[%1!] hitting up object %2!', @time, @object_name\n        EXECUTE('GRANT '+ @rights +' ON '+ @object_name+' TO '+@role)\n\n    END\n\n    PRINT '[%1!] fin!', @time\n\n    CLOSE c_objects\n    DEALLOCATE CURSOR c_objects\nEND\nGO\nGRANT ALL ON sp_grantastic TO PUBLIC\nGO\n"]], ["What's the best way to implement a SQL script that will grant permissions to a database role on all the user tables in a database?"], 2], [(44780, 1), [['Then you can fire and forget:'], ['-10000']], [[' EXEC sp_grantastic\n']], ["What's the best way to implement a SQL script that will grant permissions to a database role on all the user tables in a database?"], 2], [(49404, 0), [['I think the only solution with your table structure is to work with a subquery:'], ['However I suggest you add a "IsCurrent" column that is 0 if it\'s not the latest price or 1 if it is the latest. This will add the possible risk of inconsistent data, but it will speed up the whole process a lot when the table gets bigger (if it is in an index). Then all you need to do is to...']], [[' SELECT *\n   FROM Thing\n   WHERE ID IN (SELECT max(ID) FROM Thing \n                   WHERE ThingID IN (1,2,3,4)\n                   GROUP BY ThingID)\n']], ['SQL Query to get latest price'], 3], [(49404, 1), [['However I suggest you add a "IsCurrent" column that is 0 if it\'s not the latest price or 1 if it is the latest. This will add the possible risk of inconsistent data, but it will speed up the whole process a lot when the table gets bigger (if it is in an index). Then all you need to do is to...'], ['Okay, Markus updated the question to show that ID is a uniqueid, not an int. That makes writing the query even more complex.']], [[' SELECT *\n   FROM Thing\n   WHERE ThingID IN (1,2,3,4)\n     AND IsCurrent = 1\n']], ['SQL Query to get latest price'], 3], [(49404, 2), [['Okay, Markus updated the question to show that ID is a uniqueid, not an int. That makes writing the query even more complex.'], ['I\'d really suggest using either a "IsCurrent" column or go with the other suggestion found in the answers and use "current price" table and a separate "price history" table (which would ultimately be the fastest, because it keeps the price table itself small).']], [[' SELECT T.* \n   FROM Thing T\n   JOIN (SELECT ThingID, max(PriceDateTime)\n            WHERE ThingID IN (1,2,3,4)\n            GROUP BY ThingID) X ON X.ThingID = T.ThingID \n                                AND X.PriceDateTime = T.PriceDateTime\n   WHERE ThingID IN (1,2,3,4)\n']], ['SQL Query to get latest price'], 3], [(49925, 0), [['-10000'], ['Result:  ']], [[" SELECT 'foo' AS bar UNION SELECT 'foo' AS bar\n"]], ['What is the difference between UNION and UNION ALL?'], 4], [(49925, 1), [['Result:  '], ['-10000']], [[' +-----+\n| bar |\n+-----+\n| foo |\n+-----+\n1 row in set (0.00 sec)\n']], ['What is the difference between UNION and UNION ALL?'], 4], [(49925, 2), [['-10000'], ['Result:']], [[" SELECT 'foo' AS bar UNION ALL SELECT 'foo' AS bar\n"]], ['What is the difference between UNION and UNION ALL?'], 4], [(49925, 3), [['Result:'], ['-10000']], [[' +-----+\n| bar |\n+-----+\n| foo |\n| foo |\n+-----+\n2 rows in set (0.00 sec)\n']], ['What is the difference between UNION and UNION ALL?'], 4], [(51264, 0), [['To see all the tables you have access to'], ['To select all tables for the current logged in schema (eg, your tables)']], [[" select table_name from all_tables where owner='<SCHEMA>';\n"]], ['What table/view do you query against to select all the table names in a schema in Oracle?'], 2], [(51264, 1), [['To select all tables for the current logged in schema (eg, your tables)'], ['-10000']], [[' select table_name from user_tables;\n']], ['What table/view do you query against to select all the table names in a schema in Oracle?'], 2], [(52239, 0), [['Have you tried logging into Linux as your installed Oracle user then'], ["When you log in you'll be able to change your password."]], [[' sqlplus "/ as sysdba"\n']], ['How to recover or change Oracle sysdba password'], 2], [(52239, 1), [["When you log in you'll be able to change your password."], ['Good luck :)']], [[' alter user sys identified by <new password>;\n']], ['How to recover or change Oracle sysdba password'], 2], [(54418, 0), [['-10000'], ['is  roughly  equivalent to:  ']], [[' SELECT DISTINCT a,b,c FROM t\n']], ['How do I (or can I) SELECT DISTINCT on multiple columns?'], 3], [(54418, 1), [['is  roughly  equivalent to:  '], ["For your query, I'd do it like this:"]], [[' SELECT a,b,c FROM t GROUP BY a,b,c\n']], ['How do I (or can I) SELECT DISTINCT on multiple columns?'], 3], [(54418, 2), [["For your query, I'd do it like this:"], ['-10000']], [[" UPDATE sales\nSET status='ACTIVE'\nWHERE id IN\n(\n    SELECT id\n    FROM sales S\n    INNER JOIN\n    (\n        SELECT saleprice, saledate\n        FROM sales\n        GROUP BY saleprice, saledate\n        HAVING COUNT(*) = 1 \n    ) T\n    ON S.saleprice=T.saleprice AND s.saledate=T.saledate\n )\n"]], ['How do I (or can I) SELECT DISTINCT on multiple columns?'], 3], [(55899, 0), [['One thing to note that queries that use parameters will show up once with entries like '], ['while others that dont will show up multiple times such as:']], [[' and TABLETYPE=’:b16’\n']], ['How to see the actual Oracle SQL statement that is being executed'], 4], [(55899, 1), [['while others that dont will show up multiple times such as:'], ['An example of these tables in action is the following SQL to find the top 20 diskread hogs. You could change this by removing the  WHERE rownum <= 20  and maybe add  ORDER BY module . You often find the module will give you a bog clue as to what software is running the query (eg: "TOAD 9.0.1.8", "JDBC Thin Client", "runcbl@somebox (TNS V1-V3)" etc)']], [[' and TABLETYPE=’MT’\n']], ['How to see the actual Oracle SQL statement that is being executed'], 4], [(55899, 2), [['An example of these tables in action is the following SQL to find the top 20 diskread hogs. You could change this by removing the  WHERE rownum <= 20  and maybe add  ORDER BY module . You often find the module will give you a bog clue as to what software is running the query (eg: "TOAD 9.0.1.8", "JDBC Thin Client", "runcbl@somebox (TNS V1-V3)" etc)'], ['Note that if the query is long .. you will have to query v_$sqltext. This stores the whole query. You will have to look up the ADDRESS and HASH_VALUE and pick up all the pieces. Eg:']], [[" SELECT \n module, \n sql_text, \n username, \n disk_reads_per_exec, \n buffer_gets, \n disk_reads, \n parse_calls, \n sorts, \n executions, \n rows_processed, \n hit_ratio, \n first_load_time, \n sharable_mem, \n persistent_mem, \n runtime_mem, \n cpu_time, \n elapsed_time, \n address, \n hash_value \nFROM \n  (SELECT\n   module, \n   sql_text , \n   u.username , \n   round((s.disk_reads/decode(s.executions,0,1, s.executions)),2)  disk_reads_per_exec, \n   s.disk_reads , \n   s.buffer_gets , \n   s.parse_calls , \n   s.sorts , \n   s.executions , \n   s.rows_processed , \n   100 - round(100 *  s.disk_reads/greatest(s.buffer_gets,1),2) hit_ratio, \n   s.first_load_time , \n   sharable_mem , \n   persistent_mem , \n   runtime_mem, \n   cpu_time, \n   elapsed_time, \n   address, \n   hash_value \n  FROM\n   sys.v_$sql s, \n   sys.all_users u \n  WHERE\n   s.parsing_user_id=u.user_id \n   and UPPER(u.username) not in ('SYS','SYSTEM') \n  ORDER BY\n   4 desc) \nWHERE\n rownum <= 20;\n"]], ['How to see the actual Oracle SQL statement that is being executed'], 4], [(55899, 3), [['Note that if the query is long .. you will have to query v_$sqltext. This stores the whole query. You will have to look up the ADDRESS and HASH_VALUE and pick up all the pieces. Eg:'], ['-10000']], [[" SELECT\n *\nFROM\n sys.v_$sqltext\nWHERE\n address = 'C0000000372B3C28'\n and hash_value = '1272580459'\nORDER BY \n address, hash_value, command_type, piece\n;\n"]], ['How to see the actual Oracle SQL statement that is being executed'], 4], [(58540, 0), [["The expression builder can dynamically create expressions using variable to create 'parametised queries'. \nSo the following 'normal' query:"], ['Can be written in the expression builder as:']], [[' select * from book where book.BOOK_ID = ?\n']], ['How to resolve SQL query parameters mapping issues while using Oracle OLE DB provider?'], 2], [(58540, 1), [['Can be written in the expression builder as:'], ['You can then do null handling and data conversion using the expression builder.']], [[' "select * from book where book.BOOK_ID = " + @[User::BookID]\n']], ['How to resolve SQL query parameters mapping issues while using Oracle OLE DB provider?'], 2], [(58709, 0), [['I solved this by writing a SQLCLR-procedure as Eric Z Beard suggested. The assembly must be signed with a strong name key file.'], ['Created a key and a login:']], [[' using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Data.SqlTypes;\nusing Microsoft.SqlServer.Server;\n\npublic partial class StoredProcedures\n{\n    [Microsoft.SqlServer.Server.SqlProcedure]\n    public static int Debug(string s)\n    {\n        System.Diagnostics.Debug.WriteLine(s);\n            return 0;\n        }\n    }\n}\n']], ['How to log in T-SQL'], 4], [(58709, 1), [['Created a key and a login:'], ['Imported it into SQL Server:']], [[" USE [master]\nCREATE ASYMMETRIC KEY DebugProcKey FROM EXECUTABLE FILE =\n'C:\\..\\SqlServerProject1\\bin\\Debug\\SqlServerProject1.dll'\n\nCREATE LOGIN DebugProcLogin FROM ASYMMETRIC KEY DebugProcKey \n\nGRANT UNSAFE ASSEMBLY TO DebugProcLogin  \n"]], ['How to log in T-SQL'], 4], [(58709, 2), [['Imported it into SQL Server:'], ['Then I was able to log in T-SQL procedures using']], [[" USE [mydb]\nCREATE ASSEMBLY SqlServerProject1 FROM\n'C:\\..\\SqlServerProject1\\bin\\Debug\\SqlServerProject1.dll' \nWITH PERMISSION_SET = unsafe\n\nCREATE FUNCTION dbo.Debug( @message as nvarchar(200) )\nRETURNS int\nAS EXTERNAL NAME SqlServerProject1.[StoredProcedures].Debug\n"]], ['How to log in T-SQL'], 4], [(58709, 3), [['Then I was able to log in T-SQL procedures using'], ['-10000']], [[" exec Debug @message = 'Hello World'\n"]], ['How to log in T-SQL'], 4], [(59444, 0), [['Try '], ['or for SQL Server 2000 and above the following is easier to parse :) ']], [[' SELECT @@VERSION \n']], ['How do you check what version of SQL Server for a database using TSQL?'], 2], [(59444, 1), [['or for SQL Server 2000 and above the following is easier to parse :) '], ['From:  http://support.microsoft.com/kb/321185']], [[" SELECT SERVERPROPERTY('productversion')\n     , SERVERPROPERTY('productlevel')\n     , SERVERPROPERTY('edition')\n"]], ['How do you check what version of SQL Server for a database using TSQL?'], 2], [(62137, 0), [['For instance, this:'], ['However, if the index contained the columns  column1, column2  and  column3 , then this sql:']], [[' SELECT *\nFROM tablename\nWHERE criteria\n']], ['What is a Covered Index?'], 2], [(62137, 1), [['However, if the index contained the columns  column1, column2  and  column3 , then this sql:'], ["and, provided that particular index could be used to speed up the resolution of which rows to retrieve, the index already contains the values of the columns you're interested in, so it won't have to go to the table to retrieve the rows, but can produce the results directly from the index."]], [[' SELECT column1, column2\nFROM tablename\nWHERE criteria\n']], ['What is a Covered Index?'], 2], [(63447, 0), [['The  CASE  statement is the closest to IF in SQL and is supported on all versions of SQL Server'], ['You only need to do the  CAST  if you want the result as a boolean value, if you are happy with an  int , this works: ']], [[" SELECT CAST(\n             CASE \n                  WHEN Obsolete = 'N' or InStock = 'Y' \n                     THEN 1 \n                  ELSE 0 \n             END AS bit) as Saleable, * \nFROM Product\n"]], ['How do I perform an IF...THEN in an SQL SELECT?'], 3], [(63447, 1), [['You only need to do the  CAST  if you want the result as a boolean value, if you are happy with an  int , this works: '], ['SQL Server Denali (SQL Server 2012) adds the  IIF  statement which is also available in  access : (pointed out by  Martin Smith )']], [[" SELECT CASE \n            WHEN Obsolete = 'N' or InStock = 'Y' \n               THEN 1 \n               ELSE 0 \n       END as Saleable, * \nFROM Product\n"]], ['How do I perform an IF...THEN in an SQL SELECT?'], 3], [(63447, 2), [['SQL Server Denali (SQL Server 2012) adds the  IIF  statement which is also available in  access : (pointed out by  Martin Smith )'], ['-10000']], [[" SELECT IIF(Obsolete = 'N' or InStock = 'Y', 1, 0) as Saleable, * FROM Product\n"]], ['How do I perform an IF...THEN in an SQL SELECT?'], 3], [(65205, 0), [["Store an integer column in your table called 'position'.  Record a 0 for the first item in your list, a 1 for the second item, etc.  Index that column in your database, and when you want to pull your values out, sort by that column."], ['To insert a value at index 3, modify the positions of rows 3 and above, and then insert:']], [['  alter table linked_list add column position integer not null default 0;\n alter table linked_list add index position_index (position);\n select * from linked_list order by position;\n']], ['Linked List in SQL'], 2], [(65205, 1), [['To insert a value at index 3, modify the positions of rows 3 and above, and then insert:'], ['-10000']], [['  update linked_list set position = position + 1 where position >= 3;\n insert into linked_list (my_value, position) values ("new value", 3); \n']], ['Linked List in SQL'], 2], [(67093, 0), [['For InnoDB, the following seems to work: create the new empty database, then rename each table in turn into the new database:'], ['For scripting in a shell, you can use either of the following:']], [[' RENAME TABLE old_db.table TO new_db.table;\n']], ['How do I quickly rename a MySQL database (change schema name)?'], 4], [(67093, 1), [['For scripting in a shell, you can use either of the following:'], ['Or']], [[' mysql -u username -ppassword old_db -sNe \'show tables\' | while read table; \\ \n    do mysql -u username -ppassword -sNe "rename table old_db.$table to new_db.$table"; done\n']], ['How do I quickly rename a MySQL database (change schema name)?'], 4], [(67093, 2), [['Or'], ['Also, if you have stored procedures, you can copy them afterwards:']], [[' for table in `mysql -u root -ppassword -s -N -e "use old_db;show tables from old_db;"`; do mysql -u root -ppassword -s -N -e "use old_db;rename table old_db.$table to new_db.$table;"; done;\n']], ['How do I quickly rename a MySQL database (change schema name)?'], 4], [(67093, 3), [['Also, if you have stored procedures, you can copy them afterwards:'], ['-10000']], [[' mysqldump -R old_db | mysql new_db\n']], ['How do I quickly rename a MySQL database (change schema name)?'], 4], [(75819, 0), [['Try this:'], ['Then, in your select clause, use something like this:']], [[" LEFT JOIN weblog_data AS pwd1 ON (pwd.field_id_41 != '' AND pwd.field_id_41 = ewd.field_id_32)\nLEFT JOIN weblog_data AS pwd2 ON (pwd.field_id_41 != '' AND pwd.field_id_41 LIKE CONCAT('%', ewd.field_id_32, '%'))\n"]], ['SQL Query - Use Like only if no exact match exists?'], 3], [(75819, 1), [['Then, in your select clause, use something like this:'], ['however, if you are dealing with a field that can be null in pwd, that will cause problems, this should work though:']], [[' select\n  isnull(pwd1.field, pwd2.field)\n']], ['SQL Query - Use Like only if no exact match exists?'], 3], [(75819, 2), [['however, if you are dealing with a field that can be null in pwd, that will cause problems, this should work though:'], ["You'll also have to make sure to do a group by, as the join to pwd2 will still add rows to your result set, even if you end up ignoring the data in it."]], [[' select\n  case pwd1.nonnullfield is null then pwd2.field else pwd1.field end\n']], ['SQL Query - Use Like only if no exact match exists?'], 3], [(79789, 0), [["Create a table with just time in it from midnight to midnight containing each minute of the day.  In the data warehouse world we would call this a time dimension.  Here's an example:"], ['an example of the data in the table would be']], [[' TIME_DIM\n -id\n -time_of_day\n -interval_15 \n -interval_30\n']], ['Elegant method for drawing hourly bar chart from time-interval data?'], 3], [(79789, 1), [['an example of the data in the table would be'], ['Then all you have to do is join your table to the time dimension and then group by interval_15.  For example:']], [[' id   time_of_day    interval_15    interval_30\n1    00:00          00:00          00:00\n...\n30   00:23          00:15          00:00\n...\n100  05:44          05:30          05:30\n']], ['Elegant method for drawing hourly bar chart from time-interval data?'], 3], [(79789, 2), [['Then all you have to do is join your table to the time dimension and then group by interval_15.  For example:'], ['-10000']], [[' SELECT b.interval_15, count(*) \nFROM my_data_table a\nINNER JOIN time_dim b ON a.time_field = b.time\nWHERE a.date_field = now()\nGROUP BY b.interval_15\n']], ['Elegant method for drawing hourly bar chart from time-interval data?'], 3], [(82875, 0), [['The  .tables , and  .schema  "helper" functions don\'t look into ATTACHed databases: they just query the  SQLITE_MASTER  table for the "main" database. Consequently, if you used'], ['then you need to do']], [[' ATTACH some_file.db AS my_db;\n']], ['How to list the tables in an SQLite database file that was opened with ATTACH?'], 3], [(82875, 1), [['then you need to do'], ["Note that temporary tables don't show up with  .tables  either: you have to list  sqlite_temp_master  for that:"]], [[" SELECT name FROM my_db.sqlite_master WHERE type='table';\n"]], ['How to list the tables in an SQLite database file that was opened with ATTACH?'], 3], [(82875, 2), [["Note that temporary tables don't show up with  .tables  either: you have to list  sqlite_temp_master  for that:"], ['-10000']], [[" SELECT name FROM sqlite_temp_master WHERE type='table';\n"]], ['How to list the tables in an SQLite database file that was opened with ATTACH?'], 3], [(85675, 0), [['The format is this:  '], ["Here's an example query based on your example:  "]], [[' dbms_lob.compare(  \nlob_1    IN BLOB,  \nlob_2    IN BLOB,  \namount   IN INTEGER := 18446744073709551615,  \noffset_1 IN INTEGER := 1,  \noffset_2 IN INTEGER := 1)  \nRETURN INTEGER; \n']], ['How do I compare two glob values in Oracle'], 2], [(85675, 1), [["Here's an example query based on your example:  "], ['-10000']], [[' Select key, glob_value  \nFrom source_table Left Join target_table  \n  On source_table.key = target_table.key  \nWhere target_table.glob_value is Null  \n  Or dbms_lob.compare(source_table.glob_value, target_table.glob_value) <> 0\n']], ['How do I compare two glob values in Oracle'], 2], [(86992, 0), [['Well, you could do something like this:'], ['and optionally..']], [[' PickListContent\n\nIdList  IdPick  Text  \n1       1       Apples\n1       2       Oranges\n1       3       Pears\n2       1       Dogs\n2       2       Cats\n']], ['How do you manage "pick lists" in a database'], 2], [(86992, 1), [['and optionally..'], ['-10000']], [[' PickList\n\nId    Description\n1     Fruit\n2     Pets\n']], ['How do you manage "pick lists" in a database'], 2], [(87877, 0), [['-10000'], ['For testing purposes, I added a few new tables to the SCOTT schema that also reference the DEPT table (including a grandchild dependency)']], [["     select parent, child, level from (\nselect parent_table.table_name parent, child_table.table_name child\n from user_tables      parent_table,\n      user_constraints parent_constraint,\n      user_constraints child_constraint,\n      user_tables      child_table\nwhere parent_table.table_name = parent_constraint.table_name\n  and parent_constraint.constraint_type IN( 'P', 'U' )\n  and child_constraint.r_constraint_name = parent_constraint.constraint_name\n  and child_constraint.constraint_type   = 'R'\n  and child_table.table_name = child_constraint.table_name\n  and child_table.table_name != parent_table.table_name\n)\nstart with parent = 'DEPT'\nconnect by prior child = parent\n"]], ['Building a Table Dependency Graph With A Recursive Query'], 3], [(87877, 1), [['For testing purposes, I added a few new tables to the SCOTT schema that also reference the DEPT table (including a grandchild dependency)'], ['and verified that the query returned the expected output']], [[' SQL> create table dept_child2 (\n  2  deptno number references dept( deptno )\n  3  );\n\nTable created.\n\nSQL> create table dept_child3 (\n  2    dept_child3_no number primary key,\n  3    deptno number references dept( deptno )\n  4  );\n\nTable created.\n\nSQL> create table dept_grandchild (\n  2    dept_child3_no number references dept_child3( dept_child3_no )\n  3  );\n\nTable created.\n']], ['Building a Table Dependency Graph With A Recursive Query'], 3], [(87877, 2), [['and verified that the query returned the expected output'], ['-10000']], [[" SQL> ed\nWrote file afiedt.buf\n\n  1  select parent, child, level from (\n  2  select parent_table.table_name parent, child_table.table_name child\n  3   from user_tables      parent_table,\n  4        user_constraints parent_constraint,\n  5        user_constraints child_constraint,\n  6        user_tables      child_table\n  7  where parent_table.table_name = parent_constraint.table_name\n  8    and parent_constraint.constraint_type IN( 'P', 'U' )\n  9    and child_constraint.r_constraint_name = parent_constraint.constraint_name\n 10    and child_constraint.constraint_type   = 'R'\n 11    and child_table.table_name = child_constraint.table_name\n 12    and child_table.table_name != parent_table.table_name\n 13  )\n 14  start with parent = 'DEPT'\n 15* connect by prior child = parent\nSQL> /\n\nPARENT                         CHILD                               LEVEL\n------------------------------ ------------------------------ ----------\nDEPT                           DEPT_CHILD3                             1\nDEPT_CHILD3                    DEPT_GRANDCHILD                         2\nDEPT                           DEPT_CHILD2                             1\nDEPT                           EMP                                     1\n"]], ['Building a Table Dependency Graph With A Recursive Query'], 3], [(91672, 0), [['You have a many-to-many relationship between users and groups. This calls for a separate table to combine users with groups:'], ['To find all users in a given group, you just say:']], [[' User: (UserId[PrimaryKey], UserName etc.)\nGroup: (GroupId[PrimaryKey], GroupName etc.)\nUserInGroup: (UserId[ForeignKey], GroupId[ForeignKey])\n']], ['What is the best way to add users to multiple groups in a database?'], 2], [(91672, 1), [['To find all users in a given group, you just say:'], ['Rule of thumb: If you feel like you need to encode multiple values in the same field, you probably need a foreign key to a separate table. Your tricks with byte-blocks or Unicode chars are just clever tricks to encode multiple values in one field. Database design should not use clever tricks - save that for application code ;-)']], [[' select * from User join UserInGroup on UserId Where GroupId=<the GroupId you want>\n']], ['What is the best way to add users to multiple groups in a database?'], 2], [(92699, 0), [['You can generate a table of working days in advance.'], ['Then do a query such as']], [[' WDId | WDDate\n-----+-----------\n4200 | 2008-01-08\n4201 | 2008-01-09\n4202 | 2008-01-12\n4203 | 2008-01-13\n4204 | 2008-01-16\n4205 | 2008-01-17\n']], ['Non-iterative / Non-looping Way To Calculate Effective Date?'], 2], [(92699, 1), [['Then do a query such as'], ["You would need a stored procedure with a loop to generate the WorkingDays table, but not for regular queries.  It's also fewer round trips to the server than if you use application code to count the days."]], [[" SELECT DeliveryDay.WDDate FROM WorkingDay OrderDay, WorkingDay DeliveryDay, LeadTime, Order where DeliveryDay.WDId = OrderDay.WDId + LeadTime.LTDays AND OrderDay.WDDate = '' AND LeadTime.ProductId = Order.ProductId AND Order.OrderId = 1234\n"]], ['Non-iterative / Non-looping Way To Calculate Effective Date?'], 2], [(97480, 0), [["In Progress 4GL you'd use it something like this:"], ['or:']], [[' FIND customer WHERE cust-num = 123.\ncrowid = ROWID(customer).\n']], ['How to get the ROWID from a Progress database'], 3], [(97480, 1), [['or:'], ["Checking the  Progress SQL Reference  [PDF] shows  ROWID  is also available in SQL as a Progress extension.  You'd use it like so:"]], [[' FIND customer WHERE ROWID(customer) = crowid EXCLUSIVE-LOCK.\n']], ['How to get the ROWID from a Progress database'], 3], [(97480, 2), [["Checking the  Progress SQL Reference  [PDF] shows  ROWID  is also available in SQL as a Progress extension.  You'd use it like so:"], ["Edit:  Edited following Stefan's feedback."]], [[' SELECT ROWID, FirstName, LastName FROM customer WHERE cust-num = 123\n']], ['How to get the ROWID from a Progress database'], 3], [(100504, 0), [['MySQL 3 and 4 (and 5):'], ['which is an alias for']], [[' desc tablename\n']], ['What is the SQL command to return the field names of a table?'], 4], [(100504, 1), [['which is an alias for'], ['SQL Server (from 2000) and MySQL 5:']], [[' show fields from tablename\n']], ['What is the SQL command to return the field names of a table?'], 4], [(100504, 2), [['SQL Server (from 2000) and MySQL 5:'], ['Completing the answer: like people below have said, in SQL Server you can also use the stored procedure  sp_help']], [[" select COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS \nwhere TABLE_NAME = 'tablename'\n"]], ['What is the SQL command to return the field names of a table?'], 4], [(100504, 3), [['Completing the answer: like people below have said, in SQL Server you can also use the stored procedure  sp_help'], ['-10000']], [[" exec sp_help 'tablename'\n"]], ['What is the SQL command to return the field names of a table?'], 4], [(101184, 0), [['Run this SQL:'], ["And you'll get a result like:    "]], [[' select * from v$version;\n']], ['How can I confirm a database is Oracle & what version it is using SQL?'], 2], [(101184, 1), [["And you'll get a result like:    "], ['-10000']], [[' BANNER\n----------------------------------------------------------------\nOracle Database 10g Release 10.2.0.3.0 - 64bit Production\nPL/SQL Release 10.2.0.3.0 - Production\nCORE    10.2.0.3.0      Production\nTNS for Solaris: Version 10.2.0.3.0 - Production\nNLSRTL Version 10.2.0.3.0 - Production\n']], ['How can I confirm a database is Oracle & what version it is using SQL?'], 2], [(101198, 0), [['Try this:'], ['The command works too in MySQL:']], [[' mk=# SELECT version();\n                                            version                                            \n-----------------------------------------------------------------------------------------------\n PostgreSQL 8.3.3 on i486-pc-linux-gnu, compiled by GCC cc (GCC) 4.2.3 (Ubuntu 4.2.3-2ubuntu7)\n(1 row)\n']], ['How can I confirm a database is Postgres & what version it is using SQL?'], 2], [(101198, 1), [['The command works too in MySQL:'], ['There is no version command in sqlite as far as I can see.']], [[' mysql> select version();\n+--------------------------------+\n| version()                      |\n+--------------------------------+\n| 5.0.32-Debian_7etch1~bpo.1-log | \n+--------------------------------+\n1 row in set (0.01 sec)\n']], ['How can I confirm a database is Postgres & what version it is using SQL?'], 2], [(104230, 0), [["If the tables are changing over time, you can inline code gen your solution in an SP (pseudo code - you'll have to fill in):"], ['-- or this']], [[" SET @sql = ''\n\nDECLARE CURSOR FOR\nSELECT t.[name] AS TABLE_NAME\nFROM sys.tables t\nWHERE t.[name] LIKE 'SOME_PATTERN_TO_IDENTIFY_THE_TABLES'\n"]], ['how do I query multiple SQL tables for a specific key-value pair?'], 3], [(104230, 1), [['-- or this'], ["Note: In your loop, you can use the COALESCE/NULL propagation trick and leave the string as NULL before the loop, but it's not as clear if you are unfamiliar with the idiom:"]], [[" DECLARE CURSOR FOR\nSELECT t.[name] AS TABLE_NAME\nFROM TABLE_OF_TABLES_TO_SEACRH t\n\nSTART LOOP\n\nIF @sql <> '' SET @sql = @sql + 'UNION ALL '\nSET @sql = 'SELECT * FROM [' + @TABLE_NAME + '] WHERE section_id=value '\n\nEND LOOP\n\nEXEC(@sql)\n"]], ['how do I query multiple SQL tables for a specific key-value pair?'], 3], [(104230, 2), [["Note: In your loop, you can use the COALESCE/NULL propagation trick and leave the string as NULL before the loop, but it's not as clear if you are unfamiliar with the idiom:"], ['-10000']], [[" SET @sql = COALESCE(@sql + ' UNION ALL ', '')\n    + 'SELECT * FROM [' + @TABLE_NAME + '] WHERE section_id=value '\n"]], ['how do I query multiple SQL tables for a specific key-value pair?'], 3], [(106206, 0), [["Edit:  \nFor the initial update, if you are using SQL Server 2005, you could try a CLR function.  Here's a quick one using regex.  Not sure how the performance would compare, I've never used this myself except for a quick test right now."], ['After this is deployed, to update you could just use:']], [[' using System;  \nusing System.Data;  \nusing System.Text.RegularExpressions;  \nusing System.Data.SqlClient;  \nusing System.Data.SqlTypes;  \nusing Microsoft.SqlServer.Server;  \n\npublic partial class UserDefinedFunctions  \n{  \n    [Microsoft.SqlServer.Server.SqlFunction]  \n    public static SqlString StripNonNumeric(SqlString input)  \n    {  \n        Regex regEx = new Regex(@"\\D");  \n        return regEx.Replace(input.Value, "");  \n    }  \n};  \n']], ['Fastest way to remove non-numeric characters from a VARCHAR in SQL Server'], 2], [(106206, 1), [['After this is deployed, to update you could just use:'], ['-10000']], [[' UPDATE table SET phoneNumber = dbo.StripNonNumeric(phoneNumber)\n']], ['Fastest way to remove non-numeric characters from a VARCHAR in SQL Server'], 2], [(108403, 0), [['To avoid deadlocks and PK violations you can use something like this:  '], ['or']], [[' begin tran\nif exists (select * from table with (updlock,serializable) where key = @key)\nbegin\n   update table set ...\n   where key = @key\nend\nelse\nbegin\n   insert into table (key, ...)\n   values (@key, ...)\nend\ncommit tran\n']], ['Solutions for INSERT OR UPDATE on SQL Server'], 2], [(108403, 1), [['or'], ['-10000']], [[' begin tran\n   update table with (serializable) set ...\n   where key = @key\n\n   if @@rowcount = 0\n   begin\n      insert into table (key, ...) values (@key,..)\n   end\ncommit tran\n']], ['Solutions for INSERT OR UPDATE on SQL Server'], 2], [(109232, 0), [["Getting the total number of results and paginating are two different operations. For the sake of this example, let's assume that the query you're dealing with is"], ['In this case, you would determine the total number of results using:']], [[" SELECT * FROM Orders WHERE OrderDate >= '1980-01-01' ORDER BY OrderDate\n"]], ['What is the best way to paginate results in SQL Server'], 3], [(109232, 1), [['In this case, you would determine the total number of results using:'], ['Next, to get actual results back in a paged fashion, the following query would be most efficient:']], [[" SELECT COUNT(*) FROM Orders WHERE OrderDate >= '1980-01-01'\n"]], ['What is the best way to paginate results in SQL Server'], 3], [(109232, 2), [['Next, to get actual results back in a paged fashion, the following query would be most efficient:'], ["This will return rows 1-19 of the original query. The cool thing here, especially for web apps, is that you don't have to keep any state, except the row numbers to be returned."]], [[" SELECT  *\nFROM    ( SELECT    ROW_NUMBER() OVER ( ORDER BY OrderDate ) AS RowNum, *\n          FROM      Orders\n          WHERE     OrderDate >= '1980-01-01'\n        ) AS RowConstrainedResult\nWHERE   RowNum >= 1\n    AND RowNum < 20\nORDER BY RowNum\n"]], ['What is the best way to paginate results in SQL Server'], 3], [(113045, 0), [['On SQL Server 2008 and higher, you should convert to date:'], ['On older versions, you can do the following:']], [[' SELECT CONVERT(date, getdate())\n']], ['How to return only the Date from a SQL Server DateTime datatype'], 4], [(113045, 1), [['On older versions, you can do the following:'], ['for example']], [[' SELECT DATEADD(dd, 0, DATEDIFF(dd, 0, @your_date))\n']], ['How to return only the Date from a SQL Server DateTime datatype'], 4], [(113045, 2), [['for example'], ['gives me   ']], [[' SELECT DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()))\n']], ['How to return only the Date from a SQL Server DateTime datatype'], 4], [(113045, 3), [['gives me   '], ['Pros: ']], [[' 2008-09-22 00:00:00.000\n']], ['How to return only the Date from a SQL Server DateTime datatype'], 4], [(118190, 0), [['This may work for you:'], ['Otherwise the ampersand needs to be at the end of a string, ']], [[' set define off\n']], ['How do I ignore ampersands in a SQL script running from SQL Plus?'], 2], [(118190, 1), [['Otherwise the ampersand needs to be at the end of a string, '], ['EDIT:  I was click-happy when saving...  This was referenced from a  blog .']], [[" 'StackOverflow &' || ' you'\n"]], ['How do I ignore ampersands in a SQL script running from SQL Plus?'], 2], [(118487, 0), [['Assuming feed_id = 0 is the manually entered stuff this does the trick: '], ['This was my original answer:']], [[' select p.* from programs p\nleft join \n(\n    select max(id) id1 from programs\n    where feed_id <> 0\n    group by feed_id\n    order by max(id) desc\n    limit 10\n) t on id1 = id\nwhere id1 is not null or feed_id = 0 \norder by id desc\nlimit 10;\n']], ['MySQL Query: Select most-recent items with a twist'], 2], [(118487, 1), [['This was my original answer:'], ['-10000']], [[" (\nselect \n    feed_id, url, dt \n    from feeds  \n    where feed_id = ''\n    order by dt desc \n    limit 10\n)\nunion\n(\n\nselect feed_id, min(url), max(dt) \n        from feeds\n        where feed_id <> '' \n        group by feed_id\n        order by dt desc    \n        limit 10\n)\norder by dt desc\nlimit 10\n"]], ['MySQL Query: Select most-recent items with a twist'], 2], [(121631, 0), [['No! The same execution plan, look at these two tables:'], ['The execution plan for the query using the inner join:']], [[' CREATE TABLE table1 (\n  id INT,\n  name VARCHAR(20)\n);\n\nCREATE TABLE table2 (\n  id INT,\n  name VARCHAR(20)\n);\n']], ['Inner join vs Where'], 3], [(121631, 1), [['The execution plan for the query using the inner join:'], ['And the execution plan for the query using a WHERE clause.']], [[' -- with inner join\n\nEXPLAIN PLAN FOR\nSELECT * FROM table1 t1\nINNER JOIN table2 t2 ON t1.id = t2.id;\n\nSELECT *\nFROM TABLE (DBMS_XPLAN.DISPLAY);\n\n-- 0 select statement\n-- 1 hash join (access("T1"."ID"="T2"."ID"))\n-- 2 table access full table1\n-- 3 table access full table2\n']], ['Inner join vs Where'], 3], [(121631, 2), [['And the execution plan for the query using a WHERE clause.'], ['-10000']], [[' -- with where clause\n\nEXPLAIN PLAN FOR\nSELECT * FROM table1 t1, table2 t2\nWHERE t1.id = t2.id;\n\nSELECT *\nFROM TABLE (DBMS_XPLAN.DISPLAY);\n\n-- 0 select statement\n-- 1 hash join (access("T1"."ID"="T2"."ID"))\n-- 2 table access full table1\n-- 3 table access full table2\n']], ['Inner join vs Where'], 3], [(122088, 0), [['-10000'], ['You could modify this slightly to detect invalid conditions, like multiple starts, finishes, starts without a finish, etc...']], [[" Select Count(Message) As Status\nFrom   Process_monitor\nWhere  TimeStamp >= '20080923'\n       And TimeStamp < '20080924'\n       And (Message = 'Started' or Message = 'Finished')\n"]], ['Sql query to determine status?'], 2], [(122088, 1), [['You could modify this slightly to detect invalid conditions, like multiple starts, finishes, starts without a finish, etc...'], ['-10000']], [[" Select  Case When SumStarted = 0 And SumFinished = 0 Then 'Not Started'\n             When SumStarted = 1 And SumFinished = 0 Then 'Started'\n             When SumStarted = 1 And SumFinished = 1 Then 'Finished'\n             When SumStarted > 1 Then 'Multiple Starts' \n             When SumFinished > 1 Then 'Multiple Finish'\n             When SumFinished > 0 And SumStarted = 0 Then 'Finish Without Start'\n             End As StatusMessage\nFrom    (\n          Select Sum(Case When Message = 'Started' Then 1 Else 0 End) As SumStarted,\n                 Sum(Case When Message = 'Finished' Then 1 Else 0 End) As SumFinished\n          From   Process_monitor\n          Where  TimeStamp >= '20080923'\n                 And TimeStamp < '20080924'\n                 And (Message = 'Started' or Message = 'Finished')\n        ) As AliasName\n"]], ['Sql query to determine status?'], 2], [(122639, 0), [['As identity will be generated during insert anyway, could you simply remove this column from #tmp before inserting the data back to T?'], ["UPD:  Here's an example I've tested in SQL Server 2008:"]], [[' alter table #tmp drop column id\n']], ['Insert into ... Select *, how to ignore identity?'], 2], [(122639, 1), [["UPD:  Here's an example I've tested in SQL Server 2008:"], ['-10000']], [[" create table T(ID int identity(1,1) not null, Value nvarchar(50))\ninsert into T (Value) values (N'Hello T!')\nselect top 0 * into #tmp from T\nalter table #tmp drop column ID\ninsert into #tmp (Value) values (N'Hello #tmp')\ninsert into T select * from #tmp\ndrop table #tmp\nselect * from T\ndrop table T\n"]], ['Insert into ... Select *, how to ignore identity?'], 2], [(124295, 0), [['Copy your assembly DLL file to the local drive on your various servers.  Then register your assembly with the database:'], ['...then you create a function referencing the appropriate public method in the DLL:']], [[" create assembly [YOUR_ASSEMBLY]\nfrom '(PATH_TO_DLL)'\n"]], ['How do I deploy a managed stored procedure without using Visual Studio?'], 2], [(124295, 1), [['...then you create a function referencing the appropriate public method in the DLL:'], ["Be sure to use the [ brackets, especially around the NAME_SPACE.  Namespaces can have any number of dots in them, but SQL identifiers can't, unless the parts are explicitly set apart by square brackets.  This was a source of many headaches when I was first using SQL CLR."]], [[' create proc [YOUR_FUNCTION]\nas\nexternal name [YOUR_ASSEMBLY].[NAME_SPACE].[YOUR_METHOD]\n']], ['How do I deploy a managed stored procedure without using Visual Studio?'], 2], [(124417, 0), [['The  UDF  could be something like this:'], ['... and you would call it like so ...']], [[' create function dbo.InlineMax(@val1 int, @val2 int)\nreturns int\nas\nbegin\n  if @val1 > @val2\n    return @val1\n  return isnull(@val2,@val1)\nend\n']], ['Is there a Max function in SQL Server that takes two values like Math.Max in .NET?'], 2], [(124417, 1), [['... and you would call it like so ...'], ['-10000']], [[' SELECT o.OrderId, dbo.InlineMax(o.NegotiatedPrice, o.SuggestedPrice) \nFROM Order o\n']], ['Is there a Max function in SQL Server that takes two values like Math.Max in .NET?'], 2], [(126587, 0), [['Step 3:  Start SQL and run this to put the DB in emergency mode.'], ['Step 5:  Run this undocumented dbcc option to rebuild the log file (in the correct place)']], [[" sp_configure 'allow updates', 1\ngo\nreconfigure with override\nGO\nupdate sysdatabases set status = 32768 where name = 'TestDB'\ngo\nsp_configure 'allow updates', 0\ngo\nreconfigure with override\nGO\n"]], ['How do I attach a MSSQL 2000 database with only an MDF file'], 3], [(126587, 1), [['Step 5:  Run this undocumented dbcc option to rebuild the log file (in the correct place)'], ["Step 6:  You might need to reset the status. Even if you don't, it won't do any harm to do so."]], [[" DBCC REBUILD_LOG(TestDB,'D:\\SQL_Log\\TestDB_Log.LDF')\n"]], ['How do I attach a MSSQL 2000 database with only an MDF file'], 3], [(126587, 2), [["Step 6:  You might need to reset the status. Even if you don't, it won't do any harm to do so."], ['Step 7:  Stop and start SQL to see your newly restored database.']], [[' exec sp_resetstatus TestDB\n']], ['How do I attach a MSSQL 2000 database with only an MDF file'], 3], [(128623, 0), [["It's unlikely that you really want to disable all constraints (including NOT NULL, primary keys, etc).  You should think about putting constraint_type in the WHERE clause."], ["Enabling the constraints again is a bit tricker - you  need to enable primary key constraints before you can reference them in a foreign key constraint.  This can be done using an ORDER BY on constraint_type.  'P' = primary key, 'R' = foreign key."]], [[' BEGIN\n  FOR c IN\n  (SELECT c.owner, c.table_name, c.constraint_name\n   FROM user_constraints c, user_tables t\n   WHERE c.table_name = t.table_name\n   AND c.status = \'ENABLED\'\n   AND NOT (t.iot_type IS NOT NULL AND c.constraint_type = \'P\')\n   ORDER BY c.constraint_type DESC)\n  LOOP\n    dbms_utility.exec_ddl_statement(\'alter table "\' || c.owner || \'"."\' || c.table_name || \'" disable constraint \' || c.constraint_name);\n  END LOOP;\nEND;\n/\n']], ['Disable all table constraints in Oracle'], 2], [(128623, 1), [["Enabling the constraints again is a bit tricker - you  need to enable primary key constraints before you can reference them in a foreign key constraint.  This can be done using an ORDER BY on constraint_type.  'P' = primary key, 'R' = foreign key."], ['-10000']], [[' BEGIN\n  FOR c IN\n  (SELECT c.owner, c.table_name, c.constraint_name\n   FROM user_constraints c, user_tables t\n   WHERE c.table_name = t.table_name\n   AND c.status = \'DISABLED\'\n   ORDER BY c.constraint_type)\n  LOOP\n    dbms_utility.exec_ddl_statement(\'alter table "\' || c.owner || \'"."\' || c.table_name || \'" enable constraint \' || c.constraint_name);\n  END LOOP;\nEND;\n/\n']], ['Disable all table constraints in Oracle'], 2], [(129077, 0), [['Query A is the same as:'], ['Query B is the same as:']], [[" select 'true' where 3 = 1 or 3 = 2 or 3 = 3 or 3 = null\n"]], ['NOT IN clause and NULL values'], 2], [(129077, 1), [['Query B is the same as:'], ["When  ansi_nulls  is on,  3 <> null  is UNKNOWN, so the predicate evaluates to UNKNOWN, and you don't get any rows."]], [[" select 'true' where 3 <> 1 and 3 <> 2 and 3 <> null\n"]], ['NOT IN clause and NULL values'], 2], [(131164, 0), [['A work-around'], ['[Edit] Per comment, ']], [[' INSERT INTO account_type_standard \n  (account_type_Standard_id, tax_status_id, recipient_id) \nVALUES( \n  (SELECT account_type_standard_seq.nextval FROM DUAL),\n  (SELECT tax_status_id FROM tax_status WHERE tax_status_code = ?), \n  (SELECT recipient_id FROM recipient WHERE recipient_code = ?)\n)\n']], ['Oracle Insert via Select from multiple tables where one table may not have a row'], 3], [(131164, 1), [['[Edit] Per comment, '], ['can be just']], [['   (SELECT account_type_standard_seq.nextval FROM DUAL),\n']], ['Oracle Insert via Select from multiple tables where one table may not have a row'], 3], [(131164, 2), [['can be just'], ['-10000']], [['   account_type_standard_seq.nextval,\n']], ['Oracle Insert via Select from multiple tables where one table may not have a row'], 3], [(143552, 0), [["I'll post one period of time here, and all the different variations of other periods that overlap in some way."], ["on the other hand, let me post all those that doesn't overlap:"]], [['            |-------------------|          compare to this one\n               |---------|                contained within\n           |----------|                   contained within, equal start\n                   |-----------|          contained within, equal end\n           |-------------------|          contained within, equal start+end\n     |------------|                       not fully contained, overlaps start\n                   |---------------|      not fully contained, overlaps end\n     |-------------------------|          overlaps start, bigger\n           |-----------------------|      overlaps end, bigger\n     |------------------------------|     overlaps entire period\n']], ['Comparing date ranges'], 6], [(143552, 1), [["on the other hand, let me post all those that doesn't overlap:"], ['So if you simple reduce the comparison to:']], [['            |-------------------|          compare to this one\n     |---|                                ends before\n                                 |---|    starts after\n']], ['Comparing date ranges'], 6], [(143552, 2), [['So if you simple reduce the comparison to:'], ['You will need to decide wether the following periods are IN or OUTSIDE your ranges:']], [[' starts after end\nends before start\n']], ['Comparing date ranges'], 6], [(143552, 3), [['You will need to decide wether the following periods are IN or OUTSIDE your ranges:'], ["If your table has columns called range_end and range_start, here's some simple SQL to retrieve all the matching rows:"]], [['            |-------------|\n   |-------|                       equal end with start of comparison period\n                         |-----|   equal start with end of comparison period\n']], ['Comparing date ranges'], 6], [(143552, 4), [["If your table has columns called range_end and range_start, here's some simple SQL to retrieve all the matching rows:"], ["Applying simple reversal logic here to get rid of the NOT and you'll end up with:"]], [[' SELECT *\nFROM periods\nWHERE NOT (range_start > @check_period_end\n           OR range_end < @check_period_start)\n']], ['Comparing date ranges'], 6], [(143552, 5), [["Applying simple reversal logic here to get rid of the NOT and you'll end up with:"], ['-10000']], [[' SELECT *\nFROM periods\nWHERE range_start <= @check_period_end\n      AND range_end >= @check_period_start\n']], ['Comparing date ranges'], 6], [(143712, 0), [['The answer to your question is to use the Bitwise  &  like this:'], ['The  6  can be exchanged for any combination of your bitfield where you want to check that any user has one or more of those bits. When trying to validate this I usually find it helpful to write this out longhand in binary. Your user table looks like this:']], [[' SELECT * FROM UserTable WHERE Roles & 6 != 0\n']], ['Comparing two bitmasks in SQL to see if any of the bits match'], 7], [(143712, 1), [['The  6  can be exchanged for any combination of your bitfield where you want to check that any user has one or more of those bits. When trying to validate this I usually find it helpful to write this out longhand in binary. Your user table looks like this:'], ['Your test (6) is this']], [['         1   2   4\n------------------\nDave    0   1   1\nCharlie 0   1   0\nSusan   0   0   1   \nNick    1   0   0\n']], ['Comparing two bitmasks in SQL to see if any of the bits match'], 7], [(143712, 2), [['Your test (6) is this'], ['If we go through each person doing the bitwaise And against the test we get these:']], [['         1   2   4\n------------------\nTest    0   1   1\n']], ['Comparing two bitmasks in SQL to see if any of the bits match'], 7], [(143712, 3), [['If we go through each person doing the bitwaise And against the test we get these:'], ["Edit: Here's the test case should you want to check this"]], [['         1   2   4\n------------------\nDave    0   1   1   \nTest    0   1   1\nResult  0   1   1 (6)\n\nCharlie 0   1   0\nTest    0   1   1\nResult  0   1   0 (2)\n\nSusan   0   0   1\nTest    0   1   1\nResult  0   0   1 (4)\n\nNick    1   0   0\nTest    0   1   1\nResult  0   0   0 (0) \n']], ['Comparing two bitmasks in SQL to see if any of the bits match'], 7], [(143712, 4), [["Edit: Here's the test case should you want to check this"], ['or  ']], [[" with test (id, username, roles)\nAS\n(\n    SELECT 1,'Dave',6\n    UNION SELECT 2,'Charlie',2\n    UNION SELECT 3,'Susan',4\n    UNION SELECT 4,'Nick',1\n)\nselect * from test where (roles & 6) != 0  // returns dave, charlie & susan\n"]], ['Comparing two bitmasks in SQL to see if any of the bits match'], 7], [(143712, 5), [['or  '], ['or']], [[' select * from test where (roles & 2) != 0 // returns Dave & Charlie\n']], ['Comparing two bitmasks in SQL to see if any of the bits match'], 7], [(143712, 6), [['or'], ['-10000']], [[' select * from test where (roles & 7) != 0 // returns dave, charlie, susan & nick\n']], ['Comparing two bitmasks in SQL to see if any of the bits match'], 7], [(145969, 0), [['You need an intermediate lookup table:'], ['To find items in a section:']], [[' CREATE TABLE item_in_section (item_id int, section_id int)\n']], ['Sql design problem - items in multiple sections'], 3], [(145969, 1), [['To find items in a section:'], ['To find sections an item belongs to']], [[' SELECT item.* from item, item_in_section WHERE item_in_section.item_id = item.item_id AND item_in_section.section_id = X GROUP BY item_id\n']], ['Sql design problem - items in multiple sections'], 3], [(145969, 2), [['To find sections an item belongs to'], ['-10000']], [[' SELECT section.* from section, item_in_section WHERE item_in_section.section_id = section.section_id AND item_in_section.item_id = Y GROUP BY section_id\n']], ['Sql design problem - items in multiple sections'], 3], [(149078, 0), [['To get the execution plan do this:'], ['Contrast that with:']], [[" explain plan for\nSELECT *\nFROM   sometable\nWHERE  foo='hello' AND bar='world'\n/\nselect * from table(dbms_xplan.display)\n/\n"]], ['Can Multiple Indexes Work Together?'], 2], [(149078, 1), [['Contrast that with:'], ['-10000']], [[" explain plan for\nSELECT /*+ dynamic_sampling(4) */\n       *\nFROM   sometable\nWHERE  foo='hello' AND bar='world'\n/\nselect * from table(dbms_xplan.display)\n/\n"]], ['Can Multiple Indexes Work Together?'], 2], [(151099, 0), [['-10000'], ['Or like some other people on this thread says:']], [[' select * from a where id not in (select a_id from b)\n']], ['How do I find records that are not joined?'], 2], [(151099, 1), [['Or like some other people on this thread says:'], ['-10000']], [[' select a.* from a\nleft outer join b on a.id = b.a_id\nwhere b.a_id is null\n']], ['How do I find records that are not joined?'], 2], [(152837, 0), [['e.g.'], ['Produces:']], [[" set define on\nset escape on\n\ndefine myvar=/forth\n\nselect 'back\\\\ \\& &myvar' as swing from dual;\n"]], ['How to insert a string which contains an "&"'], 4], [(152837, 1), [['Produces:'], ['If you want to use a different escape character:']], [[" old   1: select 'back\\\\ \\& &myvar' from dual\nnew   1: select 'back\\ & /forth' from dual\n\nSWING\n--------------\nback\\ & /forth\n"]], ['How to insert a string which contains an "&"'], 4], [(152837, 2), [['If you want to use a different escape character:'], ["When you set a specific escape character, you may see 'SP2-0272: escape character cannot be alphanumeric or whitespace'. This probably means you already have the escape character defined, and things get horribly self-referential. The clean way of avoiding this problem is to set escape off first:"]], [[" set define on\nset escape '#'\n\ndefine myvar=/forth\n\nselect 'back\\ #& &myvar' as swing from dual;\n"]], ['How to insert a string which contains an "&"'], 4], [(152837, 3), [["When you set a specific escape character, you may see 'SP2-0272: escape character cannot be alphanumeric or whitespace'. This probably means you already have the escape character defined, and things get horribly self-referential. The clean way of avoiding this problem is to set escape off first:"], ['-10000']], [[" set escape off\nset escape '#'\n"]], ['How to insert a string which contains an "&"'], 4], [(153988, 0), [['first run the following on your test server:'], ['Then just create the insert statement:']], [[' Execute sp_addlinkedserver PRODUCTION_SERVER_NAME\n']], ['How can I copy data records between two instances of an SQLServer database'], 2], [(153988, 1), [['Then just create the insert statement:'], ['-10000']], [[' INSERT INTO [PRODUCTION_SERVER_NAME].DATABASE_NAME.dbo.TABLE_NAME   (Names_of_Columns_to_be_inserted)\nSELECT Names_of_Columns_to_be_inserted\nFROM TABLE_NAME\n']], ['How can I copy data records between two instances of an SQLServer database'], 2], [(162255, 0), [['The number of sessions the database was configured to allow'], ['The number of sessions currently active']], [[" SELECT name, value \n  FROM v$parameter\n WHERE name = 'sessions'\n"]], ['How to check the maximum number of allowed connections to an Oracle database?'], 2], [(162255, 1), [['The number of sessions currently active'], ['As I said, though, there are other potential limits both at the database level and at the operating system level and depending on whether shared server has been configured.  If shared server is ignored, you may well hit the limit of the PROCESSES parameter before you hit the limit of the SESSIONS parameter.  And you may hit operating system limits because each session requires a certain amount of RAM.']], [[' SELECT COUNT(*)\n  FROM v$session\n']], ['How to check the maximum number of allowed connections to an Oracle database?'], 2], [(162564, 0), [['Shift down and then up again:'], ['or, more simply:']], [[' UPDATE table\nSET datecol = DATEADD(m, @newmonth, DATEADD(m, -MONTH(datecol), datecol))\nWHERE id = @id\n']], ['Update Month value on datefield in MS sql 2005'], 2], [(162564, 1), [['or, more simply:'], ['-10000']], [[' UPDATE table\nSET datecol = DATEADD(m, @newmonth - MONTH(datecol), datecol)\nWHERE id = @id\n']], ['Update Month value on datefield in MS sql 2005'], 2], [(163604, 0), [['Something like'], ["edit:  there is not really a good way to make RAND behave.  This is what I've used in the past (kludge alert - it kills you not being able to use Rand() in a UDF)"]], [[' select top 10 percent * from MyTable order by NEWID()\n']], ['What am I doing wrong when using RAND() in MS SQL Server 2005?'], 2], [(163604, 1), [["edit:  there is not really a good way to make RAND behave.  This is what I've used in the past (kludge alert - it kills you not being able to use Rand() in a UDF)"], ['Then you just have  select blah, dbo.RandomFloat() from table  in your query.']], [[' CREATE VIEW RandView AS \n\nSELECT RAND() AS Val\n\nGO\n\nCREATE FUNCTION RandomFloat()\nRETURNS FLOAT\nAS\nBEGIN\n\nRETURN (SELECT Val FROM RandView)\n\nEND\n']], ['What am I doing wrong when using RAND() in MS SQL Server 2005?'], 2], [(164173, 0), [['-10000'], ["I've now formally validated the syntax against IDS, and it is usable:"]], [[' SELECT\n        score,\n        count(*) students,\n        count(finished) finished,\n        count(finished) / count(*) AS something_other_than_students,   \n        round((count(finished) / count(*)),2) AS rounded_value\n    FROM now_calc \n    GROUP BY score\n    ORDER BY score;\n']], ['Informix SQL Syntax - Nest Count, Sum, Round'], 2], [(164173, 1), [["I've now formally validated the syntax against IDS, and it is usable:"], ["I let 'finished' take nulls because the only reason for 'count(finished) / count(*)' not to return 1 is if 'finished' accepts nulls -- not very good table design, though.  And I put 7 rows with score 23 to get a large number of decimal places (and then changed one row with score 43 to generate a second number with a large number of decimal places)."]], [[" Black JL: sqlcmd -Ffixsep -d stores -xf xx.sql | sed 's/        //g'\n+ create temp table now_calc(finished CHAR(1), score INTEGER, name CHAR(10) PRIMARY KEY);\n+ insert into now_calc values(null, 23, 'a');\n+ insert into now_calc values('y',  23, 'b');\n+ insert into now_calc values('y',  23, 'h');\n+ insert into now_calc values('y',  23, 'i');\n+ insert into now_calc values('y',  23, 'j');\n+ insert into now_calc values('y',  43, 'c');\n+ insert into now_calc values(null, 23, 'd');\n+ insert into now_calc values('y',  43, 'e');\n+ insert into now_calc values(null, 23, 'f');\n+ insert into now_calc values(null, 43, 'g');\n+ SELECT\n        score,\n        count(*) students,\n        count(finished) finished,\n        count(finished) / count(*) AS something_other_than_students,\n        round((count(finished) / count(*)),2) AS rounded_value\n    FROM now_calc\n    GROUP BY score\n    ORDER BY score;\n 23|       7|       4| 5.71428571428571E-01|      0.57\n 43|       3|       2| 6.66666666666667E-01|      0.67\nBlack JL:\n"]], ['Informix SQL Syntax - Nest Count, Sum, Round'], 2], [(172302, 0), [['Do you mean that timespans recorded in table A contains entirely timespans in table B, like this?'], ['or overlaps with?']], [[' |---------------- A -------------------|\n    |--- B ----|      |--- B ---|\n']], ['What\'s a good algorithm for editing a "schedule" most efficiently?'], 10], [(172302, 1), [['or overlaps with?'], ['Does this mean that:']], [['     |---------------- A -------------------|\n|--- B ----|                        |--- B ---|\n']], ['What\'s a good algorithm for editing a "schedule" most efficiently?'], 10], [(172302, 2), [['Does this mean that:'], ["Here's an example:"]], [[' * A removed A-timespan removes all the linked timespans from B\n* An added A-timespan, what about this?\n* A shortened A-timespan removes all the linked timespans from B that now falls outside A\n* A lenghtened A-timespan, will this include all matching B-timespans now inside?\n']], ['What\'s a good algorithm for editing a "schedule" most efficiently?'], 10], [(172302, 3), [["Here's an example:"], ['and then you lengthen A1 and shorten and move A2, so that:']], [[' |-------------- A1 --------------|    |-------- A2 --------------|\n  |---- B1 ----|  |----- B2 ---|       |---- B3 ----|  |-- B4 --|\n']], ['What\'s a good algorithm for editing a "schedule" most efficiently?'], 10], [(172302, 4), [['and then you lengthen A1 and shorten and move A2, so that:'], ['this means that you want to modify the data like this:']], [[' |-------------- A1 ---------------------------------|  |--- A2 --|\n  |---- B1 ----|  |----- B2 ---|       |---- B3 ----|  |-- B4 --|\n']], ['What\'s a good algorithm for editing a "schedule" most efficiently?'], 10], [(172302, 5), [['this means that you want to modify the data like this:'], ['how about this modification, A1 is lengthened, but not enough to contain B3 entirely, and A2 is moved/shortened the same way:']], [[' 1. Lengthen (update) A1\n2. Shorten and move (update) A2\n3. Re-link (update) B3 from A2 to A1 instead\n']], ['What\'s a good algorithm for editing a "schedule" most efficiently?'], 10], [(172302, 6), [['how about this modification, A1 is lengthened, but not enough to contain B3 entirely, and A2 is moved/shortened the same way:'], ['Ok, what about:']], [[' |-------------- A1 -----------------------------|      |--- A2 --|\n  |---- B1 ----|  |----- B2 ---|       |---- B3 ----|  |-- B4 --|\n']], ['What\'s a good algorithm for editing a "schedule" most efficiently?'], 10], [(172302, 7), [['Ok, what about:'], ['Either:']], [[' |------------------ A -----------------------|\n  |------- B1 -------|  |------- B2 ------|\n                           |---|                   <-- I want to remove this from A\n']], ['What\'s a good algorithm for editing a "schedule" most efficiently?'], 10], [(172302, 8), [['Either:'], ['or:']], [[' |------------------ A1 ----|   |---- A2 -----|\n  |------- B1 -------|  |B3|   |--- B2 ---|\n']], ['What\'s a good algorithm for editing a "schedule" most efficiently?'], 10], [(172302, 9), [['or:'], ['To summarize how I see it, with questions, so far:']], [[' |------------------ A1 ----|   |---- A2 -----|\n  |------- B1 -------|\n']], ['What\'s a good algorithm for editing a "schedule" most efficiently?'], 10], [(174438, 0), [["You can almost do it.  The only problem I haven't resolved is the comma delimiter.  Here is a query on a similar structure that separates the tags using a space."], ['Here is the complete version using your tables and using a comma delimiter:']], [[" SELECT em.Code,\n    (SELECT et.Name + ' '  AS 'data()'\n        FROM tblEmployeeTag et\n            JOIN tblEmployeeTagAssignment eta ON et.Id = eta.EmployeeTag_Id AND eta.Employee_Id = em.id\n    FOR XML PATH('') ) AS Tags\nFROM tblEmployee em\n"]], ['Query showing list of associations in many-to-many relationship'], 2], [(174438, 1), [['Here is the complete version using your tables and using a comma delimiter:'], ["I suppose for future reference I should explain a bit about what is going on.  The 'data()' column name is a special value that is related to the FOR XML PATH statement.  It causes the XML document to be rendered as if you did an .InnerText on the root node of the resulting XML. \nThe REPLACE statement is a trick to remove the trailing comma.  By appending a unique character (I randomly chose 'x') to the end of the tag list I can search for comma-space-character and replace it with an empty string.  That allows me to chop off just the last comma.  This assumes that you are never going to have that sequence of characters in your tags."]], [[" SELECT bk.Id AS BookId,\n        bk.Name AS BookName,\n    REPLACE((SELECT LTRIM(STR(bt.TagId)) + ', '  AS 'data()'\n        FROM BookTag bt\n        WHERE bt.BookId = bk.Id         \n        FOR XML PATH('') ) + 'x', ', x','') AS Tags\nFROM Book bk\n"]], ['Query showing list of associations in many-to-many relationship'], 2], [(174595, 0), [['ROWNUM is a "pseudocolumn" that assigns a number to each row returned by a query:'], ['ROW_NUMBER is an analytic function that assigns a number to each row according to its ordering within a group of rows:']], [[' SQL> select rownum, ename, deptno\n  2  from emp;\n\n    ROWNUM ENAME          DEPTNO\n---------- ---------- ----------\n         1 SMITH              99\n         2 ALLEN              30\n         3 WARD               30\n         4 JONES              20\n         5 MARTIN             30\n         6 BLAKE              30\n         7 CLARK              10\n         8 SCOTT              20\n         9 KING               10\n        10 TURNER             30\n        11 FORD               20\n        12 MILLER             10\n']], ['In an Oracle database, what is the difference between ROWNUM and ROW_NUMBER?'], 2], [(174595, 1), [['ROW_NUMBER is an analytic function that assigns a number to each row according to its ordering within a group of rows:'], ['-10000']], [[' SQL> select ename, deptno, row_number() over (partition by deptno order by ename) rn\n  2  from emp;\n\nENAME          DEPTNO         RN\n---------- ---------- ----------\nCLARK              10          1\nKING               10          2\nMILLER             10          3\nFORD               20          1\nJONES              20          2\nSCOTT              20          3\nALLEN              30          1\nBLAKE              30          2\nMARTIN             30          3\nTURNER             30          4\nWARD               30          5\nSMITH              99          1\n']], ['In an Oracle database, what is the difference between ROWNUM and ROW_NUMBER?'], 2], [(175066, 0), [['The following sets up the situation I had, using table variables.'], ['Thanks to another  answer  that pointed me towards the OUTPUT clause I can demonstrate a solution:']], [[" DECLARE @Object_Table TABLE\n(\n    Id INT NOT NULL PRIMARY KEY\n)\n\nDECLARE @Link_Table TABLE\n(\n    ObjectId INT NOT NULL,\n    DataId INT NOT NULL\n)\n\nDECLARE @Data_Table TABLE\n(\n    Id INT NOT NULL Identity(1,1),\n    Data VARCHAR(50) NOT NULL\n)\n\n-- create two objects '1' and '2'\nINSERT INTO @Object_Table (Id) VALUES (1)\nINSERT INTO @Object_Table (Id) VALUES (2)\n\n-- create some data\nINSERT INTO @Data_Table (Data) VALUES ('Data One')\nINSERT INTO @Data_Table (Data) VALUES ('Data Two')\n\n-- link all data to first object\nINSERT INTO @Link_Table (ObjectId, DataId)\nSELECT Objects.Id, Data.Id\nFROM @Object_Table AS Objects, @Data_Table AS Data\nWHERE Objects.Id = 1\n"]], ['SQL Server: Is it possible to insert into two tables at the same time?'], 2], [(175066, 1), [['Thanks to another  answer  that pointed me towards the OUTPUT clause I can demonstrate a solution:'], ['It turns out however that it is not that simple in real life because of the following error']], [[' -- now I want to copy the data from from object 1 to object 2 without looping\nINSERT INTO @Data_Table (Data)\nOUTPUT 2, INSERTED.Id INTO @Link_Table (ObjectId, DataId)\nSELECT Data.Data\nFROM @Data_Table AS Data INNER JOIN @Link_Table AS Link ON Data.Id = Link.DataId\n                INNER JOIN @Object_Table AS Objects ON Link.ObjectId = Objects.Id \nWHERE Objects.Id = 1\n']], ['SQL Server: Is it possible to insert into two tables at the same time?'], 2], [(182130, 0), [['This can be done, but would be a lot more efficient if you stored the end date of each log.  With your model you have to do something like:'], ['With the additional column it woud be more like:']], [[" select l1.userid\nfrom status_log l1\nwhere l1.status='s'\nand l1.logcreated = (select max(l2.logcreated)\n                     from status_log l2\n                     where l2.userid = l1.userid\n                     and   l2.logcreated <= date '2008-02-15'\n                    );\n"]], ['SQL - state machine - reporting on historical data based on changeset'], 4], [(182130, 1), [['With the additional column it woud be more like:'], ['This would appear in the table like this:']], [[" select userid\nfrom status_log\nwhere status='s'\nand logcreated <= date '2008-02-15'\nand logsuperseded >= date '2008-02-15';\n"]], ['SQL - state machine - reporting on historical data based on changeset'], 4], [(182130, 2), [['This would appear in the table like this:'], ['Yes, my query would have to be re-written as']], [[' userid  from       to         status\nFRED    2008-01-01 2008-01-31 s\nFRED    2008-02-01 2008-02-07 c\nFRED    2008-02-08            a\n']], ['SQL - state machine - reporting on historical data based on changeset'], 4], [(182130, 3), [['Yes, my query would have to be re-written as'], ["A downside of this design is that whenever the user's status changes you have to end date their current status_log as well as create a new one.  However, that isn't difficult, and I think the query advantage probably outweighs this."]], [[" select userid\nfrom status_log\nwhere status='s'\nand logcreated <= date '2008-02-15'\nand (logsuperseded is null or logsuperseded >= date '2008-02-15');\n"]], ['SQL - state machine - reporting on historical data based on changeset'], 4], [(182569, 0), [['-10000'], ['-10000']], [['Delete trigger CREATE TRIGGER tigger ON myTable FOR DELETE\nAS \nupdate myTable \nset id = id - (select count(*) from deleted d where d.id < t.id)  \nfrom myTable t\n']], ['Row number in Sybase tables'], 2], [(182569, 1), [['-10000'], ['... and use the rownum field from this table. \nIf you put the delete trigger on this table then you would hugely reduce the potential for locking problems.  ']], [[' CREATE TABLE rowCounter \n(id    int,      -- foreign key to main table\n rownum int) \n']], ['Row number in Sybase tables'], 2], [(183124, 0), [['have you tries something like this (found at  http://weblogs.sqlteam.com  ) :'], ['create a function ']], [[' CREATE VIEW vRandNumber\nAS\nSELECT RAND() as RandNumber\nGO\n']], ['Multiple random values in SQL Server 2005'], 3], [(183124, 1), [['create a function '], ['or from their comments:']], [[' CREATE FUNCTION RandNumber()\nRETURNS float\nAS\n  BEGIN\n     RETURN (SELECT RandNumber FROM vRandNumber)\n  END\nGO\n']], ['Multiple random values in SQL Server 2005'], 3], [(183124, 2), [['or from their comments:'], ['-10000']], [[' select RAND(CAST(NEWID() AS BINARY(6))), * from myTable\n']], ['Multiple random values in SQL Server 2005'], 3], [(185327, 0), [["Try something like this (I haven't tested it):"], ['I think people believe outer joins are harder than they really are.  For example:']], [[' SELECT p_new.identifier, COALESCE(p_inprog.activity, p_new.activity) AS activity,\n  p_inprog.participant, COALESCE(p_inprog.closedate, p_new.closedate) AS closedate\nFROM performance p_new\n  LEFT OUTER JOIN performance p_inprog \n    ON (p_new.identifier = p_inprog.identifier AND p_inprog.activity = 2)\n  LEFT OUTER JOIN performance p_closed \n    ON (p_new.identifier = p_closed.identifier AND p_closed.activity = 4)\nWHERE p_new.activity = 1\n  AND p_closed.identifier IS NULL;\n']], ['Oracle joins ( left outer, right, etc. :S )'], 2], [(185327, 1), [['I think people believe outer joins are harder than they really are.  For example:'], ["This returns all rows from A, whether or not there are any matching rows in B.  If no  rows in B match, treat all columns B.* as NULL in the result set for that row of A.  The join condition can be an expression that the row in B must satisfy, or else it isn't included in the join.  So, more rows in A will be solo."]], [[' A LEFT OUTER JOIN B ON (...condition...)\n']], ['Oracle joins ( left outer, right, etc. :S )'], 2], [(185487, 0), [['First, some DDL to set the stage:'], ['Using these tables/rows as a basis, this SELECT statement retrieves the desired data:']], [[" CREATE TABLE [dbo].[StandardSchedule](\n    [scheduledate] [datetime] NOT NULL,\n    [shift] [varchar](25) NOT NULL,\n CONSTRAINT [PK_StandardSchedule] PRIMARY KEY CLUSTERED \n( [scheduledate] ASC ));\n\nCREATE TABLE [dbo].[HolidaySchedule](\n    [holidaydate] [datetime] NOT NULL,\n    [shift] [varchar](25) NOT NULL,\n CONSTRAINT [PK_HolidaySchedule] PRIMARY KEY CLUSTERED \n( [holidaydate] ASC ));\n\nCREATE TABLE [dbo].[ExceptionSchedule](\n    [exceptiondate] [datetime] NOT NULL,\n    [shift] [varchar](25) NOT NULL,\n CONSTRAINT [PK_ExceptionDate] PRIMARY KEY CLUSTERED \n( [exceptiondate] ASC ));\n\nINSERT INTO ExceptionSchedule VALUES ('2008.01.06', 'ExceptionShift1');\nINSERT INTO ExceptionSchedule VALUES ('2008.01.08', 'ExceptionShift2');\nINSERT INTO ExceptionSchedule VALUES ('2008.01.10', 'ExceptionShift3');\nINSERT INTO HolidaySchedule VALUES ('2008.01.01', 'HolidayShift1');\nINSERT INTO HolidaySchedule VALUES ('2008.01.06', 'HolidayShift2');\nINSERT INTO HolidaySchedule VALUES ('2008.01.09', 'HolidayShift3');\nINSERT INTO StandardSchedule VALUES ('2008.01.01', 'RegularShift1');\nINSERT INTO StandardSchedule VALUES ('2008.01.02', 'RegularShift2');\nINSERT INTO StandardSchedule VALUES ('2008.01.03', 'RegularShift3');\nINSERT INTO StandardSchedule VALUES ('2008.01.04', 'RegularShift4');\nINSERT INTO StandardSchedule VALUES ('2008.01.05', 'RegularShift5');\nINSERT INTO StandardSchedule VALUES ('2008.01.07', 'RegularShift6');\nINSERT INTO StandardSchedule VALUES ('2008.01.09', 'RegularShift7');\nINSERT INTO StandardSchedule VALUES ('2008.01.10', 'RegularShift8');\n"]], ['Return values from different tables based on a priority'], 2], [(185487, 1), [['Using these tables/rows as a basis, this SELECT statement retrieves the desired data:'], ['-10000']], [[' SELECT DISTINCT\n    COALESCE(e2.exceptiondate, e.exceptiondate, holidaydate, scheduledate) AS ShiftDate,\n    COALESCE(e2.shift, e.shift, h.shift, s.shift) AS Shift\nFROM standardschedule s\nFULL OUTER JOIN holidayschedule h ON s.scheduledate = h.holidaydate\nFULL OUTER JOIN exceptionschedule e ON h.holidaydate = e.exceptiondate\nFULL OUTER JOIN exceptionschedule e2 ON s.scheduledate = e2.exceptiondate\nORDER BY shiftdate\n']], ['Return values from different tables based on a priority'], 2], [(186756, 0), [['First you create a table in which to store your records'], ['Secondly create a stored procedure like this:']], [[' CREATE TABLE `incr` (\n  `Id` int(11) NOT NULL auto_increment,\n  PRIMARY KEY  (`Id`)\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8;\n']], ['Generating a range of numbers in MySQL'], 4], [(186756, 1), [['Secondly create a stored procedure like this:'], ['Lastly call the SP:']], [[' DELIMITER ;;\nCREATE PROCEDURE dowhile()\nBEGIN\n  DECLARE v1 INT DEFAULT 5;\n  WHILE v1 > 0 DO\n    INSERT incr VALUES (NULL);\n    SET v1 = v1 - 1;\n  END WHILE;\nEND;;\nDELIMITER ;\n']], ['Generating a range of numbers in MySQL'], 4], [(186756, 2), [['Lastly call the SP:'], ['Result']], [[' CALL dowhile();\nSELECT * FROM incr;\n']], ['Generating a range of numbers in MySQL'], 4], [(186756, 3), [['Result'], ['-10000']], [[' Id\n1\n2\n3\n4\n5\n']], ['Generating a range of numbers in MySQL'], 4], [(192220, 0), [['I cover Closure Table in my presentation  Models for Hierarchical Data with SQL and PHP  and in my book  SQL Antipatterns: Avoiding the Pitfalls of Database Programming .'], ['Store all paths in the Closure Table, where there is a direct ancestry from one node to another.  Include a row for each node to reference itself.  For example, using the data set you showed in your question:']], [[' CREATE TABLE ClosureTable (\n  ancestor_id   INT NOT NULL REFERENCES FlatTable(id),\n  descendant_id INT NOT NULL REFERENCES FlatTable(id),\n  PRIMARY KEY (ancestor_id, descendant_id)\n);\n']], ['What is the most efficient/elegant way to parse a flat table into a tree?'], 8], [(192220, 1), [['Store all paths in the Closure Table, where there is a direct ancestry from one node to another.  Include a row for each node to reference itself.  For example, using the data set you showed in your question:'], ['Now you can get a tree starting at node 1 like this:']], [[' INSERT INTO ClosureTable (ancestor_id, descendant_id) VALUES\n  (1,1), (1,2), (1,4), (1,6),\n  (2,2), (2,4),\n  (3,3), (3,5),\n  (4,4),\n  (5,5),\n  (6,6);\n']], ['What is the most efficient/elegant way to parse a flat table into a tree?'], 8], [(192220, 2), [['Now you can get a tree starting at node 1 like this:'], ['The output (in MySQL client) looks like the following:']], [[' SELECT f.* \nFROM FlatTable f \n  JOIN ClosureTable a ON (f.id = a.descendant_id)\nWHERE a.ancestor_id = 1;\n']], ['What is the most efficient/elegant way to parse a flat table into a tree?'], 8], [(192220, 3), [['The output (in MySQL client) looks like the following:'], ['Re: comment from e-satis about immediate children (or immediate parent).  You can add a " path_length " column to the  ClosureTable  to make it easier to query specifically for an immediate child or parent (or any other distance).']], [[' +----+\n| id |\n+----+\n|  1 | \n|  2 | \n|  4 | \n|  6 | \n+----+\n']], ['What is the most efficient/elegant way to parse a flat table into a tree?'], 8], [(192220, 4), [['Re: comment from e-satis about immediate children (or immediate parent).  You can add a " path_length " column to the  ClosureTable  to make it easier to query specifically for an immediate child or parent (or any other distance).'], ['Then you can add a term in your search for querying the immediate children of a given node.  These are descendants whose  path_length  is 1.']], [[' INSERT INTO ClosureTable (ancestor_id, descendant_id, path_length) VALUES\n  (1,1,0), (1,2,1), (1,4,2), (1,6,1),\n  (2,2,0), (2,4,1),\n  (3,3,0), (3,5,1),\n  (4,4,0),\n  (5,5,0),\n  (6,6,0);\n']], ['What is the most efficient/elegant way to parse a flat table into a tree?'], 8], [(192220, 5), [['Then you can add a term in your search for querying the immediate children of a given node.  These are descendants whose  path_length  is 1.'], ["Here's an example query to return all nodes that are descendants of node 1, join them to the FlatTable that contains other node attributes such as  name , and sort by the name."]], [[' SELECT f.* \nFROM FlatTable f \n  JOIN ClosureTable a ON (f.id = a.descendant_id)\nWHERE a.ancestor_id = 1\n  AND path_length = 1;\n\n+----+\n| id |\n+----+\n|  2 | \n|  6 | \n+----+\n']], ['What is the most efficient/elegant way to parse a flat table into a tree?'], 8], [(192220, 6), [["Here's an example query to return all nodes that are descendants of node 1, join them to the FlatTable that contains other node attributes such as  name , and sort by the name."], ['Re comment from @Nate:']], [[' SELECT f.name\nFROM FlatTable f \nJOIN ClosureTable a ON (f.id = a.descendant_id)\nWHERE a.ancestor_id = 1\nORDER BY f.name;\n']], ['What is the most efficient/elegant way to parse a flat table into a tree?'], 8], [(192220, 7), [['Re comment from @Nate:'], ['A user suggested an edit today. SO moderators approved the edit, but I am reversing it.']], [[' SELECT f.name, GROUP_CONCAT(b.ancestor_id order by b.path_length desc) AS breadcrumbs\nFROM FlatTable f \nJOIN ClosureTable a ON (f.id = a.descendant_id) \nJOIN ClosureTable b ON (b.descendant_id = a.descendant_id) \nWHERE a.ancestor_id = 1 \nGROUP BY a.descendant_id \nORDER BY f.name\n\n+------------+-------------+\n| name       | breadcrumbs |\n+------------+-------------+\n| Node 1     | 1           |\n| Node 1.1   | 1,2         |\n| Node 1.1.1 | 1,2,4       |\n| Node 1.2   | 1,6         |\n+------------+-------------+\n']], ['What is the most efficient/elegant way to parse a flat table into a tree?'], 8], [(192924, 0), [['How about simply:'], ['or']], [[' select distinct c1, c2 from t\n']], ['SQL distinct for 2 fields in a database'], 2], [(192924, 1), [['or'], ['-10000']], [[' select c1, c2, count(*)\nfrom t\ngroup by c1, c2\n']], ['SQL distinct for 2 fields in a database'], 2], [(194852, 0), [['If there is a table called  STUDENTS'], ['Result I expected was:']], [[' SubjectID       StudentName\n----------      -------------\n1               Mary\n1               John\n1               Sam\n2               Alaina\n2               Edward\n']], ['Concatenate many rows into a single text string?'], 4], [(194852, 1), [['Result I expected was:'], ['I used the following T-SQL:']], [[' SubjectID       StudentName\n----------      -------------\n1               Mary, John, Sam\n2               Alaina, Edward\n']], ['Concatenate many rows into a single text string?'], 4], [(194852, 2), [['I used the following T-SQL:'], ["You can do the same thing in a more compact way if you can concat the commas at the beginning and use substring to skip the first one so you don't need to do a subquery:"]], [[' Select Main.SubjectID,\n       Left(Main.Students,Len(Main.Students)-1) As "Students"\nFrom\n    (\n        Select distinct ST2.SubjectID, \n            (\n                Select ST1.StudentName + \',\' AS [text()]\n                From dbo.Students ST1\n                Where ST1.SubjectID = ST2.SubjectID\n                ORDER BY ST1.SubjectID\n                For XML PATH (\'\')\n            ) [Students]\n        From dbo.Students ST2\n    ) [Main]\n']], ['Concatenate many rows into a single text string?'], 4], [(194852, 3), [["You can do the same thing in a more compact way if you can concat the commas at the beginning and use substring to skip the first one so you don't need to do a subquery:"], ['-10000']], [[" Select distinct ST2.SubjectID, \n    substring(\n        (\n            Select ','+ST1.StudentName  AS [text()]\n            From dbo.Students ST1\n            Where ST1.SubjectID = ST2.SubjectID\n            ORDER BY ST1.SubjectID\n            For XML PATH ('')\n        ), 2, 1000) [Students]\nFrom dbo.Students ST2\n"]], ['Concatenate many rows into a single text string?'], 4], [(195410, 0), [["It sounds like you are after 'auditing'.  Oracle has a built-in feature called Fine Grain Auditing (FGA).  In a nutshell you can audit everything or specific conditions.  What is really cool is you can 'audit' selects as well as transactions.  Simple command to get started with auditing:"], ["Think of it as a 'trigger' for select statements.  For example, you create policies:"]], [[' audit UPDATE on SCOTT.EMP by access;\n']], ['How to log in an Oracle database?'], 4], [(195410, 1), [["Think of it as a 'trigger' for select statements.  For example, you create policies:"], ['After you have defined the policy, when a user queries the table in the usual way, as follows:']], [[" begin\n   dbms_fga.add_policy (\n      object_schema=>'BANK',\n      object_name=>'ACCOUNTS',\n      policy_name=>'ACCOUNTS_ACCESS'\n  );\nend;\n"]], ['How to log in an Oracle database?'], 4], [(195410, 2), [['After you have defined the policy, when a user queries the table in the usual way, as follows:'], ['the audit trail records this action. You can see the trail by issuing:']], [[' select * from bank.accounts; \n']], ['How to log in an Oracle database?'], 4], [(195410, 3), [['the audit trail records this action. You can see the trail by issuing:'], ['-10000']], [[' select timestamp, \n   db_user,\n   os_user,\n   object_schema,\n   object_name,\n   sql_text\nfrom dba_fga_audit_trail;\n\nTIMESTAMP DB_USER OS_USER OBJECT_ OBJECT_N SQL_TEXT\n--------- ------- ------- ------- -------- ----------------------\n22-OCT-08 BANK    ananda  BANK    ACCOUNTS select * from accounts\n']], ['How to log in an Oracle database?'], 4], [(196171, 0), [["Yes, a check constraint can check that the day of the week is not Sunday.  Here's an example:"], ['--There are blank spaces to the right of SUNDAY so like or rtrim is needed to match the string.']], [[" create table date_test (entry_date date);\n\nalter table date_test add constraint day_is_not_sunday\n      check ( to_char(entry_date,'DAY','NLS_DATE_LANGUAGE = ENGLISH') not like 'SUNDAY%'); \n"]], ['Oracle 10gr2: prevent any dates that fall on a Sunday?'], 2], [(196171, 1), [['--There are blank spaces to the right of SUNDAY so like or rtrim is needed to match the string.'], ['When you try to insert a date that is on a Sunday, it will say: \n ORA-02290: check constraint (SYS.DAY_IS_NOT_SUNDAY) violated']], [[" insert into date_test values(to_date('2008-10-12','YYYY-MM-DD')); --Sunday\ninsert into date_test values(to_date('2008-10-11','YYYY-MM-DD'));\ninsert into date_test values(to_date('2008-10-10','YYYY-MM-DD'));\ninsert into date_test values(to_date('2008-10-09','YYYY-MM-DD'));\ninsert into date_test values(to_date('2008-10-08','YYYY-MM-DD'));\ninsert into date_test values(to_date('2008-10-07','YYYY-MM-DD'));\ninsert into date_test values(to_date('2008-10-06','YYYY-MM-DD'));\n"]], ['Oracle 10gr2: prevent any dates that fall on a Sunday?'], 2], [(196626, 0), [['Use the "ESCAPE" specifier '], ['Without the ESCAPE you would need to do ']], [[' WHERE "name" ILIKE \'Nome ~% teste \\\\/\' ESCAPE \'~\' \n']], ['Escaping in a ILIKE query'], 5], [(196626, 1), [['Without the ESCAPE you would need to do '], ['Thanks, but I still have the original issue with the slash. Searching with ']], [[' WHERE "name" ILIKE \'Nome \\% test \\\\\\\\/\' \n']], ['Escaping in a ILIKE query'], 5], [(196626, 2), [['Thanks, but I still have the original issue with the slash. Searching with '], ["don't give me a result, while "]], [[' WHERE "name" ILIKE \'Nome \\% test \\\\\\\\/%\' \n']], ['Escaping in a ILIKE query'], 5], [(196626, 3), [["don't give me a result, while "], ['I would attempt to use this to test for that possible scenario']], [[' WHERE "name" ILIKE \'Nome \\% test \\\\\\\\%\' \n']], ['Escaping in a ILIKE query'], 5], [(196626, 4), [['I would attempt to use this to test for that possible scenario'], ['which will return lines that have / separated by something( but not lines with no separation ) ']], [['  WHERE "name" ILIKE \'Nome \\% \' AND "name" ~* \'\\\\.{1,10}/\' \n']], ['Escaping in a ILIKE query'], 5], [(197096, 0), [['In SQL 2005, You can use the following:'], ['If the column is more than 24 hours, this will roll over, if you want days and then hours in that case just do something like:']], [['     select convert(varchar(8), dateadd(second, [SecondsColumn], 0),  108)\n']], ['How to convert in SQL the number of seconds into a human-readable duration?'], 2], [(197096, 1), [['If the column is more than 24 hours, this will roll over, if you want days and then hours in that case just do something like:'], ['-10000']], [[" case when SecondsColumn> (24*60*60) \n        then \n            cast(datepart(day,datediff(dd, 0, dateadd(second, SecondsColumn, 0))) as varchar(4))\n        +   'd' + convert(varchar(2), dateadd(second, SecondsColumn, 0), 108) \n    else\n            convert(varchar(8), dateadd(second, SecondsColumn, 0), 108) \n    end\n"]], ['How to convert in SQL the number of seconds into a human-readable duration?'], 2], [(198952, 0), [["Typically you'd use a script to do this, something along the lines of:"], ['e.g.']], [[" SELECT 'GRANT ALL ON '||table_name||' TO BOB;'\nFROM   ALL_TABLES\nWHERE  OWNER = 'ALICE';\n"]], ['Correct way to give users access to additional schemas in Oracle'], 2], [(198952, 1), [['e.g.'], ['-10000']], [["    PROCEDURE GRANT_TABLES\n   IS\n   BEGIN\n\n      FOR tab IN (SELECT table_name\n                  FROM   all_tables\n                  WHERE  owner = this_user) LOOP\n         EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON '||tab.table_name||' TO other_user';\n      END LOOP;\n   END;\n"]], ['Correct way to give users access to additional schemas in Oracle'], 2], [(199498, 0), [['The standard convention in SQL Server is:'], ['So, for example, the key between notes and tasks would be:']], [[' FK_ForeignKeyTable_PrimaryKeyTable\n']], ['Foreign Key naming scheme'], 4], [(199498, 1), [['So, for example, the key between notes and tasks would be:'], ['And the key between tasks and users would be:']], [[' FK_note_task\n']], ['Foreign Key naming scheme'], 4], [(199498, 2), [['And the key between tasks and users would be:'], ["This gives you an 'at a glance' view of which tables are involved in the key, so it makes it easy to see which tables a particular one (the first one named) depends on (the second one named). In this scenario the complete set of keys would be:"]], [[' FK_task_user\n']], ['Foreign Key naming scheme'], 4], [(199498, 3), [["This gives you an 'at a glance' view of which tables are involved in the key, so it makes it easy to see which tables a particular one (the first one named) depends on (the second one named). In this scenario the complete set of keys would be:"], ['So you can see that tasks depend on users, and notes depend on both tasks and users.']], [[' FK_task_user\nFK_note_task\nFK_note_user\n']], ['Foreign Key naming scheme'], 4], [(200810, 0), [["I don't know the Postgres SQL dialect, but maybe something like:"], ["Incidentally, I don't like the design.  I would prefer the access table to be split into two:"]], [[" select thing.*, coalesce ( ( select access\n                             from   access\n                             where  userid = 1\n                             and    type = 'thing'\n                             and    object_id = thing.id\n                           ),\n                           ( select access\n                             from   access\n                             where  userid = 1\n                             and    type = 'group'\n                             and    object_id = thing.group_id\n                           )\n                         )\nfrom things\n"]], ['How can I do access control via an SQL table?'], 3], [(200810, 1), [["Incidentally, I don't like the design.  I would prefer the access table to be split into two:"], ['My query then becomes:']], [[' thing_access (user_id, thing_id, access)\ngroup_access (user_id, group_id, access)\n']], ['How can I do access control via an SQL table?'], 3], [(200810, 2), [['My query then becomes:'], ['I prefer this because foreign keys can now be used in the access tables.    ']], [[' select thing.*, coalesce ( ( select access\n                             from   thing_access\n                             where  userid = 1\n                             and    thing_id = thing.id\n                           ),\n                           ( select access\n                             from   group_access\n                             where  userid = 1\n                             and    group_id = thing.group_id\n                           )\n                         )\nfrom things\n']], ['How can I do access control via an SQL table?'], 3], [(201527, 0), [["In the project I'm working on, audit log also started from the very minimalistic design, like the one you described:"], ['However, it quickly became obvious that this minimalistic design was not sufficient. The typical audit was boiling down to questions like this: ']], [[' event ID\nevent date/time\nevent type\nuser ID\ndescription\n']], ['Best design for a changelog / auditing database table?'], 3], [(201527, 1), [['However, it quickly became obvious that this minimalistic design was not sufficient. The typical audit was boiling down to questions like this: '], ['So, in order to be able to answer such questions quickly (using SQL), we ended up having two additional columns in the audit table']], [[' Who the heck created/updated/deleted a record \nwith ID=X in the table Foo and when?\n']], ['Best design for a changelog / auditing database table?'], 3], [(201527, 2), [['So, in order to be able to answer such questions quickly (using SQL), we ended up having two additional columns in the audit table'], ["That's when design of our audit log really stabilized (for a few years now)."]], [[' object type (or table name)\nobject ID\n']], ['Best design for a changelog / auditing database table?'], 3], [(202243, 0), [['For 1:'], ['For 2:']], [[' SUBSTRING(CONVERT(varchar, dt, 13), 1, 2)\n    + UPPER(SUBSTRING(CONVERT(varchar, dt, 13), 4, 3))\n']], ['Custom Date/Time formatting in SQL Server'], 2], [(202243, 1), [['For 2:'], ['-10000']], [[' SUBSTRING(CONVERT(varchar, dt, 100), 13, 2)\n    + SUBSTRING(CONVERT(varchar, dt, 100), 16, 3)\n']], ['Custom Date/Time formatting in SQL Server'], 2], [(202912, 0), [['I would set up a view and an associated table-based function based on the CTE.  My reasoning for this is that, while you could implement the logic on the application side, this would involve sending the intermediate data over the wire for computation in the application.  Using the DBML designer, the view translates into a Table entity.  You can then associate the function with the Table entity and invoke the method created on the DataContext to derive objects of the type defined by the view.  Using the table-based function allows the query engine to take your parameters into account while constructing the result set rather than applying a condition on the result set defined by the view after the fact.'], ['To use it you would do something like -- assuming some reasonable naming scheme:']], [[' CREATE TABLE [dbo].[hierarchical_table](\n    [id] [int] IDENTITY(1,1) NOT NULL,\n    [parent_id] [int] NULL,\n    [data] [varchar](255) NOT NULL,\n CONSTRAINT [PK_hierarchical_table] PRIMARY KEY CLUSTERED \n(\n    [id] ASC\n)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\n) ON [PRIMARY]\n\nCREATE VIEW [dbo].[vw_recursive_view]\nAS\nWITH hierarchy_cte(id, parent_id, data, lvl) AS\n(SELECT     id, parent_id, data, 0 AS lvl\n      FROM         dbo.hierarchical_table\n      WHERE     (parent_id IS NULL)\n      UNION ALL\n      SELECT     t1.id, t1.parent_id, t1.data, h.lvl + 1 AS lvl\n      FROM         dbo.hierarchical_table AS t1 INNER JOIN\n                            hierarchy_cte AS h ON t1.parent_id = h.id)\nSELECT     id, parent_id, data, lvl\nFROM         hierarchy_cte AS result\n\n\nCREATE FUNCTION [dbo].[fn_tree_for_parent] \n(\n    @parent int\n)\nRETURNS \n@result TABLE \n(\n    id int not null,\n    parent_id int,\n    data varchar(255) not null,\n    lvl int not null\n)\nAS\nBEGIN\n    WITH hierarchy_cte(id, parent_id, data, lvl) AS\n   (SELECT     id, parent_id, data, 0 AS lvl\n        FROM         dbo.hierarchical_table\n        WHERE     (id = @parent OR (parent_id IS NULL AND @parent IS NULL))\n        UNION ALL\n        SELECT     t1.id, t1.parent_id, t1.data, h.lvl + 1 AS lvl\n        FROM         dbo.hierarchical_table AS t1 INNER JOIN\n            hierarchy_cte AS h ON t1.parent_id = h.id)\n    INSERT INTO @result\n    SELECT     id, parent_id, data, lvl\n    FROM         hierarchy_cte AS result\nRETURN \nEND\n\nALTER TABLE [dbo].[hierarchical_table]  WITH CHECK ADD  CONSTRAINT [FK_hierarchical_table_hierarchical_table] FOREIGN KEY([parent_id])\nREFERENCES [dbo].[hierarchical_table] ([id])\n\nALTER TABLE [dbo].[hierarchical_table] CHECK CONSTRAINT [FK_hierarchical_table_hierarchical_table]\n']], ['Hierarchical data in Linq - options and performance'], 2], [(202912, 1), [['To use it you would do something like -- assuming some reasonable naming scheme:'], ['-10000']], [[' using (DataContext dc = new HierarchicalDataContext())\n{\n    HierarchicalTableEntity h = (from e in dc.HierarchicalTableEntities\n                                 select e).First();\n    var query = dc.FnTreeForParent( h.ID );\n    foreach (HierarchicalTableViewEntity entity in query) {\n        ...process the tree node...\n    }\n}\n']], ['Hierarchical data in Linq - options and performance'], 2], [(203302, 0), [['First question:'], ['While debugging this, I used the data set:']], [[' select date from test where date = 8\nunion all\nselect max(date) from test where date < 8\nunion all\nselect min(date) from test where date > 8\norder by date;\n']], ["What is the SQL for 'next' and 'previous' in a table?"], 3], [(203302, 1), [['While debugging this, I used the data set:'], ['to give this result:']], [[' (key:date) 1:1,2:3,3:8,4:8,5:19,10:19,11:67,15:45,16:8,17:3,18:1\n']], ["What is the SQL for 'next' and 'previous' in a table?"], 3], [(203302, 2), [['to give this result:'], ['In both cases the final order by clause is strictly speaking optional.']], [[' select * from test2 where date = 8\nunion all\nselect * from (select * from test2\n                   where date = (select max(date) from test2 \n                                     where date < 8)) \n    where key = (select max(key) from test2 \n                    where date = (select max(date) from test2 \n                                      where date < 8))\nunion all\nselect * from (select * from test2\n                   where date = (select min(date) from test2 \n                                     where date > 8)) \n    where key = (select min(key) from test2 \n                    where date = (select min(date) from test2 \n                                      where date > 8))\norder by date,key;\n']], ["What is the SQL for 'next' and 'previous' in a table?"], 3], [(203469, 0), [["Reading a bit about the  MySQL enum , I'm guessing the closest equivalent would be a simple check constraint"], ["but that doesn't allow you to reference the value by the index.  A more complicated foreign key relationship would also be possible"]], [[" CREATE TABLE sizes (\n  name VARCHAR2(10) CHECK( name IN ('small','medium','large') )\n);\n"]], ['How to use enums in Oracle?'], 2], [(203469, 1), [["but that doesn't allow you to reference the value by the index.  A more complicated foreign key relationship would also be possible"], ['As long as you operate through the view, it would seem that your could replicate the functionality reasonably well.']], [[" CREATE TABLE valid_names (\n  name_id   NUMBER PRIMARY KEY,\n  name_str  VARCHAR2(10)\n);\n\nINSERT INTO valid_sizes VALUES( 1, 'small' );\nINSERT INTO valid_sizes VALUES( 2, 'medium' );\nINSERT INTO valid_sizes VALUES( 3, 'large' );\n\nCREATE TABLE sizes (\n  name_id NUMBER REFERENCES valid_names( name_id )\n);\n\nCREATE VIEW vw_sizes\n  AS \n  SELECT a.name_id name, <<other columns from the sizes table>>\n    FROM valid_sizes a,\n         sizes       b\n   WHERE a.name_id = b.name_id\n"]], ['How to use enums in Oracle?'], 2], [(203809, 0), [['-10000'], ['Tested with following setup:']], [[' SELECT Categories.Name,count(DISTINCT categories.name) FROM Categories\nJOIN Domains ON Categories.ID=Domains.CID\nJOIN Records ON Records.DID=Domains.ID\nGROUP BY Categories.Name']], ['How would I write this 3 level deep mysql query?'], 2], [(203809, 1), [['Tested with following setup:'], ['-10000']], [[" \nCREATE TABLE Categories (Name nvarchar(50), ID int  NOT NULL IDENTITY(1,1))\nCREATE TABLE Domains (Name nvarchar(50), ID int NOT NULL IDENTITY(1,1), CID int)\nCREATE TABLE Records (Name nvarchar(50), ID int NOT NULL IDENTITY(1,1), DID int)\n\nINSERT INTO Records (DID) VALUES (1)\nINSERT INTO Records (DID) VALUES (1)\nINSERT INTO Records (DID) VALUES (2)\nINSERT INTO Records (DID) VALUES (2)\nINSERT INTO Records (DID) VALUES (3)\nINSERT INTO Records (DID) VALUES (3)\n\nINSERT INTO Domains (Name,CID) VALUES ('D1',1)\nINSERT INTO Domains (Name,CID) VALUES ('D2',1)\nINSERT INTO Domains (Name,CID) VALUES ('D5',1)\nINSERT INTO Domains (Name,CID) VALUES ('D3',2)\nINSERT INTO Domains (Name,CID) VALUES ('D4',2)\n\nINSERT INTO Categories (Name) VALUES ('1')\nINSERT INTO Categories (Name) VALUES ('2')\nINSERT INTO Categories (Name) VALUES ('3')\n"]], ['How would I write this 3 level deep mysql query?'], 2], [(204050, 0), [['For fixed server roles, the stored procedure is  sp_helpsrvrolemember :'], ['For general roles, the stored procedure is  sp_helprolemember :']], [[" exec sp_helpsrvrolemember 'role'\n"]], ['MSSQL2000: get list of role members'], 2], [(204050, 1), [['For general roles, the stored procedure is  sp_helprolemember :'], ['-10000']], [[" exec sp_helprolemember 'role'\n"]], ['MSSQL2000: get list of role members'], 2], [(206222, 0), [['-10000'], ['returns a difference in days.  Multiply by 24 to get a difference in hours and 24*60 to get minutes.  So']], [[' SELECT date1 - date2\n  FROM some_table\n']], ['Oracle - Best SELECT statement for getting the difference in minutes between two DateTime columns?'], 2], [(206222, 1), [['returns a difference in days.  Multiply by 24 to get a difference in hours and 24*60 to get minutes.  So'], ["should be what you're looking for"]], [[' SELECT (date1 - date2) * 24 * 60 difference_in_minutes\n  FROM some_table\n']], ['Oracle - Best SELECT statement for getting the difference in minutes between two DateTime columns?'], 2], [(208493, 0), [["I've tried using this statement below\n  to find an appropriate column based on\n  what I think it should be named but it\n  returned no results.*"], ["A column isn't an object.  If you mean that you expect the column name to be like '%DTN%', the query you want is:"]], [[" SELECT * from dba_objects WHERE\nobject_name like '%DTN%'\n"]], ['Search All Fields In All Tables For A Specific Value (Oracle)'], 4], [(208493, 1), [["A column isn't an object.  If you mean that you expect the column name to be like '%DTN%', the query you want is:"], ["Anyway, diciu's answer gives one method of generating SQL queries to check every column of every table for the value.  You can also do similar stuff entirely in one SQL session using a PL/SQL block and dynamic SQL.  Here's some hastily-written code for that:"]], [[" SELECT owner, table_name, column_name FROM all_tab_columns WHERE column_name LIKE '%DTN%';\n"]], ['Search All Fields In All Tables For A Specific Value (Oracle)'], 4], [(208493, 2), [["Anyway, diciu's answer gives one method of generating SQL queries to check every column of every table for the value.  You can also do similar stuff entirely in one SQL session using a PL/SQL block and dynamic SQL.  Here's some hastily-written code for that:"], ['Instead of one query per column, you could build one query per table like this:']], [["     SET SERVEROUTPUT ON SIZE 100000\n\n    DECLARE\n      match_count INTEGER;\n    BEGIN\n      FOR t IN (SELECT owner, table_name, column_name\n                  FROM all_tab_columns\n                  WHERE owner <> 'SYS' and data_type LIKE '%CHAR%') LOOP\n\n        EXECUTE IMMEDIATE\n          'SELECT COUNT(*) FROM ' || t.owner || '.' || t.table_name ||\n          ' WHERE '||t.column_name||' = :1'\n          INTO match_count\n          USING '1/22/2008P09RR8';\n\n        IF match_count > 0 THEN\n          dbms_output.put_line( t.table_name ||' '||t.column_name||' '||match_count );\n        END IF;\n\n      END LOOP;\n\n    END;\n    /\n"]], ['Search All Fields In All Tables For A Specific Value (Oracle)'], 4], [(208493, 3), [['Instead of one query per column, you could build one query per table like this:'], ['-10000']], [[" SELECT * FROM table1\n  WHERE column1 = 'value'\n     OR column2 = 'value'\n     OR column3 = 'value'\n     ...\n     ;\n"]], ['Search All Fields In All Tables For A Specific Value (Oracle)'], 4], [(209787, 0), [['Try this:'], ['You can rewrite it to a GROUP BY as well:']], [[' SELECT\n    *\nFROM\n    source\nWHERE\n    (\n        SELECT COUNT(DISTINCT value)\n        FROM params\n        WHERE params.source = source.id\n          AND params.value IN (1, 2, 3)\n    ) = 3\n']], ['SQL one-to-many match the one side by ALL in many side'], 2], [(209787, 1), [['You can rewrite it to a GROUP BY as well:'], ['-10000']], [[' SELECT\n    source.*\nFROM\n    source\n    INNER JOIN params ON params.source = source.id\nWHERE\n    params.value IN (1, 2, 3)\nGROUP BY\n    source.id,\n    source.name\nHAVING\n    COUNT(DISTINCT params.value) = 3\n']], ['SQL one-to-many match the one side by ALL in many side'], 2], [(213476, 0), [['First, you need a temporary table:'], ["Now we're ready to query."]], [[' CREATE TABLE pivot (count integer);\nINSERT INTO pivot VALUES (1);\nINSERT INTO pivot VALUES (2);\n']], ['"Pivoting" a Table in SQL (i.e. Cross tabulation / crosstabulation)'], 2], [(213476, 1), [["Now we're ready to query."], ['-10000']], [[" SELECT campaignid, sourceid, a.contentvalue, b.contentvalue\nFROM content a, content b, pivot, source\nWHERE source.campaignid = content.campaignid\nAND pivot = 1 AND a.contentrowid = 'A'\nAND pivot = 2 AND b.contentrowid = 'B'\n"]], ['"Pivoting" a Table in SQL (i.e. Cross tabulation / crosstabulation)'], 2], [(214045, 0), [['I agree with you that the foreign key column in a child table should have the same name as the primary key column in the parent table.  Note that this permits syntax like the following:'], ["The USING keyword assumes that a column exists by the same name in both tables, and that you want an equi-join.  It's nice to have this available as shorthand for the more verbose:"]], [[' SELECT * FROM foo JOIN bar USING (foo_id);\n']], ['Why specify primary/foreign key attributes in column names'], 4], [(214045, 1), [["The USING keyword assumes that a column exists by the same name in both tables, and that you want an equi-join.  It's nice to have this available as shorthand for the more verbose:"], ["Note, however, there are cases when you can't name the foreign key the same as the primary key it references.  For example, in a table that has a self-reference:"]], [[' SELECT * FROM foo JOIN bar ON (foo.foo_id = bar.foo_id);\n']], ['Why specify primary/foreign key attributes in column names'], 4], [(214045, 2), [["Note, however, there are cases when you can't name the foreign key the same as the primary key it references.  For example, in a table that has a self-reference:"], ["Also a table may have multiple foreign keys to the same parent table.  It's useful to use the name of the column to describe the nature of the relationship:"]], [[' CREATE TABLE Employees (\n  emp_id INT PRIMARY KEY,\n  manager_id INT REFERENCES Employees(emp_id)\n);\n']], ['Why specify primary/foreign key attributes in column names'], 4], [(214045, 3), [["Also a table may have multiple foreign keys to the same parent table.  It's useful to use the name of the column to describe the nature of the relationship:"], ['I don\'t like to include the name of the table in the column name.  I also eschew the obligatory "id" as the name of the primary key column in every table.']], [[' CREATE TABLE Bugs (\n  ...\n  reported_by INT REFERENCES Accounts(account_id),\n  assigned_to INT REFERENCES Accounts(account_id),\n  ...\n);\n']], ['Why specify primary/foreign key attributes in column names'], 4], [(214309, 0), [['The standard SQL language uses double-quotes for delimited identifiers:'], ['MySQL uses back-quotes by default.  MySQL can use standard double-quotes:']], [[' SELECT * FROM "my table";\n']], ['Do different databases use different name quote?'], 3], [(214309, 1), [['MySQL uses back-quotes by default.  MySQL can use standard double-quotes:'], ['Microsoft SQL Server uses brackets by default.  Microsoft can use standard double-quotes: ']], [[' SELECT * FROM `my table`;\nSET GLOBAL SQL_MODE=ANSI_QUOTES;\nSELECT * FROM "my table";\n']], ['Do different databases use different name quote?'], 3], [(214309, 2), [['Microsoft SQL Server uses brackets by default.  Microsoft can use standard double-quotes: '], ['InterBase and Firebird need to set the SQL dialect to 3 to support delimited identifiers.']], [[' SELECT * FROM [my table];\nSET QUOTED_IDENTIFIER ON;\nSELECT * FROM "my table";\n']], ['Do different databases use different name quote?'], 3], [(216007, 0), [['This shows the number of connections per each DB:'], ['And this gives the total:']], [[' SELECT \n    DB_NAME(dbid) as DBName, \n    COUNT(dbid) as NumberOfConnections,\n    loginame as LoginName\nFROM\n    sys.sysprocesses\nWHERE \n    dbid > 0\nGROUP BY \n    dbid, loginame\n']], ['How to determine total number of open/active connections in ms sql server 2005'], 3], [(216007, 1), [['And this gives the total:'], ['If you need more detail, run:']], [[' SELECT \n    COUNT(dbid) as TotalConnections\nFROM\n    sys.sysprocesses\nWHERE \n    dbid > 0\n']], ['How to determine total number of open/active connections in ms sql server 2005'], 3], [(216007, 2), [['If you need more detail, run:'], ["Note:  The SQL Server account used needs the 'sysadmin' role (otherwise it will just show a single row and a count of 1 as the result)"]], [[" sp_who2 'Active'\n"]], ['How to determine total number of open/active connections in ms sql server 2005'], 3], [(219716, 0), [['If you have a "grid" that you want to populate completely, like size and color information for a particular article of clothing:'], ['Maybe you want a table that contains a row for every minute in the day, and you want to use it to verify that a procedure has executed each minute, so you might cross three tables:']], [[' select \n    size,\n    color\nfrom\n    sizes CROSS JOIN colors\n']], ['What are the uses for Cross Join?'], 3], [(219716, 1), [['Maybe you want a table that contains a row for every minute in the day, and you want to use it to verify that a procedure has executed each minute, so you might cross three tables:'], ['Or you have a set of standard report specs that you want to apply to every month in the year:']], [[' select\n    hour,\n    minute\nfrom\n    hours CROSS JOIN minutes\n']], ['What are the uses for Cross Join?'], 3], [(219716, 2), [['Or you have a set of standard report specs that you want to apply to every month in the year:'], ["The problem with maintaining these as views is that in most cases, you don't want a complete product, particularly with respect to clothes. You can add  MINUS  logic to the query to remove certain combinations that you don't carry, but you might find it easier to populate a table some other way and not use a Cartesian product."]], [[' select\n    specId,\n    month\nfrom\n    reports CROSS JOIN months\n']], ['What are the uses for Cross Join?'], 3], [(219982, 0), [['You can use functions in your order-by clause.  In this case,\nyou can split the non-numeric and numeric portions of the\nfield and use them as two of the ordering criteria.'], ['You can also create a function-based index to support this:']], [[" select * from t\n order by to_number(regexp_substr(a,'^[0-9]+')),\n          to_number(regexp_substr(a,'[0-9]+$')),\n          a;\n"]], ['Oracle: How can I implement a "natural" order-by in a SQL query?'], 2], [(219982, 1), [['You can also create a function-based index to support this:'], ['-10000']], [[" create index t_ix1\n    on t (to_number(regexp_substr(a, '^[0-9]+')),\n          to_number(regexp_substr(a, '[0-9]+$')), \n          a);\n"]], ['Oracle: How can I implement a "natural" order-by in a SQL query?'], 2], [(221584, 0), [['The classic design approach would be (the star denotes the primary key column):'], ['The query would go something like this:']], [[' Product\n  ProductId*\n  CategoryId: FK to Category.CategroyId\n  Name\n\nCategory\n  CategoryId*\n  Name\n\nProperty\n  PropertyId*\n  Name\n  Type\n\nCategoryProperty\n  CategoryId*: FK to Category.CategoryId\n  PropertyId*: FK to Property.PropertyId\n\nProductProperty\n  ProductId*: FK to Product.ProductId\n  PropertyId*: FK to Property.PropertyId\n  ValueAsString\n']], ['What is best practice for this problem (different properties for different categories)?'], 2], [(221584, 1), [['The query would go something like this:'], ['The more WHERE conditions you supply (conjunctively, e.g. using AND), the faster the query will be. If you have properly indexed your tables, that is. ']], [[' SELECT\n   Product.ProductId,\n   Product.Name AS ProductName,\n   Category.CategoryId,\n   Category.Name AS CategoryName,\n   Property.PropertyId,\n   Property.Name AS PropertyName,\n   Property.Type AS PropertyType,\n   ProductProperty.ValueAsString\nFROM\n   Product \n   INNER JOIN Category         ON Category.CategoryId = Product.CategoryId\n   INENR JOIN CategoryProperty ON CategoryProperty.CategoryId = Category.CategoryId\n   INNER JOIN Property         ON Property.PropertyId = CategoryProperty.PropertyId\n   INNER JOIN ProductProperty  ON ProductProperty.PropertyId = Property.PropertyId\n                                  AND ProductProperty.ProductId = Product.ProductId\nWHERE\n   Product.ProductId = 1\n']], ['What is best practice for this problem (different properties for different categories)?'], 2], [(221822, 0), [['Your first approach ought to be to do this as a single query:'], ['For very complex situations or where temp# is very large, try a subquery factoring clause, optionally with the materialize hint:']], [[" SELECT * \nFROM   \n(\nSELECT * \nFROM   tab1 , \n       tab2 \nWHERE  tab1.key = tab2.fkey\n)\nWHERE  field1 = 'value';\n"]], ['Sybase Developer Asks: How To Create a Temporary Table in Oracle?'], 2], [(221822, 1), [['For very complex situations or where temp# is very large, try a subquery factoring clause, optionally with the materialize hint:'], ['If that is not helpful, go to the Global Temporary Table method.']], [[" with #temp as\n(\nSELECT /*+ materialize */ \n       * \nFROM   tab1 , \n       tab2 \nWHERE  tab1.key = tab2.fkey\n)\nSELECT * \nFROM   temp#\nWHERE  field1 = 'value';\n"]], ['Sybase Developer Asks: How To Create a Temporary Table in Oracle?'], 2], [(223627, 0), [['If you have your "filter" controls on the form, why don\'t you use the Application.buildCriteria method, that will allow you to add your filtering criterias to a string, then make a filter out of this string, and build your WHERE clause on the fly?'], ['PS: if your "filter" controls on your form always have the same syntax (let\'s say "search_fieldName", where "fieldName" corresponds to the field in the underlying recordset) and are always located in the same zone (let\'s say formHeader), it is then possible to write a function that will automatically generate a filter for the current form. This filter can then be set as the form filter, or used for something else:']], [[' selectClause = "SELECT TabCustomers.* FROM TabCustomers"\nif not isnull(Forms!FrmSearchCustomer!SearchMember) then\n    whereClause = whereClause & application.buildCriteria(your field name, your field type, your control value) &  " AND "\nendif\nif not isnull(Forms!FrmSearchCustomer!SearchFore) then\n    whereClause = whereClause & application.buildCriteria(...) &  " AND "\nendif\nif not isnull(Forms!FrmSearchCustomer!SearchLast) then\n    whereClause = whereClause & application.buildCriteria(...) &  " AND "\nendif\nif not isnull(Forms!FrmSearchCustomer!SearchDate) then\n    whereClause = whereClause & application.buildCriteria(...) & " AND "\nendif\n--get rid of the last "AND"\nif len(whereClause) > 0 then\n     whereClause = left(whereClause,len(whereClause)-5)\n     selectClause = selectClause & " WHERE " & whereClause\nendif\n-- your SELECT instruction is ready ...\n']], ['Returning records that partially match a value'], 2], [(223627, 1), [['PS: if your "filter" controls on your form always have the same syntax (let\'s say "search_fieldName", where "fieldName" corresponds to the field in the underlying recordset) and are always located in the same zone (let\'s say formHeader), it is then possible to write a function that will automatically generate a filter for the current form. This filter can then be set as the form filter, or used for something else:'], ['-10000']], [[' For each ctl in myForm.section(acHeader).controls\n    if ctl.name like "search_"\n        fld = myForm.recordset.fields(mid(ctl.name,8))\n        if not isnull(ctl.value) then\n           whereClause = whereClause & buildCriteria(fld.name ,fld.type, ctl.value) & " AND "\n        endif\n    endif\nnext ctl\nif len(whereClause)> 0 then ...\n']], ['Returning records that partially match a value'], 2], [(223921, 0), [['I pop this in the  outputs .  The output of  proc , is a cpp file'], ['There are 2 lines in the  commands  window.  One to set the MSVC 6 environment.  The other to invoke proc on the .pc file.']], [[' $(ProjDir)\\$(InputName).cpp\n']], ['Will Pro*C work with MSVC 6?'], 2], [(223921, 1), [['There are 2 lines in the  commands  window.  One to set the MSVC 6 environment.  The other to invoke proc on the .pc file.'], ['You must add the .cpp file to your project in order to compile it.   If you need to debug, set your breakpoints in the .cpp file.  ']], [[' call vcvars32.bat \nproc sqlcheck=semantics userid=scott/tiger@instance   code=cpp char_map=string   sqlcheck=semantics parse=partial mode=ansi    $(ProjDir)\\$(InputName).pc    include=c:\\ora920\\oci\\include   include="%MSVCDIR%\\include" include="$(MSDEVDIR)\\..\\vc\\include"      include="$(MSDEVDIR)\\..\\..\\vc98\\include"\n']], ['Will Pro*C work with MSVC 6?'], 2], [(226473, 0), [['pseudocode of cron script:'], ['A potential pitfall:  if the cron script is killed, a scheduled task will remain in "executing_now" state. That\'s what the pid lock at beginning and end is for: to see if the cron script terminated properly. pseudocode of create/check pidlock:']], [[' [create/check pid lock (optional, but see "A potential pitfall" below)]\nget number of rows from myhappytable where (exec_status == executing_now)\nif it is > 0, exit\nbegin loop\n  get one row from myhappytable\n    where (exec_status == not_yet_run) and (scheduled_time <= now)\n    order by scheduled_time asc\n  if no such row, exit\n  set row exec_status to executing_now (maybe set time_started to now)\n  execute whatever command the row contains\n  set row exec_status to completed\n  (maybe also store the command output/return as well, set time_finished to now)\nend loop\n[delete pid lock file (complementary to the starting pid lock check)]\n']], ['cron script to act as a queue OR a queue for cron?'], 2], [(226473, 1), [['A potential pitfall:  if the cron script is killed, a scheduled task will remain in "executing_now" state. That\'s what the pid lock at beginning and end is for: to see if the cron script terminated properly. pseudocode of create/check pidlock:'], ['-10000']], [[' if exists pidlockfile then\n  check if process id given in file exists\n  if not exists then\n    update myhappytable set exec_status = error_cronscript_died_while_executing_this   \n      where exec_status == executing_now\n    delete pidlockfile\n  else (previous instance still running)\n    exit\n  endif\nendif\ncreate pidlockfile containing cron script process id\n']], ['cron script to act as a queue OR a queue for cron?'], 2], [(228705, 0), [["Here's an alternative that doesn't repeat information and it uses one fewer join.  You can use an expression to compare s.id_class to the current c.id_class matched via the mtm table."], ['So is_current will be 1 (true) on one row, and 0 (false) on all the other rows.  Or you can output something more informative using a  CASE  construct:']], [[' SELECT s.name, c.className, (s.id_class = c.id_class) AS is_current\nFROM s JOIN many_to_many AS mtm ON (s.id_student = mtm.id_student)\n  JOIN c ON (c.id_class = mtm.id_class);\n']], ['Weird many to many and one to many relationship'], 2], [(228705, 1), [['So is_current will be 1 (true) on one row, and 0 (false) on all the other rows.  Or you can output something more informative using a  CASE  construct:'], ['-10000']], [[" SELECT s.name, c.className, \n  CASE WHEN s.id_class = c.id_class THEN 'current' ELSE 'past' END AS is_current\nFROM s JOIN many_to_many AS mtm ON (s.id_student = mtm.id_student)\n  JOIN c ON (c.id_class = mtm.id_class);\n"]], ['Weird many to many and one to many relationship'], 2], [(230241, 0), [["The code below can be pasted 'as is' into a standard module. The SQL for you example would be:"], ['This code is by DHookom, Access MVP, and is taken from  http://www.tek-tips.com/faqs.cfm?fid=4233']], [[' SELECT tbl.A, Concatenate("SELECT B  FROM tbl\n        WHERE A = " & [A]) AS ConcA\nFROM tbl\nGROUP BY tbl.A\n']], ['Does MS access(2003) have anything comparable to Stored procedure. I want to run a complex query in MS acceess'], 2], [(230241, 1), [['This code is by DHookom, Access MVP, and is taken from  http://www.tek-tips.com/faqs.cfm?fid=4233'], ['-10000']], [[' Function Concatenate(pstrSQL As String, _\n        Optional pstrDelim As String = ", ") _\n            As String\n    \'example\n    \'tblFamily with FamID as numeric primary key\n    \'tblFamMem with FamID, FirstName, DOB,...\n    \'return a comma separated list of FirstNames\n    \'for a FamID\n    \'    John, Mary, Susan\n    \'in a Query\n    \'(This SQL statement assumes FamID is numeric)\n    \'===================================\n    \'SELECT FamID,\n    \'Concatenate("SELECT FirstName FROM tblFamMem\n    \'     WHERE FamID =" & [FamID]) as FirstNames\n    \'FROM tblFamily\n    \'===================================\n    \'\n    \'If the FamID is a string then the SQL would be\n    \'===================================\n    \'SELECT FamID,\n    \'Concatenate("SELECT FirstName FROM tblFamMem\n    \'     WHERE FamID =""" & [FamID] & """") as FirstNames\n    \'FROM tblFamily\n    \'===================================\n\n    \'======For DAO uncomment next 4 lines=======\n    \'======     comment out ADO below    =======\n    \'Dim db As DAO.Database\n    \'Dim rs As DAO.Recordset\n    \'Set db = CurrentDb\n    \'Set rs = db.OpenRecordset(pstrSQL)\n\n    \'======For ADO uncomment next two lines=====\n    \'======     comment out DAO above     ======\n    Dim rs As New ADODB.Recordset\n    rs.Open pstrSQL, CurrentProject.Connection, _\n            adOpenKeyset, adLockOptimistic\n    Dim strConcat As String \'build return string\n    With rs\n        If Not .EOF Then\n            .MoveFirst\n            Do While Not .EOF\n                strConcat = strConcat & _\n                    .Fields(0) & pstrDelim\n                .MoveNext\n            Loop\n        End If\n        .Close\n    End With\n    Set rs = Nothing\n    \'====== uncomment next line for DAO ========\n    \'Set db = Nothing\n    If Len(strConcat) > 0 Then\n        strConcat = Left(strConcat, _\n            Len(strConcat) - Len(pstrDelim))\n    End If\n    Concatenate = strConcat\nEnd Function \n']], ['Does MS access(2003) have anything comparable to Stored procedure. I want to run a complex query in MS acceess'], 2], [(231126, 0), [['-10000'], ["I think you need some way to associate a row in Comments to the correct row in Activity.  Right now if two people comment on a given Task on the same day, you don't know whose comment is whose.  I'd recommend that you give each row in Activity a unique key, and then reference that from the Comments table."]], [[" SELECT a1.Who, a1.What, a1.ID, c.When, c.Comment\nFROM Activity AS a1\n  JOIN Activity AS a2 ON (a1.ID = a2.ID AND a1.When > a2.When)\n  JOIN Comments AS c ON (a1.ID = c.ID AND a.When = c.When);\nWHERE a2.What = 'Closed';\n"]], ['mySQL get information from multiple tables in one query'], 3], [(231126, 1), [["I think you need some way to associate a row in Comments to the correct row in Activity.  Right now if two people comment on a given Task on the same day, you don't know whose comment is whose.  I'd recommend that you give each row in Activity a unique key, and then reference that from the Comments table."], ['Then you can make associations so the query returns more accurate results:']], [[' CREATE TABLE Tasks (\n  Task_ID      INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n  Created      DATE NOT NULL,\n  Status       VARCHAR(10)\n) TYPE=InnoDB;\n\nCREATE TABLE Activity (\n  Activity_ID  INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n  Task_ID      INT NOT NULL REFERENCES Tasks,\n  Who          VARCHAR(10) NOT NULL,\n  What         VARCHAR(10) NOT NULL,\n  When         DATE NOT NULL\n) TYPE=InnoDB;\n\nCREATE TABLE Comments (\n  Comment_ID   INT NOT NULL PRIMARY KEY AUTO_INCREMENT,\n  Activity_ID  INT NOT NULL REFERENCES Activity,\n  Who          VARCHAR(10) NOT NULL,\n  When         DATE NOT NULL,\n  Comment      VARCHAR(100) NOT NULL\n) TYPE=InnoDB;\n']], ['mySQL get information from multiple tables in one query'], 3], [(231126, 2), [['Then you can make associations so the query returns more accurate results:'], ["Make sure to use  TYPE=InnoDB  in MySQL because the default storage engine MyISAM doesn't support foreign key references."]], [[" SELECT c.Who, a1.What, a1.Task_ID, c.When, c.Comment\nFROM Activity AS a1\n  JOIN Activity AS a2 ON (a1.Task_ID = a2.Task_ID AND a1.When > a2.When)\n  JOIN Comments AS c ON (a1.Activity_ID = c.Activity_ID);\nWHERE a2.What = 'Closed';\n"]], ['mySQL get information from multiple tables in one query'], 3], [(231695, 0), [["If you do it as four separate fields, then you don't have to join.  To Save the query syntax from being too horrible, you could write:"], ['As mentioned in comments, the IN operator is pretty specific when it comes to date fields (down to the last (milli)second).  You can always use date time functions on the subquery, but BETWEEN is unusable:']], [[" SELECT * FROM MyTable WHERE 'DateLiteral' IN (MyDate1, MyDate2, MyDate3, MyDate4);\n"]], ['Fixed-size array database field'], 2], [(231695, 1), [['As mentioned in comments, the IN operator is pretty specific when it comes to date fields (down to the last (milli)second).  You can always use date time functions on the subquery, but BETWEEN is unusable:'], ['-10000']], [[" SELECT * FROM MyTable WHERE date_trunc('hour', 'DateLiteral') \nIN (date_trunc('hour', MyDate1), date_trunc('hour', MyDate2), date_trunc('hour', MyDate3), date_trunc('hour', MyDate4));\n"]], ['Fixed-size array database field'], 2], [(232387, 0), [['Here are the correct versions of both of them on SQLServer 2000.'], ['or']], [[" select t.range as [score range], count(*) as [number of occurences]\nfrom (\n  select case  \n    when score between 0 and 9 then ' 0- 9'\n    when score between 10 and 19 then '10-19'\n    else '20-99' end as range\n  from scores) t\ngroup by t.range\n"]], ['In SQL, how can you "group by" in ranges?'], 2], [(232387, 1), [['or'], ['-10000']], [[" select t.range as [score range], count(*) as [number of occurences]\nfrom (\n      select user_id,\n         case when score >= 0 and score< 10 then '0-9'\n         when score >= 10 and score< 20 then '10-19'\n         else '20-99' end as range\n     from scores) t\ngroup by t.range\n"]], ['In SQL, how can you "group by" in ranges?'], 2], [(232935, 0), [['What kind of field is this? The IN operator cannot be used with a single field, but is meant to be used in subqueries or with predefined lists:'], ['If you are searching a string, go for the LIKE operator (but this will be slow):']], [[' -- subquery\nSELECT a FROM x WHERE x.b NOT IN (SELECT b FROM y);\n-- predefined list\nSELECT a FROM x WHERE x.b NOT IN (1, 2, 3, 6);\n']], ['SQL Query Where Field DOES NOT Contain $x'], 3], [(232935, 1), [['If you are searching a string, go for the LIKE operator (but this will be slow):'], ['If you restrict it so that the string you are searching for has to start with the given string, it can use indices (if there is an index on that field) and be reasonably fast:']], [[' -- Finds all rows where a does not contain "text"\nSELECT * FROM x WHERE x.a NOT LIKE \'%text%\';\n']], ['SQL Query Where Field DOES NOT Contain $x'], 3], [(232935, 2), [['If you restrict it so that the string you are searching for has to start with the given string, it can use indices (if there is an index on that field) and be reasonably fast:'], ['-10000']], [[' -- Finds all rows where a does not start with "text"\nSELECT * FROM x WHERE x.a NOT LIKE \'text%\';\n']], ['SQL Query Where Field DOES NOT Contain $x'], 3], [(236236, 0), [['-10000'], ['Here is a simple test example:']], [[" SELECT \n    np.Id, \n    np.Description, \n    MIN(Case promotionalCode WHEN 'A' THEN Price ELSE NULL END) AS 'A',\n    MIN(Case promotionalCode WHEN 'B' THEN Price ELSE NULL END) AS 'B',\n    MIN(Case promotionalCode WHEN 'C' THEN Price ELSE NULL END) AS 'C'\nFROM \n    Price AS p \nINNER JOIN nProduct AS np ON p.nProduct = np.Id\nGROUP BY \n    np.Id,\n    np.Description\n"]], ['Rows in their own columns depending on their value'], 2], [(236236, 1), [['Here is a simple test example:'], ['-10000']], [[" DECLARE @temp TABLE (\n    id INT,\n    description varchar(50),\n    promotionalCode char(1),\n    Price smallmoney\n)\n\nINSERT INTO @temp\nselect 1, 'Product 1', 'A', 5\n    union\nSELECT 1, 'Product 1',  'B', 4\n    union\nSELECT 1, 'Product 1', 'C', 2\n\n\n\nSELECT\n    id,\n    description,\n    MIN(Case promotionalCode WHEN 'A' THEN Price ELSE NULL END) AS 'A',\n    MIN(Case promotionalCode WHEN 'B' THEN Price ELSE NULL END) AS 'B',\n    MIN(Case promotionalCode WHEN 'C' THEN Price ELSE NULL END) AS 'C'\nFROM\n     @temp\nGROUP BY \n    id,\n    description\n"]], ['Rows in their own columns depending on their value'], 2], [(240393, 0), [['-10000'], ['So re-write as:']], [[" SELECT DISTINCT name FROM log WHERE NOT name = '' AND name LIKE '%.EDIT%';\n"]], ["Why won't this SQL statement work?"], 2], [(240393, 1), [['So re-write as:'], ['-10000']], [[" SELECT DISTINCT name FROM log WHERE name LIKE '%.EDIT%';\n"]], ["Why won't this SQL statement work?"], 2], [(240765, 0), [['For  DBMS_JOBS  you can use...'], ['For the newer  DBMS_SCHEDULER  jobs you can use...']], [[" dbms_job.submit(\nJOB       OUT BINARY_INTEGER,\nWHAT      IN  VARCHAR2,\nNEXT_DATE IN  DATE           DEFAULT SYSDATE,\nINTERVAL  IN  VARCHAR2       DEFAULT 'NULL',\nNO_PARSE  IN  BOOLEAN        DEFAULT FALSE,\nINSTANCE  IN  BINARY_INTEGER DEFAULT 0,\nFORCE     IN  BOOLEAN        DEFAULT FALSE);\n"]], ['Oracle Scheduled Jobs'], 2], [(240765, 1), [['For the newer  DBMS_SCHEDULER  jobs you can use...'], ["I haven't found a way to add a Grid Control job using SQL.  I may ask that as a separate question if the answer doesn't show up here."]], [[" dbms_scheduler.create_job(\njob_name            IN VARCHAR2,\njob_type            IN VARCHAR2,\njob_action          IN VARCHAR2,\nnumber_of_arguments IN PLS_INTEGER DEFAULT 0,\nstart_date          IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,\nrepeat_interval     IN VARCHAR2    DEFAULT NULL,\nend_date            IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,\njob_class           IN VARCHAR2    DEFAULT 'DEFAULT_JOB_CLASS',\nenabled             IN BOOLEAN     DEFAULT FALSE,\nauto_drop           IN BOOLEAN     DEFAULT TRUE,\ncomments            IN VARCHAR2    DEFAULT NULL);\n"]], ['Oracle Scheduled Jobs'], 2], [(241746, 0), [['using the info you provided, if "active/expired/deleted" is merely an indication of state within the database, then i\'d definitely agree with a table structure like so:'], ['however, if  status  could conceivably be altered to represent something semantically different (ie, for users, perhaps "active/retired/fired", i\'d suggest splitting that up to future proof the design:']], [[' users            products         status\n  id               id               id\n  name             name             name\n  description      description\n  status_id        status_id\n']], ['Same fields in most tables'], 2], [(241746, 1), [['however, if  status  could conceivably be altered to represent something semantically different (ie, for users, perhaps "active/retired/fired", i\'d suggest splitting that up to future proof the design:'], ['in short, normalize your data, not your database design.']], [[' user_status     product_status\n  id              id\n  name            name\n']], ['Same fields in most tables'], 2], [(242771, 0), [['An alternative, and probably more robust, way of doing this is to create a custom type as a table of strings. Supposing your strings were never longer than 100 characters, then you could have:'], ['You can then pass a variable of this type into your stored procedure and reference it directly. In your case, something like this:']], [[' CREATE TYPE string_table AS TABLE OF varchar2(100);\n']], ['Oracle stored procedure with parameters for IN clause'], 3], [(242771, 1), [['You can then pass a variable of this type into your stored procedure and reference it directly. In your case, something like this:'], ['The beauty of this is that Oracle will create a constructor for you, so when calling your stored procedure you can simply write:']], [[' FUNCTION EXECUTE_UPDATE(\n    identifierList string_table,\n    value int)\nRETURN int\nIS\nBEGIN\n\n    [...other stuff...]\n\n    update table1 set col1 = col1 - value \n    where id in (select column_value from table(identifierList));\n\n    RETURN SQL%ROWCOUNT;\n\nEND\n']], ['Oracle stored procedure with parameters for IN clause'], 3], [(242771, 2), [['The beauty of this is that Oracle will create a constructor for you, so when calling your stored procedure you can simply write:'], ["I'm assuming that you can handle building up this command programatically from C#."]], [[" execute_update(string_table('foo','bar','baz'), 32);\n"]], ['Oracle stored procedure with parameters for IN clause'], 3], [(246666, 0), [['What about:'], ['and:']], [[' CREATE FUNCTION [dbo].[fComputeValue] (@data XML)\nRETURNS varchar(50)\nWITH SCHEMABINDING\nAS\nBEGIN\n  RETURN @data.value(\'(/Metadata/Value[@Key="StartDate"])[1]\', \'varchar(50)\')\nEND\n']], ['Persisting a computed datetime column in SQL Server 2005'], 3], [(246666, 1), [['and:'], ['or:']], [[' ALTER TABLE dbo.CustomMetadataTable ADD [StartDate] AS (convert(datetime,([dbo].[fComputeValue]([CustomMetadataColumn]), 127)) PERSISTED\n']], ['Persisting a computed datetime column in SQL Server 2005'], 3], [(246666, 2), [['or:'], ['From books online:']], [[' return convert(datetime, @data.value(\'(/Metadata/Value[@Key="StartDate"])[1]\', \'varchar(50)\'), 127)\n']], ['Persisting a computed datetime column in SQL Server 2005'], 3], [(248052, 0), [['Why bother with the  UNION ALL'], ["I would probably use a  LEFT JOIN -style query instead of the  IN , but that's more personal preference:"]], [[" select count(*)\nfrom in_fmd i\nwhere (description='GN')\n    and (\n        i.isbn in (\n            select bwi_isbn from bw_isbn where orig_isbn = ?\n        )\n        or i.isbn = cast(? as varchar)\n    )\n"]], ['How can I improve this SQL query?'], 3], [(248052, 1), [["I would probably use a  LEFT JOIN -style query instead of the  IN , but that's more personal preference:"], ['The inversion discussed over IM:']], [[" select count(*)\nfrom in_fmd i\nleft join bw_isbn\n    on bw_isbn.bwi_isbn = i.isbn\n    and bw_isbn.orig_isbn = ?\nwhere (i.description='GN')\n    and (\n        bw_isbn.bwi_isbn is not null\n        or i.isbn = cast(? as varchar)\n    )\n"]], ['How can I improve this SQL query?'], 3], [(248052, 2), [['The inversion discussed over IM:'], ['-10000']], [[" SELECT SUM(ct)\nFROM (\n    select count(*) as ct\n    from in_fmd i\n    inner join bw_isbn\n        on bw_isbn.bwi_isbn = i.isbn\n        and bw_isbn.orig_isbn = ?\n        and i.isbn <> cast(? as varchar)\n        and i.description = 'GN'\n\n    UNION\n\n    select count(*) as ct\n    from in_fmd i\n    where i.isbn = cast(? as varchar)\n        and i.description = 'GN'\n) AS x\n"]], ['How can I improve this SQL query?'], 3], [(248246, 0), [['You can always use only left Joins...'], ['is equivilent to:']], [[' SELECT * FROM t1\n    LEFT JOIN t2 ON t1.k2 = t2.k2\n    RIGHT JOIN t3 ON t3.k3 = t2.k3\n']], ['Is RIGHT JOIN Ever Required?'], 2], [(248246, 1), [['is equivilent to:'], ['In general I always try to use only Left Joins, as the table on the left in a Left Join is the one whose rows are ALL included in the output, and I like to think of it, (The Left side)  as the "base" set I am performing the cartesion product (join) against ... So I like to have it first in the SQL... ']], [[' Select * From t3 \n   Left Join (t1 Left Join t2 \n                  On t2.k2 = t1.k2)\n      On T2.k3 = T3.K3\n']], ['Is RIGHT JOIN Ever Required?'], 2], [(252242, 0), [['-10000'], ["You can also simplify things by putting  get_latest_by  in the model's Meta, then you'll be able to do"]], [[" obj = Edition.objects.latest('pub_date')\n"]], ['In django, how do I sort a model on a field and then get the last item?'], 2], [(252242, 1), [["You can also simplify things by putting  get_latest_by  in the model's Meta, then you'll be able to do"], ["See  the docs  for more info.  You'll probably also want to set the  ordering  Meta option."]], [[' obj = Edition.objects.latest()\n']], ['In django, how do I sort a model on a field and then get the last item?'], 2], [(253987, 0), [['You have a few options'], ['Or with joins']], [[' SELECT DOC_NAME\nFROM DOCUMENTS\nWHERE DELIVERY_TIMESTAMP IN (\n    SELECT MAX(DELIVERY_TIMESTAMP)\n    FROM DOCUMENTS\n)\n']], ['SQL Searching by MAX()'], 4], [(253987, 1), [['Or with joins'], ['This is where the  JOIN  option is the only option available, because a construction like this is not available (say multiple orders with identical timestamp):']], [[' SELECT DOC_NAME\nFROM DOCUMENTS\nINNER JOIN (\n    SELECT MAX(DELIVERY_TIMESTAMP) AS MAX_DELIVERY_TIMESTAMP\n    FROM DOCUMENTS\n) AS M\n    ON M.MAX_DELIVERY_TIMESTAMP = DOCUMENTS.DELIVERY_TIMESTAMP\n']], ['SQL Searching by MAX()'], 4], [(253987, 2), [['This is where the  JOIN  option is the only option available, because a construction like this is not available (say multiple orders with identical timestamp):'], ['Where you in fact, would need to do:']], [[' SELECT DOC_NAME\nFROM DOCUMENTS\nWHERE (DELIVERY_TIMESTAMP, ORDERID) IN (\n    SELECT TOP 1 DELIVERY_TIMESTAMP, ORDERID\n    FROM DOCUMENTS\n    ORDER BY DELIVERY_TIMESTAMP DESC, ORDERID DESC\n)\n']], ['SQL Searching by MAX()'], 4], [(253987, 3), [['Where you in fact, would need to do:'], ['-10000']], [[' SELECT DOC_NAME\nFROM DOCUMENTS\nINNER JOIN (\n    SELECT TOP 1 DELIVERY_TIMESTAMP, ORDERID\n    FROM DOCUMENTS\n    ORDER BY DELIVERY_TIMESTAMP DESC, ORDERID DESC\n) AS M\n    ON M.DELIVERY_TIMESTAMP = DOCUMENTS.DELIVERY_TIMESTAMP\n        AND M.ORDERID = DOCUMENTS.ORDERID\n']], ['SQL Searching by MAX()'], 4], [(254238, 0), [['I would recommend a derived table approach.  Like this:'], ['EDIT: Upon further review, there is another way you can create this query.  The following query may be faster, slower, or execute in the same amount of time.  This, of course, depends on how the table is indexed.']], [[" SELECT \n     myTable.Index,\n     MIN(myTable.[Date]),\n     MAX(myTable.[Date])\nFROM myTable\n     Inner Join (\n       SELECT Index \n       From myTable \n       WHERE [Date] BETWEEN '1/1/2000' AND '12/31/2000') As AliasName\n       On myTable.Index = AliasName.Index\nGROUP BY myTable.Index\nORDER BY myTable.Index ASC\n"]], ['Help with SQL query (Joining views?)'], 2], [(254238, 1), [['EDIT: Upon further review, there is another way you can create this query.  The following query may be faster, slower, or execute in the same amount of time.  This, of course, depends on how the table is indexed.'], ["Under the best circumstances, this query will cause an index scan (not a seek) to filter out rows you don't want to display.  I encourage you to run both queries and pick this oen the executes the fastest."]], [[" Select [Index],\n       Min([Date]),\n       Max([Date])\nFrom   myTable\nGroup By [Index]\nHaving Sum(Case When [Date] Between '1/1/2000' And '12/31/2000' Then 1 Else 0 End) > 0\n"]], ['Help with SQL query (Joining views?)'], 2], [(254295, 0), [['MySQL supports multi-table  UPDATE  and  DELETE  statements (unlike other brands of database) and so you can do some pretty neat tricks like the following:'], ["Once you have done this on all the child table(s), you can use MySQL's multi-table  DELETE  syntax to remove unwanted rows in the parent table:"]], [[' UPDATE names n1\n  JOIN names n2 ON (n1.id < n2.id AND n1.name = n2.name)\n  JOIN child_table c ON (n2.id = c.id)\nSET c.name_id = n1.id\nORDER BY n1.id DESC;\n']], ['Is there a clean way of cleaning up duplicate entries in MySQL?'], 2], [(254295, 1), [["Once you have done this on all the child table(s), you can use MySQL's multi-table  DELETE  syntax to remove unwanted rows in the parent table:"], ['-10000']], [[' DELETE FROM n2\n  USING names n1 JOIN names n2 ON (n1.id < n2.id AND n1.name = n2.name);\n']], ['Is there a clean way of cleaning up duplicate entries in MySQL?'], 2], [(254671, 0), [['You can change the Where clause:'], ['EDIT - more complete version - Enjoy!!']], [[" SELECT \n    c.name as ColumneName, \n    c.colid As ColumnOrder, \n    st.name as UserType,\n    bt.name as BaseType\nFROM dbo.syscolumns c\nINNER JOIN dbo.systypes st ON st.xusertype = c.xusertype\nINNER JOIN dbo.systypes bt ON bt.xusertype = c.xtype\nWHERE c.id = OBJECT_ID('TableName')\nORDER BY c.colid\n"]], ['T-SQL: How can I get user-defined data-type of the column by its ID?'], 2], [(254671, 1), [['EDIT - more complete version - Enjoy!!'], ['-10000']], [[" SELECT \n    OBJECT_NAME(c.id) as TableName,\n    c.name as ColumnName, \n    c.colid As ColumnOrder, \n    st.name as UserType,\n    bt.name as BaseType\nFROM \n    dbo.syscolumns c\n    INNER JOIN dbo.systypes st ON st.xusertype = c.xusertype\n    INNER JOIN dbo.systypes bt ON bt.xusertype = c.xtype\nWHERE \n    OBJECTPROPERTY(c.id,'ISTABLE') = 1\n    AND c.name = 'ColumnName'\nORDER BY\n    OBJECT_NAME(c.id), \n    c.colid\n"]], ['T-SQL: How can I get user-defined data-type of the column by its ID?'], 2], [(259031, 0), [["Here's my setup script:"], ["Here's my test script."]], [[' CREATE TABLE Deposits(Amount Money, UserID int)\nINSERT INTO Deposits (Amount, UserID)\nSELECT 0.0, 123\n--Reset\nUPDATE Deposits\nSET Amount = 0.00\nWHERE UserID = 123\n']], ['How does SQL Server locking work in this scenario?'], 6], [(259031, 1), [["Here's my test script."], ['Read committed']], [[' SET TRANSACTION ISOLATION LEVEL Serializable\n----------------------------------------\n-- Part 1\n----------------------------------------\nBEGIN TRANSACTION\nDECLARE @amount MONEY\nSET @amount =\n(\nSELECT Amount\nFROM Deposits\nWHERE UserId = 123\n)\nSELECT @amount as Amount\n----------------------------------------\n-- Part 2\n----------------------------------------\nDECLARE @amount MONEY\nSET @amount =  *value from step 1*\nUPDATE Deposits\nSET Amount = @amount + 100.0\nWHERE UserId = 123\nCOMMIT\nSELECT *\nFROM Deposits\nWHERE UserID = 123\n']], ['How does SQL Server locking work in this scenario?'], 6], [(259031, 2), [['Read committed'], ['Read uncommitted']], [[' 1 T1.@Amount = 0.00\n2 T1.@Amount = 0.00\n3 Deposits.Amount = 100.00\n4 Deposits.Amount = 100.00\n']], ['How does SQL Server locking work in this scenario?'], 6], [(259031, 3), [['Read uncommitted'], ['Repeatable Read']], [[' 1 T1.@Amount = 0.00\n2 T1.@Amount = 0.00\n3 Deposits.Amount = 100.00\n4 Deposits.Amount = 100.00\n']], ['How does SQL Server locking work in this scenario?'], 6], [(259031, 4), [['Repeatable Read'], ['Serializable']], [[' 1 T1.@Amount = 0.00 (locks out changes by others on Deposit.UserID = 123)\n2 T1.@Amount = 0.00 (locks out changes by others on Deposit.UserID = 123)\n3 Hangs until step 4. (due to lock in step 2)\n4 Deadlock!\nFinal result: Deposits.Amount = 100.00\n']], ['How does SQL Server locking work in this scenario?'], 6], [(259031, 5), [['Serializable'], ["Here's an explanation of each type which can be used to reach these results through thought simulations."]], [[' 1 T1.@Amount = 0.00 (locks out changes by others on Deposit)\n2 T1.@Amount = 0.00 (locks out changes by others on Deposit)\n3 Hangs until step 4. (due to lock in step 2)\n4 Deadlock!\nFinal result: Deposits.Amount = 100.00\n']], ['How does SQL Server locking work in this scenario?'], 6], [(260195, 0), [['Assuming 2 declared dates.'], ['This will return the hours / mins / seconds']], [[" declare @start datetime\nset @start = '2008-11-02 15:59:59.790'\n\ndeclare @end datetime\nset @end = '2008-11-02 19:05:41.857'\n"]], ['SQL: get DATEDIFF to not return negative values'], 3], [(260195, 1), [['This will return the hours / mins / seconds'], ['This is the zero-padded concatenated string version']], [[' select \n    (datediff(ss, @start, @end) / 3600), \n    (datediff(ss, @start, @end) / 60) % 60,\n    (datediff(ss, @start, @end) % 60) % 60\n\n--returns\n\n----------- ----------- -----------\n3           5           42\n']], ['SQL: get DATEDIFF to not return negative values'], 3], [(260195, 2), [['This is the zero-padded concatenated string version'], ['-10000']], [[" select\nRIGHT('0' + CONVERT(nvarchar, (datediff(ss, @start, @end) / 3600)), 2) + ':' +\nRIGHT('0' + CONVERT(nvarchar, (datediff(ss, @start, @end) / 60) % 60), 2) + ':' +\nRIGHT('0' + CONVERT(nvarchar, (datediff(ss, @start, @end) % 60) % 60), 2)\n\n--------\n03:05:42\n"]], ['SQL: get DATEDIFF to not return negative values'], 3], [(261783, 0), [['Put parentheses around the "OR"s:'], ['Or even better, use IN:']], [[' SELECT ads.*, location.county \nFROM ads\nLEFT JOIN location ON location.county = ads.county_id\nWHERE ads.published = 1 \nAND ads.type = 13\nAND\n(\n    ads.county_id = 2\n    OR ads.county_id = 5\n    OR ads.county_id = 7\n    OR ads.county_id = 9\n)\n']], ['How to do select from where x is equal to multiple values?'], 2], [(261783, 1), [['Or even better, use IN:'], ['-10000']], [[' SELECT ads.*, location.county \nFROM ads\nLEFT JOIN location ON location.county = ads.county_id\nWHERE ads.published = 1 \nAND ads.type = 13\nAND ads.county_id IN (2, 5, 7, 9)\n']], ['How to do select from where x is equal to multiple values?'], 2], [(261924, 0), [['You need to put rownum = 1 OUTSIDE the analytical query'], ['which results in (using your values above):']], [[' SELECT  *\nFROM    (   select          last_value(col1 ignore nulls) over () col1,\n                            last_value(col2 ignore nulls) over () col2,\n                            last_value(col3 ignore nulls) over () col3\n            from (select * from THE_TABLE ORDER BY ROW_PRIORITY)\n        )\nWHERE   ROWNUM = 1\n']], ['How do I compress this Oracle resultset into values according to row priority, ignoring nulls?'], 2], [(261924, 1), [['which results in (using your values above):'], ['-10000']], [[' COL1   COL2    COL3\n------ ------- ----\n0.2    100     3\n']], ['How do I compress this Oracle resultset into values according to row priority, ignoring nulls?'], 2], [(262361, 0), [["I'd recommend the latter design you mention, create one dependent table with five columns:"], ['I show a table  num_items  above, which contains the numbers 1 through 10 if you want to restrict users to 10 items at most:']], [[' CREATE TABLE Items (\n  user_id               INTEGER NOT NULL,\n  item_id               INTEGER NOT NULL DEFAULT 1,\n  numeric_property1     INTEGER,\n  numeric_property2     INTEGER,\n  referential_property  INTEGER,\n  PRIMARY KEY (user_id, item_id),\n  FOREIGN KEY (user_id) REFERENCES Users(user_id)\n                        ON DELETE CASCADE,\n  FOREIGN KEY (item_id) REFERENCES num_items(item_id),\n  FOREIGN KEY (referential_property) REFERENCES some_other_table(some_column)\n);\n']], ['Database Design regarding Dynamic entries - One row, or multiple rows?'], 2], [(262361, 1), [['I show a table  num_items  above, which contains the numbers 1 through 10 if you want to restrict users to 10 items at most:'], ["Advantages of this design is that it's easy to  COUNT()  how many items a given user has, it's easy to compute things like  MIN()  and  MAX()  for a given property, you can enforce a foreign key for the referential property, etc."]], [[' CREATE TABLE num_items (item_id INTEGER NOT NULL );\nINSERT INTO num_items (item_id) \n  VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);\n']], ['Database Design regarding Dynamic entries - One row, or multiple rows?'], 2], [(262802, 0), [['MySQL:'], ['SQL Server:']], [[" ColumnName ENUM('upload', 'open', 'close', 'delete', 'edit', 'add')\n   DEFAULT 'open'\n"]], ["Does SQL Server 2005 have an equivalent to MySql's ENUM data type?"], 2], [(262802, 1), [['SQL Server:'], ['-10000']], [[" ColumnName varchar(10) \n   CHECK(ColumnName IN ('upload', 'open', 'close', 'delete', 'edit', 'add')) \n   DEFAULT 'open'\n"]], ["Does SQL Server 2005 have an equivalent to MySql's ENUM data type?"], 2], [(263816, 0), [['Below is code I tested on MySQL 5.0.'], ['Output:']], [[" SELECT m.name, COALESCE(SUM(oi.quantity), 0) AS count\nFROM menu_items AS m\n  LEFT OUTER JOIN (\n    order_items AS oi JOIN orders AS o\n      ON (o.id = oi.order_id)\n  ) ON (m.id = oi.menu_item_id\n      AND o.`date` BETWEEN '2008-11-01' AND '2008-11-30')\nGROUP BY m.id;\n"]], ['COALESCE SUM GROUP?'], 3], [(263816, 1), [['Output:'], ["Here's the DDL and setup code, in the MySQL flavor:"]], [[' +--------+-------+\n| name   | count |\n+--------+-------+\n| bread  |     2 | \n| milk   |     1 | \n| honey  |     2 | \n| cheese |     0 | \n+--------+-------+\n']], ['COALESCE SUM GROUP?'], 3], [(263816, 2), [["Here's the DDL and setup code, in the MySQL flavor:"], ['-10000']], [[" DROP TABLE IF EXISTS menu_items;\nCREATE TABLE menu_items (\n  id            INT PRIMARY KEY,\n  name          VARCHAR(10)\n) TYPE=InnoDB;\n\nDROP TABLE IF EXISTS orders;\nCREATE TABLE orders (\n  id            INT PRIMARY KEY,\n  `date`        DATE\n) TYPE=InnoDB;\n\nDROP TABLE IF EXISTS order_items;\nCREATE TABLE order_items (\n  order_id      INT,\n  menu_item_id  INT,\n  quantity      INT,\n  PRIMARY KEY (order_id, menu_item_id),\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\n) TYPE=InnoDB;\n\nINSERT INTO menu_items VALUES\n  (1, 'bread'),\n  (2, 'milk'),\n  (3, 'honey'),\n  (4, 'cheese');\n\nINSERT INTO orders VALUES\n  (1, '2008-11-02'),\n  (2, '2008-11-03'),\n  (3, '2008-10-29');\n\nINSERT INTO order_items VALUES\n  (1, 1, 1),\n  (1, 3, 1),\n  (2, 1, 1),\n  (2, 2, 1),\n  (2, 3, 1),\n  (3, 4, 10);\n"]], ['COALESCE SUM GROUP?'], 3], [(266761, 0), [['Just whip up a type that will cover the result space (the property names must match the column names in the query):'], ['Then call']], [[' public class DynamicResult\n{\n  public DateTime OrderDate {get;set;}\n  public decimal? Location1 {get;set;}\n  public decimal? Location2 {get;set;}\n//..\n  public decimal? Location100 {get;set;}\n}\n']], ['Accessing dynamically created stored procedure from LINQ'], 2], [(266761, 1), [['Then call'], ['-10000']], [[' IEnumerable<DynamicResult> result =\n  myDataContext.ExecuteQuery<DynamicResult>(commandString, param1);\n']], ['Accessing dynamically created stored procedure from LINQ'], 2], [(270695, 0), [['1) Use the RETURNING clause:'], ['2) Use the sequence CURRVAL:']], [[" INSERT INTO emp (empno, ename) VALUES (emp_seq.NEXTVAL, 'ANDREWS')\nRETURNING empno INTO :variable;\n"]], ['Return a value from a insert statement'], 2], [(270695, 1), [['2) Use the sequence CURRVAL:'], ['CURRVAL returns the last sequence value generated by your session.']], [[" INSERT INTO emp (empno, ename) VALUES (emp_seq.NEXTVAL, 'ANDREWS');\nSELECT emp_seq.CURRVAL INTO :variable FROM DUAL;\n"]], ['Return a value from a insert statement'], 2], [(272045, 0), [['I think this should work (works on MySQL anyway):'], ['Without aliases:']], [[" DELETE a.* FROM A a JOIN B b ON b.id = a.id WHERE b.date < '2008-10-10';\n"]], ['How do I delete all the records in a table that have corresponding records in another table'], 2], [(272045, 1), [['Without aliases:'], ['-10000']], [[" DELETE A.* FROM A JOIN B ON B.id = A.id WHERE B.date < '2008-10-10';\n"]], ['How do I delete all the records in a table that have corresponding records in another table'], 2], [(272190, 0), [['If you want to delete all  JOB  rows with no  JOB_PERSON , then one way is:'], ['If you want to delete all  JOB_PERSON  rows for a particular person and then all orphans, do it in two steps:']], [[' DELETE FROM JOB\nWHERE JOB_ID NOT IN (\n    SELECT JOB_ID\n    FROM JOB_PERSON\n)\n']], ['SQL: Complex Deletion'], 3], [(272190, 1), [['If you want to delete all  JOB_PERSON  rows for a particular person and then all orphans, do it in two steps:'], ['If you want to delete only the orphan  JOB s previously linked to X, you will need to hold those in a temporary table before the first delete.']], [[' DELETE FROM JOB_PERSON\nWHERE PERSON_ID = X\n\nDELETE FROM JOB\nWHERE JOB_ID NOT IN (\n    SELECT JOB_ID\n    FROM JOB_PERSON\n)\n']], ['SQL: Complex Deletion'], 3], [(272190, 2), [['If you want to delete only the orphan  JOB s previously linked to X, you will need to hold those in a temporary table before the first delete.'], ['-10000']], [[' INSERT INTO TEMP_TABLE\nSELECT JOB.JOB_ID\nFROM JOB\nINNER JOIN JOB_PERSON\n    ON JOB_PERSON.JOB_ID = JOB.JOB_ID\nWHERE JOB_PERSON.PERSON_ID = X\n\nDELETE FROM PERSON\nWHERE PERSON_ID = X\n\n-- YOUR CASCADING DELETE DOES THIS:\n/*\nDELETE FROM JOB_PERSON\nWHERE PERSON_ID = X\n*/\n\n-- Now clean up (only) new orphans on the other side\nDELETE FROM JOB\nWHERE JOB_ID NOT IN (\n    SELECT JOB_ID\n    FROM JOB_PERSON\n)\nAND JOB_ID IN (\n    SELECT JOB_ID\n    FROM TEMP_TABLE\n)\n']], ['SQL: Complex Deletion'], 3], [(276927, 0), [['As in:'], ['Death :\nAs Dag stated in his comment, there is a 1024 byte limit on result. To solve this, run this query before your query:']], [[" SELECT person_id, GROUP_CONCAT(hobbies SEPARATOR ', ')\nFROM peoples_hobbies GROUP BY person_id\n"]], ['Can I concatenate multiple MySQL rows into one field?'], 2], [(276927, 1), [['Death :\nAs Dag stated in his comment, there is a 1024 byte limit on result. To solve this, run this query before your query:'], ['Of course, you can change  2048   according to your needs.']], [[' SET group_concat_max_len = 2048\n']], ['Can I concatenate multiple MySQL rows into one field?'], 2], [(277447, 0), [['If you are talking about taking the result of a function when creating the index, this feature is used from SQL like this:'], ['This can be used by the planner for queries like:']], [[' CREATE INDEX index_name ON table_name (function_name(column_name));\n']], ['How do function indexes work in SQL?'], 2], [(277447, 1), [['This can be used by the planner for queries like:'], ["For exact details see the given RDBMS's documentation (for example in PostgreSQL it is called  indexes on expressions )."]], [[' SELECT foo FROM table_name WHERE bar = function_name(column_name);\n']], ['How do function indexes work in SQL?'], 2], [(278633, 0), [["That's very surprising, I agree.  I'm not sure how to explain it, but for what it's worth, try this instead:"], ["update:  I'm trying to reproduce this problem, but I can't.  I'm using MySQL 5.0.51 on Mac OS X."]], [[' SELECT username INTO myName FROM User WHERE ID=1;\n']], ['How do I keep the variable value in a MySQL stored procedure from changing when records are updated?'], 2], [(278633, 1), [["update:  I'm trying to reproduce this problem, but I can't.  I'm using MySQL 5.0.51 on Mac OS X."], ['Can you try the code above in your test database and let us know if it exhibits the problem you describe?']], [[" drop table if exists user;\ncreate table user (\n  id serial primary key,\n  username varchar(10)\n);\ninsert into user (username) values ('Paul');\n\ndrop procedure if exists doit;\ndelimiter !!\ncreate procedure doit()\nbegin\n  declare name varchar(10);\n  select @name:=username from user where id=1;\n  select @name; -- shows 'Paul' as expected\n  update user set username = 'Fred' where id=1;\n  select @name; -- still shows 'Paul'\nend!!\ndelimiter ;\n\ncall doit();\n"]], ['How do I keep the variable value in a MySQL stored procedure from changing when records are updated?'], 2], [(280834, 0), [['Assuming the following table structure:'], ['You could use the following:']], [[' CREATE TABLE tbl_1 (\n    pk_1 int,\n    field_1 varchar(25),\n    field_2 varchar(25)\n);\n\nCREATE TABLE tbl_2 (\n    pk_2 int,\n    fk_1 int,\n    field_3 varchar(25),\n    field_4 varchar(25)\n);\n']], ['SQL statement from two tables'], 2], [(280834, 1), [['You could use the following:'], ["In regard to Bill's post, there are two ways to create JOIN's within SQL queries:"]], [[' SELECT t1.field_1, t2.field_3\nFROM tbl_1 t1\nINNER JOIN tbl_2 t2 ON t1.pk_1 = t2.fk_1\nWHERE t2.field_3 = "Some String"\n']], ['SQL statement from two tables'], 2], [(281323, 0), [['Be warned. This works, but it is neither  nice  nor recommendable:'], ['Better is this, because it is much more fail-safe (at the expense of being more verbose):']], [[' INSERT\n  WebsiteHistory\nSELECT\n  *,\n  GETDATE()\nFROM\n  Website\nWHERE\n  Id = @WebsiteId\n']], ['SELECT INTO with an additional column'], 2], [(281323, 1), [['Better is this, because it is much more fail-safe (at the expense of being more verbose):'], ['-10000']], [[' INSERT\n  WebsiteHistory\n  (\n  Id,\n  Field1,\n  Field2,\n  Field3,\n  Field4,\n  ModifiedDate\n  )\nSELECT\n  Id,\n  Field1,\n  Field2,\n  Field3,\n  Field4,\n  GETDATE()\nFROM\n  Website\nWHERE\n  Id = @WebsiteId\n']], ['SELECT INTO with an additional column'], 2], [(281866, 0), [["Here's a trick:  calculating a  SUM()  of values that are known to be either 1 or 0 is equivalent to a  COUNT()  of the rows where the value is 1.  And you know that a boolean comparison returns 1 or 0 (or NULL)."], ['As for the bonus question, you could simply do an inner join instead of an outer join, which would mean only categories with at least one row in  map  would be returned.']], [[' SELECT c.catname, COUNT(m.catid) AS item_count,\n  SUM(i.ownerid = @ownerid) AS owner_item_count\nFROM categories c\n  LEFT JOIN map m USING (catid)\n  LEFT JOIN items i USING (itemid)\nGROUP BY c.catid;\n']], ['Query: count multiple aggregates per item'], 3], [(281866, 1), [['As for the bonus question, you could simply do an inner join instead of an outer join, which would mean only categories with at least one row in  map  would be returned.'], ["Here's another solution, which is not as efficient but I'll show it to explain why you got the error:"]], [[' SELECT c.catname, COUNT(m.catid) AS item_count,\n  SUM(i.ownerid = @ownerid) AS owner_item_count\nFROM categories c\n  INNER JOIN map m USING (catid)\n  INNER JOIN items i USING (itemid)\nGROUP BY c.catid;\n']], ['Query: count multiple aggregates per item'], 3], [(281866, 2), [["Here's another solution, which is not as efficient but I'll show it to explain why you got the error:"], ["You can't use column aliases in the  WHERE  clause, because expressions in the  WHERE  clause are evaluated before the expressions in the select-list.  In other words, the values associated with select-list expressions aren't available yet."]], [[' SELECT c.catname, COUNT(m.catid) AS item_count,\n  SUM(i.ownerid = @ownerid) AS owner_item_count\nFROM categories c\n  LEFT JOIN map m USING (catid)\n  LEFT JOIN items i USING (itemid)\nGROUP BY c.catid\nHAVING item_count > 0;\n']], ['Query: count multiple aggregates per item'], 3], [(284609, 0), [['Doing some performance testing of my own on a project for work I ran into a similar scenario just one extra column.'], ['If you run...']], [[' table1\n\nc1 NVARCHAR (20)\nc2 NVARCHAR (20)\nc3 NVARCHAR (20)\nc4 NVARCHAR (20) \nc5 NVARCHAR (4000) //maximum allowed and fully populated for testing purposes\n']], ["Performance in SQL Mobile with one big column that's not being selected"], 2], [(284609, 1), [['If you run...'], ['...it takes roughly 1560 milliseconds.']], [[' select c1, c2, c3, c4 From table1\n']], ["Performance in SQL Mobile with one big column that's not being selected"], 2], [(285477, 0), [['Analytic functions are your friends'], ['You can also extend that to get the information for the entire row']], [[' SQL> select * from test_table;\n\n        ID TEST_VALUE UPDATED   FOREIGN_KEY\n---------- ---------- --------- -----------\n         1         10 12-NOV-08          10\n         2         20 11-NOV-08          10\n\nSQL> ed\nWrote file afiedt.buf\n\n  1* select * from test_table\nSQL> ed\nWrote file afiedt.buf\n\n  1  select max( test_value ) keep (dense_rank last order by updated)\n  2  from test_table\n  3* where foreign_key = 10\nSQL> /\n\nMAX(TEST_VALUE)KEEP(DENSE_RANKLASTORDERBYUPDATED)\n-------------------------------------------------\n                                               10\n']], ['Best way to select the row with the most recent timestamp that matches a criterion'], 2], [(285477, 1), [['You can also extend that to get the information for the entire row'], ['And analytic approaches are generally pretty darned efficient.']], [[' SQL> ed\nWrote file afiedt.buf\n\n  1  select max( id ) keep (dense_rank last order by updated) id,\n  2         max( test_value ) keep (dense_rank last order by updated) test_value\n,\n  3         max( updated) keep (dense_rank last order by updated) updated\n  4  from test_table\n  5* where foreign_key = 10\nSQL> /\n\n        ID TEST_VALUE UPDATED\n---------- ---------- ---------\n         1         10 12-NOV-08\n']], ['Best way to select the row with the most recent timestamp that matches a criterion'], 2], [(285775, 0), [['Wrap the column name in brackets like so,  from  becomes [from].'], ['It is also possible to use the following (useful when querying multiple tables):']], [[' select [from] from table;\n']], ['How to deal with SQL column names that look like SQL keywords?'], 2], [(285775, 1), [['It is also possible to use the following (useful when querying multiple tables):'], ['-10000']], [[' select table.[from] from table;\n']], ['How to deal with SQL column names that look like SQL keywords?'], 2], [(286191, 0), [["Also, I don't imagine you have any venues with an empty id.  Perhaps what you really want is this:"], ['Or this:']], [[' SELECT volunteers_2009.id, volunteers_2009.comments, \n    volunteers_2009.choice1, volunteers_2009.choice2, volunteers_2009.choice3, \n    volunteers_2009.lname, volunteers_2009.fname, volunteers_2009.venue_id, \n    venues.venue_name \nFROM volunteers_2009 \nLEFT JOIN venues ON venue_id = venues.id\nWHERE venues.id IS NULL\nORDER BY $order $sort\n']], ['Join statement, but need to only get data based on WHERE table column is empty'], 2], [(286191, 1), [['Or this:'], ['to find venues with no volunteers.']], [[' SELECT volunteers_2009.id, volunteers_2009.comments, \n    volunteers_2009.choice1, volunteers_2009.choice2, volunteers_2009.choice3, \n    volunteers_2009.lname, volunteers_2009.fname, volunteers_2009.venue_id, \n    venues.venue_name \nFROM venues\nLEFT JOIN volunteers_2009 ON volunteers_2009.venue_id = venues.id\nWHERE volunteers_2009.venue_id IS NULL\nORDER BY $order $sort\n']], ['Join statement, but need to only get data based on WHERE table column is empty'], 2], [(286585, 0), [['By default MySQL caches queries in your stored procedures. See if Query Cache is enabled:'], ['Stored procedure calls are not cached by MySQL, but if  query_cache_type  is ON this will affect caching of queries issued from within the procedure. Possibly causing MySQL to return the same results for a couple of minutes. Try flushing the cache, or better yet, reset the query cache to remove all queries if your updated procedure keeps returning the previous result set:']], [[" SHOW VARIABLES LIKE 'query_cache%'\n"]], ['MySQL Caching'], 3], [(286585, 1), [['Stored procedure calls are not cached by MySQL, but if  query_cache_type  is ON this will affect caching of queries issued from within the procedure. Possibly causing MySQL to return the same results for a couple of minutes. Try flushing the cache, or better yet, reset the query cache to remove all queries if your updated procedure keeps returning the previous result set:'], ["Edit:  please read the comments below, by desertwebdesign. After recreating the sproc, drop the connection. Connection pooling may keep the connection open, so it's probably best to kill the  connection from MySQL. Most query browsers have a tab that allow you to kill connections in MySQL if you log in with process/super privileges."]], [[' RESET QUERY CACHE \n']], ['MySQL Caching'], 3], [(286585, 2), [["Edit:  please read the comments below, by desertwebdesign. After recreating the sproc, drop the connection. Connection pooling may keep the connection open, so it's probably best to kill the  connection from MySQL. Most query browsers have a tab that allow you to kill connections in MySQL if you log in with process/super privileges."], ['-10000']], [[' SHOW FULL PROCESSLIST\nKILL CONNECTION thread_id\n']], ['MySQL Caching'], 3], [(287630, 0), [['-10000'], ['Or, as @Tomalak pointed out:']], [[" SELECT\nusers_usr.firstname_usr,\nusers_usr.lastname_usr,\ncredit_acc.given_credit_acc,\nusers_usr.created_usr,\nusers_usr.sitenum_usr,\nusers_usr.original_aff_usr,\nusers_usr.id_usr\nFROM\ncredit_acc\nright Outer Join users_usr ON credit_acc.uid_usr = users_usr.id_usr\nWHERE credit_acc.type_acc = 'init' OR credit_acc.type_acc is NULL\n"]], ['query join question'], 2], [(287630, 1), [['Or, as @Tomalak pointed out:'], ['which  may  be faster (see comments).']], [[" WHERE COALESCE(credit_acc.type_acc, 'init') = 'init'\n"]], ['query join question'], 2], [(289220, 0), [['Steps 6 & 7 can be combined easily enough:'], ['Steps 3 & 4 can also be combined:']], [[' DELETE categories.*\nFROM categories\nLEFT JOIN map USING (catId)\nWHERE map.catID IS NULL;\n']], ['Updating an associative table in MySQL'], 2], [(289220, 1), [['Steps 3 & 4 can also be combined:'], ['Otherwise, your solution is pretty standard, unless you want to use triggers to maintain the map table.']], [[" INSERT IGNORE INTO map (mapId, itemId, catId)\n    SELECT CONCAT('1|', c.catId), 1, c.catID\n    FROM categories AS c\n    WHERE c.catName IN('each','category','name');\n"]], ['Updating an associative table in MySQL'], 2], [(289649, 0), [['Assuming that the column headings "john", "lucy" etc are fixed, you can group by the address field and use if() functions combined with aggregate operators to get your results:'], ['eg.']], [[" select max(if(forename='john',surname,null)) as john,\n       max(if(forename='lucy',surname,null)) as lucy,\n       max(if(forename='jenny',surname,null)) as jenny,       \n       max(if(forename='steve',surname,null)) as steve,       \n       max(if(forename='richard',surname,null)) as richard,\n       address\nfrom tablename \ngroup by address;\n"]], ['Remapping/Concatenating in SQL'], 2], [(289649, 1), [['eg.'], ['-10000']], [[' select address, group_concat( concat( forename, surname ) ) tenants \nfrom tablename\ngroup by address;\n']], ['Remapping/Concatenating in SQL'], 2], [(291249, 0), [['How about using a  generic relation  from the model which will hold the tree structure to the content object for the node it represents?'], ['This could potentially result in a lot of queries when retrieving content objects for the full tree, but there are  ways and means  of reducing the number of queries required.']], [[" from django.db import models\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.contenttypes import generic\n\nclass Node(models.Model):\n    content_type = models.ForeignKey(ContentType)\n    object_id = models.PositiveIntegerField()\n    object = generic.GenericForeignKey('content_type', 'object_id')\n"]], ['Django: How do I model a tree of heterogeneous data types?'], 2], [(291249, 1), [['This could potentially result in a lot of queries when retrieving content objects for the full tree, but there are  ways and means  of reducing the number of queries required.'], ['-10000']], [[" # Assuming mptt, as I'm not familiar with treebeard's API\n\n# 1 query to retrieve the tree\ntree = list(Node.tree.all())\n\n# 4 queries to retrieve and cache all ContentType, A, B and C instances, respectively\npopulate_content_object_caches(tree)\n"]], ['Django: How do I model a tree of heterogeneous data types?'], 2], [(291445, 0), [['The Seq type has a neat function for handling database cursors called generate_using (see  F# Manual  and the Data Access chapter in  Foundations of F# ). This is a higher order function that takes one function to open the cursor and another (called repeatedly) to process records from the cursor. Here is some code that uses generate_using to execute a sql query:'], ['For example to list all the tables in an Oracle database we need to define a column definition type and invoke executeSqlReader as follows:']], [[" let openConnection (connectionName : string) =\n    let connectionSetting = ConfigurationManager.ConnectionStrings.Item(connectionName)\n    let connectionString = connectionSetting.ConnectionString\n    let connection = new OracleConnection(connectionString)\n    connection.Open()\n    connection\n\nlet generator<'a> (reader : IDataReader) =\n    if reader.Read() then\n        let t = typeof<'a>\n        let props = t.GetProperties()\n        let types = props\n                    |> Seq.map (fun x -> x.PropertyType)\n                    |> Seq.to_array\n        let cstr = t.GetConstructor(types)\n        let values = Array.create reader.FieldCount (new obj())\n        reader.GetValues(values) |> ignore\n        let values = values\n                     |> Array.map (fun x -> match x with | :? DBNull -> null | _ -> x)\n        Some (cstr.Invoke(values) :?> 'a)\n    else\n        None\n\nlet executeSqlReader<'a> (connectionName : string) (sql : string) : 'a list =        \n    let connection = openConnection connectionName\n\n    let opener() = \n        let command = connection.CreateCommand(CommandText = sql, CommandType = CommandType.Text)\n        command.ExecuteReader()\n\n    let result = Seq.to_list(Seq.generate_using opener generator)        \n\n    connection.Close()\n    connection.Dispose()\n    result\n"]], ['F# Beginner: retrieving an array of data from a server'], 2], [(291445, 1), [['For example to list all the tables in an Oracle database we need to define a column definition type and invoke executeSqlReader as follows:'], ['-10000']], [[' type ColumnDefinition = {\n    TableName : string;\n    ColumnName : string;\n    DataType : string;\n    DataLength : decimal;                \n}\n\nlet tableList = executeSqlReader<ColumnDefinition>\n    "MyDatabase"\n    "SELECT t.table_name, column_name, data_type, data_length FROM USER_TABLES t, USER_TAB_COLUMNS c where t.TABLE_NAME = c.table_name order by t.table_name, c.COLUMN_NAME"\n']], ['F# Beginner: retrieving an array of data from a server'], 2], [(295575, 0), [['Here is one way (using AdventureWorks2008 DB):'], ['And here is another (for SQL 2005 onwards):']], [[" DECLARE @name varchar(255)\nSET @name = NULL\n\nselect @Name = COALESCE(@Name + ',','') + LastName from Person.Person\nSelect @name\n"]], ['Creating a long string from a result set'], 2], [(295575, 1), [['And here is another (for SQL 2005 onwards):'], ["In both cases you will need to remove the trailing comma ','  (can use STUFF() function)"]], [[" SELECT \n    LastName + ','\nFROM \n    Person.Person\nFOR XML PATH('') \n"]], ['Creating a long string from a result set'], 2], [(296097, 0), [['If you know in advance that you will be doing this you can pre-allocate sufficient free space like this:'], ['This test shows the difference it makes:']], [[' CREATE TABLE J_TEST\n(\n  ID  NUMBER(10) PRIMARY KEY,\n  C1   VARCHAR2(50 BYTE),\n  C2   VARCHAR2(250 BYTE),\n  C3   NUMBER(5),\n  C4   NUMBER(10)\n) PCTFREE 40;\n']], ['Slow Update Statement'], 2], [(296097, 1), [['This test shows the difference it makes:'], ['As you can see, with PCTFREE 40 the update takes 27 seconds instead of 81 seconds, and the resulting table consumes 232 blocks with no chained rows instead of 694 blocks with 82034 chained rows!']], [[" SQL> CREATE TABLE J_TEST\n  2  (\n  3    ID  NUMBER(10) PRIMARY KEY,\n  4    C1   VARCHAR2(50 BYTE),\n  5    C2   VARCHAR2(250 BYTE),\n  6    C3   NUMBER(5),\n  7    C4   NUMBER(10)\n  8  );\n\nTable created.\n\nSQL> insert into j_test (id)\n  2  select rownum \n  3  from transactions\n  4  where rownum < 100000;\n\n99999 rows created.\n\nSQL> update j_test\n  2  set C3 = 1,\n  3      C2 = 'NEU'\n  4  /\n\n99999 rows updated.\n\nElapsed: 00:01:41.60\n\nSQL> analyze table j_test compute statistics;\n\nTable analyzed.\n\nSQL> select blocks, chain_cnt from user_tables where table_name='J_TEST';\n\n    BLOCKS  CHAIN_CNT\n---------- ----------\n       694      82034\n\nSQL> drop table j_test;\n\nTable dropped.\n\nSQL> CREATE TABLE J_TEST\n  2  (\n  3    ID  NUMBER(10) PRIMARY KEY,\n  4    C1   VARCHAR2(50 BYTE),\n  5    C2   VARCHAR2(250 BYTE),\n  6    C3   NUMBER(5),\n  7    C4   NUMBER(10)\n  8  ) PCTFREE 40;\n\nTable created.\n\nSQL> insert into j_test (id)\n  2  select rownum \n  3  from transactions\n  4  where rownum < 100000;\n\n99999 rows created.\n\nSQL> update j_test\n  2  set C3 = 1,\n  3      C2 = 'NEU'\n  4  /\n\n99999 rows updated.\n\nElapsed: 00:00:27.74\n\nSQL> analyze table j_test compute statistics;\n\nTable analyzed.\n\nSQL> select blocks, chain_cnt from user_tables where table_name='J_TEST';\n\n    BLOCKS  CHAIN_CNT\n---------- ----------\n       232          0\n"]], ['Slow Update Statement'], 2], [(296146, 0), [['-10000'], ["Here's an explanation:"]], [[' SELECT distinct idCustomer FROM reservations\nWHERE DATEPART ( hour, insertDate) < 2\n  and idCustomer is not null\n']], ['SQL query question: SELECT ... NOT IN '], 3], [(296146, 1), [["Here's an explanation:"], ['is the same as:']], [[' WHERE field1 NOT IN (1, 2, 3, null)\n']], ['SQL query question: SELECT ... NOT IN '], 3], [(296146, 2), [['is the same as:'], ['(*) Edit:  this explanation is pretty good, but I wish to address one thing to stave off future nit-picking.  (TRUE OR NULL) would evaluate to TRUE.  This is relevant if field1 = 3, for example.  That TRUE value would be negated to FALSE and the row would be filtered.']], [[' WHERE NOT (field1 = 1 OR field1 = 2 OR field1 = 3 OR field1 = null)\n']], ['SQL query question: SELECT ... NOT IN '], 3], [(297280, 0), [['MsgQueue table schema'], ['Code from comments:']], [[" MsgId identity -- NOT NULL\nMsgTypeCode varchar(20) -- NOT NULL  \nSourceCode varchar(20)  -- process inserting the message -- NULLable  \nState char(1) -- 'N'ew if queued, 'A'(ctive) if processing, 'C'ompleted, default 'N' -- NOT NULL \nCreateTime datetime -- default GETDATE() -- NOT NULL  \nMsg varchar(255) -- NULLable  \n"]], ['Best way to use a DB table as a message/job queue'], 2], [(297280, 1), [['Code from comments:'], ['-10000']], [[" CREATE PROCEDURE GetMessage @MsgType VARCHAR(8) ) \nAS \nDECLARE @MsgId INT \n\nBEGIN TRAN \n\nSELECT TOP 1 @MsgId = MsgId \nFROM MsgQueue \nWHERE MessageType = @pMessageType AND State = 'N' \nORDER BY CreateTime\n\n\nIF @MsgId IS NOT NULL \nBEGIN \n\nUPDATE MsgQueue \nSET State = 'A' \nWHERE MsgId = @MsgId \n\nSELECT MsgId, Msg \nFROM MsgQueue \nWHERE MsgId = @MsgId  \nEND \nELSE \nBEGIN \nSELECT MsgId = NULL, Msg = NULL \nEND \n\nCOMMIT TRAN\n"]], ['Best way to use a DB table as a message/job queue'], 2], [(298319, 0), [['For your comments table you could create a table.'], ['A row in Comments might look like this']], [[' Id int\nCommentType enum (student, teacher, staff, dept)\nLinkId int\nComment\n']], ['How do I relate one table to many different tables?'], 2], [(298319, 1), [['A row in Comments might look like this'], ['-10000']], [[" 1,'Student',347,'text'\n"]], ['How do I relate one table to many different tables?'], 2], [(298494, 0), [['You could try to update the System tables that hold the information on jobs of the SQL server directly. The relevant ones for you would be:'], ['If you have a specific email address to remove, you could update the  Command  field in the  SysJobSteps  table with a single UPDATE statement.']], [[' msdb.dbo.SysJobs\nmsdb.dbo.SysJobSteps\n']], ['How to bulk-amend the job step command in ALL sql server agent jobs'], 2], [(298494, 1), [['If you have a specific email address to remove, you could update the  Command  field in the  SysJobSteps  table with a single UPDATE statement.'], ['It would be advisable to run the above query as a SELECT statement first, to test it returns only the job steps your are expecting to update.']], [[" UPDATE SJS SET\n    Command = REPLACE(Command, 'EmailAddress&TestDomain.Com', '')\nFROM msdb.dbo.SysJobs SJ\nINNER JOIN msdb.dbo.SysJobSteps SJS\n    ON SJS.Job_Id = SJ.Job_Id\nWHERE SJ.Originating_server = ..... -- Your server here\n    AND SJS.Command LIKE '%EmailAddress@TestDomain.Com%'\n"]], ['How to bulk-amend the job step command in ALL sql server agent jobs'], 2], [(299158, 0), [["To create a trigger on certain steps, all you have to do is specify which ones during the creation of the trigger. You don't have to put all three like the example below you can place any combination of the 3 choices depending on your target"], ['If you need to determine which one of these called the trigger you should check the inserted and deleted tables like below. ']], [[' CREATE TRIGGER TriggerName\nON TableName\n  [FOR|AFTER|INSTEAD OF]\n  AFTER,UPDATE,DELETE\nAS\n ...\n']], ['SQL Action keyword'], 2], [(299158, 1), [['If you need to determine which one of these called the trigger you should check the inserted and deleted tables like below. '], ['-10000']], [[' IF EXISTS (SELECT TOP 1 * FROM Inserted) AND NOT EXISTS (SELECT TOP 1 * FROM Deleted) --INSERT\n  ...\n\nIF EXISTS (SELECT TOP 1 * FROM Inserted) AND EXISTS (SELECT TOP 1 * FROM Deleted) --UPDATE\n  ...\n\nIF NOT EXISTS (SELECT TOP 1 * FROM Inserted) AND EXISTS (SELECT TOP 1 * FROM Deleted) --DELETE\n  ...\n']], ['SQL Action keyword'], 2], [(300123, 0), [['Assuming that you want to count the number of votes per statistics'], ['[EDIT] Ah...I see you want to order by submittedtime of the statistics table.']], [[' SELECT StatisticID, COUNT(*) AS CountVotes\nFROM `Votes`\nGROUP BY Statistics.StatisticsID\n']], ['Combining queries in MySQL'], 2], [(300123, 1), [['[EDIT] Ah...I see you want to order by submittedtime of the statistics table.'], ['-10000']], [[' SELECT Votes.StatisticID, COUNT(*) AS CountVotes\nFROM `Votes` JOIN Statistics ON votes.statisticsID = Statistics.StatisticsID\nGROUP BY Statistics.StatisticsID\nORDER BY Statistics.SubmittedTime\n']], ['Combining queries in MySQL'], 2], [(302022, 0), [['How about:'], ['I have just tested it in Oracle and it works:']], [[" select dt, abs(qty), abs(val),\n       sum(case when reversal='Y' then -1 else 1 end) as count\nfrom transactions\ngroup by dt, abs(qty), abs(val)\nhaving sum(case when reversal='Y' then -1 else 1 end) > 1;\n"]], ['SQL - Need to find duplicate records but EXCLUDE reversed transactions'], 2], [(302022, 1), [['I have just tested it in Oracle and it works:'], ['-10000']], [[" create table transactions\n( dt date\n, qty number\n, val number\n, reversal varchar2(1)\n);\n\ninsert into transactions values (to_date('1/1/08','mm/dd/yy')    , 14    ,    70.00    , 'N');\ninsert into transactions values (to_date('1/1/08','mm/dd/yy')    , 14    ,    70.00    , 'N');\ninsert into transactions values (to_date('1/1/08','mm/dd/yy')    , -14   ,    -70.00   , 'Y');\ninsert into transactions values (to_date('2/1/08','mm/dd/yy')    , 17    ,    89.00    , 'N');\ninsert into transactions values (to_date('2/15/08','mm/dd/yy')   , 18    ,    95.00    , 'N');\ninsert into transactions values (to_date('2/15/08','mm/dd/yy')   , 18    ,    95.00    , 'N');\ninsert into transactions values (to_date('3/1/08','mm/dd/yy')    , 11    ,    54.00    , 'N');\ninsert into transactions values (to_date('3/1/08','mm/dd/yy')    , -11   ,    -54.00   , 'Y');\ninsert into transactions values (to_date('3/1/08','mm/dd/yy')    , 11    ,    54.00    , 'N');\ninsert into transactions values (to_date('3/1/08','mm/dd/yy')    , 11    ,    54.00    , 'N');\ninsert into transactions values (to_date('3/1/08','mm/dd/yy')    , 11    ,    54.00    , 'N');\n\nSQL> select dt, abs(qty), abs(val),\n  2         sum(case when reversal='Y' then -1 else 1 end) as count\n  3  from transactions\n  4  group by dt, abs(qty), abs(val)\n  5  having sum(case when reversal='Y' then -1 else 1 end) > 1;\n\nDT            ABS(QTY)   ABS(VAL)      COUNT\n----------- ---------- ---------- ----------\n15-FEB-2008         18         95          2\n01-MAR-2008         11         54          3\n"]], ['SQL - Need to find duplicate records but EXCLUDE reversed transactions'], 2], [(306871, 0), [['You can query  DBA_/ALL_/USER_IND_COLUMNS , i.e.'], ['Of course, you may want to expand the query a bit.  This will pick up any index that the EMPNO column appears in.  You may want to limit yourself to indexes where the column is the leading column of the index ( COLUMN_POSITION  = 1).  Or you may want to limit yourself to indexes just on that particular column (so that there is no column in  COLUMN_POSITION  2), i.e.']], [[" SQL> SELECT index_name\n  2    FROM dba_ind_columns\n  3   WHERE table_owner = 'SCOTT'\n  4     AND table_name  = 'EMP'\n  5     AND column_name = 'EMPNO';\n\nINDEX_NAME\n------------------------------\nPK_EMP\n"]], ['How do you detect if there is an index for a specific column on a table in Oracle?'], 2], [(306871, 1), [['Of course, you may want to expand the query a bit.  This will pick up any index that the EMPNO column appears in.  You may want to limit yourself to indexes where the column is the leading column of the index ( COLUMN_POSITION  = 1).  Or you may want to limit yourself to indexes just on that particular column (so that there is no column in  COLUMN_POSITION  2), i.e.'], ['-10000']], [[" SQL> ed\nWrote file afiedt.buf\n\n  1  SELECT index_name\n  2    FROM dba_ind_columns a\n  3   WHERE table_owner = 'SCOTT'\n  4     AND table_name  = 'EMP'\n  5     AND column_name = 'EMPNO'\n  6     AND column_position = 1\n  7     AND NOT EXISTS( SELECT 1\n  8                       FROM dba_ind_columns b\n  9                      WHERE a.index_owner = b.index_owner\n 10                        AND a.index_name  = b.index_name\n 11*                       AND b.column_position = 2)\nSQL> /\n\nINDEX_NAME\n------------------------------\nPK_EMP\n"]], ['How do you detect if there is an index for a specific column on a table in Oracle?'], 2], [(307027, 0), [['I actually use this as one of my interview questions.  The following is a good place to start:'], ['and']], [[' Addresses\n---------\nAddressId (PK)\nStreet1\n... (etc)\n']], ['Is this a good way to model address information in a relational database?'], 3], [(307027, 1), [['and'], ['and']], [[' AddressTypes\n------------\nAddressTypeId\nAddressTypeName\n']], ['Is this a good way to model address information in a relational database?'], 3], [(307027, 2), [['and'], ["This way, your addresses are totally unaware of how they are being used, and your entities (Users, Accounts) don't directly know anything about addresses either.  It's all up to the linking tables you create (UserAddresses in this case, but you can do whatever fits your model)."]], [[' UserAddresses (substitute "Company", "Account", whatever for Users)\n-------------\nUserId\nAddressTypeId\nAddressId\n']], ['Is this a good way to model address information in a relational database?'], 3], [(308833, 0), [["If you just want to restrict users' access you could create a view and grant them select on the view but not the tables:"], ['The users could then type:']], [[' CREATE VIEW info_and_data AS\n    SELECT info_field, data_field    \n    FROM   table_one\n    UNION ALL\n    SELECT info_field, data_field    \n    FROM   table_two\n    UNION ALL\n    SELECT info_field, data_field    \n    FROM   table_three\n    ...\n']], ['How to transform an Oracle SQL into a Stored Procedure that should iterate through some tables fetching a certain data field?'], 2], [(308833, 1), [['The users could then type:'], ['-10000']], [[' SELECT info_field, data_field\nFROM   info_and_data\nWHERE  some_id = <id>\n']], ['How to transform an Oracle SQL into a Stored Procedure that should iterate through some tables fetching a certain data field?'], 2], [(310094, 0), [['BOL says that  CONVERT   is  deterministic with datetimes if the  style  parameter is specified.  So if you change the first UDF to:'], ['Presumably, the same trick could be used in your second UDF:']], [[' RETURN CONVERT(datetime, CONVERT(varchar, @DATA_DT_ID), 112)\n']], ['How to make conversions from varchar to datetime deterministic?'], 3], [(310094, 1), [['Presumably, the same trick could be used in your second UDF:'], ['As pointed out by Arvo in the comments ( thank you , Arvo), the ODBC timestamp literal format can be used (even when using OLE DB) so the second function above could be better written as:']], [[" IF @DateTimeIn < CONVERT(datetime, '1/1/1900', 101)\n    RETURN CONVERT(datetime, '1/1/1900', 101)\n"]], ['How to make conversions from varchar to datetime deterministic?'], 3], [(310094, 2), [['As pointed out by Arvo in the comments ( thank you , Arvo), the ODBC timestamp literal format can be used (even when using OLE DB) so the second function above could be better written as:'], ["and the conversion to datetime is done at compile time instead of execution time.  Note that the format of the date has to be very specific (see  Arvo's link to the datetime data type ):"]], [[" IF @DateTimeIn < {d '1900-01-01'}\n    RETURN {d '1900-01-01'}\n...etc.\n"]], ['How to make conversions from varchar to datetime deterministic?'], 3], [(310342, 0), [['http://perlbuzz.com/2008/12/database-access-in-perl-6-is-coming-along-nicely.html'], ["Actually for Perl 6 we'll probably see an SQL quote operator so you can do stuff like this:"]], [[' use DBDI;\nmy $conn = DBDI::DriverManager.getConnection(\n    "dbdi:SQLite3:test.db", "", "");\nmy $stm = $conn.createStatement();\nmy $rs = $stm.executeUpdate("CREATE TABLE foo (bar, baz)");\nmy $stm = $conn.prepareStatement(\n    "    INSERT INTO foo (bar, baz) VALUES (?, ?)");\n$stm.setColumn(1, 123);\n$stm.setColumn(2, "Thingy");\n$stm.executeUpdate();\n']], ['Does Parrot have a database interface or API?'], 2], [(310342, 1), [["Actually for Perl 6 we'll probably see an SQL quote operator so you can do stuff like this:"], ['And of course in Perl 6 quote modifiers like Q:sql can be abbreviated, e.g. to qs<> or sql<>']], [[' $conn.prepareStatement( Q:sql<INSERT INTO foo (bar, baz) VALUES($bar, $baz)> );\n']], ['Does Parrot have a database interface or API?'], 2], [(311074, 0), [['If you are 100% certain that a customer will only ever have the 3 addresses you described then this is OK:'], ['Otherwise I would model like this:']], [[' CREATE TABLE Customer\n(\n    ID int not null IDENTITY(1,1) PRIMARY KEY,\n    Name varchar(60) not null,\n    customerAddress int not null\n        CONSTRAINT FK_Address1_AddressID FOREIGN KEY References Address(ID),\n    deliveryAddress int null\n            CONSTRAINT FK_Address2_AddressID FOREIGN KEY References Address(ID),\n    invoiceAddress int null\n            CONSTRAINT FK_Address3_AddressID FOREIGN KEY References Address(ID),\n    -- etc\n)\n\nCREATE TABLE Address\n(\n    ID int not null IDENTITY(1,1) PRIMARY KEY,\n    Street varchar(120) not null\n    -- etc\n)\n']], ['Three customer addresses in one table or in separate tables?'], 2], [(311074, 1), [['Otherwise I would model like this:'], ['-10000']], [[' CREATE TABLE Customer\n(\n    ID int not null IDENTITY(1,1) PRIMARY KEY,\n    Name varchar(60) not null\n    -- etc\n)\n\nCREATE TABLE Address\n(\n    ID int not null IDENTITY(1,1) PRIMARY KEY,\n    CustomerID int not null\n        CONSTRAINT FK_Customer_CustomerID FOREIGN KEY References Customer(ID),\n    Street varchar(120) not null,\n    AddressType int not null \n    -- etc\n)\n']], ['Three customer addresses in one table or in separate tables?'], 2], [(312861, 0), [["We've successfully used the following approach in the past..."], ['It can also be useful transposing aggregations with the use of...']], [[" SELECT [p].ProductID,\n       [p].Name,\n       MAX(CASE [m].MetaKey\n             WHEN 'A'\n               THEN [m].MetaValue\n           END) AS A,\n       MAX(CASE [m].MetaKey\n             WHEN 'B'\n               THEN [m].MetaValue\n           END) AS B,\n       MAX(CASE [m].MetaKey\n             WHEN 'C'\n               THEN [m].MetaValue\n           END) AS C\nFROM   Products [p]\n       INNER JOIN ProductMeta [m]\n         ON [p].ProductId = [m].ProductId\nGROUP  BY [p].ProductID,\n          [p].Name \n"]], ['Pivot using SQL Server 2000'], 2], [(312861, 1), [['It can also be useful transposing aggregations with the use of...'], ['EDIT']], [[" SUM(CASE x WHEN 'y' THEN yVal ELSE 0 END) AS SUMYVal\n"]], ['Pivot using SQL Server 2000'], 2], [(313962, 0), [['So you could do something like'], ["What might be better however is to somehow calculate the date of 'last sunday at 00:00', and then the database would not have to run a function for each row, but I couldn't see an obvious way of doing that in MySQL. You could however easily generate this in php and do something like"]], [[' SELECT * FROM table WHERE YEARWEEK(purchased) = YEARWEEK(NOW());\n']], ['PHP/MySQL: Retrieving the last *full* weeks entries'], 2], [(313962, 1), [["What might be better however is to somehow calculate the date of 'last sunday at 00:00', and then the database would not have to run a function for each row, but I couldn't see an obvious way of doing that in MySQL. You could however easily generate this in php and do something like"], ['-10000']], [[' $sunday = date((\'Y-m-d H:i:s\'), strtotime(\'last sunday 00:00\'));\n$sql = "SELECT * FROM table WHERE purchased >= \'$sunday\'";\n']], ['PHP/MySQL: Retrieving the last *full* weeks entries'], 2], [(314307, 0), [['Your initial query executes the inner subquery once for every row in the outer table. See if Oracle likes this better:'], ["Add: \nIf the join syntax doesn't work on Oracle, how about:"]], [[' UPDATE target_table \nSET special_id = st.source_special_id\nFROM \n    target_table tt\n    INNER JOIN\n    source_table st\n        WHERE tt.another_id = st.another_id \n']], ['How can I speed up a joined update in SQL? My statement seems to run indefinitely'], 2], [(314307, 1), [["Add: \nIf the join syntax doesn't work on Oracle, how about:"], ['The point is to join the two tables rather than using the outer query syntax you are currently using.']], [[' UPDATE target_table \nSET special_id = st.source_special_id\nFROM \n    target_table tt, source_table st\nWHERE tt.another_id = st.another_id \n']], ['How can I speed up a joined update in SQL? My statement seems to run indefinitely'], 2], [(316366, 0), [['$ra_category is the following array:'], ['So what you want is:']], [[' array(1) {\n  [0]=>\n  object(stdClass)(1) {\n    ["name"]=>\n    string(8) "Apples"\n  }\n}\n']], ['MySQL code fails to display category name (WordPress database)'], 2], [(316366, 1), [['So what you want is:'], ['When dealing with query results, always check the whole result with a  var_dump() , it helps.']], [[' $ra_category_name = $ra_category[0]->name;\n']], ['MySQL code fails to display category name (WordPress database)'], 2], [(316524, 0), [['You were close'], ['Alternative way (may be even faster)']], [[" select * from people where lastname like '%' + firstname + '%'\n"]], ['how can i write a sql query that finds rows where one column is a substring of another column'], 2], [(316524, 1), [['Alternative way (may be even faster)'], ['-10000']], [[' select * from people where charindex(firstname,lastname)>0\n']], ['how can i write a sql query that finds rows where one column is a substring of another column'], 2], [(318473, 0), [["There's probably more efficient ways to do this as well, but this is closest to your original:"], ['Something like this might be more efficient:']], [[' truncate table activity_summary;\n\ninsert into activity_summary (sessionid, first_activity_desc, last_activity_summary)\nselect a.sessionid\n,(select top 1 ad.activity_desc from activity_detail AS ad where ad.sessionid = a.sessionid order by ad.created asc) AS first_activity_desc\n,(select top 1 ad.activity_desc from activity_detail AS ad where ad.sessionid = a.sessionid order by ad.created desc) AS last_activity_summary\nfrom activity AS a;\n']], ['SQL Server - update one table with first and last rows from another table'], 2], [(318473, 1), [['Something like this might be more efficient:'], ['-10000']], [[' truncate table activity_summary;\n\nWITH firsts AS (\n    SELECT ad.sessionid\n        ,ad.activity_desc\n        ,ROW_NUMBER() OVER (ORDER BY ad.created ASC) as RowNumber\n    FROM activity_detail AS ad\n)\n,lasts AS (\n    SELECT ad.sessionid\n        ,ad.activity_desc\n        ,ROW_NUMBER() OVER (ORDER BY ad.created DESC) as RowNumber\n    FROM activity_detail AS ad\n)\ninsert into activity_summary (sessionid, first_activity_desc, last_activity_summary)\nselect a.sessionid\n    ,firsts.activity_desc\n    ,lasts.activity_desc\nfrom activity AS a\nINNER JOIN firsts ON firsts.sessionid = a.sessionid AND firsts.RowNumber = 1\nINNER JOIN lasts ON lasts.sessionid = a.sessionid AND lasts.RowNumber = 1\n']], ['SQL Server - update one table with first and last rows from another table'], 2], [(318528, 0), [['I also found out that '], ["will show you a lot of information about a table, including all triggers associated with it.  Using that, along with Ray's query can make it much easier to find the triggers.  Combined with this query from Ray's linked article:"]], [[' sp_depends <object_name> \n']], ['How do you identify the triggers associated with a table in a sybase database?'], 3], [(318528, 1), [["will show you a lot of information about a table, including all triggers associated with it.  Using that, along with Ray's query can make it much easier to find the triggers.  Combined with this query from Ray's linked article:"], ['and you can see the definition of the trigger:']], [[' sp_helptext <trigger_name>\n']], ['How do you identify the triggers associated with a table in a sybase database?'], 3], [(318528, 2), [['and you can see the definition of the trigger:'], ['will also show you all tables related to a trigger']], [[' sp_depends <trigger_name>\n']], ['How do you identify the triggers associated with a table in a sybase database?'], 3], [(318964, 0), [['Our builders look a something like this:'], ['and usage:']], [[' public class CustomerBuilder : Builder<Customer>\n{\n   string firstName;\n   string lastName;\n   Guid id = Guid.Empty;\n\n   public override Customer Build()\n   {\n      return new Customer() { Id = id, FirstName = firstName, LastName = }\n   }\n\n   public CustomerBuilder WithId(Guid newId)\n   {\n      id= newId;\n      return this;\n   }\n\n   public CustomerBuilder WithFirstName(string newFirstName)\n   {\n      firstName = newFirstName;\n      return this;\n   }\n\n   public CustomerBuilder WithLastName(string newLastName)\n   {\n      lastName = newLastName;\n      return this;\n   }\n}\n']], ['Strategies for using NHibernate to generate a schema'], 2], [(318964, 1), [['and usage:'], ['Because every line of code is written with TDD, we build up a comprehensive suite of data from scatch and will generally refactor some of it to factories that will wrap the above and make it a breeze to get dummy data in.']], [[' var customer = new CustomerBuilder().WithFirstName("John").WithLastName("Doe").Build();\n']], ['Strategies for using NHibernate to generate a schema'], 2], [(319649, 0), [['-10000'], ['That query is the basically trivial:']], [[' SELECT m.UserID, m.MovieID, r.Rating\n    FROM (SELECT a.userid, b.movieid\n              FROM (SELECT DISTINCT UserID FROM Ratings) AS a,\n                   (SELECT DISTINCT MovieID FROM Ratings) AS b\n         ) AS m LEFT OUTER JOIN Ratings AS r\n         ON (m.MovieID = r.MovieID AND m.UserID = r.UserID)\n    ORDER BY m.UserID, m.MovieID;\n']], ['Novice SQL query question for a movie ratings database'], 2], [(319649, 1), [['That query is the basically trivial:'], ['-10000']], [[' SELECT UserID, MovieID, Rating\n    FROM Ratings\n    ORDER BY UserID, MovieID;\n']], ['Novice SQL query question for a movie ratings database'], 2], [(319800, 0), [['Since your "having" condition isn\'t actually on an aggregated column, couldn\'t you just use the "where" clause?'], ["This gets the same result given the dataset you've supplied. The LINQ statement then becomes reasonably simple:"]], [[' select distinct CollectId, url, userid, pubtime\nfrom Collect\nwhere pubtime >= (select max(pubtime) from collect d where d.url = collect.url)\norder by Collect.pubtime desc\n']], ['how to translate the SQL code "having" condition into LinqToSQL or LinqToEntites?'], 2], [(319800, 1), [["This gets the same result given the dataset you've supplied. The LINQ statement then becomes reasonably simple:"], ["I could be misinterpreting your intent though. Perhaps my version of the query doesn't do exactly what you want. If so, leave me a comment and I'll delete the answer so as not to confuse the issue."]], [[' var rows = (from c in Collect\nwhere c.PubTime >= (\n    from d in Collect\n    where d.Url == c.Url\n    select d.PubTime).Max()\norderby c.PubTime descending\nselect c).Distinct();\n']], ['how to translate the SQL code "having" condition into LinqToSQL or LinqToEntites?'], 2], [(321127, 0), [['This seems like a fairly simple and common relational problem that is solved by a cross-reference table. For example:'], ['To get all card rulings for a card:']], [[' CREATE TABLE dbo.Cards (\n    id        INT            NOT NULL,\n    name      VARCHAR(50)    NOT NULL,\n    card_text VARCHAR(4000)  NOT NULL,\n    CONSTRAINT PK_Cards PRIMARY KEY CLUSTERED (id)\n)\nGO\nCREATE TABLE dbo.Card_Rulings (\n    card_id        INT            NOT NULL,\n    ruling_number  INT            NOT NULL,\n    ruling_text    VARCHAR(4000)  NOT NULL,\n    CONSTRAINT PK_Card_Rulings PRIMARY KEY CLUSTERED (card_id, ruling_number)\n)\nGO\nCREATE TABLE dbo.Card_Ruling_Referenced_Cards (\n    parent_card_id    INT    NOT NULL,\n    ruling_number     INT    NOT NULL,\n    child_card_id     INT    NOT NULL,\n    CONSTRAINT PK_Card_Ruling_Referenced_Cards PRIMARY KEY CLUSTERED (parent_card_id, ruling_number, child_card_id)\n)\nGO\nALTER TABLE dbo.Card_Rulings\nADD CONSTRAINT FK_CardRulings_Cards FOREIGN KEY (card_id) REFERENCES dbo.Cards(id)\nGO\nALTER TABLE dbo.Card_Ruling_Referenced_Cards\nADD CONSTRAINT FK_CardRulingReferencedCards_CardRulings FOREIGN KEY (parent_card_id, ruling_number) REFERENCES dbo.Card_Rulings (card_id, ruling_number)\nGO\nALTER TABLE dbo.Card_Ruling_Referenced_Cards\nADD CONSTRAINT FK_CardRulingReferencedCards_Cards FOREIGN KEY (child_card_id) REFERENCES dbo.Cards(id)\nGO\n']], ['How do I create a cross reference table/query for my data?'], 3], [(321127, 1), [['To get all card rulings for a card:'], ['To get all cards referenced in a ruling by a given card:']], [[' SELECT *\nFROM dbo.Cards C\nINNER JOIN dbo.Card_Rulings CR ON CR.card_id = C.id\nWHERE C.id = @card_id\n']], ['How do I create a cross reference table/query for my data?'], 3], [(321127, 2), [['To get all cards referenced in a ruling by a given card:'], ['This was all off the top of my head and is not tested, so there might be syntactic errors, etc.']], [[' SELECT C.*\nFROM dbo.Card_Rulings CR\nINNER JOIN dbo.Card_Ruling_Referenced_Cards CRRC ON CRRC.parent_card_id = CR.card_id\nINNER JOIN dbo.Cards C ON C.id = CRRC.child_card_id\nWHERE CR.card_id = @card_id\n']], ['How do I create a cross reference table/query for my data?'], 3], [(322601, 0), [['First, insert into  TrackStrings , omitting the primary key column from the column list.  This invokes its  IDENTITY  column which generates a value automatically.'], ['Second, insert into  Tracks  and specify as its  TrackStringId  the function  SCOPE_IDENTITY() , which returns the most recent value generated by an  IDENTITY  column  in your current scope .']], [[" INSERT INTO [dbo].[TrackStrings] ([String]) \n  VALUES ('some string');\n"]], ['SQL insert into related tables'], 2], [(322601, 1), [['Second, insert into  Tracks  and specify as its  TrackStringId  the function  SCOPE_IDENTITY() , which returns the most recent value generated by an  IDENTITY  column  in your current scope .'], ['-10000']], [[' INSERT INTO [dbo].[Tracks] ([TrackStringId], [Time]) \n  VALUES (SCOPE_IDENTITY(), CURRENT_TIMESTAMP());\n']], ['SQL insert into related tables'], 2], [(322839, 0), [['Here is  a function which I found on the MySQL website  : '], ['You should use it like this :']], [[" delimiter ||\nDROP FUNCTION IF EXISTS substrCount||\nCREATE FUNCTION substrCount(s VARCHAR(255), ss VARCHAR(255)) RETURNS TINYINT(3) UNSIGNED LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA\nBEGIN\nDECLARE count TINYINT(3) UNSIGNED;\nDECLARE offset TINYINT(3) UNSIGNED;\nDECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET s = NULL;\n\nSET count = 0;\nSET offset = 1;\n\nREPEAT\nIF NOT ISNULL(s) AND offset > 0 THEN\nSET offset = LOCATE(ss, s, offset);\nIF offset > 0 THEN\nSET count = count + 1;\nSET offset = offset + 1;\nEND IF;\nEND IF;\nUNTIL ISNULL(s) OR offset = 0 END REPEAT;\n\nRETURN count;\nEND;\n\n||\n\ndelimiter ;\n"]], ['MySQL count matching words'], 2], [(322839, 1), [['You should use it like this :'], ['-10000']], [[" SELECT substrCount('one two one onetwo', 'one') `count`; // Returns 3\n"]], ['MySQL count matching words'], 2], [(324677, 0), [['You need a separate heartbeat update:'], ['The "seize master status" update might be:']], [['  UPDATE ClusterControl\n     SET lastTimestamp = CURRENT_TIMESTAMP\n     WHERE NodeID = {MyNodeID};\n']], ['SQL statement to designate a cluster master'], 2], [(324677, 1), [['The "seize master status" update might be:'], ["The theory behind the 'seize master status' update is (SET clause):"]], [[" UPDATE ClusterControl\n    SET lastTimestamp = (CASE\n                         WHEN NodeID = {MyNodeID} THEN CURRENT_TIMESTAMP\n                         ELSE lastTimestamp END),\n        isMaster      = (CASE\n                         WHEN NodeID = {MyNodeId} THEN 'Y'\n                         ELSE 'N' END)\n    WHERE (NodeID  = {MyNodeID} AND isMaster = 'N') OR\n          (NodeID != {MyNodeID} AND\n           lastTimestamp < CURRENT_TIMESTAMP - INTERVAL '120' SECOND AND\n           isMaster = 'Y'\n          );\n"]], ['SQL statement to designate a cluster master'], 2], [(325414, 0), [['In this case I wouldn\'t go for an enum, I\'d go for a "score" column. So the columns might be:'], ['Then a query like:']], [[' userid, questionid, score\n1,1,4\n1,2,4\n1,3,3\n2,1,1\n2,2,4\n...\n']], ['MySQL Table structure to produce reports'], 3], [(325414, 1), [['Then a query like:'], ['will give you your overall percentage.']], [[' select 25*avg(score) from Blah\n']], ['MySQL Table structure to produce reports'], 3], [(325414, 2), [['will give you your overall percentage.'], ['will give you a % per question.']], [[' select 25*avg(score), questionid from Blah group by questionid\n']], ['MySQL Table structure to produce reports'], 3], [(330405, 0), [['This is actually pretty easy to do... just use ROW_NUMBER() with a PARTITION clause:'], ['If you want a "select-only", then here you go:']], [[' UPDATE Persons SET UniqueName = temp.DeDupded FROM\n    (SELECT ID,\n        CASE WHEN ROW_NUMBER() OVER\n            (PARTITION BY UniqueName ORDER BY UniqueName) = 1 THEN UniqueName\n        ELSE UniqueName + CONVERT(VARCHAR, ROW_NUMBER()\n            OVER (PARTITION BY UniqueName ORDER BY UniqueName)-1) END AS DeDupded\n    FROM Persons) temp\nWHERE Persons.ID = temp.ID\n']], ['T-SQL: How to make cell-values unique?'], 3], [(330405, 1), [['If you want a "select-only", then here you go:'], ["EDIT Again: If you're looking for a SQL Server 2000 Solution..."]], [[' SELECT ID,\n    CASE WHEN ROW_NUMBER() OVER\n        (PARTITION BY UniqueName ORDER BY UniqueName) = 1 THEN UniqueName\n    ELSE UniqueName + CONVERT(VARCHAR, ROW_NUMBER()\n        OVER (PARTITION BY UniqueName ORDER BY UniqueName)-1) END AS DeDupded\nFROM Persons\n']], ['T-SQL: How to make cell-values unique?'], 3], [(330405, 2), [["EDIT Again: If you're looking for a SQL Server 2000 Solution..."], ['-10000']], [[" CREATE TABLE #Persons ( ID INT IDENTITY(1, 1), UniqueName VARCHAR(100) )\n\nINSERT INTO #Persons VALUES ('Bob')\nINSERT INTO #Persons VALUES ('Bob')\nINSERT INTO #Persons VALUES ('Bob')\nINSERT INTO #Persons VALUES ('John')\nINSERT INTO #Persons VALUES ('John')\n\nSELECT\n    ID,\n    CASE WHEN Position = 0 THEN UniqueName\n        ELSE UniqueName + (CONVERT(VARCHAR, Position))\n    END AS UniqueName\nFROM\n    (SELECT\n        ID,\n        UniqueName,\n        (SELECT COUNT(*) FROM #Persons p2 WHERE\n            p1.UniqueName = p2.UniqueName AND p1.ID > p2.ID) AS Position\n    FROM\n        #Persons p1) _temp\n\nDROP TABLE #Persons\n"]], ['T-SQL: How to make cell-values unique?'], 3], [(332602, 0), [['Here are a couple of possibilities.  One is a  CHECK  in each table that the  student_id  does not appear in any of the other sister subtype tables.  This is probably expensive and every time you need a new subtype, you need to modify the constraint in all the existing tables.'], ['Probably a better way is to make the primary key in the  students  table a compound primary key, the second column denotes a subtype.  Then restrict that column in each child table to a single value corresponding to the subtype represented by the table.   edit:  no need to make the PK a compound key in child tables.']], [[' CREATE TABLE athletes (\n  student_id INT NOT NULL PRIMARY KEY,\n  FOREIGN KEY (student_id) REFERENCES students(student_id),\n  CHECK (student_id NOT IN (SELECT student_id FROM musicians \n                      UNION SELECT student_id FROM slackers \n                      UNION ...)) \n);\n']], ['Maintaining subclass integrity in a relational database'], 2], [(332602, 1), [['Probably a better way is to make the primary key in the  students  table a compound primary key, the second column denotes a subtype.  Then restrict that column in each child table to a single value corresponding to the subtype represented by the table.   edit:  no need to make the PK a compound key in child tables.'], ["Of course  student_type  could just as easily be an integer, I'm just showing it as a char for illustration purposes."]], [[" CREATE TABLE athletes (\n  student_id INT NOT NULL PRIMARY KEY,\n  student_type CHAR(4) NOT NULL CHECK (student_type = 'ATHL'),\n  FOREIGN KEY (student_id, student_type) REFERENCES students(student_id, student_type)\n);\n"]], ['Maintaining subclass integrity in a relational database'], 2], [(334571, 0), [['-10000'], ['Here is a partial result set.']], [[' --Create the table and insert values as portrayed in the previous example.\nCREATE TABLE pvt (VendorID int, Emp1 int, Emp2 int,\nEmp3 int, Emp4 int, Emp5 int)\nGO\nINSERT INTO pvt VALUES (1,4,3,5,4,4)\nINSERT INTO pvt VALUES (2,4,1,5,5,5)\nINSERT INTO pvt VALUES (3,4,3,5,4,4)\nINSERT INTO pvt VALUES (4,4,2,5,5,4)\nINSERT INTO pvt VALUES (5,5,1,5,5,5)\nGO\n--Unpivot the table.\nSELECT VendorID, Employee, Orders\nFROM \n   (SELECT VendorID, Emp1, Emp2, Emp3, Emp4, Emp5\n   FROM pvt) p\nUNPIVOT\n   (Orders FOR Employee IN \n      (Emp1, Emp2, Emp3, Emp4, Emp5)\n)AS unpvt\nGO\n']], ['How to convert fields into rows through SQL in MS Access 2007 or MS SQL Server 2005'], 2], [(334571, 1), [['Here is a partial result set.'], ['-10000']], [[' VendorID   Employee   Orders\n1      Emp1         4\n1      Emp2         3\n1      Emp3         5\n1      Emp4         4\n1      Emp5         4\n2      Emp1         4\n2      Emp2         1\n2      Emp3         5\n2      Emp4         5\n2      Emp5         5\n...\n']], ['How to convert fields into rows through SQL in MS Access 2007 or MS SQL Server 2005'], 2], [(337158, 0), [['-10000'], ['MINUS']], [[' select distinct\n  a.*\nfrom\n  a\n  inner join b on a.id = b.id\n']], ['How can I implement SQL INTERSECT and MINUS operations in MS Access'], 2], [(337158, 1), [['MINUS'], ['If you edit your original question and post some sample data then an example can be given.']], [[' select distinct\n  a.*\nfrom\n  a\n  left outer join b on a.id = b.id\nwhere\n  b.id is null\n']], ['How can I implement SQL INTERSECT and MINUS operations in MS Access'], 2], [(337175, 0), [['To get a list of  all products ordered (with product name), dates of last three purchases, and comment on latest order  is straightforward:'], ["Year of first purchase  is available from the previous query, if you sort by the  order_date  and fetch the result row-by-row, you'll have access to the first order.  Otherwise, you can do it this way:"]], [[' SELECT o.*, l.*, p.*\nFROM Orders o\n JOIN OrderLines l USING (order_id)\n JOIN Products p USING (product_id)\nWHERE o.customer_id = ?\nORDER BY o.order_date;\n']], ['When do you give up set operations in SQL and go procedural?'], 5], [(337175, 1), [["Year of first purchase  is available from the previous query, if you sort by the  order_date  and fetch the result row-by-row, you'll have access to the first order.  Otherwise, you can do it this way:"], ['Sum of product purchases for the last 12 months  is best calculated by a separate query:']], [[' SELECT YEAR(MIN(o.order_date)) FROM Orders o WHERE o.customer_id = ?;\n']], ['When do you give up set operations in SQL and go procedural?'], 5], [(337175, 2), [['Sum of product purchases for the last 12 months  is best calculated by a separate query:'], ["edit:  You said in another comment that you'd like to see how to get the dates of the last three purchases in standard SQL:"]], [[' SELECT SUM(l.quantity * p.price)\nFROM Orders o\n JOIN OrderLines l USING (order_id)\n JOIN Products p USING (product_id)\nWHERE o.customer_id = ?\n AND o.order_date > CURDATE() - INTERVAL 1 YEAR;\n']], ['When do you give up set operations in SQL and go procedural?'], 5], [(337175, 3), [["edit:  You said in another comment that you'd like to see how to get the dates of the last three purchases in standard SQL:"], ['If you can use a wee bit of vendor-specific SQL features, you can use Microsoft/Sybase  TOP   n , or MySQL/PostgreSQL  LIMIT :']], [[' SELECT o1.order_date\nFROM Orders o1\n  LEFT OUTER JOIN Orders o2 \n  ON (o1.customer_id = o2.customer_id AND (o1.order_date < o2.order_date \n      OR (o1.order_date = o2.order_date AND o1.order_id < o2.order_id)))\nWHERE o1.customer_id = ?\nGROUP BY o1.order_id\nHAVING COUNT(*) <= 3;\n']], ['When do you give up set operations in SQL and go procedural?'], 5], [(337175, 4), [['If you can use a wee bit of vendor-specific SQL features, you can use Microsoft/Sybase  TOP   n , or MySQL/PostgreSQL  LIMIT :'], ['-10000']], [[' SELECT TOP 3 order_date\nFROM Orders\nWHERE customer_id = ?\nORDER BY order_date DESC;\n\nSELECT order_date\nFROM Orders\nWHERE customer_id = ?\nORDER BY order_date DESC\nLIMIT 3;\n']], ['When do you give up set operations in SQL and go procedural?'], 5], [(337704, 0), [["Here's a quick-and-dirty technique I have used:"], ["So here's the C# code:"]], [[" SELECT * FROM Tags\nWHERE '|ruby|rails|scruffy|rubyonrails|'\nLIKE '%|' + Name + '|%'\n"]], ['Parameterize an SQL IN clause'], 2], [(337704, 1), [["So here's the C# code:"], ['Two caveats:']], [[' string[] tags = new string[] { "ruby", "rails", "scruffy", "rubyonrails" };\nconst string cmdText = "select * from tags where \'|\' + @tags + \'|\' like \'%|\' + Name + \'|%\'";\n\nusing (SqlCommand cmd = new SqlCommand(cmdText)) {\n   cmd.Parameters.AddWithValue("@tags", string.Join("|", tags);\n}\n']], ['Parameterize an SQL IN clause'], 2], [(338739, 0), [['You can use the column on the right of the like too:'], ['or ']], [[" SELECT domain FROM table WHERE 'www.google.com' LIKE CONCAT('%', domain);\n"]], ["Inverse of SQL LIKE '%value%'"], 2], [(338739, 1), [['or '], ["It's not particularly efficient but it works."]], [[" SELECT domain FROM table WHERE 'www.google.com' LIKE CONCAT('%', domain, '%');\n"]], ["Inverse of SQL LIKE '%value%'"], 2], [(338776, 0), [['You can use the BULK INSERT T-SQL command if you just want a pure sql solution. You have to save the file as csv/text first.'], ['Alternatively, you can try OPENROWEST - again , a pure T-SQL solution.']], [[" BULK \nINSERT YourDestinationTable\n        FROM 'D:\\YourFile.csv'\n            WITH\n    (\n                FIELDTERMINATOR = ',',\n                ROWTERMINATOR = '\\n'\n    )\nGO\n"]], ['Creating a SQL table from a xls (Excel) file'], 2], [(338776, 1), [['Alternatively, you can try OPENROWEST - again , a pure T-SQL solution.'], ['It really depends on how much control and flexibility you want, the SSIS route will have benefits over these methods.']], [[" SELECT * FROM OPENROWSET('Microsoft.Jet.OLEDB.4.0',\n'Excel 8.0;DATABASE=D:\\YourExcelFile.xls', 'Select * from YourExcelFile') \n"]], ['Creating a SQL table from a xls (Excel) file'], 2], [(340139, 0), [['Are you  sure  you "don\'t have the authority" to see an execution plan?  What about using AUTOTRACE?'], ['This order of application has nothing to do with the way the predicates are ordered in the WHERE clause, as we can show with this re-ordered query:']], [[' SQL> set autotrace on\nSQL> select * from emp\n  2  join dept on dept.deptno = emp.deptno\n  3  where emp.ename like \'K%\'\n  4  and dept.loc like \'l%\'\n  5  /\n\nno rows selected\n\n\nExecution Plan\n----------------------------------------------------------\n\n----------------------------------------------------------------------------------\n| Id  | Operation                    | Name         | Rows  | Bytes | Cost (%CPU)|\n----------------------------------------------------------------------------------\n|   0 | SELECT STATEMENT             |              |     1 |    62 |     4   (0)|\n|   1 |  NESTED LOOPS                |              |     1 |    62 |     4   (0)|\n|*  2 |   TABLE ACCESS FULL          | EMP          |     1 |    42 |     3   (0)|\n|*  3 |   TABLE ACCESS BY INDEX ROWID| DEPT         |     1 |    20 |     1   (0)|\n|*  4 |    INDEX UNIQUE SCAN         | SYS_C0042912 |     1 |       |     0   (0)|\n----------------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   2 - filter("EMP"."ENAME" LIKE \'K%\' AND "EMP"."DEPTNO" IS NOT NULL)\n   3 - filter("DEPT"."LOC" LIKE \'l%\')\n   4 - access("DEPT"."DEPTNO"="EMP"."DEPTNO")\n']], ["Execution order of conditions in SQL 'where' clause"], 2], [(340139, 1), [['This order of application has nothing to do with the way the predicates are ordered in the WHERE clause, as we can show with this re-ordered query:'], ['-10000']], [[' SQL> select * from emp\n  2  join dept on dept.deptno = emp.deptno\n  3  where dept.loc like \'l%\'\n  4  and emp.ename like \'K%\';\n\nno rows selected\n\n\nExecution Plan\n----------------------------------------------------------\n\n----------------------------------------------------------------------------------\n| Id  | Operation                    | Name         | Rows  | Bytes | Cost (%CPU)|\n----------------------------------------------------------------------------------\n|   0 | SELECT STATEMENT             |              |     1 |    62 |     4   (0)|\n|   1 |  NESTED LOOPS                |              |     1 |    62 |     4   (0)|\n|*  2 |   TABLE ACCESS FULL          | EMP          |     1 |    42 |     3   (0)|\n|*  3 |   TABLE ACCESS BY INDEX ROWID| DEPT         |     1 |    20 |     1   (0)|\n|*  4 |    INDEX UNIQUE SCAN         | SYS_C0042912 |     1 |       |     0   (0)|\n----------------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   2 - filter("EMP"."ENAME" LIKE \'K%\' AND "EMP"."DEPTNO" IS NOT NULL)\n   3 - filter("DEPT"."LOC" LIKE \'l%\')\n   4 - access("DEPT"."DEPTNO"="EMP"."DEPTNO")\n']], ["Execution order of conditions in SQL 'where' clause"], 2], [(342044, 0), [["What field would it match with? BTW, here's how to line them up:"], ["OK, after reading your update... I don't think you want a UNION at all, but rather, and incredibly simple SUBSELECT"]], [[' SELECT NULL, NULL, NULL, NULL, MySingleField, NULL, NULL, NULL... FROM #temp\nUNION ALL\nSELECT Col1, Col2, Col3, Col4, Col5, Col6,... FROM OtherTable\n']], ['Simple SQL code evades me.. Unionize two mismatched tables'], 2], [(342044, 1), [["OK, after reading your update... I don't think you want a UNION at all, but rather, and incredibly simple SUBSELECT"], ['-10000']], [[' SELECT\n    *,\n    (SELECT TOP 1 Name FROM Blah WHERE Blah.SomeID = MyTable.SomeID) AS ExtraCol\nFROM\n    MyTable\n']], ['Simple SQL code evades me.. Unionize two mismatched tables'], 2], [(342290, 0), [['How do you spot cases of interpolating application variables as literals in expressions?'], ['How would you spot cases of interpolating application variables as things other than data values?']], [[' String sql = "SELECT *, " + someJavaVar + " AS constant_column FROM mytable";\n']], ['tool for detecting non-parametrized sql in java jdbc code'], 2], [(342290, 1), [['How would you spot cases of interpolating application variables as things other than data values?'], ['I don\'t know any automatic way to detect SQL injection flaws.  Code review is a more effective way to spot them.  In every SQL statement that contains interpolated application variables, you have to confirm that the application variables are "safe" and that your app has explicitly validated them or transformed them so they don\'t contain dangerous payload.']], [[' String sql = "SELECT * FROM mytable ORDER BY " + columnname;\n']], ['tool for detecting non-parametrized sql in java jdbc code'], 2], [(343562, 0), [['You should either use something like this:'], ['Or this, but send them separately and ignore any errors from the INSERT about violating primary key constraints:']], [[" BEGIN TRANSACTION\nIF EXISTS (SELECT * FROM the_table WHERE pk = 'whatever')\n    UPDATE the_table SET data = 'stuff' WHERE pk = 'whatever'\nELSE\n    INSERT INTO the_table (pk, data) VALUES ('whatever', 'stuff')\nCOMMIT\n"]], ['What is the correct/ fastest way to update/insert a record in sql (Firebird/MySql)'], 2], [(343562, 1), [['Or this, but send them separately and ignore any errors from the INSERT about violating primary key constraints:'], ['-10000']], [[" INSERT INTO the_table (pk, data) VALUES ('whatever', 'stuff')\n\nUPDATE the_table SET data = 'stuff' WHERE pk = 'whatever'\n"]], ['What is the correct/ fastest way to update/insert a record in sql (Firebird/MySql)'], 2], [(347449, 0), [['You should use  TOP   n   WITH TIES  clause to accomplish the task:'], ['Alternatively, you can use a  common table expression (CTE)  to solve the problem. This solution requires SQL Server 2005 or higher:']], [[' SELECT TOP 1 WITH TIES CustomerID, OrderDate, COUNT(*) Cnt\nFROM Sales.SalesOrderHeader\nWHERE CustomerID = 11300\nGROUP BY CustomerID, OrderDate\nORDER BY Cnt DESC\n']], ['SQL Statement Help - Select list of CustomerID, OrderDate with the most records in a table'], 2], [(347449, 1), [['Alternatively, you can use a  common table expression (CTE)  to solve the problem. This solution requires SQL Server 2005 or higher:'], ["If you're using the CTE method, make sure the previous statement is terminated by a semicolon (if it's not the first statement). It's required before a CTE expression."]], [[' WITH MyTable AS (SELECT CustomerID, OrderDate, COUNT(*) Cnt\n                 FROM Sales.SalesOrderHeader\n                 WHERE CustomerID = 11300\n                 GROUP BY CustomerID, OrderDate)\nSELECT CustomerID, OrderDate, Cnt\nFROM MyTable\nWHERE Cnt = (SELECT MAX(Cnt) FROM MyTable);\n']], ['SQL Statement Help - Select list of CustomerID, OrderDate with the most records in a table'], 2], [(347624, 0), [["It sounds like, in your case, you're going to need to use dynamic SQL. To get this working well you'll need to pull a list of the products being used in your query. If you were using the AdventureWorks database, your code would look like this:"], ['Now that you have your columns, you can pull everything that you need pivot on with a dynamic query:']], [[" USE AdventureWorks;\nGO\n\nDECLARE @columns NVARCHAR(MAX);\n\nSELECT x.ProductName\nINTO #products\nFROM (SELECT p.[Name] AS ProductName\n    FROM Purchasing.Vendor AS v\n    INNER JOIN Purchasing.PurchaseOrderHeader AS poh ON v.VendorID = poh.VendorID\n    INNER JOIN Purchasing.PurchaseOrderDetail AS pod ON poh.PurchaseOrderID = pod.PurchaseOrderID\n    INNER JOIN Production.Product AS p ON pod.ProductID = p.ProductID\n    GROUP BY p.[Name]) AS x;\n\nSELECT @columns = STUFF(\n    (SELECT ', ' + QUOTENAME(ProductName, '[') AS [text()]\n       FROM #products FOR XML PATH ('')\n    ), 1, 1, '');\n\nSELECT @columns;\n"]], ['How to transform rows to columns'], 2], [(347624, 1), [['Now that you have your columns, you can pull everything that you need pivot on with a dynamic query:'], ["Of course, if you need to make sure you get decent values, you may have to duplicate the logic you're using to build @columns and create an @coalesceColumns variable that will hold the code to COALESCE(col_name, 0) if you need that sort of thing in your query."]], [[" DECLARE @sql NVARCHAR(MAX);\n\nSET @sql = 'SELECT CustomerName, ' + @columns + '\nFROM (\n    // your query goes here\n) AS source\nPIVOT (SUM(order_count) FOR product_name IN (' + @columns + ') AS p';\n\nEXEC sp_executesql @sql\n"]], ['How to transform rows to columns'], 2], [(349092, 0), [['-10000'], ['returns']], [[' CREATE TABLE [dbo].[Foo](\n    [FooId] [int] IDENTITY(1,1) NOT NULL,\n    [BarId] [int] IDENTITY(1,1) NOT NULL\n)\n']], ['Can a sql server table have two identity columns?'], 2], [(349092, 1), [['returns'], ["So, no, you can't have two identity columns. You can of course make the primary key not auto increment (identity)."]], [[" Msg 2744, Level 16, State 2, Line 1\nMultiple identity columns specified for table 'Foo'. Only one identity column per table is allowed.\n"]], ['Can a sql server table have two identity columns?'], 2], [(351840, 0), [['GFrizzle beat me to it. But here is a C# version'], ['And as a bonus a purely LINQ method chain version as well:']], [[' var projectsMemberWorkedOn = from p in Projects\n                    join projectMember in ProjectMembers on\n                        p.ProjectId equals projectMember.ProjectId\n                    where projectMember.MemberId == "a45bd16d-9be0-421b-b5bf-143d334c8155"\n                    select p;\n']], ['How do you do an IN or CONTAINS in LINQ using LAMBDA expressions?'], 2], [(351840, 1), [['And as a bonus a purely LINQ method chain version as well:'], ['-10000']], [[' var projectsMemberWorkedOn =\n            Projects.Join( ProjectMembers, p => p.ProjectId, projectMember => projectMember.ProjectId,\n                ( p, projectMember ) => new { p, projectMember } )\n                .Where( @t => @t.projectMember.MemberId == "a45bd16d-9be0-421b-b5bf-143d334c8155" )\n                .Select(@t => @t.p );\n']], ['How do you do an IN or CONTAINS in LINQ using LAMBDA expressions?'], 2], [(352311, 0), [['Access will convert to a number for you, as was mentioned, the dates are stored as numbers.'], ['EDIT re comment: Here is a small test that shows dates returned:']], [[' Dim rs As DAO.Recordset\n\nSet rs = CurrentDb.OpenRecordset("TestTable")\nrs.AddNew\nrs!NumberDate = Now()  \'Value stored, eg, 39791.4749074074 \'\nrs.Update\n\nrs.MoveLast\n\n\'To show that it converts back to the correct date / time \'\nDebug.Print Format(rs!NumberDate, "dd/mm/yyyy hh:nn:ss")\n']], ['Numeric "date" in database - How to interact with that using "normal" dates?'], 2], [(352311, 1), [['EDIT re comment: Here is a small test that shows dates returned:'], ['-10000']], [[' Set cn = CreateObject("ADODB.Connection")\nSet rs = CreateObject("ADODB.Recordset")\n\nstrFile = "C:\\Docs\\LTD.mdb"\n\ncn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" & _\n       "Data Source=" & strFile & ";" & _\n       "Persist Security Info=False"\n\nstrSQL = "SELECT NumberDate FROM TestTable WHERE NumberDate= #2008/12/7#"\n\nrs.Open strSQL, cn, 3, 3\nrs.MoveLast\n\nMsgBox rs.RecordCount\n']], ['Numeric "date" in database - How to interact with that using "normal" dates?'], 2], [(352389, 0), [['You might find it more useful to get the mode - the most frequently occuring value:'], ['If you did want to get rid of any values outside the original standard deviation, you could find the average and the standard deviation in a subquery, eliminate those values which are outside the range : average +- standard deviation, then do a further average of the remaining values, but you start running the risk of having meaningless values:']], [[' select name,    \n       (select top 1 h.run_duration\n        from sysjobhistory h\n        where h.step_id = 0\n        and h.job_id = j.job_id\n        group by h.run_duration\n        order by count(*) desc) run_duration\nfrom sysjobs j\n']], ['filter out deviating record with sql'], 2], [(352389, 1), [['If you did want to get rid of any values outside the original standard deviation, you could find the average and the standard deviation in a subquery, eliminate those values which are outside the range : average +- standard deviation, then do a further average of the remaining values, but you start running the risk of having meaningless values:'], ['-10000']], [[' select oh.job_id, avg(oh.run_duration) from sysjobhistory oh\ninner join (select job_id, avg(h.run_duration) avgduration, \n            stdev(h.run_duration) stdev_duration \n            from sysjobhistory h \n            group by job_id) as m on m.job_id = oh.job_id\nwhere oh.step_id = 0\nand abs(oh.run_duration - m.avgduration) <  m.stdev_duration\ngroup by oh.job_id\n']], ['filter out deviating record with sql'], 2], [(354008, 0), [['-10000'], ['I think you want this:']], [[' INNER JOIN attribute_values av\n    ON av.attribute_definition_id = #statusCode# \nLEFT JOIN attribute_values av2\n    ON pe.prodtree_element_id = av.prodtree_element_id\n']], ['Need to speed up this query in SQL Server'], 2], [(354008, 1), [['I think you want this:'], ['-10000']], [[" SELECT pe.prodtree_element_id prodID, pe.prodtree_element_name_s, li.line_name, av2.value\nFROM prodtree_element pe\nLEFT JOIN prodtree_link pl\n    ON pe.prodtree_element_id = pl.to_prodtree_node_id\nLEFT JOIN line li\n    ON pe.line_code = li.line_code\n--replacement\nLEFT JOIN\nattribute_values av \n         ON pe.prodtree_element_id = av.prodtree_element_id AND\n         av.attribute_definition_id = #statusCode# \n--end replacement\nWHERE pe.prodtree_element_func_type <> 'WIZARD'\n    AND pe.prodtree_element_topo_type = 'NODE'\n"]], ['Need to speed up this query in SQL Server'], 2], [(354070, 0), [['Consider these queries:'], ['and']], [[' SELECT *\nFROM Orders\nLEFT JOIN OrderLines ON OrderLines.OrderID=Orders.ID\nWHERE Orders.ID = 12345\n']], ['SQL join: where clause vs. on clause'], 2], [(354070, 1), [['and'], ['The first will return an order and its lines, if any, for order number  12345 .  The second will return all orders, but only order  12345  will have any lines associated with it.']], [[' SELECT *\nFROM Orders\nLEFT JOIN OrderLines ON OrderLines.OrderID=Orders.ID \n    AND Orders.ID = 12345\n']], ['SQL join: where clause vs. on clause'], 2], [(354981, 0), [['Examining that query shows only one column used from one table, and only two columns used from the other table.  Due to the very low numbers of columns used, this query can be easily enhanced with covering indexes:'], ["That udf_BUPDEF concerns me.  Does it read from additional tables?  Util.PADLEFT concerns me less, but still.. what is it?  If it isn't a Database Object, then consider using this instead:"]], [[' CREATE INDEX COSTCENTCoverCross ON COSTCENT(COST_CTR_NUM)\nCREATE INDEX JOINGLACCoverCross ON JOINGLAC(ACCOUNT_NO, LI_LNTM)\n']], ['Massive CROSS JOIN in SQL Server 2005'], 2], [(354981, 1), [["That udf_BUPDEF concerns me.  Does it read from additional tables?  Util.PADLEFT concerns me less, but still.. what is it?  If it isn't a Database Object, then consider using this instead:"], ["Are there any triggers on JOINCCAC?  How about indexes?  With an insert this large, you'll want to drop all triggers and indexes on that table."]], [[" RIGHT('z00000000000000000000000000' + columnName, 7)\n"]], ['Massive CROSS JOIN in SQL Server 2005'], 2], [(357328, 0), [['If I understand it right, you had a solution where you may have'], ["Now, does it matter whether the 'num' values are small and in a gap-less sequence?\nIf not, then simply use sequences for those too. So you may get"]], [[' Table A\n-------\n100\n101\n102\n\nTable B\n-------\n100 1\n100 2\n101 1\n\nTable C\n-------\n100 1\n100 2\n101 1\n\n\nTable D\n-------\n100 1 1\n100 2 1\n100 1 2\n101 1 1\n']], ['Identifiers in a Diamond Relationship between Tables'], 3], [(357328, 1), [["Now, does it matter whether the 'num' values are small and in a gap-less sequence?\nIf not, then simply use sequences for those too. So you may get"], ["I'd use separate sequences for bnum and cnum. \nOn selecting you could (if desired) use something like"]], [[' Table B\n-------\n100 29125\n100 29138\n101 29130\n\nTable D\n-------\n100 29125 401907\n100 29138 404911\n101 29130 803888\n']], ['Identifiers in a Diamond Relationship between Tables'], 3], [(357328, 2), [["I'd use separate sequences for bnum and cnum. \nOn selecting you could (if desired) use something like"], ['-10000']], [[' SELECT AID, \n      RANK(BNUM) OVER (PARTITION BY AID ORDER BY BNUM) bnum_seq,\n      RANK(CNUM) OVER (PARTITION BY AID ORDER BY CNUM) cnum_seq\n']], ['Identifiers in a Diamond Relationship between Tables'], 3], [(360467, 0), [['You can do this in a trigger (MySQL 5.0 or greater required):'], ["edit:  The following example sets  stage_name  only if it's  NULL .  Otherwise you can specify the  stage_name  in your  INSERT  statement, and it'll be preserved."]], [[" CREATE TRIGGER format_stage_name \nBEFORE INSERT ON actors\nFOR EACH ROW\nBEGIN\n  SET NEW.stage_name = CONCAT(NEW.forename, ' ', NEW.surname);\nEND\n"]], ['MySQL - Set default value for field as a string concatenation function'], 2], [(360467, 1), [["edit:  The following example sets  stage_name  only if it's  NULL .  Otherwise you can specify the  stage_name  in your  INSERT  statement, and it'll be preserved."], ['-10000']], [[" CREATE TRIGGER format_stage_name \nBEFORE INSERT ON actors\nFOR EACH ROW\nBEGIN\n  IF (NEW.stage_name IS NULL) THEN\n    SET NEW.stage_name = CONCAT(NEW.forename, ' ', NEW.surname);\n  END IF;\nEND\n"]], ['MySQL - Set default value for field as a string concatenation function'], 2], [(361304, 0), [['insert ... returning.'], ['in python:']], [[" declare\n   s2 number;\n begin\n   insert into seqtest2(x) values ('aaa') returning seq into s2;\n   dbms_output.put_line(s2);\n end;\n"]], ['Oracle: How do I get the sequence number of the row just inserted?'], 2], [(361304, 1), [['in python:'], ['-10000']], [[' myseq=curs.var(cx_Oracle.NUMBER)\ncurs.prepare("insert into seqtest2(x) values(\'bbb\') returning seq into :x")\ncurs.execute(None, x=myseq)\nprint int(myseq.getvalue())\n']], ['Oracle: How do I get the sequence number of the row just inserted?'], 2], [(362556, 0), [['You are correct in saying that left joins will return nulls for the right where there is no match, but you are not allowing these nulls to be returned when you add this restriction to your where clause:'], ["You should be able to put these in the 'on' clause of the join instead, so only relevant rows on the right are returned."]], [[' and b.id_tp_cd = 10000\nand c.id_tp_cd = 20000\n']], ['oracle left outer joins not showing right null values'], 2], [(362556, 1), [["You should be able to put these in the 'on' clause of the join instead, so only relevant rows on the right are returned."], ['-10000']], [[' select a.refnum, b.refnum, c.refnum\nfrom myTable a \nleft outer join myTable b on (a.contid = b.contid and b.id_tp_cd = 10000) \nleft outer join myTable c on (a.contid = c.contid and c.id_tp_cd = 20000) \nwhere a.id_tp_cd = 90000\n']], ['oracle left outer joins not showing right null values'], 2], [(363084, 0), [['-10000'], ['To produce a CSV file, you would do something like:']], [[" SELECT A,B,C\nFROM X\nINTO OUTFILE 'file name';\n"]], ['MYSQL - How would I Export tables specifying only certain fields?'], 3], [(363084, 1), [['To produce a CSV file, you would do something like:'], ['To load the data back in from the file, use the  LOAD DATA INFILE  command with the same options you used to dump it out.  For the CSV format above, that would be']], [[' SELECT A,B,C\nINTO OUTFILE \'/tmp/result.txt\'\nFIELDS TERMINATED BY \',\' OPTIONALLY ENCLOSED BY \'"\'\nLINES TERMINATED BY \'\\n\'\nFROM X;\n']], ['MYSQL - How would I Export tables specifying only certain fields?'], 3], [(363084, 2), [['To load the data back in from the file, use the  LOAD DATA INFILE  command with the same options you used to dump it out.  For the CSV format above, that would be'], ['-10000']], [[' LOAD DATA INFILE \'/tmp/result.txt\'\nINTO TABLE X\nFIELDS TERMINATED BY \',\' OPTIONALLY ENCLOSED BY \'"\'\nLINES TERMINATED BY \'\\n\';\n']], ['MYSQL - How would I Export tables specifying only certain fields?'], 3], [(364825, 0), [['Add the keyword SQL_CALC_FOUND_ROWS right after the keyword SELECT :'], ['After that, run another query with the function FOUND_ROWS() :']], [[' SELECT SQL_CALC_FOUND_ROWS t3.id, a,bunch,of,other,stuff FROM t1, t2, t3 \nWHERE (associate t1,t2, and t3 with each other) \nGROUP BY t3.id \nLIMIT 10,20\n']], ['Getting the number of rows with a GROUP BY query'], 2], [(364825, 1), [['After that, run another query with the function FOUND_ROWS() :'], ['It should return the number of rows without the LIMIT clause.']], [[' SELECT FOUND_ROWS();\n']], ['Getting the number of rows with a GROUP BY query'], 2], [(366603, 0), [['Cast the datetime to a date, then GROUP BY using this syntax:'], ['Or you can GROUP BY the alias as @orlandu63 suggested:']], [[' SELECT SUM(foo), DATE(mydate) FROM a_table GROUP BY DATE(a_table.mydate);\n']], ['MySQL/SQL: Group by date only on a Datetime column'], 2], [(366603, 1), [['Or you can GROUP BY the alias as @orlandu63 suggested:'], ["Though I don't think it'll make any difference to performance, it is a little clearer."]], [[' SELECT SUM(foo), DATE(mydate) DateOnly FROM a_table GROUP BY DateOnly;\n']], ['MySQL/SQL: Group by date only on a Datetime column'], 2], [(367863, 0), [['This is the shortest statement, and may be quickest if your phone book is very short:'], ['alternatively (thanks to  Alterlife )']], [[' SELECT  *\nFROM    Call\nWHERE   phone_number NOT IN (SELECT phone_number FROM Phone_book)\n']], ["SQL - find records from one table which don't exist in another"], 3], [(367863, 1), [['alternatively (thanks to  Alterlife )'], ['or (thanks to WOPR)']], [[' SELECT *\nFROM   Call\nWHERE  NOT EXISTS\n  (SELECT *\n   FROM   Phone_book\n   WHERE  Phone_book.phone_number = Call.phone_number)\n']], ["SQL - find records from one table which don't exist in another"], 3], [(367863, 2), [['or (thanks to WOPR)'], ["(ignoring that, as others have said, it's normally best to select just the columns you want, not ' * ')"]], [[' SELECT * \nFROM   Call\nLEFT OUTER JOIN Phone_Book\n  ON (Call.phone_number = Phone_book.phone_number)\n  WHERE Phone_book.phone_number IS NULL\n']], ["SQL - find records from one table which don't exist in another"], 3], [(368459, 0), [['For demo purposes, consider the following two table structures:'], ["Now this query should do the job you're after:"]], [[' Students(\n  STU_PKEY Int Identity(1,1) Constraint PK_Students_StuPKey Primary Key,\n  STU_NAME nvarchar(64)\n)\n\nCourses(\n  CRS_PKEY Int Identity(1, 1) Constraint PK_Courses_CrsPKey Primary Key,\n  STU_KEY Int Constraint FK_Students_StuPKey Foreign Key References Students(STU_PKEY),\n  CRS_NAME nvarchar(64)\n)\n']], ['SQL Help: Select statement Concatenate a One to Many relationship'], 2], [(368459, 1), [["Now this query should do the job you're after:"], ['Way simpler than the currently accepted answer...']], [[" Select  s.STU_PKEY, s.STU_NAME As Student,\n        Stuff((\n            Select  ',' + c.CRS_NAME\n            From    Courses c\n            Where   s.STU_PKEY = c.STU_KEY\n            For     XML Path('')\n        ), 1, 1, '') As Courses \nFrom    Students s\nGroup By s.STU_PKEY, s.STU_NAME\n"]], ['SQL Help: Select statement Concatenate a One to Many relationship'], 2], [(369213, 0), [["Here's an example of what you must do:"], ["It's far more efficient to retrieve the attributes as they are stored, and then write application code to loop through the result set, building an object or associative array with an entry for each attribute.  You don't need to know all the attributes this way, and you don't have to execute an  n -way join."]], [[" SELECT c.id, c.date_created,\n c1.value AS name,\n c2.value AS email,\n c3.value AS phone,\n c4.value AS fax,\n c5.value AS website\nFROM contact_profiles c\n LEFT OUTER JOIN contact_attributes c1\n  ON (c.id = c1.profile AND c1.type = 'name')\n LEFT OUTER JOIN contact_attributes c1\n  ON (c.id = c1.profile AND c1.type = 'email')\n LEFT OUTER JOIN contact_attributes c1\n  ON (c.id = c1.profile AND c1.type = 'phone')\n LEFT OUTER JOIN contact_attributes c1\n  ON (c.id = c1.profile AND c1.type = 'fax')\n LEFT OUTER JOIN contact_attributes c1\n  ON (c.id = c1.profile AND c1.type = 'website');\n"]], ['SQL database problems with addressbook table design'], 2], [(369213, 1), [["It's far more efficient to retrieve the attributes as they are stored, and then write application code to loop through the result set, building an object or associative array with an entry for each attribute.  You don't need to know all the attributes this way, and you don't have to execute an  n -way join."], ['You asked in a comment what to do if you need this level of flexibility, if not use the EAV design?  SQL is not the correct solution if you truly need unlimited metadata flexibility.  Here are some alternatives:']], [[' SELECT * FROM contact_profiles c\n  LEFT OUTER JOIN contact_attributes ca ON (c.id = ca.profile);\n']], ['SQL database problems with addressbook table design'], 2], [(370268, 0), [["ie assuming 3 tables with 'id' and 'id_2' columns, does"], ['become']], [[' T1 JOIN T2 USING(id) JOIN T3 USING(id_2)\n']], ['What\'s the difference between "using" and "on" in table joins in MysQL?'], 6], [(370268, 1), [['become'], ['or']], [[' T1 JOIN T2 ON(T1.id=T2.id) JOIN T3 ON(T1.id_2=T3.id_2 AND T2.id_2=T3.id_2)\n']], ['What\'s the difference between "using" and "on" in table joins in MysQL?'], 6], [(370268, 2), [['or'], ['Assuming a T1 with a single ID field, one row containing the value 1, and a T2 with an ID and VALUE field (one row, ID=1, VALUE=6), then we get:']], [[' T1 JOIN T2 ON(T1.id=T2.id) JOIN T3 ON(T2.id_2=T3.id_2)\n']], ['What\'s the difference between "using" and "on" in table joins in MysQL?'], 6], [(370268, 3), [['Assuming a T1 with a single ID field, one row containing the value 1, and a T2 with an ID and VALUE field (one row, ID=1, VALUE=6), then we get:'], ['gives no rows, since the WHERE is required to match, whereas']], [[' SELECT T1.ID, T2.ID, T2.VALUE FROM T1 LEFT OUTER JOIN T2 ON(T1.ID=T2.ID) WHERE T2.VALUE=42\n']], ['What\'s the difference between "using" and "on" in table joins in MysQL?'], 6], [(370268, 4), [['gives no rows, since the WHERE is required to match, whereas'], ['will give one row with the values']], [[' SELECT T1.ID, T2.ID, T2.VALUE FROM T1 LEFT OUTER JOIN T2 ON(T1.ID=T2.ID AND T2.VALUE=42)\n']], ['What\'s the difference between "using" and "on" in table joins in MysQL?'], 6], [(370268, 5), [['will give one row with the values'], ['since the ON is only required for matching the join, which is optional due to being outer.']], [[' 1, NULL, NULL\n']], ['What\'s the difference between "using" and "on" in table joins in MysQL?'], 6], [(372246, 0), [['You can group'], ['but if you can migrate to sql2005/8,\nyou can use common table expression.']], [[' select columnlist\nfrom table1\njoin table2 on joincond2\njoin table3 on joincond3\n']], ['Forcing a UNION on an OR for optimization in SQL Server 2000'], 2], [(372246, 1), [['but if you can migrate to sql2005/8,\nyou can use common table expression.'], ['-10000']], [[' with cte ( columnlist )\nas (\n    select columnlist\n    from table1\n    join table2 on joincond2\n    join table3 on joincond3 )\nselect columnlist from cte where ...\nunion\nselect columnlist from cte where ...\n']], ['Forcing a UNION on an OR for optimization in SQL Server 2000'], 2], [(373126, 0), [['A more recognizable EAV table looks like the following:'], ["What you've done is simply spread an EAV table over three tables, but without improving the order of your metadata:"]], [[' CREATE TABLE vehicleEAV (\n  vid        INTEGER,\n  attr_name  VARCHAR(20),\n  attr_value VARCHAR(100),\n  PRIMARY KEY (vid, attr_name),\n  FOREIGN KEY (vid) REFERENCES vehicles (vid)\n);\n']], ['How to design a database schema to support tagging with categories?'], 3], [(373126, 1), [["What you've done is simply spread an EAV table over three tables, but without improving the order of your metadata:"], ["If you're going to use the EAV design, you only need the  vehicleTags  and  categories  tables.  "]], [[' CREATE TABLE vehicleTag (\n  vid         INTEGER,\n  cid         INTEGER,\n  tid         INTEGER,\n  PRIMARY KEY (vid, cid),\n  FOREIGN KEY (vid) REFERENCES vehicles(vid),\n  FOREIGN KEY (cid) REFERENCES categories(cid),\n  FOREIGN KEY (tid) REFERENCES tags(tid)\n);\n\nCREATE TABLE categories (\n  cid        INTEGER PRIMARY KEY,\n  category   VARCHAR(20) -- "attr_name"\n);\n\nCREATE TABLE tags (\n  tid        INTEGER PRIMARY KEY,\n  tag        VARCHAR(100) -- "attr_value"\n);\n']], ['How to design a database schema to support tagging with categories?'], 3], [(373126, 2), [["If you're going to use the EAV design, you only need the  vehicleTags  and  categories  tables.  "], ["But keep in mind that you're  mixing data with metadata .  You lose the ability to apply certain constraints to your data model.  "]], [[' CREATE TABLE vehicleTag (\n  vid         INTEGER,\n  cid         INTEGER,     -- reference to "attr_name" lookup table\n  tag         VARCHAR(100, -- "attr_value"\n  PRIMARY KEY (vid, cid),\n  FOREIGN KEY (vid) REFERENCES vehicles(vid),\n  FOREIGN KEY (cid) REFERENCES categories(cid)\n);\n']], ['How to design a database schema to support tagging with categories?'], 3], [(374079, 0), [['This is a set-based solution for the problem. The performance will probably suck, but it works :)'], ['Results:']], [[" CREATE TABLE #LogEntries (\n  ID INT IDENTITY,\n  LogEntry VARCHAR(100)\n)\n\nINSERT INTO #LogEntries VALUES ('beans')\nINSERT INTO #LogEntries VALUES ('beans')\nINSERT INTO #LogEntries VALUES ('beans')\nINSERT INTO #LogEntries VALUES ('cabbage')\nINSERT INTO #LogEntries VALUES ('cabbage')\nINSERT INTO #LogEntries VALUES ('carrots')\nINSERT INTO #LogEntries VALUES ('beans')\nINSERT INTO #LogEntries VALUES ('beans')\nINSERT INTO #LogEntries VALUES ('carrots')\n\nSELECT logentry, COUNT(*) FROM (\n    SELECT logentry, \n    ISNULL((SELECT MAX(id) FROM #logentries l2 WHERE l1.logentry<>l2.logentry AND l2.id < l1.id), 0) AS id\n    FROM #LogEntries l1\n) AS a\nGROUP BY logentry, id\n\n\nDROP TABLE #logentries \n"]], ['Group repeated rows in TSQL'], 2], [(374079, 1), [['Results:'], ['The ISNULL() is required for the first set of beans. ']], [[' beans   3\ncabbage 2\ncarrots 1\nbeans   2\ncarrots 1\n']], ['Group repeated rows in TSQL'], 2], [(377798, 0), [['Constraint:'], ['Table function returns an int and uses the following select to derive it']], [['    field is null or dbo.fn_count_maximum_of_field(field) < 2\n']], ['Field value must be unique unless it is NULL'], 2], [(377798, 1), [['Table function returns an int and uses the following select to derive it'], ['This should be reasonably fast if your column as a (non-unique) index on it.']], [['    declare @retVal int\n\n   select @retVal = max(occurrences)\n   from ( \n        select field, count(*) as occurrences\n        from dbo.tbl\n        where field = @field\n        group by field\n   ) tmp\n']], ['Field value must be unique unless it is NULL'], 2], [(379556, 0), [["In terms of getting the data out, you can use 'group by' and ' truncate ' to slice the data into 1 minute intervals. eg:  "], ['This will give you results like below (assuming there are 20 rows for alice between 8.00 and 8.01 and 40 rows between 8.01 and 8.02):']], [[" SELECT user_name, truncate(event_time, 'YYYYMMDD HH24MI'), count(*)\nFROM job_table\nWHERE event_time > TO_DATE( some start date time)\nAND user_name IN ( list of users to query )\nGROUP BY user_name, truncate(event_time, 'YYYYMMDD HH24MI') \n"]], ['Time slicing in Oracle/SQL'], 2], [(379556, 1), [['This will give you results like below (assuming there are 20 rows for alice between 8.00 and 8.01 and 40 rows between 8.01 and 8.02):'], ['-10000']], [[' Alice  2008-12-16 08:00   20\nAlice  2008-12-16 08:01   40\n']], ['Time slicing in Oracle/SQL'], 2], [(381371, 0), [['-10000'], ['That didn\'t look like it fit my needs, so I tried changing the "datetime" function around a bit, and wound up with this:']], [[" SELECT datetime(1092941466, 'unixepoch', 'localtime');\n"]], ['Sqlite: CURRENT_TIMESTAMP is in GMT, not the timezone of the machine'], 2], [(381371, 1), [['That didn\'t look like it fit my needs, so I tried changing the "datetime" function around a bit, and wound up with this:'], ['That seems to work - is that the correct way to convert for your timezone, or is there a better way to do this?']], [[" select datetime(timestamp, 'localtime')\n"]], ['Sqlite: CURRENT_TIMESTAMP is in GMT, not the timezone of the machine'], 2], [(386097, 0), [['However, you can create synonyms across databases, in the form:'], ['You can query  systables  to identify real tables in old_db, ie:']], [[' DATABASE old_db;\nCREATE SYNONYM table_name FOR new_db:table_name;\n']], ['Database alias in Informix'], 2], [(386097, 1), [['You can query  systables  to identify real tables in old_db, ie:'], ['The row-count will of course depend on reasonably current  UPDATE STATISTICS .']], [[' DATABASE old_db;\nSELECT tabname, nrows\n  FROM systables\n  WHERE tabtype = "T"\n    AND tabid > 99 -- exclude internal tables\n']], ['Database alias in Informix'], 2], [(387636, 0), [['The easiest option is to do it as object updates:'], ['If you know you are expecting one record, you could use:']], [[' var qry = from product in model.Products\n          where Id == @Id && CustomerId == @CustomerId\n          select product;\n\nforeach(Product p in qry) {\n    p.Name = @Name;\n}\n\nmodel.SaveChanges(); // or whatever the method is in EF\n']], ['Adding to the Where clause of an Update in LinQ-to-Entities'], 2], [(387636, 1), [['If you know you are expecting one record, you could use:'], ["You  might  also be able to write it as Entity-SQL, but I'm not sure I'd bother, personally... (update: I've just checked, and I don't think Entity-SQL includes DML, so no, you can't - you'd have to use either the above, or a regular SQL command/SPROC)"]], [[' Product prod = (from product in model.Products\n          where Id == @Id && CustomerId == @CustomerId\n          select product).Single();\n\nprod.Name = @Name;\nmode.SaveChanges(); // ditto\n']], ['Adding to the Where clause of an Update in LinQ-to-Entities'], 2], [(390534, 0), [['-10000'], ['or, if SQLite insists on treating subselects as sets, ']], [[' SELECT * from foo where timestamp = (select max(timestamp) from foo)\n']], ['Aggregate functions in WHERE clause in SQLite'], 2], [(390534, 1), [['or, if SQLite insists on treating subselects as sets, '], ['-10000']], [[' SELECT * from foo where timestamp in (select max(timestamp) from foo)\n']], ['Aggregate functions in WHERE clause in SQLite'], 2], [(390945, 0), [['Given that you said you were using Oracle I would just query the meta-data. '], ['Just saw your edit. Just run the above without the where clause and it will return the largest table in the database. Only problem may be that you might get a SYS$ table or something. Alternately if you are just doing this for your own knowledge just do ']], [[" select table_name, max(num_rows) from all_tables where table_name in ('A', 'B', 'C');\n"]], ['Identify a table with maximum rows in Oracle'], 2], [(390945, 1), [['Just saw your edit. Just run the above without the where clause and it will return the largest table in the database. Only problem may be that you might get a SYS$ table or something. Alternately if you are just doing this for your own knowledge just do '], ["and you'll see what the biggest are."]], [[' select table_name, num_rows from all_tables order by num_rows; \n']], ['Identify a table with maximum rows in Oracle'], 2], [(391000, 0), [['The easiest way is to use the  to_char  function this way:'], ['For example:']], [[" to_char(sysdate, 'YY')\n"]], ['How do I trim date in PLSQL?'], 3], [(391000, 1), [['For example:'], ['If you just need the value of the last two digits, you could apply the  modulo function   MOD :']], [[" extract(YEAR FROM DATE '2008-12-24')    \n"]], ['How do I trim date in PLSQL?'], 3], [(391000, 2), [['If you just need the value of the last two digits, you could apply the  modulo function   MOD :'], ['would return  8 .']], [[" mod(extract(YEAR FROM DATE '2008-12-24'), 100) \n"]], ['How do I trim date in PLSQL?'], 3], [(391036, 0), [['a shell script to kill a connection:'], ['a client-side function (this in python) to generate a call to the script.\nI call this at the beginning of my test program and print the\nstring so I can cut and paste.']], [[' #!/bin/sh\n# oracle-killsession -- kill a specified oracle session\n\nsid=$1; ser=$2; inst=$3\necho -n sys password:\nstty -echo; read pass; stty echo\necho "alter system kill session \'$sid,$ser\';"|\n     sqlplus -SL sys/$pass@$inst as sysdba\n']], ['Oracle: How can I programmatically arrange to have my current connection killed?'], 4], [(391036, 1), [['a client-side function (this in python) to generate a call to the script.\nI call this at the beginning of my test program and print the\nstring so I can cut and paste.'], ['and a sample invocation']], [[' def killstring(curs):\n    """return a string that will kill this db connection"""\n    curs.execute("""SELECT dbms_debug_jdwp.current_session_id,\n                           dbms_debug_jdwp.current_session_serial,\n                           sys_context(\'USERENV\', \'INSTANCE_NAME\')\n                    FROM dual""")\n    (sid,serial,instance)=curs.fetchone()\n    s="oracle-killsession %s %s %s"%(sid,serial,instance)\n    return s\n']], ['Oracle: How can I programmatically arrange to have my current connection killed?'], 4], [(391036, 2), [['and a sample invocation'], ['and from my client... hooray!!!']], [[' $ oracle-killsession 98 45809 orcl2\nsys password:\nSystem altered.\n']], ['Oracle: How can I programmatically arrange to have my current connection killed?'], 4], [(391036, 3), [['and from my client... hooray!!!'], ['-10000']], [[' cx_Oracle.DatabaseError: ORA-00028: your session has been killed\n']], ['Oracle: How can I programmatically arrange to have my current connection killed?'], 4], [(392176, 0), [['Consider if Name is not unique.  If you have the following data:'], ['Then Query 1 gives you:']], [[' Table 1                        Table 2\nID    Name      Address        ID    Name      Address\n0     Jim Smith 1111 A St      0     Jim Smith 2222 A St\n1     Jim Smith 2222 B St      1     Jim Smith 3333 C St\n']], ['Query three non-bisecting sets of data'], 3], [(392176, 1), [['Then Query 1 gives you:'], ['Query 3 gives you']], [[' 0     Jim Smith 1111 A St\n1     Jim Smith 2222 B St \n']], ['Query three non-bisecting sets of data'], 3], [(392176, 2), [['Query 3 gives you'], ['Because row 1 in Table 1 matches row 2 in Table 2 and row 2 in Table 1 matches row 1 in Table 2.  Thus you get 4 rows out of Table 1 when there are only 2 rows in it.']], [[' 0     Jim Smith 1111 A St\n1     Jim Smith 2222 B St\n']], ['Query three non-bisecting sets of data'], 3], [(392750, 0), [['-10000'], ['Alternate version:']], [[' UPDATE users u\nSET status = 1\nWHERE EXISTS (SELECT id FROM usersold WHERE id = u.id)\n']], ['How to do it in mysql: If id=idold THEN UPDATE status=1'], 2], [(392750, 1), [['Alternate version:'], ['You should test and, depending on your database, you may find one performs better than the other although I expect any decent database will optimize then to be much the same anyway.']], [[' UPDATE users\nSET status = 1\nWHERE id IN (SELECT id FROM usersold)\n']], ['How to do it in mysql: If id=idold THEN UPDATE status=1'], 2], [(394771, 0), [['Assuming the following tables:'], ['With the Following Data:']], [[' create table People\n(\n     ID        int          not null primary key auto_increment\n    ,FullName  varchar(255) not null\n    ,StateID   int \n    ,CountryID int \n    ,CityID    int \n)\n;\ncreate table States\n(\n     ID   int          not null primary key auto_increment\n    ,Name varchar(255) not null\n)\n;\ncreate table Countries\n(\n     ID   int          not null primary key auto_increment\n    ,Name varchar(255) not null\n)\n;\ncreate table Cities\n(\n     ID   int          not null primary key auto_increment\n    ,Name varchar(255) not null\n)\n;\n']], ["What's the best way to get related data from their ID's in a single query?"], 3], [(394771, 1), [['With the Following Data:'], ['Then this query should give you what you are after.']], [[" insert into Cities(Name) values ('City 1'),('City 2'),('City 3');\ninsert into States(Name) values ('State 1'),('State 2'),('State 3');\ninsert into Countries(Name) values ('Country 1'),('Country 2'),('Country 3');\ninsert into People(FullName,CityID,StateID,CountryID) values ('Has Nothing'   ,null,null,null);\ninsert into People(FullName,CityID,StateID,CountryID) values ('Has City'      ,   1,null,null);\ninsert into People(FullName,CityID,StateID,CountryID) values ('Has State'     ,null,   2,null);\ninsert into People(FullName,CityID,StateID,CountryID) values ('Has Country'   ,null,null,   3);\ninsert into People(FullName,CityID,StateID,CountryID) values ('Has Everything',   3,   2,   1);\n"]], ["What's the best way to get related data from their ID's in a single query?"], 3], [(394771, 2), [['Then this query should give you what you are after.'], ['-10000']], [[' select \n P.ID\n,P.FullName\n,Ci.Name as CityName\n,St.Name as StateName\n,Co.Name as CountryName\nfrom People P\nleft Join Cities    Ci on Ci.ID = P.CityID\nleft Join States    St on St.ID = P.StateID\nleft Join Countries Co on Co.ID = P.CountryID\n']], ["What's the best way to get related data from their ID's in a single query?"], 3], [(394853, 0), [["Note that neither of these two examples are Cartesian products.  For that you'd use either"], ['or']], [[' SELECT c.name, o.product  \nFROM customer c, order o  \nWHERE o.value = 150  \n']], ['SQL Inner Join syntax'], 2], [(394853, 1), [['or'], ['-10000']], [[' SELECT c.name, o.product  \nFROM customer c  CROSS JOIN order o \nWHERE o.value = 150\n']], ['SQL Inner Join syntax'], 2], [(398664, 0), [['Length is also sensitive to to character sets.'], ['... giving ...']], [[" drop table daa_test;\ncreate table daa_test as select sysdate dt from dual;\nalter session set nls_date_format = 'YYYY-MM-DD';\nselect vsize(dt)  from daa_test;\nselect length(dt) from daa_test;\nalter session set nls_date_format = 'YYYY-MM-DD HH24:mi:ss';\nselect vsize(dt)  from daa_test;\nselect length(dt) from daa_test;\n"]], ['A useful example of when to use vsize function instead of length function in Oracle?'], 2], [(398664, 1), [['... giving ...'], ['VSize is really of use IMHO in understanding internal storage requirements of data.']], [[' drop table daa_test succeeded.\ncreate table succeeded.\nalter session set succeeded.\nVSIZE(DT)              \n---------------------- \n7                      \n\n1 rows selected\n\nLENGTH(DT)             \n---------------------- \n10                     \n\n1 rows selected\n\nalter session set succeeded.\nVSIZE(DT)              \n---------------------- \n7                      \n\n1 rows selected\n\nLENGTH(DT)             \n---------------------- \n19                     \n\n1 rows selected\n']], ['A useful example of when to use vsize function instead of length function in Oracle?'], 2], [(400575, 0), [['Paging : be sure to specify an ordering.  If an ordering isn\'t specified, many db implementations use whatever is convenient for executing the query.  This "optimal" ordering behavior could give very unpredictable results.'], ['Subqueries : many places that a subquery can be issued require that the result is a single value.  top 1 is just faster than max in many cases.']], [[' SELECT top 10 CustomerName\nFROM Customer\nWHERE CustomerID > 200 --start of page\nORDER BY CustomerID\n']], ['When is the proper time to use the SQL statement "SELECT [results] FROM [tables] WHERE [conditions] FETCH FIRST [n] ROWS ONLY"'], 2], [(400575, 1), [['Subqueries : many places that a subquery can be issued require that the result is a single value.  top 1 is just faster than max in many cases.'], ['-10000']], [[' --give me some customer that ordered today\nSELECT CustomerName\nFROM Customer\nWHERE CustomerID =\n(\n  SELECT top 1 CustomerID\n  FROM Orders\n  WHERE OrderDate = @Today\n)\n']], ['When is the proper time to use the SQL statement "SELECT [results] FROM [tables] WHERE [conditions] FETCH FIRST [n] ROWS ONLY"'], 2], [(403336, 0), [['In  PSEUDO CODE:'], ['Just guessing, but the equivalent in JPQL would be']], [[" SELECT * FROM IMAGES \n  INNER JOIN IMAGETAGS A\n    ON IMAGE.ID = A.IMAGEID AND A.TAGID = 'A'\n  INNER JOIN IMAGETAGS B\n    ON IMAGE.ID = B.IMAGEID AND B.TAGID = 'B'\n  INNER JOIN IMAGETAGS C\n    ON IMAGE.ID = C.IMAGEID AND C.TAGID = 'C'\n"]], ['Getting a query intersection in JPA?'], 2], [(403336, 1), [['Just guessing, but the equivalent in JPQL would be'], ['-10000']], [[" Select img from Image img \n JOIN img.tag ta \n JOIN img.tag tb \n JOIN img.tag tc \n  WHERE ta.description = 'A' and tb.description = 'B' and tc.description = 'C'\n"]], ['Getting a query intersection in JPA?'], 2], [(404941, 0), [["As Chris pointed, in PostgreSQL it's no problem - any base type (like int, text) has it's own array subtype, and you can also create custom types including composite ones. For example:"], ['Now you can easily create array of test:']], [[' CREATE TYPE test as (\n    n int4,\n    m int4\n);\n']], ['How can I pass an "array" of values to my stored procedure?'], 4], [(404941, 1), [['Now you can easily create array of test:'], ['You can write a function that will multiply n*m for each item in array, and return sum of products:']], [[' select ARRAY[\n    row(1,2)::test,\n    row(3,4)::test,\n    row(5,6)::test\n];\n']], ['How can I pass an "array" of values to my stored procedure?'], 4], [(404941, 2), [['You can write a function that will multiply n*m for each item in array, and return sum of products:'], ['and run it:']], [[' CREATE OR REPLACE FUNCTION test_test(IN work_array test[]) RETURNS INT4 as $$\nDECLARE\n    i      INT4;\n    result INT4 := 0;\nBEGIN\n    FOR i IN SELECT generate_subscripts( work_array, 1 ) LOOP\n        result := result + work_array[i].n * work_array[i].m;\n    END LOOP;\n    RETURN result;\nEND;\n$$ language plpgsql;\n']], ['How can I pass an "array" of values to my stored procedure?'], 4], [(404941, 3), [['and run it:'], ['-10000']], [[' # SELECT test_test(\n    ARRAY[\n        row(1, 2)::test,\n        row(3,4)::test,\n        row(5,6)::test\n    ]\n);\n test_test\n-----------\n        44\n(1 row)\n']], ['How can I pass an "array" of values to my stored procedure?'], 4], [(407646, 0), [["For the first, it's generally a good idea to just have a grouping which you can then filter on if you want:"], ['For the second, you can just modify the above like so:']], [[' select\n  r.company_id, r.person_id, r.financial_year, count(r.person_id) \nfrom\n  Role as r \ngroup by\n  r.company_id, r.person_id, r.financial_year\n']], ['SQL: tell whether columns are unique with respect to each other'], 2], [(407646, 1), [['For the second, you can just modify the above like so:'], ['-10000']], [[' select\n  r.company_id, r.person_id, r.financial_year, count(r.person_id) \nfrom\n  Role as r \ngroup by\n  r.company_id, r.person_id, r.financial_year\nhaving\n  count(r.person_id) > 1\n']], ['SQL: tell whether columns are unique with respect to each other'], 2], [(412022, 0), [['Option two, as in this example, is particularly useful when the query can be created as a subquery of a select statement and when all needed parameters are available in the mapped table. It also helps if the table is not mutable and/or is cached as read-only, depending on how heavy your stored procedure is.'], ['If the above is not possible due to restrictions in the mappings, problems with caching or if your current cache settings retrieve one by one instead of by bigger amounts and you cannot change that, you should consider an alternate approach, for instance a separate mapping of the whole query with parameters. This is quite close to the CreateSqlQuery approach above, but forces the result set to be of a certain type (and you can set each property declaratively):']], [[' <class name="..." table="..." lazy="true" mutable="false>\n  <cache usage="read-only" />\n\n    <id name="Id" column="id" type="int">\n      <generator class="native" />\n    </id>\n    <property name="Latitude" column="Latitude" type="double" not-null="true" />\n    <property name="Longitude" column="Longitude" type="double" not-null="true" />\n\n    <property name="PrijsInstelling"\n        formula="(dbo.DistanceBetween(@lat1, @lat2, Latitude, Longitude))"\n        type="double" />\n\n    ... etc\n</class>\n']], ['NHibernate query with distance calculation stored proc'], 3], [(412022, 1), [['If the above is not possible due to restrictions in the mappings, problems with caching or if your current cache settings retrieve one by one instead of by bigger amounts and you cannot change that, you should consider an alternate approach, for instance a separate mapping of the whole query with parameters. This is quite close to the CreateSqlQuery approach above, but forces the result set to be of a certain type (and you can set each property declaratively):'], ['You can call this query as follows:']], [[' <sql-query flush-mode="never" name="select_Distances">\n    <return\n        class="ResultSetEntityClassHere,Your.Namespace"\n        alias="items"\n        lock-mode="read" >\n\n        <return-property name="Id" column="items_Id" />\n        <return-property name="Latitude" column="items_Latitude" />\n        <return-property name="Longitude" column="items_Longitude" />\n        <return-property name="Distance" column="items_Distance" />\n    </return>\n\n    SELECT \n        Items.*, \n        dbo.DistanceBetween(@lat1, @lat2, Latitude, Longitude) AS Distance\n    FROM Items\n    WHERE UserId = :userId\n\n</sql-query>\n']], ['NHibernate query with distance calculation stored proc'], 3], [(412022, 2), [['You can call this query as follows:'], ['Depending on your needs, you can choose an approach. I personally use the following rule of thumb to decide what approach to use:']], [[' List<ResultSetEntityClassHere> distanceList = \n    yourNHibernateSession.GetNamedQuery("select_Distances") \n        .SetInt32("userId", currentUserId)  /* any params go this way */\n        .SetCacheable(true)                 /* it\'s usually good to cache */\n        .List<ResultSetEntityClassHere>();  /* must match the class of sql-query HBM */\n']], ['NHibernate query with distance calculation stored proc'], 3], [(413377, 0), [["This is how I might model it. I've left out the Revisions table and Files table as those should be pretty self-explanatory."], ['To get all of the values for files of a particular revision you could use the following query. Joining to the files table with an outer join would let you get those that have no defined value for that revision.']], [[' CREATE TABLE Revision_Files\n(\n    start_revision_number   INT NOT NULL,\n    end_revision_number     INT NOT NULL,\n    file_number             INT NOT NULL,\n    value                   INT NOT NULL,\n    CONSTRAINT PK_Revision_Files PRIMARY KEY CLUSTERED (start_revision_number, file_number),\n    CONSTRAINT CHK_Revision_Files_start_before_end CHECK (start_revision_number <= end_revision_number)\n)\nGO\n']], ['Sparse data: efficient storage and retrieval in an RDBMS'], 3], [(413377, 1), [['To get all of the values for files of a particular revision you could use the following query. Joining to the files table with an outer join would let you get those that have no defined value for that revision.'], ['Assuming that I understand correctly what you want in your third point, this will let you get all of the revisions for which a particular file has a certain value:']], [[' SELECT\n    REV.revision_number,\n    RF.file_number,\n    RF.value\nFROM\n    Revisions REV\nINNER JOIN Revision_Files RF ON\n    RF.start_revision_number <= REV.revision_number AND\n    RF.end_revision_number >= REV.revision_number\nGO\n']], ['Sparse data: efficient storage and retrieval in an RDBMS'], 3], [(413377, 2), [['Assuming that I understand correctly what you want in your third point, this will let you get all of the revisions for which a particular file has a certain value:'], ['-10000']], [[' SELECT\n    REV.revision_number\nFROM\n    Revision_Files RF\nINNER JOIN Revisions REV ON\n    REV.revision_number BETWEEN RF.start_revision_number AND RF.end_revision_number\nWHERE\n    RF.file_number = @file_number AND\n    RF.value = @value\nGO\n']], ['Sparse data: efficient storage and retrieval in an RDBMS'], 3], [(414138, 0), [["Another possibility is to use LIKE with the delimiters to make sure that partial matches are ignore, but you can't use indexes with that, so performance will be poor for any large table. For example:"], ['.']], [[" SELECT\n     my_column\nFROM\n     My_Table\nWHERE\n     @my_string LIKE '%|' + my_column + '|%'\n"]], ['Filtering With Multi-Select Boxes With SQL Server'], 2], [(414138, 1), [['.'], ['-10000']], [[" /*\n    Name:       GetTableFromStringList\n    Description:    Returns a table of values extracted from a delimited list\n    Parameters:\n            @StringList - A delimited list of strings\n            @Delimiter - The delimiter used in the delimited list\n\n    History:\n    Date        Name            Comments\n    ----------  -------------   ----------------------------------------------------\n    2008-12-03  T. Hummel   Initial Creation\n*/\nCREATE FUNCTION dbo.GetTableFromStringList\n(\n    @StringList VARCHAR(1000),\n    @Delimiter  CHAR(1) = ','\n)\nRETURNS @Results TABLE\n(\n    String  VARCHAR(1000)   NOT NULL\n)\nAS\nBEGIN\n    DECLARE\n        @string     VARCHAR(1000),\n        @position   SMALLINT\n\n    SET @StringList = LTRIM(RTRIM(@StringList)) + @Delimiter\n    SET @position = CHARINDEX(@Delimiter, @StringList)\n\n    WHILE (@position > 0)\n    BEGIN\n        SET @string = LTRIM(RTRIM(LEFT(@StringList, @position - 1)))\n\n        IF (@string <> '')\n        BEGIN\n            INSERT INTO @Results (String) VALUES (@string)\n        END\n\n        SET @StringList = RIGHT(@StringList, LEN(@StringList) - @position)\n        SET @position = CHARINDEX(@Delimiter, @StringList, 1)\n    END\n\n    RETURN\nEND\n"]], ['Filtering With Multi-Select Boxes With SQL Server'], 2], [(414207, 0), [['Here is some code as an example of the ConnectionManager:'], ['Here is how I would use it from a business object:']], [[' public class ConnectionManager: IDisposable\n{\n    private ConnectionManager instance;\n\n    [ThreadStatic]\n    private static object lockObject; \n    private static Object LockObject\n    {\n        get\n        {\n            if (lockObject == null)\n                lockObject = new object();\n            return lockObject;\n        }\n    }\n\n    [ThreadStatic]\n    private static Dictionary<string, ConnectionManager> managers;\n    private static Dictionary<string, ConnectionManager> Managers\n    {\n        get\n        {\n            if (managers == null)\n                managers = new Dictionary<string, ConnectionManager>();\n            return managers;\n        }\n    }\n\n    private SqlConnection connection = null;\n    private int referenceCount;\n    private string name;\n\n\n    public static ConnectionManager GetManager(string connectionName)\n    {\n        lock (LockObject)\n        {\n            ConnectionManager mgr;\n            if (Managers.ContainsKey(connectionName))\n            {\n                mgr = Managers[connectionName];\n            }\n            else\n            {\n                mgr = new ConnectionManager(connectionName);\n                Managers.Add(connectionName, mgr);\n            }\n\n            mgr.AddRef();\n            return mgr;\n        }\n    }\n\n    private ConnectionManager(string connectionName)\n    {\n        name = connectionName;\n        connection = new SqlConnection(GetConnectionString(connectionName));\n        connection.Open();\n    }\n\n    private string GetConnectionString(string connectionName)\n    {\n        string conString = Configuration.ConnectionString;\n        return conString; \n    }\n\n    public SqlConnection Connection\n    {\n        get { return connection; }\n    }\n\n    private void AddRef()\n    {\n        referenceCount += 1;\n    }\n\n    private void DeRef()\n    {\n        lock (LockObject)\n        {\n            referenceCount -= 1;\n            if (referenceCount == 0)\n            {\n                connection.Dispose();\n                Managers.Remove(name);\n            }\n        }\n    }\n\n#region IDisposable Members\n\n    public void Dispose()\n    {\n        Dispose(true);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            DeRef();\n        }\n    }\n\n    ~ConnectionManager()\n    {\n        Dispose(false);\n    }\n\n#endregion\n\n}\n']], ['Best practices re sharing IDbConnection or connection string/factory in your .Net code'], 2], [(414207, 1), [['Here is how I would use it from a business object:'], ['I save a business object and all of its children are saved as well using the same connection object.  When the scope falls away from original parent, the using statement closes the connection.']], [[' public void Save()\n{   \n    using (ConnectionManager mrg = ConnectionManager.GetManager("SQLConnectionString")\n    {\n        using (SQLCommand cmd = new SQLCommand)\n        {\n            cmd.connection = mgr.Connection\n            // More ADO Code Here\n        }\n\n        _childObject.Save(); //this child object follows the same pattern with a using ConnectionManager.\n    }\n}\n']], ['Best practices re sharing IDbConnection or connection string/factory in your .Net code'], 2], [(416625, 0), [['I tend to agree with you - this is one of many cases where SQL should have slightly smarter defaults to save us all some typing. For example, imagine if this were legal:'], ['Granted, "*" means something different here than in the SELECT clause, so maybe a different character would work better:']], [[' Select ClientName, InvoiceAmount, Sum(PaymentAmount) Group By *\n']], ['Why does SQL force me to repeat all non-aggregated fields from my SELECT clause in my GROUP BY clause?'], 2], [(416625, 1), [['Granted, "*" means something different here than in the SELECT clause, so maybe a different character would work better:'], ["There are a few other areas like that where SQL just isn't as eloquent as it could be. But at this point, it's probably too entrenched to make many big changes like that."]], [[' Select ClientName, InvoiceAmount, Sum(PaymentAmount) Group By !\n']], ['Why does SQL force me to repeat all non-aggregated fields from my SELECT clause in my GROUP BY clause?'], 2], [(418898, 0), [['BAD:  This will insert or replace all columns with new values for ID=1:'], ['BAD:  This will insert or replace 2 of the columns... the NAME column will be set to NULL or the default value:']], [[" INSERT OR REPLACE INTO Employee (id, name, role) \n  VALUES (1, 'John Foo', 'CEO');\n"]], ['SQLite - UPSERT *not* INSERT or REPLACE'], 4], [(418898, 1), [['BAD:  This will insert or replace 2 of the columns... the NAME column will be set to NULL or the default value:'], ['GOOD:  This will update 2 of the columns.\nWhen ID=1 exists, the NAME will be unaffected.\nWhen ID=1 does not exist, the name will be default (NULL).']], [[" INSERT OR REPLACE INTO Employee (id, role) \n  VALUES (1, 'code monkey');\n"]], ['SQLite - UPSERT *not* INSERT or REPLACE'], 4], [(418898, 2), [['GOOD:  This will update 2 of the columns.\nWhen ID=1 exists, the NAME will be unaffected.\nWhen ID=1 does not exist, the name will be default (NULL).'], ["This will update 2 of the columns.\nWhen ID=1 exists, the ROLE will be unaffected.\nWhen ID=1 does not exist, the role will be set to 'Benchwarmer' instead of the default value."]], [[" INSERT OR REPLACE INTO Employee (id, role, name) \n  VALUES (  1, \n            'code monkey',\n            (SELECT name FROM Employee WHERE id = 1)\n          );\n"]], ['SQLite - UPSERT *not* INSERT or REPLACE'], 4], [(418898, 3), [["This will update 2 of the columns.\nWhen ID=1 exists, the ROLE will be unaffected.\nWhen ID=1 does not exist, the role will be set to 'Benchwarmer' instead of the default value."], ['-10000']], [[" INSERT OR REPLACE INTO Employee (id, name, role) \n  VALUES (  1, \n            'Susan Bar',\n            COALESCE((SELECT role FROM Employee WHERE id = 1), 'Benchwarmer')\n          );\n"]], ['SQLite - UPSERT *not* INSERT or REPLACE'], 4], [(420741, 0), [['Using OBJECT CATALOG VIEWS'], ['Using INFORMATION SCHEMA VIEWS']], [["  SELECT T.name AS Table_Name ,\n       C.name AS Column_Name ,\n       P.name AS Data_Type ,\n       P.max_length AS Size ,\n       CAST(P.precision AS VARCHAR) + '/' + CAST(P.scale AS VARCHAR) AS Precision_Scale\nFROM   sys.objects AS T\n       JOIN sys.columns AS C ON T.object_id = C.object_id\n       JOIN sys.types AS P ON C.system_type_id = P.system_type_id\nWHERE  T.type_desc = 'USER_TABLE';\n"]], ['Getting list of tables, and fields in each, in a database'], 2], [(420741, 1), [['Using INFORMATION SCHEMA VIEWS'], ['Reference : My Blog -  http://dbalink.wordpress.com/2008/10/24/querying-the-object-catalog-and-information-schema-views/  ']], [['   SELECT TABLE_SCHEMA ,\n       TABLE_NAME ,\n       COLUMN_NAME ,\n       ORDINAL_POSITION ,\n       COLUMN_DEFAULT ,\n       DATA_TYPE ,\n       CHARACTER_MAXIMUM_LENGTH ,\n       NUMERIC_PRECISION ,\n       NUMERIC_PRECISION_RADIX ,\n       NUMERIC_SCALE ,\n       DATETIME_PRECISION\nFROM   INFORMATION_SCHEMA.COLUMNS;\n']], ['Getting list of tables, and fields in each, in a database'], 2], [(420948, 0), [['There is a view like this:'], ["A simple and more normal way of accomplishing the same goal would be to execute this query, binding the user's inputs to the query parameters:"]], [[' SELECT * FROM some_table, tmp_parm_rang\n  WHERE some_table.date_column BETWEEN tmp_parm_rang.start_date AND tmp_parm_rang.end_date;\n']], ['Date ranges in views - is this normal?'], 2], [(420948, 1), [["A simple and more normal way of accomplishing the same goal would be to execute this query, binding the user's inputs to the query parameters:"], ['-10000']], [[' SELECT * FROM some_table WHERE some_table.date_column BETWEEN ? AND ?;\n']], ['Date ranges in views - is this normal?'], 2], [(421002, 0), [['Strategy 1, provide indexes that can be used for filtering.  Table lookups will fetch the remaining data.  This almost doubles the use of space and quadruples write IO cost.'], ['Strategy 2, provide covering indexes that can be used for filtering.  There will be no lookups.\nThis quadruples the use of space and write IO cost.']], [[' on EventTable(EventDate)\non EventTable(EventTypeCode)\non EventTable(EventStatusCode)\n']], ['Indexing strategy on table'], 6], [(421002, 1), [['Strategy 2, provide covering indexes that can be used for filtering.  There will be no lookups.\nThis quadruples the use of space and write IO cost.'], ['If you had a query such as']], [[' on EventTable(EventDate, EventId,\n              EventTypeCode, EventStatusCode)\non EventTable(EventTypeCode, EventId,\n              EventDate, EventStatusCode)\non EventTable(EventStatusCode, EventId,\n              EventDate, EventTypeCode)\n']], ['Indexing strategy on table'], 6], [(421002, 2), [['If you had a query such as'], ['Then this covering index would be useful.  EventDate is likely more selective than EventTypeCode, so it goes first.']], [[' where EventDate = @EventDate\n  and EventTypeCode = @EventTypeCode\n']], ['Indexing strategy on table'], 6], [(421002, 3), [['Then this covering index would be useful.  EventDate is likely more selective than EventTypeCode, so it goes first.'], ['Edit further:\nIf you have a query such as ']], [[' on EventTable(EventDate, EventTypeCode,\n              EventId, EventStatusCode)\n']], ['Indexing strategy on table'], 6], [(421002, 4), [['Edit further:\nIf you have a query such as '], ['Then this index will work best:']], [[" where EventDate between '2008-12-01' and '2008-12-31'\n  and EventTypeCode = 'todo'\n"]], ['Indexing strategy on table'], 6], [(421002, 5), [['Then this index will work best:'], ["This will put all the 'todo' events together, ordered by their EventDate as a tie-breaker.  SQL Server just has to find the first element and read until it finds an element that doesn't meet the criteria and stop."]], [[' on EventTable(EventTypeCode, EventDate,\n              EventId, EventStatusCode)\n']], ['Indexing strategy on table'], 6], [(421379, 0), [['The problem might well be in the confusion in the sub-query'], ['How about']], [[' SELECT COUNT(someField) FROM table1 WHERE someField = theField\n']], ['SQL Server - Using a column alias in a subquery'], 2], [(421379, 1), [['How about'], ['?']], [[' SELECT COUNT(t3.someField) FROM table1 t3 WHERE t3.someField = table1.someField \n']], ['SQL Server - Using a column alias in a subquery'], 2], [(422932, 0), [['Write yourself an extension method for the sql command.'], ['Usage becomes:']], [[' public static T ExecuteNullableScalar<T>(this SqlCommand cmd)\n    where T : struct\n{\n    var result = cmd.ExecuteScalar();\n    if (result == DBNull.Value) return default(T);\n    return (T)result;\n}\n']], ['How can I check for DBNull while executing my command only once?'], 2], [(422932, 1), [['Usage becomes:'], ['-10000']], [[' int value = cmd.ExecuteNullableScalar<int>();\n']], ['How can I check for DBNull while executing my command only once?'], 2], [(424092, 0), [['What you are doing is fine, you just missed off the group by clause'], ["Here's some test data"]], [[' SELECT p.first_name, p.last_name, COUNT(i.student)\nFROM person p, student s  LEFT JOIN incident i ON s.id = i.student \nWHERE p.id = s.person_id AND s.year_group LIKE "%Year 9%"\nGROUP BY p.first_name, p.last_name;\n']], ['Why is this LEFT JOIN eliminating records with nothing in the other table?'], 4], [(424092, 1), [["Here's some test data"], ["And here's the output of the query with the group by added to it:"]], [[" insert into person values(1, 'student', 'Alice', 'Foo', 'f','1970-01-01');\ninsert into person values(2, 'student', 'Bob', 'Bar', 'm','1970-01-01');\n\ninsert into student values(1,1,0,0,'', 'current','','Year 9');\ninsert into student values(2,2,0,0,'', 'current','','Year 9');\n\ninsert into incident values(1,1,0,0,0,'flu','chicken soup', '2008-01-08');\n"]], ['Why is this LEFT JOIN eliminating records with nothing in the other table?'], 4], [(424092, 2), [["And here's the output of the query with the group by added to it:"], ['You could further clean up the query by making join clauses from your where clause, and grouping on the person id:']], [[' +------------+-----------+------------------+\n| first_name | last_name | COUNT(i.student) |\n+------------+-----------+------------------+\n| Alice      | Foo       |                1 |\n| Bob        | Bar       |                0 |\n+------------+-----------+------------------+\n']], ['Why is this LEFT JOIN eliminating records with nothing in the other table?'], 4], [(424092, 3), [['You could further clean up the query by making join clauses from your where clause, and grouping on the person id:'], ['-10000']], [[' SELECT p.first_name, p.last_name, COUNT(i.student)\nFROM person p\nINNER JOIN student s ON(p.id = s.person_id)\nLEFT JOIN incident i ON(s.id = i.student)\nWHERE s.year_group LIKE "%Year 9%"\nGROUP BY p.id;\n']], ['Why is this LEFT JOIN eliminating records with nothing in the other table?'], 4], [(424626, 0), [["OK. This is what I go to work. I don't know if this is the best way, but this works for me."], ['The Stored Procedure Looks like this.']], [[' Sub Test\n    Dim ds as new DataSet ("Testds")\n    Dim dt as New DataTable("Testdt")\n    \'Fill Datatable code omitted\n\nDim ta as new dsTest.TestTableAdapter\n    \'TableAdapter returns a datatable to ensure that the stored procedure worked\n    ta.AddDataToDB(dt,ds.GetXML)\n\n    Me.DataGridView1.DataSource=dt\n    End Sub\n']], ['.NET datatable to SQL Server stored procedure as XML'], 2], [(424626, 1), [['The Stored Procedure Looks like this.'], ['-10000']], [[" CREATE PROCEDURE [dbo].[AddDataToDB]\n\n    (\n         @x XML\n\n    )\nAS\n    BEGIN\n        DECLARE @data TABLE (\n                            TestCol1 VARCHAR(50),\n                            [TestCol2] VARCHAR(50), \n                            [TestCol3] VARCHAR(50), \n                            )\n\n        INSERT INTO @data (\n                           [TestCol1],\n                           [TestCol2],\n                           [TestCol3]\n                          )\n        SELECT \n            xmlVals.rowvals.query('TestCol1').value('.','VARCHAR(50)'),\n            xmlVals.rowvals.query('TestCol2').value('.','VARCHAR(50)'),\n            xmlVals.rowvals.query('TestCol3').value('.','VARCHAR(50)')\n        FROM \n            @x.nodes('/Testds/Testdt') as xmlVals(rowvals)\n\n\n\n        SELECT * FROM @data     \n\n    END\n"]], ['.NET datatable to SQL Server stored procedure as XML'], 2], [(425158, 0), [['You can use the  --ignore-table  option.  So you could do'], ['If you want to ignore multiple tables you can use a simple script like this']], [[' mysqldump -u username -p database --ignore-table=database.table1 > database.sql\n']], ['Skip certain tables with mysqldump'], 2], [(425158, 1), [['If you want to ignore multiple tables you can use a simple script like this'], ['-10000']], [[' #!/bin/bash\nPASSWORD=XXXXXX\nHOST=XXXXXX\nUSER=XXXXXX\nDATABASE=databasename\nDB_FILE=dump.sql\nEXCLUDED_TABLES=(\ntable1\ntable2\ntable3\ntable4\ntableN   \n)\n\nIGNORED_TABLES_STRING=\'\'\nfor TABLE in "${EXCLUDED_TABLES[@]}"\ndo :\n   IGNORED_TABLES_STRING+=" --ignore-table=${DATABASE}.${TABLE}"\ndone\n\necho "Dump structure"\nmysqldump --host=${HOST} --user=${USER} --password=${PASSWORD} --single-transaction --no-data ${DATABASE} > ${DB_FILE}\n\necho "Dump content"\nmysqldump --host=${HOST} --user=${USER} --password=${PASSWORD} ${DATABASE} --no-create-info ${IGNORED_TABLES_STRING} >> ${DB_FILE}\n']], ['Skip certain tables with mysqldump'], 2], [(425294, 0), [['For example in your controller:'], ['and the view part:']], [[' import groovy.sql.Sql\n\nclass MyFancySqlController {\n\n    def dataSource // the Spring-Bean "dataSource" is auto-injected\n\n    def list = {\n        def db = new Sql(dataSource) // Create a new instance of groovy.sql.Sql with the DB of the Grails app\n\n        def result = db.rows("SELECT foo, bar FROM my_view") // Perform the query\n\n        [ result: result ] // return the results as model\n    }\n\n}\n']], ['SQL/Database Views in Grails'], 2], [(425294, 1), [['and the view part:'], ['I hope the source is self-explanatory. The  Documentation can be found here']], [[' <g:each in="${result}">\n    <tr>\n        <td>${it.foo}</td>\n        <td>${it.bar}</td>\n    </tr>\n</g:each>\n']], ['SQL/Database Views in Grails'], 2], [(427448, 0), [["I think this will do what you need:\n(note that it will probably get confused by overlapping ranges; don't know if they're possible in your data set)"], ["Here's the test data that I used - based on yours with a couple extra entries:"]], [[' select id, min(start_date) period_start, max(end_date) period_end\nfrom\n(\nselect \n    id, start_date, end_date,\n    max(contig) over (partition by id order by end_date) contiguous_group\nfrom\n(\nselect \n    id, start_date, end_date,\n    case \n        when lag(end_date) over (partition by id order by end_date) != start_date-1 or row_number() over (partition by id order by end_date)=1 \n            then row_number() over (partition by id order by end_date) else null end contig\nfrom t2\n)\n)\ngroup by id, contiguous_group\norder by id, period_start\n/\n']], ['Grouping SQL results by continuous time intervals (oracle sql)'], 2], [(427448, 1), [["Here's the test data that I used - based on yours with a couple extra entries:"], ['-10000']], [[" create table t2 (id number, start_date date, end_date date);\n\ninsert into t2(id, start_date, end_date)values(5549, to_date('2008-05-01', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5567, to_date('2008-04-17', 'yyyy-mm-dd'), to_date('2008-04-30', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5567, to_date('2008-05-01', 'yyyy-mm-dd'), to_date('2008-07-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5567, to_date('2008-08-01', 'yyyy-mm-dd'), to_date('2008-08-14', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5567, to_date('2009-09-01', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5567, to_date('2008-11-17', 'yyyy-mm-dd'), to_date('2008-12-13', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5567, to_date('2008-12-14', 'yyyy-mm-dd'), to_date('2008-12-24', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5569, to_date('2008-05-01', 'yyyy-mm-dd'), to_date('2008-08-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5569, to_date('2008-09-01', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5589, to_date('2008-04-18', 'yyyy-mm-dd'), to_date('2008-04-30', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5589, to_date('2008-05-01', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5667, to_date('2008-05-01', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5828, to_date('2008-06-03', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(5867, to_date('2008-06-03', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(6167, to_date('2008-11-01', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(6207, to_date('2008-07-01', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(6228, to_date('2008-07-01', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\ninsert into t2(id, start_date, end_date)values(6267, to_date('2008-07-14', 'yyyy-mm-dd'), to_date('4712-12-31', 'yyyy-mm-dd'));\n\ncommit;\n"]], ['Grouping SQL results by continuous time intervals (oracle sql)'], 2], [(428384, 0), [["You can't delete directly from inserted (updates to the logical tables raise an error) but you can join back to the source table as seen below"], ["Also, you don't have to go the trigger route, you can also bind a check constraint to the return value of a function"]], [[" create table triggertest (id int null, val varchar(20))\nGo\ncreate trigger after  on [dbo].triggertest\nfor Update  \nas\nBegin\n\n    delete tt from triggertest tt inner join \n    inserted i on tt.id = i.id \n    where i.id = 9\n\nEnd\nGO\ninsert into triggertest values (1,'x')\ninsert into triggertest values (2,'y')\nUpdate triggertest set id = 9 where id = 2\nselect * from triggertest\n1, x\n"]], ['Using Triggers To Enforce Constraints'], 2], [(428384, 1), [["Also, you don't have to go the trigger route, you can also bind a check constraint to the return value of a function"], ['-10000']], [[' Alter table myData WITH NOCHECK add \nConstraint  CHK_VALID CHECK (dbo.fx_CheckValid(id, valid_from , invalid_from) = 1 );\n']], ['Using Triggers To Enforce Constraints'], 2], [(431825, 0), [["Here's a query to answer your question about retrieving the names of a student and staff member for a given incident:"], ["I'm assuming the  Incidents  table looks includes columns such as:"]], [[' SELECT ps.FirstName, ps.LastName, pf.FirstName, pf.LastName\nFROM Incidents i\n JOIN Students s USING (student_id)\n JOIN Persons ps ON (s.student_id = ps.person_id)\n JOIN Staff f USING (staff_id)\n JOIN Persons pf ON (f.staff_id = pf.person_id)\nWHERE i.incident_id = ?;\n']], ['How do I join multiple tables in SQL whose objects will be modeled using inheritance?'], 2], [(431825, 1), [["I'm assuming the  Incidents  table looks includes columns such as:"], ["Realistically, I'd expect some kind of many-to-many relationship between incidents and each of staff and students.  Otherwise, an incident can involve only one student and one staff member?"]], [[' CREATE TABLE Incidents (\n  incident_id SERIAL PRIMARY KEY,\n  student_id  INT NOT NULL,\n  staff_id    INT NOT NULL,\n  FOREIGN KEY (student_id) REFERENCES Students(student_id),\n  FOREIGN KEY (staff_id) REFERENCES Staff(staff_id)\n);\n']], ['How do I join multiple tables in SQL whose objects will be modeled using inheritance?'], 2], [(431913, 0), [['From the command prompt, start up  sqlcmd :'], ["Just replace  <server>  with the location of your SQL box and  <your file here>  with the name of your script.  Don't forget, if you're using a SQL instance the syntax is:"]], [[' sqlcmd -S <server> -i C:\\<your file here>.sql \n']], ['How do you import a large MS SQL .sql file?'], 3], [(431913, 1), [["Just replace  <server>  with the location of your SQL box and  <your file here>  with the name of your script.  Don't forget, if you're using a SQL instance the syntax is:"], ['Here is the list of all arguments you can pass sqlcmd:']], [[' sqlcmd -S <server>\\instance.\n']], ['How do you import a large MS SQL .sql file?'], 3], [(431913, 2), [['Here is the list of all arguments you can pass sqlcmd:'], ['-10000']], [[' Sqlcmd            [-U login id]          [-P password]\n  [-S server]            [-H hostname]          [-E trusted connection]\n  [-d use database name] [-l login timeout]     [-t query timeout] \n  [-h headers]           [-s colseparator]      [-w screen width]\n  [-a packetsize]        [-e echo input]        [-I Enable Quoted Identifiers]\n  [-c cmdend]            [-L[c] list servers[clean output]]\n  [-q "cmdline query"]   [-Q "cmdline query" and exit] \n  [-m errorlevel]        [-V severitylevel]     [-W remove trailing spaces]\n  [-u unicode output]    [-r[0|1] msgs to stderr]\n  [-i inputfile]         [-o outputfile]        [-z new password]\n  [-f  | i:[,o:]] [-Z new password and exit] \n  [-k[1|2] remove[replace] control characters]\n  [-y variable length type display width]\n  [-Y fixed length type display width]\n  [-p[1] print statistics[colon format]]\n  [-R use client regional setting]\n  [-b On error batch abort]\n  [-v var = "value"...]  [-A dedicated admin connection]\n  [-X[1] disable commands, startup script, environment variables [and exit]]\n  [-x disable variable substitution]\n  [-? show syntax summary] \n']], ['How do you import a large MS SQL .sql file?'], 3], [(433819, 0), [["Instead, the Table Module makes it easier for you to code logic that applies to multiple rows in the underlying database table.  If you create a profile for a given user, you'd specify all those properties, and the Table Module class would have the code to translate that into a series of  INSERT  statements, one row per property.  "], ["Likewise, querying a given user's profile would use the Table Module to map the multiple rows of the query result set to object members."]], [[" $table->setUserProfile( $userid, array('firstname'=>'Kevin', 'lastname'=>'Loney') );\n"]], ['Table Module vs. Domain Model'], 2], [(433819, 1), [["Likewise, querying a given user's profile would use the Table Module to map the multiple rows of the query result set to object members."], ['-10000']], [[' $hashArray = $table->getUserProfile( $userid );\n']], ['Table Module vs. Domain Model'], 2], [(434013, 0), [["There are wonderful ways of doing this with subqueries, but it appears that t this point in the tutorial you're only working with JOINs. The following is how you would do it with only JOINs:"], ["This will give us a table containing all of the movies Julie Andrews acted in. I'm aliasing the actor and casting tables as a1 and c1 respectively because now that we've found a list of movies, we'll have to turn and match that against the casting table again."]], [[" SELECT\n  movie.title,\n  a2.name\nFROM\n  actor AS a1\n  JOIN casting AS c1 ON (a1.id = c1.actorid)\n  JOIN movie ON (c1.movieid = movie.id)\n  JOIN casting AS c2 ON (movie.id = c2.movieid)\n  JOIN actor AS a2 ON (c2.actorid = a2.id)\nWHERE \n  a1.name = 'Julie Andrews'\n  AND c2.ord = 1\n"]], ['How do I list the first value from a three-way joined table query?'], 3], [(434013, 1), [["This will give us a table containing all of the movies Julie Andrews acted in. I'm aliasing the actor and casting tables as a1 and c1 respectively because now that we've found a list of movies, we'll have to turn and match that against the casting table again."], ['Now that we have a list of all movies she acted, we need to join that against the casting table (as c2) and that to the actor table (as a2) to get the list of leading roles for these films:']], [[" SELECT\n  movie.*\nFROM\n  actor a1\n  JOIN casting c1 ON (a1.id = c1.actorid)\n  JOIN movie ON (c1.movieid = movie.id)\nWHERE\n  a1.name = 'Julie Andrews'\n"]], ['How do I list the first value from a three-way joined table query?'], 3], [(434013, 2), [['Now that we have a list of all movies she acted, we need to join that against the casting table (as c2) and that to the actor table (as a2) to get the list of leading roles for these films:'], ["Edit: In aliasing, the 'AS' keyword is optional. I've inserted it above to help the query make more sense"]], [[" SELECT\n  movie.title,  -- we'll keep the movie title from our last query\n  a2.name       -- and select the actor's name (from a2, which is defined below)\nFROM\n  actor a1                                     -- \\\n  JOIN casting AS c1 ON (a1.id = c1.actorid)   --  )- no changes here\n  JOIN movie ON (c1.movieid = movie.id)        -- /\n  JOIN casting AS c2 ON (movie.id = c2.movieid)  -- join list of JA movies to the cast\n  JOIN actor AS a2 ON (c2.actorid = a2.id)  -- join cast of JA movies to the actors\nWHERE \n  a1.name = 'Julie Andrews'  -- no changes\n  AND c2.ord = 1    -- only select the star of the JA film\n"]], ['How do I list the first value from a three-way joined table query?'], 3], [(435418, 0), [['You have to separate in two clauses'], ['or you could refactor it a little bit']], [['  where col1 in (...) AND col2 in (...)\n']], ['"Where IN" with multiple columns (SQL Server)'], 2], [(435418, 1), [['or you could refactor it a little bit'], ['-10000']], [[' select * FROM (\n     SELECT NEWID() AS guid, UserID, RoleId, ClubId, 0 AS GroupRole FROM dbo.Portal_UserRoles \n     UNION \n     SELECT NEWID() AS guid, dbo.Portal_UserGroups.UserId, dbo.Portal_GroupRoles.RoleId, dbo.Portal_UserGroups.ClubId, dbo.Portal_GroupRoles.GroupId AS GroupRoles FROM dbo.Portal_GroupRoles INNER JOIN dbo.Portal_UserGroups ON dbo.Portal_GroupRoles.GroupId = dbo.Portal_UserGroups.GroupId) \n     AS derivedtbl_1, Portal_GroupRoles, Portal_ClubGroup\nwhere derivedtbl_1.RoleId = Portal_GroupRoles.RoleId\nand derivedtbl_1.ClubId = Portal_ClubGroups.ClubId\nand Portal_GroupRoles.GroupId = Portal_ClubGroups.GroupId\n']], ['"Where IN" with multiple columns (SQL Server)'], 2], [(435964, 0), [['A nested query can do the job.'], ['Update: Here is my data']], [[' SELECT author_last_name, dewey_number, NumOccurrences\nFROM author INNER JOIN\n     ( SELECT author_id, dewey_number,  COUNT(dewey_number) AS NumOccurrences\n        FROM book\n        GROUP BY author_id, dewey_number\n        HAVING ( COUNT(dewey_number) > 1 ) ) AS duplicates\nON author.id = duplicates.author_id\n']], ['How do I find duplicate entries in a database table?'], 3], [(435964, 1), [['Update: Here is my data'], ['And here is the result of the above query:']], [[' SELECT * FROM author;\n id | author_last_name \n----+------------------\n  1 | Fowler\n  2 | Knuth\n  3 | Lang\n\nSELECT * FROM book;\n id | author_id | dewey_number |         title          \n----+-----------+--------------+------------------------\n  1 |         1 |          600 | Refactoring\n  2 |         1 |          600 | Refactoring\n  3 |         1 |          600 | Analysis Patterns\n  4 |         2 |          600 | TAOCP vol. 1\n  5 |         2 |          600 | TAOCP vol. 1\n  6 |         2 |          600 | TAOCP vol. 2\n  7 |         3 |          500 | Algebra\n  8 |         3 |          500 | Undergraduate Analysis\n  9 |         1 |          600 | Refactoring\n 10 |         2 |          500 | Concrete Mathematics\n 11 |         2 |          500 | Concrete Mathematics\n 12 |         2 |          500 | Concrete Mathematics\n']], ['How do I find duplicate entries in a database table?'], 3], [(435964, 2), [['And here is the result of the above query:'], ['-10000']], [['  author_last_name | dewey_number | numoccurrences \n------------------+--------------+----------------\n Fowler           |          600 |              4\n Knuth            |          600 |              3\n Knuth            |          500 |              3\n Lang             |          500 |              2\n']], ['How do I find duplicate entries in a database table?'], 3], [(438547, 0), [['Assuming you meant >=100 rather than <= 100 as your example implies, and renaming columns DATE to THEDATE since DATE is a reserved word in Oracle:'], ['If the 100 means the current value of table1 then change that line to:']], [[' update table1 set thedate=\n( select max(thedate) from\n  ( select id, thedate,\n           sum(amount1) over (partition by id  order by thedate desc) cumsum\n    from table2\n  ) v\n  where v.cumsum >= 100\n  and v.id = table1.id\n)\n']], ['update a field based on subtotal from another table'], 2], [(438547, 1), [['If the 100 means the current value of table1 then change that line to:'], ['-10000']], [['   where v.cumsum >= table1.amount\n']], ['update a field based on subtotal from another table'], 2], [(439138, 0), [['This will get you the data you are looking for:'], ['This will create a view to show you the data as if it were a table:']], [[' select \n    account, bookdate, amount, \n    sum(amount) over (partition by account order by bookdate) running_total\nfrom t\n/\n']], ['Running total by grouped records in table'], 3], [(439138, 1), [['This will create a view to show you the data as if it were a table:'], ['Test data I used is:']], [[' create or replace view t2\nas\nselect \n    account, bookdate, amount, \n    sum(amount) over (partition by account order by bookdate) running_total \nfrom t\n/\n']], ['Running total by grouped records in table'], 3], [(439138, 2), [['Test data I used is:'], ['edit:']], [[" create table t(account number, bookdate date, amount number);\n\ninsert into t(account, bookdate, amount) values (1, to_date('20080101', 'yyyymmdd'), 100);\n\ninsert into t(account, bookdate, amount) values (1, to_date('20080102', 'yyyymmdd'), 101);\n\ninsert into t(account, bookdate, amount) values (1, to_date('20080103', 'yyyymmdd'), -200);\n\ninsert into t(account, bookdate, amount) values (2, to_date('20080102', 'yyyymmdd'), 200);\n\ncommit;\n"]], ['Running total by grouped records in table'], 3], [(439670, 0), [['Does mySQL support analytic functions?  Like:'], ['Alternatively:']], [[' SELECT foo.bar, baz.yoo, count(baz.yoo) over (partition by foo.bar) as yoo_count \nfrom foo, bar\nwhere foo.baz_id = baz.id and baz.id in (...)\n']], ['How can I mix COUNT() and non-COUNT() columns without losing information in the query?'], 2], [(439670, 1), [['Alternatively:'], ['-10000']], [[' SELECT foo.bar, baz.yoo, v.yoo_count \nfrom foo, bar, \n( select foo.baz_id, count(*) as yoo_count\n  from foo\n  group by foo.baz_id\n) as v\nwhere foo.baz_id = baz.id and baz.id in (...)\nand v.baz_id = foo.baz_id;\n']], ['How can I mix COUNT() and non-COUNT() columns without losing information in the query?'], 2], [(441880, 0), [["What are you trying to do? You're comparing varchars, there. Look at the output from these statements:"], ['That prints this:']], [[' print convert(varchar(10), getdate(), 101)\nprint convert(varchar(10), getdate(), 102)\n']], ['Equivalent? No, but why?'], 3], [(441880, 1), [['That prints this:'], ['Is there a reason you need to convert the dates to varchar? Why not compare them directly?']], [[' 01/14/2009\n2009.01.14\n']], ['Equivalent? No, but why?'], 3], [(441880, 2), [['Is there a reason you need to convert the dates to varchar? Why not compare them directly?'], ['-10000']], [[' @DueDate < getdate()\n']], ['Equivalent? No, but why?'], 3], [(442503, 0), [['The syntax to add a default like that would be'], ['Also, you might want to alter your function to handle when DOC_Order is null ']], [[' alter table DOC_Order \nadd constraint \ndf_DOC_Order \ndefault([dbo].[NEWDOC_Order]())\nfor DOC_Order\n']], ['Bind a column default value to a function in SQL 2005'], 2], [(442503, 1), [['Also, you might want to alter your function to handle when DOC_Order is null '], ['-10000']], [[' Create FUNCTION [dbo].[NEWDOC_Order] \n(\n)\nRETURNS int\nAS\nBEGIN\n\nRETURN (SELECT ISNULL(MAX(DOC_ORDER),0) + 1 FROM DOC_Documents)\n\nEND\n']], ['Bind a column default value to a function in SQL 2005'], 2], [(444251, 0), [['In a normalized relational database, such a situation is unacceptable. You should have a junction table that stores one row for each distinct ID of the FOO object and the ID of the Fruit. Existence of such a row means the fruit is in that list for the FOO.'], ['To add Apple fruit to the list of a specific FOO object with ID=5, you would:']], [[' CREATE TABLE FOO ( \n  id int primary key not null,\n  int1 int, \n  int2 int, \n  int3 int\n)\n\nCREATE TABLE Fruits (\n  id int primary key not null,\n  name varchar(30)\n)\n\nCREATE TABLE FOOFruits (\n  FruitID int references Fruits (ID),\n  FooID int references FOO(id),\n  constraint pk_FooFruits primary key (FruitID, FooID)\n)\n']], ['How to store a list in a db column'], 2], [(444251, 1), [['To add Apple fruit to the list of a specific FOO object with ID=5, you would:'], ['-10000']], [[" INSERT FOOFruits(FooID, FruitID)\nSELECT 5, ID FROM Fruits WHERE name = 'Apple'\n"]], ['How to store a list in a db column'], 2], [(444405, 0), [['You can use Substring(), according to the documentation it works with binary columns:'], ['If you really wanted to check for a null (as in your example)... you could do this:']], [[" SELECT *\nFROM Table\nWHERE Substring(column, index, length) = 'blah'\n"]], ['SQL: Get value at index in binary value'], 2], [(444405, 1), [['If you really wanted to check for a null (as in your example)... you could do this:'], ['-10000']], [[' SELECT *\nFROM table\nWHERE SUBSTRING(column, 3, 1) = CHAR(0)\n']], ['SQL: Get value at index in binary value'], 2], [(449140, 0), [['Like so:'], ['Apparently it needs to be SCOPE_IDENTITY() in order to function as expected with triggers.']], [[" DECLARE @customerid int;\nINSERT INTO customers(name) VALUES('Spencer');\nSET @customerid = @@IDENTITY;\n"]], ['Reference generated primary key in SQL script'], 2], [(449140, 1), [['Apparently it needs to be SCOPE_IDENTITY() in order to function as expected with triggers.'], ['-10000']], [[" DECLARE @customerid int;\nINSERT INTO customers(name) VALUES('Spencer');\nSET @customerid = SCOPE_IDENTITY();\n"]], ['Reference generated primary key in SQL script'], 2], [(450637, 0), [['-10000'], ['edit:  or, even better']], [[" select column_name from all_tab_columns where table_name = 'STUDENTS';\n"]], ["How to get column info from oracle table you don't own (without using describe)?"], 2], [(450637, 1), [['edit:  or, even better'], ['-10000']], [[" select owner, column_name from all_tab_columns where table_name = 'STUDENTS';\n"]], ["How to get column info from oracle table you don't own (without using describe)?"], 2], [(451006, 0), [['-10000'], ['By the way, this is equivalent to:']], [[' var query = db.Employees.ToList();\n']], ['How to Eager Load entire SQL table in LINQ?'], 2], [(451006, 1), [['By the way, this is equivalent to:'], ["There's no reason to force yourself to use query operators syntax when lambda syntax makes more sense and is shorter."]], [[' var query = (from employee in db.Employees select employee).ToList();\n']], ['How to Eager Load entire SQL table in LINQ?'], 2], [(451856, 0), [['Okay, I think after several tries and edits, this solution finally works:'], ['Test data:']], [[' SELECT e1.EntityID, t1.TargetID\nFROM Entities e1\n  JOIN Entities e2 ON (e1.EntityID = e2.EntityID)\n  CROSS JOIN Targets t1\n  LEFT OUTER JOIN Targets t2 ON (t1.TargetID = t2.TargetID\n    AND e2.AttributeName = t2.AttributeName\n    AND e2.AttributeValue = t2.AttributeValue)\nGROUP BY e1.EntityID, t1.TargetID\nHAVING COUNT(e2.AttributeValue) = COUNT(t2.AttributeValue);\n']], ['Querying based on a set of Named Attributes/Values'], 5], [(451856, 1), [['Test data:'], ['Test results:']], [[" INSERT INTO Entities VALUES \n -- exact same attributes, should match\n (1, 'Foo1', '123'),\n (1, 'Bar1', '123'),\n -- same attributes but different values, should not match\n (2, 'Foo2', '456'),\n (2, 'Bar2', '456'),\n -- more columns in Entities, should not match\n (3, 'Foo3', '789'),\n (3, 'Bar3', '789'),\n (3, 'Baz3', '789'),\n -- fewer columns in Entities, should match\n (4, 'Foo4', '012'),\n (4, 'Bar4', '012'),\n -- same as case 1, should match Target 1\n (5, 'Foo1', '123'),\n (5, 'Bar1', '123'),\n -- one attribute with different value, should not match\n (6, 'A', 'one'),\n (6, 'B', 'two');\n\nINSERT INTO Targets VALUES \n (1, 'Foo1', '123'),\n (1, 'Bar1', '123'),\n (2, 'Foo2', 'abc'),\n (2, 'Bar2', 'abc'),\n (3, 'Foo3', '789'),\n (3, 'Bar3', '789'),\n (4, 'Foo4', '012'),\n (4, 'Bar4', '012'),\n (4, 'Baz4', '012'),\n (6, 'A', 'one'),\n (6, 'B', 'twox');\n"]], ['Querying based on a set of Named Attributes/Values'], 5], [(451856, 2), [['Test results:'], ['To respond to your comment, here is a query with the tables reversed:']], [[' +----------+----------+\n| EntityID | TargetID |\n+----------+----------+\n|        1 |        1 | \n|        4 |        4 | \n|        5 |        1 | \n+----------+----------+\n']], ['Querying based on a set of Named Attributes/Values'], 5], [(451856, 3), [['To respond to your comment, here is a query with the tables reversed:'], ["And here's the output, given the same input data above."]], [[' SELECT e1.EntityID, t1.TargetID\nFROM Targets t1\n  JOIN Targets t2 ON (t1.TargetID = t2.TargetID)\n  CROSS JOIN Entities e1\n  LEFT OUTER JOIN Entities e2 ON (e1.EntityID = e2.EntityID\n    AND t2.AttributeName = e2.AttributeName\n    AND t2.AttributeValue = e2.AttributeValue)\nGROUP BY e1.EntityID, t1.TargetID\nHAVING COUNT(e2.AttributeValue) = COUNT(t2.AttributeValue);\n']], ['Querying based on a set of Named Attributes/Values'], 5], [(451856, 4), [["And here's the output, given the same input data above."], ['-10000']], [[' +----------+----------+\n| EntityID | TargetID |\n+----------+----------+\n|        1 |        1 |\n|        3 |        3 |\n|        5 |        1 |\n+----------+----------+\n']], ['Querying based on a set of Named Attributes/Values'], 5], [(452230, 0), [["As an example for 'Approved':"], ['Refactored to use  exists  and  not exists :']], [[' select \n    * \nfrom \n    A \nwhere\n    (select count(*) from B where B.parent_id = A.id and B.status in (1,6)) > 0\nand (select count(*) from B where B.parent_id = A.id and B.status not in (1,6)) = 0\n']], ['Trying to build an SQL statement for complex search scenario'], 3], [(452230, 1), [['Refactored to use  exists  and  not exists :'], ['If you have passed in a criteria, you can package it all up in one query like this, if it is more convenient:']], [[' select \n    * \nfrom \n    A \nwhere\n    exists (select * from B where B.parent_id = A.id and B.status in (1,6)) \nand not exists (select * from B where B.parent_id = A.id and B.status not in (1,6)) \n']], ['Trying to build an SQL statement for complex search scenario'], 3], [(452230, 2), [['If you have passed in a criteria, you can package it all up in one query like this, if it is more convenient:'], ['Note, I changed the Denied example to be values of 2 and 7, rather than 2 and 5, based on your sample data.']], [[" select \n    * \nfrom \n    A \nwhere     \n    (@Criteria = 'Approved'\nand (select count(*) from B where B.parent_id = A.id and B.status in (1,6)) > 0\nand (select count(*) from B where B.parent_id = A.id and B.status not in (1,6)) = 0\n    )\nor  (@Criteria = 'Denied'\nand (select count(*) from B where B.parent_id = A.id and B.status in (2,7)) > 0\n    )\nor  (@Criteria = 'Pending'\nand (select count(*) from B where B.parent_id = A.id and B.status not in (2,7)) = 0\nand (select count(*) from B where B.parent_id = A.id and B.status is null) > 0\n    )\n"]], ['Trying to build an SQL statement for complex search scenario'], 3], [(456751, 0), [["Here's a quick-and-dirty solution using the shell:"], ["EDIT : I forgot to explain the above! I don't know how familiar you are with shell scripting, but here goes:"]], [[' mysql -u your_user -D your_database_name -e "show tables" -s | \n  egrep "^Whatever_" | \n  xargs -I "@@" echo mysql -u your_user -D your_database_name -e "DROP TABLE @@"\n']], ['Drop MySQL databases matching some wildcard?'], 7], [(456751, 1), [["EDIT : I forgot to explain the above! I don't know how familiar you are with shell scripting, but here goes:"], ['prints out a list of all your tables, with the header "Tables_in_your_database_name". The output from that is piped (the | symbol means "piped", as in passed-on) through the next command:']], [[' mysql -u your_user -D your_database_name -e "show tables" -s\n']], ['Drop MySQL databases matching some wildcard?'], 7], [(456751, 2), [['prints out a list of all your tables, with the header "Tables_in_your_database_name". The output from that is piped (the | symbol means "piped", as in passed-on) through the next command:'], ['searches for any lines that begin (that ^ symbols means "beings with") the word "Whatever_" and only prints those. Finally, we pipe that list of "Whatever_*" tables through the command:']], [[' egrep "^Whatever_"\n']], ['Drop MySQL databases matching some wildcard?'], 7], [(456751, 3), [['searches for any lines that begin (that ^ symbols means "beings with") the word "Whatever_" and only prints those. Finally, we pipe that list of "Whatever_*" tables through the command:'], ['which takes each line in the list of table names, and inserts it instead of the "@@" in the command']], [[' xargs -I "@@" echo mysql -u your_user -D your_database_name -e "DROP TABLE @@"\n']], ['Drop MySQL databases matching some wildcard?'], 7], [(456751, 4), [['which takes each line in the list of table names, and inserts it instead of the "@@" in the command'], ['So if you had a bunch of tables named "Whatever_1", "Whatever_2", "Whatever_3", the generated commands would be:']], [[' echo mysql -u your_user -D your_database_name -e "DROP TABLE @@"\n']], ['Drop MySQL databases matching some wildcard?'], 7], [(456751, 5), [['So if you had a bunch of tables named "Whatever_1", "Whatever_2", "Whatever_3", the generated commands would be:'], ['Which would output the following:']], [[' echo mysql -u your_user -D your_database_name -e "DROP TABLE Whatever_1"\necho mysql -u your_user -D your_database_name -e "DROP TABLE Whatever_2"\necho mysql -u your_user -D your_database_name -e "DROP TABLE Whatever_3"\n']], ['Drop MySQL databases matching some wildcard?'], 7], [(456751, 6), [['Which would output the following:'], ['I hope that was enough detail, and that I\'m not just beating anyone over the head with too much information. Good luck, and be careful when using the "DROP TABLE" command!']], [[' mysql -u your_user -D your_database_name -e "DROP TABLE Whatever_1"\nmysql -u your_user -D your_database_name -e "DROP TABLE Whatever_2"\nmysql -u your_user -D your_database_name -e "DROP TABLE Whatever_3"\n']], ['Drop MySQL databases matching some wildcard?'], 7], [(458364, 0), [['Assuming that a student would pass if at least on of the grades is above the minimum needed, the appropriate query would be:'], ['If you really need the latest grade to be above the minimum:']], [[' SELECT \n  Student_ID\n, MAX(Grade) AS maxGrade\nFROM table_name\nGROUP BY Student_ID\nHAVING maxGrade > MINIMUM_GRADE_NEEDED\n']], ['Fetch data with single and fast SQL query'], 2], [(458364, 1), [['If you really need the latest grade to be above the minimum:'], ['-10000']], [[' SELECT \n  Student_ID\n, Grade\nFROM table_name\nWHERE ExamEntry IN ( \n    SELECT \n      MAX(ExamEntry) \n    FROM table_name \n    GROUP BY Student_ID\n)\nHAVING Grade > MINIMUM_GRADE_NEEDED\n']], ['Fetch data with single and fast SQL query'], 2], [(458725, 0), [['You can determine the size of all indexes on a table (and other things) like so: '], ['For a full breakdown you may:']], [[' EXEC sp_spaceused TableName;\n']], ['How do you determine the size of an index in SQL Server?'], 2], [(458725, 1), [['For a full breakdown you may:'], ['-10000']], [[" SELECT * \nFROM sys.dm_db_index_physical_stats(db_id(), object_id('TableName'), null, null, 'DETAILED');\n"]], ['How do you determine the size of an index in SQL Server?'], 2], [(459457, 0), [['To create a stored procedure the syntax is fairly simple:'], ['So for example:']], [[' CREATE PROCEDURE <owner>.<procedure name>\n\n     <Param> <datatype>\n\nAS\n\n     <Body>\n']], ['What is a stored procedure?'], 2], [(459457, 1), [['So for example:'], ["A benefit of stored procedures is that you can centralize data access logic into a single place that is then easy for DBA's to optimize. Stored procedures also have a security benefit in that you can grant execute rights to a stored procedure but the user will not need to have read/write permissions on the underlying tables. This is a good first step against SQL injection."]], [[' CREATE PROCEDURE Users_GetUserInfo\n\n    @login nvarchar(30)=null\n\nAS\n\n    SELECT * from [Users]\n    WHERE ISNULL(@login,login)=login\n']], ['What is a stored procedure?'], 2], [(461645, 0), [['this is easy with a number table, here is an example'], ['or if you want to use in']], [[" select number as foo\n from master..spt_values\nwhere type = 'p'\nand number between 5 and 7\n"]], ['Is it possible to SELECT multiple constants into multiple resultset rows in SQL?'], 2], [(461645, 1), [['or if you want to use in'], ['-10000']], [[" select number as foo\n from master..spt_values\nwhere type = 'p'\nand number in(5,6,7)\n"]], ['Is it possible to SELECT multiple constants into multiple resultset rows in SQL?'], 2], [(461863, 0), [['How about something cheeky like this:'], ['Alternatively, check out  mk-find  in  Maatkit , you should be able to do something like this:']], [[' mysqldump  --no-data mydb | mysql mydb\n']], ['shell script to truncate all MySql tables'], 2], [(461863, 1), [['Alternatively, check out  mk-find  in  Maatkit , you should be able to do something like this:'], ['Description of mk-find:']], [[' mk-find -exec "truncate %s"\n']], ['shell script to truncate all MySql tables'], 2], [(463377, 0), [["This isn't exactly what you're looking for, but I've done a lot of repetitive  UNPIVOT , and typically, I would code-gen this, with some kind of standardized naming and use CTEs heavily:"], ['You can codegen by inspecting a table or view and using something like this:']], [[' WITH P AS (\n    SELECT Some Data\n            ,[234] -- These are stats\n            ,[235]\n    FROM Whatever\n     )\n,FINAL_UNPIVOTED AS (\n    SELECT Some Data\n            ,[STAT]\n    FROM P\n    UNPIVOT (\n        STAT FOR BASE IN ([234], [235]) \n    ) AS unpvt\n    WHERE STAT <> 0\n)\nSELECT Some Data\n              ,CONVERT(int, FINAL_UNPIVOTED.[BASE]) AS [BASE]\n              ,FINAL_UNPIVOTED.[STAT]\nFROM FINAL_UNPIVOTED\n']], ['How to apply the DRY principle to SQL Statements that Pivot Months'], 3], [(463377, 1), [['You can codegen by inspecting a table or view and using something like this:'], ['And templatizing the code:']], [[" DECLARE @sql_unpivot AS varchar(MAX)\nSELECT @sql_unpivot = COALESCE(@sql_unpivot + ',', '') + COLUMN_NAME\nFROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_NAME = 'whatever'\n"]], ['How to apply the DRY principle to SQL Statements that Pivot Months'], 3], [(463377, 2), [['And templatizing the code:'], ['etc.']], [[" SET @template = '\n    WITH P AS (\n        SELECT Some Data\n                ,{@sql_unpivot}\n                  FROM Whatever\n         )\n    ,FINAL_UNPIVOTED AS (\n        SELECT Some Data\n                ,[STAT]\n        FROM P\n        UNPIVOT (\n            STAT FOR BASE IN ({@sql_unpivot}) \n        ) AS unpvt\n        WHERE STAT <> 0\n    )\n    SELECT Some Data\n                  ,CONVERT(int, FINAL_UNPIVOTED.[BASE]) AS [BASE]\n                  ,FINAL_UNPIVOTED.[STAT]\n    FROM FINAL_UNPIVOTED\n'\nSET @sql = REPLACE(@template, '{@sql_unpivot}', @sql_unpivot)\n"]], ['How to apply the DRY principle to SQL Statements that Pivot Months'], 3], [(467103, 0), [['here is what you need to do '], ['Run this to see what it does']], [[" declare @d datetime\nselect @d =  '2008-12-1 14:30:12'\n\nwhere tstamp >= dateadd(dd, datediff(dd, 0, @d)+0, 0)\nand tstamp < dateadd(dd, datediff(dd, 0, @d)+1, 0)\n"]], ['MS SQL Date Only Without Time'], 2], [(467103, 1), [['Run this to see what it does'], ['-10000']], [[' select dateadd(dd, datediff(dd, 0, getdate())+1, 0)\nselect dateadd(dd, datediff(dd, 0, getdate())+0, 0)\n']], ['MS SQL Date Only Without Time'], 2], [(469009, 0), [["there's no need to create another table, and max() will have problems acording to the auto_increment value of the table, do this:"], ['I declare the next_id variable because usually it will be used in some other way(*), but you could do straight new.field=(select ...)']], [[" CREATE TRIGGER trigger_name BEFORE INSERT ON tbl FOR EACH ROW\nBEGIN\n   DECLARE next_id INT;\n   SET next_id = (SELECT AUTO_INCREMENT FROM information_schema.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='tbl');\n   SET NEW.field=next_id;\nEND\n"]], ['Can you access the auto increment value in MySQL within one statement?'], 2], [(469009, 1), [['I declare the next_id variable because usually it will be used in some other way(*), but you could do straight new.field=(select ...)'], ['-10000']], [[" (*) To auto-name an image:\nSET NEW.field = CONCAT('image_', next_id, '.gif');\n(*) To create a hash:\nSET NEW.field = CONCAT( MD5( next_id ) , MD5( FLOOR( RAND( ) *10000000 ) ) );\n"]], ['Can you access the auto increment value in MySQL within one statement?'], 2], [(469806, 0), [['Typically, one does something like this:'], ['Or this (only match start of columns with the wildcards):']], [[" -- All these are NULL unless provided\nDECLARE @CompanyType AS varchar\nDECLARE @CompanyName AS varchar\nDECLARE @Town AS varchar\n\nSELECT *\nFROM TABLE_NAME\nWHERE (@CompanyType IS NULL OR COMPANY_TYPE_COLUMN LIKE '%' + @CompanyType  + '%')\n    AND (@CompanyName IS NULL OR COMPANY_NAME_COLUMN LIKE '%' + @CompanyName + '%')\n    AND (@Town IS NULL OR TOWN_COLUMN LIKE '%' + @Town + '%')\n"]], ['Writing SQL code: same functionality as Yell.com'], 2], [(469806, 1), [['Or this (only match start of columns with the wildcards):'], ['-10000']], [[" -- All these are NULL unless provided\nDECLARE @CompanyType AS varchar\nDECLARE @CompanyName AS varchar\nDECLARE @Town AS varchar\n\nSELECT *\nFROM TABLE_NAME\nWHERE (@CompanyType IS NULL OR COMPANY_TYPE_COLUMN LIKE @CompanyType  + '%')\n    AND (@CompanyName IS NULL OR COMPANY_NAME_COLUMN LIKE @CompanyName + '%')\n    AND (@Town IS NULL OR TOWN_COLUMN LIKE @Town + '%')\n"]], ['Writing SQL code: same functionality as Yell.com'], 2], [(470542, 0), [["To answer the original question, here's the query:"], ['(For earlier Oracle versions, please refer to other answers in this question)']], [[' SELECT * \nFROM   sometable\nORDER BY name\nOFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY;\n']], ['How do I limit the number of rows returned by an Oracle query after ordering?'], 8], [(470542, 1), [['(For earlier Oracle versions, please refer to other answers in this question)'], ['-10000']], [['Setup CREATE TABLE rownum_order_test (\n  val  NUMBER\n);\n\nINSERT ALL\n  INTO rownum_order_test\nSELECT level\nFROM   dual\nCONNECT BY level <= 10;\n\nCOMMIT;\n']], ['How do I limit the number of rows returned by an Oracle query after ordering?'], 8], [(470542, 2), [['-10000'], ['-10000']], [["What's in the table? SELECT val\nFROM   rownum_order_test\nORDER BY val;\n\n       VAL\n----------\n         1\n         1\n         2\n         2\n         3\n         3\n         4\n         4\n         5\n         5\n         6\n         6\n         7\n         7\n         8\n         8\n         9\n         9\n        10\n        10\n\n20 rows selected.\n"]], ['How do I limit the number of rows returned by an Oracle query after ordering?'], 8], [(470542, 3), [['-10000'], ['-10000']], [['Get first <code>N</code> rows SELECT val\nFROM   rownum_order_test\nORDER BY val DESC\nFETCH FIRST 5 ROWS ONLY;\n\n       VAL\n----------\n        10\n        10\n         9\n         9\n         8\n\n5 rows selected.\n']], ['How do I limit the number of rows returned by an Oracle query after ordering?'], 8], [(470542, 4), [['-10000'], ['-10000']], [['Get first <code>N</code> rows, if <code>N</code><sup>th</sup> row has ties, get all the tied rows SELECT val\nFROM   rownum_order_test\nORDER BY val DESC\nFETCH FIRST 5 ROWS WITH TIES;\n\n       VAL\n----------\n        10\n        10\n         9\n         9\n         8\n         8\n\n6 rows selected.\n']], ['How do I limit the number of rows returned by an Oracle query after ordering?'], 8], [(470542, 5), [['-10000'], ['-10000']], [['Top <code>x</code>% of rows SELECT val\nFROM   rownum_order_test\nORDER BY val\nFETCH FIRST 20 PERCENT ROWS ONLY;\n\n       VAL\n----------\n         1\n         1\n         2\n         2\n\n4 rows selected.\n']], ['How do I limit the number of rows returned by an Oracle query after ordering?'], 8], [(470542, 6), [['-10000'], ['-10000']], [['Using an offset, very useful for pagination SELECT val\nFROM   rownum_order_test\nORDER BY val\nOFFSET 4 ROWS FETCH NEXT 4 ROWS ONLY;\n\n       VAL\n----------\n         3\n         3\n         4\n         4\n\n4 rows selected.\n']], ['How do I limit the number of rows returned by an Oracle query after ordering?'], 8], [(470542, 7), [['-10000'], ['-10000']], [['You can combine offset with percentages SELECT val\nFROM   rownum_order_test\nORDER BY val\nOFFSET 4 ROWS FETCH NEXT 20 PERCENT ROWS ONLY;\n\n       VAL\n----------\n         3\n         3\n         4\n         4\n\n4 rows selected.\n']], ['How do I limit the number of rows returned by an Oracle query after ordering?'], 8], [(470992, 0), [['This is a second try at this answer, simplifying it to merely count the distinct clubs, not report a list of club names.'], ['You have a chain of relationships like the following:']], [[" SELECT p.surname, r.start_date, r.end_date, COUNT(DISTINCT c.id) AS counter\nFROM ejl_players p\n JOIN ejl_registration r ON (r.player_id = p.id)\n JOIN ejl_teams t ON (r.team_id = t.id)\n JOIN ejl_clubs c ON (t.club_id = c.id)\nWHERE r.season = '2008'\nGROUP BY p.id\nHAVING counter > 1;\n"]], ['How to count number of different items in SQL'], 3], [(470992, 1), [['You have a chain of relationships like the following:'], ['Such that club1 must not be the same as club2.']], [[' club1 <-- team1 <-- reg1 --> player <-- reg2 --> team2 --> club2\n']], ['How to count number of different items in SQL'], 3], [(470992, 2), [['Such that club1 must not be the same as club2.'], ['-10000']], [[" SELECT p.surname,\n  CONCAT_WS(',', GROUP_CONCAT(DISTINCT t1.team_name), \n    GROUP_CONCAT(DISTINCT t2.team_name)) AS teams,\n  CONCAT_WS(',', GROUP_CONCAT(DISTINCT c1.short_name), \n    GROUP_CONCAT(DISTINCT c2.short_name)) AS clubs\nFROM ejl_players p\n -- Find a club where this player is registered\n JOIN ejl_registration r1 ON (r1.player_id = p.id)\n JOIN ejl_teams t1 ON (r1.team_id = t1.id)\n JOIN ejl_clubs c1 ON (t1.club_id = c1.id)\n -- Now find another club where this player is registered in the same season\n JOIN ejl_registration r2 ON (r2.player_id = p.id AND r1.season = r2.season)\n JOIN ejl_teams t2 ON (r2.team_id = t2.id)\n JOIN ejl_clubs c2 ON (t2.club_id = c2.id)\n-- But the two clubs must not be the same (use < to prevent duplicates)\nWHERE c1.id < c2.id\nGROUP BY p.id;\n"]], ['How to count number of different items in SQL'], 3], [(471895, 0), [['The python module will look something like this:'], ['Your HTML should look something like this:']], [[" from google.appengine.ext.db import Key\nfrom google.appengine.api.datastore import Get, Put\n\ndef edit_item(request, db_id):\n\n    objKey = Key(str(db_id))\n\n    if request.method == 'POST':\n        objEntity = Get(objKey)\n        for k, v in request.POST.iteritems():\n             objEntity[k]=v\n        Put(objEntity)\n        return HttpResponseRedirect('/')\n\n    query = TestModel.get(objKey)\n    return render_to_response('edit.html', ({'modify_data': query,}))\n"]], ['Dynamically choose which properties to write to Appengine Datastore'], 2], [(471895, 1), [['Your HTML should look something like this:'], ['-10000']], [[' <form method="POST" action="." enctype="multipart/form-data">\n  Title: <input type="text" name="title" value="{{modify_data.field1}}"/>\n  Text: <input type="text" name="txt" value="{{modify_data.field2}}"/>\n\n  <input type="submit"/>\n</form>\n']], ['Dynamically choose which properties to write to Appengine Datastore'], 2], [(473218, 0), [["isn't this whole line"], ['the same as this']], [[" AND (@Zip = '' OR a.Zip = @Zip OR a.Zip LIKE @Zip + '%')\n"]], ['What are some best practices for optimizing multiple column LIKE SQL queries?'], 4], [(473218, 1), [['the same as this'], ['for sure ']], [[" AND (a.Zip LIKE @Zip + '%')\n"]], ['What are some best practices for optimizing multiple column LIKE SQL queries?'], 4], [(473218, 2), [['for sure '], ['it is the same as ']], [[" AND (a.Zip LIKE @Zip + '%')\n"]], ['What are some best practices for optimizing multiple column LIKE SQL queries?'], 4], [(473218, 3), [['it is the same as '], ['-10000']], [[" a.Zip = @Zip OR a.Zip LIKE @Zip + '%'\n"]], ['What are some best practices for optimizing multiple column LIKE SQL queries?'], 4], [(473610, 0), [["Some simple code (we'll worry about how to call this later):"], ['The parameters are fairly obvious: the range that holds the data, the company number for column 1, the quarter/year for column 2, the fixed code for column 7 and the file we want to output the results to']], [[' Sub ProduceStatePayrollReportFile(rngPayrollData As Range, strCompanyNo As String, _\n    strQuarterYear As String, strRecordCode As String, strOutputFile As String)\n']], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 1), [['The parameters are fairly obvious: the range that holds the data, the company number for column 1, the quarter/year for column 2, the fixed code for column 7 and the file we want to output the results to'], ["To output to a file in VBA we need to get a file handle so we need a variable to store that in. We'll build up each line of the report in the report line string and use the row index to work through the range"]], [[" ' Store the file handle for the output file\nDim fnOutPayrollReport As Integer\n' Store each line of the output file\nDim strPayrollReportLine As String\n' Use to work through each row in the range\nDim indexRow As Integer\n"]], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 2), [["To output to a file in VBA we need to get a file handle so we need a variable to store that in. We'll build up each line of the report in the report line string and use the row index to work through the range"], ['These sets of variables store the raw data from the worksheet and the cleaned data to be output to the file respectively. Naming them "raw" and "clean" makes it easier to spot errors where you accidentally output raw data instead of cleaned data. We will need to change the raw wages from a string value to a numeric value to help with the formatting']], [[" ' Store the raw SSN, last name, first name and wages data\nDim strRawSSN As String\nDim strRawLastName As String\nDim strRawFirstName As String\nDim strRawWages As String\nDim currencyRawWages As Currency\n\n' Store the corrected SSN, last name, first name and wages data\nDim strCleanSSN As String\nDim strCleanLastName As String\nDim strCleanFirstName As String\nDim strCleanWages As String\n"]], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 3), [['These sets of variables store the raw data from the worksheet and the cleaned data to be output to the file respectively. Naming them "raw" and "clean" makes it easier to spot errors where you accidentally output raw data instead of cleaned data. We will need to change the raw wages from a string value to a numeric value to help with the formatting'], ['FreeFile() gets the next available file handle and we use that to link to the file']], [[" ' Open up the output file\nfnOutPayrollReport = FreeFile()\nOpen strOutputFile For Output As #fnOutPayrollReport\n"]], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 4), [['FreeFile() gets the next available file handle and we use that to link to the file'], ['In our loop to work through each row, we start by clearing out the output string and then adding in the values for columns 1 and 2']], [[' \' Work through each row in the range\nFor indexRow = 1 To rngPayrollData.Rows.Count\n    \' Reset the output report line to be empty\n    strPayrollReportLine = ""\n    \' Add the company number to the report line (assumption: already correctly formatted)\n    strPayrollReportLine = strPayrollReportLine & strCompanyNo\n    \' Add in the quarter/year (assumption: already correctly formatted)\n    strPayrollReportLine = strPayrollReportLine & strQuarterYear\n']], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 5), [['In our loop to work through each row, we start by clearing out the output string and then adding in the values for columns 1 and 2'], ["The  .Cells(indexRow, 1)  part just means the left-most column of the range at the row specified by indexRow. If the ranges starts in column A (which does not have to be the case) then this just means A. We'll need to write the  cleanFromRawSSN  function ourselves later"]], [[" ' Get the raw SSN data, clean it and append to the report line\nstrRawSSN = rngPayrollData.Cells(indexRow, 1)\nstrCleanSSN = cleanFromRawSSN(strRawSSN)\nstrPayrollReportLine = strPayrollReportLine & strCleanSSN\n"]], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 6), [["The  .Cells(indexRow, 1)  part just means the left-most column of the range at the row specified by indexRow. If the ranges starts in column A (which does not have to be the case) then this just means A. We'll need to write the  cleanFromRawSSN  function ourselves later"], ['Left$(string, length)  truncates the string to the given length. The format picture  !@@@@@@@@@@  formats a string as exactly ten characters long, left justified (the ! signifies left justify) and padded with spaces']], [[' \' Get the raw last and first names, clean them and append them\nstrRawLastName = rngPayrollData.Cells(indexRow, 2)\nstrCleanLastName = Format(Left$(strRawLastName, 10), "!@@@@@@@@@@")\nstrPayrollReportLine = strPayrollReportLine & strCleanLastName\n\nstrRawFirstName = rngPayrollData.Cells(indexRow, 3)\nstrCleanFirstName = Format(Left$(strRawFirstName, 8), "!@@@@@@@@")\nstrPayrollReportLine = strPayrollReportLine & strCleanFirstName\n']], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 7), [['Left$(string, length)  truncates the string to the given length. The format picture  !@@@@@@@@@@  formats a string as exactly ten characters long, left justified (the ! signifies left justify) and padded with spaces'], ["We convert it to currency so that we can multiply by 100 to move the cents value to the left of the decimal point. This makes it much easier to use  Format  to generate the correct value. This will not produce correct output for wages >= $10 million but that's a limitation of the file format used for reporting. The  0  in the format picture pads with 0s surprisingly enough"]], [[' \' Read in the wages data, convert to numeric data, lose the decimal, clean it and append it\nstrRawWages = rngPayrollData.Cells(indexRow, 4)\ncurrencyRawWages = CCur(strRawWages)\ncurrencyRawWages = currencyRawWages * 100\nstrCleanWages = Format(currencyRawWages, "000000000")\nstrPayrollReportLine = strPayrollReportLine & strCleanWages\n']], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 8), [["We convert it to currency so that we can multiply by 100 to move the cents value to the left of the decimal point. This makes it much easier to use  Format  to generate the correct value. This will not produce correct output for wages >= $10 million but that's a limitation of the file format used for reporting. The  0  in the format picture pads with 0s surprisingly enough"], ['The  String(number, char)  function produces a Variant with a sequence of  number  of the specified  char .  CStr  turns the Variant into a string. The  Print #  statement outputs to the file without any additional formatting']], [[' \' Append the fixed code for column 7 and the spaces for column 8\nstrPayrollReportLine = strPayrollReportLine & strRecordCode\nstrPayrollReportLine = strPayrollReportLine & CStr(String(29, " "))\n\n\' Output the line to the file\nPrint #fnOutPayrollReport, strPayrollReportLine\n']], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 9), [['The  String(number, char)  function produces a Variant with a sequence of  number  of the specified  char .  CStr  turns the Variant into a string. The  Print #  statement outputs to the file without any additional formatting'], ['We still need two things: a cleanFromRawSSN function and a way to call the macro with the relevant data.']], [[" Next indexRow\n\n' Close the file\nClose #fnOutPayrollReport\n\nEnd Sub\n"]], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 10), [['We still need two things: a cleanFromRawSSN function and a way to call the macro with the relevant data.'], ['To call the macro:']], [[' Function cleanFromRawSSN(strRawSSN As String) As String\n\n\' Used to index the raw SSN so we can process it one character at a time\nDim indexRawChar As Integer\n\n\' Set the return string to be empty\ncleanFromRawSSN = ""\n\n\' Loop through the raw data and extract the correct characters\nFor indexRawChar = 1 To Len(strRawSSN)\n    \' Check for hyphen\n    If (Mid$(strRawSSN, indexRawChar, 1) = "-") Then\n        \' do nothing\n    \' Check for space\n    ElseIf (Mid$(strRawSSN, indexRawChar, 1) = " ") Then\n        \' do nothing\n    Else\n        \' Output character\n        cleanFromRawSSN = cleanFromRawSSN & Mid$(strRawSSN, indexRawChar, 1)\n    End If\nNext indexRawChar\n\n\' Check for correct length and return empty string if incorrect\nIf (Len(cleanFromRawSSN) <> 9) Then\n    cleanFromRawSSN = ""\nEnd If\n\nEnd Function\n']], ['Export Excel range/sheet to formatted text file'], 12], [(473610, 11), [['To call the macro:'], ['This is the simplest way to call it. The Range is whatever the user has selected on the active worksheet in the active workbook and the other values are hard-coded. The user should select the range they want to output to the file then go Tools > Macro > Run and choose  CallPayrollReport . For this to work, the macro would either need to be part of the workbook containg the data or in a different workbook which had been loaded before the user calls the macro.']], [[' Sub CallPayrollReport()\n\nProduceStatePayrollReportFile Application.Selection, "1234560007", "109", "01", "C:\\payroll109.txt"\n\nEnd Sub\n']], ['Export Excel range/sheet to formatted text file'], 12], [(473943, 0), [['Perhaps:'], ['Remember the three-valued logic for NULLs:']], [[" (ISNULL(Column2, '') LIKE ISNULL(@Param2, '') + '%')\n"]], ["SQL 'Or' operator. How does it work in the following scenario?"], 2], [(473943, 1), [['Remember the three-valued logic for NULLs:'], ["But I'm not sure your optimization is really helping."]], [[' TRUE and UNKNOWN: UNKNOWN\nTRUE or UNKNOWN: TRUE\n\nFALSE and UNKNOWN: FALSE\nFALSE or UNKNOWN: UNKNOWN\n']], ["SQL 'Or' operator. How does it work in the following scenario?"], 2], [(474119, 0), [['Create indexes:'], ['Populate the table with your entities as follows:']], [[' CREATE UNIQUE INDEX ix_a_b ON entity_entity(entity_id_a, entity_id_b);\nCREATE INDEX ix_b ON entity_entity(entity_id_b);\n']], ['What is the best way to represent a many-to-many relationship between records in a single SQL table?'], 3], [(474119, 1), [['Populate the table with your entities as follows:'], ['Then select:']], [[' INSERT\nINTO entity_entity (entity_id_a, entity_id_b)\nVALUES (LEAST(@id1, @id2), GREATEST(@id1, @id2))\n']], ['What is the best way to represent a many-to-many relationship between records in a single SQL table?'], 3], [(474119, 2), [['Then select:'], ['UNION ALL  here lets you use above indexes and avoid extra sorting for uniqueness.']], [[' SELECT entity_id_b\nFROM entity_entity\nWHERE entity_id_a = @id\nUNION ALL\nSELECT entity_id_a\nFROM entity_entity\nWHERE entity_id_b = @id\n']], ['What is the best way to represent a many-to-many relationship between records in a single SQL table?'], 3], [(477006, 0), [['-10000'], ['Justing thinking out loud, another way to write the self-join described by @cletus is:']], [[' SELECT userid\nFROM UserRole\nWHERE roleid IN (1, 2, 3)\nGROUP BY userid\nHAVING COUNT(DISTINCT roleid) = 3;\n']], ['Select values that meet different conditions on different rows?'], 2], [(477006, 1), [['Justing thinking out loud, another way to write the self-join described by @cletus is:'], ['This might be easier to read for you, and MySQL supports comparisons of tuples like that.  MySQL also knows how to utilize covering indexes intelligently for this query.  Just run it through  EXPLAIN  and see "Using index" in the notes for all three tables, which means it\'s reading the index and doesn\'t even have to touch the data rows.  ']], [[' SELECT t1.userid\nFROM userrole t1\nJOIN userrole t2 ON t1.userid = t2.userid\nJOIN userrole t3 ON t2.userid = t3.userid\nWHERE (t1.roleid, t2.roleid, t3.roleid) = (1, 2, 3);\n']], ['Select values that meet different conditions on different rows?'], 2], [(478410, 0), [['Try this:'], ['You may generate a calendar of arbitrary length in Oracle using following construction:']], [[' SELECT  rt.rangeId, aDate, CASE WHEN doUse = 1 THEN qty ELSE 0 END AS qty\nFROM    (\n    SELECT  *\n    FROM    (\n        SELECT  r.*, t.*, SUM(doUse) OVER (PARTITION BY rangeId ORDER BY aDate) AS span\n        FROM    (\n            SELECT  r.rangeId, startDate, MAX(day) AS dm\n            FROM    Range r, Days d\n            WHERE   d.rangeid = r.rangeid\n            GROUP BY\n                r.rangeId, startDate\n            ) r, Dates t\n        WHERE   t.adate >= startDate\n        ORDER BY\n            rangeId, t.adate\n        )\n    WHERE\n        span <= dm\n    ) rt, Days d\nWHERE   d.rangeId = rt.rangeID\n    AND d.day = GREATEST(rt.span, 1)\n']], ['Efficient join with a "correlated" subquery'], 2], [(478410, 1), [['You may generate a calendar of arbitrary length in Oracle using following construction:'], ['and keep only holidays in  Dates . A simple join will show you which  Dates  are holidays and which are not.']], [[' SELECT :startDate + ROWNUM\nFROM   dual\nCONNECT BY\n       1 = 1\nWHERE  rownum < :length\n']], ['Efficient join with a "correlated" subquery'], 2], [(480424, 0), [['You want to look at  Fey . I started using it a few months ago on the job, and while the implementation still has rough corners due to young age, the idea behind it is solid. F.ex., take a query lightly adapted from the manual:'], ['Now you could write a function like this:']], [[" my $user = $schema->table( 'user' );\nmy $q = Fey::SQL\n    ->new_select\n    ->select( $user->columns( 'user_id', 'username' ) )\n    ->from( $user );\n"]], ['How can I assemble SQL with object-oriented Perl?'], 3], [(480424, 1), [['Now you could write a function like this:'], ['This will add an inner join from  user  to  group  as well as a  WHERE  condition. And voila, you can write the following in the main program:']], [[" sub restrict_with_group {\n    my ( $q, $table, @group_id ) = @_;\n    my $group = $schema->table( 'group' )->alias;\n    $q\n        ->from( $table, $group )\n        ->where( $group->column( 'group_id' ), 'IN', @group_id );\n}\n"]], ['How can I assemble SQL with object-oriented Perl?'], 3], [(480424, 2), [['This will add an inner join from  user  to  group  as well as a  WHERE  condition. And voila, you can write the following in the main program:'], ['But this  restrict_with_group  function will work for  any  query that that has a foreign key to the  group  table!  To use it, you pass the query you want to restrict and the table to which you want to apply the restriction, as well as the group IDs to which you want to restrict it.']], [[' restrict_with_group( $q, $user, qw( 1 2 3 ) );\n']], ['How can I assemble SQL with object-oriented Perl?'], 3], [(480730, 0), [['For your first question:'], ['An alternate solution is to use a correlated subquery, as @Ray Booysen shows:']], [[' SELECT A.ID, A.Name, COUNT(ab.B_ID) AS bcount\nFROM A LEFT JOIN A_B_Link ab ON (ab.A_ID = A.ID)\nGROUP BY A.ID, A.Name;\n']], ['How do I get a count of items in one column that match items in another column?'], 3], [(480730, 1), [['An alternate solution is to use a correlated subquery, as @Ray Booysen shows:'], ["For your second question, you need something like MySQL's  GROUP_CONCAT()  aggregate function.  In MySQL, you can get a comma-separated list of  B.Name  per row of A like this:"]], [[' SELECT A.*, \n  (SELECT COUNT(*) FROM A_B_Link \n   WHERE A_B_Link.A_ID = A.A_ID) AS bcount\nFROM A;\n']], ['How do I get a count of items in one column that match items in another column?'], 3], [(480730, 2), [["For your second question, you need something like MySQL's  GROUP_CONCAT()  aggregate function.  In MySQL, you can get a comma-separated list of  B.Name  per row of A like this:"], ['There\'s no easy equivalent in Microsoft SQL Server.  Check here for another question on SO about this:\n" Simulating group_concat MySQL function in MS SQL Server 2005? "']], [[' SELECT A.*, GROUP_CONCAT(B.Name) AS bname_list\nFROM A \n  LEFT OUTER JOIN A_B_Link ab ON (A.ID = ab.A_ID)\n  LEFT OUTER JOIN B ON (ab.B_ID = B.ID)\nGROUP BY A.ID;\n']], ['How do I get a count of items in one column that match items in another column?'], 3], [(481136, 0), [['VB'], ['C#']], [[' Partial Public Class Customer\n\n    Public ReadOnly Property OrderCount As Integer\n        Get\n            Return Me.Orders.Count\n        End Get\n    End Property\n\nEnd Class\n']], ['Linq to SQL object child properties in GridView'], 2], [(481136, 1), [['C#'], ['-10000']], [[' public partial class Customer\n{\n\xa0 \xa0 \n\xa0 \xa0 public int OrderCount {\n\xa0 \xa0 \xa0 \xa0 get { return this.Orders.Count; }\n\xa0 \xa0 }\n}\n']], ['Linq to SQL object child properties in GridView'], 2], [(481455, 0), [["In your case, you'd call the proc as "], ["Here's another example that for the same scenario..."]], [[' exec mystoredproc @in_param_1, @in_param2_, @param1 OUTPUT, null\n']], ['Is it possible to ignore an output param of a stored procedure?'], 2], [(481455, 1), [["Here's another example that for the same scenario..."], ['-10000']], [[' create proc MyTempProc\n    (@one int,\n    @two int out,\n    @three int out)\nAS\nbegin\n\n    set @two = 2\n    set @three = 3\n\n    select @one as One\n\nend\ngo\n\ndeclare @p1 int,\n        @p2 int\n\nset     @p1 = 1\n\nexec MyTempProc @p1, @p2 out, null \n\nprint @p1\nprint @p2\n']], ['Is it possible to ignore an output param of a stored procedure?'], 2], [(481588, 0), [['-10000'], ["Here's another solution that does not use GROUP BY:"]], [[" SELECT b.*\nFROM boxes b JOIN thingsinboxes t ON (b.id = t.box_id)\nGROUP BY b.id\nHAVING COUNT(DISTINCT t.thing) = 1 AND SUM(t.thing = 'orange') > 0;\n"]], ['Filter a one-to-many query by requiring all of many meet criteria'], 2], [(481588, 1), [["Here's another solution that does not use GROUP BY:"], ['As always, before you make conclusions about the scalability or performance of a query,  you have to try it  with a realistic data set, and measure the performance.']], [[" SELECT DISTINCT b.*\nFROM boxes b\n  JOIN thingsinboxes t1 \n    ON (b.id = t1.box_id AND t1.thing = 'orange')\n  LEFT OUTER JOIN thingsinboxes t2 \n    ON (b.id = t2.box_id AND t2.thing != 'orange')\nWHERE t2.box_id IS NULL;\n"]], ['Filter a one-to-many query by requiring all of many meet criteria'], 2], [(481645, 0), [['If you start storing start and end dates, or create a view that includes the start and end dates (you can even create an indexed view) then you can heavily simplify your query. (provided you are certain there are no range overlaps) '], ['A technique along these lines will allow you to do this with a view. Note, if you need to index the view, it will have to be juggled around quite a bit ..']], [[' SELECT\n    Sale_ID,\n    Product_ID,\n    Sale_Date,\n    Price\nFROM Sales\nJOIN Prices on Sale_date > StartDate and Sale_Date <= EndDate  \n-- careful not to use between it includes both ends \n']], ['Optimizing Query With Subselect'], 2], [(481645, 1), [['A technique along these lines will allow you to do this with a view. Note, if you need to index the view, it will have to be juggled around quite a bit ..'], ['-10000']], [[" create table t (d datetime)\n\ninsert t values(getdate())\ninsert t values(getdate()+1)\ninsert t values(getdate()+2)\n\ngo\ncreate view myview \nas\nselect start = isnull(max(t2.d), '1975-1-1'), finish = t1.d  from t t1\nleft join t t2 on t1.d > t2.d\ngroup by t1.d\n\nselect * from myview \n\nstart                   finish\n----------------------- -----------------------\n1975-01-01 00:00:00.000 2009-01-27 11:12:57.383\n2009-01-27 11:12:57.383 2009-01-28 11:12:57.383\n2009-01-28 11:12:57.383 2009-01-29 11:12:57.383\n"]], ['Optimizing Query With Subselect'], 2], [(482636, 0), [['With the first URL style and your current db design, you can do this:'], ['As long as tags.slug is indexed, this should be very efficient,  hardly  any different from']], [[' select ...\nfrom   posts p\njoin   posts_to_tags pt on pt.post_id = p.post_id\njoin   tags t on t.id = pt.tag_id\nwhere  t.slug = [url slug value];\n']], ['Fetching records with slug instead of ID'], 2], [(482636, 1), [['As long as tags.slug is indexed, this should be very efficient,  hardly  any different from'], ['-10000']], [[' select ...\nfrom   posts p\njoin   posts_to_tags pt on pt.post_id = p.post_id\nwhere  pt.tag_id = [url tag ID];\n']], ['Fetching records with slug instead of ID'], 2], [(483874, 0), [['-10000'], ['EDIT: Alternative version. Same thing. (less obvious, therefore less desirable IMHO)']], [[' SELECT\n  p.PatientID,\n  v.VisitID,\n  v.HeartRate,\n  v.VisitDate\nFROM\n  Patient p\n  INNER JOIN Visit v ON p.PatientID = v.PatientID\nWHERE\n  v.VisitDate = (\n    SELECT MIN(VisitDate) \n    FROM Visit \n    WHERE PatientId = p.PatientId\n  )\n']], ['Query help for someone who has been using Linq-to-Sql too much lately'], 2], [(483874, 1), [['EDIT: Alternative version. Same thing. (less obvious, therefore less desirable IMHO)'], ['-10000']], [[' SELECT\n  p.PatientID,\n  v.VisitID,\n  v.HeartRate,\n  v.VisitDate\nFROM\n  Patient p\n  INNER JOIN Visit v ON p.PatientID = v.PatientID\n  INNER JOIN (\n    SELECT PatientID, MIN(VisitDate) VisitDate \n    FROM Visit \n    GROUP BY PatientID\n  ) f ON f.PatientID = p.PatientID AND f.VisitDate = v.VisitDate\n']], ['Query help for someone who has been using Linq-to-Sql too much lately'], 2], [(484165, 0), [['-10000'], ['In SQL Server 2000 (assuming id is your sort order and unique):']], [[" SELECT CASE WHEN ROWNUMBER < 4\n           THEN CHAR(65 + ROWNUMBER - 1)\n           ELSE ''\n       AS <WHATEVER>\n       ,X.id\n       ,X.descr\nFROM (\n    SELECT ROW_NUMBER() OVER (ORDER BY <WHATEVER>) AS ROWNUMBER\n        ,id\n        ,descr\n    FROM mytable\n) AS X\n"]], ['TSQL: Howto add a char to a select statement'], 2], [(484165, 1), [['In SQL Server 2000 (assuming id is your sort order and unique):'], ['-10000']], [[" SELECT CASE WHEN rownumbers.rownumber < 4\n           THEN CHAR(65 + rownumbers.rownumber - 1)\n           ELSE ''\n       AS <WHATEVER>\n       ,mytable.id\n       ,mytable.descr\nFROM (\n    SELECT l.id, COUNT(*) AS rownumber\n    FROM mytable AS l\n    LEFT JOIN mytable AS r\n        ON l.id >= r.id\n    GROUP BY l.id\n) AS rownumbers\nINNER JOIN mytable\n    ON mytable.id = rownumbers.id\n"]], ['TSQL: Howto add a char to a select statement'], 2], [(485298, 0), [['-10000'], ['or']], [[' var usr = db.Users.From(uid => uid.dsiglas == userID && \n            uid.codigousuario == passID).FirstOrDefault();\n\nif(usr != null)\n   //Authenticate user here\n']], ['Using LINQ2Sql for Validate Users'], 2], [(485298, 1), [['or'], ['-10000']], [[' var usr = (from u in db.Users\n          where u.dsiglas == userID && uid.codigousuario == passID\n          select u).FirstOrDefault()\n\nif(usr != null)\n    //Authenticate user here\n']], ['Using LINQ2Sql for Validate Users'], 2], [(485962, 0), [['This will work if you have linked servers to all of the SQL Servers you wish to query. As to the query to use, the system databases take up the first 4 database_id values. So you can run the following to get the user databases:'], ["Putting that together, you'd basically do the following for your proc:"]], [[" SELECT '[' + name + ']' \nFROM sys.databases\nWHERE database_id > 4\n"]], ['SQL Stored-Proc using parameter for server name?'], 2], [(485962, 1), [["Putting that together, you'd basically do the following for your proc:"], ['-10000']], [[" CREATE PROC GetUserDBs\n  @Server sysname\nAS\nBEGIN\n  DECLARE @SQL nvarchar(2000);\n  SET @SQL = 'SELECT ''['' + name + '']'' FROM [' + @Server + '].master.sys.databases WHERE database_id > 4';\n  EXECUTE sp_executesql @SQL;\nEND\nGO\n"]], ['SQL Stored-Proc using parameter for server name?'], 2], [(487770, 0), [['I retrieved 196288 rows with queries below.'], ['C# variant:']], [[' StringBuilder result = new StringBuilder();\nusing (SqlConnection conn = new SqlConnection(Settings.Default.Conn))\n{                \n    conn.Open();\n    string cmd = "select [state], case [state] when \'ca\' then \'california\' else [state] end from member";\n    SqlCommand command = new SqlCommand(cmd, conn);\n    using (SqlDataReader reader = command.ExecuteReader(CommandBehavior.CloseConnection))\n    {\n        while (reader.Read())\n        {                        \n            result.AppendLine(reader.GetString(1));\n        }\n    }\n}\n']], ['SQL CASE Statement Versus Conditional Statements In Programming Language'], 2], [(487770, 1), [['C# variant:'], ['}']], [[' StringBuilder result = new StringBuilder();\nusing (SqlConnection conn = new SqlConnection(Settings.Default.Conn))\n{\n\n    conn.Open();\n    string cmd = "select [state] from member";\n    SqlCommand command = new SqlCommand(cmd, conn);\n    using (SqlDataReader reader = command.ExecuteReader(CommandBehavior.CloseConnection))\n    {\n        while (reader.Read())\n        {\n            result.AppendLine(reader.GetString(0) == "ca" ? "california" : reader.GetString(0));\n        }\n    }\n']], ['SQL CASE Statement Versus Conditional Statements In Programming Language'], 2], [(489026, 0), [['I do it all the time:'], ["The only thing you can't do (which would be pretty useful) is reuse CTEs in separate  SELECT s:"]], [[' WITH stuff1 AS (\n    SELECT name\n           ,startdate\n           ,id\n    FROM employees\n    WHERE startdate > 0\n)\n,stuff2 AS (\n    SELECT name\n           ,startdate\n           ,id\n    FROM stuff1\n)\nSELECT *\nFROM stuff2\nWHERE id > 10\n']], ['Can I use WITH in TSQL twice to filter a result set like my example?'], 2], [(489026, 1), [["The only thing you can't do (which would be pretty useful) is reuse CTEs in separate  SELECT s:"], ['Say.  Instead you have to copy and paste the entire CTE chain again.']], [[' WITH stuff1 AS (\n    SELECT name\n           ,startdate\n           ,id\n    FROM employees\n    WHERE startdate > 0\n)\n,stuff2 AS (\n    SELECT name\n           ,startdate\n           ,id\n    FROM stuff1\n)\nSELECT *\nFROM stuff2\nWHERE id > 10\n;\nSELECT *\nFROM stuff2\nWHERE id < 10\n']], ['Can I use WITH in TSQL twice to filter a result set like my example?'], 2], [(491343, 0), [['In Oracle 10:'], ['Presence of an  INDEX , of course, impacts performance, but it depends very little on  REGEXP  being there:']], [[" CREATE TABLE test (tst_test VARCHAR2(200));\n\nCREATE INDEX ix_re_1 ON test(REGEXP_REPLACE(REGEXP_SUBSTR(tst_test, 'KEY1=[^,]*'), 'KEY1=([^,]*)', '\\1'))\n\nSELECT  *\nFROM    TEST\nWHERE   REGEXP_REPLACE(REGEXP_SUBSTR(TST_TEST, 'KEY1=[^,]*'), 'KEY1=([^,]*)', '\\1') = 'TEST'\n"]], ['Checking for the presence of text in a text column efficiently'], 2], [(491343, 1), [['Presence of an  INDEX , of course, impacts performance, but it depends very little on  REGEXP  being there:'], ['As you can see, on my not very fast machine ( Core2 4300 ,  1 Gb RAM ) you can insert  20000  records per second to an indexed field, and this rate almost does not depend on type of  INDEX  being used: plain or function based.']], [[" SQL> CREATE INDEX ix_test ON test (tst_test)\n  2  /\nIndex created\nExecuted in 0,016 seconds\n\nSQL> INSERT\n  2  INTO   test (tst_test)\n  3  SELECT 'KEY1=' || level || ';KEY2=' || (level + 10000)\n  4  FROM   dual\n  5  CONNECT BY\n  6     LEVEL <= 1000000\n  7  /\n1000000 rows inserted\nExecuted in 47,781 seconds\n\nSQL> TRUNCATE TABLE test\n  2  /\nTable truncated\nExecuted in 2,546 seconds\n\nSQL> DROP INDEX ix_test\n  2  /\nIndex dropped\nExecuted in 0 seconds\n\nSQL> CREATE INDEX ix_re_1 ON test(REGEXP_REPLACE(REGEXP_SUBSTR(tst_test, 'KEY1=[^,]*'), 'KEY1=([^,]*)', '\\1'))\n  2  /\nIndex created\nExecuted in 0,015 seconds\n\n SQL> INSERT\n      2  INTO   test (tst_test)\n      3  SELECT 'KEY1=' || level || ';KEY2=' || (level + 10000)\n      4  FROM   dual\n      5  CONNECT BY\n      6     LEVEL <= 1000000\n      7  /\n1000000 rows inserted\nExecuted in 53,375 seconds\n"]], ['Checking for the presence of text in a text column efficiently'], 2], [(492241, 0), [['-10000'], ['The solution you suggest is also a join:']], [[' SELECT t1.*\nFROM yourtable t1\n LEFT OUTER JOIN yourtable t2 \n ON (t1.name = t2.name AND t1.seqnum > t2.seqnum)\nWHERE t2.seqnum IS NULL;\n']], ['How do I Display one Row for the lowest number of a column?'], 2], [(492241, 1), [['The solution you suggest is also a join:'], ["However, this solution probably can't use indexes to evaluate the join, whereas the solution I gave can."]], [[' SELECT t1.*\nFROM yourtable t1\n  JOIN (SELECT name, MIN(seqnum) AS seqnum FROM yourtable GROUP BY name) t2\n  USING (name, seqnum);\n']], ['How do I Display one Row for the lowest number of a column?'], 2], [(492679, 0), [['For starters, something along the lines of:'], ['The only way to guarantee that the results will  always  be returned in  Row_Counter  order is to apply exactly the same ordering to both the  SELECT  and the  ROW_NUMBER() :']], [[' SELECT my_first_column, my_second_column,\n    ROW_NUMBER() OVER (ORDER BY my_order_column) AS Row_Counter\nFROM my_table\n']], ['SQLServer SQL query with a row counter'], 3], [(492679, 1), [['The only way to guarantee that the results will  always  be returned in  Row_Counter  order is to apply exactly the same ordering to both the  SELECT  and the  ROW_NUMBER() :'], ['The above pattern will always return results in the correct order and works well for simple queries, but what about an "arbitrarily complex" query with perhaps dozens of expressions in the  ORDER BY  clause? In those situations I prefer something like this instead:']], [[' SELECT my_first_column, my_second_column,\n    ROW_NUMBER() OVER (ORDER BY my_order_column) AS Row_Counter\nFROM my_table\nORDER BY my_order_column  -- exact copy of the ordering used for Row_Counter\n']], ['SQLServer SQL query with a row counter'], 3], [(492679, 2), [['The above pattern will always return results in the correct order and works well for simple queries, but what about an "arbitrarily complex" query with perhaps dozens of expressions in the  ORDER BY  clause? In those situations I prefer something like this instead:'], ["Using a nested query means that there's no need to duplicate the complicated  ORDER BY  clause, which means less clutter and easier maintenance. The outer  ORDER BY t.Row_Counter  also makes the intent of the query much clearer to your fellow developers."]], [[' SELECT t.*\nFROM\n(\n    SELECT my_first_column, my_second_column,\n        ROW_NUMBER() OVER (ORDER BY ...) AS Row_Counter  -- complex ordering\n    FROM my_table\n) AS t\nORDER BY t.Row_Counter\n']], ['SQLServer SQL query with a row counter'], 3], [(494974, 0), [['So assuming we can exclude the user table, it could be rewritten as:'], ['Now if you want to apply a limit, you could do it like this:']], [[' select * from expense, transaction where expense_id = transaction_expense_id\n']], ['LIMITing an SQL JOIN'], 3], [(494974, 1), [['Now if you want to apply a limit, you could do it like this:'], ['Edit: Given the MySQL limitation described in your comment below, maybe this will work:']], [[' select * from expense, transaction where expense_id = transaction_expense_id and \n  expense_id in (select expense_id from expense limit 1)\n']], ['LIMITing an SQL JOIN'], 3], [(494974, 2), [['Edit: Given the MySQL limitation described in your comment below, maybe this will work:'], ['Ben']], [[' select * from (select id from expense order by WHATEVER limit 1) as t1, transaction where expense_id=transaction_expense_id;\n']], ['LIMITing an SQL JOIN'], 3], [(497395, 0), [['Employees:'], ['PhoneNumbers:']], [[' eID, eName\n1, e1\n2, e2\n']], ['Resolve many to many relationship'], 4], [(497395, 1), [['PhoneNumbers:'], ['EmployeePhones:']], [[' pID, pNumber\n1, v1\n2, v2\n']], ['Resolve many to many relationship'], 4], [(497395, 2), [['EmployeePhones:'], ['then you inner join. if you need to find out what number(s) e1 can be reached at (t-sql):']], [[' eID, pID\n1, 1\n1, 2\n2, 2\n']], ['Resolve many to many relationship'], 4], [(497395, 3), [['then you inner join. if you need to find out what number(s) e1 can be reached at (t-sql):'], ['I believe this should work (testing it right now...)']], [[" SELECT E.eName, P.pNumber \nFROM   dbo.Employees E \nINNER JOIN dbo.EmployeePhones EP ON E.eID = EP.eID \nINNER JOIN dbo.PhoneNumbers P ON EP.pID = P.eID \nWHERE E.eName = 'e1'\n"]], ['Resolve many to many relationship'], 4], [(499308, 0), [['If you insist on using NVARCHAR instead of UNIQUEIDENTIFIER, you need to specify the size:     '], ['You can confirm this behavior by running this modified version of your working query:']], [[' @cartGUID nvarchar(36)\n']], ['Stored procedure delete query'], 2], [(499308, 1), [['You can confirm this behavior by running this modified version of your working query:'], ['I agree with @Marc Gravell, though, uniqueidentifier is the way to go here.']], [[" DECLARE @cart nvarchar, @sizedcart nvarchar(36)\nSET @cart      = '32390b5b-a35a-4e32-8393-67d5629192f0'\nSET @sizedcart = '32390b5b-a35a-4e32-8393-67d5629192f0'\n\n-- works\nDelete FROM k_ShoppingCart Where CartGUID = '32390b5b-a35a-4e32-8393-67d5629192f0'\n\n-- will not work\nDelete FROM k_ShoppingCart Where CartGUID = @cart\n\n-- should work\nDelete FROM k_ShoppingCart Where CartGUID = @sizedcart\n"]], ['Stored procedure delete query'], 2], [(501021, 0), [['With your datetimes stored this way, you simply use text comparisons such as '], ['or']], [[" SELECT * FROM tbl WHERE tbl.start = '2009-02-01 10:30:00'\n"]], ['Python + SQLite query to find entries that sit in a specified time slot'], 2], [(501021, 1), [['or'], ['-10000']], [[" SELECT * FROM tbl WHERE '2009-02-01 10:30:00' BETWEEN tbl.start AND tbl.end;\n"]], ['Python + SQLite query to find entries that sit in a specified time slot'], 2], [(503666, 0), [['-10000'], ['This gives you a list of permissions the current session has on the server']], [[" select * from fn_my_permissions(NULL, 'SERVER') \n"]], ['How can a SQL Sever TSQL script tell what security permissions it has?'], 2], [(503666, 1), [['This gives you a list of permissions the current session has on the server'], ['This gives you a list of permissions for the current session on the current database.']], [[" select * from fn_my_permissions(NULL, 'DATABASE')\n"]], ['How can a SQL Sever TSQL script tell what security permissions it has?'], 2], [(504198, 0), [["I assume you are on 2005 or better?  If so, look into the OUTPUT clause, you shouldn't need row-level triggers.  For example:"], ["You could also manage this by having a trigger on T1 that inserts into T2, then a trigger on T2 that inserts into T3.  This isn't going to be as efficient IMHO, and is not easier to manage, but I will submit that it is easier to follow (and may be your only option if you are stuck on 2000).  Both could be set-based and wouldn't need cursors or any other row-by-row processing method."]], [[' USE tempdb;\nGO\n\nCREATE TABLE t1 (foo int);\nCREATE TABLE t2 (id int IDENTITY, foo int);\nCREATE TABLE t3 (t2_id int);\nGO\n\nCREATE TRIGGER t1_insert ON t1\nFOR INSERT AS\nBEGIN   \n    DECLARE @new_rows TABLE(new_id INT, old_foo INT);\n\n    INSERT t2(foo)\n      OUTPUT inserted.id, inserted.foo \n      INTO @new_rows\n    SELECT foo\n    FROM inserted;\n\n    INSERT t3 SELECT new_id FROM @new_rows;\nEND\nGO\n\nINSERT t1(foo) SELECT 1 UNION ALL SELECT 5;\nSELECT * FROM t1;\nSELECT * FROM t2;\nSELECT * FROM t3;\nGO\n\nDROP TABLE t1,t2,t3;\n']], ['Alternative to row level triggers?'], 2], [(504198, 1), [["You could also manage this by having a trigger on T1 that inserts into T2, then a trigger on T2 that inserts into T3.  This isn't going to be as efficient IMHO, and is not easier to manage, but I will submit that it is easier to follow (and may be your only option if you are stuck on 2000).  Both could be set-based and wouldn't need cursors or any other row-by-row processing method."], ['(BTW, if you are going for identity values, use SCOPE_IDENTITY(), not @@IDENTITY.)']], [[' USE tempdb;\nGO\n\nCREATE TABLE t1 (foo int);\nCREATE TABLE t2 (id int IDENTITY, foo int);\nCREATE TABLE t3 (t2_id int);\nGO\n\nCREATE TRIGGER t1_insert ON t1\nFOR INSERT AS\nBEGIN       \n    INSERT t2(foo)\n    SELECT foo FROM inserted;\nEND\nGO\n\nCREATE TRIGGER t2_insert ON t2\nFOR INSERT AS\nBEGIN\n    INSERT t3(t2_id)\n    SELECT id FROM inserted;\nEND\nGO\n\nINSERT t1(foo) SELECT 1 UNION ALL SELECT 5;\nSELECT * FROM t1;\nSELECT * FROM t2;\nSELECT * FROM t3;\nGO\n\nDROP TABLE t1,t2,t3;\n']], ['Alternative to row level triggers?'], 2], [(505007, 0), [["Note :  xp_instance_regread  doesn't read the registry key you specify, but instead converts that key path into the appropriate path for the specific SQL Server instance you're running on. In other words:  xp_regread  fails where  xp_instance_regread  succeeds."], ['-10000']], [["SQL Server Installation Directory declare @rc int, @dir nvarchar(4000) \n\nexec @rc = master.dbo.xp_instance_regread\n      N'HKEY_LOCAL_MACHINE',\n      N'Software\\Microsoft\\MSSQLServer\\Setup',\n      N'SQLPath', \n      @dir output, 'no_output'\nselect @dir AS InstallationDirectory\n"]], ['SQL Server: How to SELECT the installation path?'], 2], [(505007, 1), [['-10000'], ['SQL Server 2000 Location Functions']], [["SQL Server Backup Directory declare @rc int, @dir nvarchar(4000) \n\nexec @rc = master.dbo.xp_instance_regread\n      N'HKEY_LOCAL_MACHINE',\n      N'Software\\Microsoft\\MSSQLServer\\MSSQLServer',\n      N'BackupDirectory', \n      @dir output, 'no_output'\nselect @dir AS BackupDirectory\n"]], ['SQL Server: How to SELECT the installation path?'], 2], [(505780, 0), [['There are a few ways of doing this.  Here is one.'], ['Results']], [[" CREATE TABLE MyTable\n(\n    MyDate datetime NOT NULL PRIMARY KEY,\n    Col2 decimal(14,4) NOT NULL,\n    Col3 decimal(14,4) NOT NULL,\n    Col4 decimal(14,4) NOT NULL,\n    Col5 decimal(14,4) NOT NULL\n)\nGO\n\nINSERT INTO MyTable\nSELECT '1/3/2000 12:00:00 AM', 5209.540000000, 5384.660000000, 5209.540000000, 5375.110000000 \n UNION ALL \nSELECT '1/4/2000 12:00:00 AM', 5533.980000000, 5533.980000000, 5376.430000000, 5491.010000000\n UNION ALL \nSELECT '1/5/2000 12:00:00 AM', 5265.090000000, 5464.350000000, 5184.480000000, 5357.000000000\n UNION ALL \nSELECT '1/6/2000 12:00:00 AM', 5424.210000000, 5489.860000000, 5391.330000000, 5421.530000000 \n UNION ALL \nSELECT '1/7/2000 12:00:00 AM', 5358.280000000, 5463.250000000, 5330.580000000, 5414.480000000 \n UNION ALL \nSELECT '1/10/2000 12:00:00 AM', 5617.590000000, 5668.280000000, 5459.970000000, 5518.390000000 \n UNION ALL \nSELECT '1/11/2000 12:00:00 AM', 5513.040000000, 5537.690000000, 5221.280000000, 5296.300000000 \n UNION ALL \nSELECT '1/12/2000 12:00:00 AM', 5267.850000000, 5494.300000000, 5267.850000000, 5491.200000000\nGO\n\nCREATE VIEW MyView \nAS\nSELECT T1.*,\n    CalculatedColumn = Col3 - \n      (SELECT Col3 FROM MyTable Q2\n       WHERE Q2.MyDate = (SELECT MAX(Q1.MyDate) \n                          FROM MyTable Q1 \n                          WHERE Q1.MyDate < T1.MyDate)\n    )\nFROM MyTable T1\nGO\n\nSELECT * FROM MyView\nGO\n"]], ['How to get the next record in SQL table'], 2], [(505780, 1), [['Results'], ['-10000']], [[' MyDate                  Col2      Col3      Col4      Col5      CalculatedColumn\n----------------------- --------- --------- --------- --------- ----------------\n2000-01-03 00:00:00.000 5209.5400 5384.6600 5209.5400 5375.1100 NULL\n2000-01-04 00:00:00.000 5533.9800 5533.9800 5376.4300 5491.0100 149.3200\n2000-01-05 00:00:00.000 5265.0900 5464.3500 5184.4800 5357.0000 -69.6300\n2000-01-06 00:00:00.000 5424.2100 5489.8600 5391.3300 5421.5300 25.5100\n2000-01-07 00:00:00.000 5358.2800 5463.2500 5330.5800 5414.4800 -26.6100\n2000-01-10 00:00:00.000 5617.5900 5668.2800 5459.9700 5518.3900 205.0300\n2000-01-11 00:00:00.000 5513.0400 5537.6900 5221.2800 5296.3000 -130.5900\n2000-01-12 00:00:00.000 5267.8500 5494.3000 5267.8500 5491.2000 -43.3900\n']], ['How to get the next record in SQL table'], 2], [(506827, 0), [['MS SQL SERVER has DATEADD functionallity that should help...'], ['Once you have the value, use DATEPART to get what day of the week it is, and subtract that from your answer...']], [[" DECLARE @date_string NCHAR(6)\nSELECT  @date_string = N'200852'\n\nSELECT DATEADD(\n           WEEK,\n           CAST(RIGHT(@date_string, 2) AS INT),\n           DATEADD(\n               YEAR,\n               CAST(LEFT(@date_string, 4) AS INT) - 1900,\n               0\n           )\n       )\n"]], ['How to convert a week (200851) into a date (2008-12-27)?'], 2], [(506827, 1), [['Once you have the value, use DATEPART to get what day of the week it is, and subtract that from your answer...'], ['This will bring the value to the start of the week, depending on what you have set DATEFIRST to.']], [[" DECLARE @new_date DATETIME\nSELECT  @new_date = '2008 Dec 30'\n\nSELECT DATEADD(DAY, 1-DATEPART(dw, @new_date), @new_date)\n"]], ['How to convert a week (200851) into a date (2008-12-27)?'], 2], [(508444, 0), [['Given a table filled with every minute in the year you are interested in  Minutes  and a table  Posts  with a  Time  column:'], ['To solve generating the minutes table, you can use a function like  ufn_GenerateIntegers. \nThen the function becomes ']], [[' select top 1 minutes.time, count (posts.time)\nfrom Minutes\n   left join posts on posts.time >= minutes.time AND posts.time < dateadd(hour, 1, Minutes.Time)\ngroup by minutes.time\norder by count (posts.time) desc\n']], ['How to find the one hour period with the most datapoints?'], 2], [(508444, 1), [['To solve generating the minutes table, you can use a function like  ufn_GenerateIntegers. \nThen the function becomes '], ['I just did a test run with about 5000 random posts and it took 16 seconds on my machine.  So, not trivial, but not rediculous for the occasional one-off query.  Fortunately, this is a data-point you can calculate one a day or even once a month and cache if you want to display the value frequently.']], [[" select top 5 minutes.time, count (posts.time)\nfrom (select dateadd(minute, IntValue, '2008-01-01') as Time from ufn_GenerateIntegers(525600)) Minutes\n   left join posts on posts.time >= minutes.time AND posts.time < dateadd(hour, 1, Minutes.Time)\ngroup by minutes.time\norder by count(posts.time) desc\n"]], ['How to find the one hour period with the most datapoints?'], 2], [(509504, 0), [['-10000'], ['Run that script in your SQL Server database to create the function ListToTable. Now, you can rewrite your query like so:']], [["   SET QUOTED_IDENTIFIER ON\n  GO\n  CREATE FUNCTION [dbo].[ListToTable] (\n  /*\n  FUNCTION ListToTable\n  Usage: select entry from listtotable('abc,def,ghi') order by entry desc\n  PURPOSE: Takes a comma-delimited list as a parameter and returns the values of that list into a table variable.\n  */\n  @mylist varchar(8000)\n  )\n  RETURNS @ListTable TABLE (\n  seqid int not null,\n  entry varchar(255) not null)\n\n  AS\n\n  BEGIN\n      DECLARE \n          @this varchar(255), \n          @rest varchar(8000),\n          @pos int,\n          @seqid int\n\n      SET @this = ' '\n      SET @seqid = 1\n      SET @rest = @mylist\n      SET @pos = PATINDEX('%,%', @rest)\n      WHILE (@pos > 0)\n      BEGIN\n          set @this=substring(@rest,1,@pos-1)\n          set @rest=substring(@rest,@pos+1,len(@rest)-@pos)\n          INSERT INTO @ListTable (seqid,entry)  VALUES (@seqid,@this)\n          SET @pos= PATINDEX('%,%', @rest)\n          SET @seqid=@seqid+1\n      END\n      set @this=@rest\n      INSERT INTO @ListTable (seqid,entry) VALUES (@seqid,@this)\n      RETURN \n  END\n"]], ['SQL Delete Where Not In'], 2], [(509504, 1), [['Run that script in your SQL Server database to create the function ListToTable. Now, you can rewrite your query like so:'], ['Where @includedids is a comma delimited list that you provide. I use this function all the time when working with lists. Keep in mind this function does not necessarily sanitize your inputs, it just looks for character data in a comma delimited list and puts each element into a record. Hope this helps.']], [[' @attributetypeid bigint, \n@productid bigint,\n@includedids varchar(MAX)  \n\n\nDELETE FROM reltable \nWHERE productid = @productid AND \nattributetypeid = @attributetypeid AND \nattributeid NOT IN (SELECT entry FROM ListToTable(@includedids));\n']], ['SQL Delete Where Not In'], 2], [(511381, 0), [['if all the date should have been in upper case just do an update'], ['but to answer your original question this query should give you the results that you expect:']], [[' update tbl\nset field1 = upper(field1)\n']], ['Differentiating between "AB" and "Ab" in a character Database Field'], 2], [(511381, 1), [['but to answer your original question this query should give you the results that you expect:'], ['Edit: just noticed that the suggestion to use COLLATE was also posted by  Ian']], [[' select * from tbl\nwhere field1 COLLATE Latin1_General_CS_AS <> upper(field1)\n']], ['Differentiating between "AB" and "Ab" in a character Database Field'], 2], [(511873, 0), [['-10000'], ['An alternative that would return a different result layout but is a little conceptually simpler:']], [[' select Title, SUM(CategoryID=1) as Cat1, SUM(categoryID=2) as Cat2,\nSUM(categoryID IS NULL) as UnknownCategory\nFROM entries\nWHERE Date BETWEEN @StartDate AND @EndDate\nGROUP BY Title\n']], ['Refactor subqueries using GROUP BY/HAVING?'], 2], [(511873, 1), [['An alternative that would return a different result layout but is a little conceptually simpler:'], ['-10000']], [[' select Title, CategoryID, count(*)\nfrom entries\nWHERE Date BETWEEN @StartDate AND @EndDate\ngroup by Title, CategoryID\n']], ['Refactor subqueries using GROUP BY/HAVING?'], 2], [(512105, 0), [["Although John Sansom's solution works, there's another way to do this, without having to use a potentially inefficient scalar valued UDF.\nIn the SSRS report, on the parameters tab of the query definition, set the parameter value to "], ['In your query, you can then reference the value like so:']], [[' =join(Parameters!<your param name>.Value,",")\n']], ['Passing multiple values for a single parameter in Reporting Services'], 2], [(512105, 1), [['In your query, you can then reference the value like so:'], ['-10000']], [[' where yourColumn in (@<your param name>)\n']], ['Passing multiple values for a single parameter in Reporting Services'], 2], [(512285, 0), [['Check this article out to do what you want: \n http://www.albahari.com/nutshell/predicatebuilder.aspx \nThis works like a dream.  I essentially cut and pasted their code and got this back (with my own data-scheme of course):'], ['Here is the code I ran for the proof of concept:']], [[' SELECT [t0].[Id], [t0].[DateCreated], [t0].[Name] ...\nFROM [dbo].[Companies] AS [t0]\nWHERE ([t0].[Name] LIKE @p0) OR ([t0].[Name] LIKE @p1)\n']], ['LINQ to SQL - select where text like string array'], 2], [(512285, 1), [['Here is the code I ran for the proof of concept:'], ["I'd suggest going to the site for the code and explanation."]], [[' using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Linq.Expressions;\n\nnamespace PredicateTest\n{\nclass Program\n{\n    static void Main(string[] args)\n    {\n        DataClasses1DataContext dataContext = new DataClasses1DataContext();\n\n        Program p = new Program();\n        Program.SearchCompanies("test", "test2");\n        var pr = from pi in  dataContext.Companies.Where(Program.SearchCompanies("test", "test2")) select pi;\n    }\n\n    DataClasses1DataContext dataContext = new DataClasses1DataContext();\n\n    public static Expression<Func<Company, bool>> SearchCompanies(\n                                                  params string[] keywords)\n    {\n        var predicate = PredicateBuilder.False<Company>();\n        foreach (string keyword in keywords)\n        {\n            string temp = keyword;\n            predicate = predicate.Or(p => p.Name.Contains(temp));\n        }\n        return predicate;\n    }\n\n}\n\npublic static class PredicateBuilder\n{\n    public static Expression<Func<T, bool>> True<T>() { return f => true; }\n    public static Expression<Func<T, bool>> False<T>() { return f => false; }\n\n    public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> expr1,\n                                                        Expression<Func<T, bool>> expr2)\n    {\n        var invokedExpr = Expression.Invoke(expr2, expr1.Parameters.Cast<Expression>());\n        return Expression.Lambda<Func<T, bool>>\n              (Expression.OrElse(expr1.Body, invokedExpr), expr1.Parameters);\n    }\n\n    public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> expr1,\n                                                         Expression<Func<T, bool>> expr2)\n    {\n        var invokedExpr = Expression.Invoke(expr2, expr1.Parameters.Cast<Expression>());\n        return Expression.Lambda<Func<T, bool>>\n              (Expression.AndAlso(expr1.Body, invokedExpr), expr1.Parameters);\n    }\n}\n}\n']], ['LINQ to SQL - select where text like string array'], 2], [(512310, 0), [['If you take the "I want a table for each measurement set" approach, you\'ll need to know the name of the table.  So your metadata table will look something like:'], ['And a table for each experiment, each looking the same:']], [[' Metadata\n----------\nexperimentName\nexperimentLocation\nexperimentDateTime\n...\nmeasurementTableName\n']], ['Database as fileformat'], 10], [(512310, 1), [['And a table for each experiment, each looking the same:'], ['Then in your program, you first need to fetch the metadata:']], [[' Measurement0001    Measurement0002    Measurement0003    Measurementt0004 \n--------------     --------------     --------------     -------------- \nmeasurementNum     measurementNum     measurementNum     measurementNum \nvoltage            voltage            voltage            voltage        \namps               amps               amps               amps           \n']], ['Database as fileformat'], 10], [(512310, 2), [['Then in your program, you first need to fetch the metadata:'], ['which will, amongst other things, return measurementTableName for the experiment of interest (say Measurement0002).  Then, your next query is:']], [[" select * from Metadata where experimentName='Johnson Controls 1'\n"]], ['Database as fileformat'], 10], [(512310, 3), [['which will, amongst other things, return measurementTableName for the experiment of interest (say Measurement0002).  Then, your next query is:'], ['Now, let\'s take the "store all the data in the measurement table" approach.  Your metadata table will look like:']], [[' select * from Measurement0002 order by measurementNum\n']], ['Database as fileformat'], 10], [(512310, 4), [['Now, let\'s take the "store all the data in the measurement table" approach.  Your metadata table will look like:'], ['And a table for all experiments.']], [[' Metadata\n----------\nexperimentName\nexperimentLocation\nexperimentDateTime\n...\nmeasurementSetID\n']], ['Database as fileformat'], 10], [(512310, 5), [['And a table for all experiments.'], ['Then, just as before, you first need to fetch the metadata:']], [[' Measurement\n--------------\nmeasurementSetID\nmeasurementNum\nvoltage            \namps               \n']], ['Database as fileformat'], 10], [(512310, 6), [['Then, just as before, you first need to fetch the metadata:'], ["which will, amongst other things, give you the measurementSetID which you will use to get only the the measurements from the desired set (let's say id=2).  Then, your next query is:"]], [[" select * from Metadata where experimentName='Johnson Controls 1'\n"]], ['Database as fileformat'], 10], [(512310, 7), [["which will, amongst other things, give you the measurementSetID which you will use to get only the the measurements from the desired set (let's say id=2).  Then, your next query is:"], ['The measurement-fetching queries are essentially the same, too:     ']], [[' select * from Measurement where measurementSetID=2 order by measurementNum\n']], ['Database as fileformat'], 10], [(512310, 8), [['The measurement-fetching queries are essentially the same, too:     '], ['The only variable is either the table name, or the measurementSetID:']], [[' select * from Measurement0002                      order by measurementNum\nselect * from Measurement where measurementSetID=2 order by measurementNum\n']], ['Database as fileformat'], 10], [(512310, 9), [['The only variable is either the table name, or the measurementSetID:'], ['The query result is almost the same, the second approach will just give you an extra column in your data (the measurementSetID) which you can ignore, because all returned rows will have the same set ID.']], [[' select * from <tablename>                                order by measurementNum\nselect * from Measurement where measurementSetID=<setID> order by measurementNum\n']], ['Database as fileformat'], 10], [(512350, 0), [["The most useful trick is to use Java's setObject method for binding parameters.  This, combined with Varargs, lets you write a utility method for executing SQL:"], ["I've also used Oracle's ALL_TABLES and ALL_TAB_COLUMNS tables to generate SELECT statements; another trick I've used is using the ResultSetMetadata to analyze the table:"]], [[' DBUtil.execSQL(Connection con, String sql, Object... params)\n']], ['What coding tricks have you used to avoid writing more sql?'], 2], [(512350, 1), [["I've also used Oracle's ALL_TABLES and ALL_TAB_COLUMNS tables to generate SELECT statements; another trick I've used is using the ResultSetMetadata to analyze the table:"], ["This makes it easy to generate certain kinds of statements; in this case we have an active table and an archive table and we are moving records from one to the other.  Without getting into a debate about using an archive table, the Java code I've written lets me modify the two tables without having to modify the archiving script."]], [[' ResultSet rs = DBUtil.getResultSet(con, "SELECT * FROM " + someTable);\nResultSetMetaData rsm = rs.getMetaData();\n\nboolean first = true;\nfor (int i = 1; i <= rsm.getColumnCount(); i++) {\n  String col = rsm.getColumnName(i).toUpperCase();\n  // do something with the column name\n}\n']], ['What coding tricks have you used to avoid writing more sql?'], 2], [(512909, 0), [['-10000'], ["I think it's not what you meant. Most probably it should look like that:"]], [[' WHERE w2.topage=w1.frompage\n']], ['Slow MySQL query. What should I index?'], 3], [(512909, 1), [["I think it's not what you meant. Most probably it should look like that:"], ['If you want to speed up ranking queries, you create indices like that:']], [[' INSERT INTO\n       wikiscore \nSELECT\n       linked.topage, COUNT(*) AS cnt\nFROM   wikilinks current, wikilinks linked\nWHERE  current.frompage=@current_page\n       AND linked.topage = current.topage\nGROUP BY\n       linked.topage\nON DUPLICATE KEY UPDATE\n       score = cnt;\n']], ['Slow MySQL query. What should I index?'], 3], [(512909, 2), [['If you want to speed up ranking queries, you create indices like that:'], ['-10000']], [[' ALTER TABLE wikilinks ADD CONSTRAINT pk_wikilinkes_fromto PRIMARY KEY (frompage, topage);\n\nCREATE INDEX ix_wikilinks_topage ON wikilinks (topage);\n\nALTER TABLE wikiscore ADD CONSTRAINT pk_wikiscore_pagename PRIMARY KEY (pagename);\n\nCREATE INDEX ix_wikiscore_score ON wikiscore (score);\n']], ['Slow MySQL query. What should I index?'], 3], [(514111, 0), [['I would have a table for widgets and one for widget attributes.  For example:'], ['Then, you would have another table which has what widgets have which attributes:']], [[' Widgets\n   - Id\n   - Name\n\nWidgetAttributes\n   - Id\n   - Name\n']], ['How to best represent items with variable # of attributes in a database?'], 2], [(514111, 1), [['Then, you would have another table which has what widgets have which attributes:'], ['This way, you can add attributes to widgets by modifying rows in the WidgetAttributeMap table, not by modifying the structure of your widget table.']], [[' WidgetAttributeMap\n  - Id\n  - WidgetId\n      (a value from the Id column in the Widget table)\n  - WidgetAttributeId\n      (a value from the Id column in the WidgetAttribute table)\n']], ['How to best represent items with variable # of attributes in a database?'], 2], [(515557, 0), [['A variant with less string handling'], ['Result:']], [[" SELECT\n  AbsenceDate,\n  CASE WHEN MONTH(AbsenceDate) <= 7 \n    THEN \n      CONVERT(VARCHAR(4), YEAR(AbsenceDate) - 1) + '/' + \n      CONVERT(VARCHAR(4), YEAR(AbsenceDate))\n    ELSE \n      CONVERT(VARCHAR(4), YEAR(AbsenceDate)) + '/' + \n      CONVERT(VARCHAR(4), YEAR(AbsenceDate) + 1)\n  END AcademicYear\nFROM\n  AbsenceTable\n"]], ['t-sql assign dates to academic year'], 2], [(515557, 1), [['Result:'], ['-10000']], [[" 2007-07-31 => '2006/2007' \n2007-10-02 => '2007/2008' \n2008-01-08 => '2007/2008'\n"]], ['t-sql assign dates to academic year'], 2], [(517557, 0), [["It's Oracle's synonym for  OUTER JOIN ."], ['gives same result as']], [[' SELECT *\nFROM a, b\nWHERE b.id(+) = a.id\n']], ['Meaning of (+) in SQL queries'], 2], [(517557, 1), [['gives same result as'], ['-10000']], [[' SELECT *\nFROM a\n     LEFT OUTER JOIN b\n     ON b.id = a.id\n']], ['Meaning of (+) in SQL queries'], 2], [(517956, 0), [['Wtih AdventureWorks  I created the following Proc'], ['I then added sp_test to a dbml and wrote the following program']], [[' CREATE PROC sp_test (@City  Nvarchar(60) , @AddressID int out  )\nAS\nSELECT TOP 10 * FROM Person.Address where City = @City\nselect  top 1  @AddressID  = AddressID FROM Person.Address where City = @City\n']], ['Is it possible to use output parameters with ExecuteQuery<T>?'], 3], [(517956, 1), [['I then added sp_test to a dbml and wrote the following program'], ['This results in the following ouput']], [[' using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Data.Linq;\n\nnamespace Test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n\n            DataClasses1DataContext dc = new DataClasses1DataContext("SomeSQLConnection);\n\n            int? AddressID = null;\n            ISingleResult<sp_testResult> result = dc.sp_test("Seattle", ref AddressID);\n\n            foreach (sp_testResult addr in result)\n            {\n                Console.WriteLine("{0} : {1}", addr.AddressID, addr.AddressLine1);\n            }\n            Console.WriteLine(AddressID);\n\n\n        }\n    }\n}\n']], ['Is it possible to use output parameters with ExecuteQuery<T>?'], 3], [(517956, 2), [['This results in the following ouput'], ["You'll notice that the input into the sp_test method is a  ref"]], [[' 23 : 6657 Sand Pointe Lane\n91 : 7166 Brock Lane\n92 : 7126 Ending Ct.\n93 : 4598 Manila Avenue\n94 : 5666 Hazelnut Lane\n95 : 1220 Bradford Way\n96 : 5375 Clearland Circle\n97 : 2639 Anchor Court\n98 : 502 Alexander Pl.\n99 : 5802 Ampersand Drive\n13079\n']], ['Is it possible to use output parameters with ExecuteQuery<T>?'], 3], [(518443, 0), [["Well, it's dependent on how the different search modes work, but generally I would say that a table with 3 columns would work:"], ["By doing this, you'll have a fair amount of flexibility for querying it later. You can figure out what the most popular searches for each type are:"]], [[' SearchType    SearchValue    Count\n']], ['How to design a database table structure for storing and retrieving search statistics?'], 3], [(518443, 1), [["By doing this, you'll have a fair amount of flexibility for querying it later. You can figure out what the most popular searches for each type are:"], ['You can figure out the most popular search types:']], [[" ... ORDER BY Count DESC WHERE SearchType = 'Some Search Type'\n"]], ['How to design a database table structure for storing and retrieving search statistics?'], 3], [(518443, 2), [['You can figure out the most popular search types:'], ['Etc.']], [[' ... GROUP BY SearchType ORDER BY SUM(Count) DESC\n']], ['How to design a database table structure for storing and retrieving search statistics?'], 3], [(519854, 0), [["so if we want the # of rows added in the last 12 hours, we'll do:"], ["in your proc, you've to store the result of this query into a variable and check if it's > 0, so:"]], [[' SELECT COUNT(*)\nFROM Table\nWHERE CreateDate >= DATEADD(hour, -12, GETDATE())\n']], ['SQL - how to check table for new data?'], 2], [(519854, 1), [["in your proc, you've to store the result of this query into a variable and check if it's > 0, so:"], ["and then you'll check the @amount variable if it's > 0. "]], [[' DECLARE @amount int\nSELECT @amount=COUNT(*)\nFROM Table\nWHERE CreateDate >= DATEADD(hour, -12, GETDATE())\n']], ['SQL - how to check table for new data?'], 2], [(521270, 0), [['I agreed with above, look into AND clauses'], ["However you shouldn't have to split the input sentences, you can use variable"]], [[' SELECT TITLE\nFROM MOVIES\nWHERE CONTAINS(TITLE,\'"hollywood*" AND "square*"\')\n']], ['Best way to implement a stored procedure with full text search'], 2], [(521270, 1), [["However you shouldn't have to split the input sentences, you can use variable"], ['by the way\nsearch for the exact term (contains)\nsearch for any term in the phrase (freetext)']], [[' SELECT TITLE\nFROM MOVIES\nWHERE CONTAINS(TITLE,@parameter)\n']], ['Best way to implement a stored procedure with full text search'], 2], [(521490, 0), [["If you are trying to do the comparison in PL/SQL, you can just test equality as Igor's solution does"], ['If you are trying to do this in SQL, thougyh, you need to use the DBMS_LOB.COMPARE function.  A LOB column in a table is really a LOB locator (i.e. pointer), so what you really care about is that the value pointed to by the LOB is comparable to the value pointed to by the LOB locator returned by the EMPTY_CLOB() function.']], [[" SQL> ed\nWrote file afiedt.buf\n\n  1  DECLARE\n  2     dummy  clob;\n  3  BEGIN\n  4       dummy := empty_clob();\n  5        IF dummy = empty_clob() THEN\n  6           dbms_output.put_line( 'Dummy is empty' );\n  7        ELSE\n  8           dbms_output.put_line( 'Dummy is not empty' );\n  9        END IF;\n 10* END;\nSQL> /\nDummy is empty\n\nPL/SQL procedure successfully completed.\n"]], ['How do I test if a column equals empty_clob() in Oracle?'], 2], [(521490, 1), [['If you are trying to do this in SQL, thougyh, you need to use the DBMS_LOB.COMPARE function.  A LOB column in a table is really a LOB locator (i.e. pointer), so what you really care about is that the value pointed to by the LOB is comparable to the value pointed to by the LOB locator returned by the EMPTY_CLOB() function.'], ['-10000']], [[" SQL> desc bar\n Name                                      Null?    Type\n ----------------------------------------- -------- ------------------------\n\n FOO                                                CLOB\n\nSQL> insert into bar values ('123');\n\n1 row created.\n\nSQL> insert into bar values( empty_clob() );\n\n1 row created.\n\nSQL> insert into bar values( empty_clob() );\n\n1 row created.\n\nSQL> ed\nWrote file afiedt.buf\n\n  1  select count(*)\n  2    from bar\n  3*  where dbms_lob.compare( foo, empty_clob() ) = 0\nSQL> /\n\n  COUNT(*)\n----------\n         2\n\nSQL> ed\nWrote file afiedt.buf\n\n  1  select count(*)\n  2    from bar\n  3*  where dbms_lob.compare( foo, empty_clob() ) != 0\nSQL> /\n\n  COUNT(*)\n----------\n         1\n"]], ['How do I test if a column equals empty_clob() in Oracle?'], 2], [(525702, 0), [['In mysql you can:'], ["However , this next approach is generic (but you need to have unique values in one of the columns of the  table , in this example I've used name but it could be any unique column)"]], [[' SELECT Row,Name,Age\nFROM (SELECT @row := @row + 1 AS Row, Name,Age FROM table1 ) \nAs derived1\n']], ['SQL query returning int column of relative order'], 2], [(525702, 1), [["However , this next approach is generic (but you need to have unique values in one of the columns of the  table , in this example I've used name but it could be any unique column)"], ['-10000']], [['    select rank=count(*), a1.name, a1.age\n   from table1 a1, table1 a2\n   where a1.name >= a2.name\n   group by a1.name , a1.age\n   order by rank\n']], ['SQL query returning int column of relative order'], 2], [(530508, 0), [['See how this works for you.  Uses generic SQL so it should be valid for MySql (untested) as well.'], ['SET @user_sort = 0']], [[' DECLARE @user_sort INTEGER\nSET @user_sort = 0\n\nSELECT position, name FROM \n(\n  SELECT I1.position, I1.name, COUNT(*) AS rownumber, (SELECT COUNT(*) FROM items) AS maxrows\n  FROM items I1, items I2\n  WHERE I2.position <= I1.position\n  GROUP BY I1.position, I1.name\n) Q1\nORDER BY \n  CASE WHEN maxrows - rownumber < (@user_sort % maxrows) THEN 1 ELSE 2 END, position\n']], ['Special order by on SQL query'], 5], [(530508, 1), [['SET @user_sort = 0'], ['SET @user_sort = 1']], [[' position    name\n1   first\n5   second\n8   third\n9   fourth\n15  fifth\n20  sixth\n']], ['Special order by on SQL query'], 5], [(530508, 2), [['SET @user_sort = 1'], ['SET @user_sort = 2']], [[' position    name\n20  sixth\n1   first\n5   second\n8   third\n9   fourth\n15  fifth\n']], ['Special order by on SQL query'], 5], [(530508, 3), [['SET @user_sort = 2'], ['SET @user_sort = 9']], [[' position    name\n15  fifth\n20  sixth\n1   first\n5   second\n8   third\n9   fourth\n']], ['Special order by on SQL query'], 5], [(530508, 4), [['SET @user_sort = 9'], ['-10000']], [[' 9   fourth\n15  fifth\n20  sixth\n1   first\n5   second\n8   third\n']], ['Special order by on SQL query'], 5], [(531035, 0), [['How about this?'], ['Additionally, this should also work:']], [[" INSERT OR IGNORE INTO EVENTTYPE (EventTypeName) VALUES 'ANI Received'\n"]], ['How to do IF NOT EXISTS in SQLite'], 2], [(531035, 1), [['Additionally, this should also work:'], ['-10000']], [[" INSERT INTO EVENTTYPE (EventTypeName)\nSELECT 'ANI Received'\nWHERE NOT EXISTS (SELECT 1 FROM EVENTTYPE WHERE EventTypeName = 'ANI Received');\n"]], ['How to do IF NOT EXISTS in SQLite'], 2], [(532037, 0), [['If you have a composit key FieldA, FieldB, FieldC and you '], ['or']], [[' select * from MyTable where FieldA = :a \n']], ['Does making a primary key in multiple columns generate indexes for all of them?'], 3], [(532037, 1), [['or'], ['If you have']], [[' select * from MyTable where FieldA = :a and FieldB = :b\n']], ['Does making a primary key in multiple columns generate indexes for all of them?'], 3], [(532037, 2), [['If you have'], ['Where you are using parts of the index, but not the full index, the index will be used less efficiently through an index skip scan, full index scan, or fast full index scan.']], [[' select * from MyTable where FieldB = :b and FieldC = :c\n']], ['Does making a primary key in multiple columns generate indexes for all of them?'], 3], [(533256, 0), [['This is a postgres built-in since a few versions so you no longer need to define your own, the name is array_agg().'], ['Note that no ORDER BY is specified, so the order of the result rows depends on the grouping method used (here,hash) ie, it is not defined. Example :']], [[' test=> select array_agg(n) from generate_series(1,10) n group by n%2;\n  array_agg   \n--------------\n {1,3,5,7,9}\n {2,4,6,8,10}\n']], ['Concatenate multiple rows in an array with SQL on PostgreSQL'], 2], [(533256, 1), [['Note that no ORDER BY is specified, so the order of the result rows depends on the grouping method used (here,hash) ie, it is not defined. Example :'], ["Now, I don't know why you get {10,2,4,6,8} and {9,7,3,1,5}, since generate_series() should send the rows in order."]], [[' test=> select n%2, array_agg(n) from generate_series(1,10) n group by (n%2);\n ?column? |  array_agg   \n----------+--------------\n        1 | {1,3,5,7,9}\n        0 | {2,4,6,8,10}\n\ntest=> select (n%2)::TEXT, array_agg(n) from generate_series(1,10) n group by (n%2)::TEXT;\n text |  array_agg   \n------+--------------\n 0    | {2,4,6,8,10}\n 1    | {1,3,5,7,9}\n']], ['Concatenate multiple rows in an array with SQL on PostgreSQL'], 2], [(533343, 0), [['to get the passed\nparameters you can use the .Params property'], ['Sorry forgot to include the SqlQueryText data structures']], [['     public static SqlQueryText GetFullQueryInfo(DataContext dataContext, IQueryable query)\n    {\n        DbCommand dbCommand = dataContext.GetCommand(query);\n\n        var result = new SqlQueryText();\n\n        result.Text = dbCommand.CommandText;\n        int nParams = dbCommand.Parameters.Count;\n        result.Params = new ParameterText[nParams];\n        for (int j = 0; j < nParams; j++)\n        {\n            var param = new ParameterText();\n            DbParameter pInfo = dbCommand.Parameters[j];\n            param.Name = pInfo.ParameterName;\n            param.SqlType = pInfo.DbType.ToString();\n            object paramValue = pInfo.Value;\n            if (paramValue == null)\n            {\n                param.Value = null;\n            }\n            else\n            {\n                param.Value = pInfo.Value.ToString();\n            }\n            result.Params[j] = param;\n        }\n        return result;\n    }\n']], ['Can I get the T-SQL query generated from a LinqDataSource?'], 2], [(533343, 1), [['Sorry forgot to include the SqlQueryText data structures'], ['-10000']], [[' public struct SqlQueryText\n{\n    public ParameterText[] Params;\n    public string Text;\n}\n\npublic struct ParameterText\n{\n    public string Name;\n    public string SqlType;\n    public string Value;\n}\n']], ['Can I get the T-SQL query generated from a LinqDataSource?'], 2], [(533376, 0), [["ROWNUM doesn't belong to any table, so your query should be:"], ['For example:']], [[' "select rownum from Dog as dog where ..."\n']], ['how to return rownum column value with HQL? (using oracle db)'], 2], [(533376, 1), [['For example:'], ['-10000']], [[' SQL> select emp.ename, rownum from emp;\n\nENAME          ROWNUM\n---------- ----------\nSMITH               1\nALLEN               2\nWARD                3\nJONES               4\nMARTIN              5\nBLAKE               6\nCLARK               7\nSCOTT               8\nKING                9\nTURNER             10\n']], ['how to return rownum column value with HQL? (using oracle db)'], 2], [(533856, 0), [['run this'], ['output']], [["     CREATE TABLE #MaxVal(id INT,VALUE varchar(10),SomeDate DATETIME)\n    INSERT #MaxVal VALUES(1,'a','2009-02-10 14:48:45.143')\n    INSERT #MaxVal VALUES(1,'b','2009-02-10 13:48:45.143')\n    INSERT #MaxVal VALUES(1,'c','2009-02-10 11:48:45.143')\n    INSERT #MaxVal VALUES(2,'d','2009-02-10 11:48:45.143')\n    INSERT #MaxVal VALUES(2,'e','2009-02-10 12:48:45.143')\n    INSERT #MaxVal VALUES(2,'f','2009-02-10 13:48:45.143')\n    INSERT #MaxVal VALUES(3,'g','2009-02-10 11:48:45.143')\n    INSERT #MaxVal VALUES(3,'h','2009-02-10 14:48:45.143')\n\n\n\n\nSELECT t.* FROM(\n    SELECT id,MAX(SomeDate) AS MaxValue\n    FROM #MaxVal\n    WHERE SomeDate >='2009-02-10'\n        AND SomeDate < '2009-02-11'\n    GROUP BY id) x\n    JOIN #MaxVal t ON x.id =t.id\n    AND x.MaxValue =t.SomeDate\n"]], ['How to return the latest row written for the day?'], 2], [(533856, 1), [['output'], ['-10000']], [[' id  VALUE   SomeDate\n3   h   2009-02-10 14:48:45.143\n2   f   2009-02-10 13:48:45.143\n1   a   2009-02-10 14:48:45.143\n']], ['How to return the latest row written for the day?'], 2], [(534217, 0), [['I suspect what you want is to use an analytic function (RANK,  DENSE_RANK , or  ROW_NUMBER ), i.e.'], ['If you want to do this solely with ROWNUM,']], [[' SELECT rnk\n  FROM (select dog.id as dogId,\n               ROW_NUMBER() OVER( ORDER BY dog.codename ASC ) rnk\n          from CANINES dog )\n WHERE dogId = 206\n']], ['SQL to return the rownum of a specific row? (using Oracle db)'], 2], [(534217, 1), [['If you want to do this solely with ROWNUM,'], ['-10000']], [[' SELECT rn\n  FROM (\n        SELECT dogId, rownum rn\n          FROM (select dog.id as dogId\n                  from CANINES dog \n                 order by dog.codename ASC) inner\n       ) middle\n WHERE dogId = 206\n']], ['SQL to return the rownum of a specific row? (using Oracle db)'], 2], [(534240, 0), [['For SQL 2005 and up'], ['for 2000 you need to do something like this']], [[" SELECT ROW_NUMBER() OVER( ORDER BY SomeColumn ) AS 'rownumber',*\n    FROM YourTable\n"]], ['MSSQL Select statement with incremental integer column... not from a table'], 2], [(534240, 1), [['for 2000 you need to do something like this'], ['see also here   Row Number']], [[' SELECT IDENTITY(INT, 1,1) AS Rank ,VALUE\nINTO #Ranks FROM YourTable WHERE 1=0\n\nINSERT INTO #Ranks\nSELECT SomeColumn  FROM YourTable\nORDER BY SomeColumn \n\nSELECT * FROM #Ranks\nOrder By Ranks\n']], ['MSSQL Select statement with incremental integer column... not from a table'], 2], [(537574, 0), [['Here is one way to do this\nsql 2000 and up version'], ['SQL 2005 and up version']], [[' select t1.* from(\nselect name,max(B) as MaxB\nfrom temp\ngroup by name) t2 \njoin temp t1 on t1.a = t2.MaxB\nand t1.name = t2.name\n']], ['How to select distinct elements when they appear repeated in a table? (T-SQL)'], 2], [(537574, 1), [['SQL 2005 and up version'], ['-10000']], [[' select name, a, b\nfrom (\nselect m.*,\nrow_number() over (\npartition by name\norder by B desc) as rn\nfrom temp m\n) m2\nwhere m2.rn = 1;\n']], ['How to select distinct elements when they appear repeated in a table? (T-SQL)'], 2], [(539029, 0), [["The schema you've posted has no actual information in the samplepoint table, so it'd actually just be information from two tables. Essentially I'm guessing you simply want to join the ‘oillabid’ and ‘samplepointid’ values from ‘oildataset’ into each row of ‘oildatasetstatus’?"], ["I'm guessing you mean you want your query to have different severities, rather than actually UPDATEing your stored ‘oildatasetstatus’ table? If so, you can use the CASE operator:"]], [[' SELECT *\nFROM oildatasetstatus\nJOIN oildataset ON oildataset.oildatasetid=oildatasetstatus.oildatasetid\n']], ['SQL Statement to Pull a List Using Data from Multiple Tables'], 2], [(539029, 1), [["I'm guessing you mean you want your query to have different severities, rather than actually UPDATEing your stored ‘oildatasetstatus’ table? If so, you can use the CASE operator:"], ['-10000']], [[' SELECT\n    oildataset.oildatasetid, oildataset.oillabid, oildataset.samplepointid,\n    CASE oildatasetstatus.oildatasetstatusid\n        WHEN 5 THEN 16\n        WHEN 6 THEN 17\n        WHEN 7 THEN 18\n        WHEN 8 THEN 18\n        WHEN 9 THEN 18\n        WHEN 10 THEN 19\n        WHEN 11 THEN 20\n    END AS newstatus\nFROM oildatasetstatus\nJOIN oildataset ON oildataset.oildatasetid=oildatasetstatus.oildatasetid\n']], ['SQL Statement to Pull a List Using Data from Multiple Tables'], 2], [(539942, 0), [['-10000'], ['Or am I mistaken?']], [[" SELECT SUBSTRING(colDate,0,8) as 'date' \nFROM someTable\n"]], ['Updating multiple rows with a value calculated from another column'], 2], [(539942, 1), [['Or am I mistaken?'], ['Would likely work too. Untested.']], [[' UPDATE someTable\nSET newDateField = SUBSTRING(colDate,0,8)\n']], ['Updating multiple rows with a value calculated from another column'], 2], [(540314, 0), [['Note2: Some queries like this take a while to optimise, as there are many options for the optimiser to evaluate.  It is therefore often worth compiling all the different options in to stored procedures and comparing the execution of those stored procedures.  This ensures your compare actually Query Time and not different Compile Times.'], ['']], [[' SELECT\n   [tree].productID\nFROM\n   products_tree AS [tree]\nWHERE\n   [tree].productID IN (1040,1050,1168)\n   AND NOT EXISTS (SELECT * FROM products_tree WHERE productID = [tree].productID AND categoryID NOT IN (1040,1050,1168)) \nGROUP BY\n   [tree].productID\n']], ['SQL: Select records belonging to excluded category that ONLY belong to excluded category'], 3], [(540314, 1), [[''], ['']], [[' SELECT\n   [tree].productID\nFROM\n   products_tree AS [tree]\nLEFT OUTER JOIN\n   (\n      SELECT\n         productID\n      FROM\n         product_tree\n      WHERE\n         productID NOT IN (1040,1050,1168)\n      GROUP BY\n         productID\n    )\n    AS [ok_products]\n       ON [ok_products].productID = [tree].productID\nWHERE\n   [tree].productID IN (1040,1050,1168)\n   AND [ok_products].productID IS NULL \nGROUP BY\n   [tree].productID\n']], ['SQL: Select records belonging to excluded category that ONLY belong to excluded category'], 3], [(540314, 2), [[''], ['There are others, and variations of each, but this should give you a very good start.  But I really would stress the use of GROUP BY and the consideration to INDEXES :)']], [[' SELECT\n   [tree].productID\nFROM\n   products_tree AS [tree]\nGROUP BY\n   [tree].productID\nHAVING\n       MAX(CASE WHEN [tree].productID     IN (1040,1050,1168) THEN 1 ELSE 0 END) = 1\n   AND MAX(CASE WHEN [tree].productID NOT IN (1040,1050,1168) THEN 1 ELSE 0 END) = 0\n']], ['SQL: Select records belonging to excluded category that ONLY belong to excluded category'], 3], [(542419, 0), [['Sounds like you want:'], ['Alternatively, assuming there is a foreign key relationship between the tables and that consumer_items has a primary key, this should work:']], [[" UPDATE consumer_items ci\nSET    new_item_code = (SELECT 'string' || item.upc_code\n                        FROM   item\n                        WHERE  item.item_code = ci.item_code\n                       )\nWHERE  ci.item_code IN ('a','b','c');\n"]], ['UPDATE using two tables, Concatenation'], 2], [(542419, 1), [['Alternatively, assuming there is a foreign key relationship between the tables and that consumer_items has a primary key, this should work:'], ['EDIT: Added WHERE clauses']], [[" UPDATE (SELECT ci.id, ci.new_item_code, item.upc_code\n        FROM   consumer_items ci\n               JOIN item ON item.item_code = ci.item_code\n        WHERE  ci.item_code IN ('a','b','c')\n       ) v\nSET v.new_item_code = 'string' || v.upc_code\n"]], ['UPDATE using two tables, Concatenation'], 2], [(542705, 0), [["You have two choices here.  The first is to have two result sets which will set 'Test1' or 'Test2' based on the condition in the  WHERE  clause, and then  UNION  them together:"], ["The other solution would be to select from the table once, and set 'Test1' or 'Test2' based on the conditions in TABLE:"]], [[" select \n    'Test1', * \nfrom \n    TABLE \nWhere \n    CCC='D' AND DDD='X' AND exists(select ...)\nUNION\nselect \n    'Test2', * \nfrom \n    TABLE\nWhere\n    CCC<>'D' AND DDD='X' AND exists(select ...)\n"]], ['How do I combine 2 select statements into one?'], 2], [(542705, 1), [["The other solution would be to select from the table once, and set 'Test1' or 'Test2' based on the conditions in TABLE:"], ['The catch here being that you will have to duplicate the filter conditions in the  CASE  statement and the  WHERE  statement.']], [[" select \n    case \n        when CCC='D' AND DDD='X' AND exists(select ...) then 'Test1'\n        when CCC<>'D' AND DDD='X' AND exists(select ...) then 'Test2'\n    end,\n    * \nfrom \n    TABLE \nWhere \n    (CCC='D' AND DDD='X' AND exists(select ...)) or\n    (CCC<>'D' AND DDD='X' AND exists(select ...))\n"]], ['How do I combine 2 select statements into one?'], 2], [(544094, 0), [["Here's a typical way to do this query without using the subquery method you showed.  This may satisfy @Godeke's request to see a join-based solution."], ["Here's another variation on the subquery solution:"]], [[' SELECT * \nFROM movies m\n LEFT OUTER JOIN seen s\n ON (m.id = s.movie_id AND s.user_id = 123)\nWHERE s.movie_id IS NULL;\n']], ["MySQL: Finding rows that don't take part in a relationship"], 2], [(544094, 1), [["Here's another variation on the subquery solution:"], ['This is a correlated subquery, which must be evaluated for every row of the outer query.  Usually this is expensive, and your original example query is better.  On the other hand, in MySQL " NOT EXISTS " is often better than " column NOT IN (...) "  ']], [[' SELECT * \nFROM movies m\nWHERE NOT EXISTS (SELECT * FROM seen s \n                  WHERE s.movie_id = m.id \n                    AND s.user_id=123);\n']], ["MySQL: Finding rows that don't take part in a relationship"], 2], [(544791, 0), [['In your app directory try this:'], ['Pipe it into psql like this to actually run the reset:']], [[' python manage.py help sqlsequencereset\n']], ['Django + PostgreSQL: How to reset primary key?'], 3], [(544791, 1), [['Pipe it into psql like this to actually run the reset:'], ["Edit: here's an example of the output from this command on one of my tables:"]], [[' python manage.py sqlsequencereset myapp1 myapp2 | psql\n']], ['Django + PostgreSQL: How to reset primary key?'], 3], [(544791, 2), [["Edit: here's an example of the output from this command on one of my tables:"], ['-10000']], [[' BEGIN;\nSELECT setval(\'"project_row_id_seq"\', coalesce(max("id"), 1), max("id") IS NOT null) FROM "project_row";\nCOMMIT;\n']], ['Django + PostgreSQL: How to reset primary key?'], 3], [(545320, 0), [['-10000'], ['Edit: On SQL Server at least, all built-in string functions are  deterministic . That means you could look into the possibility to make computed columns based on the SUBSTRING() results for the whole combined value,  putting an index on each of them . Inserts will be slower, table size will increase, but searches will be really fast.']], [[" SELECT\n  Id\nFROM\n  BitVectorTable\nWHERE\n  SUBSTRING(BitVector, 500, 1) = '1'\n  AND SUBSTRING(BitVector, 1000, 1) = '1'\n"]], ["How would you query an array of 1's and 0's chars from a database?"], 2], [(545320, 1), [['Edit: On SQL Server at least, all built-in string functions are  deterministic . That means you could look into the possibility to make computed columns based on the SUBSTRING() results for the whole combined value,  putting an index on each of them . Inserts will be slower, table size will increase, but searches will be really fast.'], ['Edit #2: The  limits for SQL Server  are:']], [[" SELECT\n  Id\nFROM\n  BitVectorTable\nWHERE\n  BitVector_0500 = '1'\n  AND BitVector_1000 = '1'\n"]], ["How would you query an array of 1's and 0's chars from a database?"], 2], [(545364, 0), [['You can use  OpenDataSource  with a linked server'], ['For example']], [[' OpenDataSource(provider_name, init_string)\n']], ['TSQL command to connect to another server (SQL Server 2005)'], 2], [(545364, 1), [['For example'], ['From  MSDN -']], [[" SELECT\nFirstName,\nGender\nFROM\nOpenDataSource (\n'SQLOLEDB',\n'DataSource = NOLI\\SQL2;UserID=myUserID;Password=myPassword'\n).Organisation.dbo.Employees\n"]], ['TSQL command to connect to another server (SQL Server 2005)'], 2], [(546410, 0), [['-10000'], ['You may add']], [[' SELECT TimeStamp,\n       minmax,\n       CASE WHEN minmax = 0 THEN SpeedMax ELSE SpeedMin END AS Speed\n       CASE WHEN minmax = 0 THEN HeightMax ELSE HeightMin END AS Height\nFROM Table,\n(\n    SELECT 0 AS minmax\n    UNION ALL\n    SELECT 1\n) mm\n']], ['How to UNPIVOT to split columns into rows?'], 2], [(546410, 1), [['You may add'], ['to avoid double scan on  Table']], [[' OPTION (FORCE ORDER)\n']], ['How to UNPIVOT to split columns into rows?'], 2], [(547467, 0), [["Thanks to the concept in the link from Bill Karwin, it's the  CROSS APPLY  that makes it work"], ['RESULTS:']], [[" SELECT ID, DES, LEFT(DIDS, LEN(DIDS)-1) AS DIDS\n FROM MASTER M1 INNER JOIN DETAIL D on M1.ID = D.MID \n  CROSS APPLY (\n    SELECT DID + ', '\n    FROM MASTER M2 INNER JOIN DETAIL D on M2.ID = D.MID \n    WHERE M1.ID = M2.ID\n    FOR XML PATH('')\n   ) pre_trimmed (DIDS)\nGROUP BY ID, DES, DIDS\n"]], ['Using MS SQL Server 2005, how can I consolidate detail records into a single comma separated list'], 2], [(547467, 1), [['RESULTS:'], ['-10000']], [[' ID  DES        DIDS\n--- ---------- ---------------\n1   MASTER_1   L1, L2, L3\n2   MASTER_2   L1, L2\n']], ['Using MS SQL Server 2005, how can I consolidate detail records into a single comma separated list'], 2], [(547777, 0), [['Just copy/paste the code below in a VBA module. \nFrom code, or, from the VBA IDE Immediate window if you want to test it, just call:'], ['Code']], [[' ExpandTable\n']], ['Convert rows to columns'], 2], [(547777, 1), [['Code'], ['About the code']], [[' Public Sub ExpandTable()\n\n    Dim db As DAO.Database\n    Dim rs As DAO.Recordset, rs2 As DAO.Recordset\n    Dim td As DAO.TableDef\n    Dim fd As DAO.Field\n    Dim maxWorkCenters As Integer\n    Dim i As Integer\n    Dim sql As String\n\n    Set db = CurrentDb\n\n    \' Delete the old result table if there was one \'\n    On Error Resume Next\n    db.TableDefs.Delete "result"\n    On Error GoTo 0\n\n    \' Create the result table \'\n    Set td = db.CreateTableDef("result")\n    td.Fields.Append td.CreateField("Plant", dbInteger)\n    td.Fields.Append td.CreateField("Material", dbText)\n    \' Get the maximum number of workcenters we will need \'\n    \' for a given Plan/Material combination \'\n    sql = "SELECT Count(*) FROM Temp GROUP BY Plant, Material"\n    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)\n    maxWorkCenters = Nz(rs.Fields(0).Value, 0)\n    rs.Close\n    Set rs = Nothing\n    \' Create as many columns as we need to fit all these combinations \'\n    For i = 1 To maxWorkCenters\n        td.Fields.Append td.CreateField("WorkCenter" & i, dbText)\n        td.Fields.Append td.CreateField("SetupTime" & i, dbInteger)\n    Next i\n    db.TableDefs.Append td\n\n    \' Now get the data into the new table \'\n    Dim lastPlant As Variant, lastMaterial As Variant\n    Dim curcol As Integer\n    sql = "SELECT Plant, Material, Workcenter, Setuptime FROM Temp ORDER BY Plant, Material, WorkCenter"\n    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)\n    Set rs2 = db.OpenRecordset("result", dbOpenDynaset)\n    With rs\n        lastPlant = 0\n        lastMaterial = ""\n        Do While Not .EOF\n            If (Nz(!Plant) <> lastPlant) Or (Nz(!Material) <> lastMaterial) Then\n                If rs2.EditMode = dbEditAdd Then\n                    \' Save the previously edited record if any \'\n                    rs2.Update\n                End If\n\n                \' Different plant/material, so we add a new result \'\n                rs2.AddNew\n                rs2!Plant = !Plant\n                rs2!Material = !Material\n                rs2!WorkCenter1 = !WorkCenter\n                rs2!SetupTime1 = !Setuptime\n                lastPlant = Nz(!Plant)\n                lastMaterial = Nz(!Material)\n                curcol = 1\n            Else\n                \' Same plant/material combi, so we fill the next column set \'\n                curcol = curcol + 1\n                rs2.Fields("Workcenter" & curcol).Value = !WorkCenter\n                rs2.Fields("SetupTime" & curcol).Value = !Setuptime\n            End If\n            .MoveNext\n        Loop\n        If rs2.EditMode = dbEditAdd Then\n            \' Save the last result \'\n            rs2.Update\n        End If\n    End With\n\n    Set rs2 = Nothing\n    Set rs = Nothing\n    Set db = Nothing\n\nEnd Sub\n']], ['Convert rows to columns'], 2], [(547944, 0), [['Then you are looking to identify the "last" one for each user:'], ['Then you need to check the state of these (which requires a join with the original table):']], [[" select UserName, max(DateAdded) as LastDate\nfrom UserData\nwhere State IN ('Connected', 'LostConnection')\nGroup by UserName\n"]], ['Need some help with a simple SQL query'], 3], [(547944, 1), [['Then you need to check the state of these (which requires a join with the original table):'], ['Another way to join would use the id of the UserData like this:']], [[" SELECT UserName\nFROM UserData allData join \n    (select UserName, max(DateAdded) as LastDate\n    from UserData\n    where State IN ('Connected', 'LostConnection')\n    Group by UserName) as lastData on allData.UserName = lastData.UserName\n        and allData.DateAdded = lastData.LastDate\nWHERE StateType = 'Connected'\n"]], ['Need some help with a simple SQL query'], 3], [(547944, 2), [['Another way to join would use the id of the UserData like this:'], ['-10000']], [[" SELECT UserName\nFROM UserData allData join \n    (select max(id) as id -- if ids are assigned in ascending order\n    from UserData\n    where State IN ('Connected', 'LostConnection')\n    Group by UserName) as lastData on allData.id = lastData.id\nWHERE StateType = 'Connected'\n"]], ['Need some help with a simple SQL query'], 3], [(548475, 0), [['Giving you an example, I have a db table called  mtcity  and I wrote the following query (work as well with linq to entities):'], ['The resulting query will be:']], [[' using (DataClasses1DataContext c = new DataClasses1DataContext())\n{\n    var query = (from MtCity2 c1 in c.MtCity2s\n                select c1).Skip(3).Take(3);\n    //Doing something with the query.\n}\n']], ['efficient way to implement paging'], 3], [(548475, 1), [['The resulting query will be:'], ['Which is a windowed data access (pretty cool, btw cuz will be returning data since the very begining and will access the table as long as the conditions are met). This will be very similar to:']], [[' SELECT [t1].[CodCity], \n    [t1].[CodCountry], \n    [t1].[CodRegion], \n    [t1].[Name],  \n    [t1].[Code]\nFROM (\n    SELECT ROW_NUMBER() OVER (\n        ORDER BY [t0].[CodCity], \n        [t0].[CodCountry], \n        [t0].[CodRegion], \n        [t0].[Name],\n        [t0].[Code]) AS [ROW_NUMBER], \n        [t0].[CodCity], \n        [t0].[CodCountry], \n        [t0].[CodRegion], \n        [t0].[Name],\n        [t0].[Code]\n    FROM [dbo].[MtCity] AS [t0]\n    ) AS [t1]\nWHERE [t1].[ROW_NUMBER] BETWEEN @p0 + 1 AND @p0 + @p1\nORDER BY [t1].[ROW_NUMBER]\n']], ['efficient way to implement paging'], 3], [(548475, 2), [['Which is a windowed data access (pretty cool, btw cuz will be returning data since the very begining and will access the table as long as the conditions are met). This will be very similar to:'], ['With the exception that, this second query will be executed faster than the linq result because it will be using exclusively the index to create the data access window; this means, if you need some filtering, the filtering should be (or must be) in the Entity listing (where the row is created) and some indexes should be created as well to keep up the good performance.']], [[' With CityEntities As \n(\n    Select ROW_NUMBER() Over (Order By CodCity) As Row,\n        CodCity //here is only accessed by the Index as CodCity is the primary\n    From dbo.mtcity\n)\nSelect [t0].[CodCity], \n        [t0].[CodCountry], \n        [t0].[CodRegion], \n        [t0].[Name],\n        [t0].[Code]\nFrom CityEntities c\nInner Join dbo.MtCity t0 on c.CodCity = t0.CodCity\nWhere c.Row Between @p0 + 1 AND @p0 + @p1\nOrder By c.Row Asc\n']], ['efficient way to implement paging'], 3], [(551987, 0), [['There is LogMiner which is SQL based (and so you could access through JDBC).'], ["Or you can look at Oracle Streams which reads the logs and generates 'logical change messages' into a queue from the log contents."]], [[' http://download.oracle.com/docs/cd/B19306_01/server.102/b14215/logminer.htm#sthref1875\n']], ['How do you read the Oracle transaction log'], 2], [(551987, 1), [["Or you can look at Oracle Streams which reads the logs and generates 'logical change messages' into a queue from the log contents."], ['-10000']], [[' http://download.oracle.com/docs/cd/B19306_01/server.102/b14229/strms_over.htm#i1006309\n']], ['How do you read the Oracle transaction log'], 2], [(553038, 0), [["Prior to the introduction of annotations, you might have used  extra  to do something like this, which I  think  should return  0  in cases where there are no votes (if it doesn't for any particular database implementation, you can at least directly insert the necessary  COALESCE  function call -  COALESCE(SUM(value), 0)  - using this method):"], ["I can't see any built-in way to add your own SQL to the new annotation stuff (which I haven't personally used yet), but it looks like you should be able to create a new annotation like so:"]], [[" pictures = gallery.picture_set.extra(\n    select={\n        'score': 'SELECT SUM(value) FROM yourapp_picturevote WHERE yourapp_picturevote.picture_id = yourapp_picture.id',\n    },\n    order_by=['-score']\n)\n"]], ["Treat NULL as '0' in Django model"], 3], [(553038, 1), [["I can't see any built-in way to add your own SQL to the new annotation stuff (which I haven't personally used yet), but it looks like you should be able to create a new annotation like so:"], ['This should let you do the following:']], [[" from django.db.models import aggregates\nfrom django.db.models.sql import aggregates as sql_aggregates\n\nclass SumWithDefault(aggregates.Aggregate):\n    name = 'SumWithDefault'\n\nclass SQLSumWithDefault(sql_aggregates.Sum):\n    sql_template = 'COALESCE(%(function)s(%(field)s), %(default)s)'\n\nsetattr(sql_aggregates, 'SumWithDefault', SQLSumWithDefault)\n"]], ["Treat NULL as '0' in Django model"], 3], [(553038, 2), [['This should let you do the following:'], ['-10000']], [[" pictures = gallery.picture_set.annotate(score=SumWithDefault('picturevote__value', default=0).order_by('-score')\n"]], ["Treat NULL as '0' in Django model"], 3], [(553856, 0), [['For instance, if we need to construct equality relation on natural numbers from  1  to  5 , we have this table:'], ["But you don't need to keep the whole pair in the database. You keep single values instead and write a query:"]], [[' 1 1\n2 2\n3 3\n4 4\n5 5\n']], ['First normal form and temporal data'], 3], [(553856, 1), [["But you don't need to keep the whole pair in the database. You keep single values instead and write a query:"], ['In your case, if you write a query (or define a view) in the following way:']], [[' SELECT n1.number, n2.number\nFROM number n1, number n2\nWHERE n1.number = n2.number\n']], ['First normal form and temporal data'], 3], [(553856, 2), [['In your case, if you write a query (or define a view) in the following way:'], [', you get relation ( ticket HAS price ) from ( ticket HAD BEGUN TO COST price ON date ) exactly as if you were keeping the whole table in the database.']], [[' SELECT ticket, price\nFROM mytable\nWHERE (ticket, date) IN (\n  SELECT ticket, MAX(date)\n  FROM mytable\n  GROUP BY\n    ticket\n  )\n']], ['First normal form and temporal data'], 3], [(554161, 0), [['You need a stored procedure to be able to call this with parameters:'], ["You may also remove  name  from  the index at all, and perform a final  ORDER 'ing without using an index:"]], [[" CREATE TABLE rank (name VARCHAR(20) NOT NULL, points INTEGER NOT NULL);\n\nCREATE INDEX ix_rank_points ON rank(points, name);\n\nCREATE PROCEDURE prc_ranks(fromrank INT, tillrank INT)\nBEGIN\n  SET @fromrank = fromrank;\n  SET @tillrank = tillrank;\n  PREPARE STMT FROM\n  '\n  SELECT  rn, rank, name, points\n  FROM  (\n    SELECT  CASE WHEN @cp = points THEN @rank ELSE @rank := @rn + 1 END AS rank,\n            @rn := @rn + 1 AS rn,\n            @cp := points,\n            r.*\n    FROM (\n         SELECT @cp := -1, @rn := 0, @rank = 1\n         ) var,\n         (\n         SELECT *\n         FROM rank\n         FORCE INDEX (ix_rank_points)\n         ORDER BY\n           points DESC, name DESC\n         LIMIT ?\n         ) r\n    ) o\n  WHERE rn >= ?\n  ';\n  EXECUTE STMT USING @tillrank, @fromrank;\nEND;\n\nCALL prc_ranks (2, 5);\n"]], ['Ranking in MySQL, how do I get the best performance with frequent updates and a large data set?'], 2], [(554161, 1), [["You may also remove  name  from  the index at all, and perform a final  ORDER 'ing without using an index:"], ['That will impact performance on big ranges, but you will hardly notice it on small ranges.']], [[" CREATE INDEX ix_rank_points ON rank(points);\n\nCREATE PROCEDURE prc_ranks(fromrank INT, tillrank INT)\nBEGIN\n  SET @fromrank = fromrank;\n  SET @tillrank = tillrank;\n  PREPARE STMT FROM\n  '\n  SELECT  rn, rank, name, points\n  FROM  (\n    SELECT  CASE WHEN @cp = points THEN @rank ELSE @rank := @rn + 1 END AS rank,\n            @rn := @rn + 1 AS rn,\n            @cp := points,\n            r.*\n    FROM (\n         SELECT @cp := -1, @rn := 0, @rank = 1\n         ) var,\n         (\n         SELECT *\n         FROM rank\n         FORCE INDEX (ix_rank_points)\n         ORDER BY\n           points DESC\n         LIMIT ?\n         ) r\n    ) o\n  WHERE rn >= ?\n  ORDER BY rank, name\n  ';\n  EXECUTE STMT USING @tillrank, @fromrank;\nEND;\n"]], ['Ranking in MySQL, how do I get the best performance with frequent updates and a large data set?'], 2], [(554750, 0), [['Example:  say you have a lookup table for US states, with a primary key of the two-letter abbreviation.  Then you have a table for mailing addresses that references it.  Someone tells you that you mistakenly gave Montana the abbreviation "MO" instead of "MT" so you need to change it in the lookup table.'], ['Now you go to fix the mistake, without the aid of database-side cascading updates.  Below is a test using MySQL 5.0 (assume no records exist for Missouri, which actually does use the abbreviation "MO").']], [[" CREATE TABLE States (st CHAR(2) PRIMARY KEY, state VARCHAR(20) NOT NULL);\nINSERT INTO States VALUES ('MO', 'Montana');\n\nCREATE TABLE Addresses (addr VARCHAR(20), city VARCHAR(20), st CHAR(2), zip CHAR(6),\n  FOREIGN KEY (st) REFERENCES States(st));\nINSERT INTO Addresses VALUES ('1301 East Sixth Ave.', 'Helena', 'MO', '59620');\n"]], ['Cascading Deletes/Updates using JPA or Inside of Database?'], 2], [(554750, 1), [['Now you go to fix the mistake, without the aid of database-side cascading updates.  Below is a test using MySQL 5.0 (assume no records exist for Missouri, which actually does use the abbreviation "MO").'], ['No application-side query can solve this situation.  You need cascading updates in the database in order to perform the update in both tables atomically, before the referential integrity constraint is enforced.']], [[" UPDATE States SET st = 'MT' WHERE st = 'MO';\n\nERROR 1451 (23000): Cannot delete or update a parent row: \n a foreign key constraint fails (`test/addresses`, \n CONSTRAINT `addresses_ibfk_1` FOREIGN KEY (`st`) REFERENCES `states` (`st`))\n\nUPDATE Addresses SET st = 'MT' WHERE st = 'MO';\n\nERROR 1452 (23000): Cannot add or update a child row: \n a foreign key constraint fails (`test/addresses`, \n CONSTRAINT `addresses_ibfk_1` FOREIGN KEY (`st`) REFERENCES `states` (`st`))\n\nUPDATE Addresses JOIN States USING (st)\nSET Addresses.st = 'MT', States.st = 'MT'\nWHERE States.st = 'MO';\n\nERROR 1451 (23000): Cannot delete or update a parent row: \n a foreign key constraint fails (`test/addresses`, \n CONSTRAINT `addresses_ibfk_1` FOREIGN KEY (`st`) REFERENCES `states` (`st`))\n"]], ['Cascading Deletes/Updates using JPA or Inside of Database?'], 2], [(555296, 0), [['Imagine a table Nodes with columns Node1 and Node2.'], ["Of course you'll want to make sure its appropriate indexed, namely:"]], [[' SELECT node1, node2\nFROM nodes n\nWHERE EXISTS (SELECT 1 FROM nodes WHERE node1 = n.node2 AND node2 = n.node1)\n']], ['finding bi-directional connections in a table'], 4], [(555296, 1), [["Of course you'll want to make sure its appropriate indexed, namely:"], ['and']], [[' (node1, node2)\n']], ['finding bi-directional connections in a table'], 4], [(555296, 2), [['and'], ['This will still get you A,C and C,A.  To filter those out change the query to:']], [[' (node2, node1)\n']], ['finding bi-directional connections in a table'], 4], [(555296, 3), [['This will still get you A,C and C,A.  To filter those out change the query to:'], ['assuming there is a natural ordering you can take advantage of.']], [[' SELECT node1, node2\nFROM nodes n\nWHERE EXISTS (SELECT 1 FROM nodes WHERE node1 = n.node2 AND node2 = n.node1)\nAND node1 < node2\n']], ['finding bi-directional connections in a table'], 4], [(555622, 0), [['I used the following SQL with SQL Server 2005 to get the Constraint Names by Primary Key:'], ['To get the Constraint Name by Foreing Key:']], [[' SELECT Constraint_Name \nFROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS \nWHERE UNIQUE_CONSTRAINT_NAME = \n   (SELECT CONSTRAINT_NAME \n    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n    WHERE TABLE_NAME = @TableName AND COLUMN_NAME = @ColumnName)\n']], ['How do I know if CONSTRAINT_NAME is a Primary or Foreign Key?'], 4], [(555622, 1), [['To get the Constraint Name by Foreing Key:'], ["To get the Foreign Key's Table and Field by Constraint Name:"]], [[' SELECT CONSTRAINT_NAME \nFROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \nWHERE TABLE_NAME = @TableName AND COLUMN_NAME = @ColumnName\n']], ['How do I know if CONSTRAINT_NAME is a Primary or Foreign Key?'], 4], [(555622, 2), [["To get the Foreign Key's Table and Field by Constraint Name:"], ["To get the Primary Key's Table and Field by Constraint Name:"]], [[' SELECT TABLE_NAME, COLUMN_NAME \nFROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \nWHERE CONSTRAINT_NAME = @ConstraintName\n']], ['How do I know if CONSTRAINT_NAME is a Primary or Foreign Key?'], 4], [(555622, 3), [["To get the Primary Key's Table and Field by Constraint Name:"], ['-10000']], [[' SELECT TABLE_NAME, COLUMN_NAME \nFROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \nWHERE CONSTRAINT_NAME = \n    (SELECT UNIQUE_CONSTRAINT_NAME \n     FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS \n     WHERE CONSTRAINT_NAME = @ConstraintName)\n']], ['How do I know if CONSTRAINT_NAME is a Primary or Foreign Key?'], 4], [(556509, 0), [['-10000'], ['No query can see the changes made by itself, or the following query:']], [[' UPDATE mytable, (\n  SELECT @loop := MAX(col1)\n  FROM\n    mytable\n  ) o\nSET col1 = (@loop := @loop + 1)\n']], ['SQL : update statement with dynamic column value assignment'], 2], [(556509, 1), [['No query can see the changes made by itself, or the following query:'], ['would never end.']], [[' UPDATE mytable\nSET col1 = col2 + 1\nWHERE col1 > col2 \n']], ['SQL : update statement with dynamic column value assignment'], 2], [(557785, 0), [['How about this...'], ['As per comments below this version uses EXISTS...']], [[' CREATE PROC TagMe(@TagName VARCHAR(100),@TaggedRecordId INT)\nAS\n\nDECLARE @TagId INT\n\nSET @TagId = SELECT TagId FROM Tag WHERE TagName = @TagName\n\nIF @TagId IS NOT NULL\n    BEGIN\n    --Tag exists\n        INSERT INTO TaggedRecords (TagId, TaggedRecordId) VALUES(@TagId,@TaggedRecordId)\n    RETURN\n    END\nELSE\n    -- New tag\n    BEGIN\n        INSERT INTO Tag (TagName) OUTPUT inserted.id INTO @TagId VALUES(@TagName)\n        INSERT INTO TaggedRecords (TagId, TaggedRecordId) VALUES(@TagId,@TaggedRecordId)\n    RETURN\nEND\n']], ['How to write "Tagging" query in SQL?'], 2], [(557785, 1), [['As per comments below this version uses EXISTS...'], ['Although I\'m not sure (I reliase I\'m arguing against myself here but so much of this stuff is an "it depends" answer!). This example actually would work best for more usage of new tags because it would only perform the EXISTS once and then continue whereas for an existing tag it would perform an EXISTS and then a SELECT.']], [[' CREATE PROC TagMe(@TagName VARCHAR(100),@TaggedRecordId INT)\nAS\n\nDECLARE @TagId INT\n\nIF EXISTS(SELECT TagId FROM Tag WHERE TagName = @TagName)\n    BEGIN\n    --Tag exists\n        SET @TagId = SELECT TagId FROM Tag WHERE TagName = @TagName  \n        INSERT INTO TaggedRecords (TagId, TaggedRecordId) VALUES(@TagId,@TaggedRecordId)\n    RETURN\n    END\nELSE\n    -- New tag\n    BEGIN\n        INSERT INTO Tag (TagName) OUTPUT inserted.id INTO @TagId VALUES(@TagName)\n        INSERT INTO TaggedRecords (TagId, TaggedRecordId) VALUES(@TagId,@TaggedRecordId)\n    RETURN\nEND\n']], ['How to write "Tagging" query in SQL?'], 2], [(557922, 0), [['PRODUCT table'], ['PRICE table']], [[' id | name | image | description | etc... \n']], ['How should you deal with data for multiple prices for a single product?'], 3], [(557922, 1), [['PRICE table'], ['With the above structure, now when you have a price change, you would need to insert a new record in the PRICE table for the product. Set up indexes on start and end dates, then you would query products and prices as follows']], [[' id | product_id | list_price | cost_price | retail_price | gov_price | sale_price | bpa_price | start_date | end_date\n']], ['How should you deal with data for multiple prices for a single product?'], 3], [(557922, 2), [['With the above structure, now when you have a price change, you would need to insert a new record in the PRICE table for the product. Set up indexes on start and end dates, then you would query products and prices as follows'], ['You could normalize this design further and also have a  PRICE_TYPE  table. The thing to bear in mind with taking this approach however, is that if you want to get the full set of prices for a product, then the WHERE clause is applied to 6 records for each product.']], [[' SELECT \nproduct.name,\nprice.list_price,\nprice.cost_price,\nprice.retail_price /*, ETC... */\nFROM\nproduct\nINNER JOIN\nprice\nON product.id = price.product_id\nWHERE\nprice.start_date <= @date\nAND price.end_date >= @date\n']], ['How should you deal with data for multiple prices for a single product?'], 3], [(558247, 0), [['Running:'], ['On a connected  *SQL*  buffer will rename the current buffer after the current connection.  So:']], [[' M-x sql-rename-buffer\n']], ['Can you create a new SQL buffer in Emacs if one already exists?'], 4], [(558247, 1), [['On a connected  *SQL*  buffer will rename the current buffer after the current connection.  So:'], ['Becomes:']], [[' *SQL*\n']], ['Can you create a new SQL buffer in Emacs if one already exists?'], 4], [(558247, 2), [['Becomes:'], ['You can then do:']], [[' *SQL user/database*\n']], ['Can you create a new SQL buffer in Emacs if one already exists?'], 4], [(558247, 3), [['You can then do:'], ['Or whatever your flavor of DB is to create another SQL buffer.']], [[' M-x sql-mysql\n']], ['Can you create a new SQL buffer in Emacs if one already exists?'], 4], [(558316, 0), [['-10000'], ['did you also want to combine  first_name  and  last_name  for each username? You can do this like']], [[' SELECT contracts.field1, contracts.field2, \nsp1.first_name,\nsp1.last_name \nsp2.first_name,\nsp2.last_name,\n/* etc, etc */\nFROM\ncontracts\nINNER JOIN\nusers sp1\nON\ncontracts.id = sp1.id\nAND sp1.username = service_provider_1\nINNER JOIN \nusers sp2\nON contracts.id = sp2.id\nAND sp2.username = service_provider_2\nINNER JOIN \nusers sobc\nON contracts.id = sobc.id\nAND sobc.username = service_org_business_contact\nINNER JOIN\n/* etc, etc */\nWHERE contracts.id = @myid\n']], ['How do I condense this SQL of multiple sub-selects into something more sane?'], 3], [(558316, 1), [['did you also want to combine  first_name  and  last_name  for each username? You can do this like'], ['EDIT:  As stated in the comments on  this answer , the JOIN on id is probably not necessary, in which case it becomes']], [[" RTRIM(sp1.first_name) + ' ' + RTRIM(sp1.last_name) as sp1_name\n"]], ['How do I condense this SQL of multiple sub-selects into something more sane?'], 3], [(558316, 2), [['EDIT:  As stated in the comments on  this answer , the JOIN on id is probably not necessary, in which case it becomes'], ["My layout probably makes it appear longer! You may need to use LEFT OUTER JOINS if it is possible to have a contract record that doesn't have a  first_name  and  last_name  for one of it's fields within the users table."]], [[' SELECT \ncontracts.field1, \ncontracts.field2, \nsp1.first_name,\nsp1.last_name \nsp2.first_name,\nsp2.last_name,\n/* etc, etc */\nFROM\ncontracts\nINNER JOIN\nusers sp1\nON\nsp1.username = service_provider_1\nINNER JOIN \nusers sp2\nON\nsp2.username = service_provider_2\nINNER JOIN \nusers sobc\nON \nsobc.username = service_org_business_contact\nINNER JOIN\n/* etc, etc */\nWHERE contracts.id = @myid\n']], ['How do I condense this SQL of multiple sub-selects into something more sane?'], 3], [(558670, 0), [['-10000'], ['The result:']], [[' declare @startID int, @endID int, @rowsEach int\nselect @startID = 0, @endID = 2, @rowsEach = 3\n\n\nselect *\nfrom\n(\n    select memID, foo, bar, foobar, row_number() over (partition by dense_rank order by dense_rank) [rank_row]\n    from\n    (\n        select memID, foo, bar, foobar, dense_rank() over (order by memID) [dense_rank]\n        from #test\n        where memID between @startID and @endID\n    ) a\n) b\nwhere rank_row <= @rowsEach\n']], ['SQL query to return top N rows per ID across a range of IDs'], 3], [(558670, 1), [['The result:'], ["And here's the set-up code if you'd like to test locally:"]], [[' memID       foo  bar  foobar rank_row\n----------- ---- ---- ------ --------------------\n1           blah blah blah   1\n1           blah blah blah   2\n1           blah blah blah   3\n2           blah blah blah   1\n2           blah blah blah   2\n2           blah blah blah   3\n']], ['SQL query to return top N rows per ID across a range of IDs'], 3], [(558670, 2), [["And here's the set-up code if you'd like to test locally:"], ['-10000']], [[" create table #test\n(\n      memID     int not null\n    , foo       char(4) not null\n    , bar       char(4) not null\n    , foobar    char(4) not null\n)\n\ninsert into #test (memID, foo, bar, foobar)\nselect 1, 'blah', 'blah', 'blah'\nunion all\nselect 1, 'blah', 'blah', 'blah'\nunion all\nselect 1, 'blah', 'blah', 'blah'\nunion all\nselect 1, 'blah', 'blah', 'blah'\nunion all\nselect 1, 'blah', 'blah', 'blah'\nunion all\nselect 1, 'blah', 'blah', 'blah'\nunion all\nselect 1, 'blah', 'blah', 'blah'\nunion all\nselect 2, 'blah', 'blah', 'blah'\nunion all\nselect 2, 'blah', 'blah', 'blah'\nunion all\nselect 2, 'blah', 'blah', 'blah'\nunion all\nselect 2, 'blah', 'blah', 'blah'\nunion all\nselect 10001, 'blah', 'blah', 'blah'\nunion all\nselect 10001, 'blah', 'blah', 'blah'\nunion all\nselect 10001, 'blah', 'blah', 'blah'\n"]], ['SQL query to return top N rows per ID across a range of IDs'], 3], [(560586, 0), [["I think you're looking for full outer join.  Which gives you the unit numbers you asked for in Part 1."], ['This gives you the records in A not in B.']], [[' Select \n   A.UnitNumber, B.UnitNumber\nfrom\n   DB1.dbo.TableA A FULL OUTER JOIN DB2.dbo.TableB B \n       on A.UnitNumber = B.UnitNumber\n       and A.BuildingNumber = B.BuildingNumber\nWhere\n   A.UnitNumber is null or B.UnitNumber is null\n']], ['How do I handle long comparisons in SQL'], 3], [(560586, 1), [['This gives you the records in A not in B.'], ["And you just reverse it to find the records in B that aren't in A."]], [[' Select\n    A.UnitNumber\nFrom\n    DB1.dbo.TableA A Left Join DB2.dbo.TableB B \n        on A.UnitNumber = B.UnitNumber \n        and A.BuildingNumber = B.BuildingNumber\nWhere\n    B.UnitNumber is null\n']], ['How do I handle long comparisons in SQL'], 3], [(560586, 2), [["And you just reverse it to find the records in B that aren't in A."], ['-10000']], [[' Select\n    B.UnitNumber\nFrom\n    DB2.dbo.TableB B left join DB1.dbo.TableA A \n        on B.UnitNumber = A.UnitNumber\n        and B.BuildingNumber = A.BuildingNumber\nWhere\n    A.UnitNumber is null\n']], ['How do I handle long comparisons in SQL'], 3], [(560694, 0), [['Assuming that you are using webforms, you need a textbox on your page:'], ['Assuming that you have a submit button:']], [[' <asp:TextBox ID="txtTags" runat="server" />\n']], ['adding a tags field to an asp.net web page'], 3], [(560694, 1), [['Assuming that you have a submit button:'], ['You would have a SaveTags method that handles the click event:']], [[' <asp:Button ID="btnSubmit" onclick="SaveTags" runat="server" Text="submit" />\n']], ['adding a tags field to an asp.net web page'], 3], [(560694, 2), [['You would have a SaveTags method that handles the click event:'], ['-10000']], [[' protected void SaveTags(object sender, EventArgs e)\n{\n    string[] tags = txtTags.Text.Split(\' \');\n\n    SqlConnection connection = new SqlConnection("Your connection string");\n    SqlCommand command = connection.CreateCommand("Insert Into Tags(tag) Values(@tag)");\n    foreach (string tag in tags)\n    {\n        command.Parameters.Clear();\n        command.Parameters.AddWithValue("@tag", tag);\n        command.ExecuteNonQuery();\n    }\n    connection.Close();\n}\n']], ['adding a tags field to an asp.net web page'], 3], [(560777, 0), [['If "active" is the first in alphabetical order you migt be able to reduce subqueries to:'], ['Otherwise you can replace ORDER BY line with ']], [[' SELECT p.id, r.status, r.title\nFROM page AS p\n    INNER JOIN page_revision as r ON r.pageId = p.id AND \n        r.id = (SELECT r2.id \n                FROM page_revision as r2 \n                WHERE r2.pageId = r.pageId \n                ORDER BY r2.status, r2.id DESC\n                LIMIT 1)\n']], ['SQL query performance question (multiple sub-queries)'], 2], [(560777, 1), [['Otherwise you can replace ORDER BY line with '], ['These all come from my assumptions on SQL Server, your mileage with MySQL may vary.']], [[" ORDER BY CASE r2.status WHEN 'active' THEN 0 ELSE 1 END, r2.id DESC\n"]], ['SQL query performance question (multiple sub-queries)'], 2], [(561259, 0), [['The WHERE condition for the initial UPDATE (edited to have INNER JOINs instead of SELECT INs) and also selected  oildatasetid not oildatasetstatusid  :'], ['Now the UPDATE statement:']], [[' SELECT oildatasetid FROM oildatasetstatus\nINNER JOIN oildataset\n    ON oildataset.oildatasetid = oildatasetstatus.oildatasetid\nINNER JOIN samplepoint\n    ON oildatasetstatus.samplepoinid = samplepoint.samplepointid\nINNER JOIN customersite\n    ON samplepoint.customersiteid = customersite.customersiteid\nWHERE customerid = 2;\n']], ['Update Table By Pulling Information from Multiple Tables'], 3], [(561259, 1), [['Now the UPDATE statement:'], ['I avoid BETWEEN unless absolutely necessary:']], [[' UPDATE oildatasetstatus SET oildatasetstatusid = \n    CASE\n        WHEN oildatasetstatusid = 5 THEN 16\n        WHEN oildatasetstatusid = 6 THEN 17\n        WHEN oildatasetstatusid = 7 THEN 18\n        WHEN oildatasetstatusid = 8 THEN 18\n        WHEN oildatasetstatusid = 9 THEN 18\n        WHEN oildatasetstatusid = 10 THEN 19\n        WHEN oildatasetstatusid = 11 THEN 20\n    END\nWHERE oildatasetid IN (\n    SELECT oildatasetid FROM oildatasetstatus\n    INNER JOIN oildataset\n        ON oildataset.oildatasetid = oildatasetstatus.oildatasetid\n    INNER JOIN samplepoint\n        ON oildatasetstatus.samplepoinid = samplepoint.samplepointid\n    INNER JOIN customersite\n        ON samplepoint.customersiteid = customersite.customersiteid\n    WHERE customerid = 2\n);\n']], ['Update Table By Pulling Information from Multiple Tables'], 3], [(561259, 2), [['I avoid BETWEEN unless absolutely necessary:'], ['-10000']], [[' UPDATE oildataset SET oillabid = 9 WHERE oildatasetstatusid >= 16 AND oildatasetstatusid <= 20;\n']], ['Update Table By Pulling Information from Multiple Tables'], 3], [(561576, 0), [['Right, the problem is you want only one object of one sub-type to reference any given row of the parent class.  Starting from the  example  given by @Jay S, try this:'], ['When querying data, you can do it simply by querying the  media  table if you only need information about the common columns:']], [[" create table media_types (\n  media_type     int primary key,\n  media_name     varchar(20)\n);\ninsert into media_types (media_type, media_name) values\n  (2, 'TV series'),\n  (3, 'movie');\n\ncreate table media (\n  media_id       int not null,\n  media_type     not null,\n  name           varchar(100),\n  description    text,\n  url            varchar(255),\n  primary key (media_id, media_type),\n  foreign key (media_type) \n    references media_types (media_type)\n);\n\ncreate table tv_series (\n  media_id       int primary key,\n  media_type     int check (media_type = 2),\n  season         int,\n  episode        int,\n  airing         date,\n  foreign key (media_id, media_type) \n    references media (media_id, media_type)\n);\n\ncreate table movies (\n  media_id       int primary key,\n  media_type     int check (media_type = 3),\n  release_date   date,\n  budget         numeric(9,2),\n  foreign key (media_id, media_type) \n    references media (media_id, media_type)\n);\n"]], ['Polymorphism in SQL database tables?'], 4], [(561576, 1), [['When querying data, you can do it simply by querying the  media  table if you only need information about the common columns:'], ['If you know you are querying a movie, you can get movie-specific information with a single join:']], [[' SELECT name, url FROM media WHERE media_id = ?\n']], ['Polymorphism in SQL database tables?'], 4], [(561576, 2), [['If you know you are querying a movie, you can get movie-specific information with a single join:'], ["If you want information for a given media entry, and you don't know what type it is, you'd have to join to all your subtype tables, knowing that only one such subtype table will match:"]], [[' SELECT m.name, v.release_date\nFROM media AS m\nINNER JOIN movies AS v USING (media_id)\nWHERE m.media_id = ?\n']], ['Polymorphism in SQL database tables?'], 4], [(561576, 3), [["If you want information for a given media entry, and you don't know what type it is, you'd have to join to all your subtype tables, knowing that only one such subtype table will match:"], ['If the given media is a movie,then all columns in  t.*  will be NULL.']], [[' SELECT m.name, t.episode, v.release_date\nFROM media AS m\nLEFT OUTER JOIN tv_series AS t USING (media_id)\nLEFT OUTER JOIN movies AS v USING (media_id)\nWHERE m.media_id = ?\n']], ['Polymorphism in SQL database tables?'], 4], [(565040, 0), [['Something like this'], ['should do... you might want to add']], [[" select p1.branch, p1.patient\nfrom prescription p1, prescription p2\nwhere p1.patient=p2.patient\nand p1.dateoftest > p2.dateoftest\nand datediff('day', p2.dateoftest, p1.dateoftest) < 90;\n"]], ['sql query to find customers who order too frequently?'], 2], [(565040, 1), [['should do... you might want to add'], ['to limit to future test prescriptions.']], [[' and p1.dateoftest > getdate()\n']], ['sql query to find customers who order too frequently?'], 2], [(565163, 0), [['From a single table:'], ['Is that what you are looking for?  Or are you trying to query multiple tables?  If so try this:']], [[' Select * \nFROM TABLE_NAME\nWHERE table_width = SOME_VALUE3\nAND table_height= SOME_VALUE2\nAND table_length = SOME_VALUE3\n']], ['How to: MySQL How to retrieve record based on three properties?'], 2], [(565163, 1), [['Is that what you are looking for?  Or are you trying to query multiple tables?  If so try this:'], ['This link may be of use to you  http://dev.mysql.com/doc/refman/5.0/en/join.html']], [[' Select * \nFROM TABLE_SOLID solid\nInner join table_width width on solid.w_id = width.w_id\ninner join table_height height on solid.h_id = height.h_id\ninner join table_length length on solid.l_id = length.l_id\n']], ['How to: MySQL How to retrieve record based on three properties?'], 2], [(568310, 0), [['However, it would be a lot faster if you added an extra column to TableB (Called TableA_ID) and just INSERTED the result into it.  You would have instant access to TableA.ID and TableB.Identity.  But without knowing your exact situation, this may not be feasible.  (But you could always add the column and then drop it afterwards!)'], ['SELECT * FROM TableA']], [[" USE tempdb\nGO\n\nCREATE TABLE TableA (\n    ID int NOT NULL PRIMARY KEY,\n    ColumnA varchar(10) NOT NULL,\n    ColumnB varchar(10) NOT NULL,\n    ColumnC varchar(10) NOT NULL\n)\n\nCREATE TABLE TableB (\n    [Identity]  int IDENTITY(1,1) NOT NULL PRIMARY KEY,\n    ColumnX varchar(30) NOT NULL\n)\n\nCREATE TABLE TableC (\n    TableA_ID  int NOT NULL,\n    TableB_ID  int NOT NULL,\n    PRIMARY KEY (TableA_ID, TableB_ID)\n)\n\nGO\n\nINSERT INTO TableA VALUES (1, 'A', 'A', 'A')\nINSERT INTO TableA VALUES (2, 'A', 'A', 'B')\nINSERT INTO TableA VALUES (3, 'A', 'A', 'C')\nINSERT INTO TableA VALUES (11, 'A', 'B', 'A')\nINSERT INTO TableA VALUES (12, 'A', 'B', 'B')\nINSERT INTO TableA VALUES (13, 'A', 'B', 'C')\nINSERT INTO TableA VALUES (21, 'A', 'C', 'A')\nINSERT INTO TableA VALUES (22, 'A', 'C', 'B')\nINSERT INTO TableA VALUES (23, 'A', 'C', 'C')\nGO\n\n-- Do row-by-row processing to get the desired results\nSET NOCOUNT ON\nDECLARE @TableA_ID int\nDECLARE @TableB_Identity int\nDECLARE @ColumnX varchar(100)\n\nSET @TableA_ID = 0\n\nWHILE 1=1 BEGIN\n\n  -- Get the next row to process\n  SELECT TOP 1 \n    @TableA_ID=ID,\n    @ColumnX = ColumnA + ColumnB + ColumnC\n  FROM TableA\n  WHERE ID > @TableA_ID\n\n  -- Check if we are all done\n  IF @@ROWCOUNT = 0\n    BREAK\n\n  -- Insert row into TableB\n  INSERT INTO TableB (ColumnX)\n    SELECT @ColumnX\n\n  -- Get the identity of the new row\n  SET @TableB_Identity = SCOPE_IDENTITY()\n\n  -- At this point, you have @TableA_ID and @TableB_Identity.\n  -- Go to town with whatever extra processing you need to do\n  INSERT INTO TableC (TableA_ID, TableB_ID)\n    SELECT @TableA_ID, @TableB_Identity\n\nEND\nGO\n\nSELECT * FROM TableC\nGO\n"]], ['SQL script to aggregate column values'], 4], [(568310, 1), [['SELECT * FROM TableA'], ['SELECT * FROM TableB']], [[' ID          ColumnA    ColumnB    ColumnC\n----------- ---------- ---------- ----------\n1           A          A          A\n2           A          A          B\n3           A          A          C\n11          A          B          A\n12          A          B          B\n13          A          B          C\n21          A          C          A\n22          A          C          B\n23          A          C          C\n']], ['SQL script to aggregate column values'], 4], [(568310, 2), [['SELECT * FROM TableB'], ['SELECT * FROM TableC']], [[' Identity    ColumnX\n----------- ------------------------------\n1           AAA\n2           AAB\n3           AAC\n4           ABA\n5           ABB\n6           ABC\n7           ACA\n8           ACB\n9           ACC\n']], ['SQL script to aggregate column values'], 4], [(568310, 3), [['SELECT * FROM TableC'], ['-10000']], [[' TableA_ID   TableB_ID\n----------- -----------\n1           1\n2           2\n3           3\n11          4\n12          5\n13          6\n21          7\n22          8\n23          9\n']], ['SQL script to aggregate column values'], 4], [(569438, 0), [['For example,'], ['Try this version. Set the variables to the desired values. Essentially, we only want to retrieve as little results that satisfy our conditions, within each of the subqueries, so that we are not trying to run conditions over a large resultset on columns that are not indexed.']], [[' SELECT log.*\nFROM\n(\n    SELECT lo4.*\n    FROM\n        (SELECT CASE WHEN ln.log_id IS NULL THEN lo2.log_id ELSE ln.log_id END\n        AS log_id, ROW_NUMBER() OVER (PARTITION BY lo2.fb_id ORDER BY lo2.cdate) AS rn \n        FROM \n        (SELECT lo.*,\n            (SELECT TOP 1 log_id\n            FROM t_log li WHERE li.fb_id = lo.fb_id AND li.cdate >= lo.cdate\n            AND li.log_id  lo.log_id AND li.log_name  lo.log_name\n            ORDER BY cdate, log_id)\n        AS next_id\n        FROM t_log lo)\n    lo2 LEFT OUTER JOIN t_log ln ON ln.log_id = lo2.next_id)\n    lo3, t_log lo4\n    WHERE lo3.rn = 1 AND lo4.log_id = lo3.log_id\n) AS log\nWHERE log.Date BETWEEN @start and @end\n']], ['Weird SQL issue'], 2], [(569438, 1), [['Try this version. Set the variables to the desired values. Essentially, we only want to retrieve as little results that satisfy our conditions, within each of the subqueries, so that we are not trying to run conditions over a large resultset on columns that are not indexed.'], ['EDIT 2:']], [[" DECLARE @log_type CHAR(20) --Set this to the correct datatype\nSET @log_type = 'Critical'\n\nDECLARE @start_date DATETIME\nSET @start_date = '20 FEB 2009' -- use whichever datetime format is appropriate\n\nDECLARE @end_date DATETIME\nSET @end_date = '21 FEB 2009' -- use whichever datetime format is appropriate\n\n    SELECT lo4.*\n    FROM\n        (\n        SELECT \n            CASE WHEN ln.log_id IS NULL THEN lo2.log_id ELSE ln.log_id END AS log_id, \n            ROW_NUMBER() OVER (PARTITION BY lo2.fb_id ORDER BY lo2.cdate) AS rn \n        FROM \n            (\n             SELECT lo.*,\n            (SELECT TOP 1 log_id\n             FROM t_log li \n             WHERE \n             li.fb_id = lo.fb_id \n             AND li.cdate >= lo.cdate\n             AND li.log_id <> lo.log_id \n             AND li.log_name <> lo.log_name\n             AND log_type = @log_type\n             AND li.cdate BETWEEN @start_date and @end_date\n             ORDER BY cdate, log_id\n             ) AS next_id\n             FROM t_log lo\n            ) lo2 \n        LEFT OUTER JOIN \n        t_log ln \n        ON ln.log_id = lo2.next_id\n        /* AND ln.cdate BETWEEN @start_date and @end_date\n           I think that this would be needed for cases where\n           the next_id is null\n        */\n    ) lo3, \n    t_log lo4\n    WHERE \n    lo3.rn = 1 \n    AND lo4.log_id = lo3.log_id\n"]], ['Weird SQL issue'], 2], [(569697, 0), [['To get just "13":'], ['To get the rows:']], [[' select col2\nfrom mytable\ngroup by col2 having count(distinct col1) > 1;\n']], ['sql query to find non-mapping column values'], 2], [(569697, 1), [['To get the rows:'], ['-10000']], [[' select * from mytable where col2 in\n( select col2\n  from mytable\n  group by col2 having count(distinct col1) > 1\n);\n']], ['sql query to find non-mapping column values'], 2], [(575042, 0), [["Here's a solution for technical hours (context-less)."], ['Which generates this:']], [[' var query = myDC.Orders\n    .GroupBy(x => x.OrderDate.Hour)\n    .Select(g => new {\n        Hour = g.Key,\n        Amount = g.Sum(x => x.OrderAmount)\n    });\n']], ['LINQ to SQL - Grouping by hours'], 8], [(575042, 1), [['Which generates this:'], ["Here's a solution for business hours (context-ful) ."]], [[' SELECT SUM([t1].[OrderAmount]) AS [Amount], [t1].[value] AS [Hour]\nFROM (\n    SELECT DATEPART(Hour, [t0].[OrderDate]) AS [value], [t0].[OrderAmount]\n    FROM [dbo].[Orders] AS [t0]\n    ) AS [t1]\nGROUP BY [t1].[value]\n']], ['LINQ to SQL - Grouping by hours'], 8], [(575042, 2), [["Here's a solution for business hours (context-ful) ."], ['Which generates this:']], [[' DateTime zeroDate = new DateTime(2008, 1, 1);\n\nvar query = myDC.Orders\n    .GroupBy(x => System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(zeroDate, x.OrderDate)\n    )\n    .Select(g => new { Hours = g.Key, Amount = g.Sum(x => x.OrderAmount) })\n    .Select(x => new { Hour = zeroDate.AddHours(x.Hours), Amount = x.Amount});\n']], ['LINQ to SQL - Grouping by hours'], 8], [(575042, 3), [['Which generates this:'], ['Ugh - that bigint/float/milliseconds stuff is ugly and hard to verify.  I prefer doing the addition back on the client side:']], [[' SELECT DATEADD(ms, (CONVERT(BigInt,(CONVERT(Float,[t2].[value2])) * 3600000)) % 86400000, DATEADD(day, (CONVERT(BigInt,(CONVERT(Float,[t2].[value2])) * 3600000)) / 86400000, @p1)) AS [Hour], [t2].[value] AS [Amount]\nFROM (\n    SELECT SUM([t1].[OrderAmount]) AS [value], [t1].[value] AS [value2]\n    FROM (\n        SELECT DATEDIFF(Hour, @p0, [t0].[OrderDate]) AS [value], [t0].[OrderAmount]\n        FROM [dbo].[Orders] AS [t0]\n        ) AS [t1]\n    GROUP BY [t1].[value]\n    ) AS [t2]\n']], ['LINQ to SQL - Grouping by hours'], 8], [(575042, 4), [['Ugh - that bigint/float/milliseconds stuff is ugly and hard to verify.  I prefer doing the addition back on the client side:'], ['Which generates this:']], [[' var results = myDC.Orders\n    .GroupBy(x => System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(zeroDate, x.OrderDate)\n    )\n    .Select(g => new { Hours = g.Key, Amount = g.Sum(x => x.OrderAmount) })\n    .ToList()\n    .Select(x => new { Hour = zeroDate.AddHours(x.Hours), Amount = x.Amount});\n']], ['LINQ to SQL - Grouping by hours'], 8], [(575042, 5), [['Which generates this:'], ["And here's a third way of doing the contextful hours.  This one is very c# friendly, but there's string logic in the database (yuck)."]], [[' SELECT SUM([t1].[OrderAmount]) AS [Amount], [t1].[value] AS [Hours]\nFROM (\n    SELECT DATEDIFF(Hour, @p0, [t0].[OrderDate]) AS [value], [t0].[OrderAmount]\n    FROM [dbo].[Orders] AS [t0]\n    ) AS [t1]\nGROUP BY [t1].[value]\n']], ['LINQ to SQL - Grouping by hours'], 8], [(575042, 6), [["And here's a third way of doing the contextful hours.  This one is very c# friendly, but there's string logic in the database (yuck)."], ['Which generates']], [[' var query = myDC.Orders\n    .GroupBy(x => new DateTime(x.OrderDate.Year, x.OrderDate.Month, x.OrderDate.Day, x.OrderDate.Hour, 0, 0))\n    .Select(g => new { Hour = g.Key, Amount = g.Sum(x => x.OrderAmount) });\n']], ['LINQ to SQL - Grouping by hours'], 8], [(575042, 7), [['Which generates'], ['-10000']], [[" SELECT SUM([t1].[OrderAmount]) AS [Amount], [t1].[value] AS [Hour]\nFROM (\n    SELECT CONVERT(DATETIME, (CONVERT(NCHAR(4), DATEPART(Year, [t0].[OrderDate])) + ('-' + (CONVERT(NCHAR(2), DATEPART(Month, [t0].[OrderDate])) + ('-' + CONVERT(NCHAR(2), DATEPART(Day, [t0].[OrderDate])))))) + (' ' + (CONVERT(NCHAR(2), DATEPART(Hour, [t0].[OrderDate])) + (':' + (CONVERT(NCHAR(2), @p0) + (':' + CONVERT(NCHAR(2), @p1)))))), 120) AS [value], [t0].[OrderAmount]\n    FROM [dbo].[Orders] AS [t0]\n    ) AS [t1]\nGROUP BY [t1].[value]\n"]], ['LINQ to SQL - Grouping by hours'], 8], [(576071, 0), [['-10000'], ['More efficient way for  MySQL :']], [[' SELECT AVG(covered)\nFROM (\n  SELECT CASE WHEN COUNT(*) >= 2 THEN 1 ELSE 0 END AS covered\n  FROM app a\n  LEFT JOIN skill s ON (s.id_app = a.id AND s.lvl >= 2)\n  GROUP BY a.id\n)\n']], ['coverage percentage using a complex sql query...?'], 2], [(576071, 1), [['More efficient way for  MySQL :'], ['This will stop counting as soon as it finds the second skilled  person  for each  app .']], [[' SELECT AVG\n       (\n         IFNULL\n         (\n           (\n           SELECT 1\n           FROM skill s\n           WHERE s.id_app = a.id\n           AND s.lvl >= 2\n           LIMIT 1, 1\n           ), 0\n         )\n       )\nFROM app a\n']], ['coverage percentage using a complex sql query...?'], 2], [(577296, 0), [['Input data:   '], ['If two properties is all that you need in result, and each user have those properties, then try this:']], [[" DECLARE @User TABLE (UserID INT, Name VARCHAR(10), Age INT)\nINSERT INTO @User\nSELECT 1,  'John',  25 UNION\nSELECT 2,  'Sarah',  34\nDECLARE @UserPropertyValues TABLE(UserID INT, PropertyCodeValueID INT)\nINSERT INTO @UserPropertyValues\nSELECT 1, 2 UNION\nSELECT 1, 3 UNION\nSELECT 2, 1 UNION\nSELECT 2,  3\nDECLARE @PropertyCodes \n  TABLE (PropertyCodeID INT, PropertyCodeName VARCHAR(10))\nINSERT INTO @PropertyCodes\nSELECT 1,  'FavColour' UNION\nSELECT 2,  'CarMake' UNION\nSELECT 3,  'PhoneType'\nDECLARE @PropertyCodeValues TABLE (PropertyCodeValueID INT, \n  PropertyCodeID INT, PropertValue VARCHAR(10))\nINSERT INTO @PropertyCodeValues\nSELECT 1,  1,  'Blue' UNION\nSELECT 2,  1,  'Yellow' UNION\nSELECT 3,  2,  'Ford' UNION\nSELECT 4,  3,  'Mobile' UNION\nSELECT 5,  3,  'Landline'\n"]], ['Problem creating a view containing lookup tables'], 3], [(577296, 1), [['If two properties is all that you need in result, and each user have those properties, then try this:'], ['[edit]   But to handle possible NULL values better use this:']], [[' SELECT U.Name, U.Age, PCVFC.PropertValue, PCVCM.PropertValue \nFROM @User U\nINNER JOIN @UserPropertyValues UPVFC ON U.UserID = UPVFC.UserID \nINNER JOIN @PropertyCodeValues PCVFC \n  ON UPVFC.PropertyCodeValueID = PCVFC.PropertyCodeValueID \n    AND PCVFC.PropertyCodeID = 1\nINNER JOIN @UserPropertyValues UPVCM ON U.UserID = UPVCM.UserID \nINNER JOIN @PropertyCodeValues PCVCM \n  ON UPVCM.PropertyCodeValueID = PCVCM.PropertyCodeValueID \n    AND PCVCM.PropertyCodeID = 2\n']], ['Problem creating a view containing lookup tables'], 3], [(577296, 2), [['[edit]   But to handle possible NULL values better use this:'], ['-10000']], [[' SELECT U.Name, U.Age, FC.PropertValue, CM.PropertValue \nFROM @User U\nLEFT JOIN (\n  SELECT UserID, PropertValue FROM @UserPropertyValues  UPV\n    INNER JOIN @PropertyCodeValues PCV \n      ON UPV.PropertyCodeValueID = PCV.PropertyCodeValueID \n        AND PCV.PropertyCodeID = 1\n) FC ON U.UserID = FC.UserID\nLEFT JOIN (\n  SELECT UserID, PropertValue FROM @UserPropertyValues  UPV\n    INNER JOIN @PropertyCodeValues PCV \n      ON UPV.PropertyCodeValueID = PCV.PropertyCodeValueID \n        AND PCV.PropertyCodeID = 2\n) CM ON U.UserID = CM.UserID\n']], ['Problem creating a view containing lookup tables'], 3], [(580639, 0), [['-10000'], ['That said, everybody seems to come to this page for the more general answer to your question:']], [[' SELECT TOP 5 Id, Name FROM customerNames\nORDER BY NEWID()\n']], ['How to randomly select rows in SQL?'], 7], [(580639, 1), [['That said, everybody seems to come to this page for the more general answer to your question:'], ['-10000']], [['Select a random row with MySQL: SELECT column FROM table\nORDER BY RAND()\nLIMIT 1\n']], ['How to randomly select rows in SQL?'], 7], [(580639, 2), [['-10000'], ['-10000']], [['Select a random row with PostgreSQL: SELECT column FROM table\nORDER BY RANDOM()\nLIMIT 1\n']], ['How to randomly select rows in SQL?'], 7], [(580639, 3), [['-10000'], ['-10000']], [['Select a random row with Microsoft SQL Server: SELECT TOP 1 column FROM table\nORDER BY NEWID()\n']], ['How to randomly select rows in SQL?'], 7], [(580639, 4), [['-10000'], ['-10000']], [['Select a random row with IBM DB2 SELECT column, RAND() as IDX \nFROM table \nORDER BY IDX FETCH FIRST 1 ROWS ONLY\n']], ['How to randomly select rows in SQL?'], 7], [(580639, 5), [['-10000'], ['-10000']], [['Select a random record with Oracle: SELECT column FROM\n( SELECT column FROM table\nORDER BY dbms_random.value )\nWHERE rownum = 1\n']], ['How to randomly select rows in SQL?'], 7], [(580639, 6), [['-10000'], ['-10000']], [['Select a random row with sqlite: SELECT column FROM table \nORDER BY RANDOM() LIMIT 1\n']], ['How to randomly select rows in SQL?'], 7], [(581440, 0), [['You can count the total rows as a separate column in your main query using COUNT(*).  Like this:'], ['This will return the count in your result set rather than in a output parameter, but that should fit your requirements.  Otherwise, combine with a temp table:']], [[' WITH SelectedItems AS\n(SELECT Id, Row1, Row2, ROW_NUMBER() OVER (ORDER BY Row1) AS Position, \nCOUNT(*) OVER () AS TotalRows\nFROM Items\nWHERE Row2 = @Row2)\nSELECT Id, Row1, Row2\nFROM SelectedItems\nWHERE Position BETWEEN @From AND @To\n']], ['Select COUNT(*) of subquery without running it twice'], 2], [(581440, 1), [['This will return the count in your result set rather than in a output parameter, but that should fit your requirements.  Otherwise, combine with a temp table:'], ["You will find using a temp table for just your paged result will not use much memory (depending on your page size of course) and you're only keeping it live for a short period of time.  Selecting the full result set from the temp table and selecting the TotalRows will only take a tiny bit longer."]], [[' DECLARE @tmp TABLE (Id int, RowNum int, TotalRows int);\n\nWITH SelectedItems AS\n(SELECT Id, Row1, Row2, ROW_NUMBER() OVER (ORDER BY Row1) AS Position, \nCOUNT(*) OVER () AS TotalRows\nFROM Items\nWHERE Row2 = @Row2)\nINSERT @tmp\nSELECT Id, Row1, Row2\nFROM SelectedItems\nWHERE Position BETWEEN @From AND @To\n\nSELECT TOP 1 @TotalRows = TotalRows FROM @tmp\nSELECT * FROM @tmp\n']], ['Select COUNT(*) of subquery without running it twice'], 2], [(581675, 0), [['You could put all of that into one query like so'], ['How about this -']], [[' SELECT \ndates.date, \nSUM(volume.STT) AS STT,\nSUM(NZ(timesheet.batching)+NZ(timesheet.categorisation)+NZ(timesheet.CDT)+NZ(timesheet.CSI)+NZ(timesheet.destruction)+NZ(timesheet.extraction)+NZ(timesheet.indexing)+NZ(timesheet.mail)+NZ(timesheet.newlodgement)+NZ(timesheet.recordedDeliveries)+NZ(timesheet.retrieval)+NZ(timesheet.scanning)) AS VA\nFROM \ntblAllDates dates \nLEFT JOIN tblvolumedata volume\nON dates.date = volume.date\nLEFT JOIN tblTimesheetData timesheet\nON \ndates.date timesheet.date\nGROUP BY dates.date;\n']], ['Having difficulty combining JET SQL queries'], 2], [(581675, 1), [['How about this -'], ['Interestingly, When I ran my first statement against some test data, the figures for STT and VA had all been multiplied by 4, compared to the second statement. Very strange behaviour and certainly not what I expected.']], [[' SELECT date, \nSum(STT), \nSum(VA)\nFROM \n(SELECT dates.date, 0 AS STT, SUM(NZ(tblTimesheetData.batching)+NZ(tblTimesheetData.categorisation)+NZ(tblTimesheetData.CDT)+NZ(tblTimesheetData.CSI)+NZ(tblTimesheetData.destruction)+NZ(tblTimesheetData.extraction)+NZ(tblTimesheetData.indexing)+NZ(tblTimesheetData.mail)+NZ(tblTimesheetData.newlodgement)+NZ(tblTimesheetData.recordedDeliveries)+NZ(tblTimesheetData.retrieval)+NZ(tblTimesheetData.scanning)) AS VA\nFROM tblTimesheetData RIGHT JOIN dates ON tblTimesheetData.date=dates.date\nGROUP BY dates.date\nUNION SELECT dates.date, SUM(tblvolumedata.STT) AS STT, 0  AS VA\nFROM tblvolumedata RIGHT JOIN dates ON tblvolumedata.date=dates.date\nGROUP BY dates.date\n)\nGROUP BY date;\n']], ['Having difficulty combining JET SQL queries'], 2], [(582637, 0), [['You could use a  SUM  (not  COUNT !) combined with a  CASE  statement, like this:'], ['Note: in my own test  NULL s were not an issue, though this can be environment dependent. You could handle nulls such as:']], [[' SELECT SUM(CASE WHEN myColumn=1 THEN 1 ELSE 0 END)\nFROM AD_CurrentView\n']], ['Sql Server equivalent of a COUNTIF aggregate function'], 2], [(582637, 1), [['Note: in my own test  NULL s were not an issue, though this can be environment dependent. You could handle nulls such as:'], ['-10000']], [[' SELECT SUM(CASE WHEN ISNULL(myColumn,0)=1 THEN 1 ELSE 0 END)\nFROM AD_CurrentView\n']], ['Sql Server equivalent of a COUNTIF aggregate function'], 2], [(582940, 0), [['-10000'], ['For proper optimization, it is far better to write separate queries for each case and use IF to guide you to the correct one.']], [[' where (@IDCriteria is null or ID=@IDCriteria)\n  and (@MaxDateCriteria is null or Date<@MaxDateCriteria)\n']], ["Performance implications of sql 'OR' conditions when one alternative is trivial?"], 3], [(582940, 1), [['For proper optimization, it is far better to write separate queries for each case and use IF to guide you to the correct one.'], ['Edit:']], [[' IF @IDCriteria is not null and @MaxDateCriteria is not null\n\n  --query\n  WHERE ID = @IDCriteria and Date < @MaxDateCriteria\n\nELSE IF @IDCriteria is not null\n\n  --query\n  WHERE ID = @IDCriteria\n\nELSE IF @MaxDateCriteria is not null\n\n  --query\n  WHERE Date < @MaxDateCriteria\n\nELSE\n\n  --query\n  WHERE 1 = 1\n']], ["Performance implications of sql 'OR' conditions when one alternative is trivial?"], 3], [(582940, 2), [['Edit:'], ['CustomerName and CustomerNumber are indexed.  Optimizer says : "Clustered\n Index Scan with parallelization".  You can\'t write a worse single table query.']], [[" DECLARE @CustomerNumber int, @CustomerName varchar(30)\n\nSET @CustomerNumber = 123\nSET @CustomerName = '123'\n\nSELECT * FROM Customers\nWHERE (CustomerNumber = @CustomerNumber OR @CustomerNumber is null)\n  AND (CustomerName = @CustomerName OR @CustomerName is null)\n"]], ["Performance implications of sql 'OR' conditions when one alternative is trivial?"], 3], [(586781, 0), [["When you expect that there will be no competition for memory on your production machine at the time the query is run (e.g. the RDBMS cache and filesystem cache won't be thrashed by concurrent queries and/or filesystem activity) then the query time you obtained in standalone (e.g. pgAdminIII on a development PC) mode will be representative.  If there is contention on the production system, query time will degrade proportionally to the estimated cost ratio, as the query with the lower cost does not rely as much on cache  whereas  the query with higher cost will revisit the same data over and over (triggering additional I/O in the absence of a stable cache), e.g.:"], ['Query #1']], [['               cost | time (dedicated machine) |     time (under load) |\n-------------------+--------------------------+-----------------------+\nsome query A:   5k | (all data cached)  900ms | (less i/o)     1000ms |\nsome query B:  50k | (all data cached)  900ms | (lots of i/o) 10000ms |\n']], ['PostgreSQL - fetch the row which has the Max value for a column'], 4], [(586781, 1), [['Query #1'], ['Query #2']], [[' -- incrementally narrow down the result set via inner joins\n--  the CBO may elect to perform one full index scan combined\n--  with cascading index lookups, or as hash aggregates terminated\n--  by one nested index lookup into lives - on my machine\n--  the latter query plan was selected given my memory settings and\n--  histogram\nSELECT\n  l1.*\n FROM\n  lives AS l1\n INNER JOIN (\n    SELECT\n      usr_id,\n      MAX(time_stamp) AS time_stamp_max\n     FROM\n      lives\n     GROUP BY\n      usr_id\n  ) AS l2\n ON\n  l1.usr_id     = l2.usr_id AND\n  l1.time_stamp = l2.time_stamp_max\n INNER JOIN (\n    SELECT\n      usr_id,\n      time_stamp,\n      MAX(trans_id) AS trans_max\n     FROM\n      lives\n     GROUP BY\n      usr_id, time_stamp\n  ) AS l3\n ON\n  l1.usr_id     = l3.usr_id AND\n  l1.time_stamp = l3.time_stamp AND\n  l1.trans_id   = l3.trans_max\n']], ['PostgreSQL - fetch the row which has the Max value for a column'], 4], [(586781, 2), [['Query #2'], ['Query #3']], [[' -- cheat to obtain a max of the (time_stamp, trans_id) tuple in one pass\n-- this results in a single table scan and one nested index lookup into lives,\n--  by far the least I/O intensive operation even in case of great scarcity\n--  of memory (least reliant on cache for the best performance)\nSELECT\n  l1.*\n FROM\n  lives AS l1\n INNER JOIN (\n   SELECT\n     usr_id,\n     MAX(ARRAY[EXTRACT(EPOCH FROM time_stamp),trans_id])\n       AS compound_time_stamp\n    FROM\n     lives\n    GROUP BY\n     usr_id\n  ) AS l2\nON\n  l1.usr_id = l2.usr_id AND\n  EXTRACT(EPOCH FROM l1.time_stamp) = l2.compound_time_stamp[1] AND\n  l1.trans_id = l2.compound_time_stamp[2]\n']], ['PostgreSQL - fetch the row which has the Max value for a column'], 4], [(586781, 3), [['Query #3'], ['-10000']], [[' -- use Window Functions\n-- performs a SINGLE scan of the table\nSELECT DISTINCT ON (usr_id)\n  last_value(time_stamp) OVER wnd,\n  last_value(lives_remaining) OVER wnd,\n  usr_id,\n  last_value(trans_id) OVER wnd\n FROM lives\n WINDOW wnd AS (\n   PARTITION BY usr_id ORDER BY time_stamp, trans_id\n   ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n );\n']], ['PostgreSQL - fetch the row which has the Max value for a column'], 4], [(588914, 0), [['To pick a simplified example, instead of doing this:'], ['If you need to use the index both to select rows and to order them, you have to abstract that IN(1,2) so that it is constant rather than a range, ie:']], [[' SELECT id FROM ids WHERE groups IN(1,2) ORDER BY id\n']], ['Optimizing "ORDER BY" when the result set is very large and it can\'t be ordered by an index'], 3], [(588914, 1), [['If you need to use the index both to select rows and to order them, you have to abstract that IN(1,2) so that it is constant rather than a range, ie:'], ["In other words, the approach I'll take for my original query may be something like:"]], [[" SELECT id FROM ids WHERE grouplist='1,2' ORDER BY id\n"]], ['Optimizing "ORDER BY" when the result set is very large and it can\'t be ordered by an index'], 3], [(588914, 2), [["In other words, the approach I'll take for my original query may be something like:"], ['GROUP BY can use an index if it starts at the left most column of the index and it is in the first non-const non-system table to be processed.  The join then deals with the entire list (which is already ordered), and only those not visible to the current user (which will be a small proportion) are removed by the INNER JOIN.']], [[' SELECT\n    <fields>\nFROM\n  node\n  INNER JOIN viewpermission ON\n    viewpermission_nodeID=node_ID\n    AND viewpermission_usergroupID IN (<...usergroups of current user...>)\n  FORCE INDEX(node_created_and_node_ID)\nGROUP BY\n  node_created, node_ID\n']], ['Optimizing "ORDER BY" when the result set is very large and it can\'t be ordered by an index'], 3], [(590079, 0), [['In practice,'], ['An actual plan on  MAX()  says:']], [[' SELECT TOP 1 Id FROM Table1 ORDER BY Id DESC\n']], ['For autoincrement fields: MAX(ID) vs TOP 1 ID ORDER BY ID DESC'], 3], [(590079, 1), [['An actual plan on  MAX()  says:'], [', while plan for  TOP 1  says:']], [[' SELECT <- AGGREGATE <- TOP <- CLUSTERED INDEX SCAN\n']], ['For autoincrement fields: MAX(ID) vs TOP 1 ID ORDER BY ID DESC'], 3], [(590079, 2), [[', while plan for  TOP 1  says:'], [', i. e.  aggregate  is omitted.']], [[' SELECT <- TOP <- CLUSTERED INDEX SCAN\n']], ['For autoincrement fields: MAX(ID) vs TOP 1 ID ORDER BY ID DESC'], 3], [(590423, 0), [['2) Full Merge Join by Group. This will give you table like'], ['3) A simple script transform that will do the following:']], [['  Account Group Customer\n A1      G1    NULL\n NULL    G2    C1\n NULL    G3    C2\n A2      G4    NULL\n NULL    G5    C3\n NULL    G6    C4\n']], ['Using SSIS to do a between query'], 3], [(590423, 1), [['3) A simple script transform that will do the following:'], ["You'll get"]], [['   If Customer is NULL \n    Store the Account to member variable, and skip this row\n  Else\n    Copy stored Account to the Account column, output the row\n']], ['Using SSIS to do a between query'], 3], [(590423, 2), [["You'll get"], ['-10000']], [['  Account Group Customer\n A1      G2    C1\n A1      G3    C2\n A2      G5    C3\n A2      G6    C4\n']], ['Using SSIS to do a between query'], 3], [(590927, 0), [['Thanks all who suggested SELECT SCOPE_IDENTITY(). I was able to create a stored procedure:'], ['and call the sproc using VB: ']], [[' USE [dbname]\nGO \nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE PROCEDURE [dbo].[spInsert]\n(\n   @Nn varchar(30)\n)\nAS\nBEGIN TRANSACTION InsertRecord \n   INSERT INTO A (Nn) \n   VALUES (@Nn) \n   SELECT NewID = SCOPE_IDENTITY()   -- returns the new record ID of this transaction\n   COMMIT TRANSACTION InsertRecord\n']], ['get new SQL record ID'], 2], [(590927, 1), [['and call the sproc using VB: '], ['I can now use resultID anytime I refer to the newly created ID.']], [[' Dim strNn \'<- var to be passed\'\nSet cn = Server.CreateObject("ADODB.Connection") \nconnectString = "DSN" \ncn.Open connectString, "user", "PW0rd" \nSet rs = Server.CreateObject("ADODB.Recordset") \nset rs = cn.Execute("EXEC [dbname].[dbo].[A] @Nn=" & strNn)\n\'return the value\'\nresultID = rs(0)\n']], ['get new SQL record ID'], 2], [(591105, 0), [['The trick here would probably be to capture the part you actually want with parens:'], ['This would greedily match until the last  order , if you want only until the first occurrence, match lazily:']], [[' (FROM.*) order\n']], ['Please help me create a regular expression to parse my SQL statement'], 2], [(591105, 1), [['This would greedily match until the last  order , if you want only until the first occurrence, match lazily:'], ['-10000']], [[' (FROM.*?) order\n']], ['Please help me create a regular expression to parse my SQL statement'], 2], [(591518, 0), [['I have no idea whether your database supports this or not but try the following'], ['All of the tables have SYSTEM_ prepended to them so the above example would read']], [[' SELECT *\nFROM   INFORMATION_SCHEMA.TABLES\n']], ['How to see all the tables in an HSQLDB database?'], 2], [(591518, 1), [['All of the tables have SYSTEM_ prepended to them so the above example would read'], ['I have no means of testing this and the answer was found on  sourceforge']], [[' SELECT *\nFROM   INFORMATION_SCHEMA.SYSTEM_TABLES\n']], ['How to see all the tables in an HSQLDB database?'], 2], [(595072, 0), [['Code like:'], ['is bad practice. Use either:']], [[" MY_TABLE.MY_DATE_COLUMN >= '03/07/2008'\n"]], ['ORA-01830: date format picture ends before converting entire input string'], 3], [(595072, 1), [['is bad practice. Use either:'], ['or']], [[" MY_TABLE.MY_DATE_COLUMN >= to_date('03/07/2008','mm/dd/yyyy')\n"]], ['ORA-01830: date format picture ends before converting entire input string'], 3], [(595072, 2), [['or'], ['-10000']], [[" MY_TABLE.MY_DATE_COLUMN >= date '2008-03-07'\n"]], ['ORA-01830: date format picture ends before converting entire input string'], 3], [(596629, 0), [['Try this:'], ['For MySQL 4:']], [[' SELECT to1.*\nFROM t_order AS to1\nWHERE\n    to1.date IS NULL AND \n    to1.custId NOT IN (\n        SELECT to2.custId\n        FROM t_order AS to2\n        WHERE to2.date IS NOT NULL\n        GROUP BY to2.custId\n    )\nGROUP BY to1.custId\n']], ['Mysql4: SQL for selecting one or zero record'], 2], [(596629, 1), [['For MySQL 4:'], ['-10000']], [[' SELECT to1.*\nFROM t_order AS to1\nLEFT JOIN t_order AS to2 ON\n    to2.custId = to1.custId AND\n    to2.date IS NOT NULL\nWHERE\n    to1.date IS NULL AND \n    to2.id IS NULL\nGROUP BY to1.custId\n']], ['Mysql4: SQL for selecting one or zero record'], 2], [(600943, 0), [["This probably won't help if table is already in production but the right way to model this is to make version = 0 the permanent version and always increment the version of OLDER material. So when you insert a new version you would say:"], ['Then this query would just be']], [[' UPDATE thetable SET version = version + 1 WHERE id = :id\nINSERT INTO thetable (id, version, title, ...) VALUES (:id, 0, :title, ...)\n']], ['How to convert a SQL subquery to a join'], 2], [(600943, 1), [['Then this query would just be'], ['No subqueries, no MAX aggregation. You always know what the current version is. You never have to select max(version) in order to insert the new record.']], [[' SELECT id, title, ... FROM thetable WHERE version = 0\n']], ['How to convert a SQL subquery to a join'], 2], [(603504, 0), [['There is no implicit convesion from  VARCHAR2  to  RAW . That means that this clause:'], ['will be impicitly converted into:']], [[' WHERE raw_column = :varchar_value\n']], ['How do you convert SYS_GUID() to varchar?'], 3], [(603504, 1), [['will be impicitly converted into:'], ['Use:']], [[' WHERE RAWTOHEX(raw_column) = :varchar_value\n']], ['How do you convert SYS_GUID() to varchar?'], 3], [(603504, 2), [['Use:'], ['instead.']], [[' WHERE raw_column = HEXTORAW(:varchar_value)\n']], ['How do you convert SYS_GUID() to varchar?'], 3], [(603724, 0), [['Starting SQL SERVER 2005, you can do this...'], ['or something like this for 2000 and below versions...']], [[" USE AdventureWorks;\nGO\nWITH OrderedOrders AS\n(\n    SELECT SalesOrderID, OrderDate,\n    ROW_NUMBER() OVER (ORDER BY OrderDate) AS 'RowNumber'\n    FROM Sales.SalesOrderHeader \n) \nSELECT * \nFROM OrderedOrders \nWHERE RowNumber BETWEEN 10 AND 20;\n"]], ['How to implement LIMIT with Microsoft SQL Server?'], 2], [(603724, 1), [['or something like this for 2000 and below versions...'], ['-10000']], [[' SELECT TOP 10 * FROM (SELECT TOP 20 FROM Table ORDER BY Id) ORDER BY Id DESC\n']], ['How to implement LIMIT with Microsoft SQL Server?'], 2], [(603894, 0), [['The definition of one of the tables in question:'], ['A sample of the current contents of that table (regarding the primary key and the "path" column):']], [['                                                    Table "knowledgebase.section"\n           Column           |           Type           |                                  Modifiers\n----------------------------+--------------------------+-----------------------------------------------------------------------------\n section_sid                | integer                  | not null default nextval(\'knowledgebase.section_section_sid_seq\'::regclass)\n section                    | character varying        | not null\n description                | character varying        |\n path                       | ltree                    | not null\n is_active                  | boolean                  | not null default true\n role_sid                   | integer                  | not null\n last_modified_by           | integer                  | not null\n creation_datetime          | timestamp with time zone | not null default now()\n last_modification_datetime | timestamp with time zone | not null default now()\n is_expanded                | boolean                  | not null default false\n section_idx                | tsvector                 |\nIndexes:\n    "section_sid_pkey" PRIMARY KEY, btree (section_sid)\n    "section_section_key" UNIQUE, btree (section)\n    "idxsection_idx" gist (section_idx)\n    "path_gist_idx" gist (path)\nForeign-key constraints:\n    "last_modified_by_fkey" FOREIGN KEY (last_modified_by) REFERENCES "user"."role"(role_sid) ON UPDATE CASCADE ON DELETE RESTRICT\n    "role_sid_fkey" FOREIGN KEY (role_sid) REFERENCES "user"."role"(role_sid) ON  UPDATE CASCADE ON DELETE RESTRICT\nTriggers:\n    section_idx_update BEFORE INSERT OR UPDATE ON knowledgebase.section FOR EACH ROW EXECUTE PROCEDURE tsearch2(\'section_idx\', \'section\')\n']], ["Is PostgreSQL's Ltree module a good fit for threaded comments?"], 2], [(603894, 1), [['A sample of the current contents of that table (regarding the primary key and the "path" column):'], ['-10000']], [['   section_sid | path\n -------------+-------\n           53 | 34.53\n           56 | 56\n           55 | 29.55\n           35 | 35\n           54 | 34.54\n           37 | 30.37\n          ... | ...\n']], ["Is PostgreSQL's Ltree module a good fit for threaded comments?"], 2], [(605182, 0), [['Something like:'], ["If you want to process all names but only the specific desired email for that name, a program such as this will suffice (my views on trying to use a relational algebra such as SQL in a procedural way are pretty brutal, so I won't inflict them on you here):"]], [[" select name, email\nfrom tbl\nwhere name = '[name]'\norder by name, class\nfetch first row only;\n"]], ['distinct sql query'], 2], [(605182, 1), [["If you want to process all names but only the specific desired email for that name, a program such as this will suffice (my views on trying to use a relational algebra such as SQL in a procedural way are pretty brutal, so I won't inflict them on you here):"], ['-10000']], [[' # Get entire table contents sorted in name/class order.\nresultSet = execQuery "select name, email from tbl order by name, class"\n\n# Ensure different on first row\nlastName = resultSet.value["name"] + "X"\n\n# Process every single row returned.\nwhile not resultSet.endOfFile:\n    # Only process the first in each name group (lower classes are ignored).\n    if resultSet.value["name"] != lastName:\n        processRow resultSet.value["name"] resultSet.value["email"]\n    # Store the last name so we can detect next name group.\n    lastName = resultSet.value["name"]\n']], ['distinct sql query'], 2], [(605304, 0), [['-10000'], ['This is a "searched case expression" ( see MSDN ):']], [[" select case\n    when amount = 100 and date is not null then 'something'\n    else 'something else'\n    end\n"]], ['TSQL - How to use a case statement for 2 columns?'], 2], [(605304, 1), [['This is a "searched case expression" ( see MSDN ):'], ['-10000']], [['     CASE\n      WHEN Boolean_expression THEN result_expression [ ...n ] \n      [ ELSE else_result_expression ]  END\n']], ['TSQL - How to use a case statement for 2 columns?'], 2], [(605774, 0), [['For example, you might initially store your data in a table called  IpToCountry20090303 , and your view would be something like this:'], ['When the new data comes in, you can create and populate the  IpToCountry20090310  table. Once the table is populated just update your view:']], [[' CREATE VIEW IpToCountry\nAS\nSELECT * FROM IpToCountry20090303\n']], ['Swapping ms-sql tables'], 2], [(605774, 1), [['When the new data comes in, you can create and populate the  IpToCountry20090310  table. Once the table is populated just update your view:'], ['The switch will be completely atomic, without requiring any explicit locking or transactions. Once the view has been updated, you can simply drop the old table (or keep it if you prefer).']], [[' ALTER VIEW IpToCountry\nAS\nSELECT * FROM IpToCountry20090310\n']], ['Swapping ms-sql tables'], 2], [(606031, 0), [['Auditing log:  Depending on your actual requirements it be sufficient to just create an audit trail like this:'], ['You might extend that to a full table structure: ']], [[' id,  timestamp,  changed_table,  changed_column,  old_value,  new_value,  changed_by\n']], ['Generic version control strategy for select table data within a heavily normalized database'], 2], [(606031, 1), [['You might extend that to a full table structure: '], ["I wrote  a blog about various approaches to versioning , but be warned: it's in German."]], [[' transaction,  table_change,  changed_column\n']], ['Generic version control strategy for select table data within a heavily normalized database'], 2], [(608355, 0), [['If you want a single result set, you would have to omit the name, as in your first post'], ['Now, you could get your desired functionality with a subquery, although not elegant']], [[' SELECT Id, Color, COUNT(*)\nFROM YourTable\nGROUP By Id, Color\n']], ['How to get a proper count in sql server when retrieving a lot of fields?'], 2], [(608355, 1), [['Now, you could get your desired functionality with a subquery, although not elegant'], ['This should work as you desire']], [[' SELECT Id, Color Name, (SELECT COUNT(*) \n                        FROM YourTable \n                        Where Id = O.Id \n                            AND Color = O.Color\n                       ) AS "Count"\nFROM YourTable O\nGROUP BY Id, Color, Name\n']], ['How to get a proper count in sql server when retrieving a lot of fields?'], 2], [(609836, 0), [['No, there is no requirement to do GROUP BY here, this should be solved through a correlated sub-query:'], ["For the specific example you've shown, a GROUP BY query  happens to produce  the correct result. It's still wrong, because the correct result is more a side-effect in this situation."]], [[' SELECT\n  TableA.ID, \n  TableA.Name, \n  TableB.Name, \n  TableB.DateStamp\nFROM\n  TableA\n  INNER JOIN TableB ON \n    TableA.ID = TableB.TableA_ID\n    AND TableB.DateStamp = (\n      SELECT MAX(DateStamp) \n      FROM TableB\n      WHERE TableA_ID = TableA.ID\n    )\n']], ['is this a candidate for a sql groupby query?'], 2], [(609836, 1), [["For the specific example you've shown, a GROUP BY query  happens to produce  the correct result. It's still wrong, because the correct result is more a side-effect in this situation."], ['This relies on the coincidence that  MAX(TableB.Name)  is in fact the value you want to get out, and it is aligned with  MAX(TableB.DateStamp) . But since this correlation is a mere accident, the GROUP BY query is wrong.']], [[' SELECT\n  TableA.ID, \n  TableA.Name, \n  MAX(TableB.Name) Max_TableBName, \n  MAX(TableB.DateStamp) Max_TableBDateStamp\nFROM\n  TableA\n  INNER JOIN TableB ON TableA.ID = TableB.TableA_ID\nGROUP BY\n  TableA.ID, \n  TableA.Name\n']], ['is this a candidate for a sql groupby query?'], 2], [(610679, 0), [['Instead of updating counts per day, week etc. just INSERT a row into a table each time an activity happens like this:'], ['Now your reports are very simple like:']], [[" insert into activities (activity_date, activity_info) \nvalues (CURRENT_TIMESTAMP, 'whatever');\n"]], ['Database structure for holding statistics by day, week, month, year'], 3], [(610679, 1), [['Now your reports are very simple like:'], ['or']], [[" select count(*) from activities\nwhere activity_date between '2008-01-01' and '2008-01-07';\n"]], ['Database structure for holding statistics by day, week, month, year'], 3], [(610679, 2), [['or'], ['-10000']], [[' select YEARWEEK(`activity_date`) as theweek, count(*)\ngroup by theweek\n']], ['Database structure for holding statistics by day, week, month, year'], 3], [(611011, 0), [['In  MS SQL  and  Oracle :'], ['In  MySQL :']], [[' SELECT *\nFROM\n  (\n  SELECT ci.*, iv.*, \n        ROW_NUMBER() OVER (PARTITION BY CartItems.cart_id ORDER BY ItemValues.value DESC)\n  FROM   CartItems ci\n  INNER JOIN ItemValues iv\n     ON CartItems.item_id=ItemValues.item_id\n  ) s\nWHERE rn = 1\n']], ['SQL MAX of column including its primary key'], 2], [(611011, 1), [['In  MySQL :'], ['-10000']], [[' SELECT\nFROM\n  (\n  SELECT ci.*,\n         (\n         SELECT id\n         FROM ItemValues iv\n         WHERE iv.item_id = ci.item_id\n         ORDER BY\n               value DESC\n         LIMIT 1\n         ) AS maxitem\n  FROM   CartItems ci\n  ) iv, ItemValues ivo\nWHERE ivo.id = iv.maxitem\n']], ['SQL MAX of column including its primary key'], 2], [(611402, 0), [['Number of records inserted yesterday:'], ['For the year:']], [[' select count(*) from mytable where date(myfield)=date(date_sub(now(),interval 1 day));\n']], ['Count rows added today, yesterday...and other times'], 2], [(611402, 1), [['For the year:'], ['And so on...']], [[' select count(*) from mytable where year(myfield)=year(now());\n']], ['Count rows added today, yesterday...and other times'], 2], [(617687, 0), [['SQL 2005 +:'], ['SQL 2000, SQL 7:']], [[' CREATE INDEX IX_Blah ON Blah (FirstName, Rank DESC) INCLUDE (Position)\n']], ['How to properly create an index'], 2], [(617687, 1), [['SQL 2000, SQL 7:'], ['-10000']], [[' CREATE INDEX IX_Blah ON Blah (FirstName, Rank DESC, Position)\n']], ['How to properly create an index'], 2], [(618928, 0), [['Use  SAVEPOINT s , e.g.'], ["Based on the information provided so far (and my understanding of it) it appears that you will have to re-engineer you logging SPs, either to use variables, or to use files, or to allow them to run 'after the fact' as follows:"]], [[' BEGIN TRANSACTION  \n\n    EXEC myLogSP\n\n    SAVE TRANSACTION savepointA\n    EXEC @err = myBusinessSPa\n    IF (@err <> 0) BEGIN\n        ROLLBACK TRANSACTION savepointA\n        COMMIT\n        RETURN -1\n    END\n\n    EXEC myLogSP\n\n    SAVE TRANSACTION savepointB\n    EXEC @err = myBusinessSPb\n    IF (@err <> 0) BEGIN\n        ROLLBACK TRANSACTION savepointB\n        COMMIT\n        RETURN -1\n    END\n\n    EXEC myLogSP\n\n    SAVE TRANSACTION savepointC\n    EXEC @err = myBusinessSPc\n    IF (@err <> 0) BEGIN\n        ROLLBACK TRANSACTION savepointC\n        COMMIT\n        RETURN -1\n    END\n\n    EXEC myLogSP\n\nCOMMIT TRANSACTION\n']], ['Commiting only Specific Changes made inside a TRANSACTION which may ROLLBACK'], 2], [(618928, 1), [["Based on the information provided so far (and my understanding of it) it appears that you will have to re-engineer you logging SPs, either to use variables, or to use files, or to allow them to run 'after the fact' as follows:"], ['-10000']], [[' BEGIN TRANSACTION  \n\n    SAVE TRANSACTION savepointA\n    EXEC @err = myBusinessSPa\n    IF (@err <> 0) BEGIN\n        ROLLBACK TRANSACTION savepointA\n        EXEC myLogSPA -- the call to myBusinessSPa was attempted/failed\n        COMMIT\n        RETURN -1\n    END\n\n    SAVE TRANSACTION savepointB\n    EXEC @err = myBusinessSPb\n    IF (@err <> 0) BEGIN\n        ROLLBACK TRANSACTION savepointB\n        EXEC myLogSPA -- the call to myBusinessSPa originally succeeded\n        EXEC myLogSPB -- the call to myBusinessSPb was attempted/failed\n        COMMIT\n        RETURN -1\n    END\n\n    SAVE TRANSACTION savepointC\n    EXEC @err = myBusinessSPc\n    IF (@err <> 0) BEGIN\n        ROLLBACK TRANSACTION savepointC\n        EXEC myLogSPA -- the call to myBusinessSPa originally succeeded\n        EXEC myLogSPB -- the call to myBusinessSPb originally succeeded\n        EXEC myLogSPC -- the call to myBusinessSPc was attempted/failed\n        COMMIT\n        RETURN -1\n    END\n\n    EXEC myLogSPA -- the call to myBusinessSPa succeeded\n    EXEC myLogSPB -- the call to myBusinessSPb succeeded\n    EXEC myLogSPC -- the call to myBusinessSPc succeeded\n\nCOMMIT TRANSACTION\n']], ['Commiting only Specific Changes made inside a TRANSACTION which may ROLLBACK'], 2], [(619230, 0), [['Even better than the ternary is the double-question-mark (??) operator. Takes the first non-null value. So:'], ['would give you a parm with a value of DBNull.Value, but']], [[' string x = null;\ncommand.Parameters.AddParameter(\n     new SqlParameter("@column", (object)x ?? DBNull.Value);\n']], ['.Net inserting NULL values into SQL Server database from variable values'], 2], [(619230, 1), [['would give you a parm with a value of DBNull.Value, but'], ['Would give you a parm with "A String" as the value.']], [[' string x = "A String";\ncommand.Parameters.AddParameter(\n     new SqlParameter("@column", (object)x ?? DBNull.Value);\n']], ['.Net inserting NULL values into SQL Server database from variable values'], 2], [(620740, 0), [['For example:'], ["'SO formatting"]], [[' Sub ToText()\nDim frm, mdl\n\nFor Each frm In CurrentProject.AllForms\n    Application.SaveAsText acForm, frm.Name, "c:\\docs\\" _ \n        & frm.Name & ".txt" \n']], ['Is there a way to get a difference report on two Jet (.mdb) databases?'], 3], [(620740, 1), [["'SO formatting"], ["'SO formatting"]], [[' Next\n\nFor Each mdl In CurrentProject.AllModules\n    Application.SaveAsText acModule, mdl.Name, "c:\\docs\\" _\n        & mdl.Name & ".txt"\n']], ['Is there a way to get a difference report on two Jet (.mdb) databases?'], 3], [(620740, 2), [["'SO formatting"], ['-10000']], [[' Next\nEnd Sub\n']], ['Is there a way to get a difference report on two Jet (.mdb) databases?'], 3], [(620788, 0), [['So far I see nothing complicated in your request:'], ['If you want to count "affected blog posts" only, I think that\'s the way:']], [[' SELECT\n  tag_id,\n  COUNT(blog_post_id) + COUNT(blog_comment_id) tag_count\nFROM\n  Taggings\nGROUP BY\n  tag_id\nORDER BY\n  COUNT(blog_post_id) + COUNT(blog_comment_id) DESC\n']], ['A difficult SQL query: tag popularity for models with complex associations'], 2], [(620788, 1), [['If you want to count "affected blog posts" only, I think that\'s the way:'], ['-10000']], [[' SELECT\n  t.id    tag_id,\n  t.name  tag_name,\n  COUNT(DISTINCT COALESCE(x.blog_post_id, c.blog_post_id)) tag_count\nFROM\n  Tags                    t  \n  INNER JOIN Taggings     x ON x.tag_id = t.id\n  LEFT  JOIN BlogComments c ON c.id     = x.blog_comment_id\nGROUP BY\n  t.id,\n  t.name\nORDER BY\n  COUNT(DISTINCT COALESCE(x.blog_post_id, c.blog_post_id)) DESC\n']], ['A difficult SQL query: tag popularity for models with complex associations'], 2], [(622031, 0), [["If the user searches for 'Smith', you could do two selects such that:"], ['and then']], [[" SELECT\n  name\nFROM\n  companies\nWHERE\n  name < 'Smith'\nORDER BY\n  name DESC\nLIMIT 10\n"]], ['Finding alphabetical position in a large list'], 2], [(622031, 1), [['and then'], ['You could do a UNION to fetch that in one query, the above is just simplified.']], [[" SELECT\n  name\nFROM\n  companies\nWHERE\n  name >= 'Smith'\nORDER BY\n  name\nLIMIT 10\n"]], ['Finding alphabetical position in a large list'], 2], [(626870, 0), [['Change the  AND  to  OR'], ['-10000']], [[' DECLARE @imported BIT\n\nSELECT id, import_id, name FROM Foo WHERE\n    (@imported = 1 AND import_id IS NOT NULL)\n    OR (@imported = 0 AND import_is IS NULL)\n']], ['SQL HELP - Conditional where clause based on a BIT variable - SQL Server'], 3], [(626870, 1), [['-10000'], ['wich is equivalent to']], [['     @imported = 1 \n    AND import_id IS NOT NULL\n    AND @imported = 0 \n    AND import_is IS NULL\n']], ['SQL HELP - Conditional where clause based on a BIT variable - SQL Server'], 3], [(626870, 2), [['wich is equivalent to'], ['what results in two pair of clauses that completely negate each other']], [['     @imported = 1 AND @imported = 0 \n    AND import_id IS NOT NULL AND import_is IS NULL\n']], ['SQL HELP - Conditional where clause based on a BIT variable - SQL Server'], 3], [(630472, 0), [["If you don't want to use a CLR function then you could create a standard user-defined function. This will do the job although it won't be as efficient:"], ['And then select from your table like so:']], [[" CREATE FUNCTION dbo.RemoveNonNumerics(@in VARCHAR(255))\nRETURNS VARCHAR(255)\nAS\nBEGIN\n    DECLARE @out VARCHAR(255)\n\n    IF (@in IS NOT NULL)\n    BEGIN\n        SET @out = ''\n\n        WHILE (@in <> '')\n        BEGIN\n            IF (@in LIKE '[0-9]%')\n                SET @out = @out + SUBSTRING(@in, 1, 1)\n\n            SET @in = SUBSTRING(@in, 2, LEN(@in) - 1)\n        END\n    END\n\n    RETURN(@out)\nEND\n"]], ['Removing nonnumerical data out of a number + SQL'], 2], [(630472, 1), [['And then select from your table like so:'], ['-10000']], [[' SELECT dbo.RemoveNonNumerics(your_column) AS your_tidy_column\nFROM your_table\n']], ['Removing nonnumerical data out of a number + SQL'], 2], [(630847, 0), [['Use something like:'], ['To search ALL code for a String:']], [["     SELECT * \n      FROM USER_SOURCE \n     WHERE type='PACKAGE' \n       AND NAME='PACKAGE_NAME' \n  ORDER BY type, name, line;\n"]], ['Search PL/SQL Code'], 2], [(630847, 1), [['To search ALL code for a String:'], ['Note that view code is not included in the  _SOURCE  tables.  View code is stored in  [USER|ALL|DBA]_VIEWS.TEXT  which is a LONG column and difficult to query.']], [["   SELECT *\n    FROM ALL_SOURCE\n   WHERE UPPER(text) LIKE UPPER('%what I am searching for%')\nORDER BY type, name, line\n"]], ['Search PL/SQL Code'], 2], [(630943, 0), [['The syntax is'], ["b can be a join itself. For inner joins it doesn't matter, but for outer you can control the order of the joins like this:"]], [['    a JOIN b\n    ON expression relating b to all of the tables before\n']], ['Should I use the sql JOIN keyword for complex joins on multiple tables?'], 3], [(630943, 1), [["b can be a join itself. For inner joins it doesn't matter, but for outer you can control the order of the joins like this:"], ['Here is your query:']], [[' select * from\n   a left join\n      d join c\n      on d.i = c.i\n   on a.k = d.k \n']], ['Should I use the sql JOIN keyword for complex joins on multiple tables?'], 3], [(630943, 2), [['Here is your query:'], ['-10000']], [[" select * \n    from tbA A\n    join tbB B on A.ID = B.ID\n    join tbC C on B.ID2 = C.ID2\n    join tbD D on A.ID = D.ID and C.ID3 = D.ID3 and B.ID4 = D.ID4\nwhere \n    A.Foo='Foo'\n"]], ['Should I use the sql JOIN keyword for complex joins on multiple tables?'], 3], [(631625, 0), [['The solution without compensating for negative votes (I include this one because its much easier to read/understand):'], ['Full solution:']], [[" SELECT object_id\n,      SUM(vote) + '/' + total AS normalized_score\nFROM   tabel\n,      (\n       SELECT sum(vote) AS total\n       FROM   tabel\n       ) \nGROUP BY object_id, total\n"]], ['Rollup Column for Normalized Sums (SQL) - Part 1'], 2], [(631625, 1), [['Full solution:'], ["(I don't have access to MySQL, so I wrote a query in Oracle and replaced || for +. Hope it works in MySQL or at least helps :))"]], [[" SELECT object_id\n,      SUM(vote + minvote) + '/' + (total + minvote * count) AS normalized_score\nFROM   tabel\n,      (\n       SELECT sum(vote) AS total\n       ,      CASE WHEN MIN(vote) < 0 THEN\n                  -MIN(vote)\n              END AS minvote\n       ,      COUNT(*) AS count\n       FROM   tabel\n       ) \nGROUP BY object_id, total, minvote, count\n"]], ['Rollup Column for Normalized Sums (SQL) - Part 1'], 2], [(635233, 0), [["My solution from SQL Server - same as Dems but I put in a min baseline myself.\nIt assumes there are no gaps - that is there is an entry for each day for each person.\nIf that isn't true then I'd have to loop."], ['I created the test table with the following:']], [[" DECLARE @run_date datetime\nDECLARE @min_date datetime\n\nSET @run_date = {d '2009-01-03'}\n\n-- get day before any entries in the table to use as a false baseline date\nSELECT @min_date = DATEADD(day, -1, MIN(processing_date)) FROM history_of_jerkiness\n\n-- get last not a jerk date for each name that is before or on the run date\n-- the difference in days between the run date and the last not a jerk date is the number of days as a jerk\nSELECT [name], DATEDIFF(day, MAX(processing_date), @run_date)\nFROM (\n     SELECT processing_date, [name], is_jerk\n     FROM history_of_jerkiness\n     UNION ALL\n     SELECT DISTINCT @min_date, [name], 0\n     FROM history_of_jerkiness ) as data\nWHERE is_jerk = 0\n  AND processing_date <= @run_date\nGROUP BY [name]\nHAVING DATEDIFF(day, MAX(processing_date), @run_date) > 0\n"]], ['SQL Dates Query - how long has this condition been true'], 2], [(635233, 1), [['I created the test table with the following:'], ['-10000']], [[" CREATE TABLE history_of_jerkiness (processing_date datetime, [name] varchar(20), is_jerk bit)\n\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-01'}, 'Matt', 1)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-01'}, 'Bob', 0)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-01'}, 'Alex', 1)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-01'}, 'Carol', 1)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-02'}, 'Matt', 1)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-02'}, 'Bob', 1)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-02'}, 'Alex', 0)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-02'}, 'Carol', 1)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-03'}, 'Matt', 1)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-03'}, 'Bob', 1)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-03'}, 'Alex', 1)\nINSERT INTO history_of_jerkiness (processing_date, [name], is_jerk) VALUES ({d '2009-01-03'}, 'Carol', 0) \n"]], ['SQL Dates Query - how long has this condition been true'], 2], [(635836, 0), [['If enabled is always 1 or 0, you can do:'], ["If it's another value, perhaps:"]], [[' SELECT \n   COUNT(*) as total_count,\n   SUM(enabled) as enabled_count\n FROM widget\n']], ['How can I get both the count of a subset as well as the count of the total set in one query?'], 2], [(635836, 1), [["If it's another value, perhaps:"], ['-10000']], [[" SELECT\n   COUNT(*) as total_count,\n   SUM( CASE WHEN enabled in ('enabled value 1', 'enabled value 2') \n        THEN 1\n        ELSE 0\n        END\n      ) as enabled_count\nFROM widget\n"]], ['How can I get both the count of a subset as well as the count of the total set in one query?'], 2], [(637120, 0), [['If bank account pairs is known in you app you just write:'], ['If list of bank account pairs is a subquery, then write something like this:']], [[' (bank = 1 AND account = 2) OR (bank = 3 AND account = 4) OR ...\n']], ['SQL: filter on a combination of two column values'], 2], [(637120, 1), [['If list of bank account pairs is a subquery, then write something like this:'], ['-10000']], [[' SELECT * FROM balances b LEFT JOIN bank_account_pairs p ON ...\nWHERE b.bank = p.bank AND b.account = p.account AND ...\n']], ['SQL: filter on a combination of two column values'], 2], [(637894, 0), [["Here's a modification of Damien_The_Unbeliever's solution that allows one default per FormID."], ['But the serious relational folks will tell you this information should just be in another table.']], [[' CREATE VIEW form_defaults\nAS\nSELECT FormID\nFROM whatever\nWHERE isDefault = 1\nGO\nCREATE UNIQUE CLUSTERED INDEX ix_form_defaults on form_defaults (FormID)\nGO\n']], ['Constraint for only one record marked as default'], 2], [(637894, 1), [['But the serious relational folks will tell you this information should just be in another table.'], ['-10000']], [[' CREATE TABLE form\nFormID int NOT NULL PRIMARY KEY\nDefaultWhateverID int FOREIGN KEY REFERENCES Whatever(ID)\n']], ['Constraint for only one record marked as default'], 2], [(638091, 0), [['Anyway, you missed the path of the exportfile (bassed on the commands fo give permissions). Then  You wrote:'], ['instead of']], [[' file=ABCD1_EXCLUDE_CLOB_TABS_BAK.dmp\n']], ['Error importing oracle dump'], 3], [(638091, 1), [['instead of'], ['Then, the result export command to work is:']], [[' file=E:\\ABCD1_EXCLUDE_CLOB_TABS_BAK.dmp\n']], ['Error importing oracle dump'], 3], [(638091, 2), [['Then, the result export command to work is:'], ['-10000']], [[' imp atlantis/atlantis@orcl file=E:\\ABCD1_EXCLUDE_CLOB_TABS_BAK.dmp indexfile=index.sql full=y log=imp.log\n']], ['Error importing oracle dump'], 3], [(638705, 0), [["I'm able to run an SQL query by piping it to SQL*Plus:"], ['Give']], [[' @echo select count(*) from table; | sqlplus username/password@database\n']], ['How can I issue a single command from the command line through sql plus?'], 2], [(638705, 1), [['Give'], ['a try.']], [[' @echo execute some_procedure | sqlplus username/password@databasename\n']], ['How can I issue a single command from the command line through sql plus?'], 2], [(640286, 0), [['Some SQL ...'], ['And a User Defined Function (UDF).']], [[' SELECT Statistics.Month, Sum(([SentTo])) AS [Sum Sent], fMedian("Statistics","Month",[Month],"SentTo") AS [Median Sent]\nFROM Statistics\nGROUP BY Statistics.Month;\n']], ['Best Way To Calculate A Median In Access 2007 When Using Group By'], 2], [(640286, 1), [['And a User Defined Function (UDF).'], ['From:  LessThanDot Wiki']], [[' Function fMedian(SQLOrTable, GroupFieldName, GroupFieldValue, MedianFieldName)\nDim rs As DAO.Recordset\n\nSet db = CurrentDb\nSet rs1 = db.OpenRecordset(SQLOrTable, dbOpenDynaset)\n\nIf IsDate(GroupFieldValue) Then\n    GroupFieldValue = "#" & GroupFieldValue & "#"\nElseIf Not IsNumeric(GroupFieldValue) Then\n    GroupFieldValue = "\'" & Replace(GroupFieldValue, "\'", "\'\'") & "\'"\nEnd If\n\nrs1.Filter = GroupFieldName & "=" & GroupFieldValue\nrs1.Sort = MedianFieldName\n\nSet rs = rs1.OpenRecordset()\nrs.Move (rs.RecordCount / 2)\n\nIf rs.RecordCount Mod 2 = 0 Then\n    varMedian1 = rs.Fields(MedianFieldName)\n    rs.MoveNext\n    fMedian = (varMedian1 + rs.Fields(MedianFieldName)) / 2\nElse\n    fMedian = rs.Fields(MedianFieldName)\nEnd If\n\nEnd Function\n']], ['Best Way To Calculate A Median In Access 2007 When Using Group By'], 2], [(643137, 0), [['You could also use the following, although it does introduce spaces between fields.'], ['Output will be like:']], [[" set colsep ,     -- separate columns with a comma\nset pagesize 0   -- No header rows\nset trimspool on -- remove trailing blanks\nset headsep off  -- this may or may not be useful...depends on your headings.\nset linesize X   -- X should be the sum of the column widths\nset numw X       -- X should be the length you want for numbers (avoid scientific notation on IDs)\n\nspool myfile.csv\n\nselect table_name, tablespace_name \n  from all_tables\n where owner = 'SYS'\n   and tablespace_name is not null;\n"]], ['How do I spool to a CSV formatted file using SQLPLUS?'], 3], [(643137, 1), [['Output will be like:'], ['Something like this might work...(my sed skills are very rusty, so this will likely need work)']], [['     TABLE_PRIVILEGE_MAP           ,SYSTEM                        \n    SYSTEM_PRIVILEGE_MAP          ,SYSTEM                        \n    STMT_AUDIT_OPTION_MAP         ,SYSTEM                        \n    DUAL                          ,SYSTEM \n...\n']], ['How do I spool to a CSV formatted file using SQLPLUS?'], 3], [(643137, 2), [['Something like this might work...(my sed skills are very rusty, so this will likely need work)'], ['-10000']], [[" sed 's/\\s+,/,/' myfile.csv \n"]], ['How do I spool to a CSV formatted file using SQLPLUS?'], 3], [(645102, 0), [['Next one:'], ['Previous one:']], [[' SELECT * FROM `bb_topics` \n      WHERE `topic_id` = \n      (select min(`topic_id`) FROM `bb_topics` where `topic_id` > 123\n         and `topic_poster` = 5)\n']], ['SQL - find next and previous rows given a particular WHERE clause'], 3], [(645102, 1), [['Previous one:'], ['Both:']], [[' SELECT * FROM `bb_topics` \n      WHERE `topic_id` = \n      (select max(`topic_id`) FROM `bb_topics` where `topic_id` < 123\n         and `topic_poster` = 5)\n']], ['SQL - find next and previous rows given a particular WHERE clause'], 3], [(645102, 2), [['Both:'], ['-10000']], [[' SELECT * FROM `bb_topics` \n      WHERE `topic_id` = \n      (select min(`topic_id`) FROM `bb_topics` where `topic_id` > 123\n                     and `topic_poster` = 5)\n      or `topic_id` = \n      (select max(`topic_id`) FROM `bb_topics` where `topic_id` < 123\n                        and `topic_poster` = 5)\n']], ['SQL - find next and previous rows given a particular WHERE clause'], 3], [(648308, 0), [['JOIN  solution:'], ['Note that you need to list all  t.*  columns in the  GROUP BY  clause, unless you use MySQL or SQLite.']], [[' SELECT t.*\nFROM topics t\n JOIN tags_topics t1 ON (t.id = t1.topicId AND t1.tagId = 1)\n JOIN tags_topics t2 ON (t.id = t2.topicId AND t2.tagId = 2)\n JOIN tags_topics t3 ON (t.id = t3.topicId AND t3.tagId = 3)\n']], ['Filtering from join-table'], 4], [(648308, 1), [['Note that you need to list all  t.*  columns in the  GROUP BY  clause, unless you use MySQL or SQLite.'], ['Subquery solution:']], [[' SELECT t.*\nFROM topics t JOIN tags_topics tt \n  ON (t.id = tt.topicId AND tt.tagId IN (1,2,3))\nGROUP BY t.id, ...\nHAVING COUNT(*) = 3;\n']], ['Filtering from join-table'], 4], [(648308, 2), [['Subquery solution:'], ['Simplifies  GROUP BY  clause by isolating search in a subquery.']], [[' SELECT t.*\nFROM topics t\nWHERE t.id = ANY (SELECT topicId FROM tags_topics tt WHERE tt.tagId = 1)\n  AND t.id = ANY (SELECT topicId FROM tags_topics tt WHERE tt.tagId = 2)\n  AND t.id = ANY (SELECT topicId FROM tags_topics tt WHERE tt.tagId = 3);\n']], ['Filtering from join-table'], 4], [(648308, 3), [['Simplifies  GROUP BY  clause by isolating search in a subquery.'], ['-10000']], [[' SELECT t.*\nFROM topics t\nWHERE t.id IN (\n  SELECT tt.topicId FROM tags_topics tt \n  WHERE tt.tagId IN (1,2,3))\n  GROUP BY tt.id HAVING COUNT(*) = 3\n);\n']], ['Filtering from join-table'], 4], [(649066, 0), [['Possibly:'], ['edit: perhaps you would benefit from unioning the tables  before  counting.  e.g.']], [[' select table1.a, table1.b\nfrom table1\nwhere table1.a not in (select a from table2)\nunion all\nselect table1.a, table1.b+table2.b as b\nfrom table1\ninner join table2 on table1.a = table2.a\n']], ['How do I merge data from two tables in a single database call into the same columns?'], 2], [(649066, 1), [['edit: perhaps you would benefit from unioning the tables  before  counting.  e.g.'], ['-10000']], [[' select id, count() as count from\n(select id from table1\n union all\n select id from table2)\n']], ['How do I merge data from two tables in a single database call into the same columns?'], 2], [(649374, 0), [['One thought would be to store a pattern with each rule, like so:'], ['Or (playing off the answer that just came in) to DRY things up further by writing:']], [[" ID Key CTID Rule        Message\n1 Help 1    '[%:%:%]'    'This is the default message'\n2 Help 1    '[375:%:%]'  'This is the SP375 message'\n3 Help 1    '[377:%:%]'  'This is the SP377 message'\n4 Help 1    '[%:13:%]'   'This is the Dist13 message'\n5 Help 1    '[375:13:%]' 'This is the SP375/Dist13 message'\n"]], ['Sparsely populated lookup table in SQL'], 2], [(649374, 1), [['Or (playing off the answer that just came in) to DRY things up further by writing:'], ['-10000']], [[' where ml.[Key] = @Key\n  and ml.CampaignTypeID = @CampaignTypeID\n  and IsNull(ml.ServiceProviderID = @ServiceProviderID,true)\n  and IsNull(ml.DistributorID     = @DistributorID,    true)\n  and IsNull(ml.CampaignID        = @CampaignID,       true)\n']], ['Sparsely populated lookup table in SQL'], 2], [(650178, 0), [['-10000'], ['If accented or non-Latin characters don\'t fall under your definition of "weird stuff", you may use:']], [[" SELECT  *\nFROM    Table\nWHERE   name ~ '^[^a-zA-Z]'\n"]], ["In Postgres / SQL how can I search for names that doesn't start with a letter?"], 2], [(650178, 1), [['If accented or non-Latin characters don\'t fall under your definition of "weird stuff", you may use:'], ['-10000']], [[" SELECT  *\nFROM    Table\nWHERE   name ~ '^[^[:alpha:]]'\n"]], ["In Postgres / SQL how can I search for names that doesn't start with a letter?"], 2], [(653922, 0), [['All the answers are agreeing that there are three primary tables called TableA, TableB, and TableC, each containing its own ID column:'], ['It is not clear from the description of the problem whether a single B value can have multiple A parent entries.  It is clear that a single C can have multiple B parent entries.  If a B is tied to a single A, the design of TableB can be revised to:']], [[' TableA (A_ID PRIMARY KEY, ...)\nTableB (B_ID PRIMARY KEY, ...)\nTableC (C_ID PRIMARY KEY, ...)\n']], ['Best schema design for table relationship that enforces integrity'], 9], [(653922, 1), [['It is not clear from the description of the problem whether a single B value can have multiple A parent entries.  It is clear that a single C can have multiple B parent entries.  If a B is tied to a single A, the design of TableB can be revised to:'], ["If a B can be associated with several different A's, then the connection is best represented by a joining table:"]], [[' TableB (B_ID, ..., A_ID REFERENCES TableA)\n']], ['Best schema design for table relationship that enforces integrity'], 9], [(653922, 2), [["If a B can be associated with several different A's, then the connection is best represented by a joining table:"], ["For the purposes of this answer, I'm going to assume that any B is associated with a single A, so the structure of TableB includes A_ID as a foreign key.  Since a single C can be associated with multiple B's, the relevant structure is a new joining table:"]], [[' A_and_B (A_ID REFERENCES TableA,\n         B_ID REFERENCES TableB,\n         PRIMARY KEY (A_ID, B_ID)\n        )\n']], ['Best schema design for table relationship that enforces integrity'], 9], [(653922, 3), [["For the purposes of this answer, I'm going to assume that any B is associated with a single A, so the structure of TableB includes A_ID as a foreign key.  Since a single C can be associated with multiple B's, the relevant structure is a new joining table:"], ['Simplifying (by omitting rules about deferrability and immediacy) an assertion looks like:']], [[' B_and_C (B_ID REFERENCES TableB,\n         C_ID REFERENCES TableC,\n         PRIMARY KEY (B_ID, C_ID)\n        )\n']], ['Best schema design for table relationship that enforces integrity'], 9], [(653922, 4), [['Simplifying (by omitting rules about deferrability and immediacy) an assertion looks like:'], ['So, once we have a set of design decisions, we can write an assertion to validate the data.  Given tables TableA, TableB (with foreign key A_ID), TableC and B_and_C, the requirement is that the number of occurrences of a given C_ID across a complete A is 1.']], [[' CREATE ASSERTION assertion_name CHECK ( <search_condition> )\n']], ['Best schema design for table relationship that enforces integrity'], 9], [(653922, 5), [['So, once we have a set of design decisions, we can write an assertion to validate the data.  Given tables TableA, TableB (with foreign key A_ID), TableC and B_and_C, the requirement is that the number of occurrences of a given C_ID across a complete A is 1.'], ['[ Amended :  I think this is more accurate:']], [[' CREATE ASSERTION only_one_instance_of_c_per_a CHECK\n(\n     NOT EXISTS (\n         SELECT A_ID, COUNT(C_ID)\n             FROM TableB JOIN B_and_C USING (C_ID)\n             GROUP BY A_ID\n             HAVING COUNT(C_ID) > 1\n     )\n)\n']], ['Best schema design for table relationship that enforces integrity'], 9], [(653922, 6), [['[ Amended :  I think this is more accurate:'], ["From the amended description of briefs (A), submissions (B) and members (C), it is clear that a single submission applies to just one brief, so that submissions can have a simple foreign key that identifies the brief it is a submission for.  And a member can only collaborate on one submission for a particular brief.  There will be a table of 'submission_collaborators' with columns to identify the submission and member, the combination is the primary key and each column is a foreign key."]], [[' CREATE ASSERTION only_one_instance_of_c_per_a CHECK\n(\n     NOT EXISTS (\n         SELECT A_ID, C_ID, COUNT(*)\n             FROM TableB JOIN B_and_C USING (C_ID)\n             GROUP BY A_ID, C_ID\n             HAVING COUNT(*) > 1\n     )\n)\n']], ['Best schema design for table relationship that enforces integrity'], 9], [(653922, 7), [["From the amended description of briefs (A), submissions (B) and members (C), it is clear that a single submission applies to just one brief, so that submissions can have a simple foreign key that identifies the brief it is a submission for.  And a member can only collaborate on one submission for a particular brief.  There will be a table of 'submission_collaborators' with columns to identify the submission and member, the combination is the primary key and each column is a foreign key."], ['Hence, the requirement is that the following query must return no rows:']], [[' Briefs(Brief_ID, ...)\nSubmissions(Submission_ID, Brief_ID REFERENCES Briefs, ...)\nMembers(Member_ID, ...)\nSubmission_Collaborators(Submission_ID REFERENCES Submissions,\n                         Member_ID REFERENCES Members,\n                         PRIMARY KEY (Submission_ID, Member_ID)\n                        )\n']], ['Best schema design for table relationship that enforces integrity'], 9], [(653922, 8), [['Hence, the requirement is that the following query must return no rows:'], ['This is the same query that I embedded in the CREATE ASSERTION (second variant).  You can dig out extra information (brief title, submission title, member name, various dates, etc) as well, but the core of the issue is that the query shown must return no data.']], [[' SELECT s.brief_id, c.member_id, COUNT(*)\n    FROM submissions AS s JOIN submission_collaborators AS c\n         ON s.submission_id = c.submission_id\n    GROUP BY s.brief_id, c.member_id\n    HAVING COUNT(*) > 1\n']], ['Best schema design for table relationship that enforces integrity'], 9], [(654865, 0), [['In other words,'], ['is a bad way;']], [[' string query = "SELECT * FROM " + ConfigurationManager.AppSettings.Get("schema") + ".table";\n']], ['Should the schema always be explicitly defined in the SQL statement?'], 2], [(654865, 1), [['is a bad way;'], ['is a good way.']], [[' SQLCommand("SET search_path = " + ConfigurationManager.AppSettings.Get("schema"), connection).ExecuteNonQuery();\nstring query = "SELECT * FROM table";\n']], ['Should the schema always be explicitly defined in the SQL statement?'], 2], [(655446, 0), [['Example:'], ['Example:']], [[' Table Name - Users\n\nUserID    UserName    UserRoleID\n1         JohnD       1\n2         CourtneyC   1\n3         Benjamin    2\n\nTable Name - UserRoles\n\nUserRoleID    Desc\n1             Admin\n2             Moderator\n']], ['What exactly is a foreign key?'], 3], [(655446, 1), [['Example:'], ['Output would then be:']], [[' SELECT\n    a.UserID, \n    a.UserName, \n    b.Desc as [UserRole]\nFROM \n    Users a INNER JOIN \n        UserRoles b ON a.UserRoleID = b.UserRoleID\n']], ['What exactly is a foreign key?'], 3], [(655446, 2), [['Output would then be:'], ['-10000']], [[' UserID    UserName    User Role\n1         JohnD       Admin\n2         CourneyC    Admin\n3         Benjamin    Moderator\n']], ['What exactly is a foreign key?'], 3], [(656012, 0), [['Your problem is that you need another where clause in the subquery that identifies what makes a duplicate:'], ['As noted by another answerer, an outer join is probably a more concise approach. My above example was just an attempt to explain using your current query to be more understandible. Either approach could technically work.']], [[' INSERT INTO destTable\nSELECT Field1,Field2,Field3,... \nFROM srcTable\nWHERE NOT EXISTS(SELECT * \n                 FROM destTable \n                 WHERE (srcTable.Field1=destTable.Field1 and\n                       SrcTable.Field2=DestTable.Field2...etc.)\n                 )\n']], ['Copy rows from one table to another, ignoring duplicates'], 3], [(656012, 1), [['As noted by another answerer, an outer join is probably a more concise approach. My above example was just an attempt to explain using your current query to be more understandible. Either approach could technically work.'], ['Both of the above approaches assume you are woried about inserting rows from source that might already be in destination. If you are instead concerned about the possibility that source has duplicate rows you should try something like.']], [[' INSERT INTO destTable\nSELECT s.field1,s.field2,s.field3,... \nFROM srcTable s \n       LEFT JOIN destTable d ON (d.Key1 = s.Key1 AND d.Key2 = s.Key2 AND...)\nWHERE d.Key1 IS NULL\n']], ['Copy rows from one table to another, ignoring duplicates'], 3], [(656012, 2), [['Both of the above approaches assume you are woried about inserting rows from source that might already be in destination. If you are instead concerned about the possibility that source has duplicate rows you should try something like.'], ["One more thing. I'd also suggest listing the specific fields on your insert statement instead of using SELECT *."]], [[' INSERT INTO destTable\nSELECT Distinct field1,field2,field3,... \nFROM srcTable  \n']], ['Copy rows from one table to another, ignoring duplicates'], 3], [(656494, 0), [["Update: Per Solberg's request, here is an example of two tables that have a foreign key relationship showing that the foreign key field value  can  be null."], ['-- Now some tests:']], [[' CREATE TABLE [dbo].[EngineTable](\n    [EngineID] [int] IDENTITY(1,1) NOT NULL,\n    [EngineCylinders] smallint NOT NULL,\n CONSTRAINT [EngineTbl_PK] PRIMARY KEY NONCLUSTERED \n(\n    [EngineID] ASC\n)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY]\n\nCREATE TABLE [dbo].[CarTable](\n    [CarID] [int] IDENTITY(1,1) NOT NULL,\n    [Model] [varchar](32) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n    [EngineID] [int] NULL\n CONSTRAINT [PK_UnitList] PRIMARY KEY CLUSTERED \n(\n    [CarID] ASC\n)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY]\n\nALTER TABLE [dbo].[CarTable]  WITH CHECK ADD CONSTRAINT [FK_Engine_Car] FOREIGN KEY([EngineID])\nREFERENCES [dbo].[EngineTable] ([EngineID])\n\n\nInsert Into EngineTable (EngineCylinders) Values (4);\nInsert Into EngineTable (EngineCylinders) Values (6);\nInsert Into EngineTable (EngineCylinders) Values (6);\nInsert Into EngineTable (EngineCylinders) Values (8);\n']], ['What does/should NULL mean along with FK relationships - Database'], 2], [(656494, 1), [['-- Now some tests:'], ['-10000']], [[" Insert Into CarTable (Model, EngineID) Values ('G35x', 3);  -- References the third engine\n\nInsert Into CarTable (Model, EngineID) Values ('Sienna', 13);  -- Invalid FK reference - throws an error\n\nInsert Into CarTable (Model) Values ('M');  -- Leaves null in the engine id field & does NOT throw an error \n"]], ['What does/should NULL mean along with FK relationships - Database'], 2], [(658691, 0), [['-10000'], ["If you want to select the list, you'll need:"]], [[' WITH q AS\n        (\n        SELECT  c.*, p.id AS Unowned,\n                ROW_NUMBER() OVER (PARTITION BY p.id ORDER BY c.id) AS rn\n        FROM    Customers c\n        CROSS JOIN\n                Products p\n        LEFT JOIN \n                CustomerProducts cp\n        ON      cp.customer = c.id\n                AND cp.product = p.id\n        WHERE   cp.customer IS NULL\n        )\nUPDATE  q\nSET     UnownedProduct = Unowned\nWHERE   rn = 1\n']], ['How to select values from two tables that are not contained in the map table?'], 2], [(658691, 1), [["If you want to select the list, you'll need:"], ['-10000']], [[' SELECT  *\nFROM    (\n        SELECT  c.*, p.id AS Unowned,\n                ROW_NUMBER() OVER (PARTITION BY p.id ORDER BY c.id) AS rn\n        FROM    Customers c\n        CROSS JOIN\n                Products p\n        LEFT JOIN \n                CustomerProducts cp\n        ON      cp.customer = c.id\n                AND cp.product = p.id\n        WHERE   cp.customer IS NULL\n    ) cpo\nWHERE   rn = 1\n']], ['How to select values from two tables that are not contained in the map table?'], 2], [(659188, 0), [['The  raiserror  method'], ['This even works with GO statements, eg.']], [[" raiserror('Oh no a fatal error', 20, -1) with log\n"]], ['SQL Server - stop or break execution of a SQL script'], 4], [(659188, 1), [['This even works with GO statements, eg.'], ['Will give you the output:']], [[" print 'hi'\ngo\nraiserror('Oh no a fatal error', 20, -1) with log\ngo\nprint 'ho'\n"]], ['SQL Server - stop or break execution of a SQL script'], 4], [(659188, 2), [['Will give you the output:'], ['Example:']], [[' hi\nMsg 2745, Level 16, State 2, Line 1\nProcess ID 51 has raised user error 50000, severity 20. SQL Server is terminating this process.\nMsg 50000, Level 20, State 1, Line 1\nOh no a fatal error\nMsg 0, Level 20, State 0, Line 0\nA severe error occurred on the current command.  The results, if any, should be discarded.\n']], ['SQL Server - stop or break execution of a SQL script'], 4], [(659188, 3), [['Example:'], ['-10000']], [[" print 'hi'\ngo\n\nprint 'Fatal error, script will not continue!'\nset noexec on\n\nprint 'ho'\ngo\n\n-- last line of the script\nset noexec off -- Turn execution back on; only needed in SSMS, so as to be able \n               -- to run this script again in the same session.\n"]], ['SQL Server - stop or break execution of a SQL script'], 4], [(662697, 0), [["It doesn't matter what type your primary key is as the left/right values will still be integers. eg."], ['--add some test data']], [[' CREATE TABLE [dbo].[Demo](\n    [ID] [uniqueidentifier] ROWGUIDCOL  NOT NULL CONSTRAINT [DF_Demo_ID]  DEFAULT (newid()),\n    [Name] [varchar](50) NOT NULL,\n    [Lft] [int] NOT NULL,\n    [Rgt] [int] NOT NULL,\n CONSTRAINT [PK_Demo] PRIMARY KEY CLUSTERED \n(\n    [ID] ASC\n)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\n) ON [PRIMARY]\n']], ['I\'d like to use the "nested set model" but I\'m obliged to have a GUID as primary key. How can I do without integers as pk?'], 3], [(662697, 1), [['--add some test data'], ['--check it works']], [[" INSERT INTO demo(name,lft,rgt)\nSELECT 'node1',1,6\nUNION\nSELECT 'node2a',2,3\nUNION\nSELECT 'node2b',4,5\n"]], ['I\'d like to use the "nested set model" but I\'m obliged to have a GUID as primary key. How can I do without integers as pk?'], 3], [(662697, 2), [['--check it works'], ['-10000']], [[' SELECT *\nFROM demo\nWHERE lft>=2\nORDER BY lft\n']], ['I\'d like to use the "nested set model" but I\'m obliged to have a GUID as primary key. How can I do without integers as pk?'], 3], [(663716, 0), [["Yes, there's an event hook on the SqlCommand object called SqlInfoMessage, which you can hook into:"], ['The event handler will look like this:']], [[' SqlConnection _con = new SqlConnection("server=.;database=Northwindintegrated Security=SSPI;");\n\n_con.InfoMessage += new SqlInfoMessageEventHandler(_con_InfoMessage);\n']], ['Using SqlCommand to execute a non-query, can you get to text normally posted to "Messages"?'], 2], [(663716, 1), [['The event handler will look like this:'], ['The "e.Message" is the message printed out to the message window in SQL Server Mgmt Studio.']], [[' static void _con_InfoMessage(object sender, SqlInfoMessageEventArgs e)\n{\n    string myMsg = e.Message;            \n}\n']], ['Using SqlCommand to execute a non-query, can you get to text normally posted to "Messages"?'], 2], [(666363, 0), [['You already have the following query:'], ['Which gives you the current, 30-60, 60-90 and 90+ parts that you need. If you pivot that, you get everything you need except for your total. So just throw in the total:']], [[' SELECT\n    MAX(OrganizationName) as OrganizationName,\n    OrganizationID,\n    ReceivableStatus,\n    SUM(InvoiceFee) as TotalDue\nFROM v_InvoicesFreelanceOutstanding\nGROUP BY OrganizationID, ReceivableStatus\n']], ['Rows Into Columns and Grouping'], 3], [(666363, 1), [['Which gives you the current, 30-60, 60-90 and 90+ parts that you need. If you pivot that, you get everything you need except for your total. So just throw in the total:'], ['Pivot on this result and you should get the output you want:']], [[" (SELECT\n    MAX(OrganizationName) as OrganizationName,\n    OrganizationID,\n    ReceivableStatus,\n    SUM(InvoiceFee) as TotalDue\nFROM v_InvoicesFreelanceOutstanding\nGROUP BY OrganizationID, ReceivableStatus)\nUNION\n(SELECT\n    MAX(OrganizationName) as OrganizationName,\n    OrganizationID,\n    'Total' AS ReceivableStatus,\n    SUM(InvoiceFee) as TotalDue\nFROM v_InvoicesFreelanceOutstanding\nGROUP BY OrganizationID)\n"]], ['Rows Into Columns and Grouping'], 3], [(666363, 2), [['Pivot on this result and you should get the output you want:'], ['-10000']], [[' SELECT *\nFROM \n    [the query above]\nPIVOT (\n    SUM(TotalDue)\n    FOR ReceivableStatus IN ([Current],[30-60 days],[60-90 days],[over 90 days],[Total]) \n)\n']], ['Rows Into Columns and Grouping'], 3], [(669803, 0), [['-10000'], ['For example, if ties are resolved by the earlier game winning, then you could modify the query this way:']], [[' SELECT s1.*\nFROM score s1 LEFT OUTER JOIN score s2 \n ON (s1.game_id = s2.game_id AND s1.thescore < s2.thescore)\nGROUP BY s1.score_id\nHAVING COUNT(*) < 3;\n']], ['How to fetch 3 first places of each game from the score table in mysql?'], 3], [(669803, 1), [['For example, if ties are resolved by the earlier game winning, then you could modify the query this way:'], ["However, MySQL tends to create a temporary table for this kind of query anyway.  Here's the output of  EXPLAIN  for this query:"]], [[' SELECT s1.*\nFROM score s1 LEFT OUTER JOIN score s2 \n ON (s1.game_id = s2.game_id AND (s1.thescore < s2.thescore\n     OR s1.thescore = s2.thescore AND s1.score_id < s2.score_id))\nGROUP BY s1.score_id\nHAVING COUNT(*) < 3;\n']], ['How to fetch 3 first places of each game from the score table in mysql?'], 3], [(669803, 2), [["However, MySQL tends to create a temporary table for this kind of query anyway.  Here's the output of  EXPLAIN  for this query:"], ['-10000']], [[' +----+-------------+-------+------+---------------+------+---------+------+------+---------------------------------+\n| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra                           |\n+----+-------------+-------+------+---------------+------+---------+------+------+---------------------------------+\n|  1 | SIMPLE      | s1    | ALL  | NULL          | NULL | NULL    | NULL |    9 | Using temporary; Using filesort | \n|  1 | SIMPLE      | s2    | ALL  | PRIMARY       | NULL | NULL    | NULL |    9 |                                 | \n+----+-------------+-------+------+---------------+------+---------+------+------+---------------------------------+\n']], ['How to fetch 3 first places of each game from the score table in mysql?'], 3], [(670107, 0), [["You could do the update first, i.e. tagging a message with the user id or similar. You dont mention which sql flavour youre using, but in mysql, i think it'd look something like this:"], ["In ms sql, it'd be something along the lines of:"]], [[' UPDATE message\nSET    user_id = ...\nWHERE  user_id = 0   -- Ensures no two users gets the same message\nLIMIT 1\n']], ['Consecutive SQL statements with state'], 2], [(670107, 1), [["In ms sql, it'd be something along the lines of:"], ['/B']], [[' WITH q AS (\n  SELECT TOP 1\n  FROM message m\n  WHERE user_id = 0\n) \nUPDATE q\nSET    user_id = 1\n']], ['Consecutive SQL statements with state'], 2], [(670230, 0), [['& is the bitwise logical and operator  - It performs the operation on 2 integer values. '], ['Some binary examples: (== to show the result of the operation)']], [[' WHERE (sc.Attributes & 1) = 0 \n']], ['Ampersand (&) operator in a SQL Server WHERE Clause'], 2], [(670230, 1), [['Some binary examples: (== to show the result of the operation)'], ['-10000']], [[' //Check if the first bit is set, same as sc.Attributes&1\n11111111 & 00000001 == 1\n11111110 & 00000001 == 0\n00000001 & 00000001 == 1\n\n\n//Check if the third bit is set, same as sc.Attributes&4\n11111111 & 00000100 == 1\n11111011 & 00000100 == 0\n00000100 & 00000100 == 1\n']], ['Ampersand (&) operator in a SQL Server WHERE Clause'], 2], [(670922, 0), [['You do have a few choices. Your current solution is the easiest. Another solution is to change the procedure to accept multiple variables and create a list of AND statements. '], ['or have a fixed list of IN values ']], [[" 'select c.category \n     from test_category c \n     where c.deptid= :PI_N_Dept\n       and c.category <> :sExcludeCategory1 \n       and c.category <> :sExcludeCategory2\n       and c.category <> :sExcludeCategory3\n\n';\n"]], ['How can I get rid of dynamic SQL'], 4], [(670922, 1), [['or have a fixed list of IN values '], ["Another solution is presented in  Ask Tom . This looks quite simple, though i haven't tested it. It works by creating a function str2tbl() which allows you to pass a series of numbers separated by commas and creating a 'table' via dual to do a IN."]], [[" 'select c.category \n     from test_category c \n     where c.deptid= :PI_N_Dept\n       and c.category not in (:sExcludeCategory1 , :sExcludeCategory2, :sExcludeCategory3)';\n"]], ['How can I get rid of dynamic SQL'], 4], [(670922, 2), [["Another solution is presented in  Ask Tom . This looks quite simple, though i haven't tested it. It works by creating a function str2tbl() which allows you to pass a series of numbers separated by commas and creating a 'table' via dual to do a IN."], ['Your example would look something like']], [[" create or replace type myTableType as table of number;\n\ncreate or replace function str2tbl( p_str in varchar2 ) return myTableType\n  as\n     l_str   long default p_str || ',';\n     l_n        number;\n     l_data    myTableType := myTabletype();\n  begin\n      loop\n          l_n := instr( l_str, ',' );\n          exit when (nvl(l_n,0) = 0);\n          l_data.extend;\n          l_data( l_data.count ) := ltrim(rtrim(substr(l_str,1,l_n-1)));\n          l_str := substr( l_str, l_n+1 );\n      end loop;\n      return l_data;\n  end;\n"]], ['How can I get rid of dynamic SQL'], 4], [(670922, 3), [['Your example would look something like'], ["This would only work if  sExcludeCategories  was a list of numbers. You'd have to change str2tbl to handle quotes if they are included in the variable (and you cant change it) plus change the type of  myTableType  to  varchar2(10)  or something more appropriate."]], [[" 'select c.category \n     from test_category c \n     where c.deptid= :PI_N_Dept\n       and c.category not in ( select * from INLIST ( select cast( str2tbl( :sExcludeCategories  ) as mytableType ) from dual ) )';\n"]], ['How can I get rid of dynamic SQL'], 4], [(673108, 0), [['FOR XML PATH is a little difficult at times (at least from what I know). This may get you there:'], ['Produces:']], [[" WITH XMLNAMESPACES('uri' as xsi)    \nSELECT    \n'me:age'     AS 'description/@xsi:type'    \n,age         AS 'description'    \n,name        AS 'name'   \n,'me:height' AS 'description/@xsi:type'    \n,height      AS 'description'    \nFROM #test    \nFOR XML PATH('person')\n"]], ['SQL Server 2005 "FOR XML PATH" Multiple tags with same name'], 2], [(673108, 1), [['Produces:'], ['-10000']], [[' <person xmlns:xsi="uri">\n  <description xsi:type="me:age">32</description>\n  <name>Alice</name>\n  <description xsi:type="me:height">6 Foot</description>\n</person>\n<person xmlns:xsi="uri">\n  <description xsi:type="me:age">24</description>\n  <name>Bob</name>\n  <description xsi:type="me:height">5 Feet 5 Inches</description>\n</person>\n']], ['SQL Server 2005 "FOR XML PATH" Multiple tags with same name'], 2], [(674776, 0), [['EDIT: Sorry, my first response was a bit rushed. Have now had a chance to look further. Due to the sub requester and the sub requester attribute both being duplicates you need to split them both up into a subquery. Also, your modified date could be different for both values. So i\'ve doubled that up. This is completely untested, and by no means the "optimum" solution. It\'s quite tricky to write the query without the actual database to check against. Hopefully it will explain what I meant though.'], ['SECOND EDIT: My last edit was that there were multiple SubRequesters as well as multiple Attribute, from your last comment you want to show all SubRequesters and the two relevent attributes? You can achieve this as follows.']], [[" SELECT\n    r.RequesterID,\n    p.FirstName + ' ' + p.LastName AS RequesterName,\n    sra1.ModifiedDate as UrgentModifiedDate,\n    sra1.AttributeValue as Urgent,\n    sra2.ModifiedDate as ClosedModifiedDate,\n    sra2.AttributeValue as Closed\nFROM\n    Personnel AS p\nINNER JOIN\n    Requester AS r \nON\n(\n    r.UserID = p.ContractorID\nOR\n    r.UserID = p.EmployeeID\n)\nLEFT OUTER JOIN\n(\n    SELECT\n        sr1.RequesterID,\n        sr1.ModifiedDate,\n        sa1.Attribute,\n        sa1.AttributeValue\n    FROM\n        SubRequester AS sr1\n    INNER JOIN\n        SubRequesterAttribute AS sa1\n    ON\n        sr1.SubRequesterID = sa1.SubRequesterID\n    AND\n        sa1.Attribute = 'Urgent'\n) sra1\nON\n    sra1.RequesterID = r.RequesterID\nLEFT OUTER JOIN\n(\n    SELECT\n        sr2.RequesterID,\n        sr2.ModifiedDate,\n        sa2.Attribute,\n        sa2.AttributeValue\n    FROM\n        SubRequester AS sr2\n    INNER JOIN\n        SubRequesterAttribute AS sa2\n    ON\n        sr2.SubRequesterID = sa2.SubRequesterID\n    AND\n        sa2.Attribute = 'Closed'\n) sra1\nON\n    sra2.RequesterID = r.RequesterID\n"]], ['Unified records for database query with Sql'], 2], [(674776, 1), [['SECOND EDIT: My last edit was that there were multiple SubRequesters as well as multiple Attribute, from your last comment you want to show all SubRequesters and the two relevent attributes? You can achieve this as follows.'], ['-10000']], [[" SELECT\n    r.RequesterID,\n    p.FirstName + ' ' + p.LastName AS RequesterName,\n    sr.ModifiedDate,\n    sa1.AttributeValue as Urgent,\n    sa2.AttributeValue as Closed\nFROM\n    Personnel AS p\nINNER JOIN\n    Requester AS r \nON\n(\n    r.UserID = p.ContractorID\nOR\n    r.UserID = p.EmployeeID\n)\nINNER JOI N\n    SubRequester as sr\nON\n    sr.RequesterID = r.RequesterID\nLEFT OUTER JOIN\n    SubRequesterAttribute AS sa1\nON\n    sa1.SubRequesterID = sr.SubRequesterID\nAND\n    sa1.Attribute = 'Urgent'\nLEFT OUTER JOIN\n    SubRequesterAttribute AS sa2\nON\n    sa2.SubRequesterID = sr.SubRequesterID\nAND\n    sa2.Attribute = 'Closed'\n"]], ['Unified records for database query with Sql'], 2], [(679357, 0), [['I am going to summarize some common situations.'], ['If the rating value is a simple number, just include it in the posts table. That is probably your point.  Why include a integer rating value and not a string with a rating name?  The difference is as follows. The integer rating should be included because every value is a legal rating. This is not true for the string ratings. They should be moved to a separate table, because only a limited set of strings represent legal ratings.']], [[' Posts\n========\nPostId           Ratings\nText             ==========\nRatingId  ====>  RatingId\n                 RatingName\n']], ['When to include related fields in a db table and when not to?'], 5], [(679357, 1), [['If the rating value is a simple number, just include it in the posts table. That is probably your point.  Why include a integer rating value and not a string with a rating name?  The difference is as follows. The integer rating should be included because every value is a legal rating. This is not true for the string ratings. They should be moved to a separate table, because only a limited set of strings represent legal ratings.'], ['If you have multiple ratings per post the following is the way to go for a limited set of possible ratings.']], [[' Posts\n===========\nPostId\nText\nRatingValue\n']], ['When to include related fields in a db table and when not to?'], 5], [(679357, 2), [['If you have multiple ratings per post the following is the way to go for a limited set of possible ratings.'], ['If you have integer ratings you put them back into the post ratings table. You need to add an artifical primary key if you require one because there is no natural primary key.']], [[' Posts            PostRatings\n========         ===========        Ratings\nPostId    <====  PostId             ===========\nText             RatingId     ===>  RatingId \n                                    RatingName\n']], ['When to include related fields in a db table and when not to?'], 5], [(679357, 3), [['If you have integer ratings you put them back into the post ratings table. You need to add an artifical primary key if you require one because there is no natural primary key.'], ['If you associate a rating with a user and allow only one rating for a given post per user you get a natural primary key again.']], [['                  PostRatings\nPosts            ==============\n========         [PostRatingId]\nPostId    <====  PostId\nText             RatingValue\n']], ['When to include related fields in a db table and when not to?'], 5], [(679357, 4), [['If you associate a rating with a user and allow only one rating for a given post per user you get a natural primary key again.'], ['-10000']], [[' Posts            PostRatings\n========         ===========        User\nPostId    <====  PostId             ===========\nText             UserId       ===>  UserId \n                 RatingValue        Name\n']], ['When to include related fields in a db table and when not to?'], 5], [(679998, 0), [['something like'], ['actually this will work better']], [[" Select * from TableName where Name Like 'Spa%'\nORDER BY case when soundex(name) = soundex('Spa') then '1' else soundex(name) end\n"]], ['How to make a sql search query more powerful?'], 2], [(679998, 1), [['actually this will work better'], ["FWIW I did some quick tests and if 'Name' is in a NONCLUSTERED INDEX SQL will use the index and doesn't do a table scan. Also, LIKE seems to use less resources than charindex (which returns less desirable results). Tested on sql 2000.   "]], [[" Select * from TableName where Name Like 'Spa%'\nORDER BY DIFFERENCE(name, 'Spa') desc;\n"]], ['How to make a sql search query more powerful?'], 2], [(681559, 0), [['Provided that both your queries always return exactly one row, you can do either of the following:'], ["If they're in the same table as you posted, you can use:"]], [[' /* Variant 1 */\n\n\nSELECT  t.kilometers + g.kilometers\nINTO    c_kilometers\nFROM    table_name t, table_name2 g\nWHERE   etc1\n        AND etc2\n\n/* Variant 2 */\n\nSELECT  t.kilometers\nINTO    c_kilometers\nFROM    table_name\nWHERE   etc;\n\nSELECT  c_kilometers + g.kilometers\nINTO    c_kilometers\nFROM    table_name2\nWHERE   etc;\n']], ['SELECT INTO variable, two statements, add variables'], 2], [(681559, 1), [["If they're in the same table as you posted, you can use:"], ['It seems that it will be more efficient to put  table_name  into your  SELECT  query that produces the cursor.']], [[' SELECT COALESCE(SUM(kilometers), 0)\nINTO   c_kilometers\nFROM   table_name\nWHERE  l.code IN (cursor_t.code_aff, cursor_t.code_att)\n']], ['SELECT INTO variable, two statements, add variables'], 2], [(682308, 0), [['This will return  NULL  if a code is not assigned:'], ['This will return all non-assigned codes:']], [[' SELECT  assigned_codes.code\nFROM    codes \nLEFT JOIN\n        assigned_codes\nON      assigned_codes.code = codes.code\nWHERE   codes.code = @code\n']], ["Selecting elements that don't exist"], 4], [(682308, 1), [['This will return all non-assigned codes:'], ['In  Oracle , you can do the following:']], [[' SELECT  codes.code\nFROM    codes \nLEFT JOIN\n        assigned_codes\nON      assigned_codes.code = codes.code\nWHERE   assigned_codes.code IS NULL\n']], ["Selecting elements that don't exist"], 4], [(682308, 2), [['In  Oracle , you can do the following:'], ['In  PostgreSQL , you can do the following:']], [[' SELECT  lvl\nFROM    (\n        SELECT  level AS lvl\n        FROM    dual\n        CONNECT BY\n                level <=\n                (\n                SELECT  MAX(code)\n                FROM    elements\n                )\n        )\nLEFT OUTER JOIN\n        elements\nON      code = lvl\nWHERE   code IS NULL\n']], ["Selecting elements that don't exist"], 4], [(682308, 3), [['In  PostgreSQL , you can do the following:'], ['-10000']], [[' SELECT  lvl\nFROM    generate_series(\n        1,\n        (\n        SELECT  MAX(code)\n        FROM    elements\n        )) lvl\nLEFT OUTER JOIN\n        elements\nON      code = lvl\nWHERE   code IS NULL\n']], ["Selecting elements that don't exist"], 4], [(682370, 0), [['Table with  1  row:'], ['Table with  0  rows:']], [[' SELECT t1.*, t2.col2\nFROM   t1,\n       (\n       SELECT  1 AS col2\n       FROM    dual\n       ) t2\n']], ["SQL create a temporary 'mapping' table in a select statement"], 3], [(682370, 1), [['Table with  0  rows:'], ['Table with  N  rows:']], [[' SELECT t1.*, t2.col2\nFROM   t1,\n       (\n       SELECT  1 AS col2\n       FROM    dual\n       WHERE   1 = 0\n       ) t2\n']], ["SQL create a temporary 'mapping' table in a select statement"], 3], [(682370, 2), [['Table with  N  rows:'], ['-10000']], [[' SELECT t1.*, t2.col2\nFROM   t1,\n       (\n       SELECT  1 AS col2\n       FROM    dual\n       CONNECT BY\n               level <= :N\n       ) t2\n']], ["SQL create a temporary 'mapping' table in a select statement"], 3], [(683528, 0), [['-10000'], ['Note that your original resultset:']], [[" SELECT  ARTICLE_NO\nFROM    auctions1\nWHERE   upper(ARTICLE_NAME) LIKE '% x %'\n        AND (str_to_date( ACCESSSTARTS, '%d/%m/%Y %k:%i:%s' ), article_no) >\n        (\n        SELECT  str_to_date(ACCESSSTARTS, '%d/%m/%Y %k:%i:%s'), article_no\n        FROM    auctions1\n        WHERE   ARTICLE_NO = @pk\n        )\nORDER BY\n        str_to_date(ACCESSSTARTS, '%d/%m/%Y %k:%i:%s'), article_no\nLIMIT 1\n"]], ['selecting the next record from a list ordered by date'], 4], [(683528, 1), [['Note that your original resultset:'], ['does not guarantee stable row order within one  ACCESSSTARTS . You need to add  PRIMARY KEY  to the  ORDER BY  clause, like this:']], [[" SELECT  ARTICLE_NO, USERNAME, ACCESSSTARTS, ARTICLE_NAME\nFROM    auctions1\nWHERE   upper(ARTICLE_NAME) LIKE % x %\nORDER BY\n        str_to_date(ACCESSSTARTS, '%d/%m/%Y %k:%i:%s');\n"]], ['selecting the next record from a list ordered by date'], 4], [(683528, 2), [['does not guarantee stable row order within one  ACCESSSTARTS . You need to add  PRIMARY KEY  to the  ORDER BY  clause, like this:'], ['But if you cannot do it for some reason, you can do the following:']], [[" SELECT  ARTICLE_NO, USERNAME, ACCESSSTARTS, ARTICLE_NAME\nFROM    auctions1\nWHERE   upper(ARTICLE_NAME) LIKE % x %\nORDER BY\n        str_to_date(ACCESSSTARTS, '%d/%m/%Y %k:%i:%s'), article_no.\n"]], ['selecting the next record from a list ordered by date'], 4], [(683528, 3), [['But if you cannot do it for some reason, you can do the following:'], ['This query is less efficient and heavily relies on fact that this query will use exactly same access method as your original query.']], [[" SELECT  ARTICLE_NO, USERNAME, ACCESSSTARTS, ARTICLE_NAME,\nFROM    (\n        SELECT  @c := NULL\n        ) vars,\n        auctions1\nWHERE   upper(ARTICLE_NAME) LIKE % x %\n        AND CASE WHEN ARTICLE_NO = $PK THEN @с := 0 ELSE 0 END IS NOT NULL\n        AND (@c := @c + 1) = 2\nORDER BY\n        str_to_date(ACCESSSTARTS, '%d/%m/%Y %k:%i:%s');\nLIMIT 1\n"]], ['selecting the next record from a list ordered by date'], 4], [(684106, 0), [['Find the first row where there does not exist a row with Id + 1'], ['To handle the special case where the lowest existing id is not 1, here is a ugly solution:']], [[' SELECT TOP 1 t1.Id+1 \nFROM table t1\nWHERE NOT EXISTS(SELECT * FROM table t2 WHERE t2.Id = t1.Id + 1)\nORDER BY t1.Id\n']], ['Find the smallest unused number in SQL Server'], 2], [(684106, 1), [['To handle the special case where the lowest existing id is not 1, here is a ugly solution:'], ['-10000']], [[' SELECT TOP 1 * FROM (\n    SELECT t1.Id+1 AS Id\n    FROM table t1\n    WHERE NOT EXISTS(SELECT * FROM table t2 WHERE t2.Id = t1.Id + 1 )\n    UNION \n    SELECT 1 AS Id\n    WHERE NOT EXISTS (SELECT * FROM table t3 WHERE t3.Id = 1)) ot\nORDER BY 1\n']], ['Find the smallest unused number in SQL Server'], 2], [(684352, 0), [['Download the instantclient distribution from oracle.com.  For doing non-java software development, you will need (assuming Oracle 10.2):'], ['Unzip the three files.  This will give you a directory']], [[' instantclient-basic-macosx-10.2.0.4.0.zip\ninstantclient-sdk-macosx-10.2.0.4.0.zip\ninstantclient-sqlplus-macosx-10.2.0.4.0.zip\n']], ['installing Oracle Instantclient on Mac OS/X without setting environment variables?'], 5], [(684352, 1), [['Unzip the three files.  This will give you a directory'], ['Copy the files to /usr, which is one of the default places the dynamic loader searches.']], [[' instantclient_10_2/\n']], ['installing Oracle Instantclient on Mac OS/X without setting environment variables?'], 5], [(684352, 2), [['Copy the files to /usr, which is one of the default places the dynamic loader searches.'], ['If you use tnsnames.ora, copy it to /etc, which is the default global place the oracle runtime searches.']], [[' sudo cp instantclient_10_2/sdk/include/*.h /usr/include\nsudo cp instantclient_10_2/sqlplus         /usr/bin\nsudo cp instantclient_10_2/*.dylib         /usr/lib\n']], ['installing Oracle Instantclient on Mac OS/X without setting environment variables?'], 5], [(684352, 3), [['If you use tnsnames.ora, copy it to /etc, which is the default global place the oracle runtime searches.'], ['Test with']], [[' sudo cp tnsnames.ora /etc\n']], ['installing Oracle Instantclient on Mac OS/X without setting environment variables?'], 5], [(684352, 4), [['Test with'], ['-10000']], [[' /usr/bin/sqlplus scott/tiger@myoracle\n']], ['installing Oracle Instantclient on Mac OS/X without setting environment variables?'], 5], [(685106, 0), [["You don't need to use triggers for this if you manage the inserts:"], ['Then, to insert a value:']], [[' CREATE SEQUENCE seq;\n\nCREATE TABLE mycount\n(\n   line NUMBER(10,0)\n);\n']], ['Translating SQL for use with Oracle'], 2], [(685106, 1), [['Then, to insert a value:'], ['For images, you can use  BLOB s to store any binary data or  BFILE  to manage more or less as a BLOB but the data is stored on file system, for instance a  jpg  file.']], [[' INSERT INTO mycount(line) VALUES (seq.nextval);\n']], ['Translating SQL for use with Oracle'], 2], [(686360, 0), [["After copying the CSV into, say, StagingTable, the trick is to split it into the other tables.  Since your CSV can now be referenced in the database, you can join the other tables to retrieve the new table's ID:"], ['An even easier solution would be to keep the original GroupID and UserID.  Filling the GroupContactMapping would then be as easy as:']], [[' insert into ContactGroupMapping\nselect cont.ID, grp.ID\nfrom StagingTable stag\ninner join Contacts cont on cont.UserID = stag.UserID\ninner join Groups grp on grp.GroupID = stag.GroupID\n']], ['SQL Inserting data from staging table to two other tables'], 2], [(686360, 1), [['An even easier solution would be to keep the original GroupID and UserID.  Filling the GroupContactMapping would then be as easy as:'], ['-10000']], [[' insert into ContactGroupMapping\nselect UserID, GroupID\nfrom StagingTable stag\n']], ['SQL Inserting data from staging table to two other tables'], 2], [(687446, 0), [["You've gotta tell SQL Server how table1 and table2 are related. Based on your answer below, I think something like this might do the trick:"], ['This should produce XML like:']], [[" select \n    table1.field1 as 'Node1/Field1'\n,   table2.field1 as 'Node1/Child1/Field1'\n,   table1.field2 as 'Node2/Field2'\nfrom table1\nleft join table2 on table1.id = table2.table1id\nfor xml PATH(''), ROOT('Root')\n"]], ['MS SQL 2005 "For XML Path" Node Layout Question'], 2], [(687446, 1), [['This should produce XML like:'], ['-10000']], [[' <Root>\n    <Node1>\n        <Field1>Value</Field1>\n        <Child1>\n            <Field1>Value</Field1>\n        </Child1>\n    </Node1>\n    <Node2>\n        <Field2>Value</Field2>\n    </Node2>\n</Root>\n']], ['MS SQL 2005 "For XML Path" Node Layout Question'], 2], [(687510, 0), [['-10000'], ['Note that minimal date is much more simple:']], [[" SELECT  TO_DATE('31.12.9999 23:59:59', 'dd.mm.yyyy hh24:mi:ss')\nFROM    dual\n"]], ['How do you obtain the maximum possible date in Oracle?'], 2], [(687510, 1), [['Note that minimal date is much more simple:'], ['-10000']], [[" SELECT  TO_DATE(1, 'J')\nFROM    dual\n"]], ['How do you obtain the maximum possible date in Oracle?'], 2], [(690948, 0), [["Here are two possible solutions that I can think of. I'm not sure if they'll work in Informix:"], ['And if subqueries in the  HAVING  clause are verboten, maybe this will work instead:']], [[" SELECT  id\nFROM    foo a\nGROUP   BY id\nHAVING  COUNT(*) = (\n                SELECT  COUNT(*)\n                FROM    foo b\n                WHERE   a.id = b.id\n                AND     (b.stat LIKE 'FN%' OR b.stat LIKE 'W%')\n        );\n"]], ['Informix SQL count() comparisons'], 2], [(690948, 1), [['And if subqueries in the  HAVING  clause are verboten, maybe this will work instead:'], ['Update: I just tried these in Oracle, and both work.']], [[" SELECT  id\nFROM    (\n                SELECT  id, COUNT(*) stat_count\n                FROM    foo\n                WHERE   (stat LIKE 'FN%' OR stat LIKE 'W%')\n                GROUP   BY id\n        ) a\nWHERE   stat_count = (SELECT COUNT(*) FROM foo b WHERE a.id = b.id);\n"]], ['Informix SQL count() comparisons'], 2], [(691022, 0), [['You can use the following with the first day of the specified month:'], ['To make it work for every date:']], [[' datediff(day, @date, dateadd(month, 1, @date))\n']], ['How to determine the number of days in a month in SQL Server?'], 2], [(691022, 1), [['To make it work for every date:'], ['-10000']], [[' datediff(day, dateadd(day, 1-day(@date), @date),\n              dateadd(month, 1, dateadd(day, 1-day(@date), @date)))\n']], ['How to determine the number of days in a month in SQL Server?'], 2], [(693466, 0), [['You can use an alias to fetch the column with a different name'], ['If you only want to fetch the accounts title, list the columns from threads that you DO want']], [[' SELECT t.*, a.title AS account_title \nFROM threads t INNER JOIN accounts...\n']], ['SQL Join help'], 2], [(693466, 1), [['If you only want to fetch the accounts title, list the columns from threads that you DO want'], ['-10000']], [[' SELECT t.wanted_column, t.another_column, a.* \nFROM threads t, INNER JOIN accounts a...\n']], ['SQL Join help'], 2], [(698047, 0), [['The first and last element from a  row ?'], ['I think you must mean the first and last element from a  column :']], [[' SELECT column1, columnN\nFROM mytable;\n']], ['Most efficient way to select 1st and last element, SQLite?'], 2], [(698047, 1), [['I think you must mean the first and last element from a  column :'], ['See  http://www.sqlite.org/lang_aggfunc.html  for  MIN()  and  MAX() .']], [[' SELECT MIN(column1) AS First,\n       MAX(column1) AS Last\nFROM mytable;\n']], ['Most efficient way to select 1st and last element, SQLite?'], 2], [(699239, 0), [['I tried this query and it gives the output you describe:'], ['Output:']], [[' SELECT pt.id, pt.`date`, t.title, pt.`text`\nFROM Top_Level t INNER JOIN Post pt ON (t.post_id = pt.id)\n LEFT OUTER JOIN (Comment c INNER JOIN Post pc ON (c.post_id = pc.id))\n   ON (c.toplv_id = t.post_id)\nGROUP BY pt.id\nORDER BY MAX(GREATEST(pt.`date`, pc.`date`)) ASC;\n']], ['What query will work for this sub-type / super-type relationship?'], 2], [(699239, 1), [['Output:'], ['-10000']], [[' +----+------------+-------+------+\n| id | date       | title | text |\n+----+------------+-------+------+\n|  7 | 2008-03-19 | NMO   | all  | \n|  1 | 2008-03-13 | XYZ   | shy  | \n|  3 | 2008-03-15 | ABC   | quw  | \n+----+------------+-------+------+\n']], ['What query will work for this sub-type / super-type relationship?'], 2], [(699341, 0), [["You haven't posted your actual queries, so I may be assuming they are simpler than they are, but if your first statement was:"], ['then your second query could be']], [[' select val from valuetable order by someothercolumn\n']], ['Merge Select statement and order dynamically?'], 2], [(699341, 1), [['then your second query could be'], ['In other words, you could copy the ordering from your first statement to the second.']], [[' select table2.name, table2.phonenumber, table2.creationdate, table2.val\nfrom table2\nleft join valuetable on table2.val = valuetable.val\norder by valuetable.someothercolumn\n']], ['Merge Select statement and order dynamically?'], 2], [(700619, 0), [['Adding them returns the correct result.'], ['-10000']], [[' SELECT Combined = MyDate + MyTime FROM MyTable\n']], ['How to combine date from one field with time from another field - MS SQL Server'], 2], [(700619, 1), [['-10000'], ['-10000']], [['Rationale (kudos to ErikE/dnolan) It works like this due to the way the date is stored as two 4-byte `Integers` with the\nleft 4-bytes being the `date` and the right 4-bytes being the `time`.  \n\nIts like doing $0001 0000 + $0000 0001 = $0001 0001\n']], ['How to combine date from one field with time from another field - MS SQL Server'], 2], [(700648, 0), [['Use  @%  with the escape character clause:'], ['DB2/z has a slightly different format:']], [[" select *\nfrom tbl\nwhere fld like '%@%%' escape '@'\n"]], ['Escape percentage sign DB2 SQL'], 2], [(700648, 1), [['DB2/z has a slightly different format:'], ["Obviously, you'll need to choose your escape character carefully so it won't interfere with the rest of your string but this is relatively easy for static strings. Dynamically built strings will require dynamically built queries so that it doesn't use a character from the string."]], [[" select *\nfrom tbl\nwhere fld like {escape '@'} '%@%%'\n"]], ['Escape percentage sign DB2 SQL'], 2], [(701444, 0), [['In  Oracle :'], ['In  MS SQL  (up to  100  rows):']], [[' SELECT  *\nFROM    dual\nCONNECT BY\n        level < n\n']], ['How do I make a row generator in MySQL?'], 4], [(701444, 1), [['In  MS SQL  (up to  100  rows):'], ['or using hint up to  32768']], [[' WITH hier(row) AS\n        (\n        SELECT  1\n        UNION ALL\n        SELECT  row + 1\n        FROM    hier\n        WHERE   row < n\n        )\nSELECT  *\nFROM    hier\n']], ['How do I make a row generator in MySQL?'], 4], [(701444, 2), [['or using hint up to  32768'], ['In  PostgreSQL :']], [[' WITH hier(row) AS\n        (\n        SELECT  1\n        UNION ALL\n        SELECT  row + 1\n        FROM    hier\n        WHERE   row < 32768\n        )\nSELECT  *\nFROM    hier\nOPTION (MAXRECURSION 32767) -- 32767 is the maximum value of the hint\n']], ['How do I make a row generator in MySQL?'], 4], [(701444, 3), [['In  PostgreSQL :'], ['In  MySQL , nothing.']], [[' SELECT  *\nFROM    generate_series (1, n)\n']], ['How do I make a row generator in MySQL?'], 4], [(703449, 0), [['I think your problem is that it will almost never reach this case:'], ['Try comparing only significant parts of the date on your case.']], [[' CASE\n     WHEN sysdate IN\n       (SELECT h.holidaydate FROM holiday h)\n']], ['Oracle: Program not forking correctly in SELECT CASE statement on a date'], 2], [(703449, 1), [['Try comparing only significant parts of the date on your case.'], ['It should work.']], [[' CASE\n   WHEN TRUNC(SYSDATE) IN (SELECT TRUNC(h.holidaydate) from holiday h)\n']], ['Oracle: Program not forking correctly in SELECT CASE statement on a date'], 2], [(703977, 0), [['If your flavor of SQL supports it, try  GROUP BY  with  FIRST() , like the following. It will return the first record for each individual Username.'], ['If not, you have to do it the hard way using a row ID and sub-select:']], [[' SELECT Username, FIRST(Firstname), FIRST(Lastname)\nFROM tempUsers\nGROUP BY Username\n']], ['SELECT DISTINCT'], 3], [(703977, 1), [['If not, you have to do it the hard way using a row ID and sub-select:'], ["** You shouldn't use MIN with Firstname and Lastname, because you can't guarantee they will come from the same row:\n"]], [[' SELECT Username, FIRST(Firstname), FIRST(Lastname)\nFROM tempUsers\nWHERE RowID IN (SELECT MIN(RowID)\n                FROM tempUsers\n                GROUP BY Username)\n']], ['SELECT DISTINCT'], 3], [(703977, 2), [["** You shouldn't use MIN with Firstname and Lastname, because you can't guarantee they will come from the same row:\n"], ['']], [[' SELECT Username, MIN(Firstname), MIN(Lastname)\nFROM tempUsers\nGROUP BY Username\n']], ['SELECT DISTINCT'], 3], [(706236, 0), [['-10000'], ['In both  Oracle  and  MS SQL , you can also use this:']], [[" SELECT  COALESCE (\n        (\n        SELECT  newValue\n        FROM    history\n        WHERE   field = 'Department'\n                AND rowID = ID\n                AND changeDate =\n                (\n                SELECT MAX(changedate)\n                FROM   history\n                WHERE  field = 'Department'\n                       AND rowID = ID\n                       AND changeDate <= '01/01/2009'\n                )\n        ), department)\nFROM    employee\nWHERE   id = @id\n"]], ['SQL select value if no corresponding value exists in another table'], 2], [(706236, 1), [['In both  Oracle  and  MS SQL , you can also use this:'], ["Note, though, that  ROWID  is reserved word in  Oracle , so you'll need to rename this column when porting."]], [[" SELECT  COALESCE(newValue, department)\nFROM    (\n        SELECT  e.*, h.*,\n                ROW_NUMBER() OVER (PARTITION BY e.id ORDER BY changeDate) AS rn\n        FROM    employee e\n        LEFT OUTER JOIN\n                history h\n        ON      field = 'Department'\n                AND rowID = ID\n                AND changeDate <= '01/01/2009'\n        WHERE   e.id = @id\n        )\nWHERE rn = 1\n"]], ['SQL select value if no corresponding value exists in another table'], 2], [(706663, 0), [['Create a master table that contains only the ID:'], ['To populate the table for the first time, issue']], [[' CREATE TABLE master (ID INT NOT NULL PRIMARY KEY)\n']], ['How do I (quickly) collate IDs from various tables?'], 4], [(706663, 1), [['To populate the table for the first time, issue'], ['To query, use:']], [[' INSERT\nINTO    master\nSELECT  id\nFROM    a\nUNION\nSELECT  id\nFROM    b\nUNION\nSELECT  id\nFROM    c\n']], ['How do I (quickly) collate IDs from various tables?'], 4], [(706663, 2), [['To query, use:'], ['To delete, use:']], [[' SELECT  *\nFROM    master m\nLEFT OUTER JOIN\n        a\nON      a.id = m.id\nLEFT OUTER JOIN\n        b\nON      b.id = m.id\nLEFT OUTER JOIN\n        c\nON      c.id = m.id\n']], ['How do I (quickly) collate IDs from various tables?'], 4], [(706663, 3), [['To delete, use:'], ['This will fire  ON DELETE CASCADE  and delete records from all three tables if any.']], [[' DELETE\nFROM    master\nWHERE   id = @id\n']], ['How do I (quickly) collate IDs from various tables?'], 4], [(706664, 0), [['DDL:'], ['Query:']], [[' CREATE TABLE [dbo].[WorkOut](\n    [WorkOutID] [bigint] IDENTITY(1,1) NOT NULL,\n    [TimeSheetDate] [datetime] NOT NULL,\n    [DateOut] [datetime] NOT NULL,\n    [EmployeeID] [int] NOT NULL,\n    [IsMainWorkPlace] [bit] NOT NULL,\n    [DepartmentUID] [uniqueidentifier] NOT NULL,\n    [WorkPlaceUID] [uniqueidentifier] NULL,\n    [TeamUID] [uniqueidentifier] NULL,\n    [WorkShiftCD] [nvarchar](10) NULL,\n    [WorkHours] [real] NULL,\n    [AbsenceCode] [varchar](25) NULL,\n    [PaymentType] [char](2) NULL,\n    [CategoryID] [int] NULL,\n    [Year]  AS (datepart(year,[TimeSheetDate])),\n CONSTRAINT [PK_WorkOut] PRIMARY KEY CLUSTERED \n(\n    [WorkOutID] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n) ON [PRIMARY]\n\nALTER TABLE [dbo].[WorkOut] ADD  \nCONSTRAINT [DF__WorkOut__IsMainW__2C1E8537]  DEFAULT ((1)) FOR [IsMainWorkPlace]\n\nALTER TABLE [dbo].[WorkOut]  WITH CHECK ADD  CONSTRAINT [FK_WorkOut_Employee_EmployeeID] FOREIGN KEY([EmployeeID])\nREFERENCES [dbo].[Employee] ([EmployeeID])\n\nALTER TABLE [dbo].[WorkOut] CHECK CONSTRAINT [FK_WorkOut_Employee_EmployeeID]\n']], ['Generate SQL Create Scripts for existing tables with Query'], 3], [(706664, 1), [['Query:'], ['Output:']], [[" DECLARE @table_name SYSNAME\nSELECT @table_name = 'dbo.WorkOut'\n\nDECLARE \n      @object_name SYSNAME\n    , @object_id INT\n\nSELECT \n      @object_name = '[' + s.name + '].[' + o.name + ']'\n    , @object_id = o.[object_id]\nFROM sys.objects o WITH (NOWAIT)\nJOIN sys.schemas s WITH (NOWAIT) ON o.[schema_id] = s.[schema_id]\nWHERE s.name + '.' + o.name = @table_name\n    AND o.[type] = 'U'\n    AND o.is_ms_shipped = 0\n\nDECLARE @SQL NVARCHAR(MAX) = ''\n\n;WITH index_column AS \n(\n    SELECT \n          ic.[object_id]\n        , ic.index_id\n        , ic.is_descending_key\n        , ic.is_included_column\n        , c.name\n    FROM sys.index_columns ic WITH (NOWAIT)\n    JOIN sys.columns c WITH (NOWAIT) ON ic.[object_id] = c.[object_id] AND ic.column_id = c.column_id\n    WHERE ic.[object_id] = @object_id\n),\nfk_columns AS \n(\n     SELECT \n          k.constraint_object_id\n        , cname = c.name\n        , rcname = rc.name\n    FROM sys.foreign_key_columns k WITH (NOWAIT)\n    JOIN sys.columns rc WITH (NOWAIT) ON rc.[object_id] = k.referenced_object_id AND rc.column_id = k.referenced_column_id \n    JOIN sys.columns c WITH (NOWAIT) ON c.[object_id] = k.parent_object_id AND c.column_id = k.parent_column_id\n    WHERE k.parent_object_id = @object_id\n)\nSELECT @SQL = 'CREATE TABLE ' + @object_name + CHAR(13) + '(' + CHAR(13) + STUFF((\n    SELECT CHAR(9) + ', [' + c.name + '] ' + \n        CASE WHEN c.is_computed = 1\n            THEN 'AS ' + cc.[definition] \n            ELSE UPPER(tp.name) + \n                CASE WHEN tp.name IN ('varchar', 'char', 'varbinary', 'binary', 'text')\n                       THEN '(' + CASE WHEN c.max_length = -1 THEN 'MAX' ELSE CAST(c.max_length AS VARCHAR(5)) END + ')'\n                     WHEN tp.name IN ('nvarchar', 'nchar', 'ntext')\n                       THEN '(' + CASE WHEN c.max_length = -1 THEN 'MAX' ELSE CAST(c.max_length / 2 AS VARCHAR(5)) END + ')'\n                     WHEN tp.name IN ('datetime2', 'time2', 'datetimeoffset') \n                       THEN '(' + CAST(c.scale AS VARCHAR(5)) + ')'\n                     WHEN tp.name = 'decimal' \n                       THEN '(' + CAST(c.[precision] AS VARCHAR(5)) + ',' + CAST(c.scale AS VARCHAR(5)) + ')'\n                    ELSE ''\n                END +\n                CASE WHEN c.collation_name IS NOT NULL THEN ' COLLATE ' + c.collation_name ELSE '' END +\n                CASE WHEN c.is_nullable = 1 THEN ' NULL' ELSE ' NOT NULL' END +\n                CASE WHEN dc.[definition] IS NOT NULL THEN ' DEFAULT' + dc.[definition] ELSE '' END + \n                CASE WHEN ic.is_identity = 1 THEN ' IDENTITY(' + CAST(ISNULL(ic.seed_value, '0') AS CHAR(1)) + ',' + CAST(ISNULL(ic.increment_value, '1') AS CHAR(1)) + ')' ELSE '' END \n        END + CHAR(13)\n    FROM sys.columns c WITH (NOWAIT)\n    JOIN sys.types tp WITH (NOWAIT) ON c.user_type_id = tp.user_type_id\n    LEFT JOIN sys.computed_columns cc WITH (NOWAIT) ON c.[object_id] = cc.[object_id] AND c.column_id = cc.column_id\n    LEFT JOIN sys.default_constraints dc WITH (NOWAIT) ON c.default_object_id != 0 AND c.[object_id] = dc.parent_object_id AND c.column_id = dc.parent_column_id\n    LEFT JOIN sys.identity_columns ic WITH (NOWAIT) ON c.is_identity = 1 AND c.[object_id] = ic.[object_id] AND c.column_id = ic.column_id\n    WHERE c.[object_id] = @object_id\n    ORDER BY c.column_id\n    FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, CHAR(9) + ' ')\n    + ISNULL((SELECT CHAR(9) + ', CONSTRAINT [' + k.name + '] PRIMARY KEY (' + \n                    (SELECT STUFF((\n                         SELECT ', [' + c.name + '] ' + CASE WHEN ic.is_descending_key = 1 THEN 'DESC' ELSE 'ASC' END\n                         FROM sys.index_columns ic WITH (NOWAIT)\n                         JOIN sys.columns c WITH (NOWAIT) ON c.[object_id] = ic.[object_id] AND c.column_id = ic.column_id\n                         WHERE ic.is_included_column = 0\n                             AND ic.[object_id] = k.parent_object_id \n                             AND ic.index_id = k.unique_index_id     \n                         FOR XML PATH(N''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, ''))\n            + ')' + CHAR(13)\n            FROM sys.key_constraints k WITH (NOWAIT)\n            WHERE k.parent_object_id = @object_id \n                AND k.[type] = 'PK'), '') + ')'  + CHAR(13)\n    + ISNULL((SELECT (\n        SELECT CHAR(13) +\n             'ALTER TABLE ' + @object_name + ' WITH' \n            + CASE WHEN fk.is_not_trusted = 1 \n                THEN ' NOCHECK' \n                ELSE ' CHECK' \n              END + \n              ' ADD CONSTRAINT [' + fk.name  + '] FOREIGN KEY(' \n              + STUFF((\n                SELECT ', [' + k.cname + ']'\n                FROM fk_columns k\n                WHERE k.constraint_object_id = fk.[object_id]\n                FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')\n               + ')' +\n              ' REFERENCES [' + SCHEMA_NAME(ro.[schema_id]) + '].[' + ro.name + '] ('\n              + STUFF((\n                SELECT ', [' + k.rcname + ']'\n                FROM fk_columns k\n                WHERE k.constraint_object_id = fk.[object_id]\n                FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')\n               + ')'\n            + CASE \n                WHEN fk.delete_referential_action = 1 THEN ' ON DELETE CASCADE' \n                WHEN fk.delete_referential_action = 2 THEN ' ON DELETE SET NULL'\n                WHEN fk.delete_referential_action = 3 THEN ' ON DELETE SET DEFAULT' \n                ELSE '' \n              END\n            + CASE \n                WHEN fk.update_referential_action = 1 THEN ' ON UPDATE CASCADE'\n                WHEN fk.update_referential_action = 2 THEN ' ON UPDATE SET NULL'\n                WHEN fk.update_referential_action = 3 THEN ' ON UPDATE SET DEFAULT'  \n                ELSE '' \n              END \n            + CHAR(13) + 'ALTER TABLE ' + @object_name + ' CHECK CONSTRAINT [' + fk.name  + ']' + CHAR(13)\n        FROM sys.foreign_keys fk WITH (NOWAIT)\n        JOIN sys.objects ro WITH (NOWAIT) ON ro.[object_id] = fk.referenced_object_id\n        WHERE fk.parent_object_id = @object_id\n        FOR XML PATH(N''), TYPE).value('.', 'NVARCHAR(MAX)')), '')\n    + ISNULL(((SELECT\n         CHAR(13) + 'CREATE' + CASE WHEN i.is_unique = 1 THEN ' UNIQUE' ELSE '' END \n                + ' NONCLUSTERED INDEX [' + i.name + '] ON ' + @object_name + ' (' +\n                STUFF((\n                SELECT ', [' + c.name + ']' + CASE WHEN c.is_descending_key = 1 THEN ' DESC' ELSE ' ASC' END\n                FROM index_column c\n                WHERE c.is_included_column = 0\n                    AND c.index_id = i.index_id\n                FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') + ')'  \n                + ISNULL(CHAR(13) + 'INCLUDE (' + \n                    STUFF((\n                    SELECT ', [' + c.name + ']'\n                    FROM index_column c\n                    WHERE c.is_included_column = 1\n                        AND c.index_id = i.index_id\n                    FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') + ')', '')  + CHAR(13)\n        FROM sys.indexes i WITH (NOWAIT)\n        WHERE i.[object_id] = @object_id\n            AND i.is_primary_key = 0\n            AND i.[type] = 2\n        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)')\n    ), '')\n\nPRINT @SQL\n--EXEC sys.sp_executesql @SQL\n"]], ['Generate SQL Create Scripts for existing tables with Query'], 3], [(706664, 2), [['Output:'], ['Also check this article -']], [[' CREATE TABLE [dbo].[WorkOut]\n(\n      [WorkOutID] BIGINT NOT NULL IDENTITY(1,1)\n    , [TimeSheetDate] DATETIME NOT NULL\n    , [DateOut] DATETIME NOT NULL\n    , [EmployeeID] INT NOT NULL\n    , [IsMainWorkPlace] BIT NOT NULL DEFAULT((1))\n    , [DepartmentUID] UNIQUEIDENTIFIER NOT NULL\n    , [WorkPlaceUID] UNIQUEIDENTIFIER NULL\n    , [TeamUID] UNIQUEIDENTIFIER NULL\n    , [WorkShiftCD] NVARCHAR(10) COLLATE Cyrillic_General_CI_AS NULL\n    , [WorkHours] REAL NULL\n    , [AbsenceCode] VARCHAR(25) COLLATE Cyrillic_General_CI_AS NULL\n    , [PaymentType] CHAR(2) COLLATE Cyrillic_General_CI_AS NULL\n    , [CategoryID] INT NULL\n    , [Year] AS (datepart(year,[TimeSheetDate]))\n    , CONSTRAINT [PK_WorkOut] PRIMARY KEY ([WorkOutID] ASC)\n)\n\nALTER TABLE [dbo].[WorkOut] WITH CHECK ADD CONSTRAINT [FK_WorkOut_Employee_EmployeeID] FOREIGN KEY([EmployeeID]) REFERENCES [dbo].[Employee] ([EmployeeID])\nALTER TABLE [dbo].[WorkOut] CHECK CONSTRAINT [FK_WorkOut_Employee_EmployeeID]\n\nCREATE NONCLUSTERED INDEX [IX_WorkOut_WorkShiftCD_AbsenceCode] ON [dbo].[WorkOut] ([WorkShiftCD] ASC, [AbsenceCode] ASC)\nINCLUDE ([WorkOutID], [WorkHours])\n']], ['Generate SQL Create Scripts for existing tables with Query'], 3], [(707371, 0), [['-10000'], ['I recommend to check what the result set to update is before running the update (same query, just with a select):']], [[' update q\nset q.QuestionID = a.QuestionID\nfrom QuestionTrackings q\ninner join QuestionAnswers a\non q.AnswerID = a.AnswerID\nwhere q.QuestionID is null -- and other conditions you might want\n']], ['SQL UPDATE SET one column to be equal to a value in a related table referenced by a different column?'], 2], [(707371, 1), [['I recommend to check what the result set to update is before running the update (same query, just with a select):'], ['Particularly whether each answer id has definitely only 1 associated question id.']], [[' select *\nfrom QuestionTrackings q\ninner join QuestionAnswers a\non q.AnswerID = a.AnswerID\nwhere q.QuestionID is null -- and other conditions you might want\n']], ['SQL UPDATE SET one column to be equal to a value in a related table referenced by a different column?'], 2], [(708967, 0), [['This should do it:'], ['Full answer for ordering completely starting at i, then looping back round to h is:']], [[" ORDER BY CASE WHEN SUBSTRING([Translation Color],1,1) = 'l' \n     THEN 1 ELSE 0 END DESC\n"]], ['Get records ordered alphabetically starting by a certain letter in Sql Server'], 2], [(708967, 1), [['Full answer for ordering completely starting at i, then looping back round to h is:'], ['Please note that this will affect performance on large tables.']], [[' ORDER BY CASE WHEN ASCII(UPPER(SUBSTRING([Translation Color],1,1))) < 73 \n         THEN ASCII(UPPER(SUBSTRING([Translation Color],1,1))) + 26\n         ELSE ASCII(UPPER(SUBSTRING([Translation Color],1,1))) END ASC,       \n         [Translation Color] ASC\n']], ['Get records ordered alphabetically starting by a certain letter in Sql Server'], 2], [(710212, 0), [['SQL has no built in notion of order, so you need to order by some column for this to be meaningful. Something like this:'], ['Here is a way for SQL server that works if you can order rows such that each one is distinct:  ']], [[' select t1.value - t2.value from table t1, table t2 \nwhere t1.primaryKey = t2.primaryKey - 1\n']], ['Is there a way to access the "previous row" value in a SELECT statement?'], 2], [(710212, 1), [['Here is a way for SQL server that works if you can order rows such that each one is distinct:  '], ['If you need to break ties, you can add as many columns as necessary to the ORDER BY.']], [[" select  rank() OVER (ORDER BY id) as 'Rank', value into temp1 from t\n\nselect t1.value - t2.value from temp1 t1, temp1 t2 \nwhere t1.Rank = t2.Rank - 1\n\ndrop table temp1\n"]], ['Is there a way to access the "previous row" value in a SELECT statement?'], 2], [(711936, 0), [['I would do it in two stages:  first, query the newest  $N  records per user, and store them in a temporary table:'], ['Next, use the multi-table  DELETE  syntax and join  foo  to the temporary table, deleting where no match is found:']], [[' CREATE TEMPORARY TABLE foo_top_n\n  SELECT f1.id\n  FROM foo f1 LEFT OUTER JOIN foo f2\n    ON (f1.user_id = f2.user_id AND f1.id < f2.id)\n  GROUP BY f1.id\n  HAVING COUNT(*) < $N;\n']], ["How can I remove all rows that aren't the newest N for each user in MySQL?"], 2], [(711936, 1), [['Next, use the multi-table  DELETE  syntax and join  foo  to the temporary table, deleting where no match is found:'], ['-10000']], [[' DELETE f1 FROM foo f1 LEFT OUTER JOIN foo_top_n f2 USING (id)\nWHERE f2.id IS NULL;\n']], ["How can I remove all rows that aren't the newest N for each user in MySQL?"], 2], [(713960, 0), [["IF you are just processing rows as you describe, wouldn't it be better to just select the top N primary key values into a temp table like:"], ['This runs fine on my SQL Server 2005, where MyTable.MyKey is an identity column.']], [[' CREATE TABLE #KeysToProcess\n(\n     TempID    int  not null primary key identity(1,1)\n    ,YourKey1  int  not null\n    ,YourKey2  int  not null\n)\n\nINSERT INTO #KeysToProcess (YourKey1,YourKey2)\nSELECT TOP n YourKey1,YourKey2  FROM MyTable\n']], ['How to drop IDENTITY property of column in SQL Server 2005'], 3], [(713960, 1), [['This runs fine on my SQL Server 2005, where MyTable.MyKey is an identity column.'], ['\n EDIT \nTHIS WORKS, with no errors...']], [[' -- Create empty temp table\nSELECT *\nINTO #TmpMikeMike\nFROM (SELECT\n      m1.*\n      FROM MyTable                 m1\n          LEFT OUTER JOIN MyTable  m2 ON m1.MyKey=m2.MyKey\n      WHERE 1=0\n ) dt\n\nINSERT INTO #TmpMike\nSELECT TOP 1 * FROM MyTable\n\nSELECT * from #TmpMike\n']], ['How to drop IDENTITY property of column in SQL Server 2005'], 3], [(713960, 2), [['\n EDIT \nTHIS WORKS, with no errors...'], ['however, what is your real problem?   Why do you need to loop while inserting "*" into this temp table?  You may be able to shift strategy and come up with a much better algorithm overall.']], [[' -- Create empty temp table\nSELECT *\nINTO #Tmp_MyTable\nFROM (SELECT\n          m1.*\n          FROM MyTable                 m1\n              LEFT OUTER JOIN MyTable  m2 ON m1.KeyValue=m2.KeyValue\n          WHERE 1=0\n     ) dt\n...\nWHILE ...\nBEGIN\n    ...\n    INSERT INTO #Tmp_MyTable\n    SELECT TOP (@n) *\n    FROM MyTable\n    ...\n\nEND\n']], ['How to drop IDENTITY property of column in SQL Server 2005'], 3], [(714517, 0), [['-10000'], ['Note, though, that if your data will look like this:']], [[' WITH q AS (\n          SELECT Company.*,\n                 ROW_NUMBER() OVER (PARTITION BY CompanyState, CompanyCity, CompanyName ORDER BY CompanyID) AS rnName,\n                 ROW_NUMBER() OVER (PARTITION BY CompanyState, CompanyCity, CompanyAddress ORDER BY CompanyID) AS rnAddress\n          FROM Company\n          )\nSELECT    *\nWHERE     rnName > 1 OR rnAddress > 1\n']], ['How do I extract duplicate records from a table using multiple fields?'], 3], [(714517, 1), [['Note, though, that if your data will look like this:'], ['If you just want to list all rows having duplicates, then issue:']], [[' CompanyID    CompanyName  CompanyAddress \n---------    -----------  --------------\n1            McDonalds    Avenue 1\n2            McDonalds    Avenue 2\n3            Starbucks    Avenue 2\n']], ['How do I extract duplicate records from a table using multiple fields?'], 3], [(714517, 2), [['If you just want to list all rows having duplicates, then issue:'], ['This will work in  SQL Server 2000  too.']], [[' SELECT  *\nFROM    Company co\nWHERE   EXISTS\n        (\n        SELECT  1\n        FROM    Company cn\n        WHERE   cn.CompanyState = co.CompanyState\n                AND cn.CompanyCity = co.CompanyCity\n                AND cn.CompanyName = co.CompanyName\n                AND cn.CompanyID <> co.CompanyID\n        )\n        OR EXISTS\n        (\n        SELECT  1\n        FROM    Company ca\n        WHERE   ca.CompanyState = co.CompanyState\n                AND ca.CompanyCity = co.CompanyCity\n                AND ca.CompanyAddress = co.CompanyAddress\n                AND ca.CompanyID <> co.CompanyID\n        )\n']], ['How do I extract duplicate records from a table using multiple fields?'], 3], [(715246, 0), [['You should use single TAdoConnection object to avoid setting connection string to each component. Keep your connection object closed and open it when you need to access data. Something like this:'], ['You could try to open connection in OnCreate event of datamodule, but be careful to handle  possible exceptions when opening connection. Close connection in OnDestroy event. Then you can use that datamodule like this:']], [[' procedure OnTimer;\nbegin\n  MyAdoConnection.Open;\n  try\n    // Data access code here\n    ...\n  finally\n     MyAdoConnection.Close;\n  end; \nend;\n']], ['Best way to connect to database for this application'], 2], [(715246, 1), [['You could try to open connection in OnCreate event of datamodule, but be careful to handle  possible exceptions when opening connection. Close connection in OnDestroy event. Then you can use that datamodule like this:'], ['-10000']], [[' procedure OnTimer;\nvar myDataModule : TMyDataModule;\nbegin\n  myDataModule  := TMyDataModule.Create;\n  try\n    // Data access code here\n    myDataModule.DoSomeDatabaseWork;\n  finally\n     myDataModule.Free;\n  end; \nend;\n']], ['Best way to connect to database for this application'], 2], [(715350, 0), [['I believe that the answer you need is a user-defined aggregate, similar to this one:'], ['Given a table of elements (called elements) with a column called name containing (funnily enough) the element name, and another column called atomic_number, this query produces this result:']], [[" CREATE FUNCTION gc_init(dummy VARCHAR(255)) RETURNING LVARCHAR;\n    RETURN '';\nEND FUNCTION;\n\nCREATE FUNCTION gc_iter(result LVARCHAR, value VARCHAR(255))\n    RETURNING LVARCHAR;\n    IF result = '' THEN\n        RETURN TRIM(value);\n    ELSE\n        RETURN result || ',' || TRIM(value);\n    END IF;\nEND FUNCTION;\n\nCREATE FUNCTION gc_comb(partial1 LVARCHAR, partial2 LVARCHAR)\n    RETURNING LVARCHAR;\n    IF partial1 IS NULL OR partial1 = '' THEN\n        RETURN partial2;\n    ELIF partial2 IS NULL OR partial2 = '' THEN\n        RETURN partial1;\n    ELSE\n        RETURN partial1 || ',' || partial2;\n    END IF;\nEND FUNCTION;\n\nCREATE FUNCTION gc_fini(final LVARCHAR) RETURNING LVARCHAR;\n    RETURN final;\nEND FUNCTION;\n\nCREATE AGGREGATE group_concat\n    WITH (INIT = gc_init, ITER = gc_iter,\n          COMBINE = gc_comb, FINAL = gc_fini);\n"]], ['Show a one to many relationship as 2 columns - 1 unique row (ID & comma separated list)'], 6], [(715350, 1), [['Given a table of elements (called elements) with a column called name containing (funnily enough) the element name, and another column called atomic_number, this query produces this result:'], ['Applied to the question, you should obtain the answer you need from:']], [[' SELECT group_concat(name) FROM elements WHERE atomic_number < 10;\n\nHydrogen,Helium,Lithium,Beryllium,Boron,Carbon,Nitrogen,Oxygen,Fluorine\n']], ['Show a one to many relationship as 2 columns - 1 unique row (ID & comma separated list)'], 6], [(715350, 2), [['Applied to the question, you should obtain the answer you need from:'], ['-10000']], [[' SELECT id, group_concat(codes)\n    FROM anonymous_table\n    GROUP BY id;\n']], ['Show a one to many relationship as 2 columns - 1 unique row (ID & comma separated list)'], 6], [(715350, 3), [['-10000'], ['The output from that is:']], [[" CREATE TEMP TABLE anonymous_table\n(\n    id      INTEGER NOT NULL,\n    codes   CHAR(4) NOT NULL,\n    PRIMARY KEY (id, codes)\n);\n\nINSERT INTO anonymous_table VALUES(63592, 'PELL');\nINSERT INTO anonymous_table VALUES(58640, 'SUBL');\nINSERT INTO anonymous_table VALUES(58640, 'USBL');\nINSERT INTO anonymous_table VALUES(73571, 'PELL');\nINSERT INTO anonymous_table VALUES(73571, 'USBL');\nINSERT INTO anonymous_table VALUES(73571, 'SUBL');\nINSERT INTO anonymous_table VALUES(73572, 'USBL');\nINSERT INTO anonymous_table VALUES(73572, 'PELL');\nINSERT INTO anonymous_table VALUES(73572, 'SUBL');\n\nSELECT id, group_concat(codes)\n    FROM anonymous_table\n    GROUP BY id\n    ORDER BY id;\n"]], ['Show a one to many relationship as 2 columns - 1 unique row (ID & comma separated list)'], 6], [(715350, 4), [['The output from that is:'], ['If you need to remove the aggregate, you can use:']], [[' 58640 SUBL,USBL\n63592 PELL\n73571 PELL,SUBL,USBL\n73572 PELL,SUBL,USBL\n']], ['Show a one to many relationship as 2 columns - 1 unique row (ID & comma separated list)'], 6], [(715350, 5), [['If you need to remove the aggregate, you can use:'], ['-10000']], [[' DROP AGGREGATE IF EXISTS group_concat;\nDROP FUNCTION IF EXISTS gc_fini;\nDROP FUNCTION IF EXISTS gc_init;\nDROP FUNCTION IF EXISTS gc_iter;\nDROP FUNCTION IF EXISTS gc_comb;\n']], ['Show a one to many relationship as 2 columns - 1 unique row (ID & comma separated list)'], 6], [(715915, 0), [['-10000'], ['DISTINCT is wrong.  It will allow 2 stores to share the same number.  Use GROUP BY to ensure that the second column is unique.']], [[' SELECT DISTINCT sc.StoreID, dbo.GetPhoneNumber10(sc.Phone)\n']], ['SQL query to pull unique phone numbers from 2 related tables'], 2], [(715915, 1), [['DISTINCT is wrong.  It will allow 2 stores to share the same number.  Use GROUP BY to ensure that the second column is unique.'], ['The reason you could get away with distinct in the other queries, was that you were working with a single StoreID in them.  This query returns multiple StoreIDs.']], [[' INSERT INTO dbo.Store_PhoneNumbers (StoreID, PhoneNumber)\nSELECT MIN(StoreID), PhoneNumber\nFROM\n(\n  SELECT sc.StoreID as StoreID, dbo.GetPhoneNumber10(sc.Phone) as PhoneNumber\n  FROM Store_Contacts sc\n      INNER JOIN\n      Store_Info si ON sc.StoreID = si.StoreID\n  WHERE (dbo.IsAniNumber(dbo.GetPhoneNumber10(sc.Phone)) = 1)\n      AND (si.ParentID = 0)\n      AND NOT EXISTS (SELECT * FROM dbo.Store_PhoneNumbers WHERE PhoneNumber = dbo.GetPhonenumber10(sc.Phone))\n) sub\nGROUP BY PhoneNumber\n']], ['SQL query to pull unique phone numbers from 2 related tables'], 2], [(723054, 0), [['If you wanted to get the "cheapest" employee in each department you would have two choices off the top of my head:'], ['Or you can use:']], [[" SELECT\n     E.*     -- Don't actually use *, list out all of your columns\nFROM\n     Employees E\nINNER JOIN\n     (\n          SELECT\n               department,\n               MIN(salary) AS min_salary\n          FROM\n               Employees\n          GROUP BY\n               department\n     ) AS SQ ON\n     SQ.department = E.department AND\n     SQ.min_salary = E.salary\n"]], ['Extra Fields with SQL MIN() & GROUP BY'], 2], [(723054, 1), [['Or you can use:'], ["The second statement works by effectively saying, show me all employees where you can't find another employee in the same department with a lower salary."]], [[' SELECT\n     E.*\nFROM\n     Employees E1\nLEFT OUTER JOIN Employees E2 ON\n     E2.department = E1.department AND\n     E2.salary < E1.salary\nWHERE\n     E2.employee_id IS NULL -- You can use any NOT NULL column here\n']], ['Extra Fields with SQL MIN() & GROUP BY'], 2], [(725556, 0), [['You can also try:'], ['Alternatively, ']], [[' INSERT IGNORE\n  INTO table_1 \nSELECT *\n  FROM table_2\n     ;\n']], ['How can I merge two MySQL tables?'], 2], [(725556, 1), [['Alternatively, '], ['will update those rows already in table_1 with the corresponding row from table_2, while inserting rows with new primary keys.']], [[' REPLACE\n   INTO table_1\n SELECT *\n   FROM table_2\n      ;\n']], ['How can I merge two MySQL tables?'], 2], [(726582, 0), [["This will only really work if the pivoted columns form a unique identifier. So let's take Buggy's example; here is the original table:"], ['and we want to pivot it into a table that looks like this:']], [[' TaskID    Date    Hours\n']], ['Updates on PIVOTs in SQL Server 2008'], 5], [(726582, 1), [['and we want to pivot it into a table that looks like this:'], ['In order to create the pivot, you would do something like this:']], [[' TaskID    11/15/1980    11/16/1980    11/17/1980 ... etc.\n']], ['Updates on PIVOTs in SQL Server 2008'], 5], [(726582, 2), [['In order to create the pivot, you would do something like this:'], ['So then you have your pivoted table in  ##Pivoted . Now you perform an update to one of the hours fields:']], [[" DECLARE @FieldList NVARCHAR(MAX)\n\nSELECT\n    @FieldList =\n    CASE WHEN @FieldList <> '' THEN \n        @FieldList + ', [' + [Date] + ']' \n    ELSE \n        '[' + [Date] + ']' \n    END\nFROM\n    Tasks\n\n\n\nDECLARE @PivotSQL NVARCHAR(MAX)\nSET @PivotSQL = \n    '\n        SELECT \n            TaskID\n            , ' + @FieldList + '\n        INTO\n            ##Pivoted\n        FROM \n            (\n                SELECT * FROM Tasks\n            ) AS T\n        PIVOT\n            (\n                MAX(Hours) FOR T.[Date] IN (' + @FieldList + ') \n            ) AS PVT\n    '\n\nEXEC(@PivotSQL)\n"]], ['Updates on PIVOTs in SQL Server 2008'], 5], [(726582, 3), [['So then you have your pivoted table in  ##Pivoted . Now you perform an update to one of the hours fields:'], ['Now  ##Pivoted  has an updated version of the hours for a task that took place on 11/16/1980 and we want to save that back to the original table, so we use an  UNPIVOT :']], [[' UPDATE\n    ##Pivoted\nSET\n    [11/16/1980 00:00:00] = 10\nWHERE\n    TaskID = 1234\n']], ['Updates on PIVOTs in SQL Server 2008'], 5], [(726582, 4), [['Now  ##Pivoted  has an updated version of the hours for a task that took place on 11/16/1980 and we want to save that back to the original table, so we use an  UNPIVOT :'], ["You'll notice that I modified Buggy's example to remove aggregation by day-of-week. That's because there's no going back and updating if you perform any sort of aggregation. If I update the SUNHours field, how do I know which Sunday's hours I'm updating? This will only work if there is no aggregation. I hope this helps!"]], [[" DECLARE @UnPivotSQL NVarChar(MAX)\nSET @UnPivotSQL = \n    '\n        SELECT\n              TaskID\n            , [Date]\n            , [Hours]\n        INTO \n            ##UnPivoted\n        FROM\n            ##Pivoted\n        UNPIVOT\n        (\n            Value FOR [Date] IN (' + @FieldList + ')\n        ) AS UP\n\n    '\n\nEXEC(@UnPivotSQL)\n\nUPDATE\n    Tasks\nSET\n    [Hours] = UP.[Hours]\nFROM\n    Tasks T\nINNER JOIN\n    ##UnPivoted UP\nON\n    T.TaskID = UP.TaskID\n"]], ['Updates on PIVOTs in SQL Server 2008'], 5], [(727346, 0), [['We know that:'], ['A. List all table names into @tList table variable']], [[" \ncreate table #refTrack \n(\n    tbl sysname,\n    id int, \n    refId int\n)\n\ninsert InvoiceDetail (refId, invoiceNum, sequence, description, price)\noutput 'InvoiceDetail', inserted.id, inserted.refId into #refTrack \nselect invoiceNum, invoiceNum, sequence, description, price from InvoiceDetail \nwhere custID = 808 -- denormalized original Bob^s custID\n"]], ['Copying a set of records with constraints, with common ancestor'], 4], [(727346, 1), [['A. List all table names into @tList table variable'], ['B. Loop the @tList table in a cursor.']], [[" \ndeclare @tList table\n(\n     tbl sysname primary key,\n     fkTbl sysname,\n     fkCol sysname,\n     depth int\n)\ninsert @tList select 'Customer', null, null, 0\ninsert @tList select 'Invoice', 'Customer', 'custID', 1\ninsert @tList select 'InvoiceDetail', 'Invoice', 'invoiceNum', 2\n"]], ['Copying a set of records with constraints, with common ancestor'], 4], [(727346, 2), [['B. Loop the @tList table in a cursor.'], ['C. The content of FnGetColumns():']], [[" \ndeclare \n    @depth int,\n    @tbl sysname,\n    @fkTbl sysname,\n    @fkCol sysname,\n    @exec nvarchar(max),\n    @insCols nvarchar(max),\n    @selCols nvarchar(max),\n    @where nvarchar(max),\n    @newId int,\n    @mainTbl sysname,\n    @custId int \n\n\nselect @custId = 808 -- original Bob^s custID to copy from\n\nselect @mainTbl = tbl from @tList where fkTbl is null\n\ndeclare dbCursor cursor local forward_only read_only for  \n    select tbl, fkTbl, fkCol, depth from @tlist order by depth\nopen dbCursor   \nfetch next from dbCursor into @tbl, @fkTbl, @fkCol, @depth \nwhile @@fetch_status = 0   \nbegin   \n    set @where = case when @depth = 0 then 'Id' else 'custId' end + ' = ' + \n        cast(@custId as nvarchar(20))\n    set @insCols = dbo.FnGetColumns(@tbl) \n    set @selCols = replace\n    (\n        @insCols, \n        'refId', \n        'Id'\n    )\n    set @exec = 'insert ' + @tbl + ' (' + @insCols + ') ' + \n        'output ''' + @tbl + ''', inserted.id, inserted.refId into #refTrack ' +\n        'select ' + @selCols + ' from ' + @tbl + ' where ' + @where\n\n    print @exec\n    exec(@exec)\n\n    -- remap parent\n    if isnull(@fkTbl, @mainTbl) != @mainTbl -- third level onwards\n    begin\n        set @exec = 'update ' + @tbl + ' set ' + @tbl + '.' + @fkCol + ' = rf.Id from ' + \n            @tbl + ' join #refTrack as rf on ' + @tbl + '.' + @fkCol + ' = rf.refId and rf.tbl = ''' + \n            @fkTbl + ''' where ' + @tbl + '.custId = ' + cast(@newId as nvarchar(20))\n\n        print @exec\n        exec(@exec)\n    end\n\n    if @depth = 0 select @newId = Id from #refTrack\n    fetch next from dbCursor into @tbl, @fkTbl, @fkCol, @depth \nend   \n\nclose dbCursor\ndeallocate dbCursor\n\nselect * from @tList order by depth\nselect * from #refTrack\n\ndrop table #refTrack \n"]], ['Copying a set of records with constraints, with common ancestor'], 4], [(727346, 3), [['C. The content of FnGetColumns():'], ['I am sure we can further improve these scripts to be far more dynamic. But for the sake of solving the problem, this would be the minimum requirement.']], [[" \ncreate function FnGetColumns(@tableName sysname) \nreturns nvarchar(max)\nas\nbegin\n    declare @cols nvarchar(max)\n    set @cols = ''\n    select @cols = @cols + ', ' + column_name \n        from information_schema.columns \n        where table_name = @tableName\n            and column_name <> 'id' -- non PK\n    return substring(@cols, 3, len(@cols))\nend\n"]], ['Copying a set of records with constraints, with common ancestor'], 4], [(727655, 0), [['-10000'], ['You can also specify the NLS_NUMERIC_CHARACTERS setting in the TO_CHAR statement rather than setting it at the session level']], [[" SQL> alter session set nls_numeric_characters = ', '\n  2  ;\n\nSession altered.\n\nSQL> select to_char(999999/100, '9G999D99')\n  2    from dual;\n\nTO_CHAR(9\n---------\n 9 999,99\n"]], ['plsql custom numeric format'], 2], [(727655, 1), [['You can also specify the NLS_NUMERIC_CHARACTERS setting in the TO_CHAR statement rather than setting it at the session level'], ['-10000']], [["   1  select to_char(999999/100, '9G999D99', 'nls_numeric_characters='', '' ')\n  2*   from dual\nSQL> /\n\nTO_CHAR(9\n---------\n 9 999,99\n"]], ['plsql custom numeric format'], 2], [(728131, 0), [['The INFORMATION_SCHEMA.COLUMNS view will provide the column names for a particular table name.'], ['There are several other views as well as the one above which you may find useful. These INFORMATION_SCHEMA views provide information on the schema of your database. ']], [[" SELECT Column_Name + ', '\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = 'Table_Name'\n"]], ['What is the Select statement to return the column names in a table'], 2], [(728131, 1), [['There are several other views as well as the one above which you may find useful. These INFORMATION_SCHEMA views provide information on the schema of your database. '], ['-10000']], [[' Select top 10 * from Information_Schema.tables \nSelect top 10 * from Information_Schema.views \nSelect top 10 * from Information_Schema.routines \nSelect top 10 * from Information_Schema.parameters\n']], ['What is the Select statement to return the column names in a table'], 2], [(728221, 0), [['To temporarily disable a constraint (foreign keys are constraints):'], ['To re-enable a constraint']], [[' ALTER TABLE MyTable NOCHECK CONSTRAINT MyConstraint\n']], ['Disable Foreign key constraint on a table?'], 2], [(728221, 1), [['To re-enable a constraint'], ['-10000']], [[' ALTER TABLE MyTable CHECK CONSTRAINT MyConstraint\n']], ['Disable Foreign key constraint on a table?'], 2], [(729224, 0), [['How about this:'], ['This gives students per course. If you just want the total number enrolled on any course:']], [[' SELECT  course, COUNT(DISTINCT student)\nFROM    course_enrolment\nGROUP BY course\n']], ['Simple SQL to return a count without using sub queries'], 2], [(729224, 1), [['This gives students per course. If you just want the total number enrolled on any course:'], ["I believe that's all ANSI-standard SQL, so should work most places."]], [[' SELECT  COUNT(DISTINCT student)\nFROM    course_enrolment\n']], ['Simple SQL to return a count without using sub queries'], 2], [(729428, 0), [['-10000'], ['-10000']], [[" DECLARE @YourTable TABLE (\n  A VARCHAR(2)\n  , B VARCHAR(2)\n  , C VARCHAR(2)\n  , D VARCHAR(2))\n\nINSERT INTO @YourTable VALUES (NULL, 'd0', 'd0', NULL)\nINSERT INTO @YourTable VALUES (NULL, 'd0', 'd1', NULL)\nINSERT INTO @YourTable VALUES (NULL, 'd0', 'd2', 'a0')\nINSERT INTO @YourTable VALUES ('d0', 'd1', 'd1', NULL)\nINSERT INTO @YourTable VALUES ('d0', 'd2', 'd2', 'a0')\n\n\nSELECT A, B, C = MIN(C), D\nFROM @YourTable\nGROUP BY A, B, D\n"]], ['Eliminate partial duplicate rows from result set'], 3], [(729428, 1), [['-10000'], ['-10000']], [[' SELECT A, B, CASE WHEN MIN(C) = MAX(C) THEN MIN(C) ELSE NULL END, D\nFROM @YourTable\nGROUP BY A, B, D\n']], ['Eliminate partial duplicate rows from result set'], 3], [(729428, 2), [['-10000'], ['-10000']], [[" SELECT A, B, CASE WHEN MIN(COALESCE(C, 'dx')) = MAX(COALESCE(C, 'dx')) THEN MIN(C) ELSE NULL END, D\nFROM @YourTable\nGROUP BY A, B, D\n"]], ['Eliminate partial duplicate rows from result set'], 3], [(730670, 0), [['-10000'], ['Since you mentioned  SQL Server 2005 , the following will be easier and more efficient:']], [[" SELECT  du.userID, unit.answer, demo.answer\nFROM    (\n        SELECT  DISTINCT userID\n        FROM    table1\n        WHERE   date > '1/1/2009'\n        ) du\nLEFT JOIN\n        table2 unit\nON      (userID, question, counter) IN\n        (\n        SELECT  du.userID, 'Unit', MAX(counter)\n        FROM    table2 td\n        WHERE   userID = du.userID\n                AND question = 'Unit'\n        )\nLEFT JOIN\n        table2 demo\nON      (userID, question, counter) IN\n        (\n        SELECT  du.userID, 'Demo', MAX(counter)\n        FROM    table2 td\n        WHERE   userID = du.userID\n                AND question = 'Demo'\n        )\n"]], ['SQL: 3 self-joins and then join them together'], 3], [(730670, 1), [['Since you mentioned  SQL Server 2005 , the following will be easier and more efficient:'], ['To aggregate:']], [[" SELECT  du.userID,\n        (\n        SELECT  TOP 1 answer\n        FROM    table2 ti\n        WHERE   ti.user = du.userID\n                AND ti.question = 'Unit'\n        ORDER BY\n                counter DESC\n        ) AS unit_answer,\n        (\n        SELECT  TOP 1 answer\n        FROM    table2 ti\n        WHERE   ti.user = du.userID\n                AND ti.question = 'Demo'\n        ORDER BY\n                counter DESC\n        ) AS demo_answer\nFROM    (\n        SELECT  DISTINCT userID\n        WHERE   date > '1/1/2009'\n        FROM    table1\n        ) du\n"]], ['SQL: 3 self-joins and then join them together'], 3], [(730670, 2), [['To aggregate:'], ['-10000']], [[" SELECT  answer, COUNT(*)\nFROM    (\n        SELECT  DISTINCT userID\n        FROM    table1\n        WHERE   date > '1/1/2009'\n        ) du\nJOIN    table2 t2\nON      t2.userID = du.userID\n        AND t2.question = 'Unit'\nGROUP BY\n        answer\n"]], ['SQL: 3 self-joins and then join them together'], 3], [(730722, 0), [['-10000'], ['Strict expression looks like this:']], [[' (event.start BETWEEN week.start AND week.end)\nOR\n(week.start BETWEEN event.start AND event.end)\n']], ['How to determine if a date range occurs any time within another date range?'], 3], [(730722, 1), [['Strict expression looks like this:'], ['This expression looks more complex than the one which is commonly used:']], [[' (event.start >= week.start AND event.start < week.end)\nOR\n(week.start >= event.start AND week.start < event.end)\n']], ['How to determine if a date range occurs any time within another date range?'], 3], [(730722, 2), [['This expression looks more complex than the one which is commonly used:'], [', but the former is more efficient and index friendly.']], [[' event.start < week.end AND event.end > week.start\n']], ['How to determine if a date range occurs any time within another date range?'], 3], [(733668, 0), [['-10000'], ['Note that']], [[' WITH  q AS\n        (\n        SELECT TOP 1 *\n        FROM    mytable\n        /* You may want to add ORDER BY here */\n        )\nDELETE\nFROM    q\n']], ["Delete the 'first' record from a table in SQL Server, without a WHERE condition"], 2], [(733668, 1), [['Note that'], ['will also work, but, as stated in the  documentation :']], [[' DELETE TOP (1)\nFROM   mytable\n']], ["Delete the 'first' record from a table in SQL Server, without a WHERE condition"], 2], [(734806, 0), [['Create a table "system_user":'], ["To get all of the users in a system you'd query like so:"]], [[' CREATE TABLE system_user (system_id INT NOT NULL, user_id INT NOT NULL);\n']], ['Another Many-Many Scenario'], 3], [(734806, 1), [["To get all of the users in a system you'd query like so:"], ["To get all of the systems a user can reach, you'd query like so:"]], [[' SELECT u.* FROM user u, system_user su WHERE su.system_id = ?\n']], ['Another Many-Many Scenario'], 3], [(734806, 2), [["To get all of the systems a user can reach, you'd query like so:"], ['Hope this helps!']], [[' SELECT s.* FROM system s, system_user su WHERE u.user_id = ?\n']], ['Another Many-Many Scenario'], 3], [(737115, 0), [['You can disable FK and CHECK constraints  only in SQL 2005+ . See  ALTER TABLE'], ['or']], [[' ALTER TABLE foo NOCHECK CONSTRAINT ALL\n']], ['Turn off constraints temporarily (MS SQL)'], 2], [(737115, 1), [['or'], ["Primary keys and unique constraints can not be disabled, but this should be OK if I've understood you correctly."]], [[' ALTER TABLE foo NOCHECK CONSTRAINT CK_foo_column\n']], ['Turn off constraints temporarily (MS SQL)'], 2], [(737834, 0), [['Chances are the extra joins are killing you. What if you do:'], ["This one may be a single index scan which  could  be faster than two index seeks, but it depends on SQLite's optimizer..."]], [[" SELECT Subscribers.ID, '1' AS TemplateID\nFROM Subscribers \nWHERE EXISTS( SELECT *\n                FROM SubscriberGroups\n               WHERE Subscribers.ID=SubscriberGroups.SubscriberID\n                                 AND SubscriberGroups.GroupID IN ('1', '2', '3') )\n\n  AND NOT EXISTS( SELECT *\n                    FROM SubscriberGroups\n                   WHERE Subscribers.ID=SubscriberGroups.SubscriberID \n                     AND SubscriberGroups.GroupID IN ('4', '5', '6')\n    );\n"]], ['SQLite optimizing multi-select insert'], 2], [(737834, 1), [["This one may be a single index scan which  could  be faster than two index seeks, but it depends on SQLite's optimizer..."], ['-10000']], [[" SELECT Subscribers.ID, '1' AS TemplateID\nFROM Subscribers \nINNER JOIN( SELECT SUM( CASE WHEN GroupID IN('1', '2', '3') THEN 1 ELSE 0 END ) AS inGroup,\n                   SUM( CASE WHEN GroupID IN('4', '5', '6') THEN 1 ELSE 0 END ) AS outGroup,\n                   SubscriberID\n                            FROM SubscriberGroups\n                         WHERE SubscriberGroups.GroupID IN ('1', '2', '3', '4', '5', '6' )\n          ) SubscriberGroups\n       ON Subscribers.ID=SubscriberGroups.SubscriberID\n      AND inGroup  > 0\n      AND outGroup = 0\n"]], ['SQLite optimizing multi-select insert'], 2], [(738401, 0), [['So your code example would be:'], ['Or, if you use an internal structure, it would be more like this:']], [[" SELECT UserStatusID\nFROM Users \nWHERE UserStatus = (\n                   SELECT INTEGER_VALUE\n                   from DB_CONSTANTS\n                   WHERE CONSTANT_ID = 'ACTIVE_USER_STATUS_ID'\n                   )\n"]], ['Best practice for keeping named constants in code and database reference tables in sync?'], 2], [(738401, 1), [['Or, if you use an internal structure, it would be more like this:'], ['-10000']], [[' SELECT UserStatusID\nFROM Users \nWHERE UserStatus = g_Constants.ActiveUserStatusID;\n']], ['Best practice for keeping named constants in code and database reference tables in sync?'], 2], [(738575, 0), [['If you want a certain index to be used in  SQL Server , issue:'], ['Note that you can efficiently filter on the first columns from the index, like:']], [[" SELECT  *\nFROM    Profiles WITH (INDEX (index_name))\nWHERE \n        FirstName = 'chris' and\n        LastName = 'test' and\n        Address1 = '123 main st' and\n        City = 'chicago' and\n        State = 'il' and\n        Zip = '11111'\n"]], ['SQL Server index question - address lookup'], 5], [(738575, 1), [['Note that you can efficiently filter on the first columns from the index, like:'], ['will use the index to search on  FirstName ,']], [[" SELECT  *\nFROM    Profiles\nWHERE   FirstName = 'chris'\n"]], ['SQL Server index question - address lookup'], 5], [(738575, 2), [['will use the index to search on  FirstName ,'], ['will use the index to search on both  FirstName  and  LastName ,']], [[" SELECT  *\nFROM    Profiles\nWHERE   FirstName = 'chris'\n        AND LastName = 'test'\n"]], ['SQL Server index question - address lookup'], 5], [(738575, 3), [['will use the index to search on both  FirstName  and  LastName ,'], ['Is there a command I can run over my sample data that will tell me uniqueness of values in each field?']], [[" SELECT  *\nFROM    Profiles\nWHERE   FirstName = 'chris'\n        AND City = 'chicago'\n"]], ['SQL Server index question - address lookup'], 5], [(738575, 4), [['Is there a command I can run over my sample data that will tell me uniqueness of values in each field?'], ['will show you  FirstName  reciprocal selectivity.']], [[' SELECT   COUNT(DISTINCT FirstName) / COUNT(*)\nFROM     Profiles\n']], ['SQL Server index question - address lookup'], 5], [(739557, 0), [['If you would write the query like so:'], ['you would get something like this:']], [[' SELECT c.CategoryName, s.ID_Super \nFROM Categories c \nLEFT OUTER JOIN SuperCategories s ON c.ID_Category = s.SuperCategoryID\n']], ["SQL query on two tables - return rows in one table that don't have entries in the other"], 2], [(739557, 1), [['you would get something like this:'], ["So this basically gives you your answer - all the rows where the ID_Super on the LEFT OUTER JOIN is NULL are those who don't have any entries in the SuperCategories table. All clear? :-)"]], [[' CategoryName    ID_Super\nBox               1\nBox               2\nRed Box           NULL\nBlue Box          3\nBlue Plastic Box  NULL\nCan               4\nTin Can           NULL\n']], ["SQL query on two tables - return rows in one table that don't have entries in the other"], 2], [(742508, 0), [["I'd write the query this way:"], ["Here's another solution, but offers that don't have  any  converted clicks are not shown in the query result:"]], [[' SELECT o.name AS offer, COUNT(c.id) AS clicks, \n  SUM( IF(c.conversionDate IS NOT NULL, o.commission, NULL) ) AS revenue \nFROM offers o JOIN clicks c ON (c.offerID=o.ID)\nGROUP BY o.ID;\n']], ['sql query with if statment'], 2], [(742508, 1), [["Here's another solution, but offers that don't have  any  converted clicks are not shown in the query result:"], ['-10000']], [[' SELECT o.name AS offer, COUNT(c.id) AS clicks, \n  SUM(o.commission) AS revenue \nFROM offers o JOIN clicks c \n  ON (c.offerID=o.ID AND c.conversionDate IS NOT NULL)\nGROUP BY o.ID;\n']], ['sql query with if statment'], 2], [(743772, 0), [["We have this same problem in SQL Server (it's an ANSI problem).  I believe it is intended to avoid confusing aliasing effects:"], ['We work around it by stacking up common table expressions:']], [[' SELECT A * 2 AS A\n    ,A * 3 AS B -- This is the original A, not the new A\nFROM whatever\n']], ['How to reuse dynamic columns in an Oracle SQL statement?'], 2], [(743772, 1), [['We work around it by stacking up common table expressions:'], ['This is the most readable and maintable and followable version.']], [[' WITH A1 AS (\n    SELECT A * 2 AS A\n    FROM whatever\n)\n,A2 AS (\n    SELECT A1.*\n        ,A * 3 AS B\n    FROM A1\n)\n,A3 AS (\n    SELECT A2.*\n        ,A + B AS X\n    FROM A2\n)\nSELECT *\nFROM A3\n']], ['How to reuse dynamic columns in an Oracle SQL statement?'], 2], [(743858, 0), [['This primarily matters when used with composite indexes:'], ['can be used for either:']], [[' CREATE INDEX ix_index ON mytable (col1, col2 DESC);\n']], ['SQL Server indexes - ascending or descending, what difference does it make?'], 8], [(743858, 1), [['can be used for either:'], ['or:']], [[' SELECT  *\nFROM    mytable\nORDER BY\n        col1, col2 DESC\n']], ['SQL Server indexes - ascending or descending, what difference does it make?'], 8], [(743858, 2), [['or:'], [', but not for:']], [[' SELECT  *\nFROM    mytable\nORDER BY\n        col1 DESC, col2\n']], ['SQL Server indexes - ascending or descending, what difference does it make?'], 8], [(743858, 3), [[', but not for:'], ['Imagine an index on a column of a clustered table:']], [[' SELECT  *\nFROM    mytable\nORDER BY\n        col1, col2\n']], ['SQL Server indexes - ascending or descending, what difference does it make?'], 8], [(743858, 4), [['Imagine an index on a column of a clustered table:'], ['This means that that leaves of the index are actually ordered on  (col1, pk) , and this query:']], [[' CREATE TABLE mytable (\n       pk INT NOT NULL PRIMARY KEY,\n       col1 INT NOT NULL\n)\nCREATE INDEX ix_mytable_col1 ON mytable (col1)\n']], ['SQL Server indexes - ascending or descending, what difference does it make?'], 8], [(743858, 5), [['This means that that leaves of the index are actually ordered on  (col1, pk) , and this query:'], ['If we create the index as following:']], [[' SELECT  col1, pk\nFROM    mytable\nORDER BY\n        col1, pk\n']], ['SQL Server indexes - ascending or descending, what difference does it make?'], 8], [(743858, 6), [['If we create the index as following:'], ['This means that the following query:']], [[' CREATE INDEX ix_mytable_col1_desc ON mytable (col1 DESC)\n']], ['SQL Server indexes - ascending or descending, what difference does it make?'], 8], [(743858, 7), [['This means that the following query:'], ['can be served by  ix_mytable_col1_desc  but not by  ix_mytable_col1 .']], [[' SELECT  col1, pk\nFROM    mytable\nORDER BY\n        col1, pk DESC\n']], ['SQL Server indexes - ascending or descending, what difference does it make?'], 8], [(745242, 0), [['To find current owner:'], ['To find owner at a point in time:']], [[' select carid, ownerid from CarOwner where end_date is null\n']], ["What's the best way to store (and access) historical 1:M relationships in a relational database?"], 3], [(745242, 1), [['To find owner at a point in time:'], ['Of course if you also want additional info from the other tables, you would join to them as well.']], [[' select carid, ownerid from CarOwner where start_date < getdate()\nand end_date > getdate()\n']], ["What's the best way to store (and access) historical 1:M relationships in a relational database?"], 3], [(745242, 2), [['Of course if you also want additional info from the other tables, you would join to them as well.'], ['-10000']], [[' select co.carid, co.ownerid, o.owner_name, c.make, c.Model, c.year  \nfrom  CarOwner co\nJOIN Car c on co.carid = c.carid\nJOIN Owner o on o.ownerid = co.ownerid\nwhere co.end_date is null\n']], ["What's the best way to store (and access) historical 1:M relationships in a relational database?"], 3], [(747021, 0), [['First, you need a query to assign a number from 1 to N to the teams associated to a user:'], ["Let's call this query TeamList. \nNow, you can use this query in the main query, by calling it 7 times, each time filtering a different position:"]], [[' SELECT UserID, TeamID, \n       (SELECT count(*) FROM TeamTable t2 WHERE t2.TeamID <= TeamTable.TeamID and t2.UserID=TeamTable.UserID) AS position \nFROM TeamTable \nORDER BY TeamID\n']], ['Flatten relational data for summary/export'], 2], [(747021, 1), [["Let's call this query TeamList. \nNow, you can use this query in the main query, by calling it 7 times, each time filtering a different position:"], ["You could assemble all this in a single query, but it's more practical to define the TeamList query and calling it multiple times.\nAlso note that this way the numbering is based on the order of TeamID. You can choose another order by changing the TeamList query, but the field you choose must have different unique values for each Team (or the <= comparison will generate wrong numbers)."]], [[' SELECT UserTable.ID As UID, UserTable.Name, \n   (SELECT TeamID FROM TeamList WHERE UserTable.ID = TeamList.UserID AND position=1) As Team1,\n   (SELECT TeamID FROM TeamList WHERE UserTable.ID = TeamList.UserID AND position=2) As Team2,\n   [...]\nFROM UserTable \n']], ['Flatten relational data for summary/export'], 2], [(751270, 0), [['Create another table:'], ['To lock, increment, and return the new value in a single statement, use:']], [[' t_identity (id INT NOT NULL PRIMARY KEY CHECK (id = 1), value INT NOT NULL)\n']], ['Best way to get the next id number without "identity"'], 3], [(751270, 1), [['To lock, increment, and return the new value in a single statement, use:'], ["If you don't want to update, just lock, then issue:"]], [[' UPDATE  t_identity\nSET     value = value + 1\nOUTPUT  INSERTED.value\n']], ['Best way to get the next id number without "identity"'], 3], [(751270, 2), [["If you don't want to update, just lock, then issue:"], ['This will lock the table until the end of the transaction.']], [[' SELECT  value\nFROM    t_identity WITH (UPDLOCK, ROWLOCK)\n']], ['Best way to get the next id number without "identity"'], 3], [(755286, 0), [['To match an actual underscore, you need to escape it:'], ['Alternatively, you can represent the underscore as a character range with a single character in it - it will be interpreted literally in this case:']], [[" select * from tblNames where id like '%\\_1' escape '\\'\n"]], ['Strange behavior of sql server'], 2], [(755286, 1), [['Alternatively, you can represent the underscore as a character range with a single character in it - it will be interpreted literally in this case:'], ['Which is a bit more succinct.']], [[" select * from tblNames where id like '%[_]1'\n"]], ['Strange behavior of sql server'], 2], [(755827, 0), [['-10000'], ['Which utilises  this  general-purpose split function:']], [[" create function dbo.fn_splitQuerystring(@querystring nvarchar(4000))\nreturns table \nas\n/*\n * Splits a querystring-formatted string into a table of name-value pairs\n * Example Usage:\n        select * from dbo.fn_splitQueryString('foo=bar&baz=qux&x=y&y&abc=')\n */\nreturn ( \n    select  'name' = SUBSTRING(s,1,case when charindex('=',s)=0 then LEN(s) else charindex('=',s)-1 end) \n        ,   'value' = case when charindex('=',s)=0 then '' else SUBSTRING(s,charindex('=',s)+1,4000) end    \n    from dbo.fn_split('&',@querystring)\n)\ngo\n"]], ['sql function to return table of names and values given a querystring'], 3], [(755827, 1), [['Which utilises  this  general-purpose split function:'], ['Ultimately letting you do something like this: ']], [[" create function dbo.fn_split(@sep nchar(1), @s nvarchar(4000))\nreturns table\n/*\n * From https://stackoverflow.com/questions/314824/\n * Splits a string into a table of values, with single-char delimiter.\n * Example Usage:\n        select * from dbo.fn_split(',', '1,2,5,2,,dggsfdsg,456,df,1,2,5,2,,dggsfdsg,456,df,1,2,5,2,,')\n */\nAS\nRETURN (\n    WITH Pieces(pn, start, stop) AS (\n      SELECT 1, 1, CHARINDEX(@sep, @s)\n      UNION ALL\n      SELECT pn + 1, stop + 1, CHARINDEX(@sep, @s, stop + 1)\n      FROM Pieces\n      WHERE stop > 0\n    )\n    SELECT pn,\n      SUBSTRING(@s, start, CASE WHEN stop > 0 THEN stop-start ELSE 4000 END) AS s\n    FROM Pieces\n  )\ngo\n"]], ['sql function to return table of names and values given a querystring'], 3], [(755827, 2), [['Ultimately letting you do something like this: '], ['-10000']], [[" select name, value\nfrom dbo.fn_splitQuerystring('foo=bar&baz=something&x=y&y&abc=&=whatever')\n"]], ['sql function to return table of names and values given a querystring'], 3], [(756755, 0), [['This assumes that there is  exactly one  pair of  correctly nested  parentheses (and is T-SQL syntax):'], ['Yields:']], [[" DECLARE @bla VARCHAR(50)\nSET @bla = 'blablablabla(XYZ)asdsdsad'\n\nSELECT SUBSTRING(\n         @bla, \n         CHARINDEX('(', @bla) + 1, \n         CHARINDEX(')', @bla) - CHARINDEX('(', @bla) - 1\n       )\n"]], ['SQL Update - Everything inside ()'], 3], [(756755, 1), [['Yields:'], ["EDIT: This checks for various ill-formatted strings and could be used in a WHERE clause (e.g.  WHERE ... <> 'no match' ):"]], [[" 'XYZ'\n"]], ['SQL Update - Everything inside ()'], 3], [(756755, 2), [["EDIT: This checks for various ill-formatted strings and could be used in a WHERE clause (e.g.  WHERE ... <> 'no match' ):"], ['-10000']], [[" SELECT\n  CASE \n    WHEN \n      /* check for '(' and ')' */\n      CHARINDEX('(', @bla) > 0 AND CHARINDEX(')', @bla) > CHARINDEX('(', @bla)\n      /* check for 'bla(bla(XYZ)bla' */\n      AND CHARINDEX('(', @bla, CHARINDEX('(', @bla) + 1) = 0\n      /* check for 'bla(XYZ)bla)bla' */\n      AND CHARINDEX(')', @bla, CHARINDEX(')', @bla) + 1) = 0\n    THEN SUBSTRING(@bla, \n          CHARINDEX('(', @bla) + 1, \n          CHARINDEX(')', @bla) - CHARINDEX('(', @bla) - 1\n        ) \n    ELSE 'no match'\n  END\n"]], ['SQL Update - Everything inside ()'], 3], [(759580, 0), [['For a single keyword on VARCHAR fields you can use  LIKE :'], ["For a description you're usually better adding a full text index and doing a  Full-Text Search  (MyISAM only):"]], [[" SELECT id, category, location\nFROM table\nWHERE\n(\n    category LIKE '%keyword%'\n    OR location LIKE '%keyword%'\n)\n"]], ['How to implement a Keyword Search in MySQL?'], 2], [(759580, 1), [["For a description you're usually better adding a full text index and doing a  Full-Text Search  (MyISAM only):"], ['-10000']], [[" SELECT id, description\nFROM table\nWHERE MATCH (description) AGAINST('keyword1 keyword2')\n"]], ['How to implement a Keyword Search in MySQL?'], 2], [(759925, 0), [['Like most programming languages, mysql performs  /  and  *  (as well as DIV, % and MOD) from left to right, in the order they occur. For instance:'], ['is equivalent to']], [[' 1 / 2 * 3 / 4 / 5 * 6\n']], ['operator precedence in mysql'], 2], [(759925, 1), [['is equivalent to'], ['See  http://dev.mysql.com/doc/refman/5.0/en/operator-precedence.html  for a complete list of operator precedence.']], [[' ((((1 / 2) * 3) / 4) / 5) * 6\n']], ['operator precedence in mysql'], 2], [(761700, 0), [["First, let's put everything in common units. Recall that  record 's column  s  is seconds since the  epoch , midnight 1 January 1970. We can find the number of seconds since midnight of the day of the call, that call occurred, by just taking s modulus the number of seconds in a day:  s % (60 * 60 * 24) ."], ['We can find minutes since midnight by dividing those results by 60, or just by  floor( s / 60 ) % (60 * 24)  : ']], [[' select *, \ns % (60 * 60 * 24) as start_secs_from_midnight,\ns % (60 * 60 * 24) + dur - 1 as end_secs_from_midnight,\n;\n']], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(761700, 1), [['We can find minutes since midnight by dividing those results by 60, or just by  floor( s / 60 ) % (60 * 24)  : '], ["Now we create a table of minutes. We need 1440 of them, numbered from 0 to 1439. In databases that don't support arbitrary sequences, I  create an artificial range or sequence  like this:"]], [[' create view record_mins_from_midnight as\nselect *, \nfloor( s / 60 ) % (60 * 24) as start_mins_fm,\nfloor( ( s + dur - 1) / 60 ) % (60 * 24) as end_mins_fm \nfrom record\n;\n']], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(761700, 2), [["Now we create a table of minutes. We need 1440 of them, numbered from 0 to 1439. In databases that don't support arbitrary sequences, I  create an artificial range or sequence  like this:"], ['So to create a  minute  table:']], [['   create table artificial_range ( \n   id int not null primary key auto_increment, idz int) ;\n  insert into artificial_range(idz) values (0);\n  -- repeat next line to double rows\n  insert into artificial_range(idz) select idz from artificial_range;\n']], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(761700, 3), [['So to create a  minute  table:'], ['Now we just join  minute  to our record view']], [['   create view minute as \n   select id - 1 as active_minute \n   from artificial_range \n   where id <= 1440\n   ;\n']], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(761700, 4), [['Now we just join  minute  to our record view'], ['Now if we want to find the number of active records for any granularity equal to or larger than minute granularity, we just group on that last view. To find average calls per hour we divide by 60 to turn minutes to hours:']], [[' create view record_active_minutes as\nselect * from minutes a \njoin record_mins_from_midnight b\non (a.active_minute >= b.start_mins_fm \nand a.active_minute <= b.end_mins_fm \n ;\n']], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(761700, 5), [['Now if we want to find the number of active records for any granularity equal to or larger than minute granularity, we just group on that last view. To find average calls per hour we divide by 60 to turn minutes to hours:'], ['If we create a version of  record_active_minutes  that does a left outer join, we can get a report that shows the average over all hours in the day:']], [['  select floor( active_minute / 60 ) as hour, \n count(*) / 60 as avg_concurent_calls_per_minute_for_hour\n from record_active_minutes\n group by floor( active_minute / 60 ) ;\n']], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(761700, 6), [['If we create a version of  record_active_minutes  that does a left outer join, we can get a report that shows the average over all hours in the day:'], ['Then we again do our select, but against the new view:']], [['  create view record_active_minutes_all as\n select * \n from \n minutes a \n left outer join record_mins_from_midnight b\n   on (a.active_minute >= b.start_mins_fm \n       and a.active_minute <= b.end_mins_fm) \n ;\n']], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(761700, 7), [['Then we again do our select, but against the new view:'], ["We can also index into this with a where. Unfortunately, the join means we'll have null values for the underlying  record  table where no calls exist for a particular hour, e.g., "]], [['  select floor( active_minute / 60 ) as hour, \n count(*) / 60 as avg_concurent_calls_per_min\n from record_active_minutes_all\n group by floor( active_minute / 60 ) ;\n\n\n+------+------------------------------+\n| hour | avg_concurrent_calls_per_min |\n+------+------------------------------+\n|    0 |                       0.0000 |\n|    1 |                       0.0000 |\n|    2 |                       0.0000 |\n|    3 |                       0.0000 |\n   etc....\n']], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(761700, 8), [["We can also index into this with a where. Unfortunately, the join means we'll have null values for the underlying  record  table where no calls exist for a particular hour, e.g., "], ['will bring back no rows for hours in which no calls occurred. If we still want our "report-like" view that shows all hours, we make sure we also include those hours with no records:']], [['  select floor( active_minute / 60 ) as hour, \n count(*) / 60 as avg_concurent_calls_per_min\n from record_active_minutes_all\n where month(date) = 1 and year(date) = 2008 \n group by floor( active_minute / 60 ) ;\n']], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(761700, 9), [['will bring back no rows for hours in which no calls occurred. If we still want our "report-like" view that shows all hours, we make sure we also include those hours with no records:'], ["Which brings up another point: both the date and time in your record table are superfluous and denormalized, as each can be derived from your column s. Leaving them in the table allows the possibility of inconsistent rows, in which  date(s) <> date  or  time(s) <> time . I'd prefer to do it like this:"]], [['  select floor( active_minute / 60 ) as hour, \n count(*) / 60 as avg_concurent_calls_per_minute_for_hour\n from record_active_minutes_all\n where (month(date) = 1 and year(date) = 2008) \n or date is null \n group by floor( active_minute / 60 ) ;\n']], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(761700, 10), [["Which brings up another point: both the date and time in your record table are superfluous and denormalized, as each can be derived from your column s. Leaving them in the table allows the possibility of inconsistent rows, in which  date(s) <> date  or  time(s) <> time . I'd prefer to do it like this:"], ['In the  dateadd  function, the  ss  is an enumerated type that tells the function to add seconds;  s  is the column in record. ']], [["    create table record ( id int not null primary key, s, duration) ; \n\n   create view record_date as \n   select *, dateadd( ss, s, '1970-01-01') as call_date\n   from record\n  ;\n"]], ['How can I check for average concurrent events in a SQL table based on the date, time and duration of the events?'], 11], [(763667, 0), [['Any book or tutorial on SQL should cover  JOIN .'], ['Now you can add more conditions to your  WHERE  clause:']], [[' SELECT p.*, \n s.name AS store_name, s.username AS store_username, \n s.region_id, s.city_id,\n cs.name AS subcategory_name,\n c.name AS category_name\nFROM products p\n JOIN stores s ON (s.id = p.store_id)\n JOIN categories c ON (c.id = p.category_id)\n JOIN categories_sub cs ON (cs.id = p.subcategory_id)\nWHERE DATE(NOW()) BETWEEN p.date_start AND p.date_end\n']], ['MYSQL optimize & questions'], 3], [(763667, 1), [['Now you can add more conditions to your  WHERE  clause:'], ["One more comment... I was trying to be clever by using the  BETWEEN  predicate, but this might confuse MySQL's relatively simple optimizer.  MySQL might have an easier time optimizing your original syntax:"]], [['   AND s.region_id = ?;\n']], ['MYSQL optimize & questions'], 3], [(763667, 2), [["One more comment... I was trying to be clever by using the  BETWEEN  predicate, but this might confuse MySQL's relatively simple optimizer.  MySQL might have an easier time optimizing your original syntax:"], ['-10000']], [[' WHERE p.date_start <= DATE(NOW()) AND p.date_end >= DATE(NOW())\n']], ['MYSQL optimize & questions'], 3], [(763669, 0), [["In SQL2000 you need cursors. In SQL2005/2008, you can use CROSS APPLY satement; probably like next (can't test just now):"], ['EDIT  - I found  this page on CROSS APPLY  and then came up with:']], [[" SELECT T.ID, S.Item AS dataItem\nFROM @temp AS T CROSS APPLY dbo.__StringSplit(T.data, ',', T.ID) AS S\n"]], ['T-SQL Split string into many-to-one relationship?'], 2], [(763669, 1), [['EDIT  - I found  this page on CROSS APPLY  and then came up with:'], ['Which solved my problem :-)']], [[" SELECT T.ID, S.Item AS dataItem\nFROM @temp AS T\n    CROSS APPLY\n    dbo.__StringSplit(T.data, ',', T.ID) AS S\nWHERE T.ID = S.RefID\n"]], ['T-SQL Split string into many-to-one relationship?'], 2], [(764497, 0), [["To do multi-level queries across a simple adjacency-list invariably involves self-left-joins. It's easy to make a right-aligned table:"], ['To left-align it like your example is a bit more tricky. This comes to mind:']], [[' SELECT category.category_id,\n    ancestor4.category_id AS lvl4,\n    ancestor3.category_id AS lvl3,\n    ancestor2.category_id AS lvl2,\n    ancestor1.category_id AS lvl1\nFROM categories AS category\n    LEFT JOIN categories AS ancestor1 ON ancestor1.category_id=category.category_id\n    LEFT JOIN categories AS ancestor2 ON ancestor2.category_id=ancestor1.parent\n    LEFT JOIN categories AS ancestor3 ON ancestor3.category_id=ancestor2.parent\n    LEFT JOIN categories AS ancestor4 ON ancestor4.category_id=ancestor3.parent;\n']], ['Flatten Adjacency List Hierarchy To A List Of All Paths'], 2], [(764497, 1), [['To left-align it like your example is a bit more tricky. This comes to mind:'], ['would work for n-tier hierarchies.']], [[' SELECT category.category_id,\n    ancestor1.category_id AS lvl1,\n    ancestor2.category_id AS lvl2,\n    ancestor3.category_id AS lvl3,\n    ancestor4.category_id AS lvl4\nFROM categories AS category\n    LEFT JOIN categories AS ancestor1 ON ancestor1.parent IS NULL\n    LEFT JOIN categories AS ancestor2 ON ancestor1.category_id<>category.category_id AND ancestor2.parent=ancestor1.category_id\n    LEFT JOIN categories AS ancestor3 ON ancestor2.category_id<>category.category_id AND ancestor3.parent=ancestor2.category_id\n    LEFT JOIN categories AS ancestor4 ON ancestor3.category_id<>category.category_id AND ancestor4.parent=ancestor3.category_id\nWHERE\n    ancestor1.category_id=category.category_id OR\n    ancestor2.category_id=category.category_id OR\n    ancestor3.category_id=category.category_id OR\n    ancestor4.category_id=category.category_id;\n']], ['Flatten Adjacency List Hierarchy To A List Of All Paths'], 2], [(764871, 0), [['Download the instantclient distribution from oracle.com.  For doing non-java software development, you will need (assuming Oracle 10.2):'], ['Unzip the three files.  This will give you a directory']], [[' instantclient-basic-linux-x86_64-10.2.0.4.0.zip\ninstantclient-sdk-linux-x86_64-10.2.0.4.0.zip\ninstantclient-sqlplus-linux-x86_64-10.2.0.4.0.zip\n']], ['installing Oracle Instantclient on Linux without setting environment variables?'], 5], [(764871, 1), [['Unzip the three files.  This will give you a directory'], ['Copy the files to /usr, which is one of the default places the dynamic loader searches.']], [[' instantclient_10_2/\n']], ['installing Oracle Instantclient on Linux without setting environment variables?'], 5], [(764871, 2), [['Copy the files to /usr, which is one of the default places the dynamic loader searches.'], ['If you use tnsnames.ora, copy it to /etc, which is the default global place the oracle runtime searches.']], [[' sudo cp instantclient_10_2/sdk/include/*.h /usr/include\nsudo cp instantclient_10_2/sqlplus         /usr/bin\nsudo cp instantclient_10_2/*.so*           /usr/lib\n']], ['installing Oracle Instantclient on Linux without setting environment variables?'], 5], [(764871, 3), [['If you use tnsnames.ora, copy it to /etc, which is the default global place the oracle runtime searches.'], ['Test with']], [[' sudo cp tnsnames.ora /etc\n']], ['installing Oracle Instantclient on Linux without setting environment variables?'], 5], [(764871, 4), [['Test with'], ['-10000']], [[' /usr/bin/sqlplus scott/tiger@myoracle\n']], ['installing Oracle Instantclient on Linux without setting environment variables?'], 5], [(765667, 0), [['Without further information regarding the structure of the tables, I would suggest that you try something like this:'], ["I haven't tested this but it should point in one direction you could go with this problem. Your other suggestion of using a subquery is valid and might work something like this:"]], [[' SELECT t2.id\nFROM table1 t1\nINNER JOIN table2 t2 ON t1.id = t2.relation_id\nWHERE t1.date BETWEEN ? AND ?\nHAVING MAX(t1.date)\n']], ['MySQL Help: SELECT table2.id WHERE ... table1.date is largest'], 3], [(765667, 1), [["I haven't tested this but it should point in one direction you could go with this problem. Your other suggestion of using a subquery is valid and might work something like this:"], ['Or in a join to a temporary table:']], [[' SELECT *\nFROM table2 t2 \nWHERE t2.parent_id IN (\n    SELECT t1.relation_id\n    FROM table1 t1\n    WHERE t1.date BETWEEN ? AND ?\n    GROUP BY t1.relation_id\n    HAVING MAX(t1.date)\n)\n']], ['MySQL Help: SELECT table2.id WHERE ... table1.date is largest'], 3], [(765667, 2), [['Or in a join to a temporary table:'], ['-10000']], [[' SELECT *\nFROM table2 t2\nINNER JOIN (\n    SELECT t1.relation_id\n    FROM table1 t1\n    WHERE t1.date BETWEEN ? AND ?\n    GROUP BY t1.relation_id\n    HAVING MAX(t1.date)\n) AS t1 ON t2.relation_id = t1.relation_id\n']], ['MySQL Help: SELECT table2.id WHERE ... table1.date is largest'], 3], [(767352, 0), [['Make sure to reference tables with the ownership prefix. So instead of:'], ['Use']], [[' INNER JOIN Campaign AS T2 ON T1.CampaignId = T2.Id\n']], ['Sql Optimization on advertising system'], 3], [(767352, 1), [['Use'], ['Another possibility is to disable database locking, which has data integrity risks, but can significantly increase performance:']], [[' INNER JOIN dbo.Campaign AS T2 ON T1.CampaignId = T2.Id\n']], ['Sql Optimization on advertising system'], 3], [(767352, 2), [['Another possibility is to disable database locking, which has data integrity risks, but can significantly increase performance:'], ['Run a sample query in SQL Analyzer with "Show Execution Plan" turned on.  This might give you a hint as to the slowest part of the query.']], [[' INNER JOIN dbo.Campaign AS T2 (nolock) ON T1.CampaignId = T2.Id\n']], ['Sql Optimization on advertising system'], 3], [(768052, 0), [['I think you could be trying something like this'], ['Aditionally, in the reader, check the read']], [['     travelQuery.CommandText = "SELECT [StartLoc], [EndLoc],[TravelTime], [AvgSpeed], [Distance]  FROM [TravelTimes] WHERE [TripNum] = @trip"\n    \' Assuming trip as integer\n    travelQuery.CommandParameters.Add(@trip, Convert.ToInt32(lblTrip.Text))\n']], ['SQL Reader saying no values exist, query seems fine'], 4], [(768052, 1), [['Aditionally, in the reader, check the read'], ['For testing purposes, Check first this ']], [[' If (travelReader.Read()) Then Begin\nEnd If\n']], ['SQL Reader saying no values exist, query seems fine'], 4], [(768052, 2), [['For testing purposes, Check first this '], ['And then this']], [[' travelQuery.CommandText = "SELECT COUNT(*) FROM [TravelTimes] WHERE [TripNum] = @trip"\n']], ['SQL Reader saying no values exist, query seems fine'], 4], [(768052, 3), [['And then this'], ['First will get you the rows that satisfy your condition, The second one, will get you the total row count for the table, that way you can be sure whether the problem is the reader or the data source (db)']], [[' travelQuery.CommandText = "SELECT COUNT(*) FROM [TravelTimes]"\n']], ['SQL Reader saying no values exist, query seems fine'], 4], [(768436, 0), [['-10000'], ['and if your known IDs are coming from another table']], [[" SELECT * FROM some_table WHERE ID IN ('1001', '1002', '1003')\n"]], ['Alternative SQL ways of looking up multiple items of known IDs?'], 2], [(768436, 1), [['and if your known IDs are coming from another table'], ['-10000']], [[' SELECT * FROM some_table WHERE ID IN (\n    SELECT KnownID FROM some_other_table WHERE someCondition \n)\n']], ['Alternative SQL ways of looking up multiple items of known IDs?'], 2], [(768561, 0), [['You will need not 2 but 3 tables in this case; third one must be junction table. You can easily add new schedules if you need in the future with this scheme. \nSo, something like this:'], ["There isn't PIVOT possibility in MySQL as I know, but you can use GROUP_CONCAT() function in SELECT; it'll be one row per event and all schedules for one event will be in one column."]], [[' table events (event_id, event_name, description)\ntable schedules (sch_id, schedule)\ntable event_schedule (event_id, sch_id)\n']], ['MySQL architecture: null columns vs. joins'], 2], [(768561, 1), [["There isn't PIVOT possibility in MySQL as I know, but you can use GROUP_CONCAT() function in SELECT; it'll be one row per event and all schedules for one event will be in one column."], ['-10000']], [[" SELECT e.event_name AS Event, GROUP_CONCAT( s.schedule SEPARATOR ', ') AS Schedule\n         FROM events e \n    (LEFT) JOIN event_schedule es\n    ON e.event_id = es.event_id\n    JOIN schedules s\n    ON s.sch_id = es. sch_id\n         GROUP BY e.event_name;\n"]], ['MySQL architecture: null columns vs. joins'], 2], [(771485, 0), [['So, what you have to do is this:'], ['You can then retrieve the primary-key value of the newly inserted record by executing a ']], [[' INSERT INTO MyTable ( Column2, Column3, Column4) VALUES ( 1, 2, 3 )\n']], ['Using Autonumbering in Access - INSERT statements'], 2], [(771485, 1), [['You can then retrieve the primary-key value of the newly inserted record by executing a '], ['statement.']], [[' SELECT @@identity FROM MyTable\n']], ['Using Autonumbering in Access - INSERT statements'], 2], [(771949, 0), [['Example:'], ['Notice how the function has a return clause between the parameter list and the "as" keyword. This means that it is expected to have the last statement inside the body of the function read something like:']], [[" CREATE OR REPLACE PROCEDURE my_proc\n   (p_name IN VARCHAR2 := 'John') as begin ... end\n\nCREATE OR REPLACE FUNCTION my_func\n   (p_name IN VARCHAR2 := 'John') return varchar2 as begin ... end\n"]], ['What is the difference between function and procedure in PL/SQL?'], 2], [(771949, 1), [['Notice how the function has a return clause between the parameter list and the "as" keyword. This means that it is expected to have the last statement inside the body of the function read something like:'], ['Where my_varchar2_local_variable is some varchar2 that should be returned by that function.']], [[' return(my_varchar2_local_variable);\n']], ['What is the difference between function and procedure in PL/SQL?'], 2], [(776355, 0), [['I take  Tom Kyte package  as base and expand it.'], ['And tests']], [[" create or replace function bin_shift_right\n(  p_bin in varchar2,\n   p_shift in number default null) return varchar2\nis\n    l_len number;\n    l_shift number;\nbegin\n    l_shift := nvl(p_shift, 1);\n    l_len := length(p_bin);\n    if (l_len <= 0) then\n        return null;\n    end if; \n    if (l_shift > l_len) then\n        l_shift := l_len;\n    end if;\n\n    return lpad(substr(p_bin, 1, l_len - l_shift), l_len, '0'); \nend bin_shift_right;\n\ncreate or replace function shright\n(  p_num in number,\n   p_shift in number default null) return number\nis\nbegin\n    if (trunc(p_num) <> p_num OR p_num < 0) then\n        raise PROGRAM_ERROR;\n    end if;\n    return nvl(to_dec(bin_shift_right(to_bin(p_num), p_shift), 2), 0);\nend shright;\n/\n"]], ['Shift operators in PL/SQL'], 2], [(776355, 1), [['And tests'], ['-10000']], [[' SQL>\nSQL> select shright(123) from dual;\n\nSHRIGHT(123)\n------------\n          61\n\nSQL>\nSQL> select shright(123, 2) from dual;\n\nSHRIGHT(123,2)\n--------------\n            30\n\nSQL>\nSQL> select shright(123, 10) from dual;\n\nSHRIGHT(123,10)\n---------------\n\n\nSQL> /\n']], ['Shift operators in PL/SQL'], 2], [(776857, 0), [['-10000'], ['In two words, you better use this:']], [[" SELECT  ctz\nFROM    (\n        SELECT  shecdule.*,\n                CONVERT_TZ(\n                if(timestamp_start > last_update, timestamp_start, last_update), \n                'GMT', \n                user.timezone\n                ) AS ctz\n        FROM    shecdule\n        INNER JOIN\n                user\n        ON      user.user_id = s.user_id\n        ) s\nWHERE  ctz < CURRENT_TIMESTAMP()\n"]], ['Reusing computed columns in mysql'], 3], [(776857, 1), [['In two words, you better use this:'], ["If you don't like subqueries, you may also use:"]], [[" SELECT  ctz\nFROM    (\n        SELECT  shecdule.*,\n                CONVERT_TZ(\n                if(timestamp_start > last_update, timestamp_start, last_update), \n                'GMT', \n                user.timezone\n                ) AS ctz\n        FROM    shecdule\n        INNER JOIN\n                user\n        ON      user.user_id = s.user_id\n        WHERE   timestamp_start < CURRENT_TIMESTAMP() + INTERVAL 14 HOUR\n                OR last_update < CURRENT_TIMESTAMP() + INTERVAL 14 HOUR\n        ) s\nWHERE  ctz < CURRENT_TIMESTAMP()\n"]], ['Reusing computed columns in mysql'], 3], [(776857, 2), [["If you don't like subqueries, you may also use:"], ['-10000']], [[" SELECT  shecdule.*,\n        CONVERT_TZ(\n        if(timestamp_start > last_update, timestamp_start, last_update), \n        'GMT', \n        user.timezone\n        ) AS ctz\nFROM    shecdule\nINNER JOIN\n       user\nON      user.user_id = s.user_id\n/* \n        WHERE   timestamp_start < CURRENT_TIMESTAMP() + INTERVAL 14 HOUR\n                OR last_update < CURRENT_TIMESTAMP() + INTERVAL 14 HOUR\n*/\nHAVING  ctz < CURRENT_TIMESTAMP()\n"]], ['Reusing computed columns in mysql'], 3], [(778237, 0), [['Since your subqueries return  UNIQUE  sets of values, the query may be rewritten as a  JOIN :'], ['To select  TOP 50  customers of those who have rated  Movie 1 , use:']], [[' SELECT  r2.*\nFROM    (\n        SELECT  TOP 50 CustomerID\n        FROM    (\n                SELECT  MovieID\n                FROM    Ratings\n                WHERE   CustomerID = 915\n                ) q\n        JOIN    Ratings r\n        ON      r.MovieID = q.MovieID\n                AND CustomerID <> 915\n        GROUP BY\n                CustomerID\n        ORDER BY\n                COUNT(*) DESC\n        ) ro\nJOIN    Ratings r2\nON      r2.MovieID = 1\n        AND r2.CustomerID = ro.CustomerID\n']], ['MSSQL JOIN ON GROUP BY is too slow'], 2], [(778237, 1), [['To select  TOP 50  customers of those who have rated  Movie 1 , use:'], ['-10000']], [[' SELECT  r2.*\nFROM    (\n        SELECT  TOP 50 CustomerID\n        FROM    (\n                SELECT  MovieID\n                FROM    Ratings\n                WHERE   CustomerID = 915\n                ) q\n        JOIN    Ratings r\n        ON      r.MovieID = q.MovieID\n                AND CustomerID <> 915\n                AND EXISTS\n                (\n                SELECT  1\n                FROM    Ratings re\n                WHERE   re.MovieID = 1\n                        AND re.CustomerID = r.CustomerID\n                )\n        GROUP BY\n                CustomerID\n        ORDER BY\n                COUNT(*) DESC\n        ) ro\nJOIN    Ratings r2\nON      r2.MovieID = 1\n        AND r2.CustomerID = ro.CustomerID\n']], ['MSSQL JOIN ON GROUP BY is too slow'], 2], [(778909, 0), [['So, to save following the link, the query looks like this, where  #Numbers  is the table and  Num  is the column:'], ['for negative or positive values']], [["    SELECT RIGHT('000000000' + CONVERT(VARCHAR(8),Num), 8) FROM #Numbers\n"]], ["Most efficent method for adding leading 0's to an int in sql"], 2], [(778909, 1), [['for negative or positive values'], ['-10000']], [[" declare @v varchar(6)\nselect @v = -5\n\nSELECT case  when @v < 0 \nthen '-' else '' end + RIGHT('00000' + replace(@v,'-',''), 5) \n"]], ["Most efficent method for adding leading 0's to an int in sql"], 2], [(780236, 0), [['First, create this view. In the view, I call post  parent  and comment  child :'], ["Then join the view to whatever you need from the comment (I'll call that  text ):"]], [[' create view parent_top_3_children as\nselect a.*, \n(select max(id) from child where parent_id = a.id) as maxid, \n(select max(id) from child where id <  maxid \n  and parent_id = a.id) as maxidm1, \n(select max(id) from child where id < maxidm1 \n  and parent_id = a.id) as maxidm2 \nfrom parent a; \n']], ['LIMIT the return of non-unique values'], 13], [(780236, 1), [["Then join the view to whatever you need from the comment (I'll call that  text ):"], ["Here's what my tables look like:"]], [[' select a.*, \nb.text as latest_comment,\nc.text as second_latest_comment,\nd.text as third_latest_comment\nfrom parent_top_3_children a\nleft outer join child b on (b.id = a.maxid)\nleft outer join child c on (c.id = a.maxidm1)\nleft outer join child d on (c.id = a.maxidm2);\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 2), [["Here's what my tables look like:"], ['And a portion of child. Parent 1 has noo children:']], [[' mysql> select * from parent;\n+----+------+------+------+\n| id | a    | b    | c    |\n+----+------+------+------+\n|  1 |    1 |    1 | NULL |\n|  2 |    2 |    2 | NULL |\n|  3 |    3 |    3 | NULL |\n+----+------+------+------+\n3 rows in set (0.00 sec)\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 3), [['And a portion of child. Parent 1 has noo children:'], ['And the view gives us this:']], [[' mysql> select * from child;\n+----+-----------+------+------+------+------+\n| id | parent_id | a    | b    | c    | d    |\n+----+-----------+------+------+------+------+\n\n. . . .\n| 18 |         3 | NULL | NULL | NULL | NULL |\n| 19 |         2 | NULL | NULL | NULL | NULL |\n| 20 |         2 | NULL | NULL | NULL | NULL |\n| 21 |         3 | NULL | NULL | NULL | NULL |\n| 22 |         2 | NULL | NULL | NULL | NULL |\n| 23 |         2 | NULL | NULL | NULL | NULL |\n| 24 |         3 | NULL | NULL | NULL | NULL |\n| 25 |         2 | NULL | NULL | NULL | NULL |\n+----+-----------+------+------+------+------+\n24 rows in set (0.00 sec)\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 4), [['And the view gives us this:'], ['The explain plan for the view is only slightly hairy:']], [[' mysql> select * from parent_top_3;\n+----+------+------+------+-------+---------+---------+\n| id | a    | b    | c    | maxid | maxidm1 | maxidm2 |\n+----+------+------+------+-------+---------+---------+\n|  1 |    1 |    1 | NULL |  NULL |    NULL |    NULL |\n|  2 |    2 |    2 | NULL |    25 |      23 |      22 |\n|  3 |    3 |    3 | NULL |    24 |      21 |      18 |\n+----+------+------+------+-------+---------+---------+\n3 rows in set (0.21 sec)\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 5), [['The explain plan for the view is only slightly hairy:'], ['However, if we add an index for parent_fks,it gets a better:']], [[' mysql> explain select * from parent_top_3;\n+----+--------------------+------------+------+---------------+------+---------+------+------+-------------+\n| id | select_type        | table      | type | possible_keys | key  | key_len | ref  | rows | Extra       |\n+----+--------------------+------------+------+---------------+------+---------+------+------+-------------+\n|  1 | PRIMARY            | <derived2> | ALL  | NULL          | NULL | NULL    | NULL |    3 |             |\n|  2 | DERIVED            | a          | ALL  | NULL          | NULL | NULL    | NULL |    3 |             |\n|  5 | DEPENDENT SUBQUERY | child      | ALL  | PRIMARY       | NULL | NULL    | NULL |   24 | Using where |\n|  4 | DEPENDENT SUBQUERY | child      | ALL  | PRIMARY       | NULL | NULL    | NULL |   24 | Using where |\n|  3 | DEPENDENT SUBQUERY | child      | ALL  | NULL          | NULL | NULL    | NULL |   24 | Using where |\n+----+--------------------+------------+------+---------------+------+---------+------+------+-------------+\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 6), [['However, if we add an index for parent_fks,it gets a better:'], ['As noted above, this begins to fall apart when the number of parent rows is few as 100,  even if we index into parent using its primary key :']], [[' mysql> create index pid on child(parent_id);\n\nmysql> explain select * from parent_top_3;\n+----+--------------------+------------+------+---------------+------+---------+-----------+------+-------------+\n| id | select_type        | table      | type | possible_keys | key  | key_len | ref       | rows | Extra       |\n+----+--------------------+------------+------+---------------+------+---------+-----------+------+-------------+\n|  1 | PRIMARY            | <derived2> | ALL  | NULL          | NULL | NULL    | NULL      |    3 |             |\n|  2 | DERIVED            | a          | ALL  | NULL          | NULL | NULL    | NULL      |    3 |             |\n|  5 | DEPENDENT SUBQUERY | child      | ref  | PRIMARY,pid   | pid  | 5       | util.a.id |    2 | Using where |\n|  4 | DEPENDENT SUBQUERY | child      | ref  | PRIMARY,pid   | pid  | 5       | util.a.id |    2 | Using where |\n|  3 | DEPENDENT SUBQUERY | child      | ref  | pid           | pid  | 5       | util.a.id |    2 | Using where |\n+----+--------------------+------------+------+---------------+------+---------+-----------+------+-------------+\n5 rows in set (0.04 sec)\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 7), [['As noted above, this begins to fall apart when the number of parent rows is few as 100,  even if we index into parent using its primary key :'], ["Here's the explain, looking for exactly one id (and the first one, at that): "]], [[' mysql> select * from parent_top_3 where  id < 10;\n+----+------+------+------+-------+---------+---------+\n| id | a    | b    | c    | maxid | maxidm1 | maxidm2 |\n+----+------+------+------+-------+---------+---------+\n|  1 |    1 |    1 | NULL |  NULL |    NULL |    NULL |\n|  2 |    2 |    2 | NULL |    25 |      23 |      22 |\n|  3 |    3 |    3 | NULL |    24 |      21 |      18 |\n|  4 | NULL |    1 | NULL |    65 |      64 |      63 |\n|  5 | NULL |    2 | NULL |    73 |      72 |      71 |\n|  6 | NULL |    3 | NULL |   113 |     112 |     111 |\n|  7 | NULL |    1 | NULL |   209 |     208 |     207 |\n|  8 | NULL |    2 | NULL |   401 |     400 |     399 |\n|  9 | NULL |    3 | NULL |   785 |     784 |     783 |\n+----+------+------+------+-------+---------+---------+\n9 rows in set (1 min 3.11 sec)\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 8), [["Here's the explain, looking for exactly one id (and the first one, at that): "], ["Here's the explain plan for the modified query. It looks as bad or worse:"]], [[' mysql> explain select * from parent_top_3 where id = 1;\n+----+--------------------+------------+------+---------------+------+---------+-----------+------+-------------+\n| id | select_type        | table      | type | possible_keys | key  | key_len | ref       | rows | Extra       |\n+----+--------------------+------------+------+---------------+------+---------+-----------+------+-------------+\n|  1 | PRIMARY            | <derived2> | ALL  | NULL          | NULL | NULL    | NULL      | 1000 | Using where |\n|  2 | DERIVED            | a          | ALL  | NULL          | NULL | NULL    | NULL      | 1000 |             |\n|  5 | DEPENDENT SUBQUERY | child      | ref  | PRIMARY,pid   | pid  | 5       | util.a.id |  179 | Using where |\n|  4 | DEPENDENT SUBQUERY | child      | ref  | PRIMARY,pid   | pid  | 5       | util.a.id |  179 | Using where |\n|  3 | DEPENDENT SUBQUERY | child      | ref  | pid           | pid  | 5       | util.a.id |  179 | Using where |\n +----+--------------------+------------+------+---------------+------+---------+-----------+------+-------------+\n 5 rows in set (56.01 sec)\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 9), [["Here's the explain plan for the modified query. It looks as bad or worse:"], ['How do we get to the much speedier parent_top_3a? We create  three  views, each one dependent on the previous one:']], [[' mysql> explain select * from parent_top_3a where id = 1;\n+----+--------------------+------------+------+---------------+------+---------+-----------+------+-------------+\n| id | select_type        | table      | type | possible_keys | key  | key_len | ref       | rows | Extra       |\n+----+--------------------+------------+------+---------------+------+---------+-----------+------+-------------+\n|  1 | PRIMARY            | <derived2> | ALL  | NULL          | NULL | NULL    | NULL      |  100 | Using where |\n|  2 | DERIVED            | <derived4> | ALL  | NULL          | NULL | NULL    | NULL      |  100 |             |\n|  4 | DERIVED            | <derived6> | ALL  | NULL          | NULL | NULL    | NULL      |  100 |             |\n|  6 | DERIVED            | a          | ALL  | NULL          | NULL | NULL    | NULL      |  100 |             |\n|  7 | DEPENDENT SUBQUERY | child      | ref  | pid           | pid  | 5       | util.a.id |  179 | Using where |\n|  5 | DEPENDENT SUBQUERY | child      | ref  | PRIMARY,pid   | pid  | 5       | a.id      |  179 | Using where |\n|  3 | DEPENDENT SUBQUERY | child      | ref  | PRIMARY,pid   | pid  | 5       | a.id      |  179 | Using where |\n+----+--------------------+------------+------+---------------+------+---------+-----------+------+-------------+\n7 rows in set (0.05 sec)\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 10), [['How do we get to the much speedier parent_top_3a? We create  three  views, each one dependent on the previous one:'], ["Let's increase the number of parent rows to 12800, the number of child rows to 1536 (most blog posts don't get comments, right? ;) ) "]], [[' create view parent_top_1 as  \nselect a.*, \n(select max(id) from child where parent_id = a.id) \n as maxid \nfrom parent a;\n\ncreate view parent_top_2 as  \nselect a.*, \n(select max(id) from child where parent_id = a.id and id < a.maxid) \n as maxidm1 \nfrom parent_top_1 a;\n\ncreate view parent_top_3a as  \nselect a.*, \n(select max(id) from child where parent_id = a.id and id < a.maxidm1)\n as maxidm2 \nfrom parent_top_2 a;\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 11), [["Let's increase the number of parent rows to 12800, the number of child rows to 1536 (most blog posts don't get comments, right? ;) ) "], ["But using Postgresql, on a similar but not identical data set, we get similar timings on  where  predicates involving  parent 's columns:"]], [[' mysql> select * from parent_top_3a where id >= 20 and id < 40;\n+----+------+------+------+-------+---------+---------+\n| id | a    | b    | c    | maxid | maxidm1 | maxidm2 |\n+----+------+------+------+-------+---------+---------+\n| 39 | NULL |    2 | NULL |  NULL |    NULL |    NULL |\n| 38 | NULL |    1 | NULL |  NULL |    NULL |    NULL |\n| 37 | NULL |    3 | NULL |  NULL |    NULL |    NULL |\n| 36 | NULL |    2 | NULL |  NULL |    NULL |    NULL |\n| 35 | NULL |    1 | NULL |  NULL |    NULL |    NULL |\n| 34 | NULL |    3 | NULL |  NULL |    NULL |    NULL |\n| 33 | NULL |    2 | NULL |  NULL |    NULL |    NULL |\n| 32 | NULL |    1 | NULL |  NULL |    NULL |    NULL |\n| 31 | NULL |    3 | NULL |  NULL |    NULL |    NULL |\n| 30 | NULL |    2 | NULL |  1537 |    1536 |    1535 |\n| 29 | NULL |    1 | NULL |  1529 |    1528 |    1527 |\n| 28 | NULL |    3 | NULL |  1513 |    1512 |    1511 |\n| 27 | NULL |    2 | NULL |  1505 |    1504 |    1503 |\n| 26 | NULL |    1 | NULL |  1481 |    1480 |    1479 |\n| 25 | NULL |    3 | NULL |  1457 |    1456 |    1455 |\n| 24 | NULL |    2 | NULL |  1425 |    1424 |    1423 |\n| 23 | NULL |    1 | NULL |  1377 |    1376 |    1375 |\n| 22 | NULL |    3 | NULL |  1329 |    1328 |    1327 |\n| 21 | NULL |    2 | NULL |  1281 |    1280 |    1279 |\n| 20 | NULL |    1 | NULL |  1225 |    1224 |    1223 |\n+----+------+------+------+-------+---------+---------+\n20 rows in set (1.01 sec)\n']], ['LIMIT the return of non-unique values'], 13], [(780236, 12), [["But using Postgresql, on a similar but not identical data set, we get similar timings on  where  predicates involving  parent 's columns:"], ['-10000']], [['  postgres=# select (select count(*) from parent) as parent_count, (select count(*) \nfrom child) as child_count;\n parent_count | child_count\n--------------+-------------\n        12289 |        1536\n\npostgres=# select * from parent_top_3a where id >= 20 and id < 40;\n id | a | b  | c | maxid | maxidm1 | maxidm2\n----+---+----+---+-------+---------+---------\n 20 |   | 18 |   |  1464 |    1462 |    1461\n 21 |   | 88 |   |  1463 |    1460 |    1457\n 22 |   | 72 |   |  1488 |    1486 |    1485\n 23 |   | 13 |   |  1512 |    1510 |    1509\n 24 |   | 49 |   |  1560 |    1558 |    1557\n 25 |   | 92 |   |  1559 |    1556 |    1553\n 26 |   | 45 |   |  1584 |    1582 |    1581\n 27 |   | 37 |   |  1608 |    1606 |    1605\n 28 |   | 96 |   |  1607 |    1604 |    1601\n 29 |   | 90 |   |  1632 |    1630 |    1629\n 30 |   | 53 |   |  1631 |    1628 |    1625\n 31 |   | 57 |   |       |         |\n 32 |   | 64 |   |       |         |\n 33 |   | 79 |   |       |         |\n 34 |   | 37 |   |       |         |\n 35 |   | 60 |   |       |         |\n 36 |   | 75 |   |       |         |\n 37 |   | 34 |   |       |         |\n 38 |   | 87 |   |       |         |\n 39 |   | 43 |   |       |         |\n(20 rows)\n\nTime: 91.139 ms\n']], ['LIMIT the return of non-unique values'], 13], [(781318, 0), [['-10000'], ['or, with a users table']], [[" select firstname.uid, fistname.value, lastname.value\nfrom \n  profile_values firstname\n  inner join profile_values lastname \n    on firstname.uid = lastname.uid\nWHERE\n  firstname.fid = 1\n  AND lastname.fid = 11\n  AND fistname.value like 'S%'\n  AND lastname.value like 'D%'\n"]], ['Problem with sql query. Should i be using union?'], 2], [(781318, 1), [['or, with a users table'], ['EDIT:']], [[" select users.uid, fistname.value, lastname.value\nfrom \n  users\n  inner join profile_values firstname\n    on firstname.uid = users.uid\n    AND firstname.fid = 1   \n  inner join profile_values lastname \n    on lastname.uid = users.uid\n    AND lastname.fid = 11\nWHERE\n  fistname.value like 'S%'\n  AND lastname.value like 'D%'\n"]], ['Problem with sql query. Should i be using union?'], 2], [(781895, 0), [['Here is a way to flatten date range like this'], ['Using above code, implementing UDF is as simple as followed.']], [[' Start          | End\n2009-1-1 06:00 | 2009-1-1 18:00\n2009-2-1 20:00 | 2009-2-2 04:00\n2009-2-2 06:00 | 2009-2-2 14:00\n']], ['Checking for time range overlap, the watchman problem [SQL]'], 2], [(781895, 1), [['Using above code, implementing UDF is as simple as followed.'], ['-10000']], [[' create function fnThereIsWatchmenBetween(@from datetime, @to datetime)\nreturns bit\nas\nbegin\n    declare @_Result bit\n\n    declare @FlattenedDateRange table (\n        Start   datetime,\n        [End]   datetime\n    )\n\n    insert  @FlattenedDateRange(Start, [End])\n    select  distinct \n            Start = \n                case \n                    when Pv.Start is null then Curr.Start \n                    when Curr.Start between Pv.Start and Pv.[End] then Pv.Start\n                    else Curr.Start \n                end,\n            [End] = \n                case \n                    when Curr.[End] between Nx.Start and Nx.[End] then Nx.[End] \n                    else Curr.[End] \n                end\n    from    shift Curr\n            left join shift Pv on Pv.ID = Curr.ID - 1 --; prev\n            left join shift Nx on Nx.ID = Curr.ID + 1 --; next\n\n    if exists(  select  1\n                from    FlattenedDateRange R\n                where   @from between R.Start and R.[End]\n                        and @to between R.Start and R.[End]) begin\n        set @_Result = 1    --; There is/are watchman/men during specified date range\n    end\n    else begin\n        set @_Result = 0    --; There is NO watchman\n    end\n\n    return @_Result\nend\n']], ['Checking for time range overlap, the watchman problem [SQL]'], 2], [(782928, 0), [['-10000'], ['Better to use this one:']], [[' SELECT  *\nFROM    animal\nSTART WITH\n        animal_id IN\n        (\n        SELECT  parent_male_id\n        FROM    animal\n        WHERE   animal_id = 123\n        UNION ALL \n        SELECT  parent_female_id\n        FROM    animal\n        WHERE   animal_id = 123\n        )\nCONNECT BY\n        PRIOR animal_id IN (parent_male_id, parent_female_id)\n']], ['Genealogy Query in Oracle'], 2], [(782928, 1), [['Better to use this one:'], [', which will use  HASH JOIN  and is much faster.']], [[' SELECT  DISTINCT(animal_id) AS animal_id\nFROM    (\n        SELECT  0 AS gender, animal_id, father AS parent\n        FROM    animal\n        UNION ALL\n        SELECT  1, animal_id, mother\n        FROM    animal\n        )\nSTART WITH\n        animal_id IN\n        (\n        SELECT  father\n        FROM    animal\n        WHERE   animal_id = 9500\n        UNION ALL \n        SELECT  mother\n        FROM    animal\n        WHERE   animal_id = 9500\n        )\nCONNECT BY\n        parent = PRIOR animal_id\nORDER BY\n        animal_id\n']], ['Genealogy Query in Oracle'], 2], [(783283, 0), [['More importantly, this is not generally the way we do things in relational databases.  If your MYTABLE looks like this:'], ['then a more proper relational way to design the table would be:']], [[' ID       TABLENAME\n1        TBLUSER\n2        TBLUSER, TBLACCOUNT\n']], ['Trouble Writing SQL Query'], 2], [(783283, 1), [['then a more proper relational way to design the table would be:'], ['Then your query would work as-is, more or less, because the TABLENAME column would always contain the name of a single table.']], [[' ID       TBL_NUM    TABLENAME\n1        1          TBLUSER\n2        1          TBLUSER\n2        2          TBLACCOUNT\n']], ['Trouble Writing SQL Query'], 2], [(783630, 0), [['-10000'], ['then:']], [[' insert parent (userId, group, name)\nselect distinct userId, group, concat("user ", userId, " - ", group, " data")\nfrom input_data;\n']], ['Generate parent record from child records'], 2], [(783630, 1), [['then:'], ['-10000']], [[' insert child (parentId, value)\nselect p.parentId, d.value\nfrom parent p\ninner join input_data d on p.user_id = d.user_id and p.group = d.group;\n']], ['Generate parent record from child records'], 2], [(785583, 0), [['This will use an index on  b.id :'], ['And this will use an index on  a.StatusID :']], [[' SELECT  a.Name, b.Status\nFROM    a\nSTRAIGHT_JOIN\n        b\nON      b.ID = a.StatusID\n']], ['Does the order of tables referenced in the ON clause of the JOIN matter?'], 6], [(785583, 1), [['And this will use an index on  a.StatusID :'], ['This will use an index on  b.id  or build a hash table on  b :']], [[' SELECT  a.Name, b.Status\nFROM    b\nSTRAIGHT_JOIN\n        a\nON      b.ID = a.StatusID\n']], ['Does the order of tables referenced in the ON clause of the JOIN matter?'], 6], [(785583, 2), [['This will use an index on  b.id  or build a hash table on  b :'], ['And this will use an index on  a.StatusID  or build a hash table on  a :']], [[' SELECT  /*+ ORDERED */\n        *\nFROM    a\nJOIN    b\nON      b.ID = a.StatusID\n']], ['Does the order of tables referenced in the ON clause of the JOIN matter?'], 6], [(785583, 3), [['And this will use an index on  a.StatusID  or build a hash table on  a :'], ['This will use an index on  b.id  or build a hash table on  b :']], [[' SELECT  /*+ ORDERED */\n        *\nFROM    b\nJOIN    a\nON      b.ID = a.StatusID\n']], ['Does the order of tables referenced in the ON clause of the JOIN matter?'], 6], [(785583, 4), [['This will use an index on  b.id  or build a hash table on  b :'], ['And this will use an index on  a.StatusID  or build a hash table on  a :']], [[' SELECT  *\nFROM    a\nJOIN    b\nON      b.ID = a.StatusID\nOPTION (FORCE ORDER)\n']], ['Does the order of tables referenced in the ON clause of the JOIN matter?'], 6], [(785583, 5), [['And this will use an index on  a.StatusID  or build a hash table on  a :'], ['Optimizer hints (not wanted)']], [[' SELECT  *\nFROM    b\nJOIN    a\nON      b.ID = a.StatusID\nOPTION (FORCE ORDER)\n']], ['Does the order of tables referenced in the ON clause of the JOIN matter?'], 6], [(790257, 0), [["I'm not sure what language you're using but it's probably got associative arrays where you can wrote something like:"], ["The result of the calls above would result in the following SQL (we had a different check for failed  update  but I've put your  @@rowcount  in for this example):"]], [[' pk{"ID"}   = "27"\nval{"Name"} = "\'John Brown\'"\nval{"ItemID"} = "102"\nupsert ("MyTable", pk, val)\n']], ['SQL: Use the same string for both INSERT and UPDATE?'], 2], [(790257, 1), [["The result of the calls above would result in the following SQL (we had a different check for failed  update  but I've put your  @@rowcount  in for this example):"], ["That's one solution which worked well for us. No doubt there are others."]], [[" update MyTable set\n    Name = 'John Brown',\n    ItemID = 102\n    where ID = 27\nif @@rowcount=0\n    insert into MyTable (ID, Name, ItemID) values (\n        27,\n        'John Brown',\n        102\n    )\n"]], ['SQL: Use the same string for both INSERT and UPDATE?'], 2], [(791373, 0), [['Stick a UNION between them.'], ['Alternatively, you could use a CASE WHEN TO stack them and sum the results to get it on one row.']], [[' SELECT COUNT(*) from _users WHERE post_count>=1 AND post_count<10;\nUNION\nSELECT COUNT(*) from _users WHERE post_count>=10 AND post_count<25;\n']], ['How does one query for count() on a series of ranges at once?'], 3], [(791373, 1), [['Alternatively, you could use a CASE WHEN TO stack them and sum the results to get it on one row.'], ['Or another way to do it...']], [[' SELECT\n   SUM(CASE WHEN post_count>=1 AND post_count<10 THEN 1 ELSE 0 END) AS Between_1_10\n   SUM(CASE WHEN post_count>=10 AND post_count<25 THEN 1 ELSE 0 END) AS Between_10_25\n   SUM(CASE WHEN post_count>=25 AND post_count<100 THEN 1 ELSE 0 END) AS Between_25_100\nFROM \n   _users \n']], ['How does one query for count() on a series of ranges at once?'], 3], [(791373, 2), [['Or another way to do it...'], ['-10000']], [[" SELECT \n     Count(*) \n     , Category\nFROM\n(\n    SELECT\n       CASE \n          WHEN post_count>=1 AND post_count<10 THEN '1_To_10'\n          WHEN post_count>=10 AND post_count<25 THEN '10_To_25'\n          WHEN post_count>=25 AND post_count<100 THEN '25_To_100'\n          ELSE 'Over_100' \n       END As Category\n    FROM\n       _users\n) as InnerTable\nGROUP BY\n   Category\n"]], ['How does one query for count() on a series of ranges at once?'], 3], [(792362, 0), [['Since you are using SQL Server 2005 you can use the "new" ROW_NUMBER() function. This will give you row 11 to 20:'], ['If you have a lot of records, using TOP X in the inner SELECT clause may speed up things a bit as there is no use returning 1000 records if you are only going to grab records 11 through 20:']], [[' SELECT  Description, Date\nFROM     (SELECT  ROW_NUMBER() OVER (ORDER BY Date DESC)\n             AS Row, Description, Date FROM LOG)\n            AS LogWithRowNumbers\nWHERE  Row >= 11 AND Row <= 20\n']], ['Query similar to TOP 10 to select inbetween records?'], 2], [(792362, 1), [['If you have a lot of records, using TOP X in the inner SELECT clause may speed up things a bit as there is no use returning 1000 records if you are only going to grab records 11 through 20:'], ['Source']], [[' SELECT  Description, Date\nFROM     (SELECT TOP 20 ROW_NUMBER() OVER (ORDER BY Date DESC)\n             AS Row, Description, Date FROM LOG)\n            AS LogWithRowNumbers\nWHERE  Row >= 11 AND Row <= 20\n']], ['Query similar to TOP 10 to select inbetween records?'], 2], [(794204, 0), [["In your case, I would  UNION  all the four queries using  A 's as a top condition, like this:"], ["Since condition  G  is a subquery, it may probably happen that it needs a  HASH JOIN  to perform fast.  HASH JOIN  requires a full scan on all unfiltered values, that's why it may probable be better to filter all values in a single fullscan and then perform a  HASH JOIN :"]], [[' SELECT  *\nFROM    mytable\nWHERE   A1 AND B AND C\nUNION\nSELECT  *\nFROM    mytable\nWHERE   A2 AND B AND C AND D AND E AND F1 AND G\n…\n']], ['Complex SQL where clause: whether to factor logic'], 2], [(794204, 1), [["Since condition  G  is a subquery, it may probably happen that it needs a  HASH JOIN  to perform fast.  HASH JOIN  requires a full scan on all unfiltered values, that's why it may probable be better to filter all values in a single fullscan and then perform a  HASH JOIN :"], ['To make any further judgements, it will be much better to see the query itself, really.']], [[' SELECT  *\nFROM    (\n        SELECT  *\n        FROM    foo\n        WHERE   condition_set_1\n        UNION\n        SELECT  *\n        FROM    foo\n        WHERE   condition_set_2_but_no_g\n        …\n        ) q\nWHERE   G\n']], ['Complex SQL where clause: whether to factor logic'], 2], [(794637, 0), [['Use this to generate a smalldatetime between 01 Jan 1900 and 06 Jun 2079 (not checked, SQL not installed)'], ['Edit: like this']], [[' DATEADD(day, (ABS(CHECKSUM(NEWID())) % 65530), 0)\n']], ['How to update rows with a random date'], 2], [(794637, 1), [['Edit: like this'], ['Edit: changed 65535 to 65530 and added ABS to avoid overflow at upper limit of range']], [[' UPDATE\n  table\nSET\n  datetimecol = DATEADD(day, (ABS(CHECKSUM(NEWID())) % 65530), 0)\n']], ['How to update rows with a random date'], 2], [(796077, 0), [['option 2:'], ['option 3:']], [[' begin tran;\ndelete from tablea where exists (select 1 from tableb where tablea.id=tableb.id);\ninsert into tablea select * from tableb;\ncommit tran;\n']], ['"Merging" two tables in T-SQL - replacing or preserving duplicate IDs'], 2], [(796077, 1), [['option 3:'], ['As for performance, so long as the id field(s) in tablea (the big table) are indexed, you should be fine.']], [[' begin tran;\ndelete from tableb where exists (select 1 from tablea where tablea.id=tableb.id);\ninsert into tablea select * from tableb;\ncommit tran;\n']], ['"Merging" two tables in T-SQL - replacing or preserving duplicate IDs'], 2], [(796688, 0), [['Click the tray icon, select  MySQL , then click  my.ini . The configuration file will open in notepad. Go to the end of the file and add this line (after the port line):'], ['to disable stop words. If you want to use custom stop-word file, replace that line with:']], [["  ft_stopword_file=''\n"]], ['How to reset stop words in MYSQL?'], 2], [(796688, 1), [['to disable stop words. If you want to use custom stop-word file, replace that line with:'], ['(set the path of the stopword file, of course).']], [[" ft_stopword_file='path/to/stopword_file.txt'\n"]], ['How to reset stop words in MYSQL?'], 2], [(798766, 0), [['watch:'], ['When you create a sequence with a number, you have to remember that the first time you select against the sequence, Oracle will return the initial value that you assigned it.']], [[' SQL> create table my_numbers(my_number number not null primary key);\n\nTable created.\n\nSQL> insert into my_numbers(select rownum from user_objects);\n\n260 rows created.\n\nSQL> select max(my_number) from my_numbers;\n\nMAX(MY_NUMBER)\n--------------\n           260\n\nSQL> create sequence my_number_sn start with 260;\n\nSequence created.\n\nSQL> insert into my_numbers(my_number) values (my_number_sn.NEXTVAL);\ninsert into my_numbers(my_number) values (my_number_sn.NEXTVAL)\n*\nERROR at line 1:\nORA-00001: unique constraint (NEIL.SYS_C00102439) violated\n']], ['How to create an Oracle sequence starting with max value from a table?'], 2], [(798766, 1), [['When you create a sequence with a number, you have to remember that the first time you select against the sequence, Oracle will return the initial value that you assigned it.'], ["If you're trying to do the 'gapless' thing, I strongly advise you to "]], [[' SQL> drop sequence my_number_sn;\n\nSequence dropped.\n\nSQL> create sequence my_number_sn start with 261;\n\nSequence created.\n\nSQL>  insert into my_numbers(my_number) values (my_number_sn.NEXTVAL);\n\n1 row created.\n']], ['How to create an Oracle sequence starting with max value from a table?'], 2], [(800017, 0), [['You could re-write your functions something like this:'], ['The syntax to use them is also a little different:']], [[' create function usf_GIS_GET_LAT(\n    @City varchar (30),\n    @State char (2)\n)\nreturns table\nas return (\n  select top 1 lat\n  from GIS_Location with (nolock) \n  where [State] = @State\n    and [City] = @City\n);\n\nGO\n\ncreate function usf_GIS_GET_LON (\n    @City varchar (30),\n    @State char (2)\n)\nreturns table\nas return (\n  select top 1 LON\n  from GIS_Location with (nolock)\n  where [State] = @State\n    and [City] = @City\n);\n']], ['Why do SQL Server Scalar-valued functions get slower?'], 2], [(800017, 1), [['The syntax to use them is also a little different:'], ['-10000']], [[' select\n    Lat.Lat,\n    Lon.Lon\nfrom\n    Address_Location with (nolock)\n    cross apply dbo.usf_GIS_GET_LAT(City,[State]) AS Lat\n    cross apply dbo.usf_GIS_GET_LON(City,[State]) AS Lon\nWHERE\n    ID IN (SELECT TOP 100 ID FROM Address_Location WITH(NOLOCK) ORDER BY ID DESC)\n']], ['Why do SQL Server Scalar-valued functions get slower?'], 2], [(802027, 0), [['Definition: Limit is used to limit your MySQL query results to those that fall within a specified range. You can use it to show the first X number of results, or to show a range from X - Y results. It is phrased as Limit X, Y and included at the end of your query. X is the starting point (remember the first record is 0) and Y is the duration (how many records to display).\nAlso Known As: Range Results\nExamples:'], ['This will display the first 10 results from the database.']], [[' SELECT * FROM `your_table` LIMIT 0, 10 \n']], ['In SQL, how do you get the top N rows ordered by a certain column?'], 2], [(802027, 1), [['This will display the first 10 results from the database.'], ['This will show records 6, 7, 8, 9, and 10']], [[' SELECT * FROM `your_table` LIMIT 5, 5 \n']], ['In SQL, how do you get the top N rows ordered by a certain column?'], 2], [(803867, 0), [['How about '], ["AND if you don't want the content, just the structure"]], [[' SELECT * INTO MyNewTable FROM MyView \n']], ['Is there any way to create a table with the same layout as a view in SQL Server 2005?'], 2], [(803867, 1), [["AND if you don't want the content, just the structure"], ['-10000']], [[' SELECT * INTO MyNewTable FROM MyView WHERE 1 = 2\n']], ['Is there any way to create a table with the same layout as a view in SQL Server 2005?'], 2], [(804397, 0), [['Something like this:'], ["Then you join with this, to extract the rest of the data from the comments, for those id's."]], [[' SELECT MAX(ID) MaxCommentID, PostID\nFROM Comments\nGROUP BY PostID\n']], ['SQL Query Question: X has many Y. Get all X and get only the newest Y per X'], 6], [(804397, 1), [["Then you join with this, to extract the rest of the data from the comments, for those id's."], ['Then, you join with the posts, to get the information about those posts.']], [[' SELECT C1.*, C2.PostID\nFROM Comments AS C1\n     INNER JOIN (\n         SELECT MAX(ID) MaxCommentID, PostID\n         FROM Comments\n         GROUP BY PostID\n     ) AS C2 ON C1.CommentID = C2.MaxCommentID\n']], ['SQL Query Question: X has many Y. Get all X and get only the newest Y per X'], 6], [(804397, 2), [['Then, you join with the posts, to get the information about those posts.'], ["An alternate approach doesn't use the PostID of the inner query at all. First, pick out the maximum comment id for all unique posts, but don't care about which post, we know they're unique."]], [[' SELECT C1.*, P.*\nFROM Comments AS C1\n     INNER JOIN (\n         SELECT MAX(ID) MaxCommentID, PostID\n         FROM Comments\n         GROUP BY PostID\n     ) AS C2 ON C1.CommentID = C2.MaxCommentID\n     INNER JOIN Posts AS P ON C2.PostID = P.ID\n']], ['SQL Query Question: X has many Y. Get all X and get only the newest Y per X'], 6], [(804397, 3), [["An alternate approach doesn't use the PostID of the inner query at all. First, pick out the maximum comment id for all unique posts, but don't care about which post, we know they're unique."], ['Then do an IN clause, to get the rest of the data for those comments:']], [[' SELECT MAX(ID) AS MaxCommentID\nFROM Comments\nGROUP BY PostID\n']], ['SQL Query Question: X has many Y. Get all X and get only the newest Y per X'], 6], [(804397, 4), [['Then do an IN clause, to get the rest of the data for those comments:'], ['Then simply join in the posts:']], [[' SELECT C1.*\nFROM Comments\nWHERE C1.ID IN (\n    SELECT MAX(ID) AS MaxCommentID\n    FROM Comments\n    GROUP BY PostID\n)\n']], ['SQL Query Question: X has many Y. Get all X and get only the newest Y per X'], 6], [(804397, 5), [['Then simply join in the posts:'], ['-10000']], [[' SELECT C1.*, P.*\nFROM Comments AS C1\n     INNER JOIN Posts AS P ON C1.PostID = P.ID\nWHERE C1.ID IN (\n    SELECT MAX(ID) AS MaxCommentID\n    FROM Comments\n    GROUP BY PostID\n)\n']], ['SQL Query Question: X has many Y. Get all X and get only the newest Y per X'], 6], [(807909, 0), [['Your compare will work, but it will be slow because the dates are converted to a string for each row.  To efficiently compare two time parts, try:'], ["So here's an example date:"]], [[" declare @first datetime\nset @first = '2009-04-30 19:47:16.123'\ndeclare @second datetime\nset @second = '2009-04-10 19:47:16.123'\n\nselect (cast(@first as float) - floor(cast(@first as float))) -\n       (cast(@second as float) - floor(cast(@second as float)))\n       as Difference\n"]], ['How can I compare time in SQL Server?'], 6], [(807909, 1), [["So here's an example date:"], ["Let's convert it to a float:"]], [[" declare @mydate datetime\nset @mydate = '2009-04-30 19:47:16.123'\n"]], ['How can I compare time in SQL Server?'], 6], [(807909, 2), [["Let's convert it to a float:"], ['Now take the part after the digit, i.e. the time:']], [[' declare @myfloat float\nset @myfloat = cast(@mydate as float)\nselect @myfloat\n-- Shows 39931,8244921682\n']], ['How can I compare time in SQL Server?'], 6], [(807909, 3), [['Now take the part after the digit, i.e. the time:'], ['Convert it back to a datetime:']], [[' set @myfloat = @myfloat - floor(@myfloat) \nselect @myfloat\n-- Shows 0,824492168212601\n']], ['How can I compare time in SQL Server?'], 6], [(807909, 4), [['Convert it back to a datetime:'], ['The 1900-01-01 is just the "zero" date; you can display the time part with convert, specifying for example format 108, which is just the time:']], [[' declare @mytime datetime\nset @mytime = convert(datetime,@myfloat)\nselect @mytime\n-- Shows 1900-01-01 19:47:16.123\n']], ['How can I compare time in SQL Server?'], 6], [(807909, 5), [['The 1900-01-01 is just the "zero" date; you can display the time part with convert, specifying for example format 108, which is just the time:'], ["Conversions between datetime and float are pretty fast, because they're basically stored in the same way."]], [[' select convert(varchar(32),@mytime,108)\n-- Shows 19:47:16\n']], ['How can I compare time in SQL Server?'], 6], [(808356, 0), [['For example, here is how to get the 1st of every month in 2008:'], ['Now, you can put that together using OUTER APPLY to find the most recent transaction for each date like so:']], [[" select firstOfMonth = dateadd( month, n - 1, '1/1/2008')\nfrom Numbers\nwhere n <= 12;\n"]], ['How to Determine Values for Missing Months based on Data of Previous Months in T-SQL'], 2], [(808356, 1), [['Now, you can put that together using OUTER APPLY to find the most recent transaction for each date like so:'], ["This should give you what you're looking for, but you might have to Google around a little to find the best way to create the Numbers table."]], [[" with Dates as (\n    select firstOfMonth = dateadd( month, n - 1, '1/1/2008')\n    from Numbers\n    where n <= 12\n)\nselect d.firstOfMonth, t.TransactionValue\nfrom Dates d\nouter apply (\n    select top 1 TransactionValue\n    from Transactions\n    where TransactionDate <= d.firstOfMonth\n    order by TransactionDate desc\n) t;\n"]], ['How to Determine Values for Missing Months based on Data of Previous Months in T-SQL'], 2], [(809056, 0), [["Something like this, if I've understood you correctly"], ["I have now checked the following in SQL Server (I would epxect the same outcome in Oracle) and it returns the  CID  for the  C  record with the Maximum  CREATIONTIME  where the  STATUS  for the related record in  A  id  'OK' ."]], [[" SELECT\n    MAX(CREATIONTIME),\n    A.AID\nFROM\n    A\nINNER JOIN\n    B\n    ON \n    A.AID = B.AID\nINNER JOIN\n    C\n    ON \n    B.CID = C.CID\nWHERE\n    A.STATUS = 'OK'\nGROUP BY\n    A.AID\n"]], ['SQL SELECT: combining and grouping data between three tables using subqueries'], 6], [(809056, 1), [["I have now checked the following in SQL Server (I would epxect the same outcome in Oracle) and it returns the  CID  for the  C  record with the Maximum  CREATIONTIME  where the  STATUS  for the related record in  A  id  'OK' ."], ['Demonstrated with the following  T-SQL']], [[" SELECT C.CID\nFROM \nC C\nINNER JOIN\nB B\nON \nC.CID = B.CID\nINNER JOIN\n(\n    SELECT\n        MAX(C.CREATIONTIME) CREATIONTIME,\n        A.AID\n    FROM\n        A A\n    INNER JOIN\n        B B\n        ON \n        A.AID = B.AID\n    INNER JOIN\n        C C\n        ON \n        B.CID = C.CID\n    WHERE\n        A.STATUS = 'OK'\n    GROUP BY\n        A.AID\n) ABC\nON B.AID = ABC.AID\nAND C.CREATIONTIME = ABC.CREATIONTIME\n"]], ['SQL SELECT: combining and grouping data between three tables using subqueries'], 6], [(809056, 2), [['Demonstrated with the following  T-SQL'], ['Results in the following']], [[" DECLARE @A TABLE(AID INT IDENTITY(1,1), STATUS VARCHAR(10))\nDECLARE @B TABLE(BID INT IDENTITY(1,1), AID INT, CID INT)\nDECLARE @C TABLE(CID INT IDENTITY(1,1), CREATIONTIME DATETIME)\n\nINSERT INTO @A VALUES ('OK')\nINSERT INTO @A VALUES ('OK')\nINSERT INTO @A VALUES ('NOT OK')\nINSERT INTO @A VALUES ('OK')\nINSERT INTO @A VALUES ('NOT OK')\n\nINSERT INTO @C VALUES ('10 MAR 2008')\nINSERT INTO @C VALUES ('13 MAR 2008')\nINSERT INTO @C VALUES ('15 MAR 2008')\nINSERT INTO @C VALUES ('17 MAR 2008')\nINSERT INTO @C VALUES ('21 MAR 2008')\n\nINSERT INTO @B VALUES (1,1)\nINSERT INTO @B VALUES (1,2)\nINSERT INTO @B VALUES (1,3)\nINSERT INTO @B VALUES (2,2)\nINSERT INTO @B VALUES (2,3)\nINSERT INTO @B VALUES (2,4)\nINSERT INTO @B VALUES (3,3)\nINSERT INTO @B VALUES (3,4)\nINSERT INTO @B VALUES (3,5)\nINSERT INTO @B VALUES (4,5)\nINSERT INTO @B VALUES (4,1)\nINSERT INTO @B VALUES (4,2)\n\n\nSELECT C.CID\nFROM \n@C C\nINNER JOIN\n@B B\nON \nC.CID = B.CID\nINNER JOIN\n(\nSELECT\n    MAX(C.CREATIONTIME) CREATIONTIME,\n    A.AID\nFROM\n    @A A\nINNER JOIN\n    @B B\n    ON \n    A.AID = B.AID\nINNER JOIN\n    @C C\n    ON \n    B.CID = C.CID\nWHERE\n    A.STATUS = 'OK'\nGROUP BY\n    A.AID\n) ABC\nON B.AID = ABC.AID\nAND C.CREATIONTIME = ABC.CREATIONTIME\n"]], ['SQL SELECT: combining and grouping data between three tables using subqueries'], 6], [(809056, 3), [['Results in the following'], ['In response to your comment about each of the statements giving different results, I have ran some of the different answers here through SQL Server 2005 using my test data above (I appreciate you are using Oracle). Here are the results']], [[' CID\n-----------\n3\n4\n5\n']], ['SQL SELECT: combining and grouping data between three tables using subqueries'], 6], [(809056, 4), [['In response to your comment about each of the statements giving different results, I have ran some of the different answers here through SQL Server 2005 using my test data above (I appreciate you are using Oracle). Here are the results'], ['the results are as follows']], [[" --Expected results for CIDs would be\n\n--CID\n-----------\n--3\n--4\n--5\n\n--As indicated in the comments next to the insert statements\n\nDECLARE @A TABLE(AID INT IDENTITY(1,1), STATUS VARCHAR(10))\nDECLARE @B TABLE(BID INT IDENTITY(1,1), AID INT, CID INT)\nDECLARE @C TABLE(CID INT IDENTITY(1,1), CREATIONTIME DATETIME)\n\nINSERT INTO @A VALUES ('OK') -- AID 1\nINSERT INTO @A VALUES ('OK') -- AID 2\nINSERT INTO @A VALUES ('NOT OK')\nINSERT INTO @A VALUES ('OK') -- AID 4\nINSERT INTO @A VALUES ('NOT OK')\n\nINSERT INTO @C VALUES ('10 MAR 2008')\nINSERT INTO @C VALUES ('13 MAR 2008')\nINSERT INTO @C VALUES ('15 MAR 2008')\nINSERT INTO @C VALUES ('17 MAR 2008')\nINSERT INTO @C VALUES ('21 MAR 2008')\n\nINSERT INTO @B VALUES (1,1)\nINSERT INTO @B VALUES (1,2)\nINSERT INTO @B VALUES (1,3) -- Will be CID 3 For AID 1\nINSERT INTO @B VALUES (2,2)\nINSERT INTO @B VALUES (2,3)\nINSERT INTO @B VALUES (2,4) -- Will be CID 4 For AID 2\nINSERT INTO @B VALUES (3,3)\nINSERT INTO @B VALUES (3,4)\nINSERT INTO @B VALUES (3,5)\nINSERT INTO @B VALUES (4,5) -- Will be CID 5 FOR AID 4\nINSERT INTO @B VALUES (4,1)\nINSERT INTO @B VALUES (4,2)\n\n-- Russ Cam\nSELECT C.CID, ABC.CREATIONTIME\nFROM \n@C C\nINNER JOIN\n@B B\nON \nC.CID = B.CID\nINNER JOIN\n(\nSELECT\n    MAX(C.CREATIONTIME) CREATIONTIME,\n    A.AID\nFROM\n    @A A\nINNER JOIN\n    @B B\n    ON \n    A.AID = B.AID\nINNER JOIN\n    @C C\n    ON \n    B.CID = C.CID\nWHERE\n    A.STATUS = 'OK'\nGROUP BY\n    A.AID\n) ABC\nON B.AID = ABC.AID\nAND C.CREATIONTIME = ABC.CREATIONTIME\n\n-- Tyrannosaurs\nselect   A.AID,  \n         max(AggC.CREATIONTIME)  \nfrom    @A A,  \n         @B B,  \n         (  select  C.CID,  \n             max(C.CREATIONTIME) CREATIONTIME  \n            from @C C  \n            group by CID\n          ) AggC  \nwhere    A.AID = B.AID  \nand    B.CID = AggC.CID  \nand    A.Status = 'OK'  \ngroup by A.AID\n\n-- jmucchiello\nSELECT c.cid, max(c.creationtime)\nFROM @B b, @C c\nWHERE b.cid = c.cid\n AND b.aid IN (SELECT a.aid FROM @A a WHERE status = 'OK')\nGROUP BY c.cid\n\n-- hainstech\nSELECT agg.aid, agg.cid\nFROM (\n    SELECT a.aid\n        ,c.cid\n        ,max(c.creationtime) as maxcCreationTime\n    FROM @C c INNER JOIN @B b ON b.cid = c.cid\n        INNER JOIN @A a on a.aid = b.aid\n    WHERE a.status = 'OK'\n    GROUP BY a.aid, c.cid\n) as agg\n\n--chris\nSELECT A.AID, C.CID, C.CREATIONTIME\nFROM @A A, @B B, @C C\nWHERE A.STATUS = 'OK'\nAND A.AID = B.AID\nAND B.CID = C.CID\nAND C.CREATIONTIME = \n(SELECT MAX(C2.CREATIONTIME) \nFROM @C C2, @B B2 \nWHERE B2.AID = A.AID\nAND C2.CID = B2.CID);\n"]], ['SQL SELECT: combining and grouping data between three tables using subqueries'], 6], [(809056, 5), [['the results are as follows'], ['I would recommend running each of the given answers against a smaller number of records, so that you can ascertain whether the resultset returned is the expected one.']], [[' --Russ Cam - Correct CIDs (I have added in the CREATIONTIME for reference)\nCID         CREATIONTIME\n----------- -----------------------\n3           2008-03-15 00:00:00.000\n4           2008-03-17 00:00:00.000\n5           2008-03-21 00:00:00.000\n\n--Tyrannosaurs - No CIDs in the resultset\nAID         \n----------- -----------------------\n1           2008-03-15 00:00:00.000\n2           2008-03-17 00:00:00.000\n4           2008-03-21 00:00:00.000\n\n\n--jmucchiello - Incorrect CIDs in the resultset\ncid         \n----------- -----------------------\n1           2008-03-10 00:00:00.000\n2           2008-03-13 00:00:00.000\n3           2008-03-15 00:00:00.000\n4           2008-03-17 00:00:00.000\n5           2008-03-21 00:00:00.000\n\n--hainstech - Too many CIDs in the resultset, which CID has the MAX(CREATIONTIME) for each AID?\naid         cid\n----------- -----------\n1           1\n1           2\n1           3\n2           2\n2           3\n2           4\n4           1\n4           2\n4           5\n\n--chris - Correct CIDs, it is the same SQL as mine\nAID         CID         CREATIONTIME\n----------- ----------- -----------------------\n1           3           2008-03-15 00:00:00.000\n2           4           2008-03-17 00:00:00.000\n4           5           2008-03-21 00:00:00.000\n']], ['SQL SELECT: combining and grouping data between three tables using subqueries'], 6], [(810446, 0), [['Nope, subquery is it. For example, everyone with the top 3 ages:'], ['or just the top age:']], [[' SELECT * FROM people WHERE age IN (SELECT DISTINCT age FROM people ORDER BY age DESC LIMIT 3)\n']], ['Generic way in MySQL to get the top results'], 2], [(810446, 1), [['or just the top age:'], ['-10000']], [[' SELECT * FROM people WHERE age = (SELECT MAX(age) FROM people)\n']], ['Generic way in MySQL to get the top results'], 2], [(810714, 0), [['Here is how you can solve this using a single  WHERE  clause:'], ['A naïve usage of the CASE statement  does not work , by this I mean the following:']], [[' WHERE (@myParm = value1 AND MyColumn IS NULL)\nOR  (@myParm = value2 AND MyColumn IS NOT NULL)\nOR  (@myParm = value3)\n']], ['WHERE IS NULL, IS NOT NULL or NO WHERE clause depending on SQL Server parameter value'], 2], [(810714, 1), [['A naïve usage of the CASE statement  does not work , by this I mean the following:'], ["It is possible to solve this using a case statement, see onedaywhen's  answer"]], [[' SELECT Field1, Field2 FROM MyTable\nWHERE CASE @myParam\n    WHEN value1 THEN MyColumn IS NULL\n    WHEN value2 THEN MyColumn IS NOT NULL\n    WHEN value3 THEN TRUE\nEND\n']], ['WHERE IS NULL, IS NOT NULL or NO WHERE clause depending on SQL Server parameter value'], 2], [(811460, 0), [['Migration to SQLServer is a very easy task, especially if your using the dbGO components (ADO) as all that will be required is changing the connection string to point to the SQL Server instance.  The only issue I had with such a conversion was with boolean fields.  In access these fields have an internal representation of 0 or -1, and in SQL Server they have an internal representation of 0 or 1.  In Access they resolve as boolean, in SQL Server they do not.  For instance the following query fails in SQL Server:'], ['it has to be rewritten as:']], [[' SELECT * FROM TABLE WHERE BOOLFIELD\n']], ['Delphi - Network ODBC Database (MS Access)'], 3], [(811460, 1), [['it has to be rewritten as:'], ['You can migrate data from one database to another via SQLServer using the  OpenDataSource  method and then performing an insert into from your access database.']], [[' SELECT * FROM TABLE WHERE BOOLFIELD <> 0\n']], ['Delphi - Network ODBC Database (MS Access)'], 3], [(811460, 2), [['You can migrate data from one database to another via SQLServer using the  OpenDataSource  method and then performing an insert into from your access database.'], ['Another option would be to go n-Tier.  If you have the enterprise version of Delphi, then its not to hard to migrate the system over to a true n-Tier solution using TClientDatasets and writing a few server functions.  Of course mileage will depend much on the current layout of your application, and how complex the system is.']], [[" INSERT INTO TABLE FROM \n  OpenDataSource('Microsoft.Jet.OLEDB.4.0','Access.mdb')...TABLE\n"]], ['Delphi - Network ODBC Database (MS Access)'], 3], [(812529, 0), [['Small comment on the original code - doing a rownum restriction  before  an ORDER BY can produce adverse results '], ['Try the following :']], [[' for r in 1 .. 10 loop\n   select max(my_members.member_index)\n   into ranges(r)\n   from my_members\n   where  my_members.active = 1\n   and rownum < top_row\n   order by my_members.member_index asc;\n   top_row    := top_row + 100;\n']], ['Separating SQL Results Into Ranges'], 3], [(812529, 1), [['Try the following :'], ['To get the result you expect you need to do ']], [[' create table example_nums (numval number)\n\nbegin\n    for i in 1..100 loop\n        insert into example_nums values (i);\n   end loop;\nend;\n\nSELECT numval FROM example_nums \nWHERE rownum < 5 \nORDER BY numval DESC;\n']], ['Separating SQL Results Into Ranges'], 3], [(812529, 2), [['To get the result you expect you need to do '], ["(Note - behind the scenes, Oracle will translate this into an efficient sort that only ever holds the 'top 4 items')."]], [[' SELECT numval FROM\n   (SELECT numval FROM example_nums \n   ORDER BY numval DESC)\nWHERE rownum < 5 \n']], ['Separating SQL Results Into Ranges'], 3], [(813238, 0), [["In order to INSERT data into a SQL Server table, you don't need any conversion codes or anything at all - just specify your dates as literal strings"], ['If you need to convert a date column to ISO-8601 format on SELECT, you can use conversion code 126 or 127 (with timezone information) to achieve the ISO format.']], [[" INSERT INTO MyTable(DateColumn) VALUES('20090430 12:34:56.790')\n"]], ['TSQL DATETIME ISO 8601'], 3], [(813238, 1), [['If you need to convert a date column to ISO-8601 format on SELECT, you can use conversion code 126 or 127 (with timezone information) to achieve the ISO format.'], ['should give you:']], [[' SELECT CONVERT(VARCHAR(33), DateColumn, 126) FROM MyTable\n']], ['TSQL DATETIME ISO 8601'], 3], [(813238, 2), [['should give you:'], ['-10000']], [[' 2009-04-30T12:34:56.790\n']], ['TSQL DATETIME ISO 8601'], 3], [(813257, 0), [['set up table'], ['display table values']], [[" create table tREaltyTrac (city varchar(20),creation datetime)\ninsert into tREaltyTrac values ('Acampo'      ,getdate()) --1\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Acton'       ,getdate()) --1\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Adelanto'    ,getdate()) --20\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Agua Dulce'  ,getdate()) --1\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Aguanga'     ,getdate()) --1\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Akron'       ,getdate()) --19\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albany'      ,getdate()) --12\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albion'      ,getdate()) --3\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albion'      ,getdate()) --3\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Albion'      ,getdate()) --3\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alexandria'  ,getdate()) --14\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Algonac'     ,getdate()) --1\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alhambra'    ,getdate()) --5\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alhambra'    ,getdate()) --5\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alhambra'    ,getdate()) --5\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alhambra'    ,getdate()) --5\nwaitfor delay '00:00:01'\ninsert into tREaltyTrac values ('Alhambra'    ,getdate()) --5\n"]], ['SQL delete loop'], 4], [(813257, 1), [['display table values'], ["delete the rows you don't want"]], [[' select city,count(*) from tREaltyTrac group by city\nselect * from tREaltyTrac\n']], ['SQL delete loop'], 4], [(813257, 2), [["delete the rows you don't want"], ['show the rows you have left']], [[' delete from tREaltyTrac\n    from tREaltyTrac\n        inner join (select\n                        city,creation, row_number() over(partition by city order by city) AS RankValue\n                        from tREaltyTrac\n                   ) dt on tREaltyTrac.city=dt.city AND tREaltyTrac.creation=dt.creation\n    where dt. RankValue>10\n']], ['SQL delete loop'], 4], [(813257, 3), [['show the rows you have left'], ['-10000']], [[' select * from tREaltyTrac\nselect city,count(*) from tREaltyTrac group by city\n']], ['SQL delete loop'], 4], [(816365, 0), [['If you need to retain the other values in the row you can provide a default value for the date in a query with;'], ['To update the null values in the table use;']], [[" SELECT NVL(dateCol, to_date('31/01/2009','dd/MM/yyyy')) FROM dataTable\n"]], ['oracle9i queries'], 3], [(816365, 1), [['To update the null values in the table use;'], ['To remove the null rows;']], [[" UPDATE dataTable\nSET dateCol = to_date('31/01/2009','dd/MM/yyyy') \nWHERE dateCol IS NULL\n"]], ['oracle9i queries'], 3], [(816365, 2), [['To remove the null rows;'], ['-10000']], [[' DELETE FROM dataTable\nWHERE dateCol IS NULL\n']], ['oracle9i queries'], 3], [(818643, 0), [['You can use the ExecuteCommand and ExecuteQuery methods on the DataContext.'], ['Another way would be to use the Connection.CreateCommand() method on a DataContext which will return a DbCommand object. Then you simply set the CommandText property with the SQL you want to execute.']], [[' var db = new MyDataContext();\nIEnumerable<Table1> result = db.ExecuteQuery<Table1>("SELECT * FROM Table1");\ndb.ExecuteCommand("UPDATE Tabel1 SET Column1 = \'Foo\'");\n']], ['Is it possible to make LinQ "understand" a classic SQL query?'], 2], [(818643, 1), [['Another way would be to use the Connection.CreateCommand() method on a DataContext which will return a DbCommand object. Then you simply set the CommandText property with the SQL you want to execute.'], ['You can also look at this  MSDN  link for some other examples.']], [[' DbCommand command = myDataContext.Connection.CreateCommand();\ncommand.CommandText = "SELECT * FROM Table1";\n\ntry {\n    command.Connection.Open();\n    DbDataReader reader = command.ExecuteReader();\n    // do something usefull with the reader like creating a DataTable\n} finally {\n    command.Connection.Close();\n    command.Dispose();\n}\n']], ['Is it possible to make LinQ "understand" a classic SQL query?'], 2], [(818868, 0), [['If it does have duplicate word/sentence pairs, you should be using this code to get the correct answer:'], ["If the table does not have duplicate word/sentence pairs... then you shouldn't count sentence_ids, you should just count rows."]], [[' HAVING COUNT(DISTINCT Sentence_ID) > 100\n']], ['is there something faster than "having count" for large tables?'], 2], [(818868, 1), [["If the table does not have duplicate word/sentence pairs... then you shouldn't count sentence_ids, you should just count rows."], ['In which case, you can create an index on  word_id only , for optimum performance.']], [[' HAVING COUNT(*) > 100\n']], ['is there something faster than "having count" for large tables?'], 2], [(819741, 0), [['SQL Server  stores dates along with time.'], ['You need to select like this:']], [[" select dateColumn from someTable where dateColumn <= '2009/4/30'\n"]], ['Issue with retrieving DateTime object using Sql'], 3], [(819741, 1), [['You need to select like this:'], ['or like this:']], [[" select dateColumn from someTable where dateColumn < '2009/5/01'\n"]], ['Issue with retrieving DateTime object using Sql'], 3], [(819741, 2), [['or like this:'], ['-10000']], [[" select dateColumn from someTable where dateColumn < DATEADD(day, 1, '2009/4/30')\n"]], ['Issue with retrieving DateTime object using Sql'], 3], [(824931, 0), [['To get the top 5 scorers from this table:  '], ['try this SQL:  ']], [[' CREATE TABLE people\n             (id      int, \n              name    string, \n              score   int)\n']], ['Can there be a database-agnostic SQL query to fetch top N rows?'], 2], [(824931, 1), [['try this SQL:  '], ['I believe this should work in most places.  ']], [[' SELECT id, \n       name, \n       score\nFROM   people  p\nWHERE  (SELECT COUNT(*) \n        FROM   people p2\n        WHERE  p2.score  > p.score \n       ) <=4 \n']], ['Can there be a database-agnostic SQL query to fetch top N rows?'], 2], [(825664, 0), [['If a user enters  name ,  phone ,  email  and  address  into the database, and you want to check all records that match at least  3  of these fields, you issue:'], ['If you want to have a list of  DISTINCT  values in the existing data, you just wrap this query into a subquery:']], [[" SELECT  i.*\nFROM    (\n        SELECT  id, COUNT(*)\n        FROM    (\n                SELECT  id\n                FROM    t_info t\n                WHERE   name  = 'Eve Chianese'\n                UNION ALL\n                SELECT  id\n                FROM    t_info t\n                WHERE   phone = '+15558000042'\n                UNION ALL\n                SELECT  id\n                FROM    t_info t\n                WHERE   email = '42@example.com'\n                UNION ALL\n                SELECT  id\n                FROM    t_info t\n                WHERE   address = '42 North Lane'\n                ) q\n        GROUP BY\n                id\n        HAVING  COUNT(*) >= 3\n        ) dq\nJOIN    t_info i\nON      i.id = dq.id\n"]], ['Efficient checking of possible duplicate entities'], 2], [(825664, 1), [['If you want to have a list of  DISTINCT  values in the existing data, you just wrap this query into a subquery:'], ['Note that this  DISTINCT  is not transitive: if  A  matches  B  and  B  matches  C , this does not mean that  A  matches  C .']], [[' SELECT  i.*\nFROM    t_info i1\nWHERE   EXISTS\n        (\n        SELECT  1\n        FROM    (\n                SELECT  id\n                FROM    t_info t\n                WHERE   name  = i1.name\n                UNION ALL\n                SELECT  id\n                FROM    t_info t\n                WHERE   phone = i1.phone\n                UNION ALL\n                SELECT  id\n                FROM    t_info t\n                WHERE   email = i1.email\n                UNION ALL\n                SELECT  id\n                FROM    t_info t\n                WHERE   address = i1.address\n                ) q\n        GROUP BY\n                id\n        HAVING  COUNT(*) >= 3\n        )\n']], ['Efficient checking of possible duplicate entities'], 2], [(826149, 0), [['The solution would be simpler  and  perform better if you stored the  fldRoleList  as multiple rows in a dependent table:'], ['But that outputs multiple rows if multiple roles match the comma-separated input string. If you need to restrict the result to one row per  aTable  entry, with the  first  matching role:']], [[' SELECT t1.*, r1.fldRole \nFROM aTable t1 JOIN aTableRoles r1 USING (aTable_id) \nWHERE FIND_IN_SET(r1.fldRole, fldInputField);\n']], ['Sql Un-Wizardry: Compare values from one list in another'], 2], [(826149, 1), [['But that outputs multiple rows if multiple roles match the comma-separated input string. If you need to restrict the result to one row per  aTable  entry, with the  first  matching role:'], ['-10000']], [[' SELECT t1.*, MIN(r1.fldRole) AS First_fldRole \nFROM aTable t1 JOIN aTableRoles r1 USING (aTable_id) \nWHERE FIND_IN_SET(r1.fldRole, fldInputField);\nGROUP BY t1.aTable_id;\n']], ['Sql Un-Wizardry: Compare values from one list in another'], 2], [(829604, 0), [['MySQL  and  PostgreSQL :'], ['Oracle :']], [[' SELECT  *\nFROM    Table\nORDER BY\n        column\nLIMIT 100\n']], ['Equivalents to SQL Server TOP'], 5], [(829604, 1), [['Oracle :'], ['MySQL :']], [[' SELECT  *\nFROM    (\n        SELECT  t.*\n        FROM    table\n        ORDER BY\n                column\n        )\nWHERE   rownum <= 100\n']], ['Equivalents to SQL Server TOP'], 5], [(829604, 2), [['MySQL :'], ['PostgreSQL :']], [[' SELECT  *\nFROM    TABLE\nORDER BY\n        column\nLIMIT   100, 200\n']], ['Equivalents to SQL Server TOP'], 5], [(829604, 3), [['PostgreSQL :'], ['Oracle :']], [[' SELECT  *\nFROM    Table\nORDER BY\n        column\nOFFSET 100 LIMIT 200\n']], ['Equivalents to SQL Server TOP'], 5], [(829604, 4), [['Oracle :'], ['Note that an attempt to simplify it with  ROWNUM BETWEEN 100 AND 200  (as opposed to  rn BETWEEN 100 AND 200  in the outer query) will return nothing in  Oracle !']], [[' SELECT  *\nFROM    (\n        SELECT  t.*, ROW_NUMBER() OVER (ORER BY column) AS rn\n        FROM    table\n        )\nWHERE   rn >= 100\n        AND rownum <= 200\n']], ['Equivalents to SQL Server TOP'], 5], [(830123, 0), [["What about using a number of IF's?"], ['Alternatively you can build dynamic SQL in an exec']], [[' CREATE PROCEDURE UpdateUserField\n(\n    @UserFieldNumber int,\n    @UserFieldNewValue int\n) AS\n\nIF @UserFieldNumber=1\nBEGIN\n    UPDATE MyTable SET UserField1 = @UserFieldNewValue\nEND\n\nIF @UserFieldNumber=2\nBEGIN\n    UPDATE MyTable SET UserField2 = @UserFieldNewValue\nEND\n']], ['TSQL Parameterized SPROC question'], 2], [(830123, 1), [['Alternatively you can build dynamic SQL in an exec'], ["Beware SQL Injection if you do this though, with ints you won't have a problem, anything else you may need to consider risks."]], [[" CREATE PROCEDURE UpdateUserField\n(\n    @UserFieldNumber int,\n    @UserFieldNewValue int\n) AS\n\nEXEC('UPDATE MyTable SET UserField' + CONVERT(varchar(10), @UserFieldNumber) + ' = ' + CONVERT(varchar(10), @UserFieldNewValue))\n"]], ['TSQL Parameterized SPROC question'], 2], [(830814, 0), [['-10000'], ['EDIT - apologies, you are correct. Here is a fixed version (I should have used a test table to start with...)']], [[" declare @baseDate datetime\nset @baseDate = '1 May 2005'\n\nSELECT\n    datediff(year, @baseDate, [date]) AS YearBucket \n    ,COUNT(*) AS cnt \nFROM logins\nGROUP BY datediff(year, @baseDate, [date])\nORDER BY datediff(year, @baseDate, [date])\n"]], ['SQL Server Non-Standard Date Based Histogram'], 3], [(830814, 1), [['EDIT - apologies, you are correct. Here is a fixed version (I should have used a test table to start with...)'], ["EDIT #2 - ok, here is a more robust solution that handles leap years :)\nEDIT #3 - Actually this doesn't handle leap years, instead it allows for variable intervals of time to be specified. Go with dateadd(year, 1, @baseDate) for the leap year safe approach."]], [[" create table logins (date datetime, foo int)\ninsert logins values ('1 may 2005', 1)\ninsert logins values ('1 apr 2006', 2)\ninsert logins values ('1 may 2006', 3)\n\ndeclare @baseDate datetime\nset @baseDate = '1 May 2005'\n\nSELECT\n    datediff(day, @baseDate, [date]) / 365 AS YearBucket \n    ,COUNT(*) AS cnt \nFROM logins\nGROUP BY datediff(day, @baseDate, [date]) / 365\nORDER BY datediff(day, @baseDate, [date]) / 365\n"]], ['SQL Server Non-Standard Date Based Histogram'], 3], [(830814, 2), [["EDIT #2 - ok, here is a more robust solution that handles leap years :)\nEDIT #3 - Actually this doesn't handle leap years, instead it allows for variable intervals of time to be specified. Go with dateadd(year, 1, @baseDate) for the leap year safe approach."], ['-10000']], [[" declare @baseDate datetime, @interval datetime\n--@interval is expressed as time above 0 time (1/1/1900)\nselect @baseDate = '1 May 2005', @interval = '1901'\n\ndeclare @timeRanges table (beginIntervalInclusive datetime, endIntervalExclusive datetime)\ndeclare @i int\nset @i = 1\nwhile @i <= 10\nbegin\n    insert @timeRanges values(@baseDate, @baseDate + @interval)\n    set @baseDate = @baseDate + @interval\n    set @i = @i + 1\nend\n\nSELECT\n    tr.beginIntervalInclusive,\n    tr.endIntervalExclusive,\n    COUNT(*) AS cnt \nFROM logins join @timeRanges as tr\n    on logins.date >= tr.beginIntervalInclusive\n        and logins.date < tr.endIntervalExclusive\nGROUP BY  tr.beginIntervalInclusive, tr.endIntervalExclusive\nORDER BY  tr.beginIntervalInclusive\n"]], ['SQL Server Non-Standard Date Based Histogram'], 3], [(831997, 0), [['If you are just using sql statements, then use TO_DATE'], ['If you are importing via SQL*Loader you can specify the date format in the control file']], [[" MWATSON@:> create table date_test ( x date );\n\nTable created.\n\nMWATSON@:> insert into date_test values ( to_date('03JUN2008','DDMONYYYY') );\n\n1 row created.\n\nMWATSON@:> select * from date_test;\n\nX\n-----------\n03-Jun-2008\n\n1 row selected.\n\nMWATSON@DEV2:>\n"]], ['Import Date Format mmddyyyy'], 2], [(831997, 1), [['If you are importing via SQL*Loader you can specify the date format in the control file'], ['-10000']], [[" > cat date_test.ldr \nLOAD DATA\nINFILE *\nAPPEND\nINTO TABLE date_test\nFIELDS TERMINATED BY '|'\n(x DATE 'DDMONYYYY')\nBEGINDATA\n01JAN1999\n> sqlldr mwatson control=date_test.ldr\n....\nCommit point reached - logical record count 1\n> sqlplus \n....\nMWATSON:> select * from date_test;\n\nX\n-----------\n03-Jun-2008\n01-Jan-1999\n\n2 rows selected.\n\nMWATSON@:> \n"]], ['Import Date Format mmddyyyy'], 2], [(833227, 0), [['First, getting the account record is done by  querying the  passwd  table :'], ['For hysterical raisins, the full name of the user is recorded in a field called the  “GECOS” field ; to complicate matters, this field often has its own structure with the  full name as just one of several optional sub-fields . So anything that wants to get the full name from the account record needs to parse both these levels.']], [[' $ user_name=foo\n$ getent passwd $user_name\nfoo:x:1023:1025:Fred Nurk,,,:/home/foo:/bin/bash\n']], ["What's the easiest way to get a user's full name on a Linux/POSIX system?"], 2], [(833227, 1), [['For hysterical raisins, the full name of the user is recorded in a field called the  “GECOS” field ; to complicate matters, this field often has its own structure with the  full name as just one of several optional sub-fields . So anything that wants to get the full name from the account record needs to parse both these levels.'], ["Your  programming language probably has a library function  to do this in fewer steps. In C, you'd use the ‘getpwnam’ function and then parse the GECOS field."]], [[' $ user_record=$(getent passwd $user_name)\n$ user_gecos_field=$(echo "$user_record" | cut -d \':\' -f 5)\n$ user_full_name=$(echo "$user_gecos_field" | cut -d \',\' -f 1)\n$ echo $user_full_name\nFred Nurk\n']], ["What's the easiest way to get a user's full name on a Linux/POSIX system?"], 2], [(833439, 0), [['On my machine for the 4200 iterations, the  VIEW  trick took 45 seconds and the  @@IDENTITY  approach took 127 seconds:'], ['What this shows is the the bottleneck now is the overhead associated with executing multiple statements. What if we could do it in just one statement? Well, guess what, using my contrived example, we can. First, create a Sequence table of unique integers, being a standard SQL trick (every database should have one, IMO):']], [[' Sub InitInerts()\n  On Error Resume Next\n  Kill Environ$("temp") & "\\DropMe.mdb"\n  On Error GoTo 0\n  Dim cat\n  Set cat = CreateObject("ADOX.Catalog")\n  With cat\n    .Create _\n        "Provider=Microsoft.Jet.OLEDB.4.0;" & _\n        "Data Source=" & _\n        Environ$("temp") & "\\DropMe.mdb"\n\n    With .ActiveConnection\n\n      Dim Sql As String\n\n      Sql = _\n      "CREATE TABLE TableA" & vbCr & "(" & vbCr & "   ID IDENTITY NOT" & _\n      " NULL UNIQUE, " & vbCr & "   a_col INTEGER NOT NULL" & vbCr & ")"\n      .Execute Sql\n\n      Sql = _\n      "CREATE TABLE TableB" & vbCr & "(" & vbCr & "   ID INTEGER NOT" & _\n      " NULL UNIQUE" & vbCr & "      REFERENCES TableA (ID)," & _\n      "  " & vbCr & "   b_col INTEGER NOT NULL" & vbCr & ")"\n      .Execute Sql\n\n      Sql = _\n      "CREATE VIEW TestAB" & vbCr & "(" & vbCr & "   a_ID, a_col, " & vbCr & " " & _\n      "  b_ID, b_col" & vbCr & ")" & vbCr & "AS " & vbCr & "SELECT A1.ID, A1.a_col," & _\n      " " & vbCr & "       B1.ID, B1.b_col" & vbCr & "  FROM TableA AS" & _\n      " A1" & vbCr & "       INNER JOIN TableB AS B1" & vbCr & "    " & _\n      "      ON A1.ID = B1.ID"\n      .Execute Sql\n\n    End With\n    Set .ActiveConnection = Nothing\n  End With\nEnd Sub\n\nSub TestInerts_VIEW()\n\n  Dim con\n  Set con = CreateObject("ADODB.Connection")\n  With con\n    .Open _\n        "Provider=Microsoft.Jet.OLEDB.4.0;" & _\n        "Data Source=" & _\n        Environ$("temp") & "\\DropMe.mdb"\n\n    Dim timer As CPerformanceTimer\n    Set timer = New CPerformanceTimer\n    timer.StartTimer\n\n    Dim counter As Long\n    For counter = 1 To 4200\n      .Execute "INSERT INTO TestAB (a_col, b_col) VALUES (" & _\n                   CStr(counter) & ", " & _\n                   CStr(counter) & ");"\n    Next\n\n    Debug.Print "VIEW = " & timer.GetTimeSeconds\n\n  End With\n\nEnd Sub\n\nSub TestInerts_IDENTITY()\n\n  Dim con\n  Set con = CreateObject("ADODB.Connection")\n  With con\n    .Open _\n        "Provider=Microsoft.Jet.OLEDB.4.0;" & _\n        "Data Source=" & _\n        Environ$("temp") & "\\DropMe.mdb"\n\n    Dim timer As CPerformanceTimer\n    Set timer = New CPerformanceTimer\n    timer.StartTimer\n\n    Dim counter As Long\n    For counter = 1 To 4200\n      .Execute "INSERT INTO TableA (a_col) VALUES (" & _\n          CStr(counter) & ");"\n\n      Dim identity As Long\n      identity = .Execute("SELECT @@IDENTITY;")(0)\n\n      .Execute "INSERT INTO TableB (ID, b_col) VALUES (" & _\n                   CStr(identity) & ", " & _\n                   CStr(counter) & ");"\n\n    Next\n\n    Debug.Print "@@IDENTITY = " & timer.GetTimeSeconds\n\n  End With\n\nEnd Sub\n']], ['SQL queries taking too long'], 3], [(833439, 1), [['What this shows is the the bottleneck now is the overhead associated with executing multiple statements. What if we could do it in just one statement? Well, guess what, using my contrived example, we can. First, create a Sequence table of unique integers, being a standard SQL trick (every database should have one, IMO):'], ['Then use the Sequence table to enumerate the values from 1 to 42000 and construct rows in a single INSERT INTO..SELECT statement:']], [[' Sub InitSequence()\n\n  Dim con\n  Set con = CreateObject("ADODB.Connection")\n  With con\n    .Open _\n        "Provider=Microsoft.Jet.OLEDB.4.0;" & _\n        "Data Source=" & _\n        Environ$("temp") & "\\DropMe.mdb"\n\n    Dim sql As String\n\n    sql = _\n        "CREATE TABLE [Sequence]" & vbCr & "(" & vbCr & "   seq INTEGER NOT NULL" & _\n        " UNIQUE" & vbCr & ");"\n    .Execute sql\n\n    sql = _\n        "INSERT INTO [Sequence] (seq) VALUES (-1);"\n    .Execute sql\n\n    sql = _\n        "INSERT INTO [Sequence] (seq) SELECT Units.nbr + Tens.nbr" & _\n        " + Hundreds.nbr + Thousands.nbr AS seq FROM ( SELECT" & _\n        " nbr FROM ( SELECT 0 AS nbr FROM [Sequence] UNION" & _\n        " ALL SELECT 1 FROM [Sequence] UNION ALL SELECT 2 FROM" & _\n        " [Sequence] UNION ALL SELECT 3 FROM [Sequence] UNION" & _\n        " ALL SELECT 4 FROM [Sequence] UNION ALL SELECT 5 FROM" & _\n        " [Sequence] UNION ALL SELECT 6 FROM [Sequence] UNION" & _\n        " ALL SELECT 7 FROM [Sequence] UNION ALL SELECT 8 FROM" & _\n        " [Sequence] UNION ALL SELECT 9 FROM [Sequence] ) AS" & _\n        " Digits ) AS Units, ( SELECT nbr * 10 AS nbr FROM" & _\n        " ( SELECT 0 AS nbr FROM [Sequence] UNION ALL SELECT" & _\n        " 1 FROM [Sequence] UNION ALL SELECT 2 FROM [Sequence]" & _\n        " UNION ALL SELECT 3 FROM [Sequence] UNION ALL SELECT" & _\n        " 4 FROM [Sequence] UNION ALL SELECT 5 FROM [Sequence]" & _\n        " UNION ALL SELECT 6 FROM [Sequence] UNION ALL SELECT" & _\n        " 7 FROM [Sequence] UNION ALL SELECT 8 FROM [Sequence]" & _\n        " UNION ALL SELECT 9 FROM [Sequence] ) AS Digits )" & _\n        " AS Tens, ( SELECT nbr * 100 AS nbr FROM ( SELECT" & _\n        " 0 AS nbr FROM [Sequence] UNION ALL SELECT 1 FROM" & _\n        " [Sequence] UNION ALL SELECT 2 FROM [Sequence] UNION"\n    sql = sql & _\n        " ALL SELECT 3 FROM [Sequence] UNION ALL SELECT 4 FROM" & _\n        " [Sequence] UNION ALL SELECT 5 FROM [Sequence] UNION" & _\n        " ALL SELECT 6 FROM [Sequence] UNION ALL SELECT 7 FROM" & _\n        " [Sequence] UNION ALL SELECT 8 FROM [Sequence] UNION" & _\n        " ALL SELECT 9 FROM [Sequence] ) AS Digits ) AS Hundreds," & _\n        " ( SELECT nbr * 1000 AS nbr FROM ( SELECT 0 AS nbr" & _\n        " FROM [Sequence] UNION ALL SELECT 1 FROM [Sequence]" & _\n        " UNION ALL SELECT 2 FROM [Sequence] UNION ALL SELECT" & _\n        " 3 FROM [Sequence] UNION ALL SELECT 4 FROM [Sequence]" & _\n        " UNION ALL SELECT 5 FROM [Sequence] UNION ALL SELECT" & _\n        " 6 FROM [Sequence] UNION ALL SELECT 7 FROM [Sequence]" & _\n        " UNION ALL SELECT 8 FROM [Sequence] UNION ALL SELECT" & _\n        " 9 FROM [Sequence] ) AS Digits ) AS Thousands;"\n    .Execute sql\n\n  End With\n\nEnd Sub\n']], ['SQL queries taking too long'], 3], [(833439, 2), [['Then use the Sequence table to enumerate the values from 1 to 42000 and construct rows in a single INSERT INTO..SELECT statement:'], ['That executes on my machine in 0.2 of a second!']], [[' Sub TestInerts_Sequence()\n\n  Dim con\n  Set con = CreateObject("ADODB.Connection")\n  With con\n    .Open _\n        "Provider=Microsoft.Jet.OLEDB.4.0;" & _\n        "Data Source=" & _\n        Environ$("temp") & "\\DropMe.mdb"\n\n    Dim timer As CPerformanceTimer\n    Set timer = New CPerformanceTimer\n    timer.StartTimer\n\n    .Execute "INSERT INTO TestAB (a_col, b_col) " & _\n             "SELECT seq, seq " & _\n             "FROM Sequence " & _\n             "WHERE seq BETWEEN 1 AND 4200;"\n\n    Debug.Print "Sequence = " & timer.GetTimeSeconds\n\n\n\n  End With\n\nEnd Sub\n']], ['SQL queries taking too long'], 3], [(834582, 0), [['Have you tried a join? Like:'], ["You can use GROUP BY if you're only interested in an aggregate of the transactions:"]], [[' select <yourcalculation>\nfrom holdings h\nleft join transactions t on h.holdingid = t.holdingid\n']], ['WHILE loop in SQL'], 2], [(834582, 1), [["You can use GROUP BY if you're only interested in an aggregate of the transactions:"], ['-10000']], [[' select h.name, sum(t.trvalue)\nfrom holdings h\nleft join transactions t on h.holdingid = t.holdingid\ngroup by h.holdingid\n']], ['WHILE loop in SQL'], 2], [(835387, 0), [['-10000'], ['In  Oracle 10g  also:']], [[' ALTER TABLE mytable RENAME TO othertable\n']], ['Rename Oracle Table or View'], 2], [(835387, 1), [['In  Oracle 10g  also:'], ['-10000']], [[' RENAME mytable TO othertable\n']], ['Rename Oracle Table or View'], 2], [(836345, 0), [['try this approach:'], ['here is output of the SELECTs']], [[" declare @x table (tableID int not null primary key identity (1,1), datavalue varchar(10) null)\nINSERT INTO @x values ('one')\nINSERT INTO @x values ('aaaa')\nINSERT INTO @x values ('cccc')\n\ndeclare @y table (tableID int not null primary key               , datavalue varchar(10) null)\n\ndeclare @count int ---------------FROM HERE, see comment\nset @count=5;\nWITH hier(cnt) AS\n        (\n        SELECT  1 AS cnt\n        UNION ALL\n        SELECT  cnt + 1\n        FROM    hier\n        WHERE    cnt < @count\n        ) -----------------------To HERE, see comment\nINSERT INTO @x\n    (datavalue)\n    OUTPUT INSERTED.tableID, INSERTED.datavalue\n    INTO @y\nSELECT\n    'value='+CONVERT(varchar(5),h.cnt)\n    FROM hier  h\n    ORDER BY cnt DESC\n\n\nselect '@x',* from @x  --table you just inserted into\nselect '@y',* from @y  --captured data, including identity\n"]], ['Is it possible INSERT SELECT a collection of aggregate values, then Update another table based on the @@IDENTITY values of the inserts you just made?'], 2], [(836345, 1), [['here is output of the SELECTs'], ['The "FROM HERE" - "TO HERE" is just a fancy way to create a table to join to, you can use your own table to join to there...']], [['      tableID     datavalue\n---- ----------- ----------\n@x   1           one\n@x   2           aaaa\n@x   3           cccc\n@x   4           value=5\n@x   5           value=4\n@x   6           value=3\n@x   7           value=2\n@x   8           value=1\n\n(8 row(s) affected)\n\n     tableID     datavalue\n---- ----------- ----------\n@y   4           value=5\n@y   5           value=4\n@y   6           value=3\n@y   7           value=2\n@y   8           value=1\n']], ['Is it possible INSERT SELECT a collection of aggregate values, then Update another table based on the @@IDENTITY values of the inserts you just made?'], 2], [(836491, 0), [['While this is probably better suited to a join, you can use this:'], ['This will translate into SQL something like..']], [[' List<Personnel> query = \n    (from p in this.Database.Personnels \n    where OrgIds.Contains(p.OrgID) select p).ToList();\n']], ['Linq query with Array in where clause?'], 2], [(836491, 1), [['This will translate into SQL something like..'], ['-10000']], [[' where OrgID in (1,2,...,n)\n']], ['Linq query with Array in where clause?'], 2], [(836735, 0), [['-10000'], ['You can easily extend this query for more complex conditions: check whether an event falls on  ANY Monday OR Friday 13th , for instance:']], [[" SELECT  *\nFROM    event\nWHERE   EXISTS\n        (\n        SELECT  1\n        FROM    dual\n        WHERE   MOD(start_date - TO_DATE(1, 'J') + level - 1, 7) = 6\n        CONNECT BY\n                level <= end_date - start_date + 1\n        )\n"]], ['Finding the days of the week within a date range using oracle SQL'], 2], [(836735, 1), [['You can easily extend this query for more complex conditions: check whether an event falls on  ANY Monday OR Friday 13th , for instance:'], ["Note that I use  MOD(start_date - TO_DATE(1, 'J') + level - 1, 7)  instead of  TO_CHAR('D') . This is because  TO_CHAR('D')  is affected by  NLS_TERRITORY  and should not be used for checking for a certain day of week."]], [[" SELECT  *\nFROM    event\nWHERE   EXISTS  (\n        SELECT  1\n        FROM    dual\n        WHERE   MOD(start_date - TO_DATE(1, 'J') + level - 1, 7) = 6\n                OR (MOD(start_date - TO_DATE(1, 'J') + level - 1, 7) = 3 AND TO_CHAR(start_date + level - 1, 'DD') = '13')\n        CONNECT BY\n                level <= end_date - start_date + 1\n        )\n"]], ['Finding the days of the week within a date range using oracle SQL'], 2], [(837257, 0), [["First, create some tables like the following (I'm using SQL Server best practices, but name them however you see fit):"], ["Once you've done this, go ahead and create a view that looks something like the following (no, I haven't verified this SQL, but it should be a good start):"]], [[' UserAccount          UserAchievement\n -Guid (PK)           -Guid (PK)\n -FirstName           -UserAccountGuid (FK)\n -LastName            -Name\n -EmailAddress        -Score\n']], ["What's the best way to store/calculate user scores?"], 2], [(837257, 1), [["Once you've done this, go ahead and create a view that looks something like the following (no, I haven't verified this SQL, but it should be a good start):"], ["I know you've mentioned some concern about performance and a lot of queries, but if you build out a view like this, you won't ever need more than one. I recommend not making this a materialized view; instead, just index your tables so that the lookups that you need (essentially, UserAccountGuid) will enable fast summation across the table."]], [[' SELECT [UserAccount].[FirstName]      AS FirstName,\n       [UserAccount].[LastName]       AS LastName,\n       SUM([UserAchievement].[Score]) AS TotalPoints\nFROM [UserAccount]\nINNER JOIN [UserAchievement]\n     ON [UserAccount].[Guid] = [UserAchievement].[UserAccountGuid]\nGROUP BY [UserAccount].[FirstName],\n         [UserAccount].[LastName]\nORDER BY [UserAccount].[LastName] ASC\n']], ["What's the best way to store/calculate user scores?"], 2], [(838988, 0), [['@DateNow is a DateTime so will have the Date Compoent as well'], ['will give you just the time component for putting in yoru Nvarchar column']], [[' select right(left(convert(nvarchar, @DateNow, 121), 16), 5)\n']], ['How can i create this time-table with stable time format?'], 3], [(838988, 1), [['will give you just the time component for putting in yoru Nvarchar column'], ["And for shits'n'giggles, here's how to do it without relying on a DateTime Object."]], [[' while(@i<1440)\nbegin\n    set @DateNow=DATEADD(minute, 1, @DateNow)\n    insert into #temp ([count], [Time]) values(0, right(left(convert(nvarchar, @DateNow, 121), 16), 5))\n    set @i=@i+1\nend\nSELECT [count], [Time] from  #temp\ndrop table #temp\n']], ['How can i create this time-table with stable time format?'], 3], [(838988, 2), [["And for shits'n'giggles, here's how to do it without relying on a DateTime Object."], ['-10000']], [[" CREATE TABLE #temp (\n   [count] int,\n   [Time] nvarchar(50) \n)\n\n\nDECLARE @hour int, @min int, @i int\nSELECT @hour = 0, @min = 0, @i = 1\n\nWHILE (@hour < 24)\nBEGIN\n    WHILE (@min < 60)\n    BEGIN\n        INSERT INTO #temp ([count], [time]) \n        VALUES (@i, REPLACE(STR(@hour, 2, 0), ' ', 0) + ':' + REPLACE(STR(@min, 2, 0), ' ', 0))\n        set @min = @min + 1\n        set @i=@i+1\n    END     \n    set @min = 0\n    set @hour = @hour + 1\nEND\n\nSELECT * FROM #Temp\n"]], ['How can i create this time-table with stable time format?'], 3], [(839312, 0), [['-10000'], ['Note that to achive best results in terms of performance, you better create computed columns instead of the view, and create an additional  UNIQUE  index in these columns:']], [[" CREATE TABLE mytable (\n      first TINYINT NOT NULL CHECK(first BETWEEN 0 AND 99),\n      second INT NOT NULL CHECK (second BETWEEN 0 AND 999),\n      third INT NOT NULL,\n      CONSTRAINT pk_mytable_123 PRIMARY KEY (first, second, third)\n      )\nGO\nCREATE VIEW v_mytable AS\nSELECT  'a' + RIGHT('00' + CAST(first AS VARCHAR), 2) AS first,\n        RIGHT('0000' + CAST(second AS VARCHAR), 4) AS second,\n        third\nFROM    mytable\nGO\n\nINSERT\nINTO    mytable\nVALUES  (1, 1, 2008)\nGO\n\nSELECT  *\nFROM    v_mytable\nGO\n\nfirst  second  third\n----   ----    ----\na01    0001    2008\n"]], ['Build and display a complex composite primary key in a column'], 2], [(839312, 1), [['Note that to achive best results in terms of performance, you better create computed columns instead of the view, and create an additional  UNIQUE  index in these columns:'], ['-10000']], [[" CREATE TABLE mytable (\n      _first TINYINT NOT NULL CHECK(_first BETWEEN 0 AND 99),\n      _second INT NOT NULL CHECK (_second BETWEEN 0 AND 999),\n      third INT NOT NULL,\n      first AS 'a' + RIGHT('00' + CAST(_first AS VARCHAR), 2),\n      second AS RIGHT('0000' + CAST(_second AS VARCHAR), 4)\n      CONSTRAINT pk_mytable_123 PRIMARY KEY (_first, _second, third)\n      )\n\nCREATE UNIQUE INDEX ux_mytable_123 ON mytable (first, second, third)\n"]], ['Build and display a complex composite primary key in a column'], 2], [(839472, 0), [['You might be able to do that with a UNION:'], ['If you wish to filter out rows like (A4,NULL,NULL) because there is already a row (A4,NULL,C4), try this query:']], [[' SELECT A.Name AS A, B.Name AS B, NULL AS C \nFROM A\nleft JOIN lA_B ON (A.pID=lA_B.pInstanceA) \nleft JOIN B ON (lA_B.pInstanceB=B.pID) \nUNION\nSELECT A.Name AS A, NULL AS B, C.Name AS C \nFROM A\nleft JOIN lA_C ON (A.pID=lA_C.pInstanceA) \nleft JOIN C ON (lA_C.pInstanceB=C.pID)\n']], ['SQL cartesian join problem'], 2], [(839472, 1), [['If you wish to filter out rows like (A4,NULL,NULL) because there is already a row (A4,NULL,C4), try this query:'], ['For the join on B, this says to include rows that have a match in B, or for which there is no match in C.  The join on C includes only rows which match in C.  Rows that do not match either would get included from the join on B.']], [[' SELECT A.Name AS A, B.Name AS B, NULL AS C \nFROM A\nLEFT JOIN lA_B ON (A.pID=lA_B.pInstanceA) \nLEFT JOIN B ON (lA_B.pInstanceB=B.pID) \nWHERE b.name is not null \n    or not exists(select * from lA_C where A.pID=lA_C.pInstanceA) \nUNION\nSELECT A.Name AS A, NULL AS B, C.Name AS C \nFROM A\nLEFT JOIN lA_C ON (A.pID=lA_C.pInstanceA) \nLEFT JOIN C ON (lA_C.pInstanceB=C.pID)\nWHERE c.name is not null \nORDER BY A,B,C\n']], ['SQL cartesian join problem'], 2], [(840118, 0), [["Oracle is peculiar in that the empty string ( '' ) and  NULL  are the same thing. It is as if you are saying:"], ['Such a statement will  never  be true. Try:']], [[' trim(t1.c1) != NULL\n']], ['Oracle can I use scalar functions in WHERE Clause? or a NULL issue'], 2], [(840118, 1), [['Such a statement will  never  be true. Try:'], ['-10000']], [[' trim(t1.c1) IS NOT NULL\n']], ['Oracle can I use scalar functions in WHERE Clause? or a NULL issue'], 2], [(840254, 0), [['In  Oracle :'], ['In  MS SQL :']], [[' SELECT  *\nFROM    dual\nCONNECT BY\n        level < n\n']], ['SQL - how to create multi row results with no source table'], 3], [(840254, 1), [['In  MS SQL :'], ['In  PostgreSQL :']], [[' WITH hier(row) AS\n        (\n        SELECT  1\n        UNION ALL\n        SELECT  row + 1\n        FROM    hier\n        WHERE   row < n\n        )\nSELECT  *\nFROM    hier\nOPTION (MAXRECURSION 0)\n']], ['SQL - how to create multi row results with no source table'], 3], [(840254, 2), [['In  PostgreSQL :'], ['Note that  MS SQL , unlike  Oracle , cannot swap recursion stack into temporary tablespace, so you may experience troubles when generating large datasets.']], [[' SELECT  *\nFROM    generate_series (1, n)\n']], ['SQL - how to create multi row results with no source table'], 3], [(843290, 0), [['Without joins correct would be next:'], ['Otherwise you could use inner join, makes query more readable:']], [[" SELECT tags.id, tags.tag_name, COUNT(*) AS num_tags\nFROM tags, examples_tags, examples\nWHERE tags.id = examples_tags.tag_id \n    and examples_tags.example_id=examples.id\n    and examples.category = 'english examples'\nGROUP BY tags.id, tags.tag_name\n"]], ['Query on three tables with 1 condition'], 2], [(843290, 1), [['Otherwise you could use inner join, makes query more readable:'], ['-10000']], [[" SELECT tags.id, tags.tag_name, COUNT(*) AS num_tags\nFROM tags \n    inner join examples_tags on examples_tags.tag_id=tags.id\n    inner join examples on examples_tags.example_id=examples.id\nWHERE examples.category = 'english examples'\nGROUP BY tags.id, tags.tag_name\n"]], ['Query on three tables with 1 condition'], 2], [(844896, 0), [['E.g.'], ['You can alter the collation of a column permanently with ']], [[' select table1column1 collate database default  + table2column2 collate database default from ...\n']], ['SQL Server 2005 collation issue'], 2], [(844896, 1), [['You can alter the collation of a column permanently with '], ['-10000']], [[' ALTER TABLE ... ALTER COLUMN Table1Column1\n            varchar(50) COLLATE Latin1_General_CI_AS NOT NULL\nGO\n']], ['SQL Server 2005 collation issue'], 2], [(845255, 0), [['You can query like:'], ["Per SquareCog's comment, you can greatly increase performance with an early WHERE clause.  The clause would limit the grouping to the relevant keywords only. In the above query, add the WHERE just before the HAVING:"]], [[" select a.id\nfrom Articles a \ninner join ArticleKeywords ak on ak.articleid = a.id\ninner join Keywords k on k.id = ak.keywordid\ngroup by a.id\nhaving \n    sum(case when k.name in ('a1') then 1 else 0 end) = 1\n    or sum(case when k.name in ('b1','b2') then 1 else 0 end) = 2 \n    or sum(case when k.name in ('c1','c2,'c3') then 1 else 0 end) > 0\n"]], ["'Better' Method for matching ID sets in MySQL statement"], 5], [(845255, 1), [["Per SquareCog's comment, you can greatly increase performance with an early WHERE clause.  The clause would limit the grouping to the relevant keywords only. In the above query, add the WHERE just before the HAVING:"], ['You can retrieve the other details of the article(s) like:']], [[" ...\ninner join Keywords k on k.id = ak.keywordid\nwhere k.name in ('a1','b1','b2','c1','c2','c3')\ngroup by a.id\n...\n"]], ["'Better' Method for matching ID sets in MySQL statement"], 5], [(845255, 2), [['You can retrieve the other details of the article(s) like:'], ['Say you have a table that contains groups to search for, defined like:']], [[' select *\nfrom Articles\nwhere id in (\n    ...query from above here...\n)\n']], ["'Better' Method for matching ID sets in MySQL statement"], 5], [(845255, 3), [['Say you have a table that contains groups to search for, defined like:'], ['Meaning the article has to match ((keyword 1 and keyword2) or keyword3).  Then you can query like this:']], [[' groupid - keywordid\n1 - 1\n1 - 2\n2 - 3\n']], ["'Better' Method for matching ID sets in MySQL statement"], 5], [(845255, 4), [['Meaning the article has to match ((keyword 1 and keyword2) or keyword3).  Then you can query like this:'], ['-10000']], [[' select ak.articleid\nfrom ArticleKeywords ak\ninner join Search s on ak.keywordid = s.keywordid\ngroup by s.searchgroup, ak.articleid\nhaving count(*) = (\n    select count(*) from #Search s2 where s2.Searchgroup = s.SearchGroup\n)\n']], ["'Better' Method for matching ID sets in MySQL statement"], 5], [(845903, 0), [['Here is a query that should do what you want:'], ['And indeed, Django uses a join twice on the Location table when running this query:']], [[" Job.objects.filter(location__big_city__city='San-Fran', location__big_city__state='Calif', location__big_city__country='USA')\n"]], ['Django select_related() for multi-join query using model & filters'], 2], [(845903, 1), [['And indeed, Django uses a join twice on the Location table when running this query:'], ['-10000']], [[' SELECT "example_job"."id", "example_job"."title", "example_job"."company", "example_job"."location_id" FROM "example_job" INNER JOIN "example_location" ON ("example_job"."location_id" = "example_location"."id") INNER JOIN "example_location" T3 ON ("example_location"."big_city_id" = T3."id") WHERE (T3."country" = USA  AND T3."city" = San-Fran  AND T3."state" = Calif\n']], ['Django select_related() for multi-join query using model & filters'], 2], [(847154, 0), [['Did you try to enforce the use of the index?  Like:'], ['Like sgehrig comments, check using EXPLAIN if the index is used?  And share the result?']], [[' SELECT sourceid FROM page USE INDEX (sourceid_index)\n']], ['MySQL MyISAM table performance problem revisited'], 3], [(847154, 1), [['Like sgehrig comments, check using EXPLAIN if the index is used?  And share the result?'], ['It could also help to share the definiton of the indexes:']], [[' EXPLAIN select sourceid from page\n']], ['MySQL MyISAM table performance problem revisited'], 3], [(847154, 2), [['It could also help to share the definiton of the indexes:'], ['-10000']], [[' SHOW INDEX FROM page\n']], ['MySQL MyISAM table performance problem revisited'], 3], [(847750, 0), [["Here's the query without CONVERT or CASE:"], ["To make sure Sql Server doens't evaluate getdate() for every row, you could cache it, although I'm pretty sure Sql Server is smart enough by default:"]], [[" SELECT * \nFROM HastaKurumlari\nWHERE '21-05-2009' between startDate and IsNull(endDate,getdate())\n"]], ['How to make faster this statement : "paramDate Between startDate and NULL"?'], 3], [(847750, 1), [["To make sure Sql Server doens't evaluate getdate() for every row, you could cache it, although I'm pretty sure Sql Server is smart enough by default:"], ['Posting the query plan could help explain why the query is slow:']], [[" declare @now datetime\nset @now = getdate()\n\nSELECT * \nFROM HastaKurumlari\nWHERE '21-05-2009' between startDate and IsNull(endDate,@now)\n"]], ['How to make faster this statement : "paramDate Between startDate and NULL"?'], 3], [(847750, 2), [['Posting the query plan could help explain why the query is slow:'], ['-10000']], [[" SET SHOWPLAN_TEXT ON\ngo\nSELECT * \nFROM HastaKurumlari\nWHERE CONVERT(SMALLDATETIME,'21-05-2009',103) \nBETWEEN startDate \n    AND (CASE WHEN endDate IS NULL THEN GETDATE() ELSE endDate END)\n"]], ['How to make faster this statement : "paramDate Between startDate and NULL"?'], 3], [(848872, 0), [['-10000'], ['In response to the "pure trash" comment concerning large tables: you could do it like this to improve performance.']], [[' select top 10 percent * from [yourtable] order by newid()\n']], ['Select n random rows from SQL Server table'], 2], [(848872, 1), [['In response to the "pure trash" comment concerning large tables: you could do it like this to improve performance.'], ['The cost of this will be the key scan of values plus the join cost, which on a large table with a small percentage selection should be reasonable.']], [[' select  * from [yourtable] where [yourPk] in \n(select top 10 percent [yourPk] from [yourtable] order by newid())\n']], ['Select n random rows from SQL Server table'], 2], [(851236, 0), [["Let's assume you have a table named  things  that looks something like this:"], ["And let's say you want to execute to find all the records that have a  happened_at  during the month 2009/01 (January 2009). The SQL query would be:"]], [[' id happend_at\n-- ----------------\n1  2009-01-01 12:08\n2  2009-02-01 12:00\n3  2009-01-12 09:40\n4  2009-01-29 17:55\n']], ['WHERE Clause to find all records in a specific month'], 3], [(851236, 1), [["And let's say you want to execute to find all the records that have a  happened_at  during the month 2009/01 (January 2009). The SQL query would be:"], ['Which would return:']], [[' SELECT id FROM things \n   WHERE MONTH(happened_at) = 1 AND YEAR(happened_at) = 2009\n']], ['WHERE Clause to find all records in a specific month'], 3], [(851236, 2), [['Which would return:'], ['-10000']], [[' id\n---\n1\n3\n4\n']], ['WHERE Clause to find all records in a specific month'], 3], [(852091, 0), [['Create a table containing your bands:'], ['Then populate it with your data:']], [[' CREATE TABLE agebands\n(\n    id INT NOT NULL PRIMARY KEY,\n    lower_bound INT NOT NULL,\n    upper_bound INT NOT NULL\n)\nCREATE INDEX IDX_agebands_bounds ON (lower_bound, upper_bound)\n']], ['SQL Creating a stored proc for returning age bands'], 3], [(852091, 1), [['Then populate it with your data:'], ['Then join with it:']], [[' INSERT INTO agebands VALUES (1, 0, 12)\nINSERT INTO agebands VALUES (2, 13, 17)\nINSERT INTO agebands VALUES (3, 18, 24)\nINSERT INTO agebands VALUES (4, 25, 199)\n']], ['SQL Creating a stored proc for returning age bands'], 3], [(852091, 2), [['Then join with it:'], ["This allows for flexibility in adjusting the bands. Of course, the other answer here using UNION is usable too, which is more appropriate if you can/won't add another table to your database."]], [[' SELECT\n    lower_bound, upper_bound,\n    COUNT(*) AS number_of_people\nFROM\n    persons\n    INNER JOIN agebands\n        ON person_age BETWEEN lower_bound AND upper_bound\nGROUP BY\n    lower_bound, upper_bound\nORDER BY\n    lower_bound\n']], ['SQL Creating a stored proc for returning age bands'], 3], [(852225, 0), [['First, get a list of parents:'], ['Then get a properly sorted list of children:']], [[' SELECT *\nFROM Persons\nWHERE id IN (SELECT parent FROM Persons)\nORDER BY (age, id)\n']], ['persons where the children are grouped for their parent'], 2], [(852225, 1), [['Then get a properly sorted list of children:'], ["The two lists can then easily be merged on the  id / parent  since they are both sorted first by parent's  age ."]], [[' SELECT Child.*\nFROM Persons AS Child\n     JOIN Persons AS Parent ON (Parent.id = Child.parent)\nORDER BY (Parent.age, Parent.id, Child.age, Child.id)\n']], ['persons where the children are grouped for their parent'], 2], [(852425, 0), [['Could you please run the following queries and post their output:'], ['Meanwhile make sure you have the following indexes:']], [[' SELECT  COUNT(*), COUNT(DISTINCT fieldname)\nFROM    foo\n\nSELECT  COUNT(*), COUNT(DISTINCT cId), COUNT(DISTINCT fId)\nFROM    bar\n']], ['Is this execution plan a motivation for re thinking my primary keys'], 3], [(852425, 1), [['Meanwhile make sure you have the following indexes:'], ['and rewrite your query:']], [[' foo (FIELDNAME)\nbar (cId, fId)\n']], ['Is this execution plan a motivation for re thinking my primary keys'], 3], [(852425, 2), [['and rewrite your query:'], ['This query should use an index on  f.FIELDNAME  to build the  DISTINCT  list and the index on  bar  to filter out the non-existent values.']], [[' SELECT  DISTINCT(fieldname)\nFROM    foo f\nWHERE   EXISTS (\n        SELECT  1\n        FROM    bar b\n        WHERE   b.fId = f.id\n                AND b.cId = @id\n        )\n']], ['Is this execution plan a motivation for re thinking my primary keys'], 3], [(852828, 0), [['Here is an example of using an array type and joining that to your query without using a temporary table (you could do something similar with an IN list but its harder to bind):'], ['Using the following block, we can test the code works:']], [[' create or replace type my_test_type as object (id integer);\n\ncreate or replace type my_test_type_a as table of my_test_type;\n\ncreate or replace procedure my_test_proc(i_ids in my_test_type_a)\nis\nbegin\n\n for row in (\n   select a.l from\n   (\n     select level l from dual connect by level <= 10\n   ) a, table(i_ids) b\n   where a.l = b.id \n ) loop\n   dbms_output.put_line(row.l);\n end loop;\nend;\n/\n']], ['Parse CSV (comma separated values) in Oracle'], 2], [(852828, 1), [['Using the following block, we can test the code works:'], ['So long as dbms_output is on, this should print 1 - 5, as the test data table is joined with your array!']], [[' declare\n  v_id my_test_type;\n  v_ids my_test_type_a;\nbegin\n  v_id := my_test_type(1);\n  v_ids := my_test_type_a();\n  for i in 1.. 5 loop\n    v_id := my_test_type(i);\n    v_ids.extend;\n    v_ids(i) := v_id; \n  end loop;\n  my_test_proc(v_ids);\nend;\n/ \n']], ['Parse CSV (comma separated values) in Oracle'], 2], [(852994, 0), [['Given the tree-like table structure:'], [', this query will return  id ,  parent  and depth level, ordered as a tree:']], [[' id parent name\n1  0      Electronics\n2  1      TV\n3  1      Hi-Fi\n4  2      LCD\n5  2      Plasma\n6  3      Amplifiers\n7  3      Speakers\n']], ['How to implement high performance tree view in SQL Server 2005'], 3], [(852994, 1), [[', this query will return  id ,  parent  and depth level, ordered as a tree:'], ['To update a certain branch, issue:']], [[' WITH    v (id, parent, level) AS\n        (\n        SELECT  id, parent, 1\n        FROM    table\n        WHERE   parent = 0\n        UNION ALL\n        SELECT  id, parent, v.level + 1\n        FROM    v\n        JOIN    table t\n        ON      t.parent = v.id\n        )\nSELECT  *\nFROM    v\n\nid parent name\n1  0      Electronics\n2  1        TV\n4  2          LCD\n5  2          Plasma\n3  1        Hi-Fi\n6  3          Amplifiers\n7  3          Speakers\n']], ['How to implement high performance tree view in SQL Server 2005'], 3], [(852994, 2), [['To update a certain branch, issue:'], ['where  @parent  is the root of the branch.']], [[' WITH    v (id, parent, level) AS\n        (\n        SELECT  id, parent, 1\n        FROM    table\n        WHERE   parent = 0\n        UNION ALL\n        SELECT  id, parent, v.level + 1\n        FROM    v\n        JOIN    table t\n        ON      t.parent = v.id\n        )\nUPDATE  table t\nSET     column = newvalue\nWHERE   t.id IN\n        (\n        SELECT  id\n        FROM    v\n        )\n']], ['How to implement high performance tree view in SQL Server 2005'], 3], [(858078, 0), [['Did you try what you have written?  It looks like it should work to me:'], ['This will give you a partial day difference, eg:']], [[' (o2.to - o2.from)\n']], ['How to perform arithmetic operation on Oracle timestamps (in SQL)?'], 3], [(858078, 1), [['This will give you a partial day difference, eg:'], ['Then if you add that result to the original date, you will get the date and time at the midpoint:']], [['   1  select (trunc(sysdate) - trunc(sysdate+1))/2 from dual\n  2*\nSQL> /\n\n(TRUNC(SYSDATE)-TRUNC(SYSDATE+1))/2\n-----------------------------------\n                                -.5\n\nSQL>\n']], ['How to perform arithmetic operation on Oracle timestamps (in SQL)?'], 3], [(858078, 2), [['Then if you add that result to the original date, you will get the date and time at the midpoint:'], ['-10000']], [[" SQL> select to_char(a.d, 'YYYY-MON-DD HH24:MI')\n  2  from\n  3  (  select trunc(sysdate) + (trunc(sysdate+1) - trunc(sysdate))/2 d from dual\n  4  ) a;\n\nTO_CHAR(A.D,'YYYY\n-----------------\n2009-MAY-13 12:00\n"]], ['How to perform arithmetic operation on Oracle timestamps (in SQL)?'], 3], [(858528, 0), [['Permanent:'], ['Temporary:']], [[' UPDATE\n  MyTable\nSET\n  MyColumn = UPPER(MyColumn)\n']], ['SQL query to make all data in a column UPPER CASE?'], 2], [(858528, 1), [['Temporary:'], ['-10000']], [[' SELECT\n  UPPER(MyColumn) AS MyColumn\nFROM\n  MyTable\n']], ['SQL query to make all data in a column UPPER CASE?'], 2], [(860024, 0), [['You can use the ABS function to get the positive value of a number. For example:'], ['So you can replace your CASE statement with:']], [[' ABS(-123.445) /* this equals 123.445 */\n']], ["Remove '-' from column SUM"], 2], [(860024, 1), [['So you can replace your CASE statement with:'], ['-10000']], [[' CASE WHEN SUM(ExtPrice) < 0 AND RecordNum BETWEEN 4000 AND 5999         \n         THEN ABS(SUM(ExtPrice) *.01)     \n     ELSE SUM(ExtPrice) *.01 \nEND AS Totals\n']], ["Remove '-' from column SUM"], 2], [(860966, 0), [['Oracle (and ANSI-SQL) allow you to do things like: '], ['Full working sample: ']], [['  SELECT somedate, somevalue,\n  SUM(somevalue) OVER(ORDER BY somedate \n     ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) \n          AS RunningTotal\n  FROM Table\n']], ['Calculate a Running Total in SQL Server'], 7], [(860966, 1), [['Full working sample: '], ['Test data: ']], [[' drop table #t \ncreate table #t ( ord int primary key, total int, running_total int)\n\ninsert #t(ord,total)  values (2,20)\n-- notice the malicious re-ordering \ninsert #t(ord,total) values (1,10)\ninsert #t(ord,total)  values (3,10)\ninsert #t(ord,total)  values (4,1)\n\ndeclare @total int \nset @total = 0\nupdate #t set running_total = @total, @total = @total + total \n\nselect * from #t\norder by ord \n\nord         total       running_total\n----------- ----------- -------------\n1           10          10\n2           20          30\n3           10          40\n4           1           41\n']], ['Calculate a Running Total in SQL Server'], 7], [(860966, 2), [['Test data: '], ['Test 1:']], [[' create table #t ( ord int primary key, total int, running_total int)\n\nset nocount on \ndeclare @i int\nset @i = 0 \nbegin tran\nwhile @i < 10000\nbegin\n   insert #t (ord, total) values (@i,  rand() * 100) \n    set @i = @i +1\nend\ncommit\n']], ['Calculate a Running Total in SQL Server'], 7], [(860966, 3), [['Test 1:'], ['Test 2: ']], [[' SELECT ord,total, \n    (SELECT SUM(total) \n        FROM #t b \n        WHERE b.ord <= a.ord) AS b \nFROM #t a\n\n-- CPU 11731, Reads 154934, Duration 11135 \n']], ['Calculate a Running Total in SQL Server'], 7], [(860966, 4), [['Test 2: '], ['Test 3:']], [[' SELECT a.ord, a.total, SUM(b.total) AS RunningTotal \nFROM #t a CROSS JOIN #t b \nWHERE (b.ord <= a.ord) \nGROUP BY a.ord,a.total \nORDER BY a.ord\n\n-- CPU 16053, Reads 154935, Duration 4647\n']], ['Calculate a Running Total in SQL Server'], 7], [(860966, 5), [['Test 3:'], ['Test 4: ']], [[' DECLARE @TotalTable table(ord int primary key, total int, running_total int)\n\nDECLARE forward_cursor CURSOR FAST_FORWARD \nFOR \nSELECT ord, total\nFROM #t \nORDER BY ord\n\n\nOPEN forward_cursor \n\nDECLARE @running_total int, \n    @ord int, \n    @total int\nSET @running_total = 0\n\nFETCH NEXT FROM forward_cursor INTO @ord, @total \nWHILE (@@FETCH_STATUS = 0)\nBEGIN\n     SET @running_total = @running_total + @total\n     INSERT @TotalTable VALUES(@ord, @total, @running_total)\n     FETCH NEXT FROM forward_cursor INTO @ord, @total \nEND\n\nCLOSE forward_cursor\nDEALLOCATE forward_cursor\n\nSELECT * FROM @TotalTable\n\n-- CPU 359, Reads 30392, Duration 496\n']], ['Calculate a Running Total in SQL Server'], 7], [(860966, 6), [['Test 4: '], ['-10000']], [[' declare @total int \nset @total = 0\nupdate #t set running_total = @total, @total = @total + total \n\nselect * from #t\n\n-- CPU 0, Reads 58, Duration 139\n']], ['Calculate a Running Total in SQL Server'], 7], [(862594, 0), [["Here's a possible solution that looks at winning streaks per userid."], ['-10000']], [[' select head.userid, head.id, sum(profit), count(*)\nfrom #bingo b\ninner join (\n    select cur.userid, cur.id\n    from #bingo cur\n    left join #bingo prev \n        on cur.userid = prev.userid\n        and prev.id < cur.id\n        and not exists(\n            select * \n            from #bingo inbetween \n            where prev.userid = inbetween.userid \n            and prev.id < inbetween.id \n            and inbetween.id < cur.id)\n    where cur.winner = 1\n    and IsNull(prev.winner,0) = 0\n) head\n    on head.userid = b.userid \n    and head.id <= b.id \n']], ['Querying for Consecutive Rows with Certain Characteristics'], 2], [(862594, 1), [['-10000'], ['The two "heads" subqueries are identical, you could put them in a view or a WITH where those are supported.  The "heads" subquery searches for each head of a winning streak; that is, the first win or a win that\'s preceeded by a loss.  I\'m assuming your id\'s increase over time, so I\'m not using the Created column.']], [[' left join (\n    select cur.userid, cur.id\n    from #bingo cur\n    left join #bingo prev \n        on cur.userid = prev.userid\n        and prev.id < cur.id\n        and not exists(\n            select * \n            from #bingo inbetween \n            where prev.userid = inbetween.userid \n            and prev.id < inbetween.id \n            and inbetween.id < cur.id)\n    where cur.winner = 1\n    and IsNull(prev.winner,0) = 0\n) nexthead \n    on nexthead.userid = b.userid \n    and head.id < nexthead.id \n    and nexthead.id <= b.id\nwhere nexthead.id is null \nand b.winner = 1\ngroup by head.userid, head.id\n']], ['Querying for Consecutive Rows with Certain Characteristics'], 2], [(862678, 0), [['The following query will select all the rows that are not "c", then group all the rows that are "c", sum their value, and add a single row representing the sum of "c". I hope that\'s what you mean.'], ['If you just want to group anything that has multiple "Alternative" appearances, just use:']], [[' SELECT *\nFROM table1 \nWHERE Alternative != c\n\nUNION\n\nSELECT Alternative, Sum(Total) as Total, Sum(Male) as Male, Sum(Female) as Female\nFROM table1 \nWHERE Alternative = c\nGROUP BY Alternative\n']], ['select to group rows'], 2], [(862678, 1), [['If you just want to group anything that has multiple "Alternative" appearances, just use:'], ['-10000']], [[' SELECT Alternative, Sum(Total) as Total, Sum(Male) as Male, Sum(Female) as Female\nFROM table1 \nGROUP BY Alternative\n']], ['select to group rows'], 2], [(864107, 0), [['Create a table:'], ['Add a value:']], [[' create table #bingo ( id int )\n']], ['Is there an easy way to add a custom migration script to SQL Compare scripts?'], 5], [(864107, 1), [['Add a value:'], ['Add a new column:']], [[' insert into #bingo values (1)\n']], ['Is there an easy way to add a custom migration script to SQL Compare scripts?'], 5], [(864107, 2), [['Add a new column:'], ['Populate the new column:']], [[' alter table #bingo add userid int\n']], ['Is there an easy way to add a custom migration script to SQL Compare scripts?'], 5], [(864107, 3), [['Populate the new column:'], ['Change the new column to not nullable:']], [[' update #bingo set userid = 1 where id = 1\n']], ['Is there an easy way to add a custom migration script to SQL Compare scripts?'], 5], [(864107, 4), [['Change the new column to not nullable:'], ['You would have to manually edit the RedGate Sql Compare to make it work like this.']], [[' alter table #bingo alter column userid int not null\n']], ['Is there an easy way to add a custom migration script to SQL Compare scripts?'], 5], [(864487, 0), [['-10000'], ['Note that you can use an  IN  style expression like this:']], [[' SELECT  *\nFROM    (\n        SELECT  field_a, field_b, my_function(field_c) fc\n        FROM    mytable\n        ) q\nWHERE   field_b = fc\n']], ['How can I write a SELECT statement in which the condition is the result of a function'], 3], [(864487, 1), [['Note that you can use an  IN  style expression like this:'], [', but if your function returns a complex type, the former style is preferrable, since you can compare to one field of the complex type and return the other within one query, like this:']], [[' SELECT  field_a, field_b\nFROM    mytable\nWHERE   field_b IN (SELECT my_function(field_c))\n']], ['How can I write a SELECT statement in which the condition is the result of a function'], 3], [(864487, 2), [[', but if your function returns a complex type, the former style is preferrable, since you can compare to one field of the complex type and return the other within one query, like this:'], ['We compare with  column1  here and return both  column1  and  column2 .']], [[' FUNCTION my_function RETURNS SETOF anothertable\n\n/* This will return a set of records of same layout as in table "anothertable" */\n\nSELECT  field_a, field_b, fc.column1, fc.column2\nFROM    (\n        SELECT  field_a, field_b, my_function(field_c) fc\n        FROM    mytable\n        ) q\nWHERE   field_b = fc.column1\n']], ['How can I write a SELECT statement in which the condition is the result of a function'], 3], [(864631, 0), [['You could do this:'], ['Or you could do this:']], [[" SELECT TOP 1\n     UserID\nFROM\n     UserTable\nWHERE\n     Name IN (@UserName, 'John Skeet')\nORDER BY\n     CASE WHEN Name = 'John Skeet' THEN 2 ELSE 1 END\n"]], ['SQL if( exists()) query duplication'], 4], [(864631, 1), [['Or you could do this:'], ['Or this:']], [[" DECLARE @UserID INT\n\nSELECT\n     @UserID = UserID\nFROM\n     UserTable\nWHERE\n     Name = @UserName\n\nIF (@UserID IS NULL)\n     SELECT\n          @UserID = UserID\n     FROM\n          UserTable\n     WHERE\n          Name = 'John Skeet'\n\nSELECT @UserID AS UserID\n"]], ['SQL if( exists()) query duplication'], 4], [(864631, 2), [['Or this:'], ['Or this:']], [[" SELECT\n     COALESCE(T2.UserID, T1.UserID)\nFROM\n     UserTable T1\nLEFT OUTER JOIN UserTable T2 ON\n     T2.Name = @UserName\nWHERE\n     T1.Name = 'John Skeet'\n"]], ['SQL if( exists()) query duplication'], 4], [(864631, 3), [['Or this:'], ['-10000']], [[" SELECT\n     UserID\nFROM\n     UserTable\nWHERE\n     Name = @UserName\n\nIF (@@ROWCOUNT = 0)  -- MS SQL Server specific, your RDBMS method will vary\n     SELECT\n          UserID\n     FROM\n          UserTable\n     WHERE\n          Name = 'John Skeet'\n"]], ['SQL if( exists()) query duplication'], 4], [(864855, 0), [['A typical select list query would be:'], ['That will display a list of cinema names to the user, and when the pick one populate the item value with the cinema ID.  In HTML terms it constructs a SELECT tag like this:']], [[' select cinema_name, cinema_id\nfrom cinemas\norder by cinema_name;\n']], ['populating a text box on a form - oracle'], 2], [(864855, 1), [['That will display a list of cinema names to the user, and when the pick one populate the item value with the cinema ID.  In HTML terms it constructs a SELECT tag like this:'], ['If the user chooses "Croydon" from the above list, the value "72" will be posted to the database.']], [[' <select id="P1_CINEMAS">\n  <option value="11">Ashtead</option>\n  <option value="23">Birmingham</option>\n  <option value="72">Croydon</option>\n</select>\n']], ['populating a text box on a form - oracle'], 2], [(867030, 0), [['Well, #1 is done by:'], ['And #2 is done by:']], [[' SELECT Name FROM Tbl WHERE (LeftId IS NULL) AND (RightId IS NULL)\n']], ['How to clean this Sql data up?'], 12], [(867030, 1), [['And #2 is done by:'], ['You could  intersect  them to see which  Name s appear in both lists:']], [[' SELECT Name FROM Tbl WHERE (LeftId IS NOT NULL) OR (RightId IS NOT NULL)\n']], ['How to clean this Sql data up?'], 12], [(867030, 2), [['You could  intersect  them to see which  Name s appear in both lists:'], ['Which returns:']], [[' SELECT Name FROM Tbl WHERE (LeftId IS NULL) AND (RightId IS NULL)\nINTERSECT\nSELECT Name FROM Tbl WHERE (LeftId IS NOT NULL) OR (RightId IS NOT NULL)\n']], ['How to clean this Sql data up?'], 12], [(867030, 3), [['Which returns:'], ["But you want the  LeftId  and  RightId , and you don't care which, so I guess we'll aggregate on the Name:"]], [[' Name\n----\nCat\nCow\n']], ['How to clean this Sql data up?'], 12], [(867030, 4), [["But you want the  LeftId  and  RightId , and you don't care which, so I guess we'll aggregate on the Name:"], ['Which returns']], [[' SELECT Name, MIN(LeftId) AS LeftId, MIN(RightId) AS RightId \n    FROM Tbl WHERE Tbl.Name IN (\n      SELECT Name FROM Tbl WHERE (LeftId IS NULL) AND (RightId IS NULL)\n      INTERSECT\n      SELECT Name FROM Tbl WHERE (LeftId IS NOT NULL) OR (RightId IS NOT NULL)\n    )\nGROUP BY Name\n']], ['How to clean this Sql data up?'], 12], [(867030, 5), [['Which returns'], ['lc  already suggested using COALESE to turn those two IDs to a single one. So how about this:']], [[' Name  LeftId  RightId\n----  ------  -------\nCat   1\nCow   6       7\n']], ['How to clean this Sql data up?'], 12], [(867030, 6), [['lc  already suggested using COALESE to turn those two IDs to a single one. So how about this:'], ['Which returns:']], [[' SELECT Name, COALESCE(MIN(LeftId),MIN(RightId)) AS Id \n    FROM Tbl WHERE Tbl.Name IN (\n      SELECT Name FROM Tbl WHERE (LeftId IS NULL) AND (RightId IS NULL)\n      INTERSECT\n      SELECT Name FROM Tbl WHERE (LeftId IS NOT NULL) OR (RightId IS NOT NULL)\n    )\nGROUP BY Name\n']], ['How to clean this Sql data up?'], 12], [(867030, 7), [['Which returns:'], ['Doing #1 is simply:']], [[' Name  Id\n----  --\nCat   1\nCow   6\n']], ['How to clean this Sql data up?'], 12], [(867030, 8), [['Doing #1 is simply:'], ['But #2 is tricky. Of course doing the opposite of #2 ("all the  Name  that appear in rows that have either  LeftId  or  RightId ) is just like before:']], [[' SELECT Name FROM Tbl WHERE (LeftId IS NULL) AND (RightId IS NULL)\n']], ['How to clean this Sql data up?'], 12], [(867030, 9), [['But #2 is tricky. Of course doing the opposite of #2 ("all the  Name  that appear in rows that have either  LeftId  or  RightId ) is just like before:'], ["Now comes the tricky bit - we want all the rows that obey #1 but don't obey the opposite of #2. This is where  EXCEPT  is useful:"]], [[' SELECT Name FROM Tbl WHERE (LeftId IS NOT NULL) OR (RightId IS NOT NULL)\n']], ['How to clean this Sql data up?'], 12], [(867030, 10), [["Now comes the tricky bit - we want all the rows that obey #1 but don't obey the opposite of #2. This is where  EXCEPT  is useful:"], ['Which returns:']], [[' SELECT Name FROM Tbl WHERE (LeftId IS NULL) AND (RightId IS NULL)\nEXCEPT\nSELECT Name FROM Tbl WHERE (LeftId IS NOT NULL) OR (RightId IS NOT NULL)\n']], ['How to clean this Sql data up?'], 12], [(867030, 11), [['Which returns:'], ['Which is what we wanted!']], [[' Name\n----\nBird\n']], ['How to clean this Sql data up?'], 12], [(868464, 0), [["In standard SQL, the obvious technique would be to cast the TIMESTAMP to a DATE.  We also don't have a clear explanation of the data you have to search with."], ['Note that because of the casts, it is unlikely that the DBMS will be able to use any indexes or anything.  If the types were sane, then the query would be simply:']], [[" SELECT CAST(DateOfBirth AS DATE), ...other columns...\n    FROM TheMysteryTable         -- Why do people hate giving tables names?\n    WHERE CAST(DateOfBirth AS DATE) =\n          CAST(TIMESTAMP '1950-01-01 10.22.06.010101120' AS DATE)\n"]], ['Database agnostic SQL for returning list for Date of birth stored as a Timestamp'], 2], [(868464, 1), [['Note that because of the casts, it is unlikely that the DBMS will be able to use any indexes or anything.  If the types were sane, then the query would be simply:'], ['-10000']], [[" SELECT DateOfBirth, ...other columns...\n    FROM TheMysteryTable\n    WHERE DateOfBirth = DATE '1950-01-01'\n"]], ['Database agnostic SQL for returning list for Date of birth stored as a Timestamp'], 2], [(868482, 0), [['According to MySQL documentation, the algorithm is a double SHA1 hash.  When examining the MySQL source code, you find a function called make_scrambled_password() in libmysql/password.c.  The function is defined as follows:'], ['According to the source code (again in password.c), the beginning asterisk indicates that this is the post-MySQL 4.1 method of encrypting the password.  When I emulate the functionality in VB.Net for example, this is what I come up with:']], [[" /*\n    MySQL 4.1.1 password hashing: SHA conversion (see RFC 2289, 3174) twice\n    applied to the password string, and then produced octet sequence is\n    converted to hex string.\n    The result of this function is used as return value from PASSWORD() and\n    is stored in the database.\n  SYNOPSIS\n    make_scrambled_password()\n    buf       OUT buffer of size 2*SHA1_HASH_SIZE + 2 to store hex string\n    password  IN  NULL-terminated password string\n*/\n\nvoid\nmake_scrambled_password(char *to, const char *password)\n{\n  SHA1_CONTEXT sha1_context;\n  uint8 hash_stage2[SHA1_HASH_SIZE];\n\n  mysql_sha1_reset(&sha1_context);\n  /* stage 1: hash password */\n  mysql_sha1_input(&sha1_context, (uint8 *) password, (uint) strlen(password));\n  mysql_sha1_result(&sha1_context, (uint8 *) to);\n  /* stage 2: hash stage1 output */\n  mysql_sha1_reset(&sha1_context);\n  mysql_sha1_input(&sha1_context, (uint8 *) to, SHA1_HASH_SIZE);\n  /* separate buffer is used to pass 'to' in octet2hex */\n  mysql_sha1_result(&sha1_context, hash_stage2);\n  /* convert hash_stage2 to hex string */\n  *to++= PVERSION41_CHAR;\n  octet2hex(to, (const char*) hash_stage2, SHA1_HASH_SIZE);\n}\n"]], ["Simulating MySql's password() encryption using .NET or MS SQL"], 3], [(868482, 1), [['According to the source code (again in password.c), the beginning asterisk indicates that this is the post-MySQL 4.1 method of encrypting the password.  When I emulate the functionality in VB.Net for example, this is what I come up with:'], ["Edit:  Here's the same code in C#"]], [[' Public Function GenerateMySQLHash(ByVal strKey As String) As String\n    Dim keyArray As Byte() = Encoding.UTF8.GetBytes(strKey)\n    Dim enc = New SHA1Managed()\n    Dim encodedKey = enc.ComputeHash(enc.ComputeHash(keyArray))\n    Dim myBuilder As New StringBuilder(encodedKey.Length)\n\n    For Each b As Byte In encodedKey\n        myBuilder.Append(b.ToString("X2"))\n    Next\n\n    Return "*" & myBuilder.ToString()\nEnd Function\n']], ["Simulating MySql's password() encryption using .NET or MS SQL"], 3], [(868482, 2), [["Edit:  Here's the same code in C#"], ['-10000']], [[' public string GenerateMySQLHash(string key)\n{\n    byte[] keyArray = Encoding.UTF8.GetBytes(key);\n    SHA1Managed enc = new SHA1Managed();\n    byte[] encodedKey = enc.ComputeHash(enc.ComputeHash(keyArray));\n    StringBuilder myBuilder = new StringBuilder(encodedKey.Length);\n\n    foreach (byte b in encodedKey)\n        myBuilder.Append(b.ToString("X2"));\n\n    return "*" + myBuilder.ToString();\n}\n']], ["Simulating MySql's password() encryption using .NET or MS SQL"], 3], [(871905, 0), [["Well, it looks like Access can't do aggregates in UPDATE queries.  But it can do aggregates in SELECT queries. So create a query with a definition like:"], ["And save it as YourQuery.  Now we have to work around another Access restriction. UPDATE queries can't operate on queries, but they can operate on multiple tables.  So let's turn the query into a table with a Make Table query:"]], [[' SELECT func_id, min(tax_code) as MinOfTax_Code\nFROM Functions\nINNER JOIN Tax \nON (Functions.Func_Year = Tax.Tax_Year) \nAND (Functions.Func_Pure <= Tax.Tax_ToPrice) \nGROUP BY Func_Id\n']], ['Use SELECT inside an UPDATE query'], 3], [(871905, 1), [["And save it as YourQuery.  Now we have to work around another Access restriction. UPDATE queries can't operate on queries, but they can operate on multiple tables.  So let's turn the query into a table with a Make Table query:"], ['This stores the content of the view in a table called MinOfTax_Code.  Now you can do an UPDATE query:']], [[' SELECT YourQuery.* \nINTO MinOfTax_Code\nFROM YourQuery\n']], ['Use SELECT inside an UPDATE query'], 3], [(871905, 2), [['This stores the content of the view in a table called MinOfTax_Code.  Now you can do an UPDATE query:'], ["Doing SQL in Access is a bit of a stretch, I'd look into Sql Server Express Edition for your project!"]], [[' UPDATE MinOfTax_Code \nINNER JOIN Functions ON MinOfTax_Code.func_id = Functions.Func_ID \nSET Functions.Func_TaxRef = [MinOfTax_Code].[MinOfTax_Code]\n']], ['Use SELECT inside an UPDATE query'], 3], [(872922, 0), [['An example:'], ['An example:']], [[" mysql> SELECT 1 as ColumnA,'a' as ColumnB\n    -> UNION\n    -> SELECT 2, 'b'\n    -> UNION\n    -> SELECT 3, 'c';\n+---------+---------+\n| ColumnA | ColumnB |\n+---------+---------+\n|       1 | a       |\n|       2 | b       |\n|       3 | c       |\n+---------+---------+\n3 rows in set (0.05 sec)\n"]], ['How can I retrieve similar rows from different tables in the same query?'], 2], [(872922, 1), [['An example:'], ['-10000']], [[' mysql> SELECT 1 as x\n    -> UNION\n    -> SELECT 1;\n+---+\n| x |\n+---+\n| 1 |\n+---+\n1 row in set (0.00 sec)\n\nmysql> SELECT 1 as x\n    -> UNION ALL\n    -> SELECT 1;\n+---+\n| x |\n+---+\n| 1 |\n| 1 |\n+---+\n2 rows in set (0.00 sec)\n']], ['How can I retrieve similar rows from different tables in the same query?'], 2], [(875211, 0), [['Off the top of my head... (MYSQL)'], ['(T-SQL)']], [[' declare @endTime datetime;\nselect @endTime=timestamp from data where id=@rowId\nselect \n    * \nfrom \n    data \nwhere \n    timestamp<=@endtime and timestamp>ADDDATE(@endTime,INTERVAL -1 DAY)\n']], ['How to select the last 24 hours of rows from a row offset'], 2], [(875211, 1), [['(T-SQL)'], ['You may have to adjust the datetime type to match your data.']], [[' declare @endTime datetime2;\nselect @endTime=timestamp from data where id=@rowId\nselect * from data where timestamp<=@endtime and timestamp>dateadd(d,-1,@endTime)\n']], ['How to select the last 24 hours of rows from a row offset'], 2], [(876723, 0), [['The general aim would be to "cover" all columns so the query only has to use the index.'], ['Edit, after 1st comment:']], [[" -- An index on Name including ID would be ideal\nSELECT\n    [id]\nFROM\n    TEST\nWHERE\n    [name] = 'bob'\n"]], ['RDBS when to use complex indexes for queries and when use simple?'], 4], [(876723, 1), [['Edit, after 1st comment:'], ['For this query, the SELECT * but mitigates against any index so the PK would be used.\nIf you had:']], [[" select * from test where id='id1' and name='Name1'\n"]], ['RDBS when to use complex indexes for queries and when use simple?'], 4], [(876723, 2), [['For this query, the SELECT * but mitigates against any index so the PK would be used.\nIf you had:'], ['Using "OR" creates difficulties for any strategy. However, ']], [[" select address from test where id='id1' and name='Name1'\n"]], ['RDBS when to use complex indexes for queries and when use simple?'], 4], [(876723, 3), [['Using "OR" creates difficulties for any strategy. However, '], ['would still use the "ID, name including address" inex most likely but scan it rather that seek']], [[" select address from test where id='id1' and name='Name1'\n"]], ['RDBS when to use complex indexes for queries and when use simple?'], 4], [(877571, 0), [['For a multi-column search, the index sorting does matter.  Say you have an index on:'], ['This would be useful for this query:']], [[' field1, field2 desc\n']], ['Descending sort order indexes'], 4], [(877571, 1), [['This would be useful for this query:'], ['And for this query, where the index can be used in reverse:']], [[' select field1, field2 from table order by field1, field2 desc\n']], ['Descending sort order indexes'], 4], [(877571, 2), [['And for this query, where the index can be used in reverse:'], ['But for this query, Sql Server would need an additional in-memory sort:']], [[' select field1, field2 from table order by field1 desc, field2\n']], ['Descending sort order indexes'], 4], [(877571, 3), [['But for this query, Sql Server would need an additional in-memory sort:'], ['-10000']], [[' select field1, field2 from table order by field1, field2\n']], ['Descending sort order indexes'], 4], [(878833, 0), [['Before you use my function, you need to set up a "helper" table, you only need to do this one time per database:'], ['use this function to split your string, which does not loop and is very fast:']], [[' CREATE TABLE Numbers\n(Number int  NOT NULL,\n    CONSTRAINT PK_Numbers PRIMARY KEY CLUSTERED (Number ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\n) ON [PRIMARY]\nDECLARE @x int\nSET @x=0\nWHILE @x<8000\nBEGIN\n    SET @x=@x+1\n    INSERT INTO Numbers VALUES (@x)\nEND\n']], ['Passing a varchar full of comma delimited values to a SQL Server IN function'], 4], [(878833, 1), [['use this function to split your string, which does not loop and is very fast:'], ['you can use this function as a table in a join:']], [[' CREATE FUNCTION [dbo].[FN_ListToTable]\n(\n     @SplitOn              char(1)              --REQUIRED, the character to split the @List string on\n    ,@List                 varchar(8000)        --REQUIRED, the list to split apart\n)\nRETURNS\n@ParsedList table\n(\n    ListValue varchar(500)\n)\nAS\nBEGIN\n\n/**\nTakes the given @List string and splits it apart based on the given @SplitOn character.\nA table is returned, one row per split item, with a column name "ListValue".\nThis function workes for fixed or variable lenght items.\nEmpty and null items will not be included in the results set.\n\n\nReturns a table, one row per item in the list, with a column name "ListValue"\n\nEXAMPLE:\n----------\nSELECT * FROM dbo.FN_ListToTable(\',\',\'1,12,123,1234,54321,6,A,*,|||,,,,B\')\n\n    returns:\n        ListValue  \n        -----------\n        1\n        12\n        123\n        1234\n        54321\n        6\n        A\n        *\n        |||\n        B\n\n        (10 row(s) affected)\n\n**/\n\n\n\n----------------\n--SINGLE QUERY-- --this will not return empty rows\n----------------\nINSERT INTO @ParsedList\n        (ListValue)\n    SELECT\n        ListValue\n        FROM (SELECT\n                  LTRIM(RTRIM(SUBSTRING(List2, number+1, CHARINDEX(@SplitOn, List2, number+1)-number - 1))) AS ListValue\n                  FROM (\n                           SELECT @SplitOn + @List + @SplitOn AS List2\n                       ) AS dt\n                      INNER JOIN Numbers n ON n.Number < LEN(dt.List2)\n                  WHERE SUBSTRING(List2, number, 1) = @SplitOn\n             ) dt2\n        WHERE ListValue IS NOT NULL AND ListValue!=\'\'\n\n\n\nRETURN\n\nEND --Function FN_ListToTable\n']], ['Passing a varchar full of comma delimited values to a SQL Server IN function'], 4], [(878833, 2), [['you can use this function as a table in a join:'], ['Here is your example:']], [[" SELECT\n    Col1, COl2, Col3...\n    FROM  YourTable\n        INNER JOIN FN_ListToTable(',',@YourString) s ON  YourTable.ID = s.ListValue\n"]], ['Passing a varchar full of comma delimited values to a SQL Server IN function'], 4], [(878833, 3), [['Here is your example:'], ['-10000']], [[" Select * from sometable where tableid in(SELECT ListValue FROM dbo.FN_ListToTable(',',@Ids) s)\n"]], ['Passing a varchar full of comma delimited values to a SQL Server IN function'], 4], [(879189, 0), [["It's more elegant if you materialize an auxiliary numbers table:"], ['Paste partial results into a individual comma separated lists:']], [[' SELECT num FROM numbers WHERE num IN (2,6,1,8);\n']], ['Oracle Select numbers from an IN clause'], 2], [(879189, 1), [['Paste partial results into a individual comma separated lists:'], ['-10000']], [[' INSERT INTO {stuff}\nSELECT {stuff}, 130 as line_item\nFROM numbers\nWHERE numbers.num IN ({pasted a section of results})\n\nINSERT INTO {stuff}\nSELECT {stuff}, 135 as line_item\nFROM numbers\nWHERE numbers.num IN ({pasted another section of results})\n']], ['Oracle Select numbers from an IN clause'], 2], [(881844, 0), [['Eg:'], ['Another way is to build a CLR Function or Stored Procedure. Here is a sample code:']], [[' PRINT @@VERSION\n']], ['operating system information from a microsoft sql server instance'], 3], [(881844, 1), [['Another way is to build a CLR Function or Stored Procedure. Here is a sample code:'], ['This example should output this:']], [[' using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Data.SqlTypes;\nusing Microsoft.SqlServer.Server;\n\npublic partial class UserDefinedFunctions\n{\n    [Microsoft.SqlServer.Server.SqlFunction]\n    public static SqlString Function1()\n    {\n        return new SqlString(System.Environment.OSVersion.ToString());\n    }\n};\n']], ['operating system information from a microsoft sql server instance'], 3], [(881844, 2), [['This example should output this:'], ['-10000']], [[' SELECT dbo.Function1()\n\nMicrosoft Windows NT 6.0.6001 Service Pack 1\n']], ['operating system information from a microsoft sql server instance'], 3], [(883127, 0), [['@@DATEFIRST is local to your session.  You can verify it by opening to tabs in Sql Server Management Studio (SSMS). Execute this code in the first tab:'], ["And verify that it doesn't affect the other tab with:"]], [['  SET DATEFIRST 5\n']], ['SQL Server SET DATEFIRST scope'], 2], [(883127, 1), [["And verify that it doesn't affect the other tab with:"], ['See this  MSDN article .']], [[' select @@datefirst\n']], ['SQL Server SET DATEFIRST scope'], 2], [(883688, 0), [['You could use a view to pre-join the children to the parents, and to get a consistent result regardless of which child type.  For example:'], ["Or if your feeds table doesn't have a feed_type column (or equivalent):"]], [[" create view feed_links as\nselect f.feed_name\n,      case f.feed_type\n            when 'public' then pub.x + pub.y\n            when 'private' then pri.z\n            when 'generated' then gen.v + gen.w\n            end as link\nfrom   feeds f\nleft outer join public_feeds pub on pub.feed_id = f.feed_id\nleft outer join private_feeds pri on pri.feed_id = f.feed_id\nleft outer join generated_feeds gen on gen.feed_id = f.feed_id\nwhere ...;\n"]], ['Recovering types through an Isa relationship'], 2], [(883688, 1), [["Or if your feeds table doesn't have a feed_type column (or equivalent):"], ['-10000']], [[' create view feed_links as\nselect f.feed_name\n,      case when pub.feed_id is not null then pub.x + pub.y\n            when pri.feed_id is not null then pri.z\n            when gen.feed_id is not null then gen.v + gen.w\n            end as link\nfrom   feeds f\nleft outer join public_feeds pub on pub.feed_id = f.feed_id\nleft outer join private_feeds pri on pri.feed_id = f.feed_id\nleft outer join generated_feeds gen on gen.feed_id = f.feed_id\nwhere ...;\n']], ['Recovering types through an Isa relationship'], 2], [(884050, 0), [['Instead of Values:'], ['You have multiple tables:']], [[' EntityID int\n,AttributeID int\n,Value varchar(255)\n']], ['How do you model custom attributes of entities?'], 3], [(884050, 1), [['You have multiple tables:'], ['Then to get your iPod capacity per generation:']], [[' EntityID int\n,AttributeID int\n,ValueMoney money\n\nEntityID int\n,AttributeID int\n,ValueInt int\n\netc.\n']], ['How do you model custom attributes of entities?'], 3], [(884050, 2), [['Then to get your iPod capacity per generation:'], ['-10000']], [[" SELECT vG.ValueVarChar AS Generation, SUM(vC.ValueDecimal) AS TotalCapacity\nFROM Products AS p\nINNER JOIN Attributes AS aG\n    ON aG.AttributeName = 'generation'\nINNER JOIN ValueVarChar AS vG\n    ON vG.EntityID = p.ProductID\n    AND vG.AttributeID = aG.AttributeID\nINNER JOIN Attributes AS aC\n    ON aC.AttributeName = 'capacity'\nINNER JOIN ValueDecimal AS vC\n    ON vC.EntityID = p.ProductID\n    AND vC.AttributeID = aC.AttributeID\nGROUP BY vG.ValueVarChar\n"]], ['How do you model custom attributes of entities?'], 3], [(884159, 0), [["I don't think you'd need to know the peak hours; you can generate them with SQL, wrapping a the full query and selecting the top 20 entries, for example:"], ['To get a first glimpse of the load for the last week, you could try (Sql Server syntax):']], [[' select top 20 *\nfrom (\n     [...load query here...]\n) qry\norder by LoadPerSecond desc\n']], ['SQL: Calculating system load statistics'], 3], [(884159, 1), [['To get a first glimpse of the load for the last week, you could try (Sql Server syntax):'], ['To find the peak load per minute:']], [[' select datepart(dy,createdate) as DayOfYear,\n       hour(createdate) as Hour, \n       count(*)/3600.0 as LoadPerSecond\nfrom message\nwhere CreateDate > dateadd(week,-7,getdate())\ngroup by datepart(dy,createdate), hour(createdate)\n']], ['SQL: Calculating system load statistics'], 3], [(884159, 2), [['To find the peak load per minute:'], ['Grouping by datepart(dy,...) is an easy way to distinguish between days without worrying about month borders.  It works until you select more that a year back, but that would be unusual for performance queries.']], [[' select max(MessagesPerMinute)\nfrom (\n  select count(*) as MessagesPerMinute\n  from message\n  where CreateDate > dateadd(days,-7,getdate())\n  group by datepart(dy,createdate),hour(createdate),minute(createdate)\n)\n']], ['SQL: Calculating system load statistics'], 3], [(885133, 0), [['Assuming that you want the most recent entry, you have to use TOP 1 and order by.'], ['Edit after clarification: "the most recent child record AND the parent record, FOR EACH parent record":']], [[' SELECT TOP 1\ndbo_Parents.ParentName, \ndbo_ChildEntry.CountPropertys, \ndbo_ChildEntry.DateTimeStamp \nFROM dbo_Parents \nINNER JOIN dbo_ChildEntry ON dbo_Parents.ParentID = dbo_ChildEntry.ParentID \nORDER BY dbo_ChildEntry.DateTimeStamp desc\n']], ['SQL SELECT WHERE Trouble any ideas helpful'], 2], [(885133, 1), [['Edit after clarification: "the most recent child record AND the parent record, FOR EACH parent record":'], ['-10000']], [[' WHERE dbo_ChildEntry.DateTimeStamp = \n      ( Select Max( dbo_ChildEntry.DateTimeStamp )\n               from dbo_ChildEntry \n               where dbo_Parents.ParentID = dbo_ChildEntry.ParentId )\n']], ['SQL SELECT WHERE Trouble any ideas helpful'], 2], [(886050, 0), [['Example syntax for that is below.'], ['Filtered indexes and indexes with included columns can not currently be declared with this syntax however  SQL Server 2016  relaxes this a bit further. From CTP 3.1 it is now possible to declare filtered indexes for table variables. By RTM it  may  be the case that included columns are also allowed but the current position is that they  "will likely not make it into SQL16 due to resource constraints"']], [[' /*SQL Server 2014+ compatible inline index syntax*/\nDECLARE @T TABLE (\nC1 INT INDEX IX1 CLUSTERED, /*Single column indexes can be declared next to the column*/\nC2 INT INDEX IX2 NONCLUSTERED,\n       INDEX IX3 NONCLUSTERED(C1,C2) /*Example composite index*/\n);\n']], ['Creating an index on a table variable'], 6], [(886050, 1), [['Filtered indexes and indexes with included columns can not currently be declared with this syntax however  SQL Server 2016  relaxes this a bit further. From CTP 3.1 it is now possible to declare filtered indexes for table variables. By RTM it  may  be the case that included columns are also allowed but the current position is that they  "will likely not make it into SQL16 due to resource constraints"'], ['Short answer: Yes.']], [[' /*SQL Server 2016 allows filtered indexes*/\nDECLARE @T TABLE\n(\nc1 INT NULL INDEX ix UNIQUE WHERE c1 IS NOT NULL /*Unique ignoring nulls*/\n)\n']], ['Creating an index on a table variable'], 6], [(886050, 2), [['Short answer: Yes.'], ['Both of these logical constraints are physically implemented with a unique index. If not explicitly specified otherwise the  PRIMARY KEY  will become the clustered index and unique constraints non clustered but this behavior can be overridden by specifying  CLUSTERED  or  NONCLUSTERED  explicitly with the constraint declaration (Example syntax)']], [[' DECLARE @TEMPTABLE TABLE (\n  [ID]   [INT] NOT NULL PRIMARY KEY,\n  [Name] [NVARCHAR] (255) COLLATE DATABASE_DEFAULT NULL,\n  UNIQUE NONCLUSTERED ([Name], [ID]) \n  ) \n']], ['Creating an index on a table variable'], 6], [(886050, 3), [['Both of these logical constraints are physically implemented with a unique index. If not explicitly specified otherwise the  PRIMARY KEY  will become the clustered index and unique constraints non clustered but this behavior can be overridden by specifying  CLUSTERED  or  NONCLUSTERED  explicitly with the constraint declaration (Example syntax)'], ['As a result of the above the following indexes can be implicitly created on table variables in SQL Server 2000 - 2012.']], [[' DECLARE @T TABLE\n(\nA INT NULL UNIQUE CLUSTERED,\nB INT NOT NULL PRIMARY KEY NONCLUSTERED\n)\n']], ['Creating an index on a table variable'], 6], [(886050, 4), [['As a result of the above the following indexes can be implicitly created on table variables in SQL Server 2000 - 2012.'], ['A non unique clustered index can also be achieved by manually adding an  IDENTITY  column to act as a uniqueifier.']], [[' +-------------------------------------+-------------------------------------+\n|             Index Type              | Can be created on a table variable? |\n+-------------------------------------+-------------------------------------+\n| Unique Clustered Index              | Yes                                 |\n| Nonunique Clustered Index           |                                     |\n| Unique NCI on a heap                | Yes                                 |\n| Non Unique NCI on a heap            |                                     |\n| Unique NCI on a clustered index     | Yes                                 |\n| Non Unique NCI on a clustered index | Yes                                 |\n+-------------------------------------+-------------------------------------+\n']], ['Creating an index on a table variable'], 6], [(886050, 5), [['A non unique clustered index can also be achieved by manually adding an  IDENTITY  column to act as a uniqueifier.'], ['But this is not an accurate simulation of how a non unique clustered index would normally actually be implemented in SQL Server as this adds the "Uniqueifier" to all rows. Not just those that require it.']], [[' DECLARE @T TABLE\n(\nA INT NULL,\nB INT NULL,\nC INT NULL,\nUniqueifier INT NOT NULL IDENTITY(1,1),\nUNIQUE CLUSTERED (A,Uniqueifier)\n)\n']], ['Creating an index on a table variable'], 6], [(886597, 0), [['-10000'], ['OR you can make the tab page topmost explicitly:']], [[" GO_ITEM('BLOCK_NAME.ITEM_NAME');\n"]], ['Oracle Form Builder: Switching between tabs in a form'], 2], [(886597, 1), [['OR you can make the tab page topmost explicitly:'], ['-10000']], [[" SET_CANVAS_PROPERTY('CANVAS_NAME', TOPMOST_TAB_PAGE, 'TAB_PAGE_NAME');\n"]], ['Oracle Form Builder: Switching between tabs in a form'], 2], [(887822, 0), [['You need to do any grouping on a Date only version of your datefield, such as this.'], ['I usually do this though, as it avoids conversion to varchar.']], [[' SELECT\n    CONVERT(VARCHAR(10), YourDateColumn, 101),\n    COUNT(*)\nFROM\n    YourTable\nGROUP BY\n    CONVERT(VARCHAR(10), YourDateColumn, 101)\n']], ['SQL Server Server query - Count distinct DateTime field'], 3], [(887822, 1), [['I usually do this though, as it avoids conversion to varchar.'], ['EDIT: Another way to get just the date part of a datetime']], [[' SELECT\n    DATEPART(yy, YourDateColumn),\n    DATEPART(mm, YourDateColumn),\n    DATEPART(dd, YourDateColumn),\n    COUNT(*)\nFROM\n    YourTable\nGROUP BY\n    DATEPART(yy, YourDateColumn),\n    DATEPART(mm, YourDateColumn),\n    DATEPART(dd, YourDateColumn)\n']], ['SQL Server Server query - Count distinct DateTime field'], 3], [(887822, 2), [['EDIT: Another way to get just the date part of a datetime'], ['-10000']], [[' DATEADD(d, 0, DATEDIFF(d, 0, YourDateColumn))\n']], ['SQL Server Server query - Count distinct DateTime field'], 3], [(888020, 0), [["Here's some code for creating and using a dictionary (used C# style comments to preserve formatting):"], ['2) I assumed you had a class named Part, which contained some information about a part. If you just have a part number, and no other info, then you could create a Hashset instead. It is basically the same as a dictionary, but with this structure the value is also your key. You would create a hashset like this:']], [[' //First argument is your key type, second is your item type\nDim cadParts As New Dictionary(Of Integer, Part)\n\n//Add items to the parts dictionary\nFor Each part As Part In cadPartsArray\n  cadParts.Add(part.PartNumber,part)\nNext\n\n//Check if a part exists\nDim partNumber As Integer = 12345\nIf cadParts.ContainsKey(partNumber) ...\n\n//Remove a part\ncadParts.Remove(partNumber)\n\n//Go through the remaining values\nFor Each part As Part In cadParts.Values ...\n']], ['Comparing arrays in VB.NET'], 2], [(888020, 1), [['2) I assumed you had a class named Part, which contained some information about a part. If you just have a part number, and no other info, then you could create a Hashset instead. It is basically the same as a dictionary, but with this structure the value is also your key. You would create a hashset like this:'], ["I won't go through code examples because it is very close to the Dictionary. ContainsKey becomes Contains, and Add accepts only one argument (which would be your part number here)."]], [[' Dim cadParts As New Hashset(Of String)\n']], ['Comparing arrays in VB.NET'], 2], [(888731, 0), [['One way is to join the table against itself:'], ['Another way is to use subqueries:']], [[' select\n   count(*) as TotalCount,\n   count(s.id) as QualifiedCount\nfrom\n   MyTable a\nleft join\n   MyTable s on s.id = a.id and {some conditions}\n']], ['two SQL COUNT() queries?'], 3], [(888731, 1), [['Another way is to use subqueries:'], ['Or you can put the conditions in a case:']], [[' select\n   (select count(*) from Mytable) as TotalCount,\n   (select count(*) from Mytable where {some conditions}) as QualifiedCount\n']], ['two SQL COUNT() queries?'], 3], [(888731, 2), [['Or you can put the conditions in a case:'], ['Related:']], [[' select\n   count(*) as TotalCount,\n   sum(case when {some conditions} then 1 else 0 end) as QualifiedCount\nfrom\n   MyTable\n']], ['two SQL COUNT() queries?'], 3], [(890516, 0), [["This can be done using the PIVOT function.  I'll try to work out an example:"], ['You can generate the SQL for this, if you have a long list of columns:']], [[' SELECT *\nFROM ERAUser.Audit\nPIVOT (max(NewValue) FOR FieldName in (Field1, Field2, Field3)) as PivotTable\n']], ['How can I retrieve the values from a generic audit table reconstituted as a rowset with meaningful column names in SQL?'], 4], [(890516, 1), [['You can generate the SQL for this, if you have a long list of columns:'], ["Here's a basic example of PIVOT, to get the general idea:"]], [[" declare @columnlist nvarchar(4000)\nselect @columnlist = IsNull(@columnlist + ', ', '') + FieldName\nfrom (\n    select distinct FieldName from ERAUser.Audit\n) sub\n\ndeclare @query nvarchar(4000)\nselect @query = 'select *\nfrom ERAUser.Audit\nPIVOT (max(newValue) FOR FieldName in (' + @columnlist + ')) as PivotTable'\n\nexec sp_executesql @query\n"]], ['How can I retrieve the values from a generic audit table reconstituted as a rowset with meaningful column names in SQL?'], 4], [(890516, 2), [["Here's a basic example of PIVOT, to get the general idea:"], ['This will result in:']], [[" create table #normalized (\n    colname varchar(12),\n    value varchar(12)\n)\n\ninsert into #normalized values ('value1','A')\ninsert into #normalized values ('value2','B')\ninsert into #normalized values ('value3','C')\n\nselect *\nfrom #normalized\nPIVOT (max(value) FOR ColName in (value1,value2,value3)) as Y\n"]], ['How can I retrieve the values from a generic audit table reconstituted as a rowset with meaningful column names in SQL?'], 4], [(890516, 3), [['This will result in:'], ['-10000']], [[' value1    value2    value3\nA         B         C\n']], ['How can I retrieve the values from a generic audit table reconstituted as a rowset with meaningful column names in SQL?'], 4], [(890581, 0), [['How about:'], ["If you're worried about evaluating  twice:"]], [[' SELECT * FROM TABLE1 WHERE <SomeCondition>\nUNION\nSELECT * FROM TABLE2 WHERE NOT <SomeCondition>\nUNION\nSELECT * FROM TABLE3\n']], ['SQL Server 2005 - If condition with union'], 2], [(890581, 1), [["If you're worried about evaluating  twice:"], ['-10000']], [[' DECLARE @condition bit\nSET @condition = CASE WHEN <SomeCondition> THEN 1 ELSE 0 END\n\nSELECT * FROM TABLE1 WHERE @condition = 1\nUNION\nSELECT * FROM TABLE2 WHERE @condition = 0\nUNION\nSELECT * FROM TABLE3\n']], ['SQL Server 2005 - If condition with union'], 2], [(891833, 0), [['Your columns are of datatype TIMESTAMP, like this:'], ['Subtracting one timestamp from another, leads to an INTERVAL datatype:']], [[" SQL> create table mytable (start_time,end_time)\n  2  as\n  3  select to_timestamp('2009-05-01 12:34:56','yyyy-mm-dd hh24:mi:ss')\n  4       , to_timestamp('2009-05-01 23:45:01','yyyy-mm-dd hh24:mi:ss')\n  5    from dual\n  6   union all\n  7  select to_timestamp('2009-05-01 23:45:01','yyyy-mm-dd hh24:mi:ss')\n  8       , to_timestamp('2009-05-02 01:23:45','yyyy-mm-dd hh24:mi:ss')\n  9    from dual\n 10   union all\n 11  select to_timestamp('2009-05-01 07:00:00','yyyy-mm-dd hh24:mi:ss')\n 12       , to_timestamp('2009-05-01 08:00:00','yyyy-mm-dd hh24:mi:ss')\n 13    from dual\n 14  /\n\nTabel is aangemaakt.\n"]], ['Calculate the Sum of duration in sql query'], 6], [(891833, 1), [['Subtracting one timestamp from another, leads to an INTERVAL datatype:'], ["And INTERVAL datatypes cannot be summed. It's an annoying restriction:"]], [[' SQL> select start_time\n  2       , end_time\n  3       , end_time - start_time time_difference\n  4    from mytable\n  5  /\n\nSTART_TIME                     END_TIME                       TIME_DIFFERENCE\n------------------------------ ------------------------------ ------------------------------\n01-05-09 12:34:56,000000000    01-05-09 23:45:01,000000000    +000000000 11:10:05.000000000\n01-05-09 23:45:01,000000000    02-05-09 01:23:45,000000000    +000000000 01:38:44.000000000\n01-05-09 07:00:00,000000000    01-05-09 08:00:00,000000000    +000000000 01:00:00.000000000\n\n3 rijen zijn geselecteerd.\n']], ['Calculate the Sum of duration in sql query'], 6], [(891833, 2), [["And INTERVAL datatypes cannot be summed. It's an annoying restriction:"], ['To circumvent this restriction, you can convert and calculate with the number of seconds, like this:']], [[' SQL> select sum(end_time - start_time)\n  2    from mytable\n  3  /\nselect sum(end_time - start_time)\n                    *\nFOUT in regel 1:\n.ORA-00932: inconsistente gegevenstypen: NUMBER verwacht, INTERVAL DAY TO SECOND gekregen\n']], ['Calculate the Sum of duration in sql query'], 6], [(891833, 3), [['To circumvent this restriction, you can convert and calculate with the number of seconds, like this:'], ['And then they are normal NUMBERs that can be summed']], [[" SQL> select start_time\n  2       , end_time\n  3       , trunc(end_time) - trunc(start_time) days_difference\n  4       , to_number(to_char(end_time,'sssss')) - to_number(to_char(start_time,'sssss')) seconds_difference\n  5    from mytable\n  6  /\n\nSTART_TIME                     END_TIME                       DAYS_DIFFERENCE SECONDS_DIFFERENCE\n------------------------------ ------------------------------ --------------- ------------------\n01-05-09 12:34:56,000000000    01-05-09 23:45:01,000000000                  0              40205\n01-05-09 23:45:01,000000000    02-05-09 01:23:45,000000000                  1             -80476\n01-05-09 07:00:00,000000000    01-05-09 08:00:00,000000000                  0               3600\n\n3 rijen zijn geselecteerd.\n"]], ['Calculate the Sum of duration in sql query'], 6], [(891833, 4), [['And then they are normal NUMBERs that can be summed'], ['And if you wish, you can convert this number back to an INTERVAL:']], [[" SQL> select sum\n  2         (  86400 * (trunc(end_time) - trunc(start_time))\n  3          + to_number(to_char(end_time,'sssss')) - to_number(to_char(start_time,'sssss'))\n  4         ) total_time_difference\n  5    from mytable\n  6  /\n\nTOTAL_TIME_DIFFERENCE\n---------------------\n                49729\n\n1 rij is geselecteerd.\n"]], ['Calculate the Sum of duration in sql query'], 6], [(891833, 5), [['And if you wish, you can convert this number back to an INTERVAL:'], ['Regards,\nRob.']], [[" SQL> select numtodsinterval\n  2         ( sum\n  3           (  86400 * (trunc(end_time) - trunc(start_time))\n  4            + to_number(to_char(end_time,'sssss')) - to_number(to_char(start_time,'sssss'))\n  5           )\n  6         , 'second'\n  7         ) time_difference\n  8    from mytable\n  9  /\n\nTIME_DIFFERENCE\n------------------------------\n+000000000 13:48:49.000000000\n\n1 rij is geselecteerd.\n"]], ['Calculate the Sum of duration in sql query'], 6], [(892351, 0), [['This command can be handy to see which temporary tables exist:'], ["And this is handy to drop temporary tables if you're not sure they exist:"]], [[' select TABLE_NAME from tempdb.information_schema.tables \n']], ['SQL Server 2005 and temporary table scope'], 2], [(892351, 1), [["And this is handy to drop temporary tables if you're not sure they exist:"], ['See this  MSDN article  for more information.']], [[" if object_id('tempdb..#SoTest') is not null drop table #SoTest\n"]], ['SQL Server 2005 and temporary table scope'], 2], [(894490, 0), [["Let's suppose you have 3 tables in your system:"], ['So you do this:']], [[' Company\nDepartment\nEmployee\n']], ['SQL left join vs multiple tables on FROM line?'], 4], [(894490, 1), [['So you do this:'], ['For instance, if you want all companies, as the problem description stated, this is what you would write:']], [[' SELECT * -- for simplicity\nFROM Company, Department, Employee\nWHERE Company.ID *= Department.CompanyID\n  AND Department.ID = Employee.DepartmentID\n']], ['SQL left join vs multiple tables on FROM line?'], 4], [(894490, 2), [['For instance, if you want all companies, as the problem description stated, this is what you would write:'], ["Additionally, let's say you only want departments that contains the letter X in their name. Again, with old style joins, you risk losing the company as well, if it doesn't have any departments with an X in its name, but with the new syntax, you can do this:"]], [[' SELECT *\nFROM Company\n     LEFT JOIN (\n         Department INNER JOIN Employee ON Department.ID = Employee.DepartmentID\n     ) ON Company.ID = Department.CompanyID\n']], ['SQL left join vs multiple tables on FROM line?'], 4], [(894490, 3), [["Additionally, let's say you only want departments that contains the letter X in their name. Again, with old style joins, you risk losing the company as well, if it doesn't have any departments with an X in its name, but with the new syntax, you can do this:"], ['This extra clause is used for the joining, but is not a filter for the entire row. So the row might appear with company information, but might have NULLs in all the department and employee columns for that row, because there is no department with an X in its name for that company. This is hard with the old syntax.']], [[" SELECT *\nFROM Company\n     LEFT JOIN (\n         Department INNER JOIN Employee ON Department.ID = Employee.DepartmentID\n     ) ON Company.ID = Department.CompanyID AND Department.Name LIKE '%X%'\n"]], ['SQL left join vs multiple tables on FROM line?'], 4], [(894522, 0), [["An example for difference in performance is an Index lookup.  The database engine finds a row based on some conditions in the index, and gets back a row address.  Now say you are looking for SomeValue, and it's in this table:"], ['The engine has to guess where SomeValue starts, because SomeString has an unknown length.  However, if you change the order to:']], [['  SomeId int,\n SomeString varchar(100),\n SomeValue int\n']], ['Is there any reason to worry about the column order in a table?'], 2], [(894522, 1), [['The engine has to guess where SomeValue starts, because SomeString has an unknown length.  However, if you change the order to:'], ['Now the engine knows that SomeValue can be found 4 bytes after the start of the row. So column order can have a considerable performance impact.']], [['  SomeId int,\n SomeValue int,\n SomeString varchar(100)\n']], ['Is there any reason to worry about the column order in a table?'], 2], [(895018, 0), [['if this is a primary key:'], ['then a GROUP BY and HAVING should work, try this:']], [['  videos_categories: video_id, category_id\n']], ['SQL Many-to-Many Query Problem'], 2], [(895018, 1), [['then a GROUP BY and HAVING should work, try this:'], ['-10000']], [[' SELECT\n    * \n    FROM videos \n    WHERE video_id IN (SELECT \n                           video_id\n                           FROM videos_categories\n                           WHERE category_id IN (1,2,3)\n                           GROUP BY video_id\n                           HAVING COUNT(video_id)=3\n                      )\n']], ['SQL Many-to-Many Query Problem'], 2], [(895839, 0), [['Finally stumbled across the answer. The Oracle package UTL_I18N contains functions to map from the browser language codes to Oracle NLS settings:'], ["The mapping doesn't seem to cope very well with multi-language settings, e.g. en-us,en;q=0.5, but as long as you just use the first 5 characters the functions seem to work ok."]], [[' utl_i18n.map_language_from_iso;\nutl_i18n.map_territory_from_iso;\n']], ['Is there an easy way to convert HTTP_ACCEPT_LANGUAGE to Oracle NLS_LANG settings?'], 2], [(895839, 1), [["The mapping doesn't seem to cope very well with multi-language settings, e.g. en-us,en;q=0.5, but as long as you just use the first 5 characters the functions seem to work ok."], ['-10000']], [[' HTTP_ACCEPT_LANGUAGE: ar-lb,en-gb;q=0.5\nv_language: \nv_territory: \n\nHTTP_ACCEPT_LANGUAGE: ar-lb\nv_language: ARABIC\nv_territory: LEBANON\n']], ['Is there an easy way to convert HTTP_ACCEPT_LANGUAGE to Oracle NLS_LANG settings?'], 2], [(895876, 0), [['-10000'], ['You may find it useful to add']], [[' select list_id, address_id, count(*) as count\nfrom LIST_MEMBERSHIPS\ngroup by 1, 2\norder by 3 desc\n']], ['How can I count the non-unique combinations of values in MySQL?'], 2], [(895876, 1), [['You may find it useful to add'], ['-10000']], [[' having count > 1\n']], ['How can I count the non-unique combinations of values in MySQL?'], 2], [(896653, 0), [['An example:'], ['Or using the EXTRACT function:']], [[" SQL> create table t (col timestamp with time zone)\n  2  /\n\nTabel is aangemaakt.\n\nSQL> insert into t values (sysdate)\n  2  /\n\n1 rij is aangemaakt.\n\nSQL> select col\n  2       , to_char(col,'TZD') time_zone_daylight_info\n  3       , to_char(col,'TZH') time_zone_hour\n  4       , to_char(col,'TZM') time_zone_minute\n  5       , to_char(col,'TZR') time_zone_region\n  6    from t\n  7  /\n\nCOL                             TIME_Z TIM TI TIME_ZONE_REGION\n------------------------------- ------ --- -- --------------------------------\n22-05-09 09:12:33,000000 +02:00        +02 00 +02:00    \n\n1 rij is geselecteerd.\n"]], ['Extracting time zone from Oracle JDBC TIMEZONETZ object'], 2], [(896653, 1), [['Or using the EXTRACT function:'], ['Regards,\nRob.']], [[' SQL> select col\n  2       , extract(timezone_abbr from col)   time_zone_abbr\n  3       , extract(timezone_hour from col)   time_zone_hour\n  4       , extract(timezone_minute from col) time_zone_minute\n  5       , extract(timezone_region from col) time_zone_region\n  6    from t\n  7  /\n\nCOL                             TIME_ZONE_                         TIME_ZONE_HOUR                       TIME_ZONE_MINUTE\n------------------------------- ---------- -------------------------------------- --------------------------------------\nTIME_ZONE_REGION\n----------------------------------------------------------------\n22-05-09 09:15:24,000000 +02:00 UNK                                             2                                      0\nUNKNOWN\n\n\n1 rij is geselecteerd.\n']], ['Extracting time zone from Oracle JDBC TIMEZONETZ object'], 2], [(897096, 0), [['Use Format.'], ['You could try using the following format (ISO standard):']], [[' Debug.Print Format$(Now, "dd-mmm-yyyy")\n']], ['Date format in VB6'], 2], [(897096, 1), [['You could try using the following format (ISO standard):'], ['-10000']], [[' Debug.Pring Format$(Now, "yyyy-MM-dd")\n']], ['Date format in VB6'], 2], [(897780, 0), [['MS Access UPDATE sql statements cannot reference queries, but they can reference tables.  So the thing to do is store the query results into a table.'], ['Now you can use TempTable1 in an UPDATE query:']], [[' SELECT YourQuery.* \nINTO TempTable1\nFROM YourQuery\n']], ['MS-ACCESS: Deleting all rows except for top 1 and updating a table from a query'], 2], [(897780, 1), [['Now you can use TempTable1 in an UPDATE query:'], ['See  my answer to this question .']], [[' UPDATE TargetTable\nINNER JOIN TempTable1 ON TempTable1.TargetTableId = TargetTable.Id\nSET TargetTable.TargetField = TempTable1.SourceField\n']], ['MS-ACCESS: Deleting all rows except for top 1 and updating a table from a query'], 2], [(899203, 0), [['So for example a typical way is the following one:'], ['Then to find the last update time, you need to select "MAX(last_updated)" from each table you are tracking and take the greatest of those, e.g.:']], [[" CREATE FUNCTION stamp_updated() RETURNS TRIGGER LANGUAGE 'plpgsql' AS $$\nBEGIN\n  NEW.last_updated := now();\n  RETURN NEW;\nEND\n$$;\n-- repeat for each table you need to track:\nALTER TABLE sometable ADD COLUMN last_updated TIMESTAMP;\nCREATE TRIGGER sometable_stamp_updated\n  BEFORE INSERT OR UPDATE ON sometable\n  FOR EACH ROW EXECUTE PROCEDURE stamp_updated();\n"]], ['How do I find the last time that a PostgreSQL database has been updated?'], 5], [(899203, 1), [['Then to find the last update time, you need to select "MAX(last_updated)" from each table you are tracking and take the greatest of those, e.g.:'], ['For tables with a serial (or similarly-generated) primary key, you can try avoid the sequential scan to find the latest update time by using the primary key index, or you create indices on last_updated.']], [[' SELECT MAX(max_last_updated) FROM (\n  SELECT MAX(last_updated) AS max_last_updated FROM sometable\n  UNION ALL\n  SELECT MAX(last_updated) FROM someothertable\n) updates\n']], ['How do I find the last time that a PostgreSQL database has been updated?'], 5], [(899203, 2), [['For tables with a serial (or similarly-generated) primary key, you can try avoid the sequential scan to find the latest update time by using the primary key index, or you create indices on last_updated.'], ["An alternative approach to avoid adding 'updated' columns to each table is to have a central table to store update timestamps in. For example:"]], [[' -- get timestamp of row with highest id\nSELECT last_updated FROM sometable ORDER BY sometable_id DESC LIMIT 1\n']], ['How do I find the last time that a PostgreSQL database has been updated?'], 5], [(899203, 3), [["An alternative approach to avoid adding 'updated' columns to each table is to have a central table to store update timestamps in. For example:"], ['This will give you a table with a row for each table update: you can then just do:']], [[" CREATE TABLE update_log(table_name text PRIMARY KEY, updated timestamp NOT NULL DEFAULT now());\nCREATE FUNCTION stamp_update_log() RETURNS TRIGGER LANGUAGE 'plpgsql' AS $$\nBEGIN\n  INSERT INTO update_log(table_name) VALUES(TG_TABLE_NAME);\n  RETURN NEW;\nEND\n$$;\n-- Repeat for each table you need to track:\nCREATE TRIGGER sometable_stamp_update_log\n AFTER INSERT OR UPDATE ON sometable\n FOR EACH STATEMENT EXECUTE stamp_update_log();\n"]], ['How do I find the last time that a PostgreSQL database has been updated?'], 5], [(899203, 4), [['This will give you a table with a row for each table update: you can then just do:'], ["To get the last update time. (You could split this out by table if you wanted). This table will of course just keep growing: either create an index on 'updated' (which should make getting the latest one pretty fast) or truncate it periodically if that fits with your use case, (e.g. take an exclusive lock on the table, get the latest update time, then truncate it if you need to periodically check if changes have been made)."]], [[' SELECT MAX(updated) FROM update_log\n']], ['How do I find the last time that a PostgreSQL database has been updated?'], 5], [(900592, 0), [['So instead of '], ["You'd insert the Read() method like so:"]], [[' reader = sqlcmd.ExecuteReader()    \nresult = reader.GetString(0)\n']], ['SQL read data from table in vb'], 2], [(900592, 1), [["You'd insert the Read() method like so:"], ['-10000']], [[" reader = sqlcmd.ExecuteReader()    \nif reader.Read() then '' <<<<< newly inserted code\n    result = reader.GetString(0)\nend if\n"]], ['SQL read data from table in vb'], 2], [(902859, 0), [['-10000'], ["Because you cannot alias a table in a DELETE, you'll have to do something like this:"]], [[' SELECT *\nFROM TABLE AS A\nWHERE EXISTS (\n    SELECT *\n    FROM TABLE AS B\n    WHERE DATE_SUB(A.created_on, INTERVAL 5 SECOND) <= B.created_on\n        AND B.created_on < A.created_on\n)\n']], ['MySQL query to delete rows whose dates are close to another row'], 2], [(902859, 1), [["Because you cannot alias a table in a DELETE, you'll have to do something like this:"], ['There are a million ways to skins this cat using JOINs or whatever.  I think this one is the most clearly understandable, if a bit lengthy.']], [[' DELETE\nFROM   so902859\nWHERE   created_on IN (\n        SELECT  created_on\n        FROM   so902859 AS A\n        WHERE   EXISTS ( SELECT *\n                         FROM  so902859 AS B\n                         WHERE  DATE_SUB(A.created_on, INTERVAL 5 SECOND) <= B.created_on\n                                AND B.created_on < A.created_on ) )\n']], ['MySQL query to delete rows whose dates are close to another row'], 2], [(903993, 0), [['-10000'], ["the above query will return all the items in StorageItem table with it's name, now if you want to filter it to return only items for a specific item add where clause to be like"]], [[' Select a.ID, b.Name, a.Place\nfrom StorageItem a\ninner join Storage b\non (a.id = b.id)\n']], ['Delphi 2009, MyDAC and relational database'], 3], [(903993, 1), [["the above query will return all the items in StorageItem table with it's name, now if you want to filter it to return only items for a specific item add where clause to be like"], ['you can use where with parameters such as:']], [[' Select a.ID, b.Name, a.Place\nfrom StorageItem a\ninner join Storage b\non (a.id = b.id)\nwhere a.item_id = 1 -- place the item id here\n']], ['Delphi 2009, MyDAC and relational database'], 3], [(903993, 2), [['you can use where with parameters such as:'], ['and assign the query above to dbGrid']], [[" MyQuery.Sql.Text := ' Select a.ID, b.Name, a.Place from StorageItem a\n+ ' inner join Storage b on (a.id = b.id) '\n+ ' where a.item_id = :ItemNo ';\nMyQuery.ParamByName('ItemNo').asInteger := 1;\nMyQuery.Open;\n"]], ['Delphi 2009, MyDAC and relational database'], 3], [(904209, 0), [['The following dynamic query seems to work:'], ['P.S.2. If anyone wants to try his hands at this, here is a script to create the tables in this question:']], [[" declare @columnlist nvarchar(4000)\nselect @columnlist = IsNull(@columnlist + ', ', '') + '[' + PositionName + ']'\nfrom #Position\n\ndeclare @query nvarchar(4000)\nselect @query = '\n    select *\n    from (\n        select CategoryId, CategoryName, PositionName, \n                IsNull(COrder,0) as COrder\n        from #Position p\n        cross join #Category c\n        left join #CategoryPosition cp \n                on cp.pid = p.PositionId \n                and cp.cid = c.CategoryId\n    ) pv\n    PIVOT (max(COrder) FOR PositionName in (' + @columnlist + ')) as Y\n    ORDER BY CategoryId, CategoryName\n'\n\nexec sp_executesql @query\n"]], ['Join with dynamic pivot (version 2)'], 2], [(904209, 1), [['P.S.2. If anyone wants to try his hands at this, here is a script to create the tables in this question:'], ['-10000']], [[" set nocount on \n\nif object_id('tempdb..#Category') is not null drop table #Category\ncreate table #Category (\n    CategoryId int identity,\n    CategoryName varchar(50)\n)\n\ninsert into #Category (CategoryName) values ('Home')\ninsert into #Category (CategoryName) values ('Contact')\ninsert into #Category (CategoryName) values ('About')\n--insert into #Category (CategoryName) values ('News')\n\nif object_id('tempdb..#Position') is not null drop table #Position\ncreate table #Position (\n    PositionID int identity,\n    PositionName varchar(50)\n)\n\ninsert into #Position (PositionName) values ('Main menu')\ninsert into #Position (PositionName) values ('Left menu')\ninsert into #Position (PositionName) values ('Right menu')\n--insert into #Position (PositionName) values ('Bottom menu')\n\nif object_id('tempdb..#CategoryPosition') is not null \n    drop table #CategoryPosition\ncreate table #CategoryPosition (\n    CPID int identity,\n    CID int,\n    PID int,\n    COrder int\n)\n\ninsert into #CategoryPosition (CID, PID, COrder) values (1,1,1)\ninsert into #CategoryPosition (CID, PID, COrder) values (1,2,2)\ninsert into #CategoryPosition (CID, PID, COrder) values (1,3,3)\ninsert into #CategoryPosition (CID, PID, COrder) values (2,1,4)\ninsert into #CategoryPosition (CID, PID, COrder) values (2,3,5)\n"]], ['Join with dynamic pivot (version 2)'], 2], [(905379, 0), [['UNION  puts lines from queries after each other, while  JOIN  makes a cartesian product and subsets it -- completely different operations. Trivial example of  UNION :'], ['similary trivial example of  JOIN :']], [[' mysql> SELECT 23 AS bah\n    -> UNION\n    -> SELECT 45 AS bah;\n+-----+\n| bah |\n+-----+\n|  23 | \n|  45 | \n+-----+\n2 rows in set (0.00 sec)\n']], ['What is the difference between JOIN and UNION?'], 2], [(905379, 1), [['similary trivial example of  JOIN :'], ['-10000']], [[' mysql> SELECT * FROM \n    -> (SELECT 23 AS bah) AS foo \n    -> JOIN \n    -> (SELECT 45 AS bah) AS bar\n    -> ON (33=33);\n+-----+-----+\n| foo | bar |\n+-----+-----+\n|  23 |  45 | \n+-----+-----+\n1 row in set (0.01 sec)\n']], ['What is the difference between JOIN and UNION?'], 2], [(905689, 0), [['If so, try this:'], ["If all you're interested in is removing duplicates (if you only have one table), then there are several ways to do it, two of which are:"]], [[' SELECT DISTINCT page_title FROM a\nWHERE page_title NOT IN (SELECT page_title FROM b)\n']], ['Fast way to get the difference of 2 columns in MySQL'], 4], [(905689, 1), [["If all you're interested in is removing duplicates (if you only have one table), then there are several ways to do it, two of which are:"], ['or']], [[' SELECT DISTINCT page_title FROM a\n']], ['Fast way to get the difference of 2 columns in MySQL'], 4], [(905689, 2), [['or'], ['The GROUP BY option is stronger albeit slower - you can add a HAVING clause to choose only those titles that appear e.g. more than twice:']], [[' SELECT page_title FROM a\nGROUP BY page_title\n']], ['Fast way to get the difference of 2 columns in MySQL'], 4], [(905689, 3), [['The GROUP BY option is stronger albeit slower - you can add a HAVING clause to choose only those titles that appear e.g. more than twice:'], ['Hope that helps']], [[' SELECT page_title FROM a\nGROUP BY page_title\nHAVING COUNT(page_title) > 2\n']], ['Fast way to get the difference of 2 columns in MySQL'], 4], [(905818, 0), [['Try this'], ['Above code covers functionality for a single contact. You can create a scalar function with parameter @ContactID and call the function from a ']], [[" declare @Roles nvarchar(max)\n\nselect @Roles = case when @Roles is null then '' else @Roles + ', ' end + Role.Name\nfrom  Role\ninner join ContactRole on Role.ID = ContactRole.RoleID\nwhere ContactRole.ContactID = @ContactID\n\nselect @Roles \n"]], ['TSQL Comma Separation'], 2], [(905818, 1), [['Above code covers functionality for a single contact. You can create a scalar function with parameter @ContactID and call the function from a '], ['-10000']], [[' Select Name, dbo.GetContactRoles(ID) From Contact\n']], ['TSQL Comma Separation'], 2], [(906001, 0), [["It's possible your that when your original tables were created the creator did a"], ['Does']], [[' grant [permissions] on [table] to public\n']], ['ORACLE 7.3 user management'], 2], [(906001, 1), [['Does'], ['return anything?']], [[" select * from ALL_TAB_PRIVS where table_name = '[one of your problem tables]'\n"]], ['ORACLE 7.3 user management'], 2], [(906185, 0), [['You could try this:'], ['You can pimp the statement with CASE statements for more complex stuff']], [[' UPDATE\n    PREFERENCES\nSET\n    FK_IDSTRUCTURE = 3 - FK_IDSTRUCTURE\n']], ['Problematic delete with SQL index'], 2], [(906185, 1), [['You can pimp the statement with CASE statements for more complex stuff'], ['-10000']], [[' UPDATE\n    PREFERENCES\nSET\n    FK_IDSTRUCTURE = CASE FK_IDSTRUCTURE \n        WHEN 2 THEN 1 WHEN 1 THEN 2 ELSE FK_IDSTRUCTURE END\n']], ['Problematic delete with SQL index'], 2], [(906816, 0), [['You can build a SQL statement with a dynamic where clause:'], ['Or you can create a stored procedure with variables to do this:']], [[' string query = "SELECT * FROM TheTable WHERE 1=1 ";\nif (checkBlackOnly.Checked)\n    query += "AND Color = \'Black\' ";\nif (checkWhiteOnly.Checked)\n    query += "AND Color = \'White\' ";\n']], ['creating SQL command to return match or else everything else'], 2], [(906816, 1), [['Or you can create a stored procedure with variables to do this:'], ['-10000']], [[" CREATE PROCEDURE dbo.GetList\n    @CheckBlackOnly bit\n,   @CheckWhiteOnly bit\nAS\nSELECT *\nFROM TheTable\nWHERE\n    (@CheckBlackOnly = 0 or (@CheckBlackOnly = 1 AND Color = 'Black'))\n    AND (@CheckWhiteOnly = 0 or (@CheckWhiteOnly = 1 AND Color = 'White'))\n    ....\n"]], ['creating SQL command to return match or else everything else'], 2], [(907366, 0), [['You can do so with WITH:'], ['Or by creating a VIEW that contains the query, and joining on that:']], [[' WITH subquery AS(\n    SELECT * FROM TheTable\n) \nSELECT *\nFROM subquery q1\nJOIN subquery q2 on ...\n']], ['Self-join of a subquery'], 3], [(907366, 1), [['Or by creating a VIEW that contains the query, and joining on that:'], ['Or the brute force approach: type the subquery twice:']], [[' SELECT *\nFROM TheView v1\nJOIN TheView v2 on ...\n']], ['Self-join of a subquery'], 3], [(907366, 2), [['Or the brute force approach: type the subquery twice:'], ['-10000']], [[' SELECT *\nFROM (\n    SELECT * FROM TheTable\n) sub1\nLEFT JOIN (\n    SELECT * FROM TheTable\n) sub2 ON ...\n']], ['Self-join of a subquery'], 3], [(911145, 0), [['The ID on ClientDefinitionEntry with an INCLUDE for the processPath.'], ["I'd also change the query to the following."]], [[' CREATE INDEX [IX_ClientDefinitionEntry_Id_ProcessPath] ON [dbo].[ClientDefinitionEntry] ( [keywordGroupId] ASC ) INCLUDE ( [processPath]) ON [PRIMARY]\nCREATE INDEX [IX_KeywordValueGroups_Id] ON [dbo].[KeywordValueGroups] ( [keywordValueGrpId] ASC )\nCREATE INDEX [IX_KeywordValueGroups_Name] ON [dbo].[KeywordValueGroups] ( [name] ASC )\n']], ['SQL Optimization Query'], 2], [(911145, 1), [["I'd also change the query to the following."], ['-10000']], [[" select top 1\n    cde.processPath as 'keywordValue',\n    count(*) as 'total'\nfrom\n    dbo.ClientDefinitionEntry AS cde\nINNER JOIN\n    dbo.KeywordValueGroups  AS kvg\nON\n    cde.keywordGroupId = kvg.keywordValueGrpId\nwhere\n    kvg.[name] = @definitionName\ngroup by\n    processPath\norder by\n    total desc\n"]], ['SQL Optimization Query'], 2], [(911864, 0), [['You realize this is equivalent to this?:'], ["So it's really as simple as this:"]], [[' select *\nfrom (\n  with target_person as (\n    select \n      p.person_id,\n      p.family_number,\n      p.relationship_type_id\n    from \n      people p\n    where\n      p.relationship_type_id = 1 -- parent\n  )\n  select\n    target_person.person_id,\n    related_person.related_person_id,\n    related_person.relationship_type_id\n  from\n    target_person,\n    target_person related_person\n  where\n    target_person.person_id != related_person.person_id\n    and target_person.family_number = related_person.family_number\n);\n']], ['Help optimize an Oracle query?'], 2], [(911864, 1), [["So it's really as simple as this:"], ['I would think the way to get this to go fastest is to have an index on  relationship_type_id ,  family_number ,  person_id  on your people table.']], [[' SELECT *\nFROM people AS l\nINNER JOIN people AS r\nON l.family_number = r.family_number\n    AND l.relationship_type_id = 1\n    AND r.relationship_type_id = 1\n    AND l.person_id <> r.person_id\n']], ['Help optimize an Oracle query?'], 2], [(912057, 0), [["I'd suggest using:"], ['In soon to be released Postgresql 8.4 you can use windowing functions like this:']], [[' CHILD: PARENT_ID integer, CHILD_ID serial, DESCRIPTION character varying(50)\n']], ['How do you create an auto-incrementing revision number unique to a key in PGSQL?'], 2], [(912057, 1), [['In soon to be released Postgresql 8.4 you can use windowing functions like this:'], ['It is very fast, easy to implement and will scale very well as there will be no concurrency issues to worry about.']], [[' $ create table child (parent_id integer, child_id serial);\nNOTICE:  CREATE TABLE will create implicit sequence "child_child_id_seq" for serial column "child.child_id"\nCREATE TABLE\n\n$ insert into child (parent_id) values (1), (1), (1), (2), (3), (3);\n\n$ select * from child;\n parent_id | child_id \n-----------+----------\n         1 |        1\n         1 |        2\n         1 |        3\n         2 |        4\n         3 |        5\n         3 |        6\n(6 rows)\n\n$ select parent_id, row_number() over (partition by parent_id order by child_id) from child;\n parent_id | row_number \n-----------+------\n         1 |          1\n         1 |          2\n         1 |          3\n         2 |          1\n         3 |          1\n         3 |          2\n(6 rows)\n']], ['How do you create an auto-incrementing revision number unique to a key in PGSQL?'], 2], [(913684, 0), [['As you say you want  r_id  and  o_id  as the two output columns...:'], ['On MySQL 5.1 with your sample table:']], [[' SELECT r_id, o_id\nFROM t1 AS a\nWHERE r_id in (3, 5)\nAND count =\n  (SELECT MAX(count)\n   FROM t1 AS b\n   WHERE b.r_id = a.r_id\n  )\n']], ['MySql Group by'], 4], [(913684, 1), [['On MySQL 5.1 with your sample table:'], ['this query gives me exactly your requested result:']], [[' mysql> select * from t1;\n+------+------+------+-------+\n| id   | r_id | o_id | count |\n+------+------+------+-------+\n|    1 |    2 |  100 |     1 | \n|    2 |    3 |  100 |     1 | \n|    3 |    5 |  100 |     1 | \n|    4 |    2 |  101 |     2 | \n|    5 |    3 |  101 |     2 | \n|    6 |    4 |  101 |     2 | \n+------+------+------+-------+\n6 rows in set (0.00 sec)\n']], ['MySql Group by'], 4], [(913684, 2), [['this query gives me exactly your requested result:'], ['BTW, my exact version:']], [[' +------+------+\n| r_id | o_id |\n+------+------+\n|    5 |  100 | \n|    3 |  101 | \n+------+------+\n2 rows in set (0.31 sec)\n']], ['MySql Group by'], 4], [(913684, 3), [['BTW, my exact version:'], ['-10000']], [[' mysql> SELECT VERSION();\n+-----------+\n| VERSION() |\n+-----------+\n| 5.1.34    | \n+-----------+\n1 row in set (0.00 sec)\n']], ['MySql Group by'], 4], [(913932, 0), [['The date arithmetic is not entirely accurate due to datatype conversions here.'], ['But']], [[" TO_DATE('06/06/2009 16:00:00', 'DD/MM/YYYY HH24:MI:SS')\n- TO_DATE('06/06/2009 14:25:00', 'DD/MM/YYYY HH24:MI:SS'))\n= .0659722222222222222222222222222222222222000000000000000\n"]], ['Oracle Date Rounding'], 3], [(913932, 1), [['But'], ['To solve this problem, you need to be able to convert each date to an integer before performing arithmetic on it, e.g.:']], [[' .0659722222222222222222222222222222222222000000000000000\n* 1440\n=94.9999999999999999999999999999999999999700000000000\n']], ['Oracle Date Rounding'], 3], [(913932, 2), [['To solve this problem, you need to be able to convert each date to an integer before performing arithmetic on it, e.g.:'], ['-10000']], [[" select FLOOR((TO_CHAR(TO_DATE('06/06/2009 16:00:00', 'DD/MM/YYYY HH24:MI:SS'),'J') * 1440\n+ TO_CHAR(TO_DATE('06/06/2009 16:00:00', 'DD/MM/YYYY HH24:MI:SS'),'SSSSS') / 60)\n- (TO_CHAR(TO_DATE('06/06/2009 14:25:00', 'DD/MM/YYYY HH24:MI:SS'),'J') * 1440\n+ TO_CHAR(TO_DATE('06/06/2009 14:25:00', 'DD/MM/YYYY HH24:MI:SS'),'SSSSS') / 60))\nfrom dual;\n"]], ['Oracle Date Rounding'], 3], [(916367, 0), [['-10000'], ['Nested sets :']], [[' SELECT  *\nFROM    mytable\nWHERE   group IN\n        (\n        SELECT  typeid\n        FROM    group_types\n        START WITH\n                typeid = 1\n        CONNECT BY\n                parent = PRIOR typeid\n        )\n']], ['database model structure'], 2], [(916367, 1), [['Nested sets :'], ['will select all buyers in any database.']], [[' SELECT  *\nFROM    group_types\nJOIN    mytable\nON      group BETWEEN lower AND upper\nWHERE   typeid = 1\n']], ['database model structure'], 2], [(916789, 0), [['-10000'], ['If you only need to update the  @lucky  and the ex-champion, issue the following:']], [[" UPDATE people\nSET    prize = CASE WHEN id = @lucky THEN 'Gold' ELSE 'Silver' END\nWHERE  class = (\n       SELECT  class\n       FROM    people\n       WHERE   id = @lucky\n       )\n"]], ['mysql nested SELECT in UPDATE of same table'], 2], [(916789, 1), [['If you only need to update the  @lucky  and the ex-champion, issue the following:'], ['-10000']], [[" UPDATE people\nSET    prize = CASE WHEN id = @lucky THEN 'Gold' ELSE 'Silver' END\nWHERE  id = @lucky\n       OR (class, prize) =\n       (\n       SELECT  class, 'Gold'\n       FROM    people\n       WHERE   id = @lucky\n       )\n"]], ['mysql nested SELECT in UPDATE of same table'], 2], [(917062, 0), [['you could use a user-defined function like:'], ['then']], [[' create FUNCTION [dbo].[udfStrippedTime]\n(\n    @dt datetime\n)\nRETURNS varchar(32)\nAS\nBEGIN\n    declare @t varchar(32)\n    set @t = convert( varchar(32), @dt, 108 )\n    set @t = left(@t,2) + substring(@t,4,2)\n\n    RETURN @t\nEND\n']], ['Is there a better way to convert SQL datetime from hh:mm:ss to hhmmss?'], 2], [(917062, 1), [['then'], ['the logic for the seconds is left as an exercise for the reader']], [[' select dbo.udfStrippedTime(GETDATE())\n']], ['Is there a better way to convert SQL datetime from hh:mm:ss to hhmmss?'], 2], [(917431, 0), [['If you mean SQL Server 2005 or higher, use sys.objects instead of sysobjects:'], ['2005 introduced schemas. up to 2000, users equaled schemas. The same query for SQL Server 2000:']], [[' SELECT  sys.objects.name, sys.schemas.name AS schema_name\nFROM    sys.objects \nINNER JOIN sys.schemas ON sys.objects.schema_id = sys.schemas.schema_id\n']], ['SQL Server - Return SCHEMA for sysobjects'], 2], [(917431, 1), [['2005 introduced schemas. up to 2000, users equaled schemas. The same query for SQL Server 2000:'], ['-10000']], [[' SELECT  sysusers.name AS OwnerName, sysobjects.name\nFROM sysobjects\nINNER JOIN sysusers ON sysobjects.uid = sysusers.uid\n']], ['SQL Server - Return SCHEMA for sysobjects'], 2], [(917697, 0), [['If it is possible, I usually prefer  pure  SQL solutions that do not depend on the vendor-specific features. If what you need is similar to the example in the article you refer to, then this SQL statement should run pretty much on any RDBMS and produce the desired result:'], ['and by playing with  HAVING COUNT...  you are even more flexible:']], [[" -- //return those students that have correctly answered not less then 3 questions among A,B,C\nselect      studentName, COUNT(DISTINCT question) AS CNT\nfrom        quizAnswers\nwhere       question in ('A', 'B', 'C')\nGROUP BY    studentName\nHAVING COUNT(DISTINCT question) >= 3\n"]], ['Complete set in SQL'], 2], [(917697, 1), [['and by playing with  HAVING COUNT...  you are even more flexible:'], ['Basically you just need to fill  ...  in part  where question in (...)  and set the value of the COUNT(...), which by default would be the number of answers to check for a Complete Set.']], [[" -- //return those students that have correctly answered at least 1 question among A,B (either A or B)\nselect      studentName, COUNT(DISTINCT question) AS CNT\nfrom        quizAnswers\nwhere       question in ('A', 'B',)\nGROUP BY    studentName\nHAVING COUNT(DISTINCT question) >= 1\n"]], ['Complete set in SQL'], 2], [(921281, 0), [['The only thing I can think of (and I wracked by brains on this one, sorry mate) is to use repeated calls to instr, nested in iif statements e.g. to replace this call to inStrRev '], ["You'd have a compeltely insane"]], [[' SELECT IIf(InStr([FileName],""\\"")>0,Mid$([Filename],InStrRev([Filename],""\\"")+1),[Filename]) FROM Table1\n']], ['Awkward DAO string manipulation issue'], 3], [(921281, 1), [["You'd have a compeltely insane"], ["This will work for a path thats 10 or so sub folders deep.\nIf you think 10 sub folders is too little, I've a bit of vba to generate the statement to what ever depth you require."]], [[' SELECT IIf(InStr([FileName],""\\"")>0,Mid$([Filename],iif(InStr(1, [FileName], ""\\"") > 0, iif(InStr(2, [FileName], ""\\"") > 0, iif(InStr(3, [FileName], ""\\"") > 0, iif(InStr(4, [FileName], ""\\"") > 0, iif(InStr(5, [FileName], ""\\"") > 0, iif(InStr(6, [FileName], ""\\"") > 0, iif(InStr(7, [FileName], ""\\"") > 0, iif(InStr(8, [FileName], ""\\"") > 0, iif(InStr(9, [FileName], ""\\"") > 0, 1, InStr(9, [FileName], ""\\"")), InStr(8, [FileName], ""\\"")), InStr(7, [FileName], ""\\"")), InStr(6, [FileName], ""\\"")), InStr(5, [FileName], ""\\"")), InStr(4, [FileName], ""\\"")), InStr(3, [FileName], ""\\"")), InStr(2, [FileName], ""\\"")), InStr(1, [FileName], ""\\""))),[Filename]) from table1\n']], ['Awkward DAO string manipulation issue'], 3], [(921281, 2), [["This will work for a path thats 10 or so sub folders deep.\nIf you think 10 sub folders is too little, I've a bit of vba to generate the statement to what ever depth you require."], ['It is obscene, but should work']], [[' Function BuildNestedIIfs(ByVal depth As Integer, byval maxDepth as integer) As String\n    Dim locator As String\n    If depth < maxDepth Then\n        locator = "InStr(" & depth & ", [FileName], """"\\"""")"\n        Build = "iif(" & locator & " > 0, " & Build(depth + 1, maxDepth) & ", " & locator & ")"\n    Else\n       Build = "0"\n    End If\nEnd Function\n']], ['Awkward DAO string manipulation issue'], 3], [(923161, 0), [['-10000'], ['MS Access evidently needs a lot of parentheses (thanks, Ryan!):']], [[' SELECT c.CategoryNumber, c.Desc\nFROM   Category c\nWHERE NOT EXISTS\n(\nSELECT *\nFROM       Employees e\nINNER JOIN Sales     s on s.EmployeeID = e.EmployeeID\nINNER JOIN Media     m on m.MediaID    = s.MediaID\nWHERE e.Name = "Ryan"\nAND   m.CategoryNumber = c.CategoryNumber\n)\n']], ['SQL: Have 4 Tables, Looking to find unmatched data'], 2], [(923161, 1), [['MS Access evidently needs a lot of parentheses (thanks, Ryan!):'], ['-10000']], [[" select * \nfrom Category c \nwhere not exists \n( select * \nfrom (     Employee e \ninner join Sales    s on (s.EmployeeId = e.EmployeeId)) \ninner join Media    m on (m.MediaID    = s.MediaID) \nwhere (e.Name = 'Ryan' and m.CategoryNumber = c.CategoryNumber) )\n"]], ['SQL: Have 4 Tables, Looking to find unmatched data'], 2], [(924442, 0), [['Then you would do a join between these tables'], ['You could also use a case statement eg. just using the people table from above you could write something like']], [[' select people.name, sports.sport \nfrom people, sports \nwhere people.favsport = sports.ID\n']], ['SQL select replace integer with string'], 2], [(924442, 1), [['You could also use a case statement eg. just using the people table from above you could write something like'], ['But that is certainly not best practice.']], [[' select name, \n       case \n         when favsport = 1 then \'Basketball\' \n         when favsport = 2 then \'Football\' \n         when favsport = 3 then \'Soccer\' \n         else \'Kickball\' \n       end as "Sport" \nfrom people\n']], ['SQL select replace integer with string'], 2], [(926132, 0), [['-10000'], ['After other answer:']], [[' SELECT\n    CASE WHEN COUNT(DISTINCT city) = 1 THEN MAX(city) ELSE NULL END AS city,\n    CASE WHEN COUNT(DISTINCT state) = 1 THEN MAX(state) ELSE NULL END AS state,\n    CASE WHEN COUNT(DISTINCT zip) = 1 THEN MAX(zip) ELSE NULL END AS zip\nFROM Users\nWHERE ID IN(1,2,3,4,5,6)\n']], ['How can I select only common properties from a results set?'], 2], [(926132, 1), [['After other answer:'], ['-10000']], [[" SELECT\n    CASE WHEN COUNT(DISTINCT NULLIF(city,'**NULL**')) = 1 THEN MAX(city) ELSE NULL END AS city,\n    CASE WHEN COUNT(DISTINCT NULLIF(state,'**NULL**')) = 1 THEN MAX(state) ELSE NULL END AS state,\n    CASE WHEN COUNT(DISTINCT NULLIF(zip,'**NULL**')) = 1 THEN MAX(zip) ELSE NULL END AS zip\nFROM Users\nWHERE ID IN(1,2,3,4,5,6)\n"]], ['How can I select only common properties from a results set?'], 2], [(926933, 0), [['I found the answer - you can create the TO_DATE function in HyperSonic and then the second query works in both.  For example, make the class:'], ['And the query ']], [[' public class Date {\n    public static String toDate( String value, String format ) {\n        return value;\n    }\n}\n']], ['Oracle vs. Hypersonic SQL'], 2], [(926933, 1), [['And the query '], ['works in both.']], [[" SELECT * FROM foo WHERE date = TO_DATE('2009-09-09', 'yyyy-mm-dd')\n"]], ['Oracle vs. Hypersonic SQL'], 2], [(929055, 0), [['Those kinds of  IN  subqueries are a bit slow in MySQL. I would rephrase it like this:'], ['Also make sure you have an index on:']], [[" SELECT COUNT(1) AS signup_count, SUM(amount) AS signup_amount\nFROM   payments p\nWHERE  tm_completed BETWEEN '2009-05-01' AND '2009-05-30'\nAND    completed > 0\nAND    NOT EXISTS (\n           SELECT member_id\n           FROM   payments\n           WHERE  member_id = p.member_id\n           AND    completed = 1\n           AND    tm_completed < '2009-05-01');\n"]], ['Optimizing an embedded SELECT query in mySQL'], 2], [(929055, 1), [['Also make sure you have an index on:'], ['-10000']], [[' (tm_completed, completed)\n']], ['Optimizing an embedded SELECT query in mySQL'], 2], [(931730, 0), [['Django 1.1 (currently beta) adds  aggregation  support to the database API. Your query can be done like this:'], ['This generates the following SQL query:']], [[" from django.db.models import Max, F\n\nContract.objects.annotate(max_price=Max('market__contract__current_price')).filter(current_price=F('max_price')).select_related()\n"]], ['fetching single child row based on a max value using Django ORM'], 2], [(931730, 1), [['This generates the following SQL query:'], ['The API uses an extra join instead of a subquery (like your query does). It is difficult to tell which query is faster, especially without knowing the database system. I suggest that you do some benchmarks and decide.']], [[' SELECT contract.id, contract.name, contract.market_id, contract.current_price, MAX(T3.current_price) AS max_price, market.id, market.name\nFROM contract LEFT OUTER JOIN market ON (contract.market_id = market.id) LEFT OUTER JOIN contract T3 ON (market.id = T3.market_id)\nGROUP BY contract.id, contract.name, contract.market_id, contract.current_price, market.id, market.name\nHAVING contract.current_price =  MAX(T3.current_price)\n']], ['fetching single child row based on a max value using Django ORM'], 2], [(932001, 0), [['This would query the daily maximum of value over 2008:'], ['Or the daily maximum over each year:']], [[" select \n    datepart(dayofyear,datecolumn)\n,   max(value)\nfrom yourtable\nwhere '2008-01-01' <= datecolumn and datecolumn < '2009-01-01'\ngroup by datepart(dayofyear,datecolumn)\n"]], ['How do I get a maximium daily value of a numerical field over a year in SQL'], 3], [(932001, 1), [['Or the daily maximum over each year:'], ['Or the day(s) with the highest value in a year:']], [[' select \n    datepart(year,datecolumn), \n,   datepart(dayofyear,datecolumn)\n,   max(value)\nfrom yourtable\ngroup by datepart(year,datecolumn), datepart(dayofyear,datecolumn)\n']], ['How do I get a maximium daily value of a numerical field over a year in SQL'], 3], [(932001, 2), [['Or the day(s) with the highest value in a year:'], ['-10000']], [[' select \n    Year = datepart(year,datecolumn),\n,   DayOfYear = datepart(dayofyear,datecolumn)\n,   MaxValue = max(MaxValue)\nfrom yourtable\ninner join (\n    select \n        Year = datepart(year,datecolumn), \n    ,   MaxValue = max(value)\n    from yourtable\n    group by datepart(year,datecolumn)\n) sub on \n    sub.Year = yourtable.datepart(year,datecolumn)\n    and sub.MaxValue = yourtable.value\ngroup by \n    datepart(year,datecolumn),\n    datepart(dayofyear,datecolumn)\n']], ['How do I get a maximium daily value of a numerical field over a year in SQL'], 3], [(932411, 0), [['The line that defines $cookie_domain needs to be replaced with a conditional on the server name, to prevent logins from going freaking crazy.:'], ['Soo, the solution is to make sure the paths map.  Do you possibly have sufficient access to implement an Apache VirtualHost on the site you want to test on? If so then you can add a virtualhost entry like this:']], [[" if(preg_match('/dev/i', $_SERVER['SERVER_NAME'])) {\n    $cookie_domain = 'dev.blah.net';\n} else {\n    $cookie_domain = 'www.blah.net';\n}\n"]], ['How to develop drupal site on local server or on test server before publishing it'], 2], [(932411, 1), [['Soo, the solution is to make sure the paths map.  Do you possibly have sufficient access to implement an Apache VirtualHost on the site you want to test on? If so then you can add a virtualhost entry like this:'], ['Another note is that while you can maintain seperate templates and physicall files without any problem, if you change the configuration through the admin panel, those settings are stored in the database, and so will take effect on all installs sharing the database.  Blocks are a typical example of this problem, since they are stored on the database.']], [[' <VirtualHost dev.blah.net:80>\n        ServerName dev.blah.net\n        ServerAlias blah.net\n\n        DirectoryIndex index.php\n\n        #change this to the path to the drupal install\n        DocumentRoot /www/htdocs/ \n\n        <Directory "/www/htdocs">\n                ## Allow CGI and Symbolic Links\n                Options +FollowSymLinks +ExecCGI\n\n                # NOTE - The FileInfo override allows rewrites to work in htaccess files\n                AllowOverride All\n\n                Order allow,deny\n                Allow from all\n        </Directory>\n\n</VirtualHost>\n']], ['How to develop drupal site on local server or on test server before publishing it'], 2], [(933040, 0), [["I'm not familiar with pre-SQL92 syntax, so I'll express it in a way that I'm familiar with:"], ["What database engine are you using?  In SQL Server, at least, there's no need for a join unless you're pulling more data from the posts table.  With a join:"]], [[' SELECT c.comment_post_ID, COUNT(c.comment_ID)\nFROM wp_comments c\nGROUP BY c.comment_post_ID\nORDER BY COUNT(c.comment_ID) -- ASC or DESC\n']], ["SQL Join and Count can't GROUP BY correctly?"], 2], [(933040, 1), [["What database engine are you using?  In SQL Server, at least, there's no need for a join unless you're pulling more data from the posts table.  With a join:"], ['-10000']], [[' SELECT p.ID, COUNT(c.comment_ID)\nFROM wp_posts p\nJOIN wp_comments c ON c.comment_post_ID = p.ID\nGROUP BY p.ID\nORDER BY COUNT(c.comment_ID)\n']], ["SQL Join and Count can't GROUP BY correctly?"], 2], [(933783, 0), [['A query that selects only a few fields can run completely on an index.  For example, if you have an index on (OrderId) this query would require a table lookup:'], ['A sort on multiple columns can benefit from a composite index.  For example, an index on (LastName, FirstName) would benefit this query:']], [[' select Status from Orders where OrderId = 42\n']], ['When to use composite indexes?'], 2], [(933783, 1), [['A sort on multiple columns can benefit from a composite index.  For example, an index on (LastName, FirstName) would benefit this query:'], ['Sometimes you have a unique constrant on multiple columns.  Say for example that you restart order numbers every day.  Then OrderNumber is not unique, but (OrderNumber, OrderDayOfYear) is.  You can enforce that with a unique composite index.']], [[' select * from Orders order by LastName, FirsName\n']], ['When to use composite indexes?'], 2], [(934206, 0), [['Soemthing like this would work on MS SQL Server:'], ['ADditionally, you could also add this functionality to your table as a "computed column" and then use that for easy acccess:']], [[' select \n    distinct \n    dateadd(day, -1 * DAY(datefield) + 1, datefield)\nFrom\n    datetable\norder by\n    dateadd(day, -1 * DAY(datefield) + 1, datefield) \n']], ['sort distinct date column'], 3], [(934206, 1), [['ADditionally, you could also add this functionality to your table as a "computed column" and then use that for easy acccess:'], ['Then your query would be even simpler:']], [[' alter table yourTable \n  add FirstOfMonth As DATEADD(day, -1 * DAY(datefield) + 1, datefield) persisted\n']], ['sort distinct date column'], 3], [(934206, 2), [['Then your query would be even simpler:'], ['Marc']], [[' SELECT DISTINCT FirstOfMonth\nFROM YourTable\nORDER BY FirstOfMonth\n']], ['sort distinct date column'], 3], [(934579, 0), [['SQL Server :'], ['Oracle :']], [[' SELECT  NEWID()\n']], ['Create hexadecimal number in SQL'], 3], [(934579, 1), [['Oracle :'], ['MySQL :']], [[' SELECT  SYS_GUID()\nFROM    dual\n']], ['Create hexadecimal number in SQL'], 3], [(934579, 2), [['MySQL :'], ["In  PostgreSQL , you'll have to use an external function, though it has  UUID  type."]], [[' SELECT  UUID()\n']], ['Create hexadecimal number in SQL'], 3], [(934779, 0), [['Django 1.1 (currently beta) adds  aggregation  support. Your query can be done with something like:'], ['The generated query is:']], [[" from django.db.models import Max\nPeople.objects.annotate(max_weight=Max('roles__weight')).order_by('-max_weight')\n"]], ['Django: Order a model by a many-to-many field'], 2], [(934779, 1), [['The generated query is:'], ['-10000']], [[' SELECT people.id, people.name, MAX(role.weight) AS max_weight\nFROM people LEFT OUTER JOIN people_roles ON (people.id = people_roles.people_id)\n            LEFT OUTER JOIN role ON (people_roles.role_id = role.id)\nGROUP BY people.id, people.name\nORDER BY max_weight DESC\n']], ['Django: Order a model by a many-to-many field'], 2], [(935252, 0), [['By default, if you have an identity column, you do  not  need to specify it in the VALUES section.  If your table is:'], ['Then you can do:']], [[' ID    NAME    ADDRESS\n']], ['Handling identity columns in an "Insert Into TABLE Values()" statement?'], 2], [(935252, 1), [['Then you can do:'], ["This will auto-generate the ID for you, and you don't have to think about it at all.  If you  SET IDENTITY_INSERT MyTbl ON , you can assign a value to the ID column."]], [[" INSERT INTO MyTbl VALUES ('Joe', '123 State Street, Boston, MA')\n"]], ['Handling identity columns in an "Insert Into TABLE Values()" statement?'], 2], [(935556, 0), [['not mysqldump, but mysql cli...'], ['you can redirect it out to a file if you want :']], [[' mysql -e "select * from myTable" -u myuser -pxxxxxxxxx mydatabase\n']], ['MySQL dump by query'], 3], [(935556, 1), [['you can redirect it out to a file if you want :'], ['Update: \nOriginal post asked if he could dump from the database by query. What he asked and what he meant were different. He really wanted to just mysqldump all tables.']], [[' mysql -e "select * from myTable" -u myuser -pxxxxxxxx mydatabase > mydumpfile.txt\n']], ['MySQL dump by query'], 3], [(935556, 2), [['Update: \nOriginal post asked if he could dump from the database by query. What he asked and what he meant were different. He really wanted to just mysqldump all tables.'], ['-10000']], [[' mysqldump --tables myTable --where="id < 1000"\n']], ['MySQL dump by query'], 3], [(936178, 0), [['Full-text indexes are different from normal indexes. Consider these two seemingly equivalent where clauses:'], ['On the other hand, this will work with a normal index, but ignores any available full-text index:']], [[" WHERE [mycolumn] LIKE '%' + @MyValue + '%'\n\nWHERE CONTAINS([mycolumn], @MyValue)\n"]], ['SQL Server Index on VarChar(50) - Is this fulltext? Or what?'], 2], [(936178, 1), [['On the other hand, this will work with a normal index, but ignores any available full-text index:'], ["Normal indexes work because they are  ordered .  When you go to lookup a value in the index, you can use a binary search, b*-tree, or similar algorithm to more-quickly find or reject your match, and when comparing for a join or range the server can 'walk' the index to efficiently check a number of values.  "]], [[" WHERE [mycolumn] LIKE @MyValue + '%'\n"]], ['SQL Server Index on VarChar(50) - Is this fulltext? Or what?'], 2], [(937271, 0), [['In other words, this:'], ['Will not set the current database permanently, but if you altered the above code like this:']], [[" DECLARE @db VARCHAR(100)\nSET @db = 'SweetDB'\nEXECUTE('use ' + @db)\n"]], ['Is there a way to select a database from a variable?'], 2], [(937271, 1), [['Will not set the current database permanently, but if you altered the above code like this:'], ["Then the result of those two queries will be different (assuming you're not in SweetDB already), since the first select, executed inside  execute  is executing in SweetDB, but the second isn't."]], [[" DECLARE @db VARCHAR(100)\nSET @db = 'SweetDB'\nEXECUTE('use ' + @db + ';select * from sysobjects')\nselect * from sysobjects\n"]], ['Is there a way to select a database from a variable?'], 2], [(937964, 0), [['Here is an example of how to do such a query:'], ['And then the query:']], [[" SQL> create table t (site_id,start_date,end_date)\n  2  as\n  3  select 1, date '2008-10-01', date '2008-10-02' from dual union all\n  4  select 1, date '2008-10-02', date '2008-10-03' from dual union all\n  5  select 1, date '2008-10-03', date '2008-10-30' from dual union all\n  6  select 1, date '2008-10-30', date '2008-10-31' from dual union all\n  7  select 2, date '2008-10-01', date '2008-10-02' from dual union all\n  8  select 2, date '2008-10-02', date '2008-10-03' from dual union all\n  9  select 2, date '2008-10-03', date '2008-10-04' from dual union all\n 10  select 2, date '2008-10-04', date '2008-10-05' from dual union all\n 11  select 2, date '2008-10-05', date '2008-10-06' from dual union all\n 12  select 2, date '2008-10-06', date '2008-10-07' from dual union all\n 13  select 2, date '2008-10-07', date '2008-10-08' from dual union all\n 14  select 2, date '2008-10-08', date '2008-10-09' from dual union all\n 15  select 2, date '2008-10-09', date '2008-10-10' from dual union all\n 16  select 2, date '2008-10-10', date '2008-10-11' from dual union all\n 17  select 2, date '2008-10-11', date '2008-10-12' from dual union all\n 18  select 2, date '2008-10-12', date '2008-10-13' from dual union all\n 19  select 2, date '2008-10-13', date '2008-10-14' from dual union all\n 20  select 2, date '2008-10-14', date '2008-10-15' from dual union all\n 21  select 2, date '2008-10-15', date '2008-10-16' from dual union all\n 22  select 2, date '2008-10-16', date '2008-10-17' from dual union all\n 23  select 2, date '2008-10-17', date '2008-10-18' from dual union all\n 24  select 2, date '2008-10-18', date '2008-10-19' from dual union all\n 25  select 2, date '2008-10-19', date '2008-10-20' from dual union all\n 26  select 3, date '2008-10-01', date '2008-10-02' from dual union all\n 27  select 3, date '2008-10-02', date '2008-10-03' from dual union all\n 28  select 3, date '2008-10-03', date '2008-10-04' from dual union all\n 29  select 3, date '2008-10-04', date '2008-10-05' from dual union all\n 30  select 3, date '2008-10-05', date '2008-10-06' from dual union all\n 31  select 3, date '2008-10-06', date '2008-10-07' from dual union all\n 32  select 3, date '2008-10-07', date '2008-10-08' from dual union all\n 33  select 3, date '2008-10-08', date '2008-10-09' from dual union all\n 34  select 3, date '2008-10-09', date '2008-10-10' from dual union all\n 35  select 3, date '2008-10-30', date '2008-10-31' from dual\n 36  /\n\nTabel is aangemaakt.\n"]], ['How can I efficiently query for contiguous sets of dates in my data set?'], 3], [(937964, 1), [['And then the query:'], ['And the results:']], [[' SQL> select site_id\n  2       , min(start_date) contiguous_start_date\n  3       , max(end_date) contiguous_end_date\n  4       , count(*) number_of_contiguous_records\n  5    from ( select site_id\n  6                , start_date\n  7                , end_date\n  8                , max(rn) over (partition by site_id order by start_date) maxrn\n  9             from ( select site_id\n 10                         , start_date\n 11                         , end_date\n 12                         , case lag(end_date) over (partition by site_id order by start_date)\n 13                             when start_date then null\n 14                             else rownum\n 15                           end rn\n 16                      from t\n 17                  )\n 18          )\n 19   group by site_id\n 20       , maxrn\n 21   order by site_id\n 22       , contiguous_start_date\n 23  /\n']], ['How can I efficiently query for contiguous sets of dates in my data set?'], 3], [(937964, 2), [['And the results:'], ['Regards,\nRob.']], [['    SITE_ID CONTIGUOUS_START_DA CONTIGUOUS_END_DATE NUMBER_OF_CONTIGUOUS_RECORDS\n---------- ------------------- ------------------- ----------------------------\n         1 01-10-2008 00:00:00 31-10-2008 00:00:00                            4\n         2 01-10-2008 00:00:00 20-10-2008 00:00:00                           19\n         3 01-10-2008 00:00:00 10-10-2008 00:00:00                            9\n         3 30-10-2008 00:00:00 31-10-2008 00:00:00                            1\n\n4 rijen zijn geselecteerd.\n']], ['How can I efficiently query for contiguous sets of dates in my data set?'], 3], [(938232, 0), [["Here's an attempt at PIVOT:"], ["Given that it's just two columns, could try with a join:"]], [[' select *\nfrom YourTable\nPIVOT (sum(amount) FOR Method in (Cash,Check)) as Y\n']], ['SQL Pivot on subset'], 2], [(938232, 1), [["Given that it's just two columns, could try with a join:"], ['-10000']], [[" select\n    type\n,   cash = a.amount\n,   check = b.amount\nfrom yourtable a\nfull join yourtable b on a.type = b.type\nwhere a.method = 'cash' or b.method = 'Check'\n"]], ['SQL Pivot on subset'], 2], [(938357, 0), [['You can convert the char(1) to its ascii number using'], ['You can then increment this by one and return it to a letter using CHAR (if necessary), so your code would be this:']], [[' ASCII(Letter)\n']], ['Using TSQL, can I increment a CHAR(1) column by one and use it in a LEFT OUTER JOIN without a CASE statement?'], 2], [(938357, 1), [['You can then increment this by one and return it to a letter using CHAR (if necessary), so your code would be this:'], ['-10000']], [[' SELECT * from TABLE1 t1 \nLEFT OUTER JOIN TABLE2 t2 \n      ON ASCII(t1.INTCol) - 1 = ASCII(t2.INTCol) \n      AND t1.date = t2.date\nWHERE t2.id IS NULL\n']], ['Using TSQL, can I increment a CHAR(1) column by one and use it in a LEFT OUTER JOIN without a CASE statement?'], 2], [(940287, 0), [['ColdFusion does not escape  all  single quotes, but only those that arrive in the query through variable interpolation. This is the offender:'], ['If you  positively have to  use variables to build an SQL string, despite all the possible negative effects, use the  PreserveSingleQuotes()  function:']], [[' SELECT #Arguments.strSelectAttributes#\n']], ['How to override SQL sanitization in ColdFusion'], 3], [(940287, 1), [['If you  positively have to  use variables to build an SQL string, despite all the possible negative effects, use the  PreserveSingleQuotes()  function:'], ['And any other function call does the same thing, by the way. Try:']], [[' SELECT #PreserveSingleQuotes(Arguments.strSelectAttributes)#\n']], ['How to override SQL sanitization in ColdFusion'], 3], [(940287, 2), [['And any other function call does the same thing, by the way. Try:'], ['which means that PreserveSingleQuotes() is really just a no-op that turns a string into a function result, preventing the automatic variable interpolation routine from happening.']], [[' SELECT #LCase(Arguments.strSelectAttributes)#\n']], ['How to override SQL sanitization in ColdFusion'], 3], [(942606, 0), [['If your db support output clause on UPDATE (eg. SQL Server 2K5 or 2K8):'], ['otherwise:']], [[' UPDATE table\n   SET count = count + 1\n   OUTPUT inserted.count\n   WHERE id=@id;\n']], ['Update a count (field) safely in SQL'], 2], [(942606, 1), [['otherwise:'], ['-10000']], [[' begin transaction\nupdate table \n    set counter=counter+1\n    where id=@id;\nselect counter\n    from table\n    where id=@id;\ncommit;\n']], ['Update a count (field) safely in SQL'], 2], [(944160, 0), [['-10000'], ['Same thing with groups:']], [[" WITH hier(cnt) AS\n        (\n        SELECT  1\n        UNION ALL\n        SELECT  cnt + 1\n        FROM    hier\n        WHERE   cnt <= 100\n        )\nSELECT  CASE WHEN ROW_NUMBER() OVER (ORDER BY id) = 1 THEN ref ELSE ' / ' + SUBSTRING(ref, mc + 1, LEN(ref)) END \nFROM    (\n        SELECT  MIN(common) AS mc\n        FROM    (\n                SELECT  (\n                        SELECT  MAX(cnt)\n                        FROM    hier\n                        WHERE   SUBSTRING(initref, 1, cnt) = SUBSTRING(ref, 1, cnt)\n                                AND cnt <= LEN(ref)\n                        ) AS common\n                FROM    (\n                        SELECT  TOP 1 ref AS initref\n                        FROM    tableA\n                        ) i,\n                        tableA\n                ) q\n        ) q2, tableA\nFOR XML PATH('')\n\n---\n\n3536757616 / 17 / 18 / 28 / 29 / 30\n"]], ['TSQL query to concatenate and remove common prefix'], 2], [(944160, 1), [['Same thing with groups:'], ['-10000']], [[" WITH hier(cnt) AS\n        (\n        SELECT  1\n        UNION ALL\n        SELECT  cnt + 1\n        FROM    hier\n        WHERE   cnt <= 100\n        )\nSELECT  (\n        SELECT  CASE WHEN ROW_NUMBER() OVER (ORDER BY a2.ref) = 1 THEN ref ELSE ' / ' + SUBSTRING(ref, mc + 1, LEN(ref)) END \n        FROM    tableA a2\n        WHERE   a2.id = q2.id\n        FOR XML PATH('')\n        )\nFROM    (\n        SELECT  id, MIN(common) AS mc\n        FROM    (\n                SELECT  a.id,\n                        (\n                        SELECT  MAX(cnt)\n                        FROM    hier\n                        WHERE   SUBSTRING(i.initref, 1, cnt) = SUBSTRING(a.ref, 1, cnt)\n                                AND cnt <= LEN(ref)\n                        ) AS common\n                FROM    (\n                        SELECT  id, MIN(ref) AS initref\n                        FROM    tableA\n                        GROUP BY\n                                id\n                        ) i\n                JOIN    tableA a\n                ON      i.id = a.id\n                ) q\n        GROUP BY\n                id\n        ) q2\n---\n3536757616 / 7 / 8\n3536757628 / 29 / 30\n"]], ['TSQL query to concatenate and remove common prefix'], 2], [(944629, 0), [['-10000'], ['If you want to order by Position Descending while maintaining nulls at the bottom, this will do it:']], [[' SELECT ProductName\nFROM Products\nORDER BY\n  CASE WHEN Position is null THEN 1 ELSE 0 END,\n  Position\n']], ['Order by integer with blank fields at the bottom'], 3], [(944629, 1), [['If you want to order by Position Descending while maintaining nulls at the bottom, this will do it:'], ['If you want consistent sorting (you might be paging), then add ProductName or ProductID on the end to break all the ties between unpositioned products.']], [[' ORDER BY\n  CASE WHEN Position is null THEN 1 ELSE 0 END,\n  Position desc\n']], ['Order by integer with blank fields at the bottom'], 3], [(944629, 2), [['If you want consistent sorting (you might be paging), then add ProductName or ProductID on the end to break all the ties between unpositioned products.'], ['-10000']], [[' ORDER BY\n  CASE WHEN Position is null THEN 1 ELSE 0 END,\n  Position,\n  ProductID\n']], ['Order by integer with blank fields at the bottom'], 3], [(946127, 0), [['Supposing you had:'], ['Then you could do:']], [[' public class Foo\n{\n  public int id {get;set;}\n  public string name {get;set;}\n  public string colour {get;set;}\n}\n\npublic class Bar\n{\n  public int id {get;set;}\n  public List<Foo> Foos {get;set;}\n}\n']], ['Query a recordset from an existing query Linq To Sql'], 2], [(946127, 1), [['Then you could do:'], ['-10000']], [[' //executes the query and pulls the results into memory\nList<Foo> aBunchOfFoos =\n(\n  from foo in db.Foos\n  where foo.colour == "white"\n  select foo\n).ToList();\n\n// query those objects and produce another structure.\n//  no database involvement\nList<Bar> aBunchOfBars =  aBunchOfFoos\n  .GroupBy(foo => foo.id)\n  .Select(g => new Bar(){id = g.Key, Foos = g.ToList() })\n  .ToList();\n']], ['Query a recordset from an existing query Linq To Sql'], 2], [(946899, 0), [["Here's one approach:"], ['Oracle 8i does support the CASE expression, doesn\'t it?  Oracle 8 didn\'t, if I recall correctly.  We can go "old school" to do the same thing with the DECODE function:']], [[' select t.type                                          as "Type"\n     , sum(case when t.status = \'A\' then 1 else 0 end) as "Count A"\n     , sum(case when t.status = \'I\' then 1 else 0 end) as "Count I"\n     , sum(case when t.status = \'F\' then 1 else 0 end) as "Count F"\n  from my_table t\n group by t.type\n order by t.type desc\n']], ['Oracle 8i Query Help'], 3], [(946899, 1), [['Oracle 8i does support the CASE expression, doesn\'t it?  Oracle 8 didn\'t, if I recall correctly.  We can go "old school" to do the same thing with the DECODE function:'], ['Sometimes, we want to check more than one type condition, and include a row in more than one count.  We can get a total ']], [[' select t.type                        as "Type"\n     , sum(decode(t.status,\'A\',1,0)) as "Count A"\n     , sum(decode(t.status,\'I\',1,0)) as "Count I"\n     , sum(decode(t.status,\'F\',1,0)) as "Count F"\n  from my_table t\n group by t.type\n order by t.type DESC\n']], ['Oracle 8i Query Help'], 3], [(946899, 2), [['Sometimes, we want to check more than one type condition, and include a row in more than one count.  We can get a total '], ['(Just to point out, it\'s possible for a row to satisfy the specified criteria for multiple columns, and so it could be "counted" more than once.  Sometimes, that\'s exactly what we want.)']], [[' select t.type                                             as "Type"\n     , sum(case when t.status in (\'A\') then 1 else 0 end) as "Count A"\n     , sum(case when t.status in (\'I\') then 1 else 0 end) as "Count I"\n     , sum(case when t.status in (\'F\') then 1 else 0 end) as "Count F"\n     , sum(case when t.status in (\'A\',\'I\') then 1 else 0 end) as "#AI"\n     , sum(decode(sign(t.foo-t.bar),1,1,0))               as "#foo>bar"\n     , sum(decode(sign(10.0-t.foo),1,1,0))                as "#foo<10"\n  from my_table t\n group by t.type\n order by t.type desc\n']], ['Oracle 8i Query Help'], 3], [(948553, 0), [['As a general rule of thumb: if your index fragmentation is below 5%, all is fine. If you have fragmentation between 5% and approx. 30%, you should do an index reorganization:'], ['If your index has index fragmentation of more than 30%, you need to rebuild it completely:']], [[' ALTER INDEX (your index name) ON (your table name) REORGANIZE\n']], ['Index Maintenance'], 3], [(948553, 1), [['If your index has index fragmentation of more than 30%, you need to rebuild it completely:'], ['In order to determine index fragmentation, you can use this DMV query:']], [[' ALTER INDEX (your index name) ON (your table name) REBUILD\n']], ['Index Maintenance'], 3], [(948553, 2), [['In order to determine index fragmentation, you can use this DMV query:'], ['Michelle Ufford has a great automatic  index defrag script  - highly recommended! Or then you should look into setting up  SQL Server maintenance plans  which can run e.g. every night and clean up your indices.']], [[" SELECT \n    t.NAME 'Table name',\n    i.NAME 'Index name',\n    ips.index_type_desc,\n    ips.alloc_unit_type_desc,\n    ips.index_depth,\n    ips.index_level,\n    ips.avg_fragmentation_in_percent,\n    ips.fragment_count,\n    ips.avg_fragment_size_in_pages,\n    ips.page_count,\n    ips.avg_page_space_used_in_percent,\n    ips.record_count,\n    ips.ghost_record_count,\n    ips.Version_ghost_record_count,\n    ips.min_record_size_in_bytes,\n    ips.max_record_size_in_bytes,\n    ips.avg_record_size_in_bytes,\n    ips.forwarded_record_count\nFROM \n    sys.dm_db_index_physical_stats(DB_ID(), NULL, NULL, NULL, 'DETAILED') ips\nINNER JOIN  \n    sys.tables t ON ips.OBJECT_ID = t.Object_ID\nINNER JOIN  \n    sys.indexes i ON ips.index_id = i.index_id AND ips.OBJECT_ID = i.object_id\nWHERE\n    AVG_FRAGMENTATION_IN_PERCENT > 0.0\nORDER BY\n    AVG_FRAGMENTATION_IN_PERCENT, fragment_count\n"]], ['Index Maintenance'], 3], [(950084, 0), [['NVL  always evaluates both arguments, while  COALESCE  stops evaluation whenever it finds first non- NULL :'], ["This runs for almost  0.5  seconds, since it generates  SYS_GUID() 's, despite  1  being not a  NULL ."]], [[' SELECT  SUM(val)\nFROM    (\n        SELECT  NVL(1, LENGTH(RAWTOHEX(SYS_GUID()))) AS val\n        FROM    dual\n        CONNECT BY\n                level <= 10000\n        )\n']], ['Oracle Differences between NVL and Coalesce'], 2], [(950084, 1), [["This runs for almost  0.5  seconds, since it generates  SYS_GUID() 's, despite  1  being not a  NULL ."], ['This understands that  1  is not a  NULL  and does not evaluate the second argument.']], [[' SELECT  SUM(val)\nFROM    (\n        SELECT  COALESCE(1, LENGTH(RAWTOHEX(SYS_GUID()))) AS val\n        FROM    dual\n        CONNECT BY\n                level <= 10000\n        )\n']], ['Oracle Differences between NVL and Coalesce'], 2], [(951401, 0), [["Yes, it's possible with CROSS APPLY (SQL 2005+):"], ['eg:']], [[" with testdata (CommaColumn, ValueColumn1, ValueColumn2) as (\n  select 'ABC,123', 1, 2 union all\n  select 'XYZ, 789', 2, 3\n  ) \nselect \n  b.items as SplitValue\n, a.ValueColumn1\n, a.ValueColumn2\nfrom testdata a\ncross apply dbo.Split(a.CommaColumn,',') b\n"]], ['SQL 2005 Split Comma Separated Column on Delimiter'], 2], [(951401, 1), [['eg:'], ['Erland Sommarskog has the definitive page on this, I think:  http://www.sommarskog.se/arrays-in-sql-2005.html']], [[" create function [dbo].[Split] (@list nvarchar(max), @delimiter nchar(1) = N',')\nreturns table\nas\nreturn (\n  select \n    Number = row_number() over (order by Number)\n  , [Value] = ltrim(rtrim(convert(nvarchar(4000),\n        substring(@list, Number\n        , charindex(@delimiter, @list+@delimiter, Number)-Number\n        )\n    )))\n  from dbo.Numbers\n  where Number <= convert(int, len(@list))\n    and substring(@delimiter + @list, Number, 1) = @delimiter\n  )\n"]], ['SQL 2005 Split Comma Separated Column on Delimiter'], 2], [(955167, 0), [['(This is all tested with postgresql 8.3.7-- do you have an earlier version? just looking at your use of "ALIAS FOR $1")'], ['To invoke the function you need to do something like:']], [[" CREATE OR REPLACE FUNCTION storeopeninghours_tostring(numeric)\n RETURNS SETOF RECORD AS $$\nDECLARE\n open_id ALIAS FOR $1;\n result RECORD;\nBEGIN\n RETURN QUERY SELECT '1', '2', '3';\n RETURN QUERY SELECT '3', '4', '5';\n RETURN QUERY SELECT '3', '4', '5';\nEND\n$$;\n"]], ['Return setof record (virtual table) from function'], 3], [(955167, 1), [['To invoke the function you need to do something like:'], ['So you have to define what you expect the output row schema of the function to be in the query. To avoid that, you can specify output variables in the function definition:']], [[' select * from storeopeninghours_tostring(1) f(a text, b text, c text);\n']], ['Return setof record (virtual table) from function'], 3], [(955167, 2), [['So you have to define what you expect the output row schema of the function to be in the query. To avoid that, you can specify output variables in the function definition:'], ["(not quite sure why the extra ::text casts are required... '1' is a varchar by default maybe?)"]], [[" CREATE OR REPLACE FUNCTION storeopeninghours_tostring(open_id numeric, a OUT text, b OUT text, c OUT text)\n RETURNS SETOF RECORD LANGUAGE 'plpgsql' STABLE STRICT AS $$\nBEGIN\n RETURN QUERY SELECT '1'::text, '2'::text, '3'::text;\n RETURN QUERY SELECT '3'::text, '4'::text, '5'::text;\n RETURN QUERY SELECT '3'::text, '4'::text, '5'::text;\nEND\n$$;\n"]], ['Return setof record (virtual table) from function'], 3], [(955927, 0), [['The  DBA_OBJECTS  view will list the procedures (as well as almost any other object):'], ['The  DBA_SOURCE  view will list the lines of source code for a procedure in question:']], [[" SELECT owner, object_name\nFROM dba_objects \nWHERE object_type = 'PROCEDURE'\n"]], ['What SQL would I need to use to list all the stored procedures on an Oracle database?'], 2], [(955927, 1), [['The  DBA_SOURCE  view will list the lines of source code for a procedure in question:'], ['Note:  Depending on your privileges, you may not be able to query the  DBA_OBJECTS  and  DBA_SOURCE  views. In this case, you can use  ALL_OBJECTS  and  ALL_SOURCE  instead. The  DBA_  views contain  all  objects in the database, whereas the  ALL_  views contain only those objects that you may access.']], [[" SELECT line, text\nFROM dba_source\nWHERE owner = ?\n  AND name = ?\n  AND type = 'PROCEDURE'\nORDER BY line\n"]], ['What SQL would I need to use to list all the stored procedures on an Oracle database?'], 2], [(959161, 0), [['The simplest case I can think of is when the way you assign pseudonyms to column names, some databases require this:'], ['while others require:']], [[' SELECT x AS y FROM some_table\n']], ['Is Making a DLL compatible to all databases a good idea'], 2], [(959161, 1), [['while others require:'], ["There's many more such examples, but the bottom line is that when writing a query abstraction layer that works across all databases you need to abstract the concept of SQL generation so that it can be tailored to each database you are going to support (as I said, Hibernate does this by allowing you to specify a dialect specific to the database you are using)."]], [[' SELECT x y FROM some_table \n']], ['Is Making a DLL compatible to all databases a good idea'], 2], [(959480, 0), [['Instead of:'], [', use a where clause without the leading %:']], [[" select * from professions where name like '%plu%'\n"]], ['Performing an ASP.NET database search with StartsWith keyword'], 2], [(959480, 1), [[', use a where clause without the leading %:'], ['-10000']], [[" select * from professions where name like 'plu%'\n"]], ['Performing an ASP.NET database search with StartsWith keyword'], 2], [(961389, 0), [['The cleanest solution would be to make the foreign key constraint deferred.  This will postpone the checking of the constraint until  COMMIT  time, allowing it to be violated temporarily during the transaction.  Unfortunately, this feature is apparently not available in SQL Server.  On systems that do support deferred constraints, something like the following would work:'], ["The  SET CONSTRAINT[S]  statement can be used to toggle a constraint's deferredness, e.g. at the beginning of the transaction:"]], [[' alter table tblForeignKey\n  modify constraint YourFKNameHere\n    deferrable\n    initially deferred;\n']], ['Is Inconsistent state allowed in a transaction?'], 2], [(961389, 1), [["The  SET CONSTRAINT[S]  statement can be used to toggle a constraint's deferredness, e.g. at the beginning of the transaction:"], ['In my experience, the ACID properties, while clearly distinct, tend to work together.  For example, in your problem, you are trying to do an update which is temporarily invalid.  Other users will not see any of your changes (Isolation, Atomicity) until you commit them (Durability), and no part of your transaction will have any effect (Atomicity) unless your transaction ends with the database in a consistent state (Consistency).']], [[' set constraint YourFKNameHere deferred;\n']], ['Is Inconsistent state allowed in a transaction?'], 2], [(963996, 0), [["If you have few  DISTINCT IP 's:"], ["If you have lots of  DISTINCT IP 's:"]], [[' SELECT  ip, MAX(date) AS maxdate\nFROM    (\n        SELECT  ip, MAX(date) AS maxdate\n        FROM    spy_hits\n        GROUP BY\n                ip\n        )\nORDER BY\n        maxdate DESC\nLIMIT 10\n']], ["How to retrieve 10 latest DISTINCT IP's from a MySQL table?"], 3], [(963996, 1), [["If you have lots of  DISTINCT IP 's:"], ['Creating two indexes on this table: ']], [[' SELECT  *\nFROM    spy_hits so\nWHERE   NOT EXISTS\n        (\n        SELECT  1\n        FROM    spy_hits si\n        WHERE   si.ip = so.ip\n                AND si.date > so.date\n        )\nORDER BY\n        date DESC\nLIMIT 10\n']], ["How to retrieve 10 latest DISTINCT IP's from a MySQL table?"], 3], [(963996, 2), [['Creating two indexes on this table: '], ['will improve these queries a lot.']], [[' CREATE INDEX ix_spyhits_date ON spy_hits (date)\nCREATE INDEX ix_spyhits_ip_date ON spy_hits (ip, date)\n']], ["How to retrieve 10 latest DISTINCT IP's from a MySQL table?"], 3], [(965169, 0), [['-10000'], [', or in  SQL Server 2005+ , this:']], [[" SELECT  (\n        SELECT  avg(KW)\n        FROM    genset\n        WHERE   (GenSetName   like 'GEA3519')\n                and GenDate >= '1 jan   2003    00:00:00'\n                and GenDate < '1 feb 2003 00:00:00'\n        ) AS avg_GEA3519,\n        (\n        SELECT  avg(KW)\n        FROM    genset\n        WHERE   (GenSetName   like 'GEA3520')\n                and GenDate >= '1 jan   2003    00:00:00'\n                and GenDate < '1 feb 2003 00:00:00'\n        ) AS avg_GEA3520,\n        (\n        SELECT  avg(KW)\n        FROM    genset\n        WHERE   (GenSetName   like 'GEA3521')\n                and GenDate >= '1 jan   2003    00:00:00'\n                and GenDate < '1 feb 2003 00:00:00'\n        ) AS avg_GEA3521,\n        (\n        SELECT  avg(KW)\n        FROM    genset\n        WHERE   (GenSetName   like 'GEA3522')\n                and GenDate >= '1 jan   2003    00:00:00'\n                and GenDate < '1 feb 2003 00:00:00'\n        ) AS avg_GEA3522\n"]], ['How do I take the results of multiple selects and combine into one row'], 2], [(965169, 1), [[', or in  SQL Server 2005+ , this:'], ['-10000']], [[" SELECT  [GEA3519], [GEA3520], [GEA3521], [GEA3522]\nFROM    (\n        SELECT  GenSetName, KW\n        FROM    genset\n        WHERE   GenDate >= '1 Jan 2003  00:00:00'\n                AND GenDate < '1 Feb 2003 00:00:00'\n        ) AS q\nPIVOT\n(\n        AVG(KW)\n        FOR  GenSetName IN (['GEA3519'], ['GEA3520'], ['GEA3521'], ['GEA3522']\n)\n"]], ['How do I take the results of multiple selects and combine into one row'], 2], [(965685, 0), [["For something like this, I might avoid the UUID if possible, and if not, I would ensure that it's increasing, so you could write:"], ['Without the increasing uuids, you will need some kind of rule to  ensure you are selecting the latest action for a person, since unless username, actiondate is unique, there is nothing in your original ORDER BY actiondate DESC limit 1 to ensure you are picking the correct row each time.  If username, actiondate is unique, then you can use the following:']], [[' SELECT actiondate\n    ,status\nFROM actions\nINNER JOIN (\n    SELECT username\n        ,MAX(uuid) as last_uuid from actions\n    WHERE actiondate < 20061231\n    GROUP BY username\n) AS last_occur\n    ON last_occur.username = actions.username\n    AND last_occur.last_uuid = actions.uuid\nWHERE actiondate < 20061231\n']], ['sqlite query optimisation'], 2], [(965685, 1), [['Without the increasing uuids, you will need some kind of rule to  ensure you are selecting the latest action for a person, since unless username, actiondate is unique, there is nothing in your original ORDER BY actiondate DESC limit 1 to ensure you are picking the correct row each time.  If username, actiondate is unique, then you can use the following:'], ['If it is not unique, it will still work, but you will get multiple actions for a person on their last actiondate.  The recommended indexes would also be different in this case (and better), because the large uuid is not necessary.']], [[' SELECT actiondate\n    ,status\nFROM actions\nINNER JOIN (\n    SELECT username\n        ,MAX(actiondate) as last_actiondate from actions\n    WHERE actiondate < 20061231\n    GROUP BY username\n) AS last_occur\n    ON last_occur.username = actions.username\n    AND last_occur.last_actiondate = actions.actiondate\nWHERE actiondate < 20061231\n']], ['sqlite query optimisation'], 2], [(970249, 0), [["I realize it's not clever at all, nor is it the special format string you're looking for, but this answer does work, given that the output is fixed length:"], ["This is an even greater embarrassment, but I couldn't resist:"]], [[" SELECT    SUBSTR(TO_CHAR(NVL(arg1 - arg2, TO_DSINTERVAL('0 00:00:00'))), 1, 1)\n       || SUBSTR(TO_CHAR(NVL(arg1 - arg2, TO_DSINTERVAL('0 00:00:00'))), 9, 2)\n       || ' '\n       || SUBSTR(TO_CHAR(NVL(arg1 - arg2, TO_DSINTERVAL('0 00:00:00'))), 12, 12)\n  FROM table1;\n"]], ['format interval with to_char'], 2], [(970249, 1), [["This is an even greater embarrassment, but I couldn't resist:"], ['-10000']], [[" SELECT SUBSTR(REPLACE(TO_CHAR(NVL(arg1 - arg2, TO_DSINTERVAL('0 00:00:00')))\n                     , '0000000', '')\n             , 1, 16)\n  FROM table1;\n"]], ['format interval with to_char'], 2], [(970357, 0), [['To create a database dump from MySQL, you can run something like this --'], ['Now that we got that out of the way, you can log in to the MySQL database using:']], [[' mysqldump -h hostname -u username -p databasename > my_sql_dump.sql\n']], ['How can I change an URL inside a field in MySQL?'], 4], [(970357, 1), [['Now that we got that out of the way, you can log in to the MySQL database using:'], ['And simply run this statement:']], [[' mysql -h hostname -u username -p databasename\n']], ['How can I change an URL inside a field in MySQL?'], 4], [(970357, 2), [['And simply run this statement:'], ["If you make a mistake, you can often rerun the statement with the original and new texts inverted (if the new text -- in your case the new URL -- didn't already exist in the text before you did the replace.) Sometimes this is not possible depending on what the new text was (again, not likely in your case.) Anyway, you can always try recovering the sql dump --"]], [[' UPDATE `wp-posts` SET `post-content` = REPLACE(`post-content`, "http://oldurl.com", "http://newurl.com");\n']], ['How can I change an URL inside a field in MySQL?'], 4], [(970357, 3), [["If you make a mistake, you can often rerun the statement with the original and new texts inverted (if the new text -- in your case the new URL -- didn't already exist in the text before you did the replace.) Sometimes this is not possible depending on what the new text was (again, not likely in your case.) Anyway, you can always try recovering the sql dump --"], ['And  voilà .']], [[' cat my_sql_dump.sql | mysql -h hostname -u username -p databasename\n']], ['How can I change an URL inside a field in MySQL?'], 4], [(970894, 0), [["to get the given product code's value use:"], ['to find all products use:']], [[" DECLARE @ProcuctCode  int\nSET @ProductCode=11\n\nSELECT\n    h.* \n    FROM ProductPriceHistory h\n        INNER JOIN (SELECT\n                        ProductCode\n                            ,MAX(EffectDate) AS MaxEffectDate\n                        FROM ProductPriceHistory\n                        WHERE ProductCode=@ProductCode\n                            AND IsActive='true'\n                        GROUP BY ProductCode\n                   ) dt ON h.ProductCode=dt.ProductCode AND h.EffectDate=dt.MaxEffectDate\n    WHERE h.ProductCode =@ProductCode\n"]], ['SQL - Problem with SQL Query ; group by and join'], 2], [(970894, 1), [['to find all products use:'], ['-10000']], [[" SELECT\n    h.* \n    FROM ProductPriceHistory h\n        INNER JOIN (SELECT\n                        ProductCode\n                            ,MAX(EffectDate) AS MaxEffectDate\n                        FROM ProductPriceHistory\n                        WHERE IsActive='true'\n                        GROUP BY ProductCode\n                   ) dt ON h.ProductCode=dt.ProductCode AND h.EffectDate=dt.MaxEffectDate\n     ORDER BY h.ProductCode\n"]], ['SQL - Problem with SQL Query ; group by and join'], 2], [(971875, 0), [['Here is the code'], ['Here is the result. Just change the table name']], [[' Imports System.IO\n\nPublic Class Form1\n\n    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click\n\n        Dim s As String = "Abberley | Abbey Wood | Abbots Bromley | Abbots Langley | Abbots Leigh | Abbots Ripton | Abbotsbury | Abbotsley | Aberaeron | Aberargie | Abercastle | Abercraf | Abercych | Aberdare | Aberdaron | Aberdeen | Aberdour | Aberdovey | Aberfeldy | Aberffraw | Aberfoyle | Abergavenny | Abergele | Abergorlech | Abergwili | Aberlady | Aberlour | Abernethy | Aberporth | Abersoch | Abersychan | Abertillery | Aberystwyth | Abingdon | Abinger | Abinger Hammer | Abington | Aboyne | Abram | Abridge | Acaster Malbis | Accrington | Acharacle | Achiltibuie | Achnasheen | Acklam | Ackworth | Acle | Acocks Green | Acomb | Acrefair | Acton | Acton Bridge | Adare | Adderbury | Addingham | Addington | Addlestone | Adlington | Adstock | Aghadowey | Aghalee | Ahoghill | Airdrie | Airth | Akebar | Akeley | Albrighton | Albury | Alcester | Alconbury | Alconbury Weston | Aldbourne | Aldbrough St John | Aldbury | Aldeburgh | Aldenham | Alderbury | Alderley Edge | Aldermaston | Alderminster | Alderney | Aldersey Green | Aldershot | Aldford | Aldgate | Aldridge | Aldringham | Aldworth | Aldwych | Alexandria | Alfold | Alford | Alfreton | Alfriston | All of London | All Stretton | Allendale | Allenheads | Allerford | Allerston | Allerton | Allhallows | Allhallows-on-Sea | Allington | Alloa | Allostock | Alloway | Almeley | Almondbank | Almondsbury | Alne | Alness | Alnmouth | Alnwick | Alresford | Alrewas | Alsager | Alsagers Bank | Alston | Alstonefield | Althorne | Althorp | Altnagelvin | Alton | Alton Towers | Altrincham | Alum Bay | Alva | Alvechurch | Alvecote | Alvediston | Alveley | Alves | Alveston | Alvington | Alwoodley | Alyth | Ambergate | Amberley | Amble | Ambleside | Ambrosden | Amersham | Amesbury | Amlwch | Ammanford | Ampfield | Ampleforth | Ampthill | Amroth | Amulree | Ancaster | Anderton | Andover | Andoversford | Angle | Angmering | Annacloy | Annalong | Annan | Annbank | Anniesland | Annitsford | Anslow | Anstruther | Ansty | Antrim | Apartments all over London | Apperley Bridge | Appin | Applecross | Appledore | Appletreewick | Appley | Apsley | Arborfield | Arbroath | Archway | Arclid | Ardaneaskan | Ardbeg | Ardeley | Ardens Grafton | Ardentinny | Ardeonaig | Ardfern | Ardgay | Ardglass | Ardingly | Ardington | Ardishaig | Ardleigh | Ardmillan | Ardrishaig | Ardrossan | Ardvasar | Arisaig | Arkendale | Arkengarthdale | Arkesden | Arklow | Arlesey | Arlingham | Arlington | Armadale | Armagh | Armathwiate | Armoy | Armscote | Armthorpe | Arncliffe | Arncott | Arnold | Arnside | Aros | Arreton | Arrochar | Arthingworth | Articlave | Artigarvan | Arundel | Ascog Bay | Ascot | Ash | Ash-cum-Ridley | Ashbourne | Ashburnham Place | Ashburton | Ashcott | Ashford | Ashford in the Water | Ashford-in-the-Water | Ashill | Ashington | Ashkirk | Ashleworth | Ashley | Ashmore Green | Ashorne | Ashover | Ashprington | Ashtead | Ashton | Ashton in Makerfield | Ashton Keynes | Ashton under Lyne | Ashton-in-Makerfield | Ashton-under-Lyne | Ashurst | Ashwater | Ashwell | Ashwicke | Askam-in-Furness | Askernish | Askett | Askham | Askrigg | Aspatria | Aspley Guise | Asthall | Astmoor | Aston | Aston Cantlow | Aston Clinton | Aston Rowant | Astwood | Athelstaneford | Atherstone | Atherton | Athlone | Athy | Attleborough | Auchenblae | Auchenbowie | Auchencairn | Auchindoir | Auchinleck | Auchterarder | Auchtermuchty | Audlem | Aughnacloy | Aughrim | Aughton | Auldearn | Auldgirth | Aultbea | Aust | Austerfield | Austrey | Austwick | Avebury | Aveley | Avening | Aviemore | Avonwick | Awre | Axbridge | Axford | Axminster | Axmouth | Aycliffe | Aylesbury | Aylesford | Aylesham | Aylmerton | Aylsham | Aymestrey | Aynho | Ayot St Lawrence | Ayr | Aysgarth | Ayside |"\n        Dim cities() As String = s.Split("|")\n\n        Dim oWrite As System.IO.StreamWriter\n        oWrite = File.CreateText("C:\\uktowns_sql.txt")\n\n        For Each city As String In cities\n            oWrite.WriteLine("INSERT INTO mytable values(" & """" & city.Trim() & """" & ")")\n        Next\n\n        oWrite.Flush()\n        oWrite.Close()\n\n\n    End Sub\n\nEnd Class\n']], ['UK Cities SQL'], 2], [(971875, 1), [['Here is the result. Just change the table name'], ['-10000']], [[' INSERT INTO mytable values("Abberley")\nINSERT INTO mytable values("Abbey Wood")\nINSERT INTO mytable values("Abbots Bromley")\nINSERT INTO mytable values("Abbots Langley")\nINSERT INTO mytable values("Abbots Leigh")\nINSERT INTO mytable values("Abbots Ripton")\nINSERT INTO mytable values("Abbotsbury")\nINSERT INTO mytable values("Abbotsley")\nINSERT INTO mytable values("Aberaeron")\nINSERT INTO mytable values("Aberargie")\nINSERT INTO mytable values("Abercastle")\nINSERT INTO mytable values("Abercraf")\nINSERT INTO mytable values("Abercych")\nINSERT INTO mytable values("Aberdare")\nINSERT INTO mytable values("Aberdaron")\nINSERT INTO mytable values("Aberdeen")\nINSERT INTO mytable values("Aberdour")\nINSERT INTO mytable values("Aberdovey")\nINSERT INTO mytable values("Aberfeldy")\nINSERT INTO mytable values("Aberffraw")\nINSERT INTO mytable values("Aberfoyle")\nINSERT INTO mytable values("Abergavenny")\nINSERT INTO mytable values("Abergele")\nINSERT INTO mytable values("Abergorlech")\nINSERT INTO mytable values("Abergwili")\nINSERT INTO mytable values("Aberlady")\nINSERT INTO mytable values("Aberlour")\nINSERT INTO mytable values("Abernethy")\nINSERT INTO mytable values("Aberporth")\nINSERT INTO mytable values("Abersoch")\nINSERT INTO mytable values("Abersychan")\nINSERT INTO mytable values("Abertillery")\nINSERT INTO mytable values("Aberystwyth")\nINSERT INTO mytable values("Abingdon")\nINSERT INTO mytable values("Abinger")\nINSERT INTO mytable values("Abinger Hammer")\nINSERT INTO mytable values("Abington")\nINSERT INTO mytable values("Aboyne")\nINSERT INTO mytable values("Abram")\nINSERT INTO mytable values("Abridge")\nINSERT INTO mytable values("Acaster Malbis")\nINSERT INTO mytable values("Accrington")\nINSERT INTO mytable values("Acharacle")\nINSERT INTO mytable values("Achiltibuie")\nINSERT INTO mytable values("Achnasheen")\nINSERT INTO mytable values("Acklam")\nINSERT INTO mytable values("Ackworth")\nINSERT INTO mytable values("Acle")\nINSERT INTO mytable values("Acocks Green")\nINSERT INTO mytable values("Acomb")\nINSERT INTO mytable values("Acrefair")\nINSERT INTO mytable values("Acton")\nINSERT INTO mytable values("Acton Bridge")\nINSERT INTO mytable values("Adare")\nINSERT INTO mytable values("Adderbury")\nINSERT INTO mytable values("Addingham")\nINSERT INTO mytable values("Addington")\nINSERT INTO mytable values("Addlestone")\nINSERT INTO mytable values("Adlington")\nINSERT INTO mytable values("Adstock")\nINSERT INTO mytable values("Aghadowey")\nINSERT INTO mytable values("Aghalee")\nINSERT INTO mytable values("Ahoghill")\nINSERT INTO mytable values("Airdrie")\nINSERT INTO mytable values("Airth")\nINSERT INTO mytable values("Akebar")\nINSERT INTO mytable values("Akeley")\nINSERT INTO mytable values("Albrighton")\nINSERT INTO mytable values("Albury")\nINSERT INTO mytable values("Alcester")\nINSERT INTO mytable values("Alconbury")\nINSERT INTO mytable values("Alconbury Weston")\nINSERT INTO mytable values("Aldbourne")\nINSERT INTO mytable values("Aldbrough St John")\nINSERT INTO mytable values("Aldbury")\nINSERT INTO mytable values("Aldeburgh")\nINSERT INTO mytable values("Aldenham")\nINSERT INTO mytable values("Alderbury")\nINSERT INTO mytable values("Alderley Edge")\nINSERT INTO mytable values("Aldermaston")\nINSERT INTO mytable values("Alderminster")\nINSERT INTO mytable values("Alderney")\nINSERT INTO mytable values("Aldersey Green")\nINSERT INTO mytable values("Aldershot")\nINSERT INTO mytable values("Aldford")\nINSERT INTO mytable values("Aldgate")\nINSERT INTO mytable values("Aldridge")\nINSERT INTO mytable values("Aldringham")\nINSERT INTO mytable values("Aldworth")\nINSERT INTO mytable values("Aldwych")\nINSERT INTO mytable values("Alexandria")\nINSERT INTO mytable values("Alfold")\nINSERT INTO mytable values("Alford")\nINSERT INTO mytable values("Alfreton")\nINSERT INTO mytable values("Alfriston")\nINSERT INTO mytable values("All of London")\nINSERT INTO mytable values("All Stretton")\nINSERT INTO mytable values("Allendale")\nINSERT INTO mytable values("Allenheads")\nINSERT INTO mytable values("Allerford")\nINSERT INTO mytable values("Allerston")\nINSERT INTO mytable values("Allerton")\nINSERT INTO mytable values("Allhallows")\nINSERT INTO mytable values("Allhallows-on-Sea")\nINSERT INTO mytable values("Allington")\nINSERT INTO mytable values("Alloa")\nINSERT INTO mytable values("Allostock")\nINSERT INTO mytable values("Alloway")\nINSERT INTO mytable values("Almeley")\nINSERT INTO mytable values("Almondbank")\nINSERT INTO mytable values("Almondsbury")\nINSERT INTO mytable values("Alne")\nINSERT INTO mytable values("Alness")\nINSERT INTO mytable values("Alnmouth")\nINSERT INTO mytable values("Alnwick")\nINSERT INTO mytable values("Alresford")\nINSERT INTO mytable values("Alrewas")\nINSERT INTO mytable values("Alsager")\nINSERT INTO mytable values("Alsagers Bank")\nINSERT INTO mytable values("Alston")\nINSERT INTO mytable values("Alstonefield")\nINSERT INTO mytable values("Althorne")\nINSERT INTO mytable values("Althorp")\nINSERT INTO mytable values("Altnagelvin")\nINSERT INTO mytable values("Alton")\nINSERT INTO mytable values("Alton Towers")\nINSERT INTO mytable values("Altrincham")\nINSERT INTO mytable values("Alum Bay")\nINSERT INTO mytable values("Alva")\nINSERT INTO mytable values("Alvechurch")\nINSERT INTO mytable values("Alvecote")\nINSERT INTO mytable values("Alvediston")\nINSERT INTO mytable values("Alveley")\nINSERT INTO mytable values("Alves")\nINSERT INTO mytable values("Alveston")\nINSERT INTO mytable values("Alvington")\nINSERT INTO mytable values("Alwoodley")\nINSERT INTO mytable values("Alyth")\nINSERT INTO mytable values("Ambergate")\nINSERT INTO mytable values("Amberley")\nINSERT INTO mytable values("Amble")\nINSERT INTO mytable values("Ambleside")\nINSERT INTO mytable values("Ambrosden")\nINSERT INTO mytable values("Amersham")\nINSERT INTO mytable values("Amesbury")\nINSERT INTO mytable values("Amlwch")\nINSERT INTO mytable values("Ammanford")\nINSERT INTO mytable values("Ampfield")\nINSERT INTO mytable values("Ampleforth")\nINSERT INTO mytable values("Ampthill")\nINSERT INTO mytable values("Amroth")\nINSERT INTO mytable values("Amulree")\nINSERT INTO mytable values("Ancaster")\nINSERT INTO mytable values("Anderton")\nINSERT INTO mytable values("Andover")\nINSERT INTO mytable values("Andoversford")\nINSERT INTO mytable values("Angle")\nINSERT INTO mytable values("Angmering")\nINSERT INTO mytable values("Annacloy")\nINSERT INTO mytable values("Annalong")\nINSERT INTO mytable values("Annan")\nINSERT INTO mytable values("Annbank")\nINSERT INTO mytable values("Anniesland")\nINSERT INTO mytable values("Annitsford")\nINSERT INTO mytable values("Anslow")\nINSERT INTO mytable values("Anstruther")\nINSERT INTO mytable values("Ansty")\nINSERT INTO mytable values("Antrim")\nINSERT INTO mytable values("Apartments all over London")\nINSERT INTO mytable values("Apperley Bridge")\nINSERT INTO mytable values("Appin")\nINSERT INTO mytable values("Applecross")\nINSERT INTO mytable values("Appledore")\nINSERT INTO mytable values("Appletreewick")\nINSERT INTO mytable values("Appley")\nINSERT INTO mytable values("Apsley")\nINSERT INTO mytable values("Arborfield")\nINSERT INTO mytable values("Arbroath")\nINSERT INTO mytable values("Archway")\nINSERT INTO mytable values("Arclid")\nINSERT INTO mytable values("Ardaneaskan")\nINSERT INTO mytable values("Ardbeg")\nINSERT INTO mytable values("Ardeley")\nINSERT INTO mytable values("Ardens Grafton")\nINSERT INTO mytable values("Ardentinny")\nINSERT INTO mytable values("Ardeonaig")\nINSERT INTO mytable values("Ardfern")\nINSERT INTO mytable values("Ardgay")\nINSERT INTO mytable values("Ardglass")\nINSERT INTO mytable values("Ardingly")\nINSERT INTO mytable values("Ardington")\nINSERT INTO mytable values("Ardishaig")\nINSERT INTO mytable values("Ardleigh")\nINSERT INTO mytable values("Ardmillan")\nINSERT INTO mytable values("Ardrishaig")\nINSERT INTO mytable values("Ardrossan")\nINSERT INTO mytable values("Ardvasar")\nINSERT INTO mytable values("Arisaig")\nINSERT INTO mytable values("Arkendale")\nINSERT INTO mytable values("Arkengarthdale")\nINSERT INTO mytable values("Arkesden")\nINSERT INTO mytable values("Arklow")\nINSERT INTO mytable values("Arlesey")\nINSERT INTO mytable values("Arlingham")\nINSERT INTO mytable values("Arlington")\nINSERT INTO mytable values("Armadale")\nINSERT INTO mytable values("Armagh")\nINSERT INTO mytable values("Armathwiate")\nINSERT INTO mytable values("Armoy")\nINSERT INTO mytable values("Armscote")\nINSERT INTO mytable values("Armthorpe")\nINSERT INTO mytable values("Arncliffe")\nINSERT INTO mytable values("Arncott")\nINSERT INTO mytable values("Arnold")\nINSERT INTO mytable values("Arnside")\nINSERT INTO mytable values("Aros")\nINSERT INTO mytable values("Arreton")\nINSERT INTO mytable values("Arrochar")\nINSERT INTO mytable values("Arthingworth")\nINSERT INTO mytable values("Articlave")\nINSERT INTO mytable values("Artigarvan")\nINSERT INTO mytable values("Arundel")\nINSERT INTO mytable values("Ascog Bay")\nINSERT INTO mytable values("Ascot")\nINSERT INTO mytable values("Ash")\nINSERT INTO mytable values("Ash-cum-Ridley")\nINSERT INTO mytable values("Ashbourne")\nINSERT INTO mytable values("Ashburnham Place")\nINSERT INTO mytable values("Ashburton")\nINSERT INTO mytable values("Ashcott")\nINSERT INTO mytable values("Ashford")\nINSERT INTO mytable values("Ashford in the Water")\nINSERT INTO mytable values("Ashford-in-the-Water")\nINSERT INTO mytable values("Ashill")\nINSERT INTO mytable values("Ashington")\nINSERT INTO mytable values("Ashkirk")\nINSERT INTO mytable values("Ashleworth")\nINSERT INTO mytable values("Ashley")\nINSERT INTO mytable values("Ashmore Green")\nINSERT INTO mytable values("Ashorne")\nINSERT INTO mytable values("Ashover")\nINSERT INTO mytable values("Ashprington")\nINSERT INTO mytable values("Ashtead")\nINSERT INTO mytable values("Ashton")\nINSERT INTO mytable values("Ashton in Makerfield")\nINSERT INTO mytable values("Ashton Keynes")\nINSERT INTO mytable values("Ashton under Lyne")\nINSERT INTO mytable values("Ashton-in-Makerfield")\nINSERT INTO mytable values("Ashton-under-Lyne")\nINSERT INTO mytable values("Ashurst")\nINSERT INTO mytable values("Ashwater")\nINSERT INTO mytable values("Ashwell")\nINSERT INTO mytable values("Ashwicke")\nINSERT INTO mytable values("Askam-in-Furness")\nINSERT INTO mytable values("Askernish")\nINSERT INTO mytable values("Askett")\nINSERT INTO mytable values("Askham")\nINSERT INTO mytable values("Askrigg")\nINSERT INTO mytable values("Aspatria")\nINSERT INTO mytable values("Aspley Guise")\nINSERT INTO mytable values("Asthall")\nINSERT INTO mytable values("Astmoor")\nINSERT INTO mytable values("Aston")\nINSERT INTO mytable values("Aston Cantlow")\nINSERT INTO mytable values("Aston Clinton")\nINSERT INTO mytable values("Aston Rowant")\nINSERT INTO mytable values("Astwood")\nINSERT INTO mytable values("Athelstaneford")\nINSERT INTO mytable values("Atherstone")\nINSERT INTO mytable values("Atherton")\nINSERT INTO mytable values("Athlone")\nINSERT INTO mytable values("Athy")\nINSERT INTO mytable values("Attleborough")\nINSERT INTO mytable values("Auchenblae")\nINSERT INTO mytable values("Auchenbowie")\nINSERT INTO mytable values("Auchencairn")\nINSERT INTO mytable values("Auchindoir")\nINSERT INTO mytable values("Auchinleck")\nINSERT INTO mytable values("Auchterarder")\nINSERT INTO mytable values("Auchtermuchty")\nINSERT INTO mytable values("Audlem")\nINSERT INTO mytable values("Aughnacloy")\nINSERT INTO mytable values("Aughrim")\nINSERT INTO mytable values("Aughton")\nINSERT INTO mytable values("Auldearn")\nINSERT INTO mytable values("Auldgirth")\nINSERT INTO mytable values("Aultbea")\nINSERT INTO mytable values("Aust")\nINSERT INTO mytable values("Austerfield")\nINSERT INTO mytable values("Austrey")\nINSERT INTO mytable values("Austwick")\nINSERT INTO mytable values("Avebury")\nINSERT INTO mytable values("Aveley")\nINSERT INTO mytable values("Avening")\nINSERT INTO mytable values("Aviemore")\nINSERT INTO mytable values("Avonwick")\nINSERT INTO mytable values("Awre")\nINSERT INTO mytable values("Axbridge")\nINSERT INTO mytable values("Axford")\nINSERT INTO mytable values("Axminster")\nINSERT INTO mytable values("Axmouth")\nINSERT INTO mytable values("Aycliffe")\nINSERT INTO mytable values("Aylesbury")\nINSERT INTO mytable values("Aylesford")\nINSERT INTO mytable values("Aylesham")\nINSERT INTO mytable values("Aylmerton")\nINSERT INTO mytable values("Aylsham")\nINSERT INTO mytable values("Aymestrey")\nINSERT INTO mytable values("Aynho")\nINSERT INTO mytable values("Ayot St Lawrence")\nINSERT INTO mytable values("Ayr")\nINSERT INTO mytable values("Aysgarth")\nINSERT INTO mytable values("Ayside")\nINSERT INTO mytable values("")\n']], ['UK Cities SQL'], 2], [(972273, 0), [['If you created your table using this SQL DDL:'], ['then the following SQL DDL would add the  DEFAULT  your require:']], [[' CREATE TABLE tblLogs \n(\n   date_created DATETIME NOT NULL\n);\n']], ['Microsoft Access DateTime Default Now via SQL'], 3], [(972273, 1), [['then the following SQL DDL would add the  DEFAULT  your require:'], ['If you are using Access (rather than ACE/Jet standalone), you can use a single line of VBA (ADO) code:']], [[' ALTER TABLE tblLogs ALTER \n   date_created DATETIME DEFAULT NOW() NOT NULL;\n']], ['Microsoft Access DateTime Default Now via SQL'], 3], [(972273, 2), [['If you are using Access (rather than ACE/Jet standalone), you can use a single line of VBA (ADO) code:'], ['-10000']], [[' CurrentProject.Connection.Execute "ALTER TABLE tblLogs ALTER date_created DATETIME DEFAULT NOW() NOT NULL;"\n']], ['Microsoft Access DateTime Default Now via SQL'], 3], [(973222, 0), [['Put it in the join clause:'], ["Joel's query would work, but since you are not interested in any rows from TableB, a correlated subquery may be cleaner:"]], [[' select * from TableA \nleft join TableB \n  on TableA.fld1 = TableB.fld2 \n and TableB.fld4 = False\nwhere TableA.fld3 = True\n']], ['TableA Left Join (a subset of) Table B'], 2], [(973222, 1), [["Joel's query would work, but since you are not interested in any rows from TableB, a correlated subquery may be cleaner:"], ['-10000']], [[' select * from TableA\nwhere TableA.fld3 = True \n  and not exists (\n    select * from TableB\n    where TableA.fld1 = TableB.fld2\n      and TableB.fld4 = False\n    )\n']], ['TableA Left Join (a subset of) Table B'], 2], [(973342, 0), [['You can put the "AND" in the contains itself, so it coud be'], ["with the string 'FORMSOF(Thesaurus, yellow) AND FORMSOF(Thesaurus, bird)'\nbuilt up into a variable like"]], [[" select * \nfrom dbo.FooBars\nwhere contains(Name, 'FORMSOF(Thesaurus, yellow) AND FORMSOF(Thesaurus, bird)')\n"]], ['combine two CONTAINS calls within where clause'], 2], [(973342, 1), [["with the string 'FORMSOF(Thesaurus, yellow) AND FORMSOF(Thesaurus, bird)'\nbuilt up into a variable like"], ['-10000']], [[" declare @searchCriteria varchar(200)\nset @searchCriteria = 'Some string you built up'\nselect * \nfrom dbo.FooBars\nwhere contains(Name, @searchCriteria)\n"]], ['combine two CONTAINS calls within where clause'], 2], [(973651, 0), [['Update : there is a much simpler solution than my first answer. It is more readable AND more elegant, I will therefore put it here first (As often, thanks to  Tom Kyte ):'], ['Following is my initial solution:']], [[' SQL> SELECT seq,\n  2         last_value(CASE\n  3                       WHEN lvl = 1 THEN\n  4                        descr\n  5                    END IGNORE NULLS) over(ORDER BY seq) L1,\n  6         last_value(CASE\n  7                       WHEN lvl = 2 THEN\n  8                        descr\n  9                    END IGNORE NULLS) over(ORDER BY seq) L2,\n 10         last_value(CASE\n 11                       WHEN lvl = 3 THEN\n 12                        descr\n 13                    END IGNORE NULLS) over(ORDER BY seq) L3\n 14    FROM TEST;\n\n       SEQ L1         L2         L3\n---------- ---------- ---------- ----------\n         1 ONE                   \n         2 ONE        TWO1       \n         3 ONE        TWO2       \n         4 ONE        TWO2       THREE1\n         5 ONE        TWO3       THREE1\n         6 ONE        TWO3       THREE2\n']], ['Oracle SQL Query (Analytics?)'], 2], [(973651, 1), [['Following is my initial solution:'], ['-10000']], [[' SQL> SELECT seq,\n  2         MAX(L1) over(PARTITION BY grp1) L1,\n  3         MAX(L2) over(PARTITION BY grp2) L2,\n  4         MAX(L3) over(PARTITION BY grp3) L3\n  5    FROM (SELECT seq,\n  6                 L1, MAX(grp1) over(ORDER BY seq) grp1,\n  7                 L2, MAX(grp2) over(ORDER BY seq) grp2,\n  8                 L3, MAX(grp3) over(ORDER BY seq) grp3\n  9             FROM (SELECT seq,\n 10                          CASE WHEN lvl = 1 THEN descr END L1,\n 11                          CASE WHEN lvl = 1 AND descr IS NOT NULL THEN ROWNUM END grp1,\n 12                          CASE WHEN lvl = 2 THEN descr END L2,\n 13                          CASE WHEN lvl = 2 AND descr IS NOT NULL THEN ROWNUM END grp2,\n 14                          CASE WHEN lvl = 3 THEN descr END L3,\n 15                          CASE WHEN lvl = 3 AND descr IS NOT NULL THEN ROWNUM END grp3\n 16                     FROM test))\n 17   ORDER BY seq;\n\n       SEQ L1         L2         L3\n---------- ---------- ---------- ----------\n         1 ONE                   \n         2 ONE        TWO1       \n         3 ONE        TWO2       \n         4 ONE        TWO2       THREE1\n         5 ONE        TWO3       THREE1\n         6 ONE        TWO3       THREE2\n']], ['Oracle SQL Query (Analytics?)'], 2], [(975315, 0), [["To simulate your situation, I've created sample tables:"], ['And with your current update statement, the problem becomes clear: the "not to be updated" values are set to NULL:']], [[" SQL> create table t_debtor(id_debtor,header)\n  2  as\n  3  select 1, 'Header 1' from dual union all\n  4  select 2, null from dual union all\n  5  select 3, 'Header 3' from dual\n  6  /\n\nTabel is aangemaakt.\n\nSQL> create table t_element (id_element,id_debtor,insurer)\n  2  as\n  3  select 1, 1, 'to be updated' from dual union all\n  4  select 2, 1, 'to be updated' from dual union all\n  5  select 3, 2, 'not to be updated' from dual union all\n  6  select 4, 2, 'not to be updated' from dual union all\n  7  select 5, 3, 'to be updated' from dual\n  8  /\n\nTabel is aangemaakt.\n"]], ['What is wrong with my update statement with a join in Oracle?'], 5], [(975315, 1), [['And with your current update statement, the problem becomes clear: the "not to be updated" values are set to NULL:'], ['The best way to do this update, is to update a join of both tables. There are some restrictions however:']], [[' SQL> update\n  2      T_ELEMENT elt\n  3      set elt.INSURER = (\n  4          select HEADER\n  5              from T_DEBTOR debtor\n  6              where\n  7                  debtor.HEADER is not null\n  8                  and debtor.ID_DEBTOR = elt.ID_DEBTOR)\n  9  /\n\n5 rijen zijn bijgewerkt.\n\nSQL> select * from t_element\n  2  /\n\nID_ELEMENT  ID_DEBTOR INSURER\n---------- ---------- -----------------\n         1          1 Header 1\n         2          1 Header 1\n         3          2\n         4          2\n         5          3 Header 3\n\n5 rijen zijn geselecteerd.\n']], ['What is wrong with my update statement with a join in Oracle?'], 5], [(975315, 2), [['The best way to do this update, is to update a join of both tables. There are some restrictions however:'], ['With the bypass ujvc hint, we can circumvent this restriction.\nBut it is not advisable to do so unless you know really really sure that t_debtor.id_debtor is unique.']], [[' SQL> rollback\n  2  /\n\nRollback is voltooid.\n\nSQL> update ( select elt.insurer\n  2                , dtr.header\n  3             from t_element elt\n  4                , t_debtor dtr\n  5            where elt.id_debtor = dtr.id_debtor\n  6              and dtr.header is not null\n  7         )\n  8     set insurer = header\n  9  /\n   set insurer = header\n       *\nFOUT in regel 8:\n.ORA-01779: cannot modify a column which maps to a non key-preserved table\n']], ['What is wrong with my update statement with a join in Oracle?'], 5], [(975315, 3), [['With the bypass ujvc hint, we can circumvent this restriction.\nBut it is not advisable to do so unless you know really really sure that t_debtor.id_debtor is unique.'], ["It's better to just add a primary key. You'll probably have this one already in place:"]], [[' SQL> update /*+ bypass_ujvc */\n  2         ( select elt.insurer\n  3                , dtr.header\n  4             from t_element elt\n  5                , t_debtor dtr\n  6            where elt.id_debtor = dtr.id_debtor\n  7              and dtr.header is not null\n  8         )\n  9     set insurer = header\n 10  /\n\n3 rijen zijn bijgewerkt.\n\nSQL> select * from t_element\n  2  /\n\nID_ELEMENT  ID_DEBTOR INSURER\n---------- ---------- -----------------\n         1          1 Header 1\n         2          1 Header 1\n         3          2 not to be updated\n         4          2 not to be updated\n         5          3 Header 3\n\n5 rijen zijn geselecteerd.\n']], ['What is wrong with my update statement with a join in Oracle?'], 5], [(975315, 4), [["It's better to just add a primary key. You'll probably have this one already in place:"], ['Regards,\nRob.']], [[' SQL> rollback\n  2  /\n\nRollback is voltooid.\n\nSQL> alter table t_debtor add primary key (id_debtor)\n  2  /\n\nTabel is gewijzigd.\n\nSQL> update ( select elt.insurer\n  2                , dtr.header\n  3             from t_element elt\n  4                , t_debtor dtr\n  5            where elt.id_debtor = dtr.id_debtor\n  6              and dtr.header is not null\n  7         )\n  8     set insurer = header\n  9  /\n\n3 rijen zijn bijgewerkt.\n\nSQL> select * from t_element\n  2  /\n\nID_ELEMENT  ID_DEBTOR INSURER\n---------- ---------- -----------------\n         1          1 Header 1\n         2          1 Header 1\n         3          2 not to be updated\n         4          2 not to be updated\n         5          3 Header 3\n\n5 rijen zijn geselecteerd.\n']], ['What is wrong with my update statement with a join in Oracle?'], 5], [(975475, 0), [['Yes if you refernce the right side of a left outer join in a where clause with anything except "where myfield is null", you have created an inner join. This is because it filters out anything that that doesn\'t meet that condition including all the records that don\'t have a match to the intial table. Same with the other non-inner joins. To get around it you put the condition in the join. Example (this turns it into an inner join):'], ['Rewritten to preserve the left join:']], [[" Select field1, field2 from mytable mt\nleft join mytable2 mt2 on mt.id = m2.id\nwhere mt1.field1 = 'hello' and mt2.field2 = 'test'\n"]], ["Is it true that all types of joins reduce to Inner joins in the presence of the check of one table's pk = other table's fk?"], 4], [(975475, 1), [['Rewritten to preserve the left join:'], ['You do not want to combine syntaxes like this; this becomes very hard to maintain. In fact I recommend never using the old style comma syntax as it is subject to accidental cross joins. So in your example I would write to get the result set you currently get (at least someone maintaining will know you indended a cross join instead of did it by accident):']], [[" Select field1, field2 from mytable mt\nleft join mytable2 mt2 on mt.id = m2.id and mt2.field2 = 'test'\nwhere mt1.field1 = 'hello' \n"]], ["Is it true that all types of joins reduce to Inner joins in the presence of the check of one table's pk = other table's fk?"], 4], [(975475, 2), [['You do not want to combine syntaxes like this; this becomes very hard to maintain. In fact I recommend never using the old style comma syntax as it is subject to accidental cross joins. So in your example I would write to get the result set you currently get (at least someone maintaining will know you indended a cross join instead of did it by accident):'], ['Altenatively if the cross join is accidental, the code would change to:']], [[' Select ... From A \nINNER JOIN B on A.id = B.a_id \nINNER JOIN F on A.id = F.a_id\nCROSS JOIN C\nCROSS JOIN D\n']], ["Is it true that all types of joins reduce to Inner joins in the presence of the check of one table's pk = other table's fk?"], 4], [(975475, 3), [['Altenatively if the cross join is accidental, the code would change to:'], ['-10000']], [[' Select ... From A \nINNER JOIN B on A.id = B.a_id\nINNER JOIN F on A.id = F.a_id\nINNER JOIN C on (fill in the join fields)\nINNER JOIN D on (fill in the join fields)\n']], ["Is it true that all types of joins reduce to Inner joins in the presence of the check of one table's pk = other table's fk?"], 4], [(975535, 0), [["You don't need to iterate in SQL, you can write in one statement"], ['After you complete the first delete you can then delete from the original table']], [[' DELETE FROM myOtherTable\nWHERE myTableId IN (SELECT id FROM myTable WHERE id = -1)\n']], ['How can I iterate through a list of rows returned from a select statement in SQL?'], 2], [(975535, 1), [['After you complete the first delete you can then delete from the original table'], ['-10000']], [[' DELETE FROM myTable WHERE id = -1\n']], ['How can I iterate through a list of rows returned from a select statement in SQL?'], 2], [(976449, 0), [['Given this data:'], ['This Gives: ']], [['    PQBSSN   DATE    PQBNAME\n1   1/1/2009    A\n1   1/2/2009    A\n1   1/3/2009    A\n1   1/4/2009    Z\n1   1/5/2009    Z\n1   1/6/2009    Z\n2   1/1/2009    B\n2   1/2/2009    B\n2   1/3/2009    B\n2   1/4/2009    B\n2   1/5/2009    B\n2   1/6/2009    B\n3   1/1/2009    C\n3   1/2/2009    C\n3   1/3/2009    C\n3   1/4/2009    C\n3   1/5/2009    C\n3   1/6/2009    C\n\nSELECT C1.PQBSSN, C1.PQBNAME, C3.Date\nFROM [SELECT DISTINCT CA.PQBSSN, CA.PQBNAME FROM COUPONS AS CA]. AS C1, \n     [SELECT DISTINCT CB.DATE FROM COUPONS AS CB]. AS C3\nWHERE C3.DATE IN \n     (SELECT TOP 2 C2.DATE FROM COUPONS AS C2 WHERE C2.PQBSSN = C1.PQBSSN ORDER BY C2.DATE);\n']], ['SQL Select Question'], 2], [(976449, 1), [['This Gives: '], ['I know this is a simplified version of your table, but I think it achieves your ends.']], [['    PQBSS PQBNAME Date\n    1   A   1/1/2009\n    1   Z   1/1/2009\n    2   B   1/1/2009\n    3   C   1/1/2009\n    1   A   1/2/2009\n    1   Z   1/2/2009\n    2   B   1/2/2009\n    3   C   1/2/2009\n']], ['SQL Select Question'], 2], [(976761, 0), [['You just need to convert the hex  string  to a  byte  array before you add it as a value for your parameter. You can do that with the following code, taken from the answer to  this question  (and translated to VB.NET):'], ['So your code will look something like this...']], [[' Public Shared Function StringToByteArray(ByVal hex As String) As Byte()\n    Dim NumberChars As Integer = hex.Length\n\n    Dim bytes(NumberChars / 2) As Byte\n\n    For i As Integer = 0 To NumberChars - 1 Step 2\n        bytes(i / 2) = Convert.ToByte(hex.Substring(i, 2), 16)\n    Next\n\n    Return bytes\nEnd Function\n']], ['Dealing with a varbinary field in VB.NET'], 2], [(976761, 1), [['So your code will look something like this...'], ['-10000']], [[' byteArrayToken = StringToByteArray(stringToken)\nscSelectThing.CommandText = "select thing from tokenstable where token=@token"\nDim param As SqlParameter = scSelectThing.Parameters.Add("@token", SqlDbType.VarBinary)\nparam.Value = byteArrayToken\nlbOutput2.Text = scSelectThing.ExecuteScalar()\n']], ['Dealing with a varbinary field in VB.NET'], 2], [(977648, 0), [["So here's an alternative solution for the latter case, querying unique pairs even if duplicates exist:"], ['Trying this in MySQL, I get the following optimization plan:']], [[' SELECT r1.*\nFROM Relationships r1\nLEFT OUTER JOIN Relationships r2\n  ON (r1.person_1 = r2.person_2 AND r1.person_2 = r2.person_1)\nWHERE r1.person_1 < r1.person_2\n  OR  r2.person_1 IS NULL;\n']], ['Filter SQL query by a unique set of column values, regardless of their order'], 2], [(977648, 1), [['Trying this in MySQL, I get the following optimization plan:'], ['This seems to be a reasonably good use of indexes.']], [[' +----+-------------+-------+--------+---------------+---------+---------+-----------------------------------+------+--------------------------+\n| id | select_type | table | type   | possible_keys | key     | key_len | ref                               | rows | Extra                    |\n+----+-------------+-------+--------+---------------+---------+---------+-----------------------------------+------+--------------------------+\n|  1 | SIMPLE      | r1    | ALL    | NULL          | NULL    | NULL    | NULL                              |    2 |                          | \n|  1 | SIMPLE      | r2    | eq_ref | PRIMARY       | PRIMARY | 8       | test.r1.person_2,test.r1.person_1 |    1 | Using where; Using index | \n+----+-------------+-------+--------+---------------+---------+---------+-----------------------------------+------+--------------------------+\n']], ['Filter SQL query by a unique set of column values, regardless of their order'], 2], [(977924, 0), [['For example a table created as '], ['And a stored procedure populating the table with']], [[' \n    CREATE TABLE [dbo].[Location]\n    (\n        [LocationSK] [int] IDENTITY(1,1) NOT NULL,\n        [Name] [varchar](50) NOT NULL,\n        [Abbreviation] [varchar](4) NOT NULL,\n        [LocationBK] [int] NOT NULL,\n        [EffectiveFromDate] [datetime] NOT NULL,\n        [EffectiveToDate] [datetime] NULL,\n        [Type1Checksum] [int] NOT NULL,\n        [Type2Checksum] [int] NOT NULL,\n    ) ON [PRIMARY]\n']], ['Handling nulls in Datawarehouse'], 2], [(977924, 1), [['And a stored procedure populating the table with'], ['I have made it a rule to have at least one such pseudo row per dimension which is used in cases where the dimension lookup fails and to build exception reports to track the number of  facts which are assigned to such rows. ']], [[" \nInsert Into dbo.Location (LocationSK, Name, Abbreviation, LocationBK, \n                      EffectiveFromDate,  Type1Checksum, Type2Checksum)\n            Values (-1, 'Unknown location', 'Unk', -1, '1900-01-01', 0,0)\n"]], ['Handling nulls in Datawarehouse'], 2], [(978074, 0), [["It's a boolean logic issue:"], ['i.e.:']], [[' NOT (A and B) <=> NOT A  OR NOT B\n']], ['SQL WHERE excluding records using AND and NOT'], 3], [(978074, 1), [['i.e.:'], ['Is equivalent to:']], [[" NOT ( poe.[TBL_COMPANY] = '011' AND poe.[TBL_DIVISION_1] = '11')\n"]], ['SQL WHERE excluding records using AND and NOT'], 3], [(978074, 2), [['Is equivalent to:'], ['Read:']], [[" ( poe.[TBL_COMPANY] <> '011' OR poe.[TBL_DIVISION_1] <> '11')\n"]], ['SQL WHERE excluding records using AND and NOT'], 3], [(979479, 0), [['Assuming that QuestionID and SelectionID are  IDENTITY  columns you could do something simple like this:'], ["Based on the schema that you've provided, the way I would tackle this is to write a stored procedure that iterates over the Questions you want to copy in exactly the same way as your C# pseudo code. Whilst some people hate the thought of using a CURSOR in T-SQL, this is the kind of situation that it was made for. A rough stab in the dark (untested) would be something like this:"]], [[' INSERT INTO Questions (Question,CategoryID) \nSELECT q.Question, 2\nFROM Questions q\nWHERE q.CategoryID = 1\n']], ['How can I copy data using T-SQL?'], 2], [(979479, 1), [["Based on the schema that you've provided, the way I would tackle this is to write a stored procedure that iterates over the Questions you want to copy in exactly the same way as your C# pseudo code. Whilst some people hate the thought of using a CURSOR in T-SQL, this is the kind of situation that it was made for. A rough stab in the dark (untested) would be something like this:"], ['-10000']], [[' CREATE PROCEDURE PrcCopyQuestions (\n    @CategoryID_from NUMERIC\n    @CategoryID_to   NUMERIC\n)\nAS\nDECLARE\n\n@old_QuestionID NUMERIC(10,0)\n@new_QuestionID NUMERIC(10,0)\n@Question       VARCHAR(255)\n\nDECLARE c_questions CURSOR FOR\n    SELECT  QuestionID, Question\n    FROM    Questions\n    WHERE   CategoryID = @CategoryID_from\n    FOR READ ONLY\n\nBEGIN\n    OPEN c_questions\n    WHILE (1=1)\n    BEGIN\n        FETCH c_questions INTO @old_QuestionID, @Question\n        IF @@SQLSTATUS <> 0 BREAK\n\n        INSERT INTO Questions (Question,CategoryID) \n        SELECT @Question, @CategoryID_to\n\n        SELECT @new_QuestionID = @@IDENTITY\n\n        INSERT INTO Selections (Selection, QuestionID)\n        SELECT s.Selection, @new_QuestionID\n        FROM Selections s\n        WHERE QuestionID = @old_QuestionID\n\n    END\n\n    CLOSE c_questions\n    DEALLOCATE CURSOR c_questions\nEND\n']], ['How can I copy data using T-SQL?'], 2], [(979656, 0), [['As far as I know, you cannot run  ALTER TABLE  commands on the tables in  information_schema . Instead you will probably want to take a look at the  character_set_*  variabes. You can see which variables are set to which values in your MySQL server with a  show variables  command:'], ['For ordinary tables, you change the character set of a table with an  ALTER TABLE  command:']], [[' show variables like "character_set_%";\n']], ['Mysql change column collation and character set of information schema'], 2], [(979656, 1), [['For ordinary tables, you change the character set of a table with an  ALTER TABLE  command:'], ['To do this, you will need the "alter" privilege.']], [[' alter table some_table convert to character set utf8;\n']], ['Mysql change column collation and character set of information schema'], 2], [(980324, 0), [['You could use an array of records to insert several users at the same time. Consider:'], ['Here I defined two datatypes: a  RECORD  type that will contain the data for one user and an  INDEX BY TABLE  that will contain several records. Now the procedure itself:']], [[' SQL> CREATE TABLE "USER"    (\n  2     "Name" VARCHAR2(50),\n  3     "Surname" VARCHAR2(50),\n  4     "Dt_Birth" DATE\n  5  );\n\nTable created\nSQL> CREATE OR REPLACE PACKAGE user_pkg IS\n  2  \n  3     TYPE user_rec IS RECORD (\n  4        name VARCHAR2(50),\n  5        surname VARCHAR2(50),\n  6        dt_birth DATE\n  7     );\n  8     TYPE user_tab IS TABLE OF user_rec INDEX BY BINARY_INTEGER;\n  9  \n 10     PROCEDURE insert_user(p_user user_tab);\n 11  \n 12  END user_pkg;\n 13  /\n\nPackage created\n']], ['Oracle: Variable number of parameters to a stored procedure'], 3], [(980324, 1), [['Here I defined two datatypes: a  RECORD  type that will contain the data for one user and an  INDEX BY TABLE  that will contain several records. Now the procedure itself:'], ['You would then call the procedure like this:']], [[' SQL> CREATE OR REPLACE PACKAGE BODY user_pkg IS\n  2  \n  3     PROCEDURE insert_user(p_user user_tab) IS\n  4     BEGIN\n  5        FOR i IN 1..p_user.count LOOP\n  6           INSERT INTO "USER"("Name", "Surname", "Dt_Birth")\n  7           VALUES (p_user(i).name,\n  8                   p_user(i).surname,\n  9                   p_user(i).dt_birth);\n 10        END LOOP;\n 11     END insert_user;\n 12  \n 13  END user_pkg;\n 14  /\n\n Package body created\n']], ['Oracle: Variable number of parameters to a stored procedure'], 3], [(980324, 2), [['You would then call the procedure like this:'], ['-10000']], [[' SQL> DECLARE\n  2     l_user_tab user_pkg.user_tab;\n  3  BEGIN\n  4     SELECT owner, object_name, created\n  5       BULK COLLECT INTO l_user_tab\n  6       FROM all_objects\n  7      WHERE ROWNUM <= 3;\n  8     user_pkg.insert_user(l_user_tab);\n  9  END;\n 10  /\n\nSQL> SELECT * FROM "USER";\n\nName    Surname  Dt_Birth\n------- -------- -----------\nSYS     IND$     12/05/2000\nSYS     ICOL$    12/05/2000\nSYS     OBJ$     12/05/2000\n']], ['Oracle: Variable number of parameters to a stored procedure'], 3], [(981206, 0), [["Use sysibm.sysdummy1. It is a dummy table you can use to print constants values.\nPrint 'TableName:X' would be:"], ["And Select 'X' As 'TableName' would be:"]], [[" select 'TableName:X' from sysibm.sysdummy1;\n"]], ['DB2 Print analog'], 3], [(981206, 1), [["And Select 'X' As 'TableName' would be:"], ['Similarly if you want to print the current date, etc you can use:']], [[" select 'X' as TableName from sysibm.sysdummy1;\n"]], ['DB2 Print analog'], 3], [(981206, 2), [['Similarly if you want to print the current date, etc you can use:'], ['-10000']], [[' select current date FROM sysibm.sysdummy1;\n']], ['DB2 Print analog'], 3], [(982819, 0), [['-10000'], ["Edit again - I just read Andrew's response, and he may very well have interperpereted correctly, and I might be mistaken.  If this is the case (and you want to UPDATE the table rather than just return doctored results), you can do this:"]], [[' SELECT RIGHT(MyColumn, LEN(MyColumn) - 4) AS MyTrimmedColumn\n']], ['How do I remove the first characters of a specific column in a table?'], 2], [(982819, 1), [["Edit again - I just read Andrew's response, and he may very well have interperpereted correctly, and I might be mistaken.  If this is the case (and you want to UPDATE the table rather than just return doctored results), you can do this:"], ["He's on the right track, but his solution will  keep  the 4 characters at the start of the string, rather than discarding said 4 characters."]], [[' UPDATE MyTable\nSET MyColumn = RIGHT(MyColumn, LEN(MyColumn) - 4)\n']], ['How do I remove the first characters of a specific column in a table?'], 2], [(982919, 0), [['-10000'], ['To make it clear... The  UPDATE  clause can refer to an table alias specified in the  FROM  clause. So  im  in this case is valid']], [[" UPDATE im\nSET mf_item_number = gm.SKU --etc\nFROM item_master im\nJOIN group_master gm\n    ON im.sku = gm.sku \nJOIN Manufacturer_Master mm\n    ON gm.ManufacturerID = mm.ManufacturerID\nWHERE im.mf_item_number like 'STA%' AND\n      gm.manufacturerID = 34\n"]], ['SQL update query using joins'], 2], [(982919, 1), [['To make it clear... The  UPDATE  clause can refer to an table alias specified in the  FROM  clause. So  im  in this case is valid'], ['-10000']], [['Generic example UPDATE A\nSET foo = B.bar\nFROM TableA A\nJOIN TableB B\n    ON A.col1 = B.colx\nWHERE ...\n']], ['SQL update query using joins'], 2], [(983417, 0), [['To strip out "somestring" from "SomeColumn" in "SomeTable" in the SELECT query:'], ['To update the table and strip out "somestring" from "SomeColumn" in "SomeTable"']], [[" SELECT REPLACE([SomeColumn],'somestring','') AS [SomeColumn]  FROM [SomeTable]\n"]], ['How do you strip a character out of a column in SQL Server?'], 2], [(983417, 1), [['To update the table and strip out "somestring" from "SomeColumn" in "SomeTable"'], ['-10000']], [[" UPDATE [SomeTable] SET [SomeColumn] = REPLACE([SomeColumn], 'somestring', '')\n"]], ['How do you strip a character out of a column in SQL Server?'], 2], [(984967, 0), [["Your stored proc is obviously fine, I don't use the EntLib much I think your problem is the line"], ['Try using this instead']], [[' cmd = actionDB.GetSqlStringCommand(lDBCommand)\n']], ['Return Value from Stored Procedure not set'], 2], [(984967, 1), [['Try using this instead'], ['-10000']], [[' cmd = actionDB.GetStoredProcCommand(lDBCommand)\n']], ['Return Value from Stored Procedure not set'], 2], [(986286, 0), [['-10000'], ['with the date change:']], [[" SELECT op.id \nFROM opening op \nWHERE op.id NOT IN \n     (SELECT b.openingid \n      FROM booking b \n      WHERE b.bookingtype='C')\n"]], ['SQL Query - Where am I going wrong?'], 2], [(986286, 1), [['with the date change:'], ['-10000']], [[" SELECT op.id \nFROM opening op \nWHERE op.id NOT IN \n     (SELECT b.openingid \n      FROM booking b \n      WHERE (b.arrivalDate BETWEEN '2009/06/20' AND '2009/06/27') \n             OR \n            (b.departureDate BETWEEN  '2009/06/20' and '2009/06/27')\n     )\n"]], ['SQL Query - Where am I going wrong?'], 2], [(987144, 0), [['I added 2 such columns  EmpID and EmpName and then override CreateNewOutputRows() as'], ['Prior to that we need to set oracle command object in PreExecute subroutine as:']], [[' Public Overrides Sub CreateNewOutputRows()\n\nTry\n\nDim dr As OracleDataReader = oracleCmd.ExecuteReader()\n\nWhile dr.Read\n\nOutput0Buffer.AddRow()\n\nOutput0Buffer.EmpID = CDec(dr(0).ToString)\n\nOutput0Buffer.EmpName = dr(1).ToString\n\nEnd While\n\nCatch ex As Exception\n\nMe.ComponentMetaData.FireError(-1, "InitExtract", ex.Message, String.Empty, 0, True)\n\nEnd Try\n\nOutput0Buffer.SetEndOfRowset()\n\nEnd Sub\n']], ['Return an Oracle Ref Cursor to a SqlServer T-SQL caller'], 2], [(987144, 1), [['Prior to that we need to set oracle command object in PreExecute subroutine as:'], ['-10000']], [[' Dim plsql As String = "BEGIN Get_Employees.GetEmployees(:curEmployeesbyID);END;"\n\noracleCmd = New OracleCommand(plsql, oracleConn)\n\nWith oracleCmd\n\n.CommandType = CommandType.Text\n\n.Parameters.Add(":curEmployeesbyID", OracleType.Cursor).Direction = ParameterDirection.Output\n\nEnd With\n']], ['Return an Oracle Ref Cursor to a SqlServer T-SQL caller'], 2], [(987654, 0), [['For example, in MySQL syntax:'], ["If you use Single Table Inheritance, as you said you're using Ruby on Rails, then the SQL DDL would look like this:"]], [[" CREATE TABLE Posts (\n  post_id     SERIAL PRIMARY KEY,\n  post_type   CHAR(1),              -- must be 'Q' or 'A'\n  -- other columns common to both types of Post\n  UNIQUE KEY (post_id, post_type) -- to support foreign keys\n) ENGINE=InnoDB;\n\nCREATE TABLE Comments (\n  comment_id  SERIAL PRIMARY KEY, \n  post_id     BIGINT UNSIGNED NOT NULL,\n  -- other columns for comments (e.g. date, who, text)\n  FOREIGN KEY (post_id) REFERENCES Posts(post_id)\n) ENGINE=InnoDB; \n\nCREATE TABLE Questions (\n  post_id     BIGINT UNSIGNED PRIMARY KEY,\n  post_type   CHAR(1),              -- must be 'Q'\n  -- other columns specific to Questions\n  FOREIGN KEY (post_id, post_type) REFERENCES Posts(post_id, post_type)\n) ENGINE=InnoDB;\n\nCREATE TABLE Answers (\n  post_id     BIGINT UNSIGNED PRIMARY KEY,\n  post_type   CHAR(1),              -- must be 'A'\n  question_id BIGINT UNSIGNED NOT NULL,\n  -- other columns specific to Answers\n  FOREIGN KEY (post_id, post_type) REFERENCES Posts(post_id, post_type)\n  FOREIGN KEY (question_id) REFERENCES Questions(post_id)\n) ENGINE=InnoDB;\n"]], ['In a StackOverflow clone, what relationship should a Comments table have to Questions and Answers?'], 2], [(987654, 1), [["If you use Single Table Inheritance, as you said you're using Ruby on Rails, then the SQL DDL would look like this:"], ['You can use a foreign key constraint in this example, and I recommend that you do!  :-)']], [[" CREATE TABLE Posts (\n  post_id     SERIAL PRIMARY KEY,\n  post_type   CHAR(1),              -- must be 'Q' or 'A'\n  -- other columns for both types of Post\n  -- Question-specific columns are NULL for Answers, and vice versa.\n) ENGINE=InnoDB;\n\nCREATE TABLE Comments (\n  comment_id  SERIAL PRIMARY KEY, \n  post_id     BIGINT UNSIGNED NOT NULL,\n  -- other columns for comments (e.g. date, who, text)\n  FOREIGN KEY (post_id) REFERENCES Posts(post_id)\n) ENGINE=InnoDB; \n"]], ['In a StackOverflow clone, what relationship should a Comments table have to Questions and Answers?'], 2], [(990209, 0), [['The trigger looks like it is deleting districts whose id equals id_countries, that is, the where clause is actually '], ['You need to reference the id from the countries table. In a delete trigger, use "old" to do this.']], [[' WHERE districts.id_countries = districts.id\n']], ['Cascade Triggers in SQLite'], 4], [(990209, 1), [['You need to reference the id from the countries table. In a delete trigger, use "old" to do this.'], ['Also, I would suggest changing your schema naming convention. Usually, the table name is singular, and corresponds to the entity in a row. I would have a country table with columns id and name, a district table with id, country_id and name, etc. ']], [[' CREATE TRIGGER [delete_country]\nBEFORE DELETE\nON [countries]\nFOR EACH ROW\nBEGIN\nDELETE FROM districts WHERE districts.id_countries = old.id;\nEND\n']], ['Cascade Triggers in SQLite'], 4], [(990209, 2), [['Also, I would suggest changing your schema naming convention. Usually, the table name is singular, and corresponds to the entity in a row. I would have a country table with columns id and name, a district table with id, country_id and name, etc. '], ['Then the trigger would be']], [[' country\n-------\nid\nname\n\ndistrict\n-------\nid\ncountry_id\nname\n\nmunicipality\n------------\nid\ndistrict_id\nname\n\nparish\n-----\nid\nmunicipality_id\nname\n']], ['Cascade Triggers in SQLite'], 4], [(990209, 3), [['Then the trigger would be'], ['-10000']], [[' CREATE TRIGGER [delete_country]\nBEFORE DELETE\nON [country]\nFOR EACH ROW\nBEGIN\nDELETE FROM district WHERE district.country_id = old.id;\nEND\n']], ['Cascade Triggers in SQLite'], 4], [(990857, 0), [["Why not change the trigger to deal with multiple rows?\nNo cursor or loops needed: it's the whole point of SQL ..."], ['Edit: Something like...']], [[' UPDATE\n    dbo.SomeTable\nSET\n    LastModifiedOn = GETDATE()\nWHERE\n    EXIST (SELECT * FROM INSERTED I WHERE I.[ID] = dbo.SomeTable.[ID]\n']], ['Weird trigger problem when I do an INSERT into a table'], 3], [(990857, 1), [['Edit: Something like...'], ['Edit 2: and again with RANKING']], [[" INSERT @ATableVariable\n    (ContentId, ContentTypeId, UniqueSubject)\nSELECT \n    ContentId, ContentTypeId, [dbo].[ToUriCleanText]([Subject])\nFROM\n    INSERTED\n\nUPDATE\n    [dbo].[Contents]\nSET\n    UniqueSubject + CAST(NumberFound AS NVARCHAR(10))\nFROM\n    --Your original COUNT feels wrong and/or trivial\n    --Do you expect 0, 1 or many rows.\n    --Edit2: I assume 0 or 1 because of original WHERE so COUNT(*) will suffice\n    -- .. although, this implies an EXISTS could be used but let's keep it closer to OP post\n    (\n    SELECT ContentId, UniqueSubject, COUNT(*) AS NumberFound\n    FROM @ATableVariable\n    GROUP BY ContentId, UniqueSubject\n    HAVING COUNT(*) > 0\n    ) foo\n    JOIN\n    [dbo].[Contents] C ON C.ContentId = foo.ContentId AND C.UniqueSubject = foo.UniqueSubject\n"]], ['Weird trigger problem when I do an INSERT into a table'], 3], [(990857, 2), [['Edit 2: and again with RANKING'], ['-10000']], [[' UPDATE\n    C\nSET\n    UniqueSubject + CAST(foo.Ranking - 1 AS NVARCHAR(10))\nFROM\n    (\n    SELECT\n        ContentId, --not needed? UniqueSubject,\n        ROW_NUMBER() OVER (PARTITION BY ContentId ORDER BY UniqueSubject) AS Ranking\n    FROM\n        @ATableVariable\n    ) foo\nJOIN\n    dbo.Contents C ON C.ContentId = foo.ContentId \n    /* not needed? AND C.UniqueSubject = foo.UniqueSubject */\nWHERE\nfoo.Ranking > 1\n']], ['Weird trigger problem when I do an INSERT into a table'], 3], [(992090, 0), [['In short:'], ['Then, to retrieve, you would do this:']], [[" status_updates:\n--------------------------------------\n|  status_id  |  user_id  |  status  |\n--------------------------------------\n|          1  |        1  |  Woot!   |\n--------------------------------------\n|          2  |        1  |  Yeah!   |\n--------------------------------------\n|          3  |        2  |  Hello!  |\n--------------------------------------\n\nusers:\n--------------------------\n|  user_id  |  username  |\n--------------------------\n|        1  |  'Joe'     |\n--------------------------\n|        2  |  'John'    |\n--------------------------\n"]], ['What is a better way to store status updates in a database?'], 3], [(992090, 1), [['Then, to retrieve, you would do this:'], ['This will retrieve:']], [[" select\n    u.username,\n    s.status\nfrom\n    status_updates s\n    inner join users u on\n        s.user_id = u.user_id\nwhere\n    u.username = 'John'\n"]], ['What is a better way to store status updates in a database?'], 3], [(992090, 2), [['This will retrieve:'], ['Do with that what you will.  That will be very performant on millions of rows, so long as you build your indexes right.  What RDBMS are you using, so I can point you to the right spot for that?']], [[' -------------------------\n|  username  |  status  |\n-------------------------\n|  John      |  Hello!  |\n-------------------------\n']], ['What is a better way to store status updates in a database?'], 3], [(992173, 0), [['With YAML (advantage: human readable, multiple implementation in different languages):'], ['With Marshalling (Ruby-only, even Ruby version specific):']], [[" require 'yaml'; str = person.to_yaml\n"]], ['How would you represent a relational entity as a single unit of retrievable data in BerkeleyDB?'], 2], [(992173, 1), [['With Marshalling (Ruby-only, even Ruby version specific):'], ['This will only work if class of person is an entity which does not refer to other objects you want not included. For example, references to other persons would need to be taken care of differently. ']], [[' Marshal.dump(person)\n']], ['How would you represent a relational entity as a single unit of retrievable data in BerkeleyDB?'], 2], [(992929, 0), [['Tested in SQLITE3, your DB implementation may differ'], ['So (In SQL Server Syntax)']], [[" SELECT   m.date, \n         s.symbol, \n         s.open, \n         s.high, \n         s.low, \n         s.close, \n         s.volume\nFROM     masterdate AS m LEFT OUTER JOIN \n         stockdata AS s ON m.date = s.date\nAND      s.symbol = 'Foo'\nWHERE    m.date >= (SELECT MIN(date) FROM stockdata WHERE symbol = 'Foo')\nAND      m.date <= (SELECT MAX(date) FROM stockdata WHERE symbol = 'Foo')\n"]], ['Complex(?) SQL join query'], 2], [(992929, 1), [['So (In SQL Server Syntax)'], ['You will also need to be sure that you have an index on masterdate.date and a composite index on stockdata(date, symbol). ']], [[" SET @symbol = 'Foo'\n\nSELECT @mindate = MIN(date),\n       @maxdate = MAX(date)\nFROM   stockdata\nWHERE  stockdata.symbol = @symbol\n\n\nSELECT   m.date, \n         s.symbol, \n         s.open, \n         s.high, \n         s.low, \n         s.close, \n         s.volume\nFROM     masterdate AS m LEFT OUTER JOIN \n         stockdata AS s ON m.date = s.date\nAND      s.symbol = @symbol\nWHERE    m.date BETWEEN @mindate AND @maxdate\n"]], ['Complex(?) SQL join query'], 2], [(997845, 0), [["It seems like in this case you really don't need to generate all of these datapoints.  Would it be correct to generate the following instead?  If it's drawing a straight line, you don't need go generate a data point for each second, just two for each datapoint...one at the current time, one right before the next time.  This example subtracts 5 ms from the next time, but you could make it a full second if you need it."], ["If that's the case, then you can do the following:"]], [[' +-------+---------------------+\n| value | received            |\n+-------+---------------------+\n|     7 | 2000-01-01 08:00:00 |\n|     7 | 2000-01-01 08:00:04 |\n|    10 | 2000-01-01 08:00:05 |\n|    10 | 2000-01-01 08:00:06 |\n|    11 | 2000-01-01 08:00:07 |\n|    11 | 2000-01-01 08:00:12 |\n|     2 | 2000-01-01 08:00:13 |\n|     2 | 2000-01-01 08:00:15 |\n|     4 | 2000-01-01 08:00:16 |\n|     4 | 2000-01-01 08:00:20D |\n+-------+---------------------+\n']], ['Is it possible to temporarily duplicate and modify rows on the fly in an SQL SELECT query?'], 2], [(997845, 1), [["If that's the case, then you can do the following:"], ['The big advantage of this is that it is a set based solution and will be much faster than any iterative approach.']], [[' SELECT * FROM\n(SELECT * from TimeTable as t1\nUNION\nSELECT t2.value, dateadd(ms, -5, t2.received)\nfrom ( Select t3.value, (select top 1 t4.received  \n                         from TimeTable t4 \n                         where t4.received > t3.received\n                         order by t4.received asc) as received\nfrom TimeTable t3) as t2\nUNION\nSELECT top 1 t6.value, GETDATE()\nfrom TimeTable t6\norder by t6.received desc\n) as t5\nwhere received IS NOT NULL\norder by t5.received\n']], ['Is it possible to temporarily duplicate and modify rows on the fly in an SQL SELECT query?'], 2], [(998055, 0), [['You can access the XML files on the server via SQL. With your data in the /tmp/tmp.xml, you would first declare the directory:'], ['You could then query your XML File directly:']], [[" SQL> create directory d as '/tmp';\n\nDirectory created\n"]], ['Oracle: loading a large xml file?'], 3], [(998055, 1), [['You could then query your XML File directly:'], ['To access the fields in your file, you could use the method described in  another SO  for example:']], [[' SQL> SELECT XMLTYPE(bfilename(\'D\', \'tmp.xml\'), nls_charset_id(\'UTF8\')) xml_data\n  2    FROM dual;\n\nXML_DATA\n--------------------------------------------------------------------------------\n<?xml version="1.0" encoding="UTF-8"?>\n<badges>\n  [...]\n']], ['Oracle: loading a large xml file?'], 3], [(998055, 2), [['To access the fields in your file, you could use the method described in  another SO  for example:'], ['-10000']], [[' SQL> SELECT UserId, Name, to_timestamp(dt, \'YYYY-MM-DD"T"HH24:MI:SS.FF3\') dt\n  2    FROM (SELECT XMLTYPE(bfilename(\'D\', \'tmp.xml\'), \n                            nls_charset_id(\'UTF8\')) xml_data\n  3            FROM dual),\n  4         XMLTable(\'for $i in /badges/row\n  5                              return $i\'\n  6                  passing xml_data\n  7                  columns UserId NUMBER path \'@UserId\',\n  8                          Name VARCHAR2(50) path \'@Name\',\n  9                          dt VARCHAR2(25) path \'@Date\');\n\n    USERID NAME       DT                         \n---------- ---------- ---------------------------\n      3718 Teacher    2008-09-15 08:55:03.923    \n       994 Teacher    2008-09-15 08:55:03.957    \n']], ['Oracle: loading a large xml file?'], 3], [(998789, 0), [["From my tests, the following is faster than BradC's method:"], ['Incidentally, if you\'re looking for a way to get a query that lists users along with a "HasContactInfo" boolean value, you could do something like this:']], [[' select (...)\nfrom user u\nwhere not exists (select null from CONTACT_INFO c where u.user_id = c.user_id)\n']], ['Create optimum query to find records that are in only one table'], 2], [(998789, 1), [['Incidentally, if you\'re looking for a way to get a query that lists users along with a "HasContactInfo" boolean value, you could do something like this:'], ['This second solution may not be useful in your case, but I found it to be much faster than some simpler queries that I had assumed would get optimized automatically.']], [[' select u.(...), \n  (case when exists (select null from CONTACT_INFO c where c.user_id = u.user_id) then 1\n        else null\n        end) has_contact_info\nfrom user u\n']], ['Create optimum query to find records that are in only one table'], 2], [(999211, 0), [['(Note this assumes SQL Server)'], ['Then the way I would accomplish it is to have a cursor which builds the update strings on the fly, and exec them kinda like:']], [[' select T.Name, C.Name \nfrom sys.tables T\njoin sys.columns C\non T.object_id = C.object_id\nand C.system_type_id = 61 -- I would do a little researcht o make sure 61 is all you need to return here\n']], ['How to forward demo data dates using a stored procedure?'], 2], [(999211, 1), [['Then the way I would accomplish it is to have a cursor which builds the update strings on the fly, and exec them kinda like:'], ['There are many things I don\'t like about this, the cursor, the fact its behind the scenes, and the exec call, along with I\'m unsure how you will "update only the test data" since it will be very hard to write the where clause for a generic table in your database.  But I think that will get you started.']], [[" DECLARE @UpdateString varchar(500)\nDECLARE @DaysToAdd int\nDECLARE @TableName VARCHAR(100)\nDECLARE @ColumnName VARCHAR(100)\n\nset @DaysToAdd = 10\n\nDECLARE db_cursor CURSOR FOR \nselect T.Name, C.Name \nfrom sys.tables T\njoin sys.columns C\non T.object_id = C.object_id\nand C.system_type_id = 61\n\nOPEN db_cursor  \nFETCH NEXT FROM db_cursor INTO @TableName, @ColumnName  \n\nWHILE @@FETCH_STATUS = 0  \nBEGIN  \nset @UpdateString = 'Update ' + @TableName + ' set ' + @ColumnName + ' = dateadd(dd, ' + cast(@DaysToAdd as varchar) + ', ' + @ColumnName + ') where ...'\nexec(@UpdateString)\n    FETCH NEXT FROM db_cursor INTO @TableName, @ColumnName  \nEND  \n\nCLOSE db_cursor  \nDEALLOCATE db_cursor\n"]], ['How to forward demo data dates using a stored procedure?'], 2], [(999855, 0), [['In SQL Server 2005 (and above) you can do this'], ['If you are on SQL Server 2000, you can use SysTypes. I think the query is as follows:']], [[' SELECT * FROM sys.Types WHERE is_user_defined = 1\n']], ['Query all user defined types from Sql Server?'], 2], [(999855, 1), [['If you are on SQL Server 2000, you can use SysTypes. I think the query is as follows:'], ['-10000']], [[' SELECT * FROM SysTypes WHERE xusertype > 256\n']], ['Query all user defined types from Sql Server?'], 2], [(1001528, 0), [['try'], ['Edit \nedited to reflect change in OP']], [[" select * from table1 inner join table2 on src=concat('node/',nid)\n"]], ['sql join question'], 2], [(1001528, 1), [['Edit \nedited to reflect change in OP'], ['-10000']], [[" select `nid`, MAX(`timestamp`) as `timestamp`, `title` from `node_revisions` inner join `url_alias` on `src`=concat('node/',`nid`) group by `nid` ORDER BY `timestamp` DESC LIMIT 0,5\n"]], ['sql join question'], 2], [(1002036, 0), [["I much prefer the following syntax when updating with a join (instead of doing a subquery). It allows you to see results before you update them and know the query's right."], ["Update : Thanks to tekBlues, I've found out that the above works on SQL Server and Oracle, at the very least.  MySQL has a bit different syntax:"]], [[' select\n   st.key,\n   lt.value\n--update st set value = lt.value\nfrom\n   second_table st\n   inner join lookup_table lt on\n       st.key = lt.key\n']], ['SQL query: how do I change a value according to a lookup table?'], 2], [(1002036, 1), [["Update : Thanks to tekBlues, I've found out that the above works on SQL Server and Oracle, at the very least.  MySQL has a bit different syntax:"], ["Those are the big RDBMS's, so hopefully one of those is helpful."]], [[' update\n    second_table st\n    inner join lookup_table lt on\n        st.key = lt.key\nset\n    st.value = lt.value\n']], ['SQL query: how do I change a value according to a lookup table?'], 2], [(1002248, 0), [['table + data (DML + DDL)'], ['Query']], [[" create table Apples(id int,brand varchar(20),HasWorms bit)\n\ninsert Apples values(1,'Granny Smith',1)\ninsert Apples values(2,'Granny Smith',0)\ninsert Apples values(3,'Granny Smith',1)\ninsert Apples values(4,'Jonagold',0)\ninsert Apples values(5,'Jonagold',0)\ninsert Apples values(6,'Gala',1)\ninsert Apples values(7,'Gala',1)\n"]], ['Group by with count'], 3], [(1002248, 1), [['Query'], ['Output']], [[' select brand, IsSpoiled = sign(sum(convert(int,hasworms)))\nfrom apples\ngroup by brand\n']], ['Group by with count'], 3], [(1002248, 2), [['Output'], ['-10000']], [[' brand   IsSpoiled\n---------------------- \nGala    1\nGranny Smith    1\nJonagold    0\n']], ['Group by with count'], 3], [(1003011, 0), [['I\'ll limit my criticism to say that your table design is not normalized, and isn\'t very pretty, but I\'ll assume you have your reasons.  I typically do these "rotation" queries by using DECODE combined with a aggregate column, grouping by my key - in this case, your pseudo-key, trunc(ID/100).  Combine that with the update syntax that uses tuples: '], ['and you get:']], [['  UPDATE Foo\n    SET (a, b, c, d)\n      = (w, x, y, z);\n']], ['Oracle 10g PL/SQL- Select results as update column values'], 2], [(1003011, 1), [['and you get:'], ['-10000']], [['   UPDATE KeyMap\n     SET\n       ( key1\n       , key2\n       , key3\n       , key4\n       ...\n       , key99\n       )\n       = ( SELECT MAX(decode(mod(ID, 100), 1, Key, NULL))\n                , MAX(decode(mod(ID, 100), 2, Key, NULL))\n                , MAX(decode(mod(ID, 100), 3, Key, NULL))\n                , MAX(decode(mod(ID, 100), 4, Key, NULL))\n                ...\n                , MAX(decode(mod(ID, 100), 99, Key, NULL))\n             FROM Source\n            WHERE Trunc(Source.ID / 100) = KeyMap.batchId\n            GROUP BY Trunc(Source.ID / 100)\n         )\n   WHERE BatchId = <x>;\n']], ['Oracle 10g PL/SQL- Select results as update column values'], 2], [(1005036, 0), [['Most database servers have a  COALESCE  function, which will return the first argument that is non-null, so the following should do what you want:'], ['Just to clarify things since there seems to be a lot of discussion about "COALESCE/ISNULL will still return NULL if no rows match", try this query you can copy-and-paste into SQL Server directly as-is:']], [[' SELECT COALESCE(SUM(Price),0) AS TotalPrice\nFROM Inventory\nWHERE (DateAdded BETWEEN @StartDate AND @EndDate)\n']], ['How can I change NULL to 0 when getting a single value from a SQL function?'], 2], [(1005036, 1), [['Just to clarify things since there seems to be a lot of discussion about "COALESCE/ISNULL will still return NULL if no rows match", try this query you can copy-and-paste into SQL Server directly as-is:'], ["Note that the where clause excludes all the rows from sys.columns from consideration, but the 'sum' operator still results in a single row being returned that is null, which coalesce fixes to be a single row with a 0.  "]], [[' SELECT coalesce(SUM(column_id),0) AS TotalPrice \nFROM sys.columns\nWHERE (object_id BETWEEN -1 AND -2)\n']], ['How can I change NULL to 0 when getting a single value from a SQL function?'], 2], [(1006976, 0), [['If you make a function called string_agg() using the above link, you can use it as below in your code:'], ['Here is the string_agg function create script.  Just run this as a script and you will have the function above (taken from the link shown above):']], [[' select a.username, string_agg(c.name) from admins a, adminrooms b, groups c\nwhere a.code=b.admincode\nand b.groupcode=c.code\ngroup by a.username\n']], ['oracle query with multiple subqueries'], 2], [(1006976, 1), [['Here is the string_agg function create script.  Just run this as a script and you will have the function above (taken from the link shown above):'], ['-10000']], [[" CREATE OR REPLACE TYPE t_string_agg AS OBJECT\n(\n  g_string  VARCHAR2(32767),\n\n  STATIC FUNCTION ODCIAggregateInitialize(sctx  IN OUT  t_string_agg)\n    RETURN NUMBER,\n\n  MEMBER FUNCTION ODCIAggregateIterate(self   IN OUT  t_string_agg,\n                                       value  IN      VARCHAR2 )\n     RETURN NUMBER,\n\n  MEMBER FUNCTION ODCIAggregateTerminate(self         IN   t_string_agg,\n                                         returnValue  OUT  VARCHAR2,\n                                         flags        IN   NUMBER)\n    RETURN NUMBER,\n\n  MEMBER FUNCTION ODCIAggregateMerge(self  IN OUT  t_string_agg,\n                                     ctx2  IN      t_string_agg)\n    RETURN NUMBER\n);\n/\nSHOW ERRORS\n\n\nCREATE OR REPLACE TYPE BODY t_string_agg IS\n  STATIC FUNCTION ODCIAggregateInitialize(sctx  IN OUT  t_string_agg)\n    RETURN NUMBER IS\n  BEGIN\n    sctx := t_string_agg(NULL);\n    RETURN ODCIConst.Success;\n  END;\n\n  MEMBER FUNCTION ODCIAggregateIterate(self   IN OUT  t_string_agg,\n                                       value  IN      VARCHAR2 )\n    RETURN NUMBER IS\n  BEGIN\n    SELF.g_string := self.g_string || ',' || value;\n    RETURN ODCIConst.Success;\n  END;\n\n  MEMBER FUNCTION ODCIAggregateTerminate(self         IN   t_string_agg,\n                                         returnValue  OUT  VARCHAR2,\n                                         flags        IN   NUMBER)\n    RETURN NUMBER IS\n  BEGIN\n    returnValue := RTRIM(LTRIM(SELF.g_string, ','), ',');\n    RETURN ODCIConst.Success;\n  END;\n\n  MEMBER FUNCTION ODCIAggregateMerge(self  IN OUT  t_string_agg,\n                                     ctx2  IN      t_string_agg)\n    RETURN NUMBER IS\n  BEGIN\n    SELF.g_string := SELF.g_string || ',' || ctx2.g_string;\n    RETURN ODCIConst.Success;\n  END;\nEND;\n/\nSHOW ERRORS\n\n\nCREATE OR REPLACE FUNCTION string_agg (p_input VARCHAR2)\nRETURN VARCHAR2\nPARALLEL_ENABLE AGGREGATE USING t_string_agg;\n/\nSHOW ERRORS\n"]], ['oracle query with multiple subqueries'], 2], [(1008354, 0), [["I don't think your problem is well-defined, but here's a solution:"], ['Which gives results:']], [[" --CREATE TABLE so1008354 (\n--  Name1 VARCHAR(10)\n--  ,Name2 VARCHAR(10)\n--  ,Name3 VARCHAR(10)\n--  ,Name4 VARCHAR(10)\n--)\n--\n--INSERT INTO so1008354 (Name1, Name2, Name3, Name4) VALUES ( 'N1', 'N2', 'N3', 'N4' ) \n--INSERT INTO so1008354 (Name1, Name2, Name3, Name4) VALUES ( '1', '2', '4', '7' ) \n--INSERT INTO so1008354 (Name1, Name2, Name3, Name4) VALUES ( '3', '1', '8', '7' ) \n--INSERT INTO so1008354 (Name1, Name2, Name3, Name4) VALUES ( '4', '8', '5', '7' ) \n--INSERT INTO so1008354 (Name1, Name2, Name3, Name4) VALUES ( '7', '5', '3', '8' ) \n\nSELECT  *\nFROM    so1008354\n\n--\n;\nWITH    unpvt\n          AS ( SELECT   col1,\n                        col2\n               FROM     so1008354 UNPIVOT ( col2 FOR col1 IN ( [Name1], [Name2], [Name3], [Name4] ) ) AS unpvt\n             ) ,\n        XLate\n          AS ( SELECT   col1 AS NameList_pre,\n                        col2 AS NameList\n               FROM     unpvt\n               WHERE    col2 LIKE 'N%'\n             ) ,\n        Data\n          AS ( SELECT   col1 AS NameList_pre,\n                        col2 AS Tokens\n               FROM     unpvt\n               WHERE    col2 NOT LIKE 'N%'\n             )\n    SELECT  XLate.NameList,\n            Data.Tokens\n    FROM    Data\n            INNER JOIN XLate ON XLate.NameList_pre = Data.NameList_pre\n    ORDER BY XLate.NameList,\n            Data.Tokens\n"]], ['Column listing in SQL'], 2], [(1008354, 1), [['Which gives results:'], ['-10000']], [[' Name1      Name2      Name3      Name4\n---------- ---------- ---------- ----------\nN1         N2         N3         N4\n1          2          4          7\n3          1          8          7\n4          8          5          7\n7          5          3          8\n\n(5 row(s) affected)\n\nNameList   Tokens\n---------- ----------\nN1         1\nN1         3\nN1         4\nN1         7\nN2         1\nN2         2\nN2         5\nN2         8\nN3         3\nN3         4\nN3         5\nN3         8\nN4         7\nN4         7\nN4         7\nN4         8\n\n(16 row(s) affected)\n']], ['Column listing in SQL'], 2], [(1008709, 0), [["The answer for Oracle is it depends.  The function will be called for every row selected UNLESS the Function is marked 'Deterministic' in which case it will only be called once."], ['Output:']], [[" CREATE OR REPLACE PACKAGE TestCallCount AS\n    FUNCTION StringLen(SrcStr VARCHAR) RETURN INTEGER;\n    FUNCTION StringLen2(SrcStr VARCHAR) RETURN INTEGER DETERMINISTIC;\n    FUNCTION GetCallCount RETURN INTEGER;\n    FUNCTION GetCallCount2 RETURN INTEGER;\nEND TestCallCount;\n\nCREATE OR REPLACE PACKAGE BODY TestCallCount AS\n    TotalFunctionCalls INTEGER := 0;\n    TotalFunctionCalls2 INTEGER := 0;\n\n    FUNCTION StringLen(SrcStr VARCHAR) RETURN INTEGER AS\n    BEGIN\n        TotalFunctionCalls := TotalFunctionCalls + 1;\n        RETURN Length(SrcStr);\n    END;\n    FUNCTION GetCallCount RETURN INTEGER AS\n    BEGIN\n        RETURN TotalFunctionCalls;\n    END;\n\n    FUNCTION StringLen2(SrcStr VARCHAR) RETURN INTEGER DETERMINISTIC AS\n    BEGIN\n        TotalFunctionCalls2 := TotalFunctionCalls2 + 1;\n        RETURN Length(SrcStr);\n    END;\n    FUNCTION GetCallCount2 RETURN INTEGER AS\n    BEGIN\n        RETURN TotalFunctionCalls2;\n    END;\n\nEND TestCallCount;\n\n\n\n\nSELECT a,TestCallCount.StringLen('foo') FROM(\n    SELECT 0 as a FROM dual\n    UNION\n    SELECT 1 as a FROM dual\n    UNION\n    SELECT 2 as a FROM dual\n);\n\nSELECT TestCallCount.GetCallCount() AS TotalFunctionCalls FROM dual;\n"]], ['Oracle and SQLServer function evaluation in queries'], 5], [(1008709, 1), [['Output:'], ['So the StringLen() function was called three times in the first case.  Now when executing with StringLen2() which is denoted deterministic:']], [[" A                      TESTCALLCOUNT.STRINGLEN('FOO') \n---------------------- ------------------------------ \n0                      3                              \n1                      3                              \n2                      3                              \n\n3 rows selected\n\n\nTOTALFUNCTIONCALLS     \n---------------------- \n3                      \n\n1 rows selected\n"]], ['Oracle and SQLServer function evaluation in queries'], 5], [(1008709, 2), [['So the StringLen() function was called three times in the first case.  Now when executing with StringLen2() which is denoted deterministic:'], ['Results:']], [[" SELECT a,TestCallCount.StringLen2('foo') from(\n    select 0 as a from dual\n    union\n    select 1 as a from dual\n    union\n    select 2 as a from dual\n);\n\nSELECT TestCallCount.GetCallCount2() AS TotalFunctionCalls FROM dual;\n"]], ['Oracle and SQLServer function evaluation in queries'], 5], [(1008709, 3), [['Results:'], ['For a function not marked deterministic, you can get around this by modifying your query as such:']], [[" A                      TESTCALLCOUNT.STRINGLEN2('FOO') \n---------------------- ------------------------------- \n0                      3                               \n1                      3                               \n2                      3                               \n\n3 rows selected\n\nTOTALFUNCTIONCALLS     \n---------------------- \n1                      \n\n1 rows selected\n"]], ['Oracle and SQLServer function evaluation in queries'], 5], [(1008709, 4), [['For a function not marked deterministic, you can get around this by modifying your query as such:'], ['-10000']], [[" select a, b, c, hashed\n  from my_table\ncross join (\n  select dbms_crypto.hash(utl_raw.cast_to_raw('HELLO'),3) as hashed from dual\n);\n"]], ['Oracle and SQLServer function evaluation in queries'], 5], [(1008819, 0), [['You can use  charindex  and  substring .  For example, to search for the value of "baz":'], ['Or for the value of "foo" at the start of the string:']], [[" declare @str varchar(128)\nset @str = 'foo=abc;bar=def;baz=ghi'\n\n-- Make sure @str starts and ends with a ;\nset @str = ';' + @str + ';'\n\nselect substring(@str, \n    charindex(';baz=',@str) + len(';baz='),\n    charindex('=',@str,charindex(';baz=',@str)) - charindex(';baz=',@str) - 1)\n"]], ['Find a specific substring using Transact-SQL'], 3], [(1008819, 1), [['Or for the value of "foo" at the start of the string:'], ["Here's a UDF to accomplish this (more readable version inspired by BlackTigerX's answer):"]], [[" select substring(@str, \n    charindex(';foo=',@str) + len(';foo='),\n    charindex('=',@str,charindex(';foo=',@str)) - charindex(';foo=',@str) - 1)\n"]], ['Find a specific substring using Transact-SQL'], 3], [(1008819, 2), [["Here's a UDF to accomplish this (more readable version inspired by BlackTigerX's answer):"], ["As you can see, this isn't easy in Sql Server :)  Better do this in the client language, or normalize your database so the substrings go in their own columns."]], [[" create function dbo.FindValueInString(\n    @search varchar(256),\n    @name varchar(30))\nreturns varchar(30)\nas\nbegin\n    declare @name_start int\n    declare @name_length int\n    declare @value_start int\n    declare @value_end int\n\n    set @search = ';' + @search\n\n    set @name_start = charindex(';' + @name + '=',@search)\n    if @name_start = 0\n        return NULL\n\n    set @name_length = len(';' + @name + '=')\n    set @value_start = @name_start + @name_length\n    set @value_end = charindex(';', @search, @value_start)\n\n    return substring(@search, @value_start, @value_end - @value_start)\nend\n"]], ['Find a specific substring using Transact-SQL'], 3], [(1009954, 0), [['You can initialize this variable with a  SET  statement or inside in a query:'], ['When you develop a stored procedure in  MySQL , you can pass the input parameters and declare the local variables:']], [[' SET @var = 1\n\nSELECT @var2 := 2\n']], ["MySQL: @variable vs. variable. What's the difference?"], 3], [(1009954, 1), [['When you develop a stored procedure in  MySQL , you can pass the input parameters and declare the local variables:'], ['The difference between a procedure variable and a session-specific user-defined variable is that procedure variable is reinitialized to  NULL  each time the procedure is called, while the session-specific variable is not:']], [[' DELIMITER //\n\nCREATE PROCEDURE prc_test (var INT)\nBEGIN\n    DECLARE  var2 INT;\n    SET var2 = 1;\n    SELECT  var2;\nEND;\n//\n\nDELIMITER ;\n']], ["MySQL: @variable vs. variable. What's the difference?"], 3], [(1009954, 2), [['The difference between a procedure variable and a session-specific user-defined variable is that procedure variable is reinitialized to  NULL  each time the procedure is called, while the session-specific variable is not:'], ['As you can see,  var2  (procedure variable) is reinitialized each time the procedure is called, while  @var2  (session-specific variable) is not.']], [[' CREATE PROCEDURE prc_test ()\nBEGIN\n    DECLARE var2 INT DEFAULT 1;\n    SET var2 = var2 + 1;\n    SET @var2 = @var2 + 1;\n    SELECT  var2, @var2;\nEND;\n\nSET @var2 = 1;\n\nCALL prc_test();\n\nvar2  @var2\n---   ---\n2     2\n\n\nCALL prc_test();\n\nvar2  @var2\n---   ---\n2     3\n\n\nCALL prc_test();\n\nvar2  @var2\n---   ---\n2     4\n']], ["MySQL: @variable vs. variable. What's the difference?"], 3], [(1011007, 0), [['For example, storing connection string in app.config (excerpt from app.config):  '], ['Later in your application, you access this connection string like this:\n(add reference to System.Configuration)']], [[' <connectionStrings>\n   <add name="db" connectionString="Provider=Microsoft.SQLSERVER.OLEDB.CE.2.0; data source=c:SomePathToSDFfile" />\n</connectionStrings>\n']], ['How data sources are linked in compiled Visual Basic .NET applications?'], 2], [(1011007, 1), [['Later in your application, you access this connection string like this:\n(add reference to System.Configuration)'], ['-10000']], [['   Dim c As Configuration.ConnectionStringSettingsCollection\n  Dim cn As SqlClient.SqlConnection\n\n  c = Configuration.ConfigurationManager.ConnectionStrings\n  cn = New SqlClient.SqlConnection\n  cn.ConnectionString = c.Item("db").ConnectionString\n  cn.Open()\n']], ['How data sources are linked in compiled Visual Basic .NET applications?'], 2], [(1012475, 0), [['If you have lots of banned users:'], ['If you have few banned users:']], [[' SELECT  *\nFROM    user uo\nWHERE   EXISTS (\n        SELECT  1\n        FROM    user ui\n        WHERE   ui.ip = uo.ip\n                AND banned = 1\n        LIMIT 4, 1\n        )\n        AND banned = 0\n']], ['New records with common data'], 2], [(1012475, 1), [['If you have few banned users:'], ['In both cases, having an index on  (ip, banned)  will improve these queries a lot.']], [[' SELECT  *\nFROM    user\nWHERE   ip IN (\n        SELECT  ip\n        FROM    user\n        WHERE   banned = 1\n        GROUP BY\n                ip\n        HAVING  COUNT(*) >= 5\n        )\n        AND banned = 0\n']], ['New records with common data'], 2], [(1012504, 0), [['The polygon is a fundamental Postgres type which PostGIS builds on top of.  You enable the geometry columns with the PostGIS function  select AddGeometryColumn(...) .  Otherwise you are working with straight polygons:'], ['This is the center point of the polygon']], [[" => create table gt (id int, space polygon);\n=> insert into gt values (1, '((2,2),(3,4),(3,6),(1,1))');\nINSERT 0 1\n=> select point(space) from gt where id = 1;\n    point    \n-------------\n (2.25,3.25)\n(1 row)\n"]], ['SQL query for point-in-polygon using PostgreSQL'], 2], [(1012504, 1), [['This is the center point of the polygon'], ['This is the minimum bounding circle of the polygon, expressed as a Postgres  circle  type.  All the geometric operators are documented  here: http://www.postgresql.org/docs/8.3/interactive/functions-geometry.html   The base polygon does not have any projection data, SRID, etc., so if it works with PostGIS it is probably just defaulting to presets and getting lucky.  But of course there are tons of cases where you simply need geometry on a sub-geospatial scale.']], [[' => select circle(space) from gt where id = 1;\n             circle             \n--------------------------------\n <(2.25,3.25),1.93994028704315>\n(1 row)\n']], ['SQL query for point-in-polygon using PostgreSQL'], 2], [(1013923, 0), [['The problem with the initial query was this:'], ['you would want pt1, pt2, and (in a subquery) pt3, and something like this:']], [['   and lower(pt.value) = "cats"\n  and lower(pt.value) = "kittens"\n']], ['multiple table select using many where clauses, is there a better way than self-join?'], 2], [(1013923, 1), [['you would want pt1, pt2, and (in a subquery) pt3, and something like this:'], ['The broadly general case could get quite messy...']], [[' and lower(pt1.value) = "cats"\nand lower(pt2.value) in ("kittens", "dogs")\nand not exists (select * from \'.TABLE_PRODUCT_TAG.\' pt3 where pt3.product_id = p.id and lower(pt3.value) = "parrots")\n']], ['multiple table select using many where clauses, is there a better way than self-join?'], 2], [(1017219, 0), [["So, good news and bad news.  Here's the good news."], ['Produces a hierarchy like this:']], [[" CREATE FUNCTION [dbo].[GetReportTree](@ItemId uniqueidentifier)\nRETURNS XML\nBEGIN RETURN \n  (SELECT   ca.ItemId AS '@ItemId',\n            ca.Name AS '@Name',\n            ca.Type AS '@Type',\n            dbo.GetReportTree(ca.ItemId)\n   FROM dbo.Catalog ca\n   WHERE (@ItemId IS NULL AND ParentId IS NULL) OR ParentID=@ItemId\n   FOR XML PATH('CatalogItem'), TYPE)\nEND\n\nSELECT dbo.[GetReportTree](NULL)   \n"]], ['XML to nest folder content'], 2], [(1017219, 1), [['Produces a hierarchy like this:'], ['The bad news, is that I am not sure if you can do it without adding the "ReportTree" function into your ReportServer.  So, it depends on your access to that server.   You may be able to get the function to work across databases, I did not try that.']], [[' <CatalogItem Name="" Type="1">\n  <CatalogItem Name="ScrumTest" Type="1">\n    <CatalogItem Name="(Hidden) Delta Report Small" Type="2" />\n    <CatalogItem Name="(Hidden) Product Burndown Chart Small" Type="2" />\n    <CatalogItem Name="(Hidden) Product Cumulative Flow Small" Type="2" />\n    <CatalogItem Name="(Hidden) Sprint Burndown Chart Small" Type="2" />\n    <CatalogItem Name="All Product Backlog Items" Type="2" />\n    <CatalogItem Name="All Sprint Backlog Items" Type="2" />\n    <CatalogItem Name="All Sprints" Type="2" />\n    <CatalogItem Name="Current Sprint Status" Type="2" />\n    <CatalogItem Name="Delta Report" Type="2" />\n    <CatalogItem Name="Engineering Reports" Type="1">\n      <CatalogItem Name="(Hidden) Bug History Chart Small" Type="2" />\n      <CatalogItem Name="Bug Count" Type="2" />\n      <CatalogItem Name="Bug History Chart" Type="2" />\n      <CatalogItem Name="Bug Priority Chart" Type="2" />\n    </CatalogItem>\n    <CatalogItem Name="Impediment Report" Type="2" />\n    <CatalogItem Name="Product Backlog Composition" Type="2" />\n    <CatalogItem Name="Product Burndown Chart" Type="2" />\n    <CatalogItem Name="Product Cumulative Flow" Type="2" />\n    <CatalogItem Name="Retrospective Report" Type="2" />\n']], ['XML to nest folder content'], 2], [(1017239, 0), [['In  Oracle ,  NULL  values are not indexed, i. e. this query:'], ['More than that, this query:']], [[' SELECT  *\nFROM    table\nWHERE   column IS NULL\n']], ['How do NULL values affect performance in a database search?'], 2], [(1017239, 1), [['More than that, this query:'], ['will also use full table scan and sort for same reason.']], [[' SELECT  column\nFROM    table\nORDER BY\n        column\n']], ['How do NULL values affect performance in a database search?'], 2], [(1018057, 0), [["I agree with @Quassnoi's focus on recursive CTEs (in SQL Server 2005 or later) but I think the logic is different to answer the original question:"], ['A probably more optimized way to express the same logic should be to have the visible checks in the WHERE as much as possible -- stop recursion along invisible "subtrees" ASAP. I.e.:']], [[' WITH visall(id, parentid, visible) AS\n   (SELECT  id, parentid, visible\n    FROM    mytree\n    WHERE   parentid IS NULL\n        UNION ALL\n    SELECT  m.id, m.parentid, m.visible & visall.visible AS visible\n    FROM    visall\n    JOIN    mytree m\n      ON    m.parentid = visall.id\n   )\nSELECT  *\nFROM    visall\nWHERE   visall.visible = 1\n']], ['Filtering out children in a table with parentid'], 2], [(1018057, 1), [['A probably more optimized way to express the same logic should be to have the visible checks in the WHERE as much as possible -- stop recursion along invisible "subtrees" ASAP. I.e.:'], ["As usual with performance issues, benchmarking both versions on realistic data is necessary to decide with confidence (it also helps to check that they do indeed produce identical results;-) -- as DB engines' optimizers sometimes do strange things for strange reasons;-)."]], [[' WITH visall(id, parentid, visible) AS\n   (SELECT  id, parentid, visible\n    FROM    mytree\n    WHERE   parentid IS NULL AND visible = 1\n        UNION ALL\n    SELECT  m.id, m.parentid, m.visible\n    FROM    visall\n    JOIN    mytree m\n      ON    m.parentid = visall.id\n    WHERE   m.visible = 1\n   )\nSELECT  *\nFROM    visall\n']], ['Filtering out children in a table with parentid'], 2], [(1018952, 0), [['For example, instead of:'], ['Write:']], [[" SELECT *\nFROM Customers c\nINNER JOIN CustomerAccounts ca\n    ON ca.CustomerID = c.CustomerID\n    AND c.State = 'NY'\nINNER JOIN Accounts a\n    ON ca.AccountID = a.AccountID\n    AND a.Status = 1\n"]], ['Condition within JOIN or WHERE'], 2], [(1018952, 1), [['Write:'], ['But it depends, of course.']], [[" SELECT *\nFROM Customers c\nINNER JOIN CustomerAccounts ca\n    ON ca.CustomerID = c.CustomerID\nINNER JOIN Accounts a\n    ON ca.AccountID = a.AccountID\nWHERE c.State = 'NY'\n    AND a.Status = 1\n"]], ['Condition within JOIN or WHERE'], 2], [(1019475, 0), [['What if you try this?'], ['Or you can try the alternate EXISTS syntax']], [[' INSERT INTO tableC \nSELECT * \nFROM tableA \nWHERE tableA.field NOT IN (SELECT tableB.field FROM tableB)\n']], ['MySQL how to remove records in a table that are in another table'], 2], [(1019475, 1), [['Or you can try the alternate EXISTS syntax'], ['-10000']], [[' INSERT INTO tableC \nSELECT * \nFROM tableA \nWHERE NOT EXISTS (SELECT * FROM tableB WHERE tableB.field = tableA.field)\n']], ['MySQL how to remove records in a table that are in another table'], 2], [(1019661, 0), [['Assuming the Day IDs are always sequential for a partial solution...'], ['lists the start day IDs:']], [[' select *\n  from employee_schedule a                    \n where not exists( select *                          \n                     from employee_schedule b        \n                    where a.employeeid = b.employeeid\n                      and a.projectid  = b.projectid \n                      and (a.dayid - 1) = b.dayid )\n']], ['Finding Start and End Dates from Date Numbers Table (Date Durations)'], 3], [(1019661, 1), [['lists the start day IDs:'], ['lists the end day IDs:']], [['  ID      EMPLOYEEID       PROJECTID           DAYID \n 1              64               2             168 \n 5              64               1             169 \n 9              64               2             182 \n\n\n\nselect *\n  from employee_schedule a                   \n where not exists( select *                         \n                     from employee_schedule b       \n                    where a.employeeid = b.employeei\n                      and a.projectid  = b.projectid\n                      and (a.dayid + 1) = b.dayid )\n']], ['Finding Start and End Dates from Date Numbers Table (Date Durations)'], 3], [(1019661, 2), [['lists the end day IDs:'], ['-10000']], [['   ID      EMPLOYEEID       PROJECTID           DAYID \n  4              64               2             171 \n  8              64               1             172 \n 11              64               2             184 \n']], ['Finding Start and End Dates from Date Numbers Table (Date Durations)'], 3], [(1019922, 0), [['MODEL'], ['VIEW']], [[' public class Groups\n{\n    public List<Files> GroupFiles { get; set; }\n    public String Name{ get; set; }\n}\n\npublic class File\n{\n    public int FileId { get; set; }\n    public String FileName { get; set; }\n    public String FileSize { get; set; }\n}\n']], ['ASP.Net MVC Data Formatting'], 2], [(1019922, 1), [['VIEW'], ['-10000']], [[' <%\nforeach(var group in myModel.FileGroups)\n{\n%>\n      <h2><%= group.Name %></h2>\n      <table>\n<%   \n    foreach(var file in group.Files)\n    { %>\n\n         <tr>\n             <td><%= file.FileID %></td>\n             <td><%= file.FileName %></td>\n             <td><%= file.FileSize %></td>\n         </tr>\n\n    <%\n    } %>\n</table>\n<%\n}\n%>\n']], ['ASP.Net MVC Data Formatting'], 2], [(1021988, 0), [['-10000'], ['is shorthand for']], [[' a BETWEEN b AND c\n']], ['In SQL, does a BETWEEN statement have to be of the form BETWEEN lowest AND highest?'], 2], [(1021988, 1), [['is shorthand for'], ["So BETWEEN 100 and 1 won't match anything."]], [[' b <= a and a <= c\n']], ['In SQL, does a BETWEEN statement have to be of the form BETWEEN lowest AND highest?'], 2], [(1022514, 0), [['In Ms SQL 2005+ you can use the  ROW_NUMBER()  keyword and have the Predicate ROW_NUMBER = n'], ['In SQL2000 you could do something like ']], [[" USE AdventureWorks;\nGO\nWITH OrderedOrders AS\n(\n    SELECT SalesOrderID, OrderDate,\n    ROW_NUMBER() OVER (ORDER BY OrderDate) AS 'RowNumber'\n    FROM Sales.SalesOrderHeader \n)  \n\nSELECT * \nFROM OrderedOrders \nWHERE RowNumber = 5;\n"]], ['Selecting Nth Record in an SQL Query'], 2], [(1022514, 1), [['In SQL2000 you could do something like '], ['-10000']], [[' SELECT Top 1 *FROM\n[tblApplications]\nwhere [ApplicationID] In\n(\n    SELECT TOP 5 [ApplicationID]\n    FROM [dbo].[tblApplications]\n    order by applicationId Desc\n)\n']], ['Selecting Nth Record in an SQL Query'], 2], [(1026317, 0), [["Let's say you have two tables like this:"], ['Create a new link table between them that also stores the extra RSVP information you want.']], [[' Contacts     Events \n--------     --------\nContactID    EventID\nFirstName    EventDate\nLastName     EventDetails\n']], ['Creating "complex forms" in FileMaker - is it even possible?'], 8], [(1026317, 1), [['Create a new link table between them that also stores the extra RSVP information you want.'], ['Create a FORM table']], [[' RSVP\n--------\nfk_ContactID\nfk_EventID\nPaymentInfo\n']], ['Creating "complex forms" in FileMaker - is it even possible?'], 8], [(1026317, 2), [['Create a FORM table'], ['Add the following fields to the Contacts and Events tables:']], [[' FORM\n--------\nContactSearch\ncContactMatch = Calculation, If(isEmpty(ContactSearch) ; "ALL" ; ContactSearch)\nEventSearch\ncEventMatch = Calculation, If(isEmpty(EventSearch) ; "ALL" ; EventSearch)\n']], ['Creating "complex forms" in FileMaker - is it even possible?'], 8], [(1026317, 3), [['Add the following fields to the Contacts and Events tables:'], ['This means that the cMatchField for Contacts will look something like this:']], [[' Contacts\n--------\ncMatchField = Calculation, Stored, (FirstName + NEWLINE + LastName + NEWLINE + ALL + NEWLINE + Firstname LastName) \n\nEvents\n--------\ncMatchField = Calculation, Stored, (EventDate + NEWLINE + EventDetails + NEWLINE + ALL)\n']], ['Creating "complex forms" in FileMaker - is it even possible?'], 8], [(1026317, 4), [['This means that the cMatchField for Contacts will look something like this:'], ['In the relationship diagram, connect the tables like this:']], [[' John\nSmith\nJohn Smith\nALL\n']], ['Creating "complex forms" in FileMaker - is it even possible?'], 8], [(1026317, 5), [['In the relationship diagram, connect the tables like this:'], ['For example:']], [[' FORM\n--------\ncContactMatch    =   CONTACTS/cMatchText\ncEventMatch      =   EVENTS/cMatchText\n']], ['Creating "complex forms" in FileMaker - is it even possible?'], 8], [(1026317, 6), [['For example:'], ['Add another button to the layout and a new script.']], [[' Script: Set Selected Contact ID\nSet Variable ($$ContactID ; Contacts::ContactID)\n\nScript Set Selected Event ID\nSet Variable ($$EventID ; Events::EventID)\n']], ['Creating "complex forms" in FileMaker - is it even possible?'], 8], [(1026317, 7), [['Add another button to the layout and a new script.'], ['Phew.']], [[' Script: Create RSVP\n# Check that a contact and event have been selected\nIf(isEmpty($$ContactID) or isEmpty($$EventID)\n    Exit Script\nEnd If\n# Get the payment info that has been entered\nSet Variable ($PaymentInfo ; FORM::PaymentInfo)\n# Create the RSVP Link record\nGo To Layout(RSVP)\nCreate New Record\nSet Field(fk_ContactID ; $$ContactID)\nSet Field(fk_EventID ; $$EventID)\nSet Field(PaymentInfo ; $PaymentInfo)\nCommit Records\nGo to Layout (Original Layout)\n# Clear the search fields\nSet Field(PaymentInfo; "")\nSet Field(ContactSearch; "")\nSet Field(EventSearch; "")\nSet Variable($$ContactID; "")\nSet Variable($$EventID; "")\nCommit Records\nRefresh Screen\n']], ['Creating "complex forms" in FileMaker - is it even possible?'], 8], [(1026378, 0), [['To take it a bit further, if you want just the stored procs without the table structure, you will need to connect to the database and use SQL (i.e. with sqlplus or something). Then, using a list of the stored procs you are interested in, call the dbms_metadata function.  You can use sqlplus to do something like this:'], ['Also there is a view called USER_SOURCE, which you can use something like this:']], [[" SELECT dbms_metadata.get_ddl('PROCEDURE','PROC1') FROM dual;\n"]], ['how will you take only stored procedure backup in oracle 10g?'], 2], [(1026378, 1), [['Also there is a view called USER_SOURCE, which you can use something like this:'], ['which gives you the source for everything owned by the user you are logged in as.']], [[" select * from user_source where type in ('PROCEDURE', 'PACKAGE', 'PACKAGE_BODY', 'FUNCTION', 'TRIGGER');\n"]], ['how will you take only stored procedure backup in oracle 10g?'], 2], [(1027968, 0), [['As for invoking it, you pass the comma separated list of columns to constrain as constraint_cols and the corresponding comma separated list of values as constraint_vals, e.g.:'], ['Here it is:']], [[" exec Data_extractor.MakeInserts ('MYTABLE', 'COL1, COL2', '99, 105')\n"]], ['Extracting rows from a DB including depedent rows'], 2], [(1027968, 1), [['Here it is:'], ['-10000']], [[" CREATE OR REPLACE PACKAGE data_extractor\nIS\n   TYPE column_info IS RECORD(\n      column_name   user_tab_columns.column_name%TYPE\n   );\n\n   TYPE column_info_cursor IS REF CURSOR\n      RETURN column_info;\n\n   FUNCTION makeparamlist(\n      column_info   column_info_cursor\n    , get_values    NUMBER\n   )\n      RETURN VARCHAR2;\n\n   PROCEDURE makeinserts(\n      source_table      VARCHAR2\n    , constraint_cols   VARCHAR2\n    , constraint_vals   VARCHAR2\n   );\nEND data_extractor;\n\n\nCREATE OR REPLACE PACKAGE BODY data_extractor\nAS\n   FUNCTION makeparamlist(\n      column_info   column_info_cursor\n    , get_values    NUMBER\n   )\n      RETURN VARCHAR2\n   AS\n   BEGIN\n      DECLARE\n         column_name   user_tab_columns.column_name%TYPE;\n         tempsql       VARCHAR2(4000);\n         separator     VARCHAR2(20);\n      BEGIN\n         IF get_values = 1\n         THEN\n            separator := ''''''''' || ';\n         ELSE\n            separator := '';\n         END IF;\n\n         LOOP\n            FETCH column_info\n             INTO column_name;\n\n            EXIT WHEN column_info%NOTFOUND;\n            tempsql := tempsql || separator || column_name;\n\n            IF get_values = 1\n            THEN\n               separator := ' || '''''', '''''' || ';\n            ELSE\n               separator := ', ';\n            END IF;\n         END LOOP;\n\n         IF get_values = 1\n         THEN\n            tempsql := tempsql || ' || ''''''''';\n         END IF;\n\n         RETURN tempsql;\n      END;\n   END;\n\n   PROCEDURE makeinserts(\n      source_table      VARCHAR2\n    , constraint_cols   VARCHAR2\n    , constraint_vals   VARCHAR2\n   )\n   AS\n   BEGIN\n      DECLARE\n         basesql               VARCHAR2(4000);\n         extractsql            VARCHAR2(4000);\n         tempsql               VARCHAR2(4000);\n         valuelist             VARCHAR2(4000);\n         childconstraint_vals  VARCHAR2(4000);\n      BEGIN\n         SELECT makeparamlist(CURSOR(SELECT column_name\n                                       FROM user_tab_columns\n                                      WHERE table_name = source_table), 0)\n           INTO tempsql\n           FROM DUAL;\n\n         basesql := 'INSERT INTO ' || source_table || '(' || tempsql || ') VALUES (';\n\n         SELECT makeparamlist(CURSOR(SELECT column_name\n                                       FROM user_tab_columns\n                                      WHERE table_name = source_table), 1)\n           INTO tempsql\n           FROM DUAL;\n\n         extractsql := 'SELECT ' || tempsql || ' FROM ' || source_table \n                       || ' WHERE (' || constraint_cols || ') = (SELECT ' \n                       || constraint_vals || ' FROM DUAL)';\n\n         EXECUTE IMMEDIATE extractsql\n                      INTO valuelist;\n\n         -- This prints out the insert statement for the root row\n         DBMS_OUTPUT.put_line(basesql || valuelist || ');');\n\n         -- Now we construct the constraint_vals parameter for subsequent calls:\n         SELECT makeparamlist(CURSOR(  SELECT column_name\n                                         FROM user_cons_columns ucc\n                                            , user_constraints uc\n                                        WHERE uc.table_name = source_table\n                                          AND ucc.constraint_name = uc.constraint_name\n                                     ORDER BY position)\n                             , 1)\n           INTO tempsql\n           FROM DUAL;\n\n         extractsql := 'SELECT ' || tempsql || ' FROM ' || source_table \n                       || ' WHERE ' || constraint_cols || ' = ' || constraint_vals;\n\n         EXECUTE IMMEDIATE extractsql\n                      INTO childconstraint_vals;\n\n         childconstraint_vals := childconstraint_vals;\n\n-- Now iterate over the dependent tables for this table\n-- Cursor on this statement:\n--    SELECT uc.table_name child_table, uc.constraint_name fk_name\n--      FROM user_constraints uc\n--         , user_constraints ucp\n--     WHERE ucp.table_name = source_table\n--      AND uc.r_constraint_name = ucp.constraint_name;\n\n         --   For each table in that statement, find the foreign key \n         --   columns that correspond to the rows\n         --   in the parent table\n         --  SELECT column_name\n         --    FROM user_cons_columns\n         --   WHERE constraint_name = fk_name\n         --ORDER BY POSITION;\n\n         -- Pass that columns into makeparamlist above to create \n         -- the constraint_cols argument of the call below:\n\n         -- makeinserts(child_table, ChildConstraint_cols, childconstrain_vals);\n      END;\n   END;\nEND data_extractor;\n"]], ['Extracting rows from a DB including depedent rows'], 2], [(1029032, 0), [['-10000'], ['Version using DECODE (Oracle-specific but less verbose):']], [[' select batch \n,      count(case when status=1 then 1 end) status1\n,      count(case when status=2 then 1 end) status2\n,      count(case when status=3 then 1 end) status3\nfrom   table\ngroup by batch;\n']], ['Oracle SQL Query to Summarize Statistics, using GROUP BY'], 2], [(1029032, 1), [['Version using DECODE (Oracle-specific but less verbose):'], ['-10000']], [[' select batch \n,      count(decode(status,1,1)) status1\n,      count(decode(status,2,1)) status2\n,      count(decode(status,3,1)) status3\nfrom   table\ngroup by batch;\n']], ['Oracle SQL Query to Summarize Statistics, using GROUP BY'], 2], [(1029384, 0), [['When I run this:'], ['I get:']], [[" TRUNCATE TABLE so1029384\n\nBULK INSERT so1029384\nFROM 'C:\\Data\\test\\so1029384.txt'\nWITH\n(\n--FIRSTROW = 2,\nFIELDTERMINATOR= '|',\nROWTERMINATOR = '\\n'\n)\n\nSELECT * FROM so1029384\n"]], ['SQL Bulk Insert with FIRSTROW parameter skips the following line'], 2], [(1029384, 1), [['I get:'], ["It looks like it requires the '|' even in the header data, because it reads up to that into the first column - swallowing up a newline into the first column.  Obviously if you include a field terminator parameter, it expects that every row  MUST  have one."]], [[' col1                                               col2                                               col3\n-------------------------------------------------- -------------------------------------------------- --------------------------------------------------\n***A NICE HEADER HERE***\n0000001234               SSNV                                               00013893-03JUN09\n0000005678                                         ABCD                                               00013893-03JUN09\n0000009112                                         0000                                               00013893-03JUN09\n0000009112                                         0000                                               00013893-03JUN09\n']], ['SQL Bulk Insert with FIRSTROW parameter skips the following line'], 2], [(1032604, 0), [['In addition to what everyone has already said about indexing, sometimes a divide-and-conquer approach can really help. Rather than joining a 1966177 row table to a 400310 row table, create to tiny temp tables and join them together instead:'], ['The queries above create two intermediate tables which should contain the same number of records as your SalesMan table. Joining them is straightforward:']], [[' CREATE TABLE #MonthlySalesAgg\n(\n    SalesManCode int,\n    JanTar money,\n    FebTar money,\n    MarTar money,\n    AprTar money,\n    MayTar money,\n    JunTar money,\n    JulTar money,\n    AugTar money,\n    SepTar money,\n    OctTar money,\n    NovTar money,\n    DecTar money\n\n    PRIMARY KEY CLUSTERED (SalesManCode)\n)\n\nINSERT INTO #MonthlySalesAgg\nSELECT *\nFROM\n(SELECT SalesManCode, TargetValue, SaleMonth = Month(TargetDate) FROM MonthlyTarget) as temp\nPIVOT\n(\n    Max(TargetValue)\n    FOR [SaleMonth] IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12])\n) as p\n\nCREATE TABLE #MonthlyTargetAgg\n(\n    SalesManCode int,\n    JanAch money,\n    FebAch money,\n    MarAch money,\n    AprAch money,\n    MayAch money,\n    JunAch money,\n    JulAch money,\n    AugAch money,\n    SepAch money,\n    OctAch money,\n    NovAch money,\n    DecAch money\n\n    PRIMARY KEY CLUSTERED (SalesManCode)\n)\n\nINSERT INTO #MonthlyTargetAgg\nSELECT * FROM\n(SELECT SalesManCode, AchievedValue, SaleMonth = Month(SaleDate) FROM MonthlySales) as temp\nPIVOT\n(\n    Sum(AchievedValue)\n    FOR [SaleMonth] IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12])\n) as p\n']], ['SQL Join taking long time'], 4], [(1032604, 1), [['The queries above create two intermediate tables which should contain the same number of records as your SalesMan table. Joining them is straightforward:'], ['PIVOT is syntax sugar. For example,']], [[' SELECT *\nFROM #MonthlyTargetAgg target\nINNER JOIN #MonthlySalesAgg sales ON target.SalesManCode = sales.SalesManCode\n']], ['SQL Join taking long time'], 4], [(1032604, 2), [['PIVOT is syntax sugar. For example,'], ['Becomes']], [[' SELECT * FROM\n(SELECT SalesManCode, AchievedValue, SaleMonth = Month(SaleDate) FROM MonthlySales) as temp\nPIVOT\n(\n    Sum(AchievedValue)\n    FOR [SaleMonth] IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12])\n) as p\n']], ['SQL Join taking long time'], 4], [(1032604, 3), [['Becomes'], ['-10000']], [[' SELECT\n    SalesManCode,\n    [1] = Sum(case SaleMonth when 1 then AchievedValue else 0 end),\n    [2] = Sum(case SaleMonth when 2 then AchievedValue else 0 end),\n    [3] = Sum(case SaleMonth when 3 then AchievedValue else 0 end),\n    [4] = Sum(case SaleMonth when 4 then AchievedValue else 0 end),\n    [5] = Sum(case SaleMonth when 5 then AchievedValue else 0 end),\n    [6] = Sum(case SaleMonth when 6 then AchievedValue else 0 end),\n    [7] = Sum(case SaleMonth when 7 then AchievedValue else 0 end),\n    [8] = Sum(case SaleMonth when 8 then AchievedValue else 0 end),\n    [9] = Sum(case SaleMonth when 9 then AchievedValue else 0 end),\n    [10] = Sum(case SaleMonth when 10 then AchievedValue else 0 end),\n    [11] = Sum(case SaleMonth when 11 then AchievedValue else 0 end),\n    [12] = Sum(case SaleMonth when 12 then AchievedValue else 0 end)\nFROM\n    (SELECT SalesManCode, AchievedValue, SaleMonth = Month(SaleDate) FROM MonthlySales) as temp\nGROUP BY SalesManCode\n']], ['SQL Join taking long time'], 4], [(1033045, 0), [['So your table would look like'], ['Now you can simply run a query to say']], [[' SoldProdCode, Additional ProdCode\nMRLSPN, LGP\nMRLSDF, LGP\n']], ['Best way to achieve exclusion matrix via query'], 2], [(1033045, 1), [['Now you can simply run a query to say'], ['Edit']], [[" SELECT AdditionalProductCode\nFROM AdditionalProducts\nWHERE SoldProductcode='MRLSPN'\n"]], ['Best way to achieve exclusion matrix via query'], 2], [(1033780, 0), [['This is what I came up with :'], ['I used to create sample data:']], [[' SELECT zr, min_distance\n  FROM (SELECT zr, min_distance, cnt, \n               row_number() over(PARTITION BY zr ORDER BY min_distance) rnk\n           FROM (SELECT zr.zip zr, zipdistance(zr.zip, za.zip) min_distance,\n                         COUNT(za.locations) over(\n                             PARTITION BY zr.zip \n                             ORDER BY zipdistance(zr.zip, za.zip)\n                         ) cnt\n                    FROM zips_required zr\n                   CROSS JOIN zips_available za)\n          WHERE cnt >= :N)\n WHERE rnk = 1\n']], ['Oracle Analytic Question'], 2], [(1033780, 1), [['I used to create sample data:'], ['Note:  you used COUNT(locations) and SUM(locations) in your question, I assumed it was COUNT(locations)']], [[' INSERT INTO zips_required\n   SELECT to_char(10000 + 100 * ROWNUM) FROM dual CONNECT BY LEVEL <= 5;\n\nINSERT INTO zips_available\n   (SELECT to_number(zip) + 10 * r, 100 - 10 * r FROM zips_required, (SELECT ROWNUM r FROM dual CONNECT BY LEVEL <= 9));\n\nCREATE OR REPLACE FUNCTION zipdistance(zipfrom VARCHAR2,zipto VARCHAR2) RETURN NUMBER IS\nBEGIN\n   RETURN abs(to_number(zipfrom) - to_number(zipto));\nEND zipdistance;\n/\n']], ['Oracle Analytic Question'], 2], [(1033895, 0), [['Assuming Index is incremental, and higher values --> later transaction dates, you can use a self-join with a >= condition in the join clause, something like this:'], ['You could do the same with a subquery, something like:']], [[' select \n  a.[Index], \n  max(a.[Tenant]) as [Tenant], \n  max(a.[AmountCharged]) as [AmountCharged],\n  max(a.[AmountPaid]) as [AmountPaid],\n  sum(\n    iif(isnull(b.[AmountCharged]),0,b.[AmountCharged])+\n    iif(isnull(b.[AmountPaid]),0,b.[AmountPaid])\n    ) as [Balance]\nfrom \n  [Transactions] as a\nleft outer join \n  [Transactions] as b on\n    a.[Tenant] = b.[Tenant] and\n    a.[Index] >= b.[Index]\ngroup by \n  a.[Index];\n']], ['How can I write this summing query?'], 2], [(1033895, 1), [['You could do the same with a subquery, something like:'], ['Once you have calculated the proper balances, use an update query to update the table, by joining the Transactions table to the select query defined above on Index. You could probably combine it into one update query, but that would make it more difficult to test.']], [[' select \n  [Index], \n  [Tenant], \n  [AmountCharged], \n  [AmountPaid], \n    (\n      select \n        sum(\n          iif(isnull(b.[AmountCharged]),0,b.[AmountCharged])+             \n          iif(isnull(b.[AmountPaid]),0,b.[AmountPaid])\n          )\n      from \n        [Transactions] as b\n      where \n        [Transactions].[Tenant] = b.[Tenant] and \n        [Transactions].[Index] >= b.[Index]\n    ) as [Balance]\nfrom \n  [Transactions];\n']], ['How can I write this summing query?'], 2], [(1034901, 0), [["something like this would work. It's variation on your method, but it doesn't use the MM/DD/YYYY literal format, and it won't blowup against bad input (for better or for worse)."], ['Alternatively, to create a string in YYYYMMDD format:']], [[" declare @month tinyint\ndeclare @day tinyint\nset @month = 9\nset @day = 1\n\ndeclare @date datetime\n\n-- this could be inlined if desired\nset @date = convert(char(4),year(getdate()))+'0101'\nset @date = dateadd(month,@month-1,@date)\nset @date = dateadd(day,@day-1,@date)\n\nif @date <= getdate()-1\n  set @date = dateadd(year,1,@date)\n\nselect @date\n"]], ['SQL: How to produce next date given month and day'], 3], [(1034901, 1), [['Alternatively, to create a string in YYYYMMDD format:'], ['Another method, which avoids literals all together:']], [[" set @date = \n  right('0000'+convert(char(4),year(getdate())),4)\n+ right('00'+convert(char(2),@month),2)\n+ right('00'+convert(char(2),@day),2)\n"]], ['SQL: How to produce next date given month and day'], 3], [(1034901, 2), [['Another method, which avoids literals all together:'], ['-10000']], [[' declare @month tinyint\ndeclare @day tinyint\nset @month = 6\nset @day = 24\n\ndeclare @date datetime\ndeclare @today datetime\n\n-- get todays date, stripping out the hours and minutes\n-- and save the value for later\nset @date = floor(convert(float,getdate()))\nset @today = @date\n\n-- add the appropriate number of months and days\nset @date = dateadd(month,@month-month(@date),@date)\nset @date = dateadd(day,@day-day(@date),@date)\n\n-- increment year by 1 if necessary\nif @date < @today set @date = dateadd(year,1,@date)\n\nselect @date\n']], ['SQL: How to produce next date given month and day'], 3], [(1035819, 0), [['Try'], ['So, ']], [[" ISNULL(FirstName, '<BlankValue>') -- In SQL Server\nIFNULL(Firstname, '<BlankValue>') -- In MySQL\n"]], ["CONCAT'ing NULL fields"], 2], [(1035819, 1), [['So, '], ['would return the same thing without the null issue (and a blank string where nulls should be).']], [[" CONCAT(ISNULL(FirstName,''),ISNULL(LastName,''),ISNULL(Email,'')) -- In SQL Server\nCONCAT(IFNULL(FirstName,''),IFNULL(LastName,''),IFNULL(Email,'')) -- In MySQL\n"]], ["CONCAT'ing NULL fields"], 2], [(1036217, 0), [['-- set up an auxiliary table Numbers with 128K rows:'], ['-- the tables']], [[' CREATE TABLE dbo.Numbers(n INT NOT NULL PRIMARY KEY)\nGO\nDECLARE @i INT;\nSET @i = 1;\nINSERT INTO dbo.Numbers(n) SELECT 1;\nWHILE @i<128000 BEGIN\n  INSERT INTO dbo.Numbers(n)\n    SELECT n + @i FROM dbo.Numbers;\n  SET @i = @i * 2;\nEND;\nGO\n']], ['Is it possible to add a logic Constraint to a Foreign Key?'], 8], [(1036217, 1), [['-- the tables'], ['--- populating with UDF:']], [[' CREATE TABLE dbo.Animals\n(AnimalId INT NOT NULL IDENTITY PRIMARY KEY,\nAnimalType TINYINT NOT NULL, -- 1: Mammal, 2:Reptile, etc..\nName VARCHAR(30))\nGO\nALTER TABLE dbo.Animals\nADD CONSTRAINT UNQ_Animals UNIQUE(AnimalId, AnimalType)\nGO\nCREATE FUNCTION dbo.GetAnimalType(@AnimalId INT)\nRETURNS TINYINT\nAS\nBEGIN\nDECLARE @ret TINYINT;\nSELECT @ret = AnimalType FROM dbo.Animals\n  WHERE AnimalId = @AnimalId;\nRETURN @ret;\nEND\nGO\nCREATE TABLE dbo.Mammals\n(AnimalId INT NOT NULL PRIMARY KEY,\nSomeOtherStuff VARCHAR(10),\nCONSTRAINT Chk_AnimalType_Mammal CHECK(dbo.GetAnimalType(AnimalId)=1)\n);\nGO\n']], ['Is it possible to add a logic Constraint to a Foreign Key?'], 8], [(1036217, 2), [['--- populating with UDF:'], ['results are:']], [[" INSERT INTO dbo.Animals\n  (AnimalType, Name)\nSELECT 1, 'some name' FROM dbo.Numbers;\nGO\nSET STATISTICS IO ON\nSET STATISTICS TIME ON\nGO\nINSERT INTO dbo.Mammals\n(AnimalId,SomeOtherStuff)\nSELECT n, 'some info' FROM dbo.Numbers;\n"]], ['Is it possible to add a logic Constraint to a Foreign Key?'], 8], [(1036217, 3), [['results are:'], ['--- populating with FK:']], [[" SQL Server parse and compile time: \nCPU time = 0 ms, elapsed time = 2 ms.\nTable 'Mammals'. Scan count 0, logical reads 272135, \n    physical reads 0, read-ahead reads 0, lob logical reads 0, \n    lob physical reads 0, lob read-ahead reads 0.\nTable 'Numbers'. Scan count 1, logical reads 441, physical reads 0, \n    read-ahead reads 0, lob logical reads 0, lob physical reads 0, \n    lob read-ahead reads 0.\n\nSQL Server Execution Times:\n    CPU time = 7750 ms,  elapsed time = 7830 ms.\n\n(131072 row(s) affected)\n"]], ['Is it possible to add a logic Constraint to a Foreign Key?'], 8], [(1036217, 4), [['--- populating with FK:'], ['results are:']], [[" CREATE TABLE dbo.Mammals2\n(AnimalId INT NOT NULL PRIMARY KEY,\nAnimalType TINYINT NOT NULL,\nSomeOtherStuff VARCHAR(10),\nCONSTRAINT Chk_Mammals2_AnimalType_Mammal CHECK(AnimalType=1),\nCONSTRAINT FK_Mammals_Animals FOREIGN KEY(AnimalId, AnimalType)\n  REFERENCES dbo.Animals(AnimalId, AnimalType)\n);\n\nINSERT INTO dbo.Mammals2\n(AnimalId,AnimalType,SomeOtherStuff)\nSELECT n, 1, 'some info' FROM dbo.Numbers;\n"]], ['Is it possible to add a logic Constraint to a Foreign Key?'], 8], [(1036217, 5), [['results are:'], ['-- populating without any integrity:']], [[" SQL Server parse and compile time: \n   CPU time = 93 ms, elapsed time = 100 ms.\nTable 'Animals'. Scan count 1, logical reads 132, physical reads 0,\n    read-ahead reads 0, lob logical reads 0, lob physical reads 0, \n    lob read-ahead reads 0.\nTable 'Mammals2'. Scan count 0, logical reads 275381, physical reads 0,\n   read-ahead reads 0, lob logical reads 0, lob physical reads 0, \n   lob read-ahead reads 0.\nTable 'Numbers'. Scan count 1, logical reads 441, physical reads 0,\n   read-ahead reads 0, lob logical reads 0, lob physical reads 0, \n   lob read-ahead reads 0.\n\nSQL Server Execution Times:\n   CPU time = 375 ms,  elapsed time = 383 ms.\n"]], ['Is it possible to add a logic Constraint to a Foreign Key?'], 8], [(1036217, 6), [['-- populating without any integrity:'], ['results are: \n    SQL Server parse and compile time: \n       CPU time = 1 ms, elapsed time = 1 ms.']], [[" CREATE TABLE dbo.Mammals3\n(AnimalId INT NOT NULL PRIMARY KEY,\nSomeOtherStuff VARCHAR(10)\n);\nINSERT INTO dbo.Mammals3\n(AnimalId,SomeOtherStuff)\nSELECT n,  'some info' FROM dbo.Numbers;\n"]], ['Is it possible to add a logic Constraint to a Foreign Key?'], 8], [(1036217, 7), [['results are: \n    SQL Server parse and compile time: \n       CPU time = 1 ms, elapsed time = 1 ms.'], ['The overhead of an FK in CPU time = 375 ms - 297 ms = 78 ms \nThe overhead of an UDF in CPU time = 7750 ms - 297 ms = 7453 ms']], [[" SQL Server Execution Times:\n   CPU time = 0 ms,  elapsed time = 66 ms.\nTable 'Mammals3'. Scan count 0, logical reads 272135, physical reads 0,\n    read-ahead reads 0, lob logical reads 0, lob physical reads 0,\n    lob read-ahead reads 0.\nTable 'Numbers'. Scan count 1, logical reads 441, physical reads 0, \n    read-ahead reads 0, lob logical reads 0, lob physical reads 0, \n    lob read-ahead reads 0.\n\nSQL Server Execution Times:\n   CPU time = 297 ms,  elapsed time = 303 ms.\n\n(131072 row(s) affected)\n"]], ['Is it possible to add a logic Constraint to a Foreign Key?'], 8], [(1037274, 0), [["step 1: create a list of the duplicate IDs to be deleted along with the corresponding ID to keep. \nThe method really depends on how you're detecting duplicates. Say you get a table:"], ['step 2: relink orders']], [[' -------------\n*  Dupes    *\n-------------\n* del_id    *\n* keep_id   *\n-------------\n']], ['Can I change foreign key IDs when deleting the FK row?'], 3], [(1037274, 1), [['step 2: relink orders'], ['step 3: delete the old customers']], [[' update order o\nset CustomerID=(select keep_id from Dupes d where d.del_id=o.CustomerID)\nwhere CustomerID in (select del_id from Dupes)\n']], ['Can I change foreign key IDs when deleting the FK row?'], 3], [(1037274, 2), [['step 3: delete the old customers'], ['And voilà.']], [[' delete from Customer\nwhere ID in (select del_id from Dupes)\n']], ['Can I change foreign key IDs when deleting the FK row?'], 3], [(1038245, 0), [['To get the 12 dates, one for each month, I used a little recursive like WITH statement to create a temporary table with 1 column of 12 dates:'], ["From here I can CROSS JOIN this temporary table with the table with the information I really care about.  Then I use WHERE date BETWEEN start AND end to filter off any entries which don't belong to that month.  So something like this:"]], [[' WITH months (date) AS (\nSELECT GETDATE() AS date\nUNION ALL\nSELECT \n    DATEADD(MONTH,1,date)\nFROM months\nWHERE DATEDIFF(MONTH,GETDATE(),date) < 12)\n']], ['SQL Pivot based on value between two columns'], 4], [(1038245, 1), [["From here I can CROSS JOIN this temporary table with the table with the information I really care about.  Then I use WHERE date BETWEEN start AND end to filter off any entries which don't belong to that month.  So something like this:"], ['Lastly, we must pivot the result:']], [[' SELECT other.Title, MONTH(months.date) CROSS JOIN other\nWHERE months.date BETWEEN other.start AND other.end\n']], ['SQL Pivot based on value between two columns'], 4], [(1038245, 2), [['Lastly, we must pivot the result:'], ['So the resultant query might look something like:']], [[' PIVOT (MAX(PID) FOR date IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12]))\n']], ['SQL Pivot based on value between two columns'], 4], [(1038245, 3), [['So the resultant query might look something like:'], ["I've stripped out all of the other complexity I went through to join in other information I needed, so this isn't actually the query I wrote, but it should encapsulate the basic query structure that I used to get the result as I needed it."]], [[' WITH months (date) AS (\nSELECT GETDATE() AS date\nUNION ALL\nSELECT \nDATEADD(MONTH,1,date)\nFROM months\nWHERE DATEDIFF(MONTH,GETDATE(),date) < 12)\nSELECT  Title,\n    [1]     AS January,\n    [2]     AS February,\n    [3]     AS March,\n    [4]     AS April,\n    [5]     AS May,\n    [6]     AS June,\n    [7]     AS July,\n    [8]     AS August,\n    [9]     AS September,\n    [10]    AS October,\n    [11]    AS November,\n    [12]    AS December\nFROM\n(\nSELECT other.Title,MONTH(months.date)\nCROSS JOIN other\nWHERE months.date BETWEEN other.startDate AND other.endDate\n) AS subquery\nPIVOT (MAX(PID) FOR date IN\n([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12])) AS p\n']], ['SQL Pivot based on value between two columns'], 4], [(1038435, 0), [['Sounds like they want the ability to return only allowed fields, which means the number of fields returned also has to be dynamic. This will work with 2 variables. Anything more than that will be getting confusing. '], ['Dynamic SQL will help with multiples. This examples is assuming atleast 1 column is true.']], [[' IF (selectField1 = true AND selectField2 = true)\nBEGIN\n   SELECT Field1, Field2\n   FROM Table\nEND\nELSE IF (selectField1 = true)\nBEGIN\n   SELECT Field1\n   FROM Table\nEND\nELSE IF (selectField2 = true)\nBEGIN\n   SELECT Field2\n   FROM Table\nEND\n']], ['SQL conditional SELECT'], 2], [(1038435, 1), [['Dynamic SQL will help with multiples. This examples is assuming atleast 1 column is true.'], ['-10000']], [[" DECLARE @sql varchar(MAX)\nSET @sql = 'SELECT '\nIF (selectField1 = true)\nBEGIN\n   SET @sql = @sql + 'Field1, '\nEND\nIF (selectField2 = true)\nBEGIN\n   SET @sql = @sql + 'Field2, '\nEND\n...\n-- DROP ', '\n@sql = SUBSTRING(@sql, 1, LEN(@sql)-2)\n\nSET @sql = @sql + ' FROM Table'\n\nEXEC(@sql)\n"]], ['SQL conditional SELECT'], 2], [(1040284, 0), [['the last line should be using WHERE not AND'], ['The end result is the following SQL:']], [[' WHERE homes.price BETWEEN 500000 AND 1000000\n']], ['SQL: Help with LEFT OUTER JOIN'], 3], [(1040284, 1), [['The end result is the following SQL:'], ['now your SQFT would go before the WHERE ']], [[' SELECT \n    homes.home_id, \n    homes.address, \n    homes.city, \n    homes.state, \n    homes.zip, \n    homes.price, \n    home_photos.photo_id, \n    home_photos. photo_url_dir\nFROM \n    homes\n    LEFT OUTER JOIN home_photos ON \n        homes.home_id = home_photos.home_id\n        AND homes.primary_photo_group_id = home_photos.home_photo_group_id\n        AND home_photos.home_photo_type_id =2\nWHERE\n    homes.price BETWEEN 500000 AND 1000000\n    AND homes.display_status = true\n']], ['SQL: Help with LEFT OUTER JOIN'], 3], [(1040284, 2), [['now your SQFT would go before the WHERE '], ['-10000']], [[' AND home_photos.home_photo_type_id =2 \nAND SQFT <=2000 \nWHERE homes.price BETWEEN 500000 AND 1000000\n']], ['SQL: Help with LEFT OUTER JOIN'], 3], [(1040618, 0), [['While using'], ['in the CTL file and a table structure of ']], [[' FIELDS TERMINATED BY "~" OPTIONALLY ENCLOSED BY \'"\' \n']], ['How should I escaping quotes and line breaks for Oracle SQLLoader (sqlldr) importing?'], 3], [(1040618, 1), [['in the CTL file and a table structure of '], ['The right way to handle quotes and delimiters are']], [[' key:number, msg:varchar2\n']], ['How should I escaping quotes and line breaks for Oracle SQLLoader (sqlldr) importing?'], 3], [(1040618, 2), [['The right way to handle quotes and delimiters are'], ['So, If the data contains the delimiter, quote the whole value and replace quotes in the value with 2 quotes.']], [[' 1~Hello World\n2~"Hello~World"\n3~"Hello ""World"""\n4~"Hello~""World"""\n']], ['How should I escaping quotes and line breaks for Oracle SQLLoader (sqlldr) importing?'], 3], [(1040982, 0), [['-10000'], ['Think of your SQL Statement, similar to this']], [[' SELECT OrderID, SUM(Qty) as OrderTotalQty, \n        SUM(Qty*Price) as InternalCost,\n        SUM(CASE WHEN Qty < 0 and MarkedUpTotal > 0 \n             THEN -1*MarkedUpTotal\n             ELSE MarkedUpTotal) END as ClientCost  \n    FROM OrderItems \n    GROUP BY OrderID\n']], ['Why must you GROUP BY the columns in a CASE statement?'], 2], [(1040982, 1), [['Think of your SQL Statement, similar to this'], ['Now this is returning a new column (ClientCost), which is not using any aggregation. \nSo, it asks you to use that in GROUP BY expression.']], [[' SELECT OrderID, SUM(Qty) as OrderTotalQty, \n        SUM(Qty*Price) as InternalCost,\n        CASE WHEN Qty < 0 and MarkedUpTotal > 0 \n             THEN 10\n             ELSE 20 END as ClientCost  \n    FROM OrderItems \n    GROUP BY OrderID\n']], ['Why must you GROUP BY the columns in a CASE statement?'], 2], [(1042331, 0), [['According to the guys at " http://www.experts-exchange.com/ "...'], ['If you are having connection troubles, I suggest you start with the Oracle alert log on your server machine.  To find the location of your oracle alert log:']], [[' 11 can talk to 11,10,9\n10 can talk to 11,10,9,8\n9 can talk to 11,10,9,8,7\n8 can talk to 10,9,8,7\n7 can talk to 9,8,7\n']], ['Oracle: Does a 10g oracle client work with an 11g server?'], 4], [(1042331, 1), [['If you are having connection troubles, I suggest you start with the Oracle alert log on your server machine.  To find the location of your oracle alert log:'], ["Also, you'll probably get something useful out of enabling listener tracing:"]], [[" SQL> select value from v$parameter where name = 'background_dump_dest';\n"]], ['Oracle: Does a 10g oracle client work with an 11g server?'], 4], [(1042331, 2), [["Also, you'll probably get something useful out of enabling listener tracing:"], ['The trace file on my Solaris Oracle 10 install is found in:']], [[' $ lsnrctl\nLSNRCTL> set trc_level ADMIN\n']], ['Oracle: Does a 10g oracle client work with an 11g server?'], 4], [(1042331, 3), [['The trace file on my Solaris Oracle 10 install is found in:'], ['You can view it directly or use the trcasst program to "format" it.  Note that ALL of this is on the server, not your client side.']], [[' $ORACLE_HOME/network/trace/listener.trc\n']], ['Oracle: Does a 10g oracle client work with an 11g server?'], 4], [(1042550, 0), [['-10000'], ['Or - less generally:']], [[' CREATE PROCEDURE NVL(a CHAR(32), b CHAR(32) DEFAULT NULL,\n                                 c CHAR(32) DEFAULT NULL,\n                                 d CHAR(32) DEFAULT NULL,\n                                 e CHAR(32) DEFAULT NULL,\n                                 f CHAR(32) DEFAULT NULL,\n                                 g CHAR(32) DEFAULT NULL)\n   RETURNING CHAR(32);\n   IF   a IS NOT NULL THEN RETURN a;\n   ELIF b IS NOT NULL THEN RETURN b;\n   ELIF c IS NOT NULL THEN RETURN c;\n   ELIF d IS NOT NULL THEN RETURN d;\n   ELIF e IS NOT NULL THEN RETURN e;\n   ELIF f IS NOT NULL THEN RETURN f;\n   ELSE                    RETURN g;\n   END IF;\nEND PROCEDURE;\n']], ['How to do a NVL (or DECODE or CASE) statement within an Informix SE SQL query?'], 2], [(1042550, 1), [['Or - less generally:'], ['The CHAR version can be used for almost any type (except strings longer than 32, as written) because SE is very good at converting between types.  SE does not support explicit casting, either -- it is safe to assume that SE does not have much of SQL past SQL-89.']], [[' -- @(#)$Id: nvl_int.spl,v 1.1 1996/08/26 18:33:11 johnl Exp $\n--\n-- nvl_integer: return v1 if it is not null else return v2\n\nCREATE PROCEDURE nvl_integer(v1 INTEGER, v2 INTEGER DEFAULT 0)\n    RETURNING INTEGER;\n\n    DEFINE rv INTEGER;\n\n    IF v1 IS NOT NULL THEN\n        LET rv = v1;\n    ELSE\n        LET rv = v2;\n    END IF\n\n    RETURN rv;\n\nEND PROCEDURE;\n']], ['How to do a NVL (or DECODE or CASE) statement within an Informix SE SQL query?'], 2], [(1043857, 0), [["Either you use ExecuteScalar as Andrew suggested - or you'll have to change your code a little bit:"], ['and then use this ADO.NET call to retrieve the value:']], [[' CREATE PROCEDURE dbo.CountRowsInTable(@RowCount INT OUTPUT)\nAS BEGIN\n  SELECT\n    @RowCount = COUNT(*)\n  FROM \n    SomeTable\nEND\n']], ['How to retrieve scalar value from stored procedure (ADO.NET)'], 2], [(1043857, 1), [['and then use this ADO.NET call to retrieve the value:'], ['Marc']], [[' using(SqlCommand cmdGetCount = new SqlCommand("dbo.CountRowsInTable", sqlConnection))\n{\n  cmdGetCount.CommandType = CommandType.StoredProcedure;\n\n  cmdGetCount.Parameters.Add("@RowCount", SqlDbType.Int).Direction = ParameterDirection.Output;\n\n  sqlConnection.Open();\n\n  cmdGetCount.ExecuteNonQuery();\n\n  int rowCount = Convert.ToInt32(cmdGetCount.Parameters["@RowCount"].Value);\n\n  sqlConnection.Close();\n}\n']], ['How to retrieve scalar value from stored procedure (ADO.NET)'], 2], [(1044584, 0), [['This query'], ['This query:']], [[' SELECT  *\nFROM    table1, t1\n        (\n        SELECT  /*+ NO_PUSH_PRED */\n                *\n        FROM    table2 t2\n        WHERE   t2.col1 = :value1\n        ) t2o\nWHERE   t2o.col2 = t1.col2\n']], ['How could predicate pushing on an inline view slow down a query?'], 2], [(1044584, 1), [['This query:'], ["will use the  NESTED LOOPS  and an index on  (t2.col1, t2.col2)  if it's defined."]], [[' SELECT  *\nFROM    table1, t1\n        (\n        SELECT  /*+ PUSH_PRED */\n                *\n        FROM    table2 t2\n        WHERE   t2.col1 = :value1\n        ) t2o\nWHERE   t2o.col2 = t1.col2\n']], ['How could predicate pushing on an inline view slow down a query?'], 2], [(1044874, 0), [['You can use normal sql constructs in the  ON DUPLICATE KEY  syntax. So in order to do conditional updates during an insert you can do the following:'], ["If you wanted to make 100% sure that you weren't relying on the behavior of MySQL where it doesn't update a row if you set a value to itself you can do the following to force the timestamp:"]], [[" INSERT INTO tbl (hat, mittens, name) \nVALUES ('yellow','purple','jimmy')\nON DUPLICATE KEY UPDATE name = CASE WHEN name <> VALUES(name) \n                                    THEN VALUES(name) ELSE name END;\n"]], ['conditional on duplicate key update'], 3], [(1044874, 1), [["If you wanted to make 100% sure that you weren't relying on the behavior of MySQL where it doesn't update a row if you set a value to itself you can do the following to force the timestamp:"], ["The following is a log that shows that the last statement provided works even on 4.1 where the others don't work due to a bug that was fixed in version 5.0."]], [[" INSERT INTO tbl (hat, mittens, name) \nVALUES ('yellow','purple','jimmy')\nON DUPLICATE KEY UPDATE name = CASE WHEN name <> VALUES(name) \n                                    THEN VALUES(name) ELSE name END\n                      , last_update = CASE WHEN name <> VALUES(name) \n                                      THEN now() ELSE last_update END;\n"]], ['conditional on duplicate key update'], 3], [(1044874, 2), [["The following is a log that shows that the last statement provided works even on 4.1 where the others don't work due to a bug that was fixed in version 5.0."], ['Let me know if you have any questions.']], [[" C:\\mysql\\bin>mysql -u root -p\nEnter password:\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 1 to server version: 4.1.22-community\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the buffer.\n\nmysql> show databases;\n+----------+\n| Database |\n+----------+\n| mysql    |\n| test     |\n+----------+\n2 rows in set (0.00 sec)\n\nmysql> use test;\nDatabase changed\nmysql> show tables;\nEmpty set (0.00 sec)\n\nmysql> CREATE TABLE `tbl` (\n    -> `hat` varchar(11) default NULL,\n    -> `mittens` varchar(11) default NULL,\n    -> `name` varchar(11) default NULL,\n    -> `stamp` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n    -> UNIQUE KEY `clothes` (`hat`,`mittens`)\n    -> ) ENGINE=MyISAM DEFAULT CHARSET=latin1;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> INSERT INTO tbl (hat,mittens,name) VALUES ('blue','green','george');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select * from tbl;\n+------+---------+--------+---------------------+\n| hat  | mittens | name   | stamp               |\n+------+---------+--------+---------------------+\n| blue | green   | george | 2009-06-27 12:15:16 |\n+------+---------+--------+---------------------+\n1 row in set (0.00 sec)\n\nmysql> INSERT INTO tbl (hat,mittens,name) VALUES ('blue','green','george') ON DUPLICATE KEY UPDATE name='george';\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> select * from tbl;\n+------+---------+--------+---------------------+\n| hat  | mittens | name   | stamp               |\n+------+---------+--------+---------------------+\n| blue | green   | george | 2009-06-27 12:15:30 |\n+------+---------+--------+---------------------+\n1 row in set (0.00 sec)\n\nmysql> INSERT INTO tbl (hat, mittens, name) VALUES ('blue','green','george') ON DUPLICATE KEY UPDATE name=CASE WHEN name <> VALUES(name) THEN VALUES(name) ELSE name END;\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> select * from tbl;\n+------+---------+--------+---------------------+\n| hat  | mittens | name   | stamp               |\n+------+---------+--------+---------------------+\n| blue | green   | george | 2009-06-27 12:15:42 |\n+------+---------+--------+---------------------+\n1 row in set (0.00 sec)\n\nmysql> INSERT INTO tbl (hat,mittens,name) VALUES ('blue','green','george') ON DUPLICATE KEY UPDATE name = CASE WHEN name <> VALUES(name) THEN VALUES(name) ELSE name END, stamp = CASE WHEN name <> VALUES(name) THEN now() ELSE stamp END;\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> select * from tbl;\n+------+---------+--------+---------------------+\n| hat  | mittens | name   | stamp               |\n+------+---------+--------+---------------------+\n| blue | green   | george | 2009-06-27 12:15:42 |\n+------+---------+--------+---------------------+\n1 row in set (0.00 sec)\n\nmysql>\n"]], ['conditional on duplicate key update'], 3], [(1049210, 0), [['Approach 1. ( New table ) Here you can retain the existing data values on the newly created identity column.'], ['Approach 2 ( New column ) You can’t retain the existing data values on the newly created identity column, The identity column will hold the sequence of number.']], [[" CREATE TABLE dbo.Tmp_Names\n    (\n      Id int NOT NULL\n             IDENTITY(1, 1),\n      Name varchar(50) NULL\n    )\nON  [PRIMARY]\ngo\n\nSET IDENTITY_INSERT dbo.Tmp_Names ON\ngo\n\nIF EXISTS ( SELECT  *\n            FROM    dbo.Names ) \n    INSERT  INTO dbo.Tmp_Names ( Id, Name )\n            SELECT  Id,\n                    Name\n            FROM    dbo.Names TABLOCKX\ngo\n\nSET IDENTITY_INSERT dbo.Tmp_Names OFF\ngo\n\nDROP TABLE dbo.Names\ngo\n\nExec sp_rename 'Tmp_Names', 'Names'\n"]], ['Adding an identity to an existing column'], 2], [(1049210, 1), [['Approach 2 ( New column ) You can’t retain the existing data values on the newly created identity column, The identity column will hold the sequence of number.'], ['See the following Microsoft SQL Server Forum post for more details:']], [[" Alter Table Names\nAdd Id_new Int Identity(1, 1)\nGo\n\nAlter Table Names Drop Column ID\nGo\n\nExec sp_rename 'Names.Id_new', 'ID', 'Column'\n"]], ['Adding an identity to an existing column'], 2], [(1050258, 0), [["OK here's my try at it - this was fun :-)"], ['Returns:']], [["  DECLARE  @datestr varchar(100)\n\nSET @datestr = '2009-06-26 14:30:00.000Z+4:00'\n\nSELECT @datestr, DATEADD(mi, -1 * CAST(SUBSTRING(@datestr,25,1)+'1' AS int) *  \n    DATEDIFF(mi,'1900-01-01', CAST(SUBSTRING(@datestr,26,5) as datetime)),   \n    CAST(LEFT(@datestr,23) as datetime) )\n\nSET @datestr = '2009-06-26 14:30:00.000Z-4:00'\n\nSELECT @datestr, DATEADD(mi, -1 * CAST(SUBSTRING(@datestr,25,1)+'1' AS int) *  \n    DATEDIFF(mi,'1900-01-01', CAST(SUBSTRING(@datestr,26,5) as datetime)),   \n    CAST(LEFT(@datestr,23) as datetime) )\n\nSET @datestr = '2009-06-26 14:30:00.000Z+14:00'\n\nSELECT @datestr, DATEADD(mi, -1 * CAST(SUBSTRING(@datestr,25,1)+'1' AS int) *  \n    DATEDIFF(mi,'1900-01-01', CAST(SUBSTRING(@datestr,26,5) as datetime)),   \n    CAST(LEFT(@datestr,23) as datetime) )\n\nSET @datestr = '2009-06-26 14:30:00.000Z+4:30'\n\nSELECT @datestr, DATEADD(mi, -1 * CAST(SUBSTRING(@datestr,25,1)+'1' AS int) *  \n    DATEDIFF(mi,'1900-01-01', CAST(SUBSTRING(@datestr,26,5) as datetime)),   \n    CAST(LEFT(@datestr,23) as datetime) )\n\nSET @datestr = '2009-06-26 14:30:00.000Z-4:30'\n\nSELECT @datestr, DATEADD(mi, -1 * CAST(SUBSTRING(@datestr,25,1)+'1' AS int) *  \n    DATEDIFF(mi,'1900-01-01', CAST(SUBSTRING(@datestr,26,5) as datetime)),   \n    CAST(LEFT(@datestr,23) as datetime) )\n\nSET @datestr = '2009-06-26 14:30:00.000Z+14:30'\n\nSELECT @datestr, DATEADD(mi, -1 * CAST(SUBSTRING(@datestr,25,1)+'1' AS int) *  \n    DATEDIFF(mi,'1900-01-01', CAST(SUBSTRING(@datestr,26,5) as datetime)),   \n    CAST(LEFT(@datestr,23) as datetime) )\n"]], ['Converting from globalized date/time format (maybe ISO8601) to SQL Server datetime type'], 2], [(1050258, 1), [['Returns:'], ['-10000']], [[' 2009-06-26 14:30:00.000Z+4:00  2009-06-26 10:30:00.000\n\n2009-06-26 14:30:00.000Z-4:00  2009-06-26 18:30:00.000\n\n2009-06-26 14:30:00.000Z+14:00 2009-06-26 00:30:00.000\n\n2009-06-26 14:30:00.000Z+4:30  2009-06-26 10:00:00.000\n\n2009-06-26 14:30:00.000Z-4:30  2009-06-26 19:00:00.000\n\n2009-06-26 14:30:00.000Z+14:30 2009-06-26 00:00:00.000\n']], ['Converting from globalized date/time format (maybe ISO8601) to SQL Server datetime type'], 2], [(1050600, 0), [['A couple of commands to help you along your way:'], ['If you need to clear the cache for just one database, you can use:']], [[' SELECT * FROM syscacheobjects -- shows the contents of the procedure \n    -- cache for all databases\nDBCC PROCCACHE -- shows some general cache statistics\nDBCC CACHESTATS -- shows  the usage statistics for the cache, things like hit ratio\n']], ['SQL Server 2000: How can I tell how many plans a stored procedure has cached?'], 4], [(1050600, 1), [['If you need to clear the cache for just one database, you can use:'], ["Edit: above the line is for 2000, which is what the question asked. However, for anyone visiting who's using  SQL Server 2005 , it's a slightly different arrangement to the above:"]], [[" DBCC FLUSHPROCINDB (@dbid) -- that's an int, not the name of it. \n           -- The int you'd get from sysdatabases or the dbid() function\n"]], ['SQL Server 2000: How can I tell how many plans a stored procedure has cached?'], 4], [(1050600, 2), [["Edit: above the line is for 2000, which is what the question asked. However, for anyone visiting who's using  SQL Server 2005 , it's a slightly different arrangement to the above:"], ['A useful query for showing plans in 2005:']], [[' select * from sys.dm_exec_cached_plans -- shows the basic cache stuff\n']], ['SQL Server 2000: How can I tell how many plans a stored procedure has cached?'], 4], [(1050600, 3), [['A useful query for showing plans in 2005:'], ['-10000']], [[' SELECT  cacheobjtype, objtype, usecounts, refcounts, text\nfrom sys.dm_exec_cached_plans p\njoin  sys.dm_exec_query_stats s on p.plan_handle = s.plan_handle\ncross apply sys.dm_exec_sql_text(s.sql_handle)\n']], ['SQL Server 2000: How can I tell how many plans a stored procedure has cached?'], 4], [(1051451, 0), [['Answer:'], ['Code to figure out problem:']], [[" select c.companyid\n      ,yearendingdate + '/' + convert(varchar, datepart(yy, dateadd(yy,1,o.orderdate))) as yearending\n      ,sum(ordervalue) as numberoforders\n  from @orders o\n       join @companies c\n         on o.companyid = c.companyid\n where orderdate between case when (cast(yearendingdate + '/' + convert(varchar, datepart(yy, o.orderdate)) as datetime) >= o.orderdate)\n                         then yearendingdate + '/' + convert(varchar, datepart(yy, dateadd(yy,-1,o.orderdate)))\n                         else yearendingdate + '/' + convert(varchar, datepart(yy, o.orderdate))\n                          end\n                     and \n                         case when (cast(yearendingdate + '/' + convert(varchar, datepart(yy, o.orderdate)) as datetime) >= o.orderdate)\n                         then yearendingdate + '/' + convert(varchar, datepart(yy, o.orderdate))\n                         else yearendingdate + '/' + convert(varchar, datepart(yy, dateadd(yy,1,o.orderdate)))\n                          end\n group by c.companyid, o.orderdate, yearendingdate\n"]], ['SQL: How to Group by Custom Year'], 2], [(1051451, 1), [['Code to figure out problem:'], ['-10000']], [[" declare @orders table (OrderDate datetime\n                      ,CompanyID varchar(20)\n                      ,OrderValue int)\n\ninsert into @orders\nvalues (getdate(),'MS',2)\n\ninsert into @orders\nvalues (DateAdd(year, -1, getdate()),'MS',3)\n\ninsert into @orders\nvalues (DateAdd(year, -1, getdate()),'MS',1)\n\ninsert into @orders\nvalues (DateAdd(year, 1, getdate()),'MS',4)\n\ninsert into @orders\nvalues (DateAdd(year, 1, getdate()),'Blizzard',2)\n\ninsert into @orders\nvalues (getdate(),'MS',11)\n\ndeclare @companies table (CompanyID varchar(20)\n                         ,YearEndingDate varchar(20))\n\ninsert into @companies\nvalues ('MS', '05/6')\n\ninsert into @companies\nvalues ('Blizzard', '07/01')\n\nselect c.companyid\n      ,o.orderdate\n      ,yearendingdate + '/' + convert(varchar, datepart(yy, o.orderdate)) as sameyear\n      ,yearendingdate + '/' + convert(varchar, datepart(yy, dateadd(yy,1,o.orderdate))) as plusyear\n      ,yearendingdate + '/' + convert(varchar, datepart(yy, dateadd(yy,-1,o.orderdate))) as minusyear\n  from @orders o\n       join @companies c\n         on o.companyid = c.companyid\n\nselect c.companyid\n      ,yearendingdate + '/' + convert(varchar, datepart(yy, dateadd(yy,1,o.orderdate))) as yearending\n      ,sum(ordervalue) as numberoforders\n  from @orders o\n       join @companies c\n         on o.companyid = c.companyid\n where orderdate between case when (cast(yearendingdate + '/' + convert(varchar, datepart(yy, o.orderdate)) as datetime) >= o.orderdate)\n                         then yearendingdate + '/' + convert(varchar, datepart(yy, dateadd(yy,-1,o.orderdate)))\n                         else yearendingdate + '/' + convert(varchar, datepart(yy, o.orderdate))\n                          end\n                     and \n                         case when (cast(yearendingdate + '/' + convert(varchar, datepart(yy, o.orderdate)) as datetime) >= o.orderdate)\n                         then yearendingdate + '/' + convert(varchar, datepart(yy, o.orderdate))\n                         else yearendingdate + '/' + convert(varchar, datepart(yy, dateadd(yy,1,o.orderdate)))\n                          end\n group by c.companyid, o.orderdate, yearendingdate\n"]], ['SQL: How to Group by Custom Year'], 2], [(1051583, 0), [['First character is numeric:'], ['First character is not alphanumeric:']], [[" SELECT * FROM ... WHERE name REGEXP '^[0-9]';\n"]], ['Fetch rows where first character is not alphanumeric'], 2], [(1051583, 1), [['First character is not alphanumeric:'], ['(Note that this is distinct from  NOT REGEXP ^[0-9A-Za-z] , because you seem to  only  want to match when there  is  in fact a first character.)']], [[" SELECT * FROM ... WHERE name REGEXP '^[^0-9A-Za-z]';\n"]], ['Fetch rows where first character is not alphanumeric'], 2], [(1053091, 0), [["Edit: per comments, apparently the schema can be redesigned, although still no indication was given about the numbers I asked, so appropriate indices &c will remain a total mystery. Anyway, suppose the schema is something like (each table can have other columns as desired, just add them to the query; and the VARCHAR lenghts don't matter either):"], ['Now given the title of a video, say @MyTitle, titles of the 5 videos most "related" to it could easily be queried by, for example:']], [[' CREATE TABLE Videos (VideoID INT PRIMARY KEY,\n                     VideoTitle VARCHAR(80));\n\nCREATE TABLE Tags (TagID INT PRIMARY KEY,\n                   TagText VARCHAR(20));\n\nCREATE TABLE VideosTags (VideoID FOREIGN KEY REFERENCES Videos,\n                         TagID FOREIGN KEY REFERENCES Tags,\n                         PRIMARY KEY (VideoId, TagId));\n']], ['Whats the best SQL Query to get Related Items?'], 2], [(1053091, 1), [['Now given the title of a video, say @MyTitle, titles of the 5 videos most "related" to it could easily be queried by, for example:'], ['-10000']], [[' WITH MyTags(TagId) AS\n(\n  SELECT VT1.TagID\n  FROM Videos V1\n  JOIN VideosTags VT1 ON (V1.VideoID=VT1.VideoID)\n  WHERE V1.VideoTitle=@MyTitle\n)\nSELECT TOP(5) V2.VideoTitle, COUNT(*) AS CommonTags\nFROM Videos V2\nJOIN VideosTags VT2 ON (V2.VideoID=VT2.VideoID)\nJOIN MyTags ON (VT2.TagId=MyTags.TagId)\nGROUP BY V2.VideoId\nORDER BY CommonTags DESC;\n']], ['Whats the best SQL Query to get Related Items?'], 2], [(1054188, 0), [['this query will find all employees that work for more than 1 department.'], ['if you are hoping to gather data on the employees that cross between a set of specific EmpDepts, you can utilize self joins:']], [[' select employeeid, count(*) \nfrom dbo.EmpDept \ngroup by employeeid \nhaving count(*) > 1;\n']], ['Employees and departments database query with Sql '], 2], [(1054188, 1), [['if you are hoping to gather data on the employees that cross between a set of specific EmpDepts, you can utilize self joins:'], ['using this method, you will have to add another join for every new department you are looking for. ']], [[' select a.employeeid \nfrom dbo.EmpDept a, dbo.EmpDept b\nwhere a.employeeid = b.employeeid \n  and a.deptid = 1\n  and b.deptid = 2;\n']], ['Employees and departments database query with Sql '], 2], [(1054201, 0), [["I've done this (for VEvents only, not supporting TODO items or Journal entires or anything like that).  My implementation looks like this (after removing columns that are not specific to the question):"], ['To go along with this, I have several SQL Server 2005+ CLR functions that can be used to calculate the dates for various events.  I have found the following forms to be very useful:']], [[' -- One table for each event.  An event may have multiple rRules.\nCreate Table [vEvent]\n    (vEventID Integer Identity(1, 1) Not Null\n     Constraint [vEvent.pk]\n     Primary Key\n     Clustered\n    ,title nVarChar(200) Not Null);\n\n-- One table for rRules.\n-- My application does NOT support the "bySetPos" rule, so that is not included.\nCreate Table [rRule]\n    (rRuleID Integer Identity(1, 1) Not Null\n     Constraint [rRule.pk]\n     Primary Key\n     Clustered\n    ,vEventID Integer Not Null\n     Constraint [fk.vEvent.rRules]\n     Foreign Key\n     References [vEvent] (vEventID)\n     On Update Cascade\n     On Delete Cascade\n    ,[class]            varChar(  12) Not Null Default(\'public\')\n    ,[created]         DateTime       Not Null Default(getUTCDate())\n    ,[description]     nVarChar(max)      Null\n    ,[dtStart]         DateTime       Not Null\n    ,[dtEnd]           DateTime           Null\n    ,[duration]         varChar(  20)     Null\n    ,[geoLat]          Float              Null\n    ,[geoLng]          Float              Null\n    ,[lastModified]    DateTime       Not Null Default(getUTCDate())\n    ,[location]        nVarChar(max)      Null\n    ,[organizerCN]     nVarChar(  50)     Null\n    ,[organizerMailTo] nVarChar( 100)     Null\n    ,[seq]             Integer        Not Null Default(0)\n    ,[status]           varChar(   9) Not Null Default(\'confirmed\')\n    ,[summary]         nVarChar(  75)     Null\n    ,[transparent]     Bit            Not Null Default(0)\n    ,[freq]             varChar(   8) Not Null Default(\'daily\')\n    ,[until]           DateTime           Null\n    ,[count]           Integer            Null\n    ,[interval]        Integer        Not Null Default(1)\n    ,[bySecond]         varChar( 170)     Null\n    ,[byMinute]         varChar( 170)     Null\n    ,[byHour]           varChar(  61)     Null\n    ,[byDay]            varChar(  35)     Null\n    ,[byMonthDay]       varChar( 200)     Null\n    ,[byYearDay]        varChar(3078)     Null\n    ,[byWeekNo]         varChar( 353)     Null\n    ,[byMonth]          varChar(  29)     Null\n    ,[wkSt]             Char   (   2)     Null Default(\'mo\'));\n\n-- Class must be one of "Confidential", "Private", or "Public"\nAlter Table [rRule]\nAdd Constraint [rRule.ck.Class]\nCheck ([class] In (\'confidential\', \'private\', \'public\'));\n\n-- Start date must come before End date\nAlter Table [rRule]\nAdd Constraint [rRule.ck.dtStart]\nCheck ([dtEnd] Is Null Or [dtStart] <= [dtEnd]);\n\n-- dtEnd and duration may not both be present\nAlter Table [rRule]\nAdd Constraint [rRule.ck.duration]\nCheck (Not ([dtEnd] Is Not Null And [duration] Is Not Null));\n\n-- Check valid values for [freq]. Note that \'single\' is NOT in the RFC;\n-- it is an optimization for my particular iCalendar calculation engine.\n-- I use it as a clue that this pattern has only a single date (dtStart),\n-- and there is no need to perform extra calculations on it.\nAlter Table [rRule]\nAdd Constraint [rRule.ck.freq]\nCheck ([freq] In\n    (\'yearly\'\n    ,\'monthly\'\n    ,\'weekly\'\n    ,\'daily\'\n    ,\'hourly\'\n    ,\'minutely\'\n    ,\'secondly\'\n    ,\'single\')); -- Single is NOT part of the spec!\n\n-- If there is a latitude, there must be a longitude, and vice versa.\nAlter Table [rRule]\nAdd Constraint [rRule.ck.geo]\nCheck (([geoLat] Is Null And [geoLng] Is Null)\n       Or ([geoLat] Is Not Null And [geoLng] Is Not Null));\n\n-- Interval must be positive.\nAlter Table [rRule]\nAdd Constraint [rRule.ck.interval]\nCheck ([interval] > 0);\n\n-- Status has a set of defined values.\nAlter Table [rRule]\nAdd Constraint [rRule.ck.status]\nCheck ([status] In (\'cancelled\', \'confirmed\', \'tentative\'));\n\n-- Until and Count may not coexist in the same rule.\nAlter Table [rRule]\nAdd Constraint [rRule.ck.until and count]\nCheck (Not ([until] Is Not Null And [count] Is Not Null));\n\n\n-- One table for exceptions to rRules.  In my application, this covers both\n-- exDate and rDate.  I do NOT support extended rule logic here;  The RFC says\n-- you should support the same sort of date calculations here as are supported\n-- in rRules: exceptions can recur, etc.  I don\'t do that; mine is simply a\n-- set of dates that are either "exceptions" (dates which don\'t appear, even\n-- if the rule otherwise says they should) or "extras" (dates which do appear,\n-- even if the rule otherwise wouldn\'t include them).  This has proved\n-- sufficient for my application, and something that can be exported into a\n-- valid iCalendar file--even if I can\'t import an iCalendar file that makes\n-- use of recurring rules for exceptions to recurring rules.\nCreate Table [exDate]\n    (exDateID Integer Identity(1, 1) Not Null\n     Constraint [exDate.pk]\n     Primary Key\n     Clustered\n    ,rRuleID Integer Not Null\n     Constraint [fk.rRule.exDates]\n     Foreign Key\n     References [rRule] (rRuleID)\n     On Update Cascade\n     On Delete Cascade\n    ,[date] DateTime Not Null\n    ,[type] varChar(6) Not Null);  -- Type = "exDate" or "rDate" for me; YMMV.\n']], ['iCal "Field" list (for database schema based on iCal standard)'], 2], [(1054201, 1), [['To go along with this, I have several SQL Server 2005+ CLR functions that can be used to calculate the dates for various events.  I have found the following forms to be very useful:'], ['Implementation of the above is darn fun to figure out!']], [[' Select * From dbo.getDatesByVEventID(@id, @startDate, @endDate)\nSelect * From dbo.getEventsByDateRange(@startDate, @endDate, @maxCount)\n']], ['iCal "Field" list (for database schema based on iCal standard)'], 2], [(1054202, 0), [['Try this instead:'], ["Also, you don't really need the table alias. Since the subquery's PayrollTotals is aliased as pts, you can refer to the updated table directly by its name:"]], [[' UPDATE PayrollTotals SET PTAmount = PTAmount + \n  (SELECT SUM(pts.PTAmount) FROM PayrollTotals pts WHERE \n    pts.PTACID = 38 \n    AND pts.PTAmount > 0\n    AND pts.PTEmpID = ptm.PTEmpID)\nFROM\n    PayrollTotals AS ptm\nWHERE\n    PTACID = 42\n']], ['SQL Update query'], 2], [(1054202, 1), [["Also, you don't really need the table alias. Since the subquery's PayrollTotals is aliased as pts, you can refer to the updated table directly by its name:"], ['-10000']], [[' UPDATE PayrollTotals SET PTAmount = PTAmount + \n  (SELECT SUM(pts.PTAmount) FROM PayrollTotals pts WHERE \n    pts.PTACID = 38 \n    AND pts.PTAmount > 0\n    AND pts.PTEmpID = PayrollTotals.PTEmpID)\nWHERE\n    PTACID = 42\n']], ['SQL Update query'], 2], [(1054299, 0), [["I'm assuming you want to find employees that are in  ALL  of the specified departments and not just the employees that are in  ANY  of the departments, which is a far easier query."], ["I'm going to preempt the inevitable suggestion that'll come to use aggregation:"]], [[' SELECT EmpID\nFROM mytable t1\nJOIN mytable t2 ON t1.EmpID = t2.EmpID AND t2.DeptID = 2\nJOIN mytable t3 ON t2.EmpID = t3.EmpID AND t3.DeptID = 3\nWHERE DeptID = 1\n']], ['SQL: Many-To-Many table AND query'], 2], [(1054299, 1), [["I'm going to preempt the inevitable suggestion that'll come to use aggregation:"], ["Resist that temptation. It's  significantly  slower. A similar scenario to this came up in  SQL Statement - “Join” Vs “Group By and Having”  and the second version was, in that second, about  twenty times slower ."]], [[' SELECT EmpID\nFROM mytable\nWHERE DeptID IN (1,2,3)\nGROUP BY EmpID\nHAVING COUNT(1) = 3\n']], ['SQL: Many-To-Many table AND query'], 2], [(1056333, 0), [["Is this what you're after?"], ['As to why I know this...I wanted to say MLM on twitter once, without actually saying it. Because if you actually say it, you get auto-followed by all these MLM spammers. So instead I said']], [[' [214, 222, 0, 0, 0].inject(""){|s,c| s << c.chr; s} # => "\\326\\336\\000\\000\\000"\n']], ['Activerecord, select on string compare'], 2], [(1056333, 1), [['As to why I know this...I wanted to say MLM on twitter once, without actually saying it. Because if you actually say it, you get auto-followed by all these MLM spammers. So instead I said'], ['In your case, though, it seems like a lot of work just to avoid using a timestamp.']], [[' [77, 76, 77].inject(""){|s,c| s << c.chr; s}\n']], ['Activerecord, select on string compare'], 2], [(1056535, 0), [['As an example, a portion of my Fabfile looks like:'], ['Add something like this just before the syncdb:']], [[' def createdb():\n    "Create a clean database"\n    run(\'createdb --encoding=UNICODE $(db_name) -O $(db_owner) -U $(db_owner)\')\n    run(\'python manage.py syncdb --noinput\')\n']], ['Right way to create custom pgsql types in django'], 4], [(1056535, 1), [['Add something like this just before the syncdb:'], ['and you should be good to go by just typing:']], [[" run('psql -U $(db_owner) $(db_name) < app/sql/custom_types.sql')\n"]], ['Right way to create custom pgsql types in django'], 4], [(1056535, 2), [['and you should be good to go by just typing:'], ['or:']], [[' $ fab createdb\n']], ['Right way to create custom pgsql types in django'], 4], [(1056535, 3), [['or:'], ['to run the command on all the machines listed in your environment called  cluster .']], [[' $ fab cluster createdb\n']], ['Right way to create custom pgsql types in django'], 4], [(1057420, 0), [['You can double the range by casting the value to an unsigned value:'], ['There is a bigger data type: the BIGINT, but unfortunately you cannot  CAST()  to it. If you want to make use of it, you must change your column to that type:']], [[' SELECT SUM(CAST(myIntColumn AS UNSIGNED)) ...\n']], ['How to deal with silent mysql sum() integer overflow?'], 2], [(1057420, 1), [['There is a bigger data type: the BIGINT, but unfortunately you cannot  CAST()  to it. If you want to make use of it, you must change your column to that type:'], ['-10000']], [[' ALTER TABLE myTable CHANGE COLUMN myIntColumn myBigIntColumn BIGINT UNSIGNED ...\n']], ['How to deal with silent mysql sum() integer overflow?'], 2], [(1059237, 0), [['Use this instead:'], ['Sounds like you want to count the IP addresses for a given date:']], [[' GROUP BY DATE(`when`)\n']], ['Grouping result by date in mysql'], 2], [(1059237, 1), [['Sounds like you want to count the IP addresses for a given date:'], ['-10000']], [[" SELECT COUNT(`ip`) AddressCount, `when`\nFROM `metrics` \nWHERE `vidID` = '1' \nGROUP BY DATE(`when`)\n"]], ['Grouping result by date in mysql'], 2], [(1061514, 0), [['For example:'], ['The previous solution would be:']], [[' UPDATE Table\nSET single_cost = (1.0 * cost) / participant\n']], ['Number formatting functions in sql'], 2], [(1061514, 1), [['The previous solution would be:'], ['Hope that helps.']], [[' UPDATE Table\nSET single_cost = CAST(cost AS FLOAT) / participant\n']], ['Number formatting functions in sql'], 2], [(1061557, 0), [['-10000'], ['or']], [[" select * from test where find_in_set('1',bbb)\n"]], ['How to get result from a column with combined data?'], 2], [(1061557, 1), [['or'], ['-10000']], [[" select * from test where bbb REGEXP '(^|,)1(,|$)'\n"]], ['How to get result from a column with combined data?'], 2], [(1062887, 0), [['The sql task is called as follows'], ['The generated properties file will contain:']], [[' <sql ... print="yes" output="temp.properties"\n        expandProperties="true" showheaders="false" showtrailers="false" >\n        <![CDATA[\n        select \'current.sp.version=\' || NAME from SERVICE_PACK;\n        select \'current.major.version=\' || NAME from VERSION;\n        ]]>\n</sql>\n']], ['How can I read output of an sql query into an ant property?'], 3], [(1062887, 1), [['The generated properties file will contain:'], ['Then you just load the properties file and delete it:']], [[' current.sp.version=03\n\ncurrent.major.version=5\n']], ['How can I read output of an sql query into an ant property?'], 3], [(1062887, 2), [['Then you just load the properties file and delete it:'], ["This works, and everything is right there in the ant script (even if it's not the prettiest thing in the world!)."]], [[' <property file="temp.properties" />\n<delete file="temp.properties" />\n\n<echo message="Current service pack version: ${current.sp.version}" />\n<echo message="Current major version: ${current.major.version}" />\n']], ['How can I read output of an sql query into an ant property?'], 3], [(1063174, 0), [['First day of this year:'], ['First day of this month:']], [[" date('0001-01-01') + year(current date) years - 1 year\n"]], ['Select first day of preceding month in (DB2) SQL'], 3], [(1063174, 1), [['First day of this month:'], ['First day of last month:']], [[" date('0001-01-01') + year(current date) years - 1 year + month(current date) months - 1 month\n"]], ['Select first day of preceding month in (DB2) SQL'], 3], [(1063174, 2), [['First day of last month:'], ['-10000']], [[" date('0001-01-01') + year(current date) years - 1 year + month(current date) months - 2 months\n"]], ['Select first day of preceding month in (DB2) SQL'], 3], [(1065295, 0), [["It would be easier if you post models. But from SQL I'm assuming the models are like this:"], ['Based on these models:']], [[" class XenPanelSubscription(models.Model):\n    hostname = models.CharField()\n    distro = models.CharField()\n    node = models.ForeignKey(XenPanelHardwareNode)\n    customer_id = models.IntegerField()\n\n    class Meta:\n        db_table = u'xenpanel_subscription'\n\nclass XenPanelHardwareNode(models.Model):\n    location = models.CharField()\n\n    class Meta:\n        db_table = u'xenpanel_hardwarenode'\n"]], ['Django ORM equivalent'], 2], [(1065295, 1), [['Based on these models:'], ['-10000']], [[' accountDetails = XenPanelSubscription.objects.filter(customer_id = request.user.id)\nfor accountDetail in accountDetails:\n    print accountDetail.hostname, accountDetail.distro, accountDetail.node.location\n']], ['Django ORM equivalent'], 2], [(1066218, 0), [['-10000'], ['or (sometimes faster, but optimizers are getting better all the time):']], [[" select id, name\nfrom item_types\nwhere id not in\n    (select i.item_type_id\n    from items i\n    inner join entities e\n        on e.id = t.entity_id\n    where e.Name = 'Bob')\n"]], ['SELECT item types not provided by an entity'], 2], [(1066218, 1), [['or (sometimes faster, but optimizers are getting better all the time):'], ['-10000']], [[" select disctinct t.id, t.name\nfrom item_types t\nleft outer join items i\n    on i.item_type_id = t.id\nleft outer join entities e\n    on e.id = i.entity_id\n    and e.Name = 'Bob'\nwhere e.id is null\n"]], ['SELECT item types not provided by an entity'], 2], [(1068447, 0), [['Please try using the following:'], ['Personally I prefer to use more explicit join syntax for clarity i.e.']], [[' UPDATE A\n    SET A.NAME = B.NAME\nFROM TableNameA A, TableNameB B\nWHERE A.ID = B.ID\n']], ['Update with two tables?'], 2], [(1068447, 1), [['Personally I prefer to use more explicit join syntax for clarity i.e.'], ['-10000']], [[' UPDATE A\n    SET A.NAME = B.NAME\nFROM TableNameA A\n    INNER JOIN TableName B ON \n        A.ID = B.ID\n']], ['Update with two tables?'], 2], [(1069205, 0), [['You should  CROSS JOIN  your dates and models so that you have exactly one record for each day-model pair no matter what, and then  LEFT JOIN  other tables:'], ['Note the  JOIN  condition:']], [[" SELECT  date, name, COUNT(t.id)\nFROM    (\n        SELECT ...\n        ) AS days_of_months\nCROSS JOIN\n        model m\nLEFT JOIN\n        APPLIANCE_UNIT a\nON      a.MODEL_FK = m.id\n        AND a.NUMBER_OF_UNITS > 0\nLEFT JOIN\n        NEW_TICKET t\nON      t.id = a.NEW_TICKET_FK\n        AND t.TYPE = 'SALES'\n        AND t.SALES_ORDER_FK IS NOT NULL\n        AND t.CREATION_DATE_TIME >= days_of_months.`Date`\n        AND t.CREATION_DATE_TIME < days_of_months.`Date` + INTERVAL 1 DAY\nGROUP BY\n        date, name\n"]], ['Left and right joining in a query'], 3], [(1069205, 1), [['Note the  JOIN  condition:'], ['instead of ']], [[' AND t.CREATION_DATE_TIME >= days_of_months.`Date`\nAND t.CREATION_DATE_TIME < days_of_months.`Date` + INTERVAL 1 DAY\n']], ['Left and right joining in a query'], 3], [(1069205, 2), [['instead of '], ['This will help make your query  sargable  (optimized by indexes)']], [[' DATE(t.CREATION_DATE_TIME) = DATE(days_of_months.`Date`)\n']], ['Left and right joining in a query'], 3], [(1069244, 0), [['It depends on the database management system. In sql server would be:'], ['Whereas in Mysql it can be done with:']], [[" UPDATE table SET field3 = field1 + '_' + field2\n"]], ['Join strings in sql update query'], 2], [(1069244, 1), [['Whereas in Mysql it can be done with:'], ['-10000']], [[" UPDATE table SET field3 = CONCAT_WS ('_', field1, field2)\n"]], ['Join strings in sql update query'], 2], [(1069311, 0), [['EDIT: \nA complement for serialize List (or anything else):'], ['The result (ready to use with XML parameter):']], [[' List<string> testList = new List<int>();\n\ntestList.Add(1);\ntestList.Add(2);\ntestList.Add(3);\n\nXmlSerializer xs = new XmlSerializer(typeof(List<int>));\nMemoryStream ms = new MemoryStream();\nxs.Serialize(ms, testList);\n\nstring resultXML = UTF8Encoding.UTF8.GetString(ms.ToArray());\n']], ['Passing an array of parameters to a stored procedure'], 4], [(1069311, 1), [['The result (ready to use with XML parameter):'], ['Passing XML as parameter:']], [[' <?xml version="1.0"?>\n<ArrayOfInt xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">\n  <int>1</int>\n  <int>2</int>\n  <int>3</int>\n</ArrayOfInt>\n']], ['Passing an array of parameters to a stored procedure'], 4], [(1069311, 2), [['Passing XML as parameter:'], ['-10000']], [[' <ids>\n    <id>1</id>\n    <id>2</id>\n</ids>\n']], ['Passing an array of parameters to a stored procedure'], 4], [(1069311, 3), [['-10000'], ['-10000']], [[" CREATE PROCEDURE [dbo].[DeleteAllData]\n(\n    @XMLDoc XML\n)\nAS\nBEGIN\n\nDECLARE @handle INT\n\nEXEC sp_xml_preparedocument @handle OUTPUT, @XMLDoc\n\nDELETE FROM\n    YOURTABLE\nWHERE\n    YOUR_ID_COLUMN NOT IN (\n        SELECT * FROM OPENXML (@handle, '/ids/id') WITH (id INT '.') \n    )\nEXEC sp_xml_removedocument @handle\n"]], ['Passing an array of parameters to a stored procedure'], 4], [(1069346, 0), [['Like this query:'], ['can be transformed into this:']], [[' SELECT  *\nFROM    mytable\nWHERE   col1 > @value1 OR col2 < @value2\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 1), [['can be transformed into this:'], ['or this:']], [[' SELECT  *\nFROM    mytable\nWHERE   col1 > @value1\nUNION\nSELECT  *\nFROM    mytable\nWHERE   col2 < @value2\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 2), [['or this:'], ['One of the most common things to do is replacing this query:']], [[' SELECT  mo.*\nFROM    (\n        SELECT  id\n        FROM    mytable\n        WHERE   col1 > @value1\n        UNION\n        SELECT  id\n        FROM    mytable\n        WHERE   col2 < @value2\n        ) mi\nJOIN    mytable mo\nON      mo.id = mi.id\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 3), [['One of the most common things to do is replacing this query:'], ['with this one:']], [[' SELECT  *\nFROM    mytable\nWHERE   col IN\n        (\n        SELECT  othercol\n        FROM    othertable\n        )\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 4), [['with this one:'], ["In some  RDBMS 's (like  PostgreSQL ),  DISTINCT  and  GROUP BY  use the different execution plans, so sometimes it's better to replace one with the other:"]], [[' SELECT  *\nFROM    mytable mo\nWHERE   EXISTS\n        (\n        SELECT  NULL\n        FROM    othertable o\n        WHERE   o.othercol = mo.col\n        )\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 5), [["In some  RDBMS 's (like  PostgreSQL ),  DISTINCT  and  GROUP BY  use the different execution plans, so sometimes it's better to replace one with the other:"], ['vs.']], [[' SELECT  mo.grouper,\n        (\n        SELECT  SUM(col)\n        FROM    mytable mi\n        WHERE   mi.grouper = mo.grouper\n        )\nFROM    (\n        SELECT  DISTINCT grouper\n        FROM    mytable\n        ) mo\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 6), [['vs.'], ['MySQL  lacks  FULL OUTER JOIN , so it can be rewritten as folloing:']], [[' SELECT  mo.grouper, SUM(col)\nFROM    mytable\nGROUP BY\n        mo.grouper\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 7), [['MySQL  lacks  FULL OUTER JOIN , so it can be rewritten as folloing:'], ['vs.']], [[' SELECT  t1.col1, t2.col2\nFROM    table1 t1\nLEFT OUTER JOIN\n        table2 t2\nON      t1.id = t2.id\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 8), [['vs.'], ['This hierarchical query in  Oracle :']], [[' SELECT  t1.col1, t2.col2\nFROM    table1 t1\nLEFT JOIN\n        table2 t2\nON      t1.id = t2.id\nUNION ALL\nSELECT  NULL, t2.col2\nFROM    table1 t1\nRIGHT JOIN\n        table2 t2\nON      t1.id = t2.id\nWHERE   t1.id IS NULL\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 9), [['This hierarchical query in  Oracle :'], ['can be transformed to this:']], [[' SELECT  DISTINCT(animal_id) AS animal_id\nFROM    animal\nSTART WITH\n        animal_id = :id\nCONNECT BY\n        PRIOR animal_id IN (father, mother)\nORDER BY\n        animal_id\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 10), [['can be transformed to this:'], ['To find all ranges that overlap the given range, you can use the following query:']], [[' SELECT  DISTINCT(animal_id) AS animal_id\nFROM    (\n        SELECT  0 AS gender, animal_id, father AS parent\n        FROM    animal\n        UNION ALL\n        SELECT  1, animal_id, mother\n        FROM    animal\n        )\nSTART WITH\n        animal_id = :id\nCONNECT BY\n        parent = PRIOR animal_id\nORDER BY\n        animal_id\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 11), [['To find all ranges that overlap the given range, you can use the following query:'], [', but in  SQL Server  this more complex query yields same results faster:']], [[' SELECT  *\nFROM    ranges\nWHERE   end_date >= @start\n        AND start_date <= @end\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 12), [[', but in  SQL Server  this more complex query yields same results faster:'], ['SQL Server  also lacks an efficient way to do cumulative aggregates, so this query:']], [[' SELECT  *\nFROM    ranges\nWHERE   (start_date > @start AND start_date <= @end)\n        OR (@start BETWEEN start_date AND end_date)\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 13), [['SQL Server  also lacks an efficient way to do cumulative aggregates, so this query:'], ['There is a certain kind of query commonly met in financial applications that searches for the effective rate for a currency, like this one in  Oracle :']], [[' SELECT  mi.id, SUM(mo.value) AS running_sum\nFROM    mytable mi\nJOIN    mytable mo\nON      mo.id <= mi.id\nGROUP BY\n        mi.id\n']], ['General rules for simplifying SQL statements'], 16], [(1069346, 14), [['There is a certain kind of query commonly met in financial applications that searches for the effective rate for a currency, like this one in  Oracle :'], ['This query can be heavily rewritten to use an equality condition which allows a  HASH JOIN  instead of  NESTED LOOPS :']], [[" SELECT  TO_CHAR(SUM(xac_amount * rte_rate), 'FM999G999G999G999G999G999D999999')\nFROM    t_transaction x\nJOIN    t_rate r\nON      (rte_currency, rte_date) IN\n        (\n        SELECT  xac_currency, MAX(rte_date)\n        FROM    t_rate\n        WHERE   rte_currency = xac_currency\n                AND rte_date <= xac_date\n        )\n"]], ['General rules for simplifying SQL statements'], 16], [(1069346, 15), [['This query can be heavily rewritten to use an equality condition which allows a  HASH JOIN  instead of  NESTED LOOPS :'], ['Despite being bulky as a hell, the latter query is  6  times faster.']], [[" WITH v_rate AS\n        (\n        SELECT  cur_id AS eff_currency, dte_date AS eff_date, rte_rate AS eff_rate\n        FROM    (\n                SELECT  cur_id, dte_date,\n                        (\n                        SELECT  MAX(rte_date)\n                        FROM    t_rate ri\n                        WHERE   rte_currency = cur_id\n                                AND rte_date <= dte_date\n                        ) AS rte_effdate\n                FROM    (\n                        SELECT  (\n                                SELECT  MAX(rte_date)\n                                FROM    t_rate\n                                ) - level + 1 AS dte_date\n                        FROM    dual\n                        CONNECT BY\n                                level <=\n                                (\n                                SELECT  MAX(rte_date) - MIN(rte_date)\n                                FROM    t_rate\n                                )\n                        ) v_date,\n                        (\n                        SELECT  1 AS cur_id\n                        FROM    dual\n                        UNION ALL\n                        SELECT  2 AS cur_id\n                        FROM    dual\n                        ) v_currency\n                ) v_eff\n        LEFT JOIN\n                t_rate\n        ON      rte_currency = cur_id\n                AND rte_date = rte_effdate\n        )\nSELECT  TO_CHAR(SUM(xac_amount * eff_rate), 'FM999G999G999G999G999G999D999999')\nFROM    (\n        SELECT  xac_currency, TRUNC(xac_date) AS xac_date, SUM(xac_amount) AS xac_amount, COUNT(*) AS cnt\n        FROM    t_transaction x\n        GROUP BY\n                xac_currency, TRUNC(xac_date)\n        )\nJOIN    v_rate\nON      eff_currency = xac_currency\n        AND eff_date = xac_date\n"]], ['General rules for simplifying SQL statements'], 16], [(1070122, 0), [['Just do the order details condition in the usual way:'], ['Or use an expression as the data source']], [[" from o in orders\njoin od from orderdetails on o.id = od.orderid\n  into details\nwhere details.status == 'A'\nselect new { Order = o, Details = details}\n"]], ['How can I make a LINQ query with subqueries in the from statement?'], 3], [(1070122, 1), [['Or use an expression as the data source'], ['Or even, use another comprehension expression as the source expression:']], [[" from o in orders\njoin od from orderdetails.Where(d => d.Status == 'A') on o.id = od.orderid\n  into details\nselect new { Order = o, Details = details}\n"]], ['How can I make a LINQ query with subqueries in the from statement?'], 3], [(1070122, 2), [['Or even, use another comprehension expression as the source expression:'], ["(Setting you  DataContext 's  Log  property allows you to see the SQL so you can compare what SQL is actually generated.)"]], [[" from o in orders\njoin od from (from d in orderdetails\n              where d.Status == 'A'\n              select d)\n  on o.id = od.orderid\n  into details\nselect new { Order = o, Details = details}\n"]], ['How can I make a LINQ query with subqueries in the from statement?'], 3], [(1070171, 0), [['This query:'], ['can be easilty rewritten as']], [['   SELECT c.id,\n         c.date,\n         c.time,\n         c.duration,\n         c.location\n    FROM #tmp q, call_table c (NOLOCK)\n   WHERE q.id=c.id  \n     AND q.date=c.date\n     AND q.time=c.time\n     AND q.duration=c.duration\n     AND q.location=c.location\nGROUP BY c.id,\n         c.date,\n         c.time,\n         c.duration,\n         c.location\n']], ['Are these cross joins causing me problems?'], 3], [(1070171, 1), [['can be easilty rewritten as'], ['Rewriting your query as this:']], [['   SELECT  c.id,\n          c.date,\n          c.time,\n          c.duration,\n          c.location\n  FROM    call_table c (NOLOCK)\n  WHERE   EXISTS\n          (\n          SELECT  NULL\n          FROM    #tmp q\n          WHERE   q.id = c.id  \n                  AND q.date = c.date\n                  AND q.time = c.time\n                  AND q.duration = c.duration\n                  AND q.location = c.location\n          )\n']], ['Are these cross joins causing me problems?'], 3], [(1070171, 2), [['Rewriting your query as this:'], ['-10000']], [['  SELECT  c.id,\n         c.date,\n         c.time,\n         c.duration,\n         c.location\n FROM    call_table c (NOLOCK)\n JOIN    #tmp q\n ON      q.id = c.id  \n         AND q.date = c.date\n         AND q.time = c.time\n         AND q.duration = c.duration\n         AND q.location = c.location\n']], ['Are these cross joins causing me problems?'], 3], [(1074212, 0), [['django.db.connection.queries  contains a list of the SQL queries:'], ['Querysets also have a  query  attribute  containing the query to be executed:']], [[' from django.db import connection\nprint connection.queries\n']], ['How can I see the raw SQL queries Django is running?'], 2], [(1074212, 1), [['Querysets also have a  query  attribute  containing the query to be executed:'], ['Note that the output of the query is not valid SQL, because:']], [[' print MyModel.objects.filter(name="my name").query\n']], ['How can I see the raw SQL queries Django is running?'], 2], [(1074438, 0), [['To export'], ["To import (note you'll need to create the table)"]], [[' bcp yourdb..Stuff200901 OUT Stuff200901.bcp -T -S yourdbsvr -r "\\n" -t "|" -c\n']], ['How to preserve old data that might have to be reinserted into the database?'], 2], [(1074438, 1), [["To import (note you'll need to create the table)"], ['Type bcp to get a full list of options at the command prompt.']], [[' bcp yourdb..Stuff200901 in Stuff200901.bcp -c -S yourdbsvr -T -t "|" -k -e err.txt\n']], ['How to preserve old data that might have to be reinserted into the database?'], 2], [(1074529, 0), [['Suggested using this syntax for placement of the <Query> node (this example is to retrieve the item with an ID of 1):'], ['So, I used this as my query:']], [[' <Query>\n  <SoapAction>http://schemas.microsoft.com/sharepoint/soap/GetListItems</SoapAction>\n  <Method Namespace="http://schemas.microsoft.com/sharepoint/soap/" Name="GetListItems">\n    <Parameters>\n      <Parameter Name="listName">\n        <DefaultValue>{CE7A4C2E-D03A-4AF3-BCA3-BA2A0ADCADC7}</DefaultValue>\n      </Parameter>\n      <Parameter Name="query" Type="xml">\n        <DefaultValue>\n          <Query>\n            <Where>\n              <Eq>\n                <FieldRef Name="ID"/>\n                <Value Type="Integer">1</Value>\n              </Eq>\n            </Where>\n          </Query>\n        </DefaultValue>\n      </Parameter>\n    </Parameters>\n  </Method>\n  <ElementPath IgnoreNamespaces="True">*</ElementPath>\n</Query>\n']], ['SOAP call with query on result (SSRS, Sharepoint)'], 4], [(1074529, 1), [['So, I used this as my query:'], ['And then defined a parameter on the dataset named query, with the following value:']], [[' <Query>\n  <SoapAction>http://schemas.microsoft.com/sharepoint/soap/GetListItems</SoapAction>\n   <Method Namespace="http://schemas.microsoft.com/sharepoint/soap/" Name="GetListItems">\n      <Parameters>\n         <Parameter Name="listName">\n            <DefaultValue>{CE7A4C2E-D03A-4AF3-BCA3-BA2A0ADCADC7}</DefaultValue>\n         </Parameter>\n         <Parameter Name="query" Type="xml">\n        </Parameter>   \n      </Parameters>\n   </Method>\n   <ElementPath IgnoreNamespaces="True">*</ElementPath>\n</Query>\n']], ['SOAP call with query on result (SSRS, Sharepoint)'], 4], [(1074529, 2), [['And then defined a parameter on the dataset named query, with the following value:'], ['I was also able to make my query dependent on a report parameter, by setting the query dataset parameter to the following expression:']], [[' <Query><Where><Eq><FieldRef Name="ID"/><Value Type="Integer">1</Value></Eq></Where></Query>\n']], ['SOAP call with query on result (SSRS, Sharepoint)'], 4], [(1074529, 3), [['I was also able to make my query dependent on a report parameter, by setting the query dataset parameter to the following expression:'], ['-10000']], [[' ="<Query><Where><Eq><FieldRef Name=""ID""/><Value Type=""Integer"">" & \nParameters!TaskID.Value & \n"</Value></Eq></Where></Query>"\n']], ['SOAP call with query on result (SSRS, Sharepoint)'], 4], [(1075831, 0), [["If you're used to using the SqlDataReader then you just need to have your stored procedure or sql statement perform multiple selects and call  NextResult()  to move to the next result set:"], ["If you're used to using the data adapter returning data tables then all you need to do is have your data adapter fill a dataset and extract the result sets from the Tables property:"]], [[' using (SqlConnection conn = new SqlConnection(connectionString))\n{\n    conn.Open();\n    SqlCommand cmd = new SqlCommand(commandString, conn);\n    // Add parameters here\n    using (SqlDataReader reader = cmd.ExecuteReader())\n    {\n        // This will read the first result set\n        while(reader.Read())\n        { \n            // Read data\n        }\n\n        // This will read the second result set\n        if (!reader.NextResult())\n        {\n            throw new ApplicationException("Only one result set returned");\n        }\n\n        while (reader.Read())\n        {\n            // Read data\n        }\n    }\n}\n']], ['Two SELECTS, One query'], 2], [(1075831, 1), [["If you're used to using the data adapter returning data tables then all you need to do is have your data adapter fill a dataset and extract the result sets from the Tables property:"], ['-10000']], [[' using (SqlConnection conn = new SqlConnection(connectionString))\n{\n    conn.Open();\n\n    SqlDataAdapter da = new SqlDataAdapter(commandString, conn);\n    DataSet ds = new DataSet();\n    da.Fill(ds);\n\n    DataTable firstResult = ds.Tables[0];\n    DataTable secondResult = ds.Tables[1];\n}\n']], ['Two SELECTS, One query'], 2], [(1078280, 0), [['-10000'], ["EDIT: I didn't read the initial question close enough and didn't notice that all DEALS rows were needed in the view.  Below is my revised answer:"]], [[' select a.dealid\n, a.dealname\n, a.dealdetails\n, b.dcid\n, b.commenttime\n, b.commentperson\n, b.comment\nfrom deals a, dealcomments b\nwhere b.dealid = a.dealid\n  and b.commenttime = (select max(x.commenttime)\n                       from dealcomments x\n                       where x.dealid = b.dealid)\n']], ['Last record of Join table'], 2], [(1078280, 1), [["EDIT: I didn't read the initial question close enough and didn't notice that all DEALS rows were needed in the view.  Below is my revised answer:"], ['-10000']], [[' select a.dealid\n, a.dealname\n, a.dealdetails\n, b.dcid\n, b.commenttime\n, b.commentperson\n, b.comment\nfrom deals a left outer join (select x.dcid\n, x.dealid\n, x.commenttime\n, x.commentperson\n, x.comment\nfrom dealcomments x\nwhere x.commenttime = (select max(x1.commenttime)\n                       from dealcomments x1\n                       where x1.dealid = x.dealid)) b\non (a.dealid = b.dealid)\n']], ['Last record of Join table'], 2], [(1084642, 0), [["I would suggest using some of the MVC (Model, View, Controller) frameworks out there like  KohanaPHP . It is essentially this. You're working in a strictly Object-Oriented environment. A simple page in Kohana, build entirely from a class would look like this:"], ["When you start wanting to bring in database-activity, you'll start working with another Class called a  Model . This will contain methods to interact with your database, like the following:"]], [[' class Home_Controller extends Controller\n{\n  public function index()\n  {\n    echo "Hello World";\n  }\n}\n']], ['Generating pages from a database'], 5], [(1084642, 1), [["When you start wanting to bring in database-activity, you'll start working with another Class called a  Model . This will contain methods to interact with your database, like the following:"], ['That method would be called from within your  Controller , the first class that we mentioned at the beginning of this solution. That would look like this:']], [[" class Users_Model extends Model\n{\n  public function count_users()\n  {\n    return $this->db->count_records('users');\n  }\n}\n"]], ['Generating pages from a database'], 5], [(1084642, 2), [['That method would be called from within your  Controller , the first class that we mentioned at the beginning of this solution. That would look like this:'], ['Eventually, you\'ll want more complicated layouts, which will involve HTML/CSS/Javascript. At this point, you would introduce the " Views ," which are just presentation layers. Rather than calling  echo  or  print  from within the Controller, you would load up a view (an HTML page, essentially) and pass it some variables:']], [[' class Home_Controller extends Controller\n{\n  public function index()\n  {\n    $usersModel = new Users_Model;\n    $userCount = $usersModel->count_users();\n\n    echo "We have " . $userCount . " users!";\n  }\n}\n']], ['Generating pages from a database'], 5], [(1084642, 3), [['Eventually, you\'ll want more complicated layouts, which will involve HTML/CSS/Javascript. At this point, you would introduce the " Views ," which are just presentation layers. Rather than calling  echo  or  print  from within the Controller, you would load up a view (an HTML page, essentially) and pass it some variables:'], ['Which would load the following "View"']], [[' class Home_Controller extends Controller\n{\n  public function index()\n  {\n    $myView = new View("index");\n    $usersModel = new Users_Model;\n    $userCount = $usersModel->count_users();\n\n    $myView->userCount = $userCount;\n    $myView->render(TRUE);\n  }\n}\n']], ['Generating pages from a database'], 5], [(1084642, 4), [['Which would load the following "View"'], ['That should be enough to get you started. Using the MVC-style is really clean, and very fun to work with.']], [[' <p>We have <?php print $userCount; ?> users!</p>\n']], ['Generating pages from a database'], 5], [(1084794, 0), [["Here's some Python pseudocode, pretty close to executable (needs suitable imports and a def for a writerow function that will do the actual writing -- be it to an intermediate file, DB, CSV, whatever):"], ['Edit : as a new comment clarified, the exact specs is indeed the most complex one, so we have do do the merging appropriately.  So the loop at the end of the simplistic answer above changes to:']], [[" # first, collect all the data in a dict of dicts of lists\n# first key is version, second key is year (only for non-empty years)\n\ntree = dict()\nfor root, dirs, files in os.walk('make_1/model_1'):\n    head, tail = os.path.split(root)\n    if dirs:\n       # here, tail is a version\n       tree[tail] = dict\n    elif files:\n       # here, tail is a year\n       tree[os.path.basename(head)][tail] = files\n\n# now specialcase default_version\ndefault_version = tree.pop('default_version')\n# determine range of years; rule is quite asymmetrical:\n#   for min, only years with files in them count\nmin_year = min(d for d in default_version if default_version[d])\n#   for max, all years count, even if empty\nmax_year = max(default_version)\n\nfor version, years in tree.iteritems():\n    current_files = default_version[min_year]\n    years.append(max_year + 1)\n    y = min_year\n    while years:\n        next_change = min(years)\n        if y < next_change:\n            for f in current_files:\n                writerow(version, y, next_change-1, f)\n        y = next_change\n        current_files = years.pop(y)\n"]], ['Folder searching algorithm'], 3], [(1084794, 1), [['Edit : as a new comment clarified, the exact specs is indeed the most complex one, so we have do do the merging appropriately.  So the loop at the end of the simplistic answer above changes to:'], ["This algorithm is not maximally efficient, just simplest!  We're doing  min(merged)  over and over, making it O(N squared) -- I think we can afford that because each  merged  should have a few dozen change-years at most, but a purist would wince.  We can of course present an O(N logN) solution -- just sort the years once and for all and walk that sequence to get the successive values for  next_change .  Just for completeness...:"]], [[' for version, years_dict in tree.iteritems():\n    # have years_dict override default_version when coincident\n    merged = dict(default_version, **years_dict)\n    current_files = merged.pop(min_year)\n    merged[max_year + 1] = None\n    y = min_year\n    while merged:\n        next_change = min(merged)\n        for f in current_files:\n            writerow(version, y, next_change-1, f)\n        y = next_change\n        current_files = merged.pop(y)\n']], ['Folder searching algorithm'], 3], [(1084794, 2), [["This algorithm is not maximally efficient, just simplest!  We're doing  min(merged)  over and over, making it O(N squared) -- I think we can afford that because each  merged  should have a few dozen change-years at most, but a purist would wince.  We can of course present an O(N logN) solution -- just sort the years once and for all and walk that sequence to get the successive values for  next_change .  Just for completeness...:"], ["Here  sorted  gives a list with the keys of  merged  in sorted order, and I've switched to the  for  statement to walk that list from beginning to end (and an if statements to output nothing the first time through). The sentinel is now put in default_version (so it's outside the loop, for another slight optimization).  It's funny to see that this optimized version (essentially because it works at a slightly higher level of abstraction) turns out to be smaller and simpler than the previous ones;-)."]], [[' default_version[max_year + 1] = None\n\nfor version, years_dict in tree.iteritems():\n    merged = dict(default_version, **years_dict)\n    for next_change in sorted(merged):\n        if next_change > min_year:\n            for f in merged[y]:\n                writerow(version, y, next_change-1, f)\n        y = next_change\n']], ['Folder searching algorithm'], 3], [(1085109, 0), [['An example:'], ['Also a,b,b as a result. The query plans:']], [[' SQL> var N number\nSQL> exec :N := 19\n\nPL/SQL-procedure is geslaagd.\n\nSQL> select max(y) keep (dense_rank last order by x) y\n  2    from foo\n  3   where x <= :N\n  4  /\n\nY\n-\na\n\n1 rij is geselecteerd.\n\nSQL> exec :N := 20\n\nPL/SQL-procedure is geslaagd.\n\nSQL> select max(y) keep (dense_rank last order by x) y\n  2    from foo\n  3   where x <= :N\n  4  /\n\nY\n-\nb\n\n1 rij is geselecteerd.\n\nSQL> exec :N := 21\n\nPL/SQL-procedure is geslaagd.\n\nSQL> select max(y) keep (dense_rank last order by x) y\n  2    from foo\n  3   where x <= :N\n  4  /\n\nY\n-\nb\n\n1 rij is geselecteerd.\n']], ['Is there a better way to search over a range of values in Oracle than testing against a subquery?'], 2], [(1085109, 1), [['Also a,b,b as a result. The query plans:'], ['Two full table scans on foo, against one for the new query.']], [[' SQL> set serveroutput off\nSQL> select /*+ gather_plan_statistics */\n  2         y\n  3    from foo\n  4   where x = (select max(x) from foo where x<=:N)\n  5  /\n\nY\n-\nb\n\n1 rij is geselecteerd.\n\nSQL> select * from table(dbms_xplan.display_cursor(null,null,\'predicate -note last\'))\n  2  /\n\nPLAN_TABLE_OUTPUT\n-------------------------------------------------------------------------------------------\nSQL_ID  3kh85qqnb2phy, child number 0\n-------------------------------------\nselect /*+ gather_plan_statistics */        y   from foo  where x =\n(select max(x) from foo where x<=:N)\n\nPlan hash value: 763646971\n\n----------------------------------------------------------------------------\n| Id  | Operation           | Name | Rows  | Bytes | Cost (%CPU)| Time     |\n----------------------------------------------------------------------------\n|   0 | SELECT STATEMENT    |      |       |       |     8 (100)|          |\n|*  1 |  TABLE ACCESS FULL  | FOO  |     1 |    16 |     4   (0)| 00:00:01 |\n|   2 |   SORT AGGREGATE    |      |     1 |    13 |            |          |\n|*  3 |    TABLE ACCESS FULL| FOO  |     2 |    26 |     4   (0)| 00:00:01 |\n----------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   1 - filter("X"=)\n   3 - filter("X"<=:N)\n\n\n22 rijen zijn geselecteerd.\n\nSQL> select max(y) keep (dense_rank last order by x) y\n  2    from foo\n  3   where x <= :N\n  4  /\n\nY\n-\nb\n\n1 rij is geselecteerd.\n\nSQL> select * from table(dbms_xplan.display_cursor(null,null,\'predicate -note last\'))\n  2  /\n\nPLAN_TABLE_OUTPUT\n-------------------------------------------------------------------------------------------\nSQL_ID  avm2zh62c8cwd, child number 0\n-------------------------------------\nselect max(y) keep (dense_rank last order by x) y   from foo  where x\n<= :N\n\nPlan hash value: 3274996510\n\n---------------------------------------------------------------------------\n| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |\n---------------------------------------------------------------------------\n|   0 | SELECT STATEMENT   |      |       |       |     4 (100)|          |\n|   1 |  SORT AGGREGATE    |      |     1 |    16 |            |          |\n|*  2 |   TABLE ACCESS FULL| FOO  |     1 |    16 |     4   (0)| 00:00:01 |\n---------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   2 - filter("X"<=:N)\n\n\n20 rijen zijn geselecteerd.\n']], ['Is there a better way to search over a range of values in Oracle than testing against a subquery?'], 2], [(1085573, 0), [['-10000'], ["Here's the version which does NOT require the event.eventkey column to have significance (more correct):"]], [[" /*\ncreate table Event (\neventKey int,\neventDesc varchar(100),\nstarted timestamp\n);\n\n insert into event values( 1,           'Sunset' ,    '2009-07-03 6:51pm');\n insert into event values(2,           'Sunrise',    '2009-07-04 5:33am');\n insert into event values(3,           'Fog'     ,   '2009-07-04 5:52pm');\n insert into event values(4,           'Sunset'   ,  '2009-07-04 6:49pm');\n insert into event values(5,           'Full Moon',  '2009-07-04 10:12pm');\n insert into event values(6,           'Sunrise'   , '2009-07-05 5:34am');\n\nselect * from event;\n\ncreate table EventTask (\nactivityKey int,\nactivityDesc varchar(100),\nstartEventKey int,\nendEventKey int\n)\n\ninsert into eventtask values(123 ,            'Camp-out',     1 ,              5);\ninsert into eventtask values(234,             'Drive home',   6,               6);\n\nselect * from eventtask;\n\n*/\n\nselect a.activitykey, a.activitydesc, b.eventkey, b.eventdesc\nfrom\n        eventtask a\njoin    event b on b.eventkey between a.starteventkey and a.endeventkey\norder by\n        a.activitykey, b.eventkey;\n\n activitykey     activitydesc     eventkey     eventdesc    \n --------------  ---------------  -----------  ------------ \n 123             Camp-out         1            Sunset       \n 123             Camp-out         2            Sunrise      \n 123             Camp-out         3            Fog          \n 123             Camp-out         4            Sunset       \n 123             Camp-out         5            Full Moon    \n 234             Drive home       6            Sunrise      \n\n 6 record(s) selected [Fetch MetaData: 3/ms] [Fetch Data: 1/ms] \n\n [Executed: 7/7/09 4:24:34 PM EDT ] [Execution: 15/ms] \n"]], ['Finding a timeline using a range of values - entity modeling'], 2], [(1085573, 1), [["Here's the version which does NOT require the event.eventkey column to have significance (more correct):"], ['-10000']], [[' select a.activitykey, a.activitydesc, d.eventkey, d.eventdesc\nfrom\n        eventtask a\njoin    event     b on b.eventkey = a.starteventkey\njoin    event     c on c.eventkey = a.endeventkey\njoin    event     d on d.started between b.started and c.started\norder by\n        a.activitykey, d.started;\n\n activitykey     activitydesc     eventkey     eventdesc    \n --------------  ---------------  -----------  ------------ \n 123             Camp-out         1            Sunset       \n 123             Camp-out         2            Sunrise      \n 123             Camp-out         3            Fog          \n 123             Camp-out         4            Sunset       \n 123             Camp-out         5            Full Moon    \n 234             Drive home       6            Sunrise      \n\n 6 record(s) selected [Fetch MetaData: 2/ms] [Fetch Data: 0/ms] \n\n [Executed: 7/8/09 10:01:25 AM EDT ] [Execution: 4/ms] \n']], ['Finding a timeline using a range of values - entity modeling'], 2], [(1086023, 0), [['Ok, here we go :'], ['Result :']], [[" with foo as\n(\nselect 1 as id, null as parent, 'CatA' as cat from dual\nunion select 2, null, 'CatB' from dual\nunion select 3, null, 'CatC' from dual\nunion select 4, 1, 'SubCatA_1' from dual\nunion select 5, 1, 'SubCatA_2' from dual\nunion select 6, 2, 'SubCatB_1' from dual\nunion select 7, 2, 'SubCatB_2' from dual\n)\nselect child.cat\nfrom foo parent right outer join foo child on parent.id = child.parent\norder by case when parent.id is not null then parent.cat else child.cat end,\n         case when parent.id is not null then 1 else 0 end\n"]], ['SQL - Ordering by multiple criteria'], 2], [(1086023, 1), [['Result :'], ["Edit - Solution change inspire from van's order by ! Much simpler that way."]], [[' CatA\nSubCatA_1\nSubCatA_2\nCatB\nSubCatB_1\nSubCatB_2\nCatC\n']], ['SQL - Ordering by multiple criteria'], 2], [(1089428, 0), [['Use a derived table:'], ['or a CTE:']], [[' SELECT ...\n FROM (\n   SELECT ...\n    FROM ...\n   UNION ALL\n   SELECT ...\n    FROM ...\n   ...)\nPIVOT ...\n']], ['Pivot Queries in a UNION'], 2], [(1089428, 1), [['or a CTE:'], ['-10000']], [[' WITH cte AS (\n  SELECT ...\n    FROM ...\n   UNION ALL\n   SELECT ...\n    FROM ...\n   ...)\nSELECT ...\n  FROM cte\n  PIVOT ...\n']], ['Pivot Queries in a UNION'], 2], [(1089508, 0), [["Here's a string tokenizer for Oracle that's a little more straightforward than that page, but no idea if it's as fast:"], ['You can use it like this:']], [[" create or replace function splitter_count(str in varchar2, delim in char) return int as\nval int;\nbegin\n  val := length(replace(str, delim, delim || ' '));\n  return val - length(str); \nend;\n\ncreate type token_list is varray(100) of varchar2(200);\n\nCREATE or replace function tokenize (str varchar2, delim char) return token_list as\nret token_list;\ntarget int;\ni int;\nthis_delim int;\nlast_delim int;\nBEGIN\n  ret := token_list();\n  i := 1;\n  last_delim := 0;\n  target := splitter_count(str, delim);\n  while i <= target\n  loop\n    ret.extend();\n    this_delim := instr(str, delim, 1, i);\n    ret(i):= substr(str, last_delim + 1, this_delim - last_delim -1);\n    i := i + 1;\n    last_delim := this_delim;\n  end loop;\n  ret.extend();\n  ret(i):= substr(str, last_delim + 1);\n  return ret;\nend;\n"]], ['How to best split csv strings in oracle 9i'], 2], [(1089508, 1), [['You can use it like this:'], ['-10000']], [[" select tokenize('hi you person', ' ') from dual;\nVARCHAR(hi,you,person)\n"]], ['How to best split csv strings in oracle 9i'], 2], [(1089961, 0), [['Lets have a table:'], ['with a many records:']], [[' create table t (id number(10,0), padding varchar2(1000));  \n']], ['Under what conditions does ROWNUM=1 significantly increase performance in an "exists" syle query'], 5], [(1089961, 1), [['with a many records:'], ['Now if you ask something like']], [[" insert into t (id, padding)\nselect rownum, rpad(' ', 1000) from dual connect by level < 10000\n"]], ['Under what conditions does ROWNUM=1 significantly increase performance in an "exists" syle query'], 5], [(1089961, 2), [['Now if you ask something like'], ['The drawback is that with the rownum constraint you may get undeterministic results if the data contains more than one possible record. \nIf the query was']], [[' select 1 into ll_exists\nfrom t where id = 5;\n']], ['Under what conditions does ROWNUM=1 significantly increase performance in an "exists" syle query'], 5], [(1089961, 3), [['The drawback is that with the rownum constraint you may get undeterministic results if the data contains more than one possible record. \nIf the query was'], ['If you really want query which tests existence then WRITE IT THAT WAY.']], [[' select id into ll_id\nfrom t where mod (id, 2) = 1\nand rownum = 1;\n']], ['Under what conditions does ROWNUM=1 significantly increase performance in an "exists" syle query'], 5], [(1089961, 4), [['If you really want query which tests existence then WRITE IT THAT WAY.'], ['-10000']], [[" begin\n\nselect 'It does' \n  into ls_exists\nfrom dual where\nexists (your_original_query_without_rownum);\n\ndo_something_when_it_does_exist\nexception\n  when no_data_found then\n    do_something_when_it_doesn't_exist\nend;\n"]], ['Under what conditions does ROWNUM=1 significantly increase performance in an "exists" syle query'], 5], [(1090937, 0), [['-10000'], ["It's best to have two constraints: one ensuring that the pair is unique, the other one checking that the article with the least  id  to be first:"]], [[' SELECT  id\nFROM    (\n        SELECT  B AS id\n        FROM    compat\n        WHERE   A IN (list)\n        UNION\n        SELECT  A\n        FROM    compat\n        WHERE   B IN (list)\n        ) q\nGROUP BY\n        id\nHAVING  COUNT(*) = @cnt\n']], ['Article compatibilty in SQL database'], 3], [(1090937, 1), [["It's best to have two constraints: one ensuring that the pair is unique, the other one checking that the article with the least  id  to be first:"], ['If you do this, you can replace  UNION  with more efficient  UNION ALL :']], [[' ALTER TABLE compat ADD CONSTRAINT ux_compat_ab UNIQUE (A, B)\nALTER TABLE compat ADD CONSTRAINT cc_compat_order CHECK (A < B)\n']], ['Article compatibilty in SQL database'], 3], [(1090937, 2), [['If you do this, you can replace  UNION  with more efficient  UNION ALL :'], ['-10000']], [[' SELECT  id\nFROM    (\n        SELECT  B AS id\n        FROM    compat\n        WHERE   A IN (list)\n        UNION ALL\n        SELECT  A\n        FROM    compat\n        WHERE   B IN (list)\n        ) q\nGROUP BY\n        id\nHAVING  COUNT(*) = @cnt\n']], ['Article compatibilty in SQL database'], 3], [(1091974, 0), [['-10000'], ['This query completes in  30 ms  on a  100,000  rows sample data:']], [[' SELECT  id, name, last_reply, replies\nFROM    (\n        SELECT  topic_id, MAX(date) AS last_reply, COUNT(*) AS replies\n        FROM    wp_pod_tbl_forum\n        GROUP BY\n                topic_id\n        ) r\nJOIN    wp_pod_tbl_forum t\nON      t.topic_id = 0\n        AND t.id = r.topic_id\nUNION ALL\nSELECT  id, name, date, 0\nFROM    wp_pod_tbl_forum t\nWHERE   NOT EXISTS\n        (\n        SELECT  NULL\n        FROM    wp_pod_tbl_forum r\n        WHERE   r.topic_id = t.id\n        )\n        AND t.topic_id = 0\nORDER BY\n       date DESC\nLIMIT 0, 20\n']], ['Optimize MySQL query to avoid "Using where; Using temporary; Using filesort"'], 2], [(1091974, 1), [['This query completes in  30 ms  on a  100,000  rows sample data:'], ['Both indexes are required for this query to be efficient.']], [[' SELECT  id, name, last_reply,\n        (\n        SELECT  COUNT(*)\n        FROM    wp_pod_tbl_forum fc\n        WHERE   fc.topic_id = fl.topic_id\n        ) AS replies\nFROM    (\n        SELECT  topic_id, date AS last_reply\n        FROM    wp_pod_tbl_forum fo\n        WHERE   id = (\n                SELECT  id\n                FROM    wp_pod_tbl_forum fp\n                WHERE   fp.topic_id = fo.topic_id\n                ORDER BY\n                        fp.date DESC, fp.id DESC\n                LIMIT 1\n                )\n                AND fo.topic_id <> 0\n        ORDER BY\n                fo.date DESC, fo.id DESC\n        LIMIT 20\n        ) fl\nJOIN    wp_pod_tbl_forum ft\nON      ft.id = fl.topic_id\nUNION ALL\nSELECT  id, name, date, 0\nFROM    wp_pod_tbl_forum t\nWHERE   NOT EXISTS\n        (\n        SELECT  NULL\n        FROM    wp_pod_tbl_forum r\n        WHERE   r.topic_id = t.id\n        )\n        AND t.topic_id = 0\nORDER BY\n       last_reply DESC, id DESC\nLIMIT  20\n']], ['Optimize MySQL query to avoid "Using where; Using temporary; Using filesort"'], 2], [(1092120, 0), [['For example, this calculates a moving average:'], ['This calculates a running balance:']], [[' AVG(amt) OVER (ORDER BY date ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)\n\ndate   amt   avg_amt\n=====  ====  =======\n1-Jan  10.0  10.5\n2-Jan  11.0  17.0\n3-Jan  30.0  17.0\n4-Jan  10.0  18.0\n5-Jan  14.0  12.0\n']], ['OVER clause in Oracle'], 3], [(1092120, 1), [['This calculates a running balance:'], ['This calculates the maximum, separately for each "dept":']], [[' SUM(amt) OVER (ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n\ndate   amt   sum_amt\n=====  ====  =======\n1-Jan  10.0  10.0\n2-Jan  11.0  21.0\n3-Jan  30.0  51.0\n4-Jan  10.0  61.0\n5-Jan  14.0  75.0\n']], ['OVER clause in Oracle'], 3], [(1092120, 2), [['This calculates the maximum, separately for each "dept":'], ['It operates over a window that includes all rows for a particular dept.']], [[' MAX(amt) OVER (PARTITION BY dept)\n\ndept  amt   max_amt\n====  ====  =======\nACCT   5.0   7.0\nACCT   7.0   7.0\nACCT   6.0   7.0\nMRKT  10.0  11.0\nMRKT  11.0  11.0\nSLES   2.0   2.0\n']], ['OVER clause in Oracle'], 3], [(1092533, 0), [['Try to rewrite your query as follows:'], ['Also, since you have a  UNIQUE  index, you will most probably benefit from rewriting your query as a  JOIN :']], [[" SELECT  screen_name\nFROM    profiles p\nWHERE   EXISTS\n        (\n        SELECT  1\n        FROM    relations r\n        WHERE   r.twitter_id = 'kovshenin'\n                AND r.followed_by = p.twitter_id\n        )\n"]], ['Looking for MySQL optimization and fine-tuning tips'], 3], [(1092533, 1), [['Also, since you have a  UNIQUE  index, you will most probably benefit from rewriting your query as a  JOIN :'], ['For instance, this query:']], [[" SELECT  p.screen_name\nFROM    relations r\nJOIN    profiles p\nON      p.twitter_id = r.followed_by\nWHERE   r.twitter_id = 'kovshenin'\n"]], ['Looking for MySQL optimization and fine-tuning tips'], 3], [(1092533, 2), [['For instance, this query:'], ['will not even look into  profiles , if you create a composite index on  profiles (twitter_id, screen_name) .']], [[" SELECT  p.screen_name\nFROM    relations r\nJOIN    profiles p\nON      p.twitter_id = r.followed_by\nWHERE   r.twitter_id = 'kovshenin'\n"]], ['Looking for MySQL optimization and fine-tuning tips'], 3], [(1094307, 0), [['Just the basics....'], ['where ndx is the row number (starting at 0)\nwhere column can be a DataColumn object, an index (column n), or the name of the column (a string)']], [[' yourDataTable.Rows[ndx][column]\n']], ['How do You Get a Specific Value From a System.Data.DataTable Object?'], 2], [(1094307, 1), [['where ndx is the row number (starting at 0)\nwhere column can be a DataColumn object, an index (column n), or the name of the column (a string)'], ['to test for null, compare to DBNull.Value;']], [[' yourDataTable.Rows[0][0]\nyourDataTable.Rows[0][ColumObject]\nyourDataTable.Rows[0]["ColumnName"]\n']], ['How do You Get a Specific Value From a System.Data.DataTable Object?'], 2], [(1095522, 0), [['But rather than trying to parse the statement, the fastest way might be having a trash database that you can execute the  CREATE TABLE  statement on, and then extracting the column names and types via'], ['Thusly,']], [[" SELECT COLUMN_NAME, DATA_TYPE\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME='MyCreatedTable'\n"]], ['How to extract all fields from create sql statment using .Net?'], 2], [(1095522, 1), [['Thusly,'], ["Sorry that it's in C#. I am not fluent enough with VB to write approximately correct code without a compiler at my fingertips."]], [[' string createTableCommandText; // "CREATE TABLE MyCreatedTable..."\nusing(var connection = new SqlConnection(connectionString)) {\n    connection.Open();\n    var createCommand = connection.CreateCommand();\n    createCommand.CommandText = createTableCommandText;\n    createCommand.ExecuteNonQuery();\n\n    var schemaCommand = connection.CreateCommand();\n    schemaCommand.CommandText = "SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=\'MyCreatedTable\'";\n    var reader = schemaCommand.ExecuteReader();\n    while(reader.Read()) {\n        Console.WriteLine(String.Format("{0}|{1}", reader["COLUMN_NAME"], reader["DATA_TYPE"]));\n    }\n\n    var deleteCommand = connection.CreateCommand();\n    deleteCommand.CommandText = "DROP TABLE MyCreatedTable";\n    deleteCommand.ExecuteNonQuery();\n}\n']], ['How to extract all fields from create sql statment using .Net?'], 2], [(1095871, 0), [['To alter the password expiry policy for a certain user profile in Oracle first check wich profile the user is in using:'], ['Then you can change the limit to never expire using:']], [[" select profile from DBA_USERS where username = '<username>';\n"]], ['How do I turn off Oracle password expiration?'], 3], [(1095871, 1), [['Then you can change the limit to never expire using:'], ['If you want to previously check the limit you may use:']], [[' alter profile <profile_name> limit password_life_time UNLIMITED;\n']], ['How do I turn off Oracle password expiration?'], 3], [(1095871, 2), [['If you want to previously check the limit you may use:'], ['-10000']], [[" select resource_name,limit from dba_profiles where profile='<profile_name>';\n"]], ['How do I turn off Oracle password expiration?'], 3], [(1096935, 0), [["Is this what you're looking for"], ['To find all that ends with X:']], [[" SELECT *\nFROM yourtable\nWHERE yourcolumn LIKE 'X%'\n"]], ['How to use the LIKE keyword in SQL?'], 3], [(1096935, 1), [['To find all that ends with X:'], ['...and contains an X...']], [[" ...\nWHERE yourcolumn LIKE '%X'\n"]], ['How to use the LIKE keyword in SQL?'], 3], [(1096935, 2), [['...and contains an X...'], ['-10000']], [[" ...\nWHERE yourcolumn LIKE '%X%'\n"]], ['How to use the LIKE keyword in SQL?'], 3], [(1097065, 0), [['DB2 After Insert trigger:'], ['After Update:']], [[' CREATE TRIGGER NEW_REVIEW\n AFTER INSERT ON REVIEW\n  REFERENCING NEW AS N_ROW\n   FOR EACH ROW\n    UPDATE PRODUCT SET Rating = (\n      Select AVG(Rating) \n      from Review \n      where ProductName = N_ROW.ProductName\n      )\n']], ['A DB2 Trigger to calculate an average in another table'], 3], [(1097065, 1), [['After Update:'], ['After Delete:']], [[' CREATE TRIGGER NEW_REVIEW\n AFTER UPDATE ON REVIEW\n  REFERENCING NEW AS N_ROW\n   FOR EACH ROW\n    UPDATE PRODUCT SET Rating = (\n      Select AVG(Rating) \n      from Review \n      where ProductName = N_ROW.ProductName\n      )\n']], ['A DB2 Trigger to calculate an average in another table'], 3], [(1097065, 2), [['After Delete:'], ['Check out  CREATE TRIGGER statement  for additional info.']], [[' CREATE TRIGGER NEW_REVIEW\n AFTER DELETE ON REVIEW\n  REFERENCING OLD AS O_ROW\n   FOR EACH ROW\n    UPDATE PRODUCT SET Rating = (\n      Select AVG(Rating) \n      from Review \n      where ProductName = O_ROW.ProductName\n      )\n']], ['A DB2 Trigger to calculate an average in another table'], 3], [(1097873, 0), [['So your query could become'], ['For either for 5 tables or for assumed heirarchy']], [[' SELECT TOP 1\n   tbl.Id --or count(*)\nFROM\n   grandchildtable tbl\n   INNER JOIN\n   anothertable ON ... = ...\nWHERE\n   tbl.xxx = ...\n']], ['SQL: Optimization problem, has rows?'], 2], [(1097873, 1), [['For either for 5 tables or for assumed heirarchy'], ['-10000']], [[' SELECT TOP 1 --or count(*)\n   tbl.Id\nFROM\n   grandchildtable tbl\nWHERE\n   tbl.xxx = ...\n   AND\n   EXISTS (SELECT *\n       FROM\n           anothertable T2\n       WHERE\n           tbl.key = T2.key /* AND T2 condition*/)\n-- or\nSELECT TOP 1 --or count(*)\n   tbl.Id\nFROM\n   mytable tbl\nWHERE\n   tbl.xxx = ...\n   AND\n   EXISTS (SELECT *\n       FROM\n           anothertable T2\n       WHERE\n           tbl.key = T2.key /* AND T2 condition*/)\n   AND\n   EXISTS (SELECT *\n       FROM\n           yetanothertable T3\n       WHERE\n           tbl.key = T3.key /* AND T3 condition*/)\n']], ['SQL: Optimization problem, has rows?'], 2], [(1097950, 0), [['I want all info about all products that have a product line other than 10.  I also want the ones that have a product line of 10 but also have an option of "option1" or "option2".  Here\'s how I express that:'], ["The <> means not equal to.  I say it's not equal to 10 or it's option 1 or it's option 2.  If a row matches any of this criteria, it's accepted."]], [[' select part_name, product_line, option \nfrom products \nwhere product_line <> 10 or option = "option1" or option = "option2";\n']], ['mysql query excluding a set of data but includindg certain items from the set if item contains value in a specific column'], 2], [(1097950, 1), [["The <> means not equal to.  I say it's not equal to 10 or it's option 1 or it's option 2.  If a row matches any of this criteria, it's accepted."], ['With a combination of ands, ors, and parentheses, you can be very specific about what you are selecting from the database.']], [[' select part_name, product_line, option\nfrom products\nwhere \n  product_line < 10 \n  or \n  (product_line = 10 and (option = "option1" or option = "option2"));\n']], ['mysql query excluding a set of data but includindg certain items from the set if item contains value in a specific column'], 2], [(1098928, 0), [['-10000'], ['or:']], [[' select distinct ItemName\nfrom Item I\ninner join GroupItem GI\n    on I.ItemKey = GI.ItemKey\nwhere GI.GroupKey in\n    (select GroupKey\n    from GroupItem\n    where ItemKey = @Param)\n-- @Param is the input parameter. Change for you\n-- DBMS\n']], ['Writing a query to get all records in a group based on an item in the group'], 2], [(1098928, 1), [['or:'], ['-10000']], [[' select distinct ItemName\nfrom GroupItem GI_MemberOf\ninner join GroupItem GI_Map\n    ON GI_Map.GroupKey = GI_MemberOf.GroupKey\ninner join Item I\n    on I.ItemKey = GI_Map.ItemKey\nwhere GI_MemberOf.ItemKey = @Param\n-- @Param is the input parameter. Change for you\n-- DBMS\n']], ['Writing a query to get all records in a group based on an item in the group'], 2], [(1102819, 0), [['If you index the column then MIN(a) and MAX(a) should be very fast as in this example where T1 has 50000 rows and is indexed on OBJECT_ID:'], ['The result is the same if you select the MAX instead of the MIN.  However, if you select the MIN and MAX in a single select statement the result is different:']], [[' SQL> select min(object_id) from t1;\n\nMIN(OBJECT_ID)\n--------------\n           100\n\n------------------------------------------------------------------------------------\n| Id  | Operation                  | Name  | Rows  | Bytes | Cost (%CPU)| Time     |\n------------------------------------------------------------------------------------\n|   0 | SELECT STATEMENT           |       |     1 |     5 |     2   (0)| 00:00:01 |\n|   1 |  SORT AGGREGATE            |       |     1 |     5 |            |          |\n|   2 |   INDEX FULL SCAN (MIN/MAX)| T1_ID | 53191 |   259K|     2   (0)| 00:00:01 |\n------------------------------------------------------------------------------------\n\nStatistics\n----------------------------------------------------------\n          1  recursive calls\n          0  db block gets\n          2  consistent gets\n          0  physical reads\n          0  redo size\n        419  bytes sent via SQL*Net to client\n        380  bytes received via SQL*Net from client\n          2  SQL*Net roundtrips to/from client\n          0  sorts (memory)\n          0  sorts (disk)\n          1  rows processed\n']], ['Oracle 10g: MIN/MAX column value estimation'], 2], [(1102819, 1), [['The result is the same if you select the MAX instead of the MIN.  However, if you select the MIN and MAX in a single select statement the result is different:'], ["This suggests that it may be better to get them separately, though I haven't conclusively proved that."]], [[' SQL> select min(object_id), max(object_id) from t1;\n\nMIN(OBJECT_ID) MAX(OBJECT_ID)\n-------------- --------------\n           100          72809\n\n\n-------------------------------------------------------------------------------\n| Id  | Operation             | Name  | Rows  | Bytes | Cost (%CPU)| Time     |\n-------------------------------------------------------------------------------\n|   0 | SELECT STATEMENT      |       |     1 |     5 |    34   (0)| 00:00:01 |\n|   1 |  SORT AGGREGATE       |       |     1 |     5 |            |          |\n|   2 |   INDEX FAST FULL SCAN| T1_ID | 53191 |   259K|    34   (0)| 00:00:01 |\n-------------------------------------------------------------------------------\n\n\nStatistics\n----------------------------------------------------------\n          0  recursive calls\n          0  db block gets\n        125  consistent gets\n          0  physical reads\n          0  redo size\n        486  bytes sent via SQL*Net to client\n        380  bytes received via SQL*Net from client\n          2  SQL*Net roundtrips to/from client\n          0  sorts (memory)\n          0  sorts (disk)\n          1  rows processed\n']], ['Oracle 10g: MIN/MAX column value estimation'], 2], [(1104174, 0), [['A simple way to do it:'], ["If you want to add more, you'll need to change both the  IN (2,3)  part and the  HAVING  part:"]], [[' SELECT name\nFROM aggregations\nWHERE element IN (2,3)\nGROUP BY name\nHAVING COUNT(element) = 2\n']], ['Select values in SQL that do not have other corresponding values except those that i search for'], 3], [(1104174, 1), [["If you want to add more, you'll need to change both the  IN (2,3)  part and the  HAVING  part:"], ["A more robust way would be to check for everything that isn't not in your set:"]], [[' SELECT name\nFROM aggregations\nWHERE element IN (2,3,5)\nGROUP BY name\nHAVING COUNT(element) = 3\n']], ['Select values in SQL that do not have other corresponding values except those that i search for'], 3], [(1104174, 2), [["A more robust way would be to check for everything that isn't not in your set:"], ["It's not very efficient, though."]], [[' SELECT name\nFROM aggregations\nWHERE NOT EXISTS (\n  SELECT DISTINCT a.element \n  FROM aggregations a\n  WHERE a.element NOT IN (2,3,5)\n  AND a.name = aggregations.name\n)\nGROUP BY name\nHAVING COUNT(element) = 3\n']], ['Select values in SQL that do not have other corresponding values except those that i search for'], 3], [(1104414, 0), [['If you have a  PRIMARY KEY  on  user_actions :'], ["If you don't:"]], [[' SELECT  u.*, ua.*\nFROM    users u\nLEFT JOIN\n        user_actions ua\nON      user_actions.id = \n        (\n        SELECT  TOP 1 id\n        FROM    user_actions uai\n        WHERE   uai.userid = u.userid\n                AND uai.action_date >= u.pay_date\n        ORDER BY\n                uai.action_date\n        )\n']], ['Joining to a table with multiple rows for the join item'], 2], [(1104414, 1), [["If you don't:"], ['Update:']], [[' WITH    j AS\n        (\n        SELECT  u.*, ua.*, ROW_NUMBER() OVER (PARTITION BY ua.userid ORDER BY ua.action_date) AS rn, ua.action_date\n        FROM    users u\n        LEFT JOIN\n                user_actions ua\n        ON      ua.userid = u.userid\n                AND ua.action_date >= u.pay_date\n        )\nSELECT  *\nFROM    j\nWHERE   rn = 1 or action_date is null\n']], ['Joining to a table with multiple rows for the join item'], 2], [(1105995, 0), [["You can use a Derived Column transform. I don't have VS open now, but you'd use something like:"], ['UPDATE : As suggested below, the  IIF  should be removed.']], [[' IIF(ISNULL(column)?"":column)\n']], ['SSIS Null Value Questions'], 2], [(1105995, 1), [['UPDATE : As suggested below, the  IIF  should be removed.'], ['-10000']], [[' ISNULL(column)?"":column\n']], ['SSIS Null Value Questions'], 2], [(1106045, 0), [['-10000'], ["I should add, that loops can indeed be very useful in SQL, so you may want to know how to do that as well. Here's one example:"]], [[' INSERT INTO tabl2 (name, id)\n   SELECT name, id FROM table1\n']], ['What to use in SQL instead of a "Foreach" loop'], 2], [(1106045, 1), [["I should add, that loops can indeed be very useful in SQL, so you may want to know how to do that as well. Here's one example:"], ['-10000']], [[' DECLARE @temp TABLE (ix int identity(1,1), id int, name varchar(100))\n\nINSERT INTO @temp SELECT id, name FROM table1\n\nDECLARE @i int, @max int\n\nSELECT\n   @i = 0\n   @max = MAX(ix)\nFROM\n   @temp\n\nWHILE @i < @max\nBEGIN\n   SET @i = @i + 1\n\n   -- LOGIC HERE...\n\nEND\n']], ['What to use in SQL instead of a "Foreach" loop'], 2], [(1106360, 0), [['Is there any problem that prevents you from doing:'], ['May be you prefered a Connect By Query but if the performance is not too bad I feel its quite simple. If the performance is important for you may be able to try something like.']], [[' SELECT t.ID,\n       NVL((SELECT MAX(t2.ID)\n              FROM Table t2\n             WHERE t.GROUP = t2.GROUP\n               AND t2.ID < t.ID), 0)      AS Parent_ID ,\n       t.Value\n  FROM TABLE t\n']], ['Best way in Oracle to go from this data to this result'], 2], [(1106360, 1), [['May be you prefered a Connect By Query but if the performance is not too bad I feel its quite simple. If the performance is important for you may be able to try something like.'], ['-10000']], [[' WITH aux AS( SELECT ID,\n                     Value,\n                     Group,\n                     dense_rack() ( partition by GROUP order by ID) AS num\n                FROM TABLE )\n\n         SELECT t1.ID,\n                t2.ID  AS parent,\n                t1.Value\n           FROM ( select * from aux ) t1  \n      LEFT JOIN ( select * from aux ) t2 \n             ON t1.group = t2.group \n            AND t1.ID    = t2.ID -1\n']], ['Best way in Oracle to go from this data to this result'], 2], [(1106419, 0), [['Added: \nAhh, I think I got it! Although I think the performance will be miserable. But this will work! For example, if you have the requirement to search for  1 AND 2 AND (3 OR 4)  then you would write:'], ["Added 2:  Here's another one, though the performance will likely be even worse:"]], [[' SELECT\n    *\nFROM\n    Persons A\nWHERE\n    EXISTS (Select * from PersonCriteria B WHERE A.PersonID=B.PersonID AND CriteriaID=1)\n    AND\n    EXISTS (Select * from PersonCriteria B WHERE A.PersonID=B.PersonID AND CriteriaID=2)\n    AND\n    (\n        EXISTS (Select * from PersonCriteria B WHERE A.PersonID=B.PersonID AND CriteriaID=3)\n        OR\n        EXISTS (Select * from PersonCriteria B WHERE A.PersonID=B.PersonID AND CriteriaID=4)\n    )\n']], ['Advanced (?) AND / OR query'], 3], [(1106419, 1), [["Added 2:  Here's another one, though the performance will likely be even worse:"], ['Added 3:  This is a variation of No. 2, but this might actually have a chance of a decent performance!']], [[' SELECT p.* FROM Person p\n    JOIN (select PersonID from PersonCriteria WHERE CriteriaID=1) c1 ON p.PersonID=c1.PersonID\n    JOIN (select PersonID from PersonCriteria WHERE CriteriaID=2) c2 ON p.PersonID=c2.PersonID\n    JOIN (select PersonID from PersonCriteria WHERE CriteriaID IN (3,4)) c3 ON p.PersonID=c3.PersonID\n']], ['Advanced (?) AND / OR query'], 3], [(1106419, 2), [['Added 3:  This is a variation of No. 2, but this might actually have a chance of a decent performance!'], ["If you add an index to PersonCriteria on columns (PersonID,CriteriaID) (exactly in this order!), then I think it's about as fast as you're going to get in any case."]], [[' SELECT p.* FROM\n    Person p\n    JOIN PersonCriteria c1 on (p.PersonID=c1.PersonID AND c1.CriteriaID=1)\n    JOIN PersonCriteria c2 on (p.PersonID=c2.PersonID AND c2.CriteriaID=2)\n    JOIN PersonCriteria c3 on (p.PersonID=c3.PersonID AND c3.CriteriaID IN (3,4))\n']], ['Advanced (?) AND / OR query'], 3], [(1107716, 0), [['If you are using SQL Server, you might look into using the SOUNDEX() function as in:'], ["Some odd examples ... so it seems you could catch plurals by always appending the plural text to both sides, since multiple 's's sound the same ... :-)"]], [[' ...\nwhere\n   SOUNDEX("searchterm") = SOUNDEX(searchvaluefield)\n']], ['Performant techniques for finding similar values in SQL?'], 2], [(1107716, 1), [["Some odd examples ... so it seems you could catch plurals by always appending the plural text to both sides, since multiple 's's sound the same ... :-)"], ['-10000']], [[" select soundex('Canine'), soundex('Canines')\ngo\n\n----- ----- \nC550  C552  \n\n1 Row(s) affected\n\n\nselect soundex('Canine'), soundex('Caynyn')\ngo\n\n----- ----- \nC550  C550  \n\n1 Row(s) affected\n\n\nselect soundex('Canines'), soundex('Caniness')\ngo\n\n----- ----- \nC552  C552  \n\n1 Row(s) affected\n"]], ['Performant techniques for finding similar values in SQL?'], 2], [(1109640, 0), [['Let us assume you have a simple problem such as this:'], ['If you create a simple join here, you would receive two records for Jane:']], [[' Person:  Jane\nPets: Cat, Dog\n']], ['How do I remove "duplicate" rows from a view?'], 4], [(1109640, 1), [['If you create a simple join here, you would receive two records for Jane:'], ['This is completely correct if the point of your view is to list all of the combinations of people and pets.  However, if your view was instead supposed to list people with pets, or list people and display one of their pets, you hit the problem you have now.  For this, you need a rule.']], [[' Jane|Cat\nJane|Dog\n']], ['How do I remove "duplicate" rows from a view?'], 4], [(1109640, 2), [['This is completely correct if the point of your view is to list all of the combinations of people and pets.  However, if your view was instead supposed to list people with pets, or list people and display one of their pets, you hit the problem you have now.  For this, you need a rule.'], ['This would yield a one record result:']], [[' SELECT Person.Name, Pets.Name\nFROM Person\n  LEFT JOIN Pets pets1 ON pets1.PersonID = Person.ID\nWHERE 0 = (SELECT COUNT(pets2.ID) \n             FROM Pets pets2\n             WHERE pets2.PersonID = pets1.PersonID\n                AND pets2.ID < pets1.ID);\n']], ['How do I remove "duplicate" rows from a view?'], 4], [(1109640, 3), [['This would yield a one record result:'], ["The rule you'll need to apply to your view will depend on the data in the columns you have, and which of the 'multiple' records should be displayed in the column.  However, that will wind up hiding some data, which may not be what you want.  For example, the above rule hides the fact that Jane has a Dog.  It makes it appear as if Jane only has a Cat, when this is not correct."]], [[' Jane|Cat\n']], ['How do I remove "duplicate" rows from a view?'], 4], [(1110349, 0), [['Just for clarification: a table can have at most one primary key. A primary key consists of one or more columns (from that table). If a primary key consists of two or more columns it is called a  composite primary key . It is defined as follows:'], ['The pair (QuestionID,MemberID) must then be unique for the table and neither value can be NULL. If you do a query like this:']], [[' CREATE TABLE voting (\n  QuestionID NUMERIC,\n  MemberID NUMERIC,\n  PRIMARY KEY (QuestionID, MemberID)\n);\n']], ['How can I define a composite primary key in SQL?'], 4], [(1110349, 1), [['The pair (QuestionID,MemberID) must then be unique for the table and neither value can be NULL. If you do a query like this:'], ["it will use the primary key's index. If however you do this:"]], [[' SELECT * FROM voting WHERE QuestionID = 7\n']], ['How can I define a composite primary key in SQL?'], 4], [(1110349, 2), [["it will use the primary key's index. If however you do this:"], ['If necessary, add an index on the other:']], [[' SELECT * FROM voting WHERE MemberID = 7\n']], ['How can I define a composite primary key in SQL?'], 4], [(1110349, 3), [['If necessary, add an index on the other:'], ['-10000']], [[' CREATE UNIQUE INDEX idx1 ON voting (MemberID, QuestionID);\n']], ['How can I define a composite primary key in SQL?'], 4], [(1111326, 0), [["Here's a great padding tutorial on  LessThanDot ."], ['This will result in:']], [[" DECLARE @Numbers TABLE\n(Num INT) \n\nINSERT @Numbers VALUES('1')\nINSERT @Numbers VALUES('12')\nINSERT @Numbers VALUES('123')\nINSERT @Numbers VALUES('1234')\nINSERT @Numbers VALUES('12345')\nINSERT @Numbers VALUES('123456')\nINSERT @Numbers VALUES('1234567')\nINSERT @Numbers VALUES('12345678')   \n\nSELECT RIGHT(REPLICATE('0', 8) + CONVERT(NVARCHAR(8),Num),8) FROM @Numbers\n"]], ['How do you pad a NVARCHAR field with zeros using T-SQL in a SQL Server 2005 DB?'], 2], [(1111326, 1), [['This will result in:'], ['-10000']], [[' 00000001\n00000012\n00000123\n00001234\n00012345\n00123456\n01234567\n12345678\n']], ['How do you pad a NVARCHAR field with zeros using T-SQL in a SQL Server 2005 DB?'], 2], [(1111809, 0), [['The Datafiles:'], ['The Database Control Files:']], [[' select name from v$datafile\n']], ['Oracle 11g Cold Restore?'], 3], [(1111809, 1), [['The Database Control Files:'], ['The Online Redo Logs:']], [[' select name from v$controlfile\n']], ['Oracle 11g Cold Restore?'], 3], [(1111809, 2), [['The Online Redo Logs:'], ["You'll also want to backup your init.ora or spfile"]], [[' select member from v$logfile\n']], ['Oracle 11g Cold Restore?'], 3], [(1114592, 0), [['The following will find you the start of the last month:'], ['You would then find the start of this month, using the following, minus one.']], [[" -- Start of last month \nSELECT CAST('01 '+ RIGHT(CONVERT(CHAR(11),DATEADD(MONTH,-1,GETDATE()),113),8) AS datetime)\n"]], ['GETDATE last month'], 2], [(1114592, 1), [['You would then find the start of this month, using the following, minus one.'], ["When I have to work with dates in SQL Server I often reference  Robyn Page's SQL Server DATE/TIME Workbench . The workbench (tutorial) is well laid out and contains just about everything I have ever needed when working with dates on SQL Server."]], [[" -- Start of the month \nSELECT CAST('01 '+ RIGHT(CONVERT(CHAR(11),GETDATE(),113),8) AS datetime) \n"]], ['GETDATE last month'], 2], [(1115058, 0), [["It's a bit dated, so you might want to grab a  book on the subject .  But, here's a ton of  access resources  and some  tutorials and examples  as well.  But, basically ..."], ["Per comment:  Take a look at the  recordset class .  It contains a collection called Fields that are the columns that are returned from your query.  Without knowing your schema, it's hard to say, but something like ..."]], [[" Dim dbs As Database\nDim rs As Recordset\nDim strSQL As String\nSet dbs = CurrentDb\n\nstrSQL = 'your query here\n\nSet rs = dbs.OpenRecordset(strSQL)\n\nIf Not (rs.EOF And rs.BOF) Then\n  rs.MoveFirst\n  'get results using rs.Fields()\nElse\n\n'Use results\n"]], ['How do I get the data from an SQL query in microsoft Access VBA?'], 2], [(1115058, 1), [["Per comment:  Take a look at the  recordset class .  It contains a collection called Fields that are the columns that are returned from your query.  Without knowing your schema, it's hard to say, but something like ..."], ['Like I said, your best bet is to grab a book on this subject, they have tons of examples.']], [[' rs.MoveFirst\nDo While Not rs.EOF\n   \'do something like rs("SomeFieldName") \n   rs.MoveNext\nLoop\n']], ['How do I get the data from an SQL query in microsoft Access VBA?'], 2], [(1117137, 0), [['There most likely is a more elegant solution, but this should do the trick:'], ['If I understand your comment to Adam Paynter, for input of:']], [[" SELECT * \nFROM payment_line pl \nWHERE LENGTH(TRIM(TRANSLATE(pl.check_num, '0123456789',' '))) IS NULL \n   AND TRIM(TRANSLATE(pl.check_num, '0123456789','0123456789')) > 12345;\n"]], ['Cheque Number problem'], 5], [(1117137, 1), [['If I understand your comment to Adam Paynter, for input of:'], ['and you used  1A117  as your comparison the resulting set would be: ']], [[' 0A132 \n1A117 \n2A123 \n12D24 \n02134 \n11111 \n12345 \n21334 \n']], ['Cheque Number problem'], 5], [(1117137, 2), [['and you used  1A117  as your comparison the resulting set would be: '], ['Can you confirm that both  02134  and  11111  should be in this result set?  They dont seem to meet the requirements of  >  a value like  1A117 .  If, however, that was a typo, you can actually run a simple string comparison to get this set:']], [[' 2A123 \n12D24 \n02134 \n11111 \n12345 \n21334\n']], ['Cheque Number problem'], 5], [(1117137, 3), [['Can you confirm that both  02134  and  11111  should be in this result set?  They dont seem to meet the requirements of  >  a value like  1A117 .  If, however, that was a typo, you can actually run a simple string comparison to get this set:'], ['OK, I think I see where you are going with this.  You are looking to get the rows in the db that have been entered after the input row.  If you look at my formatted list above, you will see that your result set is everything below your input string.  So, with that in mind, i submit for your approval the following:']], [[" SELECT * \nFROM payment_line pl\nWHERE pl.check_num > '1A117';\n"]], ['Cheque Number problem'], 5], [(1117137, 4), [['OK, I think I see where you are going with this.  You are looking to get the rows in the db that have been entered after the input row.  If you look at my formatted list above, you will see that your result set is everything below your input string.  So, with that in mind, i submit for your approval the following:'], ['-10000']], [[" SELECT * \nFROM payment_line  \nWHERE rowid > (select rowid from payment_line where check_num ='1A117');\n"]], ['Cheque Number problem'], 5], [(1118894, 0), [['Something like this:'], ['ADDITIONAL:  And to taking into account the tie-breaker situation:']], [[' SELECT TOP 1 COUNT(*), myField\nFROM myTable\nGROUP BY (myField)\nORDER BY COUNT(*) ASC\n']], ['SQL: Retrieve value from a column that occurred least number of times'], 2], [(1118894, 1), [['ADDITIONAL:  And to taking into account the tie-breaker situation:'], ['-10000']], [[' SELECT TOP 1 COUNT(*), myField\nFROM myTable\nGROUP BY (myField)\nORDER BY COUNT(*) ASC, myField ASC\n']], ['SQL: Retrieve value from a column that occurred least number of times'], 2], [(1119058, 0), [['SQL:2003  defines concept of window functions, one of which:'], ['SQL:2008  offers another clause to do this:']], [[' SELECT  *\nFROM    (\n        SELECT  *, ROW_NUMBER() OVER (ORDER BY col1, col2, col3) AS rn\n        FROM    mytable\n        ) q\nWHERE   rn = 1\n']], ['Retrieve maximal / minimal record'], 2], [(1119058, 1), [['SQL:2008  offers another clause to do this:'], [', but as for now, this exact syntax is supported by  DB2  only ( AFAIK ).']], [[' SELECT  *\nFROM    mytable\nORDER BY\n        col1, col2, col3\nFETCH FIRST 1 ROW ONLY\n']], ['Retrieve maximal / minimal record'], 2], [(1119310, 0), [['-10000'], ['The following code:']], [[" select cast('<name>Spolsky &amp; Atwood</name>' as xml)\n"]], ['Use ampersand in CAST in SQL'], 3], [(1119310, 1), [['The following code:'], ['will output the following:']], [[' using System.Xml.Serialization;\n\nnamespace xml\n{\n    public class MyData\n    {\n        public string name = "Spolsky & Atwood";\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            new XmlSerializer(typeof(MyData)).Serialize(System.Console.Out, new MyData());\n        }\n    }\n}\n']], ['Use ampersand in CAST in SQL'], 3], [(1119310, 2), [['will output the following:'], [', with an  &amp;  instead of  & .']], [[' <?xml version="1.0" encoding="utf-8"?>\n<MyData\n xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n xmlns:xsd="http://www.w3.org/2001/XMLSchema">\n  <name>Spolsky &amp; Atwood</name>\n</MyData>\n']], ['Use ampersand in CAST in SQL'], 3], [(1119312, 0), [['I think your statement should look like:'], ['Also try calling:']], [[' SELECT id, \n   client,\n   project,\n   task,\n   description, \n   time,\n   date  \n  INTO OUTFILE \'/path/to/file.csv\'\n  FIELDS TERMINATED BY \',\' OPTIONALLY ENCLOSED BY \'"\'\n  LINES TERMINATED BY \'\\n\'\n  FROM ts\n']], ['MySQL export into outfile : CSV escaping chars'], 2], [(1119312, 1), [['Also try calling:'], ['before your outfile select, that might help getting the character encodings inline (all UTF8)']], [[' SET NAMES utf8;\n']], ['MySQL export into outfile : CSV escaping chars'], 2], [(1119710, 0), [['With to_char:'], ['In your example you can use something like:']], [[" select to_char(sysdate, 'YYYY') from dual;\n"]], ['How do I get the current year using SQL on Oracle?'], 3], [(1119710, 1), [['In your example you can use something like:'], ['The comparision values are exactly what you request:']], [[" BETWEEN trunc(sysdate, 'YEAR') \n    AND add_months(trunc(sysdate, 'YEAR'), 12)-1/24/60/60;\n"]], ['How do I get the current year using SQL on Oracle?'], 3], [(1119710, 2), [['The comparision values are exactly what you request:'], ['-10000']], [[" select trunc(sysdate, 'YEAR') begin_year\n     , add_months(trunc(sysdate, 'YEAR'), 12)-1/24/60/60 last_second_year\nfrom dual;\n\nBEGIN_YEAR  LAST_SECOND_YEAR\n----------- ----------------\n01/01/2009  31/12/2009\n"]], ['How do I get the current year using SQL on Oracle?'], 3], [(1119834, 0), [['-10000'], ['-10000']], [["Detach the Database: use master\ngo \nsp_detach_db 'mydb'\n"]], ['What is the proper way to move a database from one drive to another in SQL Server 2005?'], 3], [(1119834, 1), [['-10000'], ['-10000']], [["Move the Database files (Xcopy through xp_cmdshell shown): DECLARE @SRCData nvarchar(1000)\nSET @SRCData = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL12.MSSQLSERVER\\MSSQL\\DATA\\mydb.mdf';\nDECLARE @SRCLog nvarchar(1000)\nSET @SRCLog = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL12.MSSQLSERVER\\MSSQL\\DATA\\mydb_log.ldf';\nDECLARE @FILEPATH nvarchar(1000);\nDECLARE @LOGPATH nvarchar(1000);\nSET @FILEPATH = N'xcopy /Y ' + @SRCData + N' D:\\Data';\nSET @LOGPATH = N'xcopy /Y ' + @SRCLog + N' E:\\Log';\nexec xp_cmdshell @FILEPATH;\nexec xp_cmdshell @LOGPATH;\n"]], ['What is the proper way to move a database from one drive to another in SQL Server 2005?'], 3], [(1119834, 2), [['-10000'], ["There's more detail at this  Microsoft KB article ."]], [["ReAttach Database: sp_attach_db 'mydb', 'D:\\Data\\mydb.mdf', 'E:\\Log\\mydb_log.ldf'\n"]], ['What is the proper way to move a database from one drive to another in SQL Server 2005?'], 3], [(1119998, 0), [['You mean like this? This works in SQL Server.'], ['If you want this to be repeatable:']], [[" UPDATE  [table]\nSET     [image] = [image] + '.jpg'\nWHERE   ISNULL([image], '') <> ''\n"]], ['How does one modify all DB column data based on current data?'], 2], [(1119998, 1), [['If you want this to be repeatable:'], ['-10000']], [[" UPDATE  [table]\nSET     [image] = [image] + '.jpg'\nWHERE   ISNULL([image], '') <> ''\nAND     [image] NOT LIKE '%.jpg'\n"]], ['How does one modify all DB column data based on current data?'], 2], [(1122153, 0), [['To free this space you can try to:'], ['or']], [[' ALTER TABLESPACE xxx COALESCE;\n']], ['Oracle 10 g - Unable to free up space in tablespace'], 2], [(1122153, 1), [['or'], ['The first one, will  "combine all contiguous free extents into larger contiguous extents" . Depending on your configuracion, this can be executed by Oracle automatically. Also, may be it does not free to much because the location of data relative to the highwatermark on segment.']], [[' ALTER TABLE xxx MOVE;\n']], ['Oracle 10 g - Unable to free up space in tablespace'], 2], [(1123060, 0), [['If the constraints are default constraints, you can use  sys.default_constraints  to find it:'], ['If you are looking for other constraints as well (check, unique, foreign key, default, primary key), you can use  sysconstraints :']], [[' SELECT OBJECT_NAME(parent_object_id) AS TableName, name AS ConstraintName\nFROM sys.default_constraints ORDER BY TableName, ConstraintName\n']], ['How do you drop a default value or similar constraint in T-SQL?'], 2], [(1123060, 1), [['If you are looking for other constraints as well (check, unique, foreign key, default, primary key), you can use  sysconstraints :'], ['You do not say which version of SQL Server you are using. The above work on both SQL 2005 and SQL 2008.']], [[' SELECT OBJECT_NAME(id) AS TableName, OBJECT_NAME(constid) AS ConstraintName\nFROM sysconstraints ORDER BY TableName, ConstraintName\n']], ['How do you drop a default value or similar constraint in T-SQL?'], 2], [(1123644, 0), [['If you use jquery it can be something like this.'], ["Edit:  No, your database needn't to have sorted choices. It is your server function, that should be doing all the sorting. Use, "]], [[' $(function(){  //runs on page load\n\n$.ajax({\n  type: "POST",\n  url: "/searchlist/", //server function that returns the search list\n  data: \'\',\n  dataType: "json",\n  success: function(json){\n    search_choices = json.list; // search option list\n    $("input#searchbox").autocomplete(search_choices, {\n                               max: 4,\n                               scroll: false,\n                               autoFill: true,\n                               multiple: true,\n                               matchContains: true,\n                               multipleSeparator: " ",\n                               width: 180\n                             });\n\n  }\n});\n\n});\n']], ['AJAX Autocomplete Query from a MYSQL Table'], 2], [(1123644, 1), [["Edit:  No, your database needn't to have sorted choices. It is your server function, that should be doing all the sorting. Use, "], ['and your server function will get search term (keyword user types in search-box), as get request. Filter your database there, and this is the place where you can hook related words along with the results. Just make a list of everything you want to show as suggestion, and return in serialize json format and let  autocomplete   to take care of matching and sorting the data.']], [[' autocomplete( url_to_server_function, options)\n']], ['AJAX Autocomplete Query from a MYSQL Table'], 2], [(1124468, 0), [['In  MySQL :'], ['In  SQL Server :']], [[' SELECT  s.*,\n        GROUP_CONCAT(detail)\nFROM    sales s\nJOIN    details d\nON      d.sale_id = s.id\nGROUP BY\n        s.id\n']], ['SQL - Concatanation of all values in a foreign table to use in the primary table'], 4], [(1124468, 1), [['In  SQL Server :'], ['In  PostgreSQL :']], [[" SELECT  s.*,\n        (\n        SELECT  CASE WHEN ROW_NUMBER() OVER (ORDER BY sale_id) = 1 THEN ', ' ELSE '' END + detail\n        FROM    details d\n        WHERE   d.sale_id = s.id\n        FOR XML PATH('')\n        )\nFROM    sales s\n"]], ['SQL - Concatanation of all values in a foreign table to use in the primary table'], 4], [(1124468, 2), [['In  PostgreSQL :'], ['In  Oracle :']], [[" SELECT  s.*,\n        ARRAY_TO_STRING (\n        ARRAY\n        (\n        SELECT  detail\n        FROM    details d\n        WHERE   d.sale_id = s.id\n        ), ', ')\n        )\nFROM    sales s\n"]], ['SQL - Concatanation of all values in a foreign table to use in the primary table'], 4], [(1124468, 3), [['In  Oracle :'], ['-10000']], [[" WITH q AS (\n        SELECT  d.sale_id, d.detail,\n                ROW_NUMBER() OVER (PARTITION BY d.sale_id ORDER BY d.detail) AS rn\n        FROM    sales s\n        JOIN    details d\n        ON      d.sale_id = s.id\n        )\nSELECT  *\nFROM    (\n        SELECT  *\n        FROM    q\n        MODEL\n        PARTITION BY\n                (sale_id)\n        DIMENSION BY\n                (rn)\n        MEASURES\n                (detail, detail AS group_concat, 0 AS mark)\n        RULES UPDATE (\n                group_concat[rn > 1] =  group_concat[CV() - 1] || ', ' || detail[CV()],\n                mark[ANY] = PRESENTV(mark[CV() + 1], 0, 1)\n                )\n        )\nWHERE   mark = 1\nORDER BY\n        id\n"]], ['SQL - Concatanation of all values in a foreign table to use in the primary table'], 4], [(1124813, 0), [['In  MySQL , the first one is faster:'], ['Like this query:']], [[' SELECT  *\nFROM    parents p\nINNER JOIN\n        children c\nON      c.pid = p.id\nWHERE   p.x = 2\n']], ['simple sql query'], 3], [(1124813, 1), [['Like this query:'], ['is instant, while this one (which is semantically identical):']], [[' SELECT  *\nFROM    mytable\nLIMIT 1\n']], ['simple sql query'], 3], [(1124813, 2), [['is instant, while this one (which is semantically identical):'], ['will first select all values from  mytable , buffer them somewhere and then fetch the first record.']], [[' SELECT  *\nFROM    (\n        SELECT  *\n        FROM    mytable\n        )\nLIMIT 1\n']], ['simple sql query'], 3], [(1125066, 0), [['To add rows to a table in VBA code you can use a DAO Recordset like this:'], ['Or to run an Append Query in VBA build the SQL Statement in to a string and execute the statement like this:']], [[' Dim rs As DAO.Recordset\nSet rs= CurrentDb.OpenRecordset("TableName", dbOpenDynaset)\n\nrs.AddNew\nrs![ColumnName1] ="Some Value"\nrs![ColumnName2] ="Some Value"\nrs.Update\nrs.Close\n']], ['VBa insert shortcut'], 2], [(1125066, 1), [['Or to run an Append Query in VBA build the SQL Statement in to a string and execute the statement like this:'], ['-10000']], [[' CurrentDb.Execute strSQLText, dbFailOnError\n']], ['VBa insert shortcut'], 2], [(1125241, 0), [['No string constants, but you can do:'], ['For example:']], [[" select translate\n      ( mystring\n      , '0'||translate (mystring, 'x0123456789', 'x')\n      , '0'\n      )\nfrom mytable;\n"]], ['Oracle Builtin String Character Classes'], 4], [(1125241, 1), [['For example:'], ['If you want to do this often you can wrap it up as a function:']], [[" select translate\n      ( mystring\n      , '0'||translate (mystring, 'x0123456789', 'x')\n      , '0'\n      )\nfrom\n( select 'fdkhsd1237ehjsdf7623A@L:P' as mystring from dual);\n\nTRANSLAT\n--------\n12377623\n"]], ['Oracle Builtin String Character Classes'], 4], [(1125241, 2), [['If you want to do this often you can wrap it up as a function:'], ['Then:']], [[" create function only_digits (mystring varchar2) return varchar2\nis\nbegin\n   return\n      translate\n         ( mystring\n         , '0'||translate (mystring, 'x0123456789', 'x')\n         , '0'\n         );\nend;\n/\n"]], ['Oracle Builtin String Character Classes'], 4], [(1125241, 3), [['Then:'], ['-10000']], [[" SQL> select only_digits ('fdkhsd1237ehjsdf7623A@L:P') from dual;\n\nONLY_DIGITS('FDKHSD1237EHJSDF7623A@L:P')\n-----------------------------------------------------------------\n12377623\n"]], ['Oracle Builtin String Character Classes'], 4], [(1127228, 0), [["I don't know if this can work on Postgress, but here is a SQL Server solution:"], ['-- you can only insert players in complete pairs']], [[' CREATE TABLE dbo.Teams(TeamID INT NOT NULL PRIMARY KEY);\nGO\nCREATE TABLE dbo.Players(PlayerID INT NOT NULL PRIMARY KEY,\n  TeamID INT NOT NULL FOREIGN KEY REFERENCES dbo.Teams(TeamID),\n  NumberInTeam INT NOT NULL CHECK(NumberInTeam IN (1,2)),\n  TeamMateID INT NOT NULL,\n  TeamMatesNumberInTeam INT NOT NULL,\n-- if NumberInTeam=1 then TeamMatesNumberInTeam must be 2\n-- and vise versa\n  CHECK(NumberInTeam+TeamMatesNumberInTeam = 3), \n  UNIQUE(TeamID, NumberInTeam),\n  UNIQUE(PlayerID, TeamID, NumberInTeam),\n  FOREIGN KEY(TeamMateID, TeamID, TeamMatesNumberInTeam)\n    REFERENCES dbo.Players(PlayerID, TeamID, NumberInTeam)\n);\n\nINSERT INTO dbo.Teams(TeamID) SELECT 1 UNION ALL SELECT 2;\nGO\n']], ['Database design for constraint enforcing pairing'], 2], [(1127228, 1), [['-- you can only insert players in complete pairs'], ['You can try inserting a single player, or deleting a player from a team, or inserting more than two players per team - all will fail due to a complete set of constraints.']], [[' INSERT INTO dbo.Players(PlayerID, TeamID, NumberInTeam, TeamMateID, TeamMatesNumberInTeam)\nSELECT 1,1,1,2,2 UNION ALL\nSELECT 2,1,2,1,1;\n']], ['Database design for constraint enforcing pairing'], 2], [(1131409, 0), [['-10000'], ["Note that if you have an index on  updated_at , you may rewrite this query a little so that it's more efficient:"]], [[' SELECT  *\nFROM    (\n        SELECT  EXTRACT(WEEK FROM j.updated_at) as "week",  count(j.id)  \n        FROM    jobs    \n        WHERE   EXTRACT(YEAR FROM j.updated_at)=2009   \n        GROUP BY\n                EXTRACT(WEEK FROM j.updated_at)  \n        ORDER BY week DESC\n        LIMIT 12\n        ) q\nORDER BY\n        week ASC\n']], ['SQL How to Limit BOTTOM x rows (PostgreSQL)'], 2], [(1131409, 1), [["Note that if you have an index on  updated_at , you may rewrite this query a little so that it's more efficient:"], ['-10000']], [[" SELECT  week,\n        (\n        SELECT  COUNT(j.id)\n        FROM    jobs\n        WHERE   updated_at >= start_week\n                AND updated_at < end_week\n        ) \nFROM    (\n        SELECT  week,\n               '04.01.2009'::DATE - EXTRACT(DOW FROM '04.01.2009'::DATE)::INTEGER + week * 7\n               '04.01.2009'::DATE - EXTRACT(DOW FROM '04.01.2009'::DATE)::INTEGER + week * 7 + 7\n        FROM   generate_series(42, 53) week\n        ) q\n"]], ['SQL How to Limit BOTTOM x rows (PostgreSQL)'], 2], [(1131678, 0), [["First, you'll need to split that string up.  Here's a workable split function:"], ["Then you'll need to join the values back to your countries table, and re-join them.  This will get you most of the way:"]], [[" Create Function [dbo].[split]\n    (@input   varChar(8000)        -- List of delimited items\n    ,@delimit varChar(8000) = ',') -- delimiter that separates items\nReturns @List Table ([item] varChar(8000)) As\nBegin\n\nDeclare @item VarChar(8000);\n\nwhile charIndex(@delimit, @input, 0) <> 0 Begin\n\n    Select\n        @item  = rTrim(lTrim(subString(@input, 1, charIndex(@delimit, @input, 0) - 1))),\n        @input = rTrim(lTrim(subString(@input, charIndex(@delimit, @input, 0) + Len(@delimit), Len(@input))));\n\n    If Len(@item) > 0 Insert Into @List Select @item\n\nEnd\n\nIf Len(@input) > 0 Insert Into @List Select @input\n\nReturn;\n\nEnd\n"]], ['SQL select joined string for set of ids'], 3], [(1131678, 1), [["Then you'll need to join the values back to your countries table, and re-join them.  This will get you most of the way:"], ['However, that leaves a trailing comma.  You may want to remove that on some other layer, but just in case you MUST do it in SQL, this should work:']], [[" Select ID\n      ,[Name] as [User]\n      ,(\n        Select [country] + ', '\n        From [Countries]\n        Where [ID] In (\n            Select Cast([item] As Integer)\n            From dbo.split(U.Countries, ',')\n            Where IsNumeric(item) = 1)\n        Order By [country]\n        For XML Path('')) As [CountriesByName]\nFrom [Users] As U\n"]], ['SQL select joined string for set of ids'], 3], [(1131678, 2), [['However, that leaves a trailing comma.  You may want to remove that on some other layer, but just in case you MUST do it in SQL, this should work:'], ['-10000']], [[" Select ID\n      ,[User]\n      ,Left([CountriesByName], Len([CountriesByName]) - 1) As [CountriesByName]\nFrom (\n    Select ID\n          ,[Name] as [User]\n          ,(\n            Select [country] + ', '\n            From [Countries]\n            Where [ID] In (\n                Select Cast([item] As Integer)\n                From dbo.split(U.Countries, ',')\n                Where IsNumeric(item) = 1)\n            Order By [country]\n            For XML Path('')) As [CountriesByName]\n    From [Users] As U) As [Results]\n"]], ['SQL select joined string for set of ids'], 3], [(1131907, 0), [['try this:'], ['EDIT  same answer as above, but here is complete code to test it out...']], [[" DECLARE @x varchar(8000)\n\nSELECT TOP 4\n    @x=ISNULL(@x+', ','')+carModels\n    FROM dbo.Models\n\nSELECT @x AS carModels\n"]], ['SQL Server 2008 Rows to 1 CSV field'], 3], [(1131907, 1), [['EDIT  same answer as above, but here is complete code to test it out...'], ['output:']], [[" declare @Models table (RowID int not null primary key identity(1,1), carModels varchar(20))\ninsert into @Models values ('Jeep')\ninsert into @Models values ('Honda')\ninsert into @Models values ('Mitsubishi')\ninsert into @Models values ('Ford')\ninsert into @Models values ('Mazda')\n\nDECLARE @x varchar(8000)\nSET @x=null\nSELECT TOP 4\n    @x=ISNULL(@x+', ','')+carModels\n    FROM @Models\n\nSELECT @x AS carModels\n"]], ['SQL Server 2008 Rows to 1 CSV field'], 3], [(1131907, 2), [['output:'], ['-10000']], [[' carModels\n----------------------------------\nJeep, Honda, Mitsubishi, Ford\n\n(1 row(s) affected)\n']], ['SQL Server 2008 Rows to 1 CSV field'], 3], [(1133584, 0), [["Here's another approach, if ANSI  row_number()  is supported:"], ["Rows numbered 1 will be nondeterministically chosen among rows on the last active date of the month, so you don't need distinct. If you want information out of the table for all rows on these dates, use  rank()  over days instead of  row_number()  over coll_date values, so a value of 1 appears for any row on the last active date of the month, and select the additional columns you need:"]], [[" with RevDayRanked(itemDate,rn) as (\n  select\n    cast(coll_date as date),\n    row_number() over (\n      partition by datediff(month,coll_date,'2000-01-01') -- rewrite datediff as needed for your platform\n      order by coll_date desc\n    )\n  from super_table\n)\n  select itemDate\n  from RevDayRanked\n  where rn = 1;\n"]], ['Last day of the month with a twist in SQLPLUS'], 3], [(1133584, 1), [["Rows numbered 1 will be nondeterministically chosen among rows on the last active date of the month, so you don't need distinct. If you want information out of the table for all rows on these dates, use  rank()  over days instead of  row_number()  over coll_date values, so a value of 1 appears for any row on the last active date of the month, and select the additional columns you need:"], ["If  row_number()  and  rank()  aren't supported, another approach is this (for the second query above). Select all rows from your table for which there's no row in the table from a later day in the same month."]], [[" with RevDayRanked(cust_id, server_name, coll_date, rk) as (\n  select\n    cust_id, server_name, coll_date,\n    rank() over (\n      partition by datediff(month,coll_date,'2000-01-01')\n      order by cast(coll_date as date) desc\n    )\n  from super_table\n)\n  select cust_id, server_name, coll_date\n  from RevDayRanked\n  where rk = 1;\n"]], ['Last day of the month with a twist in SQLPLUS'], 3], [(1133584, 2), [["If  row_number()  and  rank()  aren't supported, another approach is this (for the second query above). Select all rows from your table for which there's no row in the table from a later day in the same month."], ["If you have to do this kind of thing a lot, see if you can create an index over computed columns that hold  cast(coll_date as date)  and a month indicator like  datediff(month,'2001-01-01',coll_date) . That'll make more of the predicates SARGs."]], [[' select\n  cust_id, server_name, coll_date\nfrom super_table as ST1\nwhere not exists (\n  select *\n  from super_table as ST2\n  where datediff(month,ST1.coll_date,ST2.coll_date) = 0\n  and cast(ST2.coll_date as date) > cast(ST1.coll_date as date)\n)\n']], ['Last day of the month with a twist in SQLPLUS'], 3], [(1133621, 0), [['-10000'], ['or']], [[" \nSELECT T2.*\nFROM T1, T2\nWHERE T1.ColumnB LIKE T2.ColumnA + '%'\n"]], ['Query related data based on "like" statement'], 2], [(1133621, 1), [['or'], ['Probably not going to run very fast.']], [[" \nSELECT T2.*\nFROM T1\nINNER JOIN T2 ON T1.ColumnB LIKE T2.ColumnA + '%'\n"]], ['Query related data based on "like" statement'], 2], [(1135997, 0), [['Ah. I see what you may want to do. Use a subselect.'], ['Another way, that Guffa is on to, is this:']], [[' select foo.*, (select count(*) from bar where bar.foo_id=foo.id) from foo;\n']], ['Why no "SELECT foo.* ... GROUP BY foo.id" in Postgres?'], 2], [(1135997, 1), [['Another way, that Guffa is on to, is this:'], ['This will be two queries though (one subquery, which is run just once), which can matter, but probably won\'t. If you can just do without "foo.*" you can use the second version that explicitly groups by all columns.']], [[' SELECT foo.*, COALESCE(sub.cnt, 0)\nFROM foo\nLEFT OUTER JOIN (\n  SELECT foo_id, count(*) AS cnt\n  FROM bar\n  GROUP BY foo_id) sub\nON sub.foo_id = foo.id;\n']], ['Why no "SELECT foo.* ... GROUP BY foo.id" in Postgres?'], 2], [(1136516, 0), [['You can keep your items in a linked list:'], ['and query like this:']], [[' id  parent  title   notes\n\n1   0       Title 1 Note 1\n2   1       Title 2 Note 2\n3   2       Title 3 Note 3\n4   3       Title 4 Note 4\n']], ['MySQL method to maintain sequentially numbered "top n" list'], 2], [(1136516, 1), [['and query like this:'], ['Moving an item (or even a block of items) in this design takes but three  UPDATE  operations (you change the parents of the item you are moving, of the item you are moving to and of the item you are moving from).']], [[' SELECT  lv.*\nFROM    (\n        SELECT  @r AS _parent,\n                @r := (\n                SELECT  id\n                FROM    t_list\n                WHERE   parent = _parent\n                ) AS id\n        FROM    (\n                SELECT  @r := 0\n                ) vars,\n                t_list\n        ) li\nJOIN    t_list lv\nON      lv.id = li.id\n']], ['MySQL method to maintain sequentially numbered "top n" list'], 2], [(1136930, 0), [['Like this:'], ['Or, alternately, you can rearrange your last key like this:']], [[' ALTER TABLE `log` ADD INDEX (`type`, `play_date`);\n']], ['MySQL 1 millon row query speed'], 2], [(1136930, 1), [['Or, alternately, you can rearrange your last key like this:'], ['so MySQL can use its left part as a key.']], [[' KEY `type_2` (`type`,`play_date`,`timestamp`)\n']], ['MySQL 1 millon row query speed'], 2], [(1137218, 0), [['from  here , try this:'], ['try this code:']], [[' DECLARE @Random1 INT;\nDECLARE @Random2 INT;\nDECLARE @Random3 INT;\nDECLARE @Random4 INT;\nDECLARE @Random5 INT;\nDECLARE @Upper INT;\nDECLARE @Lower INT\n\n---- This will create a random number between 1 and count() of table\nSET @Lower = 1 ---- The lowest random number\nSELECT @Upper= COUNT(*) FROM Tbl_Organisations ---- The highest random number\nSELECT @Random1 = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)\nSELECT @Random2 = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)\nSELECT @Random3 = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)\nSELECT @Random4 = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)\nSELECT @Random5 = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)\n\nINSERT INTO Tbl_Campaigns (...., organisation_1,organisation_2,organisation_3...)\nSELECT\n    ...., t1.organisation_name, t2.organisation_name,t3.organisation_name...\n    FROM Tbl_Organisations            t1\n        INNER JOIN  Tbl_Organisations t2 ON t2.key=@Random2\n        INNER JOIN  Tbl_Organisations t3 ON t3.key=@Random3\n        INNER JOIN  Tbl_Organisations t4 ON t4.key=@Random4\n        INNER JOIN  Tbl_Organisations t5 ON t5.key=@Random5\n    WHERE t1.key=@Random1\n']], ['Random Records & SQL2005 Stored Procedure Insert'], 3], [(1137218, 1), [['try this code:'], ['here is the output']], [[' --set up tables\nDECLARE @Tbl_Organisations table (O_KeyID int not null primary key identity(1,1), organisation_name varchar(20) not null)\nDECLARE @Tbl_Campaigns table (C_KeyID int not null primary key identity(1,1), Cname varchar(10), createdate datetime, organisation_1 int, organisation_2 int, organisation_3 int, organisation_4 int, organisation_5 int)\n\n--set up data\nINSERT INTO @Tbl_Organisations VALUES (\'one\')\nINSERT INTO @Tbl_Organisations VALUES (\'two\')\nINSERT INTO @Tbl_Organisations VALUES (\'three\')\nINSERT INTO @Tbl_Organisations VALUES (\'pine\')\nINSERT INTO @Tbl_Organisations VALUES (\'oak\')\nINSERT INTO @Tbl_Organisations VALUES (\'maple\')\nINSERT INTO @Tbl_Organisations VALUES (\'car\')\nINSERT INTO @Tbl_Organisations VALUES (\'train\')\nINSERT INTO @Tbl_Organisations VALUES (\'boat\')\nINSERT INTO @Tbl_Organisations VALUES (\'dog\')\nINSERT INTO @Tbl_Organisations VALUES (\'cat\')\nINSERT INTO @Tbl_Organisations VALUES (\'horse\')\nINSERT INTO @Tbl_Organisations VALUES (\'square\')\nINSERT INTO @Tbl_Organisations VALUES (\'triangle\')\nINSERT INTO @Tbl_Organisations VALUES (\'circle\')\n\n--temp areas to hold the 5 random numbers\nDECLARE @Random1 INT;\nDECLARE @Random2 INT;\nDECLARE @Random3 INT;\nDECLARE @Random4 INT;\nDECLARE @Random5 INT;\n\n--temp areas to hold the ranges to generate random numbers within\nDECLARE @Upper INT;\nDECLARE @Lower INT\nDECLARE @range int\n\n--get values to determine ranges of random numbers,\nSET @Lower = 1 ---- The lowest random number\nSELECT @Upper= COUNT(*) FROM @Tbl_Organisations ---- The highest random number\nSET @Range=(@Upper - @Lower)/5\n\n\n--will divide the @Tbl_Organisations table in to 5 ranges and select a random number from each range\n--set the lower and upper limit on range 1\nSELECT @Upper=@Lower+@Range\nPRINT \'@Lower=\'+CONVERT(varchar(50),@Lower)+\', @Upper=\'+CONVERT(varchar(50),@Upper)\n--get a random value from range 1\nSELECT @Random1 = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)\n\n--set the lower and upper limit on range 2\nSELECT @Lower=@Upper+1,@Upper=@Lower+@Range\nPRINT \'@Lower=\'+CONVERT(varchar(50),@Lower)+\', @Upper=\'+CONVERT(varchar(50),@Upper)\n--get a random value from range 2\nSELECT @Random2 = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)\n\n--set the lower and upper limit on range 3\nSELECT @Lower=@Upper+1,@Upper=@Lower+@Range\nPRINT \'@Lower=\'+CONVERT(varchar(50),@Lower)+\', @Upper=\'+CONVERT(varchar(50),@Upper)\n--get a random value from range 3\nSELECT @Random3 = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)\n\n--set the lower and upper limit on range 4\nSELECT @Lower=@Upper+1,@Upper=@Lower+@Range\nPRINT \'@Lower=\'+CONVERT(varchar(50),@Lower)+\', @Upper=\'+CONVERT(varchar(50),@Upper)\n--get a random value from range 4\nSELECT @Random4 = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)\n\n--set the lower and upper limit on range 5\nSELECT @Lower=@Upper+1,@Upper=COUNT(*) FROM @Tbl_Organisations\nPRINT \'@Lower=\'+CONVERT(varchar(50),@Lower)+\', @Upper=\'+CONVERT(varchar(50),@Upper)\n--get a random value from range 5\nSELECT @Random5 = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)\n\n\n--this uses a CTE names "RowNumbers" to enumerate @Tbl_Organisations with a column "RowNumber" that is a unique sequential continueous from 1 to count(*) of @Tbl_Organisations\n;with RowNumbers AS\n(\n    SELECT O_KeyID, row_number() over(order by O_KeyID) AS RowNumber from @Tbl_Organisations\n)\n--one row will be inserted, using the 5 joined in @Tbl_Organisations\nINSERT INTO @Tbl_Campaigns (Cname,createdate, organisation_1, organisation_2, organisation_3, organisation_4, organisation_5)\n--this will select and combine the 5 rows into 1 row, using the rownumber joined to the variables with the random values\nSELECT\n    \'YourName\'\n        ,getdate()\n        ,t1.O_KeyID --could be t1.organisation_name\n        ,t2.O_KeyID --could be t2.organisation_name\n        ,t3.O_KeyID --could be t3.organisation_name\n        ,t4.O_KeyID --could be t4.organisation_name\n        ,t5.O_KeyID --could be t5.organisation_name\n    from @Tbl_Organisations           t1\n        inner join @Tbl_Organisations t2 on t2.O_KeyID=@Random2\n        inner join @Tbl_Organisations t3 on t3.O_KeyID=@Random3\n        inner join @Tbl_Organisations t4 on t4.O_KeyID=@Random4\n        inner join @Tbl_Organisations t5 on t5.O_KeyID=@Random5\n    WHERE t1.O_KeyID=@Random1\n\n--this shows the one row that was inserted\nSELECT \'all unique\',* FROM @Tbl_Campaigns \n']], ['Random Records & SQL2005 Stored Procedure Insert'], 3], [(1137218, 2), [['here is the output'], ['-10000']], [[' (1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n\n(1 row(s) affected)\n@Lower=1, @Upper=3\n@Lower=4, @Upper=6\n@Lower=7, @Upper=9\n@Lower=10, @Upper=12\n@Lower=13, @Upper=15\n\n(1 row(s) affected)\n           C_KeyID     Cname      createdate              organisation_1 organisation_2 organisation_3 organisation_4 organisation_5\n---------- ----------- ---------- ----------------------- -------------- -------------- -------------- -------------- --------------\nall unique 1           YourName   2009-07-16 12:14:04.590 2              4              7              10             14\n\n(1 row(s) affected)\n']], ['Random Records & SQL2005 Stored Procedure Insert'], 3], [(1137751, 0), [['You can of course do this:'], ['or']], [[' select * from table where (col1 / col2 ) in (1,2,3,4,5,6,7,8);\n']], ['Is there integer ranges for Where Clause?'], 2], [(1137751, 1), [['or'], ['-10000']], [[' select * from table where (col1 / col2 ) between 1 and 8\nand mod (col1 , col2 ) = 0;\n']], ['Is there integer ranges for Where Clause?'], 2], [(1138253, 0), [['Function: Alerts_DailySales'], ['Function: Alerts_WTDSales']], [[' create function Alerts_DailySales\n(\n@StartDate smalldatetime, \n@EndDate smalldatetime\n)\nreturns table\nas\nreturn\n(\nselect \nr.ProfitCentreID, \ns.DateOfSale, \nsum(s.NetSalesAmt) DailySales\nfrom Sales_ByDay s\ninner join RevenueCentres r on s.RevenueCentreID = r.RevenueCentreID\nwhere s.DateOfSale >= @StartDate\nand s.DateOfSale <= @EndDate\ngroup by r.ProfitCentreID, s.DateOfSale\n)\n']], ['LFL sales query in SQL'], 4], [(1138253, 1), [['Function: Alerts_WTDSales'], ['Function: Date_GetMonday']], [[' create function Alerts_WTDSales\n(\n@StartDate smalldatetime, \n@EndDate smalldatetime\n)\nreturns table\nas\nreturn\n(\nselect\na.ProfitCentreID,\na.DateOfSale, \nmax(a.DailySales) DailySales, \nsum (b.DailySales) WTDSales\nfrom dbo.Alerts_DailySales(@StartDate, @EndDate) a\nleft outer join dbo.Alerts_DailySales(@StartDate, @EndDate) b on a.ProfitCentreID = b.ProfitCentreID and a.DateOfSale >= b.DateOfSale\ngroup by a.ProfitCentreID, a.DateOfSale\n)\n']], ['LFL sales query in SQL'], 4], [(1138253, 2), [['Function: Date_GetMonday'], ['Proc: Alerts_SalesReport']], [[' create function [dbo].[Date_GetMonday] (@dt smalldatetime)\nreturns smalldatetime\nas\nbegin\n    return dateadd(week, datediff(week, 0, @dt-1), 0)\nend\n']], ['LFL sales query in SQL'], 4], [(1138253, 3), [['Proc: Alerts_SalesReport'], ["I'm not sure if that will work straight away if you just copy and paste it, but you should be able to pick up on the logic. "]], [[' create proc Alerts_SalesReport\nas\n\nset nocount on \n\ndeclare @StartDate_CW smalldatetime\ndeclare @EndDate_CW smalldatetime\ndeclare @StartDate_LW smalldatetime\ndeclare @EndDate_LW smalldatetime\ndeclare @StartDate_LY smalldatetime\ndeclare @EndDate_LY smalldatetime       \n\n-- sort out dates\nset @EndDate_CW = dateadd(day, -1, Util.dbo.Date_RoundToDay(getdate())) -- yesterday\nset @StartDate_CW = Util.dbo.Date_GetMonday(@EndDate_CW)\nset @StartDate_LW = dateadd(day, -7, @StartDate_CW)\nset @EndDate_LW = dateadd(day, -7, @EndDate_CW)\nset @StartDate_LY = dateadd(week, -52, @StartDate_CW)\nset @EndDate_LY = dateadd(week, -52, @EndDate_CW)\n\n-- get sales\nselect \nProfitCentreName Branch,\ncw.DailySales, \ncoalesce(ly.DailySales, lw.DailySales, 0) DailyLFL, \ncw.DailySales - coalesce(ly.DailySales, lw.DailySales, 0) DailyVar, \ncw.WTDSales, \ncoalesce(ly.WTDSales, lw.WTDSales, 0) WTD_LFL, \ncw.WTDSales - coalesce(ly.WTDSales, lw.WTDSales, 0) WTDVar, \ncast(isnull(ly.DailySales, 0) as bit) LFL\nfrom ProfitCentreNames pn \ninner join dbo.Alerts_WTDSales(@StartDate_CW, @EndDate_CW) cw on pn.ProfitCentreID = cw.ProfitCentreID\nleft outer join dbo.Alerts_WTDSales(@StartDate_LW, @EndDate_LW) lw on cw.ProfitCentreID = lw.ProfitCentreID and dateadd(day, -7, cw.DateOfSale) = lw.DateOfSale\nleft outer join dbo.Alerts_WTDSales(@StartDate_LY, @EndDate_LY) ly on cw.ProfitCentreID = ly.ProfitCentreID and dateadd(week, -52, cw.DateOfSale) = ly.DateOfSale\nwhere cw.DateOfSale = @EndDate_CW\norder by pn.ProfitCentreName, cw.DateOfSale\n']], ['LFL sales query in SQL'], 4], [(1139137, 0), [['Logged in as DBO and SA create a table:'], ['Then create some stored procedures for basic DML:']], [[' create table dbo.SO (PK int identity constraint SO_PK primary key\n    , SomeData varchar(1000)\n)\n']], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139137, 1), [['Then create some stored procedures for basic DML:'], ['As dbo, we can run the following SQL statements:']], [[' create procedure dbo.InsertSO (@SomeData varchar(1000)) as\n    begin\n    insert into dbo.SO (SomeData) values (@SomeData)\n    return SCOPE_IDENTITY()\n    end\ngo\n\ncreate procedure dbo.SelectSO (@PK int=null) as\n    begin\n    if @PK is not null\n        select PK, SomeData from dbo.SO where PK = @PK\n    else\n        select PK, SomeData from dbo.SO\n    end\ngo\n\ncreate procedure dbo.CountSO as\n    begin\n    select COUNT(*) as CountSO from SO\n    end\ngo\n\ncreate procedure dbo.DeleteSO (@PK int=null ) as\n    begin\n    if @PK is not null\n        delete dbo.SO where PK = @PK\n    else\n        delete dbo.SO\n    end\ngo\n\ncreate procedure dbo.UpdateSO (@PK int, @NewSomeData varchar(1000)) as\n    begin`\n    update dbo.SO\n    set SomeData =  @NewSomeData\n    where PK = @PK\n    end\ngo\n\ncreate procedure dbo.TruncateSO as\n    begin\n    truncate table dbo.SO\n    end\ngo\n']], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139137, 2), [['As dbo, we can run the following SQL statements:'], ['Or do the equivalent via the stored procedures']], [[" declare @PK_to_update int\ninsert into dbo.SO (SomeData) values ('Hello world!')\nset @PK_to_update = SCOPE_IDENTITY()\n\ndeclare @PK_to_delete int\ninsert into dbo.SO (SomeData) values ('Goodbye cruel world!')\nset @PK_to_delete = SCOPE_IDENTITY()\n\ninsert into dbo.SO (SomeData) values ('Four score and seven years ago...')\n\nselect PK, SomeData\nfrom dbo.SO\n\ndelete dbo.so\nwhere PK = @PK_to_delete\n\nupdate dbo.SO\nset SomeData = 'Hello Milky Way!'\nwhere PK = @PK_to_update\n\nselect PK, SomeData\nfrom dbo.SO\n\ntruncate table dbo.SO\n\nselect COUNT(*) as CountSO from dbo.SO\n"]], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139137, 3), [['Or do the equivalent via the stored procedures'], ['Now, create a DDL stored procedure and test:']], [[" go\ndeclare @PK_to_update int\nexec @PK_to_update = dbo.InsertSO 'Hello world!'\n\ndeclare @PK_to_delete int\nexec @PK_to_delete = dbo.InsertSO 'Goodbye cruel world!'\n\nexec dbo.InsertSO 'Four score and seven years ago...'\n\nexec dbo.SelectSO \n\nexec dbo.DeleteSO @PK_to_delete\n\nexec dbo.UpdateSO @PK_to_update, 'Hello Milky Way!'\n\nexec dbo.SelectSO\n\nexec dbo.TruncateSO\n\nexec dbo.CountSO\n"]], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139137, 4), [['Now, create a DDL stored procedure and test:'], ['And now create another user and grant execute rights to all the stored procedure. Do not grant any other rights. (Assumes public does not have extra rights and mixed mode authentication. Mixed mode authentication is not recommended, but makes testing how rights are handled easier.)']], [[" create procedure dbo.DropSO as\n    begin \n    drop table dbo.SO\n    end\ngo\nbegin transaction\nselect TABLE_NAME from INFORMATION_SCHEMA.TABLES\nwhere TABLE_NAME = 'SO'\nexec dbo.DropSO\nselect TABLE_NAME from INFORMATION_SCHEMA.TABLES\nwhere TABLE_NAME = 'SO'\nrollback transaction\n"]], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139137, 5), [['And now create another user and grant execute rights to all the stored procedure. Do not grant any other rights. (Assumes public does not have extra rights and mixed mode authentication. Mixed mode authentication is not recommended, but makes testing how rights are handled easier.)'], ['Login in as SoLogin. Try the DML:']], [[" exec sp_addlogin @loginame =  'SoLogin' , @passwd = 'notsecure', @defdb = 'Scratch'\n\nexec sp_adduser @loginame = 'SoLogin', @name_in_db = 'SoUser'\ngo\ngrant execute on dbo.InsertSo to SoUser \ngrant execute on dbo.InsertSO to SoUser\ngrant execute on dbo.SelectSO to SoUser\ngrant execute on dbo.CountSO to SoUser\ngrant execute on dbo.DeleteSO to SoUser\ngrant execute on dbo.UpdateSO to SoUser\ngrant execute on dbo.TruncateSO to SoUser\ngrant execute on dbo.DropSO to SoUser\n"]], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139137, 6), [['Login in as SoLogin. Try the DML:'], ['Nothing but errors:']], [[" declare @PK_to_update int\ninsert into dbo.SO (SomeData) values ('Hello world!')\nset @PK_to_update = SCOPE_IDENTITY()\n\ndeclare @PK_to_delete int\ninsert into dbo.SO (SomeData) values ('Goodbye cruel world!')\nset @PK_to_delete = SCOPE_IDENTITY()\n\ninsert into dbo.SO (SomeData) values ('Four score and seven years ago...')\n\nselect PK, SomeData\nfrom dbo.SO\n\ndelete dbo.so\nwhere PK = @PK_to_delete\n\nupdate dbo.SO\nset SomeData = 'Hello Milky Way!'\nwhere PK = @PK_to_update\n\nselect PK, SomeData\nfrom dbo.SO\n\ntruncate table dbo.SO\ngo\nselect COUNT(*) as CountSO from dbo.SO\ngo\n\ndrop table dbo.so\n"]], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139137, 7), [['Nothing but errors:'], ['Try the basic DML stored procedures:']], [[' Msg 229, Level 14, State 5, Line 2\nThe INSERT permission was denied on the object \'SO\', database \'Scratch\', schema \'dbo\'.\nMsg 229, Level 14, State 5, Line 6\nThe INSERT permission was denied on the object \'SO\', database \'Scratch\', schema \'dbo\'.\nMsg 229, Level 14, State 5, Line 9\nThe INSERT permission was denied on the object \'SO\', database \'Scratch\', schema \'dbo\'.\nMsg 229, Level 14, State 5, Line 11\nThe SELECT permission was denied on the object \'SO\', database \'Scratch\', schema \'dbo\'.\nMsg 229, Level 14, State 5, Line 14\nThe SELECT permission was denied on the object \'SO\', database \'Scratch\', schema \'dbo\'.\nMsg 229, Level 14, State 5, Line 14\nThe DELETE permission was denied on the object \'SO\', database \'Scratch\', schema \'dbo\'.\nMsg 229, Level 14, State 5, Line 17\nThe SELECT permission was denied on the object \'SO\', database \'Scratch\', schema \'dbo\'.\nMsg 229, Level 14, State 5, Line 17\nThe UPDATE permission was denied on the object \'SO\', database \'Scratch\', schema \'dbo\'.\nMsg 229, Level 14, State 5, Line 21\nThe SELECT permission was denied on the object \'SO\', database \'Scratch\', schema \'dbo\'.\nMsg 1088, Level 16, State 7, Line 24\nCannot find the object "SO" because it does not exist or you do not have permissions.\nMsg 229, Level 14, State 5, Line 1\nThe SELECT permission was denied on the object \'SO\', database \'Scratch\', schema \'dbo\'.\nMsg 3701, Level 14, State 20, Line 2\nCannot drop the table \'SO\', because it does not exist or you do not have permission.\n']], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139137, 8), [['Try the basic DML stored procedures:'], ['Try the truncate or drop stored procedure:']], [[" declare @PK_to_update int\nexec @PK_to_update = dbo.InsertSO 'Hello world!'\n\ndeclare @PK_to_delete int\nexec @PK_to_delete = dbo.InsertSO 'Goodbye cruel world!'\n\nexec dbo.InsertSO 'Four score and seven years ago...'\n\nexec dbo.SelectSO \n\nexec dbo.DeleteSO @PK_to_delete\n\nexec dbo.UpdateSO @PK_to_update, 'Hello Milky Way!'\n\nexec dbo.SelectSO\n"]], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139137, 9), [['Try the truncate or drop stored procedure:'], ['Errors again:']], [[' exec dbo.TruncateSO\ngo\nexec dbo.DropSO\n']], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139137, 10), [['Errors again:'], ['-10000']], [[' Msg 1088, Level 16, State 7, Procedure TruncateSO, Line 4\nCannot find the object "SO" because it does not exist or you do not have permissions.\nMsg 3701, Level 14, State 20, Procedure DropSO, Line 4\nCannot drop the table \'SO\', because it does not exist or you do not have permission.\n']], ['What are the ramifications of granting a DB User with limited access Execute permission?'], 11], [(1139160, 0), [['This one selects  3  last records from  t2  for each record from  t1 :'], ["You could probably do something like that using  CTE 's and window function:"]], [[' SELECT  t1.*, t2o.*\nFROM    t1\nCROSS APPLY\n        (\n        SELECT  TOP 3 *\n        FROM    t2\n        WHERE   t2.t1_id = t1.id\n        ORDER BY\n                t2.rank DESC\n        ) t2o\n']], ['When should I use Cross Apply over Inner Join?'], 4], [(1139160, 1), [["You could probably do something like that using  CTE 's and window function:"], ['This query:']], [[' WITH    t2o AS\n        (\n        SELECT  t2.*, ROW_NUMBER() OVER (PARTITION BY t1_id ORDER BY rank) AS rn\n        FROM    t2\n        )\nSELECT  t1.*, t2o.*\nFROM    t1\nINNER JOIN\n        t2o\nON      t2o.t1_id = t1.id\n        AND t2o.rn <= 3\n']], ['When should I use Cross Apply over Inner Join?'], 4], [(1139160, 2), [['This query:'], ['runs for almost  30  seconds, while this one:']], [[' WITH    q AS\n        (\n        SELECT  *, ROW_NUMBER() OVER (ORDER BY id) AS rn\n        FROM    master\n        ),\n        t AS \n        (\n        SELECT  1 AS id\n        UNION ALL\n        SELECT  2\n        )\nSELECT  *\nFROM    t\nJOIN    q\nON      q.rn <= t.id\n']], ['When should I use Cross Apply over Inner Join?'], 4], [(1139160, 3), [['runs for almost  30  seconds, while this one:'], ['is instant.']], [[' WITH    t AS \n        (\n        SELECT  1 AS id\n        UNION ALL\n        SELECT  2\n        )\nSELECT  *\nFROM    t\nCROSS APPLY\n        (\n        SELECT  TOP (t.id) m.*\n        FROM    master m\n        ORDER BY\n                id\n        ) q\n']], ['When should I use Cross Apply over Inner Join?'], 4], [(1140860, 0), [['At any rate, to properly deal with this, use the following query:'], ['To answer your last question, this statement:']], [[' select\n   x, y, \n   case y \n       when 0 then null \n       else x / y \n   end as quot\nfrom\n   t\n']], ['Treatment of error values in the SQL standard'], 4], [(1140860, 1), [['To answer your last question, this statement:'], ['Would return this:']], [[' SELECT x, y, x / y AS quot\nFROM t\n']], ['Treatment of error values in the SQL standard'], 4], [(1140860, 2), [['Would return this:'], ['Think about this query:']], [[' x    y   quot\n7    2    3.5\n3    0    NaN\n4    1      4\n26   5    5.2\n31   0    NaN\n9    3      3\n']], ['Treatment of error values in the SQL standard'], 4], [(1140860, 3), [['Think about this query:'], ["If we had a record (3,0), it applies the  where  condition, and checks if  3 % 2 = 0 . It does not, so it doesn't include that record in the column calculations, and leaves it right where it is."]], [[' select x, y, x/y as quot from t where x%2 = 0\n']], ['Treatment of error values in the SQL standard'], 4], [(1141890, 0), [['1/ Change the data so that 10 is actually in the table (rather than NULL):'], ['2/ Modify your query to return different values for NULL:']], [[' update table TBL set FLD = 10 where FLD is null;\n']], ['Is it possible to use both order by and where in a single query'], 2], [(1141890, 1), [['2/ Modify your query to return different values for NULL:'], ['3/ Create a view to do option 2 above automagically.']], [[' select FLD1, FLD2, case where FLD3 is null then 10 else FLD3 end from ...\n']], ['Is it possible to use both order by and where in a single query'], 2], [(1142950, 0), [['This:'], [', or this:']], [[' SELECT  CASE WHEN p\n        THEN\n        (\n        SELECT  name\n        FROM    table2 t2\n        WHERE   t2.id = t3.id\n        ) \n        ELSE\n        (\n        SELECT  name\n        FROM    table1 t1\n        WHERE   t1.id = t3.id\n        )\n        END\nFROM    table3 t3\n']], ['Values from multiple tables on a row'], 4], [(1142950, 1), [[', or this:'], ['If the majority of fields are false, the following query will probably be the best:']], [[' SELECT  CASE WHEN p THEN t2.name ELSE t1.name END\nFROM    table3 t3\nJOIN    table1 t1\nON      t1.id = t3.id\nJOIN    table1 t2\nON      t2.id = t3.id\n']], ['Values from multiple tables on a row'], 4], [(1142950, 2), [['If the majority of fields are false, the following query will probably be the best:'], ["I can't check it on Firebird, but on most systems the  ORDER BY  syntax as in query above will work. If it does not, wrap the query into an inline view:"]], [[' SELECT  CASE WHEN p THEN\n        (\n        SELECT  name\n        FROM    table2 t2\n        WHERE   t2.id = t3.id\n        )\n        ELSE t1.name\n        END AS cname\nFROM    table3 t3\nJOIN    table1 t1\nON      t1.id = t3.id\nORDER BY\n        cname\n']], ['Values from multiple tables on a row'], 4], [(1142950, 3), [["I can't check it on Firebird, but on most systems the  ORDER BY  syntax as in query above will work. If it does not, wrap the query into an inline view:"], [', though it may hamper performance (at least in  MySQL  it does).']], [[' SELECT  cname\nFROM    (\n        SELECT  CASE WHEN p THEN\n                (\n                SELECT  name\n                FROM    table2 t2\n                WHERE   t2.id = t3.id\n                )\n                ELSE t1.name\n                END AS cname\n        FROM    table3 t3\n        JOIN    table1 t1\n        ON      t1.id = t3.id\n        ) q\nORDER BY\n        cname\n']], ['Values from multiple tables on a row'], 4], [(1143251, 0), [['Consider this simple SQL statement:-'], ['Lexically we establish what fields we want (FirstName, LastName) from  whatever  before we define where we are getting them from (People).  Whereas:-']], [['  SELECT FirstName, LastName FROM People\n']], ['How scope of variable defined/flows in SQL statements compared to LINQ'], 2], [(1143251, 1), [['Lexically we establish what fields we want (FirstName, LastName) from  whatever  before we define where we are getting them from (People).  Whereas:-'], ['Lexically we establish from where we are getting data (People) before we define which specific bits of that data we want (FirstName, LastName).  The SQL approach is backward.']], [[' var query = from People select new {FirstName, LastName}\n']], ['How scope of variable defined/flows in SQL statements compared to LINQ'], 2], [(1144827, 0), [['In new  PostgreSQL 8.4  you can do it with a  CTE :'], ["In  8.3  or earlier, you'll have to write a function:"]], [[" WITH RECURSIVE q AS\n        (\n        SELECT  h, 1 AS level, ARRAY[id] AS breadcrumb\n        FROM    t_hierarchy h\n        WHERE   parent = 0\n        UNION ALL\n        SELECT  hi, q.level + 1 AS level, breadcrumb || id\n        FROM    q\n        JOIN    t_hierarchy hi\n        ON      hi.parent = (q.h).id\n        )\nSELECT  REPEAT('  ', level) || (q.h).id,\n        (q.h).parent,\n        (q.h).value,\n        level,\n        breadcrumb::VARCHAR AS path\nFROM    q\nORDER BY\n        breadcrumb\n"]], ['SQL Find all direct descendants in a tree'], 4], [(1144827, 1), [["In  8.3  or earlier, you'll have to write a function:"], ['and select from this function:']], [[" CREATE TYPE tp_hierarchy AS (node t_hierarchy, level INT);\n\nCREATE OR REPLACE FUNCTION fn_hierarchy_connect_by(INT, INT)\nRETURNS SETOF tp_hierarchy\nAS\n$$\n        SELECT  CASE\n                WHEN node = 1 THEN\n                        (t_hierarchy, $2)::tp_hierarchy\n                ELSE\n                        fn_hierarchy_connect_by((q.t_hierarchy).id, $2 + 1)\n                END\n        FROM    (\n                SELECT  t_hierarchy, node\n                FROM    (\n                        SELECT  1 AS node\n                        UNION ALL\n                        SELECT  2\n                        ) nodes,\n                        t_hierarchy\n                WHERE   parent = $1\n                ORDER BY\n                        id, node\n                ) q;\n$$\nLANGUAGE 'sql';\n"]], ['SQL Find all direct descendants in a tree'], 4], [(1144827, 2), [['and select from this function:'], ['To show only the first level children, or the node itself if the children do not exist, issue this query:']], [[' SELECT  *\nFROM    fn_hierarchy_connect_by(4, 1)\n']], ['SQL Find all direct descendants in a tree'], 4], [(1144827, 3), [['To show only the first level children, or the node itself if the children do not exist, issue this query:'], ['This is more efficient than a  JOIN , since the second query will take but two index scans at most: the first one to make sure to find out if a child exists, the second one to select the parent row if no children exist.']], [[' SELECT  *\nFROM    t_hierarchy\nWHERE   parent = @start\nUNION ALL\nSELECT  *\nFROM    t_hierarchy\nWHERE   id = @start\n        AND NOT EXISTS\n        (\n        SELECT  NULL\n        FROM    t_hierarchy\n        WHERE   parent = @start\n        )\n']], ['SQL Find all direct descendants in a tree'], 4], [(1146004, 0), [['Your select would simply be:'], ["Anyway, here's my query for your existing schema:"]], [[' select * from AuditTable where endDate is NULL\n']], ['SQL standard select current records from an audit log question'], 2], [(1146004, 1), [["Anyway, here's my query for your existing schema:"], ['References']], [[' declare @from datetime\ndeclare @to datetime\n\nselect b.* from (\n  select\n    customerId\n    max(auditdatetime) \'auditDateTime\'\n  from\n    AuditTable\n  where\n    auditcode in (\'I\', \'U\')\n    and auditdatetime between @from and @to\n  group by customerId\n  having \n    /* rely on "current" being defined as INSERTS > DELETES */\n    sum(case when auditcode = \'I\' then 1 else 0 end) > \n    sum(case when auditcode = \'D\' then 1 else 0 end)\n) a\ncross apply(\n  select top 1 customerId, name, address, auditdateTime\n  from AuditTable\n  where auditdatetime = a.auditdatetime and customerId = a.customerId\n) b\n']], ['SQL standard select current records from an audit log question'], 2], [(1146012, 0), [["It's not really a SQL problem you're asking, just a boolean expression problem.  I assume you've got another column in these tables that allows you to join the rows in t1 to t2, but following your examples (where there is only 1 row in t1), you can do it as:"], ['Not knowing the full schema of the tables, I would guess that the proper version of this query would look something like this:']], [['   SELECT t2.A2\n       , t2.B2\n       , t3.C2\n    FROM t1\n       , t2\n   WHERE (t2.A2 OR NOT T1.A1)\n     AND (t2.B2 OR NOT T1.B1)\n     AND (t2.C2 OR NOT T1.C1)\n;\n']], ['Join on multiple booleans'], 2], [(1146012, 1), [['Not knowing the full schema of the tables, I would guess that the proper version of this query would look something like this:'], ['Looking one more time, I realize that your "fbDivision.DivisionName = ?" probably is reducing the number of rows in that table to one, and that there isn\'t a formal PK/FK relationship between those two tables.  In which case, you should dispense with the INNER JOIN nomenclature in the FROM clause and just list the two tables; I\'ve updated my example.']], [['   SELECT vw_fbScheduleFull.LocationName\n       , vw_fbScheduleFull.FieldName\n       , vw_fbScheduleFull.Description\n       , vw_fbScheduleFull.StartTime\n       , vw_fbScheduleFull.EndTime\n       , vw_fbScheduleFull.LowerDivision\n       , vw_fbScheduleFull.UpperDivision\n       , vw_fbScheduleFull.SeniorDivision\n    FROM vw_fbScheduleFull \n       , fbDivision\n   WHERE vw_fbScheduleFull.PracticeDate = ?\n     AND vw_fbScheduleFull.Locked IS NULL \n     AND fbDivision.DivisionName = ?\n     AND (vw_fbScheduleFull.LowerDivision = 1 OR fbDivision.LowerDivision <> 1)\n     AND (vw_fbScheduleFull.UpperDivision = 1 OR fbDivision.UpperDivision <> 1)\n     AND (vw_fbScheduleFull.SeniorDivision = 1 OR fbDivision.SeniorDivision <> 1)\nORDER BY vw_fbScheduleFull.LocationName\n       , vw_fbScheduleFull.FieldName\n       , vw_fbScheduleFull.StartTime \n;\n']], ['Join on multiple booleans'], 2], [(1149241, 0), [["In SQL Server 2005 and up, what you could do in this case is create a small stored function to count the number of comments for each article, and then add this as a computed column to your article table. You could then use that as a normal column and trust me - it's a lot quicker than using subqueries all the time!"], ['Add this to your article table as a column:']], [[' CREATE FUNCTION dbo.CountComments(@ArticleID INT)\nRETURNS INT \nWITH SCHEMABINDING\nAS BEGIN\n    DECLARE @ArticleCommentCount INT\n\n    SELECT @ArticleCommentCount = COUNT(*)\n    FROM dbo.ArticleComments\n    WHERE ArticleID = @ArticleID\n\n    RETURN @ArticleCommentCount\nEND\nGO\n']], ['How do a sql count on an additional table inside a sql stored proc?'], 4], [(1149241, 1), [['Add this to your article table as a column:'], ['and from then on, just use it as a normal column:']], [[' ALTER TABLE dbo.Articles\n    ADD CommentCount AS dbo.CountComments(ArticleID)\n']], ['How do a sql count on an additional table inside a sql stored proc?'], 4], [(1149241, 2), [['and from then on, just use it as a normal column:'], ['To make it even faster, you could add this column as a persisted column to your table, and then it really rocks! :-)']], [[' SELECT ArticleID, ArticleTitle, ArticlePostDate, CommentCount \nFROM dbo.Articles\n']], ['How do a sql count on an additional table inside a sql stored proc?'], 4], [(1149241, 3), [['To make it even faster, you could add this column as a persisted column to your table, and then it really rocks! :-)'], ["It's a bit more work upfront, but if you need this often and all the time, it could be well worth the trouble! Also works great for e.g. reading out certain bits of information from a XML column stored in your database table and expose it as a regular INT column or whatever."]], [[' ALTER TABLE dbo.Articles\n    ADD CommentCount AS dbo.CountComments(ArticleID) PERSISTED\n']], ['How do a sql count on an additional table inside a sql stored proc?'], 4], [(1150362, 0), [['For example, given a OOD like this ...'], ["... it isn't obvious whether to store this data using 2 SQL tables, or 3. Whereas if you take the subclassing away:"]], [[' class Animal\n{\n  int id;\n  string name;\n  abstract void eat();\n  abstract void breed();\n}\n\nclass Dog : Animal\n{\n  bool pedigree;\n  override void eat() {...}\n  override void breed() {...}\n}\n\nclass Bird : Animal\n{\n  bool carnivore;\n  int numberOfEggs;\n  void fly() {...}\n  override void eat() {...}\n  override void breed() {...}\n}\n']], ['OO and SQL'], 2], [(1150362, 1), [["... it isn't obvious whether to store this data using 2 SQL tables, or 3. Whereas if you take the subclassing away:"], ["... then it's easier/more obvious/more 1-to-1/more accurate to model this data using exactly two tables."]], [[' class Dog\n{\n  int id;\n  string name;\n  bool pedigree;\n  void eat() {...}\n  void breed() {...}\n}\n\nclass Bird\n{\n  int id;\n  string name;\n  bool carnivore;\n  int numberOfEggs;\n\n  void fly() {...}\n  void eat() {...}\n  void breed() {...}\n}\n']], ['OO and SQL'], 2], [(1152693, 0), [['-10000'], ['˙DECODE` function is defined like this:']], [[' SELECT T1.AcountNo, T1.Balance, T2.Balance, \n       DECODE( NVL(T2.Balance, 0), 0, 0, T1.Balance, T2.Balance)\nFROM Temp1 T1, Temp2 T2 \nWHERE T1.AccountNo = T2.AccountNo \n  AND ((T1.Balance / T2.Balance > 1.1) OR (T1.Balance / T2.Balance < 0.9))\n']], ['Computing percentage change between tables'], 2], [(1152693, 1), [['˙DECODE` function is defined like this:'], ['So, in above code it works like this:']], [[' decode( expression , search , result [, search , result]... [, default] )\n']], ['Computing percentage change between tables'], 2], [(1152843, 0), [['You need to use a left join, otherwise it will not show records from Logs that have no items int LogExtended. As so'], ['if you want 2 result set you need to execute the query as ']], [[" DECLARE @StartDate DATETIME,\n        @EndDate DATETIME\n\nSELECT  @StartDate = '01 Jun 2009',\n        @EndDate = '30 Jun 2009'\n\nSELECT  *\nFROM    Logs l LEFT JOIN\n        LogsExtended le ON l.LogID = le.LogID\nWHERE   l.Date BEYWEEN @StartDate AND @EndDate\n"]], ["SELECT'ing a master record and all its related foreign detail records, in a single query?"], 2], [(1152843, 1), [['if you want 2 result set you need to execute the query as '], ['this will return all logs between dates, then all extended logs for that same original logs set']], [[" DECLARE @StartDate DATETIME,\n        @EndDate DATETIME\n\nSELECT  @StartDate = '01 Jun 2009',\n        @EndDate = '30 Jun 2009'\n\nSELECT  l.*\nFROM    Logs l \nWHERE   l.Date BEYWEEN @StartDate AND @EndDate\n\nSELECT  le.*\nFROM    Logs l INNER JOIN\n        LogsExtended le ON l.LogID = le.LogID\nWHERE   l.Date BEYWEEN @StartDate AND @EndDate\n"]], ["SELECT'ing a master record and all its related foreign detail records, in a single query?"], 2], [(1154497, 0), [["Your problem is that you can't descend that many levels into your subquery.\nI might have missed something from skimming over your query but could:"], ['not be rewritten as:']], [[' select 1 from (\n    select distance(z1.latitude, z1.longitude, z2.latitude, z2.longitude) d\n    from zip_coords z2\n    where z2.zip in (\n      select zip from available_zips\n    )\n  ) where d <= 50\n']], ['Oracle SQL Invalid Identifier'], 2], [(1154497, 1), [['not be rewritten as:'], ['-10000']], [[' SELECT 1\nFROM zip_coords z2\nWHERE z2.zip IN (\n  SELECT zip FROM available_zips\n)  \nAND distance(z1.latitude, z1.longitude, z2.latitude, z2.longitude) <= 50\n']], ['Oracle SQL Invalid Identifier'], 2], [(1154702, 0), [['This kind of incremental querying is just not efficient.  You\'ll get better results by saying - "I\'ll never need more than 100 results so give me these" :'], ['Or, you could transform your multiple query request into a two query request:']], [[' SELECT top 100 *\nFROM news\nORDER BY date desc\n']], ['SQL Checking for NULL and incrementals'], 2], [(1154702, 1), [['Or, you could transform your multiple query request into a two query request:'], ['-10000']], [[' DECLARE\n  @theDate datetime,\n  @theDate2 datetime\n\nSET @theDate = (SELECT Max(date) FROM news)\n  --trim the time off of @theDate\nSET @theDate = DateAdd(dd, DateDiff(dd, 0, @theDate), 0)\nSET @theDate2 = DateAdd(dd, 1, @theDate)\n\nSELECT *\nFROM news\nWHERE @theDate <= date AND date < @theDate2\nORDER BY date desc\n']], ['SQL Checking for NULL and incrementals'], 2], [(1156495, 0), [['This will give you 1 & 4:'], ['and this will give you 5 & 6:']], [[' select a.values\nfrom my_table a\nwhere not exists (\nselect * from my_table b where b.values = a.values and b.ID = 2)\nand a.ID = 1\n']], ['SQL server: Compare rows'], 2], [(1156495, 1), [['and this will give you 5 & 6:'], ['-10000']], [[' select a.values\nfrom my_table a\nwhere not exists (\nselect * from my_table b where b.values = a.values and b.ID = 1)\nand a.ID = 2\n']], ['SQL server: Compare rows'], 2], [(1157774, 0), [["Well, you're doing a left join on entry_comments, with conditions:"], ['For the entries with no comments, these conditions are false.\nI guess this should solve the problem:']], [[" `entry_comments`.`publish` = 'Y'\n`entry_comments`.`deleted_at` IS NULL\n"]], ['SQL help: COUNT aggregate, list of entries and its comment count'], 2], [(1157774, 1), [['For the entries with no comments, these conditions are false.\nI guess this should solve the problem:'], ['In the OR condition, I put  entry_comments . id , assuming this is the primary key of the entry_comments table, so you should replace it with the real primary key of entry_comments.']], [[" WHERE `entries`.`publish` = 'Y'\nAND (\n        (`entry_comments`.`publish` = 'Y'\n        AND `entry_comments`.`deleted_at` IS NULL)\n    OR\n        `entry_comments`.`id` IS NULL\n    )\nAND `category` = 5\n"]], ['SQL help: COUNT aggregate, list of entries and its comment count'], 2], [(1157873, 0), [['You can use'], ['You may also need to change your timezone']], [[" SELECT SYS_EXTRACT_UTC(TIMESTAMP '2000-03-28 11:30:00.00 -02:00') FROM DUAL;\n"]], ['How to get UTC value for SYSDATE on Oracle'], 3], [(1157873, 1), [['You may also need to change your timezone'], ['Or read it']], [[" ALTER SESSION SET TIME_ZONE = 'Europe/Berlin';\n"]], ['How to get UTC value for SYSDATE on Oracle'], 3], [(1157873, 2), [['Or read it'], ['-10000']], [[' SELECT SESSIONTIMEZONE, CURRENT_TIMESTAMP FROM dual;\n']], ['How to get UTC value for SYSDATE on Oracle'], 3], [(1158188, 0), [['Your query is:'], ["In your case the index isn't being used because  natural_key1  is a  varchar2  and  :1  is a number. Oracle is converting your query to:"]], [[' select\n    unique_key \nfrom\n    src_table\nwhere\n    natural_key1 = :1\n']], ['Index not used due to type conversion?'], 3], [(1158188, 1), [["In your case the index isn't being used because  natural_key1  is a  varchar2  and  :1  is a number. Oracle is converting your query to:"], ['So... put on an index for  to_number(natural_key1) :']], [[' select\n    unique_key \nfrom\n    src_table\nwhere\n    to_number(natural_key1) = :1\n']], ['Index not used due to type conversion?'], 3], [(1158188, 2), [['So... put on an index for  to_number(natural_key1) :'], ['Your query will now use the  ix_src_table_fnk1  index.']], [[' create index ix_src_table_fnk1 on src_table(to_number(natural_key1));\n']], ['Index not used due to type conversion?'], 3], [(1159036, 0), [['Just  UNION ALL  them:'], ['You need to rewrite the query as this:']], [["  WITH    q AS\n         (\n         SELECT  TOP 5 *\n         FROM    TBL_CHARITIES\n         WHERE   cha_Active = 'TRUE'\n                 AND cha_Key != '1'\n         ORDER BY NEWID()\n         )\n SELECT  *\n FROM    q\n UNION ALL\n SELECT  TOP 1 *\n FROM    (\n         SELECT  *\n         FROM    TBL_CHARITIES\n         WHERE   TBL_CHARITIES.cha_Key IN\n                 (\n                 SELECT  members_Favourite\n                 FROM    TBL_MEMBERS\n                 WHERE   members_Id = 16\n                 )\n         EXCEPT\n         SELECT  *\n         FROM    q\n         ) tc\n"]], ['SP: Get 5 random records plus 1'], 2], [(1159036, 1), [['You need to rewrite the query as this:'], [', assuming that  id  is the  PRIMARY KEY  of  TBL_CHARITIES .']], [["  WITH    q AS\n         (\n         SELECT  TOP 5 *\n         FROM    TBL_CHARITIES\n         WHERE   cha_Active = 'TRUE'\n                 AND cha_Key != '1'\n         ORDER BY\n                 NEWID()\n         ),\n         r AS\n         (\n         SELECT  *\n         FROM    TBL_CHARITIES\n         WHERE   TBL_CHARITIES.cha_Key IN\n                 (\n                 SELECT  members_Favourite\n                 FROM    TBL_MEMBERS\n                 WHERE   members_Id = 16\n                 )\n         )\n SELECT  TOP 6 *\n FROM    q\n FULL OUTER JOIN\n         r\n JOIN    TBL_CHARITIES t\n ON      t.id = COALESCE(q.id, r.id)\n ORDER BY\n         q.id\n"]], ['SP: Get 5 random records plus 1'], 2], [(1159981, 0), [['-10000'], ["Here's the query on sample data which returns exactly what you want:"]], [[' SELECT  rn, APPROVED, [Not Approved] as REJECT, NULL\nFROM    (\n        SELECT  MgtApproval, SchedID, ROW_NUMBER() OVER (PARTITION BY mgtapproval ORDER BY SchedID) AS rn\n        FROM    LeaveRequest\n        ) l\n        PIVOT \n        (\n        MIN(SchedId)\n        FOR     MgtApproval IN \n                ([APPROVED], [Not Approved], [NULL])\n        ) as pvt\n']], ['How to create a PIVOT TABLE without summing a column'], 3], [(1159981, 1), [["Here's the query on sample data which returns exactly what you want:"], ['Since you mentioned that your column is in fact a  bit , you should use this syntax:']], [[" WITH leaveRequest aS\n(\nSELECT 'APPROVED' AS mgtapproval, 1 AS SchedID\nUNION ALL\nSELECT 'Reject' AS mgtapproval, 2 AS SchedID\nUNION ALL\nSELECT 'NULL' AS mgtapproval, 3 AS SchedID\nUNION ALL\nSELECT 'APPROVED' AS mgtapproval, 4 AS SchedID\nUNION ALL\nSELECT 'Reject' AS mgtapproval, 5 AS SchedID\nUNION ALL\nSELECT 'NULL' AS mgtapproval, 6 AS SchedID\n)\nSELECT  APPROVED, REJECT, [NULL]\nFROM    (\n        SELECT  MgtApproval, SchedID, ROW_NUMBER() OVER (PARTITION BY mgtapproval ORDER BY SchedID) AS rn\n        FROM    LeaveRequest\n        ) l\n        PIVOT \n        (\n        MIN(SchedId)\n        FOR     MgtApproval IN \n                ([APPROVED], [Reject], [Null])\n        ) as pvt\n"]], ['How to create a PIVOT TABLE without summing a column'], 3], [(1159981, 2), [['Since you mentioned that your column is in fact a  bit , you should use this syntax:'], ['-10000']], [[' SELECT  [1] AS approved, [0] AS reject, [-1] AS nil\nFROM    (\n        SELECT  COALESCE(MgtApproval, -1) AS MgtApproval, SchedID, ROW_NUMBER() OVER (PARTITION BY mgtapproval ORDER BY SchedID) AS rn\n        FROM    LeaveRequest\n        ) l\n        PIVOT \n        (\n        MIN(SchedId)\n        FOR     MgtApproval IN \n                ([1], [0], [-1])\n        ) as pvt\n']], ['How to create a PIVOT TABLE without summing a column'], 3], [(1160076, 0), [['This type of database design calls for  EAV  tables. For example, the form section probably contains:'], ['Filled in results will be saved in a different table:']], [[' 1. User table (user_id, user_name, etc.)\n2. Form table (user_id, form_id, form_name, etc.)\n3. Form_field table (form_id, column_id, column_name, column_type, etc.)\n4. column_type table (column_type_id, column_type_name)\n']], ["Wufoo's Database Schema - How would you design it?"], 2], [(1160076, 1), [['Filled in results will be saved in a different table:'], ['The idea is to create a database model that is just generic enough (but no more than) needed, in order to accommodate for the needs of different users. For example, the column types are set by the programmers, and each type has a different meaning when rendering the form.']], [[' Filled_form (form_id, column_id, value)\n']], ["Wufoo's Database Schema - How would you design it?"], 2], [(1160265, 0), [['-10000'], ['To get three last results for different definitions of "last", use this:']], [[' SELECT  TOP 1 *\nFROM    tblSignature \nWHERE   PatientID = 12345\nORDER BY\n        TreatAuthDate DESC\n']], ['How can I select the entire row when using max'], 2], [(1160265, 1), [['To get three last results for different definitions of "last", use this:'], ['-10000']], [[" SELECT  *\nFROM    (\n        SELECT  TOP 1 'LastThreatAuth' AS which, ts.*\n        FROM    tblSignature ts\n        WHERE   PatientID = 12345\n        ORDER BY\n                TreatAuthDate DESC\n        ) SrcTreatAuth \nUNION ALL\nSELECT  *\nFROM    (\n        SELECT  TOP 1 'LastHIPAA' AS which, ts.*\n        FROM    tblSignature ts\n        WHERE   PatientID = 12345\n        ORDER BY\n                HIPAADate DESC\n        ) SrcHIPAA\nUNION ALL\nSELECT  *\nFROM    (\n        SELECT  TOP 1 'LastDrugTest' AS which, ts.*\n        FROM    tblSignature ts\n        WHERE   PatientID = 12345\n        ORDER BY\n                DrugTestDate DESC\n        ) SrcDrugTest\n"]], ['How can I select the entire row when using max'], 2], [(1160688, 0), [['With new  PostgreSQL 8.4 :'], ['With elder versions:']], [[' SELECT  *\nFROM    (\n        SELECT  site, url, ROW_NUMBER() OVER (PARTITION BY site ORDER BY url) AS rn\n        FROM    urls\n        )\nORDER BY\n        rn, site\n']], ['SQL return rows in a "round-robin" order'], 2], [(1160688, 1), [['With elder versions:'], [', though it can be less efficient.']], [[' SELECT  site,\n        (\n        SELECT  url\n        FROM    urls ui\n        WHERE   ui.site = sites.site\n        ORDER BY\n                url\n        OFFSET  total\n        LIMIT   1\n        ) AS url\nFROM    ( \n        SELECT  site, generate_series(0, cnt - 1) AS total\n        FROM    (\n                SELECT  site, COUNT(*) AS cnt\n                FROM    urls\n                GROUP BY\n                        site\n                ) s\n        ) sites\nORDER BY\n        total, site\n']], ['SQL return rows in a "round-robin" order'], 2], [(1161116, 0), [['install.bat'], ['Primary install.sql']], [[' @echo off\nREM *************************************************************************\nREM\nREM This script performs a database upgrade for the application suite.\nREM\nREM *************************************************************************\n\nsetLocal EnableDelayedExpansion\n\nREM *************************************************************************\nREM\nREM Read the version from the file.\nREM\nREM *************************************************************************\nset /p VERSION=<version.txt\n\nset DB=DB_%VERSION%\nset SCHEMAS=%DB%\\schema-order.txt\n\nREM *************************************************************************\nREM\nREM Each line in the schema-order.txt file contains the name of a schema.\nREM Blank lines are ignored.\nREM\nREM *************************************************************************\nfor /f "tokens=* delims= " %%a in (%SCHEMAS%) do (\n  if not "%%a" == "" sqlplus /nolog @install.sql %VERSION% %%a\n)\n']], ['Version configuration from SQL'], 3], [(1161116, 1), [['Primary install.sql'], ['Each line in the file executed by the first installation script can then use the  INSTALL_PATH  variable to reference a file containing actual SQL to run. This secondary script is responsible for running the individual SQL files that actually exact a change in the database.']], [[" ACCEPT schemaUsername       CHAR DEFAULT &2         PROMPT 'Schema Owner [&2]: '\nACCEPT schemaPassword       CHAR PROMPT 'Password: '    HIDE\n\nPROMPT Verifying Database Connection\nCONNECT &&schemaUsername/&&schemaPassword@&&tns\n\nDEFINE INSTALL_PATH = DB_&1&&ds^&2&&ds\n\n@@&&INSTALL_PATH^install.sql\n"]], ['Version configuration from SQL'], 3], [(1161116, 2), [['Each line in the file executed by the first installation script can then use the  INSTALL_PATH  variable to reference a file containing actual SQL to run. This secondary script is responsible for running the individual SQL files that actually exact a change in the database.'], ['This solution could be modified to automatically run all files in a specific order through clever use of sorting and naming of directories (i.e., the SQL files listed in a table directory run before the SQL files in a view directory).']], [[' @@&&INSTALL_PATH^DIR&&ds^SCM1_VIEW_OBJECT_VW.vw\n']], ['Version configuration from SQL'], 3], [(1164011, 0), [['Try this:'], ['In SQL 2005 profiler:']], [[" CREATE LOGIN foo WITH PASSWORD = 'bar'\n"]], ['SQL Profiler 2008 - Shows Passwords'], 2], [(1164011, 1), [['In SQL 2005 profiler:'], ['Security is maintained.']], [[' --*CREATE LOGIN-----------------------\n']], ['SQL Profiler 2008 - Shows Passwords'], 2], [(1165427, 0), [['What you are doing is correct. Look at the following example:'], ['If you\'re seeing "boxes" as you state in your comment, then it could be a character encoding mismatch, or possibly you have binary data in your TEXT field. Please provide the output from the following:']], [[' mysql> create table baz (data TEXT);\nQuery OK, 0 rows affected (0.20 sec)\n\nmysql> insert into baz (data) values ("Four score and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal");\nQuery OK, 1 row affected (0.06 sec)\n\nmysql> select data from baz\\G\n*************************** 1. row ***************************\ndata: Four score and seven years ago, our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal\n1 row in set (0.00 sec)\n']], ['How to print the Text data type in mysql'], 2], [(1165427, 1), [['If you\'re seeing "boxes" as you state in your comment, then it could be a character encoding mismatch, or possibly you have binary data in your TEXT field. Please provide the output from the following:'], ['-10000']], [[" SHOW CREATE TABLE foo;\nSHOW VARIABLES LIKE 'character_set%';\nSHOW VARIABLES LIKE 'collation%';\n"]], ['How to print the Text data type in mysql'], 2], [(1165816, 0), [['-10000'], ['gives this result:']], [[" DECLARE @STRING varchar(max) \nSELECT @STRING = '7864750A 7888801BZ 5189748C 48982572E 6936001F 7096235FG 3218833H'\n\nSELECT '(''' + REPLACE(@STRING,' ',''',''') + ''')'\n"]], ['How do I programmatically add an apostrophe before and after a string and add a comma inbetween?'], 2], [(1165816, 1), [['gives this result:'], ['-10000']], [[" ('7864750A','7888801BZ','5189748C','48982572E','6936001F','7096235FG','3218833H')\n"]], ['How do I programmatically add an apostrophe before and after a string and add a comma inbetween?'], 2], [(1165878, 0), [['Try rewriting your query as this:'], ['You need the following indexes for this to work efficiently:']], [[" SELECT  p.*, i.type, i.width, i.height,\n        (SELECT name FROM Location_State WHERE id = p.state_id) AS state, \n        (SELECT name FROM Location_Region WHERE id = p.region_id) AS region, \n        (SELECT start_date FROM Promotion WHERE id = p.promotion_id) AS promotion_start_date, \n        (SELECT end_date FROM Promotion WHERE id = p.promotion_id) AS promotion_end_date \nFROM    parts p\nLEFT JOIN\n        image i\nON      i.id = p.image_id\nWHERE   EXISTS (\n        SELECT  NULL\n        FROM    Parts_Category pc\n        WHERE   pc.category_id = '40'\n                AND pc.parts_id = p.id\n        UNION ALL\n        SELECT  NULL\n        FROM    Parts_Category pc\n        WHERE   pc.main_category_id = '40'\n                AND pc.parts_id = p.id\n        )\n        AND p.status = 'A'\nORDER BY\n        p.status DESC, p.level DESC, p.warehouse DESC, p.updated DESC\nLIMIT   15\n"]], ['Optimizing ORDER BY Query on large table MySQL'], 5], [(1165878, 1), [['You need the following indexes for this to work efficiently:'], ['I just created the tables as this:']], [[' parts (status, level, warehouse, updated) -- this one you have\nparts_category (category_id, parts_id)\nparts_category (main_category_id, parts_id)\n']], ['Optimizing ORDER BY Query on large table MySQL'], 5], [(1165878, 2), [['I just created the tables as this:'], ['and filled them with sample data:']], [[" DROP TABLE IF EXISTS `test`.`image`;\nCREATE TABLE  `test`.`image` (\n  `id` int(11) NOT NULL,\n  `type` int(11) NOT NULL,\n  `width` int(11) NOT NULL,\n  `height` int(11) NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nDROP TABLE IF EXISTS `test`.`location_region`;\nCREATE TABLE  `test`.`location_region` (\n  `id` int(11) NOT NULL,\n  `name` varchar(20) NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nDROP TABLE IF EXISTS `test`.`location_state`;\nCREATE TABLE  `test`.`location_state` (\n  `id` int(11) NOT NULL,\n  `name` varchar(20) NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nDROP TABLE IF EXISTS `test`.`parts`;\nCREATE TABLE  `test`.`parts` (\n  `id` int(11) NOT NULL,\n  `status` char(1) NOT NULL,\n  `level` int(11) NOT NULL,\n  `warehouse` int(11) NOT NULL,\n  `updated` int(11) NOT NULL,\n  `state_id` int(11) NOT NULL,\n  `region_id` int(11) NOT NULL,\n  `promotion_id` int(11) NOT NULL,\n  `image_id` int(11) NOT NULL DEFAULT '1',\n  PRIMARY KEY (`id`),\n  KEY `status` (`status`,`level`,`warehouse`,`updated`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nDROP TABLE IF EXISTS `test`.`parts_category`;\nCREATE TABLE  `test`.`parts_category` (\n  `id` int(11) NOT NULL,\n  `parts_id` int(11) NOT NULL,\n  `category_id` int(11) NOT NULL,\n  `main_category_id` int(11) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `ix_pc_cat_parts` (`category_id`,`parts_id`),\n  KEY `ix_pc_main_parts` (`main_category_id`,`parts_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nDROP TABLE IF EXISTS `test`.`promotion`;\nCREATE TABLE  `test`.`promotion` (\n  `id` int(11) NOT NULL,\n  `start_date` datetime NOT NULL,\n  `end_date` datetime NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n"]], ['Optimizing ORDER BY Query on large table MySQL'], 5], [(1165878, 3), [['and filled them with sample data:'], ['The query above runs for  30 milliseconds  and yields the following plan:']], [[" INSERT\nINTO    parts\nSELECT  id,\n        CASE WHEN RAND() < 0.1 THEN 'A' ELSE 'B' END,\n        RAND() * 100,\n        RAND() * 100,\n        RAND() * 100,\n        RAND() * 50,\n        RAND() * 50,\n        RAND() * 50,\n        RAND() * 50\nFROM    t_source\nLIMIT 500000;\nINSERT\nINTO    parts_category\nSELECT  id,\n        id,\n        RAND() * 100,\n        RAND() * 100\nFROM    t_source\nLIMIT 500000;\nINSERT\nINTO    location_state\nSELECT  id, CONCAT('State ', id)\nFROM    t_source\nLIMIT 1000;\nINSERT\nINTO    location_region\nSELECT  id, CONCAT('Region ', id)\nFROM    t_source\nLIMIT 1000;\nINSERT\nINTO    promotion\nSELECT  id,\n        '2009-07-22' - INTERVAL RAND() * 5 - 20 DAY,\n        '2009-07-22' - INTERVAL RAND() * 5 DAY\nFROM    t_source\nLIMIT 1000;\n"]], ['Optimizing ORDER BY Query on large table MySQL'], 5], [(1165878, 4), [['The query above runs for  30 milliseconds  and yields the following plan:'], ["As you can see, no  temporary , no  filesort , everything's very fast."]], [[" 1, 'PRIMARY', 'p', 'ref', 'status', 'status', '3', 'const', 107408, 'Using where'\n1, 'PRIMARY', 'i', 'eq_ref', 'PRIMARY', 'PRIMARY', '4', 'test.p.image_id', 1, ''\n6, 'DEPENDENT SUBQUERY', 'pc', 'ref', 'ix_pc_cat_parts', 'ix_pc_cat_parts', '8', 'const,test.p.id', 1, 'Using index'\n7, 'DEPENDENT UNION', 'pc', 'ref', 'ix_pc_main_parts', 'ix_pc_main_parts', '8', 'const,test.p.id', 1, 'Using index'\n, 'UNION RESULT', '<union6,7>', 'ALL', '', '', '', '', , ''\n5, 'DEPENDENT SUBQUERY', 'Promotion', 'eq_ref', 'PRIMARY', 'PRIMARY', '4', 'test.p.promotion_id', 1, ''\n4, 'DEPENDENT SUBQUERY', 'Promotion', 'eq_ref', 'PRIMARY', 'PRIMARY', '4', 'test.p.promotion_id', 1, ''\n3, 'DEPENDENT SUBQUERY', 'Location_Region', 'eq_ref', 'PRIMARY', 'PRIMARY', '4', 'test.p.region_id', 1, ''\n2, 'DEPENDENT SUBQUERY', 'Location_State', 'eq_ref', 'PRIMARY', 'PRIMARY', '4', 'test.p.state_id', 1, ''\n"]], ['Optimizing ORDER BY Query on large table MySQL'], 5], [(1171373, 0), [['1)'], ['2)']], [[' select table_name\n  from all_constraints\n where r_constraint_name = [your pk/uk constraint on PROJECTS(id)]\n']], ['Oracle all foreign key references'], 2], [(1171373, 1), [['2)'], ['You may want to add an extra predicate containing the OWNER column.']], [[" select table_name\n  from all_tab_columns\n where column_name = 'PROJECT_ID'\n"]], ['Oracle all foreign key references'], 2], [(1172795, 0), [['-10000'], ["If you have multiple such expressions, I'd declare bit vars @true and @false and use them. Or use UDFs if you really wanted..."]], [[' cast (\n  case\n    when FC.CourseId is not null then 1 else 0\n  end\nas bit)\n']], ['Imply bit with constant 1 or 0 in SQL Server'], 2], [(1172795, 1), [["If you have multiple such expressions, I'd declare bit vars @true and @false and use them. Or use UDFs if you really wanted..."], ['-10000']], [[' DECLARE @True bit, @False bit;\nSELECT @True = 1, @False = 0;  --can be combined with declare in SQL 2008\n\nSELECT\n    case when FC.CourseId is not null then @True ELSE @False END AS ...\n']], ['Imply bit with constant 1 or 0 in SQL Server'], 2], [(1172926, 0), [['Join it on the subset of the customer table that contains your ideal customer:'], ['Your comment to my answer suggests you need to divide by the FOOD_TYPE_VALUE of the ideal customer, so do this:']], [[' SELECT\n  c1.customer,\n  c1.food_type,\n  100 * c1.food_type_value / sum(c2.food_type_value),\n  c3.FOOD_TYPE_VALUE / sum(c2.food_type_value) as IDEAL_PERC\nFROM\n  mytable c1 INNER JOIN mytable c2\n  ON c1.customer = c2.customer\n  INNER JOIN (\n    SELECT FOOD_TYPE, FOOD_TYPE_VALUE\n    FROM mytable\n    WHERE customer = 3) c3\n  ON c2.FOOD_TYPE = c3.FOOD_TYPE\ngroup by c1.customer, c1.food_type, c1.food_type_value, c3.FOOD_TYPE_VALUE\n']], ['SQL issue: Calculating percentages and using multiple joins to the same table'], 2], [(1172926, 1), [['Your comment to my answer suggests you need to divide by the FOOD_TYPE_VALUE of the ideal customer, so do this:'], ['-10000']], [[' SELECT\n  c1.customer,\n  c1.food_type,\n  100 * c1.food_type_value / sum(c2.food_type_value),\n  c3.IDEAL_PERC\nFROM\n  mytable c1 INNER JOIN mytable c2\n  ON c1.customer = c2.customer\n  INNER JOIN (\n    SELECT s1.FOOD_TYPE,\n           100 * s1.FOOD_TYPE_VALUE / sum(s2.FOOD_TYPE_VALUE) IDEAL_PERC\n    FROM mytable s1\n    INNER JOIN mytable s2\n    on s1.customer = s2.customer\n    WHERE s1.customer = 3\n    GROUP BY s1.FOOD_TYPE, s1.FOOD_TYPE_VALUE) c3\n  ON c2.FOOD_TYPE = c3.FOOD_TYPE\ngroup by c1.customer, c1.food_type, c1.food_type_value, c3.IDEAL_PERC\n']], ['SQL issue: Calculating percentages and using multiple joins to the same table'], 2], [(1174482, 0), [['Assuming the following data:'], ['The following query in MySQL would give you this:']], [[' a\n--\nid\n1\n2\n3\n\nb\n------------------------\nid    aid   sort_key\n1    1     1\n2    1     2\n3    2     1\n4    3     1\n5    1     3\n6    1     4\n7    1     5\n8    1     6\n9    2     2\n10  2     3 \n']], ['Most efficient way to get lists?'], 3], [(1174482, 1), [['The following query in MySQL would give you this:'], ['Result:']], [[' SELECT a.*,\n    (SELECT GROUP_CONCAT(id) AS ids FROM b AS bi WHERE bi.aid = a.id ORDER BY sort_key LIMIT 5) AS ids\nFROM a\n']], ['Most efficient way to get lists?'], 3], [(1174482, 2), [['Result:'], ['-10000']], [[' id   ids\n1   1,2,5,6,7,8\n2   3,9,10\n3   4\n']], ['Most efficient way to get lists?'], 3], [(1176011, 0), [['The answer is obviously:'], ["Okay here's my serious answer:"]], [[' SELECT DISTINCT UserId\nFROM UserHistory uh1\nWHERE (\n       SELECT COUNT(*) \n       FROM UserHistory uh2 \n       WHERE uh2.CreationDate \n       BETWEEN uh1.CreationDate AND DATEADD(d, @days, uh1.CreationDate)\n      ) = @days OR UserId = 52551\n']], ['SQL to determine minimum sequential days of access?'], 2], [(1176011, 1), [["Okay here's my serious answer:"], ['EDIT:  ']], [[' DECLARE @days int\nDECLARE @seconds bigint\nSET @days = 30\nSET @seconds = (@days * 24 * 60 * 60) - 1\nSELECT DISTINCT UserId\nFROM (\n    SELECT uh1.UserId, Count(uh1.Id) as Conseq\n    FROM UserHistory uh1\n    INNER JOIN UserHistory uh2 ON uh2.CreationDate \n        BETWEEN uh1.CreationDate AND \n            DATEADD(s, @seconds, DATEADD(dd, DATEDIFF(dd, 0, uh1.CreationDate), 0))\n        AND uh1.UserId = uh2.UserId\n    GROUP BY uh1.Id, uh1.UserId\n    ) as Tbl\nWHERE Conseq >= @days\n']], ['SQL to determine minimum sequential days of access?'], 2], [(1178057, 0), [['hmm, that should be enough to just create a unique index.'], ['Actually, I noticed that Postgres have support for partial indexes:']], [[' create unique index ix_open_bar on bar (id, dropped);\n']], ['postgres: How to prevent INSERT in a special case'], 3], [(1178057, 1), [['Actually, I noticed that Postgres have support for partial indexes:'], ["And if you don't want to use the partial indexes, this might work as well:"]], [['  create unique index ix_open_bar on bar (id) where dropped is null;\n']], ['postgres: How to prevent INSERT in a special case'], 3], [(1178057, 2), [["And if you don't want to use the partial indexes, this might work as well:"], ["However, when using coalesce, you need to have the same datatypes on them (so if dropped is a timestamp, you need to change 'NULL' to a timestamp value instead)."]], [["  create unique index ix_open_bar on bar(id, coalesce(dropped, 'NULL'));\n"]], ['postgres: How to prevent INSERT in a special case'], 3], [(1178377, 0), [['For example, if this was your schema...'], ["You'd do this:"]], [[' table1:\n    myKey int primary key,\n    ...other columns...\n\ntable2:\n    otherKey int primary key,\n    myKeyFromTable1 int\n    ...other columns...\n']], ['Finding columns that do not match existing primary key'], 2], [(1178377, 1), [["You'd do this:"], ["That would give you the distinct values in  table2  that wouldn't have a corresponding parent in  table1 ."]], [[' select distinct\n    t2.myKeyFromTable1\n\nfrom table2 t2\n\nleft join table1 t1 on t1.myKey = t2.myKeyFromTable1\n\nwhere t1.myKey is null\n']], ['Finding columns that do not match existing primary key'], 2], [(1178838, 0), [["Update the ReportingServices.css file.  By default, it's found in:"], ["Here's the CSS:"]], [[' C:\\Program Files\\Microsoft SQL Server\\MSSQL.3\\Reporting Services\\ReportManager\\Styles\\\n']], ['Setting the minimum column width in SSRS'], 2], [(1178838, 1), [["Here's the CSS:"], ['-10000']], [[' td, th\n{\n  min-width:50px;\n}\n']], ['Setting the minimum column width in SSRS'], 2], [(1179355, 0), [['Minus operations use distinct sets. Try this instead:'], ['It produces:']], [[' select row_number() over (partition by name_id, val order by name_id, val), name_id, val \nfrom check_minus\nwhere val > 0\n  minus\nselect row_number() over (partition by name_id, val order by name_id, val), name_id, abs(val) \nfrom check_minus\nwhere val < 0\n']], ['Oracle Minus - From a list of values, how do I count ONLY non reversed values'], 2], [(1179355, 1), [['It produces:'], ['-10000']], [[' RowNum Name_Id   Val\n1,     1,        20\n2,     1,        5\n2,     1,        15\n3,     1,        15\n']], ['Oracle Minus - From a list of values, how do I count ONLY non reversed values'], 2], [(1179843, 0), [['you can catch the results of your first stored proc in a temp table or table variable...'], ['Or - you can use the @@ROWCOUNT variable to grab the count of the results from your first proc.  This may or may not work depending on what comes after the select statement in your first stored proc...']], [[" DECLARE @MyResults TABLE(UserID int, Name varchar(30), DateOfBirth datetime)\n\nINSERT  @MyResults\nEXEC    StoredProc1 'Scott'\n\n-- do what you want with the table here...\n"]], ['Trying to access the results/result-set of a SQL server EXEC statement'], 2], [(1179843, 1), [['Or - you can use the @@ROWCOUNT variable to grab the count of the results from your first proc.  This may or may not work depending on what comes after the select statement in your first stored proc...'], ["If you don't have control over StoredProc1, the temp table might be your best option since you can't guarantee the results of @@ROWCOUNT getting reset by code after the select statement in your StoredProc1 proc."]], [[" DECLARE @Count int\n\nEXEC StoredProc1 'Scott'\nSET  @Count = @@ROWCOUNT\n\n-- do whatever you want with the count here...\n"]], ['Trying to access the results/result-set of a SQL server EXEC statement'], 2], [(1179857, 0), [['You need to add a constraint to your table, better a named one:'], ['In your CREATE TABLE statement, do this:']], [[' ALTER TABLE YourSchema.YourTable ADD CONSTRAINT CHK_YourTable_YourColumn_ValidLimits\nCHECK(YourColumn BETWEEN 1 AND 5)\n']], ['How do I limit the acceptable values in a database column to be 1 to 5?'], 2], [(1179857, 1), [['In your CREATE TABLE statement, do this:'], ['The best practice is to explicitly name your constraints.']], [[' CREATE TABLE YourSchema.YourTable(YourColumn INT NOT NULL CONSTRAINT CHK_YourTable_YourColumn_ValidLimits\nCHECK(YourColumn BETWEEN 1 AND 5),\nSomeOtherColumns VARCHAR(10)\n);\n']], ['How do I limit the acceptable values in a database column to be 1 to 5?'], 2], [(1180141, 0), [['The following should work:'], ['with ']], [[' ALTER DATABASE [MyDatabase] SET SINGLE_USER WITH NO_WAIT\nGO\n']], ['What SQL is required to put SQL Server 2005 in single user mode?'], 2], [(1180141, 1), [['with '], ['to set it back to multi-user']], [[' ALTER DATABASE [MyDatabase] SET MULTI_USER WITH NO_WAIT\nGO\n']], ['What SQL is required to put SQL Server 2005 in single user mode?'], 2], [(1180714, 0), [['Well, I found a solution. It took a lot of experimentation, and I think a good bit of blind luck, but here it is:'], ['-10000']], [[' CREATE TABLE magic ENGINE=MEMORY\nSELECT\n  s.shop_id AS shop_id,\n  s.id AS shift_id,\n  st.dow AS dow,\n  st.start AS start,\n  st.end AS end,\n  su.user_id AS manager_id\nFROM shifts s\nJOIN shift_times st ON s.id = st.shift_id\nJOIN shifts_users su ON s.id = su.shift_id\nJOIN shift_positions sp ON su.shift_position_id = sp.id AND sp.level = 1\n\nALTER TABLE magic ADD INDEX (shop_id, dow);\n\nCREATE TABLE tickets_extra ENGINE=MyISAM\nSELECT \n  t.id AS ticket_id,\n  (\n    SELECT m.manager_id\n    FROM magic m\n    WHERE DAYOFWEEK(t.created) = m.dow\n    AND TIME(t.created) BETWEEN m.start AND m.end\n    AND m.shop_id = t.shop_id\n  ) AS manager_created,\n  (\n    SELECT m.manager_id\n    FROM magic m\n    WHERE DAYOFWEEK(t.resolved) = m.dow\n    AND TIME(t.resolved) BETWEEN m.start AND m.end\n    AND m.shop_id = t.shop_id\n  ) AS manager_resolved\nFROM tickets t;\nDROP TABLE magic;\n']], ['How can I further optimize a derived table query which performs better than the JOINed equivalent?'], 3], [(1180714, 1), [['-10000'], ['Check this out:']], [[' *************************** 1. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: t\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 173825\n        Extra: \n*************************** 2. row ***************************\n           id: 3\n  select_type: DEPENDENT SUBQUERY\n        table: m\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 2037\n        Extra: Using where\n*************************** 3. row ***************************\n           id: 2\n  select_type: DEPENDENT SUBQUERY\n        table: m\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 2037\n        Extra: Using where\n3 rows in set (0.00 sec)\n']], ['How can I further optimize a derived table query which performs better than the JOINed equivalent?'], 3], [(1180714, 2), [['Check this out:'], ["Now  THAT'S  what I'm talkin' about!"]], [[' mysql> CREATE TABLE magic ENGINE=MEMORY\n<snip>\nQuery OK, 3220 rows affected (0.40 sec)\n\nmysql> ALTER TABLE magic ADD INDEX (shop_id, dow);\nQuery OK, 3220 rows affected (0.02 sec)\n\nmysql> CREATE TABLE tickets_extra ENGINE=MyISAM\n<snip>\nQuery OK, 1933769 rows affected (24.18 sec)\n\nmysql> drop table magic;\nQuery OK, 0 rows affected (0.00 sec)\n']], ['How can I further optimize a derived table query which performs better than the JOINed equivalent?'], 3], [(1180771, 0), [['I have sorted this out. All I need is the grant privilege.'], ['Now I can create VIEW at system level.']], [[' GRANT SELECT ANY TABLE TO IN_DBAMN;\n']], ['Creating VIEW in system level'], 2], [(1180771, 1), [['Now I can create VIEW at system level.'], ['This view also get updated once any data are modify at their domain level.']], [[' CREATE OR REPLACE VIEW ALL_SERV \nas \n( \n    select * from domain1.serv union all select * from domain2.serv union all etc... \n);\n']], ['Creating VIEW in system level'], 2], [(1183929, 0), [['MySQL:'], ['PostgreSQL:']], [[' SELECT ROUND(\n  100.0 * (\n      SUM(IF(cust_id = 541, 1, 0)) / COUNT(order_id)\n  ), 1) AS percent_total\nFROM orders;\n']], ['How To Do Percent/Total in SQL?'], 2], [(1183929, 1), [['PostgreSQL:'], ["P.S. My PostgreSQL is rusty, so if the MySQL query works on PostgreSQL I'd like to know :)"]], [[' SELECT ROUND(\n  100.0 * (\n      SUM(CASE WHEN cust_id = 541 THEN 1 ELSE 0 END) / COUNT(order_id)\n  ), 1) AS percent_total\nFROM orders;\n']], ['How To Do Percent/Total in SQL?'], 2], [(1185146, 0), [['-10000'], ['or']], [[' SELECT * \n  FROM (\n  SELECT *, \n    ROW_NUMBER() OVER (ORDER BY KeyboardId DESC) AS rn\n  FROM Table\n) AS t\nWHERE rn = 2;\n']], ['SQL Server 2005 Query Help'], 3], [(1185146, 1), [['or'], ['or']], [[' WITH cte AS (\n   SELECT *, ROW_NUMBER() OVER (ORDER BY KeyboardId DESC) AS rn\n   FROM Table)\nSELECT *\n    FROM cte\n    WHERE rn = 2;\n']], ['SQL Server 2005 Query Help'], 3], [(1185146, 2), [['or'], ['-10000']], [[' SELECT TOP(1) *\n  FROM (\n  SELECT TOP(2) * \n      FROM Table\n      ORDER BY KeyboardId DESC) AS t\n  ORDER BY KeyboardId;\n']], ['SQL Server 2005 Query Help'], 3], [(1185409, 0), [['-10000'], ['EDIT:  To get the number of records of a type not shown:']], [[" WITH RecordsWithRn AS (\nSELECT id, Type, Name,\n   ROW_NUMBER() OVER (PARTITION BY Type ORDER BY ... intra-type ordering ...) as rn\n        FROM Records\n        WHERE Name LIKE '%Foo%') \nSELECT TOP 100 id, Type, Name\n   FROM RecordsWithRn\n   ORDER BY RN, ... inter-type ordering ...\n"]], ['Balancing different types of result records limited by a TOP 100'], 2], [(1185409, 1), [['EDIT:  To get the number of records of a type not shown:'], ['-10000']], [[" WITH RecordsWithRn AS (\n   SELECT id, Type, Name,\n      ROW_NUMBER() OVER (PARTITION BY Type ORDER BY Type) as rn,\n      COUNT(*) OVER (PARTITION BY Type) as CountType\n   FROM Records\n   WHERE Name LIKE '%Foo%')\n, Top100Records as (\n   SELECT TOP 100 id, Type, Name, CountType\n   FROM RecordsWithRn\n   ORDER BY RN)\nselect Id, Type, Name, \n    CountType - (COUNT(*) over (PARTITION BY Type)) as CountTypeNotIncluded\nfrom Top100Records\n"]], ['Balancing different types of result records limited by a TOP 100'], 2], [(1185839, 0), [['In the view:'], ["In the controller's action that calls the view:"]], [[' <?php if ($show_login): ?>\n    <!-- login box code here -->\n<?php endif; ?>\n']], ['CI PHP if statement w/ sql syntax'], 3], [(1185839, 1), [["In the controller's action that calls the view:"], ['In the model:']], [[" if (is_logged_in() && $this->my_model->check_something()) {\n    $data['show_login'] = false;\n}\nelse {\n    $data['show_login'] = true;\n}\n$this->load->view('myview', $data);\n"]], ['CI PHP if statement w/ sql syntax'], 3], [(1185839, 2), [['In the model:'], ["Refer to  CodeIgniter's Active Record documentation  to figure out how to setup your SQL statements."]], [[' function check_something() {\n    // execute the SQL statements\n    // and return true/false depending on what you get\n}\n']], ['CI PHP if statement w/ sql syntax'], 3], [(1187644, 0), [['Multiple-column IN with GROUP-BY (probably faster):'], ['Correlated Subquery:']], [[' SELECT O.ID, V.ID\nFROM Originating AS O, ValueSet AS V\nWHERE O.ID = V.OriginatingID\nAND\n(V.OriginatingID, V.DateStamp) IN\n(\n    SELECT OriginatingID, Max(DateStamp)\n    FROM ValueSet\n    GROUP BY OriginatingID\n)\n']], ['Variant use of the GROUP BY clause in TSQL'], 2], [(1187644, 1), [['Correlated Subquery:'], ['-10000']], [[' SELECT O.ID, V.ID\nFROM Originating AS O, ValueSet AS V\nWHERE O.ID = V.OriginatingID\nAND\nV.DateStamp =\n(\n    SELECT Max(DateStamp)\n    FROM ValueSet V2\n    WHERE V2.OriginatingID = O.ID\n)\n']], ['Variant use of the GROUP BY clause in TSQL'], 2], [(1189411, 0), [['Anyway here is what I added'], ['So the whole thing now is:']], [[" string_type_qname := SYS.UTL_DBWS.to_qname('http://www.w3.org/2001/XMLSchema', 'string');\nlong_type_qname := SYS.UTL_DBWS.to_qname('http://www.w3.org/2001/XMLSchema', 'long');\n\nSYS.UTL_DBWS.add_parameter(l_call, 'args0', long_type_qname, 'ParameterMode.IN');\nSYS.UTL_DBWS.add_parameter(l_call, 'args1', long_type_qname, 'ParameterMode.IN');\nSYS.UTL_DBWS.add_parameter(l_call, 'args2', string_type_qname, 'ParameterMode.IN');\nSYS.UTL_DBWS.add_parameter(l_call, 'args3', string_type_qname, 'ParameterMode.IN');\nSYS.UTL_DBWS.add_parameter(l_call, 'args4', string_type_qname, 'ParameterMode.IN');\n"]], ['Consuming Webservice using UTL_DBWS'], 2], [(1189411, 1), [['So the whole thing now is:'], ['I finally saw this after paying closer attention to the guide posted in the oracle forums\n http://forums.oracle.com/forums/thread.jspa?threadID=633268&tstart=0']], [[" CREATE OR REPLACE\nFUNCTION wsproxy_send_request\nreturn varchar2\nas\nl_service               SYS.UTL_DBWS.service;\nl_call              SYS.UTL_DBWS.call;\nl_result                ANYDATA;\nl_wsdl_url              VARCHAR2(32767);\nl_namespace             VARCHAR2(32767);\nl_service_qname         SYS.UTL_DBWS.qname;\nl_port_qname            SYS.UTL_DBWS.qname;\nl_operation_qname       SYS.UTL_DBWS.qname;\nl_input_params          SYS.UTL_DBWS.ANYDATA_LIST;\nboolean_type_qname      SYS.UTL_DBWS.QNAME;\nstring_type_qname       SYS.UTL_DBWS.QNAME;\nlong_type_qname         SYS.UTL_DBWS.QNAME;\n\nbegin\n\nl_wsdl_url := 'http://<<host>>/axis2/services/<<serviceName>>?wsdl';\nl_namespace := 'http://<<namespace>>';\nl_service_qname := SYS.UTL_DBWS.to_qname(l_namespace, '<<serviceName>>');\nl_port_qname := SYS.UTL_DBWS.to_qname(l_namespace, '<<endPoint>>');\nl_operation_qname := SYS.UTL_DBWS.to_qname(l_namespace, 'send');\n\nl_service := SYS.UTL_DBWS.create_service (URIFACTORY.getURI(l_wsdl_url), l_service_qname);\nl_call := SYS.UTL_DBWS.create_call (l_service, l_port_qname, l_operation_qname);\n\nboolean_type_qname := SYS.UTL_DBWS.to_qname('http://www.w3.org/2001/XMLSchema', 'boolean');\nstring_type_qname := SYS.UTL_DBWS.to_qname('http://www.w3.org/2001/XMLSchema', 'string');\nlong_type_qname := SYS.UTL_DBWS.to_qname('http://www.w3.org/2001/XMLSchema', 'long');\n\nSYS.UTL_DBWS.add_parameter(l_call, 'args0', long_type_qname, 'ParameterMode.IN');\nSYS.UTL_DBWS.add_parameter(l_call, 'args1', long_type_qname, 'ParameterMode.IN');\nSYS.UTL_DBWS.add_parameter(l_call, 'args2', string_type_qname, 'ParameterMode.IN');\nSYS.UTL_DBWS.add_parameter(l_call, 'args3', string_type_qname, 'ParameterMode.IN');\nSYS.UTL_DBWS.add_parameter(l_call, 'args4', string_type_qname, 'ParameterMode.IN');\n\nSYS.UTL_DBWS.SET_PROPERTY(l_call, 'SOAPACTION_USE', 'TRUE');\nSYS.UTL_DBWS.SET_PROPERTY(l_call, 'SOAPACTION_URI', '');\nSYS.UTL_DBWS.SET_PROPERTY(l_call, 'ENCODINGSTYLE_URI', '');\nSYS.UTL_DBWS.SET_PROPERTY(l_call, 'OPERATION_STYLE', 'rpc');\n\nl_input_params(0) := ANYDATA.ConvertNumber(1);\nl_input_params(1) := ANYDATA.ConvertNumber(24387236726);\nl_input_params(2) := ANYDATA.ConvertVarchar2('CTE');\nl_input_params(3) := ANYDATA.ConvertVarchar2('STORE_RECORD_LOCATOR');\nl_input_params(4) := ANYDATA.ConvertVarchar2('a');\n\nsys.utl_dbws.set_return_type(l_call, boolean_type_qname);\n\nl_result := SYS.UTL_DBWS.invoke(l_call, l_input_params);   \n\nSYS.UTL_DBWS.release_call (l_call);\nSYS.UTL_DBWS.release_service(l_service);\n\nRETURN ANYDATA.AccessVarchar2(l_result);\nEND;\n/\n"]], ['Consuming Webservice using UTL_DBWS'], 2], [(1192019, 0), [['You need to use  GROUP BY  as such to get your desired result:'], ['EDIT:  If you want to use a column as both aggregate and non-aggregate, or if you need to desegregate your groups, you will need to use a subquery as such:']], [[' SELECT\norder_id,\npart_id,\nSUM(cost) AS total\nFROM orders \nWHERE order_date BETWEEN xxx AND yyy\nGROUP BY order_id, part_id\n']], ['Do aggregate MySQL functions always return a single row?'], 2], [(1192019, 1), [['EDIT:  If you want to use a column as both aggregate and non-aggregate, or if you need to desegregate your groups, you will need to use a subquery as such:'], ['-10000']], [[' SELECT\nor1.order_id,\nor1.cost,\nor1.part_id,\n(\n  SELECT SUM(cost)\n  FROM orders or2\n  WHERE or1.order_id = or2.order_id\n  GROUP BY or2.order_id\n) AS total\nFROM orders or1\nWHERE or1.order_date BETWEEN xxx AND yyy\n']], ['Do aggregate MySQL functions always return a single row?'], 2], [(1194289, 0), [['-10000'], ["I'll add one more row to the sample:"]], [[' SELECT * FROM TABLE_NAME WHERE b IN(5,7) AND c IN(4,4)\n']], ["Evaluation of multiples 'IN' Expressions in 'WHERE' clauses in mysql"], 4], [(1194289, 1), [["I'll add one more row to the sample:"], ['If you want to match the whole sets, you can use this syntax:']], [['  +----------+----------+----------+\n |    PK    |     b    |     c    |\n +----------+----------+----------+\n |     1    |     2    |     3    |\n +----------+----------+----------+\n |     2    |     5    |     4    |\n +----------+----------+----------+\n |     3    |     7    |     9    |\n +----------+----------+----------+\n |     4    |     7    |     4    |\n +----------+----------+----------+\n |     5    |     2    |     9    |\n +----------+----------+----------+\n']], ["Evaluation of multiples 'IN' Expressions in 'WHERE' clauses in mysql"], 4], [(1194289, 2), [['If you want to match the whole sets, you can use this syntax:'], ['But if you rewrite this query the other way around, like this:']], [[' SELECT  *\nFROM    table_name\nWHERE   (b, c) IN ((2, 3), (7, 9))\n']], ["Evaluation of multiples 'IN' Expressions in 'WHERE' clauses in mysql"], 4], [(1194289, 3), [['But if you rewrite this query the other way around, like this:'], [', this will mean "return all rows where  b  is either  2  or  7 , AND  c  is either  3  or  9 ).']], [[' SELECT  *\nFROM    table_name\nWHERE   b IN (2, 7)\n        AND c IN (3, 9)\n']], ["Evaluation of multiples 'IN' Expressions in 'WHERE' clauses in mysql"], 4], [(1194525, 0), [['Use this  PostgreSQL  extension:'], ['In new  PostgreSQL 8.4 , you can also use window functions:']], [[' SELECT  DISTINCT ON (location.id) thing.*\nFROM    location\nJOIN    thing\nON      thing.location_id = location_id\nWHERE   type = 1\nORDER BY\n        location.id ASC, price ASC\n']], ['Get primary key of aggregated, group by SQL query using PostgreSQL'], 2], [(1194525, 1), [['In new  PostgreSQL 8.4 , you can also use window functions:'], ['-10000']], [[' SELECT  *\nFROM    (\n        SELECT  thing.*, ROW_NUMBER() OVER (PARTITION BY location_id ORDER BY price) AS rn\n        FROM    location\n        JOIN    thing\n        ON      thing.location_id = location_id\n        WHERE   type = 1\n        ) q\nWHERE   rn = 1\n']], ['Get primary key of aggregated, group by SQL query using PostgreSQL'], 2], [(1195313, 0), [['Databases in general do not allow an efficient algorithm for this query:'], ["That's why you'll have to use this condition in a  JOIN :"]], [[' SELECT  *\nFROM    TransactionState\nWHERE   @value BETWEEN StartDateTime AND EndDateTime\n']], ['Type II dimension joins'], 3], [(1195313, 1), [["That's why you'll have to use this condition in a  JOIN :"], ['Since your time component is stripped of your  StartDateTime  and  EndDateTime , you can create a  CTE  like this:']], [[' SELECT  *\nFROM    factTable\nCROSS APPLY\n        (\n        SELECT  TOP 1 *\n        FROM    TransactionState\n        WHERE   StartDateTime <= factDateTime\n        ORDER BY\n                StartDateTime DESC\n        )\n']], ['Type II dimension joins'], 3], [(1195313, 2), [['Since your time component is stripped of your  StartDateTime  and  EndDateTime , you can create a  CTE  like this:'], ['If your date ranges span more than  100  dates, adjust  MAXRECURSION  option on  CTE .']], [[" WITH    cal AS\n        (\n        SELECT CAST('2009-01-01' AS DATE) AS cdate\n        UNION ALL\n        SELECT DATEADD(day, 1, cdate)\n        FROM   cal\n        WHERE  cdate <= '2009-03-01'\n        ),\n        state AS\n        (\n        SELECT  cdate, ts.*\n        FROM    cal\n        CROSS APPLY\n                (\n                SELECT  TOP 1 *\n                FROM    TransactionState\n                WHERE   StartDateTime <= cdate\n                ORDER BY\n                        StartDateTime DESC\n                ) ts\n        WHERE   ts.EndDateTime >= cdate\n        )\nSELECT  *\nFROM    factTable\nJOIN    state\nON      cdate = DATE(factDate)\n"]], ['Type II dimension joins'], 3], [(1196340, 0), [['SQL compares with the dictionary in mind. You can use this to your advantage, like so:'], ["To get the list of all words from  table1  and the corresponding word from table2, you'd do this:"]], [[' select\n    max(word)\nfrom\n    table2 t2\nwhere\n    word < @word\n']], ['SQL with alphabet - thinking like a dictionary'], 2], [(1196340, 1), [["To get the list of all words from  table1  and the corresponding word from table2, you'd do this:"], ['-10000']], [[' select\n    t1.word,\n    (select max(word) as word from table2 where word <= t1.word) as Dictionary\nfrom\n    table1 t1\n']], ['SQL with alphabet - thinking like a dictionary'], 2], [(1196346, 0), [['From Directory'], ['Via stdin']], [[' cd ../database/My\\ Schema\nsqlplus [uname]/[pw] @create_sequence.sql\n']], ['problem with oracle sqlplus with whitespace in the path of the @ command'], 2], [(1196346, 1), [['Via stdin'], ['-10000']], [[' sqlplus [uname]/[pw] < ../database/My\\ Schema/create_sequence.sql\n']], ['problem with oracle sqlplus with whitespace in the path of the @ command'], 2], [(1197236, 0), [['A combination of the given answers and a pragma control accomplishes this task for Oracle 10g.'], ['This sequence works:']], [[" CREATE OR REPLACE PROCEDURE create_role( role_name IN VARCHAR2 ) IS\nPRAGMA AUTONOMOUS_TRANSACTION;\nBEGIN\n  EXECUTE IMMEDIATE 'CREATE ROLE '||role_name;\nEXCEPTION\n  WHEN OTHERS THEN\n    -- ORA-01921: If The role name exists, ignore the error.\n    IF SQLCODE <> -01921 THEN\n      RAISE;\n    END IF;\nEND create_role;\n"]], ['Create or replace role?'], 3], [(1197236, 1), [['This sequence works:'], ['The final create role statement fails, as expected:']], [[" DROP ROLE role_name;\nCREATE ROLE role_name;\nCALL create_role( 'role_name' );\nCALL create_role( 'role_name' );\n"]], ['Create or replace role?'], 3], [(1197236, 2), [['The final create role statement fails, as expected:'], ['-10000']], [[" DROP ROLE role_name;\nCALL create_role( 'role_name' );\nCREATE ROLE role_name;\n"]], ['Create or replace role?'], 3], [(1197442, 0), [["The first piece calculates the number of minutes between the row's date and the epoch (0) and does a mod 15 on it, giving the difference between the row's date and the closest 15 minute interval:"], ['Next, we need to deal with just the minutes, so we use this date-part stripping technique I learned from SQL Server Magazine February 2007 (Datetime Calculations by Itzik Ben-Gan):']], [[' select -1 * datediff(minute, 0, mydate) % 15\nfrom mytable\n']], ['SQL Server 2000 - Breaking a query up into 15 minute blocks'], 3], [(1197442, 1), [['Next, we need to deal with just the minutes, so we use this date-part stripping technique I learned from SQL Server Magazine February 2007 (Datetime Calculations by Itzik Ben-Gan):'], ["Then, we add the difference to the row's date column and group and count and voila!"]], [[' select dateadd(minute, datediff(minute, 0, mydate), 0)\nfrom mytable\n']], ['SQL Server 2000 - Breaking a query up into 15 minute blocks'], 3], [(1197442, 2), [["Then, we add the difference to the row's date column and group and count and voila!"], ['-10000']], [[' select dateadd(minute, -1 * datediff(minute, 0, mydate) % 15, dateadd(minute, datediff(minute, 0, mydate), 0)), count(ID)\nfrom mytable\ngroup by dateadd(minute, -1 * datediff(minute, 0, mydate) % 15, dateadd(minute, datediff(minute, 0, mydate), 0))\n']], ['SQL Server 2000 - Breaking a query up into 15 minute blocks'], 3], [(1197943, 0), [['Try creating a view called MASTER_MYVIEW first (you may need to deal with privileges there as well):'], ['Then create a public synonym for that new view:']], [[' create view master_myview as select ...;\n']], ['Creating public synonym at system level'], 2], [(1197943, 1), [['Then create a public synonym for that new view:'], ['-10000']], [[' create or replace public synonym master_myview for <owner>.master_myview;\n']], ['Creating public synonym at system level'], 2], [(1199782, 0), [['Just order by the SALE_COUNT descending and select only the first one, if I understand your problem:'], ['If you\'re using postgres, the syntax is to put a "LIMIT n" at the end, so:']], [[" SELECT TOP 1 ID, PRODUCT_NAME, COLOR, SALE_COUNT\nFROM table\nWHERE PRODUCT_NAME LIKE '%' + @searchParam + '%'\nORDER BY SALE_COUNT DESC\n"]], ['How to filter search results in this example'], 2], [(1199782, 1), [['If you\'re using postgres, the syntax is to put a "LIMIT n" at the end, so:'], ['-10000']], [[" SELECT ID, PRODUCT_NAME, COLOR, SALE_COUNT\nFROM table\nWHERE PRODUCT_NAME LIKE '%' + @searchParam + '%'\nORDER BY SALE_COUNT DESC\nLIMIT 1\n"]], ['How to filter search results in this example'], 2], [(1200295, 0), [['Generally speaking,  IN  and  JOIN  are different queries that can yield different results.'], ['is not the same as']], [[' SELECT  a.*\nFROM    a\nJOIN    b\nON      a.col = b.col\n']], ['SQL JOIN vs IN performance?'], 3], [(1200295, 1), [['is not the same as'], ['However, this is the synonym for the first query:']], [[' SELECT  a.*\nFROM    a\nWHERE   col IN\n        (\n        SELECT  col\n        FROM    b\n        )\n']], ['SQL JOIN vs IN performance?'], 3], [(1200295, 2), [['However, this is the synonym for the first query:'], ['If the joining column is  UNIQUE  and marked as such, both these queries yield the same plan in  SQL Server .']], [[' SELECT  a.*\nFROM    a\nJOIN    (\n        SELECT  DISTINCT col\n        FROM    b\n        )\nON      b.col = a.col\n']], ['SQL JOIN vs IN performance?'], 3], [(1201296, 0), [['Just use aggregate functions:'], ['If you need all columns from your table, not only the aggregated ones, use this syntax:']], [[" SELECT  MAX(page)\nFROM    views\nWHERE   user_id = '1'\nGROUP BY\n        session\n"]], ['How to optimize MySQL query (group and order)'], 2], [(1201296, 1), [['If you need all columns from your table, not only the aggregated ones, use this syntax:'], ['This assumes that  id  is a  PRIMARY KEY  on  views .']], [[' SELECT  v.*\nFROM    (\n        SELECT  DISTINCT user_id, session\n        FROM    views\n        ) vo\nJOIN    views v\nON      v.id =\n        (\n        SELECT  id\n        FROM    views vi\n        WHERE   vi.user_id = vo.user_id\n                AND vi.session = vo.session\n        ORDER BY\n                page DESC\n        LIMIT 1\n        )\n']], ['How to optimize MySQL query (group and order)'], 2], [(1201492, 0), [['-10000'], ['I want be able to query the I/O latencies from 1:00 PM to 3:00 PM for the server  Atriedes  on  August 19th, 2007']], [[' CREATE TABLE t_latency (\n       id INT NOT NULL PRIMARY KEY,\n       server_id INT NOT NULL,\n       ts DATETIME NOT NULL,\n       latency FLOAT NOT NULL,\n       KEY ix_latency_server_time_latency (server_id, ts, latency),\n       KEY ix_latency_server_latency (server_id, latency),\n       KEY ix_latency_time (ts)\n       )\n']], ['How to store a vector of time/value data in a database'], 4], [(1201492, 1), [['I want be able to query the I/O latencies from 1:00 PM to 3:00 PM for the server  Atriedes  on  August 19th, 2007'], ['I want to also be able to query the times that the I/O latency on server Harkonnen where the I/O latencies are above 40 ms.']], [[" SELECT  *\nFROM    t_latency\nWHERE   server_id = @id_of_atriedes\n        AND ts BETWEEN '2007-08-19 01:00' AND '2007-08-19 03:00'\n--  will use ix_latency_server_time_latency\n"]], ['How to store a vector of time/value data in a database'], 4], [(1201492, 2), [['I want to also be able to query the times that the I/O latency on server Harkonnen where the I/O latencies are above 40 ms.'], ['I want to find all the servers that had latencies above  100  ms on  August 1st, 2007 .']], [[' SELECT  *\nFROM    t_latency\nWHERE   server_id = @id_of_harkonnen\n        AND latency > .04\n--  will use ix_latency_server_latency\n']], ['How to store a vector of time/value data in a database'], 4], [(1201492, 3), [['I want to find all the servers that had latencies above  100  ms on  August 1st, 2007 .'], ['-10000']], [[" SELECT  DISTINCT server\nFROM    t_latency\nWHERE   ts >= '2007-08-01 00:00'\n        AND ts < '2007-08-02 00:00'\n        AND latency > 0.1\n--  will use ix_latency_time\n"]], ['How to store a vector of time/value data in a database'], 4], [(1202205, 0), [['add the predicate to the join condition...'], ['Also, does MySql have Coalesce operator ? If so, you can change to:']], [["  SELECT courses.CourseID,     \n     SUM(IF( sessions.Duration IS NULL , 0, sessions.Duration)) AS Hrs    \n FROM courses  \n    LEFT JOIN sessions \n     ON courses.CourseID = sessions.CourseID\n         And sessions.SessionDate \n              Between '2009-06-01' And '2009-06-30'   \n Where courses.TrainerID = 113    \n GROUP BY courses.CourseID\n"]], ['How to limit a join when second table may not have relevant rows'], 2], [(1202205, 1), [['Also, does MySql have Coalesce operator ? If so, you can change to:'], ['-10000']], [["  SELECT courses.CourseID,     \n     SUM(Coalesce(sessions.Duration, 0)) AS Hrs    \n FROM courses  \n    LEFT JOIN sessions \n     ON courses.CourseID = sessions.CourseID\n         And sessions.SessionDate \n              Between '2009-06-01' And '2009-06-30'   \n Where courses.TrainerID = 113    \n GROUP BY courses.CourseID\n"]], ['How to limit a join when second table may not have relevant rows'], 2], [(1203417, 0), [['As the Microsoft How-To mentions, the default installation is a named instance as well, with the name "SQLExpress", which is why if you want to stop or start the service with  net start  or `net stop\' you need to write something like:'], ['and the hostname part of the connection string for a default SQL named instance is:']], [[' net start mssql$sqlexpress\n']], ['Installing SQL Server Express 2005 - but it already exists on the machine'], 2], [(1203417, 1), [['and the hostname part of the connection string for a default SQL named instance is:'], ['-10000']], [[' .\\SQLEXPRESS (or localhost\\SQLEXPRESS)\n']], ['Installing SQL Server Express 2005 - but it already exists on the machine'], 2], [(1203826, 0), [['For MSSQL, something like'], ["1  If you were searching for an arbitrary date, you'd still transform both arguments:"]], [[' SELECT DISTINCT CustomerID\nFROM TableName\n--I assume you want midnight orders as well - so use >=\nWhere OrderDate >= DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()))\n']], ['SQL statement help -- Select customers who ordered today'], 2], [(1203826, 1), [["1  If you were searching for an arbitrary date, you'd still transform both arguments:"], ['-10000']], [[' SELECT DISTINCT CustomerID\nFROM TableName\nWhere \n    OrderDate >= DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()))\n    --You *do not* want midnight of the next day, as it would duplicate orders\n    AND OrderDate < DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()) + 1)\n']], ['SQL statement help -- Select customers who ordered today'], 2], [(1206886, 0), [['Try the undocumented sp_MSforeachdb '], ['The only way that comes to mind to do it as a query is to build the select statement dynamically  (insert standard dynamic sql warning/disapproval here)']], [[" EXECUTE master.sys.sp_MSforeachdb \n'select table_catalog from \ninformation_schema.tables where table_name like ''MyTable%'''\n"]], ["Query SQL Server data dictionary to find all databases containing table 'x'"], 2], [(1206886, 1), [['The only way that comes to mind to do it as a query is to build the select statement dynamically  (insert standard dynamic sql warning/disapproval here)'], ['*NOTE I added some criteria for the state and collation of the available databases. ']], [["  Declare @SQL varchar(max)\n    Set @SQL = ''\n    Select @SQL = @SQL + Coalesce('Select Distinct \n    table_catalog from ' + name  + '.information_schema.tables \n    where table_name like ''mytable%''  UNION ','' )\n    from sys.databases where state_desc = 'ONLINE'\n    and collation_name =  'SQL_Latin1_General_CP1_CI_AS'\n    set @SQL =  Substring(@SQL, 1, Len(@SQL) - 6) + ' order by table_catalog  '\n    exec (@SQL)\n"]], ["Query SQL Server data dictionary to find all databases containing table 'x'"], 2], [(1207740, 0), [['Replace the  Count  statements with'], ['To prune  ItemName s without any added dates, the query block had to be enclosed in a larger query, since checking against a calculated field cannot be done from inside a query.  The end result is this query:']], [[' Sum(Iif(DateDiff("d",DateAdded,Date())>=91,Iif(DateDiff("d",DateAdded,Date())<=180,\'1\',\'0\'),\'0\')) AS BTWN_91_180,\n']], ['Make a query Count() return 0 instead of empty'], 2], [(1207740, 1), [['To prune  ItemName s without any added dates, the query block had to be enclosed in a larger query, since checking against a calculated field cannot be done from inside a query.  The end result is this query:'], ['-10000']], [[' SELECT *\nFROM \n     (\n     SELECT DISTINCT Source.ItemName AS InvestmentManager, \n     Sum(Iif(DateDiff("d",DateAdded,Date())>=20,Iif(DateDiff("d",DateAdded,Date())<=44,\'1\',\'0\'),\'0\')) AS BTWN_20_44,\n     Sum(Iif(DateDiff("d",DateAdded,Date())>=45,Iif(DateDiff("d",DateAdded,Date())<=60,\'1\',\'0\'),\'0\')) AS BTWN_45_60,\n     Sum(Iif(DateDiff("d",DateAdded,Date())>=61,Iif(DateDiff("d",DateAdded,Date())<=90,\'1\',\'0\'),\'0\')) AS BTWN_61_90,\n     Sum(Iif(DateDiff("d",DateAdded,Date())>=91,Iif(DateDiff("d",DateAdded,Date())<=180,\'1\',\'0\'),\'0\')) AS BTWN_91_180,\n     Sum(Iif(DateDiff("d",DateAdded,Date())>180,\'1\',\'0\')) AS GT_180,\n     Sum(Iif(DateDiff("d",DateAdded,Date())>=20,\'1\',\'0\')) AS Total\n     FROM Source\n     WHERE CompleteState=\'FAILED\'\n     GROUP BY ItemName\n     )\nWHERE Total > 0;\n']], ['Make a query Count() return 0 instead of empty'], 2], [(1207753, 0), [['Works in both Oracle and SQL Server, I believe is all standard SQL, from later standards:'], ["EDIT  I don't know why I used the WITH, the solution is probably easier to read using an inline view:"]], [[' with T_with_RN as\n    (select Department\n        , Category\n        , row_number() over (partition by Department order by count(*) Desc) as RN\n    from T\n    group by Department, Category)\nselect Department, Category\nfrom T_with_RN\nwhere RN = 1\n']], ['Select most frequently occurring records using two or more grouping columns'], 3], [(1207753, 1), [["EDIT  I don't know why I used the WITH, the solution is probably easier to read using an inline view:"], ['Test cases:']], [[' select Department, Category\nfrom (select Department\n    , Category\n    , row_number() over (partition by Department order by count(*) Desc) as RN\n    from T\n    group by Department, Category) T_with_RN\nwhere RN = 1\n']], ['Select most frequently occurring records using two or more grouping columns'], 3], [(1207753, 2), [['Test cases:'], ['-10000']], [[" create table T (\n    Department varchar(10) null,\n    Category varchar(10) null\n);\n\n-- Original test case\ninsert into T values ('0001', 'A');\ninsert into T values ('0002', 'D');\ninsert into T values ('0003', 'A');\ninsert into T values ('0003', 'A');\ninsert into T values ('0003', 'C');\ninsert into T values ('0004', 'B');\n-- Null Test cases:\ninsert into T values (null, 'A');\ninsert into T values (null, 'B');\ninsert into T values (null, 'B');\ninsert into T values ('0005', null);\ninsert into T values ('0005', null);\ninsert into T values ('0005', 'X');\n-- Tie Test case\ninsert into T values ('0006', 'O');\ninsert into T values ('0006', 'P');\n"]], ['Select most frequently occurring records using two or more grouping columns'], 3], [(1207983, 0), [['This query:'], ['is much more efficient than this one:']], [[' CREATE TABLE a (id, data)\nCREATE TABLE b (id, data)\nCREATE TABLE ab (a_id, b_id, PRIMARY KEY (a_id, b_id))\nCREATE TABLE business_rule (id, a_id, b_id, FOREIGN KEY (a_id, b_id) REFERENCES ab)\n\nSELECT  *\nFROM    business_rule br\nJOIN    a\nON      a.id = br.a_id\n']], ['in general, should every table in a database have an identity field to use as a PK?'], 2], [(1207983, 1), [['is much more efficient than this one:'], [', for obvious reasons.']], [[' CREATE TABLE a (id, data)\nCREATE TABLE b (id, data)\nCREATE TABLE ab (id, a_id, b_id, PRIMARY KEY (id), UNIQUE KEY (a_id, b_id))\nCREATE TABLE business_rule (id, ab_id, FOREIGN KEY (ab_id) REFERENCES ab)\n\nSELECT  *\nFROM    business_rule br\nJOIN    a_to_b ab\nON      br.ab_id = ab.id\nJOIN    a\nON      a.id = ab.a_id\n']], ['in general, should every table in a database have an identity field to use as a PK?'], 2], [(1208854, 0), [['Inline view:'], ['CTE:']], [[' select ...\nfrom (select ... , CASE WHEN col1 > col2 THEN SUM(col3*col4) ELSE 0 END AS some_product\n   from ...\n   group by col1, col2 ... ) T\ngroup by some_product ...\n']], ['SQL GROUP BY CASE statement with aggregate function'], 2], [(1208854, 1), [['CTE:'], ['-10000']], [[' with T as (select ... , CASE WHEN col1 > col2 THEN SUM(col3*col4) ELSE 0 END AS some_product\n   from ...\n   group by col1, col2 ... )\nselect ...\nfrom T\ngroup by some_product ... \n']], ['SQL GROUP BY CASE statement with aggregate function'], 2], [(1209025, 0), [['First we create the tables:'], ['Then we create the mv logs:']], [[' SQL> create table mastertable (id number(10) not null primary key);\n\nSQL> create table tablea\n(id number(10) not null primary key\n, master_id number(10) not null references mastertable (id));\n\nSQL> create table tableb\n(id number(10) not null primary key\n, master_id number(10) not null references mastertable (id));\n\nSQL> create table tablec\n(id number(10) not null primary key\n, master_id number(10) not null references mastertable (id));\n']], ['Using Scripts to Ensure Data Integrity in Oracle'], 5], [(1209025, 1), [['Then we create the mv logs:'], ['The mv (the umarker column is really needed!):']], [[' SQL> create materialized view log on tablea with rowid (master_id) \n     including new values;\n\nSQL> create materialized view log on tableb with rowid (master_id) \n     including new values;\n\nSQL> create materialized view log on tablec with rowid (master_id) \n     including new values;\n']], ['Using Scripts to Ensure Data Integrity in Oracle'], 5], [(1209025, 2), [['The mv (the umarker column is really needed!):'], ["Now we add a check constraint to this mv to ensure that you can't insert twice in the same detail table per master_id: "]], [[" SQL> create materialized view table_abc\n     refresh fast with rowid on commit\n     as\n     select master_id,count(*) master_count, 'A' umarker\n     from   tablea\n     group by master_id\n     union all\n     select master_id,count(*) master_count, 'B' umarker\n     from   tableb\n     group by master_id\n     union all\n     select master_id,count(*) master_count, 'C' umarker\n     from   tablec\n     group by master_id\n     /\n"]], ['Using Scripts to Ensure Data Integrity in Oracle'], 5], [(1209025, 3), [["Now we add a check constraint to this mv to ensure that you can't insert twice in the same detail table per master_id: "], ["And we add a unique function based index to this mv to ensure that you can't insert in table a and table b with the same master_id:  "]], [[' SQL> alter table table_abc add check (master_count in (0,1) );\n']], ['Using Scripts to Ensure Data Integrity in Oracle'], 5], [(1209025, 4), [["And we add a unique function based index to this mv to ensure that you can't insert in table a and table b with the same master_id:  "], ['Test 1 (the happy path):']], [[' SQL> create unique index table_abc_ufbi1 on table_abc\n     (case when master_count = 1 then master_id else null end);\n']], ['Using Scripts to Ensure Data Integrity in Oracle'], 5], [(1210993, 0), [['Method 1 is straightforward, I will demonstrate method 2:'], ['Here I insert a row with another session and commit:']], [[' session 1> ALTER SESSION SET ISOLATION_LEVEL=SERIALIZABLE;\n\nSession altered\n\nsession 1> INSERT INTO TEST_B\n        2  (ID, BATCH, WHO, AMT)\n        3  SELECT TEST_B_SEQ.NEXTVAL, 42, WHO, AMT FROM\n        4  (\n        5    SELECT SRC AS WHO, SUM(AMT) AMT FROM TEST_P\n        6    WHERE B_ID_SRC IS NULL AND B_ID_DEST IS NULL\n        7    GROUP BY SRC\n        8    UNION ALL\n        9    SELECT DEST, -SUM(AMT) FROM TEST_P\n       10    WHERE B_ID_SRC IS NULL AND B_ID_DEST IS NULL\n       11    GROUP BY DEST)\n       12  ;\n\n6 rows inserted\n']], ['Question about Oracle locking and summarisation'], 4], [(1210993, 1), [['Here I insert a row with another session and commit:'], ['Session 1 does not see the row inserted with session 2 yet:']], [[" session 2> INSERT INTO TEST_P VALUES (6, 'B4', 'S2', 2000,NULL, NULL);\n\n1 row inserted\n\nsession 2> commit;\n\nCommit complete\n"]], ['Question about Oracle locking and summarisation'], 4], [(1210993, 2), [['Session 1 does not see the row inserted with session 2 yet:'], ['The result is consistent, after the commit session 1 will see the row inserted by session 2:']], [[' session 1> select * from TEST_P;\n\n  ID SRC DEST   AMT B_ID_SRC B_ID_DEST\n---- --- ---- ----- -------- ---------\n   1 B1  S1      10          \n   2 B2  S1      20          \n   3 B3  S2      40          \n   4 B1  S2      80          \n   5 B4  S2      16\n\nsession 1> UPDATE TEST_P\n        2    SET B_ID_SRC = (SELECT ID FROM TEST_B WHERE BATCH = 42 AND TEST_P.SRC = WHO),\n        3        B_ID_DEST = (SELECT ID FROM TEST_B WHERE BATCH = 42 AND TEST_P.DEST = WHO);\n\n5 rows updated\n\nsession 1> commit;\n\nCommit complete\n']], ['Question about Oracle locking and summarisation'], 4], [(1210993, 3), [['The result is consistent, after the commit session 1 will see the row inserted by session 2:'], ['-10000']], [[' session 1> select * from TEST_P;\n\n  ID SRC DEST   AMT B_ID_SRC B_ID_DEST\n---- --- ---- ----- -------- ---------\n   6 B4  S2    2000          \n   1 B1  S1      10      100       104\n   2 B2  S1      20      101       104\n   3 B3  S2      40      102       105\n   4 B1  S2      80      100       105\n   5 B4  S2     160      103       105\n\n6 rows selected\n']], ['Question about Oracle locking and summarisation'], 4], [(1211286, 0), [[''], ['']], [[' UPDATE sometable \nSET \n        price1 =        ISNULL(@param1, price1),\n        price2 =        ISNULL(@param2, price2),\n        price3 =        ISNULL(@param3, price3),\n        price4 =        ISNULL(@param4, price4)\nWHERE\n        ID = @param5\n']], ['Retain original value in DataBase when NULL value is passed to Stored Procedure'], 2], [(1211286, 1), [[''], ['']], [[' UPDATE sometable \nSET \n        price1 =        COALESCE(@param1, price1),\n        price2 =        COALESCE(@param2, price2),\n        price3 =        COALESCE(@param3, price3),\n        price4 =        COALESCE(@param4, price4)\nWHERE\n        ID = @param5\n']], ['Retain original value in DataBase when NULL value is passed to Stored Procedure'], 2], [(1212093, 0), [["Here's me mocking up your table:"], ['Then you can do an anonymous inner join to get the data you want.']], [[' declare @Borg table (\n    ID int,\n    Foo int,\n    Bar int,\n    Blagh int\n)\ninsert into @Borg values (1,10,20,30)\ninsert into @Borg values (2,10,5,1)\ninsert into @Borg values (3,20,50,70)\ninsert into @Borg values (4,20,75,12)\n']], ['How do you group by one column and retrieve a row with the minimum value of another column in T/SQL?'], 4], [(1212093, 1), [['Then you can do an anonymous inner join to get the data you want.'], ['If you need to capture  NULLs  in the field across which you are aggregating (by MIN in this case), then you could  coalesce  the NULL with an acceptably high (or low) value (this is a hack):']], [[' select B.* from @Borg B inner join \n(\n    select Foo,\n        MIN(Bar) MinBar \n    from @Borg \n    group by Foo\n) FO\non FO.Foo = B.Foo and FO.MinBar = B.Bar\n']], ['How do you group by one column and retrieve a row with the minimum value of another column in T/SQL?'], 4], [(1212093, 2), [['If you need to capture  NULLs  in the field across which you are aggregating (by MIN in this case), then you could  coalesce  the NULL with an acceptably high (or low) value (this is a hack):'], ['Or you could go for a UNION and attach all such values to the bottom of your resultset.']], [[' ...\nMIN(coalesce(Bar,1000000)) MinBar -- A suitably high value if you want to exclude this row, make it suitably low to include\n...\n']], ['How do you group by one column and retrieve a row with the minimum value of another column in T/SQL?'], 4], [(1212093, 3), [['Or you could go for a UNION and attach all such values to the bottom of your resultset.'], ["The latter will not group values in @Borg with the same  Foo  value because it doesn't know how to select between them."]], [[' on FO.Foo = B.Foo and FO.MinBar = B.Bar\nunion select * from @Borg where Bar is NULL\n']], ['How do you group by one column and retrieve a row with the minimum value of another column in T/SQL?'], 4], [(1212504, 0), [['Not sure if I totally understood your question here - or are you looking for this? You would grab all the /things/Fruit elements a "nodes" and cross join them against your "base data" in the myTable - the result would be one row per XML element in your XML data field:'], ['Or give me a count of all items that use an imageId of 55.']], [[" select \n   omID,\n   T.Fruit.query('.')\nfrom \n   dbo.myTable\ncross apply\n   omText.nodes('/things/Fruit') as T(Fruit)\nwhere \n   T.Fruit.value('(title)[1]', 'varchar(50)') = 'X'\n"]], ['Working with the SQL Server XML data type'], 2], [(1212504, 1), [['Or give me a count of all items that use an imageId of 55.'], ["Is that what you're looking for?"]], [[" select \n   count(*)\nfrom \n   dbo.myTable\ncross apply\n   omText.nodes('/things/Fruit') as T(Fruit)\nwhere \n   T.Fruit.value('(imageId)[1]', 'int') = 55\n"]], ['Working with the SQL Server XML data type'], 2], [(1212594, 0), [['For instance, if your data looks like this:'], ['Normalizing the table will give the following:']], [[' id  value\n\n1   Really really long value 1\n2   Really really long value 1\n3   Really really long value 1\n…\n1000   Really really long value 2\n1001   Really really long value 2\n1002   Really really long value 2\n…\n']], ['mysql query speed'], 2], [(1212594, 1), [['Normalizing the table will give the following:'], ["Scanning rows of  4 -byte integers is much faster than thousand-byte  VARCHAR 's, and the query on the second design will complete faster even despite the extra  JOIN ."]], [[' id  value\n\n1   1\n2   1\n3   1 \n…\n1000   2\n1001   2\n1002   2\n…\n\nval_id  value\n1       Really really long value 1\n2       Really really long value 1\n']], ['mysql query speed'], 2], [(1216099, 0), [['Have a query to find the tags of the current post, something like'], ["Then using those tag id's, this query should return you the id's of posts with 4,3,2,... matching tags:"]], [[' SELECT tag_id\nFROM Post_tag_nn\nWHERE post_id = $post_id;\n']], ['finding the posts related by tags with one specific post in mysql'], 2], [(1216099, 1), [["Then using those tag id's, this query should return you the id's of posts with 4,3,2,... matching tags:"], ['-10000']], [[' SELECT post_id, COUNT(post_id) AS tag_count\nFROM Post_tag_nn\nWHERE tag_id IN ($array_of_tag_ids)\nGROUP BY post_id\nORDER BY tag_count DESC;\n']], ['finding the posts related by tags with one specific post in mysql'], 2], [(1216224, 0), [['You can select and add a WHERE clause with a DATEDIFF using minutes:'], ['And of course, if you only wants those rows which are  MORE  than 3 days and 30 minutes away, just use the opposite:']], [[' SELECT (fields)\nFROM (table)\nWHERE \n  DATEDIFF(MINUTE, CREATETIME, getutcdate()) <= (3*24*60 + 30)\n']], ['DateDiff in SQL Server asking for help'], 4], [(1216224, 1), [['And of course, if you only wants those rows which are  MORE  than 3 days and 30 minutes away, just use the opposite:'], ['A sample:']], [[' WHERE \n  DATEDIFF(MINUTE, CREATETIME, getutcdate()) > (3*24*60 + 30)\n']], ['DateDiff in SQL Server asking for help'], 4], [(1216224, 2), [['A sample:'], ['gives as result:']], [[" SELECT      \n  DATEDIFF(MINUTE, '2009-08-01 08:00:00', getutcdate()),\n  DATEDIFF(MINUTE, '2009-07-31 20:00:00', getutcdate()),\n  DATEDIFF(MINUTE, '2009-07-23 20:00:00', getutcdate())\n"]], ['DateDiff in SQL Server asking for help'], 4], [(1216224, 3), [['gives as result:'], ['So the first two dates are still within your 4350 minute bracket (less than 3 days and 30 minutes ago), while the third date is further away.']], [[' 96    816    12337\n']], ['DateDiff in SQL Server asking for help'], 4], [(1218103, 0), [['How about:'], ['Got it.  Here\'s one that matches lines with 8 or fewer pairs of "#" characters, or with an odd number of them:']], [[' /^\\((?:#.+#,\\s*){8}(?:#.+#\\s*)\\)[,;]$/gm\n']], ['Regex for incomplete lines within known start and end strings'], 5], [(1218103, 1), [['Got it.  Here\'s one that matches lines with 8 or fewer pairs of "#" characters, or with an odd number of them:'], ['which would match a line like:']], [[' ^\\((?:[^#\\n]*?#[^#\\n]*?#[,\\s]?){0,8}(?:[^#]*#[^#]*)?\\)[,;]\\s*$\n']], ['Regex for incomplete lines within known start and end strings'], 5], [(1218103, 2), [['which would match a line like:'], ['or a line like:']], [[' (#text1#,#text2#,#text3#,#text4#),\n']], ['Regex for incomplete lines within known start and end strings'], 5], [(1218103, 3), [['or a line like:'], ['It looks like your new examples no longer are one-per-line, and you no longer have the "single #" case, so it can be simplified to:']], [[' (#text1#,#text2#,#text3#,#text4#,#),\n']], ['Regex for incomplete lines within known start and end strings'], 5], [(1218103, 4), [['It looks like your new examples no longer are one-per-line, and you no longer have the "single #" case, so it can be simplified to:'], ['-10000']], [[' \\((?:[^#\\n]*?#[^#\\n]*?#[,\\s]?){0,8}\\)[,;]\\s*\n']], ['Regex for incomplete lines within known start and end strings'], 5], [(1218620, 0), [['EDIT :  Have tested the following and works'], ['Example code:']], [[" SELECT\n    t1.memberid,\n    t1.[name],\n    ISNULL(STUFF(\n      (\n        SELECT\n          ', ' + t2.interestName\n          FROM \n              table2 t2\n          INNER JOIN \n              table3 t3            \n              ON \n              t2.interestId = t3.interestId\n          WHERE \n              t3.memberid = t1.memberid\n          FOR XML PATH('')\n       ), 1, 2, ''\n    ), 'None') As interests\nFROM\n    table1 t1\nGROUP BY\n    t1.memberid,\nt1.[name]\n"]], ['How can i select multiple row and cascade them?'], 3], [(1218620, 1), [['Example code:'], ['Results']], [[" DECLARE @table1 TABLE ( memberid INT IDENTITY(1,1), name VARCHAR(25) )\n\nINSERT INTO @table1 VALUES('dennis');\nINSERT INTO @table1 VALUES('mary');\nINSERT INTO @table1 VALUES('bill');\n\nDECLARE @table2 TABLE ( interestId INT IDENTITY(1,1), interestName VARCHAR(25) )\n\nINSERT INTO @table2 VALUES('play basketball');\nINSERT INTO @table2 VALUES('music');\nINSERT INTO @table2 VALUES('movie');\nINSERT INTO @table2 VALUES('play hockey');\nINSERT INTO @table2 VALUES('wine tasting');\nINSERT INTO @table2 VALUES('cheese rolling');\n\nDECLARE @table3 TABLE ( memberid INT, interestId INT )\n\nINSERT INTO @table3 VALUES(1,1);\nINSERT INTO @table3 VALUES(1,2);\nINSERT INTO @table3 VALUES(1,3);\nINSERT INTO @table3 VALUES(2,2);\nINSERT INTO @table3 VALUES(2,4);\nINSERT INTO @table3 VALUES(2,6);\nINSERT INTO @table3 VALUES(3,1);\nINSERT INTO @table3 VALUES(3,5);\nINSERT INTO @table3 VALUES(3,6);\n\n    SELECT\n        t1.memberid,\n        t1.[name],\n        ISNULL(STUFF(\n          (\n            SELECT\n              ', ' + t2.interestName\n              FROM \n                  @table2 t2\n              INNER JOIN \n                  @table3 t3            \n                  ON \n                  t2.interestId = t3.interestId\n              WHERE \n                  t3.memberid = t1.memberid\n              FOR XML PATH('')\n           ), 1, 2, ''\n        ), 'None') As interests\n    FROM\n        @table1 t1\n    GROUP BY\n        t1.memberid,\n        t1.[name]\n"]], ['How can i select multiple row and cascade them?'], 3], [(1218620, 2), [['Results'], ['-10000']], [[' memberid    name                      interests\n----------- ----------------------------------------------------------------------- \n1           dennis                    play basketball, music, movie\n2           mary                      music, play hockey, cheese rolling\n3           bill                      play basketball, wine tasting, cheese rolling\n']], ['How can i select multiple row and cascade them?'], 3], [(1218981, 0), [['1) create DBFinal, disable autoincrement for primary keys (so u can insert primary key values from DB1, DB2, ...\n2) generate a select that selects all rows and columns for each table. like:'], ['3) by using text-copy paste assemble a "insert into select" statement something like:']], [[' SELECT key, atrb1, atrb2 FROM table1\n']], ["Copy data from tables in one db to duplicate tables in another db - What's the SQL?"], 2], [(1218981, 1), [['3) by using text-copy paste assemble a "insert into select" statement something like:'], ['4) \nIf u got same key values in different databases (for different values) u need to change all primary - foreign key values so u dont get duplicates in the target database. I recommend adding a value (row count + 1 in DBFinal). \nINSERT into table1 (key, atrb1, atrb2) IN DBFinal \nSELECT key+9001, atrb1, atrb2 FROM table1']], [[' INSERT into DBFinal.user.table1 (key, atrb1, atrb2) SELECT key, atrb1, atrb2 FROM table1\n']], ["Copy data from tables in one db to duplicate tables in another db - What's the SQL?"], 2], [(1221601, 0), [['Insert data into the store:'], ['Query the sum of the prices of all products:']], [[' require \'pstore\'\nstore = PStore.new("/tmp/store")\nstore.transaction do\n  store["products"] = [{:name => "Test", :price => 100}\n                       {:name => "Bla", :price => 120}\n                       {:name => "Oink", :price => 300}]\nend\n']], ['Embedded analog of CouchDB, same as sqlite for SQL Server'], 2], [(1221601, 1), [['Query the sum of the prices of all products:'], ['More information in this  blog-post']], [[" store.transaction do\n  store['products'].map {|p| p[:price]}.inject {|sum, p| sum + p}\nend\n"]], ['Embedded analog of CouchDB, same as sqlite for SQL Server'], 2], [(1222482, 0), [['This (if you want to check that the user exists)'], ["or this (if you don't want to check that the user exists):"]], [[' SELECT  `User_Setting`.`user_id`,\n        `User_Setting`.`value`,\n        `Setting`.`setting_id`,\n        `Setting`.`default_value`,\n        `Setting`.`value_type`,\nFROM    user\nCROSS JOIN\n        setting\nLEFT JOIN\n        user_setting\nON      user_setting.user_id = user_id\n        AND user_setting.setting_id = setting.setting_id\nWHERE   user_id = 1\n']], ['MySQL Join excluding certain records?'], 2], [(1222482, 1), [["or this (if you don't want to check that the user exists):"], ['-10000']], [[' SELECT  `User_Setting`.`user_id`,\n        `User_Setting`.`value`,\n        `Setting`.`setting_id`,\n        `Setting`.`default_value`,\n        `Setting`.`value_type`,\nFROM    setting\nLEFT JOIN\n        user_setting\nON      user_setting.user_id = 1\n        AND user_setting.setting_id = setting.setting_id\n']], ['MySQL Join excluding certain records?'], 2], [(1224723, 0), [['Try this regex:'], ['This is how you can use it:']], [[" '^ *[^[ ]|\\\\[/lang_[a-z]{2}\\\\] *[^[ ]'\n"]], ['Need REGEXP Matching in MySQL'], 2], [(1224723, 1), [['This is how you can use it:'], ['It should handle all cases:']], [[" select * \nfrom <table> \nwhere <field> regexp '^ *[^[ ]|\\\\[/lang_[a-z]{2}\\\\] *[^[ ]'\n"]], ['Need REGEXP Matching in MySQL'], 2], [(1227039, 0), [['To convert from hexadecimal to decimal:'], ['To convert from decimal to hexadecimal:']], [[" select to_number('AA', 'xx') from dual;     \n"]], ['Oracle: How do I convert hex to decimal in Oracle SQL?'], 2], [(1227039, 1), [['To convert from decimal to hexadecimal:'], ['-10000']], [[" select to_char(111, 'xxxx') from dual;\n"]], ['Oracle: How do I convert hex to decimal in Oracle SQL?'], 2], [(1227083, 0), [['In  Oracle :'], ['In  SQL Server 2005+ :']], [[' SELECT  level - 1, SIN((level - 1) * 3.141592653 / 12)\nFROM    dual\nCONNECT BY\n        level <= 24\n']], ['Sine curve on graph - SQL'], 4], [(1227083, 1), [['In  SQL Server 2005+ :'], ['In  PostgreSQL :']], [[' WITH    rows AS\n        (\n        SELECT  0 AS level\n        UNION ALL\n        SELECT  level + 1\n        FROM    rows\n        WHERE   level <= 23\n        )\nSELECT  level, SIN((level) * 3.141592653 / 12)\nFROM    rows\n']], ['Sine curve on graph - SQL'], 4], [(1227083, 2), [['In  PostgreSQL :'], ['In  MySQL :']], [[' SELECT  level, SIN(level * 3.141592653 / 12)\nFROM    generate_series(0, 23) level\n']], ['Sine curve on graph - SQL'], 4], [(1227083, 3), [['In  MySQL :'], ['-10000']], [[' SELECT  level, SIN(level * 3.141592653 / 12)\nFROM    (\n        SELECT  0 AS level\n        UNION ALL\n        SELECT  1 AS level\n        UNION ALL\n        …\n        /*\n        Yes, you need to repeat it 24 times.\n\n        Everyone who reads it: please call MySQL and ask them\n        to implement generate_series.\n\n        Thanks.\n        */\n        UNION ALL\n        SELECT  23 AS level\n        ) q\n']], ['Sine curve on graph - SQL'], 4], [(1227619, 0), [['Why not try:'], ["For example, your complete solution may be as follows (I'm using LEFT OUTER JOIN because you did so, I'm not sure it's the right way, maybe INNER JOIN is more suitable):"]], [[' SELECT MAX(id)\nFROM tblquoteproposal\nGROUP BY requestid\n']], ['Retrieve last (latest) distinct highest value'], 2], [(1227619, 1), [["For example, your complete solution may be as follows (I'm using LEFT OUTER JOIN because you did so, I'm not sure it's the right way, maybe INNER JOIN is more suitable):"], ['-10000']], [[' SELECT ... your fields ...\nFROM \n    tblquoteproposal p LEFT OUTER JOIN tblrequest r \n        on p.requestid = r.requestid\nWHERE p.id IN (\n    SELECT MAX(id)\n    FROM tblquoteproposal\n    GROUP BY requestid )\n']], ['Retrieve last (latest) distinct highest value'], 2], [(1228338, 0), [['Seems you want a French description if it exists, otherwise fallback to English.'], [', or this:']], [[" SELECT  item.id,\n        COALESCE(\n        (\n        SELECT  lang.data\n        FROM    language l\n        WHERE   l.item = i.id\n                AND l.language = 'fr'\n        ),\n        (\n        SELECT  lang.data\n        FROM    language l\n        WHERE   l.item = i.id\n                AND l.language = 'en'\n        )\n        ) AS description\nFROM    item i\n"]], ['LEFT JOIN using OR'], 3], [(1228338, 1), [[', or this:'], ['In  SQL Server ,  Oracle  and  PostgreSQL  this one will probably more efficient if you have lots of French descriptions:']], [[" SELECT  item.id,\n        COALESCE(lfr.data, len.data)\nFROM    item i\nLEFT JOIN\n        language lfr\nON      lfr.item = i.id\n        AND lfr.language = 'fr'\nLEFT JOIN\n        language len\nON      len.item = i.id\n        AND len.language = 'en'\n"]], ['LEFT JOIN using OR'], 3], [(1228338, 2), [['In  SQL Server ,  Oracle  and  PostgreSQL  this one will probably more efficient if you have lots of French descriptions:'], ['This query will use an efficient method ( HASH JOIN  or  MERGE JOIN ) to join the French descriptions, and will fallback to English one only if necessary.']], [[" SELECT  item.id,\n        COALESCE(\n        lfr.data,\n        (\n        SELECT  lang.data\n        FROM    language l\n        WHERE   l.item = i.id\n                AND l.language = 'en'\n        )\n        ) AS description\nFROM    item i\nLEFT JOIN\n        language lfr\nON      lfr.item = i.id\n        AND lfr.language = 'fr'\n"]], ['LEFT JOIN using OR'], 3], [(1228748, 0), [['-10000'], ['This query will return the first per-partition value of  column2  in no particular order (i. e. the  CBO  is free to choose any order it considers the best).']], [[' WITH ordered_table AS\n        (\n        SELECT  *\n        FROM    table\n        ORDER BY\n                column1\n        )\nSELECT  FIRST_VALUE(column2 IGNORE NULLS) OVER (PARTITION BY column3)\nFROM    ordered_table\n']], ['Differences between two analytic queries'], 2], [(1228748, 1), [['This query will return the first per-partition value of  column2  in no particular order (i. e. the  CBO  is free to choose any order it considers the best).'], ['This query will return the first per-partition value of  column2 , with partitions ordered by  column1 .']], [[' SELECT  FIRST_VALUE(column2 IGNORE NULLS) OVER (PARTITION BY column3 ORDER BY column1)\nFROM    table;\n']], ['Differences between two analytic queries'], 2], [(1229054, 0), [["If you use the  PreDeployEvent  property you'll need to specify the single command line to be executed. A crude example:"], ["If you want more control, use the  BeforeDeploy  target which will allow you to run one or \nmore custom msbuild tasks. Here's another crude example:"]], [[' <PropertyGroup>\n  <PreDeployEvent>sqlcmd.exe -i myscript.sql</PreDeployEvent>\n</PropertyGroup>\n']], ['Pre-Deployment in Database project'], 2], [(1229054, 1), [["If you want more control, use the  BeforeDeploy  target which will allow you to run one or \nmore custom msbuild tasks. Here's another crude example:"], ['By the way, there are plenty of custom tasks freely available, one example being those at  www.msbuildextensionpack.com .']], [[' <Target Name="BeforeDeploy">\n  <Message Text="BeforeDeploy" Importance="high" />\n</Target>\n']], ['Pre-Deployment in Database project'], 2], [(1229424, 0), [['-10000'], [', or this:']], [[' SELECT  field1\nFROM    mytable\nWHERE   id = $id\nORDER BY\n        criteria = $criteria DESC, id\nLIMIT 5\n']], ['Mysql "order of operations" Question'], 2], [(1229424, 1), [[', or this:'], ['The latter is more efficient if you have an index on  (id, criteria)  (in this order).']], [[' SELECT  *\nFROM    (\n        SELECT  field1\n        FROM    mytable\n        WHERE   id = $id\n                AND criteria = $criteria\n        ORDER BY\n                id\n        LIMIT 5\n        ) q\nUNION\nFROM    (\n        SELECT  field1\n        FROM    mytable\n        WHERE   id = $id\n        ORDER BY\n                id\n        LIMIT 5\n        ) q2\nORDER BY\n        criteria = $criteria DESC, id\nLIMIT 5\n']], ['Mysql "order of operations" Question'], 2], [(1229606, 0), [['You might try with an  ISO-formatted  string as Pax implicitly suggested instead of the locale-dependent one you used. This SQL statement  will always work , regardless of your locale date format setting.'], ['With the sample data Pax provided : ']], [[" SELECT DATE('2009-04-01')\nFROM SYSIBM.SYSDUMMY1\n"]], ['DB2 Exclude Nulls or set to arbitrary date'], 2], [(1229606, 1), [['With the sample data Pax provided : '], ['But as Pax said :  Dates should be stored in the database as dates, not strings .\nSame for numerical quantities as numerical types, etc.']], [[' SELECT \n    MOD(PODATE / 10000, 100) AS YEAR,\n    MOD(PODATE / 100, 100) AS MONTH,\n    MOD(PODATE, 100) AS DAY\nFROM (VALUES (991231), (090101), (null)) AS A (PODATE)\n']], ['DB2 Exclude Nulls or set to arbitrary date'], 2], [(1231331, 0), [['The following will work on SQL Server 2005+ and Oracle 9i+:'], ['Any database should support:']], [[" WITH groups AS (\n       SELECT t.group,\n              MAX(t.time) 'maxtime'\n         FROM TABLE t\n     GROUP BY t.group)\nSELECT t.id,\n       t.time,\n       t.group\n  FROM TABLE t\n  JOIN groups g ON g.group = t.group AND g.maxtime = t.time\n"]], ['Tricky SQL SELECT Statement'], 2], [(1231331, 1), [['Any database should support:'], ['-10000']], [[" SELECT t.id,\n       t.time,\n       t.group\n  FROM TABLE t\n  JOIN (SELECT t.group,\n               MAX(t.time) 'maxtime'\n          FROM TABLE t\n      GROUP BY t.group) g ON g.group = t.group AND g.maxtime = t.time\n"]], ['Tricky SQL SELECT Statement'], 2], [(1231981, 0), [['Considering your first point, your output is only truncated on display. You can change how many bytes are displayed in SQL*Plus with  SET LONG :'], ['because I can not reproduce with Oracle 10.2.0.3:']], [[' SQL> SELECT XMLTYPE(bfilename(\'D\', \'test.xml\'), \n  2         nls_charset_id(\'WINDOWS-1252\')) xml_data FROM dual;\n\nXML_DATA\n--------------------------------------------------------------------------------\n<?xml version="1.0" encoding="UTF-8"?>\n<badges>\n  <row UserId="3714" Name=\n\nSQL> SET LONG 4000\nSQL> /\n\nXML_DATA\n--------------------------------------------------------------------------------\n<?xml version="1.0" encoding="UTF-8"?>\n<badges>\n  <row UserId="3714" Name="Teacher" Date="2008-09-15T08:55:03.923"/>\n  <row UserId="994" Name="Teacher" Date="2008-09-15T08:55:03.957"/>\n</badges>\n']], ['xml to oracle DB table : encountering problems'], 3], [(1231981, 1), [['because I can not reproduce with Oracle 10.2.0.3:'], ['You can however use another method of accessing XML Data(described in  another SO ):']], [[' SQL> SELECT UserId, NAME, to_timestamp(dt, \'YYYY-MM-DD"T"HH24:MI:SS.FF3\') dt\n  2    FROM (SELECT XMLTYPE(bfilename(\'D\', \'test.xml\'),\n  3                 nls_charset_id(\'WINDOWS-1252\')) xml_data FROM dual),\n  4         XMLTable(\'for $i in /badges/row\n  5                             return $i\'\n  6                   passing xml_data columns UserId NUMBER path \'@UserId\',\n  7                   NAME VARCHAR2(50) path \'@Name\',\n  8                   dt VARCHAR2(25) path \'@Date\');\n\n    USERID NAME      DT\n---------- --------- ----------------------------\n      3714 Teacher   15/09/08 08:55:03,923000000\n       994 Teacher   15/09/08 08:55:03,957000000\n']], ['xml to oracle DB table : encountering problems'], 3], [(1231981, 2), [['You can however use another method of accessing XML Data(described in  another SO ):'], ['-10000']], [[' SQL> SELECT extractvalue(column_value, \'/row/@UserId\') "userID",\n  2         extractvalue(column_value, \'/row/@Name\') "Name",\n  3         extractvalue(column_value, \'/row/@Date\') "Date"\n  4    FROM TABLE(XMLSequence(XMLTYPE(bfilename(\'D\', \'tmp.xml\'),\n  5                     nls_charset_id(\'WINDOWS-1252\')).extract(\'/badges/row\'))) t;\n\nuserID  Name      Date\n------- --------- ------------------------\n3718    Teacher   2008-09-15T08:55:03.923\n994     Teacher   2008-09-15T08:55:03.957\n']], ['xml to oracle DB table : encountering problems'], 3], [(1232445, 0), [['This will replace Carriage Returns (char(13)) with a single space:'], ['If you have Carriage Return + LineFeeds:    ']], [[" UPDATE MyTable\nSET MyColumn = Replace(MyColumn, CHAR(13), ' ')\n"]], ['Importing a table from Access into SQL and removing the carriage returns'], 2], [(1232445, 1), [['If you have Carriage Return + LineFeeds:    '], ['-10000']], [[" UPDATE MyTable\nSET MyColumn = Replace(MyColumn, CHAR(13)+CHAR(10), ' ')\n"]], ['Importing a table from Access into SQL and removing the carriage returns'], 2], [(1232950, 0), [["The database controls how many statements can be executed at a time.  I can't remember if Oracle allows multiple statements per  prepare  or not (MySQL does).  Try this:"], ['Of course, you get better error handling if you break the statements up.  You can use a simple parser to break the string up into individual statements:']], [[' my $dbh = DBI->connect(\n    "dbi:Oracle:dbname",\n    "username",\n    "password",\n    {\n        ChopBlanks       => 1,\n        AutoCommit       => 1,\n        RaiseError       => 1,\n        PrintError       => 1,\n        FetchHashKeyName => \'NAME_lc\',\n    }\n);\n$dbh->do("\n    CREATE TABLE test_dbi1 (\n        test_dbi_intr_no    NUMBER(15),\n        test_dbi_name       VARCHAR2(100)\n    );\n\n    UPDATE mytable \n        SET col1=1;\n\n    CREATE TABLE test_dbi2 (\n        test_dbi_intr_no    NUMBER(15),\n        test_dbi_name       VARCHAR2(100)\n    );\n");\n\n$dbh->disconnect;\n']], ['Perl DBI - run SQL Script with multiple statements'], 2], [(1232950, 1), [['Of course, you get better error handling if you break the statements up.  You can use a simple parser to break the string up into individual statements:'], ['-10000']], [[' #!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nmy $sql = "\n    CREATE TABLE test_dbi1 (\n        test_dbi_intr_no    NUMBER(15),\n        test_dbi_name       VARCHAR2(100)\n    );\n\n    UPDATE mytable\n        SET col1=\';yes;\'\n        WHERE col2=1;\n\n    UPDATE mytable\n        SET col1=\'Don\\\\\'t use ;s and \\\\\'s together, it is a pain\'\n        WHERE col2=1;\n\n\n    CREATE TABLE test_dbi2 (\n        test_dbi_intr_no    NUMBER(15),\n        test_dbi_name       VARCHAR2(100)\n    );\n";\n\nmy @statements = ("");\n#split the string into interesting pieces (i.e. tokens):\n#   \' delimits strings\n#   \\ pass on the next character if inside a string\n#   ; delimits statements unless it is in a string\n#   and anything else\n# NOTE: the grep { ord } is to get rid of the nul\n# characters the split seems to be adding\nmy @tokens     = grep { ord } split /([\\\\\';])/, $sql; \n# NOTE: this \' fixes the stupid SO syntax highlighter\n#this is true if we are in a string and should ignore ; \nmy $in_string  = 0;\nmy $escape     = 0;\n#while there are still tokens to process\nwhile (@tokens) {\n    #grab the next token\n    my $token = shift @tokens;\n    #if we are in a string\n    if ($in_string) {\n        #add the token to the last statement\n        $statements[-1] .= $token;\n        #setup the escape if the token is \\\n        if ($token eq "\\\\") {\n                $escape = 1;\n                next;\n        }\n        #turn off $in_string if the token is \' and it isn\'t escaped\n        $in_string = 0 if not $escape and $token eq "\'";\n        $escape = 0; #turn off escape if it was on\n        #loop again to get the next token\n\n        next;\n    }\n    #if the token is ; and we aren\'t in a string\n    if ($token eq \';\') {\n        #create a new statement\n        push @statements, "";\n        #loop again to get the next token\n        next;\n    }\n    #add the token to the last statement\n    $statements[-1] .= $token;\n    #if the token is \' then turn on $in_string\n    $in_string = 1 if $token eq "\'";\n}\n#only keep statements that are not blank\n@statements = grep { /\\S/ } @statements;\n\nfor my $i (0 .. $#statements) {\n    print "statement $i:\\n$statements[$i]\\n\\n";\n}\n']], ['Perl DBI - run SQL Script with multiple statements'], 2], [(1233451, 0), [["Can't you just separate them by a semicolon?"], ['Just use  INNER JOIN  as below']], [[" Delete from messages where messageid = '1';\nDelete from usersmessages where messageid = '1'\n"]], ['delete from two tables in one query'], 2], [(1233451, 1), [['Just use  INNER JOIN  as below'], ['-10000']], [[" DELETE messages , usersmessages  FROM messages  INNER JOIN usersmessages  \nWHERE messages.messageid= usersmessages.messageid and messages.messageid = '1'\n"]], ['delete from two tables in one query'], 2], [(1233483, 0), [['You can find which session(s) this might be with...'], ["To help you find the rouge code (assuming that's what it is), you can find the last SQL command ran by a session by using..."]], [[" select s1.username || '@' || s1.machine    || ' ( SID=' || s1.sid || ' ) is blocking '\n  || s2.username || '@' || s2.machine || ' ( SID=' || s2.sid || ' ) ' AS blocking_status\n  from v$lock l1, v$session s1, v$lock l2, v$session s2\n  where s1.sid=l1.sid and s2.sid=l2.sid\n  and l1.BLOCK=1 and l2.request > 0\n  and l1.id1 = l2.id1\n  and l2.id2 = l2.id2\n"]], ['Oracle UPDATEs to Certain Table Hang Indefinitely'], 2], [(1233483, 1), [["To help you find the rouge code (assuming that's what it is), you can find the last SQL command ran by a session by using..."], ['-10000']], [[' select *\nfrom   v_$sqltext, v_$session\nwhere  v_$session.prev_hash_value = v_$sqltext.hash_value\nand    [some filter on v_$session]\n']], ['Oracle UPDATEs to Certain Table Hang Indefinitely'], 2], [(1233506, 0), [['1. Is there a function available in SQL? \nYes, the SQL 92 spec, Oct 97, pg. 171, section 6.16 specifies this functions:'], ['3. What is the function available in MySQL?  ']], [[' CURRENT_TIME       Time of day at moment of evaluation\nCURRENT_DATE       Date at moment of evaluation\nCURRENT_TIMESTAMP  Date & Time at moment of evaluation\n']], ['how to get current datetime in SQL?'], 2], [(1233506, 1), [['3. What is the function available in MySQL?  '], ['(As SixFootTallRabbit says)']], [[' NOW() returns 2009-08-05 15:13:00  \nCURDATE() returns 2009-08-05  \nCURTIME() returns 15:13:00  \n']], ['how to get current datetime in SQL?'], 2], [(1233887, 0), [['e.g.'], ['e.g.']], [[' <input type="checkbox" name="something" value="somethingElse" checked="checked" />\n']], ['Selecting items IN a row'], 3], [(1233887, 1), [['e.g.'], ['e.g.']], [[' SELECT pt.*\n     , CASE\n         WHEN ISNULL(tr.CustomerReqPropertyType,0) = 0 THEN 0 \n         ELSE 1 END AS [checked]\nFROM propertytype AS [pt]\nLEFT JOIN tenantrequirements AS [tr]\n    ON pt.PropertyTypeID = tr.CustomerReqPropertyType\nWHERE ...\n']], ['Selecting items IN a row'], 3], [(1233887, 2), [['e.g.'], ['-10000']], [[' <%\nWhile (NOT rs.EOF)\n    Dim pID : pID = rs("PropertyTypeID")\n    Dim pTitle : pTitle = rs("PropertyTypeTitle")\n    Dim checked : checked = "" : If (rs("checked") = 1) Then checked = "checked"\n%>\n    <li>\n        <input type="checkbox" name="txtPropertyType" id="txtPropertyType<%=pID%>" value="<%=pID%>" checked="<%=checked%>" />\n        <label for="txtPropertyType<%=pID%>"><%=pTitle%></label>\n    </li>\n<%\n    rs.MoveNext()\nWend\n%>\n']], ['Selecting items IN a row'], 3], [(1233910, 0), [['This works:'], ['This does not:']], [[' SELECT  (\n        SELECT  *\n        FROM    dual dn\n        WHERE   dn.dummy = do.dummy\n        )\nFROM    dual do\n']], ['Is there a nesting limit for correlated subqueries in Oracle?'], 3], [(1233910, 1), [['This does not:'], ['As for your query, use window functions (which you can use in  SQL Server  too:)']], [[' SELECT  (\n        SELECT  *\n        FROM    (\n                SELECT  *\n                FROM    dual dn\n                WHERE   dn.dummy = do.dummy\n                )\n        WHERE   rownum = 1\n        )\nFROM    dual do\n']], ['Is there a nesting limit for correlated subqueries in Oracle?'], 3], [(1233910, 2), [['As for your query, use window functions (which you can use in  SQL Server  too:)'], ['-10000']], [[' SELECT  *\nFROM    (\n        SELECT  m.material_id, ROW_NUMBER() OVER (PARTITION BY content_id ORDER BY resolution DESC) AS rn\n        FROM    mat m\n        WHERE   m.material_id IN\n                (\n                SELECT  con.content_id\n                FROM    con_groups\n                JOIN    con\n                ON      con.content_id = con_groups.content_id\n                WHERE   con_groups.content_group_id = 10\n                )\n        )\nWHERE   rn = 1\n']], ['Is there a nesting limit for correlated subqueries in Oracle?'], 3], [(1234807, 0), [['Compare the following queries:'], ['and this one:']], [[" SELECT  *\nFROM    child_table c\nJOIN    child_to_parent cp\nON      cp.child = c.id\nJOIN    parent p\nON      p.id = cp.parent\nWHERE   c.property = 'some_property'\n"]], ['Pivot Table vs Parent_ID for 1-Many Relation'], 4], [(1234807, 1), [['and this one:'], ['The only possible exception to that rule is that you run these queries often:']], [[" SELECT  *\nFROM    child_table c\nJOIN    parent p\nON      p.id = c.parent\nWHERE   c.property = 'some_property'\n"]], ['Pivot Table vs Parent_ID for 1-Many Relation'], 4], [(1234807, 2), [['The only possible exception to that rule is that you run these queries often:'], ['In this case yes, the  child_to_parent  link table will be more efficient, since you can just replace it with the following query:']], [[' SELECT  *\nFROM    child_table c\nJOIN    parent_table p\nON      p.id = c.parent\nWHERE   c.id IN (id1, id2, ...)\n']], ['Pivot Table vs Parent_ID for 1-Many Relation'], 4], [(1234807, 3), [['In this case yes, the  child_to_parent  link table will be more efficient, since you can just replace it with the following query:'], ['and  child_to_parent  will be always less or equal in size to  child_table , and hence more efficient.']], [[' SELECT  *\nFROM    child_to_parent cp\nJOIN    parent_table p\nON      p.id = cp.parent\nWHERE   cp.child IN (id1, id2, ...)\n']], ['Pivot Table vs Parent_ID for 1-Many Relation'], 4], [(1236003, 0), [['What do you want the grouping for?'], ['If you need to sum XX for the last day, then:']], [[' select Name, XX\n  from yourTable t1\n where Date = (select MAX(Date)\n                 from yourTable t2\n                where t1.Name = t2.Name)\n']], ['mysql query with group by and order by'], 2], [(1236003, 1), [['If you need to sum XX for the last day, then:'], ['-10000']], [[' select Name, SUM(XX)\n  from yourTable t1\n where Date = (select MAX(Date)\n                 from yourTable t2\n                where t1.Name = t2.Name)\n group by Name\n']], ['mysql query with group by and order by'], 2], [(1236432, 0), [['-10000'], ["Sorry - hadn't noticed the winner and loser thing. Try:"]], [[' SELECT userid, count(*) as numgames\nfrom weblGames g\nwhere g.dateplayed >= now() - y\ngroup by userid\nhaving count(*) > x\n;\n']], ['SQL Select only players that have played x amount of games in recent y days?'], 2], [(1236432, 1), [["Sorry - hadn't noticed the winner and loser thing. Try:"], ['-10000']], [[' SELECT userid, count(*) as cnt \nFROM\n(\n    SELECT winner as userid\n    from weblGames g\n    where g.reported_on >= now() - y\n    UNION ALL\n    SELECT loser as userid\n    from weblGames g\n    where g.reported_on >= now() - y\n) t\nGROUP BY userid\nHAVING COUNT(*) > x;\n']], ['SQL Select only players that have played x amount of games in recent y days?'], 2], [(1237567, 0), [["What you can do is select the right rows in a subquery.  This query should find the rows you're looking for:"], ['To find the delta that belongs to these rows, put it in a subquery and join on it:']], [[" select [date], min([expiration]-[date])\nfrom rawdata\nwhere delta > 0.5\nand callput = 'C' \nand [expiration]-[date] between 15 and 50\ngroup by [date]\n"]], ['Trouble writing a query to select one row per "date", given certain conditions'], 3], [(1237567, 1), [['To find the delta that belongs to these rows, put it in a subquery and join on it:'], ['To search for the lowest delta within rows with identical "days", you could add another subquery:']], [[" select *\nfrom rawdata\ninner join (\n    select [date]\n    ,      min([expiration]-[date]) as days\n    from rawdata\n    where delta > 0.5\n    and callput = 'C' \n    and [expiration]-[date] between 15 and 50\n    group by [date]\n) as filter \non filter.date = rawdata.date\nand filter.days = rawdata.[expiration] - rawdata.[date]\nwhere delta > 0.5\nand callput = 'C' \n"]], ['Trouble writing a query to select one row per "date", given certain conditions'], 3], [(1237567, 2), [['To search for the lowest delta within rows with identical "days", you could add another subquery:'], ['The first subquery "SubDays" searches for rows with the lowest "days".  The second subquery "SubDaysDelta" searches for the lowest delta within the "SubDays" set.  The outer query filters any duplicates remaining.']], [[" select\n    SubDaysDelta.date\n,   SubDaysDelta.MinDays\n,   SubDaysDelta.MinDelta\n,   min(rawdata.iv) as MinIv\nfrom rawdata\ninner join (\n    select \n        SubDays.date\n    ,   SubDays.MinDays\n    ,   min(delta) as MinDelta\n    from rawdata\n    inner join (\n        select [date]\n        ,      min([expiration]-[date]) as MinDays\n        from rawdata\n        where delta > 0.5\n        and callput = 'C' \n        and [expiration]-[date] between 15 and 50\n        group by [date]\n    ) as SubDays\n    on SubDays.date = rawdata.date\n    and SubDays.MinDays = rawdata.[expiration] - rawdata.[date]\n    where delta > 0.5\n    and callput = 'C' \n    group by SubDays.date, SubDays.MinDays\n) as SubDaysDelta\non SubDaysDelta.date = rawdata.date\nand SubDaysDelta.MinDays = rawdata.[expiration] - rawdata.[date]\nand SubDaysDelta.MinDelta = rawdata.delta\nwhere delta > 0.5\nand callput = 'C' \ngroup by SubDaysDelta.date, SubDaysDelta.MinDays, SubDaysDelta.MinDelta\n"]], ['Trouble writing a query to select one row per "date", given certain conditions'], 3], [(1237725, 0), [["You don't need to create an intermediate file. You can do "], ['or']], [[' pg_dump -C -h localhost -U localuser dbname | psql -h remotehost -U remoteuser dbname\n']], ['Copying PostgreSQL database to another server'], 4], [(1237725, 1), [['or'], ['As Kornel said there is no need to dump to a intermediate file, if you want to work compressed you can use a compressed tunnel']], [[' pg_dump -C -h remotehost -U remoteuser dbname | psql -h localhost -U localuser dbname\n']], ['Copying PostgreSQL database to another server'], 4], [(1237725, 2), [['As Kornel said there is no need to dump to a intermediate file, if you want to work compressed you can use a compressed tunnel'], ['or']], [[' pg_dump -C dbname | bzip2 | ssh  remoteuser@remotehost "bunzip2 | psql dbname"\n']], ['Copying PostgreSQL database to another server'], 4], [(1237725, 3), [['or'], ['but this solution also requires to get a session in both ends.  ']], [[' pg_dump -C dbname | ssh -C remoteuser@remotehost "psql dbname"\n']], ['Copying PostgreSQL database to another server'], 4], [(1239402, 0), [['-10000'], ['If it is and your table has a  PRIMARY KEY , rewrite it as this:']], [[' SELECT  userid, COUNT(*) as cnt,\n        (\n        SELECT  CASE t.userid WHEN winner THEN winner_elo ELSE loser_elo END\n        FROM    webl_games l\n        WHERE   t.userid IN (winner, loser)\n        ORDER BY\n                reported_on DESC\n        LIMIT 1\n        ) AS last_elo\nFROM    (\n        SELECT  winner as userid\n        FROM    webl_games g \n        WHERE   (g.reported_on > now() - interval 4 day\n        UNION ALL \n        SELECT  loser as userid\n        FROM    webl_games g \n        WHERE   g.reported_on > now() - interval 4 day\n        ) t\nGROUP BY\n        userid\n']], ['Make MySQL show every users rating and then sort the results using ratings?'], 2], [(1239402, 1), [['If it is and your table has a  PRIMARY KEY , rewrite it as this:'], ['-10000']], [[' SELECT  userid, cnt,\n        (\n        SELECT  q2.userid WHEN winner THEN winner_elo ELSE loser_elo END\n        FROM    webl_games l\n        WHERE   l.id IN (lwin, llose)\n        ORDER BY\n                reported_on DESC\n        LIMIT 1\n        )\nFROM    (        \n        SELECT  userid, COUNT(*) as cnt,\n                (\n                SELECT  id\n                FROM    webl_games l\n                WHERE   t.userid = winner\n                ORDER BY\n                        reported_on DESC\n                LIMIT 1\n                ) AS lwin,\n                (\n                SELECT  id\n                FROM    webl_games l\n                WHERE   t.userid = loser\n                ORDER BY\n                        reported_on DESC\n                LIMIT 1\n                ) AS llose\n        FROM    (\n                SELECT  winner as userid\n                FROM    webl_games g \n                WHERE   (g.reported_on > now() - interval 4 day\n                UNION ALL \n                SELECT  loser as userid\n                FROM    webl_games g \n                WHERE   g.reported_on > now() - interval 4 day\n                ) t\n        GROUP BY\n                userid\n        ) q2\n']], ['Make MySQL show every users rating and then sort the results using ratings?'], 2], [(1240845, 0), [['Set a  BIT  field to  1  when the row is checked,  0  otherwise, then order by that field first:'], ["If you don't want to (or can't) store whether the row is checked in the table, derive it using a  CASE  clause:"]], [[' SELECT *\nFROM Blah\nORDER BY Checked DESC, AnotherColumnToSort\n']], ["How can I sort data using an 'order by' sql clause with specified data at the beginning"], 2], [(1240845, 1), [["If you don't want to (or can't) store whether the row is checked in the table, derive it using a  CASE  clause:"], ['-10000']], [[' SELECT *\nFROM Blah\nORDER BY\n  CASE\n    WHEN ID IN (1, 2, 3) THEN 1\n    ELSE 0\n  END DESC,\n  AnotherColumnToSort\n']], ["How can I sort data using an 'order by' sql clause with specified data at the beginning"], 2], [(1241142, 0), [['And  has precedence over  Or , so, even if  a <=> a1 Or a2'], ['is not the same as']], [[' Where a And b \n']], ['SQL Logic Operator Precedence: And and Or'], 5], [(1241142, 1), [['is not the same as'], ['because that would be Executed as ']], [[' Where a1 Or a2 And b,\n']], ['SQL Logic Operator Precedence: And and Or'], 5], [(1241142, 2), [['because that would be Executed as '], ['and what you want, to make them the same, is']], [[' Where a1 Or (a2 And b)\n']], ['SQL Logic Operator Precedence: And and Or'], 5], [(1241142, 3), [['and what you want, to make them the same, is'], ["Here's an example to illustrate:"]], [['  Where (a1 Or a2) And b\n']], ['SQL Logic Operator Precedence: And and Or'], 5], [(1241142, 4), [["Here's an example to illustrate:"], ['-10000']], [[" Declare @x tinyInt = 1\nDeclare @y tinyInt = 0\nDeclare @z tinyInt = 0\n\nSelect Case When @x=1 OR @y=1 And @z=1 Then 'T' Else 'F' End -- outputs T\nSelect Case When (@x=1 OR @y=1) And @z=1 Then 'T' Else 'F' End -- outputs F\n"]], ['SQL Logic Operator Precedence: And and Or'], 5], [(1242392, 0), [['A neat trick here is to reverse a LIKE clause -- rather than saying '], ["I've never used Sqlite before, but just downloaded it and this works fine:"]], [[" WHERE prefix LIKE '...something...'\n"]], ['Sqlite : Sql to finding the most complete prefix'], 3], [(1242392, 1), [["I've never used Sqlite before, but just downloaded it and this works fine:"], ['output:']], [[" sqlite> CREATE TABLE whatever(prefix VARCHAR(100));\nsqlite> INSERT INTO WHATEVER(prefix) VALUES ('1234');\nsqlite> INSERT INTO WHATEVER(prefix) VALUES ('12345');\nsqlite> INSERT INTO WHATEVER(prefix) VALUES ('123456');\nsqlite> SELECT * FROM whatever WHERE '12345999' LIKE (prefix || '%') \n        ORDER BY length(prefix) DESC LIMIT 1;\n"]], ['Sqlite : Sql to finding the most complete prefix'], 3], [(1242392, 2), [['output:'], ['-10000']], [[' 12345\n']], ['Sqlite : Sql to finding the most complete prefix'], 3], [(1244455, 0), [['For example, if you were trying to do this with the values in the v$parameter table, you could query your configuration using the FIRST_VALUE function in SQL analytics:'], ['In our system, it\'s actually much more sophisticated than this.  In addition to the "name" for the parameter you\'re looking up, we also have a "context" column that describes the context we are looking for.  For example, we might have a parameter "timeout" that is set centrally, but even locally, we have multiple components that use this value.  They may all be the same, but we may also want to configure them differently.  So when the tool looks up the "timeout" value, it also constrains by scope.  In the configuration itself, we may use wildcards when we define what we want for scope, such as:']], [['   SELECT DISTINCT\n         NAME\n       , FIRST_VALUE(VALUE) OVER(PARTITION BY NAME \n                                     ORDER BY localsort\n                                ) VALUE\n    FROM (SELECT t.*\n               , 0 localsort\n            FROM local_parameter t\n           UNION\n          SELECT t.*\n               , 1 localsort\n            FROM v$parameter t\n         )\nORDER BY NAME;\n']], ['Where\\How to store distributed configuration data'], 3], [(1244455, 1), [['In our system, it\'s actually much more sophisticated than this.  In addition to the "name" for the parameter you\'re looking up, we also have a "context" column that describes the context we are looking for.  For example, we might have a parameter "timeout" that is set centrally, but even locally, we have multiple components that use this value.  They may all be the same, but we may also want to configure them differently.  So when the tool looks up the "timeout" value, it also constrains by scope.  In the configuration itself, we may use wildcards when we define what we want for scope, such as:'], ['The configuration above says, for all components, use a timeout of 30, but for Comp Engines of any type, use a timeout of 5, however for Comp Engines A & B, use 15 & 10 respectively.  The last two configurations may be maintained in CentralConfig, but the other two may be maintained in LocalConfig, and you would resolve the settings this way:']], [[' CONTEXT       NAME    VALUE\n------------- ------- -----\nComp Engine A timeout    15\nComp Engine B timeout    10\nComp Engine % timeout     5\n%             timeout    30\n']], ['Where\\How to store distributed configuration data'], 3], [(1244455, 2), [['The configuration above says, for all components, use a timeout of 30, but for Comp Engines of any type, use a timeout of 5, however for Comp Engines A & B, use 15 & 10 respectively.  The last two configurations may be maintained in CentralConfig, but the other two may be maintained in LocalConfig, and you would resolve the settings this way:'], ['It\'s basically the same query, except that I\'m inserting that TRANSLATE expression before my localsort and I\'m constraining on Context.  What it\'s doing is converting the % and _ characters to chr(1) & chr(2), which will make them sort after alphanumeric characters in the descending sort.  In this way, the explicitly defined "Comp Engine A" will come before "Comp Engine %", which in turn will come before "%".  In cases where the contexts are defined identically, local config takes precedence over central ones; if you wanted local to always trump central, even in cases when central was scoped more tightly, you\'d just reverse the positions of the two sort terms.']], [["   SELECT DISTINCT\n         NAME\n       , FIRST_VALUE(VALUE) OVER(PARTITION BY NAME \n                                     ORDER BY (TRANSLATE(Context\n                                                        , '%_'\n                                                        , CHR(1) || CHR(2)\n                                              ) DESC\n                                            , localsort\n                                ) VALUE\n    FROM (SELECT t.*\n               , 0 localsort\n            FROM LocalConfig t\n           WHERE 'Comp Engine A' LIKE Context\n           UNION\n          SELECT t.*\n               , 1 localsort\n            FROM CentralConfig t\n           WHERE 'Comp Engine A' LIKE Context\n         )\nORDER BY NAME;\n"]], ['Where\\How to store distributed configuration data'], 3], [(1245706, 0), [['Yes, just put  PRIMARY KEY s of both entities into a link table, defining a  UNIQUE  key on both entities:'], ['Thus, if  entityA = 1  is related to  entityB = 2 :']], [[' myrel(entityA, entityB, UNIQUE(entityA), UNIQUE(entityB))\n']], ['relationships in Sql'], 5], [(1245706, 1), [['Thus, if  entityA = 1  is related to  entityB = 2 :'], ['If you relation is  symmetrical  (i. e.  entityA  and  entityB  belong to same domain and relating  entityA  to  entityB  also means relating  entityB  to  entityA ), then define an additional  CHECK  constrant:']], [[' entityA  entityB\n      1        2\n']], ['relationships in Sql'], 5], [(1245706, 2), [['If you relation is  symmetrical  (i. e.  entityA  and  entityB  belong to same domain and relating  entityA  to  entityB  also means relating  entityB  to  entityA ), then define an additional  CHECK  constrant:'], ['and transform the normalized relation to a canonical one with this query:']], [[' entityA  entityB\n\nUNIQUE(entityA)\nUNIQUE(entityB)\nCHECK(entityA < entityB)\n']], ['relationships in Sql'], 5], [(1245706, 3), [['and transform the normalized relation to a canonical one with this query:'], ['If you want it to be a  1:1  relation, define this table to be a domain for both  entityA  and  entityB :']], [[' SELECT entityA, entityB\nFROM   myrel\nUNION\nSELECT entityB, entityA\nFROM   myrel\n']], ['relationships in Sql'], 5], [(1245706, 4), [['If you want it to be a  1:1  relation, define this table to be a domain for both  entityA  and  entityB :'], ["By removing the  FOREIGN KEY  from either table's definition, you change the corresponding part of the relationship from  1  to  (0-1) ."]], [[' myrel(entityA, entityB, UNIQUE(entityA), UNIQUE(entityB))\nA(id, PRIMARY KEY(id), FOREIGN KEY(id) REFERENCES myrel (entityA))\nB(id, PRIMARY KEY(id), FOREIGN KEY(id) REFERENCES myrel (entityB))\n']], ['relationships in Sql'], 5], [(1246725, 0), [['Does postgresql support recursive queries that use WITH clauses? If so, something like this might work. (If you want a tested answer, provide some CREATE TABLE and INSERT statements in your question, along with the results you need for the sample data in the INSERTs.)'], ['Insert the result of this query into a new table called Links:']], [[' with Links(id,link,data) as (\n  select\n    id, redirectid, data\n  from T\n  where redirectid is null\n  union all\n  select\n    id, redirectid, null\n  from T\n  where redirectid is not null\n  union all\n  select\n    Links.id,\n    T.redirectid,\n    case when T.redirectid is null then T.data else null end\n  from T\n  join Links\n  on Links.link = T.id\n)\n  select id, data\n  from Links\n  where data is not null;\n']], ['Iterate through "linked list" in one SQL query?'], 3], [(1246725, 1), [['Insert the result of this query into a new table called Links:'], ['Also declare an integer ::depth and initialize it to zero. Then repeat the following until it no longer adds rows to Links. Links will then contain your result.']], [[' select\n    id, redirectid as link, data, 0 as depth\n  from T\n  where redirectid is null\n  union all\n  select\n    id, redirectid, null, 0\n  from T\n  where redirectid is not null\n']], ['Iterate through "linked list" in one SQL query?'], 3], [(1246725, 2), [['Also declare an integer ::depth and initialize it to zero. Then repeat the following until it no longer adds rows to Links. Links will then contain your result.'], ["I think this will be better than any cursor solution. In fact, I can't really think of how cursors would be useful for this problem at all."]], [['   increment ::depth;\n  insert into Links\n  select\n    Links.id,\n    T.redirectid,\n    case when T.redirectid is null then T.data else null end,\n    depth + 1\n  from T join Links\n  on Links.link = T.id\n  where depth = ::depth-1;\nend;\n']], ['Iterate through "linked list" in one SQL query?'], 3], [(1247047, 0), [['Inline view:'], ['For example  Test table & data, using SQL Server 2005:']], [[' select count(*)\nfrom (...slightly transformed query...) t\n']], ['Transform arbitrary SQL SELECT TOP(x) to a SELECT COUNT(*)?'], 4], [(1247047, 1), [['For example  Test table & data, using SQL Server 2005:'], ['Then set up SMSS to show the actual execution plan for:']], [[" create table t (PK int identity(1, 1) primary key,\n  u int not null unique,\n  string VARCHAR(2000))\n\ninsert into t (u, string)\nselect top 100000 row_number() over (order by s1.id) , replace(space(2000), ' ', 'x')\nfrom sysobjects s1, \n    sysobjects s2, \n    sysobjects s3, \n    sysobjects s4, \n    sysobjects s5, \n    sysobjects s6, \n    sysobjects s7\n"]], ['Transform arbitrary SQL SELECT TOP(x) to a SELECT COUNT(*)?'], 4], [(1247047, 2), [['Then set up SMSS to show the actual execution plan for:'], ['Applying the transform of the first query we get:']], [[' select PK, U, String from t\nselect count(*) from t\n']], ['Transform arbitrary SQL SELECT TOP(x) to a SELECT COUNT(*)?'], 4], [(1247047, 3), [['Applying the transform of the first query we get:'], ['Running that and looking at the plan, the index on U is used again, exact same plan as  select count(*) from t . The leaves are not visited to find the values for String on every row.']], [[' select count(*)\nfrom (select PK, U, String from t) t\n']], ['Transform arbitrary SQL SELECT TOP(x) to a SELECT COUNT(*)?'], 4], [(1247259, 0), [['I would suggest not actually deleting the user. You could simply add a column to the users table such as:'], ['Then when you "delete" a user, simply mark them as inactive:']], [[' ALTER TABLE users ADD COLUMN (is_active TINYINT(1) NOT NULL DEFAULT 1);\n']], ['How should I handle entries when the user is deleted?'], 2], [(1247259, 1), [['Then when you "delete" a user, simply mark them as inactive:'], ["For user listings, and account access you would check the is_active status. For displaying of data such as posts and what not, you'd not care about their active status, youd just grab the name from the table."]], [[' UPDATE users SET is_active = 0 WHERE users.id = 7;\n']], ['How should I handle entries when the user is deleted?'], 2], [(1247601, 0), [['Alternative 1--Will include all rows that tie. Will not include a row, if the only rows for a given Thread all have null for HitCount:'], ['Alternative 2--Will include all rows that tie. If there is no row for a given thread with non-null HitCount, will return all rows for that thread:']], [[' SELECT Thread, Function, HitCount\nFROM (SELECT Thread, Function, HitCount,\n        MAX(HitCount) over (PARTITION BY Thread) as MaxHitCount\n    FROM Samples\n    WHERE FunctionId NOT IN\n        (SELECT CalleeId FROM Callers)) t \nWHERE HitCount = MaxHitCount \nORDER BY ThreadId, HitCount DESC\n']], ['SQL: Select maximum value for each unique key?'], 4], [(1247601, 1), [['Alternative 2--Will include all rows that tie. If there is no row for a given thread with non-null HitCount, will return all rows for that thread:'], ['Alternative 3--Will non-determistically pick one row in case of ties and discard others. Will include a row if all rows for a given thread have null HitCount']], [[' SELECT Thread, Function, HitCount\nFROM (SELECT Thread, Function, HitCount,\n        RANK() over (PARTITION BY Thread ORDER BY HitCount DESC) as R\n    FROM Samples\n    WHERE FunctionId NOT IN\n        (SELECT CalleeId FROM Callers)) t\nWHERE R = 1\nORDER BY ThreadId, HitCount DESC\n']], ['SQL: Select maximum value for each unique key?'], 4], [(1247601, 2), [['Alternative 3--Will non-determistically pick one row in case of ties and discard others. Will include a row if all rows for a given thread have null HitCount'], ["Alternative 4 & 5--Uses older constructs, if the windowed functions aren't available, and says what is meant a little cleaner than using joins. Benchmark if spead is a priority. Both return all rows that participate in a tie. Alternative 4 will HitCount is null when non-null values are not available for HitCount. Alternative 5 will not return rows with HitCount is null."]], [[' SELECT Thread, Function, HitCount\nFROM (SELECT Thread, Function, HitCount,\n        ROW_NUMBER() over (PARTITION BY Thread ORDER BY HitCount DESC) as R\n    FROM Samples\n    WHERE FunctionId NOT IN\n        (SELECT CalleeId FROM Callers)) t\nWHERE R = 1\nORDER BY ThreadId, HitCount DESC\n']], ['SQL: Select maximum value for each unique key?'], 4], [(1247601, 3), [["Alternative 4 & 5--Uses older constructs, if the windowed functions aren't available, and says what is meant a little cleaner than using joins. Benchmark if spead is a priority. Both return all rows that participate in a tie. Alternative 4 will HitCount is null when non-null values are not available for HitCount. Alternative 5 will not return rows with HitCount is null."], ['-10000']], [[' SELECT *\nFROM Samples s1\nWHERE FunctionId NOT IN\n    (SELECT CalleeId FROM Callers)\nAND NOT EXISTS\n    (SELECT *\n    FROM Samples s2\n    WHERE s1.FunctionId = s2.FunctionId\n    AND s1.HitCount < s2.HitCount)\nORDER BY ThreadId, HitCount DESC\n\nSELECT *\nFROM Samples s1\nWHERE FunctionId NOT IN\n    (SELECT CalleeId FROM Callers)\nAND HitCount = \n    (SELECT MAX(HitCount)\n    FROM Samples s2\n    WHERE s1.FunctionId = s2.FunctionId)\nORDER BY ThreadId, HitCount DESC\n']], ['SQL: Select maximum value for each unique key?'], 4], [(1248352, 0), [['Perhaps the best way of laying out this code is... not to. Don\'t write code for things that the standard data-binding frameworks can handle. For example (sorry it is C#, but it should translate - all of the "good" bits here are provided by the .NET framework, not the language); some UI code - note no code to copy values:'], ['With supporting data entity:']], [[' static class Program {\n    [STAThread]\n    static void Main() {\n        Application.EnableVisualStyles();\n        // some sample data\n        BindingList<Track> tracks = new BindingList<Track>();\n        tracks.Add(new Track { Name = "foo", Genre = "Rock", Rhythm = "insane", Length = 180 });\n        tracks.Add(new Track { Name = "bar", Genre = "Classic", Rhythm = "sedate", Length = 240 });\n\n        // show the data on a form\n        using (Form form = new Form {\n            Controls = {\n                new DataGridView { DataSource = tracks, Dock = DockStyle.Fill },\n                new TextBox { DataBindings = {{"Text", tracks, "Name"}}, Dock = DockStyle.Bottom},\n                new TextBox { DataBindings = {{"Text", tracks, "Genre"}}, Dock = DockStyle.Bottom},\n                new TextBox { DataBindings = {{"Text", tracks, "Rhythm"}}, Dock = DockStyle.Bottom},\n                new TextBox { DataBindings = {{"Text", tracks, "Length"}}, Dock = DockStyle.Bottom},\n            }\n        }) {\n            Application.Run(form);\n        }\n    }\n}\n']], ['Best way of designing the flow of code when reading/writing from database'], 2], [(1248352, 1), [['With supporting data entity:'], ['-10000']], [[' class Track : INotifyPropertyChanged {\n    private string name, genre, rhythm;\n    private int length;\n    public event PropertyChangedEventHandler PropertyChanged;\n    private void SetField<T>(ref T field, T value, string propertyName) {\n        if (!EqualityComparer<T>.Default.Equals(field, value)) {\n            field = value;\n            PropertyChangedEventHandler handler = PropertyChanged;\n            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));\n        }\n    }\n    public string Name { get { return name; } set { SetField(ref name, value, "Name"); } }\n    public string Genre { get { return genre; } set { SetField(ref genre, value, "Genre"); } }\n    public string Rhythm { get { return rhythm; } set { SetField(ref rhythm, value, "Rhythm"); } }\n    public int Length { get { return length; } set { SetField(ref length, value, "Length"); } }\n}\n']], ['Best way of designing the flow of code when reading/writing from database'], 2], [(1248512, 0), [['-10000'], ['The "penultimate one" is essentially equal to the "last one", with all occurrences of  @s  replaced with:']], [[" declare @s varchar(50);\nset @s = 'aaaaa/bbbbb/ccccc/ddddd/eeeee'\n\n/* last one: */\nselect\n    RIGHT(@s, CHARINDEX('/', REVERSE(@s)) - 1)\n\n/* penultimate one */\nselect\n    RIGHT(\n      LEFT(@s, LEN(@s) - CHARINDEX('/', REVERSE(@s))), \n      CHARINDEX('/', REVERSE(\n        LEFT(@s, LEN(@s) - CHARINDEX('/', REVERSE(@s)))\n      )) - 1\n    )\n"]], ['How can I get the almost last substring from "/" delimited string in T-SQL?'], 3], [(1248512, 1), [['The "penultimate one" is essentially equal to the "last one", with all occurrences of  @s  replaced with:'], ['To check whether there are enough slashes in the string for this expression to succeed, you could do']], [[" LEFT(@s, LEN(@s) - CHARINDEX('/', REVERSE(@s)))\n"]], ['How can I get the almost last substring from "/" delimited string in T-SQL?'], 3], [(1248512, 2), [['To check whether there are enough slashes in the string for this expression to succeed, you could do'], ['-10000']], [[" CASE WHEN LEN(@s) - LEN(REPLACE(@s, '/', '')) >= 2 \n     THEN /* expression here */\n     ELSE /* error value here */\nEND\n"]], ['How can I get the almost last substring from "/" delimited string in T-SQL?'], 3], [(1249632, 0), [['I would be tempted to have the following normalized schema design'], ['Then you can easily query those clothes that have an unbuttoned display']], [[' Mode Table\n\nid | mode_style\n---------------\n1  | buttoned\n2  | unbuttoned\n3  | tucked in\n4  | untucked\n\nClothes Table\n\nid | name      | description\n----------------------------\n1  | shirt     | mans shirt...\n2  | dress     | short sleeve\n\nClothes_mm_Mode Table (Junction/Map table)\n\nmode_id | clothes_id\n--------------------\n1       | 1\n1       | 2\n3       | 3\n']], ['Database structure for items with varying attributes'], 4], [(1249632, 1), [['Then you can easily query those clothes that have an unbuttoned display'], ['If certain types of clothes are always displayed in the same way i.e. all shirts always have a buttoned and unbuttoned display, you could take out the  Clothes_mm_Mode  Table and introduce a Common Mode table that maps Modes to a Common Mode id']], [[' SELECT\n    c.id,\n    c.name,\n    c.description\nFROM\n    Clothes c\nINNER JOIN\n    Clothes_Mode cm\n    ON c.id = cm.clothes_id\nWHERE\n    cm.mode_id = 2\n']], ['Database structure for items with varying attributes'], 4], [(1249632, 2), [['If certain types of clothes are always displayed in the same way i.e. all shirts always have a buttoned and unbuttoned display, you could take out the  Clothes_mm_Mode  Table and introduce a Common Mode table that maps Modes to a Common Mode id'], ['and then associate each item of Clothing with a Common Mode type']], [[" Common_Modes Table\n\nid | name           | description\n--------------------------------------------------\n1  | Men's Shirt    | Common Modes for a Mens shirt\n2  | Women's Shirt  | Common Modes for a Womens shirt\n\nCommon_Modes_mm_Mode Table (Junction/Map table)\n\ncommon_mode_id | mode_id\n--------------------------------------------------\n1              | 1\n1              | 2\n2              | 1\n2              | 2\n"]], ['Database structure for items with varying attributes'], 4], [(1249632, 3), [['and then associate each item of Clothing with a Common Mode type'], ['The advantage of this design would be that when adding a new item of clothing, only one record need be entered into the Common Modes table to associate that item of clothing with the Modes common to the clothing type. Of course this could be handled without a common modes table by having a procedure that inserts the appropriate records into the original  Clothes_mm_Mode  Table for a new item of clothing, but by having the relationship in the database, it will be more prominent, visible and easier to maintain.']], [[' Clothing_Common_Modes Table\n\nclothing_id | common_mode_id\n----------------------------\n1           | 1\n']], ['Database structure for items with varying attributes'], 4], [(1250009, 0), [['You have a little problem with your operator precedence.  AND  has a higher precedence than  OR , so your query is currently parsed as such:'], ['What you really want is this query:']], [[" SELECT title,category \nFROM stories \nWHERE (category=8 AND title LIKE '%vector%')\nOR desc LIKE '%vector%' OR tags LIKE '%vector%' \nORDER BY time DESC\n"]], ['SQL (for mysql) getting good results, but need to exclude some columns'], 2], [(1250009, 1), [['What you really want is this query:'], ['More information about operator precedence is MySQL is available in the documentation:']], [[" SELECT title,category \nFROM stories \nWHERE category=8 \nAND\n(title LIKE '%vector%' OR desc LIKE '%vector%' OR tags LIKE '%vector%')\nORDER BY time DESC\n"]], ['SQL (for mysql) getting good results, but need to exclude some columns'], 2], [(1250070, 0), [['I\'ll guess that "reply id" is 0 for articles and is the article number for comments. If that\'s your design, this should work:'], ['ADDED:  Thanks for the additional information in your comment. To put the results in the order you want is not so easy, because the first ordering key is the created_date of the thread-starter post. This is not in the data row, so you need a join. Here is my best guess based on the additional information (which is still not complete enough to keep me from guessing):']], [[' select * from yourTable\norder by\n  case when "reply id" = 0 then id else "reply id" end, id\n']], ['complex sql order by'], 6], [(1250070, 1), [['ADDED:  Thanks for the additional information in your comment. To put the results in the order you want is not so easy, because the first ordering key is the created_date of the thread-starter post. This is not in the data row, so you need a join. Here is my best guess based on the additional information (which is still not complete enough to keep me from guessing):'], ['Because a join is required, this query will now be much slower. My suggestion: maintain two date columns, "thread_last_modified" and "item_last_modified". You will have to cascade updates from thread-starters to comments, but I think it\'s worth it if there are not lots of updates, because the query can be much simpler. I haven\'t tested this because it requires several changes to your design:']], [[' select\n  f.id, f.user_id, f.type, f.reply_id, f.text, f.url, f.created_date,\n  coalesce(parentfeed.created_date,f.created_date) as thread_date\nfrom feed as f left outer join feed as parentfeed\non f.reply_id = parentfeed.id\norder by\n  thread_date desc,\n  case when f.reply_id = 0 then 0 else 1 end,\n  created_date desc, id;\n']], ['complex sql order by'], 6], [(1250070, 2), [['Because a join is required, this query will now be much slower. My suggestion: maintain two date columns, "thread_last_modified" and "item_last_modified". You will have to cascade updates from thread-starters to comments, but I think it\'s worth it if there are not lots of updates, because the query can be much simpler. I haven\'t tested this because it requires several changes to your design:'], ['ADDED #2 : If you want only the thread containing the comment with id ::thisOne, I think you can add this line between the ON and ORDER BY clauses (for my first added solution, the join):']], [[' select\n  id, user_id, type, reply_id, text, url, thread_last_modified, item_last_modified\nfrom feed\norder by\n  thread_last_modified desc,\n  case when f.reply_id = 0 then 0 else 1 end,\n  item_last_modified desc, id;\n']], ['complex sql order by'], 6], [(1250070, 3), [['ADDED #2 : If you want only the thread containing the comment with id ::thisOne, I think you can add this line between the ON and ORDER BY clauses (for my first added solution, the join):'], ["In theory, this lookup should be evaluated just once for the query, but if it's not in practice, you could precompute it as ::thisOneThreadID and add"]], [[' where parentfeed.id = (\n  select coalesce(reply_id,id)\n  from feed\n  where id = ::thisOne\n)\n']], ['complex sql order by'], 6], [(1250070, 4), [["In theory, this lookup should be evaluated just once for the query, but if it's not in practice, you could precompute it as ::thisOneThreadID and add"], ['For the second solution, assuming you precompute again, try']], [[' where parentfeed.id = ::thisOneThreadID\n']], ['complex sql order by'], 6], [(1250070, 5), [['For the second solution, assuming you precompute again, try'], ['By the way, I suspect both of my solutions will merge threads that were last modified at the exact same time...']], [[' where coalesce(id,reply_id) = ::thisOneThreadID\n']], ['complex sql order by'], 6], [(1250452, 0), [["I'd create a UDF:"], ['Then, all you have to do is:']], [[" create function GetTags(PhotoID int) returns @tags varchar(max)\nas\nbegin\n    declare @mytags varchar(max)\n    set @mytags = ''\n\n    select @mytags = @mytags + ', ' + tag from tags where photoid = @photoid\n\n    return substring(@mytags, 3, 8000)\nend\n"]], ['How do you concat multiple rows into one column in SQL Server?'], 2], [(1250452, 1), [['Then, all you have to do is:'], ['-10000']], [[' select GetTags(photoID) as tagList from photos\n']], ['How do you concat multiple rows into one column in SQL Server?'], 2], [(1250675, 0), [["Below is Eric's code, cleaned up a bit it executed on my server running mysql 5.0.27"], ["Also note that using a where clause for the first table would be a less expensive query - the where get's executed first and only has to attempt to self join on the rows that are greater than zero and have today's date"]], [[' select\n   p_today.`ticker`,\n   p_today.`date`,\n   p_yest.price as `open`,\n   p_today.price as `close`,\n   ((p_today.price - p_yest.price)/p_yest.price) as `change`\nfrom\n   prices p_today\n   inner join prices p_yest on\n       p_today.ticker = p_yest.ticker\n       and date(p_today.`date`) = date(p_yest.`date`) + INTERVAL 1 DAY\n       and p_today.price > 0\n       and p_yest.price > 0\n       and date(p_today.`date`) = CURRENT_DATE\norder by `change` desc\nlimit 10\n']], ['How can I calculate the top % daily price changes using MySQL?'], 2], [(1250675, 1), [["Also note that using a where clause for the first table would be a less expensive query - the where get's executed first and only has to attempt to self join on the rows that are greater than zero and have today's date"], ['-10000']], [[' select\n   p_today.`ticker`,\n   p_today.`date`,\n   p_yest.price as `open`,\n   p_today.price as `close`,\n   ((p_today.price - p_yest.price)/p_yest.price) as `change`\nfrom\n   prices p_today\n   inner join prices p_yest on\n       p_today.ticker = p_yest.ticker\n       and date(p_today.`date`) = date(p_yest.`date`) + INTERVAL 1 DAY\n\n       and p_yest.price > 0\nwhere p_today.price > 0\n    and date(p_today.`date`) = CURRENT_DATE\norder by `change` desc\nlimit 10\n']], ['How can I calculate the top % daily price changes using MySQL?'], 2], [(1250926, 0), [['I think this is what you need.'], ['EDIT:']], [[' SELECT * FROM table\n    WHERE id >\n        (SELECT id FROM table\n            WHERE category !=\n                (SELECT category FROM table\n                    ORDER BY id DESC LIMIT 1)\n            ORDER BY id DESC LIMIT 1);\n']], ['mysql query help?'], 2], [(1250926, 1), [['EDIT:'], ["I think that should do what you need. Notice that there are 3 places you need to put in the category you're looking for (in this example it's looking for 'radio')."]], [[" SELECT * FROM table\n    WHERE category = 'radio' && id >\n        (SELECT id FROM table\n            WHERE category != 'radio' && id <\n                (SELECT id FROM table WHERE category = 'radio' ORDER BY id DESC LIMIT 1)\n            ORDER BY id DESC LIMIT 1)\n"]], ['mysql query help?'], 2], [(1251038, 0), [['You need a linked server creating on the SQL Server that points to ADSI (Active Directory Service Interface) something like this will do it.'], ['Then you can use the following sort of query.']], [[" EXEC sp_addlinkedserver 'ADSI', 'Active Directory Services 2.5', 'ADSDSOObject', 'adsdatasource'"]], ['Querying Active Directory from SQL Server 2005'], 2], [(1251038, 1), [['Then you can use the following sort of query.'], ["You'll need to set the LDAP:// line appropriately (ask your AD admin for the details) and be aware that distributed adhoc queries using OpenQuery are disabled by default in SQL Server. Once you have the above though it should be pretty easy to google for any particular variations."]], [[" \nSELECT *\nFROM OPENQUERY(ADSI, 'SELECT sAMAccountName\nFROM ''LDAP://DC=MyDC,DC=com,DC=uk''\nWHERE objectCategory = ''Person''\nAND objectClass = ''user'')\n"]], ['Querying Active Directory from SQL Server 2005'], 2], [(1253046, 0), [['Here is my take using traditional join syntax:'], ['Here is how you can write the same query using  INNER JOIN  (both leads to the same result)']], [[" SELECT rocks.name,\n       rocks.latitude,\n       rocks.longitude,\n       rocks.indoor,\n       rocks.address,\n       rocks.phone,\n       rocks.email,\n       rocks.website,\n       rocks.closed,\n       rock_types.type\n\nFROM   rocks,\n       rock_types\n\nWHERE  rocks.latitude  > -180                 AND\n       rocks.latitude  < 180                  AND\n       rocks.longitude > -180                 AND\n       rocks.longitude < 180                  AND\n       rocks.type_id   = rocks_types.id       AND\n       rock_types.type IN ('DWS', 'Top rope')\n"]], ['Need help with my query'], 3], [(1253046, 1), [['Here is how you can write the same query using  INNER JOIN  (both leads to the same result)'], ['EDIT : Based on your comment, the following will give you a comma separated list of types:']], [[" SELECT rocks.name,\n       rocks.latitude,\n       rocks.longitude,\n       rocks.indoor,\n       rocks.address,\n       rocks.phone,\n       rocks.email,\n       rocks.website,\n       rocks.closed,\n       rock_types.type\n\nFROM   rocks\n       INNER JOIN rocks_types ON rocks.type_id = rocks_types.id\n\nWHERE  rocks.latitude  > -180                 AND\n       rocks.latitude  < 180                  AND\n       rocks.longitude > -180                 AND\n       rocks.longitude < 180                  AND\n       rock_types.type IN ('DWS', 'Top rope')\n"]], ['Need help with my query'], 3], [(1253046, 2), [['EDIT : Based on your comment, the following will give you a comma separated list of types:'], ['-10000']], [[" SELECT rocks.name,\n       rocks.latitude,\n       rocks.longitude,\n       rocks.indoor,\n       rocks.address,\n       rocks.phone,\n       rocks.email,\n       rocks.website,\n       rocks.closed,\n       (SELECT    GROUP_CONCAT(DISTINCT rock_types.type SEPARATOR ',')\n        FROM      rock_types\n        WHERE     rock_types.id = rocks.id                AND\n                  rock_types.type IN ('DWS', 'Top rope')\n        GROUP BY  rock_types.id\n       ) AS type\n\nFROM   rocks\n\nWHERE  rocks.latitude  > -180    AND\n       rocks.latitude  < 180     AND\n       rocks.longitude > -180    AND\n       rocks.longitude < 180\n"]], ['Need help with my query'], 3], [(1253561, 0), [['using  random() : '], ["The above is only true if you don't have a  INTEGER PRIMARY KEY AUTOINCREMENT  column (it will still work fine with  INTEGER PRIMARY KEY  columns). Anyway, this should be more portable / reliable:"]], [[' SELECT foo FROM bar\n  WHERE id >= (abs(random()) % (SELECT max(id) FROM bar))\n  LIMIT 1;\n']], ['SQLite - ORDER BY RAND()'], 2], [(1253561, 1), [["The above is only true if you don't have a  INTEGER PRIMARY KEY AUTOINCREMENT  column (it will still work fine with  INTEGER PRIMARY KEY  columns). Anyway, this should be more portable / reliable:"], ['ROWID ,  _ROWID_  and  OID  are all aliases for the SQLite internal row id.']], [[' SELECT foo FROM bar\n  WHERE _ROWID_ >= (abs(random()) % (SELECT max(_ROWID_) FROM bar))\nLIMIT 1;\n']], ['SQLite - ORDER BY RAND()'], 2], [(1253820, 0), [['-10000'], ["When you do not want to have the number of votes in the output, you can do this as well (in sql server it is possible, so i believe it should be possible in mySql as well, but I haven't tested it since I have no MySQL here)."]], [[' select app.id, app.title, count(*) as votes\nfrom app\nleft join vote on app.id = vote.app_id\ngroup by app.id, app.title\norder by votes desc\n']], ['how to write this sql'], 2], [(1253820, 1), [["When you do not want to have the number of votes in the output, you can do this as well (in sql server it is possible, so i believe it should be possible in mySql as well, but I haven't tested it since I have no MySQL here)."], ['-10000']], [[' select app.id, app.title\nfrom app\nleft join vote on app.id = vote.app_id\ngroup by app.id, app.title\norder by count(*) desc\n']], ['how to write this sql'], 2], [(1254489, 0), [["Here's an example, with CTE's for readability:"], ['This will output:']], [[' WITH\nOrderedTable as (\n    select value, rownr = row_number() over (order by userid, id)\n    from YourTable\n    where userid = 2287\n),\nHeads as (\n    select cur.rownr, CurValue = cur.value\n    ,   headnr = row_number() over (order by cur.rownr)\n    from OrderedTable cur\n    left join OrderedTable prev on cur.rownr = prev.rownr+1 \n    where IsNull(prev.value,-1) != cur.value\n),\nValuesWithHead as (\n    select value\n    ,   HeadNr = (select max(headnr) \n                from Heads \n                where Heads.rownr <= data.rownr)\n    from OrderedTable data\n)\nselect Value, [Count] = count(*)\nfrom ValuesWithHead\ngroup by HeadNr, value\norder by count(*) desc\n']], ['Counting consecutive duplicate records with SQL'], 3], [(1254489, 1), [['This will output:'], ["Here's my query to create the test data:"]], [[' Value   Count\n2       4\n3       3\n1       2\n2       1\n2       1\n7       1\n']], ['Counting consecutive duplicate records with SQL'], 3], [(1254489, 2), [["Here's my query to create the test data:"], ['-10000']], [[" create table YourTable (\n    id int primary key,\n    userid int,\n    variable varchar(25),\n    value int\n)\ninsert into YourTable (id, userid, variable, value) values (3115, 2287, 'votech05', 2)\ninsert into YourTable (id, userid, variable, value) values (3116, 2287, 'comcol05', 1)\ninsert into YourTable (id, userid, variable, value) values (3117, 2287, 'fouryr05', 1)\ninsert into YourTable (id, userid, variable, value) values (3118, 2287, 'none05', 2)\ninsert into YourTable (id, userid, variable, value) values (3119, 2287, 'ocol1_05', 2)\ninsert into YourTable (id, userid, variable, value) values (3120, 2287, 'disnone', 2)\ninsert into YourTable (id, userid, variable, value) values (3121, 2287, 'dissense', 2)\ninsert into YourTable (id, userid, variable, value) values (3122, 2287, 'dismobil', 3)\ninsert into YourTable (id, userid, variable, value) values (3123, 2287, 'dislearn', 3)\ninsert into YourTable (id, userid, variable, value) values (3124, 2287, 'disment', 3)\ninsert into YourTable (id, userid, variable, value) values (3125, 2287, 'disother', 2)\ninsert into YourTable (id, userid, variable, value) values (3126, 2287, 'disrefus', 7)\n"]], ['Counting consecutive duplicate records with SQL'], 3], [(1254673, 0), [["I don't know postgres, but this is standard SQL and may work for you. "], ['In SQL Server you can do this, which is a little easier to follow and will probably be more efficiently executed:']], [[' update entries set\n  processed = true\nwhere (\n  select count(*)\n  from entries as E\n  where E.user_id = entries.user_id\n  and E.created > entries.created\n) >= 3\n']], ['How to do an update based on a count - SQL (postgres)'], 2], [(1254673, 1), [['In SQL Server you can do this, which is a little easier to follow and will probably be more efficiently executed:'], ['Updating a CTE is a non-standard feature, and not all database systems support row_number. ']], [[' with T(id, user_id, created, processed, rk) as (\n  select\n    id, user_id, created, processed,\n    row_number() over (\n      partition by user_id\n      order by created desc, id\n    )\n  from entries\n)\n  update T set\n    processed = true\n  where rk > 3;\n']], ['How to do an update based on a count - SQL (postgres)'], 2], [(1254787, 0), [['Inside the trigger, you can use  COLUMNS_UPDATED()  like this in order to get updated value'], ["Here is the final version which handles more than 62 columns but give only the number of the updated columns. It's easy to link with 'syscolumns' to get the name"]], [[" -- Get the table id of the trigger\n--\nDECLARE @idTable      INT\n\nSELECT  @idTable = T.id \nFROM    sysobjects P JOIN sysobjects T ON P.parent_obj = T.id \nWHERE   P.id = @@procid\n\n-- Get COLUMNS_UPDATED if update\n--\nDECLARE @Columns_Updated VARCHAR(50)\n\nSELECT  @Columns_Updated = ISNULL(@Columns_Updated + ', ', '') + name \nFROM    syscolumns \nWHERE   id = @idTable   \nAND     CONVERT(VARBINARY,REVERSE(COLUMNS_UPDATED())) & POWER(CONVERT(BIGINT, 2), colorder - 1) > 0\n"]], ['SQL Server Update Trigger, Get Only modified fields'], 2], [(1254787, 1), [["Here is the final version which handles more than 62 columns but give only the number of the updated columns. It's easy to link with 'syscolumns' to get the name"], ['-10000']], [[" DECLARE @Columns_Updated VARCHAR(100)\nSET     @Columns_Updated = ''   \n\nDECLARE @maxByteCU INT\nDECLARE @curByteCU INT\nSELECT  @maxByteCU = DATALENGTH(COLUMNS_UPDATED()), \n        @curByteCU = 1\n\nWHILE @curByteCU <= @maxByteCU BEGIN\n    DECLARE @cByte INT\n    SET     @cByte = SUBSTRING(COLUMNS_UPDATED(), @curByteCU, 1)\n\n    DECLARE @curBit INT\n    DECLARE @maxBit INT\n    SELECT  @curBit = 1, \n            @maxBit = 8\n    WHILE @curBit <= @maxBit BEGIN\n        IF CONVERT(BIT, @cByte & POWER(2,@curBit - 1)) <> 0 \n            SET @Columns_Updated = @Columns_Updated + '[' + CONVERT(VARCHAR, 8 * (@curByteCU - 1) + @curBit) + ']'\n        SET @curBit = @curBit + 1\n    END\n    SET @curByteCU = @curByteCU + 1\nEND\n"]], ['SQL Server Update Trigger, Get Only modified fields'], 2], [(1254854, 0), [["There's lots of solutions. Addition to the Jhonny's solution, you can use a join"], ['OR use Intersect']], [[' SELECT DISTINCT t1.id\nFROM table t1, table t2\nWHERE t1.id = t2.id\n  AND t1.value = 2\n  AND t2.value = 5\n']], ['Finding ID having all values (mySQL, SQL)'], 2], [(1254854, 1), [['OR use Intersect'], ['-10000']], [[' SELECT id FROM table WHERE value = 2\n\nINTERSECT\n\nSELECT id FROM table WHERE value = 5\n']], ['Finding ID having all values (mySQL, SQL)'], 2], [(1255310, 0), [['-10000'], ["In response to Martin's comment... The above is the easiest way to do what you asked for that I know of. If you want to limit it to packages, try this:"]], [[" SELECT grantee\n  FROM all_tab_privs\n WHERE table_name = '<your object name>'\n  AND privilege = 'EXECUTE'\n  AND grantor = '<object owner>';\n"]], ['How do I check which schemata have been granted EXECUTE permission on an Oracle object?'], 2], [(1255310, 1), [["In response to Martin's comment... The above is the easiest way to do what you asked for that I know of. If you want to limit it to packages, try this:"], ['-10000']], [[" SELECT * FROM all_tab_privs JOIN all_objects ON (table_name = object_name)\n WHERE table_name = '<your object name>'\n   AND object_type = 'PACKAGE'\n   AND privilege = 'EXECUTE'\n   AND grantor = '<object owner>';\n"]], ['How do I check which schemata have been granted EXECUTE permission on an Oracle object?'], 2], [(1256495, 0), [["The Enterprise Manager for Oracle Forms Application server doesn't have a favicon over at my installation either.\nThe location to root of the site is"], ['In my case, its']], [[' $oracle_home\\Apache\\Apache\\htdocs\n']], ['Oracle Enterprise Manager Favicon'], 2], [(1256495, 1), [['In my case, its'], ['-10000']], [[' e:\\Applsinfra\\Apache\\Apache\\htdocs\n']], ['Oracle Enterprise Manager Favicon'], 2], [(1257557, 0), [['If you want the single JobId with the highest Value:'], ["But, that may give you multiple JobIds if thay all have the same Value. So, assuming you don't want that, I'd probably do:"]], [[' SELECT JobId FROM Jobs WHERE Value = SELECT MAX(Value) FROM Jobs\n']], ['SQL Sub-query -- Select JobID with a maximum JobValue'], 2], [(1257557, 1), [["But, that may give you multiple JobIds if thay all have the same Value. So, assuming you don't want that, I'd probably do:"], ['-10000']], [[' SELECT MAX(JobId) as JobId FROM Jobs WHERE Value = SELECT MAX(Value) FROM Jobs\n']], ['SQL Sub-query -- Select JobID with a maximum JobValue'], 2], [(1258168, 0), [['ANSI SQL:'], ['MySQL Join:']], [[' update table_one\nset intersects = \n    case when \n        (select count(*) from table_two where name = table_one.name) > 0 \n        then 1 \n    else 0 end\n']], ['Synchronizing N Values Accross Tables in SQL'], 5], [(1258168, 1), [['MySQL Join:'], ['You can put this query into a  trigger  to keep  intersects  up-to-date:']], [[' update table_one t1\n    left join table_two t2 on\n        t1.name = t2.name\nset t1.intersects = case when t2.name is not null then 1 else 0 end\n']], ['Synchronizing N Values Accross Tables in SQL'], 5], [(1258168, 2), [['You can put this query into a  trigger  to keep  intersects  up-to-date:'], ['An  intersects  column is great and all, but you may run into the issue where it gets out of sync. What you can do is use an  exists  function in your  select  when calling this:']], [[' create trigger intersections after insert for each row\nbegin\n\n    update table_one t1\n        left join table_two t2 on\n            t1.name = t2.name\n    set t1.intersects = case when t2.name is not null then 1 else 0 end\n    where t1.name = new.name\n\nend\n']], ['Synchronizing N Values Accross Tables in SQL'], 5], [(1258168, 3), [['An  intersects  column is great and all, but you may run into the issue where it gets out of sync. What you can do is use an  exists  function in your  select  when calling this:'], ['Moreover, you can also use a  left join  to pull back both cases:']], [[' select\n    *\nfrom\n    table_one t1\nwhere\n    exists (select 1 from table_two t2 where t2.name = t1.name)\n']], ['Synchronizing N Values Accross Tables in SQL'], 5], [(1258168, 4), [['Moreover, you can also use a  left join  to pull back both cases:'], ["Anything where  t2.name  is  null , you don't have an intersection. Anything where it isn't, you do. Of course, this can produce duplicate rows if you don't have a  unique  constraint on  name ."]], [[' select\n    *\nfrom\n    table_one t1\n    left join table_two t2 on\n        t1.name = t2.name\n']], ['Synchronizing N Values Accross Tables in SQL'], 5], [(1259458, 0), [['Next record (date greater than current record):'], ['Previous record (date less than current record):']], [[" SELECT id, title, MIN(created) AS created_date\nFROM photo\nWHERE created >\n  (SELECT created FROM photo WHERE id = '32kJ')\nGROUP BY created\nORDER BY created ASC\nLIMIT 1;\n"]], ['sql pulling a row for next or previous row of a current row'], 3], [(1259458, 1), [['Previous record (date less than current record):'], ['Example:']], [[" SELECT id, title, MAX(created) AS created_date\nFROM photo\nWHERE created <\n  (SELECT created FROM photo WHERE id = '32kJ')\nGROUP BY created\nORDER BY created DESC\nLIMIT 1;\n"]], ['sql pulling a row for next or previous row of a current row'], 3], [(1259458, 2), [['Example:'], ['-10000']], [[" CREATE TABLE `photo` (\n    `id` VARCHAR(5) NOT NULL,\n    `title` VARCHAR(255) NOT NULL,\n    `created` DATETIME NOT NULL,\n    INDEX `created` (`created` ASC),\n    PRIMARY KEY (`id`)\n)\nENGINE = InnoDB;\n\nINSERT INTO `photo` (`id`, `title`, `created`) VALUES ('XEi43', 'my family',       '2009-08-04');\nINSERT INTO `photo` (`id`, `title`, `created`) VALUES ('dDls',  'friends group',   '2009-08-05');\nINSERT INTO `photo` (`id`, `title`, `created`) VALUES ('32kJ',  'beautiful place', '2009-08-06');\nINSERT INTO `photo` (`id`, `title`, `created`) VALUES ('EOIk',  'working late',    '2009-08-07');\n\nSELECT * FROM photo ORDER BY created;\n+-------+-----------------+---------------------+\n| id    | title           | created             |\n+-------+-----------------+---------------------+\n| XEi43 | my family       | 2009-08-04 00:00:00 |\n| dDls  | friends group   | 2009-08-05 00:00:00 |\n| 32kJ  | beautiful place | 2009-08-06 00:00:00 |\n| EOIk  | working late    | 2009-08-07 00:00:00 |\n+-------+-----------------+---------------------+\n\n\nSELECT id, title, MIN(created) AS next_date\nFROM photo\nWHERE created >\n  (SELECT created FROM photo WHERE id = '32kJ')\nGROUP BY created\nORDER BY created ASC\nLIMIT 1;\n\n+------+--------------+---------------------+\n| id   | title        | next_date           |\n+------+--------------+---------------------+\n| EOIk | working late | 2009-08-07 00:00:00 |\n+------+--------------+---------------------+\n\nSELECT id, title, MAX(created) AS prev_date\nFROM photo\nWHERE created <\n  (SELECT created FROM photo WHERE id = '32kJ')\nGROUP BY created\nORDER BY created DESC\nLIMIT 1;\n\n+------+---------------+---------------------+\n| id   | title         | prev_date           |\n+------+---------------+---------------------+\n| dDls | friends group | 2009-08-05 00:00:00 |\n+------+---------------+---------------------+\n"]], ['sql pulling a row for next or previous row of a current row'], 3], [(1260245, 0), [['This condition:'], ["If you want a fallback match (return  'test 909'  if it exists, any  'test'  otherwise), use this:"]], [[" (REGEXP_LIKE(col1, :name || '\\s+' || :code)\nOR (NOT REGEXP_LIKE(col1, :name || '\\s+' || :code) AND REGEXP_LIKE(col1, :name))\n"]], ['"Smart" where clause for filtering values (Oracle 10g)'], 3], [(1260245, 1), [["If you want a fallback match (return  'test 909'  if it exists, any  'test'  otherwise), use this:"], [", or, if you don't like  UNION s:"]], [[" SELECT  *\nFROM    (\n        SELECT  *\n        FROM    t1\n        WHERE   REGEXP_LIKE(col1, name || '\\s+' || code)\n        UNION ALL\n        SELECT  *\n        FROM    t1\n        WHERE   REGEXP_LIKE(col1, name)\n        )\nWHERE   rownum = 1\n"]], ['"Smart" where clause for filtering values (Oracle 10g)'], 3], [(1260245, 2), [[", or, if you don't like  UNION s:"], ['The latter one, though, is less efficient, since it has to sort.']], [[" SELECT  *\nFROM    (\n        SELECT  *\n        FROM    t1\n        WHERE   REGEXP_LIKE(col1, name)\n        ORDER BY\n                CASE WHEN REGEXP_LIKE(col1, name || '\\s+' || code) THEN 0 ELSE 1 END\n        )\nWHERE   rownum = 1\n"]], ['"Smart" where clause for filtering values (Oracle 10g)'], 3], [(1261408, 0), [['Here is an example of using the LABEL command to give column text for two fields in the file named TESTFILE1.  The fields are named FIELD1 and FIELD2 in this example:'], ['Here is an example of using the LABEL command to give column headings that would show up in query results:']], [[" LABEL ON COLUMN TESTFILE1 \n(FIELD1 TEXT IS 'My Field 1 text', FIELD2 TEXT IS 'My Field 2 text')\n"]], ['Add a field description to a DB2/400 file'], 2], [(1261408, 1), [['Here is an example of using the LABEL command to give column headings that would show up in query results:'], ['When creating column headings, you get 60 characters per field.  The first 20 characters are line 1.  The second 20 characters are line 2.  The third 20 characters are line 3.  In the above example, the field headings would look like this:']], [[" LABEL ON COLUMN TESTFILE1\n(FIELD1 IS 'My field            Heading 1',\n FIELD2 IS 'My field            Heading 2')\n"]], ['Add a field description to a DB2/400 file'], 2], [(1261959, 0), [["e.g. in your union you'd have something like this:"], ['This inserts values into a table using Access VBA']], [[" SELECT 'Table1', id, ... FROM Table1\nUNION \nSELECT 'Table2', id, ... FROM Table2\n"]], ['How do I make an editable UNION query?'], 2], [(1261959, 1), [['This inserts values into a table using Access VBA'], ['-10000']], [[' Option Compare Database\nOption Explicit\n\nPublic Sub InsertDataPunk(TargetTable As String, IdVal As Long, MyVal As String)\n\n    Dim conn As ADODB.Connection\n    Set conn = CurrentProject.Connection\n\n    Dim sql As String\n    \'You could build something fancier here\n    sql = "INSERT INTO " & TargetTable & " VALUES (" & IdVal & ",\'" & MyVal & "\')"\n\n    Dim cmd As ADODB.Command\n    Set cmd = New ADODB.Command\n    Set cmd.ActiveConnection = conn\n    cmd.CommandText = sql\n    cmd.CommandType = adCmdText\n    cmd.Execute\n\nEnd Sub  \n\n\nInsertDataPunk "Table2", 7, "DooDar"\n']], ['How do I make an editable UNION query?'], 2], [(1262148, 0), [["If you'd also like to experiment with this in the browser,  I've set this all up on SQL Fiddle  too;"], ['SQL code']], [[' @Table1\n\nid | name\n---------\n1  | One\n2  | Two\n3  | Three\n4  | Four\n\n@Table2\n\nid | name\n---------\n1  | Partridge\n2  | Turtle Doves\n3  | French Hens\n5  | Gold Rings\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 1), [['SQL code'], ['An  INNER JOIN  SQL Statement, joined on the  id  field ']], [[" DECLARE @Table1 TABLE (id INT PRIMARY KEY CLUSTERED, [name] VARCHAR(25))\n\nINSERT INTO @Table1 VALUES(1, 'One');\nINSERT INTO @Table1 VALUES(2, 'Two');\nINSERT INTO @Table1 VALUES(3, 'Three');\nINSERT INTO @Table1 VALUES(4, 'Four');\n\nDECLARE @Table2 TABLE (id INT PRIMARY KEY CLUSTERED, [name] VARCHAR(25))\n\nINSERT INTO @Table2 VALUES(1, 'Partridge');\nINSERT INTO @Table2 VALUES(2, 'Turtle Doves');\nINSERT INTO @Table2 VALUES(3, 'French Hens');\nINSERT INTO @Table2 VALUES(5, 'Gold Rings');\n"]], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 2), [['An  INNER JOIN  SQL Statement, joined on the  id  field '], ['Results in ']], [[' SELECT \n    t1.id,\n    t1.name,\n    t2.name\nFROM\n    @Table1 t1\nINNER JOIN\n    @Table2 t2\n    ON \n        t1.id = t2.id\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 3), [['Results in '], ['A  LEFT JOIN  will return a resultset with all records from the table on the left hand side of the join (if you were to write out the statement as a one liner, the table that appears first) and fields from the table on the right side of the join that match the join expression and are included in the  SELECT  clause.  Missing  details will be populated with NULL']], [[' id | name | name\n----------------\n1  | One  | Partridge\n2  | Two  | Turtle Doves\n3  | Three| French Hens\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 4), [['A  LEFT JOIN  will return a resultset with all records from the table on the left hand side of the join (if you were to write out the statement as a one liner, the table that appears first) and fields from the table on the right side of the join that match the join expression and are included in the  SELECT  clause.  Missing  details will be populated with NULL'], ['Results in']], [[' SELECT \n    t1.id,\n    t1.name,\n    t2.name\nFROM\n    @Table1 t1\nLEFT JOIN\n    @Table2 t2\n    ON \n        t1.id = t2.id\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 5), [['Results in'], ['A  RIGHT JOIN  is the same logic as a  LEFT JOIN  but will return all records from the right-hand side of the join and fields from the left side that match the join expression and are included in the  SELECT  clause.']], [[' id | name | name\n----------------\n1  | One  | Partridge\n2  | Two  | Turtle Doves\n3  | Three| French Hens\n4  | Four | NULL\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 6), [['A  RIGHT JOIN  is the same logic as a  LEFT JOIN  but will return all records from the right-hand side of the join and fields from the left side that match the join expression and are included in the  SELECT  clause.'], ['Results in']], [[' SELECT \n    t1.id,\n    t1.name,\n    t2.name\nFROM\n    @Table1 t1\nRIGHT JOIN\n    @Table2 t2\n    ON \n        t1.id = t2.id\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 7), [['Results in'], ['Of course, there is also the  FULL OUTER JOIN , which includes records from both joined tables and populates any  missing  details with NULL.']], [[' id | name | name\n----------------\n1  | One  | Partridge\n2  | Two  | Turtle Doves\n3  | Three| French Hens\nNULL| NULL| Gold Rings\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 8), [['Of course, there is also the  FULL OUTER JOIN , which includes records from both joined tables and populates any  missing  details with NULL.'], ['Results in']], [[' SELECT \n    t1.id,\n    t1.name,\n    t2.name\nFROM\n    @Table1 t1\nFULL OUTER JOIN\n    @Table2 t2\n    ON \n        t1.id = t2.id\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 9), [['Results in'], ['And a  CROSS JOIN  (also known as a  CARTESIAN PRODUCT ), which is simply the product of cross applying fields in the  SELECT  statement from one table with the fields in the  SELECT  statement from the other table. Notice that there is no join expression in a  CROSS JOIN']], [[' id | name | name\n----------------\n1  | One  | Partridge\n2  | Two  | Turtle Doves\n3  | Three| French Hens\n4  | Four | NULL\nNULL| NULL| Gold Rings\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 10), [['And a  CROSS JOIN  (also known as a  CARTESIAN PRODUCT ), which is simply the product of cross applying fields in the  SELECT  statement from one table with the fields in the  SELECT  statement from the other table. Notice that there is no join expression in a  CROSS JOIN'], ['Results in ']], [[' SELECT \n    t1.id,\n    t1.name,\n    t2.name\nFROM\n    @Table1 t1\nCROSS JOIN\n    @Table2 t2\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 11), [['Results in '], ['Imagine there is now a Table3 ']], [[' id | name  | name\n------------------\n1  | One   | Partridge\n2  | Two   | Partridge\n3  | Three | Partridge\n4  | Four  | Partridge\n1  | One   | Turtle Doves\n2  | Two   | Turtle Doves\n3  | Three | Turtle Doves\n4  | Four  | Turtle Doves\n1  | One   | French Hens\n2  | Two   | French Hens\n3  | Three | French Hens\n4  | Four  | French Hens\n1  | One   | Gold Rings\n2  | Two   | Gold Rings\n3  | Three | Gold Rings\n4  | Four  | Gold Rings\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 12), [['Imagine there is now a Table3 '], ['The SQL code']], [[' @Table3\n\nid | name\n---------\n2  | Prime 1\n3  | Prime 2\n5  | Prime 3\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 13), [['The SQL code'], ['Now all three tables joined with  INNER JOINS']], [[" DECLARE @Table3 TABLE (id INT PRIMARY KEY CLUSTERED, [name] VARCHAR(25))\n\nINSERT INTO @Table3 VALUES(2, 'Prime 1');\nINSERT INTO @Table3 VALUES(3, 'Prime 2');\nINSERT INTO @Table3 VALUES(5, 'Prime 3');\n"]], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 14), [['Now all three tables joined with  INNER JOINS'], ['Results in']], [[' SELECT \n    t1.id,\n    t1.name,\n    t2.name,\n    t3.name\nFROM\n    @Table1 t1\nINNER JOIN\n    @Table2 t2\n    ON \n        t1.id = t2.id\nINNER JOIN\n    @Table3 t3\n    ON \n        t1.id = t3.id\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 15), [['Results in'], ['Now all three with  LEFT JOINS']], [[' id | name | name         | name\n-------------------------------\n2  | Two  | Turtle Doves | Prime 1\n3  | Three| French Hens  | Prime 2\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 16), [['Now all three with  LEFT JOINS'], ['Results in']], [[' SELECT \n    t1.id,\n    t1.name,\n    t2.name,\n    t3.name\nFROM\n    @Table1 t1\nLEFT JOIN\n    @Table2 t2\n    ON \n        t1.id = t2.id\nLEFT JOIN\n    @Table3 t3\n    ON \n        t1.id = t3.id\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 17), [['Results in'], ['Now with a  INNER JOIN  and a  LEFT JOIN']], [[' id | name | name         | name\n-------------------------------\n1  | One  | Partridge    | NULL\n2  | Two  | Turtle Doves | Prime 1\n3  | Three| French Hens  | Prime 2\n4  | Four | NULL         | NULL\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 18), [['Now with a  INNER JOIN  and a  LEFT JOIN'], ['Results in']], [[' SELECT \n    t1.id,\n    t1.name,\n    t2.name,\n    t3.name\nFROM\n    @Table1 t1\nINNER JOIN\n    @Table2 t2\n    ON \n        t1.id = t2.id\nLEFT JOIN\n    @Table3 t3\n    ON \n        t1.id = t3.id\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262148, 19), [['Results in'], ['Although we do not know the order in which the query optimiser will perform the operations, we will look at this query from top to bottom to understand the resultset. The  INNER JOIN  on ids between Table1 and Table2 will restrict the resultset to only those records satisfied by the join condition i.e. the three rows that we saw in the very first example. This  temporary  resultset will then be  LEFT JOIN ed to Table3 on ids between Table1 and Tables; There are records in Table3 with id 2 and 3, but not id 1, so t3.name field will have details in for 2 and 3 but not 1.']], [[' id | name | name         | name\n-------------------------------\n1  | One  | Partridge    | NULL\n2  | Two  | Turtle Doves | Prime 1\n3  | Three| French Hens  | Prime 2\n']], ['Three table join with joins other than INNER JOIN'], 20], [(1262548, 0), [['Try this:'], ["I like Russ's approach for getting rid of the time portion - if you have SQL Server 2005+ you can use this approach to preserve the time of day the peak happened:"]], [[' SELECT YEAR(Time15), MONTH(Time15), DAY(Time15), MAX(UserCount)\nFROM Table\nGROUP BY YEAR(Time15), MONTH(Time15), DAY(Time15)\n']], ['T-SQL query - GROUP BY issue'], 2], [(1262548, 1), [["I like Russ's approach for getting rid of the time portion - if you have SQL Server 2005+ you can use this approach to preserve the time of day the peak happened:"], ['-10000']], [[' WITH cte AS \n(\nSELECT Time15, UserCount, ROW_NUMBER() OVER (PARTITION BY DATEADD(dd, DATEDIFF(d, 0, Time15), 0) ORDER BY UserCount DESC) AS RowNumber\nFROM <Table>\n)\nSELECT Time15, UserCount\nFROM cte\nWHERE RowNumber = 1\n']], ['T-SQL query - GROUP BY issue'], 2], [(1263125, 0), [["A parameterized query doesn't actually do string replacement. If you use string substitution, then the SQL engine actually sees a query that looks like"], ['If you use a  ?  parameter, then the SQL engine sees a query that looks like']], [[" SELECT * FROM mytable WHERE user='wayne'\n"]], ['How does SQL query parameterisation work?'], 2], [(1263125, 1), [['If you use a  ?  parameter, then the SQL engine sees a query that looks like'], ['Which means that before it even sees the string "wayne", it can fully parse the query and understand, generally, what the query does. It sticks "wayne" into its own representation of the query, not the SQL string that describes the query. Thus, SQL injection is impossible, since we\'ve already passed the SQL stage of the process.']], [[' SELECT * FROM mytable WHERE user=<some value>\n']], ['How does SQL query parameterisation work?'], 2], [(1263780, 0), [["If it's one song after another, assuming a table named tblSongs with a 'sequence' & 'name' column.  You might want to try something like"], ['If song sequence X,Y is counted the same as Y,X then']], [[' select top N first.name, second.name, count(*)\nfrom tblSongs as first \n     inner join tblSongs as second\n         on second.sequence=first.sequence + 1\ngroup by first.name, second.name\norder by count(*) desc\n']], ['SQL - Find patterns of records'], 3], [(1263780, 1), [['If song sequence X,Y is counted the same as Y,X then'], ['If you are looking for any pattern of 2 song sequences, then ']], [[' select top N first.name, second.name, count(*)\nfrom tblSongs as first \n     inner join tblSongs as second\n         on second.sequence=first.sequence + 1\n         or second.sequence=first.sequence - 1\ngroup by first.name, second.name\norder by count(*) desc\n']], ['SQL - Find patterns of records'], 3], [(1263780, 2), [['If you are looking for any pattern of 2 song sequences, then '], ['Then do some statistical analysis on the spacing_count (which is beyond me).']], [[' select first.name, second.name, abs(second.sequence - first.sequence) as spacing_count\nfrom tblSongs as first \n     inner join tblSongs as second\n         on second.sequence=first.sequence + 1\n         or second.sequence=first.sequence - 1\n']], ['SQL - Find patterns of records'], 3], [(1265750, 0), [['Here is an example of the code you would use to enqueue a message:'], ["It's a similar process to dequeue:"]], [[' private void main(string[] args)\n{\n    string _connstring = "Data Source=host/DB;User\n    Id=USER;Password=PASSWORD1;";\n\n        OracleConnection _connObj = new OracleConnection(_connstring);\n\n        // Create a new queue object\n        OracleAQQueue _queueObj = new OracleAQQueue("UDT_NAME", _connObj);\n\n        _connObj.Open();\n\n        OracleTransaction _txn = _connObj.BeginTransaction();\n\n        // Set the payload type to your UDT\n        _queueObj.MessageType = OracleAQMessageType.Udt;\n        _queueObj.UdtTypeName = "UDT_NAME";\n\n        // Create a new message object\n        OracleAQMessage _msg = new OracleAQMessage();\n\n        // Create an instance of JobClass and pass it in as the payload for the\n        // message\n        UDT_CUSTOM_CLASS _custClass = new UDT_CUSTOM_CLASS();\n        // Load up all of the properties of custClass\n        custClass.CustString = "Custom String";\n        custClass.CustInt = 5;\n\n        _msg.Payload = custClass;\n\n        // Enqueue the message\n        _queueObj.EnqueueOptions.Visibility = OracleAQVisibilityMode.OnCommit;\n        _queueObj.Enqueue(_msg);\n\n        _txn.Commit();\n        _queueObj.Dispose();\n        _connObj.Close();\n        _connObj.Dispose();\n        _connObj = null;\n}\n']], ['Oracle Advanced Queueing with .Net'], 2], [(1265750, 1), [["It's a similar process to dequeue:"], ['That\'s a "simple" example. I pulled most of that out of Pro ODP.NET for Oracle Database 11g by Ed Zehoo. It\'s an excellent book and I strongly recommend it to help you gain a better understanding of the ins and outs of all things OPD.NET. You can buy the eBook here:  http://apress.com/book/view/9781430228202 . If you enter the coupon code MACWORLDOC, you can get the eBook for $21.00. That offer is only good for the eBook which comes in a password protected PDF format. I hope this helps!']], [[' private void main(string[] args)\n{\n    string _connstring = "Data Source=host/DB;User\n    Id=USER;Password=PASSWORD1;";\n\n    OracleConnection _connObj = new OracleConnection(_connstring);\n\n    // Create a new queue object\n    OracleAQQueue _queueObj = new OracleAQQueue("UDT_NAME", _connObj);\n\n    // Set the payload type to your UDT\n    _queueObj.MessageType = OracleAQMessageType.Udt;\n    _queueObj.UdtTypeName = "UDT_NAME";\n\n    _connObj.Open();\n\n    OracleTransaction _txn = _connObj.BeginTransaction();\n\n    // Dequeue the message.\n    _queueObj.DequeueOptions.Visibility = OracleAQVisibilityMode.OnCommit;\n    _queueObj.DequeueOptions.Wait = 10;\n    OracleAQMessage _deqMsg = _queueObj.Dequeue();\n\n    UDT_CUSTOM_CLASS data = (UDT_CUSTOM_CLASS)_deqMsg.Payload;\n\n    // At this point, you have the data and can do whatever you need to do with it\n\n    _txn.Commit();\n    _queueObj.Dispose();\n    _connObj.Close();\n    _connObj.Dispose();\n    _connObj = null;\n\n}\n']], ['Oracle Advanced Queueing with .Net'], 2], [(1266143, 0), [['-10000'], ['In this table:']], [[" WITH    q AS (\n        SELECT  m.*, ROW_NUMBER() OVER (ORDER BY column) AS rn\n        FROM    mytable m\n        )\nUPDATE  q\nSET     mycol = 'newvalue'\nWHERE   rn = @Y\n"]], ['SQL Server: How to update a cell value at position (x,y)'], 2], [(1266143, 1), [['In this table:'], [', the row  (1, 2)  is first when ordering by  col1 , and second when ordering by  col2 .']], [[' col1 col2\n1    2\n2    1\n']], ['SQL Server: How to update a cell value at position (x,y)'], 2], [(1266182, 0), [['-10000'], ["will show you all the database files in the current database - one of them is the one used for FILESTREAM storage, and should tell you what directory it's using."]], [[' SELECT * FROM sys.database_files\n']], ['SQL 2008 filestream'], 2], [(1266182, 1), [["will show you all the database files in the current database - one of them is the one used for FILESTREAM storage, and should tell you what directory it's using."], ['Marc']], [[' SELECT physical_name FROM sys.database_files WHERE type = 2\n']], ['SQL 2008 filestream'], 2], [(1267999, 0), [['You can search for an empty string using a bound variable but not for a  NULL . This query:'], ["will never match a  NULL  in  mytext , whatever value you pass from the client. To match  NULL s, you'll have to use other query:"]], [[' SELECT  *\nFROM    mytable \nWHERE   mytext = ?\n']], ['MySQL, better to insert NULL or empty string?'], 2], [(1267999, 1), [["will never match a  NULL  in  mytext , whatever value you pass from the client. To match  NULL s, you'll have to use other query:"], ['-10000']], [[' SELECT  *\nFROM    mytable \nWHERE   mytext IS NULL\n']], ['MySQL, better to insert NULL or empty string?'], 2], [(1269092, 0), [['As long as you are dealing with unsigned ints (whether as a column type in mysql, or as a contraint in other dbs), then this is true:'], ['One more thing: (A & B = A) includes the case where (A = B), so saying']], [[' (A & B == A) implies (B >= A) *not* (A >= B)\n']], ['Optimizing bitwise filtering in SQL'], 2], [(1269092, 1), [['One more thing: (A & B = A) includes the case where (A = B), so saying'], ['is redundant. Remove the (A = B) unless you can see a speed difference with your SQL engine.']], [[' IF (A = B) OR (A & B = A) ...\n']], ['Optimizing bitwise filtering in SQL'], 2], [(1269239, 0), [['My advice is to use transactions as follows (my SQL is a bit rusty but you should get the idea):'], ['Of course, your queries will need to change to adapt to that. If you have one that lists active tokens, it will change from:']], [[" -- begin transaction\nupdate my_table set count = count - 1 where id = '7'\ndelete from my_table where id = '7' and count = 0\ncommit\n"]], ['Decrement-or-delete in SQL'], 5], [(1269239, 1), [['Of course, your queries will need to change to adapt to that. If you have one that lists active tokens, it will change from:'], ['to:']], [[' select token from my_table\n']], ['Decrement-or-delete in SQL'], 5], [(1269239, 2), [['to:'], ['The decrement SQL in that case must be careful not to push the token count down to -1, so it would become:']], [[' select token from my_table where count > 0\n']], ['Decrement-or-delete in SQL'], 5], [(1269239, 3), [['The decrement SQL in that case must be careful not to push the token count down to -1, so it would become:'], ['That simplifies your SQL at the decrement time. If you still want those rows with zero-count to disappear, you could have another process that runs periodically to sweep them all up:']], [[" update my_table set count = count - 1 where id = '7' and count > 0\n"]], ['Decrement-or-delete in SQL'], 5], [(1269239, 4), [['That simplifies your SQL at the decrement time. If you still want those rows with zero-count to disappear, you could have another process that runs periodically to sweep them all up:'], ["That's just some alternatives to consider - if you really want them gone at the exact time their count reaches zero, then use the transaction method above."]], [[' delete from my_table where count = 0\n']], ['Decrement-or-delete in SQL'], 5], [(1270113, 0), [['I used the following syntax and it worked for me.'], ['Example:']], [[' EXECUTE (Query, Parameters) AT LinkedServerName\n']], ['Calling an Oracle function from SQL Server Linked Server'], 2], [(1270113, 1), [['Example:'], ['Important Points:']], [[" EXECUTE ( 'BEGIN ? := Package.MyFunction(?,?); END;', @ReturnValue, @InputPara, @OutputPara OUTPUT ) AT LinkedServerName\n"]], ['Calling an Oracle function from SQL Server Linked Server'], 2], [(1270359, 0), [['The way to do it is to make four tables, if the three ways have all different fields. Make one table for each of the different methods and one table for the order itself. In the order table, you will store the orderID and an enumerated value of which method the user used to pay (in addition to any other fields you need). For instance, if you were programming in .NET, you could create an enum:'], ["This would effectively set  CreditCard  equal to 0,  Check  to 1 and  WireTransfer  to 2. Have a field in your main order table for what type this is and save this integer there. In your payment tables, have a foreign key for the OrderID from your main table. If you wanted, you could keep the ID of the record in the payment table, but it's unnecessary because you can find the records based on the OrderID:"]], [[' Public Enum PaymentMethod\n    CreditCard\n    Check\n    WireTransfer\nEnd Enum\n']], ['DB design : save different details of payment (credit or check)'], 3], [(1270359, 1), [["This would effectively set  CreditCard  equal to 0,  Check  to 1 and  WireTransfer  to 2. Have a field in your main order table for what type this is and save this integer there. In your payment tables, have a foreign key for the OrderID from your main table. If you wanted, you could keep the ID of the record in the payment table, but it's unnecessary because you can find the records based on the OrderID:"], ["Of course if you have three different methods, you'll have to check first to see which kind of payment it is first and then use the appropriate  SELECT  statement:"]], [[' SELECT o.*, cc.* FROM Orders o \nINNER JOIN CreditCardPayments cc ON o.OrderID=cc.OrderID\nWHERE cc.OrderID=[some number]\n']], ['DB design : save different details of payment (credit or check)'], 3], [(1270359, 2), [["Of course if you have three different methods, you'll have to check first to see which kind of payment it is first and then use the appropriate  SELECT  statement:"], ['Once you determine with method, you can use pre-made  SELECT  statements that call from your different payment method tables.']], [[' SELECT PaymentMethod FROM Orders WHERE OrderID=[some number]\n']], ['DB design : save different details of payment (credit or check)'], 3], [(1271421, 0), [['In SQL Server, you could write something like that to get that information:'], ["and if you're only interested in the AVG across all entries, you could use:"]], [[' SELECT \n  t1.ID, t2.ID,\n  DATEDIFF(MILLISECOND, t2.PriceTime, test2.PriceTime)\nFROM table t1\nINNER JOIN table t2 ON t2.ID = t1.ID-1\nWHERE t1.ID > (SELECT MIN(ID) FROM table)\n']], ['SQL - Query to return result'], 2], [(1271421, 1), [["and if you're only interested in the AVG across all entries, you could use:"], ['Basically, you need to join the table with itself, and use "t1.ID = t2.ID-1" to associate item no. 2 in one table with item no. 1 in the other table and then calculate the time difference between the two. In order to avoid accessing item no. 0 which doesn\'t exist, use the "T1.ID > (SELECT MIN(ID) FROM table)" clause to start from the second item.']], [[' SELECT \n  AVG(DATEDIFF(MILLISECOND, t2.PriceTime, test2.PriceTime))\nFROM table t1\nINNER JOIN table t2 ON t2.ID = t1.ID-1\nWHERE t1.ID > (SELECT MIN(ID) FROM table)\n']], ['SQL - Query to return result'], 2], [(1271564, 0), [['If you want to insert the set of data from one of the existing tables into the other, use MERGE (the clue is in the question).'], ['If you want to insert both sets of data into a new table then you can do it like this:']], [[' SQL> select * from t1;\n\n        ID TS             MONEY\n---------- --------- ----------\n         1 25-JUL-09        123\n         2 04-AUG-09         67\n\nSQL> select * from t2;\n\n        ID TS             MONEY\n---------- --------- ----------\n         2 08-AUG-09         67\n         3 10-AUG-09        787\n\nSQL> merge into t1\n  2     using   t2\n  3     on ( t1.id = t2.id )\n  4     when matched then\n  5          update set ts = ts + ((t2.ts - t1.ts) / 2)\n  6     when not matched then\n  7          insert\n  8             (id, ts, money)\n  9     values\n 10              (t2.id, t2.ts, t2.money)\n 11  /\n\n2 rows merged.\n\nSQL> select * from t1\n  2  /\n\n        ID TS             MONEY\n---------- --------- ----------\n         1 25-JUL-09        123\n         2 10-AUG-09         67\n         3 10-AUG-09        787\n\nSQL>\n']], ['Non-trivial merge of two tables'], 2], [(1271564, 1), [['If you want to insert both sets of data into a new table then you can do it like this:'], ['-10000']], [[' SQL> insert all\n  2      when t1_id = t2_id then\n  3          into t3 values (t1_id, t1_ts + ((t2_ts - t1_ts)/2), t1_money)\n  4      when t1_id is not null and t2_id is null then\n  5          into t3 values (t1_id, t1_ts, t1_money)\n  6      when t1_id is null and t2_id is not null then\n  7          into t3 values (t2_id, t2_ts, t2_money)\n  8  select t1.id as t1_id\n  9         , t1.ts as t1_ts\n 10         , t1.money as t1_money\n 11         , t2.id as t2_id\n 12         , t2.ts as t2_ts\n 13         , t2.money as t2_money\n 14  from t1 full outer join t2 on t1.id = t2.id\n 15  /\nSQL> select * from t3\n  2  /\n\n        ID TS             MONEY\n---------- --------- ----------\n         2 06-AUG-09         67\n         1 25-JUL-09        123\n         3 10-AUG-09        787\n\nSQL>\n']], ['Non-trivial merge of two tables'], 2], [(1271570, 0), [["I realized I didn't actually put which choice I prefer in clear text: \nDetermine in the business logic how many points a user should get. Then issue a statement that tells the database to increment the score of the user by those points. By doing this, you're making the database responsible for keeping the data consistent, which is a task that should only ever belong to a database. I mean it's what they do, right?"], ["If you're doing a huge project, you might even want to consider putting this in a stored procedure since you might change the data structure in the future (such as breaking out the points to another table or some such):"]], [[' UPDATE users SET points = points + ? WHERE user_id = ?;\n']], ['Is it better to update or increment a value when persisting to a database?'], 2], [(1271570, 1), [["If you're doing a huge project, you might even want to consider putting this in a stored procedure since you might change the data structure in the future (such as breaking out the points to another table or some such):"], ['-10000']], [[' userChangePoints ?, ?\n']], ['Is it better to update or increment a value when persisting to a database?'], 2], [(1271643, 0), [['Starting with what I think is the simplest, DISTINCT, really is just that.  It returns the distinct combinations of rows.  Think of this dataset:'], ['This will return 3 rows because the 4th row in the dataset exactly matches the first row.\nResult:']], [[' COL1      COL2      COL3\nA         B         C\nD         E         F\nG         H         I\nA         B         C   <- duplicate of row 1\n']], ['What is the difference between group by, distinct, Union for selecting distinct values for multiple columns?'], 6], [(1271643, 1), [['This will return 3 rows because the 4th row in the dataset exactly matches the first row.\nResult:'], ['For this dataset:']], [[' COL1      COL2      COL3\nA         B         C\nD         E         F\nG         H         I\n']], ['What is the difference between group by, distinct, Union for selecting distinct values for multiple columns?'], 6], [(1271643, 2), [['For this dataset:'], ['would return']], [[' COL1      COL2\nA         5\nA         6\nB         2\nC         3\nC         4\nC         5\n']], ['What is the difference between group by, distinct, Union for selecting distinct values for multiple columns?'], 6], [(1271643, 3), [['would return'], ['a UNION just takes results from different queries and presents them as 1 result set:']], [[' COL1     SUM(COL2)\nA        11\nB        2\nC        12\n']], ['What is the difference between group by, distinct, Union for selecting distinct values for multiple columns?'], 6], [(1271643, 4), [['a UNION just takes results from different queries and presents them as 1 result set:'], ['Result Set:']], [[' Table1\nCOL1\nA\n\nTable2\nCOLX\nB\n\nTable3\nWHATEVER_COLUMN_NAME\nGiddyup\n\nselect COL1 from Table1\nUNION\nselect COLX from Table2\nUNION \nselect WHATEVER_COLUMN_NAME from Table3;\n']], ['What is the difference between group by, distinct, Union for selecting distinct values for multiple columns?'], 6], [(1271643, 5), [['Result Set:'], ["When performing a union, the column datatypes must match up.  You can't UNION a number column with a char column (unless you explicitly perform a data conversion)"]], [[' A\nB\nGiddyup\n']], ['What is the difference between group by, distinct, Union for selecting distinct values for multiple columns?'], 6], [(1271825, 0), [["Slight adjustment to the temp table in that I've added a StartDate field to both @timeranges and @blockedtimes"], ['Anyways seems simpler than some of the other answer posted - cheers for everyones help :)']], [[' declare @timeranges table ( StartDate datetime, StartDateTime datetime, EndDateTime datetime ) \ndeclare @blockedtimes table ( StartDate datetime, StartDateTime datetime, EndDateTime datetime )\n']], ['Selecting overlapping time ranges'], 2], [(1271825, 1), [['Anyways seems simpler than some of the other answer posted - cheers for everyones help :)'], ['-10000']], [[' select \n    *\nfrom\n(\n    -- first SELECT get start boundry\n    select t.StartDateTime s, b.StartDateTime e\n    from @timeranges t, @blockedtimes b\n    where \n        -- same day and blocks overlaps timerange\n        t.StartDate = b.StartDate and (t.StartDateTime <= b.EndDateTime and b.StartDateTime <= t.EndDateTime)\n    and\n        -- the following is the important bit for this SELECT   \n        not exists (select 1 from @blockedtimes b2 where b2.StartDate = b.StartDate and b2.StartDateTime < b.StartDateTime)\nunion\n    -- second SELECT get spikes ie middle\n    select b1.EndDateTime s, b2.StartDateTime e\n    from @timeranges t, @blockedtimes b1, @blockedtimes b2\n    where \n        -- same day and blocks overlaps timerange\n        t.StartDate = b1.StartDate and (t.StartDateTime <= b1.EndDateTime and b1.StartDateTime <= t.EndDateTime) \n    and \n        -- same day and blocks overlaps timerange\n        t.StartDate = b2.StartDate and (t.StartDateTime <= b2.EndDateTime and b2.StartDateTime <= t.EndDateTime) \n    and \n        -- the following is the important bit for this SELECT\n        b1.EndDateTime < b2.StartDateTime\nunion\n    -- third SELECT get end boundry\n    select b.EndDateTime s, t.EndDateTime e\n    from @timeranges t, @blockedtimes b\n    where \n        -- same day and blocks overlaps timerange\n        t.StartDate = b.StartDate and (t.StartDateTime <= b.EndDateTime and b.StartDateTime <= t.EndDateTime)\n    and \n        -- the following is the important bit for this SELECT\n        not exists (select 1 from @blockedtimes b2 where b2.StartDate = b.StartDate and b2.StartDateTime > b.StartDateTime)\n) t1\n']], ['Selecting overlapping time ranges'], 2], [(1272391, 0), [['If your properties are heavily product-dependent (i. e. there are at least ten properties that are not shared by  all  products), then you should consider creating a class table:'], [', a class-property table']], [[' classId        parent\n[Tool]         [NULL]\n[Screwdriver]  [Tool]\n']], ['How to construct a repository Entity having an array of parts'], 3], [(1272391, 1), [[', a class-property table'], [', and a value table']], [[' classId        property    \n[Screwdriver]  Type\n[Screwdriver]  Size\n']], ['How to construct a repository Entity having an array of parts'], 3], [(1272391, 2), [[', and a value table'], ['Prices tend to be  slowly changing dimensions .']], [[' ItemId   classId        property    value\n1        [Screwdriver]  Type        PH\n1        [Screwdriver]  Size        2\n']], ['How to construct a repository Entity having an array of parts'], 3], [(1272990, 0), [["Given that you're essentially doing a full table scan anyway (as your query is extracting all data from this table, excluding the few rows that wouldn't have name parts that were first, middle or last), you may want to consider writing the query so that it just returns the data in a slightly different format, such as:"], ["Of course, you'll end up with 3 rows instead of one for each name, but it may be trivial for your client code to roll these together.  You can also roll the 3 rows up into one by using decode, group by and max:"]], [['   SELECT person_id\n       , name_part_id\n       , name_part\n    FROM NAME_PART\n   WHERE name_part_id IN (1, 2, 3)\nORDER BY person_id\n       , name_part_id;\n']], ['Help optimizing an Oracle query'], 6], [(1272990, 1), [["Of course, you'll end up with 3 rows instead of one for each name, but it may be trivial for your client code to roll these together.  You can also roll the 3 rows up into one by using decode, group by and max:"], ['Original query:']], [['   SELECT person_id\n       , max(decode(name_part_id, 1, name_part, null)) first\n       , max(decode(name_part_id, 2, name_part, null)) middle\n       , max(decode(name_part_id, 3, name_part, null)) last\n    FROM NAME_PART\n   WHERE name_part_id IN (1, 2, 3)\nGROUP BY person_id\nORDER BY person_id;\n']], ['Help optimizing an Oracle query'], 6], [(1272990, 2), [['Original query:'], ['My query #1 (3 rows/person):']], [[' Execution Plan\n----------------------------------------------------------\n\n------------------------------------------------------------------------------\n| Id  | Operation           | Name      | Rows  | Bytes |TempSpc| Cost (%CPU)|\n------------------------------------------------------------------------------\n|   0 | SELECT STATEMENT    |           |   113K|    11M|       |  1364   (2)|\n|*  1 |  HASH JOIN          |           |   113K|    11M|  2528K|  1364   (2)|\n|*  2 |   TABLE ACCESS FULL | NAME_PART | 56150 |  1864K|       |   229   (3)|\n|*  3 |   HASH JOIN         |           | 79792 |  5298K|  2528K|   706   (2)|\n|*  4 |    TABLE ACCESS FULL| NAME_PART | 56150 |  1864K|       |   229   (3)|\n|*  5 |    TABLE ACCESS FULL| NAME_PART | 56150 |  1864K|       |   229   (3)|\n------------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   1 - access("FIRST_NAME"."PERSON_ID"="LAST_NAME"."PERSON_ID")\n   2 - filter("LAST_NAME"."NAME_PART_ID"=3)\n   3 - access("FIRST_NAME"."PERSON_ID"="MIDDLE_NAME"."PERSON_ID")\n   4 - filter("FIRST_NAME"."NAME_PART_ID"=1)\n   5 - filter("MIDDLE_NAME"."NAME_PART_ID"=2)\n\nStatistics\n----------------------------------------------------------\n          0  recursive calls\n          0  db block gets\n       6740  consistent gets\n          0  physical reads\n          0  redo size\n    5298174  bytes sent via SQL*Net to client\n      26435  bytes received via SQL*Net from client\n       3745  SQL*Net roundtrips to/from client\n          0  sorts (memory)\n          0  sorts (disk)\n      56150  rows processed\n']], ['Help optimizing an Oracle query'], 6], [(1272990, 3), [['My query #1 (3 rows/person):'], ['My query #2 (1 row/person):']], [[' Execution Plan\n----------------------------------------------------------\n\n-----------------------------------------------------------------------------\n| Id  | Operation          | Name      | Rows  | Bytes |TempSpc| Cost (%CPU)|\n-----------------------------------------------------------------------------\n|   0 | SELECT STATEMENT   |           |   168K|  5593K|       |  1776   (2)|\n|   1 |  SORT ORDER BY     |           |   168K|  5593K|    14M|  1776   (2)|\n|*  2 |   TABLE ACCESS FULL| NAME_PART |   168K|  5593K|       |   230   (3)|\n-----------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   2 - filter("NAME_PART_ID"=1 OR "NAME_PART_ID"=2 OR "NAME_PART_ID"=3)\n\nStatistics\n----------------------------------------------------------\n          1  recursive calls\n          0  db block gets\n       1005  consistent gets\n          0  physical reads\n          0  redo size\n    3799794  bytes sent via SQL*Net to client\n      78837  bytes received via SQL*Net from client\n      11231  SQL*Net roundtrips to/from client\n          1  sorts (memory)\n          0  sorts (disk)\n     168450  rows processed\n']], ['Help optimizing an Oracle query'], 6], [(1272990, 4), [['My query #2 (1 row/person):'], ["Turns out, you can squeeze it a bit faster still; I tried to avoid the sort by adding an index hint to force the use of the person_id index.  I managed to knock off another 10%, but it still looks like it's sorting:"]], [[' Execution Plan\n----------------------------------------------------------\n\n-----------------------------------------------------------------------------\n| Id  | Operation          | Name      | Rows  | Bytes |TempSpc| Cost (%CPU)|\n-----------------------------------------------------------------------------\n|   0 | SELECT STATEMENT   |           | 56150 |  1864K|       |  1115   (3)|\n|   1 |  SORT GROUP BY     |           | 56150 |  1864K|  9728K|  1115   (3)|\n|*  2 |   TABLE ACCESS FULL| NAME_PART |   168K|  5593K|       |   230   (3)|\n-----------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   2 - filter("NAME_PART_ID"=1 OR "NAME_PART_ID"=2 OR "NAME_PART_ID"=3)\n\nStatistics\n----------------------------------------------------------\n          1  recursive calls\n          0  db block gets\n       1005  consistent gets\n          0  physical reads\n          0  redo size\n    5298159  bytes sent via SQL*Net to client\n      26435  bytes received via SQL*Net from client\n       3745  SQL*Net roundtrips to/from client\n          1  sorts (memory)\n          0  sorts (disk)\n      56150  rows processed\n']], ['Help optimizing an Oracle query'], 6], [(1272990, 5), [["Turns out, you can squeeze it a bit faster still; I tried to avoid the sort by adding an index hint to force the use of the person_id index.  I managed to knock off another 10%, but it still looks like it's sorting:"], ["However, the plans above are all based on the assumption that you're selecting from the entire table.  If you constrain the results based on person_id (e.g., person_id between 55968 and 56000), it turns out that your original query with the hash joins is the fastest (27 vs. 106 consistent gets for the constraint I specified)."]], [['   SELECT /*+ index(name_part,NAME_PART_person_id) */ person_id\n       , max(decode(name_part_id, 1, name_part)) first\n       , max(decode(name_part_id, 2, name_part)) middle\n       , max(decode(name_part_id, 3, name_part)) last\n    FROM name_part\n   WHERE name_part_id IN (1, 2, 3)\nGROUP BY person_id\nORDER BY person_id;\n\nExecution Plan\n----------------------------------------------------------\n\n-----------------------------------------------------------------------------------------------------\n| Id  | Operation                      | Name                  | Rows  | Bytes |TempSpc| Cost (%CPU)|\n-----------------------------------------------------------------------------------------------------\n|   0 | SELECT STATEMENT               |                       | 56150 |  1864K|       |  3385   (1)|\n|   1 |  SORT GROUP BY                 |                       | 56150 |  1864K|  9728K|  3385   (1)|\n|   2 |   INLIST ITERATOR              |                       |       |       |       |            |\n|   3 |    TABLE ACCESS BY INDEX ROWID | NAME_PART             |   168K|  5593K|       |  2500   (1)|\n|   4 |     BITMAP CONVERSION TO ROWIDS|                       |       |       |       |            |\n|*  5 |      BITMAP INDEX SINGLE VALUE | NAME_PART_NAME_PART_ID|       |       |       |            |\n-----------------------------------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   5 - access("NAME_PART_ID"=1 OR "NAME_PART_ID"=2 OR "NAME_PART_ID"=3)\n\nStatistics\n----------------------------------------------------------\n          1  recursive calls\n          0  db block gets\n        971  consistent gets\n          0  physical reads\n          0  redo size\n    5298159  bytes sent via SQL*Net to client\n      26435  bytes received via SQL*Net from client\n       3745  SQL*Net roundtrips to/from client\n          1  sorts (memory)\n          0  sorts (disk)\n      56150  rows processed\n']], ['Help optimizing an Oracle query'], 6], [(1274296, 0), [['Create a function that can generate a date table as follows: \n(stolen from  http://www.codeproject.com/KB/database/GenerateDateTable.aspx )'], ['Then, join against that table']], [[" Create Function dbo.fnDateTable\n(\n  @StartDate datetime,\n  @EndDate datetime,\n  @DayPart char(5) -- support 'day','month','year','hour', default 'day'\n)\nReturns @Result Table\n(\n  [Date] datetime\n)\nAs\nBegin\n  Declare @CurrentDate datetime\n  Set @CurrentDate=@StartDate\n  While @CurrentDate<=@EndDate\n  Begin\n    Insert Into @Result Values (@CurrentDate)\n    Select @CurrentDate=\n    Case\n    When @DayPart='year' Then DateAdd(yy,1,@CurrentDate)\n    When @DayPart='month' Then DateAdd(mm,1,@CurrentDate)\n    When @DayPart='hour' Then DateAdd(hh,1,@CurrentDate)\n    Else\n      DateAdd(dd,1,@CurrentDate)\n    End\n  End\n  Return\nEnd\n"]], ['Select data from SQL DB per day'], 2], [(1274296, 1), [['Then, join against that table'], ['-10000']], [[' SELECT dates.Date as Date, sum(SubTotal+TaxAmount+ShippingAmount)\nFROM [fnDateTable] (dateadd("m",-1,CONVERT(VARCHAR(10),GETDATE(),111)),CONVERT(VARCHAR(10),GETDATE(),111),\'day\') dates \nLEFT JOIN Orders\nON dates.Date = DateCreated\nGROUP BY dates.Date\n']], ['Select data from SQL DB per day'], 2], [(1278524, 0), [['I "partitioned" the table into two distinct sets, those who do not have a mask (v1) and those who do (v2)'], ['Now, the optimizer says:']], [[" select * from (select * from tmp where mask = '        ') v1 where vals like :srch\n union all\nselect * from (select * from tmp where mask > '        ') v2 where vals like maskmerge(mask,:srch);\n"]], ['String matching in Oracle 10g where either side can have wildcards'], 4], [(1278524, 1), [['Now, the optimizer says:'], ['Fyi:']], [[' Operation                                Object Name       Rows Bytes Cost\nSELECT STATEMENT Optimizer Mode=ALL_ROWS                      2          5    \n  UNION-ALL\n    TABLE ACCESS BY INDEX ROWID          SCHEMA.TMP           1    90    2  \n      INDEX RANGE SCAN                   SCHEMA.I_TMP_MASK    1          1\n    TABLE ACCESS BY INDEX ROWID          SCHEMA.TMP           1    90    3\n      INDEX RANGE SCAN                   SCHEMA.I_TMP_MASK    2          1\n']], ['String matching in Oracle 10g where either side can have wildcards'], 4], [(1278524, 2), [['Fyi:'], ['Full test case (with typical data distribution):']], [[" CREATE OR REPLACE FUNCTION maskmerge (A IN VARCHAR, B IN VARCHAR)\n RETURN VARCHAR deterministic parallel_enable\n IS  \n alen int;\n blen int;\n mlen int;   \n res varchar(4000);\n ca char;\n cb char;\nBEGIN\n if (a is null) then\n  return b;\n end if;\n if (b is null) then\n  return a;\n end if;\n alen:=length(a);\n blen:=length(b);\n if (alen<blen) then\n  mlen:=alen;\n else\n  mlen:=blen;\n end if;\n for i in 1 .. mlen loop\n  ca:=substr(a,i,1);\n  cb:=substr(b,i,1);\n  if (ca='_' or cb='_') then\n   res:=res||'_';\n  elsif (ca=' ') then\n   res:=res||cb;\n  elsif (cb=' ') then\n   res:=res||ca;\n  else\n   res:=res||cb;\n  end if;\n end loop;\n return res;\nEND;\n"]], ['String matching in Oracle 10g where either side can have wildcards'], 4], [(1278524, 3), [['Full test case (with typical data distribution):'], ['-10000']], [[" -----------------------------------------------------------------\n\nCREATE OR REPLACE FUNCTION maskmerge (A IN VARCHAR, B IN VARCHAR)\n RETURN VARCHAR deterministic parallel_enable\n IS  \n alen int;\n blen int;\n mlen int;   \n res varchar(4000);\n ca char;\n cb char;\nBEGIN\n if (a is null) then\n  return b;\n end if;\n if (b is null) then\n  return a;\n end if;\n alen:=length(a);\n blen:=length(b);\n if (alen<blen) then\n  mlen:=alen;\n else\n  mlen:=blen;\n end if;\n for i in 1 .. mlen loop\n  ca:=substr(a,i,1);\n  cb:=substr(b,i,1);\n  if (ca='_' or cb='_') then\n   res:=res||'_';\n  elsif (ca=' ') then\n   res:=res||cb;\n  elsif (cb=' ') then\n   res:=res||ca;\n  else\n   res:=res||cb;\n  end if;\n end loop;\n return res;\nEND;\n/\n\ncreate table tmp\n(\nid int not null primary key,\nipv6address varchar(32) not null,\nipv6addressmask varchar(32) default ('                                ') not null\n);\n\ncreate sequence s_tmp;\n\ncreate index i_tmp_addr on tmp(ipv6address);\n\ncreate index i_tmp_mask on tmp(ipv6addressmask);\n\ncreate or replace trigger t_i_tmp before insert on tmp referencing new as new old as old FOR EACH ROW\nDECLARE\n    tmpVar tmp.id%TYPE;\nbegin\nSELECT s_tmp.NEXTVAL INTO tmpVar FROM dual;\n:new.id:=tmpVar;\nend;\n\nexec dbms_random.initialize(17809465);\n\ninsert into tmp (ipv6address) \nselect decode(trunc(dbms_random.value(0,2)),0,'20010db80000000000000000',1,'00000000000000000000ffff','00000000000000000000ffff') \n||trim(to_char(dbms_random.value(0, 4294967296),'0000000x')) \nas val from dual\nconnect by level <= 10000;\n\ninsert into tmp\nSELECT * FROM\n( SELECT * FROM tmp\nORDER BY dbms_random.value )\nWHERE rownum <= 200;\n\ninsert into tmp values (null,'00000000000000000000ffff12345678','                                ');\n\ninsert into tmp values (null,'00000000000000000000ffff12345678','                              _ ');\n\ninsert into tmp values (null,'00000000000000000000ffff1234567_','                              __');\n\n--select * from tmp order by ipv6address\n\n-- network redaction of ipv4 \nupdate tmp set ipv6addressmask=maskmerge('                        ______  ',ipv6addressmask),ipv6address=maskmerge('                        ______  ',ipv6address) where length(ipv6address)/32*dbms_random.value<0.005;\n\n-- host redaction of ipv4 \nupdate tmp set ipv6addressmask=maskmerge('                              __',ipv6addressmask),ipv6address=maskmerge('                              __',ipv6address) where length(ipv6address)/32*dbms_random.value<0.005;\n\n-- full redaction of ipv4 \nupdate tmp set ipv6addressmask=maskmerge('                              __',ipv6addressmask),ipv6address=maskmerge('                              __',ipv6address) where ipv6addressmask='                        ______  ' and length(ipv6address)/32*dbms_random.value<0.04;\n\n-- network report redaction of ipv4 \nupdate tmp set ipv6addressmask=maskmerge('                        ______  ',ipv6addressmask) where length(ipv6address)/32*dbms_random.value<0.005;\n\n-- host report redaction of ipv4 \nupdate tmp set ipv6addressmask=maskmerge('                              __',ipv6addressmask) where length(ipv6address)/32*dbms_random.value<0.005;\n\n-- full report redaction of ipv4 \nupdate tmp set ipv6addressmask=maskmerge('                              __',ipv6addressmask) where ipv6addressmask='                        ______  ' and length(ipv6address)/32*dbms_random.value<0.04;\n\nselect count(*) from tmp where instr(ipv6address,'_')>0;\n\nselect count(*) from tmp where ipv6addressmask > '                                '; \n\n-- srch := '00000000000000000000ffff12345678';  \n\nselect * from (select * from tmp where ipv6addressmask = '                                ') v1 where ipv6address like :srch\n union all\nselect * from (select * from tmp where ipv6addressmask > '                                ') v2 where ipv6address like maskmerge(ipv6addressmask,:srch);\n\n/*\nOperation                                Object Name Rows Bytes Cost\n---------------------------------------- ----------- ---- ----- ----\nSELECT STATEMENT Optimizer Mode=ALL_ROWS              510         29                                 \n  UNION-ALL                                              \n    TABLE ACCESS BY INDEX ROWID          TMP          500   23K   10                                 \n      INDEX RANGE SCAN                   I_TMP_ADDR    92          2                                 \n    TABLE ACCESS BY INDEX ROWID          TMP           10   490   19                                 \n      INDEX RANGE SCAN                   I_TMP_MASK   207          2                                 \n\n*/\n\nSELECT * FROM tmp WHERE ipv6address LIKE :srch OR :srch LIKE ipv6address\n\n/*\n\nOperation                                Object Name Rows Bytes Cost\n---------------------------------------- ----------- ---- ----- ----\nSELECT STATEMENT Optimizer Mode=ALL_ROWS              995         22                                 \n  TABLE ACCESS FULL                      TMP          995   47K   22                                 \n\n*/\n\n-----------------------------------------------------------------\n\ndrop table tmp;\n\ndrop sequence s_tmp;\n\ndrop function maskmerge;\n\n-----------------------------------------------------------------\n"]], ['String matching in Oracle 10g where either side can have wildcards'], 4], [(1280753, 0), [['No table? Make a table. I always keep a dummy table around just for this.'], ['Thanks JR!']], [[' create table artificial_range( \n  id int not null primary key auto_increment, \n  name varchar( 20 ) null ) ;\n\n-- or whatever your database requires for an auto increment column\n\ninsert into artificial_range( name ) values ( null )\n-- create one row.\n\ninsert into artificial_range( name ) select name from artificial_range;\n-- you now have two rows\n\ninsert into artificial_range( name ) select name from artificial_range;\n-- you now have four rows\n\ninsert into artificial_range( name ) select name from artificial_range;\n-- you now have eight rows\n\n--etc.\n\ninsert into artificial_range( name ) select name from artificial_range;\n-- you now have 1024 rows, with ids 1-1024\n']], ['SQL Query for count of records matching day in a date range?'], 3], [(1280753, 1), [['Thanks JR!'], ['Edit: I should be joining the other way:']], [[' create view each_of_the_last_30_days as\nselect date_sub( now(), interval (id - 1) day ) as adate\nfrom artificial_range where id < 32;\n']], ['SQL Query for count of records matching day in a date range?'], 3], [(1280753, 2), [['Edit: I should be joining the other way:'], ['-10000']], [[' SELECT COUNT(*) cnt, b.adate\nFROM  each_of_the_last_30_days b\nleft outer join sample a \n on ( b.adate BETWEEN a.start_active AND a.last_active)\nGROUP BY b.adate;\n']], ['SQL Query for count of records matching day in a date range?'], 3], [(1282776, 0), [['For instance, in PostgreSQL you use the \\set command in plsql:'], ['However, I am not sure if MySQL have something like that. It do have variables, and since the host and user is a string, you might be able to do something like this:']], [[" \\set user = foo\ndrop user :user;\ncreate user :user identified by 'password';\n"]], ['Does [My]SQL have a Pre-Processor-like Facility?'], 3], [(1282776, 1), [['However, I am not sure if MySQL have something like that. It do have variables, and since the host and user is a string, you might be able to do something like this:'], ["If variables doesn't work with the drop and create user statements, you can always modify the mysql.user table directly, just don't forget to execute  flush privileges  after."]], [[" select @user = 'foo';\nselect @host = 'localhost;\n\ndrop user @user@@host;\ncreate user @user@@host identified by 'password';\n"]], ['Does [My]SQL have a Pre-Processor-like Facility?'], 3], [(1282776, 2), [["If variables doesn't work with the drop and create user statements, you can always modify the mysql.user table directly, just don't forget to execute  flush privileges  after."], ['-10000']], [[" insert into user values(host,@user,PASSWORD('some_pass'),\n       'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y');\nflush privileges;\n"]], ['Does [My]SQL have a Pre-Processor-like Facility?'], 3], [(1283228, 0), [["Here an SQL PLUS example with n=100, I admit that it isn't very sophisticated but it will do the job."], ['This will output in file parts.lst:']], [[" set pages 0\nset lines 200\n\ndrop table random_strings;\n\ncreate table random_strings \nas \nselect upper(dbms_random.string('A', 12)) rndmstr\nfrom dual \nconnect by level < 1000;\n\n\nspool parts\n\nselect 'select '||level||'/100,percentile_disc('||level||\n       '/100) within group (order by RNDMSTR) from random_strings;' \n       sql_statement\nfrom dual \nconnect by level <= 100\n/\n\nspool off\n"]], ['How should I range partition an index with a varchar2 column in Oracle? Is it a bad idea?'], 3], [(1283228, 1), [['This will output in file parts.lst:'], ['Script parts.lst will output:']], [[' select 1/100,percentile_disc(1/100) within group (order by RNDMSTR) from random_strings;                                                                                                                \nselect 2/100,percentile_disc(2/100) within group (order by RNDMSTR) from random_strings;                                                                                                                \nselect 3/100,percentile_disc(3/100) within group (order by RNDMSTR) from random_strings;                                                 \n...\nselect 100/100,percentile_disc(100/100) within group (order by RNDMSTR) from random_strings;                                                 \n']], ['How should I range partition an index with a varchar2 column in Oracle? Is it a bad idea?'], 3], [(1283228, 2), [['Script parts.lst will output:'], ['-10000']], [['    ,01 AJUDRRSPGMNP\n   ,02 AOMJZQPZASQZ\n   ,03 AWDQXVGLLUSJ\n   ,04 BIEPUHAEMELR\n   .... \n   ,99 ZTMHDWTXUJAR\n   1   ZYVJLNATVLOY\n']], ['How should I range partition an index with a varchar2 column in Oracle? Is it a bad idea?'], 3], [(1283877, 0), [['If (like in your example) you know the hierarchyid values you want to manipulate in advance, you can do it directly, e.g.:'], ['If you need to get your new hierarchyid values dynamically, take a look into the  GetDescendant()  and  GetAncestor()  functions. Using that, the example would look something like this:']], [[" -- Place 1st node between 2nd and 3rd\nUPDATE yourTable SET node = CAST('/8/2.5/' AS hierarchyid) WHERE value = 36;\n-- Move 3rd node to 1st\nUPDATE yourTable SET node = CAST('/8/1/' AS hierarchyid) WHERE value = 34;\n"]], ['Reorder nodes in SQL Hierarchy data type'], 2], [(1283877, 1), [['If you need to get your new hierarchyid values dynamically, take a look into the  GetDescendant()  and  GetAncestor()  functions. Using that, the example would look something like this:'], ["Note that the hierarchyids do not stay the same in this example. At least one will end up using a 'fraction' for its position (e.g. '/8/2.5/' instead of '/8/3/')."]], [[' DECLARE @Parent hierarchyid, @Child1 hierarchyid, @Child2 hierarchyid\n\n-- Grab hierarchyids from 2nd and 3rd node\nSELECT @Child1 = node FROM yourTable WHERE value = 38;\nSELECT @Child2 = node FROM yourTable WHERE value = 34;\n-- Get the parent hierarchyid\nSELECT @Parent = @Child1.GetAncestor(1);\n\n-- Update 1st node to end up between 2nd and 3rd\nUPDATE yourTable SET node = @Parent.GetDescendant(@Child1, @Child2) WHERE value = 36;\n-- Update 3rd node to end up before 2nd\nUPDATE yourTable SET node = @Parent.GetDescendant(NULL, @Child1) WHERE value = 34;\n']], ['Reorder nodes in SQL Hierarchy data type'], 2], [(1288397, 0), [["It's hard to guess since we don't see your view definition, but try this:"], ['Note that in most cases for the queries like this:']], [[' SELECT  MIN(CASE rank WHEN 1 THEN v1.varCharCol1 ELSE NULL END),\n        SUM(CASE rank WHEN 1 THEN rank1IntCol ELSE 0 END),\n        SUM(CASE rank WHEN 2 THEN rank2IntCol ELSE 0 END)\nFROM    query\nGROUP BY\n        someId\n']], ['Optimize help for sql query'], 2], [(1288397, 1), [['Note that in most cases for the queries like this:'], ['the  SQL Server  optimizer will just build an  Eager Spool  (a temporary index), which will later be used for searching for the  JOIN  condition, so probably these tricks are redundant.']], [[' SELECT  *\nFROM    mytable1 m1 \nJOIN    mytable1 m2\nON      …\n']], ['Optimize help for sql query'], 2], [(1289715, 0), [['-10000'], ["That answers your question (if I understood it correctly), but I think you will have too much duplicate data - you don't really want the question title repeated for each tag.  So you should break it out into 2 result sets:"]], [['     SELECT TOP 50 q.question_id, q.title, t.tag\n    FROM tags t\n    INNER JOIN questions q\n    ON t.question_id = q.question_id\n    WHERE q.question_id IN \n    ( \n        SELECT tin.question_id\n        FROM tags tin\n        WHERE tin.tag = $1\n    )\n   ORDER BY q.was_sent_at_time DESC\n']], ['SQL: To get all tags for a question when one is known'], 3], [(1289715, 1), [["That answers your question (if I understood it correctly), but I think you will have too much duplicate data - you don't really want the question title repeated for each tag.  So you should break it out into 2 result sets:"], ['and:']], [['     SELECT TOP 50 q.question_id, q.title\n    FROM questions q\n    WHERE q.question_id IN \n    ( \n        SELECT tin.question_id\n        FROM tags tin\n        WHERE tin.tag = $1\n    )\n   ORDER BY q.was_sent_at_time DESC\n']], ['SQL: To get all tags for a question when one is known'], 3], [(1289715, 2), [['and:'], ['Then when you build your page or whatever, you would bring them together.']], [['   SELECT t.question_id, t.tag\n    FROM tags t\n    WHERE t.question_id IN \n    ( \n        /* \n       SAME SQL AS ABOVE WITH SELECT q.question_id, \n       OR SELECT FROM A TEMP TABLE THAT ABOVE WAS SAVED TO\n       */\n    )\n   ORDER BY t.question_id\n']], ['SQL: To get all tags for a question when one is known'], 3], [(1289963, 0), [['-10000'], ['Sometimes you would also store the depth for every path in the  ClosureTable .  But even if not, you can count how many ancestors a given node has, and use that to sort:']], [[' SELECT ancestor_id\nFROM ClosureTable\nWHERE descendant_id = 4;\n']], ["How to retrieve the path to a node in a tree - efficiently (related to the post 'parse a flat table into a tree?')"], 2], [(1289963, 1), [['Sometimes you would also store the depth for every path in the  ClosureTable .  But even if not, you can count how many ancestors a given node has, and use that to sort:'], ["Yes, this still returns the result in three rows.  If you use MySQL, you have access to  GROUP_CONCAT() . Otherwise it's easy to fetch three rows and concatenate their values in application code."]], [[' SELECT ct1.ancestor_id, COUNT(*) AS depth\nFROM ClosureTable ct1\n JOIN ClosureTable ct2 ON (ct1.ancestor_id = ct2.descendant_id)\nWHERE ct1.descendant_id = 4\nGROUP BY ct1.ancestor_id\nORDER BY depth;\n']], ["How to retrieve the path to a node in a tree - efficiently (related to the post 'parse a flat table into a tree?')"], 2], [(1290387, 0), [['Simple answer'], ['This is a fully worked out example of your problem excuse tsql syntax.']], [[' select tb.id\n      ,sum(ta.someint)\n  from TableA ta\n       inner join TableB tb\n               on ta.id = tb.id\ngroup by tb.id\n']], ['Reference current row'], 2], [(1290387, 1), [['This is a fully worked out example of your problem excuse tsql syntax.'], ['-10000']], [[' declare @TableA table(id int\n                         ,someint int)\n\ninsert @TableA values(1,55)\ninsert @TableA values(1,66)\ninsert @TableA values(2,77)\n\ndeclare @TableB table(id int)\n\ninsert @TableB values(1)\n\nselect tb.id\n      ,sum(ta.someint)\n  from @TableA ta\n       inner join @TableB tb\n               on ta.id = tb.id\ngroup by tb.id\n']], ['Reference current row'], 2], [(1290623, 0), [['Before you use my query examples, you need to set up a "helper" table, you only need to do this one time per database:'], ['try this:']], [[' CREATE TABLE Numbers\n(Number int  NOT NULL,\n    CONSTRAINT PK_Numbers PRIMARY KEY CLUSTERED (Number ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\n) ON [PRIMARY]\nDECLARE @x int\nSET @x=0\nWHILE @x<8000\nBEGIN\n    SET @x=@x+1\n    INSERT INTO Numbers VALUES (@x)\nEND\n']], ['Analyzing time-dependent, event log from SQL'], 3], [(1290623, 1), [['try this:'], ["here's the output:"]], [[" DECLARE @Calls  table (rowID int not null primary key identity(1,1)\n                      ,EvId int not null\n                      ,CallId varchar(36)\n                      ,rowDateTime datetime\n                      )\nSET NOCOUNT ON\nINSERT INTO @Calls VALUES ( 0,'df1cbc93-5cf3-402a-940b-4441f6a7ec5c',' 7/9/2008 8:12:56 PM')\nINSERT INTO @Calls VALUES ( 1,'df1cbc93-5cf3-402a-940b-4441f6a7ec5c',' 7/9/2008 8:13:07 PM')\nINSERT INTO @Calls VALUES ( 0,'ec1c2078-1765-4377-9126-6f26fe33e4a9','7/10/2008 4:33:10 PM')\nINSERT INTO @Calls VALUES (10,'ec1c2078-1765-4377-9126-6f26fe33e4a9','7/10/2008 4:33:13 PM')\nINSERT INTO @Calls VALUES ( 1,'ec1c2078-1765-4377-9126-6f26fe33e4a9','7/10/2008 4:33:13 PM')\nINSERT INTO @Calls VALUES ( 0,'a3c3b9a0-a23b-4dda-b4e4-e82f0209c94d','7/10/2008 4:33:13 PM')\nINSERT INTO @Calls VALUES (10,'a3c3b9a0-a23b-4dda-b4e4-e82f0209c94d','7/10/2008 4:33:15 PM')\nINSERT INTO @Calls VALUES ( 1,'a3c3b9a0-a23b-4dda-b4e4-e82f0209c94d','7/10/2008 4:33:15 PM')\nINSERT INTO @Calls VALUES ( 0,'d23f393d-0272-445a-8670-3f71b016174e','7/10/2008 4:33:15 PM')\nINSERT INTO @Calls VALUES (10,'d23f393d-0272-445a-8670-3f71b016174e','7/10/2008 4:33:17 PM')\nINSERT INTO @Calls VALUES ( 1,'d23f393d-0272-445a-8670-3f71b016174e','7/10/2008 4:33:17 PM')\n--I added more test data, to hit more cases\nINSERT INTO @Calls VALUES ( 0,'111111111111111111111111111111111111','7/10/2008 4:10:00 PM')\nINSERT INTO @Calls VALUES (10,'111111111111111111111111111111111111','7/10/2008 4:11:00 PM')\nINSERT INTO @Calls VALUES ( 1,'111111111111111111111111111111111111','7/10/2008 4:11:00 PM')\nINSERT INTO @Calls VALUES ( 0,'222222222222222222222222222222222222','7/10/2008 4:15:00 PM')\nINSERT INTO @Calls VALUES (10,'222222222222222222222222222222222222','7/10/2008 4:16:00 PM')\nINSERT INTO @Calls VALUES ( 1,'222222222222222222222222222222222222','7/10/2008 4:16:00 PM')\nINSERT INTO @Calls VALUES ( 0,'333333333333333333333333333333333333','7/10/2008 4:09:00 PM')\nINSERT INTO @Calls VALUES (10,'333333333333333333333333333333333333','7/10/2008 4:18:00 PM')\nINSERT INTO @Calls VALUES ( 1,'333333333333333333333333333333333333','7/10/2008 4:18:00 PM')\nINSERT INTO @Calls VALUES ( 0,'444444444444444444444444444444444444','7/10/2008 4:13:00 PM')\nINSERT INTO @Calls VALUES (10,'444444444444444444444444444444444444','7/10/2008 4:14:00 PM')\nINSERT INTO @Calls VALUES ( 1,'444444444444444444444444444444444444','7/10/2008 4:14:00 PM')\nINSERT INTO @Calls VALUES ( 0,'555555555555555555555555555555555555','7/10/2008 4:13:00 PM')\nSET NOCOUNT OFF\n\nDECLARE @StartRange  datetime\nDECLARE @EndRange    datetime\n\nSET @StartRange='7/10/2008 4:12:00 PM'\nSET @EndRange  ='7/10/2008 4:15:00 PM'\n\nSET @EndRange=DATEADD(mi,1,@EndRange)\n\n--this lists the match time and each calls details in progress at that time\nSELECT\n    DATEADD(mi,n.Number-1,c.StartTime) AS 'TimeOfMatch'\n        ,c.CallID\n        ,c.StartTime,c.EndTime\n    FROM (SELECT --this derived table joins together the start and end dates into a single row, filtering out rows more than 90 minutes before the start range (if calls are longer than 90 minutes, increase this) and filters out any rows after the end date (will consider call done at end date then)\n              CallID, MIN(rowDateTime) AS StartTime, CASE  WHEN MAX(rowDateTime)=MIN(rowDateTime) THEN @EndRange ELSE MAX(rowDateTime) END  AS EndTime\n              FROM @Calls \n              WHERE rowDateTime>=DATEADD(mi,-90,@StartRange) --AND rowDateTime<=@EndRange\n              GROUP BY CallID\n         ) c\n        INNER JOIN Numbers   n ON DATEDIFF(mi,c.StartTime,c.EndTime)+1>=n.Number\n    WHERE DATEADD(mi,n.Number-1,c.StartTime)>=@StartRange AND DATEADD(mi,n.Number-1,c.StartTime)<@EndRange\n    ORDER BY 1\n\n--this lists just the match time and the call count\nSELECT\n    DATEADD(mi,n.Number-1,c.StartTime) AS 'TimeOfMatch'\n        ,c.CallID\n        ,c.StartTime,c.EndTime\n    FROM (SELECT --this derived table joins together the start and end dates into a single row, filtering out rows more than 90 minutes before the start range (if calls are longer than 90 minutes, increase this) and filters out any rows after the end date (will consider call done at end date then)\n              CallID, MIN(rowDateTime) AS StartTime, CASE  WHEN MAX(rowDateTime)=MIN(rowDateTime) THEN @EndRange ELSE MAX(rowDateTime) END  AS EndTime\n              FROM @Calls \n              WHERE rowDateTime>=DATEADD(mi,-90,@StartRange) --AND rowDateTime<=@EndRange\n              GROUP BY CallID\n         ) c\n        INNER JOIN Numbers   n ON DATEDIFF(mi,c.StartTime,c.EndTime)+1>=n.Number\n    WHERE DATEADD(mi,n.Number-1,c.StartTime)>=@StartRange AND DATEADD(mi,n.Number-1,c.StartTime)<@EndRange\n    ORDER BY 1\n"]], ['Analyzing time-dependent, event log from SQL'], 3], [(1290623, 2), [["here's the output:"], ['You will need a composite index on rowDateTime+CallId.  However for the best performance, if you created a new table (clustered index on startdate+CallId) that contained both the start and end dates of a single call (possibly using a trigger when the EvId=0 insert with start date, and when EvId=1 update end date) then the derived table could be removed with this new table.']], [[' TimeOfMatch             CallID                               StartTime               EndTime\n----------------------- ------------------------------------ ----------------------- -----------------------\n2008-07-10 16:12:00.000 333333333333333333333333333333333333 2008-07-10 16:09:00.000 2008-07-10 16:18:00.000\n2008-07-10 16:13:00.000 333333333333333333333333333333333333 2008-07-10 16:09:00.000 2008-07-10 16:18:00.000\n2008-07-10 16:13:00.000 444444444444444444444444444444444444 2008-07-10 16:13:00.000 2008-07-10 16:14:00.000\n2008-07-10 16:13:00.000 555555555555555555555555555555555555 2008-07-10 16:13:00.000 2008-07-10 16:16:00.000\n2008-07-10 16:14:00.000 555555555555555555555555555555555555 2008-07-10 16:13:00.000 2008-07-10 16:16:00.000\n2008-07-10 16:14:00.000 444444444444444444444444444444444444 2008-07-10 16:13:00.000 2008-07-10 16:14:00.000\n2008-07-10 16:14:00.000 333333333333333333333333333333333333 2008-07-10 16:09:00.000 2008-07-10 16:18:00.000\n2008-07-10 16:15:00.000 333333333333333333333333333333333333 2008-07-10 16:09:00.000 2008-07-10 16:18:00.000\n2008-07-10 16:15:00.000 555555555555555555555555555555555555 2008-07-10 16:13:00.000 2008-07-10 16:16:00.000\n2008-07-10 16:15:00.000 222222222222222222222222222222222222 2008-07-10 16:15:00.000 2008-07-10 16:16:00.000\n\n(10 row(s) affected)\n\nTimeOfMatch             \n----------------------- -----------\n2008-07-10 16:12:00.000 1\n2008-07-10 16:13:00.000 3\n2008-07-10 16:14:00.000 3\n2008-07-10 16:15:00.000 3\n\n(4 row(s) affected)\n']], ['Analyzing time-dependent, event log from SQL'], 3], [(1290770, 0), [["Here's how to do it in SQL with a  case  statement. You can always break up the  or s into their own  when...then  block, but it works just as well this way. Enjoy!"], ["Now, if you want to know if it ends with 'D' or 'D?' where '?' is any letter, then:"]], [[" select\n    case\n        when right(FieldY, 1) = 'D'\n             or right(FieldY, 2) = 'DA'\n             or right(FieldY, 2) = 'DB'\n        then FieldX * (-1)\n        else FieldX\n    end as FieldX\nfrom\n    table\n"]], ['Multiplying a Column by -1 Based on Another Column'], 2], [(1290770, 1), [["Now, if you want to know if it ends with 'D' or 'D?' where '?' is any letter, then:"], ['-10000']], [[" select\n    case\n        when right(FieldY, 1) = 'D' then FieldX * (-1)\n        when left(right(FieldY, 2), 1) = 'D' then FieldX * (-1)\n        else FieldX\n    end as FieldX\nfrom\n    table\n"]], ['Multiplying a Column by -1 Based on Another Column'], 2], [(1291152, 0), [["The problem with the proposed solution (TheJacobTaylor) is runtime.  Joining the table to itself is slow as molasses for large datasets.  My proposed alternative runs in mysql, has awesome runtime, uses an explicit ORDER BY statement, so you don't have to hope your indexes ordered it properly to give a correct result, and is easy to unroll the query to debug."], ['[edit]\nAdded avg() around t1.val and row_number in(...) to correctly produce a median when there are an even number of records.  Reasoning:']], [[' SELECT avg(t1.val) as median_val FROM (\nSELECT @rownum:=@rownum+1 as `row_number`, d.val\n  FROM data d,  (SELECT @rownum:=0) r\n  WHERE 1\n  -- put some where clause here\n  ORDER BY d.val\n) as t1, \n(\n  SELECT count(*) as total_rows\n  FROM data d\n  WHERE 1\n  -- put same where clause here\n) as t2\nWHERE 1\nAND t1.row_number in ( floor((total_rows+1)/2), floor((total_rows+2)/2) );\n']], ['Simple way to calculate median with MySQL'], 2], [(1291152, 1), [['[edit]\nAdded avg() around t1.val and row_number in(...) to correctly produce a median when there are an even number of records.  Reasoning:'], ['-10000']], [[' SELECT floor((3+1)/2),floor((3+2)/2);#total_rows is 3, so avg row_numbers 2 and 2\nSELECT floor((4+1)/2),floor((4+2)/2);#total_rows is 4, so avg row_numbers 2 and 3\n']], ['Simple way to calculate median with MySQL'], 2], [(1292829, 0), [['You have a 2nd database connection to monitor how many rows are processed out of the source rows, and show a simple "x rows processed" every few second'], ['If you have a source table too:']], [[' SELECT COUNT(*) FROM TargetTable WITH (NOLOCK)\n']], ['Begin and monitor progress on long running SQL queries via ajax'], 2], [(1292829, 1), [['If you have a source table too:'], ['..then you can use "x of y rows processed"']], [[' SELECT COUNT(*) FROM SourceTable WITH (NOLOCK)\n']], ['Begin and monitor progress on long running SQL queries via ajax'], 2], [(1293330, 0), [['ANSI/ISO:'], ['MySQL:']], [[' update ud \n     set assid = (\n          select sale.assid \n          from sale \n          where sale.udid = ud.id\n     )\n where exists (\n      select * \n      from sale \n      where sale.udid = ud.id\n );\n']], ['How can I do an UPDATE statement with JOIN in SQL?'], 4], [(1293330, 1), [['MySQL:'], ['SQL Server:']], [[' update ud u\ninner join sale s on\n    u.id = s.udid\nset u.assid = s.assid\n']], ['How can I do an UPDATE statement with JOIN in SQL?'], 4], [(1293330, 2), [['SQL Server:'], ['Oracle:']], [[' update u\nset u.assid = s.assid\nfrom ud u\n    inner join sale s on\n        u.id = s.udid\n']], ['How can I do an UPDATE statement with JOIN in SQL?'], 4], [(1293330, 3), [['Oracle:'], ['-10000']], [[' update\n    (select\n        u.assid as new_assid,\n        s.assid as old_assid\n    from ud u\n        inner join sale s on\n            u.id = s.udid) up\nset up.new_assid = up.old_assid\n']], ['How can I do an UPDATE statement with JOIN in SQL?'], 4], [(1293390, 0), [['It depends on the database you are using. One option that works for SQL Server, Oracle and MySQL:'], ['In your case the query would be as follows (Faiz crafted such a query first):']], [[' SELECT ROW_NUMBER() OVER (ORDER BY SomeField) AS Row, *\nFROM SomeTable\n']], ['SQL to output line number in results of a query'], 2], [(1293390, 1), [['In your case the query would be as follows (Faiz crafted such a query first):'], ["I think it won't work for SQLite (if someone can correct me here I would be grateful), I'm not sure what's the alternative there."]], [[' SELECT ROW_NUMBER() OVER (ORDER BY client_name) AS row_number, client_name\nFROM (SELECT DISTINCT client_name FROM deliveries) TempTable\n']], ['SQL to output line number in results of a query'], 2], [(1293817, 0), [['-10000'], ['Dense rank:']], [[' SELECT  uo.*, \n        (\n        SELECT  COUNT(*)\n        FROM    users ui\n        WHERE   (ui.points, ui.id) >= (uo.points, uo.id)\n        ) AS rank\nFROM    users uo\nWHERE   id = @id\n']], ['MySQL, Get users rank'], 2], [(1293817, 1), [['Dense rank:'], ['-10000']], [[' SELECT  uo.*, \n        (\n        SELECT  COUNT(DISTINCT ui.points)\n        FROM    users ui\n        WHERE   ui.points >= uo.points\n        ) AS rank\nFROM    users uo\nWHERE   id = @id\n']], ['MySQL, Get users rank'], 2], [(1296397, 0), [['-10000'], ['EDIT based on new info \n- to get your timestamp to a fixed string of numbers:']], [[' SELECT RIGHT(100+DATEPART(mm, GETDATE()),2)\n']], ['Easy way to force DATEPART to output as fixed-length?'], 2], [(1296397, 1), [['EDIT based on new info \n- to get your timestamp to a fixed string of numbers:'], ['-10000']], [[" SELECT REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(varchar(23), GETDATE(), 121),'-',''),':',''),' ',''),'.','')\n"]], ['Easy way to force DATEPART to output as fixed-length?'], 2], [(1296844, 0), [["Create a helper function for safely extracting the 'top' item from any queryset.  I use this all over the place in my own Django apps."], ["Now use this function anywhere you need to get the 'top' item of a query set. In this case, you want to get the top B item for a given A where the B's are sorted by descending pk, as such:"]], [[' def top_or_none(queryset):\n    """Safely pulls off the top element in a queryset"""\n    # Extracts a single element collection w/ top item\n    result = queryset[0:1]\n\n    # Return that element or None if there weren\'t any matches\n    return result[0] if result else None\n']], ['Django query for large number of relationships'], 4], [(1296844, 1), [["Now use this function anywhere you need to get the 'top' item of a query set. In this case, you want to get the top B item for a given A where the B's are sorted by descending pk, as such:"], ["If you'd rather use queryset[0], you can modify the 'top_or_none' function thusly:"]], [[" latest = top_or_none(B.objects.filter(a=my_a).order_by('-pk'))\n"]], ['Django query for large number of relationships'], 4], [(1296844, 2), [["If you'd rather use queryset[0], you can modify the 'top_or_none' function thusly:"], ["Of course you can also take advantage of Django's related manager construct here and build the queryset through your 'A' object, depending on your preference:"]], [[' def top_or_none(queryset):\n    """Safely pulls off the top element in a queryset"""\n    try:\n        return queryset[0]\n    except IndexError:\n        return None\n']], ['Django query for large number of relationships'], 4], [(1296844, 3), [["Of course you can also take advantage of Django's related manager construct here and build the queryset through your 'A' object, depending on your preference:"], ['-10000']], [[" latest = top_or_none(my_a.b_set.order_by('-pk'))\n"]], ['Django query for large number of relationships'], 4], [(1297455, 0), [["Well, to do this strictly the way you're doing it:"], ['It would probably be better to do the following, though. It makes good use of the  having  clause:']], [[' select\n*\nfrom\n(\n    SELECT * , (SELECT COUNT( id ) \n    FROM cms_store_items\n    WHERE speaker = cms_store_items_speakers.id\n    ) AS count\n    FROM cms_store_items_speakers\n) a\nwhere a.count > 0\nLIMIT 0 , 30\n']], ['Using a custom field in WHERE clause of SQL query'], 2], [(1297455, 1), [['It would probably be better to do the following, though. It makes good use of the  having  clause:'], ['-10000']], [[' select\n    s.id,\n    s.col1,\n    count(i.speaker) as count\nfrom\n    cms_store_items_speakers s\n    left join cms_store_items i on\n        s.id = i.speaker\ngroup by\n    s.id,\n    s.col1\nhaving\n    count(i.speaker) > 0\nlimit 0, 30\n']], ['Using a custom field in WHERE clause of SQL query'], 2], [(1297482, 0), [['Wow, um, looks like pretty poor coding there.'], ["I'm more comfortable with  COALESCE , though:"]], [[' NVL(t1.some_column, t2.some_column)\n']], ['Oracle SQL: What is the point of this DECODE statement?'], 3], [(1297482, 1), [["I'm more comfortable with  COALESCE , though:"], ["That way, if you ever want to add on a third, it's just:"]], [[' COALESCE(t1.some_column, t2.some_column)\n']], ['Oracle SQL: What is the point of this DECODE statement?'], 3], [(1297482, 2), [["That way, if you ever want to add on a third, it's just:"], ["It appears that whoever wrote the original code wanted it to be extendible and just didn't know about  COALESCE ..."]], [[' COALESCE(t1.some_column, t2.some_column, t3.some_column)\n']], ['Oracle SQL: What is the point of this DECODE statement?'], 3], [(1298473, 0), [['System privileges for a user:'], ['Direct grants to tables/views:']], [[' SELECT PRIVILEGE\n  FROM sys.dba_sys_privs\n WHERE grantee = <theUser>\nUNION\nSELECT PRIVILEGE \n  FROM dba_role_privs rp JOIN role_sys_privs rsp ON (rp.granted_role = rsp.role)\n WHERE rp.grantee = <theUser>\n ORDER BY 1;\n']], ['How can I list ALL grants a user received?'], 3], [(1298473, 1), [['Direct grants to tables/views:'], ['Indirect grants to tables/views:']], [[' SELECT owner, table_name, select_priv, insert_priv, delete_priv, update_priv, references_priv, alter_priv, index_priv \n  FROM table_privileges\n WHERE grantee = <theUser>\n ORDER BY owner, table_name;\n']], ['How can I list ALL grants a user received?'], 3], [(1298473, 2), [['Indirect grants to tables/views:'], ['-10000']], [[' SELECT DISTINCT owner, table_name, PRIVILEGE \n  FROM dba_role_privs rp JOIN role_tab_privs rtp ON (rp.granted_role = rtp.role)\n WHERE rp.grantee = <theUser>\n ORDER BY owner, table_name;\n']], ['How can I list ALL grants a user received?'], 3], [(1300996, 0), [['Sure, use nested queries:'], ['Or with the new CTE syntax you can have:']], [[' select *\nfrom (select count(*) as delivery_count, clientid \n      from deliveries group by clientid) AS view1\ninner join (select count(*) as action_count, clientid\n            from routeactions group by clientid) AS view2\n    on view1.clientid = view2.clientid\n']], ['Request joining the results of two other requests with GROUP BY clause in SQL Server 2005'], 2], [(1300996, 1), [['Or with the new CTE syntax you can have:'], ['-10000']], [[' WITH view1 AS (\n    select count(*) as delivery_count, clientid from deliveries group by clientid\n), view2 AS (\n    select count(*) as action_count, clientid from routeactions group by clientid\n)\nselect * from view1 inner join view2 on view1.clientid = view2.clientid\n']], ['Request joining the results of two other requests with GROUP BY clause in SQL Server 2005'], 2], [(1302029, 0), [['Try this:'], ['The magic is the ']], [[' SELECT \n  Incidents.IncidentXML.query(\'declare namespace x="http://tempuri.org/dsIncident.xsd";\n          (/x:dsIncident/x:IncidentInformation/x:Description)\') AS Description \nFROM Incidents\n']], ['XML Query within SQL Server'], 2], [(1302029, 1), [['The magic is the '], ["part here - it declares a namespace (with a prefix of your choice - can be anything - here 'x') for the period of the query on that XML data."]], [[' declare namespace x="http://tempuri.org/dsIncident.xsd"\n']], ['XML Query within SQL Server'], 2], [(1305004, 0), [['Use  EXPLAIN QUERY PLAN  ( http://sqlite.org/lang_explain.html )  to see which indexes are used.'], ['Reuslt in something like']], [[' EXPLAIN QUERY PLAN\nSELECT f, g\nFROM ss\nWHERE a = ? AND b = ? AND c = ? AND d = ? AND e = ?\n']], ['In SQLite3, will this select statement benefit from two indexes?'], 2], [(1305004, 1), [['Reuslt in something like'], ['-10000']], [[' "0","0","TABLE ss WITH INDEX ..."\n']], ['In SQLite3, will this select statement benefit from two indexes?'], 2], [(1305804, 0), [['-10000'], ['Usage:']], [[' CREATE FUNCTION split(pos INT, delimeter CHAR, string VARCHAR(255))\nLANGUAGE SQL\nRETURNS VARCHAR(255)\nDETERMINISTIC NO EXTERNAL ACTION\nBEGIN ATOMIC\n    DECLARE x INT;\n    DECLARE s INT;\n    DECLARE e INT;\n\n    SET x = 0;\n    SET s = 0;\n    SET e = 0;\n\n    WHILE (x < pos) DO\n        SET s = locate(delimeter, string, s + 1);\n        IF s = 0 THEN\n            RETURN NULL;\n        END IF;\n        SET x = x + 1;\n    END WHILE;\n\n    SET e = locate(delimeter, string, s + 1);\n    IF s >= e THEN\n        SET e = LENGTH(string) + 1;\n    END IF;\n    RETURN SUBSTR(string, s + 1, e - s -1);\nEND!\n']], ['Split a VARCHAR in DB2 to retrieve a value inside'], 2], [(1305804, 1), [['Usage:'], ['-10000']], [[" SELECT split(3,'$',col) from mytable; -- or\nSELECT split(0,'-', 'first-second-third') from sysibm.sysdummy1;\nSELECT split(0,'-', 'returns this') from sysibm.sysdummy1;\nSELECT split(1,'-', 'returns null') from sysibm.sysdummy1;\n"]], ['Split a VARCHAR in DB2 to retrieve a value inside'], 2], [(1308680, 0), [["I've solved the problem with the help of a friend. This is a solution:"], ['Also the second one, little bit longer:']], [["  with dates(a_date) as (\nselect a_date = convert(datetime, '20090801')\nunion all \nselect a_date = a_date + 1 from dates where a_date < '20090831'  \n)\n\nselect\n  u.username         as username,\n  d.a_date           as a_date,\n  min(h.login_time)  as login_time,\n  max(h.logoff_time) as logoff_time\nfrom\n  dates d\n  cross join dbo.[User] u\n  left join dbo.History h ON \nu.id = h.user_id and\nh.login_time >= d.a_date and\nh.login_time < dateadd(d, 1, d.a_date)      \ngroup by\n  u.username,\n  d.a_date\norder by\n  u.username\n"]], ['(SQL Server 2008) - SQL question regarding CTE and joins :-('], 2], [(1308680, 1), [['Also the second one, little bit longer:'], ['-10000']], [[" with CTE(d) as \n(\nselect d = convert(datetime, '20090801')\nunion all \nselect d = d + 1 from CTE where d < '20090831'\n)\n\nselect \nu.username,\nd as date,\n(\n    select min(h.login_time)\n    from history h\n    where \n        h.user_id = u.id and\n        h.login_time >= d and\n        h.login_time < dateadd(d, 1, d)\n) as login_time,\n(\n    select max(h.logoff_time)\n    from history h\n    where \n        h.user_id = u.id and\n        h.logoff_time >= d and\n        h.logoff_time < dateadd(d, 1, d)\n) as logoff_time\nfrom CTE\ncross join [User] u\norder by username, date\n"]], ['(SQL Server 2008) - SQL question regarding CTE and joins :-('], 2], [(1309706, 0), [['I would go with two hidden columns  units_fk  and  dept_fk  with proper FK constraints and an additionnal  CHECK CONSTRAINT , for example if the pseudo-column is mandatory:'], ['You could then add a shadow column in a view']], [[' CONSTRAINT chk_units_dept_fk CHECK \n    (units_fk IS NULL AND dept_fk IS NOT NULL)\n OR (units_fk IS NOT NULL AND dept_fk IS NULL)\n']], ['Oracle: FK on union of two tables?'], 2], [(1309706, 1), [['You could then add a shadow column in a view'], ['You could deal with updates of the pseudo-column either with procedures (my choice) or with  INSTEAD OF TRIGGER .']], [[' CREATE VIEW my_view AS \nSELECT col1,...coln, nvl(units_fk, dept_fk) as UNIT_NAME_OR_DEPT_NAME\n  FROM my_table\n']], ['Oracle: FK on union of two tables?'], 2], [(1309841, 0), [['Try this:'], ['OR this:']], [[' SELECT SUM(something) AS fieldname\nFROM tablename\nORDER BY fieldname\n']], ['How to ORDER BY a SUM() in MySQL?'], 3], [(1309841, 1), [['OR this:'], ['And you can always do a derived query like this:']], [[' SELECT Field1, SUM(something) AS Field2\nFROM tablename\nGROUP BY Field1\nORDER BY Field2\n']], ['How to ORDER BY a SUM() in MySQL?'], 3], [(1309841, 2), [['And you can always do a derived query like this:'], ['Many possibilities!']], [[' SELECT\n   f1, f2\nFROM\n    (\n        SELECT SUM(x+y) as f1, foo as F2\n        FROM tablename \n        GROUP BY f2\n    ) as table1\nORDER BY \n    f1\n']], ['How to ORDER BY a SUM() in MySQL?'], 3], [(1311643, 0), [['Yes:'], ["I don't know exactly how you compute your count - I assume you're assigning it to some local variable in your stored procedure:"]], [[' RETURN ISNULL(yourvalue, 0)\n']], ['SP return null as ZERO?'], 3], [(1311643, 1), [["I don't know exactly how you compute your count - I assume you're assigning it to some local variable in your stored procedure:"], ['You need to restructure your stored proc a bit:']], [[' CREATE PROCEDURE dbo.DoMyCount()\nRETURNS INT\nAS BEGIN\n   DECLARE @MyCountVariable INT\n\n   SET @MyCountVariable = SELECT COUNT(*)......... -- whatever you do here\n\n   RETURN ISNULL(@MyCountVariable, 0)\nEND\n']], ['SP return null as ZERO?'], 3], [(1311643, 2), [['You need to restructure your stored proc a bit:'], ['That way, if the  CH.cha_Key = CRC.recip_Chosen  doesn\'t match and the LEFT OUTER JOIN returns NULLs, it will be caught and the ChosenCount = NULL will be turned into a "0".']], [[' CREATE PROCEDURE web.getPublicCampaignData(@campaign BIGINT)\nAS BEGIN\n  SELECT\n     (list of fields), ISNULL(CRC.ChosenCount, 0), .....\n  FROM TBL_CAMPAIGNS C\n  INNER JOIN TBL_MEMBERS M \n     ON C.campaign_MemberId = M.members_Id\n  INNER JOIN TBL_CAMPAIGNS_CHARITIES CC \n     ON C.campaign_Key = CC.camchar_CampaignID\n  INNER JOIN TBL_CHARITIES CH \n    ON CC.camchar_CharityID = CH.cha_Key\n  LEFT OUTER JOIN (\n    select recip_Chosen, count(recip_CampaignId) as ChosenCount\n    from TBL_CAMPAIGNRECIPIENTS\n    WHERE recip_CampaignId =  @campaign\n    group by recip_Chosen\n  ) CRC on CH.cha_Key = CRC.recip_Chosen\n  WHERE \n     C.campaign_Key = @campaign;\nEND\n']], ['SP return null as ZERO?'], 3], [(1312101, 0), [['In  MySQL  and  PostgreSQL :'], ['In  SQL Server :']], [[' SELECT  id + 1\nFROM    mytable mo\nWHERE   NOT EXISTS\n        (\n        SELECT  NULL\n        FROM    mytable mi \n        WHERE   mi.id = mo.id + 1\n        )\nORDER BY\n        id\nLIMIT 1\n']], ['How do I find a "gap" in running counter with SQL?'], 5], [(1312101, 1), [['In  SQL Server :'], ['In  Oracle :']], [[' SELECT  TOP 1\n        id + 1\nFROM    mytable mo\nWHERE   NOT EXISTS\n        (\n        SELECT  NULL\n        FROM    mytable mi \n        WHERE   mi.id = mo.id + 1\n        )\nORDER BY\n        id\n']], ['How do I find a "gap" in running counter with SQL?'], 5], [(1312101, 2), [['In  Oracle :'], ['ANSI  (works everywhere, least efficient):']], [[' SELECT  *\nFROM    (\n        SELECT  id + 1 AS gap\n        FROM    mytable mo\n        WHERE   NOT EXISTS\n                (\n                SELECT  NULL\n                FROM    mytable mi \n                WHERE   mi.id = mo.id + 1\n                )\n        ORDER BY\n                id\n        )\nWHERE   rownum = 1\n']], ['How do I find a "gap" in running counter with SQL?'], 5], [(1312101, 3), [['ANSI  (works everywhere, least efficient):'], ['Systems supporting sliding window functions:']], [[' SELECT  MIN(id) + 1\nFROM    mytable mo\nWHERE   NOT EXISTS\n        (\n        SELECT  NULL\n        FROM    mytable mi \n        WHERE   mi.id = mo.id + 1\n        )\n']], ['How do I find a "gap" in running counter with SQL?'], 5], [(1312101, 4), [['Systems supporting sliding window functions:'], ['-10000']], [[' SELECT  -- TOP 1\n        -- Uncomment above for SQL Server 2012+\n        previd\nFROM    (\n        SELECT  id,\n                LAG(id) OVER (ORDER BY id) previd\n        FROM    mytable\n        ) q\nWHERE   previd <> id - 1\nORDER BY\n        id\n-- LIMIT 1\n-- Uncomment above for PostgreSQL\n']], ['How do I find a "gap" in running counter with SQL?'], 5], [(1312980, 0), [['Here is an example with DEPT being table_1, alias a and EMP being table_2, alias b:'], ["That mimics your situation. First add the rowid's:"]], [[' SQL> create materialized view log on emp with rowid\n  2  /\n\nMaterialized view log created.\n\nSQL> create materialized view log on dept with rowid\n  2  /\n\nMaterialized view log created.\n\nSQL> create materialized view empdept_mv\n  2    refresh fast on commit\n  3  as\n  4  select a.deptno\n  5    from dept a\n  6         left join emp b on (a.deptno = b.deptno)\n  7  /\n  from dept a\n       *\nERROR at line 5:\nORA-12054: cannot set the ON COMMIT refresh attribute for the materialized view\n']], ['ORACLE : Materialized view not working when Using LEFT JOIN'], 4], [(1312980, 1), [["That mimics your situation. First add the rowid's:"], ['Still it cannot fast refresh, because of the ANSI joins. Converting to old-style outer join syntax:']], [[' SQL> create materialized view empdept_mv\n  2    refresh fast on commit\n  3  as\n  4  select a.rowid dept_rowid\n  5       , b.rowid emp_rowid\n  6       , a.deptno\n  7    from dept a\n  8         left join emp b on (a.deptno = b.deptno)\n  9  /\n  from dept a\n       *\nERROR at line 7:\nORA-12054: cannot set the ON COMMIT refresh attribute for the materialized view\n']], ['ORACLE : Materialized view not working when Using LEFT JOIN'], 4], [(1312980, 2), [['Still it cannot fast refresh, because of the ANSI joins. Converting to old-style outer join syntax:'], ['And to prove that it works:']], [[' SQL> create materialized view empdept_mv\n  2    refresh fast on commit\n  3  as\n  4  select a.rowid dept_rowid\n  5       , b.rowid emp_rowid\n  6       , a.deptno\n  7    from dept a\n  8       , emp b\n  9   where a.deptno = b.deptno (+)\n 10  /\n\nMaterialized view created.\n']], ['ORACLE : Materialized view not working when Using LEFT JOIN'], 4], [(1312980, 3), [['And to prove that it works:'], ['The ANSI-join syntax restriction is mentioned in point 6 in  this blogpost .']], [[" SQL> select * from empdept_mv\n  2  /\n\nDEPT_ROWID         EMP_ROWID              DEPTNO\n------------------ ------------------ ----------\nAAARhmAAEAAAAI/AAB AAARhlAAEAAAAI3AAA         20\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAB         30\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAC         30\nAAARhmAAEAAAAI/AAB AAARhlAAEAAAAI3AAD         20\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAE         30\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAF         30\nAAARhmAAEAAAAI/AAA AAARhlAAEAAAAI3AAG         10\nAAARhmAAEAAAAI/AAB AAARhlAAEAAAAI3AAH         20\nAAARhmAAEAAAAI/AAA AAARhlAAEAAAAI3AAI         10\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAJ         30\nAAARhmAAEAAAAI/AAB AAARhlAAEAAAAI3AAK         20\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAL         30\nAAARhmAAEAAAAI/AAB AAARhlAAEAAAAI3AAM         20\nAAARhmAAEAAAAI/AAA AAARhlAAEAAAAI3AAN         10\nAAARhmAAEAAAAI/AAD                            40\n\n15 rows selected.\n\nSQL> insert into dept values (50,'IT','UTRECHT')\n  2  /\n\n1 row created.\n\nSQL> commit\n  2  /\n\nCommit complete.\n\nSQL> select * from empdept_mv\n  2  /\n\nDEPT_ROWID         EMP_ROWID              DEPTNO\n------------------ ------------------ ----------\nAAARhmAAEAAAAI/AAB AAARhlAAEAAAAI3AAA         20\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAB         30\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAC         30\nAAARhmAAEAAAAI/AAB AAARhlAAEAAAAI3AAD         20\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAE         30\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAF         30\nAAARhmAAEAAAAI/AAA AAARhlAAEAAAAI3AAG         10\nAAARhmAAEAAAAI/AAB AAARhlAAEAAAAI3AAH         20\nAAARhmAAEAAAAI/AAA AAARhlAAEAAAAI3AAI         10\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAJ         30\nAAARhmAAEAAAAI/AAB AAARhlAAEAAAAI3AAK         20\nAAARhmAAEAAAAI/AAC AAARhlAAEAAAAI3AAL         30\nAAARhmAAEAAAAI/AAB AAARhlAAEAAAAI3AAM         20\nAAARhmAAEAAAAI/AAA AAARhlAAEAAAAI3AAN         10\nAAARhmAAEAAAAI/AAD                            40\nAAARhmAAEAAAAI7AAA                            50\n\n16 rows selected.\n"]], ['ORACLE : Materialized view not working when Using LEFT JOIN'], 4], [(1313096, 0), [['Try this:'], ['Create the following indexes:']], [[' SELECT  u.uid, u.username, u.nid, wd.pay\nFROM    users_data AS u\nLEFT JOIN\n        winners_data wd\nON      (wd.nid, wd.uid) = (u.nid, u.uid)\nJOIN    dp_node dn \nON      dn.nid = u.nid\n        AND dn.type IN (\'event\', \'new_event\')\nWHERE   u.uid = ".$val."\n        AND EXISTS\n        (\n        SELECT  NULL\n        FROM    tournament_event te\n        WHERE   te.nid = u.nid\n                AND type_value IN (\'A\', \'B\', \'C\')\n                AND dn.type = \'event\'\n        UNION ALL\n        SELECT  NULL\n        FROM    user_tournament_event te\n        WHERE   te.nid = u.nid\n                AND type_0_value IN (\'X\', \'Y\')\n                AND dn.type = \'new_event\'\n\n        )\nORDER BY\n        u.nid ASC\n']], ['Using joins correctly'], 2], [(1313096, 1), [['Create the following indexes:'], ['-10000']], [[' users_data (uid, nid)\nwinners_data (uid, nid)\ndp_node (nid, event_type)\ntournament_event (nid, type_value)\nuser_tournament_event (nid, type_0_value)\n']], ['Using joins correctly'], 2], [(1313120, 0), [['I write the solution this way:'], ['First using the technique  shown  by @Eric with the  GROUP BY  in a subquery:']], [[' SELECT m1.*\nFROM messages m1 LEFT JOIN messages m2\n ON (m1.name = m2.name AND m1.id < m2.id)\nWHERE m2.id IS NULL;\n']], ['Retrieving the last record in each group'], 6], [(1313120, 1), [['First using the technique  shown  by @Eric with the  GROUP BY  in a subquery:'], ['Even the  EXPLAIN  analysis  takes over 16 seconds:']], [[' SELECT p1.postid\nFROM Posts p1\nINNER JOIN (SELECT pi.owneruserid, MAX(pi.postid) AS maxpostid\n            FROM Posts pi GROUP BY pi.owneruserid) p2\n  ON (p1.postid = p2.maxpostid)\nWHERE p1.owneruserid = 20860;\n\n1 row in set (1 min 17.89 sec)\n']], ['Retrieving the last record in each group'], 6], [(1313120, 2), [['Even the  EXPLAIN  analysis  takes over 16 seconds:'], ['Now produce the same query result using  my technique  with  LEFT JOIN :']], [[' +----+-------------+------------+--------+----------------------------+-------------+---------+--------------+---------+-------------+\n| id | select_type | table      | type   | possible_keys              | key         | key_len | ref          | rows    | Extra       |\n+----+-------------+------------+--------+----------------------------+-------------+---------+--------------+---------+-------------+\n|  1 | PRIMARY     | <derived2> | ALL    | NULL                       | NULL        | NULL    | NULL         |   76756 |             | \n|  1 | PRIMARY     | p1         | eq_ref | PRIMARY,PostId,OwnerUserId | PRIMARY     | 8       | p2.maxpostid |       1 | Using where | \n|  2 | DERIVED     | pi         | index  | NULL                       | OwnerUserId | 8       | NULL         | 1151268 | Using index | \n+----+-------------+------------+--------+----------------------------+-------------+---------+--------------+---------+-------------+\n3 rows in set (16.09 sec)\n']], ['Retrieving the last record in each group'], 6], [(1313120, 3), [['Now produce the same query result using  my technique  with  LEFT JOIN :'], ['The  EXPLAIN  analysis shows that both tables are able to use their indexes:']], [[' SELECT p1.postid\nFROM Posts p1 LEFT JOIN posts p2\n  ON (p1.owneruserid = p2.owneruserid AND p1.postid < p2.postid)\nWHERE p2.postid IS NULL AND p1.owneruserid = 20860;\n\n1 row in set (0.28 sec)\n']], ['Retrieving the last record in each group'], 6], [(1313120, 4), [['The  EXPLAIN  analysis shows that both tables are able to use their indexes:'], ["Here's the DDL for my  Posts  table:"]], [[' +----+-------------+-------+------+----------------------------+-------------+---------+-------+------+--------------------------------------+\n| id | select_type | table | type | possible_keys              | key         | key_len | ref   | rows | Extra                                |\n+----+-------------+-------+------+----------------------------+-------------+---------+-------+------+--------------------------------------+\n|  1 | SIMPLE      | p1    | ref  | OwnerUserId                | OwnerUserId | 8       | const | 1384 | Using index                          | \n|  1 | SIMPLE      | p2    | ref  | PRIMARY,PostId,OwnerUserId | OwnerUserId | 8       | const | 1384 | Using where; Using index; Not exists | \n+----+-------------+-------+------+----------------------------+-------------+---------+-------+------+--------------------------------------+\n2 rows in set (0.00 sec)\n']], ['Retrieving the last record in each group'], 6], [(1313120, 5), [["Here's the DDL for my  Posts  table:"], ['-10000']], [[" CREATE TABLE `posts` (\n  `PostId` bigint(20) unsigned NOT NULL auto_increment,\n  `PostTypeId` bigint(20) unsigned NOT NULL,\n  `AcceptedAnswerId` bigint(20) unsigned default NULL,\n  `ParentId` bigint(20) unsigned default NULL,\n  `CreationDate` datetime NOT NULL,\n  `Score` int(11) NOT NULL default '0',\n  `ViewCount` int(11) NOT NULL default '0',\n  `Body` text NOT NULL,\n  `OwnerUserId` bigint(20) unsigned NOT NULL,\n  `OwnerDisplayName` varchar(40) default NULL,\n  `LastEditorUserId` bigint(20) unsigned default NULL,\n  `LastEditDate` datetime default NULL,\n  `LastActivityDate` datetime default NULL,\n  `Title` varchar(250) NOT NULL default '',\n  `Tags` varchar(150) NOT NULL default '',\n  `AnswerCount` int(11) NOT NULL default '0',\n  `CommentCount` int(11) NOT NULL default '0',\n  `FavoriteCount` int(11) NOT NULL default '0',\n  `ClosedDate` datetime default NULL,\n  PRIMARY KEY  (`PostId`),\n  UNIQUE KEY `PostId` (`PostId`),\n  KEY `PostTypeId` (`PostTypeId`),\n  KEY `AcceptedAnswerId` (`AcceptedAnswerId`),\n  KEY `OwnerUserId` (`OwnerUserId`),\n  KEY `LastEditorUserId` (`LastEditorUserId`),\n  KEY `ParentId` (`ParentId`),\n  CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`PostTypeId`) REFERENCES `posttypes` (`PostTypeId`)\n) ENGINE=InnoDB;\n"]], ['Retrieving the last record in each group'], 6], [(1315012, 0), [["tful, This should produce the result you want, but I don't know if it will be as fast as you 'd like. It's worth a try. "], ['If you will be doing the same computation for various @k values on stable data, this may work better in the long run:']], [[' create table Actions(\n  GroupId int,\n  Serial int,\n  "Action" varchar(20) not null,\n  primary key (GroupId, Serial)\n);\n\ninsert into Actions values\n  (1,1,\'Start\'), (1,2,\'Run\'), (1,3,\'Jump\'),\n  (1,8,\'End\'), (2,9,\'Shop\'), (2,10,\'Start\'),\n  (2,11,\'Run\');\ngo\n\ndeclare @k int = 1;\nwith ActionsDoubled(Serial,Tag,"Action") as (\n  select\n    Serial, \'a\', "Action"\n  from Actions as A\n  union all\n  select\n    Serial-@k, \'b\', "Action"\n  from Actions\n  as B\n), Pivoted(Serial,a,b) as (\n  select Serial,a,b\n  from ActionsDoubled\n  pivot (\n    max("Action") for Tag in ([a],[b])\n  ) as P\n)\n  select \n    a, b, count(*) as ct\n    from Pivoted\n    where a is not NULL and b is not NULL\n    group by a,b\n    order by a,b;\ngo\n\ndrop table Actions;\n']], ['How to do this data transformation'], 2], [(1315012, 1), [['If you will be doing the same computation for various @k values on stable data, this may work better in the long run:'], ['-10000']], [[' declare @k int = 1;\n  select \n    Serial, \'a\' as Tag, "Action"\n  into ActionsDoubled\n  from Actions as A\n  union all\n  select\n    Serial-@k, \'b\', "Action"\n  from Actions\n  as B;\ngo\n\ncreate unique clustered index AD_S on ActionsDoubled(Serial,Tag);\ncreate index AD_a on ActionsDoubled(Tag,Serial);\ngo\n\nwith Pivoted(Serial,a,b) as (\n  select Serial,a,b\n  from ActionsDoubled\n  pivot (\n    max("Action") for Tag in ([a],[b])\n  ) as P\n)\n  select \n    a, b, count(*) as ct\n    from Pivoted\n    where a is not NULL and b is not NULL\n    group by a,b\n    order by a,b;\ngo\n\ndrop table ActionsDoubled;\n']], ['How to do this data transformation'], 2], [(1315262, 0), [['Starting with this setup:'], ['Running this query:']], [[" create table test(id int, userid int, time datetime)\ninsert into test values (1, 1, '2009-03-11 08:00')\ninsert into test values (2, 1, '2009-03-11 18:00')\ninsert into test values (3, 1, '2009-03-13 19:00')\ninsert into test values (4, 1, '2009-03-14 18:00')\n"]], ['SQL: finding longest date gap'], 5], [(1315262, 1), [['Running this query:'], ['Gives the following:']], [[" select \n  starttime.id as gapid, starttime.time as starttime, endtime.time as endtime, \n  /* Replace next line with your DB's way of calculating the gap */\n  DATEDIFF(second, starttime.time, endtime.time) as gap\nfrom \n  test as starttime\ninner join test as endtime on \n  (starttime.userid = endtime.userid) \n  and (starttime.time < endtime.time) \nleft join test as intermediatetime on \n  (starttime.userid = intermediatetime.userid) \n  and (starttime.time < intermediatetime.time) \n  and (intermediatetime.time < endtime.time) \nwhere \n  (intermediatetime.id is null)\n"]], ['SQL: finding longest date gap'], 5], [(1315262, 2), [['Gives the following:'], ["If you could, potentially, have the same time in there twice (a 'gap' of 0) then you'll need a way to break ties, as Dems points out. If you can use ID as a tie-breaker, then change e.g."]], [[' gapid  starttime                endtime                  gap\n1      2009-03-11 08:00:00.000  2009-03-11 18:00:00.000  36000\n2      2009-03-11 18:00:00.000  2009-03-13 19:00:00.000  176400\n3      2009-03-13 19:00:00.000  2009-03-14 18:00:00.000  82800\n']], ['SQL: finding longest date gap'], 5], [(1315262, 3), [["If you could, potentially, have the same time in there twice (a 'gap' of 0) then you'll need a way to break ties, as Dems points out. If you can use ID as a tie-breaker, then change e.g."], ['to']], [[' and (starttime.time < intermediatetime.time) \n']], ['SQL: finding longest date gap'], 5], [(1315262, 4), [['to'], ["assuming that 'id' is a valid way to break ties. "]], [[' and ((starttime.time < intermediatetime.time) \n  or ((starttime.time = intermediatetime.time) and (starttime.id < intermediatetime.id)))\n']], ['SQL: finding longest date gap'], 5], [(1315447, 0), [['Do you want to find latest  Model  object after some filtering? What do you mean by object id ? Is it a foreign key? Or it is the Model id auto generated by django? I guess it is the later. In that case, you can use just  id . This may help you (I am assuming that you have at least these fields in your Model: content_object, dateField ):'], ['I apologize. Well, the question was not  this  clear at the beginning (and I  am  a newb). Here is a naive approach (I think you want  distinct ):']], [[' Model.objects.filter(content_object=foo,id=N).order_by(dateField)[0]\n']], ['Django - How to get only 2 object for a combination of fields with a queryset'], 2], [(1315447, 1), [['I apologize. Well, the question was not  this  clear at the beginning (and I  am  a newb). Here is a naive approach (I think you want  distinct ):'], ['-10000']], [[' d={}\n[d.setdefault(str(a.content_type)+str(a.object_id),a) for a in checkins ]\nd.values() # this gives your desired list of distinct objects\n']], ['Django - How to get only 2 object for a combination of fields with a queryset'], 2], [(1316609, 0), [['Set up a libref to point to your Oracle database, either using the ODBC libname engine or the Oracle libname engine (which will be faster if you have the right licence and software installed):'], ['If an empty table with the right columns already exists in Oracle, you can use:']], [[" libname X oracle username='USER1' password='passwd' path=ORCL;\n"]], ['SAS to Oracle ODBC - passing a SAS table INTO the database'], 3], [(1316609, 1), [['If an empty table with the right columns already exists in Oracle, you can use:'], ["If the table doesn't exist, you can use a data step:"]], [[' proc sql noprint;\n  insert into X.test select * from work.my_sas_table;\nquit;\n']], ['SAS to Oracle ODBC - passing a SAS table INTO the database'], 3], [(1316609, 2), [["If the table doesn't exist, you can use a data step:"], ['-10000']], [[' \ndata X.test;\n  set work.my_sas_table;\nrun;\n']], ['SAS to Oracle ODBC - passing a SAS table INTO the database'], 3], [(1317729, 0), [["Here's something that should work (unable to test at the moment):"], ['Edit: Putting my comment in the answer:']], [[" select substr(substr(field_value, instr(field_value,':')+1, CHAR_LENGTH(field_value)-1),\n              instr(substr(field_value, instr(field_value,':')+1, CHAR_LENGTH(field_value)-1),':')+1)\n"]], ['How to parse out quoted values from a column with sql'], 2], [(1317729, 1), [['Edit: Putting my comment in the answer:'], ['-10000']], [[' select substr(field_value, instr(field_value,\'\\"\'),CHAR_LENGTH(field_value)-1)\n']], ['How to parse out quoted values from a column with sql'], 2], [(1319157, 0), [["If you want to select fewer columns, you'll have to use a projection in your linq query."], ['Doing something like the above would translate into SQL that looks like this...']], [[' var articles = (from a in DB.Articles\n    where a.ArticleId == ArticleId.Question \n        && a.DeletedAt == null \n        && a.Votes >= minVotes\n    orderby a.UpdatedAt descending\n    select new \n    {\n       a.ArticleId,\n       a.Votes\n    })\n    .Take(maxarticles);\n']], ['Is it inefficient that linq to sql translates this query into the format: "select *"?'], 2], [(1319157, 1), [['Doing something like the above would translate into SQL that looks like this...'], ['-10000']], [[' select top 10 \n         ArticleId,\n         Votes\nfrom     articles\nwhere    ArticleId = 1 \n         and DeletedAt is null\n         and Votes >= -5\norder by UpdatedAt desc\n']], ['Is it inefficient that linq to sql translates this query into the format: "select *"?'], 2], [(1319733, 0), [["The best way for user-editable sorting is to keep the  id 's in a  linked list :"], ['To get widgets in intended order, you can query like this, say, in  Oracle :']], [[' user_id   widget_id  prev_widget_id\n   ----        ----            ----\n      1           1               0\n      1           2               8\n      1           3               7\n      1           7               1\n      1           8               3\n      2           3               0\n      2           2               3\n']], ['User-sortable records'], 3], [(1319733, 1), [['To get widgets in intended order, you can query like this, say, in  Oracle :'], ['SQL Server  and  PostgreSQL 8.4  implement this functionality using recursive  CTE s:']], [[' SELECT  w.*\nFROM    (\n        SELECT  widget_id, level AS widget_order\n        FROM    widget_orders\n        START WITH\n                user_id = :myuser\n                AND prev_widget_id = 0\n        CONNECT BY\n                user_id = PRIOR user_id\n                AND prev_widget_id = PRIOR widget_id\n        ) o\nJOIN    widgets w\nON      w.widget_id = o.widget_id\nORDER BY\n        widget_order\n']], ['User-sortable records'], 3], [(1319733, 2), [['SQL Server  and  PostgreSQL 8.4  implement this functionality using recursive  CTE s:'], ['See this article in my blog on how to implement this functionality in  MySQL :']], [[' WITH    \n-- RECURSIVE\n-- uncomment the previous line in PostgreSQL\n         q AS\n         (\n         SELECT  widget_id, prev_widget_id, 1 AS widget_order\n         FROM    widget_orders\n         WHERE   user_id = @user_id\n         UNION ALL\n         SELECT  wo.widget_id, wo.prev_widget_id, q.widget_order + 1\n         FROM    q\n         JOIN    wo.widget_orders wo\n         ON      wo.user_id = @user_id\n                 AND wo.prev_widget_id = q.widget_id\n        )\nSELECT  w.*\nFROM    q\nJOIN    widgets w\nON      w.widget_id = q.widget_id\nORDER BY\n        widget_order\n']], ['User-sortable records'], 3], [(1319793, 0), [['First, the  order by  clause goes in order of columns or expressions specified. In this case:'], ['You can also include expressions in your  order by :']], [[' order by index asc, _date desc\n']], ['ORDER BY on different columns in different directions in SQLite'], 2], [(1319793, 1), [['You can also include expressions in your  order by :'], ['This would put all of the negative  index  rows at the top, and then sort those by  _date . Using expressions in your  order by  clause is very effective in certain circumstances.']], [[' order by case when index < 0 then 1 else 0 end desc, _date desc\n']], ['ORDER BY on different columns in different directions in SQLite'], 2], [(1319957, 0), [['This simple query gives you a list of tables along with the PK constraint name (but not the column name):'], ['If you want the column name, remember that a PK can have multiple columns! We need to create a utility type first because of the collect() aggregate function:']], [[" select     ut.table_name, uc.constraint_name\nfrom       user_tables ut\nleft join  user_constraints uc\n  on       ut.table_name = uc.table_name\n  and      uc.constraint_type = 'P';\n"]], ["Get table's primary key's name"], 2], [(1319957, 1), [['If you want the column name, remember that a PK can have multiple columns! We need to create a utility type first because of the collect() aggregate function:'], ["If you don't like the formatting of the nested tab, you can write a utility function which will take an NT as input and provide concatenated comma-delimited string as output. Just don't have the time to do it myself ;)"]], [[" create type ty_varchar_nt as table of varchar2(4000);\n\nselect     ut.table_name, uc.constraint_name, cast(collect (uic.column_name) as ty_varchar_nt) as pk_cols\nfrom       user_tables ut\nleft join  user_constraints uc\n  on       ut.table_name = uc.table_name\n  and      uc.constraint_type = 'P'\nleft join  user_ind_columns uic\n  on       uc.index_name = uic.index_name\ngroup by ut.table_name, uc.constraint_name;\n"]], ["Get table's primary key's name"], 2], [(1320848, 0), [['You can easily do what you want with CHECK CONSTRAINT on your column.'], ['Example trigger(consider it as a bad idea for filtering input):']], [[" ALTER TABLE T\nADD CONSTRAINT constraint_name CHECK (location <> 'chicago') [DISABLE];\n"]], ['before INSERT or Update trigger plsql'], 2], [(1320848, 1), [['Example trigger(consider it as a bad idea for filtering input):'], ['-10000']], [[" CREATE TRIGGER myTrigger \nBEFORE INSERT\nON table\nREFERENCING NEW AS New\nFOR EACH ROW\n   BEGIN\n   IF (New.location = 'chicago') THEN\n       RAISE cError;    \nEXCEPTION\nWHEN cError THEN\n      RAISE_APPLICATION_EXCEPTION(-20001,'Chicago is not allowed');\nEND;\n"]], ['before INSERT or Update trigger plsql'], 2], [(1323951, 0), [["If I'm understanding correctly, you want to use a given ID to find either a product, a unit or a country but you're not sure which. If that's the case, then you can build out deferred queries like this to find the given entity:"], ['And then execute the queries until you find an entity that matches (with  ??  being the null-coalesce operator that returns the right value if the left result is  null ).']], [[' var prod = from p in db.Products\n           where p.ProductId = id\n           select new { Id = p.ProductId, Name = p.ProductName, Modified = p.UpdatedBy };\n\nvar unit = from u in db.Units\n           where p.UnitId = id\n           select new { Id = u.UnitId, Name = u.UnitName, Modified = p.UpdatedBy };\n\nvar ctry = from c in db.Countries\n           where c.CountryId = id\n           select new { Id = c.CountryId, Name = c.CountryName, Modified = c.UploadBy };\n']], ['Joining tables in LINQ/SQL'], 2], [(1323951, 1), [['And then execute the queries until you find an entity that matches (with  ??  being the null-coalesce operator that returns the right value if the left result is  null ).'], ['-10000']], [[' var res = prod.SingleOrDefault() ??\n          unit.SingleOrDefault() ??\n          ctry.SingleOrDefault() ??\n          new { Id = id, Name = null, Modifed = null };\n']], ['Joining tables in LINQ/SQL'], 2], [(1324063, 0), [['When generating random data, specially for test, it is very useful to make the data random, but reproducible. The secret is to use explicit seeds for the random function, so that when the test is run again with the same seed, it produces again exactly the same strings. Here is a simplified example of a function that generates object names in a reproducible manner:'], ['When running the tests the caller generates a random seed it associates with the test run (saves it in the results table), then passed along the seed, similar to this:']], [[" alter procedure usp_generateIdentifier\n    @minLen int = 1\n    , @maxLen int = 256\n    , @seed int output\n    , @string varchar(8000) output\nas\nbegin\n    set nocount on;\n    declare @length int;\n    declare @alpha varchar(8000)\n        , @digit varchar(8000)\n        , @specials varchar(8000)\n        , @first varchar(8000)\n    declare @step bigint = rand(@seed) * 2147483647;\n\n    select @alpha = 'qwertyuiopasdfghjklzxcvbnm'\n        , @digit = '1234567890'\n        , @specials = '_@# '\n    select @first = @alpha + '_@';\n\n    set  @seed = (rand((@seed+@step)%2147483647)*2147483647);\n\n    select @length = @minLen + rand(@seed) * (@maxLen-@minLen)\n        , @seed = (rand((@seed+@step)%2147483647)*2147483647);\n\n    declare @dice int;\n    select @dice = rand(@seed) * len(@first),\n        @seed = (rand((@seed+@step)%2147483647)*2147483647);\n    select @string = substring(@first, @dice, 1);\n\n    while 0 < @length \n    begin\n        select @dice = rand(@seed) * 100\n            , @seed = (rand((@seed+@step)%2147483647)*2147483647);\n        if (@dice < 10) -- 10% special chars\n        begin\n            select @dice = rand(@seed) * len(@specials)+1\n                , @seed = (rand((@seed+@step)%2147483647)*2147483647);\n            select @string = @string + substring(@specials, @dice, 1);\n        end\n        else if (@dice < 10+10) -- 10% digits\n        begin\n            select @dice = rand(@seed) * len(@digit)+1\n                , @seed = (rand((@seed+@step)%2147483647)*2147483647);\n            select @string = @string + substring(@digit, @dice, 1);\n        end\n        else -- rest 80% alpha\n        begin\n            declare @preseed int = @seed;\n            select @dice = rand(@seed) * len(@alpha)+1\n                , @seed = (rand((@seed+@step)%2147483647)*2147483647);\n\n            select @string = @string + substring(@alpha, @dice, 1);\n        end\n\n        select @length = @length - 1;   \n    end\nend\ngo\n"]], ['Generating random strings with T-SQL'], 2], [(1324063, 1), [['When running the tests the caller generates a random seed it associates with the test run (saves it in the results table), then passed along the seed, similar to this:'], ['Update 2016-02-17: See the comments bellow, the original procedure had an issue in the way it advanced the random seed. I updated the code, and also fixed the mentioned off-by-one issue.']], [[' declare @seed int;\ndeclare @string varchar(256);\n\nselect @seed = 1234; -- saved start seed\n\nexec usp_generateIdentifier \n    @seed = @seed output\n    , @string = @string output;\nprint @string;  \nexec usp_generateIdentifier \n    @seed = @seed output\n    , @string = @string output;\nprint @string;  \nexec usp_generateIdentifier \n    @seed = @seed output\n    , @string = @string output;\nprint @string;  \n']], ['Generating random strings with T-SQL'], 2], [(1324830, 0), [['You might need to explain your schema a little better.  From what you have so far, it sounds like you have two tables, a Values table and a User table.'], ["It sounds like you're then getting some information you want to update in the User table for the record or records matching some value from the Values table.  If that's correct, you'll want something like:"]], [[' Values table\n  id (int)\n  value (varchar)\n\nUser table\n  id (int)\n  value_id (int)\n  ...\n']], ['sql db design retrieving and submitting nominal values'], 2], [(1324830, 1), [["It sounds like you're then getting some information you want to update in the User table for the record or records matching some value from the Values table.  If that's correct, you'll want something like:"], ['-10000']], [[' UPDATE User u\nJOIN Values v ON v.id = u.value_id\nSET <update field>=<update value>\nWHERE v.value = <matching value>\n']], ['sql db design retrieving and submitting nominal values'], 2], [(1326701, 0), [['It\'s not trivial. First, you need another column "Flag" which is 0:'], ['You need to run these queries several times:']], [[' INSERT INTO Results (year, month, day, hour, duration, court, Flag)\nSELECT DATEPART (yy, b.StartDateTime),\n       DATEPART (mm, b.StartDateTime),\n       DATEPART (dd, b.StartDateTime),\n       DATEPART (hh, b.StartDateTime),\n       a.Duration,\n       a.Court,\n       0\nFROM Bookings b\nINNER JOIN Activities a\nON b.ActivityID = a.ID\n']], ['Single or multiple INSERTs based on values SELECTed'], 2], [(1326701, 1), [['You need to run these queries several times:'], ["This will create an additional entry for each  duration > 1 . My guess is that you can't allocate a court for more than 8 hours, so you just need to run these three 8 times to fix all of them."]], [[' -- Copy all rows with duration > 1 and set the flag to 1\ninsert into results(year, month, day, hour, duration, court, Flag)\nselect year, month, day, hour+1, duration-1, court, 1\nfrom result\nwhere duration > 1\n;\n-- Set the duration of all copied rows to 1\nupdate result\nset duration = 1\nwhere flag = 0 and duration > 1\n;\n-- Prepare the copies for the next round\nupdate result\nset flag = 0\nwhere flag = 1\n']], ['Single or multiple INSERTs based on values SELECTed'], 2], [(1326909, 0), [['the best way is to depend on the sequence like:'], ['like this way']], [[' select Max(ID) from tableName \n']], ['Universal SQL construct to retrieve the last row inserted'], 2], [(1326909, 1), [['like this way'], ['-10000']], [[' select Max(TimestampField) from tableName \n']], ['Universal SQL construct to retrieve the last row inserted'], 2], [(1327203, 0), [['First create a property inside your WiX Product:'], ['Next create a custom action to check for the key and set ODPNETINSTALLED to "1" if it exists. I\'m not going to go into compiling and adding the custom action to the installer here but it\'s fairly simple if you use Votive in Visual Studio. The code for my custom action is:']], [[' <Property Id="ODPNETINSTALLED">0</Property>\n']], ['In WiX how do I test for the existence of a registry key (not value) for Oracle ODP.Net'], 4], [(1327203, 1), [['Next create a custom action to check for the key and set ODPNETINSTALLED to "1" if it exists. I\'m not going to go into compiling and adding the custom action to the installer here but it\'s fairly simple if you use Votive in Visual Studio. The code for my custom action is:'], ['Now you need to register and schedule the action, because I wanted the warning to appear along with my other launch conditions I had to add it to the Install UI Sequence element:']], [[' using Microsoft.Deployment.WindowsInstaller;\nusing Microsoft.Win32;\n\nnamespace WiXCustomAction\n{\n  public class CustomActions\n  {\n    [CustomAction]\n    public static ActionResult CheckOdpNetInstalled(Session xiSession)\n    {\n      xiSession.Log("Begin CheckOdpNetInstalled");\n\n      RegistryKey lKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\\ORACLE\\ODP.Net");\n\n      xiSession["ODPNETINSTALLED"] = lKey == null ? "0" : "1";\n\n      return ActionResult.Success;\n    }\n  }\n}\n']], ['In WiX how do I test for the existence of a registry key (not value) for Oracle ODP.Net'], 4], [(1327203, 2), [['Now you need to register and schedule the action, because I wanted the warning to appear along with my other launch conditions I had to add it to the Install UI Sequence element:'], ['Finally add a launch condition to check the property:']], [[' <Binary Id="WiXCustomAction.dll" SourceFile="$(var.WiXCustomAction.TargetDir)$(var.WiXCustomAction.TargetName).CA.dll" />\n<CustomAction Id="CheckOdpNet" BinaryKey="WiXCustomAction.dll" DllEntry="CheckOdpNetInstalled" Execute="immediate" />\n<InstallUISequence>\n  <Custom Action="CheckOdpNet" Before="LaunchConditions">NOT Installed</Custom>\n</InstallUISequence>\n']], ['In WiX how do I test for the existence of a registry key (not value) for Oracle ODP.Net'], 4], [(1327203, 3), [['Finally add a launch condition to check the property:'], ["Note that I believe that scheduling in InstallUISequence means the custom action won't be fired during non-UI installs. However, my installer must have UI install so it's not an issue for me."]], [[' <Condition Message="!(loc.OracleOdpCondition)">\n  Installed OR ODPNETINSTALLED="1"\n</Condition>\n']], ['In WiX how do I test for the existence of a registry key (not value) for Oracle ODP.Net'], 4], [(1330692, 0), [['What you mean is either'], ['or']], [[' SELECT DISTINCT a, b FROM pairs;\n']], ['Distinct pair of values SQL'], 2], [(1330692, 1), [['or'], ['-10000']], [[' SELECT a, b FROM pairs GROUP BY a, b;\n']], ['Distinct pair of values SQL'], 2], [(1334979, 0), [['if you want data for the full day 25 and excluding all the 26, you need to remove the first second of the 26:'], ['or ']], [[" where myDate >= Date '2009-08-25' and myDate < Date '2009-08-26'\n"]], ['Date Range in PL/SQL (Oracle)'], 2], [(1334979, 1), [['or '], ["Update  -- A little precision: In Oracle the  DATE  datatype is used both for 'Date' types with or without time. If you're dealing with dates without time, it is usually stored with a 00:00 time segment, meaning midnight. Because of this, the first between ( my_date between '2009-08-25' and '2009-08-26' ) will potentially select two full days."]], [[" where myDate between Date '2009-08-25' and Date '2009-08-26' - interval '1' second\n"]], ['Date Range in PL/SQL (Oracle)'], 2], [(1335058, 0), [['CTE version:'], ['Non CTE version:']], [[" WITH events AS (\n      SELECT t.event_id,\n             COUNT(*) 'num'\n        FROM EVENTS_HISTORIC t\n    GROUP BY e.event_id, YEAR(t.date), MONTH(t.date), DAY(t.date)\n      HAVING COUNT(*) > 1)\nSELECT eh.event_id,\n       eh.date,\n       e.num  \n  FROM EVENTS_HISTORIC eh\n  JOIN events e ON e.event_id = eh.event_id\n"]], ['How do I filter the results of an analytic/windowing query?'], 2], [(1335058, 1), [['Non CTE version:'], ['-10000']], [[" SELECT eh.event_id,\n       eh.date,\n       e.num  \n  FROM EVENTS_HISTORIC eh\n  JOIN (SELECT t.event_id,\n               COUNT(*) 'num'\n          FROM EVENTS_HISTORIC t\n      GROUP BY e.event_id, YEAR(t.date), MONTH(t.date), DAY(t.date)\n        HAVING COUNT(*) > 1) e ON e.event_id = eh.event_id\n"]], ['How do I filter the results of an analytic/windowing query?'], 2], [(1335906, 0), [['-10000'], ['In  MySQL , this can be faster:']], [[' INSERT\nINTO    dot_products\nSELECT  v1.vector_id, v2.vector_id, SUM(v1.attribute_value * v2.attribute_value)\nFROM    attributes v1\nJOIN    attributes v2\nON      v2.attribute_id = v1.attribute_id\nGROUP BY\n        v1.vector_id, v2.vector_id\n']], ['Is a relational database well suited for vector calculations?'], 2], [(1335906, 1), [['In  MySQL , this can be faster:'], ['-10000']], [[' INSERT\nINTO    dot_products\nSELECT  v1.vector_id, v2.vector_id,\n        (\n        SELECT  SUM(va1.attribute_value * va2.attribute_value)\n        FROM    attributes va1\n        JOIN    attributes va2\n        ON      va2.attribute_id = va1.attribute_id\n        WHERE   va1.vector_id = v1.vector_id\n                AND va2.vector_id = v2.vector_id\n        )\nFROM    vector v1\nCROSS JOIN\n        vector v2\n']], ['Is a relational database well suited for vector calculations?'], 2], [(1336902, 0), [['try this:'], ['OUTPUT:']], [[" declare @YourTable table (RowID int primary key, NextID int, TextValue varchar(50))\n\nINSERT INTO @YourTable VALUES (1 , 12  ,'The quick')\nINSERT INTO @YourTable VALUES (3 , 40  ,'jumps over')\nINSERT INTO @YourTable VALUES (5 , null,'lazy dog.')\nINSERT INTO @YourTable VALUES (12, 3   ,'brown fox')\nINSERT INTO @YourTable VALUES (40, 5   ,'the')\n\n;with cteview as (\nSELECT * FROM @YourTable WHERE RowID=1\nUNION ALL\nSELECT y.* FROM @YourTable y\n    INNER JOIN cteview   c ON y.RowID=c.NextID\n) \nselect * from cteview\nOPTION (MAXRECURSION 9999) --go beyond default 100 levels of recursion to 9999 levels\n"]], ['Order a query based on a field pointing to the same table'], 2], [(1336902, 1), [['OUTPUT:'], ['-10000']], [[' RowID       NextID      TextValue\n----------- ----------- --------------------------------------------------\n1           12          The quick\n12          3           brown fox\n3           40          jumps over\n40          5           the\n5           NULL        lazy dog.\n\n(5 row(s) affected)\n']], ['Order a query based on a field pointing to the same table'], 2], [(1336934, 0), [['You can do this without a second table. Something like this:'], ["That will show you which records are about to get deleted. If that's okay, change it to:"]], [[' SELECT * FROM emailTable\nWHERE EXISTS (\n    SELECT * FROM emailTable AS t2\n    WHERE t2.emlPath = emailTable.emlPath AND\n    t2.GUID > emailTable.GUID)\n']], ['Trying to delete duplicate entries in SQL database deleted all the records. What went wrong?'], 2], [(1336934, 1), [["That will show you which records are about to get deleted. If that's okay, change it to:"], ['The  t2.GUID > emailTable.GUID  will make sure that one record with that  emlPath  will remain in the table.']], [[' DELETE FROM emailTable\nWHERE EXISTS (\n    SELECT * FROM emailTable AS t2\n    WHERE t2.emlPath = emailTable.emlPath AND\n    t2.GUID > emailTable.GUID)\n']], ['Trying to delete duplicate entries in SQL database deleted all the records. What went wrong?'], 2], [(1337196, 0), [['this will be slow, but if it is a one time thing, try...'], ['Note that the ANSI SQL string concatenation operator is "||", so it may need to be:']], [[" select * from parameters where name like '%'+char(13)+'%' or name like '%'+char(10)+'%'\n"]], ['SQL query for a carriage return in a string and ultimately removing carriage return'], 2], [(1337196, 1), [['Note that the ANSI SQL string concatenation operator is "||", so it may need to be:'], ['-10000']], [[" select * from parameters where name like '%' || char(13) || '%' or name like '%' || char(10) || '%'\n"]], ['SQL query for a carriage return in a string and ultimately removing carriage return'], 2], [(1339999, 0), [['Copy in batches'], ['If you have a field you can use to choose "ranges" such as an OrderDate, start off by running a query like']], [[' INSERT INTO [TargetDB].[dbo].[Orders]\nSELECT TOP 100 *\nFROM [SourceDB].[dbo].[Orders] S\nWHERE NOT EXISTS\n(\n SELECT 1 FROM [TargetDB].[dbo].[Orders] T1\n WHERE T1.OrderId = S.orderID\n)\n']], ['select into issue of SQL Server'], 3], [(1339999, 1), [['If you have a field you can use to choose "ranges" such as an OrderDate, start off by running a query like'], ['to see how many distinct values there are and how many records there are per distinct value. That should allow you to choose some ranges (eg. 2009-01-01 -> 2009-01-31) and then use ranged queries to copy the data across:']], [[' SELECT OrderDate, COUNT(1)\nFROM [SourceDB].[dbo].[Orders]\n']], ['select into issue of SQL Server'], 3], [(1339999, 2), [['to see how many distinct values there are and how many records there are per distinct value. That should allow you to choose some ranges (eg. 2009-01-01 -> 2009-01-31) and then use ranged queries to copy the data across:'], ['-10000']], [[" INSERT INTO [TargetDB].[dbo].[Orders]\nSELECT *\nFROM [SourceDB].[dbo].[Orders] \nWHERE OrderDate BETWEEN '2009-01-01 00:00:00.000' AND '2009-01-31 23:59:59.997'\n"]], ['select into issue of SQL Server'], 3], [(1340564, 0), [['This:'], ['Gives this:']], [['     $select = $db->select()->from(array("s" => "sles"), array("s.id","i.id as instanceid","i.reference","i.name","i.sic_code","i.start_date"))\n                                 ->join(array(\'i\' => "sle_instances"),"s.id = i.sle_id",array())\n                                 ->where("i.id = (select max(id) from sle_instances where sle_id = s.id)")\n                                 ->order(\'i.name asc\');\n']], ['Writing a subquery using Zend DB'], 2], [(1340564, 1), [['Gives this:'], ['-10000']], [[' "SELECT `s`.`id`, `i`.`id` AS `instanceid`, `i`.`reference`, `i`.`name`, `i`.`sic_code`, `i`.`start_date` FROM `sles` AS `s`\n INNER JOIN `sle_instances` AS `i` ON s.id = i.sle_id WHERE (i.id = (select max(id) from sle_instances where sle_id = s.id)) ORDER BY `i`.`name` asc"\n']], ['Writing a subquery using Zend DB'], 2], [(1340732, 0), [['For consecutive ids:'], ['For non-consecutive ids:']], [[" SELECT t.*\n  FROM TABLE t\n  JOIN (SELECT MAX(t.id) 'maxid'\n          FROM TABLE t) max ON t.id BETWEEN max.maxid-100 AND max.maxid\n WHERE t.col = 'xyz' \n"]], ['Query Optimization'], 2], [(1340732, 1), [['For non-consecutive ids:'], ['-10000']], [[" SELECT a.*\n  FROM (SELECT t.*,\n               @rownum := @rownum+1 AS rownum\n          FROM TABLE t, (SELECT @rownum := 0) r\n         WHERE t.col = 'xyz') a,\n       (SELECT COUNT(t.*) 'max'\n          FROM TABLE t\n         WHERE t.col = 'xyz') m\nWHERE a.rownum BETWEEN m.max-100 AND m.max\n"]], ['Query Optimization'], 2], [(1340748, 0), [['from something like (only speculation, OP has provided no example code):'], ['to:']], [[" SELECT\n    *\n    FROM MyTale\n    WHERE (a=5 AND b='apple' AND c=1024)\n        OR (a=3 AND b='pear' AND c=2048)\n        OR (a=8 AND b='apple' AND c=2048)\n        ....\n"]], ['SQL Server 2000 gives error on queries that contain more than about 12500 conditions'], 4], [(1340748, 1), [['to:'], ["The only way to solve your problem (as presented) is to store your conditions as rows in two tables: RowsToKeep and RowsToRemove.  You can use regular tables, #temp tables, or ##globalTemp tables.  You don't give enough info to recommend which to use (how often does this query run? will there be multiple similar queries running at the same time, etc..) In my example code, I'll use a regular table, and assume that nothing will interfere with the regular tables (no one else will try to use/modify RowsToKeep and RowsToRemove while this query is being prepared or being run)."]], [[" CREATE TABLE #TempJoin\n(a int\n,b char(10)\n,c int\n)\n\nINSERT INTO #TempJoin VALUES (5,'apple',1024)\nINSERT INTO #TempJoin VALUES (3,'pear',2048)\nINSERT INTO #TempJoin VALUES (8,'apple',2048)\n....\n\nSELECT\n    m.*\n    FROM MyTale              m \n        INNER JOIN #TempJoin t ON m.a=t.a AND m.b=t.b AND m.c=t.c\n"]], ['SQL Server 2000 gives error on queries that contain more than about 12500 conditions'], 4], [(1340748, 2), [["The only way to solve your problem (as presented) is to store your conditions as rows in two tables: RowsToKeep and RowsToRemove.  You can use regular tables, #temp tables, or ##globalTemp tables.  You don't give enough info to recommend which to use (how often does this query run? will there be multiple similar queries running at the same time, etc..) In my example code, I'll use a regular table, and assume that nothing will interfere with the regular tables (no one else will try to use/modify RowsToKeep and RowsToRemove while this query is being prepared or being run)."], ["For a query such as you describe, I'd guess that you are building it dynamically using loops.  TRUNCATE or DELETE the two tables first, then as you loop INSERT INTO these tables instead of building a dynamic query conditions.  After inserting all the values, You can then use the following simple query, which will function the same as your original, but not be limited by number of conditions:"]], [[" CREATE TABLE RowsToKeep\n(a int       --you don't say the data type, but you can make these anything\n,b char(10)  --you don't say the data type, but you can make these anything\n)\n\nCREATE TABLE RowsToRemove\n(c int       --you don't say the data type, but you can make these anything\n)\n"]], ['SQL Server 2000 gives error on queries that contain more than about 12500 conditions'], 4], [(1340748, 3), [["For a query such as you describe, I'd guess that you are building it dynamically using loops.  TRUNCATE or DELETE the two tables first, then as you loop INSERT INTO these tables instead of building a dynamic query conditions.  After inserting all the values, You can then use the following simple query, which will function the same as your original, but not be limited by number of conditions:"], ['-10000']], [[' SELECT\n...\n    FROM TABLE                        t\n        INNER JOIN RowsToKeep         k ON t.Column2=k.a AND t.Column3=k.b\n        LEFT OUTER JOIN RowsToRemove  r ON t.Column1=r.a\n    WHERE r.a IS NULL\n']], ['SQL Server 2000 gives error on queries that contain more than about 12500 conditions'], 4], [(1341505, 0), [['The  DISTINCT  placed in a subquery should work:'], ['Once this is done, you would join this newly created table with the old table to associate the generated ids to the children tables:']], [[' SQL> INSERT INTO meeting\n  2     SELECT seq.nextval, meeting_desc, meeting_date\n  3       FROM (SELECT DISTINCT meeting_desc, meeting_date\n  4               FROM current_table);\n\n2 rows inserted\n']], ['Oracle: Normalizing data during migration'], 2], [(1341505, 1), [['Once this is done, you would join this newly created table with the old table to associate the generated ids to the children tables:'], ['-10000']], [[' SQL>   INSERT INTO topic\n  2       SELECT m.id, topic_seq.NEXTVAL, ct.topic_desc\n  3         FROM current_table ct\n  4         JOIN meeting m ON (ct.meeting_desc = m.meeting_desc \n  5                            AND ct.meeting_date = m.meeting_date);\n\n5 rows inserted\n']], ['Oracle: Normalizing data during migration'], 2], [(1342057, 0), [['You can reverse a  like  statement. Just using the same syntax as a regular  like  query:'], ['Of course, if you felt wild and crazy, you could also use  instr :']], [[" select\n    *\nfrom\n    table\nwhere\n    'value' like concat('%', column, '%')\n"]], ['MySQL question about "reverse LIKEs"'], 2], [(1342057, 1), [['Of course, if you felt wild and crazy, you could also use  instr :'], ["I don't know which one is faster, since I don't have a MySQL instance to test against, but it's worth trying both to see which wins."]], [[" select * from table where instr('value', column) > 0\n"]], ['MySQL question about "reverse LIKEs"'], 2], [(1342291, 0), [['Add random / 86400 to your date.'], ['ADDITION:']], [[' SELECT TRUNC(SYSDATE)+DBMS_RANDOM.value(0, 86400-1)/86400 FROM DUAL\n']], ['Randomize Time Portion of Date Field'], 2], [(1342291, 1), [['ADDITION:'], ['-10000']], [[' UPDATE table_name\nSET    column_ts = SYSDATE - 120 + MOD(ROWNUM, 35) + DBMS_RANDOM.value(0, 86400-1)/86400;\n']], ['Randomize Time Portion of Date Field'], 2], [(1343201, 0), [['While you may have only one category per dump, you therefore must have multiple  rows  in  dump_cat  per dump.  You should consider defining a  UNIQUE  constraint to ensure only one row exists per pair of  did ,  cid : '], ['You can remove duplicates this way, for instance:']], [[' ALTER TABLE dump_cat ADD CONSTRAINT UNIQUE (did, cid);\n']], ['Getting SUM() on distinct rows in mysql'], 5], [(1343201, 1), [['You can remove duplicates this way, for instance:'], ['You can verify that there are in fact duplicates as I suggest by using a query like the following:']], [[' DELETE dc1 FROM dump_cat dc1 JOIN dump_cat dc2 USING (did, cid)\nWHERE dc1.id > dc2.id; -- only delete the second duplicate entry\n']], ['Getting SUM() on distinct rows in mysql'], 5], [(1343201, 2), [['You can verify that there are in fact duplicates as I suggest by using a query like the following:'], ["Another possibility:  you have more than one category with the same name?  (sorry my first try at this query was wrong, here's an edited version)"]], [[' SELECT did, COUNT(*)\nFROM dump_cat\nGROUP BY did\nHAVING COUNT(*) > 1;\n']], ['Getting SUM() on distinct rows in mysql'], 5], [(1343201, 3), [["Another possibility:  you have more than one category with the same name?  (sorry my first try at this query was wrong, here's an edited version)"], ['FWIW, I did test the  DELETE  command I showed:']], [[' SELECT c.name, GROUP_CONCAT(c.id) AS cat_id_list, COUNT(*) AS c\nFROM category c\nGROUP BY c.name\nHAVING COUNT(*) > 1;\n']], ['Getting SUM() on distinct rows in mysql'], 5], [(1343201, 4), [['FWIW, I did test the  DELETE  command I showed:'], ['PS: This is tangential to your question, but the  DISTINCT  query modifier always applies to the whole row, not just the first column.  This is a common misunderstanding of many SQL programmers. ']], [[' INSERT INTO dump_cat (did, cid) VALUES (1, 2), (3,4), (3,4); -- duplicates!\n\nDELETE dc1 FROM dump_cat dc1 JOIN dump_cat dc2 USING (did, cid) WHERE dc1.id > dc2.id\nQuery OK, 1 row affected (0.00 sec)\n']], ['Getting SUM() on distinct rows in mysql'], 5], [(1343647, 0), [['for SQL Server 2005 and up try:'], ["EDIT \nI hate to write so much actual code when there was no shema given, because I can't actually run this and be sure it works.  However to answer the question of the how to handle ties using the last transaction date, here is a newer version of the above code:"]], [[' ;WITH SalesScore AS (\nSELECT\n    s.PK_ID as S_PK\n        ,c.PK_ID AS c_PK\n        ,CASE \n             WHEN c.PK_ID IS NULL THEN 0\n             ELSE CASE WHEN s.ServiceId=c.ServiceId THEN 1 ELSE 0 END\n                  +CASE WHEN (s.Address=c.Address AND s.Zip=c.Zip) THEN 1 ELSE 0 END\n                  +CASE WHEN s.EmailAddress=c.EmailAddress THEN 1 ELSE 0 END\n                  +CASE WHEN s.HomePhone=c.HomePhone THEN 1 ELSE 0 END\n         END AS Score\n    FROM Sales s\n        LEFT OUTER JOIN Customers c ON s.ServiceId=c.ServiceId\n                                       OR (s.Address=c.Address AND s.Zip=c.Zip)\n                                       OR s.EmailAddress=c.EmailAddress\n                                       OR s.HomePhone=c.HomePhone \n)\nSELECT \n    s.*,c.*\n    FROM (SELECT\n              S_PK,MAX(Score) AS Score\n              FROM SalesScore \n              GROUP BY S_PK\n         ) dt\n        INNER JOIN Sales          s ON dt.s_PK=s.PK_ID \n        INNER JOIN SalesScore    ss ON dt.s_PK=s.PK_ID AND dt.Score=ss.Score\n        LEFT OUTER JOIN Customers c ON ss.c_PK=c.PK_ID\n']], ['How can I choose the closest match in SQL Server 2005?'], 2], [(1343647, 1), [["EDIT \nI hate to write so much actual code when there was no shema given, because I can't actually run this and be sure it works.  However to answer the question of the how to handle ties using the last transaction date, here is a newer version of the above code:"], ['-10000']], [[' ;WITH SalesScore AS (\nSELECT\n    s.PK_ID as S_PK\n        ,c.PK_ID AS c_PK\n        ,CASE \n             WHEN c.PK_ID IS NULL THEN 0\n             ELSE CASE WHEN s.ServiceId=c.ServiceId THEN 1 ELSE 0 END\n                  +CASE WHEN (s.Address=c.Address AND s.Zip=c.Zip) THEN 1 ELSE 0 END\n                  +CASE WHEN s.EmailAddress=c.EmailAddress THEN 1 ELSE 0 END\n                  +CASE WHEN s.HomePhone=c.HomePhone THEN 1 ELSE 0 END\n         END AS Score\n    FROM Sales s\n        LEFT OUTER JOIN Customers c ON s.ServiceId=c.ServiceId\n                                       OR (s.Address=c.Address AND s.Zip=c.Zip)\n                                       OR s.EmailAddress=c.EmailAddress\n                                       OR s.HomePhone=c.HomePhone \n)\nSELECT\n    *\n    FROM (SELECT \n              s.*,c.*,row_number() over(partition by s.PK_ID order by s.PK_ID ASC,c.LastTransaction DESC) AS RankValue\n              FROM (SELECT\n                        S_PK,MAX(Score) AS Score\n                        FROM SalesScore \n                        GROUP BY S_PK\n                   ) dt\n                  INNER JOIN Sales          s ON dt.s_PK=s.PK_ID \n                  INNER JOIN SalesScore    ss ON dt.s_PK=s.PK_ID AND dt.Score=ss.Score\n                  LEFT OUTER JOIN Customers c ON ss.c_PK=c.PK_ID\n         ) dt2\n    WHERE dt2.RankValue=1\n']], ['How can I choose the closest match in SQL Server 2005?'], 2], [(1344697, 0), [['To fill a dataset from a stored procedure you would have code like below:'], ['Your stored procedure in this case will look something like:']], [[' SqlConnection mySqlConnection =new SqlConnection("server=(local);database=MyDatabase;Integrated Security=SSPI;");\n\n    SqlCommand mySqlCommand = mySqlConnection.CreateCommand();\n    mySqlCommand.CommandText = "IDCategory";\n    mySqlCommand.CommandType = CommandType.StoredProcedure;\n    mySqlCommand.Parameters.Add("@IDCategory", SqlDbType.Int).Value = 5;\n\n    SqlDataAdapter mySqlDataAdapter = new SqlDataAdapter();\n    mySqlDataAdapter.SelectCommand = mySqlCommand;\n    DataSet myDataSet = new DataSet();\n    mySqlConnection.Open();\n    mySqlDataAdapter.Fill(myDataSet);\n']], ['How can I make a stored procedure return a "dataset" using a parameter I pass?'], 2], [(1344697, 1), [['Your stored procedure in this case will look something like:'], ["Here's a link on Stored Procedure basics:\n http://www.sql-server-performance.com/articles/dba/stored_procedures_basics_p1.aspx"]], [[' CREATE PROC [dbo].[IDCategory] \n    @IDCategory int\nAS \n    SELECT IDListing, IDCategory, Price, Seller, Image\n         FROM whateveryourtableisnamed\n         WHERE IDCategory = @IDCategory\n']], ['How can I make a stored procedure return a "dataset" using a parameter I pass?'], 2], [(1344974, 0), [["In this specific case, you're better off using a  left  join :"], ['However, to answer your question in a more general sense, you can use a  case  statement  within your query to avoid having to have a whole whoopla:']], [[' select\n    u.FullName,\n    a.Address\nfrom\n    users u\n    left join address a on\n        a.userid = u.userid\nwhere\n    u.userid = 1000\n']], ['TSQL, how to avoid if conditions?'], 5], [(1344974, 1), [['However, to answer your question in a more general sense, you can use a  case  statement  within your query to avoid having to have a whole whoopla:'], ['case  is a  switch  statement in SQL, so you can do this:']], [[' select\n    u.fullname,\n    case \n        when (select count(*) from address where userid = u.userid) > 0 then 1\n        else 0\n    end as AddressSupplied\nfrom\n    users u\nwhere\n    userid = 1000\n']], ['TSQL, how to avoid if conditions?'], 5], [(1344974, 2), [['case  is a  switch  statement in SQL, so you can do this:'], ["This will check the column  col_name  on each row, and if it's one of the values specified, it will return the correct  then . Therefore, a sample query and result set is:"]], [[" case col_name\n    when 'Val1' then 'Yup'\n    when 'Val2' then 'Well...'\n    when 'Val3' then 'Nope.'\n    else 'What now?'\nend\n"]], ['TSQL, how to avoid if conditions?'], 5], [(1344974, 3), [["This will check the column  col_name  on each row, and if it's one of the values specified, it will return the correct  then . Therefore, a sample query and result set is:"], ['This can also work in the  where  clause, which is awfully handy for semi-conditional queries:']], [[" select\n    col_name,\n    case col_name\n        when 'Val1' then 'Yup'\n        when 'Val2' then 'Well...'\n        when 'Val3' then 'Nope.'\n        else 'What now?'\n    end as some_col\nfrom\n    tableA\n\n--------------------\ncol_name    some_val\n--------------------\nVal1        Yup\nVal2        Well...\nVal1        Yup\nVal4        What now?\nVal3        Nope.\n"]], ['TSQL, how to avoid if conditions?'], 5], [(1344974, 4), [['This can also work in the  where  clause, which is awfully handy for semi-conditional queries:'], ['-10000']], [[' where\n    userid = case when @somevar > 0 then 1000 else 1001 end\n']], ['TSQL, how to avoid if conditions?'], 5], [(1344975, 0), [['Use the following syntax:'], ['The  primary key  sets the  progid  column to be the index column of the table. The  identity(1,1)  clause sets the  progid  to be an auto-incrementing field, starting at 1 and incrementing by 1 each time. Therefore, the following SQL enters the corresponding rows into  programs :']], [[' create table programs (\n    progid int primary key identity(1,1),\n    name nvarchar(255),\n    description nvarchar(500),\n    iconFile nvarchar(255),\n    installScript nvarchar(255)\n)\n']], ['Creating a table in SQL Server Express'], 2], [(1344975, 1), [['The  primary key  sets the  progid  column to be the index column of the table. The  identity(1,1)  clause sets the  progid  to be an auto-incrementing field, starting at 1 and incrementing by 1 each time. Therefore, the following SQL enters the corresponding rows into  programs :'], ['Notice, also, that I used  nvarchar  instead of  varchar . This is because  nvarchar  uses the Unicode character set, while  varchar  uses the ASCII character set.  nvarchar  is the recommended usage, since ASCII characters take no additional space in Unicode, but Unicode does allow for internationalization and obscure characters.']], [[" insert into (name, description, iconfile, installscript)\nvalues ('Name1', 'Test test', 'C:\\file\\path', 'C:\\script\\path')\ninsert into (name, description, iconfile, installscript)\nvalues ('Name2', 'Test 123', 'C:\\file\\path1', 'C:\\script\\path2')\n\n------------------------------------------------------------------\nprogid    name     description    iconfile        installscript\n------------------------------------------------------------------\n1         Name1    Test test      C:\\file\\path    C:\\script\\path\n2         Name2    Test 123       C:\\file\\path1   C:\\script\\path2\n"]], ['Creating a table in SQL Server Express'], 2], [(1345135, 0), [['Enforcing uniqueness.   Although a generated GUID is very likely to be unique, you could easily insert the same GUID in multiple rows.  Of course you could do it by mistake, but this may even be part of your design, for instance for compound key constraints in many-to-many tables.'], ['Being the target of a foreign key.   You probably are accustomed to FOREIGN KEY referencing a PRIMARY KEY of the parent table.  Did you know that a FOREIGN KEY can also reference a UNIQUE KEY?']], [[' CREATE TABLE BookAuthors (\n  guid INT PRIMARY KEY,\n  BookGuid INT NOT NULL,\n  AuthorGuid INT NOT NULL,\n  FOREIGN KEY (BookGuid) REFERENCES Books(BookGuid),\n  FOREIGN KEY (AuthorGuid) REFERENCES Authors(AuthorGuid),\n  UNIQUE KEY (BookGuid, AuthorGuid)\n);\n']], ['What is the Point of using a Unique index on a Guid Column'], 2], [(1345135, 1), [['Being the target of a foreign key.   You probably are accustomed to FOREIGN KEY referencing a PRIMARY KEY of the parent table.  Did you know that a FOREIGN KEY can also reference a UNIQUE KEY?'], ["Performance.   UNIQUE is a constraint, as others have pointed out, but in most brands of database, an index is implicit when you define a UNIQUE, PRIMARY KEY, or FOREIGN KEY constraint.  You're right that there's some overhead when inserting to any indexed table, but the performance benefit of an index is a net win, usually many times over."]], [[' CREATE TABLE Acknowledgements (\n  guid INT PRIMARY KEY,\n  BookGuid INT NOT NULL,\n  AuthorGuid INT NOT NULL,\n  Acknowledged VARCHAR(100) NOT NULL,\n  -- this works because of the UNIQUE constraint in BookAuthors:\n  FOREIGN KEY (BookGuid, AuthorGuid) \n    REFERENCES BookAuthors (BookGuid, AuthorGuid)\n);\n']], ['What is the Point of using a Unique index on a Guid Column'], 2], [(1345207, 0), [['Create another table for categories like this:'], ['then store categories related to program using third table:']], [[' create table categories(\n   catid int not null primary key identity,\n   caterogy varchar(255) not null\n)\n']], ['Link one table to another?'], 2], [(1345207, 1), [['then store categories related to program using third table:'], ['-10000']], [[' create table progcategory(\n    progid int foreign key references programs(progid) not null,\n    catid int foreign key references categories(catid) not null,\n    primary key(progid, catid)\n)\n']], ['Link one table to another?'], 2], [(1346914, 0), [['Using the table'], ['filled with this data']], [[' create table Tree(\n  id serial primary key check(id > 0),\n  parent int references Tree(id),\n  name varchar(100) not null unique check(length(name)>0),\n  attr1 int,\n  attr2 varchar(15),\n  constraint charlength check(id > parent)\n);\n']], ['How to model and query inheritance in a hierarchy of rows in a database table?'], 4], [(1346914, 1), [['filled with this data'], ['the query ']], [[" insert into Tree (name, parent, attr1, attr2)\n          values ('Foo', null, 5, 'high'), -- will have id 1\n                 ('Bar1', 1, null, 'low'), -- will have id 2\n                 ('Bar2', 1, null, null),\n                 ('Bar3', 2, null, null);\n"]], ['How to model and query inheritance in a hierarchy of rows in a database table?'], 4], [(1346914, 2), [['the query '], ['yields (with my ruby program wrapping the queries):']], [[" with recursive parents(id, name, attr1, attr2, parent, level, who) as (\n  select id, name, attr1, attr2, parent, 1, id\n    from Tree t\n    where t.name in ('Bar3', 'Bar2')\n  union all\n  select t.id, p.name, coalesce(p.attr1, t.attr1), coalesce(p.attr2, t.attr2), t.parent, p.level+1, p.who\n    from parents p, Tree t\n    where t.id = p.parent\n  ) select distinct on (who) who, name, attr1, attr2\n      from parents\n      order by who, level desc;\n"]], ['How to model and query inheritance in a hierarchy of rows in a database table?'], 4], [(1346914, 3), [['yields (with my ruby program wrapping the queries):'], ["About your 1st question I'm not sure what you mean. But maybe you can recover the XML from its presentation in the database?!? For your 3rd question I hope to be able to post this weekend an alternative for storing trees. Otherwise I'd say that your ideas look good to me."]], [[' {"attr1"=>"5", "name"=>"Bar2", "attr2"=>"high", "who"=>"3"}\n{"attr1"=>"5", "name"=>"Bar3", "attr2"=>"low", "who"=>"4"}\n']], ['How to model and query inheritance in a hierarchy of rows in a database table?'], 4], [(1347839, 0), [['This will return the data you want:'], ['and this will delete undesired rows from the table leaving only what you want:']], [[' SELECT id, salesId, score, lastServiceDate\n from (select id, salesId, score, lastServiceDate\n         ,row_number() over(partition by SalesId order by score desc, lastServiceDate desc) ranking\n        from @results) xx\n where xx.ranking = 1\n']], ['Choosing the highest scored results from a table variable in SQL'], 2], [(1347839, 1), [['and this will delete undesired rows from the table leaving only what you want:'], ['I tested this with the data you posted, but be sure to try it out with larger/more complex data sets.']], [[' DELETE @results\n where id in (select id\n               from (select id, salesId, score, lastServiceDate\n                       ,row_number() over(partition by SalesId order by score desc, lastServiceDate desc) ranking\n                      from @results) xx\n               where xx.ranking <> 1)\n\nselect * from @results\n']], ['Choosing the highest scored results from a table variable in SQL'], 2], [(1347977, 0), [['-10000'], ['Or']], [[' SELECT * FROM ExternalQuestionKeyword INNER JOIN ExternalKeywords \nON ExternalKeywords.ID=ExternalQuestionKeyword.KeywordID  \nWHERE QuestionID = 17\n']], ['Error in SQL "The multi-part identifier "ExternalKeywords.ID" could not be bound."'], 2], [(1347977, 1), [['Or'], ['-10000']], [[' SELECT * FROM ExternalQuestionKeyword INNER JOIN Keywords \nON Keywords.ID=ExternalQuestionKeyword.KeywordID  \nWHERE QuestionID = 17\n']], ['Error in SQL "The multi-part identifier "ExternalKeywords.ID" could not be bound."'], 2], [(1352650, 0), [['For example there is a file ./grails-app/conf/sql/hr/FIND_PERSON_BY_ID.sql that has something like the following:'], ['I created a  SqlCatalogService  class that would load all files in that directory (and subdirectories) and store the filenames (minus extension) and file text in a Map.  The service has a get(id) method that returns the sql text that is cached in the Map.  Since files/directories stored in grails-app/conf are placed in the classpath, the SqlCatalogService uses the following code to read in the files:']], [[' select a.id\n, a.first_name\n, a.last_name \nfrom person \nwhere id = ?\n']], ['Grails - store sql that will be used by services'], 3], [(1352650, 1), [['I created a  SqlCatalogService  class that would load all files in that directory (and subdirectories) and store the filenames (minus extension) and file text in a Map.  The service has a get(id) method that returns the sql text that is cached in the Map.  Since files/directories stored in grails-app/conf are placed in the classpath, the SqlCatalogService uses the following code to read in the files:'], ['Services that use various datasources use the SqlCatalogService to retrieve the sql by calling the get(id) method:']], [[' ....\n....\nMap<String,String> sqlCache = [:]\n....\n....\nvoid loadSqlCache() {\n    try {\n        loadSqlCacheFromDirectory(new File(this.class.getResource("/sql/").getFile()))\n    } catch (Exception ex) {\n        log.error(ex)\n    }       \n}\n\nvoid loadSqlCacheFromDirectory(File directory) {\n    log.info "Loading SQL cache from disk using base directory ${directory.name}"\n    synchronized(sqlCache) {\n        if(sqlCache.size() == 0) {\n            try {  \n                directory.eachFileRecurse { sqlFile ->\n                    if(sqlFile.isFile() && sqlFile.name.toUpperCase().endsWith(".SQL")) {\n                        def sqlKey = sqlFile.name.toUpperCase()[0..-5]\n                        sqlCache[sqlKey] = sqlFile.text\n                        log.debug "added SQL [${sqlKey}] to cache"\n                    }\n                }                                   \n            } catch (Exception ex) {\n                log.error(ex)\n            }       \n        } else {\n            log.warn "request to load sql cache and cache not empty: size [${sqlCache.size()}]"\n        }\n    }\n}\n\nString get(String sqlId) {\n    def sqlKey = sqlId?.toUpperCase()\n    log.debug "SQL Id requested: ${sqlKey}"\n    if(!sqlCache[sqlKey]) {\n        log.debug "SQL [${sqlKey}] not found in cache, loading cache from disk"\n        loadSqlCache()\n    }\n    return sqlCache[sqlKey]\n}\n']], ['Grails - store sql that will be used by services'], 3], [(1352650, 2), [['Services that use various datasources use the SqlCatalogService to retrieve the sql by calling the get(id) method:'], ['For now we only have a few sql statements so storing all the text in a Map is not an issue.  If you lots of sql files to store you may need to think about using something like Ehcache and defining an eviction strategy (i.e., least recently used or least frequently used) and only storing the most used in memory and leaving the rest on disk until needed.']], [[' class PersonService {\n\n    def hrDataSource\n    def sqlCatalogService\n\n    private static final String SQL_FIND_PERSON_BY_ID = "FIND_PERSON_BY_ID"\n\n    Person findPersonById(String personId) {\n        try {\n            def sql = new groovy.sql.Sql(hrDataSource)\n            def row = sql.firstRow(sqlCatalogService.get(SQL_FIND_PERSON_BY_ID), [personId])\n            row ? new Person(row) : null\n        } catch (Exception ex) {\n            log.error ex.message, ex\n            throw ex\n        }\n    }\n}\n']], ['Grails - store sql that will be used by services'], 3], [(1355349, 0), [['Simple change to syntax is all that is needed:'], ['By explicitly using the "constraint" keyword, you can give the primary key constraint a particular name rather than depending on SQL Server to auto-assign a name:']], [['  create table ImagenesUsuario (\n   idImagen int not null identity(1,1) primary key\n )\n']], ['Create SQL identity as primary key?'], 2], [(1355349, 1), [['By explicitly using the "constraint" keyword, you can give the primary key constraint a particular name rather than depending on SQL Server to auto-assign a name:'], ['Add the "CLUSTERED" keyword if that makes the most sense based on your use of the table (i.e., the balance of searches for a particular idImagen and amount of writing outweighs the benefits of clustering the table by some other index).']], [['  create table ImagenesUsuario (\n   idImagen int not null identity(1,1) constraint pk_ImagenesUsario primary key\n )\n']], ['Create SQL identity as primary key?'], 2], [(1356951, 0), [["Since you're using SQL Server, you can do this:"], ['In MySQL, you can uses  group_concat :']], [[" declare @list nvarchar(max)\nselect @list = ''\n\nselect\n    @list = @list + \n        case when @list = '' then userid\n            else ',' + userid end\nfrom\n    UsersInAuthentication  \n\nset @list = '(' + substring(@list, 1, 999) + ')'\nprint @list\n"]], ['Columns into row in custom format'], 3], [(1356951, 1), [['In MySQL, you can uses  group_concat :'], ['In Oracle, you can use a cursor:']], [[" select \n    concat('(' + group_concat(userid order by userid separator ',') + ')') \nfrom \n    UserInAuthentication\n"]], ['Columns into row in custom format'], 3], [(1356951, 2), [['In Oracle, you can use a cursor:'], ['-10000']], [[" cursor c_users is\n   select userid from usersinauthentication;\n    out_users varchar2(4000);\nbegin\n    for r_user in c_users loop\n        if out_users is null then\n            out_users:= r_user.first_Name;\n        else\n            out_users:= out_users ||', '|| r_user.first_Name;\n        end if;\n    end loop;\nreturn out_users;\n"]], ['Columns into row in custom format'], 3], [(1357613, 0), [['The'], ['should be']], [[' uf.FileData = encoding.GetBytes(reader["filedata"].ToString());\n']], ['Read file from database'], 2], [(1357613, 1), [['should be'], ['The data returned is a byte array, and you call ToString() on the byte array, which just defaults to returning the class name (system.byte[]) - which you then convert to a byte array. It should just be cast right away']], [[' uf.FileData = (byte[])reader["filedata"];\n']], ['Read file from database'], 2], [(1358028, 0), [['2. Another method is the "correlated subquery" which is a slight variation of what you have...'], ['3. Another method I use sometimes is left outer join...']], [[' SELECT *\nFROM Orders o\nWHERE Orders.Order_ID not in (Select Order_ID \n                              FROM HeldOrders h \n                              where h.order_id = o.order_id)\n']], ['What is the most efficient way to write a select statement with a "not in" subquery?'], 2], [(1358028, 1), [['3. Another method I use sometimes is left outer join...'], ["When using the left outer join, h.order_id will have a value in it matching o.order_id when there is a matching row.  If there isn't a matching row, h.order_id will be NULL.  By checking for the NULL values in the where clause you can filter on everything that doesn't have a match."]], [[' SELECT *\nFROM Orders o\nleft outer join HeldOrders h on h.order_id = o.order_id\nwhere h.order_id is null\n']], ['What is the most efficient way to write a select statement with a "not in" subquery?'], 2], [(1358082, 0), [['-10000'], ['Or the other way:']], [[' var query = answers\n   .GroupBy(a => a.answernumber, a => a, (k, g) => new {answernumber = k, Count = g.Count()})\n   .OrderyBy(i => i.answernumber);\n']], ['Linq to Entities simple group query'], 2], [(1358082, 1), [['Or the other way:'], ['-10000']], [[' var query2 = from a in answers\n         group a by a. answernumber into g\n         orderby g.Key\n         select new { answernumber = g.Key, Count = g.Count() };\n']], ['Linq to Entities simple group query'], 2], [(1358958, 0), [['I just tried a query very similar to the one  given  by @Charles Bretana and it does work.  I used a VIEW to help clarify things.'], ['Create a view for all counts per month and IP address:']], [[' CREATE TABLE my_data (\n my_date DATE,\n ip_address CHAR(15)\n);\n']], ['Grouping by a Top N in MySQL'], 3], [(1358958, 1), [['Create a view for all counts per month and IP address:'], ['Now show the top three IP addresses per month:']], [[' CREATE VIEW my_data_per_month as\n SELECT EXTRACT(YEAR_MONTH FROM my_date) AS month,\n   ip_address, COUNT(*) AS hits\n FROM my_data\n GROUP BY month, ip_address;\n\nSELECT * FROM my_data_per_month\nORDER BY month ASC, hits DESC;\n\n+--------+-----------------+------+\n| month  | ip_address      | hits |\n+--------+-----------------+------+\n| 200901 | 999.999.999.999 |    8 | \n| 200901 | 999.999.999.998 |    6 | \n| 200901 | 999.999.999.997 |    5 | \n| 200901 | 999.999.999.996 |    4 | \n| 200901 | 999.999.999.995 |    3 | \n| 200901 | 999.999.999.994 |    2 | \n| 200902 | 999.999.999.998 |    8 | \n| 200902 | 999.999.999.997 |    6 | \n| 200902 | 999.999.999.996 |    5 | \n| 200902 | 999.999.999.995 |    4 | \n| 200902 | 999.999.999.994 |    3 | \n| 200902 | 999.999.999.993 |    2 | \n| 200903 | 999.999.999.997 |    8 | \n| 200903 | 999.999.999.996 |    6 | \n| 200903 | 999.999.999.995 |    5 | \n| 200903 | 999.999.999.994 |    4 | \n| 200903 | 999.999.999.993 |    3 | \n| 200903 | 999.999.999.992 |    2 | \n+--------+-----------------+------+\n']], ['Grouping by a Top N in MySQL'], 3], [(1358958, 2), [['Now show the top three IP addresses per month:'], ['-10000']], [[' SELECT m1.month, m1.ip_address, m1.hits\nFROM my_data_per_month m1\nLEFT OUTER JOIN my_data_per_month m2\n  ON (m1.month = m2.month AND m1.hits < m2.hits)\nGROUP BY m1.month, m1.ip_address\nHAVING COUNT(*) < 3\nORDER BY m1.month ASC, m1.hits DESC;\n\n+--------+-----------------+------+\n| month  | ip_address      | hits |\n+--------+-----------------+------+\n| 200901 | 999.999.999.999 |    8 | \n| 200901 | 999.999.999.998 |    6 | \n| 200901 | 999.999.999.997 |    5 | \n| 200902 | 999.999.999.998 |    8 | \n| 200902 | 999.999.999.997 |    6 | \n| 200902 | 999.999.999.996 |    5 | \n| 200903 | 999.999.999.997 |    8 | \n| 200903 | 999.999.999.996 |    6 | \n| 200903 | 999.999.999.995 |    5 | \n+--------+-----------------+------+\n']], ['Grouping by a Top N in MySQL'], 3], [(1360453, 0), [['-10000'], ['get the new PK with scope_identity()']], [[' insert into YourTable values (...)\n']], ['How do I insert into a table and get back the primary key value?'], 2], [(1360453, 1), [['get the new PK with scope_identity()'], ['-10000']], [[' select scope_identity()\n']], ['How do I insert into a table and get back the primary key value?'], 2], [(1362148, 0), [['-10000'], ['Using ADO.NET also works like a charm:']], [['  INSERT INTO dbo.TableWithOnlyIdentity DEFAULT VALUES\n']], ['How to insert into a table with just one IDENTITY column (SQL Express)'], 2], [(1362148, 1), [['Using ADO.NET also works like a charm:'], ["Seems to be a limitation of VS - don't use VS for serious DB work :-)\nMarc"]], [[' using(SqlConnection _con = new SqlConnection("server=(local);\n                             database=test;integrated security=SSPI;"))\n{\n    using(SqlCommand _cmd = new SqlCommand\n            ("INSERT INTO dbo.TableWithOnlyIdentity DEFAULT VALUES", _con))\n    {\n        _con.Open();\n        _cmd.ExecuteNonQuery();\n        _con.Close();\n    }\n}   \n']], ['How to insert into a table with just one IDENTITY column (SQL Express)'], 2], [(1363555, 0), [['Use:'], ['Alternate using Subquery Factoring:']], [[" SELECT item_name,\n       MAX(red) 'red',\n       MAX(blue) 'blue',\n       MAX(green) 'green'\n  FROM (SELECT t.item_name,\n         CASE\n           WHEN c.color_name = 'red' THEN\n             1\n           ELSE\n             NULL\n         END 'red',\n         CASE\n           WHEN c.color_name = 'blue' THEN\n             1\n           ELSE\n             NULL\n         END 'blue',\n         CASE\n           WHEN c.color_name = 'green' THEN\n             1\n           ELSE\n             NULL\n         END 'green'       \n    FROM ITEMS t\n    JOIN ITEM_COLOR ic ON ic.item_id = t.item_id\n    JOIN COLORS c ON c.id = ic.color_id)\nGROUP BY item_name \n"]], ['Help building a SQL query from multiple tables'], 2], [(1363555, 1), [['Alternate using Subquery Factoring:'], ['-10000']], [[" WITH icolors AS (\n   SELECT t.item_name,\n          CASE\n           WHEN c.color_name = 'red' THEN\n             1\n           ELSE\n             NULL\n         END 'red',\n     CASE\n       WHEN c.color_name = 'blue' THEN\n         1\n       ELSE\n         NULL\n     END 'blue',\n     CASE\n       WHEN c.color_name = 'green' THEN\n         1\n       ELSE\n             NULL\n     END 'green'       \n    FROM ITEMS t\n    JOIN ITEM_COLOR ic ON ic.item_id = t.item_id\n    JOIN COLORS c ON c.id = ic.color_id)\n  SELECT t.item_name,\n         MAX(t.red) 'red',\n         MAX(t.blue) 'blue',\n         MAX(t.green) 'green'\n    FROM icolors t\nGROUP BY t.item_name\n"]], ['Help building a SQL query from multiple tables'], 2], [(1366260, 0), [['It looks like the query you are looking for is:'], ['The DISTINCT keyword is not required. If order is required, you can use:']], [[' SELECT MemberID, COUNT(*)\nFROM Table\nGROUP BY MemberID\n']], ['Select Count Distinct'], 2], [(1366260, 1), [['The DISTINCT keyword is not required. If order is required, you can use:'], ['-10000']], [[' SELECT MemberID, COUNT(*)\nFROM Table\nGROUP BY MemberID\nORDER BY MemberID ASC\n']], ['Select Count Distinct'], 2], [(1367018, 0), [['Depending on what you are doing, you may need to use the table syntax of  OUTPUT . A possibility is to specify a temporary table / table variable.'], ['gbn got an edit in ahead of me that essentially says the same thing as above.  I would like to add that another way to do this is to grab the ID first and then update by ID. Also, TOP 1 should almost always be used with an  ORDER BY .']], [[' DECLARE @T TABLE\n(\n    MyID INT NOT NULL\n)\n\nUPDATE Task\nSET MyTime = GetDate(), MyUserId = @userid\nOUTPUT INSERTED.MyID INTO @T\nFROM (/* your FROM clause here */) Task\n']], ['Get Updated Row'], 2], [(1367018, 1), [['gbn got an edit in ahead of me that essentially says the same thing as above.  I would like to add that another way to do this is to grab the ID first and then update by ID. Also, TOP 1 should almost always be used with an  ORDER BY .'], ['-10000']], [[' -- You may need to clean up the error handling. I just wanted\n-- to put something simple in to remind that it is necessary.\nDECLARE @userid INT; SET @userid = /* e.g., */ 1234\nBEGIN TRANSACTION\nIF @@ERROR <> 0 RETURN\nDECLARE @TaskID INT\nSET @TaskID = (SELECT TOP 1 TaskID FROM Task WITH (UPDLOCK) ORDER BY /* e.g., */ TaskID) -- TaskID should be the PK of MyTable. Must be unique.\nIF @@ERROR <> 0 BEGIN ROLLBACK TRANSACTION RETURN END\nUPDATE Task\nSET MyTime = GETDATE(), MyUserId = @userid\nWHERE TaskID = @TaskID\nCOMMIT TRANSACTION\n']], ['Get Updated Row'], 2], [(1367406, 0), [['The SQL*Plus synthax works (with  run script ):'], ['or ']], [[' @script arg1 arg2 ... argn\n']], ['Script to run other scripts in sqldeveloper'], 2], [(1367406, 1), [['or '], ['-10000']], [[' @"/path/to/directory/script" arg1 arg2 ... argn\n']], ['Script to run other scripts in sqldeveloper'], 2], [(1368302, 0), [['I just ran this query on my test database:'], ['and it gave me the following  description :']], [[' EXPLAIN EXTENDED\nSELECT  *\nFROM    t_source\nWHERE   1 AND id < 100\n']], ['How bad is my query?'], 4], [(1368302, 1), [['and it gave me the following  description :'], ['Constant folding:']], [[' select `test`.`t_source`.`id` AS `id`,`test`.`t_source`.`value` AS `value`,`test`.`t_source`.`val` AS `val`,`test`.`t_source`.`nid` AS `nid` from `test`.`t_source` where (`test`.`t_source`.`id` < 100)\n']], ['How bad is my query?'], 4], [(1368302, 2), [['Constant folding:'], ['Constant condition removal (needed because of constant folding):']], [[' (a<b AND b=c) AND a=5\n-> b>5 AND b=c AND a=5\n']], ['How bad is my query?'], 4], [(1368302, 3), [['Constant condition removal (needed because of constant folding):'], ['Note  5 = 5  and  5 = 6  parts in the example above.']], [[' (B>=5 AND B=5) OR (B=6 AND 5=5) OR (B=7 AND 5=6)\n-> B=5 OR B=6\n']], ['How bad is my query?'], 4], [(1369594, 0), [['I have a query named  qryListTables  which looks like this:'], ['I can use the following function to spit out a string containing the quoted names of regular tables in my database, separated by semicolons, by calling it like this:']], [[' SELECT m.Name AS tbl_name\nFROM MSysObjects AS m\nWHERE\n        (((m.Name) Not Like "msys%"\n    And (m.Name) Not Like "~%")\n    AND ((m.Type)=1))\nORDER BY m.Name;\n']], ['ms-access save query result in a string'], 2], [(1369594, 1), [['I can use the following function to spit out a string containing the quoted names of regular tables in my database, separated by semicolons, by calling it like this:'], ['-10000']], [[' ? DemoGetString("qryListTables", True)\n\nPublic Function DemoGetString(ByVal pQueryName As String, _\n    Optional ByVal AddQuotes As Boolean = False) As Variant\n    \'* early binding requires a reference to Microsoft ActiveX\n    \'* Data Objects Library\n    \'Dim rs As ADODB.Recordset\n    \'Set rs = New ADODB.Recordset\n\n    \'* use late binding; no referenced needed\n    Dim rs As Object\n    Set rs = CreateObject("ADODB.Recordset")\n\n    Dim varOut As Variant\n    rs.Open pQueryName, CurrentProject.Connection\n    If AddQuotes Then\n        varOut = """" & rs.GetString(2, , , """;""") \'2 = adClipString\n        \' strip off last quote\n        If Len(varOut & vbNullString) > 0 Then\n            varOut = Left(varOut, Len(varOut) - 1)\n        End If\n    Else\n        varOut = rs.GetString(2, , , ";") \'2 = adClipString\n    End If\n    rs.Close\n    Set rs = Nothing\n    DemoGetString = varOut\nEnd Function\n']], ['ms-access save query result in a string'], 2], [(1372314, 0), [["I'm no SQL pro, but if I understand your intentions right, you should be able to use the sproc with no/either/both parameters and get expected results if you default  @filterText  to  ''  instead of  NULL ."], ['As David M clarified, this is probably because SQL Server 2005 and 2008 handles string concatenation with  NULL  values differently. It seems that in SQL Server 2005']], [[" ALTER PROCEDURE dbo.uspSel_ComponentByType(\n    @filterText           VARCHAR(50)     = ''      ,\n    @componentType        CHAR(2)         = NULL\n) \nAS \n    SELECT  ... --the rest of the sproc is unchanged\n"]], ["Why doesn't SQL2008 interpret the conditional WHERE clause in my stored procedure the way 2005 did?"], 3], [(1372314, 1), [['As David M clarified, this is probably because SQL Server 2005 and 2008 handles string concatenation with  NULL  values differently. It seems that in SQL Server 2005'], ['while in SQL Server 2008']], [[" 'A string' + NULL = 'A string';\n"]], ["Why doesn't SQL2008 interpret the conditional WHERE clause in my stored procedure the way 2005 did?"], 3], [(1372314, 2), [['while in SQL Server 2008'], ["By changing the default to  '' , we made the default comparison  '' + '%' , which will always be treated as  %  and match everything, instead of  NULL + '%' , which will end upp  NULL  and match nothing."]], [[" 'A string' + NULL = NULL;\n"]], ["Why doesn't SQL2008 interpret the conditional WHERE clause in my stored procedure the way 2005 did?"], 3], [(1372690, 0), [['Either just use the CAST function:'], ['or assign your "datetime2" variable to another variable of type "TIME":']], [[' SELECT CAST(@datetime2var AS TIME)\n']], ['SQL Function to extract time from Datetime2'], 2], [(1372690, 1), [['or assign your "datetime2" variable to another variable of type "TIME":'], ['Marc']], [[' DECLARE @timeVal TIME \n\nSET @timeVal = @datetime2var\n\nSELECT @timeVal\n']], ['SQL Function to extract time from Datetime2'], 2], [(1372860, 0), [['You have to use a Prepared Statement, because what you want to do can only be done with dynamic SQL:'], ['The second SET statement concatenates the contents of the query to get the list of columns based on the table name onto the end of the string in the first SET statement.  The idea is that this:']], [[" SET @stmt = 'SELECT * FROM YOUR_TABLE WHERE 1 = 1 '\nSET @stmt = CONCAT(@stmt, (SELECT CONCAT_WS(' AND ', CONCAT(column_name, ' = 1 '))\n                            FROM INFORMATION_SCHEMA.COLUMNS\n                           WHERE table_name = 'YOUR_TABLE'\n                             AND table_schema = 'db_name'\n                             AND column_name NOT IN ('id'))); \n\nPREPARE stmt FROM @stmt;\nEXECUTE stmt;\nDEALLOCATE PREPARE stmt;\n"]], ['Matching a value to multiple columns (in one statement) from a table using MySQL'], 2], [(1372860, 1), [['The second SET statement concatenates the contents of the query to get the list of columns based on the table name onto the end of the string in the first SET statement.  The idea is that this:'], ['... will return a row that resembles " AND january = 1 AND february = 1 ... ".  You\'d have to update the NOT IN clause if there are other columns you don\'t want in the WHERE clause.']], [[" SELECT CONCAT_WS(' AND ', CONCAT(column_name, ' = 1 '))\n  FROM INFORMATION_SCHEMA.COLUMNS\n WHERE table_name = 'YOUR_TABLE'\n   AND table_schema = 'db_name'\n   AND column_name NOT IN ('id')\n"]], ['Matching a value to multiple columns (in one statement) from a table using MySQL'], 2], [(1373582, 0), [['You could use the  Equivalence Class   [[=i=]] :'], ['One possible workaround is to use the  NLS_UPPER  or  NLS_LOWER  functions that work reliably with the correct  NLS_SORT  setting:']], [[" SQL> select regexp_replace('İF', '[[=i=]]f', 'DONE', 1, 0, 'i') from dual;\n\nREGEXP_REPLACE('İF','[[=I=]]F'\n------------------------------\nDONE\n\nSQL> select regexp_replace('if', '[[=i=]]f', 'DONE', 1, 0, 'i') from dual;\n\nREGEXP_REPLACE('IF','[[=I=]]F'\n------------------------------\nDONE\n"]], ['Oracle regex - encoding issue'], 2], [(1373582, 1), [['One possible workaround is to use the  NLS_UPPER  or  NLS_LOWER  functions that work reliably with the correct  NLS_SORT  setting:'], ['-10000']], [[" SQL> alter session set nls_sort=XTURKISH;\n\nSession altered\n\nSQL> select regexp_replace(NLS_UPPER('İF'), 'İF', 'DONE', 1, 0) from dual;\n\nREGEXP_REPLACE(NLS_UPPER('İF'\n------------------------------\nDONE\n\nSQL> select regexp_replace(NLS_UPPER('if'), 'İF', 'DONE', 1, 0) from dual;\n\nREGEXP_REPLACE(NLS_UPPER('IF')\n------------------------------\nDONE\n"]], ['Oracle regex - encoding issue'], 2], [(1374737, 0), [['We can do this with a function-based index.  The following makes use of  NVL2()  which, as you know, returns one value if the expression is not null and a different value if it is null.  You could use  CASE()  instead. '], ['Because in your scenario name will always be populated you will only need an index like this:']], [[" SQL> create table blah (name varchar2(10), email varchar2(20))\n  2  /\n\nTable created.\n\nSQL> create unique index blah_uidx on blah\n  2      (nvl2(email, name, null), nvl2(name, email, null))\n  3  /\n\nIndex created.\n\nSQL> insert into blah values ('APC', null)\n  2  /\n\n1 row created.\n\nSQL> insert into blah values ('APC', null)\n  2  /\n\n1 row created.\n\nSQL> insert into blah values (null, 'apc@example.com')\n  2  /\n\n1 row created.\n\nSQL> insert into blah values (null, 'apc@example.com')\n  2  /\n\n1 row created.\n\nSQL> insert into blah values ('APC', 'apc@example.com')\n  2  /\n\n1 row created.\n\nSQL> insert into blah values ('APC', 'apc@example.com')\n  2  /\ninsert into blah values ('APC', 'apc@example.com')\n*\nERROR at line 1:\nORA-00001: unique constraint (APC.BLAH_UIDX) violated\n\n\nSQL>\n"]], ['How can I create a unique index in Oracle but ignore nulls?'], 2], [(1374737, 1), [['Because in your scenario name will always be populated you will only need an index like this:'], ['-10000']], [[' SQL> create unique index blah_uidx on blah\n  2      (nvl2(email, name, null), email)\n  3  /\n\nIndex created.\n\nSQL> \n']], ['How can I create a unique index in Oracle but ignore nulls?'], 2], [(1375957, 0), [['In SQL Server 2005 and later, you can use the OUTPUT clause to pass the new key values into a second table:'], ['Added in response to comment:']], [[' INSERT INTO T ...\nOUTPUT PrimaryKeycol, otherValues INTO ChildTable;\n']], ['How can I do multiple inserts without a cursor'], 2], [(1375957, 1), [['Added in response to comment:'], ['-10000']], [[' create table T(i int identity(1,1), j int, k int default -1);\ngo\n\nmerge into T using (values (1), (2)) as U(j)\non U.j = T.j\nwhen not matched then insert (j) values (j)\noutput inserted.i, inserted.k;\ngo\n\ndrop table T;\n']], ['How can I do multiple inserts without a cursor'], 2], [(1378026, 0), [['You can use the Postgres function  generate_series . In 8.3 and earlier, do things like'], ['In 8.4, you can also do']], [[' select current_date + s.a as dates from generate_series(0,14,7) as s(a);\n']], ['Splitting up an interval in weeks in Postgres'], 2], [(1378026, 1), [['In 8.4, you can also do'], ['-10000']], [[" SELECT * FROM generate_series('2008-03-01 00:00'::timestamp,\n                              '2008-03-04 12:00', '10 hours');\n"]], ['Splitting up an interval in weeks in Postgres'], 2], [(1378053, 0), [['You are not going to be able to do this without joins, as far as I can tell.  This should do what you need'], ["If the id field may have gaps, you'll need to introduce a row number field to do this.  Probably more efficient to add an autonumber field to your table if you'll be running this regularly."]], [[' select t1.id\nfrom mytable as t1\n    left join mytable as t2 on t1.id = (t2.id + 1)\nwhere t2.id is null or (t1.timestamp - 180) > t2.timestamp\n']], ['Slightly complex mySQL Query'], 2], [(1378053, 1), [["If the id field may have gaps, you'll need to introduce a row number field to do this.  Probably more efficient to add an autonumber field to your table if you'll be running this regularly."], ['-10000']], [[' select t1.id\nfrom \n    (select mytable.*, @rownum:=@rownum+1 as rownum from mytable, (select @rownum:=0) r order by id) as t1\n    left join \n    (select mytable.*, @rownum2:=@rownum2+1 as rownum from mytable, (select @rownum2:=0) r order by id) as t2 on t1.rownum = (t2.rownum + 1)\nwhere t2.id is null or (t1.timestamp - 180) > t2.timestamp\n']], ['Slightly complex mySQL Query'], 2], [(1378179, 0), [['1) Put a unique index on "IntRef" in your "ClientJob" table:'], ['2) Put a foreign key relationship from Comments to ClientJob:']], [[' CREATE UNIQUE INDEX UIX_IntRef \n   ON dbo.ClientJob(IntRef)\n']], ['SQL Server - Noob Relationships Question'], 2], [(1378179, 1), [['2) Put a foreign key relationship from Comments to ClientJob:'], ['That should do it!']], [[' ALTER TABLE dbo.Comments\n  ADD CONSTRAINT FK_Comment_ClientJob\n  FOREIGN KEY (IntRef)  REFERENCES dbo.ClientJob(IntRef)\n']], ['SQL Server - Noob Relationships Question'], 2], [(1378721, 0), [['Does it work if you do...'], ['instead of just ']], [[' SYS.DBMS_AQ \n']], ['PL/SQL function in Oracle cannot see DBMS_AQ'], 3], [(1378721, 1), [['instead of just '], ['If you\'re now getting "PLS-00201: identifier \'SYS.DBMS_AQ" then I\'d double check your grants.']], [[' DBMS_AQ\n']], ['PL/SQL function in Oracle cannot see DBMS_AQ'], 3], [(1378721, 2), [['If you\'re now getting "PLS-00201: identifier \'SYS.DBMS_AQ" then I\'d double check your grants.'], ["Also, just to confirm, you've granted the execute privilege  directly  to the user, and not via a role?"]], [[' GRANT EXECUTE ON SYS.DBMS_AQ to <your-user>;\n']], ['PL/SQL function in Oracle cannot see DBMS_AQ'], 3], [(1378759, 0), [['-10000'], ['Consider the following example,']], [[' ss = textBox1.Text;\nSqlConnection con = new SqlConnection("data source=localhost;\n              integrated security=true;initial catalog=da");\nda = new SqlDataAdapter("select * from me", con);\nda.Fill(ds, "me");\n\nDataView dv = ds.Tables[0].DefaultView;\n\ndataGridView1.DataSource = dv;\ndv.RowFilter = "col1=\'" + ss + "\' and col2>=10";\n']], ['How to display rows based on search value which works for multiple columns'], 2], [(1378759, 1), [['Consider the following example,'], ['-10000']], [['     DataTable dt = new DataTable();\n    DataView dv;\n    private void Form1_Load(object sender, EventArgs e)\n    {\n        dt.Columns.Add("No", typeof(int));\n        dt.Columns.Add("Name");\n        dt.Rows.Add(10, "abc");\n        dt.Rows.Add(11, "pqr");\n        dt.Rows.Add(12, "efg");\n        dv = dt.DefaultView;\n        dataGridView1.DataSource = dv;\n    }\n    private void textBox1_TextChanged(object sender, EventArgs e)\n    {\n        int no;\n        int.TryParse(textBox1.Text, out no);\n        dv.RowFilter = "No=" + no + " or Name like \'%" + textBox1.Text + "%\'";\n    }\n']], ['How to display rows based on search value which works for multiple columns'], 2], [(1379350, 0), [['-10000'], ['or if you want more fields from the sales table:']], [[' SELECT users.fname, users.lname, MAX(sales.date)\nFROM users\nLEFT JOIN sales ON users.id=sales.user\nGROUP BY users.fname, users.lname\n']], ['Single result in a query using Left Joins'], 2], [(1379350, 1), [['or if you want more fields from the sales table:'], ['-10000']], [[' SELECT users.fname, users.lname, sales.date, sales.proft\nFROM users\nLEFT JOIN sales ON users.id=sales.user\nAND sales.date = (SELECT MAX(sales.date) FROM sales WHERE user = users.id)\n']], ['Single result in a query using Left Joins'], 2], [(1379723, 0), [['Subquery Factoring (9i+):'], ['Using inline views:']], [[" WITH count_cars AS (\n    SELECT t.person_id\n           COUNT(*) num_cars\n      FROM CARS c\n  GROUP BY t.person_id),\n     count_children AS (\n    SELECT t.person_id\n           COUNT(*) num_children\n      FROM CHILDREN c\n  GROUP BY t.person_id),\n     count_pets AS (\n    SELECT p.person_id\n           COUNT(*) num_pets\n      FROM PETS p\n  GROUP BY p.person_id)\n   SELECT t.name,\n          NVL(cars.num_cars, 0) 'Count(cars)',\n          NVL(children.num_children, 0) 'Count(children)',\n          NVL(pets.num_pets, 0) 'Count(pets)'\n     FROM PERSONS t\nLEFT JOIN count_cars cars ON cars.person_id = t.person_id\nLEFT JOIN count_children children ON children.person_id = t.person_id\nLEFT JOIN count_pets pets ON pets.person_id = t.person_id\n"]], ['SQL Query to Count() multiple tables'], 2], [(1379723, 1), [['Using inline views:'], ['-10000']], [["    SELECT t.name,\n          NVL(cars.num_cars, 0) 'Count(cars)',\n          NVL(children.num_children, 0) 'Count(children)',\n          NVL(pets.num_pets, 0) 'Count(pets)'\n     FROM PERSONS t\nLEFT JOIN (SELECT t.person_id\n                  COUNT(*) num_cars\n             FROM CARS c\n         GROUP BY t.person_id) cars ON cars.person_id = t.person_id\nLEFT JOIN (SELECT t.person_id\n                  COUNT(*) num_children\n             FROM CHILDREN c\n         GROUP BY t.person_id) children ON children.person_id = t.person_id\nLEFT JOIN (SELECT p.person_id\n                  COUNT(*) num_pets\n             FROM PETS p\n         GROUP BY p.person_id) pets ON pets.person_id = t.person_id\n"]], ['SQL Query to Count() multiple tables'], 2], [(1380139, 0), [['For example, suppose your table has a non-nullable column named  id :'], ['When a record is inserted into this table,  OLD.id  will be  NULL . However, when a record is updated in this table,  OLD.id  will not be  NULL . Because you only want to change  :NEW.foo  if a record is being updated, you just have to check to see if  OLD.id  has a non-null value.']], [[' CREATE TABLE some_table (\n    id NUMBER NOT NULL,\n    foo VARCHAR2(100)\n)\n']], ['What do references to OLD evaluate to in the WHEN cause of an Oracle insert trigger?'], 2], [(1380139, 1), [['When a record is inserted into this table,  OLD.id  will be  NULL . However, when a record is updated in this table,  OLD.id  will not be  NULL . Because you only want to change  :NEW.foo  if a record is being updated, you just have to check to see if  OLD.id  has a non-null value.'], ['-10000']], [[" CREATE OR REPLACE TRIGGER mung_row\nBEFORE INSERT OR UPDATE ON some_table\nFOR EACH ROW\nWHEN (OLD.id IS NOT NULL AND OLD.foo IS NULL)\nBEGIN\n    :NEW.foo = 'some val';\nEND;\n"]], ['What do references to OLD evaluate to in the WHEN cause of an Oracle insert trigger?'], 2], [(1380735, 0), [["Answers given so far assume that the Member field is unique for any given GroupID.  In work I have done this isn't the case.  And also if the group has what you're looking for, plus some extra, you need to exlucde that group."], ['You can also replace the IN clause with a join on to a table holding the members you are searching for...']], [[" SELECT\n   [Alpha].GroupID\nFROM\n   [Alpha]\nGROUP BY\n   [Alpha].GroupID\nHAVING\n       SUM(CASE WHEN [alpha].Member IN ('A','B','C') THEN 1 ELSE 0 END) = 3\n   AND MIN(CASE WHEN [alpha].Member IN ('A','B','C') THEN 1 ELSE 0 END) = 1\n"]], ['For this scenario,does a single self-join exist?'], 2], [(1380735, 1), [['You can also replace the IN clause with a join on to a table holding the members you are searching for...'], ['-10000']], [[' SELECT\n   [Alpha].GroupID\nFROM\n   [Alpha]\nLEFT JOIN\n   [Search]\n       ON [Search].Member\nGROUP BY\n   [Alpha].GroupID\nHAVING\n       SUM(CASE WHEN [alpha].Member = [search].Member THEN 1 ELSE 0 END) = (SELECT COUNT(*) FROM [search])\n   AND MIN(CASE WHEN [alpha].Member = [search].Member THEN 1 ELSE 0 END) = 1\n']], ['For this scenario,does a single self-join exist?'], 2], [(1380858, 0), [['-10000'], ['This produces:']], [[' declare @x xml;\nselect @x=\'<game xmlns="http://my.name.space" ></game>\';\nset @x.modify(\'declare default element namespace "http://my.name.space"; \n    insert <move><player>black</player><piece>pawn</piece>\n     <start>E7</start><end>E6</end></move> as last into (/game)[1]\');\nselect @x;\n']], ['XQuery Insert without namespace SQL2008'], 3], [(1380858, 1), [['This produces:'], ['Also this table update works fine:']], [[' <game xmlns="http://my.name.space">\n  <move>\n    <player>black</player>\n    <piece>pawn</piece>\n    <start>E7</start>\n    <end>E6</end>\n  </move>\n</game>\n']], ['XQuery Insert without namespace SQL2008'], 3], [(1380858, 2), [['Also this table update works fine:'], ['-10000']], [[' declare @t table (x xml);\ninsert into @t (x) values (\'<game xmlns="http://my.name.space" ></game>\');\nupdate @t\nset x.modify(\'declare default element namespace "http://my.name.space"; \n    insert <move><player>black</player><piece>pawn</piece>\n       <start>E7</start><end>E6</end></move> as last into (/game)[1]\');\nselect * from @t;\n']], ['XQuery Insert without namespace SQL2008'], 3], [(1381256, 0), [['This will decompose the path in subpath:'], ['We then recompose the reversed path with the  sys_connect_by_path :']], [[" SQL> variable path varchar2(4000);\nSQL> exec :path := 'a/b/c/def';\n\nPL/SQL procedure successfully completed\nSQL> SELECT regexp_substr(:path, '[^/]+', 1, ROWNUM) sub_path, ROWNUM rk\n  2    FROM dual\n  3  CONNECT BY LEVEL <= length(regexp_replace(:path, '[^/]', '')) + 1;\n\nSUB_P RK\n----- --\na      1\nb      2\nc      3\ndef    4\n"]], ['Reverse in Oracle this path z/y/x to x/y/z'], 2], [(1381256, 1), [['We then recompose the reversed path with the  sys_connect_by_path :'], ['-10000']], [[" SQL> SELECT MAX(sys_connect_by_path(sub_path, '/')) reversed_path\n  2    FROM (SELECT regexp_substr(:path, '[^/]+', 1, ROWNUM) sub_path,\n  3                 ROWNUM rk\n  4             FROM dual\n  5           CONNECT BY LEVEL <= length(regexp_replace(:path, '[^/]', '')) + 1)\n  6  CONNECT BY PRIOR rk = rk + 1\n  7   START WITH rk = length(regexp_replace(:path, '[^/]', '')) + 1;\n\nREVERSED_PATH\n-------------\n/def/c/b/a\n"]], ['Reverse in Oracle this path z/y/x to x/y/z'], 2], [(1381630, 0), [['You can use the  ASCII  functions to check that both encodings are the same:'], ["Then you can check the encoding in the environment you're running the query from:"]], [[' SELECT ASCII(SUBSTR(unit, 1, 1)) FROM units;\n']], ["How can I retrieve an Oracle record when my key field contains a mu ('μ') character?"], 2], [(1381630, 1), [["Then you can check the encoding in the environment you're running the query from:"], ["If they're not the same, there's your problem."]], [[" SELECT ASCII('µ') FROM dual;\n"]], ["How can I retrieve an Oracle record when my key field contains a mu ('μ') character?"], 2], [(1381831, 0), [['This query:'], ['should return the same number of rows as this number tells you:']], [[' select * from $table\n']], ['Simple SQL - count function'], 2], [(1381831, 1), [['should return the same number of rows as this number tells you:'], ["If it doesn't, your table has probably been updated in the meanwhile. "]], [[' select count(*) from $table`\n']], ['Simple SQL - count function'], 2], [(1382573, 0), [["As mentioned, you provided a poor example - there's no need to perform a subselect if you aren't altering the output of the columns in any way:"], ["Here's a better example:"]], [['   SELECT * \n    FROM ARTICLE t\n    JOIN USERINFO ui ON ui.user_userid = t.article_ownerid\n    JOIN CATEGORY c ON c.catid =  t.article_categoryid\n   WHERE t.published_ind = 0\nORDER BY t.article_date DESC \n   LIMIT 1, 3\n']], ['How do you use the "WITH" clause in MySQL?'], 2], [(1382573, 1), [["Here's a better example:"], ['-10000']], [[" SELECT t.name,\n       t.num\n  FROM TABLE t\n  JOIN (SELECT c.id\n               COUNT(*) 'num'\n          FROM TABLE c\n         WHERE c.column = 'a'\n      GROUP BY c.id) ta ON ta.id = t.id\n"]], ['How do you use the "WITH" clause in MySQL?'], 2], [(1385171, 0), [["Not familiar with MySQL's brand of SQL, but either of the following should work:"], ['or...']], [[' SELECT *\nFROM userAccess u\nINNER JOIN project p on p.projectId = u.projectId\nWHERE u.userId = USER_ID\n']], ['SQL query to extract projects that user has access to'], 2], [(1385171, 1), [['or...'], ['-10000']], [[' SELECT *\nFROM userAccess u, project p\nWHERE p.projectId = u.projectId \nAND u.userId = USER_ID\n']], ['SQL query to extract projects that user has access to'], 2], [(1385552, 0), [["Here's how to convert the textual display form to binary:"], ["And here's how to convert the binary back to the textual display form:"]], [[' CREATE FUNCTION dbo.fnBinaryIPv4(@ip AS VARCHAR(15)) RETURNS BINARY(4)\nAS\nBEGIN\n    DECLARE @bin AS BINARY(4)\n\n    SELECT @bin = CAST( CAST( PARSENAME( @ip, 4 ) AS INTEGER) AS BINARY(1))\n                + CAST( CAST( PARSENAME( @ip, 3 ) AS INTEGER) AS BINARY(1))\n                + CAST( CAST( PARSENAME( @ip, 2 ) AS INTEGER) AS BINARY(1))\n                + CAST( CAST( PARSENAME( @ip, 1 ) AS INTEGER) AS BINARY(1))\n\n    RETURN @bin\nEND\ngo\n']], ['Datatype for storing ip address in SQL Server'], 6], [(1385552, 1), [["And here's how to convert the binary back to the textual display form:"], ["Here's a demo of how to use them:"]], [[" CREATE FUNCTION dbo.fnDisplayIPv4(@ip AS BINARY(4)) RETURNS VARCHAR(15)\nAS\nBEGIN\n    DECLARE @str AS VARCHAR(15) \n\n    SELECT @str = CAST( CAST( SUBSTRING( @ip, 1, 1) AS INTEGER) AS VARCHAR(3) ) + '.'\n                + CAST( CAST( SUBSTRING( @ip, 2, 1) AS INTEGER) AS VARCHAR(3) ) + '.'\n                + CAST( CAST( SUBSTRING( @ip, 3, 1) AS INTEGER) AS VARCHAR(3) ) + '.'\n                + CAST( CAST( SUBSTRING( @ip, 4, 1) AS INTEGER) AS VARCHAR(3) );\n\n    RETURN @str\nEND;\ngo\n"]], ['Datatype for storing ip address in SQL Server'], 6], [(1385552, 2), [["Here's a demo of how to use them:"], ["I wanted to add that one way to address the inherent performance problems of scalar UDF's in SQL Server, but still retain the code-reuse of a function is to use an iTVF (inline table-valued function) instead.  Here's how the first function above (string to binary) can be re-written as an iTVF:"]], [[" SELECT dbo.fnBinaryIPv4('192.65.68.201')\n--should return 0xC04144C9\ngo\n\nSELECT dbo.fnDisplayIPv4( 0xC04144C9 )\n-- should return '192.65.68.201'\ngo\n"]], ['Datatype for storing ip address in SQL Server'], 6], [(1385552, 3), [["I wanted to add that one way to address the inherent performance problems of scalar UDF's in SQL Server, but still retain the code-reuse of a function is to use an iTVF (inline table-valued function) instead.  Here's how the first function above (string to binary) can be re-written as an iTVF:"], ["Here's it in the example:"]], [[' CREATE FUNCTION dbo.itvfBinaryIPv4(@ip AS VARCHAR(15)) RETURNS TABLE\nAS RETURN (\n    SELECT CAST(\n               CAST( CAST( PARSENAME( @ip, 4 ) AS INTEGER) AS BINARY(1))\n            +  CAST( CAST( PARSENAME( @ip, 3 ) AS INTEGER) AS BINARY(1))\n            +  CAST( CAST( PARSENAME( @ip, 2 ) AS INTEGER) AS BINARY(1))\n            +  CAST( CAST( PARSENAME( @ip, 1 ) AS INTEGER) AS BINARY(1))\n                AS BINARY(4)) As bin\n        )\ngo\n']], ['Datatype for storing ip address in SQL Server'], 6], [(1385552, 4), [["Here's it in the example:"], ["And here's how you would use it in an INSERT"]], [[" SELECT bin FROM dbo.fnBinaryIPv4('192.65.68.201')\n--should return 0xC04144C9\ngo\n"]], ['Datatype for storing ip address in SQL Server'], 6], [(1385552, 5), [["And here's how you would use it in an INSERT"], ['-10000']], [[" INSERT INTo myIpTable\nSELECT {other_column_values,...},\n       (SELECT bin FROM dbo.itvfBinaryIPv4('192.65.68.201'))\n"]], ['Datatype for storing ip address in SQL Server'], 6], [(1386488, 0), [["Please note that Items table is called Snippets in my example (so we have Snippets, Tags and SnippetsTags tables). Another thing to note is that LINQ2SQL doesn't support Many-To-Many relations out of the box, so there is an entity class for intermediate table (SnippetsTag). Here are C# code:"], ['Here is a SQL which LINQ to SQL generates:']], [['             using (SnippetsDataContext context = UtilsLinq.CreateContext())\n        {\n            DataLoadOptions dl = new DataLoadOptions();\n            dl.LoadWith<Snippet>(s => s.SnippetsTags);\n            dl.LoadWith<SnippetsTag>(st => st.Tag);\n            context.LoadOptions = dl;\n            var result = (from s in context.Snippets\n                          select s).ToList();\n\n            string x = result.First().SnippetsTags.First().Tag.Title;\n        }\n']], ['In continue of questions "DB Schema for storing tagged records" -- how to select list of items with tags?'], 2], [(1386488, 1), [['Here is a SQL which LINQ to SQL generates:'], ['-10000']], [['     SELECT [t0].[Id], [t0].[Title], [t0].[Text], [t0].[Created], [t1].[Id] AS [Id2], [t1].[TagId], [t1].[SnippetId], [t2].[Id] AS [Id3], [t2].[Title] AS [Title2], (\n    SELECT COUNT(*)\n    FROM [dbo].[SnippetsTags] AS [t3]\n    INNER JOIN [dbo].[Tags] AS [t4] ON [t4].[Id] = [t3].[TagId]\n    WHERE [t3].[SnippetId] = [t0].[Id]\n    ) AS [value]\nFROM [dbo].[Snippets] AS [t0]\nLEFT OUTER JOIN ([dbo].[SnippetsTags] AS [t1]\n    INNER JOIN [dbo].[Tags] AS [t2] ON [t2].[Id] = [t1].[TagId]) ON [t1].[SnippetId] = [t0].[Id]\nORDER BY [t0].[Id], [t1].[Id], [t2].[Id]\n']], ['In continue of questions "DB Schema for storing tagged records" -- how to select list of items with tags?'], 2], [(1387110, 0), [['-10000'], ['Create a class of the type you want to return']], [[' return (from product in db.Products\n        from orderedProduct in db.OrderedProducts\n        where orderedProduct.ProductID == product.ProductID\n        group orderedProduct by product into productGroups\n        select new \n        {\n              product = productGroups.Key, \n              numberOfOrders = productGroups.Count() \n        }\n        ).OrderByDescending(x => x.numberOfOrders).Distinct().Take(10);\n']], ['Linq to SQL: Get top 10 most ordered products'], 3], [(1387110, 1), [['Create a class of the type you want to return'], ['and Use this query to return objects of that class']], [[' public class ProductOrders\n{\n    public ProductOrders() {\n    }\n\n    public Product product { get; set; }\n    public int numberOfOrders { get; set; }\n}\n']], ['Linq to SQL: Get top 10 most ordered products'], 3], [(1387110, 2), [['and Use this query to return objects of that class'], ['The return value now is of type  IEnumerable<ProductOrders> .']], [['  return (from product in db.Products\n        from orderedProduct in db.OrderedProducts\n        where orderedProduct.ProductID == product.ProductID\n        group orderedProduct by product into productGroups\n        select new ProductOrders\n        {\n              product = productGroups.Key, \n              numberOfOrders = productGroups.Count() \n        }\n        ).OrderByDescending(x => x.numberOfOrders).Distinct().Take(10);\n']], ['Linq to SQL: Get top 10 most ordered products'], 3], [(1387612, 0), [['Here is an alternative way:'], ['Here is the test code to verify:']], [[" select * from tbl where col like 'ABC%'\nunion\nselect * from tbl where col like 'XYZ%'\nunion\nselect * from tbl where col like 'PQR%';\n"]], ['How can i introduce multiple conditions in LIKE operator'], 2], [(1387612, 1), [['Here is the test code to verify:'], ['-10000']], [[" create table tbl (col varchar(255));\ninsert into tbl (col) values ('ABCDEFG'), ('HIJKLMNO'), ('PQRSTUVW'), ('XYZ');\nselect * from tbl where col like 'ABC%'\nunion\nselect * from tbl where col like 'XYZ%'\nunion\nselect * from tbl where col like 'PQR%';\n+----------+\n| col      |\n+----------+\n| ABCDEFG  |\n| XYZ      |\n| PQRSTUVW |\n+----------+\n3 rows in set (0.00 sec)\n"]], ['How can i introduce multiple conditions in LIKE operator'], 2], [(1388216, 0), [['You can union your tables before the group by (this is on Oracle, by the way):'], ['You may also union the tables with the seller field and filter by it later (in case you need more advanced logic):']], [[' SELECT t.month_ref, SUM(t.amount1), SUM(t.amount2)\n  FROM (SELECT month_ref, amount1, amount2\n          FROM T_FOO\n         WHERE seller = XXX\n         UNION ALL\n        SELECT month_ref, amount1, amount2\n          FROM T_BAR\n         WHERE seller = XXX\n         ) t\n GROUP BY t.month_ref\n']], ['Getting the sum of several columns from two tables'], 2], [(1388216, 1), [['You may also union the tables with the seller field and filter by it later (in case you need more advanced logic):'], ['-10000']], [['  SELECT t.month_ref, SUM(t.amount1), SUM(t.amount2)\n   FROM (SELECT month_ref, amount1, amount2, seller\n           FROM T_FOO\n          UNION ALL\n         SELECT month_ref, amount1, amount2, seller\n           FROM T_BAR) t\n  where t.seller = XXX\n  GROUP BY t.month_ref\n']], ['Getting the sum of several columns from two tables'], 2], [(1388835, 0), [['You could use the  ceil  function, at least on MySQL ; this portion of SQL code :'], ["For your update, so, I'd say :"]], [[' select ceil(45.01), ceil(45.49), ceil(45.99);\n']], ['Round up value to nearest whole number in SQL UPDATE'], 3], [(1388835, 1), [["For your update, so, I'd say :"], ['And the given example :']], [[' Update product SET price = ceil(45.01)\n']], ['Round up value to nearest whole number in SQL UPDATE'], 3], [(1388835, 2), [['And the given example :'], ['-10000']], [[' mysql> SELECT CEILING(1.23);\n        -> 2\nmysql> SELECT CEILING(-1.23);\n        -> -1\n']], ['Round up value to nearest whole number in SQL UPDATE'], 3], [(1389605, 0), [['In MySQL:'], ['In SQL Server:']], [[' declare @id int\ndeclare @maxid int\n\nset @id = 1\nselect @maxid = max(id) from tbl\n\ncreate temporary table IDSeq\n(\n    id int\n)\n\nwhile @id < @maxid\nbegin\n    insert into IDSeq values(@id)\n\n    set @id = @id + 1\nend\n\nselect \n    s.id \nfrom \n    idseq s \n    left join tbl t on \n        s.id = t.id \n where t.id is null\n\n drop table IDSeq\n']], ['SQL: find missing IDs in a table'], 2], [(1389605, 1), [['In SQL Server:'], ['-10000']], [[' declare @id int\ndeclare @maxid int\n\nset @id = 1\nselect @maxid = max(id) from tbl\n\ncreate table #IDSeq\n(\n    id int\n)\n\nwhile @id < @maxid --whatever you max is\nbegin\n    insert into #IDSeq values(@id)\n\n    set @id = @id + 1\nend\n\nselect \n    s.id \nfrom \n    #idseq s \n    left join tbl t on \n        s.id = t.id \n where t.id is null\n\n drop table #IDSeq\n']], ['SQL: find missing IDs in a table'], 2], [(1389829, 0), [['-10000'], ['or:']], [['    SELECT *\n     FROM `A`\nLEFT JOIN `B`\n       ON `A`.`id` = `B`.`id`\n    WHERE NOT ( `A`.`id` = `B`.`AID` AND `A`.`phase` = `B`.`APHASE`\n                AND `void` = 0 )\n']], ['How to write a query showing records from table A without a matching record in table B?'], 2], [(1389829, 1), [['or:'], ['no guarantee the second one actually works, it just came to my mind']], [['    SELECT *\n     FROM `A`\nLEFT JOIN `B`\n       ON NOT ( `A`.`id` = `B`.`AID`\n                AND `A`.`phase` = `B`.`APHASE`\n                AND `void` = 0 )\n']], ['How to write a query showing records from table A without a matching record in table B?'], 2], [(1392023, 0), [['From the link:'], ['That being said, you can insert quotes into a string by escaping the double quotes like this:']], [[' private void CallPreparedCmd() {\n    string sConnString = \n        "Server=(local);Database=Northwind;Integrated Security=True;";\n    string sSQL = \n        "UPDATE Customers SET City=@sCity WHERE CustomerID=@sCustomerID";\n    using (SqlConnection oCn = new SqlConnection(sConnString)) {\n        using (SqlCommand oCmd = new SqlCommand(sSQL, oCn)) {\n            oCmd.CommandType = CommandType.Text;\n\n            oCmd.Parameters.Add("@sCustomerID", SqlDbType.NChar, 5);\n            oCmd.Parameters.Add("@sCity", SqlDbType.NVarChar, 15);\n\n            oCn.Open();\n            oCmd.Prepare();\n\n            oCmd.Parameters["@sCustomerID"].Value = "ALFKI";\n            oCmd.Parameters["@sCity"].Value = "Berlin2";\n            oCmd.ExecuteNonQuery();\n\n            oCmd.Parameters["@sCustomerID"].Value = "CHOPS";\n            oCmd.Parameters["@sCity"].Value = "Bern2";\n            oCmd.ExecuteNonQuery();\n\n            oCn.Close();\n        }\n    }\n}\n']], ['How to put double quotes in ADO.NET query?'], 2], [(1392023, 1), [['That being said, you can insert quotes into a string by escaping the double quotes like this:'], ['-10000']], [[' string newstring = " \\"I\'m Quoted\\" ";\n']], ['How to put double quotes in ADO.NET query?'], 2], [(1393050, 0), [['Seems that VB datetime starts on 30th Dec 1899:'], ['whereas SQL datetime starts on 1st Jun 1900:']], [[' ?CDbl(#30/12/1899 03:00:01#)\n 0.125011574074074 \n']], ['Conversion of INTEGER to DATETIME differs to VB6'], 3], [(1393050, 1), [['whereas SQL datetime starts on 1st Jun 1900:'], ['This gives two days difference which fits your results :).']], [[' SELECT CAST(0 AS DATETIME)\n1900-01-01 00:00:00.000\n']], ['Conversion of INTEGER to DATETIME differs to VB6'], 3], [(1393050, 2), [['This gives two days difference which fits your results :).'], ['-10000']], [[" 'VB6\nCDbl(#2009-09-08#)\n 40064 \n\n-- SQL:\nSELECT CAST(40064 AS DATETIME)\n2009-09-10 00:00:00.000\n"]], ['Conversion of INTEGER to DATETIME differs to VB6'], 3], [(1393257, 0), [['With this setup:'], ['the following update will "refresh" the colum  table1.diff  with the values of  table2 :']], [[' CREATE TABLE table2 (k NUMBER PRIMARY KEY, x NUMBER);\nCREATE TABLE table1 (\n   NAME VARCHAR2(10) PRIMARY KEY, \n   diff NUMBER, \n   fk1 NUMBER REFERENCES table2, \n   fk2 NUMBER REFERENCES table2);\n']], ['Oracle Sql Update with values using foreign key?'], 2], [(1393257, 1), [['the following update will "refresh" the colum  table1.diff  with the values of  table2 :'], ['Only the rows that need updating will be refreshed (thanks to the where clause).']], [[' SQL> UPDATE (SELECT child.diff old_diff, parent2.x - parent1.x new_diff\n  2            FROM table1 child\n  3            JOIN table2 parent1 ON (child.fk1 = parent1.k)\n  4            JOIN table2 parent2 ON (child.fk2 = parent2.k))\n  5     SET old_diff = new_diff\n  6   WHERE old_diff != new_diff\n  7      OR (old_diff IS NULL AND new_diff IS NOT NULL)\n  8      OR (old_diff IS NOT NULL AND new_diff IS NULL);\n']], ['Oracle Sql Update with values using foreign key?'], 2], [(1394430, 0), [['-10000'], ['Assuming  DocID  is a  PRIMARY KEY , declare it as such in the temporary table using  IGNORE_DUP_KEY :']], [[' SELECT  DISTINCT DocID, VisitDate, DocName\nFROM    mytable\n']], ['Selecting one row from duplicated rows'], 2], [(1394430, 1), [['Assuming  DocID  is a  PRIMARY KEY , declare it as such in the temporary table using  IGNORE_DUP_KEY :'], ['This will skip duplicates on  DocID']], [[' DECLARE @temp TABLE (DocId INT NOT NULL PRIMARY KEY WITH (IGNORE_DUP_KEY = ON), …)\n\nINSERT\nINTO    @mytable\nSELECT  …\nFROM    source_table\n']], ['Selecting one row from duplicated rows'], 2], [(1394549, 0), [['In  MySQL :'], ['In  PostgreSQL :']], [[' SELECT  *\nFROM    dev_product dp\nWHERE   EXISTS\n        (\n        SELECT  NULL\n        FROM    market_product mp\n        WHERE   NOT EXISTS\n                (\n                SELECT  NULL\n                FROM    dev_product_comp dpc\n                WHERE   dpc.prodID = dp.id\n                        AND NOT EXISTS\n                        (\n                        SELECT  NULL\n                        FROM    market_product_comp mpc\n                        WHERE   mpc.prodID = mp.id\n                                AND mpc.substID = dpc.substID\n                        )\n                )\n                AND NOT EXISTS\n                (\n                SELECT  NULL\n                FROM    market_product_comp mpc\n                WHERE   mpc.prodID = mp.id\n                        AND NOT EXISTS\n                        (\n                        SELECT  NULL\n                        FROM    dev_product_comp dpc\n                        WHERE   dpc.prodID = dp.id\n                                AND dpc.substID = mpc.substID\n                        )\n                )\n\n        )\n']], ['SQL query for selecting products with same ingredients of other products'], 2], [(1394549, 1), [['In  PostgreSQL :'], ["Neither from these queries uses  COUNT(*) : it's enough to find but a single non-matching component to stop evaluating the whole pair."]], [[' SELECT  *\nFROM    dev_product dp\nWHERE   EXISTS\n        (\n        SELECT  NULL\n        FROM    market_product mp\n        WHERE   NOT EXISTS\n            (\n            SELECT  NULL\n            FROM    (\n                SELECT  substID\n                FROM    market_product_comp mpc\n                WHERE   mpc.prodID = mp.ID\n                ) m\n            FULL OUTER JOIN\n                (\n                SELECT  substID\n                FROM    dev_product_comp dpc\n                WHERE   dpc.devID = dp.ID\n                ) d\n            ON  d.substID = m.substID\n            WHERE   d.substID IS NULL OR m.substID IS NULL\n            )\n        )\n']], ['SQL query for selecting products with same ingredients of other products'], 2], [(1395991, 0), [['If you need the two most recent tests overall, then'], ['If you need the two most recent tests for each Widget, then']], [[' Select * From Tests T\nWhere (Select Count(*) From tests\n       Where testDate > T.TestDate) < 2\n']], ['Query most recent TWO entries per widget'], 2], [(1395991, 1), [['If you need the two most recent tests for each Widget, then'], ['-10000']], [[' Select * From Tests T\nWhere (Select Count(*) From tests\n       Where WidgetId = T.WidgetId \n           And testDate > T.TestDate) < 2\n']], ['Query most recent TWO entries per widget'], 2], [(1397332, 0), [['To check it:'], ['To update:']], [[' select idColumn, bitFieldY, bitFieldY ^ 1 as Toggled\nfrom tableX\n']], ['How to flip bit fields in T-SQL?'], 2], [(1397332, 1), [['To update:'], ['MSDN T-SQL Exclusive-OR (^)']], [[' update tableX\nset bitFieldY = bitFieldY ^ 1\nwhere ...\n']], ['How to flip bit fields in T-SQL?'], 2], [(1399844, 0), [['You need to use  DATALENGTH  to get a true  byte  count of the data in question. If you have unicode data, note that the value you get in this situation will not be the same as the length  of the text.'], ['LIKE  behaves better than  =  in the "blanks" situation because it doesn\'t perform blank-padding on the pattern you were trying to match:']], [[" print(DATALENGTH(' ')) --1\nprint(LEN(' '))        --0\n"]], ['SQL Server 2008 Empty String vs. Space'], 4], [(1399844, 1), [['LIKE  behaves better than  =  in the "blanks" situation because it doesn\'t perform blank-padding on the pattern you were trying to match:'], ['Will give  eq  while:']], [[" if '' = ' '\nprint 'eq'\nelse\nprint 'ne'\n"]], ['SQL Server 2008 Empty String vs. Space'], 4], [(1399844, 2), [['Will give  eq  while:'], ['Careful with  LIKE  though: it is not symmetrical: it treats trailing whitespace as significant in the pattern (RHS) but not the match expression (LHS). The following is taken from  here :']], [[" if '' LIKE ' '\nprint 'eq'\nelse\nprint 'ne'\n"]], ['SQL Server 2008 Empty String vs. Space'], 4], [(1399844, 3), [['Careful with  LIKE  though: it is not symmetrical: it treats trailing whitespace as significant in the pattern (RHS) but not the match expression (LHS). The following is taken from  here :'], ['-10000']], [[" declare @Space nvarchar(10)\ndeclare @Space2 nvarchar(10)\n\nset @Space = ''\nset @Space2 = ' '\n\nif @Space like @Space2\nprint '@Space Like @Space2'\nelse\nprint '@Space Not Like @Space2'\n\nif @Space2 like @Space\nprint '@Space2 Like @Space'\nelse\nprint '@Space2 Not Like @Space'\n\n@Space Not Like @Space2\n@Space2 Like @Space\n"]], ['SQL Server 2008 Empty String vs. Space'], 4], [(1400052, 0), [['To solve the problem with your tables (with SQL Server example code):'], ['OUTPUT:']], [[" DECLARE @MasterTable table (MasterID int,FirstName varchar(20),LastName varchar(20))\nDECLARE @HistoryTable table (MasterID int,LastAction char(1),HistoryDate datetime)\n\nINSERT INTO @MasterTable VALUES (1,'AAA','aaa')\nINSERT INTO @MasterTable VALUES (2,'BBB','bbb')\nINSERT INTO @MasterTable VALUES (3,'CCC','ccc')\n\nINSERT INTO @HistoryTable VALUES (1,'I','1/1/2009')\nINSERT INTO @HistoryTable VALUES (1,'U','2/2/2009')\nINSERT INTO @HistoryTable VALUES (1,'U','3/3/2009')  --<<dups\nINSERT INTO @HistoryTable VALUES (1,'U','3/3/2009')  --<<dups\nINSERT INTO @HistoryTable VALUES (2,'I','5/5/2009')\nINSERT INTO @HistoryTable VALUES (3,'I','7/7/2009')\nINSERT INTO @HistoryTable VALUES (3,'U','8/8/2009')\n\nSELECT\n    MasterID,FirstName,LastName,LastAction,HistoryDate\n    FROM (SELECT\n              m.MasterID,m.FirstName,m.LastName,h.LastAction,h.HistoryDate,ROW_NUMBER() OVER(PARTITION BY m.MasterID ORDER BY m.MasterID) AS RankValue\n              FROM @MasterTable m\n                  INNER JOIN (SELECT\n                                  MasterID,MAX(HistoryDate) AS MaxDate\n                                  FROM @HistoryTable\n                                  GROUP BY MasterID\n                             ) dt ON m.MasterID=dt.MasterID\n                  INNER JOIN @HistoryTable h ON dt.MasterID=h.MasterID AND dt.MaxDate=h.HistoryDate\n         ) AllRows\n    WHERE RankValue=1\n"]], ['Last Record of a Join Table (how to optimize)'], 4], [(1400052, 1), [['OUTPUT:'], ['To solve the problem with a better, HistoryTable (with SQL Server example code): \nit is better because it has an auto-incrementing history id identity column']], [[' MasterID    FirstName LastName LastAction HistoryDate\n----------- --------- -------- ---------- -----------\n1           AAA       aaa      U          2009-03-03 \n2           BBB       bbb      I          2009-05-05 \n3           CCC       ccc      U          2009-08-08 \n\n(3 row(s) affected)\n']], ['Last Record of a Join Table (how to optimize)'], 4], [(1400052, 2), [['To solve the problem with a better, HistoryTable (with SQL Server example code): \nit is better because it has an auto-incrementing history id identity column'], ['OUTPUT:']], [[" DECLARE @MasterTable table (MasterID int,FirstName varchar(20),LastName varchar(20))\nDECLARE @HistoryTableNEW table (HistoryID int identity(1,1), MasterID int,LastAction char(1),HistoryDate datetime)\n\nINSERT INTO @MasterTable VALUES (1,'AAA','aaa')\nINSERT INTO @MasterTable VALUES (2,'BBB','bbb')\nINSERT INTO @MasterTable VALUES (3,'CCC','ccc')\n\nINSERT INTO @HistoryTableNEW VALUES (1,'I','1/1/2009')\nINSERT INTO @HistoryTableNEW VALUES (1,'U','2/2/2009')\nINSERT INTO @HistoryTableNEW VALUES (1,'U','3/3/2009')  --<<dups\nINSERT INTO @HistoryTableNEW VALUES (1,'U','3/3/2009')  --<<dups\nINSERT INTO @HistoryTableNEW VALUES (2,'I','5/5/2009')\nINSERT INTO @HistoryTableNEW VALUES (3,'I','7/7/2009')\nINSERT INTO @HistoryTableNEW VALUES (3,'U','8/8/2009')\n\nSELECT\n    m.MasterID,m.FirstName,m.LastName,h.LastAction,h.HistoryDate,h.HistoryID\n    FROM @MasterTable m\n        INNER JOIN (SELECT\n                        MasterID,MAX(HistoryID) AS MaxHistoryID\n                        FROM @HistoryTableNEW\n                        GROUP BY MasterID\n                   ) dt ON m.MasterID=dt.MasterID\n        INNER JOIN @HistoryTableNEW h ON dt.MasterID=h.MasterID AND dt.MaxHistoryID=h.HistoryID\n"]], ['Last Record of a Join Table (how to optimize)'], 4], [(1400052, 3), [['OUTPUT:'], ['-10000']], [[' MasterID    FirstName LastName LastAction HistoryDate             HistoryID\n----------- --------- -------- ---------- ----------------------- ---------\n1           AAA       aaa      U          2009-03-03 00:00:00.000 4\n2           BBB       bbb      I          2009-05-05 00:00:00.000 5\n3           CCC       ccc      U          2009-08-08 00:00:00.000 7\n\n(3 row(s) affected)\n']], ['Last Record of a Join Table (how to optimize)'], 4], [(1400078, 0), [["If you can't just limit the query itself with a  where  clause, you can use the fact that the  count  aggregate only counts the non-null values:"], ['You can also use the  sum  aggregate in a similar way:']], [[" select count(case Position when 'Manager' then 1 else null end)\nfrom ...\n"]], ['Is it possible to specify condition in Count()?'], 2], [(1400078, 1), [['You can also use the  sum  aggregate in a similar way:'], ['-10000']], [[" select sum(case Position when 'Manager' then 1 else 0 end)\nfrom ...\n"]], ['Is it possible to specify condition in Count()?'], 2], [(1400245, 0), [['-10000'], ['So for TaskID = 001, this statement will ']], [[" UPDATE dbo.Projects\nSET Date = (SELECT Date FROM dbo.Projects p1\n            WHERE p1.ProjectID = '000' AND p1.TaskID = dbo.Projects.TaskID)\nWHERE ProjectID IN ('P01', 'P02', 'P03', 'P04')\nAND TaskID IN ('001', '002', '003')\n"]], ['SQL Query - Copy Values in Same Table'], 4], [(1400245, 1), [['So for TaskID = 001, this statement will '], ['You can also use an OUTPUT clause to PROVE to you what is being updated:']], [["  SELECT Date FROM dbo.Projects WHERE ProjectID = '000' AND TaskID = '001'\n"]], ['SQL Query - Copy Values in Same Table'], 4], [(1400245, 2), [['You can also use an OUTPUT clause to PROVE to you what is being updated:'], ['Just ran the query and this is the results I get:']], [[" UPDATE dbo.Projects\nSET Date = (SELECT Date FROM dbo.Projects p1\n            WHERE p1.ProjectID = '000' AND p1.TaskID = dbo.Projects.TaskID)\nOUTPUT inserted.ProjectID, inserted.TaskID, inserted.Date\nWHERE ProjectID IN ('P01', 'P02', 'P03', 'P04')\nAND TaskID IN ('001', '002', '003')\n"]], ['SQL Query - Copy Values in Same Table'], 4], [(1400245, 3), [['Just ran the query and this is the results I get:'], ['The dates for Projects 1 and 2 and Tasks 1,2,3 have been set to the values of the "master" project 0.']], [[' ProjectID   TaskID  Date\n   0       1    2009-10-28 00:00:00.000\n   0       2    2009-12-01 00:00:00.000\n   0       3    2010-02-24 00:00:00.000\n   1       1    2009-10-28 00:00:00.000\n   1       2    2009-12-01 00:00:00.000\n   1       3    2010-02-24 00:00:00.000\n   2       1    2009-10-28 00:00:00.000\n   2       2    2009-12-01 00:00:00.000\n   2       3    2010-02-24 00:00:00.000\n']], ['SQL Query - Copy Values in Same Table'], 4], [(1400377, 0), [['@SkyBlue is a bit, not a boolean. Try:'], ['Note that this also fails']], [[" DECLARE @SkyBlue Bit\nSET @SkyBlue = 1\nIF @SkyBlue = 1\n    Select 'the sky is blue!'\nELSE\n    Select 'the sky is not blue!'\n"]], ['SQL Conditional on Bit'], 2], [(1400377, 1), [['Note that this also fails'], ['-10000']], [[" if 1\n    Select 'the sky is blue!'\nELSE\n    Select 'the sky is not blue!'\n"]], ['SQL Conditional on Bit'], 2], [(1400442, 0), [["It isn't clear why it's necessary to represent a  Trial  as a distinct entity. Why isn't the following schema adequate?"], ["From what you've said so far, it sounds like you could just  infer  that a  Test  with more than one  Measurement  counts as a  Trial . That is, if your user interface needs to show that a particular Test had a Trial, if could just do the following:"]], [[' Sample        Test           Measurement\n------        ----           -----------\nSampleId (PK) TestId (PK)    MeasurementId (PK)\nDescription   SampleId (FK)  TestId (FK)\n              TestStartDate  Description\n              TestEndDate    MeasuredValue\n']], ['Optional Database Entities (part 2)'], 3], [(1400442, 1), [["From what you've said so far, it sounds like you could just  infer  that a  Test  with more than one  Measurement  counts as a  Trial . That is, if your user interface needs to show that a particular Test had a Trial, if could just do the following:"], ['The resulting schema looks like this:']], [[' if (test.Measurements.Count > 1) {\n    _View.Title = test.TestName + " (Trial)"; \n}\n']], ['Optional Database Entities (part 2)'], 3], [(1400442, 2), [['The resulting schema looks like this:'], ['This is very close to  Option 1  in the original question. If the cost of maintaining a blank (or dummy)  Trial  are low - for example, if  Trials  have few or no attributes - that may be a better solution.']], [[' Sample        Test           TestRun         Measurement\n------        ----           -------         -----------\nSampleId (PK) TestId (PK)    TestRunId (PK)  MeasurementId (PK)\nDescription   SampleId (FK)  TestId (FK)     TestRunId (FK)\n              TestStartDate                  Description\n              TestEndDate                    MeasuredValue\n\nTrial\n-----\nTrialId (PK)\nTestRunId (FK)\nDescription\n']], ['Optional Database Entities (part 2)'], 3], [(1400505, 0), [["If by numbers between 1 and 10 you mean any float that is >= 1 and < 10, then it's easy:"], ['This can be easily tested with:']], [[' select random() * 9 + 1\n']], ['Generate a random number in the range 1 - 10'], 4], [(1400505, 1), [['This can be easily tested with:'], ["If you want integers, that are >= 1 and < 10, then it's simple:"]], [[' # select min(i), max(i) from (\n    select random() * 9 + 1 as i from generate_series(1,1000000)\n) q;\n       min       |       max\n-----------------+------------------\n 1.0000083274208 | 9.99999571684748\n(1 row)\n']], ['Generate a random number in the range 1 - 10'], 4], [(1400505, 2), [["If you want integers, that are >= 1 and < 10, then it's simple:"], ['And again, simple test:']], [[' select trunc(random() * 9 + 1)\n']], ['Generate a random number in the range 1 - 10'], 4], [(1400505, 3), [['And again, simple test:'], ['-10000']], [[' # select min(i), max(i) from (\n    select trunc(random() * 9 + 1) as i from generate_series(1,1000000)\n) q;\n min | max\n-----+-----\n   1 |   9\n(1 row)\n']], ['Generate a random number in the range 1 - 10'], 4], [(1401613, 0), [['It depends on the query as to how the optimizer will handle it.  You can test it in SQLPlus using autotrace and looking at the Predicate Information (this is done on Oracle version 10.2.0.3):'], ['No rewriting done by the optimizer in this case on the where criteria, but if we change it slightly:']], [[' SQL>set autot traceonly\nSQL>\n  1  select l\n  2    from (SELECT l\n  3            FROM (SELECT LEVEL l\n  4                    FROM dual CONNECT BY LEVEL < 20\n  5                 )\n  6         )\n  7   where l between 5 and 10\n  8*     or l between 7 and 15;\n\n11 rows selected.\n\nElapsed: 00:00:00.21\n\nExecution Plan\n----------------------------------------------------------\nPlan hash value: 2403765415\n\n--------------------------------------------------------------------------------------\n| Id  | Operation                     | Name | Rows  | Bytes | Cost (%CPU)| Time     |\n--------------------------------------------------------------------------------------\n|   0 | SELECT STATEMENT              |      |     1 |    13 |     2   (0)| 00:00:01 |\n|*  1 |  VIEW                         |      |     1 |    13 |     2   (0)| 00:00:01 |\n|*  2 |   CONNECT BY WITHOUT FILTERING|      |       |       |            |          |\n|   3 |    FAST DUAL                  |      |     1 |       |     2   (0)| 00:00:01 |\n--------------------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   1 - filter("L">=5 AND "L"<=10 OR "L">=7 AND "L"<=15)\n   2 - filter(LEVEL<20)\n\n\nStatistics\n----------------------------------------------------------\n          1  recursive calls\n          0  db block gets\n          0  consistent gets\n          0  physical reads\n          0  redo size\n        494  bytes sent via SQL*Net to client\n        403  bytes received via SQL*Net from client\n          3  SQL*Net roundtrips to/from client\n          1  sorts (memory)\n          0  sorts (disk)\n         11  rows processed\n']], ['Oracle Multiple Overlapping Between Statements'], 2], [(1401613, 1), [['No rewriting done by the optimizer in this case on the where criteria, but if we change it slightly:'], ['On this one we see that the optimizer does recognize that both where criteria have the same upper bound.  So it depends on the query as to how the optimizer will rewrite it.']], [[' SQL>\n  1  select l\n  2    from (SELECT l\n  3            FROM (SELECT LEVEL l\n  4                    FROM dual CONNECT BY LEVEL < 20\n  5                 )\n  6         )\n  7   where l between 5 and 10\n  8*     or l between 7 and 10;\n\n6 rows selected.\n\nElapsed: 00:00:00.20\n\nExecution Plan\n----------------------------------------------------------\nPlan hash value: 2403765415\n\n--------------------------------------------------------------------------------------\n| Id  | Operation                     | Name | Rows  | Bytes | Cost (%CPU)| Time     |\n--------------------------------------------------------------------------------------\n|   0 | SELECT STATEMENT              |      |     1 |    13 |     2   (0)| 00:00:01 |\n|*  1 |  VIEW                         |      |     1 |    13 |     2   (0)| 00:00:01 |\n|*  2 |   CONNECT BY WITHOUT FILTERING|      |       |       |            |          |\n|   3 |    FAST DUAL                  |      |     1 |       |     2   (0)| 00:00:01 |\n--------------------------------------------------------------------------------------\n\nPredicate Information (identified by operation id):\n---------------------------------------------------\n\n   1 - filter("L"<=10 AND ("L">=5 OR "L">=7))\n   2 - filter(LEVEL<20)\n\n\nStatistics\n----------------------------------------------------------\n          0  recursive calls\n          0  db block gets\n          0  consistent gets\n          0  physical reads\n          0  redo size\n        388  bytes sent via SQL*Net to client\n        392  bytes received via SQL*Net from client\n          2  SQL*Net roundtrips to/from client\n          1  sorts (memory)\n          0  sorts (disk)\n          6  rows processed\n']], ['Oracle Multiple Overlapping Between Statements'], 2], [(1402785, 0), [['You can use the ALTER VIEW statement something like this :'], ['To rename a view, use  sp_rename  System Stored Procedure :']], [[" ALTER VIEW dbo.myView\nAS\nSELECT foo\nFROM dbo.bar\nWHERE widget = 'foo'\nGO\n"]], ['SQL Server: How to change name in a view?'], 2], [(1402785, 1), [['To rename a view, use  sp_rename  System Stored Procedure :'], ['Note: don\'t include the schema name in the second string, or else you\'ll get a name like "dbo.dbo.myNewViewName".']], [[" EXEC sp_rename 'dbo.myView', 'myNewViewName'\n"]], ['SQL Server: How to change name in a view?'], 2], [(1404627, 0), [['ANSI  syntax (supported by  SQL Server ,  Oracle ,  MySQL  and  PostgreSQL ):'], ['Using  GREATEST  (not supported by  SQL Server ):']], [[' SELECT  SUM(CASE WHEN FIELD < 10000 THEN 0 ELSE FIELD - 10000 END)\nFROM    mytable\n']], ['SQL Max(something,0) type solution'], 2], [(1404627, 1), [['Using  GREATEST  (not supported by  SQL Server ):'], ['-10000']], [[' SELECT  SUM(GREATEST(field - 10000, 0))\nFROM    mytable\n']], ['SQL Max(something,0) type solution'], 2], [(1405259, 0), [['Here you have list of database tables with the most rows:'], ['You can try different variations using that tables. For example this query:']], [[' Tables - Rows count\nSales.SalesOrderDetail - 121317\nProduction.TransactionHistory - 113443\nProduction.TransactionHistoryArchive - 89253\nProduction.WorkOrder - 72591\nProduction.WorkOrderRouting - 67131\nSales.SalesOrderHeader - 31465\nSales.SalesOrderHeaderSalesReason - 27647\nPerson.Contact - 19972\nPerson.Address - 19614\nSales.CustomerAddress - 19220\nSales.Customer - 19185\nSales.ContactCreditCard - 19118\nSales.CreditCard - 19118\nSales.Individual - 18484\nSales.CurrencyRate - 13532\n']], ['I need a slow query on AdventureWorks (SQL 2005)'], 3], [(1405259, 1), [['You can try different variations using that tables. For example this query:'], ['You can  run this : ']], [[' SELECT * FROM Sales.SalesOrderDetail s\nINNER JOIN Production.Product p ON s.ProductID = p.ProductID\n']], ['I need a slow query on AdventureWorks (SQL 2005)'], 3], [(1405259, 2), [['You can  run this : '], ['Inner join on unindexed tables. Very artificial example, but for now it takes over 2 minutes to roll on my machine. Now - over 20 minutes. Now -  1h 20 minutes .']], [[' SELECT * FROM Production.TransactionHistory th\nINNER JOIN Production.TransactionHistoryArchive tha ON th.Quantity = tha.Quantity\n']], ['I need a slow query on AdventureWorks (SQL 2005)'], 3], [(1406144, 0), [['This query will return all the reports with words you need.'], ['You have to nest it. So the final query is:']], [[" SELECT *\nFROM report r\nINNER JOIN field f ON r.id = f.report_id\nWHERE name IN ('age','rank')\n"]], ['MySQL SQL Subquery?'], 2], [(1406144, 1), [['You have to nest it. So the final query is:'], ['-10000']], [[" SELECT a.id, a.name, COUNT(*) \nFROM \n(\n    SELECT r.id, r.name\n    FROM report r\n    INNER JOIN field f ON r.id = f.report_id\n    WHERE f.name\n    IN ('age', 'rank')\n)a\nGROUP BY a.id, a.name\n"]], ['MySQL SQL Subquery?'], 2], [(1406168, 0), [["Besides all the settings already done. I've set:"], ['For more information see:']], [[' grails.views.default.codec="html" // none, html, base64\n']], ['Encoding issue under Groovy'], 2], [(1406168, 1), [['For more information see:'], ['Luis']], [[' http://jira.codehaus.org/browse/GRAILS-1827\n']], ['Encoding issue under Groovy'], 2], [(1406215, 0), [['LEFT JOIN / IS NULL :'], ['NOT EXISTS :']], [[' SELECT  *\nFROM    common\nLEFT JOIN\n        table1 t1\nON      t1.common_id = common.common_id\nWHERE   t1.common_id IS NULL\n']], ['SQL "select where not in subquery" returns no results'], 5], [(1406215, 1), [['NOT EXISTS :'], ['NOT IN :']], [[' SELECT  *\nFROM    common\nWHERE   NOT EXISTS\n        (\n        SELECT  NULL\n        FROM    table1 t1\n        WHERE   t1.common_id = common.common_id\n        )\n']], ['SQL "select where not in subquery" returns no results'], 5], [(1406215, 2), [['NOT IN :'], ['This may be confusing but may become more obvious if we recall the alternate syntax for this:']], [[' SELECT  *\nFROM    common\nWHERE   common_id NOT IN\n        (\n        SELECT  common_id\n        FROM    table1 t1\n        )\n']], ['SQL "select where not in subquery" returns no results'], 5], [(1406215, 3), [['This may be confusing but may become more obvious if we recall the alternate syntax for this:'], ['Suppose we have these data:']], [[' common_id = ANY\n(\nSELECT  common_id\nFROM    table1 t1\n)\n']], ['SQL "select where not in subquery" returns no results'], 5], [(1406215, 4), [['Suppose we have these data:'], ['LEFT JOIN / IS NULL  and  NOT EXISTS  will return  3 ,  NOT IN  will return  nothing  (since it will always evaluate to either  FALSE  or  NULL ).']], [[' common\n\n--\n1\n3\n\ntable1\n\n--\nNULL\n1\n2\n']], ['SQL "select where not in subquery" returns no results'], 5], [(1407269, 0), [['This will still allow duplicates... but if you want what you said, \n  Try this (exactly what you said):'], ["I'd guess, however, that you are trying to avoid duplicates, not just reset UserNames where no existing one is the same as the proposed new value. If so, you should add a unique index on the userName column, but first, run this:"]], [[' UPDATE Emp SET\n   UserName = Left(FirstName,1) + LastName\nWhere Not Exists (Select * From Emp \n                  Where UserName = Left(FirstName,1) + LastName)\n']], ['SQL Subselect in an Update'], 2], [(1407269, 1), [["I'd guess, however, that you are trying to avoid duplicates, not just reset UserNames where no existing one is the same as the proposed new value. If so, you should add a unique index on the userName column, but first, run this:"], ['This will reset all the UserNames that CAN be reset without creating duplicates. (It will not eliminate existing Dupes). If there are no dupes after this, you can apply the index.']], [[' UPDATE Emp SET\n   UserName = Left(FirstName,1) + LastName\nWhere  Not Exists \n             (Select * From Emp \n              Where UserName = Left(FirstName,1) + LastName)\n    And Not Exists \n             (Select * From Emp \n              Group By Left(FirstName,1) + LastName\n              Having Count(*) > 1)\n']], ['SQL Subselect in an Update'], 2], [(1408141, 0), [["Let's start with the obvious."], ['That gets you everything you want  plus  stuff you don\'t want. So all we need to do is filter out the other stuff. The "other stuff" is groups of rows having a count that is not equal to the count of the desired subjects.']], [[' SELECT document_id, subject_id\n  FROM document_subjects\n WHERE subject_id IN (17,76)\n']], ["SQL selecting rows where one column's value is common across another criteria column"], 4], [(1408141, 1), [['That gets you everything you want  plus  stuff you don\'t want. So all we need to do is filter out the other stuff. The "other stuff" is groups of rows having a count that is not equal to the count of the desired subjects.'], ["Note that subject_id is removed because it doesn't participate in grouping. Taking this one step further, i'm going to add an imaginary table called subjects_i_want that contains N rows of subjects you want."]], [[' SELECT document_id\n  FROM document_subjects\n WHERE subject_id IN (17,76)\n GROUP BY document_id\nHAVING COUNT(*) = 2\n']], ["SQL selecting rows where one column's value is common across another criteria column"], 4], [(1408141, 2), [["Note that subject_id is removed because it doesn't participate in grouping. Taking this one step further, i'm going to add an imaginary table called subjects_i_want that contains N rows of subjects you want."], ['Obviously subjects_i_want could be swapped out for another subquery, temporary table, or whatever. But, once you have this list of document_id, you can use it within a subselect of a bigger query. ']], [[' SELECT document_id\n  FROM document_subjects\n WHERE subject_id IN (SELECT subject_id FROM subjects_i_want)\n GROUP BY document_id\nHAVING COUNT(*) = (SELECT COUNT(*) FROM subjects_i_want)\n']], ["SQL selecting rows where one column's value is common across another criteria column"], 4], [(1408141, 3), [['Obviously subjects_i_want could be swapped out for another subquery, temporary table, or whatever. But, once you have this list of document_id, you can use it within a subselect of a bigger query. '], ['Or whatever.']], [[' SELECT document_id, subject_id, ...\n  FROM document_subjects\n WHERE document_id IN(\n        SELECT document_id\n          FROM document_subjects\n          WHERE subject_id IN (SELECT subject_id FROM subjects_i_want)\n          GROUP BY document_id\n         HAVING COUNT(*) = (SELECT COUNT(*) FROM subjects_i_want))\n']], ["SQL selecting rows where one column's value is common across another criteria column"], 4], [(1408285, 0), [['You probably want to use the  STR_TO_DATE()  function.'], ['Or create another column with  DATE  data type and copy the values:']], [[" SELECT STR_TO_DATE(textdate, '%d/%m/%y') FROM MyTable...\n"]], ['MySQL - Change date string to date type in place?'], 2], [(1408285, 1), [['Or create another column with  DATE  data type and copy the values:'], ['-10000']], [[" ALTER TABLE MyTable ADD COLUMN realdate DATE;\nUPDATE MyTable SET realdate = STR_TO_DATE(textdate, '%d/%m/%y');\n"]], ['MySQL - Change date string to date type in place?'], 2], [(1409206, 0), [['I extracted the functionality out into a new method and pass in the master policy that I want the new policy linked to.'], ['This allows me to then loop through all the policies and pass in the policy that needs to be linked as long as the policies are sorted in the correct order...which in my case is by start date and then by master policy id.']], [[" Policy Convert(Policy policy, Policy masterPolicy)\n{\n    Policy newPolicy = policyManager.Copy(policy);\n\n    //link the policy to it's master policy\n    if(masterPolicy != null)\n    {\n        newPolicy.MasterPolicyId = masterPolicy.Id;\n    }\n\n    SavePolicy(newPolicy);\n\n    //inactivate the current policy\n    policy.Status = Inactive;\n    policyManager.UpdatePolicy(policy);\n\n    return newPolicy;\n}\n"]], ['How do I easily keep records in a database linked together?'], 2], [(1409206, 1), [['This allows me to then loop through all the policies and pass in the policy that needs to be linked as long as the policies are sorted in the correct order...which in my case is by start date and then by master policy id.'], ["When all is said and done, it isn't all that much less code but I believe it is much more understandable and it allows individual policies to be converted."]], [[' Policy newPolicy = null;\nforeach(Policy policy in policyList)\n{\n    Policy masterPolicy = policy.MasterPolicyId.HasValue ? newPolicy : null;\n    newPolicy = Convert(policy, masterPolicy);   \n\n}\n']], ['How do I easily keep records in a database linked together?'], 2], [(1409210, 0), [['E.g.:'], ['When using:']], [[' //sample wrapped SqlConnection:\npublic class MySqlConnectionWrapper : SqlConnection\n{\n  private SqlConnecction _sqlConn = null;\n  public MySqlConnectionWrapper(string connectString)\n  {\n    _sqlConn = new SqlConnection(connectString);\n  }\n\n  public override void Open()\n  {\n    _sqlConn.Open();\n  }\n\n  //TODO: override everything else and pass on to _sqlConn...\n\n  protected override DbProviderFactory DbProviderFactory\n  {\n    //todo: return wrapped provider factory...\n  }\n}\n']], ['How to intercept and modify SQL query in Linq to SQL'], 2], [(1409210, 1), [['When using:'], ["That said, do you  really  want to go down that road? You'll need to be able to parse the SQL statements and queries generated by L2S in order to modify them properly. If you can instead modify the linq queries to append whatever you want to add to them, that is probably a better alternative."]], [[' using (SomeDataContext dc = new SomeDataContext(new MySqlConnectionWrapper("connect strng"))\n{\n  var q = from x in dc.SomeTable select x;\n  //...etc...\n}\n']], ['How to intercept and modify SQL query in Linq to SQL'], 2], [(1409399, 0), [['when comparing dates you should always  convert explicitely both sides of the operator to DATE datatype . Assuming StartDate and EndDate are both DATE datatype, this would work:'], ['If StartDate and EndDate are indeed VARCHAR you should convert them explicitely:']], [["  StartDate > to_date('01/SEP/2009', 'dd/MON/yyyy')\n AND EndDate < to_date('01/OCT/2009', 'dd/MON/yyyy')\n"]], ['Oracle Date format - Strange behaviour'], 2], [(1409399, 1), [['If StartDate and EndDate are indeed VARCHAR you should convert them explicitely:'], ['This is valid for all versions of Oracle.']], [["  to_date(StartDate, 'dd/MON/yyyy') > to_date('01/SEP/2009', 'dd/MON/yyyy')\n AND to_date(EndDate, 'dd/MON/yyyy') < to_date('01/OCT/2009', 'dd/MON/yyyy')\n"]], ['Oracle Date format - Strange behaviour'], 2], [(1410048, 0), [["If your purpose is to find 100 random rows and sort them afterwards then  Lasse's solution  is correct. If as I think you want the first 100 rows sorted by name while discarding the others you would build a query like this:"], ['You could also add an hint to your original query to let the optimizer understand that you are interested in the first rows only. This will probably generate a similar access path:']], [[' SELECT * \n  FROM (SELECT * \n          FROM myTable \n         WHERE SIZE > 2000 ORDER BY NAME DESC) \n WHERE ROWNUM <= 100\n']], ["How to select first 'N' records from a database containing million records?"], 2], [(1410048, 1), [['You could also add an hint to your original query to let the optimizer understand that you are interested in the first rows only. This will probably generate a similar access path:'], ["Edit:  just adding  AND rownum <= 100  to the query won't work since in Oracle rownum is attributed  before  sorting : this is why you have to use a subquery. Without the subquery Oracle will select 100 random rows then sort them."]], [[' SELECT /*+ FIRST_ROWS*/* FROM myTable WHERE SIZE > 2000 ORDER BY NAME DESC\n']], ["How to select first 'N' records from a database containing million records?"], 2], [(1410153, 0), [['-10000'], ['To reuse the subquery result:']], [[" SELECT  CASE\n        WHEN\n        (\n        SELECT  column\n        FROM    othertable\n        ) = 1\n        THEN '1'\n        ELSE '2'\n        END\nFROM    mytable\n"]], ['Referring to results of a sub query in main query'], 2], [(1410153, 1), [['To reuse the subquery result:'], ['-10000']], [[' SELECT  subvalue, CASE subvalue WHEN 1 THEN 1 ELSE 2 END\nFROM    (\n        SELECT  (\n                SELECT  column\n                FROM    othertable\n                ) AS subvalue\n        FROM    mytable\n        ) q\n']], ['Referring to results of a sub query in main query'], 2], [(1410216, 0), [['Number 1 is easy, as Dr.Jokepu already showed you: '], ['Number 2 you can always do in the same query, adding the changes as you select:']], [[' INSERT INTO <table> (values) SELECT "values" FROM <anotherTable>;\n']], ['DB2 SQL add rows based on other rows'], 2], [(1410216, 1), [['Number 2 you can always do in the same query, adding the changes as you select:'], ["(note the GETDATE() is a MS-SQL function, I don't remember the exact function for DB/2 at this moment)."]], [[" INSERT INTO MDSTD.MBANK ( MID, MAGN, MAAID, MTYPEOT, MAVAILS, MUSER, MTS)\nSELECT \n      MID \n     ,MAGN + 1\n     ,0 as MAAID\n     ,MTYPEOT\n     ,'A' as MAVAILS\n     ,MUSER\n     ,GETDATE() \nFROM mdstd.mbank \nWHERE MTYPEOT = '2' and MAVAILS = 'A'\n"]], ['DB2 SQL add rows based on other rows'], 2], [(1410430, 0), [['In  SQL Server :'], ['ANSI :']], [[' SELECT  meetingId, billid\nFROM    (\n        SELECT  ROW_NUMBER() OVER (PARTITION BY billId ORDER BY meetingID) AS rn,\n                m.*\n        FROM    mytable m\n        ) q\nWHERE   rn = 1 OR billid IS NULL\n']], ['SQL conditional GROUP BY: how to do it?'], 3], [(1410430, 1), [['ANSI :'], ['MySQL :']], [[' SELECT  MIN(meetingId), billid\nFROM    mytable\nWHERE   billid IS NOT NULL\nGROUP BY\n        billId\nUNION ALL\nSELECT  meetingId, billId\nFROM    mytable\nWHERE   billid IS NULL\n']], ['SQL conditional GROUP BY: how to do it?'], 3], [(1410430, 2), [['MySQL :'], ["This is a trifle more efficient than  MIN  if you really don't care about what  meetingID  will be returned as long as it belongs to the right group."]], [[' SELECT  meetingId, billid\nFROM    mytable\nWHERE   billid IS NOT NULL\nGROUP BY\n        billId\nUNION ALL\nSELECT  meetingId, billId\nFROM    mytable\nWHERE   billid IS NULL\n']], ['SQL conditional GROUP BY: how to do it?'], 3], [(1411072, 0), [['This is already a valid date - ISO-8601 format - just use:'], ['or alternatively:']], [[" SELECT CAST('20060508' AS DATETIME)\n"]], ['Parse a date from unformatted text in SQL'], 3], [(1411072, 1), [['or alternatively:'], ['In order to get your "May 08, 2006" display, do another convert into varchar, using the date convert style 107:']], [[" SELECT CONVERT(DATETIME, '20060508', 112)\n"]], ['Parse a date from unformatted text in SQL'], 3], [(1411072, 2), [['In order to get your "May 08, 2006" display, do another convert into varchar, using the date convert style 107:'], ['See  here  for more information on casting & converting in MS SQL']], [[" SELECT CONVERT(VARCHAR(25), CAST('2006-05-08' AS DATETIME), 107)\n"]], ['Parse a date from unformatted text in SQL'], 3], [(1411161, 0), [['Check Server Collation'], ['Check Database Collation']], [[" SELECT SERVERPROPERTY('COLLATION')\n"]], ['SQL Server check case-sensitivity?'], 3], [(1411161, 1), [['Check Database Collation'], ['Check Column Collation']], [[" SELECT DATABASEPROPERTYEX('AdventureWorks', 'Collation') SQLCollation;\n"]], ['SQL Server check case-sensitivity?'], 3], [(1411161, 2), [['Check Column Collation'], ['-10000']], [[' select table_name, column_name, collation_name\nfrom INFORMATION_SCHEMA.COLUMNS\nwhere table_name = @table_name\n']], ['SQL Server check case-sensitivity?'], 3], [(1411245, 0), [["If you want to make sure that the column 'tax' is 2 or 4 depending on the month (e.g., month 9 = September), then you could do this:"], ["Obviously, vary for your conditions. e.g., to test for dates after June 2008, it's a bit simpler."]], [[' ALTER TABLE SomeTable \n   ADD CONSTRAINT CK_SalesTax\n   CHECK ((MONTH(GETDATE()) = 9 AND SalesTax = 2) OR (MONTH(GETDATE()) != 9 AND SalesTax = 4))\n']], ['" If condition" as one of the constraints to a Column Field?'], 2], [(1411245, 1), [["Obviously, vary for your conditions. e.g., to test for dates after June 2008, it's a bit simpler."], ["You should be able to build this into a CHECK constraint of using a similar mechanism as I've dropped in the first example. "]], [[" (GETDATE() >= '1 June 2008' AND SalesTax = 2)\n"]], ['" If condition" as one of the constraints to a Column Field?'], 2], [(1411820, 0), [['for example'], ['would be processed as ']], [['  A Or B Or C And D Or E And F And G Or H  \n']], ['BRACKETS in SQL if conditions'], 2], [(1411820, 1), [['would be processed as '], ['-10000']], [['  A Or B Or (C And D) Or (E And F And G) Or H\n              \\  /          \\    /   \n               ||             ||                                \n A Or B Or    C&D   Or      E&F&G       Or H\n']], ['BRACKETS in SQL if conditions'], 2], [(1412442, 0), [['try'], ['Take the following SQL code. The first select is how SQL server would do this and the second  query should be access compliant...']], [[' select ..., count(distinct Training.Tcode) as ..., ...\n']], ['MS ACCESS: How can i count distinct value using access query?'], 3], [(1412442, 1), [['Take the following SQL code. The first select is how SQL server would do this and the second  query should be access compliant...'], ['It returns the following:']], [[' declare @t table (eCode int, tcode int)\ninsert into @t values(1,1)\ninsert into @t values(1,1)\ninsert into @t values(1,2)\ninsert into @t values(1,3)\ninsert into @t values(2,2)\ninsert into @t values(2,3)\ninsert into @t values(3,1)    \n\nselect \n    ecode, count(distinct tCode) countof\nfrom\n    @t\ngroup by\n    ecode\n\nselect ecode, count(*)\nfrom\n    (select distinct tcode, ecode\n    from  @t group by tcode, ecode) t\ngroup by ecode\n']], ['MS ACCESS: How can i count distinct value using access query?'], 3], [(1412442, 2), [['It returns the following:'], ['-10000']], [[' ecode tcode\n1       3 (there are 3 distinct tcode for ecode of 1)\n2       2 (there are 2 distinct tcode for ecode of 2)\n3       1 (there is 1 distinct tcode for ecode of 3)\n']], ['MS ACCESS: How can i count distinct value using access query?'], 3], [(1414410, 0), [['First of all, you can write you code simplier:'], ['Basically you could do a second query to display the results just after the first one:']], [[" update newTable set readKey='1' where id in ('1111')\n"]], ['how to get the updated(not count) row on update the table'], 3], [(1414410, 1), [['Basically you could do a second query to display the results just after the first one:'], ['Or if this is SQL Server 2005/2008, then you can use  OUTPUT  clause:']], [[" update newTable set readKey='1' where id in ('1111');\nselect * from newTable where id in ('1111');\n"]], ['how to get the updated(not count) row on update the table'], 3], [(1414410, 2), [['Or if this is SQL Server 2005/2008, then you can use  OUTPUT  clause:'], ['-10000']], [[" update  newTable \nset     readKey='1'\noutput  inserted.id,\n        inserted.readKey as readKey,\n        deleted.readKey as prevReadKey\nwhere id in ('1111');\n"]], ['how to get the updated(not count) row on update the table'], 3], [(1414905, 0), [['So you want to update the  AttendantsRecordsTable , and set the comment to the comment in the most recent  CourseDetailsTable  for each employee?'], ['The subselect here:']], [[' UPDATE \n  dbo.AttendanceRecordsTable\nSET \n  Comments = @Comments\nFROM\n  CourseDetailsTable cd \nINNER JOIN\n  Employee e ON e.EmployeeID = AttendanceRecordTable.EmployeeID\nWHERE \n  e.LastName = @LastName \n  AND e.FirstName = @FirstName\n  AND cd.CourseName = @CourseName\n  AND AttendanceRecordsTable.CourseID = cd.CourseID\n  AND AttendanceRecordsTable.LastDate = \n        (SELECT MAX(LastDate) \n           FROM AttendanceRecordsTable a\n          WHERE a.EmployeeID = e.EmployeeID \n            AND a.CourseID = cd.CourseID)\n']], ['SQL - Updating records based on most recent date'], 2], [(1414905, 1), [['The subselect here:'], ['will select the MAX (last) of the  LastDate  entries in  AttendanceRecordsTable , based on selection of a given employee ( e.EmployeeID ) and a given course ( cd.CourseID ).']], [[' (SELECT MAX(LastDate) \n   FROM AttendanceRecordsTable a\n  WHERE a.EmployeeID = e.EmployeeID AND a.CourseID = cd.CourseID)\n']], ['SQL - Updating records based on most recent date'], 2], [(1416635, 0), [['-10000'], ['to access  select from  from SQLObject, declare the column with backticks:']], [[" CREATE TABLE table1 (\n  id INT(11),\n  `select from` VARCHAR(255),\n  PRIMARY KEY (id)\n);\nINSERT INTO table1 VALUES(1, 'test value');\n"]], ['Using illegal names in MySQL through SQLObject'], 2], [(1416635, 1), [['to access  select from  from SQLObject, declare the column with backticks:'], ['-10000']], [[' >>> class Table1(SQLObject):\n...     myIllegallyNamedColumn = Col(dbName="`select from`")\n... \n>>> list(Table1.select())\n[<Table1 0 myIllegallyNamedColumn=\'test value\'>]\n']], ['Using illegal names in MySQL through SQLObject'], 2], [(1416853, 0), [['I think the question in the certification guide is worded poorly.  You  can  give explicit names to columns when you select from a view, and this works:'], ["The problem is not with giving aliases to columns explicitly.  Here's the problem: if you rely on this instead of defining the view with distinct column names, and the view consists of a join such that the column names are ambiguous, you run into trouble:"]], [[' CREATE VIEW MyView AS SELECT a, b, c FROM MyTable;\nSELECT a AS d, b AS e, c AS f FROM MyView;\n']], ["MySQL Certification Guide Practice Qn - Views' Column Names"], 6], [(1416853, 1), [["The problem is not with giving aliases to columns explicitly.  Here's the problem: if you rely on this instead of defining the view with distinct column names, and the view consists of a join such that the column names are ambiguous, you run into trouble:"], ['This is not a valid view, because in the view definition, all column names must be distinct.  For instance, you would get ambiguous results when you query the view:']], [[' CREATE VIEW MyView AS \n  SELECT m.a, m.b, m.c, o.a, o.b, o.c \n  FROM MyTable m JOIN OtherTable o;\n']], ["MySQL Certification Guide Practice Qn - Views' Column Names"], 6], [(1416853, 2), [['This is not a valid view, because in the view definition, all column names must be distinct.  For instance, you would get ambiguous results when you query the view:'], ['Either of the other techniques mentioned in the question can resolve the ambiguity:']], [[' SELECT a FROM MyView;\n']], ["MySQL Certification Guide Practice Qn - Views' Column Names"], 6], [(1416853, 3), [['Either of the other techniques mentioned in the question can resolve the ambiguity:'], ['or']], [[' CREATE VIEW MyView (a, b, c, d, e, f) AS \n  SELECT m.a, m.b, m.c, o.a, o.b, o.c \n  FROM MyTable m JOIN OtherTable o;\n']], ["MySQL Certification Guide Practice Qn - Views' Column Names"], 6], [(1416853, 4), [['or'], ['Either way, you get the aliased columns:']], [[' CREATE VIEW MyView AS \n  SELECT m.a, m.b, m.c, o.a AS d, o.b AS e, o.c AS f \n  FROM MyTable m JOIN OtherTable o;\n']], ["MySQL Certification Guide Practice Qn - Views' Column Names"], 6], [(1416853, 5), [['Either way, you get the aliased columns:'], ['-10000']], [[' SELECT * FROM MyView; -- returns result with columns a, b, c, d, e, f\n']], ["MySQL Certification Guide Practice Qn - Views' Column Names"], 6], [(1417301, 0), [['The following should work in a few different systems:'], ['Now, if the OP implies a format of 1st position is a character and all succeeding positions are numeric, as in A0+, then use the following (in SQL Server and a good deal of other database systems):']], [[" SELECT * \nFROM TheTable\nWHERE Data LIKE '[A-Za-z][0-9][0-9][0-9][0-9]%'\nAND Data NOT LIKE '% %'\n"]], ['SQL query - LEFT 1 = char, RIGHT 3-5 = numbers in Name'], 5], [(1417301, 1), [['Now, if the OP implies a format of 1st position is a character and all succeeding positions are numeric, as in A0+, then use the following (in SQL Server and a good deal of other database systems):'], ["To incorporate this into a SQL Server 2008 function, since this appears to be what you'd like most, you can write:"]], [[" SELECT *\nFROM TheTable\nWHERE SUBSTRING(Data, 1, 1) LIKE '[A-Za-z]'\nAND SUBSTRING(Data, 2, LEN(Data) - 1) NOT LIKE '%[^0-9]%'\nAND LEN(Data) >= 5\n"]], ['SQL query - LEFT 1 = char, RIGHT 3-5 = numbers in Name'], 5], [(1417301, 2), [["To incorporate this into a SQL Server 2008 function, since this appears to be what you'd like most, you can write:"], ['...and call into it like so:']], [[" CREATE FUNCTION ufn_IsProperFormat(@data VARCHAR(50))\nRETURNS BIT\nAS\nBEGIN\n    RETURN \n     CASE \n      WHEN SUBSTRING(@Data, 1, 1) LIKE '[A-Za-z]'\n        AND SUBSTRING(@Data, 2, LEN(@Data) - 1) NOT LIKE '%[^0-9]%'\n        AND LEN(@Data) >= 5 THEN 1 \n       ELSE 0 \n      END\nEND\n"]], ['SQL query - LEFT 1 = char, RIGHT 3-5 = numbers in Name'], 5], [(1417301, 3), [['...and call into it like so:'], ["...this query needs to change for Oracle queries because Oracle doesn't appear to support bracket notation in LIKE clauses:"]], [[' SELECT * \nFROM TheTable\nWHERE dbo.ufn_IsProperFormat(Data) = 1\n']], ['SQL query - LEFT 1 = char, RIGHT 3-5 = numbers in Name'], 5], [(1417301, 4), [["...this query needs to change for Oracle queries because Oracle doesn't appear to support bracket notation in LIKE clauses:"], ['This is the expansion gbn is doing in his answer, but these versions allow for varying string lengths without the OR conditions.']], [[" SELECT *\nFROM TheTable\nWHERE REGEXP_LIKE(Data, '^[A-za-z]\\d{4,}$')\n"]], ['SQL query - LEFT 1 = char, RIGHT 3-5 = numbers in Name'], 5], [(1417646, 0), [['An EXISTS allows for the potential duplicate entries when there are multiple articles per author:'], ['...unless you  really want  to use a JOIN and you have SQL Server 2005 or higher, you can CAST and DISTINCT (aggregate) to avoid multiple rows in the output... ']], [[' Select * from Authors\nWhere EXISTS (SELECT *\n    FROM Articles\n    WHERE Articles.ContributorId = Authors.ContributorId)\n']], ['Selecting only authors who have articles?'], 2], [(1417646, 1), [['...unless you  really want  to use a JOIN and you have SQL Server 2005 or higher, you can CAST and DISTINCT (aggregate) to avoid multiple rows in the output... '], ['-10000']], [[' select DISTINCT\n  Authors.ContributorID,\n  Authors.AnotherColumn,\n  CAST(Authors.biography AS nvarchar(max)) AS biography,\n  Authors.YetAnotherColumn,\n  ...\nfrom\n  Authors\ninner join\n  Articles on\n  Articles.ContributorID = Authors.ContributorID\n']], ['Selecting only authors who have articles?'], 2], [(1419126, 0), [['Well, generically, you can use  max :'], ['However, here we have a fun little issue where we need to remove  top :']], [[' select\n    max(catalogid)\nfrom\n    catalog\n']], ['finding max in mysql when column is varchar'], 2], [(1419126, 1), [['However, here we have a fun little issue where we need to remove  top :'], ["You see, here, we're using  substring  to limit the  catalogid  field to be just the number."]], [[' select\n    max(cast(substring(catalogid, 4) as decimal(10,2))) as maxid\nfrom\n    catalog\n']], ['finding max in mysql when column is varchar'], 2], [(1419384, 0), [['You could put'], ['before']], [[' If rs.RecordCount > 0 Then\n   exit sub\nEnd If\n']], ['VBScript on checking if the records exist'], 2], [(1419384, 1), [['before'], ["i.e. Don't execute any of the statements, if there are no records."]], [[' Dim objFSO : Set objFSO = CreateObject("Scripting.FileSystemObject")\nDim objFile, objFolder \n']], ['VBScript on checking if the records exist'], 2], [(1419694, 0), [['Use:'], ['Regular  INSTR  would work (Oracle 8i+):']], [[" REGEX_LIKE(t.column, '\\(P\\)')\n"]], ['Oracle PL/SQL REGEXP_LIKE / REGEXP_INSTR'], 3], [(1419694, 1), [['Regular  INSTR  would work (Oracle 8i+):'], ['LIKE works too:']], [[" WHERE INSTR(t.column, '(P)') > 0 --column contains '(P)'\n\nWHERE INSTR(t.column, '(P)') = 0 --column does NOT contain '(P)'\n"]], ['Oracle PL/SQL REGEXP_LIKE / REGEXP_INSTR'], 3], [(1419694, 2), [['LIKE works too:'], ['-10000']], [[" WHERE t.column LIKE '%(P)%' --column contains '(P)'\n\nWHERE t.column NOT LIKE '%(P)%' --column does NOT contain '(P)'\n"]], ['Oracle PL/SQL REGEXP_LIKE / REGEXP_INSTR'], 3], [(1420469, 0), [['MYSQL CONNECTION IN PROLOG'], ['Now, the next part is if you need to connect to Oracle database then the only statement that changes is :']], [[" \n\n:- use_module(oracle).\ngo :-\n    db_open('mysql5', 'root', 'admin'),    \n    db_import('EMP'('EMPID', 'EMPNAME'), emp),\n    %%db_flag(show_query, _, off),\n\n    db_query(emp(EMPID, EMPNAME), emp(EMPID, EMPNAME)),\n    %% Run the query.\n    get_result,\n    %% Modify the database.\n    %%emp_ins(109, 1, 221),\n    %%test_del(109, 1, 221),\n    %% Commit changes.\n    db_transaction(commit),\n    db_close.\n\n%% Retrieve all records over backtracking.\nget_result:-\n    emp(EMPID, EMPNAME),\n    write_ln([EMPID, EMPNAME]),\n    fail.\nget_result.\n"]], ['Using Prolog ODBC Interface'], 3], [(1420469, 1), [['Now, the next part is if you need to connect to Oracle database then the only statement that changes is :'], ["The rest is pretty same. One thing you have to remember is that you need to use the oracle INSTANCE name while specifying the database.\nUsually in Oracle 10g the instance name is  'orcl'  and for Oracle Express edition the convention is :"]], [[' <strong>\n\n:- use_module(odbc).\n</strong>']], ['Using Prolog ODBC Interface'], 3], [(1420469, 2), [["The rest is pretty same. One thing you have to remember is that you need to use the oracle INSTANCE name while specifying the database.\nUsually in Oracle 10g the instance name is  'orcl'  and for Oracle Express edition the convention is :"], ['You WILL be able to connect to database and display the results with this block of code,']], [[" <strong>'your full computer name:port/XE','username','password'</strong>"]], ['Using Prolog ODBC Interface'], 3], [(1421116, 0), [['Here is a sample using the CASE statement:'], ['Here is a sample using multiple UPDATE statements:']], [[' UPDATE table\nSET val = (\n    CASE someproperty\n        WHEN 1 THEN X\n        WHEN 2 THEN Y\n        ELSE val\n    END\n);\n']], ['SQL - WHERE clause on each SET command in UPDATE?'], 2], [(1421116, 1), [['Here is a sample using multiple UPDATE statements:'], ['-10000']], [[' UPDATE table SET val=X WHERE someproperty = 1;\nUPDATE table SET val=Y WHERE someproperty = 2;\n']], ['SQL - WHERE clause on each SET command in UPDATE?'], 2], [(1421404, 0), [['-10000'], ['-10000']], [[' mysql> SHOW CREATE TABLE tablename;\n']], ['Find out which tables were affected by Triggers'], 2], [(1421404, 1), [['-10000'], ['-10000']], [[' mysql> USE dbname;\nmysql> show triggers;\n']], ['Find out which tables were affected by Triggers'], 2], [(1421860, 0), [['query1'], ['Popuplate DataTable instance']], [[' SELECT * FROM EMP where eno=meno and ename=mename\n']], ['How to use an MS Access parameterized stored procedure in ADO.NET?'], 2], [(1421860, 1), [['Popuplate DataTable instance'], ['-10000']], [[' OleDbConnection cn = new OleDbConnection(@"connect_string");\nOleDbCommand cmd = new OleDbCommand("query1", cn);\ncmd.CommandType = CommandType.StoredProcedure;\n\ncmd.Parameters.Add("meno", OleDbType.Integer, 4, "eno");\ncmd.Parameters.Add("mename", OleDbType.VarChar, 40, "ename");\ncmd.Parameters[0].Value = 44;\ncmd.Parameters[1].Value = "ddd";\n\nOleDbDataAdapter adp = new OleDbDataAdapter(cmd);\nDataTable dt = new DataTable();\nadp.Fill(dt);\n']], ['How to use an MS Access parameterized stored procedure in ADO.NET?'], 2], [(1422246, 0), [['If you are going to do exact searches for the small columns only, create a computed column, index it and query like this:'], ['If you are absolutely sure you will never search for a string that is more than  50  characters long, you can omit the included column and just use this:']], [[" ALTER TABLE History ADD HistoryDetailsIndex AS SUBSTRING(HistoryDetails, 1, 50)\n\nCREATE INDEX ix_mytable_typeid_details ON History (HistoryTypeId, HistoryDetailsIndex) INCLUDE (HistoryDetails)\n\nSELECT  COUNT(*)\nFROM    History\nWHERE   HistoryTypeId = 123\n        AND HistoryDetailsIndex LIKE 'string_prefix_up_to_50_characters%'\n        AND HistoryDetails = 'string_prefix_up_to_50_characters_plus_everything_after_it'\n"]], ['Should I use nvarchar(max) in place of a nvarchar(64) column or as an additional column?'], 2], [(1422246, 1), [['If you are absolutely sure you will never search for a string that is more than  50  characters long, you can omit the included column and just use this:'], ['This will make the index shorter.']], [[" SELECT  COUNT(*)\nFROM    History\nWHERE   HistoryTypeId = 123\n        AND HistoryDetailsIndex = 'string_prefix_up_to_50_characters'\n"]], ['Should I use nvarchar(max) in place of a nvarchar(64) column or as an additional column?'], 2], [(1422804, 0), [['You need to require that a row exists in your many-to-many table for that sceneId, for each categoryId you are requiring:\nSo try this:'], ['another option that should work is to do three inner joins instead:']], [[" SELECT s.id, s.title, s.description\nFROM scenes s\nWHERE s.id = '1'\n   And Exists (Select * From scenes_categories \n               Where scene_id = s.Id\n                  And category_id = '3')\n   And Exists (Select * From scenes_categories \n               Where scene_id = s.Id\n                  And category_id = '5')\n\n   And Exists (Select * From scenes_categories \n               Where scene_id = s.Id\n                  And category_id = '8')\n"]], ['MYSQL Multiple Select For Same Category?'], 2], [(1422804, 1), [['another option that should work is to do three inner joins instead:'], ['-10000']], [[" SELECT s.id, s.title, s.description\nFROM scenes s\n  Join scenes_categories c3 \n      On c3.scene_id  = s.Id\n           And c3.category_id ='3'\n  Join scenes_categories c5 \n      On c5.scene_id  = s.Id\n           And c5.category_id ='5'\n  Join scenes_categories c8 \n      On c8.scene_id  = s.Id\n           And c8.category_id ='8'     \nWHERE s.id = '1'\n"]], ['MYSQL Multiple Select For Same Category?'], 2], [(1424729, 0), [['The function  LAST_INSERT_ID()  returns the last value allocated by an auto-increment column during an INSERT.  You can use this subsequently as you insert into a dependent table.  '], ['Or you can set a MySQL user variable so you can use it repeatedly.']], [[' INSERT INTO Directories (pathId) VALUES (NULL); -- auto-increment\nINSERT INTO DirInfo (pathId) VALUES ( LAST_INSERT_ID() );\n']], ['Inserting an auto incrementing Primary Key into another table (to join with later)'], 2], [(1424729, 1), [['Or you can set a MySQL user variable so you can use it repeatedly.'], ['-10000']], [[' INSERT INTO Directories (pathId) VALUES (NULL); -- auto-increment\nSET @pathId := LAST_INSERT_ID();\nINSERT INTO DirInfo (pathId) VALUES ( @pathId );\n']], ['Inserting an auto incrementing Primary Key into another table (to join with later)'], 2], [(1425240, 0), [['I want each DocGroupViewID row where the Del_Index is the highest(max) for all rows with that DocGroupViewID:'], ['It gets more complex when more than one row can have the same  Del_Index , since then you need some way to choose which one to show.']], [[' SELECT\n    T.DocGroupViewID,\n    T.Del_Index,\n    T.ID\nFROM MyTable T\nWHERE T.Del_Index = (\n    SELECT MAX( T1.Del_Index ) FROM MyTable T1\n    WHERE T1.DocGroupViewID = T.DocGroupViewID \n)\n']], ['Select Rows with Maximum Column Value group by Another Column'], 2], [(1425240, 1), [['It gets more complex when more than one row can have the same  Del_Index , since then you need some way to choose which one to show.'], ['If you have ways to sort out ties, just add it to the  ORDER BY .']], [[' -- fake a source table\nDECLARE @t TABLE (\n    ID int IDENTITY(1,1) PRIMARY KEY,\n    Del_Index int,\n    DocGroupViewID int\n)\n\nINSERT INTO @t\nSELECT 1, 1 UNION ALL\nSELECT 2, 1 UNION ALL\nSELECT 3, 1 UNION ALL\nSELECT 1, 2 UNION ALL\nSELECT 2, 2 UNION ALL\nSELECT 2, 2 UNION ALL\nSELECT 1, 3 UNION ALL\nSELECT 2, 3 UNION ALL\nSELECT 3, 3 UNION ALL\nSELECT 4, 3\n\n-- show our source\nSELECT * FROM @t\n\n-- select using RANK (can have duplicates)\n;WITH cteRank AS\n(\n    SELECT\n        DocGroupViewID,\n        Del_Index,\n        ID,\n        RANK() OVER\n            (PARTITION BY DocGroupViewID ORDER BY Del_Index DESC)\n        AS RowRank,\n        ROW_NUMBER() OVER\n            (PARTITION BY DocGroupViewID ORDER BY Del_Index DESC)\n        AS RowNumber\n    FROM @t\n)\nSELECT *\nFROM cteRank\nWHERE RowRank = 1\n\n-- select using ROW_NUMBER\n;WITH cteRowNumber AS\n(\n    SELECT\n        DocGroupViewID,\n        Del_Index,\n        ID,\n        RANK() OVER\n            (PARTITION BY DocGroupViewID ORDER BY Del_Index DESC)\n        AS RowRank,\n        ROW_NUMBER() OVER\n            (PARTITION BY DocGroupViewID ORDER BY Del_Index DESC)\n        AS RowNumber\n    FROM @t\n)\nSELECT *\nFROM cteRowNumber\nWHERE RowNumber = 1\n']], ['Select Rows with Maximum Column Value group by Another Column'], 2], [(1425487, 0), [["There's this system table named sys.Columns that you can get columns information from it.\nif you want to see columns of a particular table you can do as follows:"], ['Or you can get table information like this:']], [[' SELECT col.* from sys.objects obj \ninner join sys.columns col \non obj.object_Id=col.object_Id \nand obj.Name=@tableName\n']], ["Find the date/time a table's column was created"], 2], [(1425487, 1), [['Or you can get table information like this:'], ["but I couldn't find any information on creation date of a column."]], [[' SELECT * FROM sys.objects WHERE Name=@tableName\n']], ["Find the date/time a table's column was created"], 2], [(1425621, 0), [["The 'parent' set has only 1 row, because of [parent.name = 'TELEVISIONS']:"], ["The 'node' set has the 4 rows that satisfy [node.lft between 2 and 9] because we can substitute the single lft/rgt values from parent:"]], [[' { name: "TELEVISIONS", lft: 2, rgt: 9 }\n']], ['How are nested set models traversed in MySQL?'], 2], [(1425621, 1), [["The 'node' set has the 4 rows that satisfy [node.lft between 2 and 9] because we can substitute the single lft/rgt values from parent:"], ['And, as you can see, the above 4 rows are alread sorted by "lft" values, so to satisfy the query, we just take the name values and we\'re done.']], [[' { name: "TELEVISIONS", lft: 2, rgt: 9 }\n{ name: "TUBE",        lft: 3, rgt: 4 }\n{ name: "LCD",         lft: 5, rgt: 6 }\n{ name: "PLASMA",      lft: 7, rgt: 8 }\n']], ['How are nested set models traversed in MySQL?'], 2], [(1426487, 0), [['This should do it:'], ["Incorporated Kane's suggestion, you can compute the phone number's formatting at runtime.  One possible approach would be to use scalar functions for this purpose (works in SQL Server):"]], [[" UPDATE TheTable\nSET PhoneNumber = SUBSTRING(PhoneNumber, 1, 3) + '-' + \n                  SUBSTRING(PhoneNumber, 4, 3) + '-' + \n                  SUBSTRING(PhoneNumber, 7, 4)\n"]], ['How to format a numeric column as phone number in SQL'], 2], [(1426487, 1), [["Incorporated Kane's suggestion, you can compute the phone number's formatting at runtime.  One possible approach would be to use scalar functions for this purpose (works in SQL Server):"], ['-10000']], [[" CREATE FUNCTION FormatPhoneNumber(@phoneNumber VARCHAR(10))\nRETURNS VARCHAR(12)\nBEGIN\n    RETURN SUBSTRING(@phoneNumber, 1, 3) + '-' + \n           SUBSTRING(@phoneNumber, 4, 3) + '-' + \n           SUBSTRING(@phoneNumber, 7, 4)\nEND\n"]], ['How to format a numeric column as phone number in SQL'], 2], [(1427469, 0), [['The only reasonable way to do this is to strip away the time portion of the datetime values and compare the results, and the best way to strip the time portion from a datetime is like this:'], ['I used to use and advocate a process that looked like one of the following two lines:  ']], [[' cast(current_timestamp as date)    \n']], ['Compare dates in T-SQL, ignoring the time part'], 2], [(1427469, 1), [['I used to use and advocate a process that looked like one of the following two lines:  '], ['But now that Sql Server has the  Date  type, which does not hold a time component, there is little reason to use either of those techniques.  ']], [[' cast(floor(cast(getdate() as float)) as datetime)\ndateadd(dd,0, datediff(dd,0, getDate()))\n']], ['Compare dates in T-SQL, ignoring the time part'], 2], [(1427918, 0), [['I think you might have a small typo:'], ['Once this is fixed it works OK:']], [[' WITH durdays AS (SELECT SYSDATE - (SYSDATE - (95 / 1440)) AS durdays FROM DUAL)\n                                                   ^^^^\nSELECT TRUNC (24 * durdays) AS durhrs,\n       MOD (TRUNC (durdays * 1440), 60) AS durmin,\n       lims_sys.duration (SYSDATE - (95 / 1400), SYSDATE) duration\n                                          ^^^^\n']], ['Oracle Duration Function'], 2], [(1427918, 1), [['Once this is fixed it works OK:'], ['-10000']], [[' SQL> WITH durdays AS (SELECT SYSDATE - (SYSDATE - (95 / 1440)) AS durdays FROM DUAL)\n  2  SELECT TRUNC (24 * durdays) AS durhrs,\n  3         MOD (TRUNC (durdays * 1440), 60) AS durmin,\n  4         duration (SYSDATE - (95 / 1440), SYSDATE) duration\n  5    FROM durdays\n  6  ;\n\n    DURHRS     DURMIN DURATION\n---------- ---------- ----------------\n         1         34 1:34\n']], ['Oracle Duration Function'], 2], [(1428505, 0), [['So you could do:'], ['Or something like:']], [[' SELECT * FROM games ORDER BY Type, Title\n']], ['How to ORDER BY based on two different columns'], 3], [(1428505, 1), [['Or something like:'], ['You can also do ascending and descending. So if you wanted Type Descending but Title Ascending:']], [[' SELECT Type, Title, Column1, Column2 FROM games ORDER BY 1, 2\n']], ['How to ORDER BY based on two different columns'], 3], [(1428505, 2), [['You can also do ascending and descending. So if you wanted Type Descending but Title Ascending:'], ['-10000']], [[' SELECT * FROM games ORDER BY Type DESC, Title ASC\n']], ['How to ORDER BY based on two different columns'], 3], [(1429898, 0), [['List of all user tables:'], ['List of columns in a table:']], [[" SELECT * FROM sysobjects WHERE type = 'U'\n"]], ['From a Sybase Database, how I can get table description ( field names and types)?'], 2], [(1429898, 1), [['List of columns in a table:'], ['-10000']], [[" SELECT sc.* \nFROM syscolumns sc\nINNER JOIN sysobjects so ON sc.id = so.id\nWHERE so.name = 'my_table_name'\n"]], ['From a Sybase Database, how I can get table description ( field names and types)?'], 2], [(1430186, 0), [["Steven, I'm wondering why you can't use:"], ['Then you could use:']], [[" CREATE OR REPLACE VIEW V_TITRATION_RESULTS AS \n  SELECT lt.test_id, \n         lt.created_on,\n         MAX(CASE WHEN result_tmpl_id = 2484 THEN result END) 'titrator', \n         MAX(CASE WHEN result_tmpl_id = 2483 THEN result END) 'factor'\n    FROM lims.test lt \n    JOIN lims.result USING (test_id) \n   WHERE lt.test_tmpl_id = 867 \nGROUP BY lt.test_id, lt.created_on\n"]], ['Tuning Rows-to-Cols Query'], 2], [(1430186, 1), [['Then you could use:'], ['-10000']], [[" SELECT vtr.* \n  FROM V_TITRATION_RESULTS vtr\n WHERE vtr.created_on > TO_DATE('2009-09-01', 'YYYY-MM-DD')\n"]], ['Tuning Rows-to-Cols Query'], 2], [(1431801, 0), [['-10000'], ['result:']], [[' SELECT car_id, wheel_id, screw_state, count(screws)\n  FROM cars C, wheels W, screws S\n WHERE W.car_id = C.car_id\n   AND S.wheel_id = W.wheel_id\n GROUP BY car_id, wheel_id, screw_state\nUNION ALL\nSELECT car_id, -1 AS wheel_id, screw_state, count(screws)\n  FROM cars C, wheels W, screws S\n WHERE W.car_id = C.car_id\n   AND S.wheel_id = W.wheel_id\n GROUP BY car_id, screw_state\nORDER BY car_id\n']], ['Joining with subqueries, counting and grouping'], 2], [(1431801, 1), [['result:'], ['-10000']], [['     car_id    wheel_id   screw_state  count(screws)\n       1          1           1          3\n       1          1           2          7\n       1          2           1          5\n       1          2           2          3\n       1         -1           1          8\n       1         -1           2         10\n       2          1           1          1\n       2         -1           1          1\n...\n']], ['Joining with subqueries, counting and grouping'], 2], [(1432114, 0), [["You'll have to use a correlated subquery:"], ['Use an outer join when you want to return every contact:']], [[' select contactid, name, department, address\nfrom t1\ninner join t2 x on t1.contactid = x.ownerid\nwhere x.added = ( select max(t2.added) from t2 where t2.ownerid = x.ownerid )\n']], ['One record selected over 1:m relationship'], 2], [(1432114, 1), [['Use an outer join when you want to return every contact:'], ['-10000']], [[' select contactid, name, department, address\nfrom t1\nouter join t2 x on t1.contactid = x.ownerid\nwhere x.added = ( select max(t2.added) from t2 where t2.ownerid = x.ownerid )\n']], ['One record selected over 1:m relationship'], 2], [(1433821, 0), [['-10000'], ['As a bonus, you can easily get this next birthday:']], [[" SELECT  u.*, CAST(CONCAT_WS('.', YEAR(SYSDATE()) + (CAST(CONCAT_WS('.', YEAR(SYSDATE()), month, day) AS DATE) < SYSDATE()), month, day) AS DATE) AS nbd\nFROM    t_users u\nORDER BY\n        nbd;\n"]], ['Extract birthdays in natural order'], 4], [(1433821, 1), [['As a bonus, you can easily get this next birthday:'], ['This query handles leap years better.']], [[" 5, 'jane',  1975, 9, 22, '2009-09-22'\n3, 'bob',   1985, 2, 14, '2010-02-14'\n4, 'joe',   1964, 2, 16, '2010-02-16'\n1, 'john',  1978, 5, 1,  '2010-05-01'\n2, 'mike',  1979, 7, 23, '2010-07-23'\n"]], ['Extract birthdays in natural order'], 4], [(1433821, 2), [['This query handles leap years better.'], ['I added a person named  Alex  who was born on  Feb 29, 1980 :']], [[" SELECT  u.*, CAST(CONCAT_WS('.', year, month, day) AS DATE),\n        CAST(CONCAT_WS('.', 1980, month, day) AS DATE) + INTERVAL YEAR(SYSDATE()) - 1980 YEAR +\n        INTERVAL CAST(CONCAT_WS('.', 1980, month, day) AS DATE) + INTERVAL YEAR(SYSDATE()) - 1980 YEAR < SYSDATE() YEAR AS nbd\nFROM    t_users u\nORDER BY\n        nbd;\n"]], ['Extract birthdays in natural order'], 4], [(1433821, 3), [['I added a person named  Alex  who was born on  Feb 29, 1980 :'], ['-10000']], [[" 5, 'jane', 1975, 9, 22, '1975-09-22', '2009-09-22'\n3, 'bob',  1985, 2, 14, '1985-02-14', '2010-02-14'\n4, 'joe',  1964, 2, 16, '1964-02-16', '2010-02-16'\n6, 'alex', 1980, 2, 29, '1980-02-29', '2010-02-28'\n1, 'john', 1978, 5, 1,  '1978-05-01', '2010-05-01'\n2, 'mike', 1979, 7, 23, '1979-07-23', '2010-07-23'\n"]], ['Extract birthdays in natural order'], 4], [(1434509, 0), [['Your update statement needs a Set for each field you want to update, so no.\nCorrect syntax: '], ['Another option is an Update and then an insert.  Example from this  blog post  :']], [[' UPDATE table1\nSET table1.field1=table2.field1, table1.field2=table2.field2 \nFROM table1 \nINNER JOIN table2 ON table1.keyfield = table2.keyfield\n']], ['Valid UPDATE, INSERT syntax?'], 2], [(1434509, 1), [['Another option is an Update and then an insert.  Example from this  blog post  :'], ['-10000']], [[' UPDATE CustomersA\n   SET CustomerName = B.CustomerName\nFROM CustomersA A (NoLock)\nINNER JOIN CustomersB B (NoLock) ON A.CustomerId = B.CustomerId\n\nAnd later run the Insert command\nINSERT INTO CustomersA (\n   CustomerId,\n   CustomerName\n)\n\nSELECT\n   Id,\n   Name\nFROM CustomersB (NoLock)\nWHERE\n   Id NOT IN (\n      SELECT CustomerId FROM CustomersA (NoLock)\n   )\n']], ['Valid UPDATE, INSERT syntax?'], 2], [(1434717, 0), [["Here is a proper answer, tested with your data. I only used the first two date types, but you'd build this up on the fly anyway."], ["van mentioned that tasks with no dates won't show up. This is correct. Using left joins (again, mentioned by van) and restructuring the query a bit will return all tasks, even though this is not your need at the moment."]], [[" Select \n    Tasks.TaskDescription,     \n    Min(Case DateType.DateDescription When 'DDR1' Then Tasks_DateType.Date End) As DDR1,     \n    Min(Case DateType.DateDescription When 'DDR2' Then Tasks_DateType.Date End) As DDR2\nFrom\n    Tasks_DateType\n    INNER JOIN Tasks ON Tasks_DateType.TaskID = Tasks.TaskID\n    INNER JOIN DateType ON Tasks_DateType.DateTypeID = DateType.DateTypeID\nGroup By\n    Tasks.TaskDescription\n"]], ['Cross Tab - Storing different dates (Meeting1, Meeting2, Meeting 3 etc) in the same column'], 2], [(1434717, 1), [["van mentioned that tasks with no dates won't show up. This is correct. Using left joins (again, mentioned by van) and restructuring the query a bit will return all tasks, even though this is not your need at the moment."], ['-10000']], [[" Select \n    Tasks.TaskDescription,     \n    Min(Case DateType.DateDescription When 'DDR1' Then Tasks_DateType.Date End) As DDR1,     \n    Min(Case DateType.DateDescription When 'DDR2' Then Tasks_DateType.Date End) As DDR2\nFrom\n    Tasks   \n    LEFT OUTER JOIN Tasks_DateType ON Tasks_DateType.TaskID = Tasks.TaskID\n    LEFT OUTER  JOIN DateType ON Tasks_DateType.DateTypeID = DateType.DateTypeID\nGroup By\n    Tasks.TaskDescription\n"]], ['Cross Tab - Storing different dates (Meeting1, Meeting2, Meeting 3 etc) in the same column'], 2], [(1434922, 0), [['Second, In analyzing your query, it seems there may be a flaw in it. if you look at the reformatted version below, '], ['EDIT: (based on Where clause change) try this:']], [[' UPDATE table SET \n    name = (SELECT TOP 1 old_name \n            FROM (SELECT SUM(r) rev, number, name,\n                    intermediate_number, intermediate_name,\n                    old_number, old_name\n                  FROM table\n                  GROUP BY number, name, intermediate_number, \n                       intermediate_name, old_number, old_name) t \n            WHERE t.old_name = table.old_name  -- HERE\n            ORDER BY rev DESC);\n']], ['Slow SQL update could use some help'], 2], [(1434922, 1), [['EDIT: (based on Where clause change) try this:'], ['-10000']], [['  UPDATE table SET \n    name =  (SELECT Top 1 old_name\n             FROM table it\n             Where it.name = table.old_name\n             GROUP BY number, intermediate_number, \n                      intermediate_name, old_number, old_name\n             Order By SUM(r) Desc);\n']], ['Slow SQL update could use some help'], 2], [(1436018, 0), [['-10000'], ['You can put']], [[" SELECT Products.name\nFROM Products\nWHERE NOT EXISTS (\n  SELECT id\n  FROM Sections\n  WHERE name IN ('new','car')\n  AND NOT EXISTS (\n    SELECT *\n    FROM Products_sections\n    WHERE Products_sections.section_id = Sections.id\n    AND Products_sections.product_id = Products.id\n  )\n)\n"]], ['Many to many query'], 5], [(1436018, 1), [['You can put'], ['The required sections are these:']], [['   NOT EXISTS (<select query>)\n']], ['Many to many query'], 5], [(1436018, 2), [['The required sections are these:'], ['Therefore, the desired products are these:']], [[" SELECT id\nFROM Sections\nWHERE name IN ('new','car')\n"]], ['Many to many query'], 5], [(1436018, 3), [['Therefore, the desired products are these:'], ['Step 4. If the query below  does  contain a row, the section_id section  does  contain the product_id product:']], [[" SELECT Products.name\nFROM Products\nWHERE NOT EXISTS ( -- there does not exist\n  SELECT id  -- a section\n  FROM Sections\n  WHERE name IN ('new','car') -- that is required\n   AND (the section identified by Sections.id fails to contain the product identified by Products.id)\n)\n"]], ['Many to many query'], 5], [(1436018, 4), [['Step 4. If the query below  does  contain a row, the section_id section  does  contain the product_id product:'], ["So the section_id section  fails to contain  the product (and that's what we need to express) if the query above does  not  produce a row in its result, or if NOT EXISTS ()."]], [[' SELECT *\nFROM Products_sections\nWHERE Products_sections.section_id = Sections.id\nAND Products_sections.product_id = Products_id\n']], ['Many to many query'], 5], [(1437860, 0), [['In order to prevent a user from connecting you could lock the account:'], ['If you want to disconnect all sessions of a user, you could use the  method described in another SO :']], [[' ALTER USER usr ACCOUNT LOCK;\n']], ['Dropping Oracle connections using a query'], 2], [(1437860, 1), [['If you want to disconnect all sessions of a user, you could use the  method described in another SO :'], ['-10000']], [[" BEGIN\n   FOR x IN (SELECT Sid, Serial# FROM v$session WHERE username = 'USR') LOOP\n      EXECUTE IMMEDIATE 'Alter System Kill Session ''' || x.Sid || ',' \n                        || x.Serial# || ''' IMMEDIATE';\n   END LOOP;\nEND;\n"]], ['Dropping Oracle connections using a query'], 2], [(1437900, 0), [['You need to keep cumulative offset for each value:'], ['Then we order the values by their fractional part (ones that are closer to their ceiling go first) and round the first  N  up, the others down.']], [[' 1.2   (1 + 0.0)  ~ 1    1   1.2   +0.2\n1.2   (1 + 0.2)  ~ 1    2   2.4   +0.4\n1.2   (1 + 0.4)  ~ 1    3   3.6   +0.6\n1.2   (1 + 0.6)  ~ 2    5   4.8   -0.2\n1.2   (1 - 0.2)  ~ 1    6   6.0   0.0\n']], ['How can I round a column in a single SQL request without changing the overall sum?'], 3], [(1437900, 1), [['Then we order the values by their fractional part (ones that are closer to their ceiling go first) and round the first  N  up, the others down.'], ["Here's the script for the test data:"]], [[' SELECT  value,\n        FLOOR(value) + CASE WHEN ROW_NUMBER() OVER (ORDER BY value - FLOOR(value) DESC) <= cs THEN 1 ELSE 0 END AS nvalue\nFROM    (\n        SELECT  cs, value\n        FROM    (\n                SELECT  SUM(value) - SUM(FLOOR(value)) AS cs\n                FROM    @mytable\n                ) c\n        CROSS JOIN\n                @mytable\n        ) q\n']], ['How can I round a column in a single SQL request without changing the overall sum?'], 3], [(1437900, 2), [["Here's the script for the test data:"], ['-10000']], [[' SET NOCOUNT ON\nGO\nSELECT  RAND(0.20090917)\nDECLARE @mytable TABLE (value FLOAT NOT NULL)\nDECLARE @cnt INT;\nSET @cnt = 0;\nWHILE @cnt < 100\nBEGIN\n        INSERT\n        INTO    @mytable\n        VALUES  (FLOOR(RAND() * 100) / 10)\n        SET @cnt = @cnt + 1\nEND\n\nINSERT\nINTO    @mytable\nSELECT  600 - SUM(value)\nFROM    @mytable\n']], ['How can I round a column in a single SQL request without changing the overall sum?'], 3], [(1438059, 0), [['example:\nreplace'], ['with']], [[' \\nResidence Tel:  \n']], ['converting data to mysql database'], 2], [(1438059, 1), [['with'], ['3.Use any utility to insert these records to the database, google for csv import to my sql.']], [[' ,\n']], ['converting data to mysql database'], 2], [(1438978, 0), [['-10000'], ['To have the associated date, you could do (beware, this implies a sequential id):']], [[' SELECT\n  MAX(id) id,\n  po_nbr\nFROM\n  temp\nGROUP BY\n  po_nbr\n']], ['SQL Query to Get Max Value Based on Different Max Value Given Multiple Records'], 3], [(1438978, 1), [['To have the associated date, you could do (beware, this implies a sequential id):'], ['Without a sequential id, it would be:']], [[' SELECT\n  temp.id,\n  temp.po_nbr,\n  temp.crt_ts\nFROM\n  temp\n  INNER JOIN (\n    SELECT MAX(id) id FROM temp GROUP BY po_nbr\n  ) latest ON latest.id = temp.id\n']], ['SQL Query to Get Max Value Based on Different Max Value Given Multiple Records'], 3], [(1438978, 2), [['Without a sequential id, it would be:'], ['The  GROUP BY  can be left out if there are guaranteed to be no two equal dates per  po_nbr  group.']], [[' SELECT\n  MAX(temp.id) id,\n  temp.po_nbr,\n  temp.crt_ts\nFROM\n  temp INNER JOIN (\n    SELECT   MAX(crt_ts) crt_ts, po_nbr \n    FROM     temp i\n    GROUP BY po_nbr\n  ) latest ON latest.crt_ts = temp.crt_ts AND latest.po_nbr = temp.po_nbr\nGROUP BY\n  temp.po_nbr,\n  temp.crt_ts\n']], ['SQL Query to Get Max Value Based on Different Max Value Given Multiple Records'], 3], [(1440122, 0), [["I think you're better off with your Python solution ... but I like challenges :)"], ['Tested on MySQL']], [[' select mydate\n     , case dayadjust\n-- BUG\n--         when 0 then mydate\n-- BUG\n           when 0 then case\n                 when hour(mydate)<9\n                       then date_add(from_days(to_days(mydate)),\n                               INTERVAL 9 HOUR)\n                 else mydate\n           end\n-- BUG SQUASHED\n           else date_add(from_days(to_days(mydate) + dayadjust),\n                         INTERVAL 9 HOUR)\n       end as mynewdate\nfrom (\n        select mydate\n             , case\n                   when addday>=moreday then addday\n                   else moreday\n               end as dayadjust\n        from (\n                select mydate\n                     , weekday(mydate) as w\n                     , hour(mydate) as h\n                     , case weekday(mydate)\n                           when 6 then 1\n                           when 5 then 2\n                           when 4 then\n                                   case\n                                         when hour(mydate) >= 18 then 3\n                                         else 0\n                                   end\n                           else 0\n                       end as addday\n                     , case when hour(mydate)>=18 then 1 else 0 end as moreday\n                from mytable\n                order by mydate\n        ) alias1\n) alias2\n']], ['SQL - Normalising timestamps to business hours'], 2], [(1440122, 1), [['Tested on MySQL'], ['-10000']], [[' $ mysql tmp < phil.sql\nmydate  mynewdate\n2009-09-12 17:03:09     2009-09-14 09:00:00\n2009-09-12 21:03:09     2009-09-14 09:00:00\n2009-09-13 17:03:09     2009-09-14 09:00:00\n2009-09-14 09:45:49     2009-09-14 09:45:49\n2009-09-15 09:57:28     2009-09-15 09:57:28\n2009-09-16 21:55:01     2009-09-17 09:00:00\n2009-09-17 11:03:09     2009-09-17 11:03:09\n2009-09-17 22:03:09     2009-09-18 09:00:00\n2009-09-18 12:03:09     2009-09-18 12:03:09\n2009-09-18 19:03:09     2009-09-21 09:00:00\n2009-09-19 06:03:09     2009-09-21 09:00:00\n2009-09-19 16:03:09     2009-09-21 09:00:00\n2009-09-19 19:03:09     2009-09-21 09:00:00\n']], ['SQL - Normalising timestamps to business hours'], 2], [(1440841, 0), [['Something like this may work for you:'], ['Ok, try something like this:']], [[' select *\nfrom Email \norder by coalesce(IN-REF-TO, REF-NUM) desc, CREATE-DATE\n']], ['(SQL Query, Email) Need a query to find "thread items" based on a field in the same table'], 2], [(1440841, 1), [['Ok, try something like this:'], ['-10000']], [[" select e1.*\nfrom Email e1\nleft outer join Email e2 on e1.IN-REF-TO like '%' + e2.REF-NUM + '%'\norder by coalesce(e2.REF-NUM, e1.REF-NUM), CREATE-DATE\n"]], ['(SQL Query, Email) Need a query to find "thread items" based on a field in the same table'], 2], [(1440848, 0), [['Is there a particular reason that you need to use OPENXML to do this?  You can easily get the information with a XQUERY in 2005 like this:'], ['EDIT:\nThe same solution with OPENXML would be:']], [[' declare @xmldata xml    \nset @xmldata = \n\'<data xmlns="http://www.aaa.com/master_browse_response" xmlns:dt="http://www.aaa.com/DataTypes">\n  <products>\n    <product>\n      <product_id>121403</product_id>\n      <countries>\n        <dt:country>GBR</dt:country>\n        <dt:country>USA</dt:country>\n      </countries>\n    </product>\n  </products>\n</data>\'\n\n;WITH XMLNAMESPACES \n(\n    DEFAULT \'http://www.aaa.com/master_browse_response\',\n    \'http://www.aaa.com/DataTypes\' as dt\n)\nSELECT  x.c.value(\'(../../product_id)[1]\', \'varchar(100)\') as product_id,\n        x.c.value(\'(.)[1]\', \'varchar(100)\') as country\nFROM @xmldata.nodes(\'/data/products/product/countries/dt:country\') x(c)\n']], ['OPENXML with xmlns:dt'], 2], [(1440848, 1), [['EDIT:\nThe same solution with OPENXML would be:'], ['-10000']], [[' declare @xmldata xml    \nset @xmldata = \n\'<data xmlns="http://www.aaa.com/master_browse_response" xmlns:dt="http://www.aaa.com/DataTypes">\n  <products>\n    <product>\n      <product_id>121403</product_id>\n      <countries>\n        <dt:country>GBR</dt:country>\n        <dt:country>USA</dt:country>\n      </countries>\n    </product>\n  </products>\n</data>\'\n\nDECLARE @hDoc int, @rootxmlns varchar(100)\nSET @rootxmlns = \'<root xmlns:hm="http://www.aaa.com/master_browse_response" xmlns:dt="http://www.aaa.com/DataTypes"/>\'\nEXEC sp_xml_preparedocument @hDoc OUTPUT, @xmldata, @rootxmlns\n\nSELECT *\nFROM OPENXML(@hDoc, \'//hm:product/hm:countries/dt:country\',2)\n        WITH(Country    varchar(100) \'.\',\n             Product_ID varchar(100) \'../../hm:product_id\')\n\nEXEC sp_xml_removedocument @hDoc\n']], ['OPENXML with xmlns:dt'], 2], [(1440878, 0), [["MySQL can only use the index if it just happens to be sorted the same way as your query. Let's say that your records for  (table_id,my_field)  are"], ['An index on  (my_field,table_id)  would be stored like this']], [[' (1,1), (2,28), (3,14), (4,20)\n']], ['MySQL: Avoid filesort when using IN and ORDER BY'], 4], [(1440878, 1), [['An index on  (my_field,table_id)  would be stored like this'], ["When executing the query from your IN example  (for simplicity's sake, we'll say that your ORDER BY is ASCending) , MySQL would find"]], [[' (1,1), (14,3), (20,4), (28,2)\n']], ['MySQL: Avoid filesort when using IN and ORDER BY'], 4], [(1440878, 2), [["When executing the query from your IN example  (for simplicity's sake, we'll say that your ORDER BY is ASCending) , MySQL would find"], ['If you have to sort thousands of rows, you may get better results by using a small derived table, especially if each row is really big (lots of fields, BLOBs, etc...)']], [[' (1,1), (20,4), (28,2)\n']], ['MySQL: Avoid filesort when using IN and ORDER BY'], 4], [(1440878, 3), [['If you have to sort thousands of rows, you may get better results by using a small derived table, especially if each row is really big (lots of fields, BLOBs, etc...)'], ['You will trade the filesort for a derived table. In some cases, it can be much more performant and in others, slightly less. YMMV']], [['   SELECT t.*\n    FROM (\n          SELECT table_id FROM my_table WHERE my_field IN (1, 28, 20)\n         ) tmp\n    JOIN my_table t USING (table_id)\nORDER BY t.table_id DESC\n']], ['MySQL: Avoid filesort when using IN and ORDER BY'], 4], [(1441570, 0), [["I didn't think the HAVING clause could accommodate what you'd posted, but I believe your view should be written to use UNIONs instead.  Here's my take on it:"], ['If you want to filter out duplicates between the 3 SQL statements, change  UNION ALL  to  UNION .  Then you can use:']], [[' ALTER VIEW [dbo].[wpvw_v] AS\nWITH names AS(\n  SELECT k.name\n    FROM KVGS k \n   WHERE EXISTS(SELECT NULL\n                  FROM CDES c\n                 WHERE c.kgi = k.kvgi\n              GROUP BY c.kgi\n                HAVING COUNT(c.kgi) > 1)\n  UNION ALL\n  SELECT k.name\n    FROM KVGS k \n   WHERE k.mu = 1\nGROUP BY k.name\n  UNION ALL\n  SELECT k.name\n    FROM KVGS k \n    JOIN FP x ON x.name = k.name\nGROUP BY k.name)\nSELECT n.name\n  FROM names n\n']], ['Database Query Slower with View'], 2], [(1441570, 1), [['If you want to filter out duplicates between the 3 SQL statements, change  UNION ALL  to  UNION .  Then you can use:'], ['-10000']], [[' SELECT n.name\n  FROM wpvw_v n\n WHERE CHARINDEX(@name, n.name) > 0\n']], ['Database Query Slower with View'], 2], [(1442527, 0), [["Here's how I solve it with outer joins:"], ['Another solution that works but relies on the MySQL user-variables feature:']], [[' SELECT i1.*\nFROM item i1\nLEFT OUTER JOIN item i2\n  ON (i1.category_id = i2.category_id AND i1.item_id < i2.item_id)\nGROUP BY i1.item_id\nHAVING COUNT(*) < 4\nORDER BY category_id, date_listed;\n']], ['How to SELECT the newest four items per category?'], 3], [(1442527, 1), [['Another solution that works but relies on the MySQL user-variables feature:'], ['MySQL 8.0.3 introduced support for SQL standard window functions. Now we can solve this sort of problem the way other RDBMS do:']], [[' SELECT *\nFROM (\n    SELECT i.*, @r := IF(@g = category_id, @r+1, 1) AS rownum, @g := category_id\n    FROM (@g:=null, @r:=0) AS _init\n    CROSS JOIN item i\n    ORDER BY i.category_id, i.date_listed\n) AS t\nWHERE t.rownum <= 3;\n']], ['How to SELECT the newest four items per category?'], 3], [(1442527, 2), [['MySQL 8.0.3 introduced support for SQL standard window functions. Now we can solve this sort of problem the way other RDBMS do:'], ['-10000']], [[' WITH numbered_item AS (\n  SELECT *, ROW_NUMBER() OVER (PARTITION BY category_id ORDER BY item_id) AS rownum\n  FROM item\n)\nSELECT * FROM numbered_item WHERE rownum <= 4;\n']], ['How to SELECT the newest four items per category?'], 3], [(1442576, 0), [['A variation on your first query would be:'], ['For your second:']], [[' select count(*) \nfrom images_to_tags\ngroup by image_id\n']], ['MySQL Query Questions with a Foreign Key Database'], 2], [(1442576, 1), [['For your second:'], ['-10000']], [[' select type, count(*) \nfrom images \nwhere id in (select image_id from images_to_tags)\ngroup by type\n']], ['MySQL Query Questions with a Foreign Key Database'], 2], [(1443555, 0), [['by MONTH:'], ['by WEEK:']], [[" SELECT  SUM(IdleSec) AS TotalIdleSec, \n        SUM(ProductionSec) AS TotalProductionSec, \n        SUM(UplineSec) AS TotalUplineSec, \n        SUM(DownlineSec) AS TotalDownlineSec, \n        SUM(UserSec) AS TotalUserSec,\n        DATEPART(year, DateTime) as Year,\n        DATEPART(month, DateTime) as Month\nFROM            Job\nWHERE   (DateTime >= dbo.FormatDateTime(@Param1, 'yyyy-mm-dd')) \n        AND \n        (DateTime < dbo.FormatDateTime(@Param2, 'yyyy-mm-dd'))\nGROUP BY DATEPART(year, DateTime),\n        DATEPART(month, DateTime);\n"]], ['SQL Syntax: Select results for each date between a range of dates'], 3], [(1443555, 1), [['by WEEK:'], ['by DAY:']], [[" SELECT  SUM(IdleSec) AS TotalIdleSec, \n        SUM(ProductionSec) AS TotalProductionSec, \n        SUM(UplineSec) AS TotalUplineSec, \n        SUM(DownlineSec) AS TotalDownlineSec, \n        SUM(UserSec) AS TotalUserSec,\n        DATEPART(year, DateTime) as Year,\n        DATEPART(week, DateTime) as Week\nFROM            Job\nWHERE   (DateTime >= dbo.FormatDateTime(@Param1, 'yyyy-mm-dd')) \n        AND \n        (DateTime < dbo.FormatDateTime(@Param2, 'yyyy-mm-dd'))\nGROUP BY DATEPART(year, DateTime),\n        DATEPART(week, DateTime);\n"]], ['SQL Syntax: Select results for each date between a range of dates'], 3], [(1443555, 2), [['by DAY:'], ['For DAY there are other options like using CAST to extract the day part or the FormatDateTime function you seem to have. I used  DATEPART  for consistency.']], [["  SELECT  SUM(IdleSec) AS TotalIdleSec, \n        SUM(ProductionSec) AS TotalProductionSec, \n        SUM(UplineSec) AS TotalUplineSec, \n        SUM(DownlineSec) AS TotalDownlineSec, \n        SUM(UserSec) AS TotalUserSec,\n        DATEPART(year, DateTime) as Year,\n        DATEPART(dayofyar, DateTime) as Day\nFROM            Job\nWHERE   (DateTime >= dbo.FormatDateTime(@Param1, 'yyyy-mm-dd')) \n        AND \n        (DateTime < dbo.FormatDateTime(@Param2, 'yyyy-mm-dd'))\nGROUP BY DATEPART(year, DateTime),\n        DATEPART(dayofyear, DateTime);\n"]], ['SQL Syntax: Select results for each date between a range of dates'], 3], [(1443979, 0), [['If you want the text corresponding to that [Id] & that [MaxDate], you can do this:'], ['if [Id] & [Date] form a primary key you will have a single row per (Id, Date) other wise many. If you really want one, either you put other constraints or use MAX or MIN::']], [[' SELECT T2.*, T1.Text\nFROM [ExampleTable] T1\n     JOIN (SELECT \n               [Id],\n               MAX([Date]) MaxDate,\n               COUNT(*) Cnt\n             FROM\n               [ExampleTable]\n         GROUP BY [Id]) T2\n     ON T1.Id = T2.Id AND T1.Date = T2.MaxDate\nORDER BY [Date] DESC\n']], ['SQL: How To Find The Top String Column Value in a Grouped Query'], 3], [(1443979, 1), [['if [Id] & [Date] form a primary key you will have a single row per (Id, Date) other wise many. If you really want one, either you put other constraints or use MAX or MIN::'], ['If you want just a value for Text you can use MAX or MIN:']], [[' SELECT T2.*, MAX(T1.Text) Text -- or MIN(T1.Text)\nFROM [ExampleTable] T1\n     JOIN (SELECT \n               [Id],\n               MAX([Date]) MaxDate,\n               COUNT(*) Cnt\n             FROM\n               [ExampleTable]\n         GROUP BY [Id]) T2\n     ON T1.Id = T2.Id AND T1.Date = T2.MaxDate\nGROUP BY T2.*\nORDER BY [Date] DESC\n']], ['SQL: How To Find The Top String Column Value in a Grouped Query'], 3], [(1443979, 2), [['If you want just a value for Text you can use MAX or MIN:'], ['-10000']], [[' SELECT \n   [Id],\n   MAX([Date]),\n   MAX([Text]),\n   COUNT(*)\nFROM\n   [ExampleTable]\nGROUP BY [Id]\nORDER BY [Date] DESC\n']], ['SQL: How To Find The Top String Column Value in a Grouped Query'], 3], [(1445597, 0), [['For the index to be usable, you should rewrite the query a little:'], ['For instance, I just ran this query:']], [[" SELECT  *\nFROM    sqinquiries_inquiry\nWHERE   MATCH (names, emails) AGAINST ('smith' IN BOOLEAN MODE)\nORDER BY\n        id DESC\nLIMIT 100\n"]], ['MySQL "Sending data" horribly slow'], 3], [(1445597, 1), [['For instance, I just ran this query:'], ['which returned a single row and this profile:']], [[' SET profiling = 1;\n\nSELECT  *\nFROM    t_source\nWHERE   id + 1 = 999999;\n\nSHOW PROFILE FOR QUERY 39;\n']], ['MySQL "Sending data" horribly slow'], 3], [(1445597, 2), [['which returned a single row and this profile:'], ['Since the index is not usable,  MySQL  needs to perform the full table scan.']], [[" 'starting', 0.000106\n'Opening tables', 0.000017\n'System lock', 0.000005\n'Table lock', 0.000014\n'init', 0.000033\n'optimizing', 0.000009\n'statistics', 0.000013\n'preparing', 0.000010\n'executing', 0.000003\n'Sending data', 0.126565\n'end', 0.000007\n'query end', 0.000004\n'freeing items', 0.000053\n'logging slow query', 0.000002\n'cleaning up', 0.000005\n"]], ['MySQL "Sending data" horribly slow'], 3], [(1446146, 0), [['-10000'], ['It will give you the result:']], [[' SELECT p.name AS prize, c.name AS contestant FROM contestants c\nINNER JOIN entries e ON c.id = e.contestant_id\nINNER JOIN prizes p ON e.prize_id = p.id\nORDER BY p.id\n']], ['MySQL Query: Join and Group'], 4], [(1446146, 1), [['It will give you the result:'], ['If you want to have the list like this:']], [[' prize 1 | contestant 1.1\nprize 1 | contestant 1.2\n...\nprize 1 | contestant 1.n\nprize 2 | contestant 2.1\nprize 2 | contestant 2.2\n...\nprize 2 | contestant 2.n\n....\nprize m | contestant m.n\n']], ['MySQL Query: Join and Group'], 4], [(1446146, 2), [['If you want to have the list like this:'], ['It can be something like this:']], [[' prize 1\n    contestant 1.1\n    contestant 1.2\n    ...\n    contestant 1.n  \nprize 2\n    contestant 2.1\n    contestant 2.2\n    ...\n    contestant 2.n\n']], ['MySQL Query: Join and Group'], 4], [(1446146, 3), [['It can be something like this:'], ['-10000']], [[' $old_prize = \'\';\n\n$result = mysql_query(<above query>);\n\nwhile ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {\n\n    if($old_prize != $row["prize"]) {\n        $old_prize = $row["prize"];\n        echo "Prize: ".$row["prize"].\'<br />\'; \n    }\n\n    echo $row["contestant"].\'<br />;\n}\n']], ['MySQL Query: Join and Group'], 4], [(1446440, 0), [['Give this a shot:'], ["The equivalent alternative using inline views - they'll perform the same, just that subquery factoring is only supported since 9i:"]], [[" WITH titrate AS (\n     SELECT r.test_id,\n            MAX(r.result) 'titrator'\n       FROM LIMS.RESULT r\n      WHERE r.result_tmpl_id = 4\n   GROUP BY r.test_id),\n    factor AS (\n     SELECT r.test_id,\n            MAX(r.result) 'factor'\n       FROM LIMS.RESULT r\n      WHERE r.result_tmpl_id = 3\n   GROUP BY r.test_id),\n     created AS (\n     SELECT t.sample_id,\n            MAX(t.created_on) 'created'\n       FROM LIMS.TEST t\n   GROUP BY t.sample_id)\n   SELECT s.sampled_on,\n          ti.titrator,\n          f.factor,\n          t.created\n     FROM LIMS.SAMPLE s\n     JOIN created t ON t.sample_id = s.sample_id\nLEFT JOIN titrate ti ON ti.test_id = t.test_id\nLEFT JOIN factor f ON f.test_id = t.test_id\n"]], ['Tuning Multi-Level Rows-to-Cols Query'], 2], [(1446440, 1), [["The equivalent alternative using inline views - they'll perform the same, just that subquery factoring is only supported since 9i:"], ['-10000']], [["    SELECT s.sampled_on,\n          ti.titrator,\n          f.factor,\n          t.created\n     FROM LIMS.SAMPLE s\n     JOIN (SELECT t.sample_id,\n                  MAX(t.created_on) 'created'\n             FROM LIMS.TEST t\n         GROUP BY t.sample_id) t ON t.sample_id = s.sample_id\nLEFT JOIN (SELECT r.test_id,\n                  MAX(r.result) 'titrator'\n             FROM LIMS.RESULT r\n            WHERE r.result_tmpl_id = 4\n         GROUP BY r.test_id) ti ON ti.test_id = t.test_id\nLEFT JOIN (SELECT r.test_id,\n                  MAX(r.result) 'factor'\n             FROM LIMS.RESULT r\n            WHERE r.result_tmpl_id = 3\n         GROUP BY r.test_id) f ON f.test_id = t.test_id\n"]], ['Tuning Multi-Level Rows-to-Cols Query'], 2], [(1446775, 0), [['... then you iterate over your results with the CURSOR and dynamically run the DDL like:'], ['Edit: added null-ability check as well:']], [[' ALTER TABLE myTable ALTER COLUMN myColumn datetime [NOT] NULL\n']], ['T-SQL: Convert datatime2 to datetime for all columns of type datetime2'], 2], [(1446775, 1), [['Edit: added null-ability check as well:'], ['-10000']], [[" DECLARE @SQL AS NVARCHAR(1024)\nDECLARE @TBL AS NVARCHAR(255)\nDECLARE @COL AS NVARCHAR(255)\nDECLARE @NUL AS BIT\nDECLARE CUR CURSOR FAST_FORWARD FOR\n    SELECT  t.name, c.name, c.is_nullable\n    FROM    sys.tables AS t\n    JOIN    sys.columns c ON t.object_id = c.object_id\n    JOIN    information_schema.columns i ON i.TABLE_NAME = t.name AND i.COLUMN_NAME = c.name\n    WHERE   i.data_type = 'datetime2'\n    ORDER BY t.name, c.name\n\nOPEN CUR\nFETCH NEXT FROM CUR INTO @TBL, @COL, @NUL\nWHILE @@FETCH_STATUS = 0\nBEGIN\n    SELECT @SQL = 'ALTER TABLE ' + @TBL + ' ALTER COLUMN ' + @COL + ' datetime' + (CASE WHEN @NUL=1 THEN '' ELSE ' NOT' END) + ' NULL;'\n    EXEC sp_executesql @SQL\n    FETCH NEXT FROM CUR INTO @TBL, @COL, @NUL\nEND\n\nCLOSE CUR;\nDEALLOCATE CUR;\n"]], ['T-SQL: Convert datatime2 to datetime for all columns of type datetime2'], 2], [(1446821, 0), [['next:'], ['previous:']], [[' select * from foo where id = (select min(id) from foo where id > 4)\n']], ['How to get next/previous record in MySQL?'], 2], [(1446821, 1), [['previous:'], ['-10000']], [[' select * from foo where id = (select max(id) from foo where id < 4)\n']], ['How to get next/previous record in MySQL?'], 2], [(1448192, 0), [['Everything:'], ['First select needed columns (beginning with col...) from database schema table:']], [[' SELECT * FROM mytable\n']], ['Can a MySQL SELECT statement work without specifying column names?'], 3], [(1448192, 1), [['First select needed columns (beginning with col...) from database schema table:'], ['then select values:']], [[" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS\n  WHERE table_name = 'mytable' AND column_name LIKE 'col%'\n"]], ['Can a MySQL SELECT statement work without specifying column names?'], 3], [(1448192, 2), [['then select values:'], ['-10000']], [[' SELECT [found column names from previous query] FROM mytable\n']], ['Can a MySQL SELECT statement work without specifying column names?'], 3], [(1449143, 0), [['So you want the rows ( a1 ) from  Attributes  such that no other row with the same  node_id  is associated with a lower priority.'], ["Note that this can result in ties.  You haven't described how you would resolve ties if two Attributes referenced Types with the same priority.  In other words, in the following examples, which attributes should be selected?"]], [[' SELECT a1.*\nFROM Attributes a1 INNER JOIN Type t1 ON (a1.type_id = t1.id)\nLEFT OUTER JOIN (\n  (Attributes a2 INNER JOIN Type t2 ON (a2.type_id = t2.id))\n  ON (a1.node_id = a2.node_id AND t1.priority > t2.priority)\nWHERE a2.node_id IS NULL;\n']], ['Selecting distinct identity rows based on the lowest value of a joined priority column'], 2], [(1449143, 1), [["Note that this can result in ties.  You haven't described how you would resolve ties if two Attributes referenced Types with the same priority.  In other words, in the following examples, which attributes should be selected?"], ['PS: I hope you don\'t mind I added the "greatest-n-per-group" tag to your question.  Click that tag to see other questions on SO that I have tagged similarly.']], [[' a1 n1 t1 p0 \na2 n1 t1 p0 \na3 n2 t2 p1 \na4 n2 t3 p1 \n']], ['Selecting distinct identity rows based on the lowest value of a joined priority column'], 2], [(1449952, 0), [["Add the log,bad and discard options to your command and look what's in it."], ['I use a controlfile for csv files created from excell like this:']], [[' #>sqlldr userid=username/password control=yourcontrolfile.ctl data=yourdata.csv log=yourlogfile.log bad=yourbadfile.bad  discard=yourdiscardfile.disc\n']], ['SQL LOADER GIVING ERROR'], 2], [(1449952, 1), [['I use a controlfile for csv files created from excell like this:'], ['Skip = 6 is to skip the headers from the file']], [[' options (skip =6)\nload data\nappend\ninto table table_name\nfields terminated by "," optionally enclosed by \'"\'\n(column_name1\n,column_name2\n,etc.\n)\n']], ['SQL LOADER GIVING ERROR'], 2], [(1450883, 0), [['In mysql the only way I can think of is to add a couple of utility columns like'], ['and add a couple of triggers that set  u0  and  u1  to the least and greatest of the two:']], [[' CREATE TABLE tbl_challenger (\n  host int,\n  challenger int,\n  u0 int, u1 int\n);\n']], ['How to implement a bidirectional unique index across multiple columns'], 4], [(1450883, 1), [['and add a couple of triggers that set  u0  and  u1  to the least and greatest of the two:'], ['then you add a unique index on  (u0,u1)']], [[' CREATE TRIGGER uinsert BEFORE INSERT ON tbl_challenger\n FOR EACH ROW SET NEW.u0 = LEAST(NEW.host,NEW.challenger),\n  NEW.u1 = GREATEST(NEW.host,NEW.challenger);\nCREATE TRIGGER uupdate BEFORE UPDATE ON tbl_challenger\n FOR EACH ROW SET NEW.u0 = LEAST(NEW.host,NEW.challenger),\n  NEW.u1 = GREATEST(NEW.host,NEW.challenger);\n']], ['How to implement a bidirectional unique index across multiple columns'], 4], [(1450883, 2), [['then you add a unique index on  (u0,u1)'], ['On a decent RDBMS like  PostgreSQL  you would be able to use index on expression:']], [[' CREATE UNIQUE INDEX uniqueness ON tbl_challenger(u0,u1);\n']], ['How to implement a bidirectional unique index across multiple columns'], 4], [(1450883, 3), [['On a decent RDBMS like  PostgreSQL  you would be able to use index on expression:'], ["So, switch before it's too late ;-)"]], [[' CREATE UNIQUE INDEX uniqueness ON tbl_challenger\n    ( LEAST(host,challenger), GREATEST( host,challenger) );\n']], ['How to implement a bidirectional unique index across multiple columns'], 4], [(1452839, 0), [['-10000'], ['Alternatively, you can do this (it will list ties of high score for a date):']], [[' with mytableRanked(d,scoredatetime,score,rk) as (\n  select\n    scoredatetime,\n    score,\n    row_number() over (\n      partition by trunc(scoredatetime)\n      order by score desc, scoredatetime desc\n    )\n  from mytable\n)\n  select\n    scoredatetime,\n    score\n  from mytableRanked    \n  where rk = 1\n  order by date desc\n']], ['select maximum score grouped by date, display full datetime'], 2], [(1452839, 1), [['Alternatively, you can do this (it will list ties of high score for a date):'], ['-10000']], [[' select\n  scoredatetime,\n  score\nfrom mytable\nwhere not exists (\n  select *\n  from mytable as M2\n  where trunc(M2.scoredatetime) = trunc(mytable.scoredatetime)\n  and M2.score > mytable.scoredatetime\n)\norder by scoredatetime desc\n']], ['select maximum score grouped by date, display full datetime'], 2], [(1453567, 0), [["I'm sure it does what you want. It translates the query to a parameterized  IN  clause like:"], ['and passes the contents of the list as values to those parameters. You can confirm this with tools such as SQL Profiler and LINQ to SQL debugger visualizer or set the  DataContext.Log  property to console (before executing the query) and read the generated SQL:']], [[' ... IN (@p1, @p2, @p3)\n']], ['LINQ-to-SQL IN ()'], 2], [(1453567, 1), [['and passes the contents of the list as values to those parameters. You can confirm this with tools such as SQL Profiler and LINQ to SQL debugger visualizer or set the  DataContext.Log  property to console (before executing the query) and read the generated SQL:'], ['-10000']], [[' dataContext.Log = Console.Out;\n']], ['LINQ-to-SQL IN ()'], 2], [(1457722, 0), [['By keeping the table as-is, and building an index on each of the name-related columns, the following query provides an inefficient but plausible way of finding all persons whose name matches  somehow  a particular name. (Jack in the example)'], ['Introducing a "Names" table.\nInstead (or in addition...) of storing the various names in the tblPersons table, we can introduce an extra table. and relate it to tblPersons.']], [[" SELECT * from tblPersons\nWHERE First = 'Jack' OR Last = 'Jack' OR Middle = 'Jack' \n  OR Maiden = 'Jack' OR Nick = 'Jack'\n"]], ['Searching a database of names'], 4], [(1457722, 1), [['Introducing a "Names" table.\nInstead (or in addition...) of storing the various names in the tblPersons table, we can introduce an extra table. and relate it to tblPersons.'], ['Then the query would become']], [[' tblNames\n  PersonID   (used to relate with tblPersons)\n  NameType   (single letter code, say F, L, M, U, N for First, Last...)\n  Name\n']], ['Searching a database of names'], 4], [(1457722, 2), [['Then the query would become'], ['Such a layout/structure would be more efficient.  Furthermore this query would lend itself to offer the "given" vs. "surname" capability easily, just by adding to the WHERE clause']], [[" SELECT [DISTINCT] * from tblPersons P\nJOIN tblNames N ON N.PersonID = P.PersonID\nWHERE N.Name = 'Jack'\n"]], ['Searching a database of names'], 4], [(1457722, 3), [['Such a layout/structure would be more efficient.  Furthermore this query would lend itself to offer the "given" vs. "surname" capability easily, just by adding to the WHERE clause'], ['Another interest of this approach is that it would allow storing other kinds of names in there, for example the  SOUNDEX  form of every name could be added, under their own NameType(s), allowing to easily find names even if the spelling is approximate.']], [['       AND N.NameType IN (\'F\', \'M\', \'N\')  -- for the "given" names\n  (or)\n      AND N.NameType IN (\'L\', \'U\', \'N\')  -- for the "surname" types.  Note that\n        -- we put Nick name in there, but could just as eaily remove it.\n']], ['Searching a database of names'], 4], [(1458551, 0), [['This is a variation of the "greatest-n-per-group" problem that comes up on StackOverflow several times per week.'], ["Re your comment, I just tried it with the sample data you provided.  Here's what I get:"]], [[" SELECT \n        a1.accessid, \n        a1.date, \n        a1.time \nFROM \n        accesslog a1\nLEFT OUTER JOIN\n        accesslog a2\n  ON (a1.accessid = a2.accessid AND a1.userid = a2.userid\n    AND (a1.date > a2.date OR a1.date = a2.date AND a1.time > a2.time))\nWHERE a1.userid = '1234'\n  AND a2.accessid IS NULL;\n"]], ['Select Earliest Date and Time from List of Distinct User Sessions'], 2], [(1458551, 1), [["Re your comment, I just tried it with the sample data you provided.  Here's what I get:"], ["I'm using MySQL 5.0.75 on Mac OS X."]], [[' +----------+------------+----------+\n| accessid | date       | time     |\n+----------+------------+----------+\n|        1 | 2009-08-15 | 01:01:01 | \n|        2 | 2009-09-01 | 14:01:01 | \n+----------+------------+----------+\n']], ['Select Earliest Date and Time from List of Distinct User Sessions'], 2], [(1459738, 0), [["First, you'll want this to be split into two stored procedures. If you are ever using a bit to determine which chunk of code to execute, you're probably trying to put too much into one stored procedure."], ['You could do something like this for the stored procdure that will get all messages for a specific user. You don\'t want to use "Select *", here. You should always list the specific columns you need. I listed a few example columns.']], [[' CREATE PROCEDURE dbo.GetMessageCount (\n  @username nchar(12),\n  @message_count int OUTPUT,\n  @unread_message_count int OUTPUT\n) AS\n\nSELECT\n    @message_count = SUM(CASE WHEN message_read = 1 THEN 1 ELSE 0 END),\n    @unread_message_count = SUM(CASE WHEN message_read <> 1 THEN 1 ELSE 0 END)\nFROM messages\nWHERE usernameTo = @username\n\nGO\n']], ['Retrieving Two Values from a Stored Procedure'], 2], [(1459738, 1), [['You could do something like this for the stored procdure that will get all messages for a specific user. You don\'t want to use "Select *", here. You should always list the specific columns you need. I listed a few example columns.'], ['-10000']], [[' CREATE PROCEDURE dbo.GetMessagesByUser (\n    @username nchar(12)\n) AS\n\n  SELECT\n      MessageID,\n      MessageSubject,\n      MessageContent,\n      MessageFromUser,\n      MessageCreatedDate\n  FROM          messages\n  WHERE         usernameTo = @username\n\nGO\n']], ['Retrieving Two Values from a Stored Procedure'], 2], [(1460297, 0), [['What you want to do is  map  one string to another. You can use a simple string list for that.'], ['-10000']], [[' // Declare the variable somewhere, such as at unit scope or as a field\n// of your form class\nvar\n  ColumnNameMap: TStrings;\n']], ['how to create Delphi 4 structure to map column names in XLS to column names in SQL'], 6], [(1460297, 1), [['-10000'], ['-10000']], [[" // Somewhere else, such as unit initialization or a class constructor,\n// initialize the data structure with the column-name mappings.    \nColumnNameMap := TStringList.Create;\nColumnNameMap.Values['Bgm167 GrosGalns DA'] := 'bgm229/ egm229';\n"]], ['how to create Delphi 4 structure to map column names in XLS to column names in SQL'], 6], [(1460297, 2), [['-10000'], ['Later versions of Delphi have the generic  TDictionary  class. Use  TDictionary<string, string> . The  TStrings  solution I outlined above will have problems if any of the column names can have equals signs in them, but you can mitigate that by changing the  NameValueSeparator  property.']], [[' // In yet a third place in your code, use something like this to map\n// the column name in your input to the real column name in your output.\ni := ColumnNameMap.IndexOfName(ColumnName);\nif i >= 0 then\n  RealColumnName := ColumnNameMap.Values[ColumnName]\nelse\n  RealColumnName := ColumnName;\n']], ['how to create Delphi 4 structure to map column names in XLS to column names in SQL'], 6], [(1460297, 3), [['Later versions of Delphi have the generic  TDictionary  class. Use  TDictionary<string, string> . The  TStrings  solution I outlined above will have problems if any of the column names can have equals signs in them, but you can mitigate that by changing the  NameValueSeparator  property.'], ['-10000']], [[' var\n  ColumnNameMap: TDictionary<string, string>;\n']], ['how to create Delphi 4 structure to map column names in XLS to column names in SQL'], 6], [(1460297, 4), [['-10000'], ['-10000']], [[" ColumnNameMap := TDictionary<string, string>.Create;\nColumnNameMap.Add('Bgm167 GrosGalns DA', 'bgm229/ egm229');\n"]], ['how to create Delphi 4 structure to map column names in XLS to column names in SQL'], 6], [(1460297, 5), [['-10000'], ['-10000']], [[' if not ColumnNameMap.TryGetValue(ColumnName, RealColumnName) then\n  RealColumnName := ColumnName;\n']], ['how to create Delphi 4 structure to map column names in XLS to column names in SQL'], 6], [(1460363, 0), [['-10000'], ['In  SQL Server ,  Oracle  and  PostgreSQL 8.4  you can also do the following:']], [[' SELECT  id\nFROM    (\n        SELECT  c, ABS(r) magnitude, SUM(r) total, COUNT(*) num\n        FROM    table\n        GROUP BY\n                c, magnitude\n        HAVING num > 1 AND total = 0\n        ) td\nJOIN    table to\nON      to.c = td.c\n        AND to.r IN (magnitude, -magnitude)\n']], ['How can I get the IDs of the rows that make up a GROUP BY ... HAVING query?'], 2], [(1460363, 1), [['In  SQL Server ,  Oracle  and  PostgreSQL 8.4  you can also do the following:'], ['-10000']], [[' SELECT  id\nFROM    (\n        SELECT  id,\n                SUM(r) OVER (PARTITION BY c, ABS(r)) total,\n                COUNT(*) OVER (PARTITION BY c, ABS(r)) num\n        FROM    table\n        ) q\nWHERE   num > 1 AND total = 0\n']], ['How can I get the IDs of the rows that make up a GROUP BY ... HAVING query?'], 2], [(1460954, 0), [['You might want to consider storing the IP address as an INT UNSIGNED.  Also store the netmask so you can tell the difference between a static address and a subnet.'], ['Then you can query to see if an input IP address matches:']], [[" INSERT INTO bots (ipaddress, netmask, bot_name) \nVALUES (INET_ATOI('192.168.1.0'), INET_ATOI('255.255.255.0'), 'Wall-E');\n"]], ['Mysql field name within regular expression'], 2], [(1460954, 1), [['Then you can query to see if an input IP address matches:'], ["Using integers for IP addresses instead of CHAR(15) is a common optimization.  Even storing the 8 bytes for the IP address and the netmask is little more than half the storage of the CHAR(15).  And the bitwise operations are likely to be a lot faster than the regular expression matching, and it's easier to avoid the corner cases like in @Gumbo's comment."]], [[' SELECT bot_name\nFROM bots\nWHERE __input_ip__ & netmask = ipaddress & netmask;\n']], ['Mysql field name within regular expression'], 2], [(1461444, 0), [['For example, this query is allowed:'], ['However, this query is not allowed, because it uses inequality filters on two different properties in the same query:']], [[' select from Person where birthYear >= minBirthYearParam\n                      && birthYear <= maxBirthYearParam\n']], ['What does it mean to say that "the where clause of select statements can perform >, >=, <, <= operations on one column only"?'], 2], [(1461444, 1), [['However, this query is not allowed, because it uses inequality filters on two different properties in the same query:'], ['-10000']], [[' select from Person where birthYear >= minBirthYearParam\n                      && height >= minHeightParam   // ERROR\n']], ['What does it mean to say that "the where clause of select statements can perform >, >=, <, <= operations on one column only"?'], 2], [(1463983, 0), [['Using LEAD and  LAG  gives acces to previous or following rows in oracle.'], ['EDIT \nAccording to your comment, add an additional check for id changes.']], [[" SELECT id1, decode(amt1, lag(amt1) over (order by id1, id2), '', amt1) amt1, \n       id2, amt2 \nFROM table1 left join table2 on table2.id1=table1.id2\nORDER BY id1, id2\n"]], ['Sql Query Problem'], 2], [(1463983, 1), [['EDIT \nAccording to your comment, add an additional check for id changes.'], ['Use the same LAG feature to check for id changes. The expression is a bit more complex, but its comparable with a nested if statement.']], [[" SELECT id1, \n       decode(id1, lag(id1) over (order by id1, id2), \n           decode(amt1, lag(amt1) over (order by id1, id2), '', amt1), \n           amt1) amt1, \n       id2, amt2 \nFROM table1 left join table2 on table2.id1=table1.id2\nORDER BY id1, id2\n"]], ['Sql Query Problem'], 2], [(1465291, 0), [['Here are six students and their marks. '], ["Student #1 has two courses with marks of 100.  Student #4 has just the one course but with with a mark of 100.  Student #2 has a mark of 100 in one course but only 99 in the other course they have taken.   None of the other students scored 100 in any course.  Which students will be awarded a 'merit?"]], [[' SQL> select * from student\n  2  /\n\n        ID RANK\n---------- ----------\n         1 normal\n         2 normal\n         3 normal\n         4 normal\n         5 normal\n         6 normal\n\n6 rows selected.\n\nSQL> select * from marks\n  2  /\n\n COURSE_ID STUDENT_ID       MARK\n---------- ---------- ----------\n         1          1        100\n         2          1        100\n         1          2        100\n         2          2         99\n         1          4        100\n         2          5         99\n         1          6         56\n         2          6         99\n\n8 rows selected.\n\nSQL>\n']], ['Oracle SQL: update table conditionally based on values in another table'], 2], [(1465291, 1), [["Student #1 has two courses with marks of 100.  Student #4 has just the one course but with with a mark of 100.  Student #2 has a mark of 100 in one course but only 99 in the other course they have taken.   None of the other students scored 100 in any course.  Which students will be awarded a 'merit?"], ['And lo!  Only those students with 100 marks in  all  their courses have been updated.  Never underestimate the power of an  AND .']], [[" SQL> update student s\n  2      set s.rank = 'merit'\n  3      where exists ( select null\n  4                     from marks m\n  5                     where m.student_id = s.id\n  6                     and m.mark = 100 )\n  7      and not exists ( select null\n  8                       from marks m\n  9                       where m.student_id = s.id\n 10                       and m.mark != 100)\n 11  /\n\n2 rows updated.\n\nSQL>\nSQL> select * from student\n  2  /\n\n        ID RANK\n---------- ----------\n         1 merit\n         2 normal\n         3 normal\n         4 merit\n         5 normal\n         6 normal\n\n6 rows selected.\n\nSQL>\n"]], ['Oracle SQL: update table conditionally based on values in another table'], 2], [(1465405, 0), [['You can build a wrapper function like this:'], ['then call:']], [[" function get_something(name in varchar2,\n                   ignore_notfound in varchar2) return varchar2\nis\nbegin\n    return get_something (name, (upper(ignore_notfound) = 'TRUE') );\nend;\n"]], ['How to use BOOLEAN type in SELECT statement'], 2], [(1465405, 1), [['then call:'], ["It's up to you what the valid values of ignore_notfound are in your version, I have assumed 'TRUE' means TRUE and anything else means FALSE."]], [[" select get_something('NAME', 'TRUE') from dual;\n"]], ['How to use BOOLEAN type in SELECT statement'], 2], [(1465562, 0), [['-10000'], ['Result:']], [[' SELECT a.*\nFROM foo a\n  JOIN (\n    SELECT country, city\n    FROM (SELECT distinct country, city, district FROM foo)\n    GROUP BY country, city\n    HAVING count(country) > 1) b\n  ON a.city = b.city AND a.country = b.country\nGROUP BY a.country, a.city, a.district\n']], ['How do I query for records with multiple values for the last column in a compound GROUP BY clause?'], 2], [(1465562, 1), [['Result:'], ['-10000']], [[' COUNTRY CITY    DISTRICT\nJapan   Tokyo   2\nJapan   Tokyo   1\nChina   Beijing Z\nChina   Beijing Y\nChina   Beijing X\n']], ['How do I query for records with multiple values for the last column in a compound GROUP BY clause?'], 2], [(1465827, 0), [['This should work in general'], ['more specifically, for MSSQL Server']], [[' select p_id, max(TreatmentDate) - min(TreatmentDate) from \npatientsTable group by p_id\n']], ['SELECT all at once'], 2], [(1465827, 1), [['more specifically, for MSSQL Server'], ['-10000']], [[' select p_id, DATEDIFF(D, MIN(TreatmentDate), MAX(TreatmentDate)) from \npatientsTable group by p_id\n']], ['SELECT all at once'], 2], [(1465981, 0), [['However, I\'m not sure which field/control you\'re using for txtPk_field, and doubt that value is available if the the current record has not yet been saved.  So, I\'ll suggest this code for the cmdMoreFields "on click" event:'], ['In the "on click" event of cmdSave (on frmChild), try code similar to:']], [[' If Me.Dirty Then Me.Dirty = False\nDoCmd.OpenForm "frmChild"\n']], ['VBA for taking information from text boxes and inserting into table'], 2], [(1465981, 1), [['In the "on click" event of cmdSave (on frmChild), try code similar to:'], ['If that approach works, consider passing the pk_field value to frmChild with Openargs, as Remou suggested.']], [[' Dim strSql As String\nstrSQL = "UPDATE POC SET [Name] = """ & Me.As_Name & """, [Date] =#" _\n    & Me.As_Date & "#, Method = """ & Me.As_Method & """ WHERE pk_field = " _\n    & Forms!frmParent.txtPk_field & ";"\nDebug.Print strSql\nCurrentDb.Execute strSql, dbFailOnError\nDoCmd.Close\n']], ['VBA for taking information from text boxes and inserting into table'], 2], [(1466245, 0), [['Try to use the Month() method.  '], ['what you get back will be the month in number form.  You might to group by month and year which would be:']], [[' Select Month(<field>) from <table> group by Month(<column>);\n']], ['Group date as month'], 2], [(1466245, 1), [['what you get back will be the month in number form.  You might to group by month and year which would be:'], ['Date/Time Functions for MySql']], [[' Select Year(<column), Month(<field>) from <table> group by Month(<column>), Year(<column>);\n']], ['Group date as month'], 2], [(1466698, 0), [['If you want the rank, do something like'], ['Or if you actually want the row number, use']], [[' SELECT id,num,rank FROM (\n  SELECT id,num,rank() OVER (ORDER BY num) FROM foo\n) AS bar WHERE id=4\n']], ['How should I handle "ranked x out of y" data in PostgreSQL?'], 2], [(1466698, 1), [['Or if you actually want the row number, use'], ["They'll differ when you have equal values somewhere. There is also dense_rank() if you need that."]], [[' SELECT id,num,row_number FROM (\n  SELECT id,num,row_number() OVER (ORDER BY num) FROM foo\n) AS bar WHERE id=4\n']], ['How should I handle "ranked x out of y" data in PostgreSQL?'], 2], [(1467846, 0), [['Try Executing the following within your bash script:'], ['Contents of  file-with-sql-1.sql']], [[' #!/bin/bash          \necho Start Executing SQL commands\nsqlplus <user>/<password> @file-with-sql-1.sql\nsqlplus <user>/<password> @file-with-sql-2.sql\n']], ['How do you execute SQL from within a bash script?'], 3], [(1467846, 1), [['Contents of  file-with-sql-1.sql'], ['Then change the bash script to call sqlplus passing in the value']], [["  select * from users where username='&1';\n"]], ['How do you execute SQL from within a bash script?'], 3], [(1467846, 2), [['Then change the bash script to call sqlplus passing in the value'], ['-10000']], [[' #!/bin/bash\n\nMY_USER=bob\nsqlplus <user>/<password> @file-with-sql-1.sql $MY_USER\n']], ['How do you execute SQL from within a bash script?'], 3], [(1467957, 0), [['like this:'], ['like this:']], [[' CREATE INDEX IX_MN ON EMPLOYEE (MANAGER_ID, NAME) INCLUDE (ID)\nCREATE INDEX IX_NM ON EMPLOYEE (NAME, MANAGER_ID) INCLUDE (ID)\n']], ['NHibernate query optimization'], 2], [(1467957, 1), [['like this:'], ['Do @p1 and @p2..@pn match the column data types  exactly ?']], [[' SELECT ID FROM EMPLOYEE WHERE EMPLOYEE.NAME = @P1 AND AND MANAGER_ID = @p2\nUNION ALL\nSELECT ID FROM EMPLOYEE WHERE EMPLOYEE.NAME = @P1 AND AND MANAGER_ID = @p3\nUNION ALL\nSELECT ID FROM EMPLOYEE WHERE EMPLOYEE.NAME = @P1 AND AND MANAGER_ID = @p4\nUNION ALL\nSELECT ID FROM EMPLOYEE WHERE EMPLOYEE.NAME = @P1 AND AND MANAGER_ID = @p5\nUNION ALL\n....\n']], ['NHibernate query optimization'], 2], [(1468159, 0), [['When the query engine sees this...'], ["You need to trick the query engine into thinking it's non-cachable. jfar's  answer  was close, but the query engine was smart enough to see the tautalogy of  MyTable.MyColumn = MyTable.MyColumn , but it ain't smart enough to see through this."]], [[' (SELECT TOP 1 [val] FROM @randomStuff ORDER BY NEWID())\n']], ['How can I insert random values into a SQL Server table?'], 2], [(1468159, 1), [["You need to trick the query engine into thinking it's non-cachable. jfar's  answer  was close, but the query engine was smart enough to see the tautalogy of  MyTable.MyColumn = MyTable.MyColumn , but it ain't smart enough to see through this."], ["By bringing in the outer table (MT) into the subquery, the query engine assumes subquery will need to be re-evaluated. Anything will work really, but I went with the (assumed) primary key of MyTable.Id since it'd be indexed and would add very little overhead."]], [[' UPDATE MyTable\n   SET MyColumn = (SELECT TOP 1 val\n                     FROM @randomStuff r\n                          INNER JOIN MyTable _MT\n                                  ON M.Id = _MT.Id\n                    ORDER BY NEWID())\n FROM MyTable M\n']], ['How can I insert random values into a SQL Server table?'], 2], [(1470017, 0), [["You're looking to pivot data - change columnar data into rows.  The old school way is to use  CASE  statements - as of SQL Server 2005 you can use the  PIVOT  command.  I'll leave it to someone else to provide the PIVOT example."], ["If users can define their own questions, you have to use dynamic SQL .  You'll need to get a list of questionno's first, and then construct the CASE statements based on those results.  Likewise for PIVOT..."]], [[' SELECT t.memberid,\n       CASE WHEN t.questionno = 1 THEN t.answerno ELSE NULL END AS 1,\n       CASE WHEN t.questionno = 2.1 THEN t.answerno ELSE NULL END AS 2.1,\n       CASE WHEN t.questionno = 2.2 THEN t.answerno ELSE NULL END AS 2.2,\n       CASE WHEN t.questionno = 3 THEN t.answerno ELSE NULL END AS 3\n       CASE WHEN t.questionno = 5 THEN t.answerno ELSE NULL END AS 5\n       CASE WHEN t.questionno = 7 THEN t.answerno ELSE NULL END AS 7\n  FROM ANSWER t\n']], ['SQL query to display db data'], 2], [(1470017, 1), [["If users can define their own questions, you have to use dynamic SQL .  You'll need to get a list of questionno's first, and then construct the CASE statements based on those results.  Likewise for PIVOT..."], ["The  NULL FROM ... is because I'm too lazy to get rid of the comma that would come from the last CASE statement."]], [[" DECLARE @SQL nvarchar(4000)\nDECLARE @questionno [data type here]\n\nSET @SQL = 'SELECT t.memberid,'\n\nDECLARE c1 CURSOR READ_ONLY FOR\n  SELECT t.questionno\n    FROM ANSWER t\nGROUP BY t.questionno\nORDER BY t.questionno\n\nOPEN c1\n\nFETCH NEXT FROM c1 INTO @questionno \n\nWHILE @@FETCH_STATUS = 0\nBEGIN\n\n  SET @SQL = @SQL + ' CASE WHEN t.questionno = '+ @questionno +' THEN t.answerno ELSE NULL END AS '+ @questionno','\n\n  FETCH NEXT FROM c1 INTO @questionno \nEND\n\nCLOSE c1\nDEALLOCATE c1\n\nSET @SQL = @SQL + 'NULL FROM ANSWER t '\n\nEXEC(@SQL)\n"]], ['SQL query to display db data'], 2], [(1471147, 0), [["Let's see how  AVG  works. It needs two state variables:  sum  and  count"], ['-10000']], [[' grouper  value\n1        4\n1        3\n2        8\n1        7\n2        1\n1        2\n2        6\n2        3\n']], ['How do aggregates (group by) work on SQL Server?'], 3], [(1471147, 1), [['-10000'], ['grouper  value  sum   count\n-- Entered \n-- Variables:    0    0\n1        4       4    1\n1        3       7    2\n1        7      14    3\n1        2      16    4\n-- Group change. Return the result and reinitialize the variables\n-- Returning 1, 4\n-- Variables:    0    0\n2        8       8    1\n2        1       9    2\n2        6      15    3\n2        3      18    4\n-- Group change. Return the result and reinitialize the variables\n-- Returning 2, 4.5\n-- End']], [[' grouper  value\n1        4\n1        3\n1        7\n1        2\n2        8\n2        1\n2        6\n2        3\n']], ['How do aggregates (group by) work on SQL Server?'], 3], [(1471147, 2), [['grouper  value  sum   count\n-- Entered \n-- Variables:    0    0\n1        4       4    1\n1        3       7    2\n1        7      14    3\n1        2      16    4\n-- Group change. Return the result and reinitialize the variables\n-- Returning 1, 4\n-- Variables:    0    0\n2        8       8    1\n2        1       9    2\n2        6      15    3\n2        3      18    4\n-- Group change. Return the result and reinitialize the variables\n-- Returning 2, 4.5\n-- End'], ['Usually, sort is faster if the resultset is already ordered (like, the values come out of the index or a resultset sorted by the previous operation).']], [[' grouper  value\n-- Hash miss. Adding new entry to the hash table\n--             [1] (0,  0)\n-- ... and updating it:\n1        4     [1] (4,  1)\n-- Hash hit. Updating the entry:\n1        3     [1] (7,  2)\n-- Hash miss. Adding new entry to the hash table\n--             [1] (7,  2)  [2] (0, 0)\n-- ... and updating it:\n2        8     [1] (7,  2)  [2] (8,  1)\n1        7     [1] (14, 3)  [2] (8,  1)\n2        1     [1] (14, 3)  [2] (9,  2)\n1        2     [1] (16, 4)  [2] (9,  2)\n2        6     [1] (16, 4)  [2] (15, 3)\n2        3     [1] (16, 4)  [2] (18, 4)\n-- Scanning the hash table and returning the aggregated values\n-- 1   4\n-- 2   4.5\n']], ['How do aggregates (group by) work on SQL Server?'], 3], [(1471896, 0), [['To improve the  LIMIT , you need to use  LIMIT on LIMIT  technique:'], ['You need to create two composite indexes for this to work fast:']], [[' SELECT  *\nFROM    (\n        SELECT  *\n        FROM    test_msg AS m\n        WHERE   m.user_id = 20\n                AND m.status = 2\n        ORDER BY\n                m.datestamp DESC\n        LIMIT 20\n        ) q1\nUNION ALL\nSELECT  *\n        (\n        SELECT  m.*\n        FROM    test_msg m\n        JOIN    test_anon a\n        ON      a.message_id = m.message_id\n        WHERE   a.user_id = 20\n                AND m.user_id = 0\n                AND m.status = 2\n        ORDER BY\n                m.datestamp DESC\n        LIMIT 20\n        ) q2\nORDER BY\n        datestamp DESC\nLIMIT 20\n']], ['Problem taming MySQL query performance with OR statement'], 2], [(1471896, 1), [['You need to create two composite indexes for this to work fast:'], ['Then you need to choose what the index will be used for in the second query: ordering or filtering.']], [[' test_msg (status, user_id, datestamp)\ntest_msg (status, user_id, message_id, datestamp)\n']], ['Problem taming MySQL query performance with OR statement'], 2], [(1472751, 0), [['-10000'], ['alternately:']], [[' IF @Table1Count = @Table2Count\n    PRINT 1\nELSE\n    PRINT 0\n']], ['How do I compare 2 ints in sql?'], 2], [(1472751, 1), [['alternately:'], ['-10000']], [[' PRINT CASE WHEN @Table1Count = @Table2Count THEN 1 ELSE 0 END\n']], ['How do I compare 2 ints in sql?'], 2], [(1473073, 0), [['-10000'], ['To produce long WHERE part you can use this function:']], [[" SELECT t1.id\nFROM table1 t1\nINNER JOIN table2 t2 ON t1.id = t2.id\nWHERE ISNULL(t1.field1,'') <> ISNULL(t2.field1,'')\n      OR ISNULL(t1.field2,'') <> ISNULL(t2.field2,'')\n      OR ...\n"]], ['Comparing two T-SQL tables for diffs'], 3], [(1473073, 1), [['To produce long WHERE part you can use this function:'], ['Example usage:']], [[" CREATE PROCEDURE compareTables\n    @db1    NVARCHAR(100),\n    @table1 NVARCHAR(100),\n    @db2    NVARCHAR(100),\n    @table2 NVARCHAR(100)\nAS\nBEGIN\n    SET NOCOUNT ON;\n    DECLARE @where NVARCHAR(MAX)\n    DECLARE @cmd NVARCHAR(MAX)\n\n    SET @where = ''\n\n    SELECT @where = @where + 'ISNULL(t1.' + name + ','''') <> ISNULL(t2.' + name + ','''') OR ' \n    FROM sys.columns WHERE object_id = OBJECT_ID(@table1)\n\n    SET @where = SUBSTRING(@where,1,LEN(@where)-3)\n\n    SET @cmd = 'SELECT t1.id FROM ' + @db1 + '.' + @table1 + ' t1 '\n    SET @cmd = @cmd + 'INNER JOIN ' + @db2 + '.' + @table2 + ' t2 ON t1.id = t2.id '\n    SET @cmd = @cmd + 'WHERE ' + @where\n\n    EXEC sp_executesql @cmd\nEND\nGO\n"]], ['Comparing two T-SQL tables for diffs'], 3], [(1473073, 2), [['Example usage:'], ['Remember to put schema in the table name.']], [[" EXEC compareTables 'db1_name','dbo.table1','db2_name','dbo.table1'\n"]], ['Comparing two T-SQL tables for diffs'], 3], [(1473881, 0), [['-10000'], ['EDIT: The most productive Google search so far is:']], [[' QDB database\nQDB is a user-contributed database that can read and write DBASE files.\nfilburt.lns.mit.edu/oops/Html/SW/wxwin/wx/wx15.htm\n']], ['what is qdb? database'], 2], [(1473881, 1), [['EDIT: The most productive Google search so far is:'], ['-10000']], [[' qdb database -quotes -gdb\n']], ['what is qdb? database'], 2], [(1474012, 0), [['try something like this:'], ['to check that everything is working, you can add these to the outer  SELECT  list:']], [[' SELECT \n    Email,LastLoginDate\n    FROM (SELECT\n              Email,LastLoginDate\n                  ,ROW_NUMBER() OVER(PARTITION BY DATEPART(year,LastLoginDate),DATEPART(quarter,LastLoginDate) ORDER BY LastLoginDate) AS Rank\n              FROM Users\n              WHERE LastLoginDate < GetDate()-30\n                  AND LastLoginDate > GetDate()-(3*365)\n         ) dt\n    WHERE Rank<25000\n']], ['(SQL) Pulling specifc data from a big list where certain dates fall within a specific quarter'], 3], [(1474012, 1), [['to check that everything is working, you can add these to the outer  SELECT  list:'], ['and add an  ORDER BY :']], [[' ,DATEPART(year,lastchgdate) as Year,DATEPART(quarter,lastchgdate) AS Quarter,rank\n']], ['(SQL) Pulling specifc data from a big list where certain dates fall within a specific quarter'], 3], [(1474012, 2), [['and add an  ORDER BY :'], ['-10000']], [[' ORDER BY Year,Quarter,rank\n']], ['(SQL) Pulling specifc data from a big list where certain dates fall within a specific quarter'], 3], [(1474414, 0), [['first guess, may be you have to do a '], ['instead of ']], [[' GROUP BY vid_id\n']], ['How to re-write the following mysql query'], 2], [(1474414, 1), [['instead of '], ['-10000']], [[' GROUP BY hit_itemid\n']], ['How to re-write the following mysql query'], 2], [(1474687, 0), [['Add new column username:'], ['then execute this query:']], [[' ALTER TABLE tableA ADD username varchar(50) \n-- 50 is an example, it should be choosed depending on data\n']], ['Insert data into one column from two other columns of the same table'], 2], [(1474687, 1), [['then execute this query:'], ['-10000']], [[' UPDATE tableA\nSET username = LEFT(fname, 1) + lname\n']], ['Insert data into one column from two other columns of the same table'], 2], [(1475255, 0), [['Consider the following table:'], ['created with:']], [[' seq  number\n---  ------\n  1    1.88\n  2    9.99\n  3    8.76\n  4    9.88\n']], ['SQL qn:- comparing data in rows'], 4], [(1475255, 1), [['created with:'], ['You can then execute:']], [[' drop table a;\ncommit;\ncreate table a (seq integer,num float);                                     \ninsert into a (seq,num) values (1,1.88);\ninsert into a (seq,num) values (2,9.99);\ninsert into a (seq,num) values (3,8.76);\ninsert into a (seq,num) values (4,9.88);\ncommit;                                 \n']], ['SQL qn:- comparing data in rows'], 4], [(1475255, 2), [['You can then execute:'], ['which will give you:']], [[' select\n    ta.seq as aseq,\n    tb.seq as bseq,\n    ta.num as anum,\n    tb.num as bnum,\n    ta.num - tb.num as diff\nfrom a ta, a tb\nwhere tb.seq > ta.seq;\n']], ['SQL qn:- comparing data in rows'], 4], [(1475255, 3), [['which will give you:'], ['-10000']], [[' aseq  bseq  anum  bnum   diff\n----  ----  ----  ----  -----\n   1     2  1.88  9.99  -8.11\n   1     3  1.88  8.76  -6.88\n   1     4  1.88  9.88  -8.00\n   2     3  9.99  8.76   1.23\n   2     4  9.99  9.88   0.11\n   3     4  8.76  9.88  -1.12\n']], ['SQL qn:- comparing data in rows'], 4], [(1475973, 0), [['In  Oracle :'], ['In  SQL Server :']], [[' SELECT  level\nFROM    dual\nCONNECT BY\n        level <= 10\n']], ['SQL SELECT to get the first N positive integers'], 4], [(1475973, 1), [['In  SQL Server :'], ['In  PostgreSQL :']], [[' WITH    q AS\n        (\n        SELECT  1 AS num\n        UNION ALL\n        SELECT  num + 1\n        FROM    q\n        WHERE   num < 10\n        )\nSELECT  *\nFROM    q\n']], ['SQL SELECT to get the first N positive integers'], 4], [(1475973, 2), [['In  PostgreSQL :'], ['I wrote a simple script to generate test data for the sample tables in my blog posts, maybe it will be of use:']], [[' SELECT  num\nFROM    generate_series(1, 10) num\n']], ['SQL SELECT to get the first N positive integers'], 4], [(1475973, 3), [['I wrote a simple script to generate test data for the sample tables in my blog posts, maybe it will be of use:'], ['You call the procedure and the table gets filled with the numbers.']], [[' CREATE TABLE filler (\n        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT\n) ENGINE=Memory;\n\nCREATE PROCEDURE prc_filler(cnt INT)\nBEGIN\n        DECLARE _cnt INT;\n        SET _cnt = 1;\n        WHILE _cnt <= cnt DO\n                INSERT\n                INTO    filler\n                SELECT  _cnt;\n                SET _cnt = _cnt + 1;\n        END WHILE;\nEND\n$$\n']], ['SQL SELECT to get the first N positive integers'], 4], [(1476191, 0), [["Let's build a small example with this setup:"], ['A lateral join is automatic in Oracle, there is no special keyword:']], [[' SQL> CREATE OR REPLACE TYPE emp_row AS OBJECT (\n  2     empno NUMBER(4),\n  3     ename VARCHAR(10),\n  4     job VARCHAR(9),\n  5     deptno NUMBER(2)\n  6  );\n  7  /\n\nType created\nSQL> CREATE OR REPLACE TYPE emp_tab AS TABLE OF emp_row;\n  2  /\n\nType created\nSQL> CREATE OR REPLACE FUNCTION get_emp_dept(p_deptno NUMBER) RETURN emp_tab IS\n  2     l_result emp_tab;\n  3  BEGIN\n  4     SELECT emp_row(empno, ename, job, deptno)\n  5       BULK COLLECT INTO l_result\n  6       FROM emp\n  7      WHERE deptno = p_deptno;\n  8     RETURN l_result;\n  9  END get_emp_dept;\n 10  /\n\nFunction created\n']], ['What is the equivalent of SQL Server APPLY in Oracle?'], 2], [(1476191, 1), [['A lateral join is automatic in Oracle, there is no special keyword:'], ['-10000']], [[' SQL> SELECT dept.dname, emp.empno, emp.ename, emp.job\n  2    FROM dept\n  3   CROSS JOIN TABLE(get_emp_dept(dept.deptno)) emp;\n\nDNAME          EMPNO ENAME      JOB\n-------------- ----- ---------- ---------\nACCOUNTING      7782 CLARK      MANAGER\nACCOUNTING      7839 KING       PRESIDENT\nACCOUNTING      7934 MILLER     CLERK\nRESEARCH        7369 SMITH      CLERK\nRESEARCH        7566 JONES      MANAGER\nRESEARCH        7788 SCOTT      ANALYST\nRESEARCH        7876 ADAMS      CLERK\nRESEARCH        7902 FORD       ANALYST\nSALES           7499 ALLEN      SALESMAN\nSALES           7521 WARD       SALESMAN\nSALES           7654 MARTIN     SALESMAN\nSALES           7698 BLAKE      MANAGER\nSALES           7844 TURNER     SALESMAN\nSALES           7900 JAMES      CLERK\n\n14 rows selected\n']], ['What is the equivalent of SQL Server APPLY in Oracle?'], 2], [(1476196, 0), [['when there are no more children it means that ChildNum is NULL so:'], ["ok, in that case, we could check on ChildNum 'children' count :"]], [[' ...\n\nUNION ALL \n\n  SELECT Field.ParentNum, \n         COALESCE(Field.ChildNum, Field.FieldNum) ChildNum,\n         Field.FieldNum,\n         ...\n']], ['Condition in a recursive query'], 3], [(1476196, 1), [["ok, in that case, we could check on ChildNum 'children' count :"], ["let's move the check outside:"]], [['     ...\n\n    UNION ALL \n\n      SELECT F1.ParentNum, \n             CASE WHEN (SELECT COUNT(1) \n                          FROM FIELD F2 \n                         WHERE F2.ParentNum = F1.ChildNum) = 0 \n                  THEN F1.FieldNum\n                  ELSE F1.ChildNum\n             END ChildNum,\n             F1.FieldNum, F1.FieldDescr, tmpField.Iteration + 1\n      FROM Field F1 INNER JOIN \n      tmpField on F1.ParentNum = tmpField.ChildNum\n\n...\n']], ['Condition in a recursive query'], 3], [(1476196, 2), [["let's move the check outside:"], ['-10000']], [[' WITH tmpField (ParentNum, ChildNum, FieldNum, FieldDescr, Iteration) AS\n(\n  SELECT Field.ParentNum, Field.ChildNum, Field.FieldNum, Field.FieldDescr, 1\n  FROM Field\n  WHERE Field.ParentNum = @ParentNum\n\n  UNION ALL \n\n  SELECT Field.ParentNum, Field.ChildNum, Field.FieldNum, Field.FieldDescr, tmpField.Iteration + 1\n  FROM Field INNER JOIN \n  tmpField on Field.ParentNum = tmpField.ChildNum\n)\nSELECT DISTINCT ParentNum AS ParentNum, \n                CASE WHEN EXISTS (SELECT NULL \n                                    FROM Field f \n                                   WHERE tmpField.ChildNum = f.ParentNum) \n                      THEN tmpField.ChildNum\n                      ELSE tmpField.FieldNum\n                 END ChildNum,\n                FieldNum,\n                FieldDescr\nFROM tmpField\n']], ['Condition in a recursive query'], 3], [(1476772, 0), [['Option 1'], ['Option 2']], [["   Uses\n    OleDB,\n    ComObj,\n    ActiveX;\n\n    function Edit_ADO_ODBC_ConnectionString(ParentHandle: THandle; InitialString: WideString;out NewString: string): Boolean;\n    var\n      DataInit  : IDataInitialize;\n      DBPrompt  : IDBPromptInitialize;\n      DataSource: IUnknown;\n      InitStr   : PWideChar;\n    begin\n      Result   := False;\n      DataInit := CreateComObject(CLSID_DataLinks) as IDataInitialize;\n      if InitialString <> '' then\n      DataInit.GetDataSource(nil, CLSCTX_INPROC_SERVER, PWideChar(InitialString),IUnknown, DataSource);\n      DBPrompt := CreateComObject(CLSID_DataLinks) as IDBPromptInitialize;\n\n      {\n      DBPROMPTOPTIONS_WIZARDSHEET = $1;\n      DBPROMPTOPTIONS_PROPERTYSHEET = $2;\n      DBPROMPTOPTIONS_BROWSEONLY = $8;\n      DBPROMPTOPTIONS_DISABLE_PROVIDER_SELECTION = $10;\n      }\n      if Succeeded(DBPrompt.PromptDataSource(nil, ParentHandle,DBPROMPTOPTIONS_PROPERTYSHEET, 0, nil, nil, IUnknown, DataSource)) then\n      begin\n        InitStr   := nil;\n        DataInit.GetInitializationString(DataSource, True, InitStr);\n        NewString := InitStr;\n        Result    := True;\n      end;\n    end;\n\n\n\nResult:=Edit_ADO_ODBC_ConnectionString(0,OldConnectionString,NewString);\n"]], ['Delphi ODBC Connection Dialog Component?'], 3], [(1476772, 1), [['Option 2'], ['Option 3']], [[' Uses\nADODB;\n\nPromptDataSource(Self.Handle, InitialString);\n']], ['Delphi ODBC Connection Dialog Component?'], 3], [(1476772, 2), [['Option 3'], ['You must Select "Microsoft OLE DB Provider for ODBC Drivers"']], [[' Uses\nADODB,\nAdoConEd;\n\nprocedure TMainForm.Button2Click(Sender: TObject);\nVar\nADOConnection1 : TADOConnection;\nbegin\n   ADOConnection1:=TADOConnection.Create(Self);\n   EditConnectionString(ADOConnection1);\nend;\n']], ['Delphi ODBC Connection Dialog Component?'], 3], [(1476861, 0), [['this fails:'], ['this works']], [["  DECLARE @vPortalUID NVARCHAR(32)\n SET @vPortalUID='2A66057D-F4E5-4E2B-B2F1-38C51A96D385'\n DECLARE @nPortalUID AS UNIQUEIDENTIFIER\n SET @nPortalUID = CAST(@vPortalUID AS uniqueidentifier)\n PRINT @nPortalUID\n"]], ['Conversion failed when converting from a character string to uniqueidentifier'], 2], [(1476861, 1), [['this works'], ['the difference is  NVARCHAR(36) , your input parameter is too small!']], [["  DECLARE @vPortalUID NVARCHAR(36)\n SET @vPortalUID='2A66057D-F4E5-4E2B-B2F1-38C51A96D385'\n DECLARE @nPortalUID AS UNIQUEIDENTIFIER\n SET @nPortalUID = CAST(@vPortalUID AS UNIQUEIDENTIFIER)\n PRINT @nPortalUID\n"]], ['Conversion failed when converting from a character string to uniqueidentifier'], 2], [(1478125, 0), [['So if you had an integer table with values going as many days back from NOW() as required you might do the following:'], ['//create an integer table']], [[' SELECT DATE_SUB(CURDATE(), INTERVAL i.intvalue DAY) AS thedate, \n       COUNT(DISTINCT LoginAudit.LoginAuditID) AS logins\nFROM i LEFT JOIN dual ON (DATE_SUB(NOW(), INTERVAL i.intvalue DAY)= day)\nGROUP BY DATE_SUB(CURDATE(), INTERVAL i.intvalue DAY)\nORDER BY i DESC;\n']], ['Group By Date With Empty Groups'], 4], [(1478125, 1), [['//create an integer table'], ['if I need 0-99 consecutive numbers:']], [[' create table i(i integer not null primary key);\ninsert into i values (0),(1),(2) ... (9);\n']], ['Group By Date With Empty Groups'], 4], [(1478125, 2), [['if I need 0-99 consecutive numbers:'], ['if I need consecutive dates:']], [[' SELECT 10*t.i + u.i AS number\n  FROM i AS u\nCROSS JOIN \n  i AS t\nORDER BY number;\n']], ['Group By Date With Empty Groups'], 4], [(1478125, 3), [['if I need consecutive dates:'], ['-10000']], [[' SELECT date_sub(curdate(), interval (10*t.i + u.i) DAY) as thedate \n  FROM i AS u\nCROSS JOIN \n  i AS t\nORDER BY thedate;\n']], ['Group By Date With Empty Groups'], 4], [(1478164, 0), [['Start with the following to populate your table:'], ["Here's a simple query to get the minimum running totals:"]], [[" CREATE TABLE #temp\n    (someDate datetime\n    ,amount decimal)\n\nINSERT INTO #temp (someDate, amount)\nSELECT '2009-01-01', 1000 UNION ALL\nSELECT '2009-01-02', -500 UNION ALL\nSELECT '2009-01-03', -50 UNION ALL\nSELECT '2009-01-04', -150 UNION ALL\nSELECT '2009-01-05', 250 UNION ALL\nSELECT '2009-01-06', -125 UNION ALL\nSELECT '2009-01-07', 1000\n"]], ['How do I implement this algorithm in SQL?'], 2], [(1478164, 1), [["Here's a simple query to get the minimum running totals:"], ['-10000']], [[' SELECT\n    TOP 1\n    base.someDate\n    ,runningTotal =\n        (SELECT sum(derived.amount)\n        FROM #temp derived\n        WHERE derived.someDate <= base.someDate)\nFROM #temp base\nORDER BY runningTotal ASC\n']], ['How do I implement this algorithm in SQL?'], 2], [(1479046, 0), [['However, if I understand your question correctly you have a bunch or records in a table based upon which you would like to generate a result set that contains three copies of each record but with slight modifications to each copy. So if you have something like:'], ['And you would like to get this:']], [[' SourceTable\n--------|---------|---------|--------|\n field1 |  filed2 |  filed3 | field4 |\n--------|---------|---------|--------|\n   TR13 |  BA20   | 2009-08 | A0     |\n   TR14 |  BA21   | 2009-08 | A1     |\n   TR15 |  BA22   | 2009-08 | A2     |\n   TR16 |  BA23   | 2009-08 | A3     |\n']], ['SELECT Multirow with one query (but changed please)'], 3], [(1479046, 1), [['And you would like to get this:'], ['Then you could write your query like this:']], [['    TR13 |  BA20   | 2009-08 | A0     |\n   TR13 |  BA20   | 2009-08 | **     |\n   TR13 |  BA20   | 2009-08 | **     |\n   TR14 |  BA21   | 2009-08 | A1     |\n   TR14 |  BA21   | 2009-08 | **     |\n   TR14 |  BA21   | 2009-08 | **     |\n   TR15 |  BA21   | 2009-08 | A2     |\n   TR15 |  BA21   | 2009-08 | **     |\n   TR15 |  BA21   | 2009-08 | **     |\n   TR16 |  BA23   | 2009-08 | A3     |\n   TR16 |  BA23   | 2009-08 | **     |\n   TR16 |  BA23   | 2009-08 | **     |\n']], ['SELECT Multirow with one query (but changed please)'], 3], [(1479046, 2), [['Then you could write your query like this:'], ['-10000']], [["  select SourceTable.field1\n        , SourceTable.field2\n        , SourceTable.field3\n        , case when multi.bir = 1 then SourceTable.field4 else '**' end\n  from SourceTable\n   cross join\n   (select 1 as bir union all select 2 union all select 3) multi\n"]], ['SELECT Multirow with one query (but changed please)'], 3], [(1479640, 0), [['I guess the Me.Key refers to a control located in the details section of your form. In this case, and in order to list all values taken by the control, you will need to browse all the records. One of the ways to do so can be:'], ['Another solution is to browse the clone of the underlying recordset (browsing the recordset will provoke the same screen behaviour as before). Supposing that the Me.Key control is bound to the "Key" column of the recordset, code could be:']], [[' Dim m_position as Long\nfor m_position = 1 to Me.recordset.recordcount\n   me.seltop = m_position\n   debug.print me.key\nnext m_position\n']], ['VBA/Access RecordSet per form record problem'], 4], [(1479640, 1), [['Another solution is to browse the clone of the underlying recordset (browsing the recordset will provoke the same screen behaviour as before). Supposing that the Me.Key control is bound to the "Key" column of the recordset, code could be:'], ['Solution 1:']], [[' Dim rsClone as DAO.recordset\nset rsClone = Me.recordsetclone\nif rsClone.EOF and rsClone.BOF then\nElse\n    rsClone.moveFirst\n    Do while not rsClone.EOF\n        debug.print rsCLone.fields("Key")\n        rsClone.moveNext\n    Loop\nEndif\nset rsClone = nothing\n']], ['VBA/Access RecordSet per form record problem'], 4], [(1479640, 2), [['Solution 1:'], ['Solution 2:']], [[' Dim m_position as Long\nfor m_position = 1 to Me.recordset.recordcount\n   me.seltop = m_position\n   me.controls("myControl") = m_position\nnext m_position\n']], ['VBA/Access RecordSet per form record problem'], 4], [(1479640, 3), [['Solution 2:'], ['-10000']], [[' Dim rsClone as DAO.recordset, _\n    i as long\n\nset rsClone = Me.recordsetclone\nif rsClone.EOF and rsClone.BOF then\nElse\n    rsClone.moveFirst\n    i = 1\n    Do while not rsClone.EOF\n        rsClone.fields("myField") = i\n        rsClone.update\n        rsClone.moveNext\n        i = i+1\n    Loop\nEndif\nset rsClone = nothing\n']], ['VBA/Access RecordSet per form record problem'], 4], [(1479774, 0), [['I can think of two approaches.  The first of which is when the Order record has already been inserted into the database and you merely want to update its total price value:'], ['Alternatively, you can grab the price of a food item when you insert the order into the database table:']], [[' UPDATE Order\nSet TotalPrice = NumberOfItems * \n                 (SELECT Price FROM Food WHERE Food.FoodId = Order.FoodId)\n']], ["automatically set the value of one variable depending on another variable's value in sql table"], 2], [(1479774, 1), [['Alternatively, you can grab the price of a food item when you insert the order into the database table:'], ['-10000']], [[' -- Given: @FoodId and @NumberOfItems have been passed to this \n-- stored procedure as parameters\nDECLARE @price DECIMAL(10, 2) -- or whatever your price is defined to be\n\nSELECT @price = Price\nFROM Food\nWHERE FoodId = @FoodId\n\nINSERT INTO ORDER(FoodId, NumberOfItems, TotalPrice)\nVALUES\n(@FoodId, @NumberOfItems, @NumberOfItems * @Price)\n']], ["automatically set the value of one variable depending on another variable's value in sql table"], 2], [(1479831, 0), [['You must move the WHERE operator  above  the project list where RowNumber column is created. Use a derived table or a CTE:'], ['the equivalent CTE is:']], [[' SELECT * \n  FROM (\n   SELECT *, ROW_NUMBER() OVER (...) as RowNumber\n   FROM ...) As ...\n WHERE RowNumber = ...\n']], ['Using ranking-function derived column in where clause (SQL Server 2008)'], 2], [(1479831, 1), [['the equivalent CTE is:'], ['-10000']], [[' WITH cte AS (\nSELECT *, ROW_NUMBER() OVER (...) as RowNumber\n       FROM ...)\nSELECT * FROM cte \nWHERE RowNumber = ...   \n']], ['Using ranking-function derived column in where clause (SQL Server 2008)'], 2], [(1484108, 0), [['I hope you have ISBN includes on the title index to avoid key lookups'], ["Now, the IN vs JOIN vs EXISTs is a common question here. The CTE is irrelevant except for readability. Personally, I'd use exists because you'll get duplicates with JOIN for books with the same title, which folk often forget."]], [[' CREATE INDEX IX_Titles ON dbo.Books (Title) INCLUDE (ISBN)\n']], ['CTE vs. IN clause performance'], 3], [(1484108, 1), [["Now, the IN vs JOIN vs EXISTs is a common question here. The CTE is irrelevant except for readability. Personally, I'd use exists because you'll get duplicates with JOIN for books with the same title, which folk often forget."], ['Edit: a temp table is a better option, really, as Steve mentioned in his comment']], [[" ;WITH titles AS (select 'Catcher and the Rye' as Title\n            union all 'Harry Potter ...'\n            ...\n            union all 'The World Is Flat')\nSELECT\n    ISBN \nFROM\n    books\nWHERE\n    EXISTS (SELECT * --or null or = all the same\n        FROM\n            titles \n        WHERE\n            titles .Title = books.Title)\n"]], ['CTE vs. IN clause performance'], 3], [(1484108, 2), [['Edit: a temp table is a better option, really, as Steve mentioned in his comment'], ['-10000']], [[" SELECT\n    ISBN \nFROM\n    (\n    SELECT TOP 2000000000\n        Title\n    FROM\n        (select 'Catcher and the Rye' as Title\n                union all 'Harry Potter ...'\n                ...\n                union all 'The World Is Flat'\n        ) foo\n    ORDER BY\n       Title\n    ) bar\n    JOIN\n    books On bar.Title = books.Title\n\n\nSELECT\n    ISBN \nFROM\n    books\nWHERE\n    EXISTS (SELECT * --or null or = all the same\n        FROM\n            (\n            SELECT TOP 2000000000\n                Title\n            FROM\n                (select 'Catcher and the Rye' as Title\n                        union all 'Harry Potter ...'\n                        ...\n                        union all 'The World Is Flat'\n                ) foo\n            ORDER BY\n               Title\n            ) bar\n        WHERE\n            bar.Title = books.Title)\n"]], ['CTE vs. IN clause performance'], 3], [(1484147, 0), [['Sure - check the  sys.columns  system catalog view:'], ['If you want those for just a single table, use this query:']], [[' SELECT * FROM sys.columns\nWHERE is_computed = 1\n']], ['Get List of Computed Columns in Database Table (SQL Server)'], 3], [(1484147, 1), [['If you want those for just a single table, use this query:'], ["UPDATE: There's even a  sys.computed_columns  system catalog view which also contains the definition (expression) of the computed column - just in case that might be needed some time :-)"]], [[" SELECT * FROM sys.columns\nWHERE is_computed = 1\nAND object_id = OBJECT_ID('YourTableName')\n"]], ['Get List of Computed Columns in Database Table (SQL Server)'], 3], [(1484147, 2), [["UPDATE: There's even a  sys.computed_columns  system catalog view which also contains the definition (expression) of the computed column - just in case that might be needed some time :-)"], ['Marc']], [[" SELECT * FROM sys.computed_columns\nWHERE object_id = OBJECT_ID('YourTableName')\n"]], ['Get List of Computed Columns in Database Table (SQL Server)'], 3], [(1484408, 0), [["You can use  date_format  inside of a  group by  to achieve the results you're looking for, since you just want to do a  count distinct ."], ["If there can be multiple  student_id  for one  person_id , and what you're  really  interested in is the count of unique  person_id s, then you can do this:"]], [[" select\n    date_format(`time`, '%b %y') as `Month`,\n    count(distinct student_id) as NumberOfStudents\nfrom\n    lessons\nwhere\n    `time` >= date_add(date_add(current_date interval -12 months) \n                  interval (-1)*(day(current_date)+1) days)\ngroup by\n    date_format(`time`, '%b %y')\n"]], ['Generating statistics with mysql'], 2], [(1484408, 1), [["If there can be multiple  student_id  for one  person_id , and what you're  really  interested in is the count of unique  person_id s, then you can do this:"], ['-10000']], [[" select\n    date_format(l.`time`, '%b %y') as `Month`,\n    count(distinct s.person_id) as NumberOfPeople\nfrom\n    lessons l\n    inner join students s on\n        l.student_id = s.id\nwhere\n    l.`time` >= dateadd(dateadd(current_date interval -12 months) \n                  interval (-1)*(day(current_date)+1) days)\ngroup by\n    date_format(l.`time`, '%b %y')\n"]], ['Generating statistics with mysql'], 2], [(1486745, 0), [['The following example shows how a generic TVF could be used to generate the data you ask for:'], ['You can also use this to duplicate rows in an existing table (which I think is more like what you want). For example, assuming base_table contains the three rows at the beginning of your question, you can turn the 3 rows into 60 rows using the following:']], [[' create function fnMakeNRows (@num as integer)\nreturns @result table (num integer not null) as\nbegin\n if @num is null or @num = 0\n begin\n  return\n end\n declare @n as integer\n set @n = 0\n while @n < @num\n begin\n  insert into @result values (@n)\n  set @n = @n + 1\n end\n return\nend\ngo\n\nselect\n CROP_ID = 1,\n YEAR_ = num,\n PRODUCTION = case num % 3 when 0 then 0 when 1 then 300 else 500 end\nfrom dbo.fnMakeNRows(100000)\n']], ['Repeating Record Sequence using SQL'], 2], [(1486745, 1), [['You can also use this to duplicate rows in an existing table (which I think is more like what you want). For example, assuming base_table contains the three rows at the beginning of your question, you can turn the 3 rows into 60 rows using the following:'], ['This (hopefully) shows the utility of a generic fnMakeNRows function.']], [[' select\n b.CROP_ID,\n YEAR_ = n.num * (select count(*) from base_table) + b.YEAR_,\n b.PRODUCTION\nfrom base_table b, dbo.fnMakeNRows(20) n\n']], ['Repeating Record Sequence using SQL'], 2], [(1487537, 0), [['If you have all countries inside  mytable  (with  prop  possibly set to  NULL ):'], ['If you have countries in a separate table (and a country may be missing in  mytable ):']], [[' SELECT  country, COUNT(prop) as number\nFROM    mytable\nGROUP BY\n        country\n']], ['Default values for COUNT in MySQL'], 2], [(1487537, 1), [['If you have countries in a separate table (and a country may be missing in  mytable ):'], ['-10000']], [[' SELECT  c.id, COUNT(m.prop) as number\nFROM    countries c\nLEFT JOIN\n        mytable m\nON      m.country = c.id\nGROUP BY\n        c.id\n']], ['Default values for COUNT in MySQL'], 2], [(1489692, 0), [['Normal SQL:'], ['MS Access SQL:']], [['    SELECT c.*, \n          p.transId, \n          p.customerId\n     FROM Transaction c \nLEFT JOIN Transaction p \n       ON p.transId = (SELECT MAX(t.transId) \n                         FROM Transaction t \n                        WHERE t.transId < c.transId \n                          AND t.sn = c.sn)\n    WHERE c.customerId = 12345678\nORDER BY p.transId;\n']], ['How to get previous owner in sql table?'], 2], [(1489692, 1), [['MS Access SQL:'], ['-10000']], [[' SELECT      c.*, \n            p.transId, \n            p.customerId\nFROM        Transaction c \nLEFT JOIN ((SELECT  t.transId, MAX(z.transId) AS PrevTransId\n            FROM    Transaction t \n            LEFT JOIN Transaction z on t.sn = z.sn\n            WHERE   z.transId < t.transId \n            GROUP BY t.transId) x\nLEFT JOIN   Transaction p ON p.TransId = x.PrevTransId\n           ) ON  x.TransId = c.TransId\nWHERE       c.customerId = 12345678\nORDER BY    p.transId;\n']], ['How to get previous owner in sql table?'], 2], [(1490071, 0), [['Try:'], ['...or:']], [[' SELECT id, topic \n  FROM topics \n WHERE id IN (SELECT id_topic \n                FROM answers \n                WHERE id_user = <USERID>)\n']], ['mysql table join select'], 2], [(1490071, 1), [['...or:'], ['...and test for performance according to your indexing regimen.  Recent versions of MySQL only.']], [[' SELECT id, topic \n  FROM topics \n WHERE EXISTS (SELECT * \n                 FROM answers \n                WHERE id_user = topics.id)\n']], ['mysql table join select'], 2], [(1493262, 0), [['The following query gives names of all sequences.'], ['To get last value of a sequence use the following query:']], [[" SELECT c.relname FROM pg_class c WHERE c.relkind = 'S';\n"]], ['List all sequences in a Postgres db 8.1 with SQL'], 2], [(1493262, 1), [['To get last value of a sequence use the following query:'], ['-10000']], [[' SELECT last_value FROM test_id_seq;\n']], ['List all sequences in a Postgres db 8.1 with SQL'], 2], [(1493458, 0), [["I'm not sure you should be enforcing the 'at least two conditions' criteria down in the database as you should probably never have knowledge of which two have been filled in. Perhaps instead this might work for you - it's a pattern I use quite often and should cope with any combination of criteria (I'm assuming this is inside a stored proc!):  "], ["To call this from your ASP page you'll want some code something like this (this  may  need a bit of debugging, my ADO & VBScript for ASP is pretty rusty!):  "]], [[' DECLARE PROCEDURE PropertyList\n@StreetName NVARCHAR(50) = NULL,\n@Town NVARCHAR(50) = NULL,\n@Postcode NVARCHAR(10) = NULL\nAS\n\nSET NOCOUNT ON\n\nSELECT \n    *\nFROM \n    VWTenantPropertiesResults\nWHERE\n    ContentBedrooms BETWEEN 1 AND 4\nAND\n    ContentPrice BETWEEN 50 AND 500\nAND\n    (@ContentStreet IS NULL OR ContentStreet = @ContentStreet)\nAND \n    (@ContentTown IS NULL OR ContentTown = @ContentTown)\nAND\n    (@ContentPostcode IS NULL OR ContentTown = @ContentTown)\nORDER BY\n    ContentPrice\n']], ['Search based on matched criteria'], 2], [(1493458, 1), [["To call this from your ASP page you'll want some code something like this (this  may  need a bit of debugging, my ADO & VBScript for ASP is pretty rusty!):  "], ['This  ought  to work for any combination of parameters, whether you enter none, some or all of them!']], [[' Dim cnn \'As ADODB.Connection\nDim cmd \'As ADODB.Command\nDim prmStreet \'As ADODB.Parameter\nDim prmTown \'As ADODB.Parameter\nDim prmPostcode \'As ADODB.Parameter\nDim rstProperty \'As ADODB.RecordSet\nDim i \'As Integer\n\nSet cnn = Server.CreateObject("ADODB.Connection")\n\ncnn.ConnectionString = MyConnectionString\n\nSet cmd = Server.CreateObject("ADODB.Command")\n\nSet cmd.ActiveConnection = cnn\n\n\'Set the CommandText property to the name of the stored proc we want to call\ncmd.CommandText = "PropertyList"\ncmd.CommandType = 4 \'or adCmdStoredProc if you\'re using ADOVBS.inc\n\nIf Request.Form("StreetTextBox") = "" Then\n    \'No street entered so don\'t pass it to the stored proc\nElse\n    \'A street has been entered so create a parameter...\n    Set prmStreet = cmd.CreateParameter("@StreetName", 203, 1, 50, Request.Form("StreetTextBox"))\n\n    \' and add it to the Parameters collection of the Command object\n    cmd.Parameters.Add(prmStreet)\nEnd If\n\nIf Request.Form("TownTextBox") = "" Then\n    \'No town entered so don\'t pass it to the stored proc\nElse\n    \'A town has been entered so create a parameter...\n    Set prmTown = cmd.CreateParameter("@Town", 203, 1, 50, Request.Form("TownTextBox"))\n\n    \' and add it to the Parameters collection of the Command object\n    cmd.Parameters.Add(prmTown)\nEnd If\n\nIf Request.Form("PostcodeTextBox") = "" Then\n    \'No postcode entered so don\'t pass it to the stored proc\nElse\n    \'A postcode has been entered so create a parameter...\n    Set prmPostcode = cmd.CreateParameter("@Postcode", 203, 1, 10, Request.Form("PostcodeTextBox"))\n\n    \' and add it to the Parameters collection of the Command object\n    cmd.Parameters.Add(prmPostcode)\nEnd If\n\ncnn.Open\n\n\'This is the line that\'ll actually call the stored procedure\nSet rstProperty = cmd.Execute()\n\ncnn.Close\n\nIf rstProperty.BOF And rstProperty.EOF Then\n    \'If BOF And EOF are true then this is an empty recordset - we got no records back\n    Response.Write "No records returned"\nElse\n    \'We have records so write them out into a table\n    Response.Write "<table><tr>"\n    For i = 0 To rstProperty.Fields.Count - 1\n        Response.Write "<td>"\n        Response.Write rstProperty.Fields(i).Name\n        Response.Write "</td>"\n        Response.Write "<td>&nbsp;</td>"\n    Next\n\n    Response.Write "</tr>"\n\n    Do While rstProperty.Eof = False\n        Response.Write "<tr>"\n        For i = 0 To rstProperty.Fields.Count - 1\n            Response.Write "<td>"\n            Response.Write rstProperty.Fields(i).Value\n            Response.Write "</td>"\n        Next\n        Response.Write "<td>"\n        Response.Write "<a href=\'ViewDetails.asp?id=\'" & rstProperty.Fields("PropertyId").Value & "\'>View Details for this property</a>"\n        Response.Write "</td>"\n        Response.Write "</tr>"\n        rstProperty.MoveNext\n    Loop\n\n    Response.Write "</table>"\nEnd If\n']], ['Search based on matched criteria'], 2], [(1497264, 0), [['first off, your given result set:'], ['does not match your given query, there is no "outtime" column in the query:']], [[' DailyDates  Personid  empname    cardno  titlecode  titlename                            departname            empdate   intime    outtime\n----------  --------  ---------  ------  ---------  -----------------------------------  --------------------  --------  --------  --------\n12/30/2008  A201      A Cherian  3201    018        Chief Air Traffic Service Assistant  Air Traffic Services  -----     -----    \n12/30/2008  A201      A Cherian  3201    018        Chief Air Traffic Service Assistant  Air Traffic Services  20081230  07:51:31  15:54:38\n12/30/2008  A201      A Cherian  3201    018        Chief Air Traffic Service Assistant  Air Traffic Services  20081230  07:51:31  15:54:38\n']], ['While Using Distinct still getting duplicate values?'], 3], [(1497264, 1), [['does not match your given query, there is no "outtime" column in the query:'], ['Without knowing the table schemas and how they relate to each other, as well as the column datatypes of:']], [[" SELECT DISTINCT \n    Modification.dbo.Reference.Dates AS DailyDate\n        ,tmp_Cardevent2.PERSONID\n        ,tmp_Cardevent2.empname\n        ,tmp_cardevent2.cardno\n        ,tmp_Cardevent2.titlecode\n        ,tmp_Cardevent2.titlename\n        ,tmp_Cardevent2.departname\n        ,CASE \n             WHEN tmp_Cardevent2.CardEventDate = Modification.dbo.Reference.Dates THEN tmp_Cardevent2.CardEventDate \n             ELSE '-----'\n         END AS EMPDATE\n        ,CASE\n             WHEN tmp_Cardevent2.CardEventDate = Modification.dbo.Reference.Dates THEN tmp_Cardevent2.Intime\n             ELSE '-----' \n         END AS INTIME\n    FROM tmp_Cardevent2\n        CROSS JOIN Modification.dbo.Reference\n    ORDER BY PERSONID, DAILYDATE DESC\n"]], ['While Using Distinct still getting duplicate values?'], 3], [(1497264, 2), [['Without knowing the table schemas and how they relate to each other, as well as the column datatypes of:'], ['it is hard to understand what is the true cause of the duplicates.  However, based on the limited info inthe question, it is most likely that the formatting of one one the date and/or time columns is hiding an actual difference in values.']], [[' Modification.dbo.Reference.Dates\ntmp_Cardevent2.CardEventDate\ntmp_Cardevent2.Intime\n']], ['While Using Distinct still getting duplicate values?'], 3], [(1498412, 0), [['A computed column must return a value, whereas you are just doing a comparison. Try this instead:'], ['SQL Server will not understand this as a non-NULLable column however. To handle that, change the computation to:']], [[' case when label is null then 0 else 1 end\n']], ['Sql Server Computed Column Formula syntax'], 2], [(1498412, 1), [['SQL Server will not understand this as a non-NULLable column however. To handle that, change the computation to:'], ['-10000']], [[' isnull(case when label IS NULL then 0 else 1 end, 0)\n']], ['Sql Server Computed Column Formula syntax'], 2], [(1498777, 0), [['-10000'], ['for formatted output, or']], [[' describe [db_name.]table_name;\n']], ['How do I show the schema of a table in a MySQL database?'], 2], [(1498777, 1), [['for formatted output, or'], ['for the SQL statement that can be used to create a table.']], [[' show create table [db_name.]table_name;\n']], ['How do I show the schema of a table in a MySQL database?'], 2], [(1499579, 0), [['SQL Server:'], ['MySQL (according to Bart J):']], [[" SELECT TOP 10 name FROM names WHERE name LIKE 'St%'\n"]], ['Auto-completion for names against a SQL database'], 3], [(1499579, 1), [['MySQL (according to Bart J):'], ['Oracle:']], [[" SELECT name FROM names WHERE name LIKE 'St%' LIMIT 10\n"]], ['Auto-completion for names against a SQL database'], 3], [(1499579, 2), [['Oracle:'], ['-10000']], [[" SELECT name FROM names WHERE name LIKE 'St%' AND rownum < 10\n"]], ['Auto-completion for names against a SQL database'], 3], [(1499637, 0), [['1.Insert into A everything that has been added to B'], ['2.Remove from A everything that has been removed from B']], [[' INSERT INTO a(id1, match1, value1)\nSELECT id2, match2, value2\nFROM b WHERE NOT EXISTS (SELECT 1 FROM a WHERE a.match1 = b.match2)\n']], ['How can I synchronize two MySQL tables that have different structures?'], 3], [(1499637, 1), [['2.Remove from A everything that has been removed from B'], ['3.Update A with the changed fields from B']], [[' DELETE FROM a\nWHERE match1 IN (SELECT match1 FROM a INNER JOIN B ON A.match1 = B.match2)\n']], ['How can I synchronize two MySQL tables that have different structures?'], 3], [(1499637, 2), [['3.Update A with the changed fields from B'], ['-10000']], [[' UPDATE a\nSET value1 = (SELECT value2 FROM b WHERE a.match1 = b.match2)\n']], ['How can I synchronize two MySQL tables that have different structures?'], 3], [(1499642, 0), [['Try this:'], ['I tested the Performance of the query with regexp_like and without. As you can see the query without the regexp_like function was 100% faster.\n(Note. Both querys did a soft-parse)']], [[" SELECT c1\nFROM   t1\nWHERE  substr(c1,1,1) IN ('A','B','C','D',\n                          'E','F','G','H',\n                          'I','J','K','L',\n                          'M','N','O','P',\n                          'Q','R','S','T',\n                          'U','V','W','X',\n                          'Y','Z')\n       AND substr(c1,2,1) IN ('A','B','C','D',\n                              'E','F','G','H',\n                              'I','J','K','L',\n                              'M','N','O','P',\n                              'Q','R','S','T',\n                              'U','V','W','X',\n                              'Y','Z')\n       AND substr(c1,3,1) IN ('1','2','3','4')\n/\n"]], ['Pattern Matching with Like Clause'], 4], [(1499642, 1), [['I tested the Performance of the query with regexp_like and without. As you can see the query without the regexp_like function was 100% faster.\n(Note. Both querys did a soft-parse)'], ['Get the ascii values of A,Z,1 and 4']], [[" SQL> select count(*) from t1;                                                                                                                     \n\n  COUNT(*)\n----------\n    458752\n\nElapsed: 00:00:00.02\nSQL> set timing off;                                                                                                                                  \nSQL> select count(*) from t1;                                                                                                                     \n\n  COUNT(*)\n----------\n    458752\n\nSQL> set timing on;                                                                                                                                   \nSQL> select count(*) from t1 where regexp_like(c1, '[A-Z][A-Z][1-4].*');                                                                       \n\n  COUNT(*)\n----------\n     65536\n\nElapsed: 00:00:02.66\nSELECT count(*)\nFROM   t1\nWHERE  substr(c1,1,1) IN ('A','B','C','D',\n                          'E','F','G','H',\n                          'I','J','K','L',\n                          'M','N','O','P',\n                          'Q','R','S','T',\n                          'U','V','W','X',\n                          'Y','Z')\n       AND substr(c1,2,1) IN ('A','B','C','D',\n                              'E','F','G','H',\n                              'I','J','K','L',\n                              'M','N','O','P',\n                              'Q','R','S','T',\n                              'U','V','W','X',\n                              'Y','Z')\n       AND substr(c1,3,1) IN ('1','2','3','4')\n 18  /                                                                                                                                                \n\n  COUNT(*)\n----------\n     65536\n\nElapsed: 00:00:01.15\nSQL> \n"]], ['Pattern Matching with Like Clause'], 4], [(1499642, 2), [['Get the ascii values of A,Z,1 and 4'], ['Now you can write your statement a lot shorter']], [[" SQL> select ascii('A') from dual;                                                                                                                     \n\nASCII('A')\n----------\n        65\n\n\nSQL> select ascii('Z') from dual;                                                                                                                     \n\nASCII('Z')\n----------\n        90\n\n\nSQL> select ascii('1') from dual;                                                                                                                     \n\nASCII('1')\n----------\n        49\n\nSQL> select ascii('4') from dual;                                                                                                                     \n\nASCII('4')\n----------\n        52\n"]], ['Pattern Matching with Like Clause'], 4], [(1499642, 3), [['Now you can write your statement a lot shorter'], ['-10000']], [[' SELECT count(* )\nFROM   t1\nWHERE  ascii(substr(c1,1,1)) BETWEEN 65 AND 90\n       AND ascii(substr(c1,2,1)) BETWEEN 65 AND 90\n       AND ascii(substr(c1,3,1)) BETWEEN 49 AND 52\n/\n']], ['Pattern Matching with Like Clause'], 4], [(1500051, 0), [['try this:'], ['However, if the  productprice  table is large, you may want to reduce it by filtering by the " OnSale " like here:']], [[" ;WITH CurrentPrice AS \n(\nSELECT productid,max(Date) AS Date\n    FROM productprice \n    WHERE date < @DateIn \n    GROUP BY productid\n)\n\nselect  \n    p.ProductName,\n    pp.Price,\n    pp.Date,\n    from product p\n        inner join CurrentPrice pa  on p.productid = pa.productid\n        inner join productprice pp  on pa.productid = pp.productid AND pa.Date=pp.Date\n    where p.producttype = 'OnSale'\n"]], ['Improve Sql Query with select max() function in where clause'], 2], [(1500051, 1), [['However, if the  productprice  table is large, you may want to reduce it by filtering by the " OnSale " like here:'], ['-10000']], [[" ;WITH CurrentPrice AS \n(\nselect  \n    p.productid,\n    MAX(pp.Date) AS Date\n    from product p\n        inner join productprice pp  on pa.productid = pp.productid\n    where p.producttype = 'OnSale' AND pp.date < @DateIn \n    GROUP BY productid\n)\nselect  \n    p.ProductName,\n    pp.Price,\n    pp.Date,\n    from CurrentPrice           pa\n        inner join product      p   on pa.productid = p.productid\n        inner join productprice pp  on pa.productid = pp.productid AND pa.Date=pp.Date\n    where p.producttype = 'OnSale'\n"]], ['Improve Sql Query with select max() function in where clause'], 2], [(1500300, 0), [['sticking to your logic, and not using ISNULL or COALESCE, try this:'], ['this is better though:']], [[" select\n  case \n     when @a=@b                      then 'equal' -- x x\n     when @a is null and @b is null  then 'equal' -- null null\n     else 'diff'\n  end\n"]], ['SQL "ANSI_NULLS OFF" comparison'], 2], [(1500300, 1), [['this is better though:'], ['-10000']], [[" select\n  case \n     when @a=@b OR COALESCE(@a,@b) is null then 'equal'\n     else 'diff'\n  end\n"]], ['SQL "ANSI_NULLS OFF" comparison'], 2], [(1500763, 0), [["Although I never used jsonpath, by reading its summary page, I believe that the following should produce all the odeu_nom for objects which catagorie is 'Feuilles' (given the json input referred in the question). "], ['which correspond to the following XPath']], [[" $.Liste_des_odeurs[?(@.categorie = 'Feuilles'].odeu_nom\n"]], ['JSON filter (like SQL SELECT)'], 2], [(1500763, 1), [['which correspond to the following XPath'], ["Et voila...\nBTW, 'Jazz is not dead, it just smells funny' (F Zappa)"]], [[" /Liste_des_odeurs[categorie='Feuilles']/odeu_nom\n"]], ['JSON filter (like SQL SELECT)'], 2], [(1502119, 0), [['Try the following SQL statement:'], ['In case you need several columns from table test, you need to add a primary key. Then, in your query, first obtain the primary key column and use it as reference on the following sub queries:']], [[' SELECT id, (\n    SELECT text\n    FROM test\n    WHERE test.ID = main.ID\n    ORDER BY created DESC \n    LIMIT 0 , 1\n    ) AS text\n\nFROM main\n']], ['How to select the desired result in MySQL?'], 2], [(1502119, 1), [['In case you need several columns from table test, you need to add a primary key. Then, in your query, first obtain the primary key column and use it as reference on the following sub queries:'], ['-10000']], [[' # Add the primary key\nALTER TABLE `test` ADD `test_id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY FIRST ;\n\n# Select many columns\nSELECT id, (\n\n    SELECT test_id\n    FROM test\n    WHERE test.ID = main.ID\n    ORDER BY created DESC \n    LIMIT 0 , 1\n\n) AS testID, (\n\n    SELECT text\n    FROM test\n    WHERE test_id = testID\n\n) AS text, (\n\n    SELECT created\n    FROM test\n    WHERE test_id = testID\n\n) AS created\n\nFROM main\n']], ['How to select the desired result in MySQL?'], 2], [(1503298, 0), [['get today no time:'], ['get yestersday no time:']], [[' SELECT dateadd(day,datediff(day,0,GETDATE()),0)\n']], ['SQL statement to select all rows from previous day'], 3], [(1503298, 1), [['get yestersday no time:'], ['query for all of rows from only yesterday:']], [[' SELECT dateadd(day,datediff(day,1,GETDATE()),0)\n']], ['SQL statement to select all rows from previous day'], 3], [(1503298, 2), [['query for all of rows from only yesterday:'], ['-10000']], [[' select \n    * \n    from yourTable\n    WHERE YourDate >= dateadd(day,datediff(day,1,GETDATE()),0)\n        AND YourDate < dateadd(day,datediff(day,0,GETDATE()),0)\n']], ['SQL statement to select all rows from previous day'], 3], [(1503959, 0), [['This should work:'], ['If you need the id as well you could include the above as a sub query like so:']], [[' SELECT age, count(age) \n  FROM Students \n GROUP by age\n']], ['How to count occurrences of a column value efficiently in SQL?'], 2], [(1503959, 1), [['If you need the id as well you could include the above as a sub query like so:'], ['-10000']], [[' SELECT S.id, S.age, C.cnt\n  FROM Students  S\n       INNER JOIN (SELECT age, count(age) as cnt\n                     FROM Students \n                    GROUP BY age) C ON S.age = C.age\n']], ['How to count occurrences of a column value efficiently in SQL?'], 2], [(1504109, 0), [['Still waiting for the OP to clarify the question, but if the multiple SHSRCE records still only relate to one serialnumber (which i am presuming is in  LOTC.fcuseinlot)'], ["If I'm getting you right, take a look at this kind of sql"]], [[' SELECT\n    ARM.fcustno AS [Cust No] ,\n    ARM.fbcompany AS [Cust Name] ,\n    ARM.fcinvoice AS [Invoice No] ,\n    ARM.fdgldate AS [Post Date] ,\n    ARI.fitem AS [Item No] ,\n    ARI.fprodcl AS [Prod Class] ,\n    ARI.fshipkey AS [Qty Invoiced] ,\n    ARI.fpartno AS [Part No] ,\n    ARI.frev AS [Part Rev] ,\n    ARI.FTOTPRICE AS [Net Invoiced] ,\n    ARM.fsono AS [Sales No] ,\n    SOM.fcusrchr2,\n       MAX(LOTC.fcuseinlot)\nFROM\n    dbo.ARMAST ARM \nJOIN dbo.aritem ARI ON  ARI.FCINVOICE = ARM.FCINVOICE \nJOIN slcdpm SLC ON  SLC.fcustno = ARM.fcustno\nLEFT JOIN slcdpm_ext SLCE ON  SLCE.fkey_id = SLC.identity_column\nLEFT JOIN somast SOM ON  SOM.fsono = ARM.fsono\nLEFT JOIN ShItem SHI ON  SHI.fShipNo + SHI.fItemNo = ARI.fShipKey\nLEFT JOIN ShSrce ON  ShSrce.fcShipNo = SHI.fShipNo AND ShSrce.fcItemNo = SHI.fItemNo\nLEFT JOIN QaLotC LOTC ON  LOTC.fcUseInDoc = ShSrce.fcShipNo + ShSrce.fcItemNo + ShSrce.fcSrcItmNo\nGROUP BY\n    ARM.fcustno ,\n    ARM.fbcompany ,\n    ARM.fcinvoice ,\n    ARM.fdgldate ,\n    ARI.fitem ,\n    ARI.fprodcl ,\n    ARI.fshipkey ,\n    ARI.fpartno ,\n    ARI.frev ,\n    ARI.FTOTPRICE ,\n    ARM.fsono ,\n    SOM.fcusrchr2\n']], ['Consolidating Queries'], 4], [(1504109, 1), [["If I'm getting you right, take a look at this kind of sql"], ['I know I can simply concatenate the refs by using']], [[' create table tableA (id int, ref varchar(50))\n\ninsert into tableA\nselect 1, 3536757616\nunion select 1, 3536757617\nunion select 1, 3536757618\nunion select 2, 3536757628\nunion select 2, 3536757629\nunion select 2, 3536757630\n']], ['Consolidating Queries'], 4], [(1504109, 2), [['I know I can simply concatenate the refs by using'], ['to give']], [[" SELECT distinct\n    id,\n    stuff ( ( SELECT\n                  '/ ' + ref \n              FROM\n                  tableA tableA_1\n              where tableA_1.id = tableA_2.id\n    FOR XML PATH ( '' ) ) , 1 , 2 , '' )\nfrom TableA tableA_2\n"]], ['Consolidating Queries'], 4], [(1504109, 3), [['to give'], ['-10000']], [[' 1   3536757616/ 3536757617/ 3536757618\n2   3536757628/ 3536757629/ 3536757630\n']], ['Consolidating Queries'], 4], [(1504664, 0), [['this floors to the month:'], ['output:']], [[' select dateadd(month,datediff(m,0,GETDATE()),0);\n']], ['T-SQL code to get a DateTime contain only Month and Year from any DateTime'], 3], [(1504664, 1), [['output:'], ['so try this:']], [[' -----------------------\n2009-10-01 00:00:00.000\n\n(1 row(s) affected)\n']], ['T-SQL code to get a DateTime contain only Month and Year from any DateTime'], 3], [(1504664, 2), [['so try this:'], ['-10000']], [[' SELECT\n   COUNT(*) as CountOF\n    ,dateadd(month,datediff(m,0,EventTime),0)\n    FROM [Event]\n    GROUP BY dateadd(month,datediff(m,0,EventTime),0)\n    ORDER BY 2\n']], ['T-SQL code to get a DateTime contain only Month and Year from any DateTime'], 3], [(1504793, 0), [['define tables:'], ['insert sample data:']], [[" CREATE TABLE #Apartments\n(\n     ApartmentID    int          not null primary key identity(1,1)\n    ,ApartmentName  varchar(500) not null\n    ,Status         char(1)      not null default ('A') \n    --....\n)\n\nCREATE TABLE #AttributeTypes\n(\n    AttributeType         smallint     not null primary key\n    ,AttributeDescription varchar(500) not null\n)\n\nCREATE TABLE #Attributes  --boolean attributes, if row exists apartment has this attribute \n(\n     ApartmentID     int not null --FK to Apartments.ApartmentID    \n    ,AttributeID     int not null primary key identity(1,1)\n    ,AttributeType   smallint  not null --fk to AttributeTypes\n)\n"]], ['SQL design approach for searching a table with an unlimited number of bit fields'], 5], [(1504793, 1), [['insert sample data:'], ['sample search query:']], [[" SET NO COUNT ON\nINSERT INTO #Apartments VALUES ('one','A')\nINSERT INTO #Apartments VALUES ('two','A')\nINSERT INTO #Apartments VALUES ('three','I')\nINSERT INTO #Apartments VALUES ('four','I')\n\nINSERT INTO #AttributeTypes VALUES (1,'dishwasher')\nINSERT INTO #AttributeTypes VALUES (2,'deck')\nINSERT INTO #AttributeTypes VALUES (3,'pool')\nINSERT INTO #AttributeTypes VALUES (4,'pets allowed')\nINSERT INTO #AttributeTypes VALUES (5,'washer/dryer')\nINSERT INTO #AttributeTypes VALUES (6,'Pets Alowed')\nINSERT INTO #AttributeTypes VALUES (7,'No Pets')\n\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (1,1)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (1,2)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (1,3)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (1,4)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (1,5)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (1,6)\n\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (2,1)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (2,2)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (2,3)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (2,4)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (2,7)\n\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (3,1)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (3,2)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (3,3)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (3,4)\n\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (4,1)\nINSERT INTO #Attributes (ApartmentID, AttributeType) VALUES (4,2)\nSET NOCOUNT OFF\n"]], ['SQL design approach for searching a table with an unlimited number of bit fields'], 5], [(1504793, 2), [['sample search query:'], ['OUTPUT:']], [[" ;WITH GetMatchingAttributes AS\n(\nSELECT\n    ApartmentID,COUNT(AttributeID) AS CountOfMatches\n    FROM #Attributes\n    WHERE AttributeType IN (1,2,3)  --<<change dynamically or split a CSV string and join in\n    GROUP BY ApartmentID\n    HAVING COUNT(AttributeID)=3--<<change dynamically or split a CSV string and use COUNT(*) from resulting table\n)\nSELECT\n    a.*\n    FROM #Apartments                      a\n        INNER JOIN GetMatchingAttributes m ON a.ApartmentID=m.ApartmentID\n    WHERE a.Status='A'\n    ORDER BY m.CountOfMatches DESC\n"]], ['SQL design approach for searching a table with an unlimited number of bit fields'], 5], [(1504793, 3), [['OUTPUT:'], ['here is code to have a list of exclude attributes:']], [[' ApartmentID ApartmentName \n----------- --------------\n1           one           \n2           two           \n\n(2 row(s) affected)\n']], ['SQL design approach for searching a table with an unlimited number of bit fields'], 5], [(1504793, 4), [['here is code to have a list of exclude attributes:'], ['I don\'t think I would go this way though.  I\'d go with the approach I outlined in my previous EDIT above.  When include/exclude of an attribute is necessary, I\'d just add an attribute for each: "Pets allowed" and "No Pets".  ']], [[" ;WITH GetMatchingAttributes AS\n(\nSELECT\n    ApartmentID,COUNT(AttributeID) AS CountOfMatches\n    FROM #Attributes\n    WHERE AttributeType IN (1,2,3)  --<<change dynamically or split an include CSV string and join in\n    GROUP BY ApartmentID\n    HAVING COUNT(AttributeID)=3--<<change dynamically or split a CSV string and use COUNT(*) from resulting include table\n)\n, SomeRemoved AS\n(\nSELECT\n    m.ApartmentID\n    FROM GetMatchingAttributes      m\n        LEFT OUTER JOIN #Attributes a ON m.ApartmentID=a.ApartmentID \n            AND a.AttributeType IN (5,6)   --<<change dynamically or split an exclude CSV string and join in\n    WHERE a.ApartmentID IS NULL\n)\nSELECT\n    a.*\n    FROM #Apartments           a\n        INNER JOIN SomeRemoved m ON a.ApartmentID=m.ApartmentID\n    WHERE a.Status='A'\n"]], ['SQL design approach for searching a table with an unlimited number of bit fields'], 5], [(1504945, 0), [['Try this:'], ['In details:']], [[' SELECT t1.name, t2.name FROM\n(\n    SELECT (ROW_NUMBER() OVER(ORDER BY name)-1)%(SELECT COUNT(*) FROM test2) AS j,* \n    FROM test1\n) t1\nINNER JOIN \n(\n    SELECT ROW_NUMBER() OVER(ORDER BY name)-1 AS j,* \n    FROM test2\n) t2 ON t1.j = t2.j\nORDER BY t1.name\n']], ['Joining tables (without a clause)'], 7], [(1504945, 1), [['In details:'], ['Returns: ']], [[' SELECT (ROW_NUMBER() OVER(ORDER BY name)-1) AS j,* \nFROM test1\n']], ['Joining tables (without a clause)'], 7], [(1504945, 2), [['Returns: '], ['This:']], [[' 0 | one\n1 | two\n2 | three\n3 | four\n4 | five\n5 | six\n6 | seven\n7 | eight\n']], ['Joining tables (without a clause)'], 7], [(1504945, 3), [['This:'], ['Returns:']], [[' SELECT ROW_NUMBER() OVER(ORDER BY name)-1 AS j,* \nFROM test2\n']], ['Joining tables (without a clause)'], 7], [(1504945, 4), [['Returns:'], ["All you have to do is to divide (% - I don't know the english name of this) the first column of the longest table by the number of elements in the shorter:"]], [[' 0 | fiftythree\n1 | fiftyfour\n2 | fiftytwo\n3 | fiftyfive\n4 | fiftyone\n']], ['Joining tables (without a clause)'], 7], [(1504945, 5), [["All you have to do is to divide (% - I don't know the english name of this) the first column of the longest table by the number of elements in the shorter:"], ['Returns: ']], [[' SELECT (ROW_NUMBER() OVER(ORDER BY name)-1)%(SELECT COUNT(*) FROM test2) AS j,* \nFROM test1\n']], ['Joining tables (without a clause)'], 7], [(1504945, 6), [['Returns: '], ['All you have to do now is to join both tables on the first column.']], [[' 0 | one\n1 | two\n2 | three\n3 | four\n4 | five\n0 | six\n1 | seven\n2 | eight\n']], ['Joining tables (without a clause)'], 7], [(1505276, 0), [['If you are looking for some aggregate counts, let me know, but this is how I interpreted your question:'], ['Or like this if you only want records that match on one of the two types:']], [[" select *,\n    case\n        when MyColumn = 'string1' and MyType = 'current name' then 1\n        when MyColumn = 'string2' and MyType = 'previous name' then 1\n        when MyColumn = 'string1' and MyType = 'previous name' then 0\n        when MyColumn = 'string2' and MyType = 'current name' then 0\n        else 2 -- in case type is neither previous nor current\n    end as Rating\nfrom MyTable\nwhere MyColumn = 'string1'\n    or MyColumn = 'string2'\n"]], ['Rating based upon which column matches a string'], 2], [(1505276, 1), [['Or like this if you only want records that match on one of the two types:'], ['-10000']], [[" select *,\n    case\n        when MyColumn = 'string1' and MyType = 'current name' then 1\n        when MyColumn = 'string2' and MyType = 'previous name' then 1\n        when MyColumn = 'string1' and MyType = 'previous name' then 0\n        when MyColumn = 'string2' and MyType = 'current name' then 0\n    end as Rating\nfrom MyTable\nwhere (MyColumn = 'string1' or MyColumn = 'string2')\n    and (MyType = 'current name' or MyType = 'previous name')\n"]], ['Rating based upon which column matches a string'], 2], [(1506036, 0), [['try this:'], ['The first of next Month is given by the expression:  ']], [[" Declare @D Datetime \nSet @D = [Some date for which you want the following months' first sunday]\nSelect DateAdd(day, (8-DatePart(weekday, \n    DateAdd(Month, 1+DateDiff(Month, 0, @D), 0)))%7, \n    DateAdd(Month, 1+DateDiff(Month, 0, @D), 0))\n"]], ['Get first Sunday of next month using T-SQL'], 4], [(1506036, 1), [['The first of next Month is given by the expression:  '], ['or by:\nwhich can be modified to give the first of the month two months from now by changing the 1 to a 2:']], [[' DateAdd(Month, 1+DateDiff(Month, 0, @D), 0)\n']], ['Get first Sunday of next month using T-SQL'], 4], [(1506036, 2), [['or by:\nwhich can be modified to give the first of the month two months from now by changing the 1 to a 2:'], ['EDIT: In response to @NissanFan, and @Anthony:  to modify this to return the first Monday Tuesday Wednesday, etc, change the value 8 to  a 9, 10, 11, etc....']], [[' DateAdd(Month, 2+DateDiff(Month, 0, @D), 0) \n']], ['Get first Sunday of next month using T-SQL'], 4], [(1506036, 3), [['EDIT: In response to @NissanFan, and @Anthony:  to modify this to return the first Monday Tuesday Wednesday, etc, change the value 8 to  a 9, 10, 11, etc....'], ['-10000']], [[" Declare @Sun TinyInt Set @Sun = 8\nDeclare @Mon TinyInt Set @Mon = 9\nDeclare @Tue TinyInt Set @Tue = 10\nDeclare @Wed TinyInt Set @Wed = 11\nDeclare @Thu TinyInt Set @Thu = 12\nDeclare @Fri TinyInt Set @Fri = 13\nDeclare @Sat TinyInt Set @Sat = 14\nDeclare @D Datetime, @FONM DateTime -- FirstofNextMonth \nSet @D = [Some date for which you want the following months' first sunday]\nSet @FONM = DateAdd(Month, 1+DateDiff(Month, 0, @D),0)\n\nSelect \n  DateAdd(day, (@Sun -DatePart(weekday, @FONM))%7, @FONM) firstSunInNextMonth,\n  DateAdd(day, (@Mon -DatePart(weekday, @FONM))%7, @FONM) firstMonInNextMonth,\n  DateAdd(day, (@Tue -DatePart(weekday, @FONM))%7, @FONM) firstTueInNextMonth,\n  DateAdd(day, (@Wed -DatePart(weekday, @FONM))%7, @FONM) firstWedInNextMonth,\n  DateAdd(day, (@Thu -DatePart(weekday, @FONM))%7, @FONM) firstThuInNextMonth,\n  DateAdd(day, (@Fri -DatePart(weekday, @FONM))%7, @FONM) firstFriInNextMonth,\n  DateAdd(day, (@Sat -DatePart(weekday, @FONM))%7, @FONM) firstSatInNextMonth\n"]], ['Get first Sunday of next month using T-SQL'], 4], [(1509508, 0), [['try this:'], ['OUTPUT:']], [[" CREATE TABLE #Table1\n(\ninTime varchar(8)\n)\n\nSET NOCOUNT ON\nINSERT INTO #Table1 VALUES('02:00:48')\nINSERT INTO #Table1 VALUES('22:00:22')\nSET NOCOUNT OFF\n\n\nSELECT\n    CONVERT(varchar(2),TotalSeconds/3600)\n        +':'\n        +RIGHT('00'+CONVERT(varchar(2),(TotalSeconds-(TotalSeconds/3600*3600))/60),2)\n        +':'\n        +RIGHT('00'+CONVERT(varchar(2),TotalSeconds-((TotalSeconds/3600*3600)+(((TotalSeconds-(TotalSeconds/3600*3600))/60)*60))),2) AS Answer\n        ,DATEADD(second,dt.TotalSeconds,CONVERT(datetime,'1/1/1900')) AS AnswerIncrementingDays\n\n    FROM (SELECT\n              SUM(DATEDIFF(second,CONVERT(datetime,'1/1/1900'),CONVERT(datetime,'1/1/1900 '+inTime))) AS TotalSeconds\n              FROM #Table1\n         ) dt\n"]], ['How to make total?'], 2], [(1509508, 1), [['OUTPUT:'], ['-10000']], [[' Answer   AnswerIncrementingDays\n-------- -----------------------\n24:01:10 1900-01-02 00:01:10.000\n\n(1 row(s) affected)\n']], ['How to make total?'], 2], [(1513438, 0), [['You can check whether or not a given ordinal position is null using  .IsDBNull()  and then do something - e.g. set your value to -1 or something:'], ['As Mike Hofer points out in his answer, you could also wrap all this logic into an extension method:']], [[' int myOrdinal = myReader.GetOrdinal("Truthfullness");\n\nif(myReader.IsDBNull(myOrdinal))\n{\n  theArticle.Truthfulness = -1;\n}\nelse\n{\n  theArticle.Truthfulness = myReader.GetInt32(myOrdinal);\n}\n']], ['How do I return a value to a sqldatareader if value is null?'], 3], [(1513438, 1), [['As Mike Hofer points out in his answer, you could also wrap all this logic into an extension method:'], ['and then just use that "SafeGetInt32" method instead:']], [[' public static class SqlDataReaderExtensions \n{\n    public static int SafeGetInt32(this SqlDataReader reader, \n                                   string columnName, int defaultValue) \n    {\n        int ordinal = reader.GetOrdinal(columnName);\n\n        if(!reader.IsDbNull(ordinal))\n        {\n           return reader.GetInt32(ordinal);\n        } \n        else\n        {\n           return defaultValue;\n        }\n    }\n}\n']], ['How do I return a value to a sqldatareader if value is null?'], 3], [(1513438, 2), [['and then just use that "SafeGetInt32" method instead:'], ['Marc']], [['   theArticle.Truthfulness = myReader.SafeGetInt32("Truthfullness", -1);\n']], ['How do I return a value to a sqldatareader if value is null?'], 3], [(1514003, 0), [['You could use multiple assignment to set many variables with the results of one query.'], ['You could pre-compute the date range that you want to update.  This could allow an index on dates to be useful.']], [[' SELECT top 1\n  @roc = roc,\n  @lec = lec,\n  @power = power\nFROM Price\nWHERE siteId = 77 and pricemonthid = 527\n']], ['SQL Update - Is there a more elegant and efficient way of doing this?'], 2], [(1514003, 1), [['You could pre-compute the date range that you want to update.  This could allow an index on dates to be useful.'], ['-10000']], [[' DECLARE @StartRange datetime, @EndRange datetime\n\nSET @StartRange = DateAdd(mm, DateDiff(mm, @startDate, 0), 0)\nSET @EndRange = DateAdd(yy, 1 + DateDiff(yy, @StartRange, 0), 0)\n\nUPDATE...\nWHERE @StartRange <= pm.Month AND pm.Month < @EndRange\n  AND price.SiteId = 77\n']], ['SQL Update - Is there a more elegant and efficient way of doing this?'], 2], [(1514359, 0), [['Do you mean you want the number of students for every teacher? You can use something like this:'], ["This will not include teachers that don't have any students. To include them in the results, you need to use a JOIN (assuming you have a  teacher  table):"]], [[' SELECT teacher_id, count(*) AS student_count\nFROM student\nGROUP BY teacher_id\n']], ['MYSQL get amount of results'], 2], [(1514359, 1), [["This will not include teachers that don't have any students. To include them in the results, you need to use a JOIN (assuming you have a  teacher  table):"], ['-10000']], [[' SELECT teacher.id, sum(if(student.id IS NULL, 0, 1)) AS student_count\nFROM teacher\n    LEFT JOIN student ON student.teacher_id=teacher.id\nGROUP BY teacher.id\n']], ['MYSQL get amount of results'], 2], [(1515189, 0), [['So, if you want ordered results you have to use the order by clause, like'], ['To order by multiple columns you specify them separated by comma']], [[' select * from orders order by order_num\n']], ['a little sql problem'], 2], [(1515189, 1), [['To order by multiple columns you specify them separated by comma'], ['-10000']], [[' select * from orders order by order_num asc, name desc\n']], ['a little sql problem'], 2], [(1515264, 0), [['Try:'], ['or']], [[" select firstname\n    ,lastname\nfrom users\nwhere lastname in('foo','bar')\ngroup by firstname\nHAVING count(*) = 2\n"]], ['MYSQL select "all" of the values rather than "any" of them?'], 2], [(1515264, 1), [['or'], ['-10000']], [[" SELECT u1.firstname\nFROM users u1\nINNER JOIN users u2\n    ON u1.firstname = u2.firstname\n    AND u1.lastname = 'foo'\n    AND u2.lastname = 'bar'\nGROUP BY u1.firstname\n"]], ['MYSQL select "all" of the values rather than "any" of them?'], 2], [(1518054, 0), [["Rexem's suggestion of using LAG() is the right approach but we need to use a partitioning clause.  This becomes clear once we add rows for different intervals and different stations..."], ['To remove the false positives we group the LAG() by STATIONID, FORECASTDATE and FORECASTINTERVAL.  Note that the following relies on the inner query returning NULL from the first calculation of each partition window.']], [[' SQL> select * from t\n  2  /    \nSTATIONID  FORECASTDATE INTERVAL FORECASTCREATED     FORECASTVALUE\n---------- ------------ -------- ------------------- -------------\nstationa   13-12-2009         10 10-12-2009 04:50:10             0\nstationa   13-12-2009         10 10-12-2009 17:06:13             0\nstationa   13-12-2009         10 12-12-2009 05:20:50           300\nstationa   13-12-2009         10 13-12-2009 09:20:50           300\nstationa   13-12-2009         11 13-12-2009 09:20:50           400\nstationb   13-12-2009         11 13-12-2009 09:20:50           500\n\n6 rows selected.\n\nSQL> SELECT v.stationid,\n  2         v.forecastcreated,\n  3         v.forecastvalue,\n  4         (v.forecastdate + v.forecastinterval / 24) fcst_date\n  5    FROM (SELECT t.stationid,\n  6                 t.forecastdate,\n  7                 t.forecastinterval,\n  8                 t.forecastcreated,\n  9                 t.forecastvalue,\n 10                 t.forecastvalue - LAG(t.forecastvalue, 1)\n 11                      OVER (ORDER BY t.forecastcreated) as difference\n 12            FROM t) v\n 13   WHERE v.difference >= 100\n 14  /    \nSTATIONID  FORECASTCREATED     FORECASTVALUE FCST_DATE\n---------- ------------------- ------------- -------------------\nstationa   12-12-2009 05:20:50           300 13-12-2009 10:00:00\nstationa   13-12-2009 09:20:50           400 13-12-2009 11:00:00\nstationb   13-12-2009 09:20:50           500 13-12-2009 11:00:00\n\nSQL> \n']], ['Oracle: Find previous record for a ranked list of forecasts'], 2], [(1518054, 1), [['To remove the false positives we group the LAG() by STATIONID, FORECASTDATE and FORECASTINTERVAL.  Note that the following relies on the inner query returning NULL from the first calculation of each partition window.'], ['Working with large volumes of data']], [[' SQL> SELECT v.stationid,\n  2         v.forecastcreated,\n  3         v.forecastvalue,\n  4         (v.forecastdate + v.forecastinterval / 24) fcst_date\n  5    FROM (SELECT t.stationid,\n  6                 t.forecastdate,\n  7                 t.forecastinterval,\n  8                 t.forecastcreated,\n  9                 t.forecastvalue,\n 10                 t.forecastvalue - LAG(t.forecastvalue, 1)\n 11                      OVER (PARTITION BY t.stationid\n 12                                         , t.forecastdate\n 13                                         , t.forecastinterval\n 14                            ORDER BY t.forecastcreated) as difference\n 15            FROM t) v\n 16   WHERE v.difference >= 100\n 17  /\n\nSTATIONID  FORECASTCREATED     FORECASTVALUE FCST_DATE\n---------- ------------------- ------------- -------------------\nstationa   12-12-2009 05:20:50           300 13-12-2009 10:00:00\n\nSQL> \n']], ['Oracle: Find previous record for a ranked list of forecasts'], 2], [(1518635, 0), [['A common question, though filtering out suggests you want to ignore the duplicate ones? If so, listing unique values:'], ['If you just want to filter so you  are left with  the duplicates']], [[' SELECT col \nFROM table\nGROUP BY col \nHAVING (COUNT(col) =1 )\n']], ['SQL Server: Retrieve the duplicate value in a column'], 2], [(1518635, 1), [['If you just want to filter so you  are left with  the duplicates'], ['Used www.mximize.com/how-to-find-duplicate-values-in-a-table- as a base in 2009; website content has now gone (2014).']], [[' SELECT col, COUNT(col) AS dup_count\nFROM table\nGROUP BY col\nHAVING (COUNT(col) > 1) \n']], ['SQL Server: Retrieve the duplicate value in a column'], 2], [(1521598, 0), [['The trigger runs after the change was made, so as far as I can tell there is no access to the "before" values.  The EVENTDATA() is defined and there is no provision for "previous".  As a result, you\'ll have to just record the current value in the log.  However, if you prepopulate your log with this command:'], ['you could use your trigger and still have a complete picture of all the changes.  Your log would have all previous versions as well as the current version of each procedure.  You could use my version of the trigger (see below), where you would have access to some of the other columns from sys.objects and sys.sql_modules, like:']], [["     INSERT INTO dbo.tblQueryAudit\n            (ObjectName, TSQLCommand)\n    SELECT\n        o.Name,m.definition\n        FROM sys.objects                 o\n            INNER JOIN sys.sql_modules   m ON o.object_id=m.object_id\n        WHERE type='P'\n"]], ['How to get procedure text before ALTER from DDL trigger'], 3], [(1521598, 1), [['you could use your trigger and still have a complete picture of all the changes.  Your log would have all previous versions as well as the current version of each procedure.  You could use my version of the trigger (see below), where you would have access to some of the other columns from sys.objects and sys.sql_modules, like:'], ['which might be handy to log as well.  alternative version:']], [[' uses_ansi_nulls\nuses_quoted_identifier\nis_schema_bound\nnull_on_null_input\nprincipal_id\n']], ['How to get procedure text before ALTER from DDL trigger'], 3], [(1521598, 2), [['which might be handy to log as well.  alternative version:'], ['-10000']], [[" CREATE trigger trgDDLAuditQuery\non  database\nfor             alter_procedure\nas \nbegin\n    set nocount on;\n\n    DECLARE @EventData      xml\n    SET @EventData=EVENTDATA()\n\n    INSERT INTO dbo.tblQueryAudit\n            (ObjectName, TSQLCommand) --hope you have  datetime column that defaults to GETDATE()\n        SELECT\n            o.Name,m.definition\n            FROM sys.objects                 o\n                INNER JOIN sys.sql_modules   m ON o.object_id=m.object_id\n            WHERE o.Name=@EventData.value('(/EVENT_INSTANCE/ObjectName)[1]', 'nvarchar(max)')\n                --modify as necessary AND type='P'\n\nend\nGO\n"]], ['How to get procedure text before ALTER from DDL trigger'], 3], [(1521835, 0), [['You can use it to seed RAND (because RAND is the same for all rows in a single select.'], ['A signed 64 bit integer:']], [[' SELECT RAND(CHECKSUM(NEWID()))\n']], ['How to generate a RNGCryptoServiceProvider-like number in TSQL'], 2], [(1521835, 1), [['A signed 64 bit integer:'], ['With some playing around you could cast and/or concatenate to get  binary("multiples of 4")  etc to build up a byte array... I\'ve not used the RAND thingy though to emulate directly']], [[' SELECT CAST(CHECKSUM(NEWID()) as bigint) * CAST(CHECKSUM(NEWID()) as bigint)\n']], ['How to generate a RNGCryptoServiceProvider-like number in TSQL'], 2], [(1524287, 0), [['If you want to order by object id first then date:'], ['If you want to order by date then object id:']], [[' SELECT * FROM table_name ORDER BY objectId, date\n']], ['MySql select just one and order by date and blog?'], 3], [(1524287, 1), [['If you want to order by date then object id:'], ['To get the results in PHP in the same order:']], [[' SELECT * FROM table_name ORDER BY date, objectId\n']], ['MySql select just one and order by date and blog?'], 3], [(1524287, 2), [['To get the results in PHP in the same order:'], ['-10000']], [[' $res = mysql_query ("SELECT * FROM table_name ORDER BY date, objectId");\n\nwhile ($row = mysql_fetch_object($res))\n{\n    echo "Object id: $row->objectId Date: $row->date\\n";\n}\n']], ['MySql select just one and order by date and blog?'], 3], [(1524403, 0), [['My attempt at a Microsoft SQL Server solution appears to work correctly:'], ["Here's the SQL Script to create the table:"]], [[" SELECT Ctry, Sales FROM\n(\n    SELECT TOP 2\n        Ctry,\n        SUM(Sales) AS Sales\n    FROM\n        Table1\n    GROUP BY\n        Ctry\n    ORDER BY\n        Sales DESC\n) AS Q1\nUNION ALL\nSELECT\n    'Other' AS Ctry,\n    SUM(Sales) AS Sales\nFROM\n    Table1\nWHERE\n    Ctry NOT IN (SELECT TOP 2\n            Ctry\n              FROM \n                Table1\n              GROUP BY\n            Ctry\n              ORDER BY\n            SUM(Sales) DESC)\n"]], ['SQL to produce Top 10 and Other'], 3], [(1524403, 1), [["Here's the SQL Script to create the table:"], ['And my data looks like this:']], [[' SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nSET ANSI_PADDING ON\nGO\nCREATE TABLE [dbo].[Table1](\n    [Ctry] [varchar](50) NOT NULL,\n    [Sales] [float] NOT NULL\n) ON [PRIMARY]\n\nGO\nSET ANSI_PADDING OFF\n']], ['SQL to produce Top 10 and Other'], 3], [(1524403, 2), [['And my data looks like this:'], ['Note that the query result is correctly ordered by the Sales value aggregate and not the alphabetic country code, and that the "Other" category is always last, even if it\'s Sales value aggregate would ordinarily push it to the top of the list.']], [[' GB  10\nGB  21.2\nGB  34\nGB  16.75\nUS  10\nUS  11\nUS  56.43\nFR  18.54\nFR  98.58\nWE  44.33\nWE  11.54\nWE  89.21\nKR  10\nPO  10\nDE  10\n']], ['SQL to produce Top 10 and Other'], 3], [(1525126, 0), [['First, create a user-defined table type'], ['Secondly, use that table type in your stored procedure as a parameter:']], [[' CREATE TYPE dbo.MyUserIDs AS TABLE (UserID INT NOT NULL)\n']], ['SQL : in clause in stored procedure:how to pass values'], 2], [(1525126, 1), [['Secondly, use that table type in your stored procedure as a parameter:'], ['See details  here .']], [[' CREATE PROC proc_GetUsers @UserIDTable MyUserIDs READONLY \nAS\nSELECT * FROM dbo.Users\n    WHERE userid IN (SELECT UserID FROM @UserIDTable)\n']], ['SQL : in clause in stored procedure:how to pass values'], 2], [(1525400, 0), [['I suspect you need to add an index on the column event_type_id in table event_type_to_event, but if there is already an index there, then try the following:'], ['If Event_Id is the PK of table event_type_to_event you can also  try  a join instead of using Exists, ']], [[' Select Count(*) as qtty\nFrom event e\n   Join org o On o.orgID = e.orgID\n   Join venue v On v.venueID = e.venueID\nWhere Match( e.name, e.description ) Against ( $keywords )\n   And e.site_id = $site_id\n   And e.display <> 0\n   And Exists \n      (Select * From event_type_to_event \n       Where event_id = e.eventID\n          And event_type_id = $category)\n']], ['Multiple Join or subquery query optimization'], 2], [(1525400, 1), [['If Event_Id is the PK of table event_type_to_event you can also  try  a join instead of using Exists, '], ['-10000']], [[' Select Count(*) as qtty\nFrom event e\n   Join org o On o.orgID = e.orgID\n   Join venue v On v.venueID = e.venueID\n   Join event_type_to_event t\n       On t.event_id = = e.eventID\nWhere Match( e.name, e.description ) Against ( $keywords )\n   And e.site_id = $site_id\n   And e.display <> 0\n   And t.event_type_id = $category\n']], ['Multiple Join or subquery query optimization'], 2], [(1526080, 0), [['Basically you have two problems - to  UNPIVOT , the data types have to be conformed.  The other problem is that the number of columns is unknown.  You want to reach something of the form:'], ['So using a dynamic SQL PIVOT using metadata (you might need to fix this up with TABLE_SCHEMA, etc):']], [[' WITH    conformed\n      AS ( SELECT   CONVERT(VARCHAR(255), [Firstname]) AS [Firstname],\n                    CONVERT(VARCHAR(255), [Surname]) AS [Surname],\n                    CONVERT(VARCHAR(255), [Address1]) AS [Address1],\n                    CONVERT(VARCHAR(255), [City]) AS [City],\n                    CONVERT(VARCHAR(255), [Country]) AS [Country]\n           FROM     so1526080\n         )\nSELECT  ColumnKey,\n        ColumnValue\nFROM    conformed UNPIVOT ( ColumnValue FOR ColumnKey IN ( [Firstname], [Surname], [Address1], [City], [Country] ) ) AS unpvt\n']], ['How to create a table of name-value pairs in SQL'], 2], [(1526080, 1), [['So using a dynamic SQL PIVOT using metadata (you might need to fix this up with TABLE_SCHEMA, etc):'], ['-10000']], [[" DECLARE @table_name AS SYSNAME\nSET @table_name = 'so1526080'\nDECLARE @conform_data_type AS VARCHAR(25)\nSET @conform_data_type = 'VARCHAR(255)'\n\nDECLARE @column_list AS VARCHAR(MAX)\nDECLARE @conform_list AS VARCHAR(MAX)\n\nSELECT  @conform_list = COALESCE(@conform_list + ', ', '') + 'CONVERT('\n        + @conform_data_type + ', ' + QUOTENAME(COLUMN_NAME) + ') AS '\n        + QUOTENAME(COLUMN_NAME),\n        @column_list = COALESCE(@column_list + ', ', '')\n        + QUOTENAME(COLUMN_NAME)\nFROM    INFORMATION_SCHEMA.COLUMNS\nWHERE   TABLE_NAME = @table_name\n\nDECLARE @template AS VARCHAR(MAX)\n\nSET @template = '\nWITH    conformed\n          AS ( SELECT  {@conform_list}\n               FROM     {@table_name}\n             )\n    SELECT  ColumnKey,\n            ColumnValue\n    FROM    conformed UNPIVOT ( ColumnValue FOR ColumnKey IN ( {@column_list} ) ) AS unpvt\n    '\n\nDECLARE @sql AS VARCHAR(MAX)\nSET @sql = REPLACE(REPLACE(REPLACE(@template, '{@conform_list}', @conform_list),\n                           '{@column_list}', @column_list), '{@table_name}',\n                   @table_name)    \n\nPRINT @sql\nEXEC ( @sql\n    )\n"]], ['How to create a table of name-value pairs in SQL'], 2], [(1526879, 0), [['As a matter of personal preference, I use '], ['However, an EXISTS clause in a SQL statement is a bit of a code smell, IMO.  There are times when they are the best and clearest way to get what you want, but they can almost always be expressed as a join, which will be a lot easier for the database engine to optimize.']], [['   SELECT *\n']], ["What do you put in a subquery's Select part when it's preceded by Exists?"], 3], [(1526879, 1), [['However, an EXISTS clause in a SQL statement is a bit of a code smell, IMO.  There are times when they are the best and clearest way to get what you want, but they can almost always be expressed as a join, which will be a lot easier for the database engine to optimize.'], ['Is logically identical to:']], [[' SELECT *\nFROM SOME_TABLE ST\nWHERE EXISTS(\n  SELECT 1\n  FROM SOME_OTHER_TABLE SOT\n  WHERE SOT.KEY_VALUE1 = ST.KEY_VALUE1\n    AND SOT.KEY_VALUE2 = ST.KEY_VALUE2\n  ) \n']], ["What do you put in a subquery's Select part when it's preceded by Exists?"], 3], [(1526879, 2), [['Is logically identical to:'], ['-10000']], [[' SELECT *\nFROM\n  SOME_TABLE ST\n  INNER JOIN\n  SOME_OTHER_TABLE SOT\n  ON ST.KEY_VALUE1 = SOT.KEY_VALUE1\n    AND ST.KEY_VALUE2 = SOT.KEY_VALUE2\n']], ["What do you put in a subquery's Select part when it's preceded by Exists?"], 3], [(1526996, 0), [['What about something like this, if I understand correctly the question :'], ['NOW()  will get you date+time ;  CURDATE()   (or its aliases  CURRENT_DATE()  and  CURRENT_DATE )  will get you date :']], [[" select *\nfrom your_table\nwhere your_date_field > '2009-10-06'\n"]], ['Mysql Date SELECT'], 3], [(1526996, 1), [['NOW()  will get you date+time ;  CURDATE()   (or its aliases  CURRENT_DATE()  and  CURRENT_DATE )  will get you date :'], ['So, in your case, something like this should do :']], [[' mysql> select now();\n+---------------------+\n| now()               |\n+---------------------+\n| 2009-10-06 19:35:36 |\n+---------------------+\n1 row in set (0.03 sec)\n\nmysql> select curdate();\n+------------+\n| curdate()  |\n+------------+\n| 2009-10-06 |\n+------------+\n1 row in set (0.01 sec)\n']], ['Mysql Date SELECT'], 3], [(1526996, 2), [['So, in your case, something like this should do :'], ['-10000']], [[' select *\nfrom your_table\nwhere your_date_field > curdate()\n']], ['Mysql Date SELECT'], 3], [(1527345, 0), [['Given your example, you do not pass the right parameters to  db_query_range . You should either try without passing the unused query parameter substitution  $vid :'], ['or better , use it properly by referencing it in your query (the  %d  at the end of your query will get substituted by the value of  $vid :']], [[' $query_limit = 190;\n$query1 = "SELECT N.nid ,N.tid FROM term_node N JOIN term_data S ON S.tid = N.tid AND S.vid = 1";\n$query_result = db_query_range($query1, 0, $query_limit);\n']], ['sql query not working in drupal when fetching more than 100 rows'], 2], [(1527345, 1), [['or better , use it properly by referencing it in your query (the  %d  at the end of your query will get substituted by the value of  $vid :'], ['-10000']], [[' $vid = 1;\n$query_limit = 190;\n$query1 = "SELECT N.nid ,N.tid FROM term_node N JOIN term_data S ON S.tid = N.tid AND S.vid = %d";\n$query_result = db_query_range($query1, $vid, 0, $query_limit);\n']], ['sql query not working in drupal when fetching more than 100 rows'], 2], [(1527870, 0), [['How about this:'], ["Or if you're on SQL Server 2005 and up, you could also use a CTE (Common Table Expression) with a ROW_NUMBER() and a PARTITION OVER statement like this:"]], [[' SELECT \n  Table1.Name, Table2.Rating\nFROM\n  table1 \nINNER JOIN \n  table2 ON table1.Table1ID = table2.Table2ID\nWHERE\n  inserteddate = (SELECT MAX(InsertedDate) \n                    FROM Table2 t2 \n                   WHERE t2.Table2ID = Table2.Table2ID)\n']], ['Return one row for each ID based on date column (SQL)'], 2], [(1527870, 1), [["Or if you're on SQL Server 2005 and up, you could also use a CTE (Common Table Expression) with a ROW_NUMBER() and a PARTITION OVER statement like this:"], ['This creates like a "temporary" view (the CTE) and numbers the entries partitioned by Table1ID (individual numbering for each separate Table1ID) and orders them descending by  InsertedDate  - so for each unique Table1ID, the most recent entry will have RowNum = 1.']], [[" WITH HelperCTE AS\n(\n  SELECT\n    Table1.Name, Table2.Rating,\n    ROW_NUMBER() OVER(PARTITION BY Table1.Table1ID \n                      ORDER BY Table2.InsertedDate DESC) AS 'RowNum'\n  FROM\n    table1 \n  INNER JOIN\n    table2 ON table1.Table1ID = table2.Table2ID\n)\nSELECT Name, Rating FROM HelperCTE\nWHERE RowNum = 1\n"]], ['Return one row for each ID based on date column (SQL)'], 2], [(1528272, 0), [['replace:'], ['with:']], [[" SELECT REPLACE(ls_string,'bob')\nINTO ls_temp FROM dual;\n"]], ['How to run REPLACE function in Oracle9i with strings larger than 4000 characters'], 2], [(1528272, 1), [['with:'], ["The RDBMS engine only supports VARCHAR2's up to 4000 in length, while PL/SQL supports up to 32767. Avoid going to the database for the REPLACE operation (it's unnecessary anyway) and it seems to work (at least w/ 10g)."]], [[" ls_temp := REPLACE(ls_string,'bob');\n"]], ['How to run REPLACE function in Oracle9i with strings larger than 4000 characters'], 2], [(1528281, 0), [['I would do this:'], ['and your result should be like:']], [[' SELECT v.userIP, NumOfVisits, NumOfOrders, v.Date\nFROM (\n    SELECT userIP, count(*) as NumOfVisits,\n         dateadd(dd, datediff(dd, 0, visitDate),0) as Date\n    FROM visits\n    GROUP BY userIP, dateadd(dd, datediff(dd, 0, orderDate), 0)) v\nLEFT JOIN (\n    SELECT userIp, count(*) as NumOfOrders,\n         dateadd(dd, datediff(dd, 0, orderDate),0) as Date\n    FROM orders\n    GROUP BY UserIP, dateadd(dd, datediff(dd, 0, orderDate), 0)) o\n ON o.UserIP = v.UserIP\n    AND o.Date = v.Date\n']], ['Grouping by day from 2 tables'], 4], [(1528281, 1), [['and your result should be like:'], ["if you don't need to group by userIP, you can do this:"]], [[' 78.34.5.11 | 3 | 1 | 2009.10.06\n78.34.5.19 | 9 | 0 | 2009.10.06\n']], ['Grouping by day from 2 tables'], 4], [(1528281, 2), [["if you don't need to group by userIP, you can do this:"], ['and your result will look like:']], [[' SELECT NumOfVisits, NumOfOrders, v.Date\nFROM (\n    SELECT count(*) as NumOfVisits,\n         dateadd(dd, datediff(dd, 0, visitDate),0) as Date\n    FROM visits\n    GROUP BY dateadd(dd, datediff(dd, 0, visitDate), 0)) v\nLEFT JOIN (\n    SELECT count(*) as NumOfOrders,\n         dateadd(dd, datediff(dd, 0, orderDate),0) as Date\n    FROM orders\n    GROUP BY dateadd(dd, datediff(dd, 0, orderDate), 0)) o\n ON o.Date = v.Date\n']], ['Grouping by day from 2 tables'], 4], [(1528281, 3), [['and your result will look like:'], ['-10000']], [[' 12 | 1 | 2009.10.06\n']], ['Grouping by day from 2 tables'], 4], [(1528879, 0), [['When the index is created:'], ['The first query will (probably) use the index, the second will not.\nYou could also use multiple indexes like:']], [[' SELECT * FROM table WHERE ...\n\nSELECT * FROM table WITH (INDEX(0)) WHERE ...\n']], ['SQL Server: Compare Index Performance'], 2], [(1528879, 1), [['The first query will (probably) use the index, the second will not.\nYou could also use multiple indexes like:'], ['-10000']], [[' SELECT * FROM table WITH (INDEX(IX_test1)) WHERE ...\n\nSELECT * FROM table WITH (INDEX(IX_test2)) WHERE ...\n']], ['SQL Server: Compare Index Performance'], 2], [(1529225, 0), [['First some test data:'], ["Building on Dave Barker's answer, within the inline views add row_number() so we know which is the first min values, which is the second, etc. by tariffId. (Actually since a date can't have more than one tariffId, we don't need to partition by tariffId.)"]], [[' create table seasons (seasonId int primary key\n    , "date" datetime not null unique\n    , tariffId int not null)\n\ninsert into seasons values (1, \'2009-01-01\', 1)\ninsert into seasons values (2, \'2009-01-02\', 1)\ninsert into seasons values (3, \'2009-01-03\', 2)\ninsert into seasons values (4, \'2009-01-04\', 3)\ninsert into seasons values (5, \'2009-01-05\', 3)\ninsert into seasons values (6, \'2009-01-06\', 1)\ninsert into seasons values (7, \'2009-01-07\', 1)\ninsert into seasons values (8, \'2009-01-08\', 3)\n-- add a tarrif with a datespan larger than 2\ninsert into seasons values (9, \'2009-01-09\', 4)\ninsert into seasons values (10, \'2009-01-10\', 4)\ninsert into seasons values (11, \'2009-01-11\', 4)\n']], ['SQL Server query to group sequential date data'], 3], [(1529225, 1), [["Building on Dave Barker's answer, within the inline views add row_number() so we know which is the first min values, which is the second, etc. by tariffId. (Actually since a date can't have more than one tariffId, we don't need to partition by tariffId.)"], ['Results:']], [[' SELECT MinValues.Seasonid, MinValues.Date, MaxValues.Date, MaxValues.tariffid \nFROM (\n    SELECT *, row_number() over (partition by tariffId order by "date") as RN \n      FROM [dbo].[Seasons] tbl1\n     WHERE NOT EXISTS (SELECT * \n                         FROM [dbo].[Seasons] tbl2 \n                        WHERE tbl1.seasonid - tbl2.seasonid = 1 \n                          AND tbl1.tariffId = tbl2.tariffId)) as minValues\nJOIN (\n     SELECT *, row_number() over (partition by tariffId order by "date") as RN\n       FROM [dbo].[Seasons] tbl1\n      WHERE NOT EXISTS (SELECT *\n                          FROM [dbo].[Seasons] tbl2 \n                         WHERE tbl2.seasonid - tbl1.seasonid = 1 \n                           AND tbl1.tariffId = tbl2.tariffId)) as maxValues\nON MinValues.TariffId = MaxValues.tariffId\nand MinValues.RN = MaxValues.RN\norder by MinValues.Date\n']], ['SQL Server query to group sequential date data'], 3], [(1529225, 2), [['Results:'], ['-10000']], [[' 1   2009-01-01 00:00:00.000 2009-01-02 00:00:00.000 1\n3   2009-01-03 00:00:00.000 2009-01-03 00:00:00.000 2\n4   2009-01-04 00:00:00.000 2009-01-05 00:00:00.000 3\n6   2009-01-06 00:00:00.000 2009-01-07 00:00:00.000 1\n8   2009-01-08 00:00:00.000 2009-01-08 00:00:00.000 3\n9   2009-01-09 00:00:00.000 2009-01-11 00:00:00.000 4\n']], ['SQL Server query to group sequential date data'], 3], [(1529670, 0), [['Try this'], ['we have an holiday table as ']], [[' SELECT  *\nFROM    TABLE2 t2 \nWHERE   t2.Date NOT IN (SELECT  Date FROM TABLE1 WHERE Holiday = 1)\n']], ['How to skip date where holiday code = 1'], 2], [(1529670, 1), [['we have an holiday table as '], ['which can allow you various calendar types, and for various countries.']], [[' CREATE TABLE [dbo].[METADATA_CALENDAR](\n    [CalendarDate] [datetime] NOT NULL,\n    [Description] [nvarchar](500) NULL,\n    [CalendarType] [nvarchar](100) NOT NULL,\n    [CalendarLocal] [nvarchar](50) NOT NULL,\n)\n']], ['How to skip date where holiday code = 1'], 2], [(1530661, 0), [['-10000'], ["If you don't need to ensure that the records exist in  tblThree  then you don't need to join to it at all:"]], [[' SELECT tblOne.*  -- use "SELECT DISTINCT tblOne.*" to avoid duplicate results\nFROM tblOne\n    INNER JOIN tblTwo\n        ON tblOne.tblTwoID = tblTwo.tblTwoID\n    INNER JOIN tblThree\n        ON tblTwo.tblThreeID = tblThree.tblThreeID\nWHERE tblTwo.tblThreeID = 42  -- replace "42" with the id you want to find\n']], ['Select Data from one end based on many end'], 2], [(1530661, 1), [["If you don't need to ensure that the records exist in  tblThree  then you don't need to join to it at all:"], ['-10000']], [[' SELECT tblOne.*  -- use "SELECT DISTINCT tblOne.*" to avoid duplicate results\nFROM tblOne\n    INNER JOIN tblTwo\n        ON tblOne.tblTwoID = tblTwo.tblTwoID\nWHERE tblTwo.tblThreeID = 42  -- replace "42" with the id you want to find\n']], ['Select Data from one end based on many end'], 2], [(1531255, 0), [['In  MySQL :'], ['In  SQL Server :']], [[' CREATE TABLE mytable (id INT NOT NULL, column_test CHAR(1));\n\nINSERT\nINTO    mytable (id)\nVALUES\n(1),\n(2),\n(3),\n(4);\n\nSET @r := 0;\nUPDATE  mytable\nSET     column_test = CHAR(96 + (@r := @r + 1))\nWHERE   column_test IS NULL\nORDER BY\n        id;\n\nSELECT  *\nFROM    mytable;\n']], ['how to upate multiple rows with one single SQL statement, each to a different status'], 2], [(1531255, 1), [['In  SQL Server :'], ['-10000']], [[' WITH    q AS\n        (\n        SELECT  *, ROW_NUMBER() OVER (ORDER BY id) AS rn\n        FROM    mytable\n        WHERE   column_test IS NULL\n        )\nUPDATE  q\nSET     column_test = CHAR(96 + rn)\n']], ['how to upate multiple rows with one single SQL statement, each to a different status'], 2], [(1531550, 0), [['When you quote an object name in Oracle, it becomes case-sensative.  Your CUSTOMER table is being quoted as "Customer" which is not the same as being quoted "CUSTOMER":'], ['Alternatively, if nothing else is looking for a CUSTOMERS table, you could rename it to "Customers"... however, this will break references to a CUSTOMERS table:']], [[' SQL> select * from "dual";\nselect * from "dual"\n              *\nERROR at line 1:\nORA-00942: table or view does not exist\n\n\nSQL> select * from "Dual";\nselect * from "Dual"\n              *\nERROR at line 1:\nORA-00942: table or view does not exist\n\n\nSQL> select * from "DUAL";\n\nD\n-\nX\n']], ['Fluent Nhibernate over legacy database in oracle'], 2], [(1531550, 1), [['Alternatively, if nothing else is looking for a CUSTOMERS table, you could rename it to "Customers"... however, this will break references to a CUSTOMERS table:'], ['Good luck!  I hope this helps...']], [[' SQL> create table CUSTOMERS (x int);\n\nTable created.\n\nSQL> insert into CUSTOMERS (x) values (1);\n\n1 row created.\n\nSQL> select * from CUSTOMERS;\n\n         X\n----------\n         1\n\nSQL> select * from "Customers";\nselect * from "Customers"\n              *\nERROR at line 1:\nORA-00942: table or view does not exist\n\n\nSQL> select * from "CUSTOMERS";\n\n         X\n----------\n         1\n\nSQL> alter table CUSTOMERS rename to "Customers";\n\nTable altered.\n\nSQL> select * from CUSTOMERS;\nselect * from CUSTOMERS\n              *\nERROR at line 1:\nORA-00942: table or view does not exist\n\n\nSQL> select * from "Customers";\n\n         X\n----------\n         1\n']], ['Fluent Nhibernate over legacy database in oracle'], 2], [(1532705, 0), [["With Jacob's suggestion, I can rewrite your query to be:"], ['and I get the desired output:']], [[' SELECT\n    x.value(\'@value\',\'VARCHAR(10)\') AS \'ItemValue\',        \n    p.number as \'CategoryNumber\'\nFROM\n    master..spt_values p\nCROSS APPLY \n    @x.nodes(\'/root/category[position()=sql:column("number")]/item\') n(x) \nWHERE\n    p.type = \'p\'\n']], ['rank over shredded xml'], 2], [(1532705, 1), [['and I get the desired output:'], ['Unfortunately, none of the more obvious solutions like the  position()  or  fn:id()  functions seem to a) work in SQL Server or b) be supported in SQL Server at all :-(']], [[' ItemValue   CategoryNumber\n---------   --------------\nnorth           1\nsouth           1\neast            1\nwest            1\nred             2\ngreen           2\nblue            2\n']], ['rank over shredded xml'], 2], [(1534134, 0), [['if you have a table that contains  prop_id  to include and to exclude  itemsIU (item_id, prop_id, include)'], ['for you particular example you can use:']], [[' select distinct stuff \n  from items i\n  join item_properties ip on i.id = ip.item_id\n  join itemsIU iiu on ip.prop_id = iiu.prop_id\ngroup by i.id\nhaving sum(include) = (select count(1) \n                         from itemsIU iiu2 \n                        where i.id = iiu2.item_id\n                          and iiu2.include = 1)\n']], ['Smartest way to write an "item has properties A,B,C but not X,Y,Z" query'], 2], [(1534134, 1), [['for you particular example you can use:'], ['-10000']], [[' select distinct stuff \n  from items i\n  join item_properties ip on i.id = ip.item_id\n  join (          select 123 prop_id, 1 include\n        union all select 456, 1\n        union all select 789, 0\n        union all select 101, 0) iiu on ip.prop_id = iiu.prop_id\ngroup by i.id\nhaving sum(include) = 2\n']], ['Smartest way to write an "item has properties A,B,C but not X,Y,Z" query'], 2], [(1534218, 0), [["You could try a scoring method based on weights for the matches, combined with the phonetic string matching algorithms you linked to. Here's an example I whipped up in T-SQL. It would have to be ported to Oracle for your issue."], ["And then, here's the output."]], [[" --Score Threshold to be returned\nDECLARE @Threshold DECIMAL(5,5) = 0.60\n\n--Weights to apply to each column match (0.00 - 1.00)\nDECLARE @Weight_FirstName DECIMAL(5,5) = 0.10\nDECLARE @Weight_LastName DECIMAL(5,5) = 0.40\nDECLARE @Weight_SSN DECIMAL(5,5) = 0.40\nDECLARE @Weight_Gender DECIMAL(5,5) = 0.10\n\nDECLARE @NewStuff TABLE (ID INT IDENTITY PRIMARY KEY, FirstName VARCHAR(MAX), LastName VARCHAR(MAX), SSN VARCHAR(11), Gender VARCHAR(1))\nINSERT INTO @NewStuff\n    ( FirstName, LastName, SSN, Gender )\nVALUES  \n    ( 'Ben','Sanders','234-62-3442','M' )\n\nDECLARE @OldStuff TABLE (ID INT IDENTITY PRIMARY KEY, FirstName VARCHAR(MAX), LastName VARCHAR(MAX), SSN VARCHAR(11), Gender VARCHAR(1))\nINSERT INTO @OldStuff\n    ( FirstName, LastName, SSN, Gender )\nVALUES\n    ( 'Ben','Stickler','234-62-3442','M' ), --3/4 Match\n    ( 'Albert','Sanders','523-42-3441','M' ), --2/4 Match\n    ( 'Benne','Sanders','234-53-2334','F' ), --2/4 Match\n    ( 'Ben','Sanders','234623442','M' ), --SSN has no dashes\n    ( 'Ben','Sanders','234-62-3442','M' ) --perfect match\n\nSELECT \n    'NewID' = ns.ID,\n    'OldID' = os.ID,\n\n    'Weighted Score' = \n        (CASE WHEN ns.FirstName = os.FirstName THEN @Weight_FirstName ELSE 0 END)\n        +\n        (CASE WHEN ns.LastName = os.LastName THEN @Weight_LastName ELSE 0 END)\n        +\n        (CASE WHEN ns.SSN = os.SSN THEN @Weight_SSN ELSE 0 END)\n        +\n        (CASE WHEN ns.Gender = os.Gender THEN @Weight_Gender ELSE 0 END)\n    ,   \n\n    'RAW Score' = CAST(\n        ((CASE WHEN ns.FirstName = os.FirstName THEN 1 ELSE 0 END)\n        +\n        (CASE WHEN ns.LastName = os.LastName THEN 1 ELSE 0 END) \n        +\n        (CASE WHEN ns.SSN = os.SSN THEN 1 ELSE 0 END) \n        +\n        (CASE WHEN ns.Gender = os.Gender THEN 1 ELSE 0 END) ) AS varchar(MAX))\n        + \n        ' / 4',\n\n    os.FirstName ,\n    os.LastName ,\n    os.SSN ,\n    os.Gender\n\nFROM @NewStuff ns\n\n--make sure that at least one item matches exactly\nINNER JOIN @OldStuff os ON \n    os.FirstName = ns.FirstName OR\n    os.LastName = ns.LastName OR\n    os.SSN = ns.SSN OR\n    os.Gender = ns.Gender\nwhere \n    (CASE WHEN ns.FirstName = os.FirstName THEN @Weight_FirstName ELSE 0 END)\n    +\n    (CASE WHEN ns.LastName = os.LastName THEN @Weight_LastName ELSE 0 END)\n    +\n    (CASE WHEN ns.SSN = os.SSN THEN @Weight_SSN ELSE 0 END)\n    +\n    (CASE WHEN ns.Gender = os.Gender THEN @Weight_Gender ELSE 0 END)\n    >= @Threshold\nORDER BY ns.ID, 'Weighted Score' DESC\n"]], ['How to match people between separate systems using SQL?'], 2], [(1534218, 1), [["And then, here's the output."], ["Then, you would have to do some post processing to evaluate the validity of each possible match. If you ever get a 1.00 for weighted score, you can assume that it's the right match, unless you get two of them. If you get a last name and SSN (a combined weight of 0.8 in my example), you can be reasonably certain that it's correct."]], [[' NewID OldID Weighted  Raw    First  Last      SSN          Gender\n1     5     1.00000   4 / 4  Ben    Sanders   234-62-3442  M\n1     1     0.60000   3 / 4  Ben    Stickler  234-62-3442  M\n1     4     0.60000   3 / 4  Ben    Sanders   234623442    M\n']], ['How to match people between separate systems using SQL?'], 2], [(1534745, 0), [['If person table is:'], ['If manager table is']], [[' id  name\n\n1   Person One\n2   Person Two\n3   Person Three\n4   Person Four\n5   Person Five\n']], ['How do constant values effect the ON clause of Joins?'], 4], [(1534745, 1), [['If manager table is'], ['if the query is:']], [[' id  name\n-1  Admin\n2   Manager One\n3   Manager Two\n']], ['How do constant values effect the ON clause of Joins?'], 4], [(1534745, 2), [['if the query is:'], ['Then the result is:']], [[' SELECT DISTINCT *\nFROM Person LEFT JOIN Manager \nON (Manager.id = Person.id OR Manager.id = -1)\n']], ['How do constant values effect the ON clause of Joins?'], 4], [(1534745, 3), [['Then the result is:'], ['Here all person rows joins with the -1 Admin (on manager table) AND if the same id exist in manager table one more join occurs.']], [[' Person One  -1  Admin\nPerson Two  -1  Admin\nPerson Two  2   Manager One\nPerson Three    -1  Admin\nPerson Three    3   Manager Two\nPerson Four -1  Admin\nPerson Five -1  Admin\n']], ['How do constant values effect the ON clause of Joins?'], 4], [(1536146, 0), [['If relationships are present in your database, you can use a pretty simple query similar to the following:'], ['If relationships are not present, this should work:']], [[' var results = from t1 in context.Table1\n              select new\n              {\n                  t1.Name,\n                  T2Count = t1.Table2s.Count()\n              };\n']], ['Translate SQL to linq-to-sql (subquery)'], 2], [(1536146, 1), [['If relationships are not present, this should work:'], ['-10000']], [[' var results = from t1 in context.Table1\n              join t2 in context.Table2 on t1.id equals t2.f_id into joined\n              select new\n              {\n                  t1.Name,\n                  T2Count = joined.Count()\n              };\n']], ['Translate SQL to linq-to-sql (subquery)'], 2], [(1536625, 0), [['If I understand you correctly you could do something like this:'], ['EDIT']], [[' select year(datecolumn) as Year, \n  (select id from PatiendRecords pr2 where pr2.id>=min(pr.id)+rand()*max(pr.id) LIMIT 1), \n  (select id from PatiendRecords pr2 where pr2.id>=min(pr.id)+rand()*max(pr.id) LIMIT 1), \n  (select id from PatiendRecords pr2 where pr2.id>=min(pr.id)+rand()*max(pr.id) LIMIT 1) \nfrom PatiendRecords pr\ngroup by year(datecolumn);\n']], ['Getting multiple records on year wise'], 2], [(1536625, 1), [['EDIT'], ['PS. I find it pretty cool that you have 50 million patient records in a MySQL database. DS.']], [[' delimiter //\n\nCREATE PROCEDURE RandomRecordsPerYear(n INT)\nBEGIN\n  CREATE TEMPORARY TABLE lookup\n  (id INT) ENGINE = MEMORY;\n\n  SET @x = 0;\n  REPEAT SET @x = @x + 1; \n     INSERT INTO lookup (id)  \n     SELECT (SELECT id FROM PatientRecords pr WHERE pr2.id>=min(pr.id)+rand()*max(pr.id) LIMIT 1) AS Id FROM PatientRecords pr GROUP BY year(created_at);\n  UNTIL @x >= n END REPEAT;\n\n  SELECT * FROM PatientRecords s JOIN lookup l ON l.id=pr.id;\n  DROP TABLE lookup;\nEND\n//\n\ncall RandomRecordsPerYear(3)//\n']], ['Getting multiple records on year wise'], 2], [(1536932, 0), [["The best way I can think of is writing an external script to do that. It's tricky to determine which columns are correct and which should be updated without having more control over the grouping. Pseudo-code:"], ['Alternatively, something like this could work, but you might need more than one run if want to handle cases where all three dates are different and you want to normalize two of them to the first one.']], [[' all_rows = SELECT * FROM table ORDER BY date\nlast_date = NULL\nrows_to_update = []\nfor row in all_rows:\n    if last_date is NULL or row.date - last_date > X seconds:\n        set date to last_date for all rows from rows_to_update\n        last_date = row.date\n        rows_to_update = []\n    else if row.date != last_date:\n        rows_to_update += row\n']], ['Retrieve/update rows with a minimal deviation in a certain column value'], 2], [(1536932, 1), [['Alternatively, something like this could work, but you might need more than one run if want to handle cases where all three dates are different and you want to normalize two of them to the first one.'], ['-10000']], [[' UPDATE\n   tbl t,\n   (SELECT\n        t.date,\n        (SELECT min(date)\n         FROM tbl\n         WHERE timestampdiff(SECOND,date,t.date) BETWEEN 1 AND 3) AS new_date\n    FROM tbl t) t2\nSET t.date=t2.new_date\nWHERE t.date=t2.date AND t2.new_date IS NOT NULL\n']], ['Retrieve/update rows with a minimal deviation in a certain column value'], 2], [(1537414, 0), [['This will show  value  for the records present,  0  for the records missing:'], ['This will work other way around:  0  for the records present,  value  for the records missing:']], [[' SELECT  t2.id, t2.date,\n        COALESCE(\n        (\n        SELECT  TOP 1 t2.value\n        FROM    table1 t1\n        WHERE   t2.date BETWEEN t1.fromdate AND t1.todate\n                AND t2.id = t1.id\n        ), 0) AS value\nFROM    table2 t2\n']], ['Value should be 0 between the two dates?'], 2], [(1537414, 1), [['This will work other way around:  0  for the records present,  value  for the records missing:'], ['-10000']], [[' SELECT  t2.id, t2.date,\n        COALESCE(\n        (\n        SELECT  TOP 1 0\n        FROM    table1 t1\n        WHERE   t2.date BETWEEN t1.fromdate AND t1.todate\n                AND t2.id = t1.id\n        ), t2.value) AS value\nFROM    table2 t2\n']], ['Value should be 0 between the two dates?'], 2], [(1538214, 0), [['then write'], ['If you want the 120 day count and the 180 day count to only include the folks who are over 60 and less than 120, etc. then,']], [['    SELECT YEAR(A.FPE) AS "YEAR",\n       Sum(CASE WHEN DAYS(A.FIL_DT) - DAYS(A.FPE) < 60 \n                  THEN 1 Else 0 End) SixtydayCount,  \n       Sum(CASE WHEN DAYS(A.FIL_DT) - DAYS(A.FPE) < 120 \n                  THEN 1 Else 0 End) OneTwentyDayCount,\n       Sum(CASE WHEN DAYS(A.FIL_DT) - DAYS(A.FPE) < 180 \n                  THEN 1  Else 0 End) OneEightyDayCount,\n       Sum(CASE WHEN DAYS(A.FIL_DT) - DAYS(A.FPE) > 180 \n                  THEN 1 Else 0 End)  OverOneEightyCount  \n    From Table A\n    WHERE A.FPE BETWEEN \'2006-01-01\' AND \'2008-12-31\'\n    Group By YEAR(A.FPE)\n']], ['SQL query with count and case statement'], 2], [(1538214, 1), [['If you want the 120 day count and the 180 day count to only include the folks who are over 60 and less than 120, etc. then,'], ['-10000']], [['      SELECT YEAR(A.FPE) AS "YEAR",\n       Sum(CASE WHEN DAYS(A.FIL_DT) - DAYS(A.FPE) < 60 \n                  THEN 1 Else 0 End) SixtydayCount,  \n       Sum(CASE WHEN DAYS(A.FIL_DT) - DAYS(A.FPE) Between 60 And 119 \n                  THEN 1 Else 0 End) OneTwentyDayCount,\n       Sum(CASE WHEN DAYS(A.FIL_DT) - DAYS(A.FPE) Between 120 And 179 \n                  THEN 1  Else 0 End) OneEightyDayCount,\n       Sum(CASE WHEN DAYS(A.FIL_DT) - DAYS(A.FPE) >= 180 \n                  THEN 1 Else 0 End)  OverOneEightyCount  \n    From Table A\n    WHERE A.FPE BETWEEN \'2006-01-01\' AND \'2008-12-31\'\n    Group By YEAR(A.FPE)\n']], ['SQL query with count and case statement'], 2], [(1538341, 0), [['-10000'], ["It's much more simple and efficient to rewrite it as this:"]], [[' SELECT  a as a1,b as b1,c as c1,\n        (\n        SELECT  SUM(d)\n        FROM    mytable mi\n        WHERE   mi.a = mo.a\n                AND mi.b= mo.b\n        ) as total\nFROM    mytable\nGROUP BY\n        a, b, c\n']], ['SELECT SUM as field'], 2], [(1538341, 1), [["It's much more simple and efficient to rewrite it as this:"], ['Note the  SUM(SUM(d))  here.']], [[' SELECT  a AS a1, B AS b1, c AS c1, SUM(SUM(d)) OVER (PARTITION BY a, b) AS total\nFROM    mytable\nGROUP BY\n        a, b, \n']], ['SELECT SUM as field'], 2], [(1541043, 0), [['You could do something along these lines (in your language of choice) to turn your string into an acceptable mysql datetime:'], ['There are a few ways to find records between two dates, this is my favourite:']], [[' $inputdate = "Thu, 08 Oct 2009 23:01:33 +0000";\n$unixdate = strtotime($inputdate); //output: 1255042893\n$datetime = date("Y-m-d H:i:s", $unixdate); //output: 2009-10-08 23:01:33\n']], ['mysql datetime field'], 2], [(1541043, 1), [['There are a few ways to find records between two dates, this is my favourite:'], ['-10000']], [[" SELECT * FROM table WHERE date >= '2009-07-01 00:00:00' and date <= '2009-10-31 23:59:59'\n"]], ['mysql datetime field'], 2], [(1541523, 0), [['Using GROUP BY/COUNTING:'], ['Using JOINs:']], [['   SELECT t.bus_line_id,\n         t.bus_line_type,\n         t.bus_line_number\n    FROM BUS_LINE t\n    JOIN LINK_BUS_NEIGBOURHOOD lbn ON lbn.bus_line_id = t.bus_line_id\n    JOIN LINK_NEIGHBOURHOOD_STREET lns ON lns.neighbourhood_id_ns = lbn.neighbourhood_id_ns\n    JOIN STREET s ON s.street_id = lns.street_id\n   WHERE s.street_id IN (12, 14)\nGROUP BY t.bus_line_id,\n         t.bus_line_type,\n         t.bus_line_number,\n         s.street_id\n  HAVING COUNT(DISTINCT s.street_id) = 2\n']], ['SQL double SELECT on the same field (mysql or sqlite3)'], 2], [(1541523, 1), [['Using JOINs:'], ['-10000']], [[' SELECT t.bus_line_id,\n       t.bus_line_type,\n       t.bus_line_number\n  FROM BUS_LINE t\n  JOIN LINK_BUS_NEIGBOURHOOD lbn ON lbn.bus_line_id = t.bus_line_id\n  JOIN LINK_NEIGHBOURHOOD_STREET lns ON lns.neighbourhood_id_ns = lbn.neighbourhood_id_ns\n  JOIN STREET s ON s.street_id = lns.street_id\n               AND s.steet_id = 12\n  JOIN STREET s2 ON s2.street_id = lns.street_id\n                AND s2.steet_id = 14\n']], ['SQL double SELECT on the same field (mysql or sqlite3)'], 2], [(1541570, 0), [["Here's my solution to Eric's function:"], ['This:']], [[" DECLARE @getmm INT\nDECLARE @getdd INT\n\nSET @yy = DATEDIFF(yy, @dstart, @dend)\nSET @mm = DATEDIFF(mm, @dstart, @dend)\nSET @dd = DATEDIFF(dd, @dstart, @dend)\nSET @getmm = ABS(DATEDIFF(mm, DATEADD(yy, @yy, @dstart), @dend))\nSET @getdd = ABS(DATEDIFF(dd, DATEADD(mm, DATEDIFF(mm, DATEADD(yy, @yy, @dstart), @dend), DATEADD(yy, @yy, @dstart)), @dend))\n\nRETURN (\n  Convert(varchar(10),@yy) + 'year' + Convert(varchar(10),@getmm) + 'month'  + Convert(varchar(10),@getdd) + 'day'\n)\n"]], ['How to use DATEDIFF to return year, month and day?'], 4], [(1541570, 1), [['This:'], ['..or non-CTE using for SQL Server 2000 and prior:']], [[" WITH ex_table AS (\n  SELECT '2007-01-01' 'birthdatetime',\n         '2009-03-29' 'visitdatetime')\nSELECT CAST(DATEDIFF(yy, t.birthdatetime, t.visitdatetime) AS varchar(4)) +' year '+\n       CAST(DATEDIFF(mm, DATEADD(yy, DATEDIFF(yy, t.birthdatetime, t.visitdatetime), t.birthdatetime), t.visitdatetime) AS varchar(2)) +' month '+\n       CAST(DATEDIFF(dd, DATEADD(mm, DATEDIFF(mm, DATEADD(yy, DATEDIFF(yy, t.birthdatetime, t.visitdatetime), t.birthdatetime), t.visitdatetime), DATEADD(yy, DATEDIFF(yy, t.birthdatetime, t.visitdatetime), t.birthdatetime)), t.visitdatetime) AS varchar(2)) +' day' AS result\n  FROM ex_table t\n"]], ['How to use DATEDIFF to return year, month and day?'], 4], [(1541570, 2), [['..or non-CTE using for SQL Server 2000 and prior:'], ['...will return:']], [[" SELECT CAST(DATEDIFF(yy, t.birthdatetime, t.visitdatetime) AS varchar(4)) +' year '+\n       CAST(DATEDIFF(mm, DATEADD(yy, DATEDIFF(yy, t.birthdatetime, t.visitdatetime), t.birthdatetime), t.visitdatetime) AS varchar(2)) +' month '+\n       CAST(DATEDIFF(dd, DATEADD(mm, DATEDIFF(mm, DATEADD(yy, DATEDIFF(yy, t.birthdatetime, t.visitdatetime), t.birthdatetime), t.visitdatetime), DATEADD(yy, DATEDIFF(yy, t.birthdatetime, t.visitdatetime), t.birthdatetime)), t.visitdatetime) AS varchar(2)) +' day' AS result\n  FROM (SELECT '2007-01-01' 'birthdatetime',\n         '2009-03-29' 'visitdatetime') t\n"]], ['How to use DATEDIFF to return year, month and day?'], 4], [(1541570, 3), [['...will return:'], ['Reference:  DATEDIFF']], [[' result\n----------------------\n2 year 2 month 28 day\n']], ['How to use DATEDIFF to return year, month and day?'], 4], [(1541662, 0), [['Create the following indexes:'], ['and try this:']], [[' CREATE INDEX ix_big_1_2_a ON tab_big (id1, id2, id_a)\nCREATE UNIQUE INDEX ux_small_b_2_1 ON tab_small (id_b, id2, id1)\n']], ['MySQL: optimizing a JOIN query'], 5], [(1541662, 1), [['and try this:'], [', which produces this query plan:']], [[' SELECT  DISTINCT\n        a.id_a\nFROM    tab_small b\nJOIN    tab_big a\nON      (a.id1, a.id2) = (b.id1, b.id2)\nWHERE   b.id_b = 2\n        AND a.id_a NOT IN\n        (\n        SELECT  id1\n        FROM    tab_small b1 /* FORCE INDEX (PRIMARY) */\n        WHERE   b1.id_b = 2\n        )\n        AND a.id_a NOT IN\n        (\n        SELECT  id2\n        FROM    tab_small b2 /* FORCE INDEX (ux_small_b_2_1) */\n        WHERE   b2.id_b = 2\n        )\n']], ['MySQL: optimizing a JOIN query'], 5], [(1541662, 2), [[', which produces this query plan:'], ['Judging by your statistics, this query will be more efficient:']], [[" 1, 'PRIMARY', 'b', 'ref', 'PRIMARY,ux_small_b_2_1', 'PRIMARY', '4', 'const', 1, 100.00, 'Using index; Using temporary'\n1, 'PRIMARY', 'a', 'ref', 'ix_big_1_2', 'ix_big_1_2', '8', 'test.b.id1,test.b.id2', 2, 100.00, 'Using where'\n3, 'DEPENDENT SUBQUERY', 'b2', 'ref', 'ux_small_b_2_1', 'ux_small_b_2_1', '8', 'const,func', 1, 100.00, 'Using index'\n2, 'DEPENDENT SUBQUERY', 'b1', 'ref', 'PRIMARY', 'PRIMARY', '8', 'const,func', 1, 100.00, 'Using index'\n"]], ['MySQL: optimizing a JOIN query'], 5], [(1541662, 3), [['Judging by your statistics, this query will be more efficient:'], ['Make sure that the following plan is used:']], [[' SELECT  id_a\nFROM    (\n        SELECT  DISTINCT id_a\n        FROM    tab_big ad\n        ) a\nWHERE   id_a NOT IN\n        (\n        SELECT  id1\n        FROM    tab_small b1 FORCE INDEX (PRIMARY)\n        WHERE   b1.id_b = 2\n        )\n        AND id_a NOT IN\n        (\n        SELECT  id2\n        FROM    tab_small b2 FORCE INDEX (ux_small_b_2_1)\n        WHERE   b2.id_b = 2\n        )\n        AND EXISTS\n        (\n        SELECT  NULL\n        FROM    tab_small be\n        JOIN    tab_big ae\n        ON      (ae.id1, ae.id2) = (be.id1, be.id2)\n        WHERE   be.id_b = 2\n                AND ae.id_a = a.id_a\n        )\n']], ['MySQL: optimizing a JOIN query'], 5], [(1541662, 4), [['Make sure that the following plan is used:'], [', the most important part being  Using index for group-by  in the last row.']], [[" 1, 'PRIMARY', '<derived2>', 'ALL', '', '', '', '', 8192, 100.00, 'Using where'\n5, 'DEPENDENT SUBQUERY', 'be', 'ref', 'PRIMARY,ux_small_b_2_1', 'PRIMARY', '4', 'const', 1, 100.00, 'Using index'\n5, 'DEPENDENT SUBQUERY', 'ae', 'eq_ref', 'PRIMARY,ix_big_1_2', 'PRIMARY', '12', 'a.id_a,test.be.id1,test.be.id2', 1, 100.00, 'Using index'\n4, 'DEPENDENT SUBQUERY', 'b2', 'ref', 'ux_small_b_2_1', 'ux_small_b_2_1', '8', 'const,func', 1, 100.00, 'Using index'\n3, 'DEPENDENT SUBQUERY', 'b1', 'ref', 'PRIMARY', 'PRIMARY', '8', 'const,func', 1, 100.00, 'Using index'\n2, 'DERIVED', 'ad', 'range', '', 'PRIMARY', '4', '', 10, 100.00, 'Using index for group-by'\n"]], ['MySQL: optimizing a JOIN query'], 5], [(1542611, 0), [["Here's a query expression:"], ['Or in dot notation:']], [[' var users = (from a in dc.Benutzer\n             select new { a.Name, a.Age, a.Occupation }).ToList();\n']], ['Simple Linq question: How to select more than one column?'], 3], [(1542611, 1), [['Or in dot notation:'], ["EDIT: If you really want to build instances of  Benutzer , and LINQ isn't letting you do so in a query (I'm not sure why) you could always do:"]], [[' var users = dc.Benutzer.Select(a => new { a.Name, a.Age, a.Occupation })\n                       .ToList();\n']], ['Simple Linq question: How to select more than one column?'], 3], [(1542611, 2), [["EDIT: If you really want to build instances of  Benutzer , and LINQ isn't letting you do so in a query (I'm not sure why) you could always do:"], ["i.e. use the anonymous type just as a DTO. Note that the returned  Benutzer  objects won't be associated with a context though."]], [[' List<Benutzer> users = dc.Benutzer\n    .Select(a => new { a.Name, a.Age, a.Occupation })\n    .AsEnumerable() // Forces the rest of the query to execute locally\n    .Select(x => new Benutzer { Name = x.Name, Age = x.Age, \n                                Occupation = x.Occupation })\n    .ToList();\n']], ['Simple Linq question: How to select more than one column?'], 3], [(1542886, 0), [['So after going around in a circle I realised the DMV did have the answer.'], ['Oh, and the short cut to it all:']], [[" create table foo (MyID int identity not null, MyField char(10))\ninsert into foo values ('test')\ngo 10\n\n-- Inserted 10 rows\nselect Convert(varchar(8),increment_value) as IncrementValue,\n   Convert(varchar(8),last_value) as LastValue\nfrom sys.identity_columns where name ='myid'\n\n\n-- insert another row\ninsert into foo values ('test')\n\n-- check the values again\nselect Convert(varchar(8),increment_value) as IncrementValue,\n   Convert(varchar(8),last_value) as LastValue\nfrom sys.identity_columns where name ='myid'\n\n-- delete the rows\ndelete from foo\n\n\n-- check the DMV again\nselect Convert(varchar(8),increment_value) as IncrementValue,\n   Convert(varchar(8),last_value) as LastValue\nfrom sys.identity_columns where name ='myid'\n\n-- value is currently 11 and increment is 1, so the next insert gets 12\ninsert into foo values ('test')\nselect * from foo\n\nResult:\nMyID        MyField\n----------- ----------\n12          test      \n\n(1 row(s) affected)\n"]], ['Getting the next ID without inserting a row'], 2], [(1542886, 1), [['Oh, and the short cut to it all:'], ["So it actually turns out to be easy - but this all assumes no one else has used your ID whilst you got it back. Fine for investigation, but I wouldn't want to use it in code."]], [[" select ident_current('foo') + ident_incr('foo')\n"]], ['Getting the next ID without inserting a row'], 2], [(1545203, 0), [["MySQL's  limit clause  makes this easy:"], ['In your case:']], [[' SELECT cols\nFROM table\nLIMIT offset, rowcount\n']], ['Database: SQL Pagination?'], 2], [(1545203, 1), [['In your case:'], ['-10000']], [[' LIMIT 49, 50 -- skip rows 0-49, grab the next 50\n']], ['Database: SQL Pagination?'], 2], [(1548110, 0), [["There are MySQL functions that make it possible to extract year/month/date information from a date, but they work on the MySQL's date type. So first you need to convert your UNIX timestamp to date, using  FROM_UNIXTIME(date)  and then extract the part of the information you want. See the  docs  for a list of available date functions. So, for example to get all years you can use:"], ['If you want to later filter the actual results, you can use this to get all rows from year 2009:']], [[' SELECT DISTINCT YEAR(FROM_UNIXTIME(date)) FORM table;\n']], ['SQL - Check which years contain data'], 3], [(1548110, 1), [['If you want to later filter the actual results, you can use this to get all rows from year 2009:'], ["Unless you have a good reason for storing the timestamp in the database, I'd suggest to convert the column to the MySQL's  datetime  type. That will allow you to use an index to speed up the query. MySQL can't create indexes using specific functions, so you can't use  YEAR()  in the query, but you can do for example:"]], [[' SELECT ... WHERE YEAR(FROM_UNIXTIME(date)) = 2009\n']], ['SQL - Check which years contain data'], 3], [(1548110, 2), [["Unless you have a good reason for storing the timestamp in the database, I'd suggest to convert the column to the MySQL's  datetime  type. That will allow you to use an index to speed up the query. MySQL can't create indexes using specific functions, so you can't use  YEAR()  in the query, but you can do for example:"], ['-10000']], [[' SELECT ... WHERE date >= 2009 AND date <= 2009;\n']], ['SQL - Check which years contain data'], 3], [(1549847, 0), [['So, for instance  IDX_IndexTables_2  cannot be used for this query (but IDX_IndexTables_1 can be used):'], ['but can be used for this query:']], [[' SELECT val1, val2 FROM IndexTables\nWHERE val1 = some_value\n']], ['Difference between 2 indexes with columns defined in reverse order'], 2], [(1549847, 1), [['but can be used for this query:'], ['The way to think about a composite index is think about a paper telephone directory; It is indexed by the surname column, and then the firstname column: you can look up by surname but not by firstname on its own.']], [[' SELECT val1, val2 FROM IndexTables\nWHERE val2 = some_value AND val1 = some_other-value\n']], ['Difference between 2 indexes with columns defined in reverse order'], 2], [(1551593, 0), [["To create a one-to-many relationship, you'll need a second table"], ['Now, you can do useful SQL queries like']], [[' Slots\n    id (primary key)\n    user_id (mapping to user table)\n    item_id (your slot # you want to store)\n']], ['Should I use multiple fields or JSON?'], 2], [(1551593, 1), [['Now, you can do useful SQL queries like'], ['Which would give you a list of all users who have slot item #12345']], [[' SELECT * FROM Users,Slots WHERE Slots.user_id = Users.id AND Slots.item_id = 12345\n']], ['Should I use multiple fields or JSON?'], 2], [(1552021, 0), [['-10000'], ['If  @count  is a constant, you can drop the parentheses:']], [[' select top(@count) * from users\n']], ['how to select first N rows from a table in T-SQL?'], 2], [(1552021, 1), [['If  @count  is a constant, you can drop the parentheses:'], ['(the latter works on SQL Server 2000 too, while the former requires at least 2005)']], [[' select top 42 * from users\n']], ['how to select first N rows from a table in T-SQL?'], 2], [(1552541, 0), [['You need to use % as a wildcard:'], ["That would return records with a '/q/' anywhere in the field.  If you want it to start with '/q/' but have anything after that, you would use:"]], [[" select * from MyURLs where MYuri LIKE '%/q/%'\n"]], ['How to use SQL LIKE'], 2], [(1552541, 1), [["That would return records with a '/q/' anywhere in the field.  If you want it to start with '/q/' but have anything after that, you would use:"], ['-10000']], [[" select * from MyURLs where MYuri LIKE '/q/%'\n"]], ['How to use SQL LIKE'], 2], [(1552697, 0), [['When you create query like this:'], ['you can dump SQL Query to somewhere or break after this line to view it in Debug Visualizer:']], [[' var q = new Select()\n   .From(TableName.Schema)\n   .Where(TableName.Columns.ColumnName)\n   .IsEqualTo(SOME_VALUE).Or(TableName.Columns.OtherColumn)\n   .IsEqualTo(OTHER_VALUE)\n   ......;\n']], ['Where can i see the query generated by subsonic?'], 2], [(1552697, 1), [['you can dump SQL Query to somewhere or break after this line to view it in Debug Visualizer:'], ['-10000']], [[' Debug.WriteLine(q.SQLCommand);\n']], ['Where can i see the query generated by subsonic?'], 2], [(1553373, 0), [['For the subsetting you do with the  data _null_  step, on the other hand, an index on  j  would surely help. If you do the same subsetting with the  proc sql , you will see that it  is  using the index. '], ['By the way, you can use the undocumented  _method  option to examine how  proc sql  executes your query. On my sas 9.2 on windows, it reports that it is doing what is called a "hash join":']], [[' proc sql;\n  select * from two where j < 100;\nquit;\n/* on log\nINFO: Index idx_j_k selected for WHERE clause optimization.\n*/\n']], ['Does SAS Proc SQL ever use an index when merging'], 2], [(1553373, 1), [['By the way, you can use the undocumented  _method  option to examine how  proc sql  executes your query. On my sas 9.2 on windows, it reports that it is doing what is called a "hash join":'], ["See Paul Kent's  Tech note  for more information ."]], [[' proc sql _method;\n  create table onetwo as\n  select\n    one.*,\n    two.x\n  from one, two\n  where\n    one.j=two.j and\n    one.k=two.k;\nquit;\n\n/* on log\nNOTE: SQL execution methods chosen are:\n\n  sqxcrta\n      sqxjhsh\n          sqxsrc( WORK.ONE )\n          sqxsrc( WORK.TWO )\n*/\n']], ['Does SAS Proc SQL ever use an index when merging'], 2], [(1553796, 0), [['This:'], ['or this:']], [[" SELECT  qi.*\nFROM    (\n        SELECT  DISTINCT id\n        FROM    questions_view\n        ) qd\nJOIN    questions_view qi\nON      qi.id = qd.id\n        AND qi.language =\n        COALESCE(\n        (\n        SELECT  language\n        FROM    questions_view qn\n        WHERE   parent IS NULL\n                AND language = 'de'\n                AND qn.id = qd.id\n        ),\n        (\n        SELECT  language\n        FROM    questions_view qn\n        WHERE   parent IS NULL\n                AND language = 'en'\n                AND qn.id = qd.id\n        )\n        )\n"]], ['How to optimize this SQL query?'], 2], [(1553796, 1), [['or this:'], ['Which if these queries is better depends on you database system and on how many questions in your database are translated.']], [[" SELECT  COALESCE(qde.question_text, qen.question_text)\nFROM    (\n        SELECT  DISTINCT id\n        FROM    questions_view\n        ) qd\nLEFT JOIN\n        questions_view qde\nON      qde.id = qd.id\n        AND qde.language = 'de'\nLEFT JOIN\n        questions_view qen\nON      qen.id = qd.id\n        AND qen.language = 'en'\n"]], ['How to optimize this SQL query?'], 2], [(1554079, 0), [['In the end I did find an easier solution. Use '], ['or simply']], [[" select os_command.exec('mkdir /home/oracle/mydir') from dual;\n"]], ['How can I create a directory on the file system?'], 2], [(1554079, 1), [['or simply'], ['-10000']], [[" x := os_command.exec('mkdir /home/oracle/mydir');\n"]], ['How can I create a directory on the file system?'], 2], [(1554668, 0), [['-10000'], ['So you probably want something like:']], [[' SELECT DISTINCT * FROM Table1, Table2\n']], ['Getting unique rows/values in SQL'], 3], [(1554668, 1), [['So you probably want something like:'], ['or, in a more current dialect of SQL:']], [[' SELECT DISTINCT * FROM Table1, Table2 WHERE Table1.SomeColumn = Table2.SomeColumn\n']], ['Getting unique rows/values in SQL'], 3], [(1554668, 2), [['or, in a more current dialect of SQL:'], ['-10000']], [[' SELECT DISTINCT * FROM Table1 INNER JOIN Table2 ON Table1.SomeColumn = Table2.SomeColumn\n']], ['Getting unique rows/values in SQL'], 3], [(1555071, 0), [['-10000'], ['Create a composite index on these fields:']], [[' SELECT  *\nFROM    tblJobs j\nINNER JOIN\n        tblCustomers c\nON      c.CustomerID = J.CustomerID\nINNER JOIN\n        tblJobTypes jt\nON      jt.JobTypeID = J.JobTypeID\nINNER JOIN\n        tblDepartments d\nON      d.DepartmentID = J.DepartmentId\nWHERE   J.Closed = 0\n        AND J.Invoiced = 0\n        AND J.Active = 1\n        AND J.DepartmentId <> 2\n        AND J.JobID IN\n        (\n        SELECT  JobID\n        FROM    tblLoadDetails\n        )\n        AND J.JobID NOT IN\n        (\n        SELECT  JobID\n        FROM    tblLoadDetails\n        WHERE   Delivered <> 1\n        )\n']], ['Query I need to be sped up'], 4], [(1555071, 1), [['Create a composite index on these fields:'], ['If your  tblLoadDetails.Delivered  is a bit field, then create the following index:']], [[' tblJobs (Closed, Invoiced, Active) INCLUDE (DepartmentID)\n']], ['Query I need to be sped up'], 4], [(1555071, 2), [['If your  tblLoadDetails.Delivered  is a bit field, then create the following index:'], ['and rewrite the last condition as this:']], [[' tblLoadDetail (JobID, Delivered)\n']], ['Query I need to be sped up'], 4], [(1555071, 3), [['and rewrite the last condition as this:'], ['-10000']], [[' SELECT  *\nFROM    tblJobs j\nINNER JOIN\n        tblCustomers c\nON      c.CustomerID = J.CustomerID\nINNER JOIN\n        tblJobTypes jt\nON      jt.JobTypeID = J.JobTypeID\nINNER JOIN\n        tblDepartments d\nON      d.DepartmentID = J.DepartmentId\nWHERE   J.Closed = 0\n        AND J.Invoiced = 0\n        AND J.Active = 1\n        AND J.DepartmentId <> 2\n        AND\n        (\n        SELECT  TOP 1 Delivered\n        FROM    tblLoadDetails ld\n        WHERE   ld.JobID = j.JobID\n        ORDER BY\n                Delivered\n        ) = 1\n']], ['Query I need to be sped up'], 4], [(1557132, 0), [['If you are on SQL Server 2008, you can use the  datetimeoffset  type:'], ['Since you are on 2005,  datetimeoffset  data type is not available for you. You should decide if you want to keep time zone information separately. If you just want the  datetime  part, just strip the time zone part from the string and cast it as a  datetime : ']], [[" select cast('2009-07-17T00:00:00-05:00' as datetimeoffset)\n"]], ['SQL datetime value'], 2], [(1557132, 1), [['Since you are on 2005,  datetimeoffset  data type is not available for you. You should decide if you want to keep time zone information separately. If you just want the  datetime  part, just strip the time zone part from the string and cast it as a  datetime : '], ['-10000']], [[" select cast(left('2009-07-17T00:00:00-5:00', 19) as datetime)\n"]], ['SQL datetime value'], 2], [(1558172, 0), [['Try looking at the detail of the field by using the built in DUMP function'], ['This will return data like']], [[' SELECT part_num,\n       length(trim(part_num)),\n       dump( trim( part_num ) )\n  FROM part_programs  \n WHERE rownum <= 10;\n']], ['Oracle length() function returning incorrect value'], 3], [(1558172, 1), [['This will return data like'], ['from this query']], [[' Typ=96 Len=6: 79,114,97,99,108,101\n']], ['Oracle length() function returning incorrect value'], 3], [(1558172, 2), [['from this query'], ['-10000']], [[" SELECT dump( 'Oracle' ) from dual\n"]], ['Oracle length() function returning incorrect value'], 3], [(1559789, 0), [['Copying in SQL works like so:'], ['If the values of the column  id_  are the same, you need to insert and update']], [[' insert into table2 (name, address)\nselect name, address\nfrom table1\n']], ['How to copy data between two tables in SQLite?'], 2], [(1559789, 1), [['If the values of the column  id_  are the same, you need to insert and update'], ['If you need to copy the columns between databases, you first export them into a file (use any format you like, for example CSV) and then merge that file into the second database manually since you can\'t write an SQL which says "use these sqlite structures".']], [[' insert into table2 (name, address)\nselect name, address\nfrom table1 t1\nwhere not exists (select * from table2 t2 where t1._id = t2._id)\n;\nupdate table2 t2 name = (select name from table1 t2 where t1._id = t2._id)\n;\nupdate table2 t2 address = (select address from table1 t2 where t1._id = t2._id)\n']], ['How to copy data between two tables in SQLite?'], 2], [(1560018, 0), [['Use outer join and NVL(arg1, arg2) function. \nIt returns first argument if it is not NULL, otherwise it returns second argument. Example:'], ["You can use  LEFT OUTER JOIN  syntax instead of  (+)  if you find it more readable. I'm using Oracle since v7 and I like  (+)  more.  \nHere is  LEFT OUTER JOIN  syntax:"]], [[" select s.AMOUNT, s.ID_DATE, s.ID_SELLER, s.ID_INVOICE,\n   NVL(n.AMOUNT, s.AMOUNT) amount       \nfrom STOCK s, NEW_STOCK n\nwhere s.ID_DATE = n.ID_DATE(+) \n  and s.ID_SELLER = n.ID_SELLER(+)\n  and s.ID_INVOICE = n.ID_INVOICE(+)\n  and s.ID_DOC = n.ID_DOC(+)\n  and s.ID_DATE = 1\n  and s.ID_SELLER = 'SELL1';\n"]], ['How to join results from two tables in Oracle 10'], 2], [(1560018, 1), [["You can use  LEFT OUTER JOIN  syntax instead of  (+)  if you find it more readable. I'm using Oracle since v7 and I like  (+)  more.  \nHere is  LEFT OUTER JOIN  syntax:"], ['-10000']], [[" select s.AMOUNT, s.ID_DATE, s.ID_SELLER, s.ID_INVOICE,\n   NVL(n.AMOUNT, s.AMOUNT) amount       \nfrom  STOCK s left outer join NEW_STOCK n \n      on s.ID_DATE = n.ID_DATE\n         and s.ID_SELLER = n.ID_SELLER\n         and s.ID_INVOICE = n.ID_INVOICE\n         and s.ID_DOC = n.ID_DOC\nwhere s.ID_DATE = 1\n  and s.ID_SELLER = 'SELL1';\n"]], ['How to join results from two tables in Oracle 10'], 2], [(1560576, 0), [['The query is fine, just create the following indexes:'], ['The rating system is simpler but quite similar: it gives almost same rating on the test random results I created.']], [[' pref (obj, usr, ord)\npref (usr, ord)\n']], ['MySQL: Suggesting objects (optimizing a multi-join query)'], 2], [(1560576, 1), [['The rating system is simpler but quite similar: it gives almost same rating on the test random results I created.'], ['This query gives the weight to each item rated higher than  A  by all users who rated  A .']], [[' SELECT  oa.obj, SUM(weight) AS rate\nFROM    (\n        SELECT  usr, ord,\n                (\n                SELECT  COUNT(*)\n                FROM    pref a\n                JOIN    pref ob\n                ON      ob.obj = a.obj\n                WHERE   ob.usr = o.usr\n                        AND a.usr = 50\n                        AND a.ord <\n                        (\n                        SELECT  ord\n                        FROM    pref ai\n                        WHERE   ai.usr = 50\n                                AND ai.obj = 75\n                        )\n                        AND ob.ord < o.ord\n                ) AS weight\n        FROM    pref o\n        WHERE   o.obj = 75\n        HAVING  weight >= 0\n        ) ow\nJOIN    pref oa\nON      oa.usr = ow.usr\n        AND oa.ord > ow.ord\nGROUP BY\n        oa.obj\nORDER BY\n        rate DESC\n']], ['MySQL: Suggesting objects (optimizing a multi-join query)'], 2], [(1561361, 0), [['have you try the following?'], ["the following will insure that in  INSERT INTO [User] ([UserGuid]) VALUES ('@UserGuid1')  nothing is matched:"]], [[' (?<=\\W)(@\\w+)\n']], ['RegEx for not matching items in a quote'], 2], [(1561361, 1), [["the following will insure that in  INSERT INTO [User] ([UserGuid]) VALUES ('@UserGuid1')  nothing is matched:"], ['-10000']], [[" (?<![\\w'])(@\\w+)\n"]], ['RegEx for not matching items in a quote'], 2], [(1564612, 0), [["I'd do the query and feed the output of it into awk:"], ['Just like any other command:']], [[" sqlplus 'select onething from another' | awk '{ weave awk magic here }'\n"]], ['connect to a DB inside awk script'], 2], [(1564612, 1), [['Just like any other command:'], ['-10000']], [[" pax> ls -alF | awk '{print $9}'\n    file1.txt\n    file2.txt\n    my_p0rn_dir/\n"]], ['connect to a DB inside awk script'], 2], [(1564917, 0), [['But you could do this in SQL using a WHILE loop.  Search for the first transaction, then carry it out, until there are no possible transactions left.'], ["Here's code to create test tables:"]], [[' declare @valid int\ndeclare @resid int\ndeclare @val float\nwhile 1 = 1\n    begin\n\n    select top 1 \n      @resid = r.ReserveId\n    , @valid = v.ValuesToReduceId\n    , @val = CASE WHEN -r.Value > v.Value THEN v.Value ELSE -r.Value END\n    from ValuesToReduce v\n    inner join Reserves r on r.PartnerId = v.PartnerId\n    where r.Value < 0 and v.Value > 0\n    order by r.ReserveId\n\n    if @@rowcount = 0\n        break\n\n    update ValuesToReduce \n    set Value = Value - @val \n    where ValuesToReduceId = @valid\n\n    update Reserves \n    set Value = Value + @val \n    where ReserveId = @resid\n    end\n']], ['Reducing values in one table until reserves depleted in another - recursion?'], 2], [(1564917, 1), [["Here's code to create test tables:"], ['-10000']], [[' create table ValuesToReduce (\n    ValuesToReduceId int,\n    PartnerId int,\n    Value float\n)\n\ninsert into ValuesToReduce values (1,1,53.15)\ninsert into ValuesToReduce values (2,2,601.98)\ninsert into ValuesToReduce values (3,1,91.05)\ninsert into ValuesToReduce values (4,2,44.56)\ninsert into ValuesToReduce values (5,3,19.11)\n\ncreate table Reserves (\n    ReserveId int,\n    PartnerId int,\n    Value float\n)\n\ninsert into Reserves values  (1,1,-101.55)\ninsert into Reserves values (2,2,-425.19)\ninsert into Reserves values (3,3,-28.17)\n']], ['Reducing values in one table until reserves depleted in another - recursion?'], 2], [(1567051, 0), [["Fleshing out Peter Eisentraut's answer; for postgresql 8.3 the array_agg\nfunction can be defined as"], ['and then the full query to get my desired answer becomes']], [[" CREATE AGGREGATE array_accum (anyelement)\n(\n    sfunc = array_append,\n    stype = anyarray,\n    initcond = '{}'\n);\n"]], ['Introspect postgresql 8.3 to find foreign keys'], 2], [(1567051, 1), [['and then the full query to get my desired answer becomes'], ["Forgive the non-standard way of commenting on his answer, I'm still learning\nhow to use Stackoverflow, and not having created an account in the first\ninstance hasn't helped things."]], [[' SELECT "table",\n       array_accum(columns) AS columns,\n       "foreign table",\n       array_accum("foreign columns") AS "foreign columns"\n  FROM ( SELECT conrelid::regclass AS "table",\n                a.attname as columns,\n                confrelid::regclass as "foreign table",\n                af.attname as "foreign columns"\n           FROM pg_attribute AS af,\n                pg_attribute AS a,\n                ( SELECT conrelid,\n                         confrelid,\n                         conkey[i] AS conkey,\n                         confkey[i] as confkey\n                    FROM ( SELECT conrelid,\n                                  confrelid, \n                                  conkey, \n                                  confkey, \n                                  generate_series(1, array_upper(conkey, 1)) AS i\n                             FROM pg_constraint\n              WHERE contype = \'f\'\n                  ) AS ss\n                ) AS ss2\n          WHERE af.attnum = confkey\n            AND af.attrelid = confrelid\n            AND a.attnum = conkey\n            AND a.attrelid = conrelid\n       ) AS ss3\n  GROUP BY "table",\n           "foreign table";\n']], ['Introspect postgresql 8.3 to find foreign keys'], 2], [(1567659, 0), [['Why not just grab them all at once?'], ['Or for a particular user:']], [[' SELECT u.user_id,u.username, m.field_id,m.value FROM user u\nLEFT JOIN metadata m\nON u.user_id=m.user_id \nWHERE 1 ORDER BY user_id\n']], ['Is there a more efficient way than doing several JOINS (MySQL)?'], 3], [(1567659, 1), [['Or for a particular user:'], ["A simple way to get one row per user (kinda) is in your loop returning the rows, check each user_id if it's the same as the last.  If not, new row."]], [[' SELECT u.user_id,u.username, m.field_id,m.value FROM user u\nLEFT JOIN metadata m\nON u.user_id=m.user_id \nWHERE user_id = ? ORDER BY user_id\n']], ['Is there a more efficient way than doing several JOINS (MySQL)?'], 3], [(1567659, 2), [["A simple way to get one row per user (kinda) is in your loop returning the rows, check each user_id if it's the same as the last.  If not, new row."], ['-10000']], [[" while ( $row = $sth->fetch_object() ) {\n  $previous_user_id = '';\n  if ( $row->user_id != $previous_user_id ) {\n    # new row\n  } else {\n    # not new row\n  }\n  $previous_user_id = $row->user_id;\n}\n"]], ['Is there a more efficient way than doing several JOINS (MySQL)?'], 3], [(1568406, 0), [['you can try this:'], ['Edit: \nas @steven pointed out, to have 24 hours style use']], [[" SELECT TO_CHAR(yourval, 'DD-MON-YYYY HH:MI:SS') FROM yourtable;\nSELECT TO_CHAR(yourval, 'HH:MI:SS') FROM yourtable;\n"]], ['how to show only the time in oracle?'], 2], [(1568406, 1), [['Edit: \nas @steven pointed out, to have 24 hours style use'], ['-10000']], [[" SELECT TO_CHAR(yourval, 'HH24:MI:SS') FROM yourtable;\n"]], ['how to show only the time in oracle?'], 2], [(1568824, 0), [['Use:'], ['Use this if you want to run dynamic SQL on Oracle:']], [[' CREATE OR REPLACE PROCEDURE MY_SPROC() RETURN SYS_REFCURSOR\n\nL_CURSOR SYS_REFCURSOR;\n\nBEGIN\n\n  OPEN L_CURSOR FOR \n    SELECT * from MYTABLE;\n\n  RETURN L_CURSOR;\n\nEND;\n']], ['Run a query inside an Oracle Stored Procedure'], 3], [(1568824, 1), [['Use this if you want to run dynamic SQL on Oracle:'], ['If you want to include bind variables in the dynamic SQL:']], [[" CREATE OR REPLACE PROCEDURE MY_SPROC() RETURN SYS_REFCURSOR\n\nL_CURSOR SYS_REFCURSOR;\nL_QUERY  VARCHAR2(5000) DEFAULT 'SELECT ...';\n\nBEGIN\n\n  OPEN L_CURSOR FOR L_QUERY;\n  RETURN L_CURSOR;\n\nEND;\n"]], ['Run a query inside an Oracle Stored Procedure'], 3], [(1568824, 2), [['If you want to include bind variables in the dynamic SQL:'], ['-10000']], [[" CREATE OR REPLACE PROCEDURE MY_SPROC() RETURN SYS_REFCURSOR\n\nL_CURSOR SYS_REFCURSOR;\nL_QUERY  VARCHAR2(5000) DEFAULT 'SELECT ...';\n\nBEGIN\n\n  OPEN L_CURSOR FOR L_QUERY\n   USING bind_var1;\n  RETURN L_CURSOR;\n\nEND;\n"]], ['Run a query inside an Oracle Stored Procedure'], 3], [(1569916, 0), [['You have three query options:'], ["Mind that the count has to equal the number of parameters in the  IN  clause, and the use of DISTINCT.  Without the distinct, an article had 2 associations to the same tag would turn up as a false positive.  This approach also doesn't transfer as easily IMO to dynamic SQL..."]], [['   SELECT a.articleid\n    FROM ARTICLES a\n    JOIN TAGS t ON t.tagid = a.tagid\n   WHERE t.tagid IN (123, 4386)\nGROUP BY a.articleid\n  HAVING COUNT(DISTINCT t.tagid) = 2\n']], ['Match only if one field matches multiple values (err?)'], 4], [(1569916, 1), [["Mind that the count has to equal the number of parameters in the  IN  clause, and the use of DISTINCT.  Without the distinct, an article had 2 associations to the same tag would turn up as a false positive.  This approach also doesn't transfer as easily IMO to dynamic SQL..."], ['This is likely to be the fastest of the options.']], [['   SELECT a.articleid\n    FROM ARTICLES a\n    JOIN TAGS t1 ON t1.tagid = a.tagid\n                AND t1.tagid = 123\n    JOIN TAGS t2 ON t2.tagid = a.tagid\n                AND t2.tagid = 4386\nGROUP BY a.articleid\n']], ['Match only if one field matches multiple values (err?)'], 4], [(1569916, 2), [['This is likely to be the fastest of the options.'], ["Because your requirements are dynamic, I suggest using MySQL's Prepared Statements:"]], [[' SELECT a.articleid\n  FROM ARTICLES a\n WHERE EXISTS(SELECT NULL\n                FROM TAGS t\n               WHERE t.tagid = a.tagid\n                 AND t.tagid = 123)\n   AND EXISTS(SELECT NULL\n                FROM TAGS t\n               WHERE t.tagid = a.tagid\n                 AND t.tagid = 4386)\n']], ['Match only if one field matches multiple values (err?)'], 4], [(1569916, 3), [["Because your requirements are dynamic, I suggest using MySQL's Prepared Statements:"], ["If you set  num  to zero, you'll get all articles.  The  WHILE  loop will append JOINs, creating an inclusive list of tags.  It's enough to get you started if you want to support exclusions in the same query."]], [[" DECLARE num INT \n\nSET @sql = 'SELECT a.articleid FROM ARTICLES a';\n\nWHILE num > 0\n  SET @sql = CONCAT(@sql, 'JOIN TAGS t', num, 'ON t', num,'.tagid = a.tagid AND t', num,'.tagid = ', tag, ' ');\n\n  SET num = num - 1;\nEND WHILE;\n\nSET @sql = CONCAT(@sql, 'GROUP BY a.articleid');\n\nPREPARE stmt FROM @sql\nEXECUTE stmt\nDEALLOCATE PREPARE stmt;\n"]], ['Match only if one field matches multiple values (err?)'], 4], [(1570082, 0), [['Spread your INSERTs over several statements:'], ["You asked if there's a way to roll all the results into one row. I can think of one way to do this but it's definitely not pretty, and I'm sure I'll be chastised by more SQL-savvy users in the comments, but here goes:"]], [[' DECLARE @t TABLE (Value int);\n\nINSERT INTO @t\nEXEC sproc1;\n\nINSERT INTO @t\nEXEC sproc2;\n\nINSERT INTO @t\nEXEC sproc3;\n\nSELECT Value FROM @t;\n']], ['(SQL) How would I return the result set from multiple executed stored procedures?'], 2], [(1570082, 1), [["You asked if there's a way to roll all the results into one row. I can think of one way to do this but it's definitely not pretty, and I'm sure I'll be chastised by more SQL-savvy users in the comments, but here goes:"], ['So that inserts the three values as separate rows, and then pivots on the Id values to create a single row with three columns.']], [[' DECLARE @t TABLE (Id int identity, Value int);\n\nINSERT INTO @t (Value)\nEXEC sproc1;\n\nINSERT INTO @t (Value)\nEXEC sproc2;\n\nINSERT INTO @t (Value)\nEXEC sproc3;\n\nSELECT Value FROM @t\nPIVOT ( AVG(Value) FOR Id IN ([1], [2], [3]) ) AS t;\n']], ['(SQL) How would I return the result set from multiple executed stored procedures?'], 2], [(1570157, 0), [['-- find last rows on b'], ['-- then join that b to a, this is the final query:']], [[' select * from b x \nwhere exists(\n     select id \n     from b y \n     where y.id = b.id \n     having max(y.dateReg) = x.dateReg\n     group by id\n     )\n']], ['Does not Recognize Column in Where Clause when Joining Tables'], 4], [(1570157, 1), [['-- then join that b to a, this is the final query:'], ['-- simpler:']], [[' select * from a\njoin \n(\n     select * from b x \n     where exists(\n         select id \n         from b y \n         where y.id = b.id \n         having max(y.dateReg) = x.dateReg\n         group by id\n         )\n\n) as last_rows on last_rows.id = a.id\n']], ['Does not Recognize Column in Where Clause when Joining Tables'], 4], [(1570157, 2), [['-- simpler:'], ['-- or if you will use postgres:']], [[' select * \nfrom a join b x on a.id = x.id\nwhere exists(\n    select id\n    from b y\n    where y.id = b.id\n    having max(y.dateReg) = x.dateReg\n    group by id)\n']], ['Does not Recognize Column in Where Clause when Joining Tables'], 4], [(1570157, 3), [['-- or if you will use postgres:'], ['-10000']], [[" select DISTINCT ON (a.id) * \nfrom a join b x on a.id = x.id\norder by a.id, b.dateReg DESC\n-- look ma! no group by!    \n\n-- nothing beats postgresql's simplicity :-)\n"]], ['Does not Recognize Column in Where Clause when Joining Tables'], 4], [(1570310, 0), [['The first thing I would do is change the data setup to be:'], ['Better yet would be ']], [[' id   uid   keyword     <- note, not keyword**s** - **ONE** value in this column, not a comma delimited list\n1    20    corporate\n2    20    corporate\n2    20    business\n2    20    strategy\n']], ['GROUP_CONCAT and DISTINCT are great, but how do i get rid of these duplicates i still have?'], 3], [(1570310, 1), [['Better yet would be '], ['with a seperate table for keywords']], [[' id   uid   keywordId    \n1    20    1\n2    20    1\n2    20    2\n2    20    3\n']], ['GROUP_CONCAT and DISTINCT are great, but how do i get rid of these duplicates i still have?'], 3], [(1570310, 2), [['with a seperate table for keywords'], ["Otherwise you'll need to massage the data in code."]], [[' KeywordID    KeywordText\n1            Corporate\n2            Business\n']], ['GROUP_CONCAT and DISTINCT are great, but how do i get rid of these duplicates i still have?'], 3], [(1570984, 0), [['You can rewrite the query in various ways to see if it speeds things up:'], ['Or:']], [[' SELECT a.articleId, a.pubDate \nFROM Articles a\nWHERE a.articleId in (\n    select articleId \n    from ArticleTopics\n    where topicId = 3364 \n)\nORDER BY a.pubDate DESC LIMIT 30;\n']], ['MySQL join with sort on datetime in joined table'], 2], [(1570984, 1), [['Or:'], ['The important index for both queries is on Articles, and contains articleId as first field.']], [[' SELECT a.articleId, a.pubDate \nFROM Articles a\nINNER JOIN ArticleTopics t ON t.articleId = a.articleId\nWHERE t.topicId = 3364 \nORDER BY a.pubDate DESC LIMIT 30;\n']], ['MySQL join with sort on datetime in joined table'], 2], [(1572831, 0), [['I think your question needs a bit of explanation. If you want to take the sums grouped by  t.client  you can use:'], ['Then, if you want to take the average of this sume, just make:']], [[' SELECT t.client, SUM(t.asset)\nFROM the-table t\nGROUP BY t.client\n']], ['Avg of a Sum in one query'], 2], [(1572831, 1), [['Then, if you want to take the average of this sume, just make:'], ["You can't however group the outer query, because this will give you results like in the first query. The results from the inner query are already grouped by  t.client . "]], [[' SELECT AVG(asset_sums)\nFROM\n(\n    SELECT t.client, SUM(t.asset) AS asset_sums\n    FROM the-table t\n    GROUP BY t.client\n) as inner_query\n']], ['Avg of a Sum in one query'], 2], [(1572840, 0), [['SQL Server 2008:'], ['1 result']], [[' select 1 \nwhere 5 between 1 and 7\n']], ['sql: BETWEEN v1 AND v2'], 4], [(1572840, 1), [['1 result'], ["Based on these results, and the  Postgre Docs   I would hypothesize that the ANSI Standard is as follows (although I can't find that doc)."]], [[' select 1 \nwhere 5 between 7 and 1\n']], ['sql: BETWEEN v1 AND v2'], 4], [(1572840, 2), [["Based on these results, and the  Postgre Docs   I would hypothesize that the ANSI Standard is as follows (although I can't find that doc)."], ['The SQL-92 spec says (quote):']], [[' a between x and y\n==\na >= x AND a <= y\n']], ['sql: BETWEEN v1 AND v2'], 4], [(1572840, 3), [['The SQL-92 spec says (quote):'], ['-10000']], [[' "X BETWEEN Y AND Z" is equivalent to "X>=Y AND X<=Z"\n']], ['sql: BETWEEN v1 AND v2'], 4], [(1574102, 0), [['Innodb version (where Addresses has foreign key for Employees, and  ON DELETE CASCADE  action)'], ['MyISAM version:']], [[' DELETE FROM Employees WHERE employee_id=7;\n']], ['Update: How to implement Foreign Key concept in MySQL when we do not have referential integrity features in MySQL?'], 2], [(1574102, 1), [['MyISAM version:'], ['I hope this makes things a bit clearer.']], [[' DELETE FROM Employees WHERE employee_id=7;\nDELETE FROM Addresses WHERE employee_id=7;\n']], ['Update: How to implement Foreign Key concept in MySQL when we do not have referential integrity features in MySQL?'], 2], [(1574838, 0), [['If the month is stored as a datetime field, you can use  DATEDIFF  to calculate the number of months between the first and the last bill.  If the number of elapsed months equals the total number of bills, the bills are consecutive.'], ['If you store the billing month as an integer, you can just subtract instead of using DATEDIFF.  Replace the WHEN row with:']], [[" select \n 'Customer ' + custname + ' was billed for ' +\n cast(count(*) as varchar) + ' months ' + \n case \n  when datediff(month,min(billdate),max(billdate))+1 = count(*) \n   then 'Concurrent'\n  else 'Non-Concurrent'\n end\nfrom @billing\nwhere billed = 1\ngroup by custname\n"]], ['SQL how to make one query out of multiple ones'], 2], [(1574838, 1), [['If you store the billing month as an integer, you can just subtract instead of using DATEDIFF.  Replace the WHEN row with:'], ['But in that case I wonder how you distinguish between years.']], [[' when max(billdate)-min(billdate)+1 = count(*) \n']], ['SQL how to make one query out of multiple ones'], 2], [(1574912, 0), [['-10000'], ['or if you want to be sneaky:']], [[' SELECT *\n  FROM table1\nLEFT OUTER\n  JOIN table2\n    ON ...\nLEFT OUTER\n  JOIN table3\n    ON ...\n WHERE NOT (table2.pk IS NULL AND table3.pk IS NULL)\n']], ['Is it possible to restrict the results of an outer join?'], 4], [(1574912, 1), [['or if you want to be sneaky:'], ['but for you case, i simply suggest:']], [['  WHERE COALESCE(table2.pk, table3.pk) IS NOT NULL\n']], ['Is it possible to restrict the results of an outer join?'], 4], [(1574912, 2), [['but for you case, i simply suggest:'], ['or the possibly more efficient:']], [[' SELECT *\n  FROM table1\n WHERE table1.pk IN (SELECT fk FROM table2)\n    OR table1.pk IN (SELECT fk FROM table3)\n']], ['Is it possible to restrict the results of an outer join?'], 4], [(1574912, 3), [['or the possibly more efficient:'], ['-10000']], [[' SELECT *\n  FROM table1\n WHERE table1.pk IN (SELECT fk FROM table2 UNION (SELECT fk FROM table3)\n']], ['Is it possible to restrict the results of an outer join?'], 4], [(1575552, 0), [['I suspect you are loading this data in one giant db transaction.  Your individual data files are nothing challenging-looking.  But the number of entries you are making into this database is 120M x avg # of keywords/image.  A naive loader program does this:'], ["A middle ground is to commit every 'n' inserts, say 10,000:"]], [[' start transaction\nfor each index file\n    parse file\n    for each keyword\n        insert (keyword,imagename) into db\ncommit transaction\n']], ['Process 40M of documents (and index) as fast as possible'], 3], [(1575552, 1), [["A middle ground is to commit every 'n' inserts, say 10,000:"], ['Ideally, a loader program is also restartable - this would require a SELECT query for each index file to see if its image exists in your database before inserting the keywords.  ']], [[' inserts = 0\nreset = 10000\nstart transaction\nfor each index file\n    parse file\n    for each keyword\n        insert (keyword,imagename) into db\n        inserts += 1\n        if inserts % reset == 0\n            commit transaction\n            start transaction\ncommit transaction\n']], ['Process 40M of documents (and index) as fast as possible'], 3], [(1575552, 2), [['Ideally, a loader program is also restartable - this would require a SELECT query for each index file to see if its image exists in your database before inserting the keywords.  '], ['But in your case, this may be prohibitively expensive.  As an alternative, you could look into what kind of import facility your database supports, and use your program to create one or more text files, probably no more complex then a list of keyword,imagename comma-delimted pairs.  Then the loader should have options like commit interval or exclusive locking to minimize the lock and journal overhead.']], [[' inserts = 0\nreset = 10000\nstart transaction\nfor each index file\n    parse file\n    if "SELECT count(*) from IMAGES where name=\'<insert imagename>\'" == 0\n        for each keyword\n            insert (keyword,imagename) into db\n            inserts += 1\n            if inserts % reset == 0\n                commit transaction\n                start transaction\ncommit transaction\n']], ['Process 40M of documents (and index) as fast as possible'], 3], [(1575579, 0), [['you really should look at changing your db schema. One option would be to create a table that holds colours with an INT as the primary key. You could then create a pivot table to link my_table to colours'], ["so your query could look like this - where '1' is the value of blue (and more likely how you would be referencing it)"]], [['  CREATE TABLE `colours` (\n`id` INT NOT NULL ,\n`colour` VARCHAR( 255 ) NOT NULL ,\nPRIMARY KEY ( `id` )\n) ENGINE = MYISAM \n\n CREATE TABLE `mytable_to_colours` (\n`mytable_id` INT NOT NULL ,\n`colour_id` INT NOT NULL ,\n) ENGINE = MYISAM \n']], ['Query mySql with LIKE %...% and not pull false records'], 2], [(1575579, 1), [["so your query could look like this - where '1' is the value of blue (and more likely how you would be referencing it)"], ['-10000']], [["    SELECT * \n     FROM my_table \n    JOIN mytable_to_colours ON (my_table.id = mytable_to_colours.mytable_id) \n    WHERE colour_id = '1'\n"]], ['Query mySql with LIKE %...% and not pull false records'], 2], [(1577904, 0), [['You can find all tables with a certain schema name like:'], ['With a cursor, you iterate over those tables, and empty them using  TRUNCATE TABLE :']], [[" select name from sys.tables where schema_name(schema_id) = 'audit'\n"]], ['Delete all table data in a set [DB].[audit].[tables]'], 3], [(1577904, 1), [['With a cursor, you iterate over those tables, and empty them using  TRUNCATE TABLE :'], ['If you want to delete the tables instead, use:']], [[" use db\ndeclare @query nvarchar(max)\ndeclare @tablename nvarchar(max)\ndeclare @curs cursor\nset @curs = cursor for select name from sys.tables \n    where schema_name(schema_id) = 'audit'\nopen @curs\nfetch next from @curs into @tablename\nwhile @@FETCH_STATUS = 0\n begin\n set @query = N'truncate table audit.' + @tablename\n exec sp_executesql @query\n fetch next from @curs into @tablename\n end\nclose @curs\ndeallocate @curs\n"]], ['Delete all table data in a set [DB].[audit].[tables]'], 3], [(1577904, 2), [['If you want to delete the tables instead, use:'], ['-10000']], [[" set @query = N'drop table audit.' + @tablename\n"]], ['Delete all table data in a set [DB].[audit].[tables]'], 3], [(1578500, 0), [['try this:'], ['OUTPUT:']], [[" BEGIN TRY\nCREATE TABLE YourTestTable\n(RowID       int primary key not null identity(1,1)\n,col1        int null\n,col2        varchar(30)\n,col3        varchar(20)\n,col4        money\n,StatusValue char(1)\n,xyz_123     int\n)\nINSERT INTO YourTestTable (col1,col2,col3,col4,StatusValue,xyz_123) VALUES (1234,'wow wee!','this is a long test!',1234.56,'A',98765)\nINSERT INTO YourTestTable (col1,col2,col3,col4,StatusValue,xyz_123) VALUES (543,'oh no!','short test',0,'I',12)\n\nEND TRY BEGIN CATCH END CATCH\n\nselect * from YourTestTable\n\n\nDECLARE @YourTableName   varchar(1000)\nDECLARE @YourTableWhere  varchar(1000)\nDECLARE @YourQuery       varchar(max)\n\nSET @YourTableName='YourTestTable'\nset @YourTableWhere='y.RowID=1'\n\nSELECT\n    @YourQuery = STUFF(\n                       (SELECT\n                            ' UNION '\n                            + 'SELECT '''+COLUMN_NAME+''', CONVERT(varchar(max),'+COLUMN_NAME+') FROM '+@YourTableName+' y'+ISNULL('  WHERE '+@YourTableWhere,'')\n                            FROM INFORMATION_SCHEMA.COLUMNS\n                            WHERE table_name = @YourTableName\n                            FOR XML PATH('')\n                       ), 1, 7, ''\n                      )\n\nPRINT @YourQuery  \n\nEXEC (@YourQuery)\n"]], ['how to select columns as rows?'], 3], [(1578500, 1), [['OUTPUT:'], ['For SQL Server 2000 compatibility, you should be able to replace varchar(max) with varchar(8000) and use this in place of the  SELECT @YourQuery  query from the code above:']], [[" RowID       col1        col2                           col3                 col4                  StatusValue xyz_123\n----------- ----------- ------------------------------ -------------------- --------------------- ----------- -----------\n1           1234        wow wee!                       this is a long test! 1234.56               A           98765\n2           543         oh no!                         short test           0.00                  I           12\n\nSELECT 'RowID', CONVERT(varchar(max),RowID) FROM YourTestTable y  WHERE y.RowID=1 UNION SELECT 'col1', CONVERT(varchar(max),col1) FROM YourTestTable y  WHERE y.RowID=1 UNION SELECT 'col2', CONVERT(varchar(max),col2) FROM YourTestTable y  WHERE y.RowID=1 UNION SELECT 'col3', CONVERT(varchar(max),col3) FROM YourTestTable y  WHERE y.RowID=1 UNION SELECT 'col4', CONVERT(varchar(max),col4) FROM YourTestTable y  WHERE y.RowID=1 UNION SELECT 'StatusValue', CONVERT(varchar(max),StatusValue) FROM YourTestTable y  WHERE y.RowID=1 UNION SELECT 'xyz_123', CONVERT(varchar(max),xyz_123) FROM YourTestTable y  WHERE y.RowID=1\n\n----------- ------------------------\ncol1        1234\ncol2        wow wee!\ncol3        this is a long test!\ncol4        1234.56\nRowID       1\nStatusValue A\nxyz_123     98765\n"]], ['how to select columns as rows?'], 3], [(1578500, 2), [['For SQL Server 2000 compatibility, you should be able to replace varchar(max) with varchar(8000) and use this in place of the  SELECT @YourQuery  query from the code above:'], ['-10000']], [[" SELECT\n    @YourQuery=ISNULL(@YourQuery+' UNION ','')\n        + 'SELECT '''+COLUMN_NAME+''', CONVERT(varchar(max),'+COLUMN_NAME+') FROM '+@YourTableName+' y'+ISNULL('  WHERE '+@YourTableWhere,'')\n    FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE table_name = @YourTableName\n"]], ['how to select columns as rows?'], 3], [(1579400, 0), [["Here's one way (lameness quotient calculation left as an exercise to the reader):"], ["EDIT : It's a slow afternoon, so I decided to look into this analytic function stuff that 10g offers (further dragging myself into the current century ;-), and rewrote the above using the LAG function:"]], [[" CREATE TABLE scores (user_id VARCHAR2(32), test_date DATE, score NUMBER);\n\nINSERT INTO scores VALUES('U1',SYSDATE-61, 85);\nINSERT INTO scores VALUES('U1',SYSDATE-31, 89);\nINSERT INTO scores VALUES('U1',SYSDATE, 92);\nINSERT INTO scores VALUES('U2',SYSDATE-61, 65);\nINSERT INTO scores VALUES('U2',SYSDATE-31, 89);\nINSERT INTO scores VALUES('U2',SYSDATE, 84);\n\nCOMMIT;\n\nSELECT s1.user_id, s1.test_date, s2.score-s1.score delta\n  FROM scores s1 \n       JOIN (SELECT user_id, trunc(test_date,'MM') test_date, score FROM scores) s2\n         ON (s1.user_id = s2.user_id AND\n             trunc(add_months(s1.test_date,1),'MM') = s2.test_date);\n\nUSER_ID                          TEST_DATE        DELTA\n-------------------------------- ---------   ----------\nU1                               9/15/2009            3\nU1                               8/16/2009            4\nU2                               9/18/2009           -5\nU2                               8/19/2009           24\n"]], ['How do I get entries in the next month from oracle sql?'], 3], [(1579400, 1), [["EDIT : It's a slow afternoon, so I decided to look into this analytic function stuff that 10g offers (further dragging myself into the current century ;-), and rewrote the above using the LAG function:"], ['Which produces:']], [[' SELECT user_id, test_date, score\n     , LAG(score, 1, NULL) OVER (PARTITION BY user_id ORDER BY test_date DESC) - score delta\n     , LAG(score, 1, NULL) OVER (PARTITION BY user_id ORDER BY test_date DESC) AS next_score\n  FROM scores\n ORDER BY 1, 2 DESC;\n']], ['How do I get entries in the next month from oracle sql?'], 3], [(1579400, 2), [['Which produces:'], ["Look, Ma! No self-join! Now THAT's slick ;-) (As an aside, the explain plans indicate the self-join is not as efficient)."]], [[' USER_ID                          TEST_DATE        SCORE      DELTA NEXT_SCORE\n-------------------------------- ----------- ---------- ---------- ----------\nU1                               10/19/2009          92            \nU1                               9/18/2009           89          3         92\nU1                               8/19/2009           85          4         89\nU2                               10/19/2009          84            \nU2                               9/18/2009           89         -5         84\nU2                               8/19/2009           65         24         89\n']], ['How do I get entries in the next month from oracle sql?'], 3], [(1579874, 0), [["Here's a quick and dirty example:"], ['As for the indexed view suggested by hainstech, I imagine he meant something like this:']], [[' CREATE TABLE dbo.Posts\n(\n    PostID INT,\n    TopicID INT,\n    AuthorID INT,\n    PostDate SMALLDATETIME\n);\nGO\nINSERT dbo.Posts SELECT 1,1,1,CURRENT_TIMESTAMP-1;\nINSERT dbo.Posts SELECT 2,1,1,CURRENT_TIMESTAMP-0.5;\nINSERT dbo.Posts SELECT 3,1,1,CURRENT_TIMESTAMP;\nINSERT dbo.Posts SELECT 4,1,1,CURRENT_TIMESTAMP-2;\nINSERT dbo.Posts SELECT 5,2,1,CURRENT_TIMESTAMP-0.75;\nGO\n;WITH x AS \n(\n    SELECT\n      TopicID,\n      PostID,\n      PostDate, \n      rn = ROW_NUMBER() OVER\n      (\n        PARTITION BY TopicID\n        ORDER BY PostDate DESC\n      )\n    FROM dbo.Posts\n)\nSELECT TopicID, PostID, PostDate\n    FROM x\n    WHERE rn = 1;\nGO\n']], ['Get all topics, ordered by their last post date in a forum'], 3], [(1579874, 1), [['As for the indexed view suggested by hainstech, I imagine he meant something like this:'], ['Of course, this is not legal:']], [[' CREATE VIEW dbo.MaxPostDate\nWITH SCHEMABINDING\nAS\n    SELECT \n        TopicID,\n        MaxPostDate = MAX(PostDate)\n    FROM\n        dbo.Posts\n    GROUP BY\n        TopicID;\nGO\nCREATE UNIQUE CLUSTERED INDEX foo ON dbo.MaxDate(TopicID);\nGO\n']], ['Get all topics, ordered by their last post date in a forum'], 3], [(1579874, 2), [['Of course, this is not legal:'], ['-10000']], [[' .Net SqlClient Data Provider: Msg 10125, Level 16, State 1, Line 1\nCannot create index on view "foo.dbo.MaxDate" because it uses aggregate "MAX".\nConsider eliminating the aggregate, not indexing the view, or using alternate\naggregates. For example, for AVG substitute SUM and COUNT_BIG, or for COUNT,\nsubstitute COUNT_BIG.\n']], ['Get all topics, ordered by their last post date in a forum'], 3], [(1579930, 0), [['Simple example from  the MySQL Documentation :'], ['Dropping old data by simple:']], [[" CREATE TABLE employees (\n    id INT NOT NULL,\n    fname VARCHAR(30),\n    lname VARCHAR(30),\n    hired DATE NOT NULL DEFAULT '1970-01-01',\n    separated DATE NOT NULL DEFAULT '9999-12-31',\n    job_code INT,\n    store_id INT\n)\nPARTITION BY RANGE ( YEAR(separated) ) (\n    PARTITION p0 VALUES LESS THAN (1991),\n    PARTITION p1 VALUES LESS THAN (1996),\n    PARTITION p2 VALUES LESS THAN (2001),\n    PARTITION p3 VALUES LESS THAN MAXVALUE\n);\n"]], ['What is MYSQL Partitioning?'], 3], [(1579930, 1), [['Dropping old data by simple:'], ['Database can speed up a query like this:']], [[' ALTER TABLE employees DROP PARTITION p0;\n']], ['What is MYSQL Partitioning?'], 3], [(1579930, 2), [['Database can speed up a query like this:'], ['Knowing that all data is stored only on the p2 partition.']], [[" SELECT COUNT(*)\nFROM employees\nWHERE separated BETWEEN '2000-01-01' AND '2000-12-31'\nGROUP BY store_id;\n"]], ['What is MYSQL Partitioning?'], 3], [(1580156, 0), [['Your query:'], ["If you're doing a pagination query (i.e. only interested in a small number of rows) you want to get the first rows back as quick as possible; for this to happen you'll probably want a nested loop on entries, e.g.:"]], [[' SELECT e.id, e.time, e.title\nFROM entries e, categories c\nWHERE e.id=c.id AND e.group=? AND c.category=?\nORDER by e.time\n']], ['Is an Index Organized Table appropriate here?'], 2], [(1580156, 1), [["If you're doing a pagination query (i.e. only interested in a small number of rows) you want to get the first rows back as quick as possible; for this to happen you'll probably want a nested loop on entries, e.g.:"], ["Since the join to CATEGORIES is on ID, you'll want an index on ID; if you make it an IOT, and make ID the leading column, that might be sufficient."]], [[' NESTED LOOPS\n   ACCESS TABLE BY ROWID - ENTRIES\n      INDEX RANGE SCAN - (index on ENTRIES.group,time)\n   ACCESS TABLE BY ROWID - CATEGORIES\n      INDEX RANGE SCAN - (index on CATEGORIES.ID)\n']], ['Is an Index Organized Table appropriate here?'], 2], [(1582731, 0), [['-10000'], ['for friends:']], [['     SELECT u1.username, u2.username AS not_friend\n      FROM users u1\n      JOIN users u2 on u1.user_id != u2.user_id\n LEFT JOIN friends f1 on u1.user_id = f1.user_id\n                     and u2.user_id = f1.friend_id\n LEFT JOIN friends f2 on u2.user_id = f2.user_id \n                     and u1.user_id = f2.friend_id\n     WHERE u1.user_id = 1234\n       AND (f1.user_id IS NULL OR f2.user_id IS NULL)\n']], ['Friend relationship query'], 2], [(1582731, 1), [['for friends:'], ['-10000']], [[' SELECT u1.username, u2.username AS friend\n  FROM users u1\n  JOIN users u2 on u1.user_id != u2.user_id\n  JOIN friends f1 on u1.user_id = f1.user_id\n                 and u2.user_id = f1.friend_id\n  JOIN friends f2 on u2.user_id = f2.user_id \n                 and u1.user_id = f2.friend_id\n WHERE u1.user_id = 1234\n']], ['Friend relationship query'], 2], [(1582961, 0), [['-10000'], ['returns a BIGINT as you have seen']], [[' SELECT SCOPE_IDENTITY()\n']], ['Need some t-sql clarification'], 2], [(1582961, 1), [['returns a BIGINT as you have seen'], ['returns BIGINT and casts it into INT variable @X']], [[' SELECT @X = SCOPE_IDENTITY()\n']], ['Need some t-sql clarification'], 2], [(1583318, 0), [['Complete working query:'], ['First we calculate running sums for every row:']], [[' SELECT \n  * \nFROM TABLE_NAME E\nJOIN\n  (SELECT\n    C.ART_ID,\n    MAX(TS) MAX_TS\n  FROM\n    (SELECT \n      ART_ID,\n      TS,\n      COALESCE((SELECT SUM(AMOUNT) FROM TABLE_NAME B WHERE (B.Art_id = A.Art_id) AND (B.Ts < A.Ts)),0) ROW_SUM\n    FROM TABLE_NAME A) C\n  WHERE C.ROW_SUM = 0\n  GROUP BY C.ART_ID) D\nON \n  (D.ART_ID = E.ART_ID) AND\n  (E.TS >= D.MAX_TS)\n']], ['T-sql problem with running sum'], 3], [(1583318, 1), [['First we calculate running sums for every row:'], ['Then we look for last article with 0:']], [[' SELECT \n  ART_ID,\n  TS,\n  COALESCE((SELECT SUM(AMOUNT) FROM TABLE_NAME B WHERE (B.Art_id = A.Art_id) AND (B.Ts < A.Ts)),0) ROW_SUM\nFROM TABLE_NAME A\n']], ['T-sql problem with running sum'], 3], [(1583318, 2), [['Then we look for last article with 0:'], ['-10000']], [[' SELECT\n  C.ART_ID,\n  MAX(TS) MAX_TS\nFROM\n  (SELECT \n    ART_ID,\n    TS,\n    COALESCE((SELECT SUM(AMOUNT) FROM TABLE_NAME B WHERE (B.Art_id = A.Art_id) AND (B.Ts < A.Ts)),0) ROW_SUM\n  FROM TABLE_NAME A) C\nWHERE C.ROW_SUM = 0\nGROUP BY C.ART_ID\n']], ['T-sql problem with running sum'], 3], [(1584107, 0), [['You can use  sys.sql_dependencies :'], ['This will list all objects that depend on your table, you can restrict this to views by joining against  sys.views :']], [[" select object_name(object_id),* \nfrom sys.sql_dependencies\nwhere referenced_major_id = object_id('<tablename>');\n"]], ['SQL Server 2005 search views for certain database objects'], 2], [(1584107, 1), [['This will list all objects that depend on your table, you can restrict this to views by joining against  sys.views :'], ['-10000']], [[" select v.* \nfrom sys.sql_dependencies d\njoin sys.views v on d.object_id = v.object_id\nwhere referenced_major_id = object_id('<tablename>');\n"]], ['SQL Server 2005 search views for certain database objects'], 2], [(1584495, 0), [["To convert a timestamp to seconds since epoch, compile and add a Java class to h2's classpath containing:"], ['The function in the Java code can then be linked in h2 using CREATE ALIAS:']], [[' public class TimeFunc\n{\n  public static long getSeconds(java.sql.Timestamp ts)\n  {\n    return ts.getTime() / 1000;\n  }\n}\n']], ['H2 database. How to convert date to seconds in sql?'], 3], [(1584495, 1), [['The function in the Java code can then be linked in h2 using CREATE ALIAS:'], ['Produces:']], [[' CREATE ALIAS TIME_SECS FOR "TimeFunc.getSeconds";\n\nSELECT TIME_SECS(CURRENT_TIMESTAMP);\n']], ['H2 database. How to convert date to seconds in sql?'], 3], [(1584495, 2), [['Produces:'], ['-10000']], [[' TIME_SECS(CURRENT_TIMESTAMP())  \n1255862217\n(1 row, 0 ms)\n']], ['H2 database. How to convert date to seconds in sql?'], 3], [(1584819, 0), [['You can use  RENAME TABLE'], ['or  ALTER TABLE']], [[' RENAME TABLE `foo` TO `bar`;\n']], ['Is it possible to rename a MySQL table name already in the database?'], 2], [(1584819, 1), [['or  ALTER TABLE'], ['-10000']], [[' ALTER TABLE `foo` RENAME TO `bar`;\n']], ['Is it possible to rename a MySQL table name already in the database?'], 2], [(1584953, 0), [['Then the query for your list box rowsource can reference the value in txtIdNumber:'], ['You can update the list box as you move through ParentTable records in frmParent by using this code for the form\'s "On Current" event:']], [[' SELECT c.IdNumber, c.FirstName, c.LastName\nFROM ChildrenTable AS c\nWHERE c.ParentIdNumber = Forms!frmParent!txtIdNumber\nORDER BY c.FirstName;\n']], ['Binding a ListBox to a query in MS Access 2003'], 2], [(1584953, 1), [['You can update the list box as you move through ParentTable records in frmParent by using this code for the form\'s "On Current" event:'], ['-10000']], [[' Private Sub Form_Current()\n    Me.YourListBoxName.Requery\nEnd Sub\n']], ['Binding a ListBox to a query in MS Access 2003'], 2], [(1585461, 0), [['The simple case:'], ['When the first confirmation:']], [[' ALTER TABLE dbo.Table ADD ConfirmCount TINYINT NOT NULL DEFAULT 0;\nALTER TABLE dbo.Table ADD Processed BIT NOT NULL DEFAULT 0;\n']], ['How to make tasks double-checked (the way how to store it in the DB)?'], 5], [(1585461, 1), [['When the first confirmation:'], ['On second confirmation:']], [[' UPDATE dbo.Table SET ConfirmCount = 1 WHERE PK = <PK> AND ConfirmCount = 0;\n']], ['How to make tasks double-checked (the way how to store it in the DB)?'], 5], [(1585461, 2), [['On second confirmation:'], ['When rejected:']], [[' UPDATE dbo.Table SET ConfirmCount = 2 WHERE PK = <PK> AND ConfirmCount = 1;\n']], ['How to make tasks double-checked (the way how to store it in the DB)?'], 5], [(1585461, 3), [['When rejected:'], ['Now obviously your background job can only treat rows where Processed = 0  and  ConfirmCount = 2.  Then when it has processed that row:']], [[' UPDATE dbo.Table SET ConfirmCount = 0 WHERE PK = <PK>;\n']], ['How to make tasks double-checked (the way how to store it in the DB)?'], 5], [(1585461, 4), [['Now obviously your background job can only treat rows where Processed = 0  and  ConfirmCount = 2.  Then when it has processed that row:'], ['If you have a more complex scenario than this, please provide more details, including the goals of the double-confirm process.']], [[' UPDATE dbo.Table SET Processed = 1 WHERE PK = <PK>;\n']], ['How to make tasks double-checked (the way how to store it in the DB)?'], 5], [(1589028, 0), [['Try this'], ['And, actually, I think you may not even need the first part, as if end_date is null, it certainly will not be after todays date, so try this by itself:']], [['    ... \n   Where end_ date is not null and \n      And end_date < sysdate\n']], ['Oracle SQL query question'], 2], [(1589028, 1), [['And, actually, I think you may not even need the first part, as if end_date is null, it certainly will not be after todays date, so try this by itself:'], ['EDIT NOTEs:  ']], [[' Where end_date < sysdate\n']], ['Oracle SQL query question'], 2], [(1589283, 0), [["There isn't any other way to do this. Dynamic SQL is the only way; if you've got strict  controls over DB names and who's running it, then you're okay just truncating everything together, but if there's any doubt use QUOTENAME to escape the parameter safely:"], ["Obviously, if there's anything more being passed through then you'll want to double-check any other input, and potentially use parameterised dynamic SQL, for example:"]], [[" CREATE PROCEDURE doStuff\n    @dbName NVARCHAR(50)\nAS\n    DECLARE @sql NVARCHAR(1000)\n\n    SET @sql = 'SELECT stuff FROM ' + QUOTENAME(@dbName) + '..TableName WHERE stuff = otherstuff'\n\n    EXEC sp_ExecuteSQL (@sql)\n"]], ['How do I run SQL queries on different databases dynamically?'], 2], [(1589283, 1), [["Obviously, if there's anything more being passed through then you'll want to double-check any other input, and potentially use parameterised dynamic SQL, for example:"], ['This then makes sure that parameters for the dynamic SQL are passed through safely and the chances for injection attacks are reduced. It also improves the chances that the execution plan associated with the query will get reused.']], [[" CREATE PROCEDURE doStuff\n    @dbName NVARCHAR(50)\n    @someValue NVARCHAR(10)\nAS\n    DECLARE @sql NVARCHAR(1000)\n\n    SET @sql = 'SELECT stuff FROM ' + QUOTENAME(@dbName) + '..TableName WHERE stuff = @pOtherStuff'\n\n    EXEC sp_ExecuteSQL (@sql, '@pOtherStuff NVARCHAR(10)', @someValue)\n"]], ['How do I run SQL queries on different databases dynamically?'], 2], [(1589715, 0), [['For some reason this will work:'], ["But this won't:"]], [[' select\n    iv.func_data.a,\n    iv.func_data.b,\n    iv.func_data.c\nfrom\n    (select\n        test_func(mt.input) as func_data\n    from\n        my_table mt) iv\n']], ['Using an object type in a select statement in Oracle'], 2], [(1589715, 1), [["But this won't:"], ['-10000']], [[' select\n    func_data.a,\n    func_data.b,\n    func_data.c\nfrom\n    (select\n        test_func(mt.input) as func_data\n    from\n        my_table mt)\n']], ['Using an object type in a select statement in Oracle'], 2], [(1590650, 0), [['Some data to test:'], ['And the query']], [[" DECLARE @months TABLE\n( month_id INT IDENTITY,\nmonth_name VARCHAR(50)\n)\n\nINSERT INTO @months(month_name) VALUES ('April-09')\nINSERT INTO @months(month_name) VALUES ('May-09')\n\nDECLARE @awards TABLE\n( award_id INT IDENTITY,\naward_name VARCHAR(50)\n)\n\nINSERT INTO @awards(award_name) VALUES ('Bronze')\nINSERT INTO @awards(award_name) VALUES ('Silver')\nINSERT INTO @awards(award_name) VALUES ('Gold')\n\nDECLARE @nominations TABLE\n( fk_month_id INT,\nfk_award_id INT,\nother_field VARCHAR(10)\n)\n\nINSERT INTO @nominations(fk_month_id,fk_award_id,other_field) VALUES (1,1,'1')\nINSERT INTO @nominations(fk_month_id,fk_award_id,other_field) VALUES (1,1,'2')\nINSERT INTO @nominations(fk_month_id,fk_award_id,other_field) VALUES (2,2,'3')\nINSERT INTO @nominations(fk_month_id,fk_award_id,other_field) VALUES (2,1,'4')\nINSERT INTO @nominations(fk_month_id,fk_award_id,other_field) VALUES (3,1,'5')\nINSERT INTO @nominations(fk_month_id,fk_award_id,other_field) VALUES (3,2,'6')\nINSERT INTO @nominations(fk_month_id,fk_award_id,other_field) VALUES (3,2,'7')\n"]], ['How to return zero using Count() with multiple tables'], 3], [(1590650, 1), [['And the query'], ['The result is:']], [[' SELECT month_name, award_name, ISNULL(cnt,0) \nFROM @months\nCROSS JOIN @awards\nLEFT JOIN ( \n    SELECT fk_month_id,fk_award_id, COUNT(*) AS cnt\n    FROM @nominations \n    GROUP BY fk_month_id,fk_award_id\n) fk ON fk_month_id = month_id AND fk_award_id = award_id\n']], ['How to return zero using Count() with multiple tables'], 3], [(1590650, 2), [['The result is:'], ['-10000']], [[' April-09  Bronze  2\nApril-09  Silver  0\nApril-09  Gold    0\nMay-09    Bronze  1\nMay-09    Silver  1\nMay-09    Gold    0\n']], ['How to return zero using Count() with multiple tables'], 3], [(1590994, 0), [['You may also augment your UPDATE to use an  OUTPUT  clause, like the following, so you can capture the affected rows.  And use them in the DELETE, like here:'], ['OUTPUT:']], [[" set nocount on\nDECLARE @Table     table (PK int, col1 varchar(5))\nDECLARE @SavedPks  table (PK int)\n\nINSERT INTO @Table VALUES (1,'g')\nINSERT INTO @Table VALUES (2,'g')\nINSERT INTO @Table VALUES (3,'g')\nINSERT INTO @Table VALUES (4,'g')\nINSERT INTO @Table VALUES (5,'x')\nINSERT INTO @Table VALUES (6,'x')\nset nocount off\n\n;WITH MYCTE\nAS \n(\n  SELECT PK, col1 FROM @Table\n)\nUPDATE MYCTE\n    SET col1='xyz'\n    OUTPUT INSERTED.PK\n        INTO @SavedPks\n    WHERE col1='g'\n\nSELECT 'A',* FROM @Table\n\nDELETE @Table\n    WHERE PK IN (SELECT PK  from @SavedPks)\n\nSELECT 'B',* FROM @Table\n"]], ["why can't I access my CTE after I used it once?"], 2], [(1590994, 1), [['OUTPUT:'], ['-10000']], [[' (4 row(s) affected)\n     PK          col1\n---- ----------- -----\nA    1           xyz\nA    2           xyz\nA    3           xyz\nA    4           xyz\nA    5           x\nA    6           x\n\n(6 row(s) affected)\n\n(4 row(s) affected)\n\n     PK          col1\n---- ----------- -----\nB    5           x\nB    6           x\n\n(2 row(s) affected)\n']], ["why can't I access my CTE after I used it once?"], 2], [(1595695, 0), [['Yes, you definitely should add the index.'], ['As further evidence, run ']], [[' CREATE INDEX Post_author_id ON Posts(author_id);\n']], ['MySQL question: Indexes on columns!'], 2], [(1595695, 1), [['As further evidence, run '], ['-10000']], [[' EXPLAIN SELECT * FROM Posts WHERE author_id = 45 ORDER BY RAND() LIMIT 1;\n']], ['MySQL question: Indexes on columns!'], 2], [(1597188, 0), [['So to insert into an audit table you might want something like inside the trigger code:'], ["Here's one way to test and debug trigger that I often use. First I create temp tables names #delted and #inserted that have the sturcture of the table I'm going to put the trigger on. Then I write the code to use those instead of the deleted or inserted tables. That wa y I can look at things as I go and make sure everything is right before I change the code to a trigger. Example below with you code added in and modified slightly:"]], [[' insert Myaudittable (<insert field list here>)\nSelect <insert field list here> from Inserted i\nInner Join AppStatus ast on ast.RowID = i.AppStatusRowID\nInner Join Location l on l.RowID = i.LocationRowID\nInner Join Company c on c.RowID = l.CompanyRowID \n']], ['Writing a complex trigger'], 2], [(1597188, 1), [["Here's one way to test and debug trigger that I often use. First I create temp tables names #delted and #inserted that have the sturcture of the table I'm going to put the trigger on. Then I write the code to use those instead of the deleted or inserted tables. That wa y I can look at things as I go and make sure everything is right before I change the code to a trigger. Example below with you code added in and modified slightly:"], ['Once you get the data for the select correct, then it is easy to uncomment out the trigger code and the insert line and change #deleted or #inserted to deleted or inserted.']], [["   Create table #inserted(Rowid int, lastname varchar(100), firstname varchar(100), appstatusRowid int)\n  Insert #inserted\n  select 1, 'Jones', 'Ed', 30\n  union all\n  select 2, 'Smith', 'Betty', 20\n\n     Create table #deleted (Rowid int, lastname varchar(100), firstname varchar(100), appstatusRowid int)\n  Insert #deleted\n  select 1, 'Jones', 'Ed', 10\n  union all\n  select 2, 'Smith', 'Betty', 20\n\n --CREATE TRIGGER tri_UpdateAppDisp ON dbo.Test_App \n --For Update \n --AS \n --If Update(appstatusrowid) \n IF  exists (select i.appstatusRowid from #inserted i join #deleted d on i.rowid = d.rowid\n            Where d.appstatusrowid <> i.appstatusrowid)\n BEGIN \n --Insert AppDisp(AppID, LastName, FirstName, [DateTime],Company,Location,LocationName, StatusDisp,[Username]) \n Select d.Rowid,d.LastName, d.FirstName, getDate(),C.CompanyCode,\n l.locnum,l.locname, ast.Displaytext, SUSER_SNAME()+' '+User \n From #deleted d\n Join #inserted i on i.rowid = d.rowid\n --From deleted d \n --Join inserted i on i.rowid = d.rowid\n Inner join Test_App a with (nolock) on a.RowID = d.rowid \n inner join location l with (nolock) on l.rowid = d.Locationrowid \n inner join appstatus ast  with (nolock) on ast.rowid = d.appstatusrowid \n inner join company c with (nolock) on c.rowid = l.CompanyRowid\n Where d.appstatusrowid <> i.appstatusrowid)\n end\n"]], ['Writing a complex trigger'], 2], [(1598322, 0), [['Using LEFT JOIN/IS NULL:'], ['Using NOT IN:']], [['    SELECT t.*\n     FROM TABLE_LIST t\nLEFT JOIN TABLE_LOG tl ON tl.jid = t.jid\n    WHERE tl.jid IS NULL\n']], ['Select * from table1 that does not exist in table2 with conditional'], 3], [(1598322, 1), [['Using NOT IN:'], ['Using NOT EXISTS:']], [[' SELECT t.*\n  FROM TABLE_LIST t\n WHERE t.jid NOT IN (SELECT tl.jid\n                       FROM TABLE_LOG tl\n                   GROUP BY tl.jid)\n']], ['Select * from table1 that does not exist in table2 with conditional'], 3], [(1598322, 2), [['Using NOT EXISTS:'], ['FYI \nLEFT JOIN/IS NULL and NOT IN are equivalent in MySQL - they will perform the same, while NOT EXISTS is slower/less efficient.  For more details:  http://explainextended.com/2009/09/18/not-in-vs-not-exists-vs-left-join-is-null-mysql/']], [[' SELECT t.*\n  FROM TABLE_LIST t\n WHERE NOT EXISTS(SELECT NULL\n                    FROM TABLE_LOG tl\n                   WHERE tl.jid = t.jid)\n']], ['Select * from table1 that does not exist in table2 with conditional'], 3], [(1599276, 0), [["Since cakephp doesn't support group by in containable behavior I tried a different approach. Create the paginate var for the vote model instead (All of this is done in the Contestants Controller):"], ['And now in my controller I do the following:']], [[" var $paginate = array(\n    'Vote'=>array(\n        'limit'=>5,\n        'fields' => array(\n        'Contestant.*, count(Vote.contestant_id) as Contestant_votes, Vote.id'\n        ),\n        'group' => array(\n        'Vote.contestant_id'\n        ),\n        'order' => array(\n        'Contestant_votes Desc'\n        )\n    ),\n    'Contestant'=>array(\n        'limit'=>5,\n        'order' => array(\n        'Contestant.id Desc'\n        )\n    )\n);\n"]], ['Pagination with hasMany association cakePHP'], 2], [(1599276, 1), [['And now in my controller I do the following:'], ["Now the contestants are ordered by their total vote tally, although I still can't figure how to place the Contestant_votes as a paginator variable since in the record set it's in a array of it's own and not in any of the model arrays used to paginate. "]], [[' function index() {\n    $page = \'Contestants\';\n    $this->set(\'page\', $page);  \n    $conditions ["Contestant.active"] = 1;\n    $this->set(\'contestants\', $this->paginate($this->Contestant->Vote,$conditions));\n}\n']], ['Pagination with hasMany association cakePHP'], 2], [(1599788, 0), [['You simply cannot have a static SQL statement returning a variable number of columns. You need to build such statement each time the number of different districts changes. To do that, you execute first a '], ['This will give you the list of districts where there are details. You then build a SQL statement iterating over the previous result (pseudocode)']], [[' SELECT DISTINCT District FROM district_details;\n']], ['mysql query to dynamically convert row data to columns'], 2], [(1599788, 1), [['This will give you the list of districts where there are details. You then build a SQL statement iterating over the previous result (pseudocode)'], ["And execute that query. You'll then need have to handle in your code the processing of the variable number of columns"]], [[' statement = "SELECT name "\n\nFor each row returned in d = SELECT DISTINCT District FROM district_details \n    statement = statement & ", SUM(IF(District=""" & d.District & """,1 ,0)) AS """ & d.District & """" \n\nstatement = statement & " FROM district_details GROUP BY name;"\n']], ['mysql query to dynamically convert row data to columns'], 2], [(1599972, 0), [['If you have a unique column, like an autogenerated id you can use that'], ['will be equal to ']], [[' SELECT SUM(price) FROM budget GROUP BY budget_id\n']], ['SQL use GROUP BY such that it results in the original SELECT'], 2], [(1599972, 1), [['will be equal to '], ['if every row has a different budget_id  (identity, autoincrement fields will fit the bill)']], [[' SELECT price FROM budget\n']], ['SQL use GROUP BY such that it results in the original SELECT'], 2], [(1601947, 0), [['you can use  isql  but I advice you to use directly the api.'], ['test.sql is like this :']], [[' isql -input test.sql\n']], ['How do I create a new Firebird database from the command line?'], 2], [(1601947, 1), [['test.sql is like this :'], ['creating database via the  api']], [[" SET SQL DIALECT 3;\n\nSET NAMES UNICODE_FSS;\n\nCREATE DATABASE 'D:\\testdata.fdb'\nUSER 'SYSDBA' PASSWORD 'masterkey'\nPAGE_SIZE 16384\nDEFAULT CHARACTER SET UNICODE_FSS;\n\nCREATE TABLE CUSTOMERS (\n    CUST_ID       INTEGER NOT NULL,\n    CUST_NAME     INTEGER,\n    CUST_UNISITE  INTEGER\n);\n\nCREATE TABLE SMS_DETAIL (\n    SD_ID                       INTEGER NOT NULL,\n    SD_MESSAGE_DATA             VARCHAR(160)\n);\n"]], ['How do I create a new Firebird database from the command line?'], 2], [(1602536, 0), [['Look at  this question . It is similar to yours. I have posted there a query you may need.'], ['For the following table:']], [[' SELECT title, (SELECT TOP 1 title \n           FROM tree t2 \n           WHERE t2.lft < t1.lft AND t2.rgt > t1.rgt    \n           ORDER BY t2.rgt-t1.rgt ASC) AS parent\nFROM tree t1\nORDER BY rgt-lft DESC\n']], ['MySQL Nested Sets - How to find parent of node?'], 3], [(1602536, 1), [['For the following table:'], ['it produces the output:']], [[' +-------------+----------------------+-----+-----+\n| category_id | name                 | lft | rgt |\n+-------------+----------------------+-----+-----+\n|           1 | ELECTRONICS          |   1 |  20 |\n|           2 | TELEVISIONS          |   2 |   9 |\n|           3 | TUBE                 |   3 |   4 |\n|           4 | LCD                  |   5 |   6 |\n|           5 | PLASMA               |   7 |   8 |\n|           6 | PORTABLE ELECTRONICS |  10 |  19 |\n|           7 | MP3 PLAYERS          |  11 |  14 |\n|           8 | FLASH                |  12 |  13 |\n|           9 | CD PLAYERS           |  15 |  16 |\n|          10 | 2 WAY RADIOS         |  17 |  18 |\n']], ['MySQL Nested Sets - How to find parent of node?'], 3], [(1602536, 2), [['it produces the output:'], ['-10000']], [[' title                | parent\n----------------------------------------------\nELECTRONICS          | NULL\nPORTABLE ELECTRONICS | ELECTRONICS\nTELEVISIONS          | ELECTRONICS\nMP3 PLAYERS          | PORTABLE ELECTRONICS\nFLASH                | MP3 PLAYERS\nCD PLAYERS           | PORTABLE ELECTRONICS\n2 WAY RADIOS         | PORTABLE ELECTRONICS\nTUBE                 | TELEVISIONS\nLCD                  | TELEVISIONS\nPLASMA               | TELEVISIONS\n']], ['MySQL Nested Sets - How to find parent of node?'], 3], [(1603551, 0), [['To check when connected as the schema owner:'], ['or']], [[" select index_name from user_indexes\nwhere index_name = 'INDEX_TYP_POLATYKY';\n"]], ['Check that index file exists'], 3], [(1603551, 1), [['or'], ['You can also select from USER_IND_COLUMNS to find out the columns that are indexed:']], [[" select index_name from user_indexes\nwhere table_name = 'AUTA';\n"]], ['Check that index file exists'], 3], [(1603551, 2), [['You can also select from USER_IND_COLUMNS to find out the columns that are indexed:'], ['-10000']], [[" select column_name\nfrom user_ind_columns\nwhere index_name = 'INDEX_TYP_POLATYKY'\norder by column_position;\n"]], ['Check that index file exists'], 3], [(1604707, 0), [['Query 1:'], ['Query 2 (With values of a="%" and b="%"):']], [[' SELECT * FROM TableName\n']], ['SQL LIKE Performance with only the wildcard (%) as a value'], 2], [(1604707, 1), [['Query 2 (With values of a="%" and b="%"):'], ['Query 1 average time: 178ms']], [[' SELECT * FROM TableName WHERE a LIKE ? AND b LIKE ?\n']], ['SQL LIKE Performance with only the wildcard (%) as a value'], 2], [(1605242, 0), [['Instead of:'], ['You need:']], [[' SET @S=EXEC spGetNthNo @a,@d,@n\n']], ['How to set the result of exec stored procedure to a variable?'], 5], [(1605242, 1), [['You need:'], ['And then within the procedure, you need something like:']], [[' EXEC @S = spGetNthNo @a,@d,@n\n']], ['How to set the result of exec stored procedure to a variable?'], 5], [(1605242, 2), [['And then within the procedure, you need something like:'], ['or:']], [[' RETURN 100\n']], ['How to set the result of exec stored procedure to a variable?'], 5], [(1605242, 3), [['or:'], ['You can also use output parameters. Combined example:']], [[' RETURN @x\n']], ['How to set the result of exec stored procedure to a variable?'], 5], [(1605242, 4), [['You can also use output parameters. Combined example:'], ['-10000']], [[" IF OBJECT_ID('tempdb..#example') IS NOT NULL DROP PROCEDURE #example\nGO\n\nCREATE PROCEDURE #example\n  @output_param INT OUTPUT\nAS BEGIN\n   SET @output_param = 100\n   RETURN 200\nEND\nGO\n\nDECLARE @return INT, @param INT\nEXEC @return = #example @output_param = @param OUTPUT\nSELECT @return as [return value], @param as [output parameter]\n"]], ['How to set the result of exec stored procedure to a variable?'], 5], [(1606328, 0), [['imagine you have selected from the database and stored those columns in a file called "file"'], ['on the command line']], [[' #!/bin/bash\nawk \'BEGIN{ print "<header>"}\nNR>1{  print "<value>"$1"</value>" }\nEND{ print "<footer>"}\' file\n']], ['create an xml file using a shell script'], 2], [(1606328, 1), [['on the command line'], ['-10000']], [[' # ./shell.sh\n<header>\n<value>12345</value>\n<value>73255</value>\n<value>71377</value>\n<footer>\n']], ['create an xml file using a shell script'], 2], [(1606808, 0), [['You don\'t extend a table indexed by "something", you can just use it...'], ['To use the EXTEND syntax, this example should do it...']], [[' DECLARE\n   TYPE t_simple_object IS RECORD \n      ( wert   NUMBER\n      , gs     NUMBER\n      , vl     NUMBER\n      ); \n\n   TYPE t_obj_table IS TABLE OF t_simple_object\n   INDEX BY BINARY_INTEGER; \n\n   my_rec t_simple_object;\n   obj t_obj_table; \nBEGIN\n   my_rec.wert := 1;\n   my_rec.gs := 1;\n   my_rec.vl := 1;\n   obj(1) := my_rec;\nEND;\n/\n']], ['Using Tables of Records in PL/SQL'], 2], [(1606808, 1), [['To use the EXTEND syntax, this example should do it...'], ['Also see  this link (Ask Tom)']], [[' DECLARE\n   TYPE t_simple_object IS RECORD \n      ( wert   NUMBER\n      , gs     NUMBER\n      , vl     NUMBER\n      ); \n\n   TYPE t_obj_table IS TABLE OF t_simple_object; \n\n   my_rec t_simple_object;\n   obj t_obj_table := t_obj_table(); \nBEGIN\n   obj.EXTEND;\n   my_rec.wert := 1;\n   my_rec.gs := 1;\n   my_rec.vl := 1;\n   obj(1) := my_rec;\nEND;\n/\n']], ['Using Tables of Records in PL/SQL'], 2], [(1607720, 0), [['This will bring back totals per property and type'], ['This will bring back only active values']], [[' SELECT  PropertyID,\n        TYPE,\n        SUM(Amount)\nFROM    yourTable\nGROUP BY    PropertyID,\n            TYPE\n']], ['SQL Server : SUM() of multiple rows including where clauses'], 3], [(1607720, 1), [['This will bring back only active values'], ['and this will bring back totals for properties']], [[' SELECT  PropertyID,\n        TYPE,\n        SUM(Amount)\nFROM    yourTable\nWHERE   EndDate IS NULL\nGROUP BY    PropertyID,\n            TYPE\n']], ['SQL Server : SUM() of multiple rows including where clauses'], 3], [(1607720, 2), [['and this will bring back totals for properties'], ['......']], [[' SELECT  PropertyID,\n        SUM(Amount)\nFROM    yourTable\nWHERE   EndDate IS NULL\nGROUP BY    PropertyID\n']], ['SQL Server : SUM() of multiple rows including where clauses'], 3], [(1608091, 0), [["Your first statement doesn't specify any join criteria at all, to make it equivalent you would need to change it to:"], ['I think what your asking, but not sure, is whats the difference between old style joins']], [[' SELECT a.AccountId FROM Accounts AS a \nJOIN domain as d on a.accountid = d.accountid;\n']], ['Mysql Using JOINs and WHERE statment. What is this difference?'], 3], [(1608091, 1), [['I think what your asking, but not sure, is whats the difference between old style joins'], ['And ANSI joins which is ']], [['  SELECT a.AccountId FROM Accounts AS a, domain as d \n where  a.accountid = d.accountid;\n']], ['Mysql Using JOINs and WHERE statment. What is this difference?'], 3], [(1608091, 2), [['And ANSI joins which is '], ['And those are equivalent ']], [['   SELECT a.AccountId FROM Accounts AS a \n  JOIN domain as d on a.accountid = d.accountid;\n']], ['Mysql Using JOINs and WHERE statment. What is this difference?'], 3], [(1608779, 0), [['You can find the previous row for each row by joining the table on itself, then joining another time, and then saying nothing can be between the first two rows:'], ['This gives you the sum per period.  Calculating the hour total requires you to split entries that cross an hour boundary.  You can do that by adding an entry for the end of each hour, like:']], [[' select \n    StartDate = prev.date\n,   EndDate = cur.date\n,   Milliseconds = datediff(ms,prev.date,cur.date)\n,   Volume = datediff(ms,prev.date,cur.date) / 1000.0 * prev.flow\nfrom @flow cur\ninner join @flow prev\n    on prev.date < cur.date\nleft join @flow inbetween\n    on prev.date < inbetween.date\n    and inbetween.date < cur.date\nwhere inbetween.date is null\n']], ['SQL function to sum values/totalize volumes over specific time periods'], 5], [(1608779, 1), [['This gives you the sum per period.  Calculating the hour total requires you to split entries that cross an hour boundary.  You can do that by adding an entry for the end of each hour, like:'], ['You can combine both queries using the WITH statement to calculate the sum per hour:']], [[' select date, flow\nfrom @flow\nunion\n-- Add end of hour\nselect DATEADD(Hour, DATEDIFF(Hour, 0, date)+1, 0), flow\nfrom @flow \nwhere date in (select max(date) from @flow group by datepart(hh,date))\n']], ['SQL function to sum values/totalize volumes over specific time periods'], 5], [(1608779, 2), [['You can combine both queries using the WITH statement to calculate the sum per hour:'], ['The result is:']], [[' ;with FlowWithHourBounds as (\n    select date, flow\n    from @flow\n    union\n    -- Add end of hour\n    select DATEADD(Hour, DATEDIFF(Hour, 0, date)+1, 0), flow\n    from @flow \n    where date in (\n        select max(date) from @flow group by datepart(hh,date))\n)\n,  FlowPerPeriod as (\n    select \n        StartDate = prev.date\n    ,   EndDate = cur.date\n    ,   Milliseconds = datediff(ms,prev.date,cur.date)\n    ,   Volume = datediff(ms,prev.date,cur.date) / 1000.0 * prev.flow\n    from FlowWithHourBounds cur\n    inner join FlowWithHourBounds prev\n        on prev.date < cur.date\n    left join FlowWithHourBounds inbetween\n        on prev.date < inbetween.date\n        and inbetween.date < cur.date\n    where inbetween.date is null\n)\nselect datepart(hh,StartDate), sum(Volume)\nfrom FlowPerPeriod\ngroup by datepart(hh,StartDate)\n']], ['SQL function to sum values/totalize volumes over specific time periods'], 5], [(1608779, 3), [['The result is:'], ["Here's the sample dataset I created from your post:"]], [[' hour volume\n4    285340,5\n5    273288,5\n6    255408,3\n7    5701,2\n']], ['SQL function to sum values/totalize volumes over specific time periods'], 5], [(1608779, 4), [["Here's the sample dataset I created from your post:"], ['-10000']], [[" declare @flow table ([date] datetime, flow float)\ninsert into @flow values ('2009/10/22 04:00:00.0', 0  )\ninsert into @flow values ('2009/10/22 04:00:16.2', 23 )\ninsert into @flow values ('2009/10/22 04:00:20.6', 34 )\ninsert into @flow values ('2009/10/22 04:00:39.7', 95 )\ninsert into @flow values ('2009/10/22 04:00:41.7', 97 )\ninsert into @flow values ('2009/10/22 04:01:15.1', 110)\ninsert into @flow values ('2009/10/22 04:03:17.0', 95 )\ninsert into @flow values ('2009/10/22 04:06:53.8', 82 )\ninsert into @flow values ('2009/10/22 04:26:50.7', 77 )\ninsert into @flow values ('2009/10/22 04:36:50.8', 76 )\ninsert into @flow values ('2009/10/22 04:46:51.7', 72 )\ninsert into @flow values ('2009/10/22 04:56:52.2', 74 )\ninsert into @flow values ('2009/10/22 05:16:52.7', 72 )\ninsert into @flow values ('2009/10/22 05:26:53.2', 70 )\ninsert into @flow values ('2009/10/22 05:36:22.1', 84 )\ninsert into @flow values ('2009/10/22 05:46:16.3', 81 )\ninsert into @flow values ('2009/10/22 05:56:16.2', 75 )\ninsert into @flow values ('2009/10/22 06:16:17.3', 73 )\ninsert into @flow values ('2009/10/22 06:26:16.9', 75 )\ninsert into @flow values ('2009/10/22 06:36:17.7', 71 )\ninsert into @flow values ('2009/10/22 06:57:38.7', 57 )\ninsert into @flow values ('2009/10/22 06:57:48.9', 44 )\ninsert into @flow values ('2009/10/22 06:57:53.4', 28 )\ninsert into @flow values ('2009/10/22 06:57:55.3', 12 )\ninsert into @flow values ('2009/10/22 07:07:55.1', 0  )\n"]], ['SQL function to sum values/totalize volumes over specific time periods'], 5], [(1609115, 0), [['Any solution would involve temp tables, or passing in xml/CSV and parsing in the UDF. Example: change to xml, parse in udf'], ['Note: this is an untested bit of code, and you\'d need to think about SQL injection etc. However, it also satisfies your "one column" requirement and should help you along']], [[' DECLARE @psuedotable xml\n\nSELECT\n    @psuedotable = ...\nFROM\n    ...\nFOR XML ...\n\nSELECT ... dbo.MyUDF (@psuedotable)\n']], ['Pass table as parameter into sql server UDF'], 2], [(1609115, 1), [['Note: this is an untested bit of code, and you\'d need to think about SQL injection etc. However, it also satisfies your "one column" requirement and should help you along'], ['-10000']], [[" CREATE PROC dbo.ToCSV (\n    @MyQuery varchar(2000),\n    @CSVOut varchar(max)\n)\nAS\nSET NOCOUNT ON\n\nCREATE TABLE #foo (bar varchar(max))\n\nINSERT #foo\nEXEC (@MyQuery)\n\nSELECT\n    @CSVOut = SUBSTRING(buzz, 2, 2000000000)\nFROM\n    (\n    SELECT \n        bar -- maybe CAST(bar AS varchar(max))??\n    FROM \n        #foo\n    FOR XML PATH (',')\n    ) fizz(buzz)\nGO\n"]], ['Pass table as parameter into sql server UDF'], 2], [(1609650, 0), [['Alternately'], ['That will return a count of groups in common.  You can test for the count by replacing count*) with the following:']], [[' select count(*) from groupmembers \n  where user=@user1 \n    and groupid in \n      (select groupid from groupmembers where user=@user2)\n']], ['SQL Query to Show If Two Users in Same Group'], 2], [(1609650, 1), [['That will return a count of groups in common.  You can test for the count by replacing count*) with the following:'], ['-10000']], [[' IF(count(*)>0,1,Null)\n']], ['SQL Query to Show If Two Users in Same Group'], 2], [(1610209, 0), [['Try:'], ['Without using Subquery Factoring:']], [[" CREATE OR REPLACE VIEW my_view AS\nWITH date_bookends AS (\n  SELECT LEAST(MIN(t.sampled_on), MIN(t.received_on), MIN(t.completed_on), MIN(t.authorized_on)) 'min_date'\n         GREATEST(MAX(t.sampled_on), MAX(t.received_on), MAX(t.completed_on), MAX(t.authorized_on)) 'max_date'\n    FROM SAMPLE t),\n    all_hours AS (\n  SELECT t.min_date + numtodsinterval(LEVEL - 1,'hour') date_by_hour\n    FROM date_bookends t\nCONNECT BY LEVEL <= ( t.max_date - t.min_date + 1) * 24)\nSELECT h.date_by_hour,\n       COUNT(CASE WHEN h.hour = TRUNC(s.sampled_on,'hh24') THEN 1 END) sampled#\n       COUNT(CASE WHEN h.hour = TRUNC(s.received_on,'hh24') THEN 1 END) received#\n       COUNT(CASE WHEN h.hour = TRUNC(s.completed_on,'hh24') THEN 1 END) completed#\n       COUNT(CASE WHEN h.hour = TRUNC(s.authorized_on,'hh24') THEN 1 END) authorized#\n  FROM all_hours h\nCROSS JOIN sample s\n  GROUP BY h.hour\n"]], ['Oracle Event Count Query'], 2], [(1610209, 1), [['Without using Subquery Factoring:'], ['The query accesses the SAMPLES table twice - the first time to get the earliest & latest date to frame the construction of the  date_by_hour  value.']], [[" CREATE OR REPLACE VIEW my_view AS\nSELECT h.date_by_hour,\n       COUNT(CASE WHEN h.hour = TRUNC(s.sampled_on,'hh24') THEN 1 END) sampled#\n       COUNT(CASE WHEN h.hour = TRUNC(s.received_on,'hh24') THEN 1 END) received#\n       COUNT(CASE WHEN h.hour = TRUNC(s.completed_on,'hh24') THEN 1 END) completed#\n       COUNT(CASE WHEN h.hour = TRUNC(s.authorized_on,'hh24') THEN 1 END) authorized#\n  FROM (SELECT t.min_date + numtodsinterval(LEVEL - 1,'hour') date_by_hour\n         FROM (SELECT LEAST(MIN(t.sampled_on), MIN(t.received_on), MIN(t.completed_on), MIN(t.authorized_on)) 'min_date'\n                            GREATEST(MAX(t.sampled_on), MAX(t.received_on), MAX(t.completed_on), MAX(t.authorized_on)) 'max_date'\n                       FROM SAMPLE t) t\nCONNECT BY LEVEL <= ( t.max_date - t.min_date + 1) * 24) h\nCROSS JOIN sample s\nGROUP BY h.hour\n"]], ['Oracle Event Count Query'], 2], [(1610599, 0), [['Use:'], ["Previously, corrected Guffa's answer:"]], [["    SELECT MIN(t.id) 'mi', \n          t.val, \n          COUNT(*)\n     FROM (SELECT x.id, \n                 x.val, \n                 CASE \n                   WHEN xt.val IS NULL OR xt.val != x.val THEN \n                     @rownum := @rownum+1 \n                   ELSE \n                     @rownum \n                 END AS grp\n            FROM TABLE x\n            JOIN (SELECT @rownum := 0) r\n       LEFT JOIN (SELECT t.id +1 'id',\n                         t.val\n                    FROM TABLE t) xt ON xt.id = x.id) t\n GROUP BY t.val, t.grp\n ORDER BY mi\n"]], ['How can I do a contiguous group by in MySQL?'], 2], [(1610599, 1), [["Previously, corrected Guffa's answer:"], ['-10000']], [['    SELECT t.id, t.val\n     FROM TABLE t\nLEFT JOIN TABLE t2 on t2.id + 1 = t.id\n    WHERE t2.val IS NULL \n       OR t.val <> t2.val\n']], ['How can I do a contiguous group by in MySQL?'], 2], [(1611490, 0), [['If you know that  salaryplus  will always be greater than  salaryminus , then you can do'], ['Otherwise, do something like this:']], [[' order by coalesce(salaryplus, salaryminus, 0)\n']], ['How to order by maximum of two column which can be null in MySQL?'], 2], [(1611490, 1), [['Otherwise, do something like this:'], ['This will treat both  salaryminus  and  salaryplus  as 0 if they are null, and will order by the larger of the two.']], [[' order by greatest(ifnull(salaryminus,0), ifnull(salaryplus,0))\n']], ['How to order by maximum of two column which can be null in MySQL?'], 2], [(1611821, 0), [['You can try this'], ['EDIT:']], [[" DECLARE @Occurrence TABLE(\n        OccurrenceID INT,\n        OccurrenceBucketID INT,\n        OccurrenceTime DATETIME,\n        OccurrenceMessage VARCHAR(MAX)\n)\n\nINSERT INTO @Occurrence (OccurrenceID,OccurrenceBucketID,OccurrenceTime,OccurrenceMessage)  \nSELECT 1, 1, '01 Jan 2009', 'A'\nINSERT INTO @Occurrence (OccurrenceID,OccurrenceBucketID,OccurrenceTime,OccurrenceMessage)  \nSELECT 2, 1, '02 Jan 2009', 'B'\nINSERT INTO @Occurrence (OccurrenceID,OccurrenceBucketID,OccurrenceTime,OccurrenceMessage)  \nSELECT 3, 1, '03 Jan 2009', 'C'\n\n\nINSERT INTO @Occurrence (OccurrenceID,OccurrenceBucketID,OccurrenceTime,OccurrenceMessage)  \nSELECT 4, 2, '04 Jan 2009', 'D'\nINSERT INTO @Occurrence (OccurrenceID,OccurrenceBucketID,OccurrenceTime,OccurrenceMessage)  \nSELECT 5, 2, '05 Jan 2009', 'E'\nINSERT INTO @Occurrence (OccurrenceID,OccurrenceBucketID,OccurrenceTime,OccurrenceMessage)  \nSELECT 6, 2, '06 Jan 2009', 'F'\n\nSELECT * FROM @Occurrence\n\nDECLARE @OccurrenceBucket TABLE(\n        OccurrenceBucketID INT,\n        FirstOccurrenceID INT,\n        FirstOccurrenceTime DATETIME,\n        FirstOccurrenceMessage VARCHAR(MAX)\n)\n\nINSERT INTO @OccurrenceBucket (OccurrenceBucketID) SELECT 1\nINSERT INTO @OccurrenceBucket (OccurrenceBucketID) SELECT 2\n\nSELECT * FROM @OccurrenceBucket\n\n\nUPDATE  @OccurrenceBucket\nSET     FirstOccurrenceID = OccurrenceID,\n        FirstOccurrenceTime = OccurrenceTime,\n        FirstOccurrenceMessage = OccurrenceMessage\nFROM    @OccurrenceBucket oc INNER JOIN\n        (\n            SELECT  o.*\n            FROM    @Occurrence o INNER JOIN\n                    (\n                        SELECT  OccurrenceBucketID,\n                                MIN(OccurrenceID) FirstOccurrenceID\n                        FROM    @Occurrence\n                        GROUP BY OccurrenceBucketID\n                    ) Mins ON o.OccurrenceID = mins.FirstOccurrenceID\n        ) Vals ON oc.OccurrenceBucketID = Vals.OccurrenceBucketID\n\nSELECT * FROM @OccurrenceBucket\n"]], ['SQL single query update'], 2], [(1611821, 1), [['EDIT:'], ['-10000']], [[' UPDATE  @OccurrenceBucket \nSET     FirstOccurrenceID = OccurrenceID, \n        FirstOccurrenceTime = OccurrenceTime, \n        FirstOccurrenceMessage = OccurrenceMessage \nFROM    @OccurrenceBucket oc INNER JOIN \n        ( \n                SELECT  o.* \n                FROM    @Occurrence o INNER JOIN \n                                ( \n                                        SELECT  OccurrenceBucketID, \n                                                        MIN(OccurrenceTime) FirstOccurrenceTime \n                                        FROM    @Occurrence \n                                        GROUP BY OccurrenceBucketID \n                                ) Mins ON o.OccurrenceTime = mins.FirstOccurrenceTime \n        ) Vals ON oc.OccurrenceBucketID = Vals.OccurrenceBucketID \n']], ['SQL single query update'], 2], [(1612657, 0), [['[Identical to this answer]'], ['']], [[' java.util.Properties props = new java.util.Properties();\nprops.setProperty("password","mypassword");\nprops.setProperty("user","myusername");\nprops.put("v$session.osuser", System.getProperty("user.name").toString());\nprops.put("v$session.machine", InetAddress.getLocalHost().getCanonicalHostName());\nprops.put("v$session.program", "My Program Name");\nDriverManager.registerDriver (new oracle.jdbc.OracleDriver());\nConnection conn=\n    DriverManager.getConnection("jdbc:oracle:thin:@myhostname:1521:mysid", props);\n']], ['Change Oracle JDBC Thin Client Identifier'], 3], [(1612657, 1), [[''], ['At application level you can use the following methods to set  client_info ,  module  and  action  in  v$session :']], [[" SQL>select username,osuser,program,machine\nfrom v$session\nwhere username = 'ROB'; \n\nUSERNAME  OSUSER       PROGRAM             MACHINE\n--------- -----------  ------------------  -----------\nROB       rmerkw       My Program Name     machine\n"]], ['Change Oracle JDBC Thin Client Identifier'], 3], [(1612657, 2), [['At application level you can use the following methods to set  client_info ,  module  and  action  in  v$session :'], ['-10000']], [[' dbms_application_info.set_client_info\ndbms_application_info.set_module\ndbms_application_info.set_action\n']], ['Change Oracle JDBC Thin Client Identifier'], 3], [(1613442, 0), [['Some more sample data and a hopefully logical assumption of how much time each user spent in each course.'], ['Now we get our data like this:']], [[" INSERT INTO PageLogSample (userid, courseid, sessionid, requestdate)\n-- [0, 10] = 10 minutes\n          SELECT 1, 1, 1, '00:00:00'\nUNION ALL SELECT 1, 1, 1, '00:10:00'\n-- [0, 3] = 3 minutes\n-- there is no way to know how long the user was on that last page\nUNION ALL SELECT 2, 1, 2, '00:00:00'\nUNION ALL SELECT 2, 2, 2, '00:03:00'\nUNION ALL SELECT 2, 2, 2, '00:05:00'\nUNION ALL SELECT 2, 1, 2, '00:12:00'\n-- [0, 3] + [12, 15] = 6 minutes\n-- the [5, 12] part was spent on a page of course 2\nUNION ALL SELECT 3, 1, 3, '00:00:00'\nUNION ALL SELECT 3, 2, 3, '00:03:00'\nUNION ALL SELECT 3, 2, 3, '00:05:00'\nUNION ALL SELECT 3, 1, 3, '00:12:00'\nUNION ALL SELECT 3, 2, 3, '00:15:00'\n-- [1, 3] + [13, 15] = 4 minutes\nUNION ALL SELECT 4, 2, 4, '00:00:00'\nUNION ALL SELECT 4, 1, 4, '00:01:00'\nUNION ALL SELECT 4, 2, 4, '00:03:00'\nUNION ALL SELECT 4, 2, 4, '00:05:00'\nUNION ALL SELECT 4, 1, 4, '00:13:00'\nUNION ALL SELECT 4, 2, 4, '00:15:00'\n-- [0, 5] + [10, 15] = 10 minutes\nUNION ALL SELECT 5, 1, 5, '00:00:00'\nUNION ALL SELECT 5, 1, 5, '00:05:00'\nUNION ALL SELECT 5, 1, 6, '00:10:00'\nUNION ALL SELECT 5, 1, 6, '00:15:00'\n-- [0, 10] = 10 minutes (ignoring everything inbetween)\nUNION ALL SELECT 6, 1, 7, '00:00:00'\nUNION ALL SELECT 6, 1, 7, '00:03:00'\nUNION ALL SELECT 6, 1, 7, '00:05:00'\nUNION ALL SELECT 6, 1, 7, '00:07:00'\nUNION ALL SELECT 6, 1, 7, '00:10:00'\n-- [0, 5] + [7, 11] = 9 minutes\nUNION ALL SELECT 7, 1, 8, '00:00:00'\nUNION ALL SELECT 7, 1, 8, '00:03:00'\nUNION ALL SELECT 7, 2, 8, '00:05:00'\nUNION ALL SELECT 7, 2, 8, '00:06:00'\nUNION ALL SELECT 7, 1, 8, '00:07:00'\nUNION ALL SELECT 7, 1, 8, '00:11:00'\n-- [0, 1] + [2, 4] + [5, 7] + [8, 13] = 10\nUNION ALL SELECT 8, 1, 9, '00:00:00'\nUNION ALL SELECT 8, 2, 9, '00:01:00'\nUNION ALL SELECT 8, 1, 9, '00:02:00'\nUNION ALL SELECT 8, 1, 9, '00:03:00'\nUNION ALL SELECT 8, 2, 9, '00:04:00'\nUNION ALL SELECT 8, 1, 9, '00:05:00'\nUNION ALL SELECT 8, 1, 9, '00:06:00'\nUNION ALL SELECT 8, 2, 9, '00:07:00'\nUNION ALL SELECT 8, 1, 9, '00:08:00'\nUNION ALL SELECT 8, 1, 9, '00:13:00'\n-- there is nothing we can say about either of there requests\n-- 0 minutes\nUNION ALL SELECT 9, 1, 10, '00:10:00'\nUNION ALL SELECT 9, 1, 11, '00:20:00'\n;\n"]], ['SQL query to calculate part of visit duration from log table'], 3], [(1613442, 1), [['Now we get our data like this:'], ["This is the result I get. I'm quite pleased with it. Notice how the session count remains correct for user 9."]], [[' WITH numberedcte (rn, userid, courseid, sessionid, requestdate)\nAS (\n    SELECT ROW_NUMBER() OVER (PARTITION BY sessionid, userid ORDER BY id)\n    , userid\n    , courseid\n    , sessionid\n    , requestdate\n    FROM PageLogSample\n)\n, valuecte (value, userid, courseid, sessionid)\nAS (\n    SELECT CASE\n        --alone in session\n        WHEN previousrequest.courseid IS NULL\n            AND nextrequest.courseid  IS NULL\n            THEN 0\n        --alone\n        WHEN ( previousrequest.courseid IS NULL\n            OR previousrequest.courseid <> numberedcte.courseid\n            )\n            AND nextrequest.courseid <> numberedcte.courseid\n            THEN DATEDIFF(MINUTE, numberedcte.requestdate, nextrequest.requestdate)\n        --between\n        WHEN previousrequest.courseid = nextrequest.courseid\n            THEN 0\n        --begin\n        WHEN previousrequest.courseid IS NULL\n            OR nextrequest.courseid = numberedcte.courseid\n            THEN -1 * DATEPART(MINUTE, numberedcte.requestdate)\n        --ignored (end with no next request)\n        WHEN nextrequest.courseid IS NULL\n            AND previousrequest.courseid <> numberedcte.courseid\n            THEN 0\n        --end\n        WHEN nextrequest.courseid IS NULL\n            OR previousrequest.courseid = numberedcte.courseid\n            THEN DATEPART(MINUTE, ISNULL(nextrequest.requestdate, numberedcte.requestdate))\n        --impossible?\n        ELSE 0\n    END\n    , numberedcte.userid\n    , numberedcte.courseid\n    , numberedcte.sessionid\n    FROM numberedcte\n    LEFT JOIN numberedcte previousrequest\n        ON previousrequest.userid = numberedcte.userid\n        AND previousrequest.sessionid = numberedcte.sessionid\n        AND previousrequest.rn = numberedcte.rn - 1\n    LEFT JOIN numberedcte nextrequest\n        ON nextrequest.userid = numberedcte.userid\n        AND nextrequest.sessionid = numberedcte.sessionid\n        AND nextrequest.rn = numberedcte.rn + 1\n    WHERE numberedcte.courseid = @courseid\n)\nSELECT userid\n, courseid\n, COUNT(DISTINCT sessionid) AS sessioncount\n, SUM(value) AS duration\nFROM valuecte\nGROUP BY userid\n, courseid\nORDER BY userid\n;\n']], ['SQL query to calculate part of visit duration from log table'], 3], [(1613442, 2), [["This is the result I get. I'm quite pleased with it. Notice how the session count remains correct for user 9."], ['-10000']], [[' userid  courseid  sessioncount  duration\n1       1         1             10\n2       1         1              3\n3       1         1              6\n4       1         1              4\n5       1         2             10\n6       1         1             10\n7       1         1              9\n8       1         1             10\n9       1         2              0\n']], ['SQL query to calculate part of visit duration from log table'], 3], [(1613782, 0), [['What about'], ['or']], [['  CONTAINS([Description], \'"fish"\') \n']], ['SQL Free Text And Like'], 3], [(1613782, 1), [['or'], ['What you could also do is define your own synonym for fulltext search, e.g. define "goldfish" to be a synonym for "fish" - than you should be able to search for just "fish" and also find "goldfish".']], [["  FREETEXT([Description], 'fish') \n"]], ['SQL Free Text And Like'], 3], [(1613782, 2), [['What you could also do is define your own synonym for fulltext search, e.g. define "goldfish" to be a synonym for "fish" - than you should be able to search for just "fish" and also find "goldfish".'], ["Check out  Understanding Full-Text Indexing in SQL Server  - there's a good section a bit down in the article on modifying the fulltext thesaurus."]], [[" SELECT (list of fields) FROM YourTable\nWHERE CONTAINS([Description], 'FORMSOF(THESAURUS, fish)')\n"]], ['SQL Free Text And Like'], 3], [(1616229, 0), [['A varbinary(128) is a 128 byte block of memory.  An int is a 4 byte block of memory.  So you can recover the int like this:'], ['The var in varbinary means the actual length varies, the number in parenthesis merely specifies the maximum size.  So this SELECT statement displays a 4-byte varbinary:']], [[' select convert(int,convert(varbinary(4),CONTEXT_INFO()))\n']], ['CONTEXT_INFO() and CONVERT'], 3], [(1616229, 1), [['The var in varbinary means the actual length varies, the number in parenthesis merely specifies the maximum size.  So this SELECT statement displays a 4-byte varbinary:'], ['But when you cast CONTEXT_INFO() to a varbinary(128), you really get a 128 byte varbinary.  This example is a nice demonstration:']], [[' select convert(varbinary(128), 1)\n']], ['CONTEXT_INFO() and CONVERT'], 3], [(1616229, 2), [['But when you cast CONTEXT_INFO() to a varbinary(128), you really get a 128 byte varbinary.  This example is a nice demonstration:'], ['This will print 256; the last 3 bytes of the integer 1, with a 0 byte appended.']], [[' set context_info 1\nselect convert(int,convert(varbinary(5),context_info()))\n']], ['CONTEXT_INFO() and CONVERT'], 3], [(1617317, 0), [['Here is what I came up with in the end:'], ['BC is the name of key (B,C). If we order the table by B DESC, then the result is guranteed to be equal to ']], [[' HANDLER a OPEN;\nHANDLER a READ BC <= (X);\nHANDLER a CLOSE;\n']], ['Prohibit MySQL from using full table scan on a query'], 2], [(1617317, 1), [['BC is the name of key (B,C). If we order the table by B DESC, then the result is guranteed to be equal to '], ["Now if X is not in the range of the table a, we just have to check that a.C is greater than X, if it's not, than X is definitely outside of the range and we don't need to look any further."]], [[' SELECT *\nFROM a\nWHERE (X BETWEEN a.B AND a.C) \nORDER BY a.B DESC \nLIMIT 1;\n']], ['Prohibit MySQL from using full table scan on a query'], 2], [(1617827, 0), [['-10000'], ['gives 5']], [[" substring_index(substring_index('3|5|6|asdf asd|6|0|NULL', '|', 2), '|', -1)\n"]], ['substring in MySQL'], 2], [(1617827, 1), [['gives 5'], ['gives 6']], [[" substring_index(substring_index('3|5|6|asdf asd|6|0|NULL', '|', 3), '|', -1)\n"]], ['substring in MySQL'], 2], [(1618560, 0), [['If SeqNo is limited to 1,2,3:'], ['If SeqNo is open ended you can deploy a recursive cte:']], [[" select id, a.name + coalesce('/'+b.name, '') + coalesce('/'+c.name, '')\nfrom myTable a\nleft outer join myTable b on a.id=b.id and b.seqno = 2\nleft outer join myTable c on a.id=c.id and c.seqno = 3\nwhere a.seqno = 1;\n"]], ['Select and merge rows in a table in SQL Stored procedure'], 2], [(1618560, 1), [['If SeqNo is open ended you can deploy a recursive cte:'], ['-10000']], [[" ;with anchor as (\n   select id, name, seqno\n      from myTable\n      where seqno=1)\n, recursive as (\n   select id, name, seqno\n      from anchor\n      union all\n   select t.id, r.name + '/' + t.name, t.seqno\n      from myTable t\n      join recursive  r on t.id = r.id and r.seqno+1 = t.seqno)\nselect id, name from recursive;\n"]], ['Select and merge rows in a table in SQL Stored procedure'], 2], [(1619379, 0), [['If you want to keep this as one column, use  base 2  placeholders.'], ['So..']], [[' 1 - represents priv 1\n2 - represents priv 2\n4 - represents priv 3\n8 - represents priv 4\n16 - represents priv 5\n32 - represents priv 6\n']], ['The right way to manage user privileges (user hierarchy)'], 3], [(1619379, 1), [['So..'], ["But... I'd still suggest storing each priv separately.\nCreate a table with a  combined primary key on priv, user_id, and grantor .\nThe combined primary key will ensure that each priv is unique so you don't need to check before inserting.  To create a combined primary key:"]], [[' 3 = priv 1 and priv 2\n9 = priv 1 and priv 4\n\n63 = all privs.\n']], ['The right way to manage user privileges (user hierarchy)'], 3], [(1619379, 2), [["But... I'd still suggest storing each priv separately.\nCreate a table with a  combined primary key on priv, user_id, and grantor .\nThe combined primary key will ensure that each priv is unique so you don't need to check before inserting.  To create a combined primary key:"], ['Then to add or reset a priv,  REPLACE INTO priv (user_id,grantor,priv_id) VALUES (?,?,?)']], [[' ALTER TABLE priv ADD PRIMARY KEY (user_id,grantor,priv_id);\n']], ['The right way to manage user privileges (user hierarchy)'], 3], [(1619879, 0), [['You could do something along the lines of:'], ['Or, something like this would probably be more efficient:']], [[" select e.id\nfrom   extra as e\nwhere  exists (select null from your_table as t where t.id = e.id and t.color = 'blue')\n  and  exists (select null from your_table as t where t.id = e.id and t.color = 'purple')\n  and  exists (select null from your_table as t where t.id = e.id and t.color = 'green')\n  and  exists (select null from your_table as t where t.id = e.id and t.color = 'white')\n  and not exists (select null from your_table as t where t.id = e.id and t.color = 'black')\n"]], ['mysql cross join not in?'], 2], [(1619879, 1), [['Or, something like this would probably be more efficient:'], ['-10000']], [[" select e.id\nfrom   extra as e\nwhere  4 = \n       (select count(*) \n        from   your_table as t \n        where  t.id = e.id \n          and  t.color in ('blue', 'purple', 'green', 'white'))\n  and  0 = \n       (select count(*) \n        from   your_table as t \n        where  t.id = e.id \n          and  t.color in ('black'))\n"]], ['mysql cross join not in?'], 2], [(1620662, 0), [['The command is '], ['Unfortunately,  it has no narrowing parameters . If you need them you can do it from the command line:']], [[' SHOW PROCESSLIST\n']], ['mysql: see all open connections to a given database?'], 2], [(1620662, 1), [['Unfortunately,  it has no narrowing parameters . If you need them you can do it from the command line:'], ['-10000']], [[' mysqladmin processlist | grep database-name\n']], ['mysql: see all open connections to a given database?'], 2], [(1622878, 0), [["This may fail because you don't know in which order things are evaluated"], ['And this may also fail because']], [[' SELECT foo From MyTable WHERE ISNUMERIC (foo) = 1 AND CAST(foo AS int) > 100\n']], ['Why use Select Top 100 Percent?'], 4], [(1622878, 1), [['And this may also fail because'], ['However, this did not in SQL Server 2000. The inner query is evaluated and spooled:']], [[' SELECT foo\nFROM\n    (SELECT foo From MyTable WHERE ISNUMERIC (foo) = 1) bar\nWHERE\n    CAST(foo AS int) > 100\n']], ['Why use Select Top 100 Percent?'], 4], [(1622878, 2), [['However, this did not in SQL Server 2000. The inner query is evaluated and spooled:'], ['Note, this still works in SQL Server 2005']], [[' SELECT foo\nFROM\n    (SELECT TOP 100 PERCENT foo From MyTable WHERE ISNUMERIC (foo) = 1 ORDER BY foo) bar\nWHERE\n    CAST(foo AS int) > 100\n']], ['Why use Select Top 100 Percent?'], 4], [(1622878, 3), [['Note, this still works in SQL Server 2005'], ['-10000']], [[' SELECT TOP 2000000000 ... ORDER BY...\n']], ['Why use Select Top 100 Percent?'], 4], [(1622900, 0), [['Your example doesn\'t show, and you don\'t explain how you determine which row is the "top" one, so I\'ve put ?????? in the query where you need to provide a ranking column, such as'], ['for example. In any case, this is exactly what the analytic functions in SQL Server 2005 and later are for.']], [[' a desc\n']], ['Finding top n for each unique row'], 2], [(1622900, 1), [['for example. In any case, this is exactly what the analytic functions in SQL Server 2005 and later are for.'], ['-10000']], [[' declare @howmany int = 3;\nwith TRanked (a,b,c,d,e,rk) as (\n  select\n    a,b,c,d,e,\n    rank() over (\n      partition by b,c,d\n      order by ???????\n    )\n  from T\n)\n  select a,b,c,d,e\n  from TRanked\n  where rk <= @howmany;\n']], ['Finding top n for each unique row'], 2], [(1626401, 0), [['You can do that using'], ['To reseed identity (to lets say start at 77) use the following command']], [[' SET IDENTITY_INSERT TableName ON\n\nINSERT INTO MyTable (IdentityColumn, Column1, Column2) Values (1, 2, 3)\n\nSET IDENTITY_INSERT TableName OFF\n']], ['How to change Column Properties In SQL?'], 2], [(1626401, 1), [['To reseed identity (to lets say start at 77) use the following command'], ['-10000']], [[' dbcc checkident(TableName, RESEED, 77)\n']], ['How to change Column Properties In SQL?'], 2], [(1627604, 0), [["If you're working with Oracle/PLSQL:"], ['In SQL Server/T-SQL:']], [[" SELECT NumToDSInterval(enddate- startdate, 'MINUTE') FROM MyTable\n"]], ['SQL Query including time calculation'], 3], [(1627604, 1), [['In SQL Server/T-SQL:'], ['In MySQL:']], [[' SELECT DateDiff(n, startdate, enddate) FROM MyTable\n']], ['SQL Query including time calculation'], 3], [(1627604, 2), [['In MySQL:'], ["I'm sure there's one for SQLite and PostGre and any other flavor as well."]], [[' SELECT SubTime(enddate, startdate) FROM MyTable;\n']], ['SQL Query including time calculation'], 3], [(1627689, 0), [['Then you follow a model similar to the prefix searching offered up in the solrconfig.xml file:'], ['Once you have your own FieldType (call it ngram_text) using your own MyNGramFilterFactory, just create your original field and the ngram field like so:']], [[' <fieldType name="prefix_token" class="solr.TextField" positionIncrementGap="1">\n    <analyzer type="index">\n        <tokenizer class="solr.WhitespaceTokenizerFactory"/>\n        <filter class="solr.LowerCaseFilterFactory" />\n        <filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="20"/>\n    </analyzer>\n    <analyzer type="query">\n        <tokenizer class="solr.WhitespaceTokenizerFactory"/>\n        <filter class="solr.LowerCaseFilterFactory" />\n    </analyzer>\n</fieldType>\n']], ['How to search for text fragments in a database'], 3], [(1627689, 1), [['Once you have your own FieldType (call it ngram_text) using your own MyNGramFilterFactory, just create your original field and the ngram field like so:'], ['Then tell it to copy the original field into the fancy one:']], [['     <field name="title" type="text" indexed="true" stored="true"/>\n    <field name="title_ngrams" type="ngram_text" indexed="true" stored="false"/>\n']], ['How to search for text fragments in a database'], 3], [(1627689, 2), [['Then tell it to copy the original field into the fancy one:'], ['Alright, now when you search "title_ngrams:sledge" you should get a list of documents that contain this. Then in your field list for the query you just tell it to retrieve the field called title rather than the field title_ngrams.']], [[' <copyField source="title" dest="title_ngrams"/>\n']], ['How to search for text fragments in a database'], 3], [(1628417, 0), [['have you tried the alter table command ? '], ['you could create a new (TEXT) column, then fill it in with an update command:']], [[' alter table mytable change mycolumn mycolumn text; \n']], ['MySQL Blob to Text (data and datatype)'], 2], [(1628417, 1), [['you could create a new (TEXT) column, then fill it in with an update command:'], ['-10000']], [[' update mytable set myNewColumn = CAST(myOldColumn AS CHAR(10000) CHARACTER SET utf8) \n']], ['MySQL Blob to Text (data and datatype)'], 2], [(1628642, 0), [['Create a table of numbers:'], ['Populate the table:']], [[' CREATE TABLE `NUMBERS` (\n  `num` int(11) NOT NULL auto_increment,\n  PRIMARY KEY  (`num`)\n)\n']], ['sql counting rows'], 4], [(1628642, 1), [['Populate the table:'], ['Use the following:']], [[' INSERT INTO NUMBERS VALUES (NULL)\n']], ['sql counting rows'], 4], [(1628642, 2), [['Use the following:'], ['If you want to use based on min/max of the  VISITS  table, use:']], [["    SELECT IFNULL(vd.num_visits, 0),\n          DATE_FORMAT(s.gdate, '%l%p, %e %b %Y')\n     FROM (SELECT DATE_ADD(@min_date, INTERVAL n.num-1 HOUR) 'gdate'\n             FROM NUMBERS n\n            WHERE DATE_ADD(@min_date, INTERVAL n.num-1 HOUR) <= @max_date ) s\nLEFT JOIN (SELECT v.visits,\n                  COUNT(*) 'num_visits'\n             FROM visits v\n         GROUP BY v.visits) vd ON vd.visits = s.gdate\n ORDER BY s.gdate DESC\n"]], ['sql counting rows'], 4], [(1628642, 3), [['If you want to use based on min/max of the  VISITS  table, use:'], ['-10000']], [[" FROM (SELECT DATE_ADD(@min_date, INTERVAL n.num-1 HOUR) 'gdate'\n        FROM NUMBERS n\n        JOIN (SELECT MIN(t.visits) 'minv',\n                     MAX(t.visits) 'maxv'\n                FROM visits t) t\n       WHERE DATE_ADD(t.minv, INTERVAL n.num-1 HOUR) <= t.maxv ) s\n"]], ['sql counting rows'], 4], [(1630109, 0), [['with LIMIT'], ['with OFFSET and LIMIT']], [[" $this->db->limit(1);\n$query = $this->db->get('my_table');\n$myRow = $query->row();\n"]], ['"SELECT TOP 1" equality for codeigniter?'], 2], [(1630109, 1), [['with OFFSET and LIMIT'], ['-10000']], [[" $query = $this->db->get('mytable', 0, 1);\n$myRow = $query->row();\n"]], ['"SELECT TOP 1" equality for codeigniter?'], 2], [(1630461, 0), [["Originally I didn't think you needed a join at all,"], ['Then again, maybe I do not have the requirements clear.  What is the purpose of this query?']], [[" ;WITH n AS \n(\n    SELECT\n      NameID,\n      rn = ROW_NUMBER() OVER (ORDER BY NameID)\n    FROM [Name]\n    WHERE TypeID = @TypeID\n    AND [Name] = 'Billy'\n)\nSELECT NameID\n    FROM n\n    WHERE rn > 1;\n"]], ['how do I remove nested select statement'], 2], [(1630461, 1), [['Then again, maybe I do not have the requirements clear.  What is the purpose of this query?'], ['I agree with Lukas, I am not sure why the person who is telling you to change this thinks an inner join will be better than your original.']], [[" SELECT n1.NameID \nFROM [Name] AS n1\n    INNER JOIN\n(\n    SELECT NameID = MIN(NameID) \n    FROM [Name]\n    WHERE TypeID = @TypeID\n    AND [Name] = 'Billy'\n) AS n2\nON n1.NameID >= n2.NameID\nWHERE n1.TypeID = @TypeID;\n"]], ['how do I remove nested select statement'], 2], [(1630724, 0), [['you can override the %+% operator to have better string concatination syntax:'], ['yields:']], [[' \'%+%\' <- function(x,y) paste(x,y,sep="")\n\ny<-"y1"\nx<-"somethingorother"\nquery<-\n\'SELECT DISTINCT x AS \' %+% x %+%\',\\n\'    %+%\n\'                y AS \' %+% y %+% \'\\n\'    %+%\n\' FROM tbl\n WHERE id=%s\n AND num=%d\'\n\ncat(query,"\\n")\n']], ['Can I gracefully include formatted SQL strings in an R script?'], 2], [(1630724, 1), [['yields:'], ['-10000']], [[' > cat(query,"\\n")\nSELECT DISTINCT x AS somethingorother,\n                y AS y1\n FROM tbl\n WHERE id=%s\n AND num=%d \n']], ['Can I gracefully include formatted SQL strings in an R script?'], 2], [(1633236, 0), [['Make sure you put any filters against the outer joined tables in the JOIN clause, not the WHERE clause. eg:'], ['Rather than:']], [[' select curr.jobid, curr.routingid, prev.routingid as prev_routingid\nfrom #routing curr\nleft join #routing prev \n  on curr.jobid = prev.jobid\n and curr.sequence = prev.sequence+1\n']], ['Sql Query First, Next, Last Rows in a Set'], 2], [(1633236, 1), [['Rather than:'], ['The second version is equivalent to an inner join.']], [[' select curr.jobid, curr.routingid, prev.routingid as prev_routingid\nfrom #routing curr\nleft join #routing prev \n  on curr.jobid = prev.jobid\nwhere curr.sequence = prev.sequence+1\n']], ['Sql Query First, Next, Last Rows in a Set'], 2], [(1633727, 0), [['I also managed to modify build.xml so that "ant hosted" will run the hosted mode with the remote server.  I found the "hosted" target, and the <arg> line that looks like:'], ['and added the following line before it:']], [[' <arg value="-startupUrl"/>\n']], ['Using GWT with a database'], 4], [(1633727, 1), [['and added the following line before it:'], ['and changed the line after it from']], [[' <arg value="-noserver"/>\n']], ['Using GWT with a database'], 4], [(1633727, 2), [['and changed the line after it from'], ['to']], [[' <arg value="Navaid.html"/>\n']], ['Using GWT with a database'], 4], [(1633727, 3), [['to'], ['-10000']], [[' <arg value="http://foo.bar.com:8080/Navaid/Navaid.html"/>\n']], ['Using GWT with a database'], 4], [(1634584, 0), [['For a single value'], ['For all values ']], [[" SELECT * FROM my_table WHERE id LIKE '3'\n"]], ['Is there a way to use a wildcard in a "where" statment for MySQL?'], 2], [(1634584, 1), [['For all values '], ["Won't give you any values with NULL id though."]], [[" SELECT * FROM my_table WHERE id LIKE '%'\n"]], ['Is there a way to use a wildcard in a "where" statment for MySQL?'], 2], [(1634725, 0), [['One option would be something along the lines of:'], ['If you have an index on  the_value  and you relax your requirement for the result to be random in the case of ties, you can perform a pair of limited range queries to select the first value immediately above the test value and the first value immediately below the test value and pick whichever is closest to the test value:']], [[' select   the_value,\n         abs(the_value - 14) as distance_from_test\nfrom     the_table\norder by distance_from_test\nlimit 1\n']], ['Select closest numerical value with MySQL query'], 2], [(1634725, 1), [['If you have an index on  the_value  and you relax your requirement for the result to be random in the case of ties, you can perform a pair of limited range queries to select the first value immediately above the test value and the first value immediately below the test value and pick whichever is closest to the test value:'], ['-10000']], [[' (\nselect   the_value\nfrom     the_table\nwhere    the_value >= 14\norder by the_value asc\nlimit 1\n)\nunion\n(\nselect   the_value\nfrom     the_table\nwhere    the_value < 14\norder by the_value desc\nlimit 1\n)\norder by abs(the_value - 14)\nlimit 1\n']], ['Select closest numerical value with MySQL query'], 2], [(1635328, 0), [['Non Subquery Factoring:'], ['Using subquery factoring:']], [["   SELECT vss.group_id, \n         vss.supplier_id, \n         vss.supplier_name, \n         vss.site_division_id, \n         vss.site_division_name \n    FROM view_supplier_site vss\n    JOIN (SELECT vs.supplier_id\n            FROM view_supplier vs\n           WHERE vs.year IN (2008, 2009)  \n             AND vs.received_quantity > 0 \n             AND vs.coe_supplier NOT IN ('X - LG', 'Y - LG', 'Z - LG')\n        GROUP BY vs.supplier_id) s ON s.supplier_id = vss.supplier_id\nGROUP BY vss.group_id, vss.supplier_id, vss.supplier_name, vss.site_division_id, vss.site_division_name \n"]], ['Does this SQL statement needs to be refactored?'], 2], [(1635328, 1), [['Using subquery factoring:'], ["They're equivalent."]], [[" WITH suppliers AS (\n    SELECT vs.supplier_id\n      FROM view_supplier vs\n     WHERE vs.year IN (2008, 2009)  \n       AND vs.received_quantity > 0 \n       AND vs.coe_supplier NOT IN ('X - LG', 'Y - LG', 'Z - LG')\n  GROUP BY vs.supplier_id)\n  SELECT vss.group_id, \n         vss.supplier_id, \n         vss.supplier_name, \n         vss.site_division_id, \n         vss.site_division_name \n    FROM view_supplier_site vss\n    JOIN suppliers s ON s.supplier_id = vss.supplier_id\nGROUP BY vss.group_id, vss.supplier_id, vss.supplier_name, vss.site_division_id, vss.site_division_name \n"]], ['Does this SQL statement needs to be refactored?'], 2], [(1636190, 0), [['You could convert the varchar to a decimal like:'], ['Or use the  TO_NUMBER()  function:']], [[' select *\nfrom YourTable\nwhere CAST(YourField AS decimal) < 40.00\n']], ['Oracle. Convert varchar value "40.00" to numerical'], 3], [(1636190, 1), [['Or use the  TO_NUMBER()  function:'], ['If the field is not always a number, and you have a relatively recent Oracle installation, you can select rows where YourField is numeric like:']], [[' select *\nfrom YourTable\nwhere TO_NUMBER(YourField) < 40.00\n']], ['Oracle. Convert varchar value "40.00" to numerical'], 3], [(1636190, 2), [['If the field is not always a number, and you have a relatively recent Oracle installation, you can select rows where YourField is numeric like:'], ['-10000']], [[" select *\nfrom (\n    select * \n    from YourTable\n    where regexp_like(YourField, '^-?[[:digit:],.]+$')\n) sub\nwhere TO_NUMBER(YourField) < 40.00\n"]], ['Oracle. Convert varchar value "40.00" to numerical'], 3], [(1638070, 0), [['To determine the storage engine being used by a table, you can use  show table status .  The  Engine  field in the results will show the database engine for the table.  Alternately, you can select the  engine  field from  information_schema.tables :'], ['You can change between storage engines using  alter table :']], [[" select engine \nfrom   information_schema.tables \nwhere  table_schema = 'schema_name'\n   and table_name = 'table_name' \n"]], ['How can I determine type of mysql database : whether it is InnoDB or MyISAM?'], 2], [(1638070, 1), [['You can change between storage engines using  alter table :'], ['Where, of course, you can specify any available storage engine.']], [[' alter table the_table engine = InnoDB;\n']], ['How can I determine type of mysql database : whether it is InnoDB or MyISAM?'], 2], [(1638093, 0), [['Something like this:'], ['Perhaps you could wrap the SELECT statement in a derived table, and move the ORDER BY to the outer query. eg:']], [[" -- prepare some test data\ndeclare @table table (Child int, [Level] varchar(30), Parent int)\n\ninsert @table values (562 , 'Campus  ',  0  )\ninsert @table values (1   , 'Building',  562)\ninsert @table values (86  , 'Area    ',  1  )\ninsert @table values (87  , 'Area    ',  1  )\ninsert @table values (88  , 'Area    ',  1  )\ninsert @table values (90  , 'Sub-Area',  86 )\ninsert @table values (91  , 'Sub-Area',  86 )\ninsert @table values (92  , 'Sub-Area',  87 )\ninsert @table values (93  , 'Sub-Area',  87 )\ninsert @table values (94  , 'Sub-Area',  88 )\ninsert @table values (95  , 'Sub-Area',  88 )\ninsert @table values (3   , 'Unit    ',  90 )\ninsert @table values (16  , 'Unit    ',  90 )\ninsert @table values (4   , 'Unit    ',  91 )\ninsert @table values (6   , 'Unit    ',  91 )\n\nselect\n  a.Child, a.[Level], a.Parent\n, Campus = \n    case a.[Level]\n      when 'Unit'     then e.Child\n      when 'Sub-Area' then d.Child\n      when 'Area'     then c.Child\n      when 'Building' then b.Child\n      when 'Campus'   then a.Child\n    end\n, Building = \n    case a.[Level]\n      when 'Unit'     then d.Child\n      when 'Sub-Area' then c.Child\n      when 'Area'     then b.Child\n      when 'Building' then a.Child\n    end\n, Area = \n    case a.[Level]\n      when 'Unit'     then c.Child\n      when 'Sub-Area' then b.Child\n      when 'Area'     then a.Child\n    end\n, Sub_Area = \n    case a.[Level]\n      when 'Unit'     then b.Child\n      when 'Sub-Area' then a.Child\n    end\n, Unit = \n    case a.[Level]\n      when 'Unit'     then a.Child\n    end\n\nfrom @table a\n\nleft join @table b on a.Parent = b.Child \n  and ((a.[Level] = 'Unit'     and b.[Level] = 'Sub-Area')\n    or (a.[Level] = 'Sub-Area' and b.[Level] = 'Area'    )\n    or (a.[Level] = 'Area'     and b.[Level] = 'Building')\n    or (a.[Level] = 'Building' and b.[Level] = 'Campus'  ))\n\nleft join @table c on b.Parent = c.Child \n  and ((b.[Level] = 'Sub-Area' and c.[Level] = 'Area'    )\n    or (b.[Level] = 'Area'     and c.[Level] = 'Building')\n    or (b.[Level] = 'Building' and c.[Level] = 'Campus'  ))\n\nleft join @table d on c.Parent = d.Child \n  and ((c.[Level] = 'Area'     and d.[Level] = 'Building')\n    or (c.[Level] = 'Building' and d.[Level] = 'Campus'  ))\n\nleft join @table e on d.Parent = e.Child \n  and ((d.[Level] = 'Building' and e.[Level] = 'Campus'  ))\n\norder by \n  4, 5, 6, 7, 8\n"]], ['More advanced logic for ordering results of a query in T-SQL?'], 2], [(1638093, 1), [['Perhaps you could wrap the SELECT statement in a derived table, and move the ORDER BY to the outer query. eg:'], ['-10000']], [[' SELECT Child, [Level], Parent\nFROM (\n  SELECT ....\n  ) a\nORDER BY Campus, Building, Area, Sub_Area, Unit\n']], ['More advanced logic for ordering results of a query in T-SQL?'], 2], [(1639151, 0), [['Here\'s the hard part using a recursive CTE plus the final query that shows "place".'], ['-10000']], [['Code DECLARE @cust TABLE (\n    CustomerID      int     IDENTITY,\n    ParticipationCt int\n)\n\nDECLARE @list TABLE (\n    CustomerID      int,\n    RowNumber       int\n)\n\nINSERT INTO @cust (ParticipationCt) VALUES (5)\nINSERT INTO @cust (ParticipationCt) VALUES (8)\nINSERT INTO @cust (ParticipationCt) VALUES (1)\nINSERT INTO @cust (ParticipationCt) VALUES (3)\nINSERT INTO @cust (ParticipationCt) VALUES (4)\n\nSELECT * FROM @cust\n\n;WITH t AS (\n    SELECT\n        lvl = 1,\n        CustomerID,\n        ParticipationCt\n    FROM @Cust\n\n    UNION ALL\n\n    SELECT\n        lvl = lvl + 1,\n        CustomerID,\n        ParticipationCt\n    FROM t\n    WHERE lvl < ParticipationCt\n)\nINSERT INTO @list (CustomerID, RowNumber)\nSELECT\n    CustomerID,\n    ROW_NUMBER() OVER (ORDER BY NEWID())\nFROM t\n\n--<< All rows\nSELECT * FROM @list ORDER BY RowNumber\n\n--<< All customers by "place"\nSELECT\n    CustomerID,\n    ROW_NUMBER() OVER (ORDER BY MIN(RowNumber)) AS Place\nFROM @list\nGROUP BY CustomerID\n']], ['TSQL Sweepstakes Script'], 3], [(1639151, 1), [['-10000'], ['-10000']], [['Results  CustomerID ParticipationCt\n----------- ---------------\n          1               5\n          2               8\n          3               1\n          4               3\n          5               4\n\n CustomerID   RowNumber\n----------- -----------\n          4           1\n          1           2\n          1           3\n          2           4\n          1           5\n          5           6\n          2           7\n          2           8\n          4           9\n          2          10\n          2          11\n          2          12\n          1          13\n          5          14\n          5          15\n          3          16\n          5          17\n          1          18\n          2          19\n          2          20\n          4          21\n\n CustomerID Place\n----------- -----\n          4     1\n          1     2\n          2     3\n          5     4\n          3     5\n']], ['TSQL Sweepstakes Script'], 3], [(1639151, 2), [['-10000'], ['-10000']], [['Code (Single Query) ;WITH List AS (\n    SELECT\n        lvl = 1,\n        CustomerID,\n        ParticipationCt\n    FROM @Cust\n\n    UNION ALL\n\n    SELECT\n        lvl = lvl + 1,\n        CustomerID,\n        ParticipationCt\n    FROM List\n    WHERE lvl < ParticipationCt\n),\nRandomOrder AS (\n    SELECT\n        CustomerID,\n        ROW_NUMBER() OVER (ORDER BY NEWID()) AS RowNumber\n    FROM List\n)\nSELECT\n    CustomerID,\n    ROW_NUMBER() OVER (ORDER BY MIN(RowNumber)) AS Place\nFROM RandomOrder\nGROUP BY CustomerID\n']], ['TSQL Sweepstakes Script'], 3], [(1639506, 0), [['You can create a sheet of valid accounts and months with cross join.  Look for the corresponding "real" row with a left join, and you\'re set:'], ["Here's the test data I used:"]], [[' ;with months as\n(\n    select 0 as Month\n    union all\n    select Month + 1 from months where Month < 12\n)\nselect a.acct_no, m.month as post_prd, IsNull(g.post_trn_amt,0)\nfrom months m\ncross join (select  distinct acct_no from @GLBalances) a\nleft join @GLBalances g \n    on m.month = g.post_prd \n    and a.acct_no = g.acct_no\norder by a.acct_no, m.month\n']], ['Getting Monthly Data Even If Empty'], 2], [(1639506, 1), [["Here's the test data I used:"], ['-10000']], [[' declare @GLBalances table (acct_no int, post_prd int, post_trn_amt int)\ninsert into @GLBalances\nselect 1011,0,-15000\nunion all select 1011, 1, 5000\nunion all select 1011, 2, -6000\nunion all select 1011, 4, 8000\nunion all select 1020, 5, 100\nunion all select 1020, 12, 300\nunion all select 1011, 9, 500\nunion all select 1011, 8, 0\n']], ['Getting Monthly Data Even If Empty'], 2], [(1639906, 0), [['-10000'], ['-10000']], [[" SELECT strftime('%Y',datetime) AS year, \n       strftime('%m',datetime) AS month, \n       type, \n       Sum(amount) As Amount \nFROM mytable \nGroup By 1, 2, 3\n"]], ['SQL combining GROUP BY and SUM'], 2], [(1639906, 1), [['-10000'], ['-10000']], [[" SELECT strftime('%Y',datetime) AS year, \n       strftime('%m',datetime) AS month, \n       type, \n       Sum(amount) As Amount \nFROM mytable \nGroup By strftime('%Y',datetime), \n       strftime('%m',datetime), \n       type\n"]], ['SQL combining GROUP BY and SUM'], 2], [(1641718, 0), [['You can use  SELECT DISTINCT  or  GROUP BY  to do this.'], ['or']], [[' SELECT DISTINCT a, c\nFROM table_c\n']], ['How to select unique records by SQL'], 3], [(1641718, 1), [['or'], ['GROUP BY  will be more helpful if you want to use some aggregate function like  COUNT()  or  SUM()']], [[' SELECT a, b\nFROM table_c\nGROUP BY a, b\n']], ['How to select unique records by SQL'], 3], [(1641718, 2), [['GROUP BY  will be more helpful if you want to use some aggregate function like  COUNT()  or  SUM()'], ['-10000']], [[' SELECT a, b, count(*)\nFROM table_c\nGROUP BY a, b\n\nSELECT a, b, sum(d)\nFROM table_c\nGROUP BY a, b\n']], ['How to select unique records by SQL'], 3], [(1646172, 0), [['First, in your WHERE clause, you should replace this:'], ['With this:']], [[' -- reformatted for readability\nWHERE x.[DATE] > (\n          SELECT TOP 1 z.[DATE] FROM TICKERS z \n          WHERE z.TICKER = @TKR ORDER BY z.DATE ASC\n          )+20\n  AND (DATEDIFF(day, x.[date], GETDATE()) <= 730)\n']], ['GET ISNULL from COMPLEX FUNCTION'], 3], [(1646172, 1), [['With this:'], ['Beyond that, you could replace this with a multi-statement table-valued function. eg:']], [[' WHERE x.[DATE] > (\n          SELECT DATEADD(DAY,20,MIN(z.[DATE])) \n          FROM TICKERS z WHERE z.TICKER = @TKR\n          )\n  AND x.[DATE] > DATEADD(DAY,-731,GETDATE())\n']], ['GET ISNULL from COMPLEX FUNCTION'], 3], [(1646172, 2), [['Beyond that, you could replace this with a multi-statement table-valued function. eg:'], ['-10000']], [[' CREATE FUNCTION dbo.GetStdDev (@TKR VARCHAR(10))\nRETURNS @results TABLE (\n  dayno   SMALLINT IDENTITY(1,1) PRIMARY KEY\n, [date]  DATETIME\n, [stdev] FLOAT\n) \nAS BEGIN\n\n  DECLARE @min_sysdate DATETIME, @min_tkrdate DATETIME, @rowcount SMALLINT\n\n  SET @min_sysdate = DATEADD(DAY,-731,GETDATE())\n  SET @min_tkrdate = DATEADD(DAY,20,(\n    SELECT MIN(DATE) FROM TICKERS WHERE TICKER = @TKR))\n\n  INSERT @results ([date],[stdev])\n  SELECT x.[date], ISNULL(STDEV(y.[Close]),0) AS stdev\n  FROM Tickers x\n  JOIN Tickers y ON x.[DATE] BETWEEN DATEADD(DAY,-20,y.[DATE]) AND y.[DATE]\n  WHERE x.[DATE] > @min_tkrdate \n    AND x.[DATE] > @min_sysdate\n    AND x.TICKER = @TKR \n    AND y.TICKER = @TKR \n  GROUP BY x.[DATE]\n\n  SET @rowcount = @@ROWCOUNT\n\n  UPDATE @results SET [stdev] = (\n    SELECT [stdev] FROM @results WHERE dayno = @rowcount-1)\n  WHERE dayno = @rowcount\n\n  RETURN\n\nEND\n']], ['GET ISNULL from COMPLEX FUNCTION'], 3], [(1647581, 0), [['Here is a dumbed-down version of the extended row class that I use on my projects:'], ['For our individual table classes, we override the functions as such:']], [[" /**\n * @category   FireUp\n * @package    FireUp_Db\n * @copyright  Copyright (c) 2007-2009 Fire Up Media, Inc. (http://www.fireup.net)\n * @license    http://dev.fireup.net/license/mit     MIT License\n * @uses       Zend_Db_Table_Row\n */\nclass FireUp_Db_Table_Row extends Zend_Db_Table_Row_Abstract\n{\n    /**\n     * Retrieve row field value\n     *\n     * Checks for the existence of a special method to apply additional handling for the field data and calls the method if it exists\n     *\n     * @param  string $columnName The user-specified column name.\n     * @return string             The corresponding column value.\n     * @throws Zend_Db_Table_Row_Exception if the $columnName is not a column in the row.\n     */\n    public function __get($key)\n    {\n        $inflector = new Zend_Filter_Word_UnderscoreToCamelCase();\n\n        $method = '_get' . $inflector->filter($key);\n\n        if (method_exists($this, $method))\n        {\n            return $this->{$method}();\n        }\n\n        return parent::__get($key);\n    }\n\n    /**\n     * Set row field value\n     *\n     * Checks for the existence of a special method to apply additional handling for the field data and calls the method if it exists\n     *\n     * @param  string $columnName The column key.\n     * @param  mixed  $value      The value for the property.\n     * @return void\n     * @throws Zend_Db_Table_Row_Exception\n     */\n    public function __set($key, $value)\n    {\n        $inflector = new Zend_Filter_Word_UnderscoreToCamelCase();\n\n        $method = '_set' . $inflector->filter($key);\n\n        if (method_exists($this, $method))\n        {\n            return $this->{$method}($value);\n        }\n\n        return parent::__set($key, $value);\n    }\n}\n"]], ['Automatically selecting dates from databases as Zend_Date objects'], 2], [(1647581, 1), [['For our individual table classes, we override the functions as such:'], ["Now, creating a new Zend_Date object everytime that the field would be accessed has some overhead, so in our classes, we take additional measures to cache the date objects, etc, but I didn't want that to get in the way of showing you the solution."]], [[" class EntityRecord extends FireUp_Db_Table_Row\n{\n    protected function _getDateCreated()\n    {\n        return new Zend_Date($this->_data['date_created'], Zend_Date::ISO_8601);\n    }\n\n    protected function _setDateCreated($value)\n    {\n        if ($value instanceof Zend_Date)\n        {\n            $value = $value->toString('YYYY-MM-dd HH:mm:ss');\n        }\n\n        $this->_data['date_created'] = $value;\n        $this->_modifiedFields['date_created'] = true;\n    }\n}\n"]], ['Automatically selecting dates from databases as Zend_Date objects'], 2], [(1647725, 0), [['You just need to change the query syntax:'], ['in the first case, or']], [[" SELECT  *\nFROM    posts\nWHERE   TO_TSVECTOR('english', title) @@ myquery\n"]], ['Dynamic or column-ized tsvector index?'], 2], [(1647725, 1), [['in the first case, or'], ['in the second case.']], [[' SELECT  *\nFROM    posts\nWHERE   title_vector @@ myquery\n']], ['Dynamic or column-ized tsvector index?'], 2], [(1647736, 0), [['You need an expression that returns "Fall_2009" or "Spring_2009", and then group on that expression. eg:'], ['or ']], [[" -- identify each pattern individually w/ a case statement\nSELECT\n  CASE\n    WHEN column_x LIKE '%Fall[_]2009'   THEN 'Fall 2009'\n    WHEN column_x LIKE '%Spring[_]2009' THEN 'Spring 2009'\n  END AS group_by_value\n, COUNT(*) AS group_by_count\nFROM Table1 a\nGROUP BY \n  CASE\n    WHEN column_x LIKE '%Fall[_]2009'   THEN 'Fall 2009'\n    WHEN column_x LIKE '%Spring[_]2009' THEN 'Spring 2009'\n  END\n"]], ['T-SQL - GROUP BY with LIKE - is this possible?'], 3], [(1647736, 1), [['or '], ['or ']], [[" -- strip all characters up to the first space or dash\nSELECT \n  STUFF(column_x,1,PATINDEX('%[- ]%',column_x),'') AS group_by_value\n, COUNT(*) as group_by_count\nFROM Table1 a\nGROUP BY \n  STUFF(column_x,1,PATINDEX('%[- ]%',column_x),'')\n"]], ['T-SQL - GROUP BY with LIKE - is this possible?'], 3], [(1647736, 2), [['or '], ['-10000']], [[" -- join to a (pseudo) table of pattern masks\nSELECT b.Label, COUNT(*)\nFROM Table1 a\nJOIN (\n  SELECT '%Fall[_]2009'  , 'Fall, 2009' UNION ALL\n  SELECT '%Spring[_]2009', 'Spring, 2009'\n  ) b (Mask, Label) ON a.column_x LIKE b.Mask\nGROUP BY b.Label\n"]], ['T-SQL - GROUP BY with LIKE - is this possible?'], 3], [(1649887, 0), [['-10000'], ["For this query, you'll need to create the suggested index indeed:"]], [[' CREATE INDEX myindex ON mytablename (co1l, col2, col3, col4)\n']], ['PostgreSQL analog of SQL Server index'], 2], [(1649887, 1), [["For this query, you'll need to create the suggested index indeed:"], ['However, your tables seem to be over-normalized to me.']], [[' SELECT  this_.id as id0_0_,   \n        this_.device_id as device2_0_0_,  \n        this_.time_id as time3_0_0_,  \n        this_.gps_detail_id as gps4_0_0_   \nFROM    DataMessage this_   \nWHERE   this_.time_id = 65536\n        AND this_.device_id = 32768\n\nCREATE INDEX ix_datamessage_time_device_id_detail ON datamessage (time_id, device_id, id, gps_detail_id)\n']], ['PostgreSQL analog of SQL Server index'], 2], [(1655295, 0), [['Create a table with one int column of type  InnoDB :'], ['Then when you want to get a new value for the key you must start a transaction (using the API you are using) and then:']], [[' CREATE TABLE key_table ( next_value INT NOT NULL DEFAULT 0 ) ENGINE=InnoDB;\n']], ['Generate int primary key manually in mysql'], 3], [(1655295, 1), [['Then when you want to get a new value for the key you must start a transaction (using the API you are using) and then:'], ['Then read the value returned, it is the value for your primary key. Then to increment the value  while still in the same transaction  execute:']], [[' SELECT next_value FROM key_table FOR UPDATE\n']], ['Generate int primary key manually in mysql'], 3], [(1655295, 2), [['Then read the value returned, it is the value for your primary key. Then to increment the value  while still in the same transaction  execute:'], ['Then commit your transaction.']], [[' UPDATE key_table SET next_value = next_value + 1;\n']], ['Generate int primary key manually in mysql'], 3], [(1658566, 0), [["Anyway, here's the solution I'd recommend (the same non-recursive CTE I posted earlier) :"], ["Here's the DDL I used to test this, including indexes you'll need:"]], [[' DECLARE @SALEDITEMS INT = 3;\n\nWITH SalesNoMatch ([DATE], SALEDITEMS, NoMatchDate) \nAS \n(\n    SELECT [DATE], SALEDITEMS, \n        (SELECT MIN([DATE]) FROM Sales s2 WHERE s2.SALEDITEMS <> @SALEDITEMS \n         AND s2.[DATE] > s1.[DATE]) as NoMatchDate\n    FROM Sales s1\n)\n, SalesMatchCount ([DATE], ConsecutiveCount) AS\n(\n    SELECT [DATE], 1+(SELECT COUNT(1) FROM Sales s2 WHERE s2.[DATE] > s1.[DATE] AND s2.[DATE] < NoMatchDate)\n    FROM SalesNoMatch s1\n    WHERE s1.SALEDITEMS = @SALEDITEMS \n)\nSELECT MAX(ConsecutiveCount) \nFROM SalesMatchCount;\n']], ['Find the longest sequence of a value in a table'], 4], [(1658566, 1), [["Here's the DDL I used to test this, including indexes you'll need:"], ["And here's how I created my test data-- 1,000,001 rows with ascending dates with SALEDITEMS randomly set between 1 and 10."]], [[' CREATE TABLE [Sales](\n    [DATE] date NOT NULL,\n    [SALEDITEMS] int NOT NULL\n);\nCREATE UNIQUE CLUSTERED INDEX IX_Sales ON Sales ([DATE]);\nCREATE UNIQUE NONCLUSTERED INDEX IX_Sales2 ON Sales (SALEDITEMS, [DATE]);\n']], ['Find the longest sequence of a value in a table'], 4], [(1658566, 2), [["And here's how I created my test data-- 1,000,001 rows with ascending dates with SALEDITEMS randomly set between 1 and 10."], ["Here's the recursive-CTE solution that I abandoned:\n    DECLARE @SALEDITEMS INT = 3;"]], [[" INSERT INTO Sales ([DATE], SALEDITEMS)\nVALUES ('1/1/09', 5)\n\nDECLARE @i int = 0;\n\nWHILE (@i < 1000000)\nBEGIN\n    INSERT INTO Sales ([DATE], SALEDITEMS)\n    SELECT DATEADD (d, 1, (SELECT MAX ([DATE]) FROM Sales)), ABS(CHECKSUM(NEWID())) % 10 + 1\n\n    SET @i = @i + 1;\nEND\n"]], ['Find the longest sequence of a value in a table'], 4], [(1658566, 3), [["Here's the recursive-CTE solution that I abandoned:\n    DECLARE @SALEDITEMS INT = 3;"], ['-10000']], [[' -- recursive CTE solution (remember to set MAXRECURSION!)\nWITH SalesRowNum ([DATE], SALEDITEMS, RowNum) \nAS \n(\n    SELECT [DATE], SALEDITEMS, ROW_NUMBER() OVER (ORDER BY s1.[DATE]) as RowNum\n    FROM Sales s1\n)\n, SalesCTE (RowNum, [DATE], ConsecutiveCount) \nAS \n( \n    SELECT s1.RowNum, s1.[DATE], 1 AS ConsecutiveCount\n    FROM SalesRowNum s1 \n    WHERE SALEDITEMS = @SALEDITEMS\n\n    UNION ALL \n\n    SELECT s1.RowNum, s1.[DATE], ConsecutiveCount + 1 AS ConsecutiveCount\n    FROM SalesRowNum s1 \n    INNER JOIN SalesCTE s2 ON s1.RowNum = s2.RowNum + 1\n    WHERE SALEDITEMS = @SALEDITEMS\n) \nSELECT MAX(ConsecutiveCount) \nFROM SalesCTE;\n']], ['Find the longest sequence of a value in a table'], 4], [(1660525, 0), [["It's not bad.  However, I would suggest that you add two fields to  tbl_user :"], ['Also, if you want to remember cards that were issued, even if not activated, then I would split  tbl_activation_code  into two tables:']], [[' tbl_user\n----------------\nid\nname\nstatus_id\nactivated_date\nexpiry_date\n']], ['How would you design this DB?'], 2], [(1660525, 1), [['Also, if you want to remember cards that were issued, even if not activated, then I would split  tbl_activation_code  into two tables:'], ['-10000']], [[' tbl_activation_code\n----------------\nactivation_code\nactivation_code_type_id\nactivation_code_status_id\naccess_days\n\ntbl_activation\n----------------\nactivation_code_id\nuser_id\nactivated_date\n']], ['How would you design this DB?'], 2], [(1664266, 0), [["That's as easy as "], ['Or more completely:']], [[' IsNull(FieldName, 0)\n']], ['Replace Default Null Values Returned From Left Outer Join'], 2], [(1664266, 1), [['Or more completely:'], ['-10000']], [[" SELECT iar.Description, \n  ISNULL(iai.Quantity,0) as Quantity, \n  ISNULL(iai.Quantity * rpl.RegularPrice,0) as 'Retail', \n  iar.Compliance \nFROM InventoryAdjustmentReason iar\nLEFT OUTER JOIN InventoryAdjustmentItem iai  on (iar.Id = iai.InventoryAdjustmentReasonId)\nLEFT OUTER JOIN Item i on (i.Id = iai.ItemId)\nLEFT OUTER JOIN ReportPriceLookup rpl on (rpl.SkuNumber = i.SkuNo)\nWHERE iar.StoreUse = 'yes'\n"]], ['Replace Default Null Values Returned From Left Outer Join'], 2], [(1664310, 0), [['majors'], ['major_courses']], [[' Id   Title       DepartmentID\n']], ['Should I split this table into two?'], 7], [(1664310, 1), [['major_courses'], ['departments']], [[' Id   MajorId     CourseId      MustHave\n']], ['Should I split this table into two?'], 7], [(1664310, 2), [['departments'], ['So that, you may have a major like:']], [[' Id   Title\n']], ['Should I split this table into two?'], 7], [(1664310, 3), [['So that, you may have a major like:'], ['a major_course like:']], [[' 1    bis          1\n']], ['Should I split this table into two?'], 7], [(1664310, 4), [['a major_course like:'], ['then departments like:']], [[' 1    1           201            0\n1    1           202            0\n1    1           203            1 -- must have 203\n']], ['Should I split this table into two?'], 7], [(1664310, 5), [['then departments like:'], ['So now, to get a list of courses for the first major you can do this:']], [[' 1    bis\n']], ['Should I split this table into two?'], 7], [(1664310, 6), [['So now, to get a list of courses for the first major you can do this:'], ['-10000']], [[' SELECT major_courses.CourseId, major_courses.MustHave, departments.Title \nFROM majors \nRIGHT JOIN major_courses ON major_courses.CourseId = majors.Id \nINNER JOIN departments ON departments.Id = majors.DepartmendID \nWHERE major.id = 1\n']], ['Should I split this table into two?'], 7], [(1664627, 0), [['You could just run:'], ['But I would recommend adding a TIMESTAMP column to the table, using an UPDATE statement to populate, and drop the original date column if you so choose:']], [[' ALTER TABLE your_table MODIFY your_date_column TIMESTAMP WITH TIME ZONE;\n']], ['Migrating Oracle DATE columns to TIMESTAMP with timezone'], 2], [(1664627, 1), [['But I would recommend adding a TIMESTAMP column to the table, using an UPDATE statement to populate, and drop the original date column if you so choose:'], ['The conversion is backwards compatible - you can switch back & forth as you like.']], [[' ALTER TABLE your_table ADD date_as_timestamp TIMESTAMP WITH TIME ZONE;\n\nUPDATE your_table\n   SET date_as_timestamp = CAST(date_column AS TIMESTAMP WITH TIME ZONE);\n']], ['Migrating Oracle DATE columns to TIMESTAMP with timezone'], 2], [(1665005, 0), [['The & is the bitwise AND operator. The logic table is:'], ['The following sql:']], [[' A   B    A AND B\n0   0       0\n1   0       0\n0   1       0\n1   1       1\n']], ['tsql to find status of a database in words'], 2], [(1665005, 1), [['The following sql:'], ['-10000']], [[" SELECT sus.status,\n       sus.stat,\n       CASE WHEN PATINDEX('%8', sus.stat) > 0 THEN 1 ELSE NULL END 'trunc. log on chkpt; set with sp_dboption.',\n       CASE WHEN PATINDEX('%1%', sus.stat) = 9 THEN 1 ELSE NULL END 'torn page detection, set with sp_dboption.',\n       CASE WHEN PATINDEX('%1%', sus.stat) = 8 THEN 1 ELSE NULL END 'loading.',\n       CASE WHEN PATINDEX('%1%', sus.stat) = 7 THEN 1 ELSE NULL END 'pre recovery.'\n  FROM (SELECT t.status,\n               sp_hexadecimal(CONVERT(varbinary(8), t.status)) 'stat'\n          FROM SYSDATABASES t) sus\n"]], ['tsql to find status of a database in words'], 2], [(1665544, 0), [["This seems to work (note that my dates are in US format, since that's where I am :-) ):"], ['Results:']], [[" create table times\n   (\n   Id             integer,\n   stDate         datetime,\n   InTime         datetime,\n   OutTime        datetime,\n   Holiday        varchar(3)\n   )\ngo\n\ninsert into times values (001, '02-23-2009', '08:00:00', '17:00:00', 'no')\ninsert into times values (001, '02-24-2009', '17:00:00', '08:00:00', 'no')\ninsert into times values (001, '02-25-2009', '10:00:00', '16:00:00', 'no')\ninsert into times values (001, '02-26-2009', '21:00:00', '20:00:00', 'no')\ninsert into times values (001, '02-27-2009', null, null, 'yes')\ngo\n\nselect * from times\ngo\n\nselect\n   t.Id,\n   stDate,\n   InTime,\n   OutTime,\n   case\n      when Holiday = 'no' then stDate\n      else null\n   end       DateIn,\n   case\n      when InTime > OutTime and Holiday = 'no' then stDate + 1\n      when InTime < OutTime and Holiday = 'no' then stDate\n      else null\n   end       DateOut\nfrom\n   times t\n"]], ['How to generate a date for the given time?'], 2], [(1665544, 1), [['Results:'], ['-10000']], [[' Id         stDate                  InTime                  OutTime                 DateIn                  DateOut                 \n---------- ----------------------- ----------------------- ----------------------- ----------------------- ----------------------- \n1          2009-02-23 00:00:00.000 1900-01-01 08:00:00.000 1900-01-01 17:00:00.000 2009-02-23 00:00:00.000 2009-02-23 00:00:00.000 \n1          2009-02-24 00:00:00.000 1900-01-01 17:00:00.000 1900-01-01 08:00:00.000 2009-02-24 00:00:00.000 2009-02-25 00:00:00.000 \n1          2009-02-25 00:00:00.000 1900-01-01 10:00:00.000 1900-01-01 16:00:00.000 2009-02-25 00:00:00.000 2009-02-25 00:00:00.000 \n1          2009-02-26 00:00:00.000 1900-01-01 21:00:00.000 1900-01-01 20:00:00.000 2009-02-26 00:00:00.000 2009-02-27 00:00:00.000 \n1          2009-02-27 00:00:00.000 NULL                    NULL                    NULL                    NULL                    \n\n5 Row(s) affected\n']], ['How to generate a date for the given time?'], 2], [(1666027, 0), [["I'm not sure what you mean, but if you're trying to set a variable, you would do this:"], ['If you still want to create column  Combined_Title  but with values from the two title columns, you would do:']], [[' SELECT\n    @CombinedTitle = CASE\n        WHEN Title IS NOT NULL THEN Title\n        WHEN Local_Title IS NOT NULL THEN Local_Title\n    END\n...\n']], ['How do I convert my CASE WHEN THEN statement?'], 2], [(1666027, 1), [['If you still want to create column  Combined_Title  but with values from the two title columns, you would do:'], ['Also see  documentation on  COALESCE , it even mentions that it is equivalent to a  CASE  statement just like yours (with the addition of  ELSE NULL .)']], [[' SELECT\n    CASE\n        WHEN Title IS NOT NULL THEN Title\n        WHEN Local_Title IS NOT NULL THEN Local_Title\n    END AS Combined_Title\n...\n']], ['How do I convert my CASE WHEN THEN statement?'], 2], [(1666060, 0), [['The code:'], ['This is is with sys.tables but you can do it with only sys.objects, this is a general select to look for parents and schemas:']], [[" SELECT     sys.objects.name AS [trigger], \n           sys.tables.name AS [table], \n           sys.objects.type, \n           sys.schemas.name AS [schema]\nFROM       sys.schemas RIGHT OUTER JOIN\n           sys.tables ON sys.schemas.schema_id = sys.tables.schema_id RIGHT OUTER JOIN\n           sys.objects ON sys.tables.object_id = sys.objects.parent_object_id\nWHERE      sys.objects.type = 'tr'\n"]], ["How to discover trigger's parent schema?"], 2], [(1666060, 1), [['This is is with sys.tables but you can do it with only sys.objects, this is a general select to look for parents and schemas:'], ['-10000']], [[' SELECT     O.name, O.type, S.name AS [schema], \n           OP.name AS parent_name, OP.type AS parent_type, SP.name AS parent_schema  \nFROM       sys.schemas AS SP RIGHT OUTER JOIN\n           sys.objects AS OP ON SP.schema_id = OP.schema_id RIGHT OUTER JOIN\n           sys.objects AS O LEFT OUTER JOIN\n           sys.schemas AS S ON O.schema_id = S.schema_id ON OP.object_id = O.parent_object_id\n']], ["How to discover trigger's parent schema?"], 2], [(1668014, 0), [['Use LEFT combined with CHARINDEX:'], ['Here is some code to verify the SQL above works:']], [[" UPDATE MyTable\nSET MyText = LEFT(MyText, CHARINDEX(';', MyText) - 1)\nWHERE CHARINDEX(';', MyText) > 0\n"]], ['SQL Server replace, remove all after certain character'], 3], [(1668014, 1), [['Here is some code to verify the SQL above works:'], ['I get the following results:']], [[" declare @MyTable table ([id] int primary key clustered, MyText varchar(100))\ninsert into @MyTable ([id], MyText)\nselect 1, 'some text; some more text'\nunion all select 2, 'text again; even more text'\nunion all select 3, 'text without a semicolon'\nunion all select 4, null -- test NULLs\nunion all select 5, '' -- test empty string\nunion all select 6, 'test 3 semicolons; second part; third part;'\nunion all select 7, ';' -- test semicolon by itself    \n\nUPDATE @MyTable\nSET MyText = LEFT(MyText, CHARINDEX(';', MyText) - 1)\nWHERE CHARINDEX(';', MyText) > 0\n\nselect * from @MyTable\n"]], ['SQL Server replace, remove all after certain character'], 3], [(1668014, 2), [['I get the following results:'], ['-10000']], [[' id MyText\n-- -------------------------\n1  some text\n2  text again\n3  text without a semicolon\n4  NULL\n5        (empty string)\n6  test 3 semicolons\n7        (empty string)\n']], ['SQL Server replace, remove all after certain character'], 3], [(1669238, 0), [['The value of  myList  in the sql statement should be a comma separated list of values. You eventually want your query to look like'], ['Have you tried something like this?']], [[" SELECT * FROM table WHERE code not in ('a','b','c','d','e',...lots more)\n"]], ["Groovy FindAll statement for finding values that don't exist"], 2], [(1669238, 1), [['Have you tried something like this?'], ['-10000']], [[' sql.findAll("SELECT * FROM table WHERE code not in (\'" + myList.join("\',\'") + "\')")\n']], ["Groovy FindAll statement for finding values that don't exist"], 2], [(1670028, 0), [['How about'], ['Then apply aggregate functions to this for what you want:']], [["   Select S.user, S.Application,\n        S.DateTime Started, L.DateTime Loaded, X.DateTime Exited,\n        L.DateTime - S.DateTime LoadTime,\n        X.DateTime - L.DateTime RunTime\n  From LogFile S\n      Full Join LogFile L\n          On S.Message = 'Started'\n             And L.Message = 'Loaded'\n             And L.User = S.user\n             And L.Application = S.Application\n             And L.DateTime = (Select Min(DateTime)\n                               From LogFile \n                               Where Message = 'Loaded'\n                                 And application = S.Application\n                                 And user = S.user\n                                 And DateTime > S.DateTime)\n      Full Join LogFile X\n          On L.Message = 'Loaded'\n             And X.Message = 'Exited'\n             And X.User = L.user\n             And X.Application = L.Application\n             And  X.DateTime = (Select Min(DateTime)\n                                From LogFile \n                                Where Message = 'Exited'\n                                  And application = L.Application\n                                  And user = L.user\n                                  And DateTime > L.DateTime)\n"]], ['Set-theory way of determining a time difference between a "group" of records via SQL'], 2], [(1670028, 1), [['Then apply aggregate functions to this for what you want:'], ['-10000']], [["  Select user, Application, \n    Sum(LoadTime) TotLoadTime,\n    Sum(RunTime) TotalRunTime\n From\n      (Select S.user, S.Application,\n        S.DateTime Started, L.DateTime Loaded, X.DateTime Exited,\n        L.DateTime - S.DateTime LoadTime,\n        X.DateTime - L.DateTime RunTime\n       From LogFile S\n          Full Join LogFile L\n             On S.Message = 'Started'\n                And X.Message = 'Loaded'\n                 And L.User = S.user\n                 And L.Application = S.Application\n                 And L.DateTime =\n                        (Select Min(DateTime)\n                         From LogFile \n                         Where Message = 'Loaded'\n                            And application = S.Application\n                            And user = S.user\n                            And DateTime > S.DateTime)\n         Full Join LogFile X\n             On L.Message = 'Loaded'\n               And X.Message = 'Exited'\n               And X.User = L.user\n               And X.Application = L.Application\n               And  X.DateTime =\n                        (Select Min(DateTime)\n                         From LogFile \n                         Where Message = 'Exited'\n                             And application = L.Application\n                             And user = L.user\n                             And DateTime > L.DateTime)) Z\n Group By user, Application\n"]], ['Set-theory way of determining a time difference between a "group" of records via SQL'], 2], [(1670349, 0), [['If you have weights:'], ['Or unweighted:']], [[' SELECT\n    SUM( longitude * weight ) / SUM( weight ) AS Avg_Long,\n    SUM( latitude * weight ) / SUM( weight ) AS Avg_Lat\nFROM\n    points\n']], ['MySQL query for geographic midpoint'], 2], [(1670349, 1), [['Or unweighted:'], ["Your reference alludes to baseline adjustments, but I'm not sure that's needed."]], [[' SELECT\n    AVG( longitude ) AS Avg_Long,\n    AVG( latitude ) AS Avg_Lat\nFROM\n    points\n']], ['MySQL query for geographic midpoint'], 2], [(1671040, 0), [['You can chain REPLACE functions:'], ['You can even use subqueries to replace multiple strings!']], [[" select replace(replace('hello world','world','earth'),'hello','hi')\n"]], ['Can MySQL replace multiple characters?'], 3], [(1671040, 1), [['You can even use subqueries to replace multiple strings!'], ['Or use a JOIN to replace them:']], [[" select replace(london_english,'hello','hi') as warwickshire_english\nfrom (\n    select replace('hello world','world','earth') as london_english\n) sub\n"]], ['Can MySQL replace multiple characters?'], 3], [(1671040, 2), [['Or use a JOIN to replace them:'], ["I'll leave translation using common table expressions as an exercise for the reader ;)"]], [[" select group_concat(newword separator ' ')\nfrom (\n    select 'hello' as oldword\n    union all\n    select 'world'\n) orig\ninner join (\n    select 'hello' as oldword, 'hi' as newword\n    union all\n    select 'world', 'earth'\n) trans on orig.oldword = trans.oldword\n"]], ['Can MySQL replace multiple characters?'], 3], [(1671968, 0), [['The  where  clause goes before the  having  and the  group by . If you want to filter out records before the grouping the condition goes in the  where  clause, and if you want to filter out grouped records the condition goes in the  having  clause:'], ['If neither of those are possible to use for some odd reason, you have to make the query a subquery so that you can put the  where  clause in the outer query:']], [[' select ...\nfrom ...\nwhere ...\ngroup by ...\nhaving ...\n']], ["It's possible to have a WHERE clause after a HAVING clause?"], 2], [(1671968, 1), [['If neither of those are possible to use for some odd reason, you have to make the query a subquery so that you can put the  where  clause in the outer query:'], ['-10000']], [[' select ...\nfrom (\n   select ...\n   from ...\n   where ...\n   group by ...\n   having ...\n) x\nwhere ...\n']], ["It's possible to have a WHERE clause after a HAVING clause?"], 2], [(1673235, 0), [['Try to tell SQL Server to use the index:'], ['Make sure the statistics for the table are up to date:']], [[' ...\nFROM [fctWMAUA] (NOLOCK, INDEX(IX)) AS [t0]\n...\n']], ['how to structure an index for group by in Sql Server'], 4], [(1673235, 1), [['Make sure the statistics for the table are up to date:'], ['For better answers, turn on the showplan for both queries:']], [[' UPDATE STATISTICS [fctWMAUA]\n']], ['how to structure an index for group by in Sql Server'], 4], [(1673235, 2), [['For better answers, turn on the showplan for both queries:'], ['You can also write the query without a GROUP BY.  For example, you can use an exclusive LEFT JOIN excluding rows with older dates:']], [[' SET SHOWPLAN_TEXT ON\n']], ['how to structure an index for group by in Sql Server'], 4], [(1673235, 3), [['You can also write the query without a GROUP BY.  For example, you can use an exclusive LEFT JOIN excluding rows with older dates:'], ["This can be surprisingly fast, but I don't think it could beat the UNION."]], [[' select cur.SourceSystemKey, cur.date\nfrom fctWMAUA cur\nleft join fctWMAUA next\n    on next.SourceSystemKey = next.SourceSystemKey\n    and next.date > cur.date\nwhere next.SourceSystemKey is null\nand cur.SourceSystemKey in (1,2,3,4,5,6,7,8,9)\n']], ['how to structure an index for group by in Sql Server'], 4], [(1673727, 0), [['You can use TOP n, but you have to put brackets around it like so:'], ['You can also parameterise it as follows:']], [[' SELECT TOP (100) * FROM ...\n']], ['Limit rows returned using TableAdapter (typed DataSets)'], 2], [(1673727, 1), [['You can also parameterise it as follows:'], ['-10000']], [[' DECLARE @count INT\nSET @count = 100\nSELECT TOP (@count) * FROM field_company\n']], ['Limit rows returned using TableAdapter (typed DataSets)'], 2], [(1673803, 0), [['I have tried using the @attach_query_result_as_file option but there is no way to have that query written as binary that I can get to work. So the next option would be to use bcp to a temp file and then attach the file.'], ['The bcpFormat.fmt would look like this:']], [[' DECLARE @sql VARCHAR(1000)\n\nSET @sql = \'BCP "SELECT ImageColumn FROM YourTable where id = 1 " QUERYOUT C:\\TEMP\\MyLogo.gif -T -fC:\\TEMP\\bcpFormat.fmt -S \' + @@SERVERNAME\nEXEC master.dbo.xp_CmdShell @sql\n\nexec msdb.dbo.sp_send_dbmail\n@profile_name = \'MyProfile\',\n@recipients = \'bob@hotmail.com\',\n@subject = \'test as image\',\n@body=N\'<p>Image Test</p><img src="MyLogo.gif" /><p>See image there?</p>\', \n@file_attachments = \'C:\\TEMP\\MyLogo.gif\',\n@body_format = \'HTML\';\n']], ['How to save an image from SQL Server to a file using SQL'], 2], [(1673803, 1), [['The bcpFormat.fmt would look like this:'], ['That will attach the image from your database to the email as a file. It still won\'t show it "inline" as that would take some more work to mime encode the image into the body of the email and reference it from your html. You would also need to generate some unique names for your files and cleanup so that multiple processes won\'t step on each other.']], [[' 8.0\n1\n1 SQLIMAGE 0 0 "" 1 Image ""\n']], ['How to save an image from SQL Server to a file using SQL'], 2], [(1673916, 0), [["Oh, your description of what's in the tables seems incompletet, so excuse me if I just invent my own tables with the data you would have to have to do this. Namely, you had better have:"], ['First query: Look for a direct trip:']], [[' Trip (train_number, departure_station_id, arrival_station_id, departure_time, arrival_time)\n\nStation (station_id, station_name) \n']], ['SQL query for retrieving connecting trains'], 4], [(1673916, 1), [['First query: Look for a direct trip:'], ['If that turns up nothing, try again with one train change:']], [[' select t1.train_number, t1.arrival_time-t1.departure_time as time\nfrom trip t1\nwhere t1.departure_station_id=?station_from\nand t1.arrival_station_id=?station_to\norder by time\n']], ['SQL query for retrieving connecting trains'], 4], [(1673916, 2), [['If that turns up nothing, try again with one train change:'], ['If still nothing, try two train changes:']], [[' select t1.train_number, t2.train_number, t2.arrival_time-t1.departure_time as time\nfrom trip t1\njoin trip t2 on (t2.departure_station_id=t1.arrival_station_id\nand t2.departure_time>t1.arrival_time)\nwhere t1.departure_station_id=?station_from\nand t2.arrival_station_id=?station_to\norder by time\n']], ['SQL query for retrieving connecting trains'], 4], [(1673916, 3), [['If still nothing, try two train changes:'], ['Etc.']], [[' select t1.train_number, t2.train_number, t3.train_number, t3.arrival_time-t1.departure_time as time\nfrom trip t1\njoin trip t2 on (t2.departure_station_id=t1.arrival_station_id\nand t2.departure_time>t1.arrival_time)\njoin trip t3 on (t3.departure_station_id=t2.arrival_station_id\nand t3.departure_time>t2.arrival_time)\nwhere t1.departure_station_id=?station_from\nand t3.arrival_station_id=?station_to\norder by time\n']], ['SQL query for retrieving connecting trains'], 4], [(1675935, 0), [["Call this system procedure with a varchar parameter. (It's actually a LOT messier than this, check the code in the master database if you want to know what it's really doing.)\nThe parameter must be a chunk of dynamic code -- for example,"], ['Within the dynamic code, as databases are iterated over all instances of the question mark ? will be replaced with the name of the currently being processed database. You can use this to filter which databases are to be processed, and which aren\'t. Note also that the "current" database will  not  be changed by the routine, you have to do that yourself. This gives us code like:']], [[" DECLARE @DemoParameter varchar(1000)\nSET @DemoParameter = 'SELECT MyCol from MyTable where CreatedOn between ''Jan 1, 1980'' and ''Dec 21, 2012'''\nEXECUTE sp_msForEachDb @DemoParameter\n"]], ['Most efficient way to query multiple identical tables in separate databases'], 4], [(1675935, 1), [['Within the dynamic code, as databases are iterated over all instances of the question mark ? will be replaced with the name of the currently being processed database. You can use this to filter which databases are to be processed, and which aren\'t. Note also that the "current" database will  not  be changed by the routine, you have to do that yourself. This gives us code like:'], ['Create (or clear) the temp table:']], [[" SET @DemoParameter = '\n\nIF ''?'' like  ''%Foo%''\n BEGIN\n    USE ?\n    SELECT MyCol from MyTable where CreatedOn between ''Jan 1, 1980'' and ''Dec 21, 2012''\n\n'\n"]], ['Most efficient way to query multiple identical tables in separate databases'], 4], [(1675935, 2), [['Create (or clear) the temp table:'], ['Run the code (this is my main template, you can easily work @DemoParameter back in there):']], [[" IF object_id('tempdb.dbo.##Foo') is null\n    CREATE TABLE ##Foo\n     (\n       ServerName         varchar(100)  not null\n      ,DBName             varchar(100)  not null\n\n      --  Add your own columns here\n      ,MyCol              int  not null\n     )\n\nELSE\n    --Option: Delete this line to not clear on each run\n    TRUNCATE TABLE ##Foo\n"]], ['Most efficient way to query multiple identical tables in separate databases'], 4], [(1675935, 3), [['Run the code (this is my main template, you can easily work @DemoParameter back in there):'], ['...and that should produce a single temp table with your data.  Test this out, I wrote this without actually testing the code, and typso will \nsilp in. (#temp tables should work as well as ##temp, I generally do this with ad-hoc system support issues)']], [[" EXECUTE sp_msForEachDB '\nIF ''?'' like  ''%Foo%''\n BEGIN\n    USE ?\n\n    INSERT ##Foo\n     select @@servername, db_name()\n       ,MyCol\n      from MyTable\n END\n'\n"]], ['Most efficient way to query multiple identical tables in separate databases'], 4], [(1676551, 0), [['You could also try using'], ['Per a comment below:']], [[' SELECT EXISTS(SELECT * FROM table1 WHERE ...)\n']], ['Best way to test if a row exists in a MySQL table'], 2], [(1676551, 1), [['Per a comment below:'], ['-10000']], [[' SELECT EXISTS(SELECT 1 FROM table1 WHERE ...)\n']], ['Best way to test if a row exists in a MySQL table'], 2], [(1680073, 0), [['Assuming by encoding you mean collation, you can change the default for new databases like:'], ['The change the collation of an existing database:']], [[' alter database model collate SQL_Latin1_General_CP1_CI_AS\n']], ['How do I set database default Encoding?'], 3], [(1680073, 1), [['The change the collation of an existing database:'], ['The list of available collations is returned by a system function:']], [[' alter database YourDbName collate SQL_Latin1_General_CP1_CI_AS\n']], ['How do I set database default Encoding?'], 3], [(1680073, 2), [['The list of available collations is returned by a system function:'], ['-10000']], [[' select * from fn_helpcollations()\n']], ['How do I set database default Encoding?'], 3], [(1680745, 0), [['-10000'], ['From your explanation:']], [[' SELECT  Name\nFROM    (\n        SELECT  Name, ROW_NUMBER() OVER (ORDER BY id) AS rn\n        FROM    Customers\n        ) q\nWHERE   rn > 1\nORDER BY\n        id\n']], ['How to display all but first table row?'], 2], [(1680745, 1), [['From your explanation:'], ['-10000']], [[" SELECT  Suit.*,\n        FirstPlantiff.*,\n        (\n        SELECT  cp.Name AS [text()]\n        FROM    Plantiff cp\n        WHERE   cp.id <> FirstPlantiff.id\n                AND cp.SuitID = Suid.ID\n        ORDER BY\n                cp.id\n        FOR XML PATH('')\n        ) AS Coplantiffs\nFROM    Suit\nCROSS APPLY\n        (\n        SELECT  TOP 1 *\n        FROM    Plantiff p\n        WHERE   p.SuitID = Suit.ID\n        ORDER BY\n                p.id\n        ) FirstPlantiff\n"]], ['How to display all but first table row?'], 2], [(1681957, 0), [['-10000'], ['Try this:']], [[" SELECT  resourceID\nFROM    mytable\nWHERE   startDate BETWEEN '2009-01-01' AND '2009-01-20'\n        AND DATEDIFF(day, CASE WHEN endDate < '2009-01-20' THEN endDate ELSE '2009-01-20' END, startDate) >= 5\nUNION\nSELECT  resourceID\nFROM    mytable\nWHERE   endDate BETWEEN '2009-01-01' AND '2009-01-20'\n        AND DATEDIFF(day, endDate, CASE WHEN startDate > '2009-01-01' THEN startDate ELSE '2009-01-01' END) >= 5\n"]], ['SQL get IDs that are available in the given time interval for X consecutive days'], 2], [(1681957, 1), [['Try this:'], ['Update 2:']], [[" WITH    rows AS\n        (\n        SELECT  ResourceID, StartDate, EndDate, ROW_NUMBER() OVER (PARTITION BY ResourceID ORDER BY EndDate) AS rn\n        FROM    mytable\n        WHERE   StartDate BETWEEN '2009-01-01' AND '2009-01-20'\n                AND EndDate BETWEEN '2009-01-01' AND '2009-01-20'\n        )\nSELECT  DISTINCT COALESCE(rs.ResourceID, rp.ResourceID)\nFROM    rows rs\nFULL JOIN\n        rows rp\nON      rs.ResourceID = rp.ResourceID\n        AND rp.rn = rs.rn - 1\nWHERE   DATEDIFF(day, COALESCE(rp.EndDate, '2009-01-01'), COALESCE(rs.StartDate, '2009-01-20')) >= 5\n"]], ['SQL get IDs that are available in the given time interval for X consecutive days'], 2], [(1682240, 0), [['For instance, I just ran this query on a large table:'], ['Then I reran it and in the middle of the query updated the table:']], [[' SELECT  SUM(LEN(name))\nFROM    master WITH (NOLOCK)\nOPTION (MAXDOP 1)\n\n---\n18874367\n']], ['What can happen as a result of using (nolock) on every SELECT in SQL Server?'], 3], [(1682240, 1), [['Then I reran it and in the middle of the query updated the table:'], ['As we can see, this query noticed  577  rows as updated (length  2 ), all other rows as not updated (length  1 ).']], [[" UPDATE  master\nSET     name = 'tt'\nWHERE   id <= 10000\n\nSELECT  SUM(LEN(name))\nFROM    master WITH (NOLOCK)\nOPTION (MAXDOP 1)\n\n---\n18874944\n"]], ['What can happen as a result of using (nolock) on every SELECT in SQL Server?'], 3], [(1682240, 2), [['As we can see, this query noticed  577  rows as updated (length  2 ), all other rows as not updated (length  1 ).'], ['And this query, run right after the previous one finished, sees all updates.']], [[' SELECT  SUM(LEN(name))\nFROM    master WITH (NOLOCK)\nOPTION (MAXDOP 1)\n\n---\n18884367\n']], ['What can happen as a result of using (nolock) on every SELECT in SQL Server?'], 3], [(1682339, 0), [['Use SQL trace to see what the execution plans are in each case.  One possibility that springs to mind (from experience): is the package binding the wrong type of values to the query?  It could be that in SQL Plus you are running:'], ['but in PL/SQL you are running:']], [[" select * from mytable where id = '1234';\n"]], ['Why is PLSQL slower than SQL*Plus'], 2], [(1682339, 1), [['but in PL/SQL you are running:'], ['with p_id being defined as a number.  That will force a TO_NUMBER on the ID column and prevent Oracle using the index.']], [[' select * from mytable where id = p_id;\n']], ['Why is PLSQL slower than SQL*Plus'], 2], [(1683017, 0), [['First get the highest ratings'], ['Now, from that, get the cheapest price']], [[' SELECT * FROM Films \nINNER JOIN \n(SELECT Max(Rating) as Rating, Category\n  FROM Films AS FM1 INNER JOIN Category AS C1 ON C1.CategoryId = FM1.CategoryId\n  GROUP BY Category\n) x on Films.Rating = x.Rating and Films.Category = x.Category\n']], ['Does the following query correct the problem?'], 2], [(1683017, 1), [['Now, from that, get the cheapest price'], ['-10000']], [['   SELECT * FROM Films INNER JOIN\n    (SELECT Min(DVDPrice), x.Rating, Category FROM \n      (SELECT * FROM Films INNER JOIN \n        (SELECT MAX(Rating) as Rating, Category\n          FROM Films AS FM1 INNER JOIN Category AS C1 ON C1.CategoryId = FM1.CategoryId\n          GROUP BY Category\n        ) x on Films.Rating = x.Rating and Films.Category = x.Category\n      )\n      WHERE DVDPrice IS NOT NULL\n      GROUP BY Category, DVDPrice\n    ) y on Films.Rating = y.Rating and Films.Category = y.Category and Films.DVDRating = y.DVDRating\n']], ['Does the following query correct the problem?'], 2], [(1683825, 0), [['It sounds like MongoDB would be a very good fit.  Updates and inserts are super fast, so you might want to create a document for every event, such as:'], ['retrieve all the data for object XYZ\n  between time t1 and time t2']], [[' {\n   object: XYZ,\n   ts : new Date()\n}\n']], ['key-value store for time series data?'], 4], [(1683825, 1), [['retrieve all the data for object XYZ\n  between time t1 and time t2'], ['do the above, but return one date\n  point per day (first, last, closed to\n  time t...)']], [[' db.data.find({object : XYZ, ts : {$gt : t1, $lt : t2}})\n']], ['key-value store for time series data?'], 4], [(1683825, 2), [['do the above, but return one date\n  point per day (first, last, closed to\n  time t...)'], ['retrieve all data for all objects for\n  a particular timestamp']], [[' // first\ndb.data.find({object : XYZ, ts : {$gt : new Date(/* start of day */)}}).sort({ts : 1}).limit(1)\n// last\ndb.data.find({object : XYZ, ts : {$lt : new Date(/* end of day */)}}).sort({ts : -1}).limit(1)\n']], ['key-value store for time series data?'], 4], [(1683825, 3), [['retrieve all data for all objects for\n  a particular timestamp'], ['Feel free to ask on the  user list  if you have any questions, someone else might be able to think of an easier way of getting closest-to-a-time events.']], [[' db.data.find({ts : timestamp})\n']], ['key-value store for time series data?'], 4], [(1684244, 0), [['If you don\'t want to change your data model, you can use  DISTINCT ON  to fetch the newest record from table "b" for each entry in "a":'], ['If you want to avoid a "sort" in the query, adding an index like this  might  help you, but I am not sure:']], [[' SELECT DISTINCT ON (a.id) *\nFROM a\nINNER JOIN b ON a.id=b.id\nORDER BY a.id, b.date DESC\n']], ['Efficient latest record query with Postgresql'], 3], [(1684244, 1), [['If you want to avoid a "sort" in the query, adding an index like this  might  help you, but I am not sure:'], ['Alternatively, if you want to sort records from table "a" some way:']], [[' CREATE INDEX b_id_date ON b (id, date DESC)\n\nSELECT DISTINCT ON (b.id) *\nFROM a\nINNER JOIN b ON a.id=b.id\nORDER BY b.id, b.date DESC\n']], ['Efficient latest record query with Postgresql'], 3], [(1684244, 2), [['Alternatively, if you want to sort records from table "a" some way:'], ['-10000']], [[' SELECT DISTINCT ON (sort_column, a.id) *\nFROM a\nINNER JOIN b ON a.id=b.id\nORDER BY sort_column, a.id, b.date DESC\n']], ['Efficient latest record query with Postgresql'], 3], [(1684291, 0), [['That will select (by a regex) every book which has a title starting with a number, is that what you want?'], ['if you want integers which start with specific digits, you could use:']], [[" SELECT * FROM books WHERE title ~ '^[0-9]'\n"]], ['SQL LIKE condition to check for integer?'], 3], [(1684291, 1), [['if you want integers which start with specific digits, you could use:'], ['or use (if all your numbers have the same number of digits (a constraint would be useful then))']], [[" SELECT * FROM books WHERE CAST(price AS TEXT) LIKE '123%'\n"]], ['SQL LIKE condition to check for integer?'], 3], [(1684291, 2), [['or use (if all your numbers have the same number of digits (a constraint would be useful then))'], ['-10000']], [[' SELECT * FROM books WHERE price BETWEEN 123000 AND 123999;\n']], ['SQL LIKE condition to check for integer?'], 3], [(1685637, 0), [['You can remove the index using the database-migration plugin (liquibase).  It requires that you know the index name, but that name should be in one of your previous migrations.'], ['Create a new migration to remove the index.']], [[' // older index added in a previous release  \nchangeSet(author: "frank", id: "1354228052849-1") {\n    createIndex(indexName: "FKAC7AAF67162A158F", tableName: "answer_option") {\n        column(name: "question_id")\n    }\n}\n']], ['How to delete an index in Grails with Liquibase'], 2], [(1685637, 1), [['Create a new migration to remove the index.'], ['-10000']], [[' changeSet(author: "joe@example.com", id: "1381257863746-1") {\n    dropIndex(indexName: "FKAC7AAF67162A158F", tableName: "answer_option")\n}\n']], ['How to delete an index in Grails with Liquibase'], 2], [(1687307, 0), [['To use it for your primary keys, run the CREATE FUNCTION call from the wiki page, and then on your  empty  tables do:'], ['And voila!']], [[" ALTER TABLE foo ALTER COLUMN foo_id SET DEFAULT pseudo_encrypt(nextval('foo_foo_id_seq')::int);\n"]], ['Replacing sequence with random number'], 2], [(1687307, 1), [['And voila!'], ['-10000']], [[' pg=> insert into foo (foo_id) values(default);\npg=> insert into foo (foo_id) values(default);\npg=> insert into foo (foo_id) values(default);\npg=> select * from foo;\n  foo_id   \n------------\n 1241588087\n 1500453386\n 1755259484\n(4 rows)\n']], ['Replacing sequence with random number'], 2], [(1687512, 0), [['Set-based:'], ['Procedural (extreme example, pseudo-code):']], [[" UPDATE employees SET salary = salary * 1.10 WHERE department = 'X';\n"]], ['RBAR vs. Set based programming for SQL'], 2], [(1687512, 1), [['Procedural (extreme example, pseudo-code):'], ['In the procedural version, only one employee row is being updated at a time; in the set-based version, all rows in the "set of employees in department X" are updated at once (as far as we are concerned).']], [[" OPEN cursor FOR SELECT * FROM employees;\nLOOP\n   FETCH cursor INTO record;\n   EXIT WHEN (no more records to fetch);\n   IF record.department = 'X' THEN\n      UPDATE employees\n      SET    salary = salary * 1.10\n      WHERE  employee_id = record.employee_id;\n   END IF\nEND LOOP\nCLOSE cursor;\n"]], ['RBAR vs. Set based programming for SQL'], 2], [(1688618, 0), [['Here are the results (SQL Server 2008, build 10.0.1600.2):'], ['Here is the script:']], [[' duplicates (short table)    \n  try/catch:                14440 milliseconds / 100000 inserts\n  conditional insert:        2983 milliseconds / 100000 inserts\n  except:                    2966 milliseconds / 100000 inserts\n  merge:                     2983 milliseconds / 100000 inserts\n\nuniques\n  try/catch:                 3920 milliseconds / 100000 inserts\n  conditional insert:        3860 milliseconds / 100000 inserts\n  except:                    3873 milliseconds / 100000 inserts\n  merge:                     3890 milliseconds / 100000 inserts\n\n  straight insert:           3173 milliseconds / 100000 inserts\n\nduplicates (tall table)\n  try/catch:                14436 milliseconds / 100000 inserts\n  conditional insert:        3063 milliseconds / 100000 inserts\n  except:                    3063 milliseconds / 100000 inserts\n  merge:                     3030 milliseconds / 100000 inserts\n']], ['SQL INSERT but avoid duplicates'], 2], [(1688618, 1), [['Here is the script:'], ['-10000']], [[" -- tested on SQL 2008.\n-- to run on SQL 2005, comment out the statements using MERGE\nset nocount on\n\nif object_id('tempdb..#temp') is not null drop table #temp\ncreate table #temp (col1 int primary key)\ngo\n\n-------------------------------------------------------\n\n-- duplicate insert test against a table w/ 1 record\n\n-------------------------------------------------------\n\ninsert #temp values (1)\ngo\n\ndeclare @x int, @y int, @now datetime, @duration int\nselect @x = 1, @y = 0, @now = getdate()\nwhile @y < 100000 begin\n  set @y = @y+1\n  begin try \n    insert #temp select @x\n  end try\n  begin catch end catch\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('duplicates (short table), try/catch: %i milliseconds / %i inserts',-1,-1,@duration,@y) with nowait\ngo\n\ndeclare @x int, @y int, @now datetime, @duration int\nselect @x = 1, @y = 0, @now = getdate()\nwhile @y < 100000 begin\n  set @y = @y+1\n  insert #temp select @x where not exists (select * from #temp where col1 = @x)\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('duplicates (short table), conditional insert: %i milliseconds / %i inserts',-1,-1,@duration, @y) with nowait\ngo\n\ndeclare @x int, @y int, @now datetime, @duration int\nselect @x = 1, @y = 0, @now = getdate()\nwhile @y < 100000 begin\n  set @y = @y+1\n  insert #temp select @x except select col1 from #temp\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('duplicates (short table), except: %i milliseconds / %i inserts',-1,-1,@duration, @y) with nowait\ngo\n\n-- comment this batch out for SQL 2005\ndeclare @x int, @y int, @now datetime, @duration int\nselect @x = 1, @y = 0, @now = getdate()\nwhile @y < 100000 begin\n  set @y = @y+1\n  merge #temp t using (select @x) s (col1) on t.col1 = s.col1 when not matched by target then insert values (col1);\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('duplicates (short table), merge: %i milliseconds / %i inserts',-1,-1,@duration, @y) with nowait\ngo\n\n-------------------------------------------------------\n\n-- unique insert test against an initially empty table\n\n-------------------------------------------------------\n\ntruncate table #temp\ndeclare @x int, @now datetime, @duration int\nselect @x = 0, @now = getdate()\nwhile @x < 100000 begin\n  set @x = @x+1\n  insert #temp select @x\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('uniques, straight insert: %i milliseconds / %i inserts',-1,-1,@duration, @x) with nowait\ngo\n\ntruncate table #temp\ndeclare @x int, @now datetime, @duration int\nselect @x = 0, @now = getdate()\nwhile @x < 100000 begin\n  set @x = @x+1\n  begin try \n    insert #temp select @x\n  end try\n  begin catch end catch\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('uniques, try/catch: %i milliseconds / %i inserts',-1,-1,@duration, @x) with nowait\ngo\n\ntruncate table #temp\ndeclare @x int, @now datetime, @duration int\nselect @x = 0, @now = getdate()\nwhile @x < 100000 begin\n  set @x = @x+1\n  insert #temp select @x where not exists (select * from #temp where col1 = @x)\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('uniques, conditional insert: %i milliseconds / %i inserts',-1,-1,@duration, @x) with nowait\ngo\n\ntruncate table #temp\ndeclare @x int, @now datetime, @duration int\nselect @x = 0, @now = getdate()\nwhile @x < 100000 begin\n  set @x = @x+1\n  insert #temp select @x except select col1 from #temp\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('uniques, except: %i milliseconds / %i inserts',-1,-1,@duration, @x) with nowait\ngo\n\n-- comment this batch out for SQL 2005\ntruncate table #temp\ndeclare @x int, @now datetime, @duration int\nselect @x = 1, @now = getdate()\nwhile @x < 100000 begin\n  set @x = @x+1\n  merge #temp t using (select @x) s (col1) on t.col1 = s.col1 when not matched by target then insert values (col1);\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('uniques, merge: %i milliseconds / %i inserts',-1,-1,@duration, @x) with nowait\ngo\n\n-------------------------------------------------------\n\n-- duplicate insert test against a table w/ 100000 records\n\n-------------------------------------------------------\n\ndeclare @x int, @y int, @now datetime, @duration int\nselect @x = 1, @y = 0, @now = getdate()\nwhile @y < 100000 begin\n  set @y = @y+1\n  begin try \n    insert #temp select @x\n  end try\n  begin catch end catch\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('duplicates (tall table), try/catch: %i milliseconds / %i inserts',-1,-1,@duration,@y) with nowait\ngo\n\ndeclare @x int, @y int, @now datetime, @duration int\nselect @x = 1, @y = 0, @now = getdate()\nwhile @y < 100000 begin\n  set @y = @y+1\n  insert #temp select @x where not exists (select * from #temp where col1 = @x)\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('duplicates (tall table), conditional insert: %i milliseconds / %i inserts',-1,-1,@duration, @y) with nowait\ngo\n\ndeclare @x int, @y int, @now datetime, @duration int\nselect @x = 1, @y = 0, @now = getdate()\nwhile @y < 100000 begin\n  set @y = @y+1\n  insert #temp select @x except select col1 from #temp\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('duplicates (tall table), except: %i milliseconds / %i inserts',-1,-1,@duration, @y) with nowait\ngo\n\n-- comment this batch out for SQL 2005\ndeclare @x int, @y int, @now datetime, @duration int\nselect @x = 1, @y = 0, @now = getdate()\nwhile @y < 100000 begin\n  set @y = @y+1\n  merge #temp t using (select @x) s (col1) on t.col1 = s.col1 when not matched by target then insert values (col1);\nend\nset @duration = datediff(ms,@now,getdate())\nraiserror('duplicates (tall table), merge: %i milliseconds / %i inserts',-1,-1,@duration, @y) with nowait\ngo\n"]], ['SQL INSERT but avoid duplicates'], 2], [(1690266, 0), [['You must have another column that establishes the order of the rows with the same rank, otherwise the concept of "previous row" is meaningless.  Let\'s suppose you do:'], ['No you can use an analytic function:']], [[' seq rank continuationofrow\n1   1    row \n2   2    row \n3   3    row \n4   4    row \n5   4    row  \n6   4    row\n']], ['How do I compare rows in an Oracle Table?'], 2], [(1690266, 1), [['No you can use an analytic function:'], ['-10000']], [[' select seq, rank, continuationofrow, lag(rank) over (order by seq) as prev_rank\nfrom mytable;\n\n\nseq rank continuationofrow prev_rank\n1   1    row  \n2   2    row               1\n3   3    row               2\n4   4    row               3\n5   4    row               4\n6   4    row               4\n']], ['How do I compare rows in an Oracle Table?'], 2], [(1691180, 0), [['You can check if it exists and insert it in one query:'], ["But after that you'll still need to select the userid: "]], [[" insert into users (userName) values ('<some value>')\nwhere not exists (\n    select * from users where userName = '<some value>'\n)\n"]], ["Can I add an entry to mysql and return a column if it's not present in one query?"], 2], [(1691180, 1), [["But after that you'll still need to select the userid: "], ["I don't think an INSERT can be inside a SELECT."]], [[" select userid from users where userName = '<some value>'\n"]], ["Can I add an entry to mysql and return a column if it's not present in one query?"], 2], [(1691451, 0), [['Ok,  I made some tests, here are results. First value is with index on TS column, second value is without index on TS column.'], ['2.1 sec, 2.1 sec']], [[" SELECT * FROM parts WHERE CAST(TS AS DATE) = DATE('2009-10-01');\n"]], ['Which is the best way to check if timestamp/datetime belongs to a specified date'], 5], [(1691451, 1), [['2.1 sec, 2.1 sec'], ['2.1 sec, 2.1 sec']], [[" SELECT * FROM parts WHERE DATE(TS) = DATE('2009-10-01');\n"]], ['Which is the best way to check if timestamp/datetime belongs to a specified date'], 5], [(1691451, 2), [['2.1 sec, 2.1 sec'], ['0.1 sec, 2.15 sec']], [[" SELECT * FROM parts WHERE TS >= DATE('2009-10-01') AND TS < (DATE('2009-10-01') + INTERVAL 1 DAY);\n"]], ['Which is the best way to check if timestamp/datetime belongs to a specified date'], 5], [(1691451, 3), [['0.1 sec, 2.15 sec'], ['As for me, I would choose this solution:']], [[" SELECT * FROM parts WHERE TS >= '2009-10-01' AND TS < '2009-10-01 23:59:59';\n"]], ['Which is the best way to check if timestamp/datetime belongs to a specified date'], 5], [(1691451, 4), [['As for me, I would choose this solution:'], ["I think it's the most elegant."]], [[" SELECT * FROM parts WHERE TS >= DATE('2009-10-01') AND TS < (DATE('2009-10-01') + INTERVAL 1 DAY);\n"]], ['Which is the best way to check if timestamp/datetime belongs to a specified date'], 5], [(1693681, 0), [['For instance:'], ['This query needs to touch 4 tables:']], [[" select pr.* from LocalizedProducts('en-US') pr inner join LocalizedPhotos('en-US') ph on \nph.ProductId=pr.Id where pr.SomeUnindexProperty= 5\n"]], ['Attempt at database localization using table-valued functions'], 3], [(1693681, 1), [['This query needs to touch 4 tables:'], ['The way the query plan looks is that (let me see if I can format this):']], [[' Products\nProducts_Localization\nPhotos\nPhotos_Localization\n']], ['Attempt at database localization using table-valued functions'], 3], [(1693681, 2), [['The way the query plan looks is that (let me see if I can format this):'], ['Which is not what you would expect if the TVF would be a black box. The simple fact that Product gets an index SEEK would suggest to me that the query will not interpret blindly the entire TVF.']], [[' Product gets a Clustered Index Seek \n        -- >>  Products gets nested loop with Photos \n                              -->> nested loop Products_Localization -\n                                          ->> nested loop Photos_Localization. \n']], ['Attempt at database localization using table-valued functions'], 3], [(1694526, 0), [['For SQL 2005/2008, take a look at '], ['Starting with ']], [[' CROSS APPLY\n']], ['SQL return multiple rows from one record'], 3], [(1694526, 1), [['Starting with '], ['You can generate:']], [[' declare @table table (sku int, qty int);\ninsert into @table values (1, 5), (2,4), (3,2);\nselect * from @table;\n\nsku         qty\n----------- -----------\n1           5\n2           4\n3           2\n']], ['SQL return multiple rows from one record'], 3], [(1694526, 2), [['You can generate:'], ["Is that what you want?\nSeriously dude... next time put more effort writing your question. It's impossible to know exactly what you are looking for."]], [[" with MainT as (\n    select *, convert(xml,'<table>'+REPLICATE('<r></r>',qty)+'</table>') as pseudo_table\n    from @table \n)\nselect p.sku, p.qty\nfrom MainT p \nCROSS APPLY \n(\n    select p.sku from p.pseudo_table.nodes('/table/r') T(row)\n) crossT\n\n\nsku         qty\n----------- -----------\n1           5\n1           5\n1           5\n1           5\n1           5\n2           4\n2           4\n2           4\n2           4\n3           2\n3           2\n"]], ['SQL return multiple rows from one record'], 3], [(1694755, 0), [['Example data:'], ['-10000']], [[' LANGUAGE_ID  |  LANGUAGE_DESCRIPTION\n------------------------------------\n1            |  ENGLISH\n2            |  FRENCH\n']], ['SQL Server 2008 localization of tables'], 5], [(1694755, 1), [['-10000'], ['-10000']], [[' TRANSLATED_ATTRIBUTE_ID  |  TRANSLATED_ATTRIBUTE_DESC\n------------------------------------\n1                        |  PROD_ID\n2                        |  PROD_DESC\n']], ['SQL Server 2008 localization of tables'], 5], [(1694755, 2), [['-10000'], ["You'll want a table associating the  TRANSLATED_ATTRIBUTE_ID  with a given item - Product is the example you've given so:"]], [[' LANGUAGE_ID | TRANSLATED_ATTRIBUTE_ID | TRANSLATED_VALUE\n----------------------------------------------------------\n1           |  1                      | Product ID\n2           |  1                      | Produit ID\n']], ['SQL Server 2008 localization of tables'], 5], [(1694755, 3), [["You'll want a table associating the  TRANSLATED_ATTRIBUTE_ID  with a given item - Product is the example you've given so:"], ['If you want to relate on a per product basis:']], [[' ATTRIBUTE_ID  |  ATTRIBUTE_TYPE_CODE  |  TRANSLATED_ATTRIBUTE_ID\n----------------------------------------------------------------\n1             |  PRODUCT              | 1\n']], ['SQL Server 2008 localization of tables'], 5], [(1694755, 4), [['If you want to relate on a per product basis:'], ['You can pivot the data as necessary.']], [[" SELECT t.translated_attribute_desc, \n       t.translated_value\n  FROM LOCALIZATIONS t\n  JOIN TRANSLATED_ATTRIBUTES ta ON ta.translated_attribute_id = t.translated_attribute_id\n  JOIN ATTRIBUTES a ON a.translated_attribute_id = ta.translated_attribute_id\n  JOIN ATTRIBUTE_TYPE_CODES atc ON atc.attribute_type_code = a.attribute_type_code\n  JOIN LANGUAGES lang ON lang.language_id = t.language_id\n WHERE lang.language_description = 'ENGLISH' --alternate: lang.language_id = 1\n   AND atc.attribute_type_code = 'PRODUCT'\n"]], ['SQL Server 2008 localization of tables'], 5], [(1698408, 0), [["Quassnoi's answer shows how to do the SumProduct, and using a WHERE clause would allow you to restrict by a Date field..."], ['Regardless, a slight simplification of your query is certainly possible...']], [[" SELECT\n   SUM([tbl].data * [tbl].weight) / SUM([tbl].weight)\nFROM\n   [tbl]\nWHERE\n   [tbl].date >= '2009 Jan 01'\n   AND [tbl].date < '2010 Jan 01'\n"]], ["Weighted average in T-SQL (like Excel's SUMPRODUCT)"], 4], [(1698408, 1), [['Regardless, a slight simplification of your query is certainly possible...'], ["If you can't guarnatee just One value per date, and don't have any other fields to join on, you can modify your sub_query based version slightly..."]], [[" SELECT\n   SUM([baseSeries].Actual * [weightSeries].Actual) / SUM([weightSeries].Actual)\nFROM\n   CalcProductionRecords AS [baseSeries]\nINNER JOIN\n   CalcProductionRecords AS [weightSeries]\n      ON [weightSeries].RecordDate = [baseSeries].RecordDate\n--    AND [weightSeries].someOtherID = [baseSeries].someOtherID\nWHERE\n   [baseSeries].KPI = 'Tons Milled'\n   AND [weightSeries].KPI = 'Weighty'\n"]], ["Weighted average in T-SQL (like Excel's SUMPRODUCT)"], 4], [(1698408, 2), [["If you can't guarnatee just One value per date, and don't have any other fields to join on, you can modify your sub_query based version slightly..."], ["EDIT :  Someone just voted for this so I thought I'd improve the final answer :)"]], [[" SELECT\n   SUM([baseSeries].Actual * [weightSeries].Actual) / SUM([weightSeries].Actual)\nFROM\n(\n    SELECT\n        RecordDate,\n        SUM(Actual)\n    FROM\n        CalcProductionRecords\n    WHERE\n        KPI = 'Tons Milled'\n    GROUP BY\n        RecordDate\n)\n   AS [baseSeries]\nINNER JOIN\n(\n    SELECT\n        RecordDate,\n        AVG(Actual)\n    FROM\n        CalcProductionRecords\n    WHERE\n        KPI = 'Weighty'\n    GROUP BY\n        RecordDate\n)\n   AS [weightSeries]\n      ON [weightSeries].RecordDate = [baseSeries].RecordDate\n"]], ["Weighted average in T-SQL (like Excel's SUMPRODUCT)"], 4], [(1698408, 3), [["EDIT :  Someone just voted for this so I thought I'd improve the final answer :)"], ['This avoids the JOIN and also only scans the table once.']], [[" SELECT\n   SUM(Actual * Weight) / SUM(Weight)\nFROM\n(\n    SELECT\n        RecordDate,\n        SUM(CASE WHEN KPI = 'Tons Milled' THEN Actual ELSE NULL END)   AS Actual,\n        AVG(CASE WHEN KPI = 'Weighty'     THEN Actual ELSE NULL END)   AS Weight\n    FROM\n        CalcProductionRecords\n    WHERE\n        KPI IN ('Tons Milled', 'Weighty')\n    GROUP BY\n        RecordDate\n)\n   AS pivotAggregate\n"]], ["Weighted average in T-SQL (like Excel's SUMPRODUCT)"], 4], [(1699287, 0), [["Here is one suggested approach. It wasn't clear from the sample you posted, so I am assuming that this is actually what your sample file looks like:"], ["Here is a suggested bash script (not optimal, I'm sure, but functional):"]], [[' UNIX_PID 37165 PARTNER_ID prad XML_FILE /mnt/publish/gbl/backup/pradeep1/27241-20090722/kumarelec2.xml pradeep1 /mnt/soar_publish/gbl/backup/pradeep1/11089-20090723/dataonly.xml\nUNIX_PID 27654 PARTNER_ID swam XML_FILE smariswam2 /mnt/publish/gbl/backup/smariswam2/10235-20090929/swam2.xml\n']], ['Need help in executing the SQL via shell script and use the result set'], 3], [(1699287, 1), [["Here is a suggested bash script (not optimal, I'm sure, but functional):"], ['Things get a little more tricky if the output file contains one row for each data element (as you indicated). A good approach here is to use a simple state mechanism within the script and "remember" whether or not the most recently seen PID is running. If it is, then any data elements that appear before the next PID should be printed out. Here is a commented script to do just that with a file of the format you provided. Note that you must have a line-feed at the end of the last line of input data or the last line will be dropped.']], [[' #! /bin/bash\ncat myOutputData.txt |\nwhile read line;\ndo\n    myPID=`echo $line | awk \'{print $2}\'`\n    isRunning=`ps -p $myPID | grep $myPID` \n    if [ -n "$isRunning" ]\n    then\n        echo "PARTNER_ID `echo $line | awk \'{print $4}\'`"\n        echo "XML_FILE `echo $line | awk \'{print $6}\'`"\n    fi\ndone\n']], ['Need help in executing the SQL via shell script and use the result set'], 3], [(1699287, 2), [['Things get a little more tricky if the output file contains one row for each data element (as you indicated). A good approach here is to use a simple state mechanism within the script and "remember" whether or not the most recently seen PID is running. If it is, then any data elements that appear before the next PID should be printed out. Here is a commented script to do just that with a file of the format you provided. Note that you must have a line-feed at the end of the last line of input data or the last line will be dropped.'], ['I think that we are well into custom software development territory now so I will leave it at that. You should have enough here to customize the script to your liking. Good luck!']], [[' #! /bin/bash\ncat myOutputData.txt |\nwhile read line;\ndo\n    # Extract the first (myKey) and second (myValue) words from the input line\n    myKey=`echo $line | awk \'{print $1}\'`\n    myValue=`echo $line | awk \'{print $2}\'`\n\n    # Take action based on the type of line this is\n    case "$myKey" in\n        "UNIX_PID")\n            # Determine whether the specified PID is running\n            isRunning=`ps -p $myValue | grep $myValue` \n        ;;\n        "PARTNER_ID")\n            # Print the specified partner ID if the PID is running\n            if [ -n "$isRunning" ]\n            then\n                echo "PARTNER_ID $myValue"\n            fi\n        ;;\n        *)\n            # Check to see if this line represents a file name, and print it\n            # if the PID is running\n            inputLineLength=${#line}\n            if (( $inputLineLength > 0 )) && [ "$line" != "XML_FILE" ] && [ -n "$isRunning" ]\n            then\n                isHyphens=`expr "$line" : -`\n                if [ "$isHyphens" -ne "1" ]\n                then\n                     echo "XML_FILE $line"\n                fi\n            fi\n        ;;\n    esac\ndone\n']], ['Need help in executing the SQL via shell script and use the result set'], 3], [(1699305, 0), [['You can try '], ['EDIT for comment:']], [[" SELECT  TOP 100 PERCENT \n        Asset_ID, \n        work_order_id, \n        status_id, \n        downtime_hours \nFROM    dbo.mtvw_wo_reason1 INNER JOIN\n        (\n            SELECT  TOP 5 \n                    Asset_ID \n            from    mtvw_wo_reason1 \n            GROUP   BY Asset_ID, Date_Completed \n            HAVING  Date_Completed BETWEEN '1-Oct-2009' and '31-Oct-2009' \n            ORDER BY    SUM(Downtime_hours) DESC\n        ) sub ON dbo.mtvw_wo_reason1.Asset_ID = sub.Asset_ID\n"]], ['Rewriting correlated subquery as JOIN?'], 2], [(1699305, 1), [['EDIT for comment:'], ['-10000']], [[" SELECT  TOP 100 PERCENT         \n        Asset_ID,         \n        work_order_id,         \n        status_id,         \n        downtime_hours ,\n        sub.Date_Completed --added\nFROM    dbo.mtvw_wo_reason1 INNER JOIN        \n        (                \n            SELECT  TOP 5                                 \n                    Asset_ID,\n                    Date_Completed --added\n            from    mtvw_wo_reason1                 \n            GROUP   BY Asset_ID, Date_Completed                 \n            HAVING  Date_Completed BETWEEN '1-Oct-2009' and '31-Oct-2009'                 \n            ORDER BY SUM(Downtime_hours) DESC        \n        ) sub ON dbo.mtvw_wo_reason1.Asset_ID = sub.Asset_ID\n"]], ['Rewriting correlated subquery as JOIN?'], 2], [(1699574, 0), [['For example, a "FN" data type:'], ['Your load script could then change to:']], [[' FN                ...        inputfile.txt\nDT     12345678XXX...XXXXXYYYYYYYYYYYYYYYY\nDT     12345678XXX...XXXXXYYYYYYYYYYYYYYYY\nDT     12345678XXX...XXXXXYYYYYYYYYYYYYYYY\nDT     12345678XXX...XXXXXYYYYYYYYYYYYYYYY\nDT     12345678XXX...XXXXXYYYYYYYYYYYYYYYY\n']], ['Accessing data filename from within SQL*Loader control file'], 6], [(1699574, 1), [['Your load script could then change to:'], ['For example,']], [[" LOAD DATA\n\nAPPEND\nINTO TABLE STG_AM02_BA_RAW\nWHEN (1:2) = 'FN'\n(\n        INPUTFILE                       POSITION(1:92)CHAR\n)\nWHEN (1:2) = 'DT'\n(\n        SUBSCRIBER_NO                   POSITION(11:18)CHAR, \n        ACCOUNT_NO                      POSITION(19:32)CHAR, \n        SUBSCRIBER_NAME                 POSITION(33:92)CHAR\n)\n"]], ['Accessing data filename from within SQL*Loader control file'], 6], [(1699574, 2), [['For example,'], ['If you need to reference the filename against each data row, you can load the data into multiple staging tables:']], [[' echo "FNinputfile.txt" > header.txt\ncat header.txt inputfile.txt > newinputfile.txt\n']], ['Accessing data filename from within SQL*Loader control file'], 6], [(1699574, 3), [['If you need to reference the filename against each data row, you can load the data into multiple staging tables:'], ['... and join them together using SQL:']], [[" LOAD DATA\nTRUNCATE INTO TABLE STAGE_FILENAME\nWHEN (1:2) = 'FN'\n(\n        INPUTFILE                       POSITION(1:92)CHAR\n)\nTRUNCATE INTO TABLE STAGE_DATA\nWHEN (1:2) = 'DT'\n(\n        SUBSCRIBER_NO                   POSITION(11:18)CHAR, \n        ACCOUNT_NO                      POSITION(19:32)CHAR, \n        SUBSCRIBER_NAME                 POSITION(33:92)CHAR\n)\n"]], ['Accessing data filename from within SQL*Loader control file'], 6], [(1699574, 4), [['... and join them together using SQL:'], ["You said in the comments that you can change the data file - could you get the file changed to that the filename is appended to each record? If so, makes the issue go away. You'd just have to include:"]], [[' insert into STG_AM02_BA_RAW\n    (\n    subscriber_no,\n    account_no,\n    subscriber_name,\n    input_filename\n    )\nselect\n    d.subscriber_no,\n    d.account_no,\n    d.subscriber_name,\n    f.inputfile\nfrom\n    stage_data d,\n    inputfile d\n']], ['Accessing data filename from within SQL*Loader control file'], 6], [(1699574, 5), [["You said in the comments that you can change the data file - could you get the file changed to that the filename is appended to each record? If so, makes the issue go away. You'd just have to include:"], ['-10000']], [['     SUBSCRIBER_NAME                 POSITION(92:*)CHAR\n']], ['Accessing data filename from within SQL*Loader control file'], 6], [(1700110, 0), [['If the  monthly  table contains a single entry for each month, you can do simply this:'], ['otherwise:']], [[' select\n    m.date as m1,\n    m.other_field,\n    min(d.date) as m2,\n    max(d.date) as m3\nfrom monthly m\njoin daily d\n    on month(d.date) = month(m.date)\n    and year(d.date) = year(m.date)\ngroup by m.date, m.other_field\norder by m.date\n']], ['How do I select min/max dates from table 2 based on date in table 1 (without getting too much data from sums)'], 4], [(1700110, 1), [['otherwise:'], ['Thanks for all your help. The following is what worked for me:']], [[' select m1, sum(other_field), m2, m3\nfrom (\n        select\n        m.date as m1,\n        m.other_field,\n        min(d.date) as m2,\n        max(d.date) as m3\n    from monthly m\n    join daily d\n        on month(d.date) = month(m.date)\n        and year(d.date) = year(m.date)\n    group by m.date, m.other_field) A\ngroup by A.m1, A.m2, A.m3\norder by A.m1\n']], ['How do I select min/max dates from table 2 based on date in table 1 (without getting too much data from sums)'], 4], [(1700110, 2), [['Thanks for all your help. The following is what worked for me:'], ['which gave me what I wanted:']], [[' select\n    m.date as p1,\n    m.grouping_field as p2,\n    sum(m.aggregating_field) as p3,\n    (select min(date) from daily\n        where month(date) = month(m.date)\n        and year(date) = year(m.date)) as p4,\n    (select max(date) from daily\n        where month(date) = month(m.date)\n        and year(date) = year(m.date)) as p5\nfrom\n    monthly m\ngroup by\n    m.date, m.grouping_field\n']], ['How do I select min/max dates from table 2 based on date in table 1 (without getting too much data from sums)'], 4], [(1700110, 3), [['which gave me what I wanted:'], ['-10000']], [['     P1       P2    P3       P4         P5\n----------  ----  ----  ----------  ----------\n2007-10-01  BoxA  12.3  2007-10-16  2007-10-30\n2007-10-01  BoxB  13.6  2007-10-16  2007-10-30\n2007-10-01  BoxC   7.4  2007-10-16  2007-10-30\n2007-11-01  BoxA  20.3  2007-11-01  2007-11-30\n2007-11-01  BoxB  24.2  2007-11-01  2007-11-30\n2007-11-01  BoxC  21.7  2007-11-01  2007-11-30\n2007-12-01  BoxA   6.9  2007-12-01  2007-12-15\n2007-12-01  BoxB   6.4  2007-12-01  2007-12-15\n2007-12-01  BoxC   6.9  2007-12-01  2007-12-15\n']], ['How do I select min/max dates from table 2 based on date in table 1 (without getting too much data from sums)'], 4], [(1701035, 0), [['This gives a TIME for 2 rows before and 2 rows after:'], ['You can then use these "time boxes" to select a range in the driving table.']], [[' select\n    l.code,\n    l.reference,\n    l.time,\n    min(l.time) over (\n        order by l.time \n        rows between 2 preceding and current row) \n            preceding_time,\n    max(l.time) over (\n        order by l.time \n        rows beween current row and 2 following) \n            following_time\nfrom\n    log_table l;\n']], ['Selecting surrounding rows in Oracle SQL'], 2], [(1701035, 1), [['You can then use these "time boxes" to select a range in the driving table.'], ["Is that close to what you're after?"]], [[" with timebox as\n    (\n    select\n        l.code,\n        l.reference,\n        l.time,\n        min(l.time) over (\n            order by l.time \n            rows between 2 preceding and current row) \n                preceding_time,\n        max(l.time) over (\n            order by l.time \n            rows beween current row and 2 following) \n                following_time\n    from\n        log_table l\n    )\nselect\n    *\nfrom\n    log_table a\nwhere\n    exists\n        (\n        select 1 from\n            timebox t\n        where\n            t.reference = 'MYREF1'\n        and a.time between t.preceding_time and t.following_time\n        );\n"]], ['Selecting surrounding rows in Oracle SQL'], 2], [(1701342, 0), [['In  Oracle ,  SQL Server  and  PostreSQL 8.4 :'], ['In  MySQL :']], [[' SELECT  ROW_NUMBER() OVER (ORDER BY name)\nFROM    users\nWHERE   deleted = 0\n']], ['Running numbers in SQL'], 3], [(1701342, 1), [['In  MySQL :'], ['In  PostgreSQL 8.3 :']], [[' SELECT  @r := @r + 1 AS rn\nFROM    (\n        SELECT  @r := 0\n        ) vars, users\nWHERE   deleted = 0\nORDER BY\n        name\n']], ['Running numbers in SQL'], 3], [(1701342, 2), [['In  PostgreSQL 8.3 :'], ['-10000']], [[' SELECT  num, (arr[num]).*\nFROM    (\n        SELECT  generate_series(1, array_upper(arr, 1)) AS num, arr\n        FROM    (\n                SELECT  ARRAY\n                        (\n                        SELECT  users\n                        FROM    users\n                        ORDER BY\n                                name\n                        ) AS arr\n                ) q\n        ) q2\n']], ['Running numbers in SQL'], 3], [(1701654, 0), [['This works just fine:'], ["It's also easy to test your constraints. Just create these two additional dummy tables:"]], [[' CREATE TABLE Applications OF ApplicationType (\n  person SCOPE IS People,\n  competition SCOPE IS Competitions\n)\nOBJECT IDENTIFIER IS SYSTEM GENERATED;\n']], ['Type reference scope'], 3], [(1701654, 1), [["It's also easy to test your constraints. Just create these two additional dummy tables:"], ['Then:']], [[' CREATE TABLE People2 OF PersonType\nOBJECT IDENTIFIER IS SYSTEM GENERATED;\n\nCREATE TABLE Competitions2 OF CompetitionType\nOBJECT IDENTIFIER IS SYSTEM GENERATED;\n']], ['Type reference scope'], 3], [(1701654, 2), [['Then:'], ['results in an ORA-22889 since the refered value is not in the specified scoped table(which is Competitions, not the dummy Competitions2).\nYou can test similarly using People2 instead of People.']], [[" INSERT INTO People VALUES('p1');\nINSERT INTO People2 VALUES('p21');\nINSERT INTO Competitions VALUES('c1');\nINSERT INTO Competitions2 VALUES('c21');\nCOMMIT;\nINSERT INTO Applications\nVALUES\n(\n   (SELECT REF(p) FROM People p WHERE person = 'p1'),\n   (SELECT REF(c) FROM Competitions2 c WHERE competition = 'c21'),\n   SYSDATE\n);\n"]], ['Type reference scope'], 3], [(1702191, 0), [["The  NOT NULL  column condition is not like other constraints: you can disable a NOT NULL constraint but the column won't be considered  NOT NULL  if you reenable the constraint with NOVALIDATE. Let's build a small example:"], ["now if I disable the constraint and reenable it with NOVALIDATE, the column won't be considered NOT NULLABLE by Oracle:"]], [[" SQL> CREATE TABLE tt (ID NUMBER NOT NULL);\n\nTable created\n\nSQL> SELECT column_name, nullable FROM user_tab_columns WHERE table_name = 'TT';\n\nCOLUMN_NAME                    NULLABLE\n------------------------------ --------\nID                             N\n"]], ['How can I store NULLs in NOT NULL field?'], 2], [(1702191, 1), [["now if I disable the constraint and reenable it with NOVALIDATE, the column won't be considered NOT NULLABLE by Oracle:"], ['So, I would say that if you have NULL values in a NOT NULLABLE column (as per my last query) you have a bug (contact support?)']], [[' SQL> SELECT constraint_name, search_condition\n  2    FROM user_constraints WHERE table_name = \'TT\';\n\nCONSTRAINT_NAME                SEARCH_CONDITION\n------------------------------ ----------------------------\nSYS_C00786538                  "ID" IS NOT NULL\n\nSQL> ALTER TABLE tt MODIFY CONSTRAINT SYS_C00786538 DISABLE;\n\nTable altered\n\nSQL> ALTER TABLE tt MODIFY CONSTRAINT SYS_C00786538 ENABLE NOVALIDATE;\n\nTable altered\n\nSQL> SELECT column_name, nullable FROM user_tab_columns WHERE table_name = \'TT\';\n\nCOLUMN_NAME                    NULLABLE\n------------------------------ --------\nID                             Y\n']], ['How can I store NULLs in NOT NULL field?'], 2], [(1702388, 0), [['Sample table:'], ['Your sort order will stay the same. All you gain is an additional  where  clause']], [[' ID | Name | Description | Locale\n--------------------------------\n1    Me     This is me    en\n2    Ich    Das bin ich   de\n3    You    This is you   en\n4    Du     Das bist du   de\n....\n']], ['Localizing data in SQL Server 2008 tables and sorting'], 2], [(1702388, 1), [['Your sort order will stay the same. All you gain is an additional  where  clause'], ["To make things even better I'd normalize these tables by creating a Lookup table with Culture locale abreviations that other tables (like this one I created) would use by foreign keys."]], [[" select ID,\n       [Name],\n       Description\nfrom SampleTable\nwhere Locale = 'en'\norder by [Name]\n"]], ['Localizing data in SQL Server 2008 tables and sorting'], 2], [(1702832, 0), [['SESS1:'], ['SESS1:']], [[' create table t1 (pk int primary key, i int);\ncreate table t11 (pk int primary key, i int);\ninsert into t1 values(1, 1);\ninsert into t11 values(2, 21);\ninsert into t11 values(3, 31);\ncommit;\n']], ['insert if not exists oracle'], 2], [(1702832, 1), [['SESS1:'], ['SESS2:  commit;']], [[' MERGE INTO t1 d\nUSING t11 s ON (d.pk = s.pk)\nWHEN NOT MATCHED THEN INSERT (d.pk, d.i) VALUES (s.pk, s.i);\n']], ['insert if not exists oracle'], 2], [(1703495, 0), [['You may create a derived table which contains only the most recent "updates" records per document_id, and then join "documents" against that:'], ['This will handle "un-updated" documents, like so:']], [[' SELECT d.id, d.title, u.update_id, u."date"\nFROM documents d\nLEFT JOIN\n-- JOIN "documents" against the most recent update per document_id\n(\nSELECT recent.document_id, id AS update_id, recent."date"\nFROM updates\nINNER JOIN\n(SELECT document_id, MAX("date") AS "date" FROM updates GROUP BY 1) recent\nON updates.document_id = recent.document_id\nWHERE\n  updates."date" = recent."date"\n) u\nON d.id = u.document_id;\n']], ['PostgreSQL , Select from 2 tables, but only the latest element from table 2'], 2], [(1703495, 1), [['This will handle "un-updated" documents, like so:'], ['-10000']], [[' pg=> select * from documents;\n id | title \n----+-------\n  1 | foo\n  2 | bar\n  3 | baz\n(3 rows)\n\npg=> select * from updates;\n id | document_id |    date    \n----+-------------+------------\n  1 |           1 | 2009-10-30\n  2 |           1 | 2009-11-04\n  3 |           1 | 2009-11-07\n  4 |           2 | 2009-11-09\n(4 rows)\n\npg=> SELECT d.id ...\n id | title | update_id |    date    \n----+-------+-----------+------------\n  1 | foo   |         3 | 2009-11-07\n  2 | bar   |         4 | 2009-11-09\n  3 | baz   |           | \n(3 rows)\n']], ['PostgreSQL , Select from 2 tables, but only the latest element from table 2'], 2], [(1704795, 0), [['Query 1:'], ['Plan']], [[' EXPLAIN\nSELECT  datex\nFROM    TABLE_X x\nWHERE   datex < "2009-10-20"\nORDER BY datex DESC\nLIMIT 1\n']], ['Which mysql select is better/faster?'], 4], [(1704795, 1), [['Plan'], ['Query 2:']], [[' id select_type table type possible_keys key  key_len ref  rows Extra\n1  SIMPLE      x     ALL  NULL          NULL NULL    NULL 2    Using where; Using filesort\n']], ['Which mysql select is better/faster?'], 4], [(1704795, 2), [['Query 2:'], ['Plan']], [[' EXPLAIN\nSELECT  MAX( datex )\nFROM    TABLE_X x\nWHERE   datex < "2009-10-20"\n']], ['Which mysql select is better/faster?'], 4], [(1704795, 3), [['Plan'], ['-10000']], [[' id  select_type table type  possible_keys   key     key_len ref   rows Extra\n1   SIMPLE      x     ALL   NULL            NULL    NULL    NULL  2    Using where\n']], ['Which mysql select is better/faster?'], 4], [(1706453, 0), [['For the list '], ['and to list them seperatly for 13']], [[' SELECT LEN(accttype), COUNT(*) \nFROM T_DATA \nGROUP BY LEN(accttype) \nORDER BY 1\n']], ['sql server questions'], 3], [(1706453, 1), [['and to list them seperatly for 13'], ['and for 15']], [[' SELECT accttype\nFROM T_DATA \nWHERE LEN(accttype) = 13\n']], ['sql server questions'], 3], [(1706453, 2), [['and for 15'], ['-10000']], [[' SELECT accttype\nFROM T_DATA \nWHERE LEN(accttype) = 15\n']], ['sql server questions'], 3], [(1707563, 0), [['You use a  string function  to verify the presence of single characters:'], ["This won't work, if the first character is a newline, though, so you might want to check that too:"]], [[' SELECT FROM YourTable WHERE LOCATE("\\n", textColumn) != 0;\n']], ['How to find the text field data has \\n?'], 2], [(1707563, 1), [["This won't work, if the first character is a newline, though, so you might want to check that too:"], ['-10000']], [[' SELECT FROM YourTable WHERE LEFT(textColumn, 1) != "\\n" AND LOCATE("\\n", textColumn) != 0;\n']], ['How to find the text field data has \\n?'], 2], [(1707866, 0), [["Here's a PL/SQL function I did on the quick:"], ['It outputs:']], [[" create or replace function fix_comma(str varchar2) return varchar2\nis\n   strLen smallint := length(str);\n   cntPar smallint := 0;\n   c char;\n   strOut varchar2(4000) := '';\n   lastWasComma boolean := false;\nbegin\n   for i in 1..strLen loop\n      c := substr(str, i, 1);\n      if c = '(' then\n         cntPar := cntPar + 1;\n         lastWasComma := false;\n      elsif c = ')' then\n         if cntPar > 0 then\n            cntPar := cntPar - 1;\n         end if;\n         lastWasComma := false;\n      elsif cntPar = 0 and c = ',' then\n         c := ':';\n         lastWasComma := true;\n      elsif cntPar = 0 and c = ' ' and lastWasComma then\n         c := null;\n      else\n         lastWasComma := false;\n      end if;\n\n      strOut := strOut || c;\n   end loop;\n   return strOut;\nend;\n\nselect fix_comma('state(vic,nsw), england, qwerty(aaa,bbb, cccc):qaz') from dual\nunion\nselect fix_comma('state(tik (vic,nsw) tok))),   england,   qwerty(aaa,  bbb, cccc):qaz') from dual;\n"]], ['Oracle REPLACE function - unsure how to use for my scenario'], 2], [(1707866, 1), [['It outputs:'], ['Try writing something similar using Oracle RegEx. I know I gave up.']], [[' state(vic,nsw):england:qwerty(aaa,bbb, cccc):qaz\nstate(tik (vic,nsw) tok))):england:qwerty(aaa,  bbb, cccc):qaz\n']], ['Oracle REPLACE function - unsure how to use for my scenario'], 2], [(1709057, 0), [['That can be done using plain SQL, no procedures required:'], ['Or, if your database allows it:']], [[' UPDATE table1 SET field1 = (SELECT bus FROM view1 WHERE table1.document = view1.document)\n']], ['update each row in a procedure'], 2], [(1709057, 1), [['Or, if your database allows it:'], ['-10000']], [[' UPDATE (select table1.field1, view1.bus FROM table1 JOIN view1 ON table1.document = view1.document) SET table1.field1 = view1.bus\n']], ['update each row in a procedure'], 2], [(1709206, 0), [['-10000'], ['To update from ungrouped to grouped:']], [[' WITH    rows AS\n        (\n        SELECT  e.*,\n                ROW_NUMBER() OVER (ORDER BY evid) AS rn,\n                DENSE_RANK() OVER (ORDER BY venueid) AS dr\n        FROM    EventVenues e\n        )\nUPDATE  rows\nSET     Ungrouped = rn,\n        Grouped = dr\n']], ['Updating Order field in SQL'], 3], [(1709206, 1), [['To update from ungrouped to grouped:'], ['To update from grouped to ungrouped:']], [[' WITH    rows AS\n        (\n        SELECT  e.*,\n                DENSE_RANK() OVER (ORDER BY VenueID DESC) AS dr\n        FROM    EventVenues e\n        )\nUPDATE  rows\nSET     Ordering = dr\n']], ['Updating Order field in SQL'], 3], [(1709206, 2), [['To update from grouped to ungrouped:'], ['This will update the  Ordering  in descending  EVID  order.']], [[' WITH    rows AS\n        (\n        SELECT  e.*,\n                ROW_NUMBER() OVER (ORDER BY evid DESC) AS rn\n        FROM    EventVenues e\n        )\nUPDATE  rows\nSET     Ordering = rn\n']], ['Updating Order field in SQL'], 3], [(1709270, 0), [['This query:'], ['This query:']], [[' SELECT  *\nFROM    main\nJOIN    secondary\nON      secondary.main_id = main.id\n']], ['Empty set while selecting data in MySQL relational database'], 3], [(1709270, 1), [['This query:'], ['Assuming that  a  is the "main" table, rewrite your query as this:']], [[' SELECT  *\nFROM    main\nLEFT JOIN\n        secondary\nON      secondary.main_id = main.id\n']], ['Empty set while selecting data in MySQL relational database'], 3], [(1709270, 2), [['Assuming that  a  is the "main" table, rewrite your query as this:'], ['-10000']], [[' SELECT  a.*, b.*, c.*, d.*, e.*, f.*\nFROM    a\nLEFT JOIN\n        b\nON      b.aID = a.aID\nLEFT JOIN\n        с\nON      c.bID = b.bID\nLEFT JOIN\n        d\nON      d.bID = b.bID\nLEFT JOIN\n        e\nON      e.bID = b.bID\nLEFT JOIN\n        f\nON      f.bID = b.bID\n']], ['Empty set while selecting data in MySQL relational database'], 3], [(1709714, 0), [['[Run.cmd] --May need to change powershell path'], ['[RunBackup.ps1] --Out-File not having the desired effect, maybe someone can figure out why?']], [[' C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -nologo -noninteractive -command "C:\\Scripts\\RunBackup.ps1"\n']], ['Powershell scripts to backup SQL, SVN'], 5], [(1709714, 1), [['[RunBackup.ps1] --Out-File not having the desired effect, maybe someone can figure out why?'], ["[SqlBackup.ps1] --You may need to modify which SMO assemblies are loaded, depending on your\nversion of SQL server. Don't forget to set $instance and $bkdir."]], [[' C:\\Scripts\\SqlBackup.ps1 | Out-File "C:\\Scripts\\log.txt"\nC:\\Scripts\\SVNBackup.ps1 | Out-File "C:\\Scripts\\log.txt"\nC:\\Scripts\\Zip.ps1 | Out-File "C:\\Scripts\\log.txt"\n']], ['Powershell scripts to backup SQL, SVN'], 5], [(1709714, 2), [["[SqlBackup.ps1] --You may need to modify which SMO assemblies are loaded, depending on your\nversion of SQL server. Don't forget to set $instance and $bkdir."], ['[SVNBackup.ps1] --Modify repo and backup paths']], [[' #http://www.mssqltips.com/tip.asp?tip=1862&home\n\n$instance = ".\\SQLEXPRESS"\n\n\n[System.Reflection.Assembly]::LoadFrom("C:\\Program Files\\Microsoft SQL Server\\100\\SDK\\Assemblies\\Microsoft.SqlServer.SMO.dll") | out-null\n\n[System.Reflection.Assembly]::LoadFrom("C:\\Program Files\\Microsoft SQL Server\\100\\SDK\\Assemblies\\Microsoft.SqlServer.SMOExtended.dll") | out-null\n\n$s = new-object ("Microsoft.SqlServer.Management.Smo.Server") $instance\n\n$bkdir = "c:\\Backups" #We define the folder path as a variable\n$dbs = $s.Databases\nforeach ($db in $dbs)\n{\n     if($db.Name -ne "tempdb") #We don\'t want to backup the tempdb database\n     {\n     $dbname = $db.Name\n     $dt = get-date -format yyyyMMddHHmm #We use this to create a file name based on the timestamp\n     $dbBackup = new-object ("Microsoft.SqlServer.Management.Smo.Backup")\n     $dbBackup.Action = "Database"\n     $dbBackup.Database = $dbname\n     $dbBackup.Devices.AddDevice($bkdir + "\\" + $dbname + "_db_" + $dt + ".bak", "File")\n     $dbBackup.SqlBackup($s)\n     }\n\n     if($db.RecoveryModel -ne 3) #Don\'t issue Log backups for DBs with RecoveryModel=3 or SIMPLE\n     {\n     $dbname = $db.Name\n     $dt = get-date -format yyyyMMddHHmm #Create a file name based on the timestamp\n     $dbBackup = new-object ("Microsoft.SqlServer.Management.Smo.Backup")\n     $dbBackup.Action = "Log"\n     $dbBackup.Database = $dbname\n     $dbBackup.Devices.AddDevice($bkdir + "\\" + $dbname + "_log_" + $dt + ".trn", "File")\n     $dbBackup.SqlBackup($s)\n     } \n}\n']], ['Powershell scripts to backup SQL, SVN'], 5], [(1709714, 3), [['[SVNBackup.ps1] --Modify repo and backup paths'], ['[Zip.ps1] --Need to have 7zip installed, modify 7z.exe path if necessary']], [[' #set alias to svnadmin exe\nset-alias svnadmin "C:\\Program Files (x86)\\CollabNet Subversion Server\\svnadmin.exe"\n\n#create dump\ncmd.exe /c svnadmin dump "C:\\Repo" `> "C:\\Backups\\svn.dmp"\n\n#remove alias\nremove-item alias:svnadmin\n']], ['Powershell scripts to backup SQL, SVN'], 5], [(1709714, 4), [['[Zip.ps1] --Need to have 7zip installed, modify 7z.exe path if necessary'], ['I used  GoodSync  to backup to WebDAV and scheduled two tasks to run the .cmd file and then sync/backup offsite.']], [[' #set alias to command line version of 7zip\nset-alias sevenz "c:\\program files\\7-zip\\7z.exe"\n\n#Backups location\ncd \'C:\\Backups\'\n\n#rar the contents of the directory\n$dt = get-date -format yyyyMMddHHmm #We use this to create a file name based on the timestamp\n$outputFileName = "SQLSVNBackup$dt.7z"\n$exclude1 = "-x!*.rar"\n$exclude2 = "-x!*.7z"\nsevenz a -t7z "$outputFileName" *.* "$exclude1" "$exclude2"\n\n#find all .bak files in the immediate directory \ndir \'*.bak\' | foreach-object{\n\n#remove the bak file\nremove-item $_.name\n\n}\n\n\n#find all .dmp files in the immediate directory \ndir \'*.dmp\' | foreach-object{\n\n#remove the dmp file\nremove-item $_.name\n\n}\n\n#find all .trn files in the immediate directory \ndir \'*.trn\' | foreach-object{\n\n#remove the trn file\nremove-item $_.name\n\n}\n\n#remove 7zip alias\nremove-item alias:sevenz\n']], ['Powershell scripts to backup SQL, SVN'], 5], [(1712077, 0), [['The easiest way would be to drop the schema the objects are associated to:'], ['For the script you provided, you could instead run those queries without having to generate the intermediate script using the following anonymous procedure:']], [[' DROP USER [schema name] CASCADE\n']], ['Wipe data from Oracle DB'], 2], [(1712077, 1), [['For the script you provided, you could instead run those queries without having to generate the intermediate script using the following anonymous procedure:'], ['-10000']], [[" BEGIN\n\n  --Bye Views!\n  FOR i IN (SELECT uv.view_name\n              FROM USER_VIEWS uv) LOOP\n    EXECUTE IMMEDIATE 'drop view '|| i.view_name ||'';\n  END LOOP;\n\n  --Bye Sequences!\n  FOR i IN (SELECT us.sequence_name\n              FROM USER_SEQUENCES us) LOOP\n    EXECUTE IMMEDIATE 'drop sequence '|| i.sequence_name ||'';\n  END LOOP;\n\n  --Bye Tables!\n  FOR i IN (SELECT ut.table_name\n              FROM USER_TABLES ut) LOOP\n    EXECUTE IMMEDIATE 'drop table '|| i.table_name ||' CASCADE CONSTRAINTS ';\n  END LOOP;\n\n  --Bye Procedures/Functions/Packages!\n  FOR i IN (SELECT us.name,\n                   us.type\n              FROM USER_SOURCE us\n             WHERE us.type IN ('PROCEDURE', 'FUNCTION', 'PACKAGE')\n          GROUP BY us.name, us.type) LOOP\n    EXECUTE IMMEDIATE 'drop '|| i.type ||' '|| i.name ||'';\n  END LOOP;\n\n  --Bye Synonyms!\n  FOR i IN (SELECT ut.synonym_name\n              FROM USER_SYNONYMS us\n             WHERE us.synonym_name NOT LIKE 'sta%' \n               AND us.synonym_name LIKE 's_%') LOOP\n    EXECUTE IMMEDIATE 'drop synonym '|| i.synonym_name ||'';\n  END LOOP;\n\nEND;\n"]], ['Wipe data from Oracle DB'], 2], [(1713056, 0), [['Use for a date three days ago:'], ['Or you can use:']], [[' WHERE t.date >= DATE_ADD(CURDATE(), INTERVAL -3 DAY);\n']], ['MySQL SELECT last few days?'], 2], [(1713056, 1), [['Or you can use:'], ['-10000']], [[' WHERE t.date >= ( CURDATE() - INTERVAL 3 DAY )\n']], ['MySQL SELECT last few days?'], 2], [(1713127, 0), [['Recommended:'], ["This is another alternative, but it's risky because of casting to a FLOAT.  It's also been demonstrated to not scale performance as well as the DATEADD/DATEDIFF approach."]], [[' DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()))\n']], ['Trunc(sysdate) in SQL Server'], 2], [(1713127, 1), [["This is another alternative, but it's risky because of casting to a FLOAT.  It's also been demonstrated to not scale performance as well as the DATEADD/DATEDIFF approach."], ['-10000']], [[' CAST(FLOOR(CAST(GETDATE() AS FLOAT)) AS DATETIME)\n']], ['Trunc(sysdate) in SQL Server'], 2], [(1715351, 0), [['The blackbox way of doing this is with a CROSS APPLY and FOR XML PATH:'], ['If you run the query, it will print:']], [[" declare @t table (id int, link_id int, name varchar(max))\ninsert into @t select 1, 11, 'test1'\nunion all select 2, 11, 'test2'\nunion all select 3, 11, 'test3'\nunion all select 4, 12, 'test4'\n\nselect b.link_id, d.link_names\nfrom (\n    select distinct link_id\n    from @t a\n) b\ncross apply (\n    select name + ', ' as [text()]\n    from @t c\n    where b.link_id = c.link_id\n    for xml path('')\n) d (link_names)\n"]], ['sql 2005 join results'], 2], [(1715351, 1), [['If you run the query, it will print:'], ['-10000']], [[' 11   test1, test2, test3, \n12   test4, \n']], ['sql 2005 join results'], 2], [(1715955, 0), [['Try this'], ['Add a where clause to search for certain rows in table1']], [[' select * from table1 t1\njoin table2 t2 on t1.t2ref = t2.id\njoin table3 t3 on t2.t3ref = t3.id\n']], ['mysql - query three tables'], 2], [(1715955, 1), [['Add a where clause to search for certain rows in table1'], ['-10000']], [[" where t1.field = 'value'\n"]], ['mysql - query three tables'], 2], [(1715978, 0), [['I would create a database type like this:'], ['And then in the procedure:']], [[' create type v2t as table of varchar2(30);\n/\n']], ['How to use an Oracle Associative Array in a SQL query'], 2], [(1715978, 1), [['And then in the procedure:'], ['(where databaseArray is declared to be of type v2t.)']], [[' FOR i IN 1..associativeArray.COUNT LOOP\n    databaseArray.extend(1);\n    databaseArray(i) := associativeArray(i);\nEND LOOP;\n\nOPEN refCursor FOR\nSELECT T.*\nFROM   SOME_TABLE T,\n       ( SELECT COLUMN_VALUE V\n         FROM   TABLE( databaseArray )\n       ) T2\nWHERE  T.NAME = T2.V;\n']], ['How to use an Oracle Associative Array in a SQL query'], 2], [(1716979, 0), [["Let's say you have a product page that is called using a URL such as this:"], ['And in your code you have a query constructed such as this:']], [[' product.aspx?ID=123\n']], ['Are sql injection attacks only a threat on a page that has a form?'], 5], [(1716979, 1), [['And in your code you have a query constructed such as this:'], ['Someone could call your page with this url:']], [[' string sql = "SELECT * FROM Products WHERE ID = " + Request.Querystring["ID"];\n']], ['Are sql injection attacks only a threat on a page that has a form?'], 5], [(1716979, 2), [['Someone could call your page with this url:'], ['In addition to ANYTHING that can be passed in via a user, querystring, post, cookie, browser variable, etc. I think it is just good practice to always use parameters, even if you have the literals in your code.  For example:']], [[' product.aspx?ID=123;DROP Table Students;\n']], ['Are sql injection attacks only a threat on a page that has a form?'], 5], [(1716979, 3), [['In addition to ANYTHING that can be passed in via a user, querystring, post, cookie, browser variable, etc. I think it is just good practice to always use parameters, even if you have the literals in your code.  For example:'], ['this may be injection safe, but your RDBMS will cache them as two different queries.\nif you modiy it to this:']], [[' if(SomeCondition)\n{\n    sql = "Select * from myTable where someCol = \'foo\'";\n}\nelse\n{\n    sql = "Select * from myTable where someCol = \'bar\'";\n}\n']], ['Are sql injection attacks only a threat on a page that has a form?'], 5], [(1716979, 4), [['this may be injection safe, but your RDBMS will cache them as two different queries.\nif you modiy it to this:'], ['You achieve the same result but the RDBMS will only cache it as one query, substituting the parameter at runtime.  I use it as a rule of thumb to ALWAYS use parameterized queries, just to keep things consistent, not to mention a slight cache improvement.']], [[' sql = "Select * from myTable where someCol = @myParam";\nif(SomeCondition)\n{\n   myCommand.Parameters.Add("@myParam").value = "foo";\n}\nelse\n{\n   myCommand.Parameters.Add("@myParam").value = "bar";\n}\n']], ['Are sql injection attacks only a threat on a page that has a form?'], 5], [(1718256, 0), [['-10000'], ['or']], [[' CREATE TABLE foo (\n    bar int NOT NULL CONSTRAINT CK_foo_bar CHECK (bar IN (-1, 0, 1))\n)\n']], ['SQL Server add a column constraint to limit data to -1 to 1'], 2], [(1718256, 1), [['or'], ['Edit: thoughts...']], [[' ALTER TABLE foo WITH CHECK ADD --added WITH CHECK\n   CONSTRAINT CK_foo_bar CHECK (bar IN (-1, 0, 1)) --not needed "FOR bar"\n']], ['SQL Server add a column constraint to limit data to -1 to 1'], 2], [(1719953, 0), [['In my Model:'], ['In my Comtroller:']], [[' public County GetCounty(int id)\n    {\n        return db.Counties.SingleOrDefault(d => d.CountyID == id);\n    }\n']], ['Converting an ID into a name in ASP.Net MVC'], 3], [(1719953, 1), [['In my Comtroller:'], ['And in my View:']], [[' int countyID = customer.CountyID;\nCounty county = customerRepository.GetCounty(countyID);\nViewData["CountyName"] = county.CountyName;\n']], ['Converting an ID into a name in ASP.Net MVC'], 3], [(1719953, 2), [['And in my View:'], ["I probably would have gotten a quicker solution, but I know I'm not the best at asking the question properly  :)"]], [[' <%= Html.Encode(ViewData["CountyName"]) %>\n']], ['Converting an ID into a name in ASP.Net MVC'], 3], [(1723232, 0), [['Here is an example of a stored procedure with a transaction.  Note the use of LAST_INSERT_ID() to get the ID of the previously inserted record.  This is only two tables, but you should be able to extend it to three tables.'], ['And you call it like so:']], [[' DELIMITER //\nCREATE PROCEDURE new_engineer_with_task(\n  first CHAR(35), last CHAR(35), email CHAR(255), tool_id INT)\nBEGIN\nSTART TRANSACTION;\n   INSERT INTO engineers (firstname, lastname, email) \n     VALUES(first, last, email);\n\n   INSERT INTO tasks (engineer_id, tool_id) \n     VALUES(LAST_INSERT_ID(), tool_id);\nCOMMIT;\nEND//\nDELIMITER ;\n']], ['mySQL - Insert into three tables'], 2], [(1723232, 1), [['And you call it like so:'], ['-10000']], [[" CALL new_engineer_with_task('Jerry', 'Fernholz', 'me@somewhere.com', 1);\n"]], ['mySQL - Insert into three tables'], 2], [(1725379, 0), [['You can convert the date params to datetime.'], ['then you can use date functions to add days.']], [[' SELECT convert(datetime, @StartDate) into datetimevariable\n']], ['sql while loop with date counter'], 4], [(1725379, 1), [['then you can use date functions to add days.'], ['As a solution to get a m/d/yyyy format, I C&P this function from some website a couple of weeks ago. Use this code to create a function and call in this way: ']], [[' select DATEADD(day,1,datetimevariable) into datetimevariable\n']], ['sql while loop with date counter'], 4], [(1725379, 2), [['As a solution to get a m/d/yyyy format, I C&P this function from some website a couple of weeks ago. Use this code to create a function and call in this way: '], ['-10000']], [["  SELECT dbo.fnFormatDate (@DateTimeVariable, 'M/DD/YYYY') into stringVariable \n"]], ['sql while loop with date counter'], 4], [(1725379, 3), [['-10000'], ['-10000']], [[' CREATE FUNCTION dbo.CustomFormatDate (@Datetime DATETIME, @FormatMask VARCHAR(32))\nRETURNS VARCHAR(32)\nAS\nBEGIN\n\n    DECLARE @StringDate VARCHAR(32)\n    SET @StringDate = @FormatMask\n    IF (CHARINDEX (‘YYYY’,@StringDate) > 0)\n       SET @StringDate = REPLACE(@StringDate, ‘YYYY’,\n                         DATENAME(YY, @Datetime))\n    IF (CHARINDEX (‘YY’,@StringDate) > 0)\n       SET @StringDate = REPLACE(@StringDate, ‘YY’,\n                         RIGHT(DATENAME(YY, @Datetime),2))\n    IF (CHARINDEX (‘Month’,@StringDate) > 0)\n       SET @StringDate = REPLACE(@StringDate, ‘Month’,\n                         DATENAME(MM, @Datetime))\n    IF (CHARINDEX (‘MON’,@StringDate COLLATE SQL_Latin1_General_CP1_CS_AS)>0)\n       SET @StringDate = REPLACE(@StringDate, ‘MON’,\n                         LEFT(UPPER(DATENAME(MM, @Datetime)),3))\n    IF (CHARINDEX (‘Mon’,@StringDate) > 0)\n       SET @StringDate = REPLACE(@StringDate, ‘Mon’,\n                                     LEFT(DATENAME(MM, @Datetime),3))\n    IF (CHARINDEX (‘MM’,@StringDate) > 0)\n       SET @StringDate = REPLACE(@StringDate, ‘MM’,\n                  RIGHT(‘0′+CONVERT(VARCHAR,DATEPART(MM, @Datetime)),2))\n    IF (CHARINDEX (‘M’,@StringDate) > 0)\n       SET @StringDate = REPLACE(@StringDate, ‘M’,\n                         CONVERT(VARCHAR,DATEPART(MM, @Datetime)))\n    IF (CHARINDEX (‘DD’,@StringDate) > 0)\n       SET @StringDate = REPLACE(@StringDate, ‘DD’,\n                         RIGHT(‘0′+DATENAME(DD, @Datetime),2))\n    IF (CHARINDEX (‘D’,@StringDate) > 0)\n       SET @StringDate = REPLACE(@StringDate, ‘D’,\n                                    DATENAME(DD, @Datetime))   \n\nRETURN @StringDate\nEND\nGO\n']], ['sql while loop with date counter'], 4], [(1725856, 0), [['First query:'], ['Second query:']], [[" EXPLAIN\nSELECT  *\nFROM    t_source s1\nJOIN    t_source s2\nON      s2.nid = s1.id\nWHERE   s2.val = 1\n\n1, 'SIMPLE', 's1', 'ALL', 'PRIMARY', '', '', '', 1000000, ''\n1, 'SIMPLE', 's2', 'ref', 'ix_source_val,ix_source_val_nid,ix_source_vald_nid', 'ix_source_val_nid', '8', 'const,test.s1.id', 1, 'Using where'\n"]], ['Which MySQL JOIN query is more efficient?'], 2], [(1725856, 1), [['Second query:'], ['As you can see, only a part of the index is used in the second case, and  q  is forced to be leading.']], [[" EXPLAIN\nSELECT  *\nFROM    t_source s1\nJOIN    (\n        SELECT  nid\n        FROM    t_source s2\n        WHERE   val = 1\n        ) q\nON      q.nid = s1.id\n\n1, 'PRIMARY', '<derived2>', 'ALL', '', '', '', '', 100000, ''\n1, 'PRIMARY', 's1', 'ref', 'PRIMARY', 'PRIMARY', '4', 'q.nid', 10000, 'Using where'\n2, 'DERIVED', 's2', 'ref', 'ix_source_val,ix_source_val_nid,ix_source_vald_nid', 'ix_source_vald_nid', '4', '', 91324, 'Using index'\n"]], ['Which MySQL JOIN query is more efficient?'], 2], [(1727623, 0), [["Here's a code example, straight from  the first DBI tutorial on google :"], ['Perl also has that EOF style multiline comment; you can make a long query like this:']], [['     use DBI;\n\n    my $dbh = DBI->connect(\'DBI:Oracle:payroll\')\n        or die "Couldn\'t connect to database: " . DBI->errstr;\n    my $sth = $dbh->prepare(\'SELECT * FROM people WHERE lastname = ?\')\n        or die "Couldn\'t prepare statement: " . $dbh->errstr;\n\n    $sth->execute($lastname)             # Execute the query\n        or die "Couldn\'t execute statement: " . $sth->errstr;\n\n    # Read the matching records and print them out          \n    while (@data = $sth->fetchrow_array()) {\n        my $firstname = $data[1];\n        my $id = $data[2];\n        print "\\t$id: $firstname $lastname\\n";\n    }\n    if ($sth->rows == 0) {\n      print "No names matched `$lastname\'.\\n\\n";\n    }\n    $sth->finish;\n    print "\\n";\n    print "Enter name> ";\n\n    $dbh->disconnect;\n']], ['SQL*Plus inside Perl script'], 2], [(1727623, 1), [['Perl also has that EOF style multiline comment; you can make a long query like this:'], ['-10000']], [[" my $query = <<'END_QUERY';\n${SQLPLUS_SETTINGS}\nselect foo||'|'||bar ||'|'|| xyz from temp where dfg='some';\nexit;\nEND_QUERY\n"]], ['SQL*Plus inside Perl script'], 2], [(1728285, 0), [['So you could try:'], ['Or:']], [[" SELECT\n    CASE WHEN code MATCHES '*foo*' THEN 'Y' ELSE 'N' END as foo\nFROM\n    bar\n"]], ['LIKE operator for Progress DB SQL'], 2], [(1728285, 1), [['Or:'], ['-10000']], [[" SELECT\n    CASE WHEN code CONTAINS 'foo' THEN 'Y' ELSE 'N' END as foo\nFROM\n    bar\n"]], ['LIKE operator for Progress DB SQL'], 2], [(1730060, 0), [['-10000'], ['If you want your queries to be efficient, you should create a many-to-many link table:']], [[" SELECT  *\nFROM    MYTABLE\nWHERE   FIND_IN_SET('US', cc_list)\n"]], ['Using MySQL\'s "IN" function where the target is a column?'], 3], [(1730060, 1), [['If you want your queries to be efficient, you should create a many-to-many link table:'], ['Alternatively, you can set  ft_min_word_len  to  2 , create a  FULLTEXT  index on your column and query like this:']], [[" CREATE TABLE table_country (cc CHAR(2) NOT NULL, tableid INT NOT NULL, PRIMARY KEY (cc, tableid))\n\nSELECT  *\nFROM    tablecountry tc\nJOIN    mytable t\nON      t.id = tc.tableid\nWHERE   t.cc = 'US'\n"]], ['Using MySQL\'s "IN" function where the target is a column?'], 3], [(1730060, 2), [['Alternatively, you can set  ft_min_word_len  to  2 , create a  FULLTEXT  index on your column and query like this:'], ["This only works for  MyISAM  tables and the argument should be a literal string (you won't be able to join on this condition)."]], [[" CREATE FULLTEXT INDEX fx_mytable_cclist ON mytable (cc_list);\n\nSELECT  *\nFROM    MYTABLE\nWHERE   MATCH(cc_list) AGAINST('+US' IN BOOLEAN MODE)\n"]], ['Using MySQL\'s "IN" function where the target is a column?'], 3], [(1730232, 0), [['One way to verify using  STATS_DATE ...'], ["You'll see stats are only updated by the SELECT statements, not the INSERT, DELETE or TRUNCATE"]], [[" SELECT\n   name AS index_name, \n   STATS_DATE(object_id, index_id)\nFROM\n   sys.indexes \nWHERE\n   object_id = OBJECT_ID('MyTruncatedTable')\n"]], ['Truncate Table and UPDATE Statistics'], 2], [(1730232, 1), [["You'll see stats are only updated by the SELECT statements, not the INSERT, DELETE or TRUNCATE"], ['-10000']], [[" IF OBJECT_ID('dbo.foo') IS NOT NULL DROP TABLE dbo.foo\nCREATE TABLE dbo.foo (\n    bar int NOT NULL IDENTITY (1, 1) PRIMARY KEY,\n    thing int NOT NULL\n)\nCREATE INDEX IX_thing ON dbo.foo (thing)\n\nINSERT dbo.foo (thing) SELECT c1.object_id FROM sys.columns c1, sys.columns c2\nSELECT\n   name AS index_name, \n   STATS_DATE(object_id, index_id) AS AfterLoad\nFROM sys.indexes WHERE object_id = OBJECT_ID('dbo.foo')\n\nSELECT DISTINCT thing FROM dbo.foo ORDER BY thing DESC\nSELECT\n   name AS index_name, \n   STATS_DATE(object_id, index_id) AS AfterFirstQuery\nFROM sys.indexes WHERE object_id = OBJECT_ID('dbo.foo')\n\nDELETE TOP (50000) dbo.foo\nSELECT\n   name AS index_name, \n   STATS_DATE(object_id, index_id) AS AfterDelete\nFROM sys.indexes WHERE object_id = OBJECT_ID('dbo.foo')\n\nSELECT DISTINCT thing FROM dbo.foo ORDER BY thing DESC\nSELECT\n   name AS index_name, \n   STATS_DATE(object_id, index_id) AS After2ndQuery\nFROM sys.indexes WHERE object_id = OBJECT_ID('dbo.foo')\n\nTRUNCATE TABLE dbo.foo\nSELECT\n   name AS index_name, \n   STATS_DATE(object_id, index_id) AS AfterTruncate\nFROM sys.indexes WHERE object_id = OBJECT_ID('dbo.foo')\n\nSELECT DISTINCT thing FROM dbo.foo ORDER BY thing DESC\nSELECT\n   name AS index_name, \n   STATS_DATE(object_id, index_id) AS After3rdQuery\nFROM sys.indexes WHERE object_id = OBJECT_ID('dbo.foo')\n"]], ['Truncate Table and UPDATE Statistics'], 2], [(1730665, 0), [['A better design is to borrow a concept from OO design of a  common supertype  of both  car  and  motor :'], ['Then make  t1  reference this super-type table:']], [[' CREATE TABLE Identifiable (\n id SERIAL PRIMARY KEY\n);\n']], ['How to emulate tagged union in a database?'], 3], [(1730665, 1), [['Then make  t1  reference this super-type table:'], ['And also make the sub-types reference their parent supertype.  Note that the primary key of the sub-types is  not  auto-incrementing.  The parent supertype takes care of allocating a new id value, and the children only reference that value. ']], [[' CREATE TABLE t1 (\n  vehicle_id INTEGER NOT NULL,\n  FOREIGN KEY (vehicle_id) REFERENCES identifiable(id)\n  ...\n);\n']], ['How to emulate tagged union in a database?'], 3], [(1730665, 2), [['And also make the sub-types reference their parent supertype.  Note that the primary key of the sub-types is  not  auto-incrementing.  The parent supertype takes care of allocating a new id value, and the children only reference that value. '], ['Now you can have true referential integrity, but also support multiple subtype tables with their own attributes.']], [[' CREATE TABLE car (\n  id INTEGER NOT NULL,\n  FOREIGN KEY (id) REFERENCES identifiable(id)\n  ...\n);\n\nCREATE TABLE motor (\n  id INTEGER NOT NULL,\n  FOREIGN KEY (id) REFERENCES identifiable(id)\n  ...\n);\n']], ['How to emulate tagged union in a database?'], 3], [(1730882, 0), [["If the column doesn't exist:"], ['and if column exists:']], [[" alter table Mystery add column BEST_SELLER enum('N','Y') default 'N';\n"]], ['How do I set the default value for a column?'], 2], [(1730882, 1), [['and if column exists:'], ['-10000']], [[" alter table Mystery alter column BEST_SELLER set default 'N';\n"]], ['How do I set the default value for a column?'], 2], [(1731162, 0), [['-10000'], ['EDIT: If you are looking to count records when the flag is true, you could write it as below']], [[' SELECT Count(emailOpened) AS OpenedCount,\nCount(emailUnsubscribed) as UnsubCount,\nCount(emailBounced) as BouncedCount\nFROM dbo.EmailCampaignTracking\n']], ['SQL Distinct Grouping?'], 2], [(1731162, 1), [['EDIT: If you are looking to count records when the flag is true, you could write it as below'], ['EDIT2: In above query, replace  true  with the bit value that is interpreted as true (it could be 0).']], [[' SELECT SUM(CASE emailOpened WHEN true then 1 else 0) AS OpenedCount,\nSUM(CASE emailUnsubscribed WHEN true then 1 else 0) as UnsubCount,\nSUM(CASE emailBounced WHEN true then 1 else 0) as BouncedCount\nFROM dbo.EmailCampaignTracking\n']], ['SQL Distinct Grouping?'], 2], [(1731818, 0), [['The easiest way:'], ['Like this:']], [[' arr_foos.Delete();\n']], ['Resetting an Associative array in PL/SQL?'], 2], [(1731818, 1), [['Like this:'], ['-10000']], [[' DECLARE\n TYPE foo_record IS RECORD (foo%type, bar%type);\n TYPE foo_records IS TABLE OF foo_record INDEX BY PLS_INTEGER;     \n\n CURSOR monkeys is SELECT primates FROM zoo;\n row_monkey monkeys%rowtype;\nBEGIN\n FOR row_monkey IN monkeys loop\n  DECLARE\n    arr_foos foo_records;\n  BEGIN\n    null;\n  END;\n END LOOP;\nEND;\n']], ['Resetting an Associative array in PL/SQL?'], 2], [(1732465, 0), [["Assuming, you're on SQL SERVER 2005, here is the example of stored procedure to accomplish this (by using CTE):"], ['You also could return deleted rows into a table variable (should be defined before CTE):']], [[' CREATE PROCEDURE [DeleteRecordWithChild]\n    @id int\nAS\nBEGIN\n    WITH Nodes ([Id], [ParentId], [Level]) \n    AS (\n        SELECT  T.[Id], T.[ParentId], 0 AS [Level]\n        FROM    [dbo].[YourTable] T\n        WHERE   T.[Id] = @id\n\n        UNION ALL\n\n        SELECT  T.[Id], T.[ParentId], N.[Level] + 1\n        FROM    [dbo].[YourTable] T\n                INNER JOIN Nodes N ON N.[Id] = T.[ParentId]\n    )\n\n    DELETE\n    FROM    [YourTable]\n    OUTPUT  deleted.*\n    WHERE   [Id] IN (\n        SELECT  TOP 100 PERCENT N.[Id] \n        FROM    Nodes N\n        ORDER BY N.[Level] DESC\n    );\nEND\n']], ['TSQL Cascade delete for child records?'], 3], [(1732465, 1), [['You also could return deleted rows into a table variable (should be defined before CTE):'], ['and then']], [[' DECLARE @deleted_rows TABLE\n(\n    [Id] int,\n    [ParentId] int,\n    [Level] int\n);\n']], ['TSQL Cascade delete for child records?'], 3], [(1732465, 2), [['and then'], ['-10000']], [[' DELETE\nFROM    [YourTable]\nOUTPUT  deleted.* INTO @deleted_rows\nWHERE   [Id] IN (\n    SELECT  TOP 100 PERCENT N.[Id] \n    FROM    Nodes N\n    ORDER BY N.[Level] DESC\n);\n']], ['TSQL Cascade delete for child records?'], 3], [(1732472, 0), [['On rereading, since you already know the data type, why not include it in the update clause?'], ['Or to avoid typing the data type twice:']], [[" set @updateClause = 'Column1 = cast(@newValue as varchar(10))';\nset @updateClauseDataType = 'varchar(10)';\n"]], ['Parameterizing Dynamic SQL issue with SQL_VARIANT datatype'], 2], [(1732472, 1), [['Or to avoid typing the data type twice:'], ['-10000']], [[" set @updateClauseDataType = 'varchar(10)';\nset @updateClause = 'Column1 = cast(@newValue as ' +\n    @updateClauseDataType + ')';\n"]], ['Parameterizing Dynamic SQL issue with SQL_VARIANT datatype'], 2], [(1733822, 0), [['I create a class called applicationController which derives from Controller. Then i make all of my controller classes derive from this. The applicationController class has a constrcutor which creates a new instance of my repository (or datacontext in your instance) which is used throughout the application:'], ['Then you can use this in all of your controllers']], [['      public class ApplicationController : Controller\n     {\n          private VeriTabanDataContext _datacontext;\n\n          public ApplicationController() : this(new VeriTabanDataContext())\n          {\n          }\n\n          public ApplicationController(VeriTabanDataContext datacontext)\n          {\n               _datacontext = datacontext;\n          }\n\n          Public VeriTabanDataContext DataContext\n          {\n               get { return _datacontext; } \n          }\n     }\n']], ['"An attempt has been made to Attach or Add an entity that is not new, perhaps having been loaded from another DataContext. This is not supported."'], 2], [(1733822, 1), [['Then you can use this in all of your controllers'], ['Not on my PC with VS installed at the moment so not tested this code....']], [[' public class MyController : ApplicationController\n{\n     public ActionResult Complete()        \n     {            \n           DataContext.Persons.InsertOnSubmit(_person);              \n           DataContext.SubmitChanges();                \n           return View(_person);            \n     }\n}\n']], ['"An attempt has been made to Attach or Add an entity that is not new, perhaps having been loaded from another DataContext. This is not supported."'], 2], [(1734484, 0), [["Here's one way, using an inner join to filter rows with the lowest price:"], ['EDIT: Since your question mentions the items view takes long to build up, you could store the result in a temporary table.']], [[' select i.* \nfrom items i\ninner join (\n    select item_id, min(price) as minprice\n    from items \n    group by item_id\n) cheapest on i.price = cheapest.minprice\n    and i.item_id = cheapest.item_id\n']], ['Aggregate functions - getting columns not included in the GROUP BY clause'], 2], [(1734484, 1), [['EDIT: Since your question mentions the items view takes long to build up, you could store the result in a temporary table.'], ['And then run the grouping query on the temporary table.  In MySQL, a temporary table is visible only to the current connection, and is dropped automatically when the connection is closed.']], [[' create temporary table temp_items \nas \nselect item_id, source, price from YourView\n']], ['Aggregate functions - getting columns not included in the GROUP BY clause'], 2], [(1734829, 0), [['To get messages (changed after 2009-11-10 15:00)'], ['To get products (changed after 2009-11-10 15:00)']], [[" SELECT * \n  FROM Message AS m\n  JOIN Post as AS p ON p.PostID = m.PostID\nWHERE p.LastChanged > '2009-11-10 15:00'\n"]], ['Combining data from different tables to form a news feed'], 3], [(1734829, 1), [['To get products (changed after 2009-11-10 15:00)'], ['To get all in one table with NULLS in columns which do not apply to message or a product.']], [[" SELECT * \n  FROM Product AS d\n  JOIN Post as AS p ON p.PostID = d.PostID\nWHERE p.LastChanged > '2009-11-10 15:00'\n"]], ['Combining data from different tables to form a news feed'], 3], [(1734829, 2), [['To get all in one table with NULLS in columns which do not apply to message or a product.'], ['-10000']], [[" SELECT * \n  FROM Post AS p\n  LEFT JOIN Message AS m p.PostID = m.PostID\n  LEFT JOIN Product AS d ON p.PostID = d.PostID\nWHERE p.LastChanged > '2009-11-10 15:00'\n"]], ['Combining data from different tables to form a news feed'], 3], [(1735729, 0), [["This variant needs all three tables.  It uses Standard SQL interval notations; not many DBMS actually support it, but this works when the current date is in January and the question's version does not:"], ['[ For the record, the query below is what I used with IBM Informix Dynamic Server. ]']], [[' SELECT Dep_Name, COUNT(*), SUM(SALARY)\n  FROM Employees AS E NATURAL JOIN Salaries AS S ON E.Emp_ID = S.Emp_ID\n       NATURAL JOIN Department AS D ON E.Emp_ID = D.Emp_ID\n WHERE CURRENT_DATE - Hiring_Date <= INTERVAL(2) MONTH\n GROUP BY Dep_Name;\n']], ['SQL question: How can I extract this information from these tables?'], 2], [(1735729, 1), [['[ For the record, the query below is what I used with IBM Informix Dynamic Server. ]'], ['-10000']], [[' SELECT Dep_Name, COUNT(*), SUM(SALARY)\n  FROM employees AS E JOIN salaries AS S ON E.Emp_ID = S.Emp_ID\n       JOIN department AS D ON E.Emp_ID = D.Emp_ID\n WHERE CURRENT YEAR TO DAY <= INTERVAL(2) MONTH TO MONTH + Hiring_Date \n GROUP BY Dep_Name;\n']], ['SQL question: How can I extract this information from these tables?'], 2], [(1736005, 0), [['You could use:'], ['If you are using a terminal, make sure the terminal is using UTF-8. Try:']], [[" SELECT * FROM table WHERE field LIKE 'f_retag';\n"]], ['Ö (O with double dots) in Mysql record?'], 3], [(1736005, 1), [['If you are using a terminal, make sure the terminal is using UTF-8. Try:'], ['Also try forcing the character set when starting the mysql command:']], [['  echo $LANG\n']], ['Ö (O with double dots) in Mysql record?'], 3], [(1736005, 2), [['Also try forcing the character set when starting the mysql command:'], ['Otherwise, please give more details about what language and environment you are using to access the DB.']], [['  mysql --default-character-set=utf-8\n']], ['Ö (O with double dots) in Mysql record?'], 3], [(1740863, 0), [['What you are looking for is an outer join:'], ["This would give you a d.name of NULL for every employee without a department. You can change this to 'Other' with something like this:"]], [['  SELECT e.name, d.name\n FROM employee e \n LEFT OUTER JOIN departments d ON e.deptid = d.deptid\n']], ['Combining tables in SQL/QlikView'], 3], [(1740863, 1), [["This would give you a d.name of NULL for every employee without a department. You can change this to 'Other' with something like this:"], ['QlikView is a bit tricky, as all joins in QlikView are inner joins by default. There is some discussion in the online help about the different joins, short version is that you can create a new table based on different joins in the script that reads in your data. So you could have something like this in your script:']], [[" CASE WHEN d.name IS NULL THEN 'Other' Else d.name END \n"]], ['Combining tables in SQL/QlikView'], 3], [(1740863, 2), [['QlikView is a bit tricky, as all joins in QlikView are inner joins by default. There is some discussion in the online help about the different joins, short version is that you can create a new table based on different joins in the script that reads in your data. So you could have something like this in your script:'], ['In order for this join to work the column names for the join have to be the same in both tables. (If necessary, you can construct new columns for the join when loading the base tables.)']], [[' Emps: SELECT * FROM EMPLOYEES;\nDeps: SELECT * FROM DEPARTMENTS;\n/* or however else you get your data into QlikView */\n\nEmpDep:\nSELECT Emps.name, Deps.name\nFROM EMPS LEFT JOIN Deps\n']], ['Combining tables in SQL/QlikView'], 3], [(1742077, 0), [['You can always try to use a temp table with an identity column'], ['Some of the best paging i have seen in Sql Server 2000 uses this pattern']], [[" DECLARE @table TABLE(\n        [id] INT IDENTITY(1,1),\n        Val VARCHAR(10)\n)\n\nDECLARE @TableFrom TABLE(\n        Val VARCHAR(10)\n)\nINSERT INTO @TableFrom (Val) SELECT 'A'\nINSERT INTO @TableFrom (Val) SELECT 'B'\nINSERT INTO @TableFrom (Val) SELECT 'C'\nINSERT INTO @TableFrom (Val) SELECT 'D'\n\nINSERT INTO @table (Val) SELECT * FROM @TableFrom ORDER BY Val DESC\nSELECT * FROM @table\n"]], ['How to get the current row number in an SQL Server 2000 query?'], 2], [(1742077, 1), [['Some of the best paging i have seen in Sql Server 2000 uses this pattern'], ['-10000']], [[' DECLARE @PageStart INT,\n        @PageEnd INT\n\nSELECT  @PageStart = 51,\n        @PageEnd = 100\n\nSELECT  <TABLE>.*\nFROM    (\n            SELECT  TOP (@PageStart - 1)\n                    <ID>\n            FROM    (\n                        SELECT  TOP (@PageEnd)\n                                <ID>\n                        FROM    TABLE\n                        ORDER BY <ID> ASC\n                    ) SUB\n            ORDER BY SUB.<ID> DESC\n        ) SUB INNER JOIN\n        <TABLE> ON SUB.<ID> = <TABLE>.<ID>\nORDER BY SUB.<ID>\n']], ['How to get the current row number in an SQL Server 2000 query?'], 2], [(1742507, 0), [['Yes, absolutely.  For example:'], ['Or perhaps you mean something more like this, which is also valid:']], [[' select cnt, count(*) from\n( select department_id, count(*) as cnt\n  from employees\n  group by department_id\n)\ngroup by cnt;\n']], ['AUTO-Parametrized multiple SELECT'], 2], [(1742507, 1), [['Or perhaps you mean something more like this, which is also valid:'], ['-10000']], [[" select emp_name\nfrom employees\nwhere department_id in\n( select department_id\n  from departments\n  where location_id in\n  ( select location_id from locations\n    where country = 'US'\n  )\n);\n"]], ['AUTO-Parametrized multiple SELECT'], 2], [(1745616, 0), [['-10000'], ['or, if the counts are supposed to incorporate subject_id (just a guess), then']], [[' SELECT \n    subject_ID, \n    subject_name,\n    priority_count = (select count(test_id) from test_queue where priority_flag = 1),\n    locked_count = (select count(test_id) from test_queue where locked = 1)\nFROM Subjects\nORDER BY subject_name\n']], ['Consolidating a COUNT query'], 2], [(1745616, 1), [['or, if the counts are supposed to incorporate subject_id (just a guess), then'], ['-10000']], [[' SELECT \n    s.subject_ID, \n    s.subject_name,\n    priority_count = (select count(test_id) from test_queue t where priority_flag = 1 and t.subject_id = s.subject_id),\n    locked_count = (select count(test_id) from test_queue t where locked = 1 and t.subject_id = s.subject_id)\nFROM Subjects s\nORDER BY subject_name\n']], ['Consolidating a COUNT query'], 2], [(1747745, 0), [['One possibility would be to hold a computed column on table1 i.e.'], ["I don't know if DB2 supports computed (aka virtual) columns as such, but if not you can create a regular column and maintain it via a trigger.  The create the foreign key constraint:"]], [[' fieldx = (field1 || field2)\n']], ['How to put a constraint on two combined fields?'], 2], [(1747745, 1), [["I don't know if DB2 supports computed (aka virtual) columns as such, but if not you can create a regular column and maintain it via a trigger.  The create the foreign key constraint:"], ['Another possibility, of course, would be to modify your table design so that the keys are held consistently: if field1 and field2 are atomic values, then they should appear as such in table2, not as a concatenated value (which more or less breaks 1NF).']], [[' ALTER TABLE table1\n    ADD CONSTRAINT foo FOREIGN KEY (fieldx) REFERENCES table2 (fieldx);\n']], ['How to put a constraint on two combined fields?'], 2], [(1749337, 0), [['Now for the script:'], ['This will insert the russian characters ЙЖ']], [[" SQL> select * from v$nls_parameters where parameter = 'NLS_CHARACTERSET';\n\nPARAMETER          VALUE\n------------------ ------\nNLS_CHARACTERSET   UTF8\n\nSQL> create table street_points (data varchar2(10));\n\nTable created\n\nSQL> INSERT INTO street_points VALUES (chr(53401)||chr(53398));\n\n1 row inserted\n"]], ['Oracle Unicode Spooling'], 2], [(1749337, 1), [['This will insert the russian characters ЙЖ'], ['The file, opened with a text editor (jEdit in my case) with the correct character set (UTF-8) displays the characters correctly.']], [[' SQL> SPOOL STREET_POINT_THR.BQSV\nSQL> SELECT * FROM STREET_POINTS;\nðÖðû\nSQL> SPOOL OFF\n']], ['Oracle Unicode Spooling'], 2], [(1750001, 0), [['For huge joins, sometimes explicitly choosing a  loop join  speeds things up:'], ['EDIT: If both inputs are sorted (they should be, with the covering index), you can try a  MERGE JOIN :']], [[' SELECT EGM.Name, BioEntity.BioEntityId INTO AUX\nFROM EGM \nINNER LOOP JOIN BioEntity \n    ON EGM.name LIKE BioEntity.Name AND EGM.TypeId = BioEntity.TypeId\n']], ['SQL: Inner joining two massive tables'], 2], [(1750001, 1), [['EDIT: If both inputs are sorted (they should be, with the covering index), you can try a  MERGE JOIN :'], ['-10000']], [[' SELECT EGM.Name, BioEntity.BioEntityId INTO AUX\nFROM EGM \nINNER JOIN BioEntity \n    ON EGM.name LIKE BioEntity.Name AND EGM.TypeId = BioEntity.TypeId\nOPTION (MERGE JOIN)\n']], ['SQL: Inner joining two massive tables'], 2], [(1750883, 0), [['This works in many cases, (despite what the comments will say without trying it) because the optimiser will ignore the ISNULL bit. Only works for non-null columns'], ['Otherwise, conditional WHERE which is usually bad because OR can not be optimised']], [[' SELECT @site = NULLIF(@site, -1) ...\n\nSELECT * from table  \n  WHERE site = ISNULL(@site, site) ..\n']], ['SQL Server 2000 stored procedure branching with parameters'], 2], [(1750883, 1), [['Otherwise, conditional WHERE which is usually bad because OR can not be optimised'], ["Or separate stored procedures (don't think you want that either)"]], [[' SELECT * from table  \n  WHERE (@site = -1 OR site = @site) AND  (...\n']], ['SQL Server 2000 stored procedure branching with parameters'], 2], [(1753391, 0), [['Sorry for answering my own question. This is what I was after:'], ['This allows me to expand to an arbitrary number of cross joins, eg for combinations of 3 different categories:']], [[' SELECT\n  GROUP_CONCAT(Z.ID ORDER BY Z.ID)\nFROM\n  foo A CROSS JOIN foo B\nINNER JOIN\n  (SELECT ID FROM foo) Z\nON\n  Z.ID = A.ID OR Z.ID = B.ID\nWHERE\n  A.Category = 1 AND B.Category = 2\nGROUP BY\n  A.ID, B.ID\n']], ['MySQL Field Concatenation'], 2], [(1753391, 1), [['This allows me to expand to an arbitrary number of cross joins, eg for combinations of 3 different categories:'], ['Thanks to all those who answered.']], [[' SELECT\n  GROUP_CONCAT(Z.ID ORDER BY Z.ID)\nFROM\n  foo A CROSS JOIN foo B CROSS JOIN foo C\nINNER JOIN\n  (SELECT ID FROM foo) Z\nON\n  Z.ID = A.ID OR Z.ID = B.ID OR Z.ID = C.ID\nWHERE\n  A.Category = 1 AND B.Category = 2 AND C.Category = 3\nGROUP BY\n  A.ID, B.ID, C.ID\n']], ['MySQL Field Concatenation'], 2], [(1754674, 0), [['This is the query that merges two rows based on a foreign key (breaks the rule of 1NF).'], ['This is what i get before the query:']], [[" DECLARE @StrengthID INT\nDECLARE @GenericDrugDetailsID INT\nDEClARE @DosageStrength INT\nDECLARE @PresentationUnitID INT\nDECLARE @DosageFormID INT\nDECLARE @RouteOfAdministrationID INT\n\nDECLARE @nCombinations INT\nDECLARE @maxCombinations INT\nDECLARE @CurrCombinationTotal INT\nDECLARE @CurrGenericDrugDetailsID INT\n\nDECLARE @PName VARCHAR(100)\nDECLARE @DName VARCHAR(100)\nDECLARE @DNameAbbrev VARCHAR(50)\nDECLARE @RName VARCHAR(100)\n\nDECLARE @GetGenericDrugStrengths CURSOR\n\nSET @nCombinations = 0\nSET @CurrGenericDrugDetailsID = 0\n\n--Get the maximum number of combinations\n--=====================================================================================\nSET @maxCombinations = (SELECT TOP 1 COUNT(GenericDrugDetailsID) AS maxCombinations\nFROM Pharmacy_Strengths\nGROUP BY GenericDrugDetailsID\nORDER BY maxCombinations desc)\n--=====================================================================================\n\n--Create a temporary temp to hold the strengths\n--=====================================================================================\nDECLARE @tmpSQL VARCHAR(max)\nSET @tmpSQL = ''\n\nIF  EXISTS (SELECT * FROM tempdb.sys.tables WHERE NAME LIKE '%tmpStrengths%')\nDROP TABLE #tmpStrengths\n\nCREATE TABLE #tmpStrengths (\n         StrengthID INT NOT NULL,\n         GenericDrugDetailsID INT NOT NULL,\n         NumberOfCombinations INT NOT NULL,\n         DosageStrength1 INT NOT NULL,\n         PresentationUnitID1 INT NOT NULL,\n         PresentationUnitName1 VARCHAR(100) NOT NULL,\n         DosageFormID1 INT NOT NULL,\n         DosageFormName1 VARCHAR(100) NOT NULL,\n         DosageFormNameAbbrev1 VARCHAR(50) NULL,\n         RouteOfAdministrationID1 INT NOT NULL,\n         RouteOfAdministrationName1 VARCHAR(100) NOT NULL);\n\n             IF (@maxCombinations > 1)\n             BEGIN\n\n                 DECLARE @counter int\n                 SET @counter = 1                \n\n                 WHILE @counter < @maxCombinations\n                 BEGIN\n                    SET @counter = @counter + 1\n                    SET @tmpSQL = @tmpSQL + 'ALTER TABLE #tmpStrengths ADD StrengthID' + CAST(@counter AS VARCHAR(50)) + ' INT NULL;'\n                    SET @tmpSQL = @tmpSQL + 'ALTER TABLE #tmpStrengths ADD DosageStrength' + CAST(@counter AS VARCHAR(50)) + ' INT NULL;'\n                    SET @tmpSQL = @tmpSQL + 'ALTER TABLE #tmpStrengths ADD PresentationUnitID' + CAST(@counter AS VARCHAR(50)) + ' INT NULL; '\n                    SET @tmpSQL = @tmpSQL + 'ALTER TABLE #tmpStrengths ADD PresentationUnitName' + CAST(@counter AS VARCHAR(100)) + ' VARCHAR(100) NULL; '\n                    SET @tmpSQL = @tmpSQL + 'ALTER TABLE #tmpStrengths ADD DosageFormID' + CAST(@counter AS VARCHAR(50)) + ' INT NULL; '\n                    SET @tmpSQL = @tmpSQL + 'ALTER TABLE #tmpStrengths ADD DosageFormName' + CAST(@counter AS VARCHAR(100)) + ' VARCHAR(100) NULL; '\n                    SET @tmpSQL = @tmpSQL + 'ALTER TABLE #tmpStrengths ADD DosageFormNameAbbrev' + CAST(@counter AS VARCHAR(50)) + ' VARCHAR(50) NULL; '\n                    SET @tmpSQL = @tmpSQL + 'ALTER TABLE #tmpStrengths ADD RouteOfAdministrationID' + CAST(@counter AS VARCHAR(50)) + ' INT NULL; '\n                    SET @tmpSQL = @tmpSQL + 'ALTER TABLE #tmpStrengths ADD RouteOfAdministrationName' + CAST(@counter AS VARCHAR(100)) + ' VARCHAR(100) NULL; '\n                 END\n             END\nEXEC(@tmpSQL)\n--====================================================================================\nSET @tmpSQL = ''\nSET @GetGenericDrugStrengths = CURSOR FOR \n    SELECT StrengthID, GenericDrugDetailsID, DosageStrength, PresentationUnitID, DosageFormID, RouteOfAdministrationID\n    FROM Pharmacy_Strengths\n    ORDER BY GenericDrugDetailsID ASC\n\nOPEN @GetGenericDrugStrengths\n    FETCH NEXT FROM @GetGenericDrugStrengths INTO @StrengthID, @GenericDrugDetailsID, @DosageStrength, @PresentationUnitID, @DosageFormID, @RouteOfAdministrationID\n\n    WHILE @@FETCH_STATUS = 0\n    BEGIN\n\n        --Get the values of Presentation Unit, Dosage Form, and Route of Administration.\n        SELECT @PName = PresentationUnitName\n        FROM Pharmacy_PresentationUnit\n        WHERE PresentationUnitID = @PresentationUnitID\n\n        SELECT @DName = DosageFormName, @DNameAbbrev = DosageFormNameAbbrev\n        FROM Pharmacy_DosageForm\n        WHERE DosageFormID = @DosageFormID\n\n        SELECT @RName = RouteOfAdministrationName\n        FROM Pharmacy_RouteOfAdministration\n        WHERE RouteOfAdministrationID = @RouteOfAdministrationID\n\n        IF (@GenericDrugDetailsID = @CurrGenericDrugDetailsID)\n            BEGIN\n                SET @nCombinations = (@nCombinations + 1)\n\n                --Alter the temporary table now\n                SET @tmpSQL = @tmpSQL + 'UPDATE #tmpStrengths\n                    SET StrengthID' + CAST(@nCombinations AS VARCHAR(50)) + ' = ' + CAST(@StrengthID AS VARCHAR(50)) + ',\n                        DosageStrength' + CAST(@nCombinations AS VARCHAR(50)) + ' = ' + CAST(@DosageStrength AS VARCHAR(50)) + ',\n                        PresentationUnitID' + CAST(@nCombinations AS VARCHAR(50)) + ' = ' + CAST(@PresentationUnitID AS VARCHAR(50)) + ',\n                        PresentationUnitName' + CAST(@nCombinations AS VARCHAR(50)) + ' = ''' + CAST(@PName AS VARCHAR(100)) + ''',\n                        DosageFormID' + CAST(@nCombinations AS VARCHAR(50)) + ' = ' + CAST(@DosageFormID AS VARCHAR(50)) + ',\n                        DosageFormName' + CAST(@nCombinations AS VARCHAR(50)) + ' = ''' + CAST(@DName AS VARCHAR(100)) + ''',\n                        DosageFormNameAbbrev' + CAST(@nCombinations AS VARCHAR(50)) + ' = ''' + CAST(@DNameAbbrev AS VARCHAR(50)) + ''',\n                        RouteOfAdministrationID' + CAST(@nCombinations AS VARCHAR(50)) + ' = ' + CAST(@RouteOfAdministrationID AS VARCHAR(50)) + ',\n                        RouteOfAdministrationName' + CAST(@nCombinations AS VARCHAR(50)) + ' = ''' + CAST(@RName AS VARCHAR(100)) + '''\n                    WHERE GenericDrugDetailsID = ' + CAST(@GenericDrugDetailsID AS VARCHAR(50));\n                EXEC(@tmpSQL);\n            END\n        ELSE\n            BEGIN\n                SET @nCombinations = 1\n                SET @CurrGenericDrugDetailsID = @GenericDrugDetailsID;\n\n                --Get the total number of combinations in advance\n                SET @CurrCombinationTotal = (SELECT COUNT(GenericDrugDetailsID)\n                FROM Pharmacy_Strengths\n                WHERE GenericDrugDetailsID = @GenericDrugDetailsID\n                GROUP BY GenericDrugDetailsID);\n\n                --Insert in the temporary table now\n                INSERT INTO #tmpStrengths (StrengthID, GenericDrugDetailsID, NumberOfCombinations, \n                                    DosageStrength1, PresentationUnitID1, PresentationUnitName1, DosageFormID1, \n                                    DosageFormName1, DosageFormNameAbbrev1, RouteOfAdministrationID1, RouteOfAdministrationName1)\n                VALUES (@StrengthID, @GenericDrugDetailsID, @CurrCombinationTotal, @DosageStrength, \n                        @PresentationUnitID, @PName, @DosageFormID, @DName, @DNameAbbrev, @RouteOfAdministrationID, @RName)\n            END\n\n        --PRINT CAST(@StrengthID AS varchar(50)) + ' ' + CAST(@GenericDrugDetailsID AS varchar(50)) + ' ' + CAST(@DosageStrength AS varchar(50)) + ' ' + CAST(@PresentationUnitID AS varchar(50)) + ' ' + CAST(@DosageFormID as varchar(50)) + ' ' + CAST(@RouteOfAdministrationID as varchar(50))\n        FETCH NEXT FROM @GetGenericDrugStrengths INTO @StrengthID, @GenericDrugDetailsID, @DosageStrength, @PresentationUnitID, @DosageFormID, @RouteOfAdministrationID\n    END\n    --SELECT * from #tmpStrengths\nCLOSE @GetGenericDrugStrengths\nDEALLOCATE @GetGenericDrugStrengths\n\nSELECT a.GenericDrugID, \n       a.GenericDrugName,\n       f.*,\n       a.InsertDate, \n       a.InsertFKUserAccountId, \n       a.UpdateDate, \n       a.UpdateFKUserAccountId, \n       a.Version\nFROM Pharmacy_GenericDrug a\nINNER JOIN Pharmacy_ControlStatus d ON d.ControlStatusID = a.ControlStatusID\nINNER JOIN Pharmacy_GenericDrugDetails e ON e.GenericDrugID = a.GenericDrugID\nINNER JOIN #tmpStrengths f ON f.GenericDrugDetailsID = e.GenericDrugDetailsID\nORDER BY GenericDrugName ASC\n"]], ['How do i merge two or more rows based on their foreign key?'], 4], [(1754674, 1), [['This is what i get before the query:'], ['This is what i get now:']], [[' GenericDrugID                        GenericDrugName                                                                                      DrugSubClassificationID              DrugSubClassificationName                                                                                                                                                                                DrugClassificationID                 DrugClassificationName                                                                                                                                                                                   GenericDrugDetailsID DosageStrength PresentationUnitID PresentationUnitName                                                                                 DosageFormID DosageFormName                                                                                       DosageFormNameAbbrev                               RouteOfAdministrationID RouteOfAdministrationName                                                                            ControlStatusID ControlStatusName                                                                                    InsertDate              InsertFKUserAccountId UpdateDate              UpdateFKUserAccountId Version\nn83222B76-6690-42F2-BDAD-BE5BD2D19D3B Generic Drug One                                                                                     8ED135ED-5FDB-419A-9C7D-E788A40EAEAC Drug Subclassification Two                                                                                                                                                                               61D618F3-A38A-4416-B0A4-FB29AD614B4B Drug Classification One                                                                                                                                                                                  2                    300            1                  ml                                                                                                   2            Pill                                                                                                 Pill                                               1                       Mouth                                                                                                3               Narcotic                                                                                             2009-10-25 10:10:06.077 1                     2009-11-15 07:06:03.733 1                     2009-10-25 10:10:06.077\n83222B76-6690-42F2-BDAD-BE5BD2D19D3B Generic Drug One                                                                                     8ED135ED-5FDB-419A-9C7D-E788A40EAEAC Drug Subclassification Two                                                                                                                                                                               61D618F3-A38A-4416-B0A4-FB29AD614B4B Drug Classification One                                                                                                                                                                                  2                    400            1                  ml                                                                                                   2            Pill                                                                                                 Pill                                               1                       Mouth                                                                                                3               Narcotic                                                                                             2009-10-25 10:10:06.077 1                     2009-11-15 07:06:03.733 1                     2009-10-25 10:10:06.077\n83222B76-6690-42F2-BDAD-BE5BD2D19D3B Generic Drug One                                                                                     8ED135ED-5FDB-419A-9C7D-E788A40EAEAC Drug Subclassification Two                                                                                                                                                                               61D618F3-A38A-4416-B0A4-FB29AD614B4B Drug Classification One                                                                                                                                                                                  4                    500            1                  ml                                                                                                   2            Pill                                                                                                 Pill                                               2                       Injection                                                                                            3               Narcotic                                                                                             2009-10-25 10:10:06.077 1                     2009-11-15 07:06:03.733 1                     2009-10-25 10:10:06.077\nA1D86FD2-2E65-4F2A-B7A2-7B083B71AB9B Generic Drug Two                                                                                     9925D762-34B8-43B4-A96B-78374F0081B0 Drug Subclassification One                                                                                                                                                                               C10E9F1B-3985-4DB8-8EF8-A6C82B004B9F Drug Classification Two                                                                                                                                                                                  1                    200            1                  ml                                                                                                   2            Pill                                                                                                 Pill                                               1                       Mouth                                                                                                2               None                                                                                                 2009-10-25 10:47:10.623 1                     2009-11-15 04:02:47.890 1                     2009-10-25 10:47:10.623\n']], ['How do i merge two or more rows based on their foreign key?'], 4], [(1754674, 2), [['This is what i get now:'], ['For those interested these are the table structures:']], [[' GenericDrugID                        GenericDrugName                                                                                      DrugSubClassificationID              DrugSubClassificationName                                                                                                                                                                                DrugClassificationID                 DrugClassificationName                                                                                                                                                                                   StrengthID  GenericDrugDetailsID NumberOfCombinations DosageStrength1 PresentationUnitID1 PresentationUnitName1                                                                                DosageFormID1 DosageFormName1                                                                                      DosageFormNameAbbrev1                              RouteOfAdministrationID1 RouteOfAdministrationName1                                                                           StrengthID2 DosageStrength2 PresentationUnitID2 PresentationUnitName2                                                                                DosageFormID2 DosageFormName2                                                                                      DosageFormNameAbbrev2                              RouteOfAdministrationID2 RouteOfAdministrationName2                                                                           InsertDate              InsertFKUserAccountId UpdateDate              UpdateFKUserAccountId Version\nn83222B76-6690-42F2-BDAD-BE5BD2D19D3B Generic Drug One                                                                                     8ED135ED-5FDB-419A-9C7D-E788A40EAEAC Drug Subclassification Two                                                                                                                                                                               61D618F3-A38A-4416-B0A4-FB29AD614B4B Drug Classification One                                                                                                                                                                                  2           2                    2                    300             1                   ml                                                                                                   2             Pill                                                                                                 Pill                                               1                        Mouth                                                                                                3           400             1                   ml                                                                                                   2             Pill                                                                                                 Pill                                               1                        Mouth                                                                                                2009-10-25 10:10:06.077 1                     2009-11-15 07:06:03.733 1                     2009-10-25 10:10:06.077\n83222B76-6690-42F2-BDAD-BE5BD2D19D3B Generic Drug One                                                                                     8ED135ED-5FDB-419A-9C7D-E788A40EAEAC Drug Subclassification Two                                                                                                                                                                               61D618F3-A38A-4416-B0A4-FB29AD614B4B Drug Classification One                                                                                                                                                                                  4           4                    1                    500             1                   ml                                                                                                   2             Pill                                                                                                 Pill                                               2                        InjectionnA1D86FD2-2E65-4F2A-B7A2-7B083B71AB9B Generic Drug Two                                                                                     9925D762-34B8-43B4-A96B-78374F0081B0 Drug Subclassification One                                                                                                                                                                               C10E9F1B-3985-4DB8-8EF8-A6C82B004B9F Drug Classification Two                                                                                                                                                                                  1           1                    1                    200             1                   ml                                                                                                   2             Pill                                                                                                 Pill                                               1                        Mouthn']], ['How do i merge two or more rows based on their foreign key?'], 4], [(1754674, 3), [['For those interested these are the table structures:'], ['-10000']], [['     CREATE TABLE [dbo].[Pharmacy_GenericDrug](\n        [GenericDrugID] [uniqueidentifier] NOT NULL CONSTRAINT [DF__Pharmacy___Gener__4E53A1AA]  DEFAULT (newid()),\n        [GenericDrugName] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n        [DrugSubClassificationID] [uniqueidentifier] NOT NULL,\n        [ControlStatusID] [int] NOT NULL,\n        [InsertDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_GenericDrug_InsertDate]  DEFAULT (getdate()),\n        [InsertFKUserAccountId] [int] NOT NULL,\n        [UpdateDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_GenericDrug_UpdateDate]  DEFAULT (getdate()),\n        [UpdateFKUserAccountId] [int] NOT NULL,\n        [Version] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_GenericDrug_Version]  DEFAULT (getdate())\n    )\n\n\nCREATE TABLE [dbo].[Pharmacy_GenericDrugDetails](\n    [GenericDrugDetailsID] [int] IDENTITY(1,1) NOT NULL,\n    [GenericDrugID] [uniqueidentifier] NOT NULL,\n    [InsertDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_GenericDrugDetails_InsertDate]  DEFAULT (getdate()),\n    [InsertFKUserAccountId] [int] NOT NULL,\n    [UpdateDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_GenericDrugDetails_UpdateDate]  DEFAULT (getdate()),\n    [UpdateFKUserAccountId] [int] NOT NULL,\n    [Version] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_GenericDrugDetails_Version]  DEFAULT (getdate())\n)\n\n\nCREATE TABLE [dbo].[Pharmacy_Strengths](\n    [StrengthID] [int] IDENTITY(1,1) NOT NULL,\n    [GenericDrugDetailsID] [int] NOT NULL,\n    [DosageStrength] [int] NOT NULL,\n    [PresentationUnitID] [int] NOT NULL,\n    [DosageFormID] [int] NOT NULL,\n    [RouteOfAdministrationID] [int] NOT NULL,\n    [InsertDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_StrengthCombination_InsertDate]  DEFAULT (getdate()),\n    [InsertFKUserAccountId] [int] NOT NULL,\n    [UpdateDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_StrengthCombination_UpdateDate]  DEFAULT (getdate()),\n    [UpdateFKUserAccountId] [int] NOT NULL,\n    [Version] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_StrengthCombination_Version]  DEFAULT (getdate())\n)\n\n\n\nCREATE TABLE [dbo].[Pharmacy_PresentationUnit](\n    [PresentationUnitID] [int] IDENTITY(1,1) NOT NULL,\n    [PresentationUnitName] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n    [InsertDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_PresentationUnit_InsertDate]  DEFAULT (getdate()),\n    [InsertFKUserAccountId] [int] NOT NULL,\n    [UpdateDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_PresentationUnit_UpdateDate]  DEFAULT (getdate()),\n    [UpdateFKUserAccountId] [int] NOT NULL,\n    [Version] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_PresentationUnit_Version]  DEFAULT (getdate())\n)\n\n\n\nCREATE TABLE [dbo].[Pharmacy_DosageForm](\n    [DosageFormID] [int] IDENTITY(1,1) NOT NULL,\n    [DosageFormName] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n    [DosageFormNameAbbrev] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n    [InsertDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_DosageForm_InsertDate]  DEFAULT (getdate()),\n    [InsertFKUserAccountId] [int] NOT NULL,\n    [UpdateDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_DosageForm_UpdateDate]  DEFAULT (getdate()),\n    [UpdateFKUserAccountId] [int] NOT NULL,\n    [Version] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_DosageForm_Version]  DEFAULT (getdate())\n)\n\n\nCREATE TABLE [dbo].[Pharmacy_RouteOfAdministration](\n    [RouteOfAdministrationID] [int] IDENTITY(1,1) NOT NULL,\n    [RouteOfAdministrationName] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\n    [InsertDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_RouteOfAdministration_InsertDate]  DEFAULT (getdate()),\n    [InsertFKUserAccountId] [int] NOT NULL,\n    [UpdateDate] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_RouteOfAdministration_UpdateDate]  DEFAULT (getdate()),\n    [UpdateFKUserAccountId] [int] NOT NULL,\n    [Version] [datetime] NOT NULL CONSTRAINT [DF_Pharmacy_RouteOfAdministration_Version]  DEFAULT (getdate())\n)\n']], ['How do i merge two or more rows based on their foreign key?'], 4], [(1756293, 0), [['If you are using SQL 2005 or above, the following should do the job for any number of rows:'], ['If you want a solution for SQL 2000 or ANSI, try this:']], [[' declare @numBuckets;\nselect @numBuckets = 3;\n\n;with nameBase as\n(\n    select  ntile(@numBuckets) over(order by ID) as bucket,\n            NAME, ID\n    from    @NAMES\n),\nnameRows as\n(\n    select  row_number() over(partition by bucket order by ID) as rn,\n            NAME, ID\n    from    nameBase\n\n)\nselect  n.ID, case when rn = 1 then n.NAME else null end as NAME\nfrom    nameRows n\norder by ID;\n']], ['Split the output rows in groups in SQL Server'], 2], [(1756293, 1), [['If you want a solution for SQL 2000 or ANSI, try this:'], ['-10000']], [[' declare @numRecs int, @numBuckets int, @recsPerBucket int;\nselect @numRecs = count(*) from @NAMES;\nselect @numBuckets = 3;\nselect @recsPerBucket = @numRecs / @numBuckets;\n\nselect  n.ID, case when d1.minIdInBucket is null then null else n.NAME end as NAME\nfrom    @NAMES n\nleft join (\n            select  min(n2.ID) as minIdInBucket\n            from    (\n                        select  n1.ID, n1.NAME,\n                                (\n                                    select  count(*) / @recsPerBucket\n                                    from    @NAMES n2\n                                    where   n2.ID < n1.ID\n                                ) as bucket\n                        from    @NAMES n1\n                    ) n2\n            group by n2.bucket\n        ) d1\non      n.ID = d1.minIdInBucket\norder by n.ID;\n']], ['Split the output rows in groups in SQL Server'], 2], [(1756373, 0), [['Try this for the SELECT'], ["This can't be char(5), of course, so what is it"]], [[" ...REPLACE(Value, ' ', 'ZZZZZZZZZ')\n"]], ['CHAR behavior with trailing spaces'], 2], [(1756373, 1), [["This can't be char(5), of course, so what is it"], ['8000, max of varchar...']], [[" ...SQL_VARIANT_PROPERTY (REPLACE(Value, ' ', 'ZZZZZZZZZ'), 'MaxLength')...\n"]], ['CHAR behavior with trailing spaces'], 2], [(1757260, 0), [['-10000'], ['By adding the ordering condition, you can preserve the tree order:']], [[' WITH    q AS \n        (\n        SELECT  *\n        FROM    mytable\n        WHERE   ParentID IS NULL -- this condition defines the ultimate ancestors in your chain, change it as appropriate\n        UNION ALL\n        SELECT  m.*\n        FROM    mytable m\n        JOIN    q\n        ON      m.parentID = q.PersonID\n        )\nSELECT  *\nFROM    q\n']], ['Simplest way to do a recursive self-join?'], 2], [(1757260, 1), [['By adding the ordering condition, you can preserve the tree order:'], ['By changing the  ORDER BY  condition you can change the ordering of the siblings.']], [[" WITH    q AS \n        (\n        SELECT  m.*, CAST(ROW_NUMBER() OVER (ORDER BY m.PersonId) AS VARCHAR(MAX)) COLLATE Latin1_General_BIN AS bc\n        FROM    mytable m\n        WHERE   ParentID IS NULL\n        UNION ALL\n        SELECT  m.*,  q.bc + '.' + CAST(ROW_NUMBER() OVER (PARTITION BY m.ParentID ORDER BY m.PersonID) AS VARCHAR(MAX)) COLLATE Latin1_General_BIN\n        FROM    mytable m\n        JOIN    q\n        ON      m.parentID = q.PersonID\n        )\nSELECT  *\nFROM    q\nORDER BY\n        bc\n"]], ['Simplest way to do a recursive self-join?'], 2], [(1758686, 0), [["You'll have to do this, it can't be parameterised"], ['Edit: There is another way which I used back in my pure DBA days']], [[" ....\nSET @Sql = 'UPDATE ' + @server_name_param + '.dba_sandbox.dbo.SomeTable SET SomeCol=''data'''\n....\n"]], ['Fully qualified table names with SP_ExecuteSql to access remote server'], 2], [(1758686, 1), [['Edit: There is another way which I used back in my pure DBA days'], ['sp_setnetname  is there from SQL Server 2000 to 2008']], [[" EXEC sp_setnetname 'AdhocServer', @SERVER_NAME\nUPDATE AdhocServer.dba_sandbox.dbo.SomeTable SET SomeCol 'data'\nEXEC sp_setnetname 'AdhocServer', 'MeaninglessValue'\n"]], ['Fully qualified table names with SP_ExecuteSql to access remote server'], 2], [(1759029, 0), [["You don't really want to do something like a foreach. Don't think of SQL as procedural, like most code (where you do one thing, then a second, and so on). You need to think of it as set based, where do you something to large chunks that meet certain requirements. Something like:"], ['The subquery should just select all the data you want to insert, perhaps something like:']], [[' INSERT INTO term_nodes (tid, x, nid) -- these are the field names\n<subquery that selects all the data>\n']], ['Foreach in SQL?'], 3], [(1759029, 1), [['The subquery should just select all the data you want to insert, perhaps something like:'], ['So putting it all together, you get:']], [[' SELECT nodeId, 4, termId FROM nodes WHERE contentType = X\n']], ['Foreach in SQL?'], 3], [(1759029, 2), [['So putting it all together, you get:'], ['No need to try to run through each element in the subquery and insert them one at a time, just do it all at once. ']], [[' INSERT INTO term_nodes (tid, x, nid)\nSELECT nodeId, 4, termId FROM nodes WHERE contentType = X\n']], ['Foreach in SQL?'], 3], [(1759476, 0), [['Similarly, this may use the index (in Oracle) '], ["but this wouldn't "]], [[" select * from Table where x like 'some%'\n"]], ['Database Index not used if the where criteria is !=?'], 2], [(1759476, 1), [["but this wouldn't "], ['Also,\n select * from Table where x between 1 and 10   will use the index']], [[" select * from Table where x like '%thing%'\n"]], ['Database Index not used if the where criteria is !=?'], 2], [(1762006, 0), [['Use PRINT'], ['For the CTE you can try']], [[' DECLARE @A INT\nSET @A = 33\nWHILE @A < 55\nBEGIN\nPRINT @A\nSET @A = @A + 1\nEND\nGO\n']], ['Looping and printing without messages'], 2], [(1762006, 1), [['For the CTE you can try'], ['-10000']], [[' DECLARE @A INT,\n        @End INT\nSET @A = 33\nSET @End = 55\n\n;WITH Selected AS (\n        SELECT  @A Val\n        UNION ALL\n        SELECT  Val + 1\n        FROM    Selected\n        WHERE   Val < @End\n)\nSELECT *\nFROM Selected\n']], ['Looping and printing without messages'], 2], [(1763989, 0), [["The numerator is easy, it's just the video_views column.  The denominator is"], ['So, put it together and you get:']], [[' SELECT MAX(video_views) FROM video_public\n']], ['SELECT command to calculate percentage'], 2], [(1763989, 1), [['So, put it together and you get:'], ['That should produce 100 for the most-viewed video(s), and lower percentages for other videos, down to 0 for anything never viewed.']], [[' SELECT video_title, ((video_views * 100) / (SELECT MAX(video_views) \nFROM video_public)) FROM video_public\n']], ['SELECT command to calculate percentage'], 2], [(1765097, 0), [['How do you want to change  Tab1 ?  If you wanted to increment it, for sake of argument, you could do this:'], ['A cleaner, neater way is to create a numbers table (code below untested):']], [[' declare int @i\nset @i = 0\nwhile (@i < 1000)\nbegin\n    INSERT INTO MyTable (TabID, col1, col2)\n    SELECT TabID+1, col1, col2\n    FROM OtherTable\n    WHERE ParentID = 1 -- assuming only one row with that ID\n\n    set @i = @i+1\nend\n']], ['SQL Copy Row for a list, change one column value'], 2], [(1765097, 1), [['A cleaner, neater way is to create a numbers table (code below untested):'], ['-10000']], [[' DECLARE @numbers TABLE (n int)\ndeclare int @i\nset @i = 0\nwhile (@i < 1000)\nbegin\n    INSERT INTO @numbers (n) VALUES (i)\n    set @i = @i+1\nend\n\nINSERT INTO MyTable (TabID, col1, col2)\nSELECT TabID+1, col1, col2\nFROM OtherTable\nCROSS JOIN @numbers n\nWHERE ParentID = 1 -- assuming only one row with that ID\n']], ['SQL Copy Row for a list, change one column value'], 2], [(1765691, 0), [['-10000'], ["That ought to work. You don't want to group by ID and TYPE because you're not actually trying to perform any sort of aggregation on the rows matching a given ID and TYPE. If you only cared about one column (say DATE) you could say"]], [[" SELECT * FROM (SELECT ID, TYPE FROM DATA_TABLE WHERE STATUS = 'NEW' ORDER BY PRIORITY, DATE) WHERE ROWNUM = 1\n"]], ['PL/SQL to Select a Partition Window of Data'], 2], [(1765691, 1), [["That ought to work. You don't want to group by ID and TYPE because you're not actually trying to perform any sort of aggregation on the rows matching a given ID and TYPE. If you only cared about one column (say DATE) you could say"], ["and avoid sorting the whole table. But I don't see how to make that work here. "]], [[' SELECT ID, TYPE FROM DATA_TABLE WHERE DATE = (SELECT MIN(DATE) FROM DATA_TABLE) AND ROWNUM = 1\n']], ['PL/SQL to Select a Partition Window of Data'], 2], [(1766057, 0), [["You can't defer constraint checks in SQL Server over multiple statements (unless you DISABLE) so you have to avoid the conflict or do it in one statement"], ['or, more conventionally (in a transaction this one)']], [[" update\n    regionkey \nset\n    region= CASE areaid WHEN 101 THEN 'ILLI' ELSE 'MICH' END, \n    locale= CASE areaid WHEN 101 THEN 'CHIC' ELSE 'DETR' END\nwhere\n    areaid IN (101, 102); \n"]], ['Swapping two DB rows without violating constraints'], 3], [(1766057, 1), [['or, more conventionally (in a transaction this one)'], ['Edit: Why not swap keys not values? It usually achieves the sane result unless areaid has some meaning']], [[" update regionkey \n     set region='AAAA', locale='BBBB' where areaid = 101;\nupdate regionkey \n     set region='MICH', locale='DETR' where areaid = 102;\nupdate regionkey \n     set region='ILLI', locale='CHIC' where areaid = 101;\n"]], ['Swapping two DB rows without violating constraints'], 3], [(1766057, 2), [['Edit: Why not swap keys not values? It usually achieves the sane result unless areaid has some meaning'], ['-10000']], [[' update\n    regionkey \nset\n    areaid = 203 - areaid \nwhere\n    areaid IN (101, 102); \n']], ['Swapping two DB rows without violating constraints'], 3], [(1766532, 0), [['The best way to do this is with a "helper table" like so:'], ['the result is:']], [[" DECLARE @numbers TABLE (number int)\nDECLARE @i int \nSET @i = 1\nWHILE (@i < 1001)\nBEGIN    \nINSERT INTO @numbers (number) VALUES (@i)    \nSET @i = @i+1\nEND\n\n\nDECLARE @TestString VARCHAR(200)\nSET @TestString = 'andy,john,mark'\nDECLARE @RowDelimiter VARCHAR(1)\nSET @RowDelimiter=','\n\nSELECT SUBSTRING(@TestString+@RowDelimiter, number, \n    CHARINDEX(@RowDelimiter, @TestString+@RowDelimiter, number) - number) \nFROM @numbers \nWHERE number <= LEN(@TestString) \nAND SUBSTRING(@RowDelimiter+ @TestString, number, 1) = @RowDelimiter\nORDER BY number \n-- helper table technique: bill@creaticle.com\n"]], ['Search if a string word exists between two different tables in a comma-delimited field'], 2], [(1766532, 1), [['the result is:'], ['Once you have the two temporary tables, then do a FULL OUTER JOIN and include your "found in both" column with a set value. You\'ll get the NULL value for names not found in both - and you can treat the NULL as the "False" value.']], [[' andy\njohn\nmark\n']], ['Search if a string word exists between two different tables in a comma-delimited field'], 2], [(1766905, 0), [['You are right - there is no reason to use:'], ['...because if  b.foo  is NULL, you might as well just use:']], [[' SELECT COALESCE(b.Foo, NULL)\n']], ['COALESCE with NULL'], 2], [(1766905, 1), [['...because if  b.foo  is NULL, you might as well just use:'], ['...assuming that you  want  to know if the value is null.']], [[' SELECT b.foo\n']], ['COALESCE with NULL'], 2], [(1767040, 0), [['Try out:'], ["Otherwise, you can work out subsets to delete, based on your table data. For example, if there's a field (hopefully indexed) containing last names:"]], [[' truncate table tblname\n']], ['Delete on batch'], 2], [(1767040, 1), [["Otherwise, you can work out subsets to delete, based on your table data. For example, if there's a field (hopefully indexed) containing last names:"], ['Note that this is just an example. You can also use things like']], [[" delete from tblname where lastname like 'A%'\n"]], ['Delete on batch'], 2], [(1767178, 0), [["Have it prompt you for the value.  Since you use the same variable many times you'll want to use the && operator."], ['Alternatively you could set it before you ran your SQL.']], [[" \n    SQL> SELECT &&var, &&var FROM Dual;\n    Enter value for var: 'PUMPKIN'\n    old   1: SELECT &&var, &&var FROM Dual\n    new   1: SELECT 'PUMPKIN', 'PUMPKIN' FROM Dual\n\n    'PUMPKI 'PUMPKI\n    ------- -------\n    PUMPKIN PUMPKIN\n"]], ['PL/SQL Query with Variables'], 2], [(1767178, 1), [['Alternatively you could set it before you ran your SQL.'], ['-10000']], [[" \n    SQL> VARIABLE new_var VARCHAR2(20);\n    SQL> EXECUTE :new_var := 'PUMPKIN PIE';\n\n    PL/SQL procedure successfully completed.\n\n    SQL> SELECT :new_var, :new_var FROM DUAL;\n\n    :NEW_VAR                         :NEW_VAR\n    -------------------------------- --------------------------------\n    PUMPKIN PIE                      PUMPKIN PIE\n"]], ['PL/SQL Query with Variables'], 2], [(1769648, 0), [['If you want to add a and b and either may be null, you could use coalesce, which returns the first non-null parameter you pass it:'], ['If you want the answer to be 0 rather than null if both a and b are null, you can pass 0 as the last parameter:']], [[' coalesce(a+b, a, b)\n']], ['Addition with NULL values'], 2], [(1769648, 1), [['If you want the answer to be 0 rather than null if both a and b are null, you can pass 0 as the last parameter:'], ['Do consider  @erwins answer  -  null  might not be the right thing to be using.']], [[' coalesce(a+b, a, b, 0)\n']], ['Addition with NULL values'], 2], [(1769931, 0), [['Try this:'], ['If you are going to process it with some program, why not just get:']], [[' select A, B, C\nfrom test x\nwhere not exists (select *\n                  from test y\n                  where y.A = x.A\n                        and (y.B < x.B or (y.B = x.B and y.C < x.C))\norder by A\n']], ['Select uniques, and one of the doubles'], 4], [(1769931, 1), [['If you are going to process it with some program, why not just get:'], ['and then do something like:']], [[' select A, B, C from test order by A, B, C\n']], ['Select uniques, and one of the doubles'], 4], [(1769931, 2), [['and then do something like:'], ["I don't know PHP but I guess it would be something like this:"]], [[' prev_a = None\nfor a, b, c in get_query_result():\n    if a != prev_a:\n        prev_a = a\n        yield (a, b, c)\n']], ['Select uniques, and one of the doubles'], 4], [(1769931, 3), [["I don't know PHP but I guess it would be something like this:"], ['-10000']], [[' $query = "SELECT a,b,c FROM test ORDER BY a,b,c";\n$result = odbc_exec($connect, $query);\n$prev_a = NULL;  # I don\'t know what you would normally use here in PHP\nwhile (odbc_fetch_row($result)) {\n  $a = odbc_result($result, 1);\n  if (is_null($prev_a) or $a != $prev_a) { \n    $b = odbc_result($result, 2);\n    $c = odbc_result($result, 3);\n    print("A = $a, B = $b, C = $c\\n");\n    $prev_a = $a;\n  }\n}\n']], ['Select uniques, and one of the doubles'], 4], [(1770032, 0), [['In case oracle comes up with a bad execution plan and you really really have to tell it which index to use (happens very seldom, but it happens), you can user optimizer hints:'], ['But that should be your last resort. Before you even try to do it that way, use ']], [[' SELECT /*+ INDEX(mytable myindex) */ foobar from mytable\n']], ['Using Index in oracle'], 2], [(1770032, 1), [['But that should be your last resort. Before you even try to do it that way, use '], ['to tell Oracle to analyze the table; hopefully, it will find out when to use the index that way.']], [[" execute dbms_stats.gather_table_stats('myschema','mytable')\n"]], ['Using Index in oracle'], 2], [(1771633, 0), [['If all orders have at least one row in order_products, Try this'], ['If the above assumption is not true, then you also need:']], [['  Select order_id from orders o\n Where Not Exists \n      (Select * From order_products \n       Where order_id = o.order_id\n          And cancelled = 1)\n']], ['Optimize SQL query for canceled orders'], 2], [(1771633, 1), [['If the above assumption is not true, then you also need:'], ['-10000']], [['  Select order_id from orders o\n Where Exists \n      (Select * From order_products\n       Where order_id = o.order_id)\n   And Not Exists \n      (Select * From order_products\n       Where order_id = o.order_id\n          And cancelled = 1)\n']], ['Optimize SQL query for canceled orders'], 2], [(1772453, 0), [['Using stored function'], ['select']], [[' create function LastChild(in parent integer)\nreturns integer\nbegin\n    declare res integer;  \n    select top 1 id into res from TableA where parent_id = parent order by timeCol desc;\n    return res;\nend\n']], ['Get the last children from database'], 3], [(1772453, 1), [['select'], ['EDIT: without stored function:']], [[' select Id, lastchild(id) from TAbleA where parent_id is null\n']], ['Get the last children from database'], 3], [(1772453, 2), [['EDIT: without stored function:'], ['-10000']], [[' select Id, (select top 1 id from TableA childs where parent_id = TableA.id order by timeCol desc) from TableA where parent_id = 0\n']], ['Get the last children from database'], 3], [(1772609, 0), [['Converting a subquery into a JOIN can be pretty straightforward:'], ['...can be converted to:']], [['<code>IN</code> clause  FROM TABLE_X x\nWHERE x.col IN (SELECT y.col FROM TABLE_Y y)\n']], ['Procedurally transform subquery into join'], 8], [(1772609, 1), [['...can be converted to:'], ['Your JOIN criteria is where you have direct comparison.  ']], [[' FROM TABLE_X x\nJOIN TABLE_Y y ON y.col = x.col\n']], ['Procedurally transform subquery into join'], 8], [(1772609, 2), [['Your JOIN criteria is where you have direct comparison.  '], ['...converted:']], [['  FROM TABLE_X x\nWHERE EXISTS (SELECT NULL\n                FROM TABLE_Y y\n               WHERE y.col = x.col)\n']], ['Procedurally transform subquery into join'], 8], [(1772609, 3), [['...converted:'], ["Because of the boolean, there's a risk of more rows turning up in the resultset."]], [[' FROM TABLE_X x\nJOIN TABLE_Y y ON y.col = x.col\n']], ['Procedurally transform subquery into join'], 8], [(1772609, 4), [["Because of the boolean, there's a risk of more rows turning up in the resultset."], ["You're probably noticing a patter now, but I made this a little different for an inline view example:"]], [[' SELECT x.*,\n       (SELECT MAX(y.example_col)\n          FROM TABLE_Y y\n         WHERE y.col = x.col)\n  FROM TABLE_X x\n']], ['Procedurally transform subquery into join'], 8], [(1772609, 5), [["You're probably noticing a patter now, but I made this a little different for an inline view example:"], ['The key is making sure the inline view resultset includes the column(s) needed to join to, along with the columns.']], [[" SELECT x.*,\n       z.mc\n  FROM TABLE_X x\n  JOIN (SELECT y.col, --inline view within the brackets\n               MAX(y.example_col) 'mc'\n          FROM TABLE_Y y\n      GROUP BY y.col) z ON z.col = x.col\n"]], ['Procedurally transform subquery into join'], 8], [(1772609, 6), [['The key is making sure the inline view resultset includes the column(s) needed to join to, along with the columns.'], ['Converted:']], [[' SELECT x.*,\n       COALESCE((SELECT MAX(y.example_col)\n          FROM TABLE_Y y\n         WHERE y.col = x.col), 0)\n  FROM TABLE_X x\n']], ['Procedurally transform subquery into join'], 8], [(1772609, 7), [['Converted:'], ['-10000']], [["    SELECT x.*,\n          COALESCE(z.mc, 0)\n     FROM TABLE_X x\nLEFT JOIN (SELECT y.col,\n                  MAX(y.example_col) 'mc'\n             FROM TABLE_Y y\n         GROUP BY y.col) z ON z.col = x.col\n"]], ['Procedurally transform subquery into join'], 8], [(1773534, 0), [["Let's say you have 2 Oracle stored functions like this:"], ['One of the functions returns a VARCHAR2 and the other returns ref cursor.  On VB side, you could do this:']], [["    FUNCTION my_func\n   (\n      p_parm1 VARCHAR2\n    , p_parm2 NUMBER\n   ) RETURN VARCHAR2\n   AS\n   BEGIN\n      RETURN p_parm1 || to_char(p_parm2);\n   END;\n\n   FUNCTION my_func2 RETURN SYS_REFCURSOR\n   AS\n      v_cursor SYS_REFCURSOR;\n   BEGIN\n      OPEN v_cursor FOR\n         SELECT 'hello there Sean' col1\n           FROM dual\n          UNION ALL\n         SELECT 'here is your answer' col1\n           FROM dual;      \n      RETURN v_cursor;          \n   END;\n"]], ['What is the right way to call an Oracle stored function from ado.net and get the result?'], 2], [(1773534, 1), [['One of the functions returns a VARCHAR2 and the other returns ref cursor.  On VB side, you could do this:'], ['-10000']], [[' Dim con As New OracleConnection("Data Source=xe;User Id=sandbox;Password=sandbox; Promotable Transaction=local")\n\nTry\n    con.Open()\n    Dim cmd As OracleCommand = con.CreateCommand()\n    cmd.CommandText = "test_pkg.my_func"\n    cmd.CommandType = CommandType.StoredProcedure\n\n    Dim parm As OracleParameter\n\n    parm = New OracleParameter()\n    parm.Direction = ParameterDirection.ReturnValue\n    parm.OracleDbType = OracleDbType.Varchar2\n    parm.Size = 5000\n    cmd.Parameters.Add(parm)\n\n    parm = New OracleParameter()\n    parm.Direction = ParameterDirection.Input\n    parm.Value = "abc"\n    parm.OracleDbType = OracleDbType.Varchar2\n    cmd.Parameters.Add(parm)\n\n    parm = New OracleParameter()\n    parm.Direction = ParameterDirection.Input\n    parm.Value = 42\n    parm.OracleDbType = OracleDbType.Int32\n    cmd.Parameters.Add(parm)\n\n    cmd.ExecuteNonQuery()\n    Console.WriteLine("result of first function is " + cmd.Parameters(0).Value)\n\n    \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\n    \' now for the second query\n    \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\n    cmd = con.CreateCommand()\n    cmd.CommandText = "test_pkg.my_func2"\n    cmd.CommandType = CommandType.StoredProcedure\n\n    parm = New OracleParameter()\n    parm.Direction = ParameterDirection.ReturnValue\n    parm.OracleDbType = OracleDbType.RefCursor\n    cmd.Parameters.Add(parm)\n\n    Dim dr As OracleDataReader = cmd.ExecuteReader()\n    While (dr.Read())\n        Console.WriteLine(dr(0))\n    End While\n\nFinally\n    If (Not (con Is Nothing)) Then\n        con.Close()\n    End If\nEnd Try\n']], ['What is the right way to call an Oracle stored function from ado.net and get the result?'], 2], [(1777333, 0), [['This is the "greatest-n-per-group" problem that is posted frequently on StackOverflow.  Here\'s a solution:'], ['Re your comment, try the following alteration:']], [[" SELECT s1.*\nFROM scouting s1\nLEFT OUTER JOIN scouting s2\n  ON (s1.astroLoc = s2.astroLoc AND s1.jumpGate < s2.jumpGate)\nWHERE s1.astroLoc LIKE 'D[3-7][0-9]%' AND s1.astroLoc NOT LIKE 'D3[0-2]%'\nGROUP BY s1.* -- here you need to name all fields in the select-list\nHAVING COUNT(*) < 2;\n"]], ['Combining the following mulitple SQL queries into 1 with MS Access & ASP'], 4], [(1777333, 1), [['Re your comment, try the following alteration:'], ["It's hard to follow what you're asking for, since I don't know what are your table definitions or the meanings of columns.  Do you want the outer query to be matched to the top three jumpgates that are owned by the SWARM guild?"]], [[" SELECT s1.*\nFROM scouting s1\nLEFT OUTER JOIN scouting s2\n  ON (SUBSTRING(s1.astroLoc, 1, 3) = SUBSTRING(s2.astroLoc, 1, 3)\n      AND (s1.jumpGate < s2.jumpGate OR (s1.jumpGate = s2.jumpGate AND s1.ID < s2.ID))\nWHERE s1.astroLoc LIKE 'D[3-7][0-9]%' AND s1.astroLoc NOT LIKE 'D3[0-2]%'\nGROUP BY s1.* -- here you need to name all fields in the select-list\nHAVING COUNT(*) < 2;\n"]], ['Combining the following mulitple SQL queries into 1 with MS Access & ASP'], 4], [(1777333, 2), [["It's hard to follow what you're asking for, since I don't know what are your table definitions or the meanings of columns.  Do you want the outer query to be matched to the top three jumpgates that are owned by the SWARM guild?"], ['That would be a different query from this one, which makes the outer query return the jumpgates owned by SWARM that match the top three jumpgates owned by anyone.']], [[" SELECT s1.astroLoc, g.[galaxy_aename], s1.jumpGate, s1.ownerGuild\nFROM galaxy g INNER JOIN scouting s1 ON g.[galaxy_ID] = s1.galaxy \nWHERE s1.jumpGate IN (SELECT TOP 3 s2.jumpGate FROM scouting AS s2\n        WHERE s2.galaxy = g.[galaxy_ID] AND s2.ownerGuild = 'SWARM'\n        ORDER BY s2.jumpGate DESC)\nORDER BY scouting.astroLoc DESC, scouting.jumpGate DESC\n"]], ['Combining the following mulitple SQL queries into 1 with MS Access & ASP'], 4], [(1777333, 3), [['That would be a different query from this one, which makes the outer query return the jumpgates owned by SWARM that match the top three jumpgates owned by anyone.'], ["It's possible the second query will return an empty result, if none of the SWARM jumpgates are in the top three."]], [[" SELECT s1.astroLoc, g.[galaxy_aename], s1.jumpGate, s1.ownerGuild\nFROM galaxy g INNER JOIN scouting s1 ON g.[galaxy_ID] = s1.galaxy \nWHERE s1.jumpGate IN (SELECT TOP 3 s2.jumpGate FROM scouting AS s2\n        WHERE s2.galaxy = g.[galaxy_ID]\n        ORDER BY s2.jumpGate DESC)\n  AND s1.ownerGuild = 'SWARM'\nORDER BY scouting.astroLoc DESC, scouting.jumpGate DESC\n"]], ['Combining the following mulitple SQL queries into 1 with MS Access & ASP'], 4], [(1777756, 0), [['Well... Rails is a framework for Ruby that can accomplish what you are looking for, give this a try in a controller:'], ['After installing rails you must install the Gem for SQL Server:']], [[' respond_to do |format|\n  if @obj.save!\n    format.xml {}\n  end\nend\n']], ['Is there any Ruby framework to return database data to XML?'], 3], [(1777756, 1), [['After installing rails you must install the Gem for SQL Server:'], ['Then add a few things to your  database.yml  to get it to work with SQL Server:']], [[' sudo gem install activerecord-sqlserver-adapter --source=http://gems.rubyonrails.org\n']], ['Is there any Ruby framework to return database data to XML?'], 3], [(1777756, 2), [['Then add a few things to your  database.yml  to get it to work with SQL Server:'], ['Rails has some cool methods for manipulating and reading XML  built in , but I suggest the gem  Nokogiri .']], [[' development:\n  ...\n  adapter: sqlserver\n  mode: odbc\n  dsn: sqlserverapp \n  ...\n']], ['Is there any Ruby framework to return database data to XML?'], 3], [(1780242, 0), [['Typical cast trick needed because col2 and col3 are integers (so result is by default an integer)'], ['or']], [[' select col1, col2/col3*1.0 from table\n']], ['Postgres math expression calculcated for each row in table'], 3], [(1780242, 1), [['or'], ['or (SQL Standard way)']], [[' select col1, col2/col3::float from table\n']], ['Postgres math expression calculcated for each row in table'], 3], [(1780242, 2), [['or (SQL Standard way)'], ['-10000']], [[' select col1, col2/cast(col3 as float) from table\n']], ['Postgres math expression calculcated for each row in table'], 3], [(1780372, 0), [['Again, presuming  ANSI_QUOTES  behavior:'], ["Presuming  SET SESSION sql_mode = 'ANSI_QUOTES' , try this:"]], [[' SELECT tq.sym AS sym,\n       (100*(alast.adj_nav - afirst.adj_nav)/afirst.adj_nav) AS quarterly_returns\nFROM\n  (SELECT symbol_header_id AS sym, -- find first/last traded day ("ftd", "ltd")\n          MIN("date") AS ftd,\n          MAX("date") AS ltd\n   FROM symbol_details\n   WHERE "date" BETWEEN @quarterstart AND @quarterend\n   GROUP BY 1) tq\nJOIN symbol_details afirst         -- JOIN for ADJ_NAV on first traded day\n  ON tq.sym = afirst.symbol_header_id\n     AND\n     tq.ftd = afirst."date"\nJOIN symbol_details alast          -- JOIN for ADJ_NAV on last traded day\n  ON tq.sym = alast.symbol_header_id\n     AND\n     tq.ltd = alast."date"\n']], ['Calculating from self-join'], 2], [(1780372, 1), [["Presuming  SET SESSION sql_mode = 'ANSI_QUOTES' , try this:"], ['-10000']], [[' SELECT tq.sym                                AS sym,\n       (100*(adj_end - adj_begin)/adj_begin) AS quarterly_returns\nFROM\n  -- First, determine first traded days ("ftd") and last traded days\n  -- ("ltd") in this quarter per symbol\n  (SELECT symbol_header_id AS sym,\n          MIN("date")      AS ftd,\n          MAX("date")      AS ltd\n   FROM symbol_details\n   WHERE "date" BETWEEN @quarterstart AND @quarterend\n   GROUP BY 1) tq\n  JOIN\n  -- Second, determine adjusted NAV for "ftd" per symbol (see WHERE)\n  (SELECT symbol_header_id AS sym,\n          "date"           AS adate,\n          adj_nav          AS adj_begin\n   FROM symbol_details) afirst\n  ON afirst.sym = tq.sym\n  JOIN\n  -- Finally, determine adjusted NAV for "ltd" per symbol (see WHERE)\n  (SELECT symbol_header_id AS sym,\n          "date"           AS adate,\n          adj_nav          AS adj_end\n   FROM symbol_details) alast\n  ON alast.sym = tq.sym\nWHERE\n  afirst.adate = tq.ftd\n  AND\n  alast.adate  = tq.ltd;\n']], ['Calculating from self-join'], 2], [(1781909, 0), [['If you are storing your dates as  DATETIME  data type, then I would try to use the ISO-8601 date format ( YYYYMMDD ) for any queries:'], ['If you want a BETWEEN query up to and including all of Nov-23, 2009, you need to specify:']], [[" SELECT ......\nWHERE so.entrydate BETWEEN '20091023' and '20091123' \n"]], ['dd/MM/yyyy in SQL Server'], 5], [(1781909, 1), [['If you want a BETWEEN query up to and including all of Nov-23, 2009, you need to specify:'], ['run a script over your table to convert all the fields:']], [[" SELECT ......\nWHERE so.entrydate BETWEEN '20091023' and '20091123 23:59:59' \n"]], ['dd/MM/yyyy in SQL Server'], 5], [(1781909, 2), [['run a script over your table to convert all the fields:'], ['This should convert your "dd/mm/yyyy" style date strings into DATETIME and store it in the new column. Once that\'s done, you can drop the old column']], [[' UPDATE dbo.salesorderlist \nSET MyNewDateTime = CONVERT(DATETIME, EntryDate, 103)\n']], ['dd/MM/yyyy in SQL Server'], 5], [(1781909, 3), [['This should convert your "dd/mm/yyyy" style date strings into DATETIME and store it in the new column. Once that\'s done, you can drop the old column'], ['and rename the new one to the old name (if you want to):']], [[' ALTER TABLE dbo.salesorderlist DROP COLUMN EntryDate\n']], ['dd/MM/yyyy in SQL Server'], 5], [(1781909, 4), [['and rename the new one to the old name (if you want to):'], ['Marc']], [[" EXEC sys.sp_rename @objname = 'dbo.salesorderlist.MyNewDateTime', \n                   @newname = 'EntryDate', \n                   @objtype = 'COLUMN'\n"]], ['dd/MM/yyyy in SQL Server'], 5], [(1784074, 0), [['-10000'], [', or this one (probably slightly more efficient):']], [[' SELECT  h.*\nFROM    house\nORDER BY\n        (\n        SELECT  SUM(c.btu)\n        FROM    month m\n        JOIN    cars c\n        ON      c.month_id = m.id\n        WHERE   m.house_id = h.id\n        ) +\n        (\n        SELECT  SUM(m.btus)\n        FROM    month m\n        WHERE   m.house_id = h.id\n        )\n        DESC\n']], ['Sorting over a sum from two tables in mySQL'], 2], [(1784074, 1), [[', or this one (probably slightly more efficient):'], ['-10000']], [[' SELECT  h.*\nFROM    house\nORDER BY\n        (\n        SELECT  SUM\n                (\n                btus +\n                (\n                SELECT  SUM(btu)\n                FROM    cars c\n                WHERE   c.month_id = m.id\n                )\n                )\n        FROM    month m\n        WHERE   m.house_id = h.id\n        )\n        DESC\n']], ['Sorting over a sum from two tables in mySQL'], 2], [(1784254, 0), [["You can do it using a self join or an inner-select. Here's inner select:"], ['And self-join method:']], [[' select `group`, a, b from Table1 AS T1\n   where id=(select max(id) from Table1 AS T2 where T1.`group` = T2.`group`)\n']], ['SQL Select Distinct with Conditional'], 2], [(1784254, 1), [['And self-join method:'], ['-10000']], [[' select T1.`group`, T2.a, T2.b from\n   (select max(id) as id,`group` from Table1 group by `group`) T1\n   join Table1 as T2 on T1.id=T2.id\n']], ['SQL Select Distinct with Conditional'], 2], [(1784283, 0), [['You can group on a constant which might be useful'], ['Edit: For datatype mismatch and multiple values and this allows you to group on both columns...']], [[" SELECT\n    SUM(Column0),\n    CASE @MyVar WHEN 'Column1' THEN Column1 ELSE '' END AS MyGrouping\nFROM\n    Table1\nGROUP BY\n    CASE @MyVar WHEN 'Column1' THEN Column1 ELSE '' END\n"]], ['SQL Server 2005/2008 Group By statement with parameters without using dynamic SQL?'], 2], [(1784283, 1), [['Edit: For datatype mismatch and multiple values and this allows you to group on both columns...'], ['-10000']], [[" SELECT\n    SUM(Column0),\n    CASE @MyVar WHEN 'Column1' THEN Column1 ELSE NULL END AS Column1,\n    CASE @MyVar WHEN 'Column2' THEN Column2 ELSE NULL END AS Column2\nFROM\n    Table1\nGROUP BY\n    CASE @MyVar WHEN 'Column1' THEN Column1 ELSE NULL END,\n    CASE @MyVar WHEN 'Column2' THEN Column2 ELSE NULL END\n"]], ['SQL Server 2005/2008 Group By statement with parameters without using dynamic SQL?'], 2], [(1785942, 0), [['There is quite a wealth of information in the SQL Server documentation on this, but the two statements to create the check constraints you ask for are:'], ['This allows you to have conditions like:']], [[' ALTER TABLE tablename ADD CONSTRAINT constraintName CHECK (colname between 1 and 5);\n\nALTER TABLE tablename ADD CONSTRAINT constraintName CHECK (colname in (1,2,4));\n']], ['How can I use check constraint in sql server 2005'], 2], [(1785942, 1), [['This allows you to have conditions like:'], ['-10000']], [[' (colname >= 1 AND colname <= 5)\n']], ['How can I use check constraint in sql server 2005'], 2], [(1786533, 0), [["This query will give you a list of email addresses and how many times they're used, with the most used addresses first."], ['If you want the full rows:']], [[' select email, count(*) as c from table\ngroup by email having c > 1\norder by c desc\n']], ['Find rows that have the same value on a column in MySQL'], 2], [(1786533, 1), [['If you want the full rows:'], ['-10000']], [[' select * from table where email in (\n    select email from table\n    group by email having count(*) > 1\n)\n']], ['Find rows that have the same value on a column in MySQL'], 2], [(1786987, 0), [['Here is a start, I think this is along the right lines...The only thing left would be to add the ratio.'], ['EDIT: for standards compliance.']], [[' SELECT\n    COMPANY_ID,\n    NON_BILLABLE = SUM(CASE STATUS WHEN IN (0, 1) THEN 1 ELSE 0 END),\n    BILLABLE = SUM(CASE STATUS WHEN IN (2, 3) THEN 1 ELSE 0 END)\nFROM TRANSACTIONS\nGROUP BY COMPANY_ID\n']], ['Summarizing two conditions on the same SQL table'], 2], [(1786987, 1), [['EDIT: for standards compliance.'], ['-10000']], [[' SELECT\n    COMPANY_ID,\n    SUM(CASE STATUS WHEN IN (0, 1) THEN 1 ELSE 0 END) AS NON_BILLABLE,\n    SUM(CASE STATUS WHEN IN (2, 3) THEN 1 ELSE 0 END) AS BILLABLE\nFROM TRANSACTIONS\nGROUP BY COMPANY_ID\n']], ['Summarizing two conditions on the same SQL table'], 2], [(1787198, 0), [['In your model constructor, load DB1 and DB2 as'], ['Caveat 2 \nmake sure persistent connections are off... they are on by default in CI']], [[" $this->DB1=$this->load->database('DB1',true) //<-- notice the true parameter\n$this->DB2=$this->load->database('DB2',true) //<-- notice the true parameter\n"]], ['Trouble changing databases for my models in codeigniter'], 3], [(1787198, 1), [['Caveat 2 \nmake sure persistent connections are off... they are on by default in CI'], ['and']], [[" $db['DB2']['pconnect'] = FALSE;\n"]], ['Trouble changing databases for my models in codeigniter'], 3], [(1787198, 2), [['and'], ['in your application/config/database.php file']], [[" $db['DB2']['pconnect'] = FALSE;\n"]], ['Trouble changing databases for my models in codeigniter'], 3], [(1787290, 0), [['Solved'], ['Gives these results:']], [[" declare @test table (\n    ID int,\n    empnumber int,\n    timestamp datetime,\n    areaname varchar(20)\n    ) \n\nINSERT INTO @test VALUES (1, 10632,  '2009-11-23 16:40:33.000', 'OUT_1' ) \nINSERT INTO @test VALUES (2, 10632,  '2009-11-23 16:39:03.000', 'IN_1'  )\nINSERT INTO @test VALUES (3, 10632,  '2009-11-23 16:38:56.000', 'IN_1'  )\nINSERT INTO @test VALUES (4, 10632,  '2009-11-23 15:31:51.000', 'OUT_1' )\nINSERT INTO @test VALUES (5, 10632,  '2009-11-23 15:31:48.000', 'IN_1'  )\nINSERT INTO @test VALUES (6, 10632,  '2009-11-23 15:31:43.000', 'IN_1'  )\nINSERT INTO @test VALUES (7, 10632,  '2009-11-23 15:31:14.000', 'OUT_1' )\nINSERT INTO @test VALUES (8, 10632,  '2009-11-23 15:31:08.000', 'IN_1'  )\nINSERT INTO @test VALUES (9, 10632,  '2009-11-23 15:29:18.000', 'OUT_1' )\nINSERT INTO @test VALUES (10, 10632,  '2009-11-23 15:28:29.000',    'IN_1'  )\nINSERT INTO @test VALUES (11, 10632,  '2009-11-23 15:27:35.000',    'OUT_1' )\nINSERT INTO @test VALUES (12, 10632,  '2009-11-23 15:26:35.000',    'IN_1' )\nINSERT INTO @test VALUES (13, 10632,  '2009-11-23 15:22:55.000',    'IN_1' )\n\n\n\nselect g.empnumber, min(g.[timestamp]) as starttime, g.[timeout] as endtime, DATEDIFF(second,min(g.[timestamp]),g.[timeout])/60 as mins\nFROM\n(\nselect empnumber, [timestamp], (\n SELECT TOP 1 s.[timestamp] FROM @test s\n   WHERE  s.areaname like 'OUT%' AND s.[timestamp] > base.[timestamp]\n   ORDER BY s.[timestamp] ASC) as [timeout] \nfrom @test base\nwhere base.areaname like 'IN%'\n) g\nGROUP BY g.empnumber, g.[timeout]\n"]], ['SQL Time Tracking Query'], 2], [(1787290, 1), [['Gives these results:'], ['This will work for all types if IN_ and OUT_']], [[' empnumber starttime               endtime                 mins\n10632     2009-11-23 15:22:55.000 2009-11-23 15:27:35.000 4\n10632     2009-11-23 15:28:29.000 2009-11-23 15:29:18.000 0\n10632     2009-11-23 15:31:08.000 2009-11-23 15:31:14.000 0\n10632     2009-11-23 15:31:43.000 2009-11-23 15:31:51.000 0\n10632     2009-11-23 16:38:56.000 2009-11-23 16:40:33.000 1\n']], ['SQL Time Tracking Query'], 2], [(1788011, 0), [['If you want to generate the query for each call or use a hardcoded max-column-count, then you can do something like that:'], ['If it is sufficient to get it in that form']], [[' WITH tab AS\n(\n  SELECT table_name, column_name FROM user_tab_cols WHERE column_id <= 4\n) -- user_tab_cols used to provide test data, use your table instead\nSELECT MAX(c1) c1,\n       MAX(c2) c2,\n       MAX(c3) c3,\n       MAX(c4) c4\n  FROM (SELECT table_name,\n               DECODE( column_id, 1, column_name ) c1,\n               DECODE( column_id, 2, column_name ) c2,\n               DECODE( column_id, 3, column_name ) c3,\n               DECODE( column_id, 4, column_name ) c4\n          FROM ( SELECT table_name,\n                        column_name,\n                        ROW_NUMBER() OVER ( PARTITION BY table_name ORDER BY column_name ) column_id\n                   FROM tab\n               )\n       )\n GROUP BY table_name\n ORDER BY table_name\n']], ['Transpose select results with Oracle'], 2], [(1788011, 1), [['If it is sufficient to get it in that form'], ["have a look at Tom Kyte's  stragg ."]], [[' TABLENAME1|COL1,COL2\nTABLENAME2|COL1,COL2,COL3\n']], ['Transpose select results with Oracle'], 2], [(1789743, 0), [["if you want same person's many assignment to be counted as 1 do:   "], ['Otherwise simply  count()  it']], [[' select tasks.task_id, tasks.title, count(distinct tasks_people.people_id) \nas p_counter\nfrom tasks left join tasks_people\non tasks.task_id = tasks_people.task_id\ngroup by tasks.task_id\n']], ['mysql number of people assigned to a task'], 2], [(1789743, 1), [['Otherwise simply  count()  it'], ['-10000']], [[' select tasks.task_id, tasks.title, count(tasks_people.people_id) as p_counter\nfrom tasks left join tasks_people\non tasks.task_id = tasks_people.task_id\ngroup by tasks.task_id\n']], ['mysql number of people assigned to a task'], 2], [(1792196, 0), [['You could use the  overloaded OrderBy method  that accepts an IComparer. The IComparer would compare items to yield the desired result:'], ['Usage:']], [[' public class CustomComparer : IComparer<string>\n{\n    public int Compare(string x, string y)\n    {\n        double xNum, yNum;\n        bool xIsNum = Double.TryParse(x, out xNum);\n        bool yIsNum = Double.TryParse(y, out yNum);\n\n        // compare numbers\n        if (xIsNum && yIsNum)\n        {\n            return xNum.CompareTo(yNum);\n        }\n\n        // compare num to string\n        if (xIsNum)\n        {\n            return 1;\n        }\n\n        // compare num to string\n        if (yIsNum)\n        {\n            return -1;\n        }\n\n        // compare as strings\n        return x.CompareTo(y);\n    }\n}\n']], ['AlphaNumeric ordering in SQL vs. LINQ and .NET'], 2], [(1792196, 1), [['Usage:'], ['The implementation could\'ve used  Int32.TryParse  for your specific sample data, however I used  Double  just in case you had a "3.0" in the list or such. Of course, you need to be aware of your data. If the value is too large you\'ll need to use the appropriate TryParse method.']], [[' list.OrderBy(i => i, new CustomComparer())\n']], ['AlphaNumeric ordering in SQL vs. LINQ and .NET'], 2], [(1792399, 0), [['It is best to format dates, assuming that b5 is a date type:'], ['You will end up with text, but this is not important.']], [[' testDate = Format(Range("b5").Value,"yyyy/mm/dd")\n']], ['Excel VBA INSERT INTO statement using variables'], 2], [(1792399, 1), [['You will end up with text, but this is not important.'], ['If any of the fields are text, the value will have to be surrounded by single quotes or two double quotes, in a similar way to date and time.']], [[' stSQL1 = "INSERT INTO [Friction Tests] ([Runway Number], [Runway Test Side], " _\n& "[Test Date], [Test Time], [1/3], [2/3], [3/3], [Average]) " _\n& "VALUES ( " & rwyNumber  & ",#" &  testDate   & "#,#" & testTime   _\n& "#," & rwySide1   & "," & firstThird1 _\n& "," & secondThird1   & "," & thirdThird1 _\n& "," & averageFriction1 & ")"\n']], ['Excel VBA INSERT INTO statement using variables'], 2], [(1793833, 0), [['Then join the result of the derived table to  st  again in the outer query.  There will still be multiple rows per movie title, but the  RowNum  will repeat so you can filter for your  @pageIndex  correctly.'], ['You should sort in the outer query:']], [[' SELECT * FROM\n(\n    SELECT ROW_NUMBER() OVER(ORDER BY " + orderField + @") AS RowNum,\n           mt.ID AS mt_ID,\n           mt.title AS mt_title,\n           [...]\n    FROM mt AS mt \n    INNER JOIN sttable AS st ON mt.ID =st.ID\n    WHERE mt.title = @variable\n    GROUP BY mt.ID\n) mt1\nINNER JOIN sttable AS st1 ON (mt1.ID = st1.ID)\nWHERE mt1.RowNum BETWEEN \n    ((@pageIndex - 1) * @pageSize + 1) AND @pageIndex*@pageSize;\n']], ['SQL logic: two tables (group by?)'], 2], [(1793833, 1), [['You should sort in the outer query:'], ['-10000']], [[' SELECT * FROM\n(\n    SELECT ROW_NUMBER() OVER(ORDER BY " + orderField + @") AS RowNum,\n           mt.ID AS mt_ID,\n           mt.title AS mt_title,\n           [...] -- other mt.* columns\n           MAX(st.date_added) AS latest_date_added\n    FROM mt AS mt \n    INNER JOIN sttable AS st ON mt.ID =st.ID\n    WHERE mt.title = @variable\n    GROUP BY mt.ID, -- other mt.* columns\n) mt1\nINNER JOIN sttable AS st1 ON (mt1.ID = st1.ID)\nWHERE mt1.RowNum BETWEEN \n    ((@pageIndex - 1) * @pageSize + 1) AND @pageIndex*@pageSize\nORDER BY mt1.latest_date_added DESC, st1.date_added DESC;\n']], ['SQL logic: two tables (group by?)'], 2], [(1794499, 0), [['A relatively simple solution that Ponies sparked:'], ['And then, copy-paste into Excel, and use this as conditional highlighting for the entire result set:']], [[' SELECT  t.*\nFROM    Table t\n    INNER JOIN ( SELECT episode\n                 FROM   Table\n                 GROUP BY Episode\n                 HAVING COUNT(*) > 1\n               ) AS x ON t.episode = x.episode\n']], ['Fast way to eyeball possible duplicate rows in a table?'], 2], [(1794499, 1), [['And then, copy-paste into Excel, and use this as conditional highlighting for the entire result set:'], ["Column C is Episode.  This way, you get a visual highlight when the data's different from the row above (as long as both rows have the same value for episode)."]], [[' =AND($C2=$C1,A2<>A1)\n']], ['Fast way to eyeball possible duplicate rows in a table?'], 2], [(1795099, 0), [['Presumably your code says something like'], ['Once you use that QueryString it becomes']], [[' "select * from preview where ID=" + Request.QueryString["id"]\n']], ['SQL Injection Vulnerability found'], 2], [(1795099, 1), [['Once you use that QueryString it becomes'], ["EG: He's made your admin account logins show up on your preview page."]], [[' select * from preview where ID=611111161 and 1=0\nUNION ALL\nSELECT 1,2,3,4,password,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,user=id,70,71\nFROM admin\n']], ['SQL Injection Vulnerability found'], 2], [(1797683, 0), [['-10000'], ['or this:']], [[' SELECT  id, SUM(weight)\nFROM    (\n        SELECT  i.id, s1.weight\n        FROM    @IDs i\n        JOIN    myTable s1\n        ON      s1.id1 = i.id\n        UNION ALL\n        SELECT  i.id, s1.weight\n        FROM    @IDs i\n        JOIN    myTable s1\n        ON      s1.id2 = i.id\n        ) q\nGROUP BY\n        id\n']], ['JOIN over multiple columns?'], 2], [(1797683, 1), [['or this:'], ['The first one is more efficient if few records in  mytable  satisfy the conditions, the second one is more efficient if many records do.']], [[' SELECT  i.id, SUM(CASE WHEN id = id1 THEN weight ELSE 0 END + CASE WHEN id = id2 THEN weight ELSE 0 END)\nFROM    @ids i\nJOIN    mytable s\nON      i.id IN (s.id1, s.id2)\nGROUP BY\n        id\n']], ['JOIN over multiple columns?'], 2], [(1799518, 0), [['-10000'], ['A possible workaround is to do this:']], [[' delete from myTable \nwhere id not in\n(select min(id)\nfrom myTable\ngroup by A, B)\n']], ['Mysql Duplicate Rows ( Duplicate detected using 2 columns )'], 2], [(1799518, 1), [['A possible workaround is to do this:'], ['-10000']], [[' delete from myTable \nwhere id not in\n(\n      select minid from \n      (select min(id) as minid from myTable group by A, B) as newtable\n) \n']], ['Mysql Duplicate Rows ( Duplicate detected using 2 columns )'], 2], [(1800229, 0), [['The approach you suggest is reasonable. If you specify the UUID as your key name, you can delete it directly. To create an entity with a key name, do:'], ['To delete an entity by key name (without fetching it first), do:']], [[' MyEntity(key_name=a_string, ...)\n']], ['iphone table view delete entry and update app engine db'], 2], [(1800229, 1), [['To delete an entity by key name (without fetching it first), do:'], ["There's no need to have both a UUID and a device ID - the UUID is sufficient to ensure uniqueness across all devices."]], [[' db.delete(db.Key.from_path("MyEntity", a_string))\n']], ['iphone table view delete entry and update app engine db'], 2], [(1800285, 0), [['In your Application_Start:'], ['Then you need a log4net.config in your root, something like this:']], [[' XmlConfigurator.Configure(new FileInfo(Server.MapPath("/log4net.config")));\n']], ['ASP.NET MVC - Castle ActiveRecord - Show SQL queries'], 2], [(1800285, 1), [['Then you need a log4net.config in your root, something like this:'], ["Here's a sample app  you can use as reference."]], [[' <?xml version="1.0" encoding="utf-8" ?>\n\n<log4net debug="true">\n    <appender name="LogFileAppender" type="log4net.Appender.RollingFileAppender, log4net" >\n        <param name="File" value="log.txt" />\n        <param name="AppendToFile" value="true" />\n        <rollingStyle value="Date" />\n        <datePattern value="yyyyMMdd" />\n        <maxSizeRollBackups value="7" />\n        <layout type="log4net.Layout.PatternLayout, log4net">\n            <param name="ConversionPattern" value="%d [%t] %-5p %c [%x] - %m%n" />\n        </layout>\n    </appender>\n\n    <root>\n        <priority value="DEBUG" />\n        <appender-ref ref="LogFileAppender"/>\n    </root>\n</log4net>\n']], ['ASP.NET MVC - Castle ActiveRecord - Show SQL queries'], 2], [(1800741, 0), [['In Symfony 1.0 use the command:'], ['In versions 1.1 and 1.2 use the following command:']], [[' $ php symfony propel-dump-data  <APPLICATION_NAME> <FIXTURES_DIR_OR_FILE> [<ENVIRONMENT_NAME>]\n']], ['How do I generate Symfony fixtures YML from exising database data?'], 2], [(1800741, 1), [['In versions 1.1 and 1.2 use the following command:'], ['-10000']], [[' $ php symfony propel:data-dump <APPLICATION_NAME> [<TARGET>] [--env=<ENVIRONMENT_NAME>]\n']], ['How do I generate Symfony fixtures YML from exising database data?'], 2], [(1801976, 0), [['If you do not require them in 2 different queries, you can try'], ['If you do require 2 different queries, rather use a table var']], [[' ;with query as (\n  Select Row_Number() over (Order By UserID ASC) as TableRowNum,\n         FirstName,\n         LastName\n  From   Users\n),\ntotalCount AS (\n    SELECT COUNT(1) Total FROM query\n)\nSelect  query.*,\n        Total\nfrom    query, totalCount \nwhere   TableRowNum \nbetween 1 and 25 \nOrder By TableRowNum ASC\n']], ['How can I reuse a Common Table Expression'], 2], [(1801976, 1), [['If you do require 2 different queries, rather use a table var'], ['-10000']], [[' DECLARE @User TABLE(\n        TableRowNum INT,\n        FirstName VARCHAR(50),\n        LastName VARCHAR(50)\n)\n;with query as (\n  Select Row_Number() over (Order By UserID ASC) as TableRowNum,\n         FirstName,\n         LastName\n  From   Users\n)\nINSERT INTO @User\nSELECT  TableRowNum,\n        FirstName,\n        LastName\nFROM    query\n\nSELECT  *\nFROM    @User\nwhere   TableRowNum \nbetween 1 and 25 \nOrder By TableRowNum ASC\n\nSELECT COUNT(1) FROM @User\n']], ['How can I reuse a Common Table Expression'], 2], [(1803396, 0), [['How about:'], ['Otherwise it seems likely that the top 3 may include some ']], [[" Select  scouting.astroLoc, \n        scouting.galaxy, \n        scouting.jumpGate, \n        scouting.ownerGuild \nFrom    galaxy Inner Join \n        scouting On galaxy.[galaxy_ID] = scouting.galaxy \nWHERE   (scouting.ID) In (\n             Select Top 3 scouting.ID\n             From scouting \n             Where scouting.galaxy = galaxy.[galaxy_ID] \n             And scouting.ownerGuild = 'SWARM' \n             Order By scouting.jumpGate Desc) \nOrder By    scouting.astroLoc Desc, \n                scouting.jumpGate Desc\n"]], ['Complicated MS Access Greatest-N-Per-Group problem'], 2], [(1803396, 1), [['Otherwise it seems likely that the top 3 may include some '], ['-10000']], [["   where scouting.ownerGuild <> 'SWARM' \n"]], ['Complicated MS Access Greatest-N-Per-Group problem'], 2], [(1804879, 0), [['You have to use the latest version of NHibernate (2.1.2).'], ['And you can call the named query like that:']], [[' <sql-query name="ReturnSomethig" callable="true">\n   <return class="Somethig" />\n   { call ReturnSomethig(:someParameter) }\n</sql-query>\n']], ['Oracle Stored Procedure with out parameter using Nhibernate'], 2], [(1804879, 1), [['And you can call the named query like that:'], ['And it will work.']], [[' IQuery query = currentSession.GetNamedQuery("ReturnSomethig");\nquery.SetInt64("someParameter", someParameter);\nvar somethig = query.List<Somethig>();\n']], ['Oracle Stored Procedure with out parameter using Nhibernate'], 2], [(1805452, 0), [['This:'], ['...is the same as:']], [[' and nvl(nvl(b.account_id, account_id_), 0) = nvl(nvl(account_id_, b.account_id), 0)\n']], ["Eval compare of two values to FALSE only when both are not null and don't Match"], 3], [(1805452, 1), [['...is the same as:'], ['You have your choice of the following:']], [[' AND COALESCE(b.account_id, account_id_, 0) = COALESCE(account_id_, b.account_id, 0)\n']], ["Eval compare of two values to FALSE only when both are not null and don't Match"], 3], [(1805452, 2), [['You have your choice of the following:'], ['Both are portable syntax, but I lean towards using the COALESCE for sake of avoiding  OR s where possible because of maintenance and sargability concerns.']], [[' AND b.account_id = COALESCE(account_id_, b.account_id)\nAND (account_id_ IS NULL OR b.account_id = account_id_)\n']], ["Eval compare of two values to FALSE only when both are not null and don't Match"], 3], [(1806936, 0), [['Try'], ['I tested this using SQL Server 2005']], [[' INSERT INTO table1 (field1, field2)\nSELECT field1, field2 FROM table2\n']], ['Default values in Insert Select in SQL'], 2], [(1806936, 1), [['I tested this using SQL Server 2005'], ['-10000']], [[' DECLARE @Table1 TABLE(\n        field1 INT,\n        field2 INT,\n        field3 INT DEFAULT 1337\n)\n\nINSERT INTO @Table1 (field1,field2,field3) SELECT 1, 2, 3\n\nDECLARE @Table2 TABLE(\n        field1 INT,\n        field2 INT\n)\n\nINSERT INTO @Table2 (field1,field2) SELECT 15, 16\n\nINSERT INTO @Table1 (field1,field2)\nSELECT  field1,\n        field2\nFROM    @Table2\n\nSELECT * FROM @Table1\n']], ['Default values in Insert Select in SQL'], 2], [(1807988, 0), [['Try this'], ['street']], [[" declare @t table(street varchar(50))\ninsert into @t \n    select 'this address is 45/5, Some Road' union all\n    select 'this address is only text'\n\nselect street from @t\nwhere street like '%[0-9]%'\n"]], ['Get all records that contain a number'], 2], [(1807988, 1), [['street'], ['-10000']], [[' this address is 45/5, Some Road\n']], ['Get all records that contain a number'], 2], [(1808659, 0), [['If your table is  MyISAM , you can create a  FULLTEXT  index on both fields:'], ['and issue this query:']], [[' CREATE FULLTEXT INDEX ON mytable (name, surname)\n']], ['How can I use LIKE with an arbitrary word order in MySQL?'], 4], [(1808659, 1), [['and issue this query:'], ['This will work even if you have name and surname in a single field:']], [[" SELECT  *\nFROM    mytable\nWHERE   MATCH(name, surname) AGAINST ('+John +Doe' IN BOOLEAN MODE)\n"]], ['How can I use LIKE with an arbitrary word order in MySQL?'], 4], [(1808659, 2), [['This will work even if you have name and surname in a single field:'], ['On an  InnoDB  table, you can use regular expressions:']], [[" CREATE TABLE t_name (id INT NOT NULL PRIMARY KEY, name VARCHAR(200) NOT NULL) ENGINE=MyISAM;\n\nINSERT\nINTO    t_name\nVALUES\n(1, 'John Doe'),\n(2, 'Doe John');\n\nSELECT  *\nFROM    t_name\nWHERE   MATCH(name) AGAINST ('+John +Doe' IN BOOLEAN MODE);\n\n1, 'John Doe'\n2, 'Doe John'\n"]], ['How can I use LIKE with an arbitrary word order in MySQL?'], 4], [(1808659, 3), [['On an  InnoDB  table, you can use regular expressions:'], ['-10000']], [[" SELECT  *\nFROM    t_name\nWHERE   name RLIKE '[[:<:]]John[[:>:]]'\n        AND name RLIKE '[[:<:]]Doe[[:>:]]'\n"]], ['How can I use LIKE with an arbitrary word order in MySQL?'], 4], [(1809787, 0), [['As for your question about names before and after, I think you will have to parse the DDL to retrieve them, like that:'], ['The regular expressions could surely be written more clearly, but it works:']], [[" CREATE OR REPLACE TRIGGER MK_BEFORE_RENAME BEFORE RENAME ON SCHEMA \nDECLARE \n  sql_text ora_name_list_t;\n  v_stmt VARCHAR2(2000);\n  n PLS_INTEGER; \nBEGIN  \n  n := ora_sql_txt(sql_text);\n  FOR i IN 1..n LOOP\n   v_stmt := v_stmt || sql_text(i);\n  END LOOP;\n\n  Dbms_Output.Put_Line( 'Before: ' || regexp_replace( v_stmt, 'rename[[:space:]]+([a-z0-9_]+)[[:space:]]+to.*', '\\1', 1, 1, 'i' ) );\n  Dbms_Output.Put_Line( 'After: ' || regexp_replace( v_stmt, 'rename[[:space:]]+.*[[:space:]]+to[[:space:]]+([a-z0-9_]+)', '\\1', 1, 1, 'i' ) );\nEND;\n"]], ['Oracle: How do I determine the NEW name of an object in an "AFTER ALTER" trigger?'], 3], [(1809787, 1), [['The regular expressions could surely be written more clearly, but it works:'], ['UPDATE  To accommodate your changed question:']], [[' RENAME \nmktestx\nTO                 mktesty;\n\nBefore: mktestx\nAfter: mktesty\n']], ['Oracle: How do I determine the NEW name of an object in an "AFTER ALTER" trigger?'], 3], [(1809787, 2), [['UPDATE  To accommodate your changed question:'], ['-10000']], [[" CREATE OR REPLACE TRIGGER MK_AFTER_ALTER AFTER ALTER ON SCHEMA \nDECLARE \n  sql_text ora_name_list_t;\n  v_stmt VARCHAR2(2000);\n  n PLS_INTEGER; \nBEGIN  \n  n := ora_sql_txt(sql_text);\n  FOR i IN 1..n LOOP\n   v_stmt := v_stmt || sql_text(i);\n  END LOOP;\n\n  Dbms_Output.Put_Line( 'Before: ' || regexp_replace( v_stmt, 'alter[[:space:]]+table[[:space:]]+([a-z0-9_]+)[[:space:]]+rename[[:space:]]+to.*', '\\1', 1, 1, 'i' ) );\n  Dbms_Output.Put_Line( 'After: ' || regexp_replace( v_stmt, 'alter[[:space:]]+table[[:space:]]+.*to[[:space:]]+([a-z0-9_]+)', '\\1', 1, 1, 'i' ) );\nEND;\n"]], ['Oracle: How do I determine the NEW name of an object in an "AFTER ALTER" trigger?'], 3], [(1811531, 0), [['Query(For Sql Server):'], ['Query(For Oracle):']], [[" select * from mytbl\norder by SUBSTRING(email,(CHARINDEX('@',email)+1),1)\n"]], ['SQL: Sorting By Email Domain Name'], 4], [(1811531, 1), [['Query(For Oracle):'], ['Query(for MySQL)']], [[" select * from mytbl\norder by substr(email,INSTR(email,'@',1) + 1,1)\n"]], ['SQL: Sorting By Email Domain Name'], 4], [(1811531, 2), [['Query(for MySQL)'], ['id    name    email']], [[' pygorex1 already answered\n']], ['SQL: Sorting By Email Domain Name'], 4], [(1811531, 3), [['id    name    email'], ['-10000']], [[' 5   Tarrack Ocama   me@am-no-president.org\n3   Ali Baba    ali@babaland.com\n1   John Doe    johndoe@domain.com\n2   Jane Doe    janedoe@helloworld.com\n4   Foo Bar foo@worldof.bar.net\n']], ['SQL: Sorting By Email Domain Name'], 4], [(1811954, 0), [["I don't know what exactly you want, but you could do something like:"], ['This should give you something like:']], [[" SELECT\n    cat.CategoryID AS '@CategoryID',\n    cat.CategoryName AS 'Category/Name',\n    pr.ProductID AS '@ProductID',\n    pr.ProductName  'Product/Name',\n    pr.UnitPrice\nFROM \n    dbo.Categories cat\nINNER JOIN\n    dbo.Products pr ON cat.CategoryID = pr.CategoryID\nFOR XML PATH('ProductCategory'), ROOT('Root')\n"]], ["Problem with xml select in tsql - can't seem to orgenize multi nodes in the right order"], 4], [(1811954, 1), [['This should give you something like:'], ['UPDATE : ok, now that we know what you really want, I can provide the right answer :-)']], [[' <Root>\n  <ProductCategory CategoryID="5" ProductID="66">\n     <Category>\n        <Name>YourCategory Nr. 5</Name>\n     </Category>\n     <Product>\n        <Name>Your Product Nr. 66</Name>\n     </Product>\n     <UnitPrice>50.50</UnitPrice>\n  </ProductCategory>\n</Root>\n']], ["Problem with xml select in tsql - can't seem to orgenize multi nodes in the right order"], 4], [(1811954, 2), [['UPDATE : ok, now that we know what you really want, I can provide the right answer :-)'], ['That gives me the output (from  Northwind ):']], [[" SELECT\n    cat.CategoryID AS '@ID',\n    cat.CategoryName AS '@Name',\n    (SELECT\n         pr.ProductID AS '@ID',\n         pr.ProductName AS '@Name',\n         pr.UnitPrice AS '@Price'\n     FROM\n         dbo.T_Product pr\n     WHERE \n         cat.CategoryID = pr.CategoryID\n     FOR XML PATH('product'), TYPE\n    )\nFROM \n    dbo.Categories cat\nFOR XML PATH('category'), ROOT('Categories')\n"]], ["Problem with xml select in tsql - can't seem to orgenize multi nodes in the right order"], 4], [(1811954, 3), [['That gives me the output (from  Northwind ):'], ['-10000']], [[' <Categories>\n  <category ID="1" Name="Beverages">\n    <product ID="1" Name="Chai" Price="18.0000" />\n    <product ID="2" Name="Chang" Price="19.0000" />\n    <product ID="24" Name="Guaraná Fantástica" Price="4.5000" />\n    <product ID="34" Name="Sasquatch Ale" Price="14.0000" />\n    <product ID="35" Name="Steeleye Stout" Price="18.0000" />\n    <product ID="38" Name="Côte de Blaye" Price="263.5000" />\n    <product ID="39" Name="Chartreuse verte" Price="18.0000" />\n    <product ID="43" Name="Ipoh Coffee" Price="46.0000" />\n    <product ID="67" Name="Laughing Lumberjack Lager" Price="14.0000" />\n    <product ID="70" Name="Outback Lager" Price="15.0000" />\n    <product ID="75" Name="Rhönbräu Klosterbier" Price="7.7500" />\n    <product ID="76" Name="Lakkalikööri" Price="18.0000" />\n  </category>\n  <category ID="2" Name="Condiments">\n    <product ID="3" Name="Aniseed Syrup" Price="10.0000" />\n    <product ID="4" Name="Chef Anton\'s Cajun Seasoning" Price="22.0000" />\n    <product ID="5" Name="Chef Anton\'s Gumbo Mix" Price="21.3500" />\n    <product ID="6" Name="Grandma\'s Boysenberry Spread" Price="25.0000" />\n    <product ID="8" Name="Northwoods Cranberry Sauce" Price="40.0000" />\n    <product ID="15" Name="Genen Shouyu" Price="15.5000" />\n    <product ID="44" Name="Gula Malacca" Price="19.4500" />\n']], ["Problem with xml select in tsql - can't seem to orgenize multi nodes in the right order"], 4], [(1812049, 0), [['Test code(20 million calls, runstats_pkg is a package I wrote based on the  runstats package by Tom Kyte ):'], ['Results (Oracle XE):']], [[' CREATE OR REPLACE PACKAGE testperf AS\n   FUNCTION pow(i INT) RETURN INT;\nEND;\n/\n\nCREATE OR REPLACE PACKAGE BODY testperf AS\n   FUNCTION pow(i int) RETURN INT AS\n   BEGIN\n      RETURN i * i;\n   END;\nEND;\n/\n\nCREATE OR REPLACE FUNCTION powperf(i INT) RETURN INT AS\nBEGIN\n   RETURN i * i;\nEND;\n/\n\nDECLARE\n   I INT;\n   S INT DEFAULT 0;\nBEGIN\n   runstats_pkg.start1;\n   FOR I IN 1 .. 20000000 LOOP\n      s := s + (powperf(i) / i);\n   END LOOP;\n   runstats_pkg.stop1;\n\n   dbms_output.put_line(s);\n   s := 0;\n\n   runstats_pkg.start2;\n   FOR I IN 1 .. 20000000 LOOP\n      s := s + (testperf.pow(i) / i);\n   END LOOP;\n   runstats_pkg.stop2;\n\n   dbms_output.put_line(s);\n\n   runstats_pkg.show;\nEND;\n']], ['Performance Standalone Procedure vs Packaged Procedure in Oracle'], 3], [(1812049, 1), [['Results (Oracle XE):'], ['Results (Oracle 11g R1,  different machine ):']], [[' Run1 latches total versus runs -- difference and pct\n        Run1        Run2        Diff       Pct\n       2,491       2,439         -52    102.13%\n\nRun1 ran in 2304 hsecs\nRun2 ran in 2364 hsecs\nrun 1 ran in 97.46% of the time\n']], ['Performance Standalone Procedure vs Packaged Procedure in Oracle'], 3], [(1812049, 2), [['Results (Oracle 11g R1,  different machine ):'], ['So, there you go. Really not much of a difference.\nWant data for something more complex that also involves SQL DML? You gotta test it yourself.']], [[' Run1 latches total versus runs -- difference and pct\n        Run1        Run2        Diff       Pct\n       2,990       3,056          66     97.84%\n\nRun1 ran in 2071 hsecs\nRun2 ran in 2069 hsecs\nrun 1 ran in 100.1% of the time\n']], ['Performance Standalone Procedure vs Packaged Procedure in Oracle'], 3], [(1814391, 0), [['How about something like:'], ['Edit:  If you need 2 IDs from different rows of the  same  table:']], [[' INSERT INTO tt (t1_id, t2_id)\nSELECT t1.id, t2.id FROM t1, t2 WHERE ...\n']], ['How can I prevent inner SELECT from returning NULL?'], 2], [(1814391, 1), [['Edit:  If you need 2 IDs from different rows of the  same  table:'], ['-10000']], [[' SELECT t1.id, t2.id FROM some_table AS t1, some_table AS t2\nWHERE ...\n']], ['How can I prevent inner SELECT from returning NULL?'], 2], [(1814897, 0), [['Inputs'], ['Query']], [[" declare @tblA table (id int,name varchar(20))\ndeclare @tblB table (id int,name varchar(20))\ndeclare @tblC table (id int identity,name varchar(20))\ninsert into @tblC \n    select 'name1' union all select 'name2' union all\n    select 'name3' union all select 'name4' union all\n    select 'name5' union all select 'name6' union all\n    select 'name7' union all select 'name8' union all\n    select 'name9' union all select 'name10' union all\n    select 'name11' union all select 'name12' union all\n    select 'name13' union all select 'name14' union all\n    select 'name15' union all select 'name16' union all\n    select 'name17' union all select 'name18' union all\n    select 'name19' union all select 'name20' \n"]], ['How to Insert Records based on the Previous Insert?'], 3], [(1814897, 1), [['Query'], ['id  name']], [[' insert @tblA \noutput INSERTED.id, INSERTED.Name\ninto @tblB \nselect \n    id,name\nfrom @tblC \nwhere id % 2 = 0\n\nselect * from @tblA\nselect * from @tblB\n']], ['How to Insert Records based on the Previous Insert?'], 3], [(1814897, 2), [['id  name'], ["Basically I am inserting those records into TableA from TableC whose id's are even. And then by using Output clause inserting the values from  TableA to TableB"]], [[' 2   name2\n4   name4\n6   name6\n8   name8\n10  name10\n12  name12\n14  name14\n16  name16\n18  name18\n20  name20\n']], ['How to Insert Records based on the Previous Insert?'], 3], [(1818430, 0), [['If you wanted to do it purely in T-SQL though, one way make things neater would be to firstly create a table that held all the punctuation you wanted to removed.'], ['Next, you could create a function in SQL to remove all the punctuation symbols from an input string.']], [[" CREATE TABLE Punctuation \n(\n    Symbol VARCHAR(1) NOT NULL\n)\n\nINSERT INTO Punctuation (Symbol) VALUES('''')\nINSERT INTO Punctuation (Symbol) VALUES('-')\nINSERT INTO Punctuation (Symbol) VALUES('.')\n"]], ['SQL Server: How do you remove punctuation from a field?'], 3], [(1818430, 1), [['Next, you could create a function in SQL to remove all the punctuation symbols from an input string.'], ['Then you can just call the function in your UPDATE statement']], [[" CREATE FUNCTION dbo.fn_RemovePunctuation\n(\n    @InputString VARCHAR(500)\n)\nRETURNS VARCHAR(500)\nAS\nBEGIN\n    SELECT\n        @InputString = REPLACE(@InputString, P.Symbol, '')\n    FROM \n        Punctuation P\n\n    RETURN @InputString\nEND\nGO\n"]], ['SQL Server: How do you remove punctuation from a field?'], 3], [(1818430, 2), [['Then you can just call the function in your UPDATE statement'], ['-10000']], [[' UPDATE tblMyTable SET FieldName = dbo.fn_RemovePunctuation(FieldName)\n']], ['SQL Server: How do you remove punctuation from a field?'], 3], [(1819040, 0), [['The counter used by SERIAL, SERIAL8 or BIGSERIAL is monotonically increasing until it wraps around.  Deleted values are simply deleted.  If you insert a literal value that is larger than the counter, the counter is adjusted so that the next inserted value is one bigger:'], ['This generates the results:']], [[' CREATE TABLE s (s SERIAL(2) NOT NULL PRIMARY KEY, v VARCHAR(20) NOT NULL);\n\nINSERT INTO s(s,v) VALUES(0, "Row 2");\nINSERT INTO s(s,v) VALUES(0, "Row 3");\nINSERT INTO s(s,v) VALUES(0, "Row 4");\nINSERT INTO s(s,v) VALUES(0, "Row 5");\nDELETE FROM s WHERE s = 3;\nINSERT INTO s(s,v) VALUES(0, "Row 6");\nINSERT INTO s(s,v) VALUES(8, "Row 8"); -- Skip 7\nINSERT INTO s(s,v) VALUES(0, "Row 9");\n\nSELECT * FROM s ORDER BY s;\n']], ['Informix: What happens when you delete a row with serial/serial8 primary key?'], 4], [(1819040, 1), [['This generates the results:'], ["Not really.  The value wraps back to 1; if the row with value 1 exists, the insert fails; if it doesn't, it succeeds; either way, the next attempt will try 2.  To illustrate, continuing where the last example left off:"]], [['           2     Row 2\n          4     Row 4\n          5     Row 5\n          6     Row 6\n          8     Row 8\n          9     Row 9\n']], ['Informix: What happens when you delete a row with serial/serial8 primary key?'], 4], [(1819040, 2), [["Not really.  The value wraps back to 1; if the row with value 1 exists, the insert fails; if it doesn't, it succeeds; either way, the next attempt will try 2.  To illustrate, continuing where the last example left off:"], ['The end result is:']], [[' INSERT INTO s(s,v) VALUES(2147483647, "Row 2,147,483,647");\nINSERT INTO s(s,v) VALUES(0, "Row next")     { 1 - Pass };\nINSERT INTO s(s,v) VALUES(0, "Row next + 1") { 2 - Fail };\nINSERT INTO s(s,v) VALUES(0, "Row next + 2") { 3 - Pass };\nINSERT INTO s(s,v) VALUES(0, "Row next + 3") { 4 - Fail };\nSELECT * FROM s ORDER BY s;\n']], ['Informix: What happens when you delete a row with serial/serial8 primary key?'], 4], [(1819040, 3), [['The end result is:'], ['Clearly, the next three inserts would fail, one would succeed, two more would fail, and then they would succeed for the next couple of billion inserts.']], [['           1     Row next            \n          2     Row 2               \n          3     Row next + 2        \n          4     Row 4               \n          5     Row 5               \n          6     Row 6               \n          8     Row 8               \n          9     Row 9               \n 2147483647     Row 2,147,483,647   \n']], ['Informix: What happens when you delete a row with serial/serial8 primary key?'], 4], [(1820448, 0), [['Your code for INSERT must do This:  '], ['In Edit mode, for retrieve values from DB, you must execute the  Open , not the  ExecSQL .\nAnd after do the  Open , you must test if the record is finded. \nSee this code:']], [["       qryAux.SQL.Text:='INSERT INTO tblContacts(FirstName, LastName) VALUES( ' +\n        QuotedStr(frmEd.edFirstName.Text) + ',' +\n        QuotedStr(frmEd.edLastName.Text) + ')';\n"]], ['need help on insert new contact into access mdb from delphi'], 2], [(1820448, 1), [['In Edit mode, for retrieve values from DB, you must execute the  Open , not the  ExecSQL .\nAnd after do the  Open , you must test if the record is finded. \nSee this code:'], ['Regards.']], [["    qryAux.Open;\n\n   // Finded?\n   if not (qryAux.Eof) then begin\n     frmEd.edFirstName.Text:=qryAux.FieldByName('FirstName').AsString;\n     frmEd.edLastName.Text:=qryAux.FieldByName('LastName').AsString;\n   end;\n"]], ['need help on insert new contact into access mdb from delphi'], 2], [(1820858, 0), [['It turns there is some kind of issue when using ANSI Sql (I am hitting an oracle 10g db). I added the following property to my app.config to try to get nhibernate to not use ANSI:'], ['However, this did not help. I then added:']], [[' <property name="use_outer_join">false</property>\n']], ['Nhibernate versioning problem'], 2], [(1820858, 1), [['However, this did not help. I then added:'], ['There are now more db hits, but the version numbers are coming back as expected.']], [[' <property name="max_fetch_depth">0</property>\n']], ['Nhibernate versioning problem'], 2], [(1820877, 0), [['This will select all customers with at least two consecutive actions of the same type.'], ["Here's the more efficient query for just action  2 :"]], [[' WITH    rows AS \n        (\n        SELECT  customer, action,\n                ROW_NUMBER() OVER (PARTITION BY customer ORDER BY lastlogin) AS rn\n        FROM    mytable\n        )\nSELECT  DISTINCT customer\nFROM    rows rp\nWHERE   EXISTS\n        (\n        SELECT  NULL\n        FROM    rows rl\n        WHERE   rl.customer = rp.customer\n                AND rl.rn = rp.rn + 1\n                AND rl.action = rp.action\n        )\n']], ['SQL Server, find an arbitrary sequence of values'], 4], [(1820877, 1), [["Here's the more efficient query for just action  2 :"], ['To select uninterrupted ranges:']], [[' WITH    rows AS \n        (\n        SELECT  customer, ROW_NUMBER() OVER (PARTITION BY customer ORDER BY lastlogin) AS rn\n        FROM    mytable\n        WHERE   action = 2\n        )\nSELECT  DISTINCT customer\nFROM    rows rp\nWHERE   EXISTS\n        (\n        SELECT  NULL\n        FROM    rows rl\n        WHERE   rl.customer = rp.customer\n                AND rl.rn = rp.rn + 1\n        )\n']], ['SQL Server, find an arbitrary sequence of values'], 4], [(1820877, 2), [['To select uninterrupted ranges:'], ['This query calculates two series: one returns contiguous  ORDER BY lastlogin , the second one partitions by  action  additionally:']], [[' WITH    rows AS \n        (\n        SELECT  customer, action, lastlogin\n                ROW_NUMBER() OVER (PARTITION BY customer ORDER BY lastlogin) AS rn\n                ROW_NUMBER() OVER (PARTITION BY customer, action ORDER BY lastlogin) AS series\n        FROM    mytable\n        )\nSELECT  DISTINCT customer\nFROM    (\n        SELECT  customer\n        FROM    rows rp\n        WHERE   action\n        GROUP BY\n                customer, actioncode, series - rn\n        HAVING\n                DETEDIFF(day, MIN(lastlogin), MAX(lastlogin)) >= 14\n        ) q\n']], ['SQL Server, find an arbitrary sequence of values'], 4], [(1820877, 3), [['This query calculates two series: one returns contiguous  ORDER BY lastlogin , the second one partitions by  action  additionally:'], ['As long as the difference between the two schemes is the same, the series are uninterrupted. Each interruption breaks the series.']], [[' action  logindate rn  series diff = rn - series\n1       Jan 01    1   1      0\n1       Jan 02    2   2      0\n2       Jan 03    3   1      2\n2       Jan 04    4   2      2\n1       Jan 05    5   3      2\n1       Jan 06    6   4      2\n']], ['SQL Server, find an arbitrary sequence of values'], 4], [(1820971, 0), [['Did you try  USE  ?'], ['Example:']], [[' USE db_name\n']], ['Set Current Database in MySQL Script'], 2], [(1820971, 1), [['Example:'], ['-10000']], [[' USE db1;\nSELECT COUNT(*) FROM mytable;   # selects from db1.mytable\nUSE db2;\nSELECT COUNT(*) FROM mytable;   # selects from db2.mytable\n']], ['Set Current Database in MySQL Script'], 2], [(1822504, 0), [['How about:'], ['Perhaps more clearly:']], [[' SELECT TOP 1 IIF(EXISTS(\n       SELECT * FROM foo \n       WHERE <some condition>), 0, 1) As f1 \nFROM foo\n']], ['Determine existence of results in jet SQL?'], 2], [(1822504, 1), [['Perhaps more clearly:'], ['-10000']], [[' SELECT TOP 1 IIF(EXISTS(\n       SELECT * FROM foo\n       WHERE <some condition>), 0, 1) As F1 \nFROM MSysObjects\n']], ['Determine existence of results in jet SQL?'], 2], [(1824575, 0), [['A  purely arithmetic formula  is'], ["Although in SQL we often solve this with a  CASE statement  (cf astender's answer) "]], [[' SELECT ((DAYOFWEEK(myDate) + 5) % 7) + 1 AS MondayBasedDOW\n']], ['How do you find out the DayOfTheWeek given a datetime in MySql?'], 3], [(1824575, 1), [["Although in SQL we often solve this with a  CASE statement  (cf astender's answer) "], ['i.e. Monday = 0, Tuesday = 1 ... Sunday = 6 \nSo you can simply use']], [[' SELECT CASE WHEN DAYOFWEEK(myDate) = 1 THEN 7 ELSE DAYOFWEEK(myDate) -1 END\n       AS MondayBasedDOW\n']], ['How do you find out the DayOfTheWeek given a datetime in MySql?'], 3], [(1824575, 2), [['i.e. Monday = 0, Tuesday = 1 ... Sunday = 6 \nSo you can simply use'], ["but of course that's a lot less fun than using modulo arithmetic ;-)"]], [[' SELECT WEEKDAY(myDate) + 1 AS MondayBasedDOW\n']], ['How do you find out the DayOfTheWeek given a datetime in MySql?'], 3], [(1826609, 0), [['You just have to Join'], ['As a View...']], [["    Select proj_id, \n      t1.name + ' ' + t1.surname tester1,\n      t2.name + ' ' + t2.surname tester2,\n      t3.name + ' ' + t3.surname tester3\n   From Project p \n     Left Join Emp t1 On t1.emp_id = p.Tester_1\n     Left Join Emp t2 On t2.emp_id = p.Tester_2\n     Left Join Emp t2 On t3.emp_id = p.Tester_3\n"]], ['SELECT statement'], 2], [(1826609, 1), [['As a View...'], ['NOTE: As others mentioned, your database design violates First Normal Form "There should be no repeating groups", which means that a table should not contain multiple columns which represent multiple instances of some attribute (like your tester_1, tester_2, tester_3).  Check out this link:  database normalization  for more info.  ']], [["   Create View ProjectWithTesters\n  As \n       Select proj_id, \n          t1.name + ' ' + t1.surname tester1,\n          t2.name + ' ' + t2.surname tester2,\n          t3.name + ' ' + t3.surname tester3\n       From Project p \n         Left Join Emp t1 On t1.emp_id = p.Tester_1\n         Left Join Emp t2 On t2.emp_id = p.Tester_2\n         Left Join Emp t2 On t3.emp_id = p.Tester_3\n"]], ['SELECT statement'], 2], [(1826757, 0), [['If you are updating multiple columns from a single table, then combine them like:'], ['instead of ']], [[' UPDATE mytable\nSET foo = bar, fizz = buzz, whiz = bang\nWHERE zing > 2081\n']], ['SQL (Server) Update performance'], 3], [(1826757, 1), [['instead of '], ['Even if you are using a complex join, only a single table can be updated at a time. Something like:']], [[' UPDATE mytable SET foo = bar   WHERE zing > 2081\nUPDATE mytable SET fizz = buzz WHERE zing > 2081\nUPDATE mytable SET whiz = bang WHERE zing > 2081\n']], ['SQL (Server) Update performance'], 3], [(1826757, 2), [['Even if you are using a complex join, only a single table can be updated at a time. Something like:'], ['Only AccountHistory is being changed here, even though the source data is accessed through a join.']], [[" UPDATE AccountHistory\nSET LastPurchaseDate = i.PurchaseDate\nFROM Account a\nINNER JOIN AccountHistory h ON a.AccountID = h.AccountID\nINNER JOIN Invoices i ON i.AccountID = a.AccountID\nWHERE i.PurchaseDate > '2009-11-30'\n"]], ['SQL (Server) Update performance'], 3], [(1830015, 0), [['This is for " tag1 AND (tag2 OR tag3) AND NOT tag4 OR tag5 ". I\'m sure you can figure out the rest.'], ['Edit: \nIf you want to avoid subqueries, you could do this:']], [[" SELECT items.* FROM items\n    LEFT JOIN (SELECT i1.item_id FROM tagged_items AS i1 INNER JOIN tags AS t1 ON i1.tag_id = t1.id AND t1.name = 'tag1') AS ti1 ON items.id = ti1.item_id\n    LEFT JOIN (SELECT i2.item_id FROM tagged_items AS i2 INNER JOIN tags AS t2 ON i2.tag_id = t2.id AND t2.name = 'tag2') AS ti2 ON items.id = ti2.item_id\n    LEFT JOIN (SELECT i3.item_id FROM tagged_items AS i3 INNER JOIN tags AS t3 ON i3.tag_id = t3.id AND t3.name = 'tag3') AS ti3 ON items.id = ti3.item_id\n    LEFT JOIN (SELECT i4.item_id FROM tagged_items AS i4 INNER JOIN tags AS t4 ON i4.tag_id = t4.id AND t4.name = 'tag4') AS ti4 ON items.id = ti4.item_id\n    LEFT JOIN (SELECT i5.item_id FROM tagged_items AS i5 INNER JOIN tags AS t5 ON i5.tag_id = t5.id AND t5.name = 'tag5') AS ti5 ON items.id = ti5.item_id\nWHERE ti1.item_id IS NOT NULL AND (ti2.item_id IS NOT NULL OR ti3.item_id IS NOT NULL) AND ti4.item_id IS NULL OR ti5.item_id IS NOT NULL;\n"]], ['Boolean expressions for a tagging system in SQL'], 2], [(1830015, 1), [['Edit: \nIf you want to avoid subqueries, you could do this:'], ["I'm not sure why you'd want to do it though, as the additional left joins will likely result in a slower run."]], [[" SELECT items.* FROM items \n    LEFT JOIN tagged_items AS i1 ON items.id = i1.item_id LEFT JOIN tags AS t1 ON i1.tag_id = t1.id AND t1.name = 'tag1'\n    ...\nWHERE t1.item_id IS NOT NULL ...\n"]], ['Boolean expressions for a tagging system in SQL'], 2], [(1831319, 0), [['Try this'], ['Query(For the first query)']], [[" DECLARE @Table TABLE(       \n        ID INT,\n        NAME VARCHAR(MAX)\n)\n    INSERT INTO @Table (ID,[NAME]) SELECT 1, 'Amit'\nINSERT INTO @Table (ID,[NAME]) SELECT 2, 'Mohit'\nINSERT INTO @Table (ID,[NAME]) SELECT 2, 'Nahar'\nINSERT INTO @Table (ID,[NAME]) SELECT 3, 'C'\nINSERT INTO @Table (ID,[NAME]) SELECT 3, 'D'\nINSERT INTO @Table (ID,[NAME]) SELECT 3, 'E'\n"]], ['How to count same Id in a column in a table and based on count perform concatenation'], 5], [(1831319, 1), [['Query(For the first query)'], ['Output:']], [[" select id,\n        REPLACE(stuff((select ',' + '  ' + name  + '  ' \n            from @Table b\n            where b.id = a.id\n            FOR xml path('')),1,1,' '),',','OR') MergedData\nfrom @Table a\ngroup by a.id \n"]], ['How to count same Id in a column in a table and based on count perform concatenation'], 5], [(1831319, 2), [['Output:'], ['Query (For the change request)']], [[' id  MergedData\n1      Amit  \n2      Mohit  OR  Nahar\n']], ['How to count same Id in a column in a table and based on count perform concatenation'], 5], [(1831319, 3), [['Query (For the change request)'], ['Output:']], [[" select distinct a.id,\n\n    case when coalesce(x.cnt,0) <= 2 then\n\n        REPLACE(stuff((select ',' + '  ' + name  + '  ' \n            from @Table b\n            where b.id = a.id\n            FOR xml path('')),1,1,' '),',','OR') \n\n\n      when x.cnt > 2 then \n\n      REPLACE(stuff((select ',' + '  ' + name  + '  ' \n            from @Table b\n            where b.id = a.id\n            FOR xml path('')),1,1,' '),',','AND') \n\n            end\n\n            MergedData\nfrom @Table a\n\nleft join \n\n(select id,COUNT(id) cnt\nfrom @Table \ngroup by ID\nhaving (COUNT(id)>1))x\non a.ID = x.ID\n"]], ['How to count same Id in a column in a table and based on count perform concatenation'], 5], [(1831319, 4), [['Output:'], ['-10000']], [[' id  MergedData\n1      Amit  \n2      Mohit  OR  Nahar  \n3      C  AND  D  AND  E  \n']], ['How to count same Id in a column in a table and based on count perform concatenation'], 5], [(1833494, 0), [['For your data, the query would just be the raw data joining those tables above to produce a raw listing of:'], ['Then your call to pivot_query would be:']], [[" set @myQuery = '\n Select Item_Id, Item_Name, Field_Name, Value From ...\n';\n"]], ['SQL: Best practice to store various fields in one table'], 2], [(1833494, 1), [['Then your call to pivot_query would be:'], ['like that.']], [[" exec pivot_query @myQuery, 'Item_Id, Item_Name', 'Field_Name', 'max(Value)'\n"]], ['SQL: Best practice to store various fields in one table'], 2], [(1834066, 0), [['the following will create a DOMnode object from an XMLType:'], ['This will output:']], [[" node := dbms_xmldom.makenode(dbms_xmldom.newDOMDocument(XMLType(\n     '<outer><inner>soemthing</inner><inner>somethingelse</inner></outer>')));\n"]], ['pl/sql: converting xmltype to node'], 2], [(1834066, 1), [['This will output:'], ['-10000']], [[' buffer: <outer>\n  <inner>soemthing</inner>\n  <inner>somethingelse</inner>\n</outer>\n']], ['pl/sql: converting xmltype to node'], 2], [(1835147, 0), [['Union approach:'], ['Case statement in order by:']], [[" select   1 as sortOrder, SNO, ID, ISSUE\nfrom     tableName\nwhere    ID = 'B1'\nunion all\nselect   2 as sortOrder, SNO, ID, ISSUE\nfrom     tableName\nwhere    ID <> 'B1'\norder by sortOrder;\n"]], ['sql select to start with a particular record'], 2], [(1835147, 1), [['Case statement in order by:'], ["You could also consider using temp tables, cte's, etc., but those approaches would  likely  be less performant...try a couple different approaches in your environment to see which works best."]], [[" select   SNO, ID, ISSUE\nfrom     tableName\norder by case when ID = 'B1' then 1 else 2 end;\n"]], ['sql select to start with a particular record'], 2], [(1835472, 0), [['The negated character class fails to match at the end-of-string:'], ['where the word boundary match succeeds:']], [[' mysql> SELECT \'I am @sam\' REGEXP \'@sam[^A-Za-z0-9]\' AS "Does This Match?";\n+------------------+\n| Does This Match? |\n+------------------+\n|                0 | \n+------------------+\n1 row in set (0.00 sec)\n']], ['sql complex like expression @user'], 3], [(1835472, 1), [['where the word boundary match succeeds:'], ['If  [[:>:]]  isn\'t quite right for your application (because your "username" character set is not what the MySQL regex engine thinks of as one side of a word boundary in your locale), you can, alternatively, specify a negated character class and separately test for end-of-string:']], [[' mysql> SELECT \'I am @sam\' REGEXP \'@sam[[:>:]]\' AS "Does This Match?";\n+------------------+\n| Does This Match? |\n+------------------+\n|                1 | \n+------------------+\n1 row in set (0.00 sec)\n']], ['sql complex like expression @user'], 3], [(1835472, 2), [['If  [[:>:]]  isn\'t quite right for your application (because your "username" character set is not what the MySQL regex engine thinks of as one side of a word boundary in your locale), you can, alternatively, specify a negated character class and separately test for end-of-string:'], ['-10000']], [[" SELECT ... WHERE (feed REGEXP '@sam[^A-Za-z0-9]' or feed REGEXP '@sam$')\n"]], ['sql complex like expression @user'], 3], [(1835546, 0), [['Depending on the data type and possible values for the columns:'], ['The other way would be:']], [[' COALESCE(A, -1) <> COALESCE(B, -1)\n']], ['testing inequality with columns that can be null'], 2], [(1835546, 1), [['The other way would be:'], ['This can be a problem depending on how your particular RDBMS handles NULLs. By the ANSI standard, this should give you what you want, but who follows standards anyway. :)']], [[' (A <> B) OR (A IS NOT NULL AND B IS NULL) OR (A IS NULL AND B IS NOT NULL)\n']], ['testing inequality with columns that can be null'], 2], [(1838048, 0), [['Actually, when managing timestamps in pro-COBOL, i do the following :'], ['When i want to retrieve the value, i use the following :']], [[' 77 H-DATETIME PIC X(19).\n']], ['Equivalent of PIC S9 with length 16 in Oracle'], 3], [(1838048, 1), [['When i want to retrieve the value, i use the following :'], ['When i want to update the Oracle field, i use the following :']], [[" TO_CHAR(A.TIMESTAMP, 'YYYY-MM-DD-HH24-MI-SS')\n"]], ['Equivalent of PIC S9 with length 16 in Oracle'], 3], [(1838048, 2), [['When i want to update the Oracle field, i use the following :'], ['The format i use allows sorting and using "SEARCH / SEARCHE ALL".']], [[" TO_DATE(A.TIMESTAMP, 'YYYY-MM-DD-HH24-MI-SS')\n"]], ['Equivalent of PIC S9 with length 16 in Oracle'], 3], [(1838962, 0), [['To exclude the rows from a selection:'], ['Or to permanently remove them:']], [[" select *\nfrom TableA\nwhere PR not in ('-','Dead')\n"]], ['sql query to show all records except for certain records'], 2], [(1838962, 1), [['Or to permanently remove them:'], ['-10000']], [[" delete\nfrom TableA\nwhere PR not in ('-','Dead')\n"]], ['sql query to show all records except for certain records'], 2], [(1839214, 0), [['You can use a union query:'], ['EDIT:']], [[' SELECT "" As Sort, a,b,c FROM Table\nUNION ALL\nSELECT "Total" As Sort, Sum(a) As A, Sum(b) As b, Sum(c) As C FROM Table\nORDER BY Sort\n']], ['Add a summary row to MS Access query'], 2], [(1839214, 1), [['EDIT:'], ['-10000']], [[' SELECT "" As Sort, a,b,c FROM Table\nUNION ALL\nSELECT "Total" As Sort, "" As A, Sum(b) As b, Sum(c) As C FROM Table\nORDER BY Sort\n']], ['Add a summary row to MS Access query'], 2], [(1839808, 0), [['Try this:'], ['Or, maybe (just like ammoQ said)']], [[' SELECT id\nFROM Activity\nWHERE important = @important OR @important = false\n']], ['If false, search both true and false in Access sql'], 2], [(1839808, 1), [['Or, maybe (just like ammoQ said)'], ['-10000']], [[' SELECT id\nFROM Activity\nWHERE important OR NOT [Forms]![Search]![important]\n']], ['If false, search both true and false in Access sql'], 2], [(1839951, 0), [['You can UNION:'], ['You can JOIN, as long as you have a field with common data:']], [[' Select a, b,"" as c ........From TableA\nUNION ALL\nSelect a, m as b, n as c...... From sqlqueryA\nUNION ALL\nSelect x As a, y as b, z as c ..... from sqlqueryB\n']], ['how to combine different objects in ms-access each containing different queries into one object'], 2], [(1839951, 1), [['You can JOIN, as long as you have a field with common data:'], ['You might like to read:']], [[' SELECT t.a, t.b,s.m, s.n...... \nFROM TableA t \nINNER JOIN sqlqueryA s\nON t.a=s.a\n']], ['how to combine different objects in ms-access each containing different queries into one object'], 2], [(1841370, 0), [['Something like this '], ["That tells you the matches. You just need to push it out an extra step to find the groups that don't have any matches"]], [[" create table t1 (group_id varchar2(20), value varchar2(20));\ncreate table t2 (group_id varchar2(20), value varchar2(20));\n\ninsert into t1 values ('A','FOO');\ninsert into t1 values ('A','BAR');\ninsert into t1 values ('X','HHH');\ninsert into t1 values ('X','ZOO');\ninsert into t2 values ('C','FOO');\ninsert into t2 values ('C','BAR');\ninsert into t2 values ('B','ZOO');\n\n\nselect t1.group_id t1_group,t2.group_id t2_group, \n      --t1.all_val, t2.all_val, \n       case when t1.all_val = t2.all_val then 'match' else 'no match' end coll_match\nfrom \n  (select 'T1' tab_id, group_id, collect(value) all_val, \n          min(value) min_val, max(value) max_val, count(distinct value) cnt_val \n  from t1 group by group_id) t1\nfull outer join\n  (select 'T2' tab_id, group_id, collect(value) all_val, \n          min(value) min_val, max(value) max_val, count(distinct value) cnt_val \n  from t2 group by group_id) t2\non t1.min_val = t2.min_val and t1.max_val = t2.max_val and t1.cnt_val = t2.cnt_val\n/\n"]], ['How to compare groups of tuples in sql'], 2], [(1841370, 1), [["That tells you the matches. You just need to push it out an extra step to find the groups that don't have any matches"], ['-10000']], [[" select t1_group\nfrom\n(\n  select t1.group_id t1_group,t2.group_id t2_group, \n        --t1.all_val, t2.all_val, \n         case when t1.all_val = t2.all_val then 'match' end coll_match\n  from \n    (select 'T1' tab_id, group_id, collect(value) all_val\n    from t1 group by group_id) t1\n  cross join\n    (select 'T2' tab_id, group_id, collect(value) all_val\n    from t2 group by group_id) t2\n)\ngroup by t1_group\nhaving min(coll_match) is null\n/\n\nselect t2_group\nfrom\n(\n  select t1.group_id t1_group,t2.group_id t2_group, \n        --t1.all_val, t2.all_val, \n         case when t1.all_val = t2.all_val then 'match' end coll_match\n  from \n    (select 'T1' tab_id, group_id, collect(value) all_val\n    from t1 group by group_id) t1\n  cross join\n    (select 'T2' tab_id, group_id, collect(value) all_val\n    from t2 group by group_id) t2\n)\ngroup by t2_group\nhaving min(coll_match) is null\n/\n"]], ['How to compare groups of tuples in sql'], 2], [(1841815, 0), [["Yes, you'll want to use (another) join. I think the following should do it:"], ["Another version, inspired by Germ's suggestions but this one works (note I replaced  id  with  category_id  for clarity):"]], [[' SELECT lst.`id`, lst.<column>, ...\nFROM `listings` lst, `map` m, `map` m2\nWHERE m.`category_id` = 18 AND m2.`category_id` = 20\nAND m.`listing_id` = lst.`id`\nAND m2.`listing_id` = lst.`id`\n']], ['MySQL returning distinct results for multiple conditions'], 3], [(1841815, 1), [["Another version, inspired by Germ's suggestions but this one works (note I replaced  id  with  category_id  for clarity):"], ['Ugly, eh? And the subselect might not be all that efficient... but:']], [[' select l.listing_id\nfrom listings l\njoin (select m.listing_id, count(*) as cnt from map m where\n    m.category_id in (18,20)\n    group by m.listing_id) cat_matches\n    on cat_matches.listing_id = l.listing_id\nwhere cat_matches.cnt = 2; -- 2 is the number of distinct categories to match\n']], ['MySQL returning distinct results for multiple conditions'], 3], [(1841815, 2), [['Ugly, eh? And the subselect might not be all that efficient... but:'], ['You can eliminate that subselect by getting all the rows you need and then filtering them. Note that this solution assumes that the lines in the map table are unique (which should be the case as the PK should be defined on both  listing_id  and  category_id ).']], [[' select l.listing_id\nfrom listings l\njoin map m on l.listing_id=m.listing_id\nwhere m.category_id in (18,20)\ngroup by l.listing_id\nhaving COUNT(*)=2;\n']], ['MySQL returning distinct results for multiple conditions'], 3], [(1841952, 0), [['The most convenient way to generate a sequence is to use the rather poorly-documented spt_values table, like so:'], ["Just a word of caution - the numbers in spt_values only go from 0 to 2047, so if you have contracts that are more than about 5 years long, then you'll need to generate a longer sequence.  Easiest way to do that is to CROSS JOIN the spt_values table to itself, i.e.:"]], [[" WITH Contracts_CTE (contract_id, product_id, contract_day, amount) AS\n(\n    SELECT \n        cl.contract_id,\n        cl.product_id,\n        DATEADD(DAY, v.number, cl.contract_line_start),\n        cl.amount / DATEDIFF(DAY, cl.contract_line_start, cl.contract_line_end)\n    FROM contracts_lines cl\n    CROSS JOIN master.dbo.spt_values v\n    WHERE v.type = 'P'\n    AND DATEADD(DAY, v.number, cl.contract_line_start) < cl.contract_line_end\n)\nSELECT\n    DATEPART(YEAR, c.contract_day) AS contract_year,\n    DATEPART(MONTH, c.contract_day) AS contract_month,\n    c.product_id,\n    c.contract_id,\n    SUM(Amount) AS contract_amount\nFROM Contracts_CTE c\nGROUP BY\n    c.product_id,\n    c.contract_id,\n    DATEPART(YEAR, c.contract_day),\n    DATEPART(MONTH, c.contract_day)\n"]], ['How to produce a revenue forecast in SQL?'], 2], [(1841952, 1), [["Just a word of caution - the numbers in spt_values only go from 0 to 2047, so if you have contracts that are more than about 5 years long, then you'll need to generate a longer sequence.  Easiest way to do that is to CROSS JOIN the spt_values table to itself, i.e.:"], ["Obviously you'd have to integrate that into the above query, but if it's really necessary then it shouldn't be too hard."]], [[" SELECT (v1.number * 2048) + v2.number\nFROM master.dbo.spt_values v1\nCROSS JOIN master.dbo.spt_values v2\nWHERE v1.type = 'P'\nAND v2.type = 'P'\nAND ((v1.number * 2048) + v2.number) < 100000\n"]], ['How to produce a revenue forecast in SQL?'], 2], [(1842459, 0), [['Easiest way to do this with Sql 2005+ is to use the  ranking and windowing functions  - simply partition/order your data and assign an appropriate sequence to each record (in this case you are partitioning by fiscalYear and ordering by fiscalWeek over that window) - would look something like this:'], ['This particular query would not allow extension across fiscalYear boundaries - if you wanted to extend to cross these year boundaries you would simply want to drop the "partition by" clause and "fiscalYear" join condition and instead order the set by a combination of the fiscalYear and fiscalWeek, something like this:']], [[' with data as\n(\n    select  row_number() over (partition by a.fiscalYear order by a.fiscalWeek) as rn,\n            a.fiscalYear, a.fiscalQuarter, a.fiscalWeek, a.Data\n    from    #TableName a\n)\nselect  a.fiscalYear, a.fiscalQuarter, a.fiscalWeek, a.Data, \n        a.Data - b.Data as Trend\nfrom    data a\nleft join data b\non      a.fiscalYear = b.fiscalYear\nand     a.rn = b.rn + 1\norder by a.fiscalYear, a.rn\n']], ['Self Join on variable data'], 2], [(1842459, 1), [['This particular query would not allow extension across fiscalYear boundaries - if you wanted to extend to cross these year boundaries you would simply want to drop the "partition by" clause and "fiscalYear" join condition and instead order the set by a combination of the fiscalYear and fiscalWeek, something like this:'], ['-10000']], [[' with data as\n(\n    select  row_number() over (order by a.fiscalYear + a.fiscalWeek) as rn,\n            a.fiscalYear, a.fiscalQuarter, a.fiscalWeek, a.Data\n    from    #TableName a\n)\nselect  a.fiscalYear, a.fiscalQuarter, a.fiscalWeek, a.Data, \n        a.Data - b.Data as Trend\nfrom    data a\nleft join data b\non      a.rn = b.rn + 1\norder by a.rn\n']], ['Self Join on variable data'], 2], [(1842620, 0), [["Let's assume you want the flexibility of the second approach.  Here's a common snippet I use for things like that:"], ['Now just toss that in a CTE and join it:']], [[" SELECT DATEADD(DAY, v.number, @fromdate)\nFROM master.dbo.spt_values v\nWHERE v.type = 'P'\nAND v.number <= DATEDIFF(DAY, @fromdate, @todate)\n"]], ['sql query to get daily payments for a month even if no payments on a given day'], 3], [(1842620, 1), [['Now just toss that in a CTE and join it:'], ['Update on PIVOT:  You should be able to just enclose that entire query in parentheses, then go:']], [[' WITH Dates_CTE (dt) AS\n(\n    -- // Paste the snippet above in here\n)\nSELECT d.dt AS paymentdate, ISNULL(SUM(p.paymentamount), 0) AS subtotal\nFROM Dates_CTE d\nLEFT JOIN tblpayment p\nON p.paymentdate = d.dt\nGROUP BY d.dt\nORDER BY d.dt\n']], ['sql query to get daily payments for a month even if no payments on a given day'], 3], [(1842620, 2), [['Update on PIVOT:  You should be able to just enclose that entire query in parentheses, then go:'], ['Hard to verify without knowing exactly what kind of data is in there, but try that as a starting point.']], [[' SELECT paymentdate, [Euro] AS euroamount, [Pound] as poundamount\nFROM\n(\n    -- // Insert the full query from above in here\n) p\nPIVOT\n(\n    SUM(subtotal)\n    FOR paymentcurrency IN ([Euro], [Pound])\n) AS pvt\n']], ['sql query to get daily payments for a month even if no payments on a given day'], 3], [(1844037, 0), [['You are trying to solve the " greatest-n-per-group " problem that I see posted on StackOverflow frequently.  Here is a query that gets the answer more reliably:'], ['Alternative that does the same thing:']], [[' SELECT t1.*\nFROM foo AS t1\nLEFT OUTER JOIN foo AS t2\n ON (t1.name = t2.name AND t1.rank < t2.rank)\nWHERE t2.name IS NULL;\n']], ['ActiveRecord nested SELECT -- can I do it without manual SQL?'], 2], [(1844037, 1), [['Alternative that does the same thing:'], ['I could just throw the above into  find_by_sql , but that just feels dirty. ']], [[' SELECT *\nFROM foo AS t1\nWHERE NOT EXISTS \n    (SELECT * FROM foo AS t2\n     WHERE t1.name = t2.name AND t1.rank < t2.rank);\n']], ['ActiveRecord nested SELECT -- can I do it without manual SQL?'], 2], [(1845066, 0), [['In T-SQL:'], ['If you were using Oracle it would be:']], [["      UPDATE table SET col = col + 'B' WHERE (PREDICATE THAT IDENTIFIES ROW)\n"]], ['Concatenating String in SQL Server 2005'], 2], [(1845066, 1), [['If you were using Oracle it would be:'], ['-10000']], [["      UPDATE table SET col = col || 'B' WHERE (PREDICATE THAT IDENTIFIES ROW)\n"]], ['Concatenating String in SQL Server 2005'], 2], [(1847092, 0), [['Consider a color as a vector in 3-dimensional space, you can then easily compute the difference by using 3d pythagoras:'], ['For instance, using  a typical weighted approach :']], [[' d = sqrt((r2-r1)^2 + (g2-g1)^2 + (b2-b1)^2)\n']], ['Given an RGB value what would be the best way to find the closest match in the database?'], 3], [(1847092, 1), [['For instance, using  a typical weighted approach :'], ["There's also various ways to optimize this calculation. For instance, since you're not really interested in the actual  d  value, you can dispense with the square root:"]], [[' d = sqrt(((r2-r1)*0.3)^2 + ((g2-g1)*0.59)^2 + ((b2-b1)*0.11)^2)\n']], ['Given an RGB value what would be the best way to find the closest match in the database?'], 3], [(1847092, 2), [["There's also various ways to optimize this calculation. For instance, since you're not really interested in the actual  d  value, you can dispense with the square root:"], ['Note here that in many C-syntax-based programming languages (like C#),  ^  does not mean "raise to the power of", but rather "binary exclusive or".']], [[' d =   ((r2-r1)*0.30)^2\n    + ((g2-g1)*0.59)^2\n    + ((b2-b1)*0.11)^2\n']], ['Given an RGB value what would be the best way to find the closest match in the database?'], 3], [(1847351, 0), [['The most readable way to check this is probably a double  where exists , like:'], ['An alternative that might perform better, using an  inner join  subquery as a filter:']], [[" SELECT  tr.*\nFROM    TravelRecords tr\nWHERE EXISTS (\n    SELECT * FROM TravelRecordRmks trr \n    WHERE trr.TravelEventID = tr.TravelEventID\n    AND trr.RemarkText = 'LOWCOST BOOKING'\n)\nAND EXISTS (\n    SELECT * FROM TravelRecordRmks trr \n    WHERE trr.TravelEventID = tr.TravelEventID\n    AND trr.RemarkText = 'CREDIT CARD USED'\n)\n"]], ['SQL - Table join where primary key in first table is part of key in second'], 2], [(1847351, 1), [['An alternative that might perform better, using an  inner join  subquery as a filter:'], ['The  HAVING COUNT(DISTINCT RemarkText) = 2  makes sure that both types of remarks are found.']], [[" SELECT  tr.*\nFROM    TravelRecords tr\nINNER JOIN (\n        SELECT TravelEventID\n        FROM TravelRecordRmks trr \n        WHERE RemarkText IN ('CREDIT CARD USED','LOWCOST BOOKING')\n        GROUP BY TravelEventID\n        HAVING COUNT(DISTINCT RemarkText) = 2\n) filter \nON      filter.TravelEventID = tr.TravelEventID\n"]], ['SQL - Table join where primary key in first table is part of key in second'], 2], [(1848693, 0), [['It should be:'], ['Update:']], [[' YourTable (Id, Name, Value)\nYourTablePriority (PriorityId, Priority, Id)\n']], ['MySQL get rows but prefer one column value over another'], 2], [(1848693, 1), [['Update:'], ['This should work in sql server, you may need a little change to make it work in mysql.']], [[' select * from YourTable a \nwhere a.Id not in \n   (select b.Id from YourTablePriority b)\n']], ['MySQL get rows but prefer one column value over another'], 2], [(1849126, 0), [['And your situation is even simpler (if I understood your problem description correctly):'], ['Or, if instead of (id, type, start)->(one, two, three, four) you have (id, type, start, stop)->(one, two, three, four) (meaning you have to chose other columns that correspond\nto max(stop)), this query usually results in sensible execution plan:']], [[' select id, type, start, max(stop), one, two, three, four\n    from (...) types\n    group by id, type, start, one, two, three, four\n    order by ...\n']], ['Remove dupes from recordset excluding columns from dupe condition'], 2], [(1849126, 1), [['Or, if instead of (id, type, start)->(one, two, three, four) you have (id, type, start, stop)->(one, two, three, four) (meaning you have to chose other columns that correspond\nto max(stop)), this query usually results in sensible execution plan:'], ['but it depends on how data is distributed among your source tables and what indexes are present. In some cases solutions from link above might still be better.']], [[' select id, type, start, stop, one, two, three, four\n    from (...) types\n    where stop = (select max(stop)\n                  from (...) t2\n                  where t2.id = types.id\n                        and t2.type = types.type\n                        and t2.start = types.start)\n']], ['Remove dupes from recordset excluding columns from dupe condition'], 2], [(1851781, 0), [['First, create a table called  pivot :'], ['Insert into that tables as many rows as there are columns that you want to pivot in  foo . Since you have three columns in  foo  that you want to pivot, create three rows in the pivot table:']], [[' CREATE Table pivot (\n  count int\n);\n']], ['Transpose a row into columns with MySQL without using UNIONS?'], 3], [(1851781, 1), [['Insert into that tables as many rows as there are columns that you want to pivot in  foo . Since you have three columns in  foo  that you want to pivot, create three rows in the pivot table:'], ['Now do a Cartesian join between  foo  and  pivot , using a  CASE  to select the correct column based on the count:']], [[' insert into pivot values (1);\ninsert into pivot values (2);\ninsert into pivot values (3);\n']], ['Transpose a row into columns with MySQL without using UNIONS?'], 3], [(1851781, 2), [['Now do a Cartesian join between  foo  and  pivot , using a  CASE  to select the correct column based on the count:'], ['This should give you what you want.']], [[' SELECT foo.id, Case pivot.count\n  When 1 Then cat\n  When 2 Then one_above\n  When 3 Then top_level\nEnd Case\nFROM foo JOIN pivot;\n']], ['Transpose a row into columns with MySQL without using UNIONS?'], 3], [(1851883, 0), [['A schema may suit:'], ['The constraints for this schema are:']], [['    Set rs = cn.OpenSchema(adSchemaColumns, _\n   Array(Empty, Empty, Empty, SelectFieldName))\n']], ['How to find list of all tables in Access Database matching certain format in Delphi'], 3], [(1851883, 1), [['The constraints for this schema are:'], ['Columns (fields) returned are:']], [[' TABLE_CATALOG\nTABLE_SCHEMA\nTABLE_NAME\nCOLUMN_NAME \n']], ['How to find list of all tables in Access Database matching certain format in Delphi'], 3], [(1851883, 2), [['Columns (fields) returned are:'], ['-- [Obtaining Schema Information from a Database]( http://msdn.microsoft.com/en-us/library/kcax58fh(VS.80).aspx)']], [[' TABLE_CATALOG\nTABLE_SCHEMA\nTABLE_NAME\nCOLUMN_NAME\nCOLUMN_GUID\nCOLUMN_PROPID\nORDINAL_POSITION\nCOLUMN_HASDEFAULT\nCOLUMN_DEFAULT\nCOLUMN_FLAGS\nIS_NULLABLE\nDATA_TYPE\nTYPE_GUID\nCHARACTER_MAXIMUM_LENGTH\nCHARACTER_OCTET_LENGTH\nNUMERIC_PRECISION\nNUMERIC_SCALE\nDATETIME_PRECISION\nCHARACTER_SET_CATALOG\nCHARACTER_SET_SCHEMA\nCHARACTER_SET_NAME\nCOLLATION_CATALOG\nCOLLATION_SCHEMA\nCOLLATION_NAME\nDOMAIN_CATALOG\nDOMAIN_SCHEMA\nDOMAIN_NAME\nDESCRIPTION \n']], ['How to find list of all tables in Access Database matching certain format in Delphi'], 3], [(1852074, 0), [['It may vary slightly depending on the version of SQL Server, but this will work for 2005:'], ['In 2000:']], [[" SELECT\n     COUNT(*)\nFROM\n     <database name>.sys.columns\nWHERE\n     object_id = OBJECT_ID('<database name>.<owner>.<table name>')\n"]], ['How to find columns count of any table in any database from sql server master database?'], 3], [(1852074, 1), [['In 2000:'], ['UPDATE FOR NEWER VERSIONS OF SQL Server and ANSI compliance:']], [[" SELECT\n     COUNT(*)\nFROM\n     <database name>.sysobjects o\nINNER JOIN <database name>.syscolumns c ON\n     c.id = o.id\nWHERE\n     o.name = '<table name>'\n"]], ['How to find columns count of any table in any database from sql server master database?'], 3], [(1852074, 2), [['UPDATE FOR NEWER VERSIONS OF SQL Server and ANSI compliance:'], ['-10000']], [[" SELECT COUNT(*)\nFROM\n    <database name>.INFORMATION_SCHEMA.COLUMNS\nWHERE\n    TABLE_SCHEMA = '<table schema>' AND\n    TABLE_NAME = '<table name>'\n"]], ['How to find columns count of any table in any database from sql server master database?'], 3], [(1852293, 0), [['-10000'], ['EDIT - thx for checking, Craig']], [[" select t1.ts as hival, t2.ts as loval\nfrom metdata t1, metdata t2\nwhere t2.ts = (select max(ts) from metdata t3\nwhere t3.ts < t1.ts)\nand not timediff(t1.ts, t2.ts) = '00:10:00'\n"]], ['How to find missing data rows using SQL?'], 4], [(1852293, 1), [['EDIT - thx for checking, Craig'], ['...now by combining this table with a copy of itself a couple of times means we can dynamically generate a list of a specified length']], [[' select d1.* from \n(select 1 as digit\nunion select 2 \nunion select 3 \nunion select 4 \nunion select 5 \nunion select 6 \nunion select 7 \nunion select 8 \nunion select 9 \nunion select 0 \n) as d1\n']], ['How to find missing data rows using SQL?'], 4], [(1852293, 2), [['...now by combining this table with a copy of itself a couple of times means we can dynamically generate a list of a specified length'], ['... which means we can use the original sql to drive the example from above to generate a series of timestamps for each hival lowval pair. Bear with me, this sql is a bit long now...']], [[' select curdate() + \nINTERVAL  (d1.digit * 100 + d2.digit * 10 + d3.digit) * 10 MINUTE \nas date \nfrom (select 1 as digit\nunion select 2 \nunion select 3 \nunion select 4 \nunion select 5 \nunion select 6 \nunion select 7 \nunion select 8 \nunion select 9 \nunion select 0 \n) as d1\njoin\n(select 1 as digit\nunion select 2 \nunion select 3 \nunion select 4 \nunion select 5 \nunion select 6 \nunion select 7 \nunion select 8 \nunion select 9 \nunion select 0 \n) as d2\njoin\n(select 1 as digit\nunion select 2 \nunion select 3 \nunion select 4 \nunion select 5 \nunion select 6 \nunion select 7 \nunion select 8 \nunion select 9 \nunion select 0 \n) as d3\nwhere (d1.digit * 100 + d2.digit * 10 + d3.digit) between 1 and 42\norder by 1\n']], ['How to find missing data rows using SQL?'], 4], [(1852293, 3), [['... which means we can use the original sql to drive the example from above to generate a series of timestamps for each hival lowval pair. Bear with me, this sql is a bit long now...'], ["...now there's a bit of epic sql \nNOTE : using the digits table 3 times gives a maximum gap it will cover of a bit over 6 days"]], [[" select daterange.loval + INTERVAL  (d1.digit * 100 + d2.digit * 10 + d3.digit) * 10 MINUTE as date \nfrom \n(select t1.ts as hival, t2.ts as loval\nfrom metdata t1, metdata t2\nwhere t2.ts = (select max(ts) from metdata t3\nwhere t3.ts < t1.ts)\nand not timediff(t1.ts, t2.ts) = '00:10:00'\n) as daterange\njoin\n(select 1 as digit\nunion select 2 \nunion select 3 \nunion select 4 \nunion select 5 \nunion select 6 \nunion select 7 \nunion select 8 \nunion select 9 \nunion select 0 \n) as d1\njoin\n(select 1 as digit\nunion select 2 \nunion select 3 \nunion select 4 \nunion select 5 \nunion select 6 \nunion select 7 \nunion select 8 \nunion select 9 \nunion select 0 \n) as d2\njoin\n(select 1 as digit\nunion select 2 \nunion select 3 \nunion select 4 \nunion select 5 \nunion select 6 \nunion select 7 \nunion select 8 \nunion select 9 \nunion select 0 \n) as d3\nwhere (d1.digit * 100 + d2.digit * 10 + d3.digit) between 1 and\n round((time_to_sec(timediff(hival, loval))-600) /600)\norder by 1\n"]], ['How to find missing data rows using SQL?'], 4], [(1853433, 0), [['To keep locks between multiple statements, they have to be wrapped in a transaction.  In your example:'], ['The update lock can be released before the insert is executed.  This would work reliably:']], [[' If (SELECT 1 FROM t3 with (updlock) where t3.a=-86)\n    INSERT INTO T3 SELECT -86,-86\n']], ['SQL Server locks - avoid insertion of duplicate entries'], 3], [(1853433, 1), [['The update lock can be released before the insert is executed.  This would work reliably:'], ['Single statements are always wrapped in a transaction, so this would work too:']], [[' begin transaction\nIf (SELECT 1 FROM t3 with (updlock) where t3.a=-86)\n    INSERT INTO T3 SELECT -86,-86\ncommit transaction\n']], ['SQL Server locks - avoid insertion of duplicate entries'], 3], [(1853433, 2), [['Single statements are always wrapped in a transaction, so this would work too:'], ['(This is assuming you have "implicit transactions" turned off, like the default SQL Server setting.)']], [['  INSERT INTO T3 SELECT -86,-86\n WHERE NOT EXISTS (SELECT 1 FROM t3 with (updlock) where t3.a=-86)\n']], ['SQL Server locks - avoid insertion of duplicate entries'], 3], [(1855303, 0), [['One of the ways to filter out rows with a lower  location_priority  is to use an  inner join  as filter:'], ['An alternative is a  where ... in <subquery>   clause, for example:']], [[' SELECT     s.name, i.content, i.published\nFROM       items i \nINNER JOIN sources s\nON         i.source_id = s.id\nAND        s.active = 1\nINNER JOIN (\n    SELECT unique_id, max(location_priority) as prio\n    FROM items i\n    INNER JOIN sources s ON s.id = i.source_id AND s.active = 1\n    GROUP BY unique_id) filter\nON         i.unique_id = filter.unique_id\nAND        s.location_priority = filter.prio;\n']], ['Aggregating SQL rows with precedence'], 3], [(1855303, 1), [['An alternative is a  where ... in <subquery>   clause, for example:'], ['EDIT: One way to break ties with multiple sources at the same priority is a  WHERE  clause with a subquery.  This example breaks ties on  i.id DESC :']], [[' SELECT     s.name, i.content, i.published\nFROM       items i \nINNER JOIN sources s\nON         i.source_id = s.id\nAND        s.active = 1\nWHERE      (i.unique_id, s.location_priority) IN (\n    SELECT unique_id, max(location_priority)\n    FROM items i\n    INNER JOIN sources s ON s.id = i.source_id AND s.active = 1\n    GROUP BY unique_id\n);\n']], ['Aggregating SQL rows with precedence'], 3], [(1855303, 2), [['EDIT: One way to break ties with multiple sources at the same priority is a  WHERE  clause with a subquery.  This example breaks ties on  i.id DESC :'], ['Quassnoi also has an article on  selecting records holding group-wise maximum (resolving ties)  :)']], [[' SELECT     s.name, i.unique_id, i.content, i.published\nFROM       (\n           SELECT unique_id, min(location_priority) as prio\n           FROM items i\n           INNER JOIN sources s ON s.id = i.source_id AND s.active = 1\n           GROUP BY unique_id\n           ) filter\nJOIN       items i\nJOIN       sources s\nON         s.id = i.source_id \n           AND s.active = 1\nWHERE      i.id =\n           (\n           SELECT   i.id\n           FROM     items i\n           JOIN     sources s \n           ON       s.id = i.source_id \n                    AND s.active = 1\n           WHERE    i.unique_id = filter.unique_id\n           AND      s.location_priority = filter.prio\n           ORDER BY i.id DESC\n           LIMIT 1\n           )\n']], ['Aggregating SQL rows with precedence'], 3], [(1857810, 0), [['I would start by creating a migration in either the new or old app that looks something like this.'], ['If that does not work you can migrate each item in a loop with something along these lines:']], [[" class Migration:\n\n    def forwards(self, orm):\n        db.rename_table('old_vote', 'new_vote')    \n\n    def backwards(self, orm):\n        db.rename_table('new_vote', 'old_vote')\n"]], ['How do I migrate data from one model to another using South in Django?'], 2], [(1857810, 1), [['If that does not work you can migrate each item in a loop with something along these lines:'], ['Note: You must use  orm[...]  to access any models outside the app currently being migrated.  Otherwise, standard  orm.Vote.objects.all()  notation works.']], [[" def forwards(self, orm):\n    for old in orm['old.vote'].objects.all():\n        # create a new.Vote with old's data\nmodels = {\n    'old.vote' = { ... },\n    'new.vote' = { ... },\n}\n"]], ['How do I migrate data from one model to another using South in Django?'], 2], [(1857959, 0), [['Use:'], ['If you want to see how many times a user has downloaded a specific item:']], [[" SELECT u.name,\n       COUNT(d.user_id) 'num_downloaded'\nFROM USERS u\nOIN DOWNLOADS d ON d.user_id = u.user_id\nGROUP BY u.name\n"]], ['Get all entries from one table together with the count of these entries in another table'], 2], [(1857959, 1), [['If you want to see how many times a user has downloaded a specific item:'], ['-10000']], [[" SELECT u.name 'user_name',\n       i.name 'item_name',\n       COUNT(d.user_id) 'num_downloaded'\nFROM USERS u\nJOIN DOWNLOADS d ON d.user_id = u.user_id\nJOIN ITEMS i ON i.item_id = d.item_id\nGROUP BY u.name, i.name\n"]], ['Get all entries from one table together with the count of these entries in another table'], 2], [(1858070, 0), [['Use the "datename" function:'], ['or with a variable:']], [[" print datename(weekday, '11/29/2009')\n"]], ['Finding Day in T-SQL'], 2], [(1858070, 1), [['or with a variable:'], ['-10000']], [[" declare @date smalldatetime\nset @date = '12/25/2008'\nselect datename(weekday, @date)\n"]], ['Finding Day in T-SQL'], 2], [(1858559, 0), [['UPDATE:  My suggestion is the same even if you are running your script on a dedicated server! However, if you want to perform a full-text search of the word "literal" in BOOLEAN MODE like you have described, you can remove the  +  operator (because you are searching only one word) and construct the query as follow:'], ['So, to accomplish what you are trying to do, the fastest and easiest way is to follow the suggestion of Paul, using the  %  placeholder:']], [[" SELECT listOfColumsNames WHERE\nMATCH (colName) \nAGAINST ('literal*' IN BOOLEAN MODE);\n"]], ['Search literal within a word'], 2], [(1858559, 1), [['So, to accomplish what you are trying to do, the fastest and easiest way is to follow the suggestion of Paul, using the  %  placeholder:'], ['-10000']], [[" SELECT listOfColumsNames \nWHERE colName LIKE '%literal%';\n"]], ['Search literal within a word'], 2], [(1859469, 0), [['For Example, this is a very simple table I have in one of my projects, and it works with Linq-to-SQL just fine:'], ['Then you just need a Repository to connect to the DB:']], [[' [Table(Name = "Categories")]\npublic class Category : IDataErrorInfo\n{\n    [Column(IsPrimaryKey = true, IsDbGenerated = true, AutoSync = AutoSync.OnInsert)]\n    public int Id { get; set; }\n    [Column] public string Name { get; set; }\n    [Column] public string ExtensionString { get; set; }\n}\n']], ['Is it possible to use Linq-SQL without drag-and-drop?'], 2], [(1859469, 1), [['Then you just need a Repository to connect to the DB:'], ['Of course there is more to it, but this shows you the very basics and it is not hard to do once you understand it. This way you have 100% control over your classes and you can still take advantage of Linq-to-SQL.']], [[' class CategoryRepository : ICategoryRepository\n{\n    private Table<Category> categoryTable;\n    public CategoryRepository(string connectionString)\n    {\n        categoryTable = (new DataContext(connectionString)).GetTable<Category>();\n    }\n}\n']], ['Is it possible to use Linq-SQL without drag-and-drop?'], 2], [(1860002, 0), [['This looks like you can use a between'], ['OK, rather try this']], [[' x BETWEEN $x-1 AND $x+1 AND y BETWEEN $y-1 AND $y+1 AND z = $z\n']], ['Selection of neighbors cells in a hexagonal field'], 3], [(1860002, 1), [['OK, rather try this'], ['or even']], [[' WHERE   x BETWEEN ($x-1 AND $x+1 AND y = $y AND z = $z)\nOR      (y BETWEEN $y-1 AND $y+1 AND x = $x AND z = $z)\nOR      (y BETWEEN $y-1 AND $y+1 AND x = $x + $tbDir AND z = $z)\n']], ['Selection of neighbors cells in a hexagonal field'], 3], [(1860002, 2), [['or even'], ['-10000']], [[' WHERE   (   (x BETWEEN $x-1 AND $x+1 AND y = $y )\n            OR      (y BETWEEN $y-1 AND $y+1 AND x = $x)\n            OR      (y BETWEEN $y-1 AND $y+1 AND x = $x + $tbDir)\n        )\nAND     z = $z\n']], ['Selection of neighbors cells in a hexagonal field'], 3], [(1860395, 0), [['You need to escape the single-quotes, by typing them twice:'], ['Also, your  WHERE  clause is nonsensical and can be dropped entirely']], [[" UPDATE ISTANBUL_TABLE SET TEXT = '<  body>< p>< img src=''/imagem.png ''>' WHERE 1=1\n"]], ['Using comma with an update sentence'], 2], [(1860395, 1), [['Also, your  WHERE  clause is nonsensical and can be dropped entirely'], ['-10000']], [[" UPDATE ISTANBUL_TABLE SET TEXT = '<body><p><img src=''/imagem.png''>'\n"]], ['Using comma with an update sentence'], 2], [(1861789, 0), [["The keyword you're looking for is  column_value . With your setting:"], ['To call the procedure you would simply:']], [[' SQL> CREATE OR REPLACE TYPE NUMBER_ARRAY_T is TABLE of NUMBER;\n  2  /\n\nType created\nSQL> CREATE OR REPLACE PROCEDURE validate_order_ids(i_orders IN number_array_t,\n  2                                                 o_output OUT SYS_REFCURSOR)\n  3  IS BEGIN\n  4      OPEN o_output FOR\n  5          SELECT COLUMN_VALUE\n  6            FROM TABLE(i_orders)\n  7           WHERE COLUMN_VALUE NOT IN (SELECT order_id FROM orders);\n  8  END validate_order_ids;\n  9  /\n\nProcedure created\n']], ['Oracle nested tables and column names'], 2], [(1861789, 1), [['To call the procedure you would simply:'], ['-10000']], [[' SQL> VARIABLE x REFCURSOR\nSQL> exec validate_order_ids(number_array_t(1,5), :x);\n\nProcÚdure PL/SQL terminÚe avec succÞs.\n\nSQL> print x\n\nCOLUMN_VALUE\n------------\n           5\n']], ['Oracle nested tables and column names'], 2], [(1863606, 0), [['In Sql Server 2005+, the best approach would be to use a  ranking/window function  in conjunction with a  CTE , like this:'], ['For an ANSI-SQL compliant solution, a subquery and self-join will work, like this:']], [[' with exam_data as\n(\n    select  r.student_id, r.score, r.date,\n            row_number() over(partition by r.student_id order by r.score desc) as rn\n    from    exam_results r\n)\nselect  s.name, d.score, d.date, d.student_id\nfrom    students s\njoin    exam_data d\non      s.id = d.student_id\nwhere   d.rn = 1;\n']], ['Joining tables based on the maximum value'], 3], [(1863606, 1), [['For an ANSI-SQL compliant solution, a subquery and self-join will work, like this:'], ["This last one assumes there aren't duplicate student_id/max_score combinations, if there are and/or you want to plan to de-duplicate them, you'll need to use another subquery to join to with something deterministic to decide which record to pull. For example, assuming you can't have multiple records for a given student with the same date, if you wanted to break a tie based on the most recent max_score, you'd do something like the following:"]], [[' select  s.name, r.student_id, r.score, r.date\nfrom    (\n            select  r.student_id, max(r.score) as max_score\n            from    exam_results r\n            group by r.student_id\n        ) d\njoin    exam_results r\non      r.student_id = d.student_id\nand     r.score = d.max_score\njoin    students s\non      s.id = r.student_id;\n']], ['Joining tables based on the maximum value'], 3], [(1863606, 2), [["This last one assumes there aren't duplicate student_id/max_score combinations, if there are and/or you want to plan to de-duplicate them, you'll need to use another subquery to join to with something deterministic to decide which record to pull. For example, assuming you can't have multiple records for a given student with the same date, if you wanted to break a tie based on the most recent max_score, you'd do something like the following:"], ["EDIT: Added proper de-duplicating query thanks to Mark's good catch in comments"]], [[' select  s.name, r3.student_id, r3.score, r3.date, r3.other_column_a, ...\nfrom    (\n            select  r2.student_id, r2.score as max_score, max(r2.date) as max_score_max_date\n            from    (\n                        select  r1.student_id, max(r1.score) as max_score\n                        from    exam_results r1\n                        group by r1.student_id\n                    ) d\n            join    exam_results r2\n            on      r2.student_id = d.student_id\n            and     r2.score = d.max_score\n            group by r2.student_id, r2.score\n        ) r\njoin    exam_results r3\non      r3.student_id = r.student_id\nand     r3.score = r.max_score\nand     r3.date = r.max_score_max_date\njoin    students s\non      s.id = r3.student_id;\n']], ['Joining tables based on the maximum value'], 3], [(1864560, 0), [['How many members currently have a valid "gym" pass'], ['So "How many members?":']], [[" SELECT COUNT(*)\n    FROM Subscriptions\n    WHERE CAST(FLOOR(CAST(GETDATE() AS FLOAT)) AS DATETIME) BETWEEN StartDate AND EndDate\n          AND TypeID = 'Gym'\n"]], ['What SQL queries will help analyse a membership base?'], 3], [(1864560, 1), [['So "How many members?":'], ['And "How many passes?":']], [[' SELECT COUNT(DISTINCT MemberID)\n    FROM Subscriptions\n    WHERE @Date BETWEEN StartDate AND EndDate\n']], ['What SQL queries will help analyse a membership base?'], 3], [(1864560, 2), [['And "How many passes?":'], ['-10000']], [[' SELECT COUNT(*)\n    FROM Subscriptions\n    WHERE @Date BETWEEN StartDate AND EndDate\n']], ['What SQL queries will help analyse a membership base?'], 3], [(1864838, 0), [["Are you sure the query isn't working?  Try:"], ["TOP 100  will limit the results to the first 100 rows, enough to get an idea if there's really a space in the output.  If there is, and RTRIM/LTRIM is not removing it - then you aren't dealing with a whitespace character.  In that case, try:"]], [[" SELECT TOP 100 '~'+ t.notes +'~'\n  FROM TABLE1 t\n"]], ['Remove trailing empty space in a field content'], 2], [(1864838, 1), [["TOP 100  will limit the results to the first 100 rows, enough to get an idea if there's really a space in the output.  If there is, and RTRIM/LTRIM is not removing it - then you aren't dealing with a whitespace character.  In that case, try:"], ['-10000']], [[" UPDATE TABLE1\n  SET notes = REPLACE(notes, \n                      SUBSTRING(notes, PATINDEX('%[^a-zA-Z0-9 '''''']%', notes), 1), \n                      '')\nWHERE PATINDEX('%[^a-zA-Z0-9 '''''']%', notes) <> 0\n"]], ['Remove trailing empty space in a field content'], 2], [(1865353, 0), [['Effectively, the IN statement creates a series of OR statements... so'], ['Is effectively']], [[' SELECT * FROM table WHERE column IN (1, 2, 3)\n']], ['Combining "LIKE" and "IN" for SQL Server'], 3], [(1865353, 1), [['Is effectively'], ["And sadly, that is the route you'll have to take with your LIKE statements"]], [[' SELECT * FROM table WHERE column = 1 OR column = 2 OR column = 3\n']], ['Combining "LIKE" and "IN" for SQL Server'], 3], [(1865353, 2), [["And sadly, that is the route you'll have to take with your LIKE statements"], ['-10000']], [[" SELECT * FROM table\nWHERE column LIKE 'Text%' OR column LIKE 'Hello%' OR column LIKE 'That%'\n"]], ['Combining "LIKE" and "IN" for SQL Server'], 3], [(1865842, 0), [['Try the following, which will return the age in days.'], ['For age in years use:']], [[' SELECT *, CINT(Now()-[Birth Date]) as AGE FROM TableName\n']], ['Wrong Result after Refresh pressed on DbNavigator Delphi'], 4], [(1865842, 1), [['For age in years use:'], ['Another option here would be to create a calculated field in Delphi and perform the logic there.  In your onCalculated event you would code something like the following:']], [[' SELECT *, INT((Now()-[Birth Date]) / 365.242199) as AGEYRS from TableName\n']], ['Wrong Result after Refresh pressed on DbNavigator Delphi'], 4], [(1865842, 2), [['Another option here would be to create a calculated field in Delphi and perform the logic there.  In your onCalculated event you would code something like the following:'], ['And yet a third method.  Rather than allow the refresh to work as it currently does, override the behavior and force a close/reopen of the dataset by using the onClick of the navigator:']], [[" procedure TForm1.ds1CalcFields(DataSet: TDataSet);\nbegin\n  DataSet.FieldByName('CALCDATE').AsInteger := \n    Trunc((Date - DataSet.FieldByName('BIRTH DATE').AsDateTime) / 365.242199);\nend;\n"]], ['Wrong Result after Refresh pressed on DbNavigator Delphi'], 4], [(1865842, 3), [['And yet a third method.  Rather than allow the refresh to work as it currently does, override the behavior and force a close/reopen of the dataset by using the onClick of the navigator:'], ['-10000']], [[' procedure TForm1.dbnvgr1Click(Sender: TObject; Button: TNavigateBtn);\nbegin\n  if Button = nbRefresh then\n    begin\n      ds1.Close;\n      ds1.Open;\n    end;\nend;\n']], ['Wrong Result after Refresh pressed on DbNavigator Delphi'], 4], [(1866520, 0), [['Your current statement is probably like this:'], ['But you can also do this:']], [[" SELECT Persons.LastName,Orders.OrderNo\nINTO Persons_Order_Backup\nFROM Persons\nINNER JOIN Orders\nON Persons.P_Id=Orders.P_Id\nWHERE FirstName = 'Alistair'\n"]], ['Forcing a datatype in MS Access make table query'], 2], [(1866520, 1), [['But you can also do this:'], ['This way you have total control over the column types.  You can always drop the table later if you need to recreate it.']], [[" ----Create NewTable\nCREATE TABLE NewTable(FirstName VARCHAR(100), LastName VARCHAR(100), Total DOUBLE)\n----INSERT INTO NewTableusing SELECT\nINSERT INTO NewTable(FirstName, LastName, Total)\nSELECT FirstName, LastName, \nFROM Person p\nINNER JOIN Orders o\nON p.P_Id = o.P_Id\nWHERE p.FirstName = 'Alistair'\n"]], ['Forcing a datatype in MS Access make table query'], 2], [(1867142, 0), [['Have a look at this, it should avoid all the steps you had'], ['The results of an UPDATE statement are\n  undefined if the statement includes a\n  FROM clause that is not specified in\n  such a way that only one value is\n  available for each column occurrence\n  that is updated, that is if the UPDATE\n  statement is not deterministic. For\n  example, in the UPDATE statement in\n  the following script, both rows in\n  Table1 meet the qualifications of the\n  FROM clause in the UPDATE statement;\n  but it is undefined which row from\n  Table1 is used to update the row in\n  Table2.']], [[" DECLARE @Table TABLE(\n        ID INT,\n        Type INT,\n        String VARCHAR(50)\n)\nINSERT INTO @Table (ID,[Type],String) SELECT 100 ,1   ,'John'\nINSERT INTO @Table (ID,[Type],String) SELECT 100 ,2   ,'Milton'\nINSERT INTO @Table (ID,[Type],String) SELECT 101 ,1   ,'Johny'\nINSERT INTO @Table (ID,[Type],String) SELECT 101 ,2   ,'Gaddar'\n\nSELECT  IDs.ID,\n        tName.String NAME,\n        tSur.String Surname\nFROM    (\n            SELECT DISTINCT ID\n            FROM @Table\n        ) IDs LEFT JOIN\n        @Table tName ON IDs.ID = tName.ID AND tName.[Type] = 1  LEFT JOIN\n        @Table tSur ON IDs.ID = tSur.ID AND tSur.[Type] = 2\n"]], ['Updating Uncommitted data to a cell with in an UPDATE statement'], 2], [(1867142, 1), [['The results of an UPDATE statement are\n  undefined if the statement includes a\n  FROM clause that is not specified in\n  such a way that only one value is\n  available for each column occurrence\n  that is updated, that is if the UPDATE\n  statement is not deterministic. For\n  example, in the UPDATE statement in\n  the following script, both rows in\n  Table1 meet the qualifications of the\n  FROM clause in the UPDATE statement;\n  but it is undefined which row from\n  Table1 is used to update the row in\n  Table2.'], ['-10000']], [[" USE AdventureWorks;\nGO\nIF OBJECT_ID ('dbo.Table1', 'U') IS NOT NULL\n    DROP TABLE dbo.Table1;\nGO\nIF OBJECT_ID ('dbo.Table2', 'U') IS NOT NULL\n    DROP TABLE dbo.Table2;\nGO\nCREATE TABLE dbo.Table1 \n    (ColA int NOT NULL, ColB decimal(10,3) NOT NULL);\nGO\nCREATE TABLE dbo.Table2 \n    (ColA int PRIMARY KEY NOT NULL, ColB decimal(10,3) NOT NULL);\nGO\nINSERT INTO dbo.Table1 VALUES(1, 10.0), (1, 20.0), (1, 0.0);\nGO\n\nUPDATE dbo.Table2 \nSET dbo.Table2.ColB = dbo.Table2.ColB + dbo.Table1.ColB\nFROM dbo.Table2 \n    INNER JOIN dbo.Table1 \n    ON (dbo.Table2.ColA = dbo.Table1.ColA);\nGO\nSELECT ColA, ColB \nFROM dbo.Table2;\n"]], ['Updating Uncommitted data to a cell with in an UPDATE statement'], 2], [(1867642, 0), [['1) Specify the format of the date in your query:'], ['2) Use the ANSI standard for date literals:']], [[" select *\nfrom news\nwhere news_date = to_date ('01-DEC-2009','DD-MON-RRRR');\n"]], ['Perl DBD::ODBC Issues with Oracle Date Formats'], 2], [(1867642, 1), [['2) Use the ANSI standard for date literals:'], ['-10000']], [[" select *\nfrom news\nwhere news_date = DATE '2009-12-01';\n"]], ['Perl DBD::ODBC Issues with Oracle Date Formats'], 2], [(1867946, 0), [['-10000'], ['and']], [[' SELECT * FROM...\n']], ['Sql wildcard: performance overhead?'], 2], [(1867946, 1), [['and'], ['will perform the same because both are an unoptimised scan']], [[' SELECT every, column, list, ... FROM...\n']], ['Sql wildcard: performance overhead?'], 2], [(1868417, 0), [['For example :'], ['--> no duplicate']], [[' select x,y,z from table1, table2, where ...\n']], ['Oracle bug? SELECT returns no dupes, INSERT from SELECT has duplicate rows'], 3], [(1868417, 1), [['--> no duplicate'], ['--> duplicate error']], [[' insert into example_table\nselect x,y,z from table1, table2, where ...\n']], ['Oracle bug? SELECT returns no dupes, INSERT from SELECT has duplicate rows'], 3], [(1868417, 2), [['--> duplicate error'], ['--> no duplicate']], [[' insert into example_table\nselect * from (\n       select x,y,z from table1, table2, where ...\n)\n']], ['Oracle bug? SELECT returns no dupes, INSERT from SELECT has duplicate rows'], 3], [(1869465, 0), [['CHARINDEX  is what you are looking for'], ['-or-']], [[" select CHARINDEX('@', 'someone@somewhere.com')\n-----------\n8\n\n(1 row(s) affected)\n"]], ['IndexOf function in T-SQL'], 2], [(1869465, 1), [['-or-'], ['-10000']], [[" select CHARINDEX('c', 'abcde')\n-----------\n3\n\n(1 row(s) affected)\n"]], ['IndexOf function in T-SQL'], 2], [(1870670, 0), [['1) A script to perform a single insert, here called script_insert.sql:'], ['2) A script to control the process, here called main.sql:']], [[" insert into t1 values ('&1.');\n@main\n"]], ['how to loop accepting user input with pl/sql?'], 3], [(1870670, 1), [['2) A script to control the process, here called main.sql:'], ['Now in SQL Plus you can run it like this:']], [[' accept selection prompt "Please enter value, enter \'done\' when no more values: "\n\nset term off verify off\n\ncolumn script new_value v_script\n\nselect case \'&selection.\'\n       when \'done\' then \'\'\n       else \'@script_insert &selection.\'\n       end as script\nfrom dual;\n\nset term on\n\n@&v_script.\n']], ['how to loop accepting user input with pl/sql?'], 3], [(1870670, 2), [['Now in SQL Plus you can run it like this:'], ['Let me reiterate that this demonstrates it can be done, I would not claim it to be a good way to implement the requirement - unless it is just an ad hoc tool to be used by a DBA or developer.  I would never give an  end user  SQL Plus as a UI!']], [[" SQL> select * from t1;\n\nno rows selected\n\nSQL> @main\nPlease enter value, enter 'done' when no more values: 1\nPlease enter value, enter 'done' when no more values: 2\nPlease enter value, enter 'done' when no more values: 3\nPlease enter value, enter 'done' when no more values: done\nSQL> select * from t1;\n\n        N1\n----------\n         1\n         2\n         3\n"]], ['how to loop accepting user input with pl/sql?'], 3], [(1870760, 0), [['-10000'], ['This ends up looking like :  ']], [[' select a.doc_id, count(*)\nfrom Documents_to_categories A \nwhere a.doc_id in (<doc_id list>)\nand a.cat_id in (<cat_id list>)\ngroup by doc_id\nhaving count(*) = <cat_id list length>\n']], ['Filtering objects with many to many relationships'], 2], [(1870760, 1), [['This ends up looking like :  '], ['-10000']], [[' select b.id, b.document_name, a,cat_id\nfrom Documents_to_categories A,\nDocuments B\nwhere a.doc_id = b.id\nand b.id in (select mylist.doc_id from (\n    select a.doc_id, count(*)\n    from Documents_to_categories A \n    where a.doc_id in (<doc_id list>)\n    and a.cat_id in (<cat_id list>)\n    group by doc_id\n    having count(*) = <cat_id list length>\n\n) as mylist )\n']], ['Filtering objects with many to many relationships'], 2], [(1870950, 0), [["The first solution uses  GROUP BY  to count the tags per article that match 'outdoors' or 'sports' and then returns only the groups that have both tags."], ['The other solution uses a  JOIN  per distinct tag.  By using inner joins, the query naturally restricts to articles that match all the tags you specify.']], [[" SELECT a.id, a.name\nFROM articles AS a\nINNER JOIN articles_tags AS at ON (a.id = at.article_id)\nINNER JOIN tags AS t ON (t.id = at.tag_id)\nWHERE t.name IN ('outdoors', 'sports')\nGROUP BY a.id\nHAVING COUNT(DISTINCT t.name) = 2;\n"]], ['HABTM Query help'], 3], [(1870950, 1), [['The other solution uses a  JOIN  per distinct tag.  By using inner joins, the query naturally restricts to articles that match all the tags you specify.'], ['Re your followup question in the comment, I would do something like this:']], [[" SELECT a.id, a.name\nFROM articles AS a\nINNER JOIN articles_tags AS at1 ON (a.id = at1.article_id)\nINNER JOIN tags AS t1 ON (t1.id = at1.tag_id AND t1.name = 'outdoors')\nINNER JOIN articles_tags AS at2 ON (a.id = at2.article_id)\nINNER JOIN tags AS t2 ON (t2.id = at2.article_id AND t2.name = 'sports');\n"]], ['HABTM Query help'], 3], [(1870950, 2), [['Re your followup question in the comment, I would do something like this:'], ["This still only finds articles that have both tags 'outdoors' and 'sports', but then it further joins these articles to  all  its tags."]], [[" SELECT a.id, a.name, GROUP_CONCAT(t3.tag) AS all_tags\nFROM articles AS a\nINNER JOIN articles_tags AS at1 ON (a.id = at1.article_id)\nINNER JOIN tags AS t1 ON (t1.id = at1.tag_id AND t1.name = 'outdoors')\nINNER JOIN articles_tags AS at2 ON (a.id = at2.article_id)\nINNER JOIN tags AS t2 ON (t2.id = at2.article_id AND t2.name = 'sports');\nINNER JOIN articles_tags AS at3 ON (a.id = at3.article_id)\nINNER JOIN tags AS t3 ON (t3.id = at3.article_id);\nGROUP BY a.id;\n"]], ['HABTM Query help'], 3], [(1871129, 0), [['Use the  GROUP_CONCAT  function, but it means having to replace DISTINCT with a GROUP BY:'], ['Yes, you can:']], [["     SELECT idx_campus_bookinfo,\n           GROUP_CONCAT(c.userid SEPARATOR ',') as Buyer,\n           bookname,\n           book_explain,\n           writedate\n      FROM campus_bookinfo cb \nLEFT JOIN user_books ub ON idx_campus_bookinfo = id_product\nLEFT JOIN customer c ON ub.id_customer = c.id_customer\n    WHERE cb.idx_campus = 1 \n      AND cb.idxuser = 29 \n GROUP BY idx_campus_bookinfo, bookname, book_explain, writedate\n ORDER BY writedate DESC\n"]], ['MySQL Query: Optimal Querying'], 2], [(1871129, 1), [['Yes, you can:'], ['-10000']], [["     SELECT idx_campus_bookinfo,\n           GROUP_CONCAT(c.userid ORDER BY c.userid ASC SEPARATOR ',') as Buyer,\n           bookname,\n           book_explain,\n           writedate\n      FROM campus_bookinfo cb \nLEFT JOIN user_books ub ON idx_campus_bookinfo = id_product\nLEFT JOIN customer c ON ub.id_customer = c.id_customer\n    WHERE cb.idx_campus = 1 \n      AND cb.idxuser = 29 \n GROUP BY idx_campus_bookinfo, bookname, book_explain, writedate\n ORDER BY writedate DESC\n"]], ['MySQL Query: Optimal Querying'], 2], [(1871617, 0), [['-10000'], ["... but I'm still not sure this meets the problem you're trying to solve.  COUNT(I1) will return the same as COUNT(I2) because they'll be non-NULL in all the rows.  Are you trying to find the number of rows with non-zero values?"]], [[' SELECT COUNT(ID) AS Expr1, \n       COUNT(I1) AS Expr2, \n       COUNT(I2) AS Expr3, \n       COUNT(IN) AS ExprN \n FROM [mytable] \nWHERE (I1 + I2 + I3 + I4 + [... +] IN) <> 0\n']], ['counting number of rows while skipping some based on columns'], 2], [(1871617, 1), [["... but I'm still not sure this meets the problem you're trying to solve.  COUNT(I1) will return the same as COUNT(I2) because they'll be non-NULL in all the rows.  Are you trying to find the number of rows with non-zero values?"], ['-10000']], [[' SELECT COUNT(ID) AS Expr1,\n       SUM(CASE WHEN I1 = 0 THEN 0 ELSE 1 END) as Expr2,\n       SUM(CASE WHEN I2 = 0 THEN 0 ELSE 1 END) as Expr3,\n       SUM(CASE WHEN IN = 0 THEN 0 ELSE 1 END) as ExprN,\n FROM [mytable] \nWHERE (I1 + I2 + I3 + I4 + [... +] IN) <> 0\n']], ['counting number of rows while skipping some based on columns'], 2], [(1873440, 0), [['An update statement which references the current value would prevent overwriting.  So, instead of doing something like '], ['(it comes back as 350 and you want to subtract 50)...']], [[' SELECT Amount FROM BankAccount WHERE account_id = 1\n']], ['sql table cell modified by multiple threads at the same time'], 3], [(1873440, 1), [['(it comes back as 350 and you want to subtract 50)...'], ['do']], [[' UPDATE BankAccount SET Amount = 300 WHERE account_id = 1\n']], ['sql table cell modified by multiple threads at the same time'], 3], [(1873440, 2), [['do'], ['-10000']], [[' UPDATE BankAccount SET Amount = Amount - 50 WHERE account_id = 1\n']], ['sql table cell modified by multiple threads at the same time'], 3], [(1873541, 0), [['In the first line, try this:'], ["PS: The complete query (with delimiter and astander's advice):"]], [[" CREATE DEFINER='My_Username'@'%' PROCEDURE ChangePassword(IN SPusername VARCHAR(100),\n"]], ['Mysql syntax help'], 2], [(1873541, 1), [["PS: The complete query (with delimiter and astander's advice):"], ['-10000']], [[" DELIMITER //\nCREATE DEFINER='My_Username'@'%' PROCEDURE ChangePassword(\n    IN SPusername VARCHAR(100),\n    IN SPoldPassword VARCHAR(100),\n    IN SPnewPassword VARCHAR(100))\nBEGIN\nIF EXISTS(SELECT Password_Hash \n          FROM Customer\n          WHERE SPusername = Email \n          AND  SPoldPassword = Password_Hashed)\nTHEN\n  UPDATE Customer\n  SET Password_Hashed = SPnewPassword\n  WHERE SPusername = Email \n  AND  SPoldPassword = Password_Hashed;\nEND IF;\nEND//\nDELIMITER ;\n"]], ['Mysql syntax help'], 2], [(1873561, 0), [["Since you can't update subqueries with  row_number , you'll have to calculate the row number in the  set  part of the update.  At first I tried this:"], ["But that doesn't work, because the subquery only selects one row, and then the  row_number()  is always 1.  Using another subquery allows a meaningful result:"]], [[' update voyage_port a\nset a.port_seq = (\n  select \n    row_number() over (partition by voyage_id order by arrival_date)\n  from voyage_port b\n  where b.voyage_port_id = a.voyage_port_id\n)\n']], ['Update based on subquery fails'], 2], [(1873561, 1), [["But that doesn't work, because the subquery only selects one row, and then the  row_number()  is always 1.  Using another subquery allows a meaningful result:"], ["It works, but more complex than I'd expect for this task."]], [[' update voyage_port a\nset a.port_seq = (\n  select c.rn\n  from (\n      select \n        voyage_port_id\n      , row_number() over (partition by voyage_id \n            order by arrival_date) as rn\n      from voyage_port b\n   ) c\n  where c.voyage_port_id = a.voyage_port_id\n)\n']], ['Update based on subquery fails'], 2], [(1873651, 0), [['Just showing u the different result'], ['Left outer join query']], [[" declare @Actions table(id int , packageid int, actiontype int,dt date)\ndeclare @Packages table(id int,name varchar(50))\ninsert into @Actions \n    select 40,100340,0,'2009/01/01 3:00pm' union all\n    select 41,100340,12,'2009/01/01 5:00pm' union all\n    select 42,100340,2,'2009/01/01 5:30pm' union all\n    select 43,100341, 4,'2009/01/02 8:00am'\ninsert into @Packages \n    select 100340,'Testpackage'\n"]], ['SQL Server optional joins'], 6], [(1873651, 1), [['Left outer join query'], ['Full join(in this case u will get the same result)']], [[' select a.packageid,p.name,a.actiontype,a.dt\nfrom @Actions a\nleft join @Packages p\non a.packageid = p.id\n']], ['SQL Server optional joins'], 6], [(1873651, 2), [['Full join(in this case u will get the same result)'], ['Output:']], [[' select a.packageid,p.name,a.actiontype,a.dt\nfrom @Actions a\nfull join @Packages p\non a.packageid = p.id\n']], ['SQL Server optional joins'], 6], [(1873651, 3), [['Output:'], ["Inner join query(which u don't want)"]], [[' packageid   name    actiontype  dt\n100340  Testpackage 0   2009-01-01\n100340  Testpackage 12  2009-01-01\n100340  Testpackage 2   2009-01-01\n100341  NULL    4   2009-01-02\n']], ['SQL Server optional joins'], 6], [(1873651, 4), [["Inner join query(which u don't want)"], ['Output:']], [[' select a.packageid,p.name,a.actiontype,a.dt\nfrom @Actions a\njoin @Packages p\non a.packageid = p.id\n']], ['SQL Server optional joins'], 6], [(1873651, 5), [['Output:'], ['-10000']], [[' packageid   name    actiontype  dt\n100340  Testpackage 0   2009-01-01\n100340  Testpackage 12  2009-01-01\n100340  Testpackage 2   2009-01-01\n']], ['SQL Server optional joins'], 6], [(1874855, 0), [["If $(TokenValue) isnot a param, and you do not include the ' in the string value you can try using"], ['This will not work with all var types (INT and FLOAT works, but not decimal)']], [[" SET @MyVariable = '$(TokenValue)'\n"]], ['Tokens for SQL statement fill in blank instead of NULL making it crash'], 2], [(1874855, 1), [['This will not work with all var types (INT and FLOAT works, but not decimal)'], ['-10000']], [[" --WORKS\nDECLARE @MyVariable as INT\nSET @MyVariable = ''\nSELECT @MyVariable\n--WORKS\nDECLARE @MyVariable as FLOAT\nSET @MyVariable = ''\nSELECT @MyVariable\n--DOES NOT WORK\nDECLARE @MyVariable as DECIMAL(18,8)\nSET @MyVariable = ''\nSELECT @MyVariable\n"]], ['Tokens for SQL statement fill in blank instead of NULL making it crash'], 2], [(1875212, 0), [['Here is an indicative approach.  This uses a sequence to get a value and prepends a character, depending on  type .'], ['here it is in action']], [[" SQL> create or replace function generator\n  2      (p_type varchar2\n  3       , p_name in inserthere.name%type)\n  4      return inserthere.generate_id%type\n  5  is\n  6      c char(1);\n  7      return_value inserthere.generate_id%type;\n  8  begin\n  9      case p_type\n 10          when 'EXTREME' then\n 11              c := 'X';\n 12          when 'REGULAR' then\n 13              c := 'R';\n 14          when 'JUMBO' then\n 15              c := 'J';\n 16          else\n 17              c := 'P';\n 18      end case;\n 19\n 20      insert into inserthere\n 21          ( generate_id,\n 22          name)\n 23      values\n 24          (c || lpad(trim(to_char(my_seq.nextval)), 9, '0')\n 25           , p_name )\n 26      returning generate_id into return_value;\n 27\n 28      return return_value;\n 29  end;\n 30  /\n\nFunction created.\n\nSQL>\n"]], ['web form insert and trigger before insert'], 2], [(1875212, 1), [['here it is in action'], ['You can vary the precise implementation, depending on how you want to call it.  As is often the case, details matter and more information will tend to result in a more relevant answer.']], [[" SQL> var n varchar2(10)\nSQL> exec :n := generator ('EXTREME', 'ABC')\n\nPL/SQL procedure successfully completed.\n\nSQL> print n\n\nN\n--------------------------------\nX000000001\n\nSQL> exec :n := generator ('WHATEVER', 'SOMETHING')\n\nPL/SQL procedure successfully completed.\n\nSQL> print n\n\nN\n--------------------------------\nP000000002\n\nSQL>\n"]], ['web form insert and trigger before insert'], 2], [(1876013, 0), [['The following is an example that could make sense:'], ['And then query as follows:']], [[' CREATE TABLE clients (\n    client_id       uniqueidentifier  NOT NULL,\n    client_name     nvarchar(250)     NOT NULL,\n    client_country  char(2)           NOT NULL\n);\n\nCREATE TABLE suppliers (\n    supplier_id       uniqueidentifier  NOT NULL,\n    supplier_name     nvarchar(250)     NOT NULL,\n    supplier_country  char(2)           NOT NULL\n);\n']], ['Why are foreign keys more used in theory than in practice?'], 4], [(1876013, 1), [['And then query as follows:'], ['Another case where these joins make sense is in databases that offer geospatial features, like SQL Server 2008 or Postgres with PostGIS. You will be able to do queries like these:']], [[' SELECT \n    client_name, supplier_name, client_country \nFROM \n    clients \nINNER JOIN\n    suppliers ON (clients.client_country = suppliers.supplier_country)\nORDER BY\n    client_country;\n']], ['Why are foreign keys more used in theory than in practice?'], 4], [(1876013, 2), [['Another case where these joins make sense is in databases that offer geospatial features, like SQL Server 2008 or Postgres with PostGIS. You will be able to do queries like these:'], ['You can see another similar geospatial example in the accepted answer to the post " Sql 2008 query problem - which LatLong’s exists in a geography polygon? ":']], [[' SELECT\n    state, electorate \nFROM \n    electorates \nINNER JOIN \n    postcodes on (postcodes.Location.STIntersects(electorates.Location) = 1);\n']], ['Why are foreign keys more used in theory than in practice?'], 4], [(1876013, 3), [['You can see another similar geospatial example in the accepted answer to the post " Sql 2008 query problem - which LatLong’s exists in a geography polygon? ":'], ['These are all valid SQL joins that have nothing to do with foreign keys and candidate keys, and can still be useful in practice.']], [[' SELECT \n    G.Name, COUNT(CL.Id)\nFROM\n    GeoShapes G\nINNER JOIN \n    CrimeLocations CL ON G.ShapeFile.STIntersects(CL.LatLong) = 1\nGROUP BY \n    G.Name;\n']], ['Why are foreign keys more used in theory than in practice?'], 4], [(1876643, 0), [['So if I started with something like this:'], ["I'd add a new column like this:"]], [[" SELECT product, price\nFROM table\nUNION \nSELECT 'Total' AS product, SUM(price)\nFROM table\n"]], ['How to put the Order BY in SQL UNION so TOTALS will show up always as last row?'], 2], [(1876643, 1), [["I'd add a new column like this:"], ['That way, regular products appear first, then the total appears at the end.']], [[" SELECT product, price\nFROM (\n  SELECT product, price, 0 AS union_order\n  FROM table\n  UNION\n  SELECT 'Total' AS product, SUM(price), 1 AS union_order\n  FROM table\n)\nORDER BY union_order\n"]], ['How to put the Order BY in SQL UNION so TOTALS will show up always as last row?'], 2], [(1878086, 0), [['Sure, you could normalize. But the work involved to get the data in would be increased. I think you just need some useful queries to help you out, such as:'], ['Or:']], [[' SELECT [Runway Number], [Test Date], [Test Time], \n     Avg([First Third Avg. Friction]) as First, \n     Avg([Second Third Avg. Friction]) as Second, \n     Avg([Third Third Avg. Friction]) as Third, \n     Avg([Avg. Overall Friction]) as Overall\nFROM yourTable\nGROUP BY [Runway Number], [Test Date], [Test Time]\n']], ['Help designing small database'], 3], [(1878086, 1), [['Or:'], ['OR:']], [[' SELECT [Runway Number],\n     Avg([First Third Avg. Friction]) as First, \n     Avg([Second Third Avg. Friction]) as Second, \n     Avg([Third Third Avg. Friction]) as Third, \n     Avg([Avg. Overall Friction]) as Overall\nFROM yourTable\nGROUP BY [Runway Number]\n']], ['Help designing small database'], 3], [(1878086, 2), [['OR:'], ["I'm sure you get the idea..."]], [[' SELECT [Runway Number], YEAR([Test Date]) as [Test Year],\n     Avg([First Third Avg. Friction]) as First, \n     Avg([Second Third Avg. Friction]) as Second, \n     Avg([Third Third Avg. Friction]) as Third, \n     Avg([Avg. Overall Friction]) as Overall\nFROM yourTable\nGROUP BY [Runway Number], YEAR([Test Date])\n']], ['Help designing small database'], 3], [(1879144, 0), [['You were very close, considering the  DISTINCT :'], ['Caveat emptor: \nThe  GROUP BY/HAVING COUNT  version of the query is dependent on your data model having a composite key, unique or primary, defined for the two columns involved ( value_id  and  option_table_id ). If this is not in place, the database will not stop duplicates being added. If duplicate rows are possible in the data, this version can return false positives because a  value_id  could have 3 associations to the  option_table_id  5 - which would satisfy the  HAVING COUNT(*) = 3 .']], [['     SELECT v.id, \n           v.name \n      FROM VALUE v\n LEFT JOIN OPTION_MAP_VALUE omv ON omv.value_id = v.id\n LEFT JOIN OPTION_TABLE ot ON ot.id = omv.option_table_id\n     WHERE ot.id IN (5, 2, 3) \n       AND v.y_axis_id = 16\n  GROUP BY v.id, v.name\n    HAVING COUNT(*) = 3\n']], ['MySQL Join from multiple options to select one value'], 2], [(1879144, 1), [['Caveat emptor: \nThe  GROUP BY/HAVING COUNT  version of the query is dependent on your data model having a composite key, unique or primary, defined for the two columns involved ( value_id  and  option_table_id ). If this is not in place, the database will not stop duplicates being added. If duplicate rows are possible in the data, this version can return false positives because a  value_id  could have 3 associations to the  option_table_id  5 - which would satisfy the  HAVING COUNT(*) = 3 .'], ['-10000']], [['   SELECT v.id, \n         v.name \n    FROM VALUE v\n    JOIN OPTION_MAP_VALUE omv ON omv.value_id = v.id\n    JOIN OPTION_TABLE ot5 ON ot5.id = omv.option_table_id\n                         AND ot5.id = 5\n    JOIN OPTION_TABLE ot2 ON ot2.id = omv.option_table_id\n                         AND ot2.id = 2\n    JOIN OPTION_TABLE ot3 ON ot3.id = omv.option_table_id\n                         AND ot3.id = 3\n   WHERE v.y_axis_id = 16\nGROUP BY v.id, v.name\n']], ['MySQL Join from multiple options to select one value'], 2], [(1881800, 0), [['Given your sample data and assuming that at any point in the process you have the "recnum" value available for the current record, it would be possible to query for the next value by using a series of up to three queries.  If you think of the three pieces of data (surname, firstname, recnum) as a composite index, then you want to find the record that comes next in index order. So assuming you have the three pieces of data from the current record, run this:'], ['If that is empty, then run this:']], [[' select top 1 surname, firstname, recnum from Table\n    where surname = @CurrentLast and \n    firstname = @CurrentFirst and \n    Recnum > @CurrRec\n    order by surname, firstname, recnum\n']], ['SQL find next record by non-unique field'], 4], [(1881800, 1), [['If that is empty, then run this:'], ['And finally, if that is empty:']], [[' select top 1 surname, firstname, recnum from Table\n    where surname = @CurrentLast and \n    firstname > @CurrentFirst\n    order by surname, firstname, recnum\n']], ['SQL find next record by non-unique field'], 4], [(1881800, 2), [['And finally, if that is empty:'], ['If the three fields are indexed, it should be reasonably efficient. It would also be possible to use a single query such as the following (syntax probably wrong), but it would require a composite index on all three fields in order to be efficient.']], [[' select top 1 surname, firstname, recnum from Table\n    where surname > @CurrentLast\n    order by surname, firstname, recnum\n']], ['SQL find next record by non-unique field'], 4], [(1881800, 3), [['If the three fields are indexed, it should be reasonably efficient. It would also be possible to use a single query such as the following (syntax probably wrong), but it would require a composite index on all three fields in order to be efficient.'], ['If recnum refers to a physical record number in the underlying data and if the SQL engine uses the record number as the tie breaker when other conditions match in sorting, then I believe that recnum could be left out of the order by clauses.']], [[' select top 1 surname, firstname, recnum from Table\n    where surname+firstname+convert(recnum,char) > @CombinedValue\n    order by surname, firstname, recnum\n']], ['SQL find next record by non-unique field'], 4], [(1882555, 0), [['You can use an  UPDATE  statement as follows. '], ['To test this solution, try with a single string as a test.']], [[" --relies on one and only one dot in the email account!\nUPDATE  Customer\nSET  PreName = LEFT(Email, CHARINDEX('.',Email)-1) --FirstName\n     ,Name = SUBSTRING(Email,CHARINDEX('.',Email)+1, CHARINDEX('@',Email)-CHARINDEX('.',Email)-1) \n"]], ['Extract name and prename from email address?'], 2], [(1882555, 1), [['To test this solution, try with a single string as a test.'], ['-10000']], [[" --test it out with this script!\nDECLARE @Addr varchar(100)\n\nSELECT @Addr = 'humpty.dumpty@here.com'\n\nDECLARE @DotAt int, @At int\n\nSELECT @DotAT = CHARINDEX('.',@Addr)\n       ,@At = CHARINDEX('@',@Addr)\n\nSELECT  LEFT(@Addr, @DotAt-1), SUBSTRING(@Addr,@DotAt+1,@At-@DotAt-1)\n"]], ['Extract name and prename from email address?'], 2], [(1882822, 0), [['I believe you need to set Accent Sensitivity as ON or OFF when you first create the index.'], ['or alter it:']], [[' CREATE FULLTEXT CATALOG AwCat WITH ACCENT_SENSITIVITY=OFF\nGO\n']], ['Sql-server Full Text CONTAINS + COLLATE to ignore accents issues'], 2], [(1882822, 1), [['or alter it:'], ['You cand find out more here  Microsoft SQL Server 9.0 Technical Articles\nSQL Server 2005 Full-Text Search: Internals and Enhancements']], [[' ALTER FULLTEXT CATALOG AwCat REBUILD WITH ACCENT_SENSITIVITY=ON\nGO\n']], ['Sql-server Full Text CONTAINS + COLLATE to ignore accents issues'], 2], [(1883071, 0), [['Also, note that I use  xp_instance_regread  instead of  xp_regread , so this script will work for any instance, default or named.'], ['You can achieve the same result by using SMO. Bellow is C# sample, but you can use any other .NET language or PowerShell.']], [[" declare @DefaultData nvarchar(512)\nexec master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'Software\\Microsoft\\MSSQLServer\\MSSQLServer', N'DefaultData', @DefaultData output\n\ndeclare @DefaultLog nvarchar(512)\nexec master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'Software\\Microsoft\\MSSQLServer\\MSSQLServer', N'DefaultLog', @DefaultLog output\n\ndeclare @DefaultBackup nvarchar(512)\nexec master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'Software\\Microsoft\\MSSQLServer\\MSSQLServer', N'BackupDirectory', @DefaultBackup output\n\ndeclare @MasterData nvarchar(512)\nexec master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'Software\\Microsoft\\MSSQLServer\\MSSQLServer\\Parameters', N'SqlArg0', @MasterData output\nselect @MasterData=substring(@MasterData, 3, 255)\nselect @MasterData=substring(@MasterData, 1, len(@MasterData) - charindex('\\', reverse(@MasterData)))\n\ndeclare @MasterLog nvarchar(512)\nexec master.dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE', N'Software\\Microsoft\\MSSQLServer\\MSSQLServer\\Parameters', N'SqlArg2', @MasterLog output\nselect @MasterLog=substring(@MasterLog, 3, 255)\nselect @MasterLog=substring(@MasterLog, 1, len(@MasterLog) - charindex('\\', reverse(@MasterLog)))\n\nselect \n    isnull(@DefaultData, @MasterData) DefaultData, \n    isnull(@DefaultLog, @MasterLog) DefaultLog,\n    isnull(@DefaultBackup, @MasterLog) DefaultBackup\n"]], ['How do I find the data directory for a SQL Server instance?'], 3], [(1883071, 1), [['You can achieve the same result by using SMO. Bellow is C# sample, but you can use any other .NET language or PowerShell.'], ['It is so much simpler in SQL Server 2012 and above, assuming you have default paths set (which is probably always a right thing to do):']], [[' using (var connection = new SqlConnection("Data Source=.;Integrated Security=SSPI"))\n{\n    var serverConnection = new ServerConnection(connection);\n    var server = new Server(serverConnection);\n    var defaultDataPath = string.IsNullOrEmpty(server.Settings.DefaultFile) ? server.MasterDBPath : server.Settings.DefaultFile;\n    var defaultLogPath = string.IsNullOrEmpty(server.Settings.DefaultLog) ? server.MasterDBLogPath : server.Settings.DefaultLog;\n}\n']], ['How do I find the data directory for a SQL Server instance?'], 3], [(1883071, 2), [['It is so much simpler in SQL Server 2012 and above, assuming you have default paths set (which is probably always a right thing to do):'], ['-10000']], [[" select \n    InstanceDefaultDataPath = serverproperty('InstanceDefaultDataPath'),\n    InstanceDefaultLogPath = serverproperty('InstanceDefaultLogPath')\n"]], ['How do I find the data directory for a SQL Server instance?'], 3], [(1883982, 0), [['using an index:'], ['using a full table scan:']], [[' mysql> explain select * from trees where id = 1 or id = 2;\n+----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+\n| id | select_type | table | type  | possible_keys | key     | key_len | ref  | rows | Extra       |\n+----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+\n|  1 | SIMPLE      | trees | range | PRIMARY       | PRIMARY | 8       | NULL |    2 | Using where |\n+----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+\n\nmysql> explain select * from trees where id in (1,2);\n+----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+\n| id | select_type | table | type  | possible_keys | key     | key_len | ref  | rows | Extra       |\n+----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+\n|  1 | SIMPLE      | trees | range | PRIMARY       | PRIMARY | 8       | NULL |    2 | Using where |\n+----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+\n']], ['Which will be faster out of these two queries?'], 2], [(1883982, 1), [['using a full table scan:'], ['-10000']], [[' mysql> explain select * from trees where version = 1 or version = 2;\n+----+-------------+-------+------+---------------+------+---------+------+------+-------------+\n| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |\n+----+-------------+-------+------+---------------+------+---------+------+------+-------------+\n|  1 | SIMPLE      | trees | ALL  | NULL          | NULL | NULL    | NULL |    7 | Using where |\n+----+-------------+-------+------+---------------+------+---------+------+------+-------------+\n\nmysql> explain select * from trees where version in (1,2);\n+----+-------------+-------+------+---------------+------+---------+------+------+-------------+\n| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |\n+----+-------------+-------+------+---------------+------+---------+------+------+-------------+\n|  1 | SIMPLE      | trees | ALL  | NULL          | NULL | NULL    | NULL |    7 | Using where |\n+----+-------------+-------+------+---------------+------+---------+------+------+-------------+\n']], ['Which will be faster out of these two queries?'], 2], [(1884168, 0), [['Example:'], ['results in:']], [[" ALTER TABLE test_table COMMENT 'foo';\nSHOW CREATE TABLE test_table;\n"]], ['How do you remove a table COMMENT in MySQL?'], 4], [(1884168, 1), [['results in:'], ['followed by ']], [[" CREATE TABLE `test_table` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='foo'\n"]], ['How do you remove a table COMMENT in MySQL?'], 4], [(1884168, 2), [['followed by '], ['results in:']], [[" ALTER TABLE test_table COMMENT '';\nSHOW CREATE TABLE test_table;\n"]], ['How do you remove a table COMMENT in MySQL?'], 4], [(1884168, 3), [['results in:'], ['-10000']], [[' CREATE TABLE `test_table` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8\n']], ['How do you remove a table COMMENT in MySQL?'], 4], [(1884818, 0), [['Although the SQL-92 syntax to add a foreign key to your table would be as follows:'], ['Therefore, the only way to add a foreign key in sqlite 3.6.1 is during  CREATE TABLE  as follows:']], [[' ALTER TABLE child ADD CONSTRAINT fk_child_parent\n                  FOREIGN KEY (parent_id) \n                  REFERENCES parent(id);\n']], ['How do I add a foreign key to an existing sqlite (3.6.21) table?'], 2], [(1884818, 1), [['Therefore, the only way to add a foreign key in sqlite 3.6.1 is during  CREATE TABLE  as follows:'], ['Unfortunately you will have to save the existing data to a temporary table, drop the old table, create the new table with the FK constraint, then copy the data back in from the temporary table. ( sqlite.org - FAQ: Q11 )']], [[' CREATE TABLE child ( \n    id           INTEGER PRIMARY KEY, \n    parent_id    INTEGER, \n    description  TEXT,\n    FOREIGN KEY (parent_id) REFERENCES parent(id)\n);\n']], ['How do I add a foreign key to an existing sqlite (3.6.21) table?'], 2], [(1885352, 0), [['Using a Common Table Expression, I was able to iterate through the child nodes I needed for the following data:'], ['Given that data, I wrote the following code to retrieve all the values I needed, without really having to explicit node traversing:']], [['     SET @TestData =\n\'<Receipt xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" ReceiptID="0" UserID="0" UserCardID="0" PaymentMethodID="1" MerchantID="0" MerchantTaxID="MERCHANT_TAX_ID" MerchantReceiptID="MERCHANT_RECEIPT_ID" MerchantReceiptReferenceID="MERCHANT_RECEIPT_REF_ID" ReceiptTypeID="0" TransactionTypeID="2" MerchantReceiptDate="2009-12-10T18:01:14.2101141-07:00" Tax1PerCent="0" Tax2PerCent="0" Tax3PerCent="0" Tax1Total="0" Tax2Total="0" Tax3Total="0" TotalTax="5" Subtotal="100" ReceiptTotal="105" DateAdded="2009-12-10T18:01:14.2101141-07:00" MerchantStore="MERCHANT_STORE_NAME" StoreAddress1="228127 Long Street" StoreAddress2="" StoreCity="Los Angeles" StoreState="California" StoreZip="90212" StoreCountry="USA" StorePhone1="310-444-3333" StorePhone2="" StoreFax="310-333-2222" ReceiptHeader1="Test Receipt Header 1" ReceiptHeader2="Header 2" ReceiptHeader3="Header 3" ReceiptFooter1="Test Receipt Footer 1" ReceiptFooter2="Footer 2" ReceiptFooter3="Footer 3" ReceiptCreditCost="1" UserPaidForReceipt="false">\n  <Errors />\n  <ReceiptItem LineItemID="0" UserID="0" ReceiptID="0" MerchantItemID="111xxxTEST_ITEM_1" LineItemTypeID="1" ItemDesc1="Item 1 - Desc1: This is a test item purchased on a test receipt, line 1" ItemDesc2="Item 1 - Desc2: Item description, line 2" ItemDesc3="Item 1 - Desc3: Item description, line 3" Quantity="1" PricePerItem="50" LineItemTotal="50" DateAdded="2009-12-10T18:01:14.2101141-07:00">\n    <Errors />\n    <LineItemType LineItemTypeID="1" LineItemType="Purchase">\n      <Errors />\n    </LineItemType>\n  </ReceiptItem>\n  <ReceiptItem LineItemID="0" UserID="0" ReceiptID="0" MerchantItemID="111xxxTEST_ITEM_2" LineItemTypeID="1" ItemDesc1="Item 2 - Desc1: This is a test item purchased on a test receipt, line 1" ItemDesc2="Item 2 - Desc2: Item description, line 2" ItemDesc3="Item 2 - Desc3: Item description, line 3" Quantity="1" PricePerItem="25" LineItemTotal="25" DateAdded="2009-12-10T18:01:14.2101141-07:00">\n    <Errors />\n    <LineItemType LineItemTypeID="1" LineItemType="Purchase">\n      <Errors />\n    </LineItemType>\n  </ReceiptItem>\n.\n.\n.\n']], ['In TSQL, what is the best way to iterate through 1..* child nodes of XML data and retrieve values?'], 2], [(1885352, 1), [['Given that data, I wrote the following code to retrieve all the values I needed, without really having to explicit node traversing:'], ['-10000']], [[" -- now iterate through the receipt items and  with a CTE add them to to tbl_ReceiptLineItems\n;WITH CTE_ITEMS (Receipt, MerchantItemID, LineItemTypeID,\n                ItemDesc1, ItemDesc2, ItemDec3, ItemNumber, Quantity,\n                PricePerItem, LineItemTotal, DateAdded)\nAS\n(\n    -- we're only interested in the receipt line items\n    -- AS we've already retrieved the receipt top-level items\n    SELECT \n        VIRT.node.query('./*') AS Receipt,\n        --@UserID AS UserID,\n        --@ReceiptID AS REceipt,\n        VIRT.node.value('@MerchantItemID', 'varchar(50)') AS MerchantItemID,\n        VIRT.node.value('@LineItemTypeID', 'int') AS LineItemTypeID,\n        VIRT.node.value('@ItemDesc1', 'varchar(128)') AS ItemDesc1,\n        VIRT.node.value('@ItemDesc2', 'varchar(128)') AS ItemDesc2,\n        VIRT.node.value('@ItemDesc3', 'varchar(128)') AS ItemDesc3,\n        VIRT.node.value('@ItemNumber', 'varchar(128)') AS ItemNumber,\n        VIRT.node.value('@Quantity', 'int') AS Quantity,\n        VIRT.node.value('@PricePerItem', 'decimal(18,2)') AS PricePerItem,\n        VIRT.node.value('@LineItemTotal', 'decimal(18,2)') AS LineItemTotal,\n        VIRT.node.value('@DateAdded', 'datetime') AS DateAded\n    FROM @TestData.nodes('/Receipt/ReceiptItem') AS VIRT(node)\n\n    UNION ALL\n\n    SELECT \n        VIRT.node.query('./*') AS Receipt,\n        --@UserID AS UserID,\n        --@ReceiptID AS REceipt,\n        VIRT.node.value('@MerchantItemID', 'varchar(50)') AS MerchantItemID,\n        VIRT.node.value('@LineItemTypeID', 'int') AS LineItemTypeID,\n        VIRT.node.value('@ItemDesc1', 'varchar(128)') AS ItemDesc1,\n        VIRT.node.value('@ItemDesc2', 'varchar(128)') AS ItemDesc2,\n        VIRT.node.value('@ItemDesc3', 'varchar(128)') AS ItemDesc3,\n        VIRT.node.value('@ItemNumber', 'varchar(128)') AS ItemNumber,\n        VIRT.node.value('@Quantity', 'int') AS Quantity,\n        VIRT.node.value('@PricePerItem', 'decimal(18,2)') AS PricePerItem,\n        VIRT.node.value('@LineItemTotal', 'decimal(18,2)') AS LineItemTotal,\n        VIRT.node.value('@DateAdded', 'datetime') AS DateAded\n    FROM CTE_ITEMS CROSS APPLY Receipt.nodes('./ReceiptItem') AS VIRT(node)\n)\n\n\nSELECT @UserID AS UserID, @ReceiptID AS ReceiptID, -- Receipt,\n        MerchantItemID, LineItemTypeID,\n        ItemDesc1, ItemDesc2, ItemDec3, ItemNumber, Quantity,\n        PricePerItem, LineItemTotal, DateAdded\n\nFROM CTE_ITEMS \n"]], ['In TSQL, what is the best way to iterate through 1..* child nodes of XML data and retrieve values?'], 2], [(1885356, 0), [['You need to define a GROUP BY if you have columns in the SELECT that do  not  have aggregate functions performed on them:'], ['How do you expect the following to work:']], [["   SELECT SPLIT_PART(t.client_name, '.', 1) AS client_name,\n         SUM(CASE WHEN status_code = 30000 THEN 1 ELSE 0 END) as successes\n    FROM v_activities_2\nGROUP BY SPLIT_PART(t.client_name, '.', 1)\nORDER BY client_name\n"]], ['How to get aggregates without using a nested sql query'], 2], [(1885356, 1), [['How do you expect the following to work:'], ["You can't expect to count rows you're  excluding ."]], [['       SUM(CASE WHEN status_code = 30000 THEN 1 ELSE 0 END) as successes\n FROM v_activities_2\nWHERE status_code <> 30000\n']], ['How to get aggregates without using a nested sql query'], 2], [(1885522, 0), [['Use:'], ['To be able to search for a specific customer type:']], [[" SELECT c.customername,\n       STUFF((SELECT ','+ ct.customertypename\n               FROM CUSTOMERTYPES ct\n               JOIN CUSTOMERCUSTOMERTYPES cct ON cct.customertypeid = ct.customertypeid\n              WHERE cct.customerid = C.customerid\n           GROUP BY ct.customertypename\n            FOR XML PATH('')), 1, 1, '')\n FROM CUSTOMERS c\n"]], ['TSQL in SQL 2005: Query'], 2], [(1885522, 1), [['To be able to search for a specific customer type:'], ['-10000']], [[" SELECT c.customername,\n       STUFF(SELECT ','+ ct.customertypename\n               FROM CUSTOMERTYPES ct\n               JOIN CUSTOMERCUSTOMERTYPES cct ON cct.customertypeid = ct.customertypeid\n              WHERE cct.customerid = C.customerid\n           GROUP BY ct.customertypename\n            FOR XML PATH(''), 1, 1, '')\n FROM CUSTOMERS c\n JOIN CUSTOMERCUSTOMERTYPES cct ON cct.customertypeid = ct.customertypeid\nWHERE cct.customertypeid = @customertypeid\n"]], ['TSQL in SQL 2005: Query'], 2], [(1886909, 0), [['I had the problem where in another process, items were get added to the database, and I wanted to monitor progress of the other process, so I opened up a django shell and issued the following:'], ['To solve, commit your transaction, which can be manually done like so:']], [[' >>> MyData.objects.count()\n74674\n\n>>> MyData.objects.count()\n74674\n']], ['How to disable Django query cache?'], 2], [(1886909, 1), [['To solve, commit your transaction, which can be manually done like so:'], ['-10000']], [[' >> from django.db import transaction\n>> transaction.enter_transaction_management()\n>> transaction.commit() # Whenever you want to see new data\n']], ['How to disable Django query cache?'], 2], [(1887209, 0), [['In SQL 2000, you can either do this:'], ['Or, use a temp table (or table var):']], [[' SELECT (SELECT COUNT(*) FROM MyTable t2 WHERE t2.num <= t.num) AS RowNo, *\nFROM MyTable t\nORDER BY num\n']], ['the row no in query output'], 2], [(1887209, 1), [['Or, use a temp table (or table var):'], ['In SQL 2005, there is a ROW_NUMBER() function you could use which makes life a lot easier.']], [[' CREATE TABLE #Results\n(\nRowNo INTEGER IDENTITY(1,1),\nMyField VARCHAR(10)\n)\n\nINSERT #Results\nSELECT MyField\nFROM MyTable \nORDER BY uum\n\nSELECT * FROM #Results\n\nDROP TABLE #Results\n']], ['the row no in query output'], 2], [(1887953, 0), [["If you know that two columns from your result are always directly related then it's slower to do this:"], ['than this:']], [[' SELECT DISTINCT CustomerId, CustomerName FROM (...)\n']], ['Why shouldn’t you use DISTINCT when you could use GROUP BY?'], 2], [(1887953, 1), [['than this:'], ["because in the second case it only has to compare the id, but in the first case it has to compare both fields. This is a MySQL specific trick. It won't work with other databases."]], [[' SELECT CustomerId, CustomerName FROM (...) GROUP BY CustomerId\n']], ['Why shouldn’t you use DISTINCT when you could use GROUP BY?'], 2], [(1887964, 0), [['First create the duplicate database:'], ['Make sure the user and permissions are all in place and:']], [[' CREATE DATABASE duplicateddb;\n']], ['Duplicate Entire MySQL Database'], 2], [(1887964, 1), [['Make sure the user and permissions are all in place and:'], ['-10000']], [['  mysqldump -u admin -p originaldb | mysql -u backup -pPassword duplicateddb; \n']], ['Duplicate Entire MySQL Database'], 2], [(1888207, 0), [['Just make use of EL in the  disabled  attribute:'], ['Alternatively you can make use of a footer inside the table component:']], [[' disabled="#{we are in the last row}"\n']], ['How to disable single radio button on JSFX page?'], 2], [(1888207, 1), [['Alternatively you can make use of a footer inside the table component:'], ['This will generate a  <tfoot>  wherein you can place an independent row which would thus not be affected by other rows nor vice versa.']], [[' <f:facet name="footer">\n    ...\n</f:facet>\n']], ['How to disable single radio button on JSFX page?'], 2], [(1888406, 0), [['If there are few values per key, this query:'], ['will be more efficient than this one:']], [[' INSERT\nINTO    t_target\nSELECT  target, cnt\nFROM    t_sparse d\nON DUPLICATE KEY UPDATE\n        t_target.cnt = t_target.cnt + d.cnt\n']], ['Can I use always INSERT ....ON DUPLICATE UPDATE for simple updates/inserts?'], 2], [(1888406, 1), [['will be more efficient than this one:'], ['See this article in my blog for more detail:']], [[' INSERT\nINTO    t_target\nSELECT  target, cnt\nFROM    (\n        SELECT  target, SUM(cnt) AS cnt\n        FROM    t_sparse di\n        GROUP BY\n                target\n        ) d\nON DUPLICATE KEY UPDATE\n        t_target.cnt = t_target.cnt + d.cnt\n']], ['Can I use always INSERT ....ON DUPLICATE UPDATE for simple updates/inserts?'], 2], [(1891017, 0), [['Use the ORDER BY clause to sort by the newest record and then limit the query to return just one result.'], ["EDIT (marc_s) \nfor SQL Server, which doesn't know the  LIMIT  keyword, you'd need to use  TOP 1  in the select instead:"]], [[' SELECT BGArx_ID, BGArx_PUBLISHED_DATE \nFROM TECH_ARTICLES \nORDER BY BGArx_PUBLISHED_DATE DESC LIMIT 1;\n']], ['How to get latest record date from column'], 2], [(1891017, 1), [["EDIT (marc_s) \nfor SQL Server, which doesn't know the  LIMIT  keyword, you'd need to use  TOP 1  in the select instead:"], ['-10000']], [[' SELECT TOP 1 BGArx_ID, BGArx_PUBLISHED_DATE \nFROM TECH_ARTICLES \nORDER BY BGArx_PUBLISHED_DATE DESC\n']], ['How to get latest record date from column'], 2], [(1891108, 0), [['I think the following is what you need.'], ['You can test it with:']], [['     SELECT \n        T.CompanyId, T.ServiceId, \n        CASE WHEN SUM(CAST(SuccessfulConnect AS int)) = 0 THEN 1 ELSE 0 END AS Alert\n    FROM (\n        SELECT\n            CompanyId, ServiceId, SuccessfulConnect,\n            ROW_NUMBER() OVER (PARTITION BY CompanyId, ServiceId \n                ORDER BY CreateDate DESC) AS intRow\n        FROM Logging\n    ) AS T\n        INNER JOIN Configuration c ON c.CompanyId = T.CompanyId\n            AND c.ServiceId = T.ServiceId\n    WHERE intRow <= c.NumberOfMatchingSequentialRecords\n    GROUP BY T.CompanyId, T.ServiceId, c.NumberOfMatchingSequentialRecords\n    HAVING COUNT(*) >= C.NumberOfMatchingSequentialRecords\n']], ['SQL query to return top X sequential descending rows, by group, for a particular value'], 3], [(1891108, 1), [['You can test it with:'], ['This gives:']], [[" CREATE TABLE Configuration (CompanyId int, ServiceId int, NumberOfMatchingSequentialRecords int)\nCREATE TABLE Logging (CompanyId int, ServiceId int, SuccessfulConnect bit, CreateDate datetime)\n\nINSERT Configuration VALUES (2, 1, 3)\nINSERT Configuration VALUES (3, 2, 2)\nINSERT Logging VALUES (2, 1, 0, '2009-12-09  9:54am')\nINSERT Logging VALUES (2, 1, 0, '2009-12-09  9:45am')\nINSERT Logging VALUES (2, 1, 0, '2009-12-09  9:36am')\nINSERT Logging VALUES (2, 1, 1, '2009-12-08 10:16am')\nINSERT Logging VALUES (2, 1, 1, '2009-12-07  3:24pm')\nINSERT Logging VALUES (3, 2, 0, '2009-10-15 8:54am')\nINSERT Logging VALUES (3, 2, 1, '2009-10-14 5:17pm')\nINSERT Logging VALUES (3, 2, 0, '2009-10-13 4:32am')\nINSERT Logging VALUES (3, 2, 1, '2009-10-13 1:19am')\n\nSELECT \n    T.CompanyId, T.ServiceId, \n    CASE WHEN SUM(CAST(SuccessfulConnect AS int)) = 0 THEN 1 ELSE 0 END AS Alert\nFROM (\n    SELECT\n        CompanyId, ServiceId, SuccessfulConnect,\n        ROW_NUMBER() OVER (PARTITION BY CompanyId, ServiceId \n            ORDER BY CreateDate DESC) AS intRow\n    FROM Logging\n) AS T\n    INNER JOIN Configuration c ON c.CompanyId = T.CompanyId\n        AND c.ServiceId = T.ServiceId\nWHERE intRow <= c.NumberOfMatchingSequentialRecords\nGROUP BY T.CompanyId, T.ServiceId, c.NumberOfMatchingSequentialRecords\nHAVING COUNT(*) >= C.NumberOfMatchingSequentialRecords\n\nDROP TABLE Logging\nDROP TABLE Configuration\n"]], ['SQL query to return top X sequential descending rows, by group, for a particular value'], 3], [(1891108, 2), [['This gives:'], ['-10000']], [[' CompanyId    ServiceId    Alert\n    2            1          1\n    3            2          0\n']], ['SQL query to return top X sequential descending rows, by group, for a particular value'], 3], [(1891789, 0), [['In SQL server, use:'], ['e.g. ']], [[' select top 10 ...\n']], ['SQL - Select first 10 rows only?'], 3], [(1891789, 1), [['e.g. '], ['In MySQL, use:']], [[' select top 100 * from myTable\nselect top 100 colA, colB from myTable\n']], ['SQL - Select first 10 rows only?'], 3], [(1891789, 2), [['In MySQL, use:'], ['-10000']], [[' select ... order by num desc limit 10\n']], ['SQL - Select first 10 rows only?'], 3], [(1891876, 0), [['If you want to do this entirely in your database, you could split your table in two:'], ['Then the following query gives you the least-recently used record.']], [[' Image(ImageId, ImageUrl)\nTeaseImage(TeaseImageId, PropId, ImageId, DateLastAccessed)\n']], ['Want an efficient approach to retrieving records from a database when the retrieval is weighted and balanced'], 2], [(1891876, 1), [['Then the following query gives you the least-recently used record.'], ["Following the select, just update the record's  DateLastAccessed . (Or even update it as part of the select procedure, depending on how fault-tolerant you need to be.)"]], [[' select top 1 ti.TeaseImageId, i.ImageUrl\nfrom         TeaseImage ti\njoin         Image i\non           i.ImageId = ti.ImageId\nwhere        ti.PropId = @PropId\norder by     ti.DateLastAccessed\n']], ['Want an efficient approach to retrieving records from a database when the retrieval is weighted and balanced'], 2], [(1895500, 0), [['For example, this query will solve your issue if directly executed:'], ['According to the  MySQL documentation  views have the restriction on not being able to contain subqueries in the FROM clause. To work around this limitation and turn this query into a view, break it up into 3 views (one for each subquery) with the last giving the desired combination of fields:']], [[' SELECT \n    TotalCircles + TotalSquares AS TotalShapes\nFROM\n    (SELECT \n        BlueCirles + RedCircles AS TotalCircles,\n        BlueSquares + RedSquares AS TotalSquares\n    FROM\n        (SELECT\n            2 AS BlueCirles,\n            3 AS RedCircles,\n            4 AS BlueSquares,\n            5 AS RedSquares\n        ) AS shapes\n    ) as totals;\n']], ['MySQL Views: Referencing one calculated field (by name) in another calculated field'], 2], [(1895500, 1), [['According to the  MySQL documentation  views have the restriction on not being able to contain subqueries in the FROM clause. To work around this limitation and turn this query into a view, break it up into 3 views (one for each subquery) with the last giving the desired combination of fields:'], ['-10000']], [[' CREATE VIEW shapes AS\nSELECT\n    2 AS BlueCirles,\n    3 AS RedCircles,\n    4 AS BlueSquares,\n    5 AS RedSquares;\n\nCREATE VIEW totals AS\nSELECT \n    BlueCirles + RedCircles AS TotalCircles,\n    BlueSquares + RedSquares AS TotalSquares\nFROM\n    shapes;\n\nCREATE VIEW result AS\nSELECT \n    TotalCircles + TotalSquares AS TotalShapes\nFROM\n    totals;\n\nSELECT * FROM result;\n']], ['MySQL Views: Referencing one calculated field (by name) in another calculated field'], 2], [(1896102, 0), [['Something like'], ['Also from your reference you can do it like this']], [[' SELECT  name, \n        first_value() OVER (partition by name order by date) as f, \n        last_value() OVER (partition by name order by date) as l \nfrom table1\n']], ['Applying Multiple Window Functions On Same Partition'], 2], [(1896102, 1), [['Also from your reference you can do it like this'], ['-10000']], [[' SELECT sum(salary) OVER w, avg(salary) OVER w\nFROM empsalary\nWINDOW w AS (PARTITION BY depname ORDER BY salary DESC)\n']], ['Applying Multiple Window Functions On Same Partition'], 2], [(1896339, 0), [['What you have to do is construct a  DELETE FROM -query. If you only want to delete one row from a table, you need to be certain that the parameters you give it are unique for that row. Usually this is done by having a column called  id . Then, knowing the id, all you have to do is this:'], ['If you still want to delete one row from your birthTable, assuming you know the name of this person, you do it like this:']], [[' DELETE FROM table WHERE id=<your id>;\n']], ['Moving and Deleting rows in MySQL'], 2], [(1896339, 1), [['If you still want to delete one row from your birthTable, assuming you know the name of this person, you do it like this:'], ["I've assumed that the column names for first and last names are firstName and lastName, you'll have to modify this to match your column names. This will delete any entry in the birthTable which matches the critera (could be more than one, if you have for example 2 people called Alan Johnson)."]], [[' DELETE FROM birthTable WHERE firstName=<first name> AND lastName<last name>;\n']], ['Moving and Deleting rows in MySQL'], 2], [(1896828, 0), [["Not directly. You have to use CASE, the CAST means it's interpreted as boolean by client code"], ['Another solution where one or zero rows are expected:']], [[' SELECT\n    CAST(CASE WHEN expiry < getdate() THEN 1 ELSE 0 END AS bit) AS Expired\nFROM\n    MyTable WHERE (ID = 1)\n']], ['Getting a boolean from a date compare in t-sql select'], 2], [(1896828, 1), [['Another solution where one or zero rows are expected:'], ['-10000']], [[' SELECT\n    CAST(COUNT(*) AS bit) AS Expired   \nFROM\n    MyTable\nWHERE\n    ID = 1 AND expiry < getdate() \n']], ['Getting a boolean from a date compare in t-sql select'], 2], [(1897002, 0), [['It looks a lot more complicated than it is, due to the lack of a PAD funciton in t-sql. The seed of the hierarchy are the categories without parents. The fourth column we select is their ranking alphabetically (converted to a string and padded). Then we union this with their children. At each recursion, the children will all be at the same level, so we can get their ranking alphabetically without needing to partition. We can concatenate these rankings together down the tree, and order by that.'], ['With your data:']], [[" ;WITH Hierarchy AS (\n    SELECT \n        idCat, fldCatName, idParent, \n        CAST(RIGHT('00000'+ \n                   CAST(ROW_NUMBER() OVER (ORDER BY fldCatName) AS varchar(8))\n                   , 5) \n            AS varchar(256)) AS strPath\n    FROM Category\n    WHERE idParent IS NULL\n\n    UNION ALL\n\n    SELECT \n        c.idCat, c.fldCatName, c.idParent, \n        CAST(h.strPath + \n            CAST(RIGHT('00000'+ \n                          CAST(ROW_NUMBER() OVER (ORDER BY c.fldCatName) AS varchar(8))\n                       , 5) AS varchar(16)) \n            AS varchar(256))\n    FROM Hierarchy h\n        INNER JOIN Category c ON c.idParent = h.idCat\n)\nSELECT idCat, fldCatName, idParent, strPath\nFROM Hierarchy\nORDER BY strPath\n"]], ['Sql Ordering Hiarchy'], 2], [(1897002, 1), [['With your data:'], ['-10000']], [[' idCat  fldCatName      idParent   strPath\n------------------------------------------------\n  2    A Category        NULL     00001\n  6    Another Category  2        0000100001\n  1    Some Category     NULL     00002\n  4    A Sub Category    1        0000200001\n  5    Sub Cat1          1        0000200002\n  8    Sub Sub Category  5        000020000200001\n  3    Top Category      NULL     00003\n  7    Last Category     3        0000300001\n']], ['Sql Ordering Hiarchy'], 2], [(1897149, 0), [['Use:'], ['Alternate using subquery:']], [['    SELECT t.accept,\n          t.reject,\n          t.accept - t.reject AS difference\n    FROM VOTES t\n   WHERE t.accept - t.reject > 0\nORDER BY difference DESC\n   LIMIT 1\n']], ['selecting only values having difference greater than 0 (no negatives and 0)'], 2], [(1897149, 1), [['Alternate using subquery:'], ['-10000']], [[' SELECT v.accept,\n       v.reject\n  FROM VOTES v\n WHERE v.accept - v.reject > 0\n  JOIN (SELECT MAX(t.accept - t.reject) AS difference\n          FROM VOTES t\n         WHERE t.accept - t.reject > 0) x ON x.difference = (v.accept - v.reject)\n']], ['selecting only values having difference greater than 0 (no negatives and 0)'], 2], [(1897711, 0), [['Using JOINs is the most reliable way:'], ['Using:']], [[' SELECT p.idproject, \n       p.name\n  FROM PROJECT p\n  JOIN PROJECT_HAS_COLOR phc ON phc.idproject = p.idproject\n  JOIN COLOR c1 ON c1.idcolor = phc.idcolor\n               AND c1.idcolor = 1\n  JOIN COLOR c2 ON c2.idcolor = phc.idcolor\n               AND c2.idcolor = 2\n  JOIN COLOR c3 ON c3.idcolor = phc.idcolor\n               AND c3.idcolor = 3\n']], ['Selecting rows connected with set of rows from second table'], 2], [(1897711, 1), [['Using:'], ["...relies on your data model stopping an  idcolor  value from being associated to a project more than once.  You can't use  HAVING COUNT(DISTINCT *)  in MySQL, so 2+ relationships of the same project to duplicate  idcolor  values would return false positives."]], [['   SELECT p.idproject, \n         p.name\n    FROM PROJECT p\n    JOIN PROJECT_HAS_COLOR phc ON phc.idproject = p.idproject\n    JOIN COLOR c ON c.idcolor = phc.idcolor\n   WHERE c.idcolor IN (1, 2, 3)\nGROUP BY p.idproject, p.name\n  HAVING COUNT(*) = 3\n']], ['Selecting rows connected with set of rows from second table'], 2], [(1898453, 0), [['Be aware that using:'], ['...will  not  use an index, but the following will:']], [[" LIKE '%whatever%'\n"]], ['Does index on Varchar make performance difference?'], 2], [(1898453, 1), [['...will  not  use an index, but the following will:'], ["The key is wildcarding the lefthand side of the string means that an index on the column can't be used."]], [[" LIKE 'whatever%'\n"]], ['Does index on Varchar make performance difference?'], 2], [(1901311, 0), [["Here's a query which will return the values:"], ['If you needed to have the exact matching, you could create a composite index on  (fieldname, value, userid) , put the most selective  fieldname  into the first table and use  STRAIGHT_JOIN  to force the order:']], [[" SELECT  *\nFROM    tbl_UserAttributes tcity\nJOIN    tbl_UserAttributes tsex\nON      tsex.userid = tcity.userid\nWHERE   tcity.fieldname = 'city'\n        AND tcity.value LIKE '%Mumbai%'\n        AND tsex.fieldname = 'sex'\n        AND tsex.value = 'M'\n"]], ['How to implement searching on a vertically designed table?'], 2], [(1901311, 1), [['If you needed to have the exact matching, you could create a composite index on  (fieldname, value, userid) , put the most selective  fieldname  into the first table and use  STRAIGHT_JOIN  to force the order:'], ["However, this won't help with your current query, since you are looking for a wildcard match in which case the indexes are not very helpful. And your second table won't benefit much from the index unless you are querying a maternity hospital database."]], [[" SELECT  *\nFROM    tbl_UserAttributes tcity\nSTRAIGHT_JOIN\n        tbl_UserAttributes tsex\nON      tsex.userid = tcity.userid\nWHERE   tcity.fieldname = 'city'\n        AND tcity.value = 'Mumbai'\n        AND tsex.fieldname = 'sex'\n        AND tsex.value = 'M'\n"]], ['How to implement searching on a vertically designed table?'], 2], [(1902712, 0), [['You have to group By an expression that "defines" the one minute buckets you want the maximum values in:'], ['Assuming what you already have in the datetime column was a string, then just use substring on it... ']], [[' select sensor_id, DateHourMinuteFunction(read_time), Max(voltage) \nfrom table \nGroup By sensor_id, DateHourMinuteFunction(read_time)\n']], ['PSQL select max value per minute per id for multiple values a minute per id?'], 2], [(1902712, 1), [['Assuming what you already have in the datetime column was a string, then just use substring on it... '], ['-10000']], [[' select sensor_id, SubString(Cast(read_time as varChar(22)), 0, 16), Max(voltage) \nfrom table \nGroup By sensor_id, SubString(Cast(read_time as varChar(22)), 0, 16)\n']], ['PSQL select max value per minute per id for multiple values a minute per id?'], 2], [(1903189, 0), [['-10000'], ['RETURN  is used only in stored functions, not stored procedures. Stored functions are used when you want to call the routine within another SQL expression.']], [[' DELIMITER //\nCREATE PROCEDURE checkUser(IN in_email VARCHAR(80), IN in_password VARCHAR(50))\nBEGIN\n    DECLARE tempId INT DEFAULT 0;\n    DECLARE tempName VARCHAR(50) DEFAULT NULL;\n    DECLARE done INT DEFAULT 0;\n\n    DECLARE cur CURSOR FOR \n        SELECT id, name FROM users WHERE email = in_email AND password = in_password;\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;\n\n    OPEN cur;\n\n    REPEAT\n        FETCH cur INTO tempId, tempName;\n        UPDATE users SET online = 1 WHERE id = tempId;\n    UNTIL done  = 1 END REPEAT;\n    CLOSE cur;\n\n    SELECT tempName;\nEND //\nDELIMITER ;\n']], ['Using SELECT resultset to run UPDATE query with MySQL Stored Procedures'], 3], [(1903189, 1), [['RETURN  is used only in stored functions, not stored procedures. Stored functions are used when you want to call the routine within another SQL expression.'], ['You can use an  OUT  parameter, but you have to declare a user variable first to pass as that parameter.  And then you have to select that user variable to get its value anyway.']], [[' SELECT LCASE( checkUserFunc(?, ?) );\n']], ['Using SELECT resultset to run UPDATE query with MySQL Stored Procedures'], 3], [(1903189, 2), [['You can use an  OUT  parameter, but you have to declare a user variable first to pass as that parameter.  And then you have to select that user variable to get its value anyway.'], ["When returning result sets from a stored procedure, it's easiest to use a  SELECT  query.  "]], [[' SET @outparam = null;\nCALL checkUser(?, ?, @outparam);\nSELECT @outparam;\n']], ['Using SELECT resultset to run UPDATE query with MySQL Stored Procedures'], 3], [(1903333, 0), [['I would use something like the following.'], ['I just tested the query with LINQPad. Should LINQPad cause the query to work while it does not in code, your second suggestion is probably the best solution.']], [[' context.Table.Max(row => (Int32?)row.Id) ?? 0\n']], ['Best Linq2Sql equivalent of IsNull(Max(id))'], 4], [(1903333, 1), [['I just tested the query with LINQPad. Should LINQPad cause the query to work while it does not in code, your second suggestion is probably the best solution.'], ['The drawback is that the default value is fixed at zero. This can be changed with the following query.']], [[' context.Table\n   .Select(row => row.Id)\n   .OrderByDescending(id => id)\n   .FirstOrDefault()\n']], ['Best Linq2Sql equivalent of IsNull(Max(id))'], 4], [(1903333, 2), [['The drawback is that the default value is fixed at zero. This can be changed with the following query.'], ['And just to note, the following does not work, because  LastOrDefault()  is not supported by LINQ to SQL.']], [[' context.Table\n   .Select(row => (Int32?)row.Id)\n   .OrderByDescending(id => id)\n   .FirstOrDefault() ?? 0\n']], ['Best Linq2Sql equivalent of IsNull(Max(id))'], 4], [(1903333, 3), [['And just to note, the following does not work, because  LastOrDefault()  is not supported by LINQ to SQL.'], ['-10000']], [[' context.Table\n   .Select(row => row.Id)\n   .OrderBy(id => id)\n   .LastOrDefault()\n']], ['Best Linq2Sql equivalent of IsNull(Max(id))'], 4], [(1906005, 0), [['Use a bitmask - powers of 2.'], ['and so on. Then Monday and Tuesday becomes:']], [[' Monday = 2 ^ 0 = 1\nTuesday = 2 ^ 1 = 2\n']], ['Simple number pattern to store combinations as a unique sum'], 2], [(1906005, 1), [['and so on. Then Monday and Tuesday becomes:'], ['-10000']], [[' Monday | Tuesday = 3 (or 00000011 in binary)\n']], ['Simple number pattern to store combinations as a unique sum'], 2], [(1906373, 0), [["I set up 'sub_test\\sub_test.sql' to contain the double-ats:"], ['put the whole directory structure under a Tomcat webapps/ROOT context and it works if you call like this:']], [[' @@../main.sql\n']], ['Oracle sqlplus: relative paths starting at position of script'], 2], [(1906373, 1), [['put the whole directory structure under a Tomcat webapps/ROOT context and it works if you call like this:'], ['Probably a bit of overkill setting up a web-server I guess ?? (Also works with FTP apparently - not tried it).']], [[' SQL> @http://host:port/sub_test/sub_test.sql\n']], ['Oracle sqlplus: relative paths starting at position of script'], 2], [(1907409, 0), [['Small example:'], ['List is:']], [[' 2831781 == 2*100^3 + 83*100^2 + 17*100^1 + 81*100^0\n']], ['Storing large prime numbers in a database'], 7], [(1907409, 1), [['List is:'], ['Storage in DB:']], [[' 81, 17, 83, 2\n']], ['Storing large prime numbers in a database'], 7], [(1907409, 2), [['Storage in DB:'], ['insert for example above (1647 is for example only):']], [[' create table PRIMES\n(\n  PRIME_ID         NUMBER not null,\n  PART_ORDER       NUMBER(20) not null,\n  PRIME_PART_VALUE NUMBER not null\n);\n\nalter table PRIMES \nadd constraint PRIMES_PK primary key (PRIME_ID, PART_ORDER) using index;\n']], ['Storing large prime numbers in a database'], 7], [(1907409, 3), [['insert for example above (1647 is for example only):'], ['prime_id value can be assigned from oracle sequence ...']], [[' insert into primes(PRIME_ID, PART_ORDER, PRIME_PART_VALUE) values (1647, 0, 81);\ninsert into primes(PRIME_ID, PART_ORDER, PRIME_PART_VALUE) values (1647, 1, 17);\ninsert into primes(PRIME_ID, PART_ORDER, PRIME_PART_VALUE) values (1647, 2, 83);\ninsert into primes(PRIME_ID, PART_ORDER, PRIME_PART_VALUE) values (1647, 3, 82);\n']], ['Storing large prime numbers in a database'], 7], [(1907409, 4), [['prime_id value can be assigned from oracle sequence ...'], ['Get ID of next prime number to insert:']], [[' create sequence seq_primes start with 1 increment by 1;\n']], ['Storing large prime numbers in a database'], 7], [(1907409, 5), [['Get ID of next prime number to insert:'], ['select prime number content with specified id:']], [[' select seq_primes.nextval from dual;\n']], ['Storing large prime numbers in a database'], 7], [(1907409, 6), [['select prime number content with specified id:'], ['-10000']], [[' select PART_ORDER, PRIME_PART_VALUE \nfrom primes where prime_id = 1647 \norder by part_order\n']], ['Storing large prime numbers in a database'], 7], [(1908674, 0), [['Use another table, with '], ['and then combine both tables, as in']], [[' Data\n---------\n+ Value\n+ ActionId\n']], ['Table with unknown number of columns'], 2], [(1908674, 1), [['and then combine both tables, as in'], ['-10000']], [[' select Value from Data, Action where Data.ActionId = Action.Id and ...\n']], ['Table with unknown number of columns'], 2], [(1910093, 0), [["I'm guessing you mean this:"], ['Depending on what you are doing, this might be better for you:']], [[' SELECT COUNT(*) FROM products WHERE product_price >= 500 AND product_price <= 1000\n']], ['MySql: Count rows in price range?'], 3], [(1910093, 1), [['Depending on what you are doing, this might be better for you:'], ['If you want to get all the intervals, you can do that in one statement too:']], [[' SELECT COUNT(*) FROM products WHERE product_price >= 500 AND product_price < 1000\n']], ['MySql: Count rows in price range?'], 3], [(1910093, 2), [['If you want to get all the intervals, you can do that in one statement too:'], ['Alternatively (and better in my opinion), store your interval ranges in another table and join with it.']], [[' SELECT\nSUM(CASE WHEN product_price < 500 THEN 1 ELSE 0 END) AS price_range_1,\nSUM(CASE WHEN product_price >= 500 AND product_price < 1000 THEN 1 ELSE 0 END) AS price_range_2,\nSUM(CASE WHEN product_price >= 1000 THEN 1 ELSE 0 END) AS price_range_3\nFROM products\n']], ['MySql: Count rows in price range?'], 3], [(1910134, 0), [['I think you need one more piece of information: a secondary song key of an integer position, in addition to your GUID (or you could replace it with this).  Then, combined with a  PRNG , you can do the most simple and quick lookup possible.  Pseudocode:'], ["This will get progressively slower on each next song and doesn't allow wrapping by going backwards (without some creativity).  If you find a suitable reversible PRNG (though uncommon among good PRNGs, AFAIK):"]], [[' def next_song(initial_seed, current_prng_index, high_song_index):\n  """Returns the next song and the parameters to be later passed\n  to next/prev_song."""\n  while True:\n    current_prng_index += 1\n    current_seed = PRNG_advance(initial_seed, current_prng_index)\n    song_index = song_index_from_seed(current_seed, high_song_index)\n    song_id = (SELECT SongID FROM Songs WHERE SongIndex=song_index)\n    if song_id: # test, somehow, for non-deleted songs\n      return song_id, (initial_seed, current_prng_index, high_song_index)\n      # include values that must be passed on the next call\n# prev is the same, except uses -= 1\n\ndef song_index_from_seed(seed, highest):\n  return seed % (highest + 1)\n  # simple, but better possibilities might exist for your data\n\ndef new_playlist():\n  """Returns the parameters to be passed to next/prev_song."""\n  high_song_index = (SELECT MAX(SongIndex) FROM Songs)\n  return get_a_random_number(), 0, high_song_index\n']], ['Create a randomly ordered playlist from a table of songs and return the name of the current, next, and previous song?'], 2], [(1910134, 1), [["This will get progressively slower on each next song and doesn't allow wrapping by going backwards (without some creativity).  If you find a suitable reversible PRNG (though uncommon among good PRNGs, AFAIK):"], ["This handles deletions by skipping those songs (or if you never delete that's not even an issue), but otherwise doesn't change the order no matter how many are deleted.  Insertions are handled by the song_index_from_seed function, by constraining the index so new songs are never 'seen'.  This is also an infinite loop if all the available songs have been deleted, but I think this code handles all other corner cases."]], [[' def next_song(current_seed, high_song_index):\n  while True:\n    current_seed = PRNG_next(current_seed)\n    song_index = song_index_from_seed(current_seed, high_song_index)\n    song_id = (SELECT SongID FROM Songs WHERE SongIndex=song_index)\n    if song_id: # test, somehow, for non-deleted songs\n      return song_id, (current_seed, high_song_index)\n      # include values that must be passed on the next call\n# prev is the same, except uses PRNG_prev\n']], ['Create a randomly ordered playlist from a table of songs and return the name of the current, next, and previous song?'], 2], [(1911868, 0), [["You should probably filter out the 'null' emails, like this."], ['In reality, this seems like it ought to be a left join, i.e.:']], [[" AND (\n    (tenants.email != '' AND tenants.email = reports.email) OR\n    (tenants.alt_email != '' AND tenants.alt_email = reports.alt_email)\n)\n"]], ['What is wrong with this JOIN query?'], 2], [(1911868, 1), [['In reality, this seems like it ought to be a left join, i.e.:'], ['This way, you will get the reports with no tenants at least once.']], [[" SELECT \nreports.person_reporting, reports.request_type, reports.details, tenants.office,\ntenants.email, tenants.alt_email, tenants.office_phone, tenants.personal_cell,\ntenants.emergency_phone, tenants.address, tenants.building_name\nFROM reports\nLEFT JOIN tenants ON (\n    (tenants.email != '' AND tenants.email = reports.email)\n    OR (tenants.alt_email != '' AND tenants.alt_email = reports.alt_email)\n)\nWHERE reports.id = '{$id}'\n"]], ['What is wrong with this JOIN query?'], 2], [(1914303, 0), [['Step 1 . \nCreate a view to flatten the model; ( see the model )'], ['Create a view to generate only  [Setup Name], [Property Type Name], [Value] ; note that in this one the measurement value and trait end up in the same column. You would probably use  JobName, ParameterTypeName, Value']], [[' CREATE VIEW dbo.vProperties AS \nSELECT  m.MachineID AS [Machine ID]\n,s.SetupID AS [Setup ID]\n,p.PropertyID AS [Property ID]\n,t.PropertyTypeID AS [Property Type ID]\n,m.Name AS [Machine Name]\n,s.Name AS [Setup Name]\n,t.Name AS [Property Type Name]\n,t.IsTrait AS [Is Trait]\n,x.Value AS [Measurement Value]\n,x.Unit AS [Unit]\n,y.Value AS [Trait]\nFROM dbo.Machine AS m\nJOIN dbo.Setup AS s ON s.MachineID = m.MachineID\nJOIN dbo.Property AS p ON p.SetupID = s.SetupID\nJOIN dbo.PropertyType AS t ON t.PropertyTypeID = p.PropertyTypeID\nLEFT JOIN dbo.Measurement AS x ON x.PropertyID = p.PropertyID\nLEFT JOIN dbo.Trait AS y ON y.PropertyID = p.PropertyID\n']], ['SQL Syntax to Pivot multiple tables'], 6], [(1914303, 1), [['Create a view to generate only  [Setup Name], [Property Type Name], [Value] ; note that in this one the measurement value and trait end up in the same column. You would probably use  JobName, ParameterTypeName, Value'], ['Create list of properties (Parameters) with a column to order by']], [[' CREATE VIEW dbo.vSetupValues AS \nSELECT  [Setup Name]\n       ,[Property Type Name]\n       ,COALESCE(cast([Measurement Value] AS varchar(50)), [Trait]) AS [Val]\nFROM dbo.vProperties\n']], ['SQL Syntax to Pivot multiple tables'], 6], [(1914303, 2), [['Create list of properties (Parameters) with a column to order by'], ['Now I will dynamically create the query text']], [[' DECLARE @Props TABLE (\nid int IDENTITY (1,1)\n,PropName varchar(50)\n);\n\nINSERT INTO @Props  (PropName)\nSELECT DISTINCT [Name]\nFROM dbo.PropertyType\n']], ['SQL Syntax to Pivot multiple tables'], 6], [(1914303, 3), [['Now I will dynamically create the query text'], ['And here is the text of the query, form this point I can package this into a stored procedure, another view, or into a variable to use as dynamic sql.']], [[" DECLARE @qw TABLE(\nid int IDENTITY (1,1)\n, txt nchar(500)\n)\n\nINSERT  INTO @qw (txt)\n  SELECT  'SELECT' UNION\n  SELECT  '[Setup Name]' ;\n\nINSERT  INTO @qw (txt)   \n  SELECT  ',MAX(CASE [Property Type Name] WHEN ''' + PropName\n  + ''' THEN Val ELSE NULL END) AS [' + PropName + ']'\n  FROM  @Props\n  ORDER BY id;\n\nINSERT  INTO @qw (txt)\n SELECT  'FROM dbo.vSetupValues' UNION\n SELECT  'GROUP BY [Setup Name]' UNION\n SELECT  'ORDER BY [Setup Name]';\n"]], ['SQL Syntax to Pivot multiple tables'], 6], [(1914303, 4), [['And here is the text of the query, form this point I can package this into a stored procedure, another view, or into a variable to use as dynamic sql.'], ['returns']], [[' SELECT txt FROM @qw\n']], ['SQL Syntax to Pivot multiple tables'], 6], [(1914303, 5), [['returns'], ['And if I run this: \n alt text http://www.damirsystems.com/dp_images/machinesetup_results.pngn[Setup Name]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n,MAX(CASE [Property Type Name] WHEN 'Diameter LSL' THEN [Val] ELSE NULL END) AS [Diameter LSL]                                                                                                                                                                                                                                                                                                                                                                                                                      \n,MAX(CASE [Property Type Name] WHEN 'Diameter USL' THEN [Val] ELSE NULL END) AS [Diameter USL]                                                                                                                                                                                                                                                                                                                                                                                                                      \n,MAX(CASE [Property Type Name] WHEN 'Force LSL' THEN [Val] ELSE NULL END) AS [Force LSL]                                                                                                                                                                                                                                                                                                                                                                                                                            \n,MAX(CASE [Property Type Name] WHEN 'Force USL' THEN [Val] ELSE NULL END) AS [Force USL]                                                                                                                                                                                                                                                                                                                                                                                                                            \n,MAX(CASE [Property Type Name] WHEN 'Leak LSL' THEN [Val] ELSE NULL END) AS [Leak LSL]                                                                                                                                                                                                                                                                                                                                                                                                                              \n,MAX(CASE [Property Type Name] WHEN 'Leak USL' THEN [Val] ELSE NULL END) AS [Leak USL]                                                                                                                                                                                                                                                                                                                                                                                                                              \n,MAX(CASE [Property Type Name] WHEN 'Press Travel LSL' THEN [Val] ELSE NULL END) AS [Press Travel LSL]                                                                                                                                                                                                                                                                                                                                                                                                              \n,MAX(CASE [Property Type Name] WHEN 'Press Travel USL' THEN [Val] ELSE NULL END) AS [Press Travel USL]                                                                                                                                                                                                                                                                                                                                                                                                              \n,MAX(CASE [Property Type Name] WHEN 'Seal Height LSL' THEN [Val] ELSE NULL END) AS [Seal Height LSL]                                                                                                                                                                                                                                                                                                                                                                                                                \n,MAX(CASE [Property Type Name] WHEN 'Seal Height USL' THEN [Val] ELSE NULL END) AS [Seal Height USL]                                                                                                                                                                                                                                                                                                                                                                                                                \nFROM dbo.vSetupValues                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \nGROUP BY [Setup Name]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \nORDER BY [Setup Name]                                      \n"]], ['SQL Syntax to Pivot multiple tables'], 6], [(1914539, 0), [['UPDATED:'], ['RESULT:']], [[" DROP TABLE #times\n\nCREATE TABLE #times\n(\n    TimeOfDay  VARCHAR(32),\n    TimeMeridiem VARCHAR(32),\n    TwentyFourHourTime VARCHAR(32)\n)\n\nINSERT INTO #times (TimeOfDay, TimeMeridiem) VALUES ('1:00', 'PM')\nINSERT INTO #times (TimeOfDay, TimeMeridiem) VALUES ('1:00', 'AM')\nINSERT INTO #times (TimeOfDay, TimeMeridiem) VALUES ('12:00', 'PM')\n\nUPDATE #times SET TwentyFourHourTime = REPLACE(Right(Replicate('0',5) +\nREPLACE((SELECT CASE WHEN TimeMeridiem = 'PM' THEN\nCAST((SELECT REPLACE(TimeOfDay,':','.')) AS dec(10,2)) + 12 ELSE \n(SELECT REPLACE(TimeOfDay,':','.')) END), '24.', '00.') ,5), '.', ':')\n\nSELECT * FROM #times\n"]], ['Chaning varchar Meridiem Time to Twenty Four Hour time in Sql'], 2], [(1914539, 1), [['RESULT:'], ['-10000']], [[' TimeOfDay TimeMeridiem TwentyFourHourTime \n--------- ------------ ------------------ \n1:00      PM           13:00              \n1:00      AM           01:00              \n12:00     PM           00:00  \n']], ['Chaning varchar Meridiem Time to Twenty Four Hour time in Sql'], 2], [(1916244, 0), [["I think 'SYNC EVERY' option, as described in previous answer only available in Oracle 10g or newer. If you're using older version of Oracle you would have to run sync operation periodically. For example, you can create following stored procedure:"], ['and then schedule it run via DBMS_JOB:']], [[" CREATE OR REPLACE \nProcedure sync_ctx_indexes\nIS\n CURSOR sql1 is select distinct(pnd_index_owner||'.'||pnd_index_name) as index_name from ctx_pending;\nBEGIN\n FOR rec1 IN sql1 LOOP\n ctx_ddl.sync_index(rec1.index_name);\n END LOOP;\nEND;\n"]], ['How to sync and optimize an Oracle Text index?'], 3], [(1916244, 1), [['and then schedule it run via DBMS_JOB:'], ['As for index optimization, following command can be used (also can be scheduled with DBMS_JOB or via cron):']], [[" DBMS_JOB.SUBMIT(job_id, 'sync_ctx_indexes;', SYSDATE, 'SYSDATE + 1/720');\n"]], ['How to sync and optimize an Oracle Text index?'], 3], [(1916244, 2), [['As for index optimization, following command can be used (also can be scheduled with DBMS_JOB or via cron):'], ['There is also CTX_* package with similar function available.']], [[" alter index my_index rebuild online parameters('optimize full maxtime 60');\n"]], ['How to sync and optimize an Oracle Text index?'], 3], [(1918827, 0), [['This is an example of the frequently-asked " greatest-n-per-group " question that we see every week on StackOverflow.  Follow that tag to see other similar solutions.'], ['So your original question was misleading.  You want the latest row from  stock , not the latest row from  stockfile .']], [[' SELECT s.*, f1.*\nFROM stock s\nINNER JOIN stockfile f1\n  ON (s.stockfileid = f1.stockfileid)\nLEFT OUTER JOIN stockfile f2\n  ON (s.stockfileid = f2.stockfileid AND f1.date < f2.date)\nWHERE f2.stockfileid IS NULL;\n']], ['Select newest entry from a joined MySQL table'], 4], [(1918827, 1), [['So your original question was misleading.  You want the latest row from  stock , not the latest row from  stockfile .'], ["Okay, I think I understand what you're trying to do now.  You want the most recent row per  sku , but the  date  by which to compare them is in the referenced table  stockfile .  "]], [[' SELECT f.*, s1.*\nFROM stockfile f\nINNER JOIN stock s1\n  ON (f.stockfileid = s1.stockfileid)\nLEFT OUTER JOIN stock s2\n  ON (f.stockfileid = s2.stockfileid AND (s1.touchdate < s2.touchdate\n      OR s1.touchdate = s2.touchdate AND s1.stockid < s2.stockid))\nWHERE s2.stockid IS NULL;\n']], ['Select newest entry from a joined MySQL table'], 4], [(1918827, 2), [["Okay, I think I understand what you're trying to do now.  You want the most recent row per  sku , but the  date  by which to compare them is in the referenced table  stockfile .  "], ["Re comment about optimization:  It's hard for me to test because I don't have tables populated with data matching yours, but I'd guess you should have the following indexes:"]], [[' SELECT s1.*, f1.*\nFROM stock s1\nJOIN stockfile f1 ON (s1.stockfileid = f1.stockfileid)\nLEFT OUTER JOIN (stock s2 JOIN stockfile f2 ON (s2.stockfileid = f2.stockfileid))\n  ON (s1.sku = s2.sku AND (f1.date < f2.date OR f1.date = f2.date AND f1.stockfileid < f2.stockfileid))\nWHERE s2.sku IS NULL;\n']], ['Select newest entry from a joined MySQL table'], 4], [(1918827, 3), [["Re comment about optimization:  It's hard for me to test because I don't have tables populated with data matching yours, but I'd guess you should have the following indexes:"], ["I'd suggest using  EXPLAIN  to analyze the query without the indexes, and then create one index at a time and re-analyze with  EXPLAIN  to see which one gives the most direct benefit."]], [[' CREATE INDEX stock_sku ON stock(sku);\nCREATE INDEX stock_stockfileid ON stock(stockfileid);\nCREATE INDEX stockfile_date ON stockfile(date);\n']], ['Select newest entry from a joined MySQL table'], 4], [(1919057, 0), [['Use the  GREATEST  function:'], ['The alternative would be to use a CASE statement:']], [[' GREATEST(1, @foo)\n']], ['Simple Math max function in MySQL'], 2], [(1919057, 1), [['The alternative would be to use a CASE statement:'], ['...because CASE is ANSI standard - that will work on Oracle, MySQL, SQL Server, Postgres...']], [[' CASE WHEN 1 > @foo THEN 1 ELSE @foo END\n']], ['Simple Math max function in MySQL'], 2], [(1919757, 0), [["Won't this do it?"], ['Setup']], [[" SELECT * FROM TABLE\nWHERE COLUMN_NAME LIKE '%[^a-zA-Z0-9]%'\n"]], ['SQL Server 2008 query to find rows containing non-alphanumeric characters in a column'], 3], [(1919757, 1), [['Setup'], ['Results']], [[" use tempdb\ncreate table mytable ( mycol varchar(40) NULL)\n\ninsert into mytable VALUES ('abcd')\ninsert into mytable VALUES ('ABCD')\ninsert into mytable VALUES ('1234')\ninsert into mytable VALUES ('efg%^&hji')\ninsert into mytable VALUES (NULL)\ninsert into mytable VALUES ('')\ninsert into mytable VALUES ('apostrophe '' in a sentence') \n\nSELECT * FROM mytable\nWHERE mycol LIKE '%[^a-zA-Z0-9]%'\n\ndrop table mytable \n"]], ['SQL Server 2008 query to find rows containing non-alphanumeric characters in a column'], 3], [(1919757, 2), [['Results'], ['-10000']], [[" mycol\n----------------------------------------\nefg%^&hji\napostrophe ' in a sentence\n"]], ['SQL Server 2008 query to find rows containing non-alphanumeric characters in a column'], 3], [(1921091, 0), [['If you want nobody to update/delete the row, I would go with the UPDLOCK on the SELECT statement. This is an indication that you will update the same row shortly, e.g.'], ['Note : you can simulate different scenarios with this script:']], [[' select @Bar = Bar from oFoo WITH (UPDLOCK) where Foo = @Foo;\n']], ['Thread safe sql transaction, how to lock a specific row during a transaction?'], 4], [(1921091, 1), [['Note : you can simulate different scenarios with this script:'], ['client #1']], [[' CREATE TABLE ##temp (a int, b int)\nINSERT INTO ##temp VALUES (0, 0)\n']], ['Thread safe sql transaction, how to lock a specific row during a transaction?'], 4], [(1921091, 2), [['client #1'], ['client #2:']], [[" BEGIN TRAN\nSELECT * FROM ##temp WITH (HOLDLOCK XLOCK ROWLOCK) WHERE a = 0\nwaitfor delay '0:00:05'\nupdate ##temp set a = 1 where a = 0\nselect * from ##temp\ncommit tran\n"]], ['Thread safe sql transaction, how to lock a specific row during a transaction?'], 4], [(1921091, 3), [['client #2:'], ['-10000']], [[' begin tran\nselect * from ##temp where a = 0 or a = 1\ncommit tran\n']], ['Thread safe sql transaction, how to lock a specific row during a transaction?'], 4], [(1921394, 0), [['Try:'], ['or if UserName is a variable:']], [[" $table = $this->getDbTable();\n$select = $table->select();\n$select->where('name LIKE ?', 'UserName%');\n$rows = $table->fetchAll($select);\n"]], ["Zend: How to use SQL query with 'like' keyword?"], 2], [(1921394, 1), [['or if UserName is a variable:'], ['-10000']], [[" $table = $this->getDbTable();\n$select = $table->select();\n$select->where('name LIKE ?', $userName.'%');\n$rows = $table->fetchAll($select);\n"]], ["Zend: How to use SQL query with 'like' keyword?"], 2], [(1922189, 0), [['This:'], ['If you want to return a specific value, you need to specify it in the WHERE clause:']], [[' SELECT DISTINCT t.taskid\n  FROM SOX_TASK t\n']], ['SQL Select Distinct with ints and varchars'], 3], [(1922189, 1), [['If you want to return a specific value, you need to specify it in the WHERE clause:'], ['That will return all the rows with the specific  taskid  value.  If you want a distict list of the values associated with the taskid value:']], [[' SELECT t.*\n  FROM SOX_TASK t\n WHERE t.taskid = ?\n']], ['SQL Select Distinct with ints and varchars'], 3], [(1922189, 2), [['That will return all the rows with the specific  taskid  value.  If you want a distict list of the values associated with the taskid value:'], ["GROUP BY  is another means of getting distinct/unique values, and it's my preference to use, but in order to use  GROUP BY  we need to know the columns in the table and what grouping you want."]], [[' SELECT DISTINCT t.*\n  FROM SOX_TASK t\n WHERE t.taskid = ?\n']], ['SQL Select Distinct with ints and varchars'], 3], [(1923018, 0), [['Can there be records in TableA with no matching record in TableB? If not, then we know after we delete from TableB, we can delete any non-matching records in TableA:'], ['Otherwise:']], [[' begin transaction\ndelete from TableB\nwhere CreationDate > @SomeDate\n\ndelete from TableA\nwhere TableA_ID not in (select TableA_ID from TableB)\nend transaction\n']], ['deleting multiple records from two tables'], 2], [(1923018, 1), [['Otherwise:'], ['NOTE  Both above solutions need error handing added. ']], [[' begin transaction\n-- Save the TableA_IDs being deleted:\nselect distinct TableA_ID\ninto #TableA_Delete\nfrom Table_B\nwhere CreationDate > @Somedate\n\n-- Depending on the expected size of #TableA_Delete, you may want \n-- to create an index here, to speed up the delete from TableA.\n\ndelete from TableB\nwhere CreationDate > @SomeDate\n\ndelete from TableA\nwhere TableA_id in (select TableA_Id from #TableA_Delete)\nand TableA_id not in (select TableA_id from TableB)\ncommit transaction\n']], ['deleting multiple records from two tables'], 2], [(1923934, 0), [['For #1 : \nYou need to turn on tracing in WCF first - you need an entry in  <system.serviceModel>  that enables tracing:'], ['Next, you need to configure .NET tracing as such:']], [[' <system.serviceModel>\n   <diagnostics>\n      <messageLogging\n          logEntireMessage="true"\n          logMalformedMessages="false"\n          logMessagesAtServiceLevel="true"\n          logMessagesAtTransportLevel="false"\n          maxMessagesToLog="300000"\n          maxSizeOfMessageToLog="200000"/>\n    </diagnostics>\n</system.serviceModel>\n']], ['How can I enable WCF logging so that it writes to a Database?'], 2], [(1923934, 1), [['Next, you need to configure .NET tracing as such:'], ['Here, instead of the WebTraceListener, or other pre-defined listeners, you can also plug in your own database-oriented trace listener.']], [[' <system.diagnostics>\n   <sources>\n      <source name="System.ServiceModel" \n              switchValue="Information, ActivityTracing" \n              propagateActivity="true">\n         <listeners>\n            <add name="xml" />\n         </listeners>\n      </source>\n      <source name="System.ServiceModel.MessageLogging">\n         <listeners>\n             <add name="xml" />\n         </listeners>\n      </source>\n   </sources>\n   <sharedListeners>\n       <add name="xml" type="WcfTrace.Trace.WebTraceListener,WcfTrace.Trace" />\n   </sharedListeners>\n</system.diagnostics>\n']], ['How can I enable WCF logging so that it writes to a Database?'], 2], [(1925176, 0), [['The easy option is to use group by and select min/max for all other fields'], ['This can get quite tedious for wide table so the other option is to use rank over and partiion']], [[" SELECT TOP 10 \n    p.id, \n    max(pl.nm),\n    max(pl.val),\n    max(pl.txt_val)\nfrom \n    dm.labs pl\njoin \n    mas_data.patients p    \non \n    pl.id = p.id\n  where \n    pl.nm like '%LDL%'\nand \n    val is not null\ngroup by \n    p.id\n"]], ['SQL Server 2008: TOP 10 and distinct together'], 2], [(1925176, 1), [['This can get quite tedious for wide table so the other option is to use rank over and partiion'], ['-10000']], [[" SELECT TOP 10 \n    p.id, \n     pl.nm, \n     pl.val, \n   pl.txt_val, \n    rank() over(partition by p.id order by p.id) as Rank\nfrom \n    dm.labs pl\njoin \n    mas_data.patients p    \non \n    pl.id = p.id\n  where \n    pl.nm like '%LDL%'\nand \n    val is not null\nand\n    Rank = 1\n"]], ['SQL Server 2008: TOP 10 and distinct together'], 2], [(1925766, 0), [['As for the model, it would look like this:'], ['Then in the controller:']], [[" class UserModel extends Model {\n    public function getUserCredit($id) {\n        $this->load->database();\n        //effectively generates: SELECT `credit` FROM `User_profiles` WHERE `id`=$id\n        $query = this->db->select('credit')->where('id',$id)->get('User_profiles');\n        //row() executes the query for a single result, returns the credit property\n        return $query->row()->credit;\n    }\n}\n"]], ['Codeigniter Noob Question--active record and results?'], 2], [(1925766, 1), [['Then in the controller:'], ["That's untested, but it should at least help you get the idea."]], [[" class Users extends Controller {\n    //....\n    public function credit() {\n        $this->load->model('userModel','users');\n        // assuming the session library has been loaded\n        $user_id = $this->session->userdata('id');\n        $credit = $this->users->getUserCredit($user_id);\n        if ($credit == '0') $this->load->view('users/no_credit');\n        else $this->load->view('users/credit');\n    }\n}\n"]], ['Codeigniter Noob Question--active record and results?'], 2], [(1925879, 0), [['Solution'], ['Result looks like']], [[" CREATE TABLE supplyitem(si_id integer PRIMARY KEY, si_parentid integer, si_item varchar(100));\n\n--load up the table (multirow constructor introduced in 8.2)\nINSERT INTO supplyitem(si_id,si_parentid, si_item)\nVALUES (1, NULL, 'Paper'),\n(2,1, 'Recycled'),\n(3,2, '20 lb'),\n(4,2, '40 lb'),\n(5,1, 'Non-Recycled'),\n(6,5, '20 lb'),\n(7,5, '40 lb'),\n(8,5, 'Scraps');\n\n--Recursive query (introduced in 8.4 returns fully qualified name)\nWITH RECURSIVE supplytree AS\n(SELECT si_id, si_item, si_parentid, CAST(si_item As varchar(1000)) As si_item_fullname\nFROM supplyitem\nWHERE si_parentid IS NULL\nUNION ALL\nSELECT si.si_id,si.si_item,\n    si.si_parentid,\n    CAST(sp.si_item_fullname || '->' || si.si_item As varchar(1000)) As si_item_fullname\nFROM supplyitem As si\n    INNER JOIN supplytree AS sp\n    ON (si.si_parentid = sp.si_id)\n)\nSELECT si_id, si_item_fullname\nFROM supplytree\nORDER BY si_item_fullname;\n"]], ['Very Complex (Postgre/My)SQL examples?'], 2], [(1925879, 1), [['Result looks like'], ['-10000']], [[' si_id |      si_item_fullname\n------+-----------------------------\n 1    | Paper\n 5    | Paper->Non-Recycled\n 6    | Paper->Non-Recycled->20 lb\n 7    | Paper->Non-Recycled->40 lb\n 8    | Paper->Non-Recycled->Scraps\n 2    | Paper->Recycled\n 3    | Paper->Recycled->20 lb\n 4    | Paper->Recycled->40 lb\n']], ['Very Complex (Postgre/My)SQL examples?'], 2], [(1929373, 0), [['Just add another calculated expression as the first order by Expression, which puts those two values ahead of all others...'], ["or, EDIT (to include @astander's suggestion)"]], [[' Select [Other stuff]\nFrom Table\nOrder By Case colName \n          When first_val then 0\n          When second_val then 0\n          else 1 End,\n      colName \n']], ['Fine control over SQL Sort Order'], 3], [(1929373, 1), [["or, EDIT (to include @astander's suggestion)"], ['and another Edit, to put second_val immediately after first_Val...']], [[' Select [Other stuff]\nFrom Table\nOrder By Case \n         When colName In (first_Val, second_Val)\n         Then 0 else 1 End,\n      colName \n']], ['Fine control over SQL Sort Order'], 3], [(1929373, 2), [['and another Edit, to put second_val immediately after first_Val...'], ['-10000']], [[' Select [Other stuff]\nFrom Table\nOrder By Case \n         When colName < first_Val And colName <> secondVal Then 0\n         When colName = first_Val Then 1\n         When colName = secondVal Then 2 \n         Else 3 End,\n      colName \n']], ['Fine control over SQL Sort Order'], 3], [(1930068, 0), [['1)'], ['2)']], [[' SELECT \n    t1.patient_id\n   ,t2.patient_id\n   ,t1.blood_pressure - t2.blood_pressure as bp_diff\nFROM\n   demo_patient_info t1\nCROSS JOIN\n   demo_patient_info t2\nWHERE\n   t1.patient_id < t2.patient_id\n']], ['How to write these two (ANSI) SQL queries?'], 3], [(1930068, 1), [['2)'], ['edit:   WHERE t1.patient_id < t2.patient_id  in query 1 is there to prevent the following, duplication and self matching']], [[' SELECT \n    t1.patient_id\n   ,t2.patient_id\n   ,t1.blood_pressure - t2.blood_pressure as bp_diff\nFROM\n   demo_patient_info t1\nCROSS JOIN\n   demo_patient_info t2\nWHERE \n   t2.patient_id = 1\n']], ['How to write these two (ANSI) SQL queries?'], 3], [(1930068, 2), [['edit:   WHERE t1.patient_id < t2.patient_id  in query 1 is there to prevent the following, duplication and self matching'], ['thanks to Jonathan Leffler for the hint :)']], [[' ID1 ID2  diff \n1    2    1.4 \n2    1    1.4 \n1    1     0 \n']], ['How to write these two (ANSI) SQL queries?'], 3], [(1931581, 0), [['The way that I usually architect a solution to this problem is similar to inheritance in objects. If you have "activities" that are taking place on certain entities and you want to track those activities then the entities involved almost certainly have something in common. There\'s your base table. From there you can create subtables off of the base table to track things specific to that subtype. For example, you might have:'], ['Now for your activities:']], [[' CREATE TABLE Objects   -- Bad table name, should be more specific\n(\n     object_id     INT          NOT NULL,\n     name          VARCHAR(20)  NOT NULL,\n     CONSTRAINT PK_Application_Objects PRIMARY KEY CLUSTERED (application_id)\n)\n\nCREATE TABLE Widgets\n(\n     object_id     INT           NOT NULL,\n     height        DECIMAL(5, 2) NOT NULL,\n     width         DECIMAL(5, 2) NOT NULL,\n     CONSTRAINT PK_Widgets PRIMARY KEY CLUSTERED (object_id),\n     CONSTRAINT FK_Widgets_Objects\n     FOREIGN KEY (object_id) REFERENCES Objects (object_id)\n)\n\nCREATE TABLE Dingbats\n(\n     object_id     INT           NOT NULL,\n     label         VARCHAR(50)   NOT NULL,\n     CONSTRAINT PK_Dingbats PRIMARY KEY CLUSTERED (object_id),\n     CONSTRAINT FK_Dingbats_Objects\n     FOREIGN KEY (object_id) REFERENCES Objects (object_id)\n)\n']], ['How do you store business activities in a SQL database?'], 2], [(1931581, 1), [['Now for your activities:'], ['You can add a type code to the base activity if you want to for the type of object which it is affecting or you can just determine that by looking for existence in a subtable.']], [[' CREATE TABLE Object_Activities\n(\n     activity_id     INT          NOT NULL,\n     object_id       INT          NOT NULL,\n     activity_type   INT          NOT NULL,\n     activity_time   DATETIME     NOT NULL,\n     account_id      INT          NOT NULL,\n     CONSTRAINT PK_Object_Activities PRIMARY KEY CLUSTERED (activity_id),\n     CONSTRAINT FK_Object_Activities_Objects\n     FOREIGN KEY (object_id) REFERENCES Objects (object_id),\n     CONSTRAINT FK_Object_Activities_Activity_Types\n     FOREIGN KEY (activity_type) REFERENCES Activity_Types (activity_type),\n)\n\nCREATE TABLE Dingbat_Activities\n(\n     activity_id     INT     NOT NULL,\n     button_id       INT     NOT NULL,\n     CONSTRAINT PK_Dingbat_Activities PRIMARY KEY CLUSTERED (activity_id),\n     CONSTRAINT FK_Dingbat_Activities_Object_Activities\n     FOREIGN KEY (activity_id) REFERENCES Object_Activities (activity_id),\n     CONSTRAINT FK_Dingbat_Activities_Buttons\n     FOREIGN KEY (button_id) REFERENCES Object_Activities (button_id),\n)\n']], ['How do you store business activities in a SQL database?'], 2], [(1933185, 0), [["You can check using a self join: if the following query returns any rows, there's more than one DESC for a CP4+CP3 combination:"], ['A group by would work too:']], [[' select     * \nfrom       YourTable a\ninner join YourTable b\non         a.CP3 = b.CP3\n           and a.CP4 = b.CP4\n           and a.DESC <> b.DESC\n']], ['Finding non distinct rows'], 2], [(1933185, 1), [['A group by would work too:'], ['By the way, DESC is a SQL keyword; you might have to escape it in a way specific to your database.']], [[' select   count(*)\nfrom     YourTable\ngroup by CP3, CP4\nhaving   count(distinct DESC) > 1\n']], ['Finding non distinct rows'], 2], [(1933443, 0), [['You can do it using a trigger, for example:'], ['I just tested this on MySQL 5.1.41 and it seems to work.  If I specify a value for  id  in my  INSERT  statement, it ignores my value and generates a new surrogate key value.']], [[' DELIMITER //\n\nCREATE TRIGGER ForceId BEFORE INSERT ON MyTable\nFOR EACH ROW\nBEGIN\n  SET NEW.id = DEFAULT;\nEND //\n\nDELIMITER ;\n']], ['Can I constraint an AutoIncremented column not to accept values from outside?'], 2], [(1933443, 1), [['I just tested this on MySQL 5.1.41 and it seems to work.  If I specify a value for  id  in my  INSERT  statement, it ignores my value and generates a new surrogate key value.'], ['-10000']], [[" INSERT INTO MyTable (id, name) VALUES (DEFAULT, 'Bill');\nINSERT INTO MyTable (id, name) VALUES (123, 'John');\nSELECT * FROM MyTable;\n+----+-------+\n| id | name  |\n+----+-------+\n|  1 | bill  |\n|  2 | john  |\n+----+-------+\n"]], ['Can I constraint an AutoIncremented column not to accept values from outside?'], 2], [(1934204, 0), [['You could join both tables, and use a  having  clause to ensure that all items match:'], ["Here's code to create the data set in the question:"]], [[' select     ia.itemid\nfrom       @itemAttributes ia\ninner join @facetParameters fp\non         ia.name = fp.name\n           and ia.value = fp.value\ngroup by   ia.itemid\nhaving     count(distinct fp.name) = \n           (\n           select count(*) from @facetParameters\n           )\n']], ['How do I select rows in table (A) sharing the same foreign key (itemId) where multiple rows in table have the values in table B'], 2], [(1934204, 1), [["Here's code to create the data set in the question:"], ['-10000']], [[" declare @itemAttributes table (id int, itemId int, \n    name varchar(max), value varchar(max))\ninsert into @itemAttributes\nselect 1,1,'keywords','example1'\nunion all select 2,1,'keywords','example2'\nunion all select 3,2,'color','red'\nunion all select 4,2,'keywords','example1'\nunion all select 5,2,'keywords','example2'\nunion all select 6,3,'keywords','example2'\nunion all select 7,3,'color','red'\nunion all select 8,3,'color','blue'\n\ndeclare @facetParameters table (name varchar(max), value varchar(max))\ninsert into @facetParameters\nselect 'keywords','example1'\nunion all select 'color','red'\n"]], ['How do I select rows in table (A) sharing the same foreign key (itemId) where multiple rows in table have the values in table B'], 2], [(1936367, 0), [["You'll know in which field it is found because you know in which field you searched. If you don't care about which field contains the value, then you use the multi-column syntax:"], ["But if you want to search in a specific field then you have to specify only the field you're interested:"]], [[" SELECT ...\nFROM Members\nWHERE CONTAINS((education, address, contactname, contactsurname), 'uludag');\n"]], ['On which field was the keyword found? SQL Searching'], 3], [(1936367, 1), [["But if you want to search in a specific field then you have to specify only the field you're interested:"], ['You can combine multiple fields and preserve the field of origin by unioning multiple queries:']], [[" SELECT...\nFROM Members\nWHERE CONTAINS(education, 'uludag');\n"]], ['On which field was the keyword found? SQL Searching'], 3], [(1936367, 2), [['You can combine multiple fields and preserve the field of origin by unioning multiple queries:'], ['And finally you can use the first form (search in all fields at once) and then check in the client which field contains the search term(s).']], [[" SELECT 'education' as [field origin],... \nFROM Members\nWHERE CONTAINS(education, 'uludag')\nUNION ALL\nSELECT 'address', ...\nFROM Members\nWHERE CONTAINS(address, 'uludag')\n...\nUNION ALL\nSELECT 'contactsurname', ...\nFROM Members\nWHERE CONTAINS(contactsurname, 'uludag');\n"]], ['On which field was the keyword found? SQL Searching'], 3], [(1937917, 0), [['You can use dynamic SQL in informix - see  this link  for more details.'], ["If you can't use dynamic SQL, the next best thing would be:"]], [[' DEFINE v_sql VARCHAR(250);\n\nLET v_sql = "select name from employees";\n\nIF IN_PARAMETER = 1 THEN\n   LET v_sql = v_sql || " WHERE active = true"\nELSE\n   LET v_sql = v_sql || " WHERE idboss = 3"\nEND IF;\n\nPREPARE stmt FROM v_sql;\nEXECUTE stmt;\n\nFREE stmt;\n']], ['Custom "WHERE" in stored procedure (Informix)?'], 2], [(1937917, 1), [["If you can't use dynamic SQL, the next best thing would be:"], ['-10000']], [[' IF IN_PARAMETER = 1 THEN\n   select name from employees WHERE active = true;\nELSE\n   select name from employees WHERE idboss = 3;\nEND IF;\n']], ['Custom "WHERE" in stored procedure (Informix)?'], 2], [(1938671, 0), [["You can test whether it works in a test case. I've created a simple entity  Counter  with an  ID ,  value , and  version  fields."], ['If you update one entity  sequentially  it works:']], [['  public class Counter implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    @Basic(optional = false)\n    @Column(name = "ID")\n    private Integer id;\n\n    @Column(name = "VALUE")\n    private Integer value;\n\n    @Column(name = "VERSION")\n    @Version\n    private Integer version;\n    ...\n}\n']], ['concurrency in hibernate'], 5], [(1938671, 1), [['If you update one entity  sequentially  it works:'], ['If I simulate two  concurrent  updates:']], [['   id = insertEntity( ... );\n\n  em1.getTransaction().begin();               \n  Counter c1 = em1.find( Counter.class, id );                \n  c1.setValue( c1.getValue() + 1 );\n  em1.flush();\n  em1.getTransaction().commit();\n\n\n  em2.getTransaction().begin();\n  Counter c2 = em2.find( Counter.class, id );\n  c2.setValue( c2.getValue() + 1 );\n  em2.flush(); // OK\n  em2.getTransaction().commit(); \n']], ['concurrency in hibernate'], 5], [(1938671, 2), [['If I simulate two  concurrent  updates:'], ['then the 2nd flush fails:']], [[' id = insertEntity( ... );\n\nem1.getTransaction().begin();\nem2.getTransaction().begin();\n\nCounter c1 = em1.find( Counter.class, id );\nCounter c2 = em2.find( Counter.class, id );\n\nc1.setValue( c1.getValue() + 1 );\nem1.flush();    \nem1.getTransaction().commit();\n\nc2.setValue( c2.getValue() + 1 );\nem2.flush(); // fail    \nem2.getTransaction().commit();\n']], ['concurrency in hibernate'], 5], [(1938671, 3), [['then the 2nd flush fails:'], ['This is so because the actual parameters in the SQL statements are:']], [[' Hibernate: update COUNTER set VALUE=?, VERSION=? where ID=? and VERSION=?\nHibernate: update COUNTER set VALUE=?, VERSION=? where ID=? and VERSION=?\nDec 23, 2009 11:08:46 AM org.hibernate.event.def.AbstractFlushingEventListener performExecutions\nSEVERE: Could not synchronize database state with session\norg.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect): [org.ewe.Counter#15]\n        at org.hibernate.persister.entity.AbstractEntityPersister.check(AbstractEntityPersister.java:1765)\n']], ['concurrency in hibernate'], 5], [(1938671, 4), [['This is so because the actual parameters in the SQL statements are:'], ['-10000']], [['    update COUNTER set VALUE=1, VERSION=1 where ID=xxx and VERSION=0   \n   --> 1 row updated\n   update COUNTER set VALUE=1, VERSION=1 where ID=xxx and VERSION=0   \n   --> 0 row updated, because version has been changed in between\n']], ['concurrency in hibernate'], 5], [(1939001, 0), [['Use  SHOW PROFILES  to see a list of the most recent statements sent to MySQL:'], ['If you want/need to see currently running queries, use  SHOW PROCESSLIST :']], [[' SHOW PROFILES;\n']], ['What is equivalent statement of DBCC INPUTBUFFER(@@SPID)(which give sql statement for current connection otr specified connection) in MYSQL?'], 2], [(1939001, 1), [['If you want/need to see currently running queries, use  SHOW PROCESSLIST :'], ['The  FULL  keyword means the list will include queries from all clients, not just the one you are running the command on.']], [[' SHOW FULL PROCESSLIST;\n']], ['What is equivalent statement of DBCC INPUTBUFFER(@@SPID)(which give sql statement for current connection otr specified connection) in MYSQL?'], 2], [(1939364, 0), [['If you  really  want to do this in a single SQL statement, one way to accomplish this would be to create an "after delete" trigger on the source table that inserts the row into the target table. This way you can move the row from the source table to the target table simply by deleting it from the source table. Of course this will only work if you want to insert into target table for  every  delete on the source table.'], ['So to move the row with id 42 from source table to target table:']], [[' DELIMITER $$\n\nDROP TRIGGER IF EXISTS TR_A_DEL_SOURCE_TABLE $$\n\nCREATE TRIGGER TR_A_DEL_SOURCE_TABLE AFTER DELETE ON SOURCE_TABLE FOR EACH ROW BEGIN\n\n  INSERT IGNORE INTO TARGET_TABLE(id,val1,val2) VALUES(old.id,old.va1,old.val2);\n\nEND $$\n\nDELIMITER ;\n']], ['Is it possible to move a record from one table to another using a single SQL statement?'], 2], [(1939364, 1), [['So to move the row with id 42 from source table to target table:'], ['-10000']], [[' delete from source_table where id = 42;\n']], ['Is it possible to move a record from one table to another using a single SQL statement?'], 2], [(1940327, 0), [["If you did it the right way, in columns, you'd see"], ["in the EAV world you'd get"]], [[" SELECT * FROM Football_stats  fs\nWHERE fs.team_fk = (something that resolves to Carolina)\nfs.outcome = 'Win' And fs.touchdowns > fs.interceptions\n"]], ['Can an attribute designate one table over another?'], 2], [(1940327, 1), [["in the EAV world you'd get"], ["And all that did was give you a list of game_ids that satisfy the query, if you want the rest of the values, like points for and against, it's whole new rounds through the data."]], [[" SELECT game_id FROM football_stats WHERE fs.team_fk = [Carolina] and stat_type = 'Outcome' and stat_value = 'Wins')\nINTERSECT\nSELECT game_ID FROM \n  (SELECT game_id, stat_value FROM football_stats WHERE fs.team_fk = [Carolina] and stat_type = 'Touchdown' ) tds,\n  (SELECT game_id, stat_value FROM football_stats WHERE fs.team_fk = [Carolina] and stat_type = 'Interceptions') ints\nWHERE\n  tds.stat_value > ints.stat_value\n"]], ['Can an attribute designate one table over another?'], 2], [(1942072, 0), [['You should be able to define your cursor like this:'], ['You can also bind arguments:']], [[" DECLARE\n  c SYS_REFCURSOR;\nBEGIN\n  OPEN c FOR 'SELECT * FROM dual';\n  CLOSE c;\nEND;\n"]], ['Oracle PLSQL - Declare a cursor on a non-existing table'], 3], [(1942072, 1), [['You can also bind arguments:'], ['Example using a stored procedure']], [[" OPEN c FOR 'SELECT * FROM dual WHERE DUMMY = :1' USING 'X';\n"]], ['Oracle PLSQL - Declare a cursor on a non-existing table'], 3], [(1942072, 2), [['Example using a stored procedure'], ['-10000']], [[" CREATE OR REPLACE PROCEDURE test IS\n  c SYS_REFCURSOR;\nBEGIN\n  OPEN c FOR 'SELECT * FROM fdfdfdfdfd';\n  CLOSE c;\nEND;\n/\n"]], ['Oracle PLSQL - Declare a cursor on a non-existing table'], 3], [(1942681, 0), [["First I'll need some helper variables for total counts"], ['Then we fetch total for everyone in a given period (YEAR = 2009)']], [[' /* Few helper variables*/\nDECLARE @TotalQuantity int\n       ,@TotalAmount decimal(19, 4)\n       ,@TotalProfit decimal(19, 4)\n       ,@EveryoneElse int\n']], ['Need help with SQL aggregation query'], 3], [(1942681, 1), [['Then we fetch total for everyone in a given period (YEAR = 2009)'], ['And now for each person vs everyone else, but all in one row.']], [[' /* Fetch totals in the period*/\nSELECT  @TotalQuantity = sum(SalesQuantity)\n       ,@TotalAmount = sum(SalesAmount)\n       ,@TotalProfit = sum(Profit)\n       ,@EveryoneElse = count(DISTINCT SalesPersonKey) - 1\nFROM   factSales AS s\n       JOIN dimDate AS d ON s.DateKey = d.DateKey\nWHERE   [Year] = 2009\n\n/* Now we have totals for everyone in the period */\n']], ['Need help with SQL aggregation query'], 3], [(1942681, 2), [['And now for each person vs everyone else, but all in one row.'], ['Now you can package all this in a stored procedure with parameter(s) for date interval. May still need to tweak number of sales people to determine which were active in a certain period and how to count those who did not sell anything. With this,  EveryoneElse  means number of sales people who sold something -1; so if you have 10 sales people and only 5 sold something, than  EveryoneElse = 4 .']], [[' /* Totals for each sales person vs everyone else Average */\nSELECT  FullName\n       ,SUM(SalesQuantity) AS [PersonSalesCount]\n       ,SUM(SalesAmount) AS [PersonSalesAmount]\n       ,SUM(Profit) AS [PersonSalesProfit]\n       ,( @TotalQuantity - SUM(SalesQuantity) ) / @EveryoneElse AS [EveryoneElseAvgSalesCount]\n       ,( @TotalAmount - SUM(SalesAmount) ) / @EveryoneElse AS [EveryoneElseAvgSalesAmount]\n       ,( @TotalProfit - SUM(Profit) ) / @EveryoneElse AS [EveryoneElseAvgSalesProfit]\nFROM    factSales AS s\n        JOIN dimDate AS d ON s.DateKey = d.DateKey\n        RIGHT JOIN dimSalesPerson AS p ON p.SalesPersonKey = s.SalesPersonKey\nWHERE   [Year] = 2009\nGROUP BY FullName\n']], ['Need help with SQL aggregation query'], 3], [(1942775, 0), [['Use:'], ['...if you want the transaction_amount for both combined.  If you want them separate, use:']], [[" SELECT SUM(tt.transaction_amount)\n  FROM TRANSACTION_TYPE tt\n WHERE tt.transaction_form IN ('cash', 'credit')\n"]], ['MySQL table structure'], 3], [(1942775, 1), [['...if you want the transaction_amount for both combined.  If you want them separate, use:'], ['-10000']], [["   SELECT tt.transaction_form,\n         SUM(tt.transaction_amount)\n    FROM TRANSACTION_TYPE tt\n   WHERE tt.transaction_form IN ('cash', 'credit')\nGROUP BY tt.transaction_form\n"]], ['MySQL table structure'], 3], [(1942775, 2), [['-10000'], ['-10000']], [[' SELECT tt.transaction_amount\n  FROM TRANSACTION_TYPE tt\n  JOIN PURCHASE p ON p.transaction_id = tt.transaction_id\n  JOIN ITEMS i ON i.item_id = p.item_id\n WHERE i.client_id = ?\n']], ['MySQL table structure'], 3], [(1943284, 0), [['Note:  TABLE()  functions operate in the SQL engine, so they need us to declare a SQL type. '], ['The following sample populates an array with a couple of thousand random tags.  It then uses the array in the IN clause of a query.']], [[' create or replace type tags_nt as table of varchar2(10);\n/\n']], ['SQL argument limit in Oracle'], 2], [(1943284, 1), [['The following sample populates an array with a couple of thousand random tags.  It then uses the array in the IN clause of a query.'], ['-10000']], [[" declare\n    search_tags tags_nt;\n    n pls_integer;\nbegin\n\n    select name \n    bulk collect into search_tags\n    from ( select name \n           from temp_tags\n           order by dbms_random.value )\n    where rownum <= 2000;\n\n    select count(*)\n    into n\n    from big_table\n    where name in ( select * from table (search_tags) );\n\n    dbms_output.put_line('tags match '||n||' rows!');\nend;\n/\n"]], ['SQL argument limit in Oracle'], 2], [(1947474, 0), [['I suggest you use a union query for toys, cars and TVs. You may not need warehouse if all you need is a value.'], ['If you need a total, you can get it like so:']], [[' SELECT DollarValue FROM Cars\nUNION ALL\nSELECT DollarValue FROM TVs\nUNION ALL\nSELECT DollarValue FROM Toys\n']], ['how to join 4 tables in microsoft access with one table as the base?'], 3], [(1947474, 1), [['If you need a total, you can get it like so:'], ['You can also have:']], [[' SELECT Sum(DollarValue) FROM (\nSELECT DollarValue FROM Cars\nUNION ALL\nSELECT DollarValue FROM TVs\nUNION ALL\nSELECT DollarValue FROM Toys ) A\n']], ['how to join 4 tables in microsoft access with one table as the base?'], 3], [(1947474, 2), [['You can also have:'], ['-10000']], [[' SELECT Product, Sum(DollarValue) FROM (\nSELECT "Cars" As Product, DollarValue FROM Cars\nUNION ALL\nSELECT "TVs" As Product, DollarValue FROM TVs\nUNION ALL\nSELECT "Toys" As Product, DollarValue FROM Toys ) A\nGROUP BY Product\n']], ['how to join 4 tables in microsoft access with one table as the base?'], 3], [(1949632, 0), [['Something like (this will return a table of  INT  datatypes, just change the code slightly for  VARCHAR'], ['Something like this ( a la this answer ) ']], [[" CREATE function [dbo].[csl_to_table] ( @list nvarchar(MAX) )\nRETURNS @list_table TABLE ([id] INT)\nAS\nBEGIN\n    DECLARE     @index INT,\n                @start_index INT,\n                @id INT\n\n    SELECT @index = 1 \n    SELECT @start_index = 1\n    WHILE @index <= DATALENGTH(@list)\n    BEGIN\n\n        IF SUBSTRING(@list,@index,1) = ','\n        BEGIN\n\n                SELECT @id = CAST(SUBSTRING(@list, @start_index, \n                        @index - @start_index ) AS INT)\n                INSERT @list_table ([id]) VALUES (@id)\n                SELECT @start_index = @index + 1\n        END\n        SELECT @index  = @index + 1\n    END\n    SELECT @id = CAST(SUBSTRING(@list, @start_index, \n            @index - @start_index ) AS INT)\n    INSERT @list_table ([id]) VALUES (@id)\n    RETURN\nEND\n"]], ['How to parameterize the set for an IN statement using inline SQL?'], 2], [(1949632, 1), [['Something like this ( a la this answer ) '], ['-10000']], [[' string[] tags = new string[] { "Subway","A & W","Pizzahut" };\nstring cmdText = \n    "SELECT CompanyId FROM CompanyTable WHERE CompanyName IN ({0})";\n\nstring[] paramNames = tags.Select(\n    (s, i) => "@tag" + i.ToString()\n).ToArray();\n\nstring inClause = string.Join(",", paramNames);\nusing (SqlCommand cmd = new SqlCommand(string.Format(cmdText, inClause))) {\n    for(int i = 0; i < paramNames.Length; i++) {\n       cmd.Parameters.AddWithValue(paramNames[i], tags[i]);\n    }\n}\n']], ['How to parameterize the set for an IN statement using inline SQL?'], 2], [(1950007, 0), [['Thanks to generic relations, you should be able to query this structure using traditional query-set semantics for reverse relations:'], ['This will produce duplicates for any  Article s that are related to multiple  Image s, but you can eliminate that with the  distinct()  QuerySet method:']], [[' Article.objects.filter(images__isnull=False)\n']], ['Django Generic Relations and ORM Queries'], 2], [(1950007, 1), [['This will produce duplicates for any  Article s that are related to multiple  Image s, but you can eliminate that with the  distinct()  QuerySet method:'], ['-10000']], [[' Article.objects.distinct().filter(images__isnull=False)\n']], ['Django Generic Relations and ORM Queries'], 2], [(1950174, 0), [["I just saw a question like this the other day.   I think the hard part here is you're looking for user_id/profile_id combinations where the user_id has every group_id that the profile_id has, no more and no less.   So take the usual join and add some correlation to count the number of group_ids each profile/user has and make sure they match (this has been edited a few times):"], ["Here's a run which includes two profiles with three groups each, with one common group between them and a new user in the fourth profile:"]], [['  select user_id, profile_id \n    from user_groups join profile_groups on \n    user_groups.group_id=profile_groups.group_id \n    group by user_id, profile_id\n    having count(user_groups.group_id) = \n    (select count(*) from profile_groups as pg where \n    pg.profile_id=profile_groups.profile_id)\n    and count(profile_groups.group_id) = (select count(*) from user_groups as ug where \n    ug.user_id=user_groups.user_id)\n    ;\n']], ['SQL Join Question'], 2], [(1950174, 1), [["Here's a run which includes two profiles with three groups each, with one common group between them and a new user in the fourth profile:"], ['-10000']], [[" sqlite>  create table user_groups (user_id integer, group_id varchar);\nsqlite>  create table profile_groups (profile_id integer, group_id varchar);\nsqlite>  insert into user_groups values(1, 'group1');\nsqlite>  insert into user_groups values(1, 'group2');\nsqlite>  insert into user_groups values(1, 'group3');\nsqlite>  insert into user_groups values(2, 'group1');\nsqlite>  insert into user_groups values(2, 'group2');\nsqlite>  insert into user_groups values(3, 'group4');\nsqlite>  insert into user_groups values(4, 'group1');\nsqlite>  insert into user_groups values(4, 'group5');\nsqlite>  insert into user_groups values(4, 'group6');\nsqlite> \nsqlite>  insert into profile_groups values (11, 'group1');\nsqlite>  insert into profile_groups values (11, 'group2');\nsqlite>  insert into profile_groups values (11, 'group3');\nsqlite> \nsqlite>  insert into profile_groups values (21, 'group1');\nsqlite>  insert into profile_groups values (21, 'group2');\nsqlite> \nsqlite>  insert into profile_groups values (22, 'group4');\nsqlite> \nsqlite>  insert into profile_groups values (23, 'group1');\nsqlite>  insert into profile_groups values (23, 'group5');\nsqlite>  insert into profile_groups values (23, 'group6');\nsqlite>  select user_id, profile_id \n   ...>     from user_groups join profile_groups on \n   ...>     user_groups.group_id=profile_groups.group_id \n   ...>     group by user_id, profile_id\n   ...>     having count(user_groups.group_id) = \n   ...>     (select count(*) from profile_groups as pg where \n   ...>     pg.profile_id=profile_groups.profile_id)\n   ...>     and count(profile_groups.group_id) = (select count(*) from user_groups as ug where \n   ...>     ug.user_id=user_groups.user_id)\n   ...>     ;\n1|11\n2|21\n3|22\n4|23\n"]], ['SQL Join Question'], 2], [(1950297, 0), [["Since you can't really have a dynamic number of columns returned, you could do something like this:"], ['This would return one row per person that has a last name, with the (unlimited) first names separated by a pipe ( | ) symbol,  GROUP_CONCAT  function.']], [[" SELECT birthdate, lastname, GROUP_CONCAT(firstname SEPARATOR '|') AS firstnames\nFROM Persons, PersonsLastNames, PersonsFirstNames\nWHERE Persons.id = PersonsLastNames.id\nAND Persons.id = PersonsFirstNames.id\nGROUP BY Persons.id\n"]], ['Simple MySQL problem'], 2], [(1950297, 1), [['This would return one row per person that has a last name, with the (unlimited) first names separated by a pipe ( | ) symbol,  GROUP_CONCAT  function.'], ['-10000']], [[' birthdate             lastname   firstnames\n---                   ---        ---\n1970-01-01 00:00:00   Anderson   Steven|David\n1980-02-02 00:00:00   Smith      Adam\n1990-03-03 00:00:00   Taylor     Ed\n']], ['Simple MySQL problem'], 2], [(1952819, 0), [["You could normalize the table in a CTE (common table expression), and then select the row with the minimum value.  Based on the comment below your question, I've added priority for v1."], ["After re-reading your question, here's a way to look at the lowest value  per row  and add the  id  field to that:"]], [[' ;with Normal as (\n    select id, v1 as value, 1 as prio from YourTable\n    union all select id, v2, 2 as prio from YourTable\n    union all select id, v3, 3 as prio from YourTable\n    union all select id, v4, 4 as prio from YourTable\n)\nselect top 1 id, value\nfrom Normal\nwhere value = (\n    select min(value) from Normal\n)\norder by prio\n']], ['How to get column which has least values among them'], 2], [(1952819, 1), [["After re-reading your question, here's a way to look at the lowest value  per row  and add the  id  field to that:"], ['-10000']], [[' update t1\nset v1 = v1 + case when mincol = 1 then id else 0 end\n,   v2 = v2 + case when mincol = 2 then id else 0 end\n,   v3 = v3 + case when mincol = 3 then id else 0 end\n,   v4 = v4 + case when mincol = 4 then id else 0 end\nfrom (\n    select id, v1, v2, v3, v4,\n        case \n          when v1 <= v2 and v1 <= v3 and v1 <= v4 then 1\n          when v2 <= v3 and v2 <= v4 then 2\n          when v3 <= v4 then 3\n          else 4\n         end as mincol\n    from YourTable\n) t1\n']], ['How to get column which has least values among them'], 2], [(1953239, 0), [['To find all tables with a particular column:'], ['To find tables that have any or all of the 4 columns:']], [[" select owner, table_name from all_tab_columns where column_name = 'ID';\n"]], ['Search an Oracle database for tables with specific column names?'], 3], [(1953239, 1), [['To find tables that have any or all of the 4 columns:'], ['To find tables that have all 4 columns (with none missing):']], [[" select owner, table_name, column_name\nfrom all_tab_columns\nwhere column_name in ('ID', 'FNAME', 'LNAME', 'ADDRESS');\n"]], ['Search an Oracle database for tables with specific column names?'], 3], [(1953239, 2), [['To find tables that have all 4 columns (with none missing):'], ['-10000']], [[" select owner, table_name\nfrom all_tab_columns\nwhere column_name in ('ID', 'FNAME', 'LNAME', 'ADDRESS')\ngroup by owner, table_name\nhaving count(*) = 4;\n"]], ['Search an Oracle database for tables with specific column names?'], 3], [(1954184, 0), [['You can create the foreign key when you are doing the definition for Schedule:'], ['or']], [[' PersonId int FOREIGN KEY REFERENCES People(PersonId)\n']], ['Composite foreign keys'], 4], [(1954184, 1), [['or'], ['or if you are altering an existing table']], [[' CONSTRAINT fk_PersonId FOREIGN KEY (PersonId) REFERENCES People(PersonId)\n']], ['Composite foreign keys'], 4], [(1954184, 2), [['or if you are altering an existing table'], ["And I'll mention that if you do make a composite fk then you should make it the primary key to ensure that it is not only unique but not null."]], [[' ALTER TABLE Schedule ADD CONSTRAINT fk_PersonId\nFOREIGN KEY (PersonId) REFERENCES People(PersonId)\n']], ['Composite foreign keys'], 4], [(1954184, 3), [["And I'll mention that if you do make a composite fk then you should make it the primary key to ensure that it is not only unique but not null."], ['-10000']], [[' CONSTRAINT pk_Person_Event PRIMARY KEY (PersonId, EventId)\n']], ['Composite foreign keys'], 4], [(1954198, 0), [['-10000'], ['or this:']], [[' SELECT  t.*\nFROM    (\n        SELECT  DISTINCT groupid\n        FROM    mytable\n        ) mo\nCROSS APPLY\n        (\n        SELECT  TOP 1 *\n        FROM    mytable mi\n        WHERE   mi.groupid = mo.groupid\n        ORDER BY\n                age DESC\n        ) t\n']], ['SQL query to return only 1 record per group ID'], 2], [(1954198, 1), [['or this:'], ['This will return at most one record per group even in case of ties.']], [[' SELECT  *\nFROM    (\n        SELECT  *, ROW_NUMBER() OVER (PARTITION BY groupid ORDER BY age DESC) rn\n        FROM    mytable\n        )\nWHERE   rn = 1\n']], ['SQL query to return only 1 record per group ID'], 2], [(1955666, 0), [['Looking at your example data, there is one (albeit risky) case where you can achieve what you want. If the string tom is  always  at the end, you can do an update like this:'], ['For the date part of your question you can do something like the following:']], [[" update TableName\nset ShipName = substring(ShipName, 0, len(ShipName) -3) + ' ken'\nwhere ShipName like '% tom'\n"]], ['SQL Server update command question'], 2], [(1955666, 1), [['For the date part of your question you can do something like the following:'], ['-10000']], [[' Update TableName\nset OrderDate = dateadd(year, 3, OrderDate)\nwhere datepart(year, OrderDate) = 1996\n']], ['SQL Server update command question'], 2], [(1956487, 0), [['Something like:'], ["Based on your example, I assumed you were limiting it to tag1 = 'Language', otherwise there's the case of tag1 = Java, tag2 = c++, relations_degree = 1.  To get that: "]], [[" SELECT A.tag AS tag1, B.tag AS tag2, COUNT(*) as relations_degree\nFROM tags A\n     INNER JOIN tags B ON A.article_id = B.article_id\nWHERE A.tag = 'Language' AND a.tag <> b.tag\nGROUP BY A.tag, B.tag\nORDER BY B.tag ASC\n"]], ['How to get the tag relations results just by using SQL(s)?'], 2], [(1956487, 1), [["Based on your example, I assumed you were limiting it to tag1 = 'Language', otherwise there's the case of tag1 = Java, tag2 = c++, relations_degree = 1.  To get that: "], ['-10000']], [[' SELECT A.tag AS tag1, B.tag AS tag2, COUNT(*) as relations_degree\nFROM tags A\n     INNER JOIN tags B ON A.article_id = B.article_id\nWHERE A.tag > b.tag\nGROUP BY A.tag, B.tag\nORDER BY B.tag ASC\n']], ['How to get the tag relations results just by using SQL(s)?'], 2], [(1959629, 0), [['The extra column is easy, just create another output column in the sql that is defined as the product of the two exsting attributes'], ['The second part, adding a subtotal row, can be done with a keyword  Rollup  or by unioning with an aggregate query']], [['   Select OrderNumber, SKU, QTY, Price, Qty * Price as  LineTotal\n  From Table ... \n']], ['Add total to group'], 2], [(1959629, 1), [['The second part, adding a subtotal row, can be done with a keyword  Rollup  or by unioning with an aggregate query'], ['-10000']], [['   Select OrderNumber, SKU, QTY, Price, \n         Qty * Price as  LineTotal\n  From Table \n  Union \n  Select OrderNumber, null SKU, null Qty, null Price, \n         Sum( Qty * Price ) as LineTotal\n  From Table\n  Group By OrderNumber\n  Order By OrderNumber, Case When SKU Is Null then 1 Else 0 End\n']], ['Add total to group'], 2], [(1960801, 0), [['BETWEEN  can help to avoid unnecessary reevaluation of the expression:'], ["In  SQL Server  and  MySQL ,  LIKE  against a constant with non-leading  '%'  is also a shorthand for a pair of  >=  and  < :"]], [[' SELECT  AVG(RAND(20091225) BETWEEN 0.2 AND 0.4)\nFROM    t_source;\n\n---\n0.1998\n\nSELECT  AVG(RAND(20091225) >= 0.2 AND RAND(20091225) <= 0.4)\nFROM    t_source;\n\n---\n0.3199\n']], ['Why use the BETWEEN operator when we can do without it?'], 2], [(1960801, 1), [["In  SQL Server  and  MySQL ,  LIKE  against a constant with non-leading  '%'  is also a shorthand for a pair of  >=  and  < :"], ['However,  LIKE  syntax is more legible.']], [[" SET SHOWPLAN_TEXT ON\nGO\nSELECT  *\nFROM    master\nWHERE   name LIKE 'string%'\nGO\nSET SHOWPLAN_TEXT OFF\nGO\n\n\n|--Index Seek(OBJECT:([test].[dbo].[master].[ix_name_desc]), SEEK:([test].[dbo].[master].[name] < 'strinH' AND [test].[dbo].[master].[name] >= 'string'),  WHERE:([test].[dbo].[master].[name] like 'string%') ORDERED FORWARD)\n"]], ['Why use the BETWEEN operator when we can do without it?'], 2], [(1963382, 0), [['-10000'], ['Pseudocode:']], [[' SELECT Title, Content, date(published_time) AS Date\nFROM items\nORDER BY date(published_time);\n']], ['SQLite design question'], 2], [(1963382, 1), [['Pseudocode:'], ['-10000']], [[' last = None\nfor r in results:\n  if not last or r.Date != last.Date:\n    print "Group", r.Date\n  print r.Title, r.Content\n  last = r\n']], ['SQLite design question'], 2], [(1964124, 0), [['Use:'], ['Use:']], [[" WHERE CHARINDEX(column, '5') = 1\n  AND CHARINDEX(column, '.') = 0 --to stop decimals if needed\n  AND ISNUMERIC(column) = 1\n"]], ['Regular expressions inside SQL Server'], 2], [(1964124, 1), [['Use:'], ['References:']], [[" WHERE PATINDEX('%7%', column) = 5\n  AND CHARINDEX(column, '.') = 0 --to stop decimals if needed\n  AND ISNUMERIC(column) = 1\n"]], ['Regular expressions inside SQL Server'], 2], [(1964544, 0), [['The first things popping up'], ['Edit++ : the reason why I didn\'t use  age  is that  age  with a single argument, to quote the documentation:  Subtract from current_date (at midnight) . Meaning you don\'t get an accurate "age" unless running at midnight. Right now it\'s almost 1am here:']], [[' EXTRACT(EPOCH FROM current_timestamp-somedate)/3600\n']], ['Timestamp Difference In Hours for PostgreSQL'], 2], [(1964544, 1), [['Edit++ : the reason why I didn\'t use  age  is that  age  with a single argument, to quote the documentation:  Subtract from current_date (at midnight) . Meaning you don\'t get an accurate "age" unless running at midnight. Right now it\'s almost 1am here:'], ['-10000']], [[' select age(current_timestamp);\n       age        \n------------------\n -00:52:40.826309\n(1 row)\n']], ['Timestamp Difference In Hours for PostgreSQL'], 2], [(1967247, 0), [["If you're looking to check if any row has a non-NULL, non-empty  anonymous_username  column, you could:"], ['In PHP, you can retrieve the number like:']], [[' SELECT count(*) as Num\nFROM users\nWHERE LENGTH(anonymous_username) > 0\n']], ['check if fieldvalues exist?'], 2], [(1967247, 1), [['In PHP, you can retrieve the number like:'], ['-10000']], [[" $result = mysql_query($sql);\n$row = mysql_fetch_assoc( $result );\n$rowcount = $row['num'];\n"]], ['check if fieldvalues exist?'], 2], [(1971464, 0), [['I would store the graph as a directed graph, which allows you to use queries more effectively. Obviously you need to have the constraint that all directed edges must have a partnering edge going in the opposite direction.'], ['You can then pull out all of the edges relating to a specific vertex with a simple query:']], [[' Class Vertex(db.Model):\n   #Vertex specific stuff\n\nClass Edge(db.Model):\n   Start = db.ReferenceProperty(Vertex)\n   End = db.ReferenceProperty(Vertex)\n']], ['Undirected Graphs and Traversal on Google App Engine'], 4], [(1971464, 1), [['You can then pull out all of the edges relating to a specific vertex with a simple query:'], ['If you want to make sure that directed constraint remains true, obviously use a method to create edges like so:']], [[' #getting all neighbours of a vertex called "foo"\nNeighbours = Edge.all()\nNeighbours.filter("Start = ", foo)\n#neighbours now contains a set of all edges leading from foo\n']], ['Undirected Graphs and Traversal on Google App Engine'], 4], [(1971464, 2), [['If you want to make sure that directed constraint remains true, obviously use a method to create edges like so:'], ['Addressing roffles concerns about storing all the edges twice, you could try something like this:']], [[' LinkVertices(A, B) #A and B are vertices\n   edgeOne = Edge()\n   edgeOne.Start = A\n   edgeOne.End = B\n   edgeOne.put()\n\n   edgeTwo = Edge()\n   edgeTwo.Start = B\n   edgeTwo.End = A\n   edgeTwo.put()\n']], ['Undirected Graphs and Traversal on Google App Engine'], 4], [(1971464, 3), [['Addressing roffles concerns about storing all the edges twice, you could try something like this:'], ["This approach basically saves you storage space (every edge is only stored once) at the cost of slightly higher query times and much messier code. In my opinion that's not a very good tradeoff, since you're saving yourself about 64 bytes storage per edge."]], [[' Class Edge(db.Model):\n    A = db.ReferenceProperty(Vertex)\n    B = db.ReferenceProperty(Vertex)\n\n#getting all neighbours of a vertex called "foo"\nNeighbours = Edge.all()\nNeighbours.filter("A = ", foo)\nOtherNeighbours = Edge.all()\nOtherNeighbours.filter("B = ", foo)\n#these two queries now contains all edges leading from foo.\n']], ['Undirected Graphs and Traversal on Google App Engine'], 4], [(1971544, 0), [['If you create this as a view, I think it does what you want. It uses CTEs, which should be supported by SQL Server 2005, but not earlier.'], ['Full output (ordered by Id, StartDate for readability):']], [[' WITH Timestamps AS (\n    SELECT Id, StartDate AS Date FROM TableA\n    UNION\n    SELECT Id, EndDate AS Date FROM TableA\n    UNION\n    SELECT Id, StartDate AS Date FROM TableB\n    UNION\n    SELECT Id, EndDate AS Date FROM TableB\n), Timestamps2 AS (\n    SELECT ROW_NUMBER() OVER (ORDER BY Id, Date) AS RowNumber, * FROM Timestamps\n), Timestamps3 AS (\n    SELECT T1.ID, T1.Date AS StartDate, T2.Date AS EndDate\n    FROM Timestamps2 AS T1 JOIN Timestamps2 AS T2\n    ON T1.RowNumber + 1 = T2.RowNumber AND T1.ID = T2.ID\n), IntervalsFromB AS (\n    SELECT T.ID, T.StartDate, T.EndDate FROM Timestamps3 AS T\n    LEFT JOIN TableA AS A\n    ON T.StartDate >= A.StartDate AND T.EndDate <= A.EndDate\n    WHERE A.StartDate IS NULL)\nSELECT * FROM TableA\nUNION ALL\nSELECT * FROM IntervalsFromB\n']], ['Finding complement date ranges?'], 2], [(1971544, 1), [['Full output (ordered by Id, StartDate for readability):'], ["It was pretty complicated for me to implement this, so I'm wondering if anyone can see a simpler way. I might be missing some trick that makes this much simpler. If so, please let me know! Also, you will almost certainly need some indexes on your tables to get this to perform well if you have a lot of rows. Some other optimizations may be possible - I haven't tried for the fastest possible performance, but just to get the correct result."]], [[' Id  StartDate               EndDate\n1   2009-01-01 00:00:00.000 2009-04-01 00:00:00.000\n1   2009-04-01 00:00:00.000 2009-08-01 00:00:00.000\n1   2009-08-01 00:00:00.000 2009-10-01 00:00:00.000\n1   2009-10-01 00:00:00.000 2009-12-01 00:00:00.000\n1   2009-12-01 00:00:00.000 2010-02-01 00:00:00.000\n2   2009-01-01 00:00:00.000 2009-04-01 00:00:00.000\n2   2009-04-01 00:00:00.000 2009-08-01 00:00:00.000\n2   2009-08-01 00:00:00.000 2009-12-01 00:00:00.000\n']], ['Finding complement date ranges?'], 2], [(1971670, 0), [["Here's a test script to check:"], ["Here's the execution plan:"]], [[" CREATE TABLE `article` (\n`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,\n`title` VARCHAR( 100 ) NOT NULL ,\n`body` VARCHAR( 200 ) NOT NULL ,\n`date` VARCHAR( 30 ) NOT NULL ,\n`auther_id` INT NOT NULL ,\n`section` VARCHAR( 30 ) NOT NULL\n) ENGINE = MYISAM ;\n\n\nCREATE TABLE `users` (\n`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,\n`username` VARCHAR( 30 ) NOT NULL\n) ENGINE = MYISAM ;\n\nINSERT\nINTO    article\nSELECT  id,\n        CONCAT('Title ', id),\n        CONCAT('Body ', id),\n        DATE_FORMAT('2009-12-18' - INTERVAL id MINUTE, '%Y-%m-%d %H:%i:%S'),\n        (id - 1) % 500 + 1,\n        'news'\nFROM    t_source;\n\nINSERT\nINTO    users\nSELECT  id, CONCAT('Username ', id)\nFROM    t_source\nLIMIT 500;\n\nCREATE INDEX ix_article_section_date ON article (section, date);\n\nSELECT  username,title\nFROM    article\nJOIN    users\nON      users.id = article.auther_id\nWHERE   section = 'news'\nORDER BY\n        article.date DESC\nLIMIT 0, 40;\n"]], ['Optimizing my mysql query to use index for sorting'], 2], [(1971670, 1), [["Here's the execution plan:"], ['-10000']], [[" 1, 'SIMPLE', 'article', 'range', 'ix_article_section_date', 'ix_article_section_date', '92', '', 999998, 'Using where'\n1, 'SIMPLE', 'users', 'eq_ref', 'PRIMARY', 'PRIMARY', '4', 'test.article.auther_id', 1, ''\n"]], ['Optimizing my mysql query to use index for sorting'], 2], [(1974541, 0), [['-10000'], ["This query can be improved if you create your  (lft, rgt) 's as a single field  sets LineString  and make a  SPATIAL INDEX  over this field:"]], [[" SELECT  mc.*,\n        (\n        SELECT  COUNT(*)\n        FROM    page mp\n        WHERE   mc.lft BETWEEN mp.lft AND mp.rgt\n        ) AS depth\nFROM    page mc\nWHERE   mc.name LIKE 'bar%'\n"]], ['MySQL - Nested set model: searching in nodes'], 2], [(1974541, 1), [["This query can be improved if you create your  (lft, rgt) 's as a single field  sets LineString  and make a  SPATIAL INDEX  over this field:"], ['See this article for more details:']], [[" SELECT  mc.*,\n        (\n        SELECT  COUNT(*)\n        FROM    page mp\n        WHERE   MBRWIthin(Point(0, mc.lft), mp.sets)\n        ) AS depth\nFROM    page mc\nWHERE   mc.name LIKE 'bar%'\n"]], ['MySQL - Nested set model: searching in nodes'], 2], [(1975454, 0), [['There are a couple options if you wanted to store the data in MongoDB.  You could just store each version as a separate document, as then you can query to get the object at a certain time, the object at all times, objects over ranges of time, etc.  Each document would look something like:'], ['You could store all the versions of a document in the document itself, as mikeal suggested, using updates to push the object itself into a history array.  In Mongo, this would look like:']], [[' {\n    object : whatever,\n    date : new Date()\n}\n']], ['What are the resources or tools used to manage temporal data in key-value stores?'], 4], [(1975454, 1), [['You could store all the versions of a document in the document itself, as mikeal suggested, using updates to push the object itself into a history array.  In Mongo, this would look like:'], ['A cooler (I think) and more space-efficient way, although less time-efficient, might be to store a history in the object itself about what changed in the object at each time.  Then you could replay the history to build the object at a certain time.  For instance, you could have:']], [[' db.foo.update({object: obj._id}, {$push : {history : {date : new Date(), object : obj}}})\n\n// make changes to obj\n...\n\ndb.foo.update({object: obj._id}, {$push : {history : {date : new Date(), object : obj}}})\n']], ['What are the resources or tools used to manage temporal data in key-value stores?'], 4], [(1975454, 2), [['A cooler (I think) and more space-efficient way, although less time-efficient, might be to store a history in the object itself about what changed in the object at each time.  Then you could replay the history to build the object at a certain time.  For instance, you could have:'], ['Whenever the object changed, you could atomically push actions to the history array:']], [[' {\n    object : startingObj,\n    history : [\n        { date : d1, addField : { x : 3 } },\n        { date : d2, changeField : { z : 7 } },\n        { date : d3, removeField : "x" },\n        ...\n    ]\n}\n']], ['What are the resources or tools used to manage temporal data in key-value stores?'], 4], [(1975454, 3), [['Whenever the object changed, you could atomically push actions to the history array:'], ['-10000']], [[' db.foo.update({object : startingObj}, {$push : {history : {date : new Date(), removeField : "x"}}})\n']], ['What are the resources or tools used to manage temporal data in key-value stores?'], 4], [(1976248, 0), [['You should use something like this:'], ["This is the code (condition) that Management Studio actually uses to retrieve a list of 'system stored procedures'"]], [[' select * from sys.procedures where is_ms_shipped = 0\n']], ['How do I list all non-system stored procedures?'], 2], [(1976248, 1), [["This is the code (condition) that Management Studio actually uses to retrieve a list of 'system stored procedures'"], ['Here sp refers to sys.all_objects system view.']], [["  CAST(\n case \n when sp.is_ms_shipped = 1 then 1\n when (\n    select \n        major_id \n    from \n        sys.extended_properties \n    where \n        major_id = sp.object_id and \n        minor_id = 0 and \n        class = 1 and \n        name = N''microsoft_database_tools_support'') \n    is not null then 1\n else 0\n end AS BIT) = 1\n"]], ['How do I list all non-system stored procedures?'], 2], [(1977134, 0), [['This will work:'], ['EDIT:  I misunderstood your question. this should be a working solution:']], [[' SELECT\n    ID\nFROM table\nWHERE startDate = @startParam\nAND DATEADD(WEEK, [amount of weeks], startDate) < DATEADD(WEEK, @numWeeksParam, @startParam)\n']], ['SQL date,period comparison'], 2], [(1977134, 1), [['EDIT:  I misunderstood your question. this should be a working solution:'], ['-10000']], [[' SELECT\n    ID\nFROM TABLE\nWHERE startDate BETWEEN @startParam AND DATEADD(WEEK, @numWeeksParam, @startParam)\nOR DATEADD(WEEK, [amount of weeks], startDate) BETWEEN @startParam AND DATEADD(WEEK, @numWeeksParam, @startParam)\nOR @startParam BETWEEN startDate AND DATEADD(WEEK, [amount of weeks], startDate)\nOR DATEADD(WEEK, @numWeeksParam, @startParam) BETWEEN startDate AND DATEADD(WEEK, [amount of weeks], startDate)\n']], ['SQL date,period comparison'], 2], [(1977201, 0), [['So, either use something like (as a direct inline SQL, or wrapped up in a stored proc - your choice):'], ['or just do ']], [[' INSERT INTO dbo.Orders(OrderDate, EmployeeID, CostCenterID)\nOUTPUT Inserted.OrderID\nVALUES (........)\n']], ['How to perform INSERT/UPDATE to Linking (Join) table which has FKs to IDENTITY PKs'], 4], [(1977201, 1), [['or just do '], ['UPDATE: \nIf you want to use the newly inserted ID in subsequent T-SQL code, your best option is to store them into a in-memory table variable - something like this:']], [[' INSERT INTO dbo.Orders(OrderDate, EmployeeID, CostCenterID)\nVALUES (........)\n\nDECLARE @NewOrderID INT\nSET @NewOrderID = SCOPE_IDENTITY()\n']], ['How to perform INSERT/UPDATE to Linking (Join) table which has FKs to IDENTITY PKs'], 4], [(1977201, 2), [['UPDATE: \nIf you want to use the newly inserted ID in subsequent T-SQL code, your best option is to store them into a in-memory table variable - something like this:'], ['If you want to just insert a single order, gets its new OrderID, and then keep going inserting the order details, using the SCOPE_IDENTITY() might be easier:']], [[' DECLARE @NewOrderIDs TABLE (NewOrderID INT)\n\nINSERT INTO dbo.Orders(OrderDate, EmployeeID, CostCenterID)\nOUTPUT INSERTED.OrderID INTO @NewOrderIDs \nVALUES  (..........)\n\nINSERT INTO dbo.Orders(OrderDate, EmployeeID, CostCenterID)\nOUTPUT INSERTED.OrderID INTO @NewOrderIDs \nVALUES  (..........)\n\nINSERT INTO dbo.Orders(OrderDate, EmployeeID, CostCenterID)\nOUTPUT INSERTED.OrderID INTO @NewOrderIDs \nVALUES  (..........)\n\nSELECT * FROM @NewOrderIDs \n']], ['How to perform INSERT/UPDATE to Linking (Join) table which has FKs to IDENTITY PKs'], 4], [(1977201, 3), [['If you want to just insert a single order, gets its new OrderID, and then keep going inserting the order details, using the SCOPE_IDENTITY() might be easier:'], ['-10000']], [[' INSERT INTO dbo.Orders(OrderDate, EmployeeID, CostCenterID)\nVALUES  (..........)\n\nDECLARE @NewOrderID INT\nSET @NewOrderID = SCOPE_IDENTITY()\n\nINSERT INTO dbo.OrderDetails(.....)\n........\n']], ['How to perform INSERT/UPDATE to Linking (Join) table which has FKs to IDENTITY PKs'], 4], [(1977564, 0), [['To get the rows in the last month, you could use something like:'], ['Or for the last week:']], [[' SELECT * FROM table WHERE product_date >= DATE_SUB(NOW(), INTERVAL 1 MONTH);\n']], ['Best way to get recent date rows? (this week/month)'], 2], [(1977564, 1), [['Or for the last week:'], ['-10000']], [[' SELECT * FROM table WHERE product_date >= DATE_SUB(NOW(), INTERVAL 1 WEEK);\n']], ['Best way to get recent date rows? (this week/month)'], 2], [(1979046, 0), [["Here's my attempt, using CTEs (requires SQL Server 2005 or newer):"], ['Here is some data I used to test it:']], [[' WITH\n    RowNumbers AS (\n        SELECT ROW_NUMBER() OVER (ORDER BY indicatorid, value) AS RowNumber, *\n        FROM [AnalystEstimates].[dbo].[AnalystEstimateValues]),\n    MinRowNumbers AS (\n        SELECT indicatorid, MIN(RowNumber) AS RowNumber FROM RowNumbers GROUP BY indicatorid),\n    MaxRowNumbers AS (\n        SELECT indicatorid, MAX(RowNumber) AS RowNumber FROM RowNumbers GROUP BY indicatorid)\nSELECT\n    MinRowNumbers.indicatorid,\n    RN1.Value AS MinValue,\n    RN1.ID AS MinValueId,\n    RN2.Value AS MaxValue,\n    RN2.ID AS MaxValueId\nFROM MinRowNumbers\nJOIN MaxRowNumbers ON MinRowNumbers.indicatorid = MaxRowNumbers.indicatorid\nJOIN RowNumbers RN1 ON MinRowNumbers.RowNumber = RN1.RowNumber\nJOIN RowNumbers RN2 ON MaxRowNumbers.RowNumber = RN2.RowNumber\n']], ['SQL query minimum maximum'], 4], [(1979046, 1), [['Here is some data I used to test it:'], ["And here's the output I get:"]], [[' CREATE TABLE AnalystEstimateValues (ID int, indicatorid int, Value int);\n\nINSERT INTO AnalystEstimateValues (ID, indicatorid , Value) VALUES\n(1, 1, 4),\n(2, 1, 4),\n(3, 2, 6),\n(4, 1, 2),\n(5, 2, 2),\n(6, 2, 5),\n(7, 3, 0);\n']], ['SQL query minimum maximum'], 4], [(1979046, 2), [["And here's the output I get:"], ["Update: Here's an alternative solution based on Craig Young's answer but using joins instead of subselects:"]], [[' indicatorid MinValue MinValueId MaxValue MaxValueId\n          1        2          4        4          2\n          2        2          5        6          3\n          3        0          7        0          7\n']], ['SQL query minimum maximum'], 4], [(1979046, 3), [["Update: Here's an alternative solution based on Craig Young's answer but using joins instead of subselects:"], ["This is cleaner and probably also faster than my first version, although I haven't run performance tests to verify this."]], [[' WITH\n    UniqueIds AS (\n        SELECT IndicatorId, Value, MIN(id) AS Id\n        FROM AnalystEstimateValues\n        GROUP BY IndicatorId, Value)\nSELECT\n    lims.IndicatorId,\n    MinValue,\n    T1.Id AS MinValueId,\n    MaxValue,\n    T2.Id AS MaxValueId \nFROM (\n        SELECT\n            IndicatorId,\n            MIN(Value) as MinValue,\n            MAX(Value) as MaxValue\n        FROM AnalystEstimateValues\n        GROUP BY IndicatorId) lims\nJOIN UniqueIds T1 ON lims.IndicatorId = T1.IndicatorId AND lims.MinValue = T1.Value\nJOIN UniqueIds T2 ON lims.IndicatorId = T2.IndicatorId AND lims.MaxValue = T2.Value\n']], ['SQL query minimum maximum'], 4], [(1979522, 0), [['A simple JOIN would do the trick:'], ['In the orders/order_items example, orders is the master and order_items is the detail: each row in order_items belongs to, or is dependent on exactly one row in orders. The reverse is not true: one row in the  orders table can have zero or more related rows in the order_items table. The join condition ']], [[' SELECT     o.*\n,          i.*\nFROM       orders o\nINNER JOIN order_items i\nON         o.id = i.order_id\n']], ['How to fetch an object graph at once?'], 4], [(1979522, 1), [['In the orders/order_items example, orders is the master and order_items is the detail: each row in order_items belongs to, or is dependent on exactly one row in orders. The reverse is not true: one row in the  orders table can have zero or more related rows in the order_items table. The join condition '], ['Now, suppose you have one master with two details, for example, customers as master and customer_orders as detail1 and customer_phone_numbers. Suppose you want to retrieve a particular customer along with all is orders and all its phone numbers. You might be tempted to write:']], [[' ON o.id = i.order_id \n']], ['How to fetch an object graph at once?'], 4], [(1979522, 2), [['Now, suppose you have one master with two details, for example, customers as master and customer_orders as detail1 and customer_phone_numbers. Suppose you want to retrieve a particular customer along with all is orders and all its phone numbers. You might be tempted to write:'], ['This is valid SQL, and it will execute (asuming the tables and column names are in place)\nBut the problem is, is that it will give you a rubbish result. Assuming you have on customer with two orders (1,2) and two phone numbers (A, B) you get these records:']], [[' SELECT     c.*, o.*, p.*\nFROM       customers                c\nINNER JOIN customer_orders          o\nON         c.id                   = o.customer_id\nINNER JOIN customer_phone_numbers   p\nON         c.id                   = p.customer_id\n']], ['How to fetch an object graph at once?'], 4], [(1979522, 3), [['This is valid SQL, and it will execute (asuming the tables and column names are in place)\nBut the problem is, is that it will give you a rubbish result. Assuming you have on customer with two orders (1,2) and two phone numbers (A, B) you get these records:'], ['This is rubbish, as it suggests there is some relationship between order 1 and phone numbers A and B and order 2 and phone numbers A and B. ']], [[' customer-data | order 1 | phone A\ncustomer-data | order 2 | phone A\ncustomer-data | order 1 | phone B\ncustomer-data | order 2 | phone B\n']], ['How to fetch an object graph at once?'], 4], [(1980029, 0), [['-10000'], ['There must be some sort (ORDER BY) criteria to define the last row, otherwise your request makes no sense. For example, the last row based on  AddedDateTime  column in the  product  table']], [[' select TOP 1 * from sample order by whatever DESC\n']], ['How to retrieve the last row of a table?'], 2], [(1980029, 1), [['There must be some sort (ORDER BY) criteria to define the last row, otherwise your request makes no sense. For example, the last row based on  AddedDateTime  column in the  product  table'], ['-10000']], [[' select TOP 1 * from product order by AddedDateTime DESC\n']], ['How to retrieve the last row of a table?'], 2], [(1980214, 0), [['So a typical query would look like:'], ["effectively having one table to store all translations anywhere in the database. We decided against that too, because it would complicate writing queries (as each 'normal' column would result in one row in the translation table, which would result in effectively joining the already large translation table multiuple times to the normal table (once for each translated column). For your example table you would get queries like this:"]], [[" select     p.id\n,          pt.product_name\n,          pt.product_description\nfrom       product                  p\ninner join product_translations pt\non         p.id = pt.product_id\nand        'fr' = pt.language_code\n"]], ['How to support Multi-Languages approach in DataBase Schema?'], 2], [(1980214, 1), [["effectively having one table to store all translations anywhere in the database. We decided against that too, because it would complicate writing queries (as each 'normal' column would result in one row in the translation table, which would result in effectively joining the already large translation table multiuple times to the normal table (once for each translated column). For your example table you would get queries like this:"], ['as you can see, essentially this kind of like an entity-attribute-value design, which makes it cumbersome to query.']], [[" select     product.id \n,          product_name.translated_text product_name\n,          product_description.translated_text product_description\nfrom       product p\ninner join translations product_name\non         p.id = product_name.id\nand        'product'      = product_name.table_name\nand        'product_name' = product_name.column_name\nand        'fr'           = product_name.language\ninner join translations product_description\non         p.id = product_name.id\nand        'product'      = product_description.table_name\nand        'product_description' = product_description.column_name\nand        'fr'           = product_description.language\n"]], ['How to support Multi-Languages approach in DataBase Schema?'], 2], [(1980678, 0), [['Yes, construct an expression that returns the ordertotal for adhoc only, and 0 for the others, and another one that does the opposite, and sum those expressions. This will include one row per location with two columns one for adhoc and one for Contracted... '], ['if you reallly want separate rows for each, then one approach would be to: ']], [['  SELECT Location,  \n     Sum(Case When Contract_ID Is Null Then OrderTotal Else 0 End) AdHoc,\n     Sum(Case When Contract_ID Is Null Then 0 Else OrderTotal  End) Contracted\n FROM Orders \n GROUP BY Location\n']], ['How to return empty groups in SQL GROUP BY clause'], 2], [(1980678, 1), [['if you reallly want separate rows for each, then one approach would be to: '], ['-10000']], [["  SELECT Location, Min('AdHoc') ContractStatus,\n     Sum(Case When Contract_ID Is Null \n              Then OrderTotal Else 0 End) OrderTotal\n FROM Orders \n GROUP BY Location\n Union\n SELECT Location, Min('Contracted') ContractStatus,\n     Sum(Case When Contract_ID Is Null \n              Then 0 Else OrderTotal  End) OrderTotal\n FROM Orders \n GROUP BY Location\n Order By Location\n"]], ['How to return empty groups in SQL GROUP BY clause'], 2], [(1981428, 0), [["Conditional logic (IF/ELSE) is only supported in functions and stored procedures - you'd have to use something that resembles:"], ['Depending on your needs:']], [[" DELIMITER $$\n\nDROP PROCEDURE IF EXISTS upgrade_database $$\nCREATE PROCEDURE upgrade_database()\nBEGIN\n\n -- INSERT NEW RECORD IF PREEXISTING RECORD DOESNT EXIST\n IF((SELECT COUNT(*) AS column_exists \n       FROM information_schema.columns \n      WHERE table_name = 'test' \n        AND column_name = 'test7') = 0) THEN\n   ALTER TABLE test ADD COLUMN `test7` int(10) NOT NULL;\n   UPDATE test SET test7 = test;\n   SELECT 'Altered!';\n ELSE\n   SELECT 'Not altered!';\n END IF;\nEND $$\n\nDELIMITER ;\nCALL upgrade_database();\n"]], ['MySQL conditional drop foreign keys script'], 2], [(1981428, 1), [['Depending on your needs:'], ['...will disable and re-enable the keys attached to that table without needing to know each one.  You can disable and enable keys on a database level using  SET foreign_key_checks = 0;  to disable, and  SET foreign_key_checks = 1;  to enable them.']], [[' ALTER TABLE [table name] DISABLE KEYS \nALTER TABLE [table name] ENABLE KEYS \n']], ['MySQL conditional drop foreign keys script'], 2], [(1983745, 0), [['Use:'], ['Also, if you want to additionally limit the number of rows/terms coming back you can add the  LIMIT  clause  to the end of the query.  For example, this query will return the top five terms:']], [["   SELECT tp.term,\n         COUNT(*) 'term_count'\n    FROM TREND_POINTS tp\n   WHERE tp.time BETWEEN <time-period_start> AND <time-period_end> \nGROUP BY tp.term\nORDER BY term_count DESC, tp.term\n"]], ['MySQL "ORDER BY" the amount of rows with the same value for a certain column?'], 2], [(1983745, 1), [['Also, if you want to additionally limit the number of rows/terms coming back you can add the  LIMIT  clause  to the end of the query.  For example, this query will return the top five terms:'], ['-10000']], [["   SELECT tp.term,\n         COUNT(*) 'term_count'\n    FROM TREND_POINTS tp\n   WHERE tp.time BETWEEN <time-period_start> AND <time-period_end> \nGROUP BY tp.term\nORDER BY term_count DESC, tp.term\n   LIMIT 5\n"]], ['MySQL "ORDER BY" the amount of rows with the same value for a certain column?'], 2], [(1983790, 0), [['-10000'], ['-10000']], [['Using NOT IN: SELECT s.*\n  FROM SURVEYS s\n WHERE s.userid != 28\n   AND s.surveyid NOT IN (SELECT r.survey_id\n                            FROM RESPONSES r\n                           WHERE r.userid = 28)\n']], ["Fetch records from one table where there's not a record in another"], 3], [(1983790, 1), [['-10000'], ['-10000']], [['Using LEFT JOIN/IS NULL:    SELECT s.*\n     FROM SURVEYS s\nLEFT JOIN RESPONSES r ON r.survey_id = s.surveyid\n                     AND r.user_id = 28\n    WHERE s.userid != 28\n      AND r.userid IS NULL\n']], ["Fetch records from one table where there's not a record in another"], 3], [(1983790, 2), [['-10000'], ['Of the options listed, the  NOT IN  and  LEFT JOIN/IS NULL  are equivalent though I prefer the  NOT IN  because it is more readable.']], [['Using NOT EXISTS: SELECT s.*\n  FROM SURVEYS s\n WHERE s.userid != 28\n   AND NOT EXISTS (SELECT NULL\n                     FROM RESPONSES r\n                    WHERE r.userid = 28\n                      AND r.survey_id = s.surveyid)\n']], ["Fetch records from one table where there's not a record in another"], 3], [(1983947, 0), [["Imagine you're writing a lambda expression instead.  Would you write:"], ['or']], [[' products.Where(p.ProductID == productID).Select(p => p.ProductName)\n']], ['LINQ queries: SQL-style abbreviations or spell it out?'], 2], [(1983947, 1), [['or'], ["I actually find the first version  more  readable, but maybe that's just personal preference."]], [[' products.Where(product.ProductID == productID).Select(product => product.ProductName)\n']], ['LINQ queries: SQL-style abbreviations or spell it out?'], 2], [(1985254, 0), [["While you can't do it in  CREATE TABLE , you can do it at the same time, in the same database script, using  this approach :"], ['Then you can see your entries using this:']], [[" CREATE table T1 (id int , name char (20))\n\nEXEC   sp_addextendedproperty 'MS_Description', 'Employee ID', 'user', dbo, 'table', 'T1', 'column', id\n\nEXEC   sp_addextendedproperty 'MS_Description', 'Employee Name', 'user', dbo, 'table', 'T1', 'column', name\n"]], ['SQL Server - Can you add field descriptions in CREATE TABLE?'], 2], [(1985254, 1), [['Then you can see your entries using this:'], ['-10000']], [[" SELECT   *\nFROM   ::fn_listextendedproperty (NULL, 'user', 'dbo', 'table', 'T1', 'column', default)\n"]], ['SQL Server - Can you add field descriptions in CREATE TABLE?'], 2], [(1986491, 0), [['You can split an array to a resultset by using the unnest function, and you can turn a string literal into an array by using the string_to_array function.  Combine both and you get this:'], ['Since 8.2 does not have UNNEST, you can write it in PostgreSQL like this:']], [[" alvherre=# select unnest(string_to_array('the quick lazy fox', ' '));\n unnest \n--------\n the\n quick\n lazy\n fox\n(4 filas)\n"]], ['sql split string by space into table in postgresql'], 2], [(1986491, 1), [['Since 8.2 does not have UNNEST, you can write it in PostgreSQL like this:'], ['-10000']], [[' create or replace function unnest(anyarray) returns setof anyelement\nlanguage sql as $$\n   select $1[i] from generate_series(array_lower($1, 1),\n                                     array_upper($1, 1)) as i;\n$$; \n']], ['sql split string by space into table in postgresql'], 2], [(1987696, 0), [['Here is a rough example in DAO:'], ['Here are some rough notes for ADO: ']], [[' Dim strSQL As String\nDim db As DAO.Database\nDim wrk As Workspace\n\nOn Error GoTo TrapError\n\n    Set db = CurrentDb\n    Set wrk = DBEngine.Workspaces(0)\n\n    wrk.BeginTrans\n        strSQL = "Update sysInfo Set InvoiceOR=False"\n        db.Execute strSQL, dbFailOnError\n    wrk.CommitTrans\n\nExit_Sub:\n    Set db = Nothing\n    Set wrk = Nothing\n    Exit Sub\n\nTrapError:\n\n    MsgBox "Failed: " & Err.Description\n    wrk.Rollback\n    Err.Clear\n    Resume Exit_Sub\n']], ['Rollback Multiple SQL update queries in MS Access'], 2], [(1987696, 1), [['Here are some rough notes for ADO: '], ['-10000']], [[' Dim cmd As ADODB.Command\nDim cn As ADODB.Connection\n\nSet cmd = CreateObject("ADODB.Command")\nSet cn = CurrentProject.Connection\n\ncmd.CommandText = "Update sysInfo Set InvoiceOR=False"\ncmd.ActiveConnection = cn\ncmd.ActiveConnection.BeginTrans\ncmd.Execute , , adExecuteNoRecords\n\nIf Err <> 0 Then\n    cmd.ActiveConnection.RollbackTrans\nElse\n    cmd.ActiveConnection.CommitTrans\nEnd If\n']], ['Rollback Multiple SQL update queries in MS Access'], 2], [(1989100, 0), [['Log'], ['LogActor']], [[' ID  Time   LogType \n1   1/1/10 1\n2   1/1/10 2\n3   1/1/10 3\n']], ['Databases: Making a Log of actions, how to handle various references?'], 9], [(1989100, 1), [['LogActor'], ['LogMessage']], [[' LogID LogActorType LogActorID Sequence\n1     User         1          1\n1     User         2          2\n2     User         1          1\n2     User         2          2\n2     User         2          3\n2     Game         1          4\n3     User         3          1\n3     Group        1          2\n']], ['Databases: Making a Log of actions, how to handle various references?'], 9], [(1989100, 2), [['LogMessage'], ['User']], [[' LogType Message \n1       {0} Made a new friend {1}\n2       {0}, {1}, {2} played a game ({3})\n3       {0} joined a group ({1})\n']], ['Databases: Making a Log of actions, how to handle various references?'], 9], [(1989100, 3), [['User'], ['Game']], [[' ID Name\n1  User A\n2  User B\n3  User C\n']], ['Databases: Making a Log of actions, how to handle various references?'], 9], [(1989100, 4), [['Game'], ['Group']], [[' ID Name\n1  Name of game\n']], ['Databases: Making a Log of actions, how to handle various references?'], 9], [(1989100, 5), [['Group'], ['a)']], [[' ID Name\n1  Name of group\n']], ['Databases: Making a Log of actions, how to handle various references?'], 9], [(1989100, 6), [['a)'], ['b)']], [[' SELECT \n  LogId,\n  COLLESCE(U.Name,Ga.Name,Go.Name) AS Name,\n  Sequence\nFROM LogActor A\nLEFT JOIN User U ON A.LogActorID = U.[ID] AND LogActorType = "User"\nLEFT JOIN Game Ga ON A.LogActorID = Ga.[ID] AND LogActorType = "Game"\nLEFT JOIN Group Go ON A.LogActorID = Go.[ID] AND LogActorType = "Group"\nORDER BY LogID, Sequence\n']], ['Databases: Making a Log of actions, how to handle various references?'], 9], [(1989100, 7), [['b)'], ['So, the last 10 items in the log would looks something like this:']], [[' SELECT \n  LogId,\n  U.Name AS Name,\n  Sequence\nFROM LogActor A\nINNER JOIN User U ON A.LogActorID = U.[ID] AND LogActorType = "User"\nUNION ALL\nSELECT \n  LogId,\n  Ga.Name AS Name,\n  Sequence\nFROM LogActor A\nINNER JOIN Game Ga ON A.LogActorID = Ga.[ID] AND LogActorType = "Game"\nUNION ALL\nSELECT \n  LogId,\n  Go.Name AS Name,\n  Sequence\nFROM LogActor A\nINNER JOIN Group Go ON A.LogActorID = Go.[ID] AND LogActorType = "Group"\nORDER BY LogID, Sequence\n']], ['Databases: Making a Log of actions, how to handle various references?'], 9], [(1989100, 8), [['So, the last 10 items in the log would looks something like this:'], ['NB - As you can see, it is easier to select all log items from a date than the last X, because we need a (probably very fast) sub-query for this.']], [[' SELECT \n  LogId,\n  M.Message,\n  COLLESCE(U.Name,Ga.Name,Go.Name) AS Name,\n  Time,\n  A.Sequence\nFROM Log\nLEFT JOIN LogActor A ON Log.LogID = A.LogID\nLEFT JOIN User U ON A.LogActorID = U.[ID] AND LogActorType = "User"\nLEFT JOIN Game Ga ON A.LogActorID = Ga.[ID] AND LogActorType = "Game"\nLEFT JOIN Group Go ON A.LogActorID = Go.[ID] AND LogActorType = "Group"\nLEFT JOIN LogMessage M ON Log.LogType = M.LogMessage\nWHERE LogID IN (SELECT Top 10 LogID FROM Log ORDER BY Date DESC)\nORDER BY Date, LogID, A.Sequence\n']], ['Databases: Making a Log of actions, how to handle various references?'], 9], [(1989330, 0), [["Let's say we have  factSession  with:"], ['and']], [['   ( \n   ...\n  ,SessionID int\n  ,StartTime datetime\n  ,EndTime datetime\n  ,EntityID int\n   ...\n  ) ;\n']], ['how to denormalize ranges and store them in a data warehouse?'], 3], [(1989330, 1), [['and'], ['You can:']], [[' TimeSeries TABLE ( TimePoint datetime ) ;\n']], ['how to denormalize ranges and store them in a data warehouse?'], 3], [(1989330, 2), [['You can:'], ['-10000']], [[' SELECT  t.TimePoint\n       ,f.EntityID\n       ,COUNT(f.SessionID) AS cnt\nFROM    TimeSeries AS t\n        LEFT JOIN factSessions AS f ON ( f.StartTime <= t.TimePoint\n                                          AND t.TimePoint <= f.EndTime\n                                        )\nGROUP BY t.TimePoint ,f.EntityID\nORDER BY t.TimePoint\n']], ['how to denormalize ranges and store them in a data warehouse?'], 3], [(1989340, 0), [['-10000'], ["I'll note that you have an  amount  column in both  loans  and  loan_operations .  It's hard to know what the difference is between these two - it's entirely possible that  loans  shouldn't have this column at all, and instead it should be summed from the column in  loan_operations ."]], [[" CREATE PROCEDURE GetBranchSummaryByCity\n    @City varchar(50)\nAS\nSELECT\n    b.id, b.address, b.name, b.assets,\n    b2.EmployeeCount, b2.CustomerCount,\n    b2.TotalLoanAmount, b2.TotalAccountBalance\nFROM branches b\nINNER JOIN\n(\n    SELECT\n        b.id,\n        ISNULL(COUNT(DISTINCT e.id), 0) AS EmployeeCount,\n        ISNULL(COUNT(c.id), 0) AS CustomerCount,\n        ISNULL(SUM(l.amount), 0) AS TotalLoanAmount,\n        ISNULL(SUM(a.balance), 0) AS TotalAccountBalance\n    FROM branches b\n    LEFT JOIN employees e\n        -- Fix your schema so this matches the branch ID instead!\n        ON e.branchname = b.name\n    LEFT JOIN employee_customer ec\n        ON ec.employeeid = e.id\n    LEFT JOIN customers c\n        ON c.id = ec.customerid\n    LEFT JOIN customer_accounts ca\n        ON ca.customerid = c.id\n    LEFT JOIN accounts a\n        ON a.id = ca.accountid\n    LEFT JOIN loan_customer lc\n        ON lc.customerid = c.id\n    LEFT JOIN loans l\n        ON l.id = lc.loanid\n    WHERE b.Name LIKE '%' + @City + '%'\n    GROUP BY b.id\n) b2\nON b2.id = b.id\n"]], ['join query help !'], 3], [(1989340, 1), [["I'll note that you have an  amount  column in both  loans  and  loan_operations .  It's hard to know what the difference is between these two - it's entirely possible that  loans  shouldn't have this column at all, and instead it should be summed from the column in  loan_operations ."], ['-10000']], [[' CREATE PROCEDURE FindCustomersWithLoansByDateRange\n    @BeginDate datetime,\n    @EndDate datetime\nAS\nSELECT c2.id, c2.name, c2.address, ...\nFROM\n(\n    SELECT DISTINCT c.id\n    FROM customers c\n    INNER JOIN loan_customer lc\n        ON lc.customerid = c.id\n    INNER JOIN loans l\n        ON l.id = lc.loanid\n    INNER JOIN loan_operations lo\n        ON lo.loanid = l.id\n    WHERE lo.date BETWEEN @BeginDate AND @EndDate\n) c1\nINNER JOIN customers c2\nON c2.id = c1.id\n']], ['join query help !'], 3], [(1989340, 2), [['-10000'], ['-10000']], [[' CREATE PROCEDURE GetEmployeeServiceSummaryByDateRange\n    @BeginDate datetime,\n    @EndDate datetime\nAS\nSELECT e.id, ISNULL(es.CustomerCount, 0) AS CustomerCount, e.name, e.position, ...\nFROM employees e\nLEFT JOIN\n(\n    SELECT e.id, COUNT(DISTINCT c.id) AS CustomerCount\n    FROM employees e\n    INNER JOIN employee_customer ec\n        ON ec.employeeid = e.id\n    INNER JOIN customers c\n        ON c.id = ec.customerid\n    INNER JOIN loan_customer lc\n        ON lc.customerid = c.id\n    INNER JOIN loans l\n        ON l.id = lc.loanid\n    INNER JOIN loan_operations lo\n        ON lo.loanid = l.id\n    WHERE lo.date BETWEEN @BeginDate AND @EndDate\n    GROUP BY e.id\n) es\nON es.id = e.id\n']], ['join query help !'], 3], [(1990101, 0), [["Let's assume, for sake of concreteness, that your table is called 'ProductSectors' and has a structure like:"], ['What you are seeking within a particular ProductID is a list of the minimum and maximum contiguous values of Sector.  A range is contiguous when there is no value one smaller than the minimum and no value one bigger than the maximum and there is no gap within the range.  This is a complex query:']], [[' CREATE TABLE ProductSectors\n(\n    ProductID    INTEGER NOT NULL,\n    Sector       INTEGER NOT NULL CHECK (Sector > 0),\n    Name         VARCHAR(20) NOT NULL,\n    PRIMARY KEY (ProductID, Sector)\n);\n']], ['how to obtain ranges of serial numbers in sql?'], 5], [(1990101, 1), [['What you are seeking within a particular ProductID is a list of the minimum and maximum contiguous values of Sector.  A range is contiguous when there is no value one smaller than the minimum and no value one bigger than the maximum and there is no gap within the range.  This is a complex query:'], ['And here is a trace of the overall query working with sample data:']], [[' SELECT P1.ProductID, P1.Sector AS Min_Sector, P2.Sector AS Max_Sector\n  FROM ProductSectors P1 JOIN ProductSectors P2\n    ON P1.ProductID = P2.ProductID\n   AND P1.Sector   <= P2.Sector\n WHERE NOT EXISTS (SELECT *     -- no entry one smaller\n                     FROM ProductSectors  P6\n                    WHERE P1.ProductID  = P6.ProductID\n                      AND P1.Sector - 1 = P6.Sector\n                  )\n   AND NOT EXISTS (SELECT *     -- no entry one larger\n                     FROM ProductSectors  P5\n                    WHERE P2.ProductID  = P5.ProductID\n                      AND P2.Sector + 1 = P5.Sector\n                  )\n   AND NOT EXISTS (SELECT *     -- no gaps between P1.Sector and P2.Sector\n                     FROM ProductSectors P3\n                    WHERE P1.ProductID = P3.ProductID\n                      AND P1.Sector   <= P3.Sector\n                      AND P2.Sector   >  P3.Sector\n                      AND NOT EXISTS (SELECT *\n                                        FROM ProductSectors P4\n                                       WHERE P4.ProductID = P3.ProductID\n                                         AND P4.Sector    = P3.Sector + 1\n                                     )\n                  )\n ORDER BY P1.ProductID, Min_Sector;\n']], ['how to obtain ranges of serial numbers in sql?'], 5], [(1990101, 2), [['And here is a trace of the overall query working with sample data:'], ['And some sample data, with various gaps:']], [[' CREATE TEMP TABLE productsectors\n(\n    ProductID   INTEGER NOT NULL,\n    Sector      INTEGER NOT NULL CHECK(Sector > 0),\n    Name        VARCHAR(20),\n    PRIMARY KEY (ProductID, Sector)\n);\n']], ['how to obtain ranges of serial numbers in sql?'], 5], [(1990101, 3), [['And some sample data, with various gaps:'], ['Required output - also the actual output:']], [[' INSERT INTO ProductSectors VALUES(101, 1, "101:1");\nINSERT INTO ProductSectors VALUES(101, 2, "101:2");\nINSERT INTO ProductSectors VALUES(101, 3, "101:3");\nINSERT INTO ProductSectors VALUES(101, 4, "101:4");\nINSERT INTO ProductSectors VALUES(101, 5, "101:5");\nINSERT INTO ProductSectors VALUES(101, 6, "101:6");\nINSERT INTO ProductSectors VALUES(101, 7, "101:7");\nINSERT INTO ProductSectors VALUES(102, 1, "102:1");\nINSERT INTO ProductSectors VALUES(102, 2, "102:2");\nINSERT INTO ProductSectors VALUES(102, 4, "102:4");\nINSERT INTO ProductSectors VALUES(102, 5, "102:5");\nINSERT INTO ProductSectors VALUES(102, 6, "102:6");\nINSERT INTO ProductSectors VALUES(102, 7, "102:7");\nINSERT INTO ProductSectors VALUES(103, 1, "103:1");\nINSERT INTO ProductSectors VALUES(103, 2, "103:2");\nINSERT INTO ProductSectors VALUES(103, 4, "103:4");\nINSERT INTO ProductSectors VALUES(103, 6, "103:6");\nINSERT INTO ProductSectors VALUES(103, 7, "103:7");\nINSERT INTO ProductSectors VALUES(104, 1, "104:1");\nINSERT INTO ProductSectors VALUES(104, 2, "104:2");\nINSERT INTO ProductSectors VALUES(104, 3, "104:3");\nINSERT INTO ProductSectors VALUES(104, 6, "104:6");\nINSERT INTO ProductSectors VALUES(104, 7, "104:7");\nINSERT INTO ProductSectors VALUES(105, 1, "105:1");\nINSERT INTO ProductSectors VALUES(105, 4, "105:4");\nINSERT INTO ProductSectors VALUES(105, 5, "105:5");\nINSERT INTO ProductSectors VALUES(105, 7, "105:7");\nINSERT INTO ProductSectors VALUES(106, 1, "106:1");\nINSERT INTO ProductSectors VALUES(106, 2, "106:1");\nINSERT INTO ProductSectors VALUES(106, 3, "106:1");\nINSERT INTO ProductSectors VALUES(106, 7, "106:7");\nINSERT INTO ProductSectors VALUES(107, 7, "107:7");\nINSERT INTO ProductSectors VALUES(108, 8, "108:8");\nINSERT INTO ProductSectors VALUES(108, 9, "108:9");\n']], ['how to obtain ranges of serial numbers in sql?'], 5], [(1990101, 4), [['Required output - also the actual output:'], ['With the expected results on  MacOS X  10.6.2,  IDS  11.50.FC4W1,  SQLCMD  86.04.']], [[' 101|1|7 \n102|1|2 \n102|4|7 \n103|1|2 \n103|4|4 \n103|6|7 \n104|1|3 \n104|6|7 \n105|1|1 \n105|4|5 \n105|7|7 \n106|1|3 \n106|7|7 \n107|7|7 \n108|8|9 \n']], ['how to obtain ranges of serial numbers in sql?'], 5], [(1990629, 0), [['Use:'], ['Previously:']], [['    SELECT pl.page,\n          r.is_allowed,\n          r.role_id\n     FROM PAGE_LINKS pl\nLEFT JOIN RPP r ON r.page = pl.page\n               AND OR r.role_id = 3\n']], ['(mySQL) Unable to query 2 tables properly for data'], 2], [(1990629, 1), [['Previously:'], ["This query won't return pages that have a role_id other than 3 and that aren't null."]], [['    SELECT pl.page,\n          r.is_allowed,\n          r.role_id\n     FROM PAGE_LINKS pl\nLEFT JOIN RPP r ON r.page = pl.page\n    WHERE r.role_id IS NULL OR r.role_id = 3\n']], ['(mySQL) Unable to query 2 tables properly for data'], 2], [(1991290, 0), [['In  PostgreSQL 8.3 :'], ['In  PostgreSQL 8.4 :']], [[" SELECT  a[1] AS avg_std, a[2] AS cnt_std, std\nFROM    (\n        SELECT  (\n                SELECT  ARRAY[AVG(c3) , COUNT(*)]\n                FROM    (\n                        SELECT  c3\n                        FROM    ssims si\n                        WHERE   obraz = 'lena'\n                                AND si.std = so.std\n                        ORDER BY\n                                id\n                        LIMIT 20\n                        ) q\n                ) a\n        FROM    (\n                SELECT  DISTINCT std\n                FROM    ssims\n                WHERE   obraz = 'lena'\n                ) so\n        ) q\n"]], ['PostgreSQL: Selecting N result in group by query'], 2], [(1991290, 1), [['In  PostgreSQL 8.4 :'], ['-10000']], [[" SELECT  AVG(c3), COUNT(*), std\nFROM    (\n        SELECT  std, c3, ROW_NUMBER() OVER (PARTITION BY std ORDER BY id) AS rn\n        FROM    ssims\n        WHERE   obraz = 'lena'\n        ) q\nWHERE   rn <= 20\nGROUP BY\n        std\n"]], ['PostgreSQL: Selecting N result in group by query'], 2], [(1992042, 0), [['-10000'], ['or if you need WHERE:']], [[' SELECT date, count(*) as users FROM site_users GROUP BY date;\n']], ['Count number of times a date is in DB'], 2], [(1992042, 1), [['or if you need WHERE:'], ["The GROUP BY is the important part. It generates an aggregate report. What you're count()ing is the number of rows in each GROUP (in this case, date)."]], [[" SELECT date, count(*) as users FROM site_users\n    WHERE date > '2008-01-01'\n    GROUP BY date;\n"]], ['Count number of times a date is in DB'], 2], [(1993947, 0), [['-10000'], ["You have nulls in there too? OK, this is getting really unpleasant. You'd need to protect against the nulls, like:"]], [[' SELECT ID,\n    CASE\n        WHEN Date1>Date2 AND Date1>Date3 THEN Date1\n        WHEN Date2>Date1 AND Date2>Date3 THEN Date2\n        ELSE Date3\n    END AS "Most Recent Date",\n    CASE\n        WHEN Date1>Date2 AND Date1>Date3 THEN Cost1\n        WHEN Date2>Date1 AND Date2>Date3 THEN Cost2\n        ELSE Cost3\n    END AS Cost\nFROM TableName;\n']], ['The max value of several columns (date and cost relationship)'], 3], [(1993947, 1), [["You have nulls in there too? OK, this is getting really unpleasant. You'd need to protect against the nulls, like:"], ["Well... it's possible but your model is now looking extremely precarious."]], [['     CASE\n        WHEN Date1>COALESCE(Date2, 0) AND Date1>COALESCE(Date3, 0) THEN Date1\n        WHEN Date2>COALESCE(Date1, 0) AND Date2>COALESCE(Date3, 0) THEN Date2\n        ELSE Date3\n    END AS "Most Recent Date",\n']], ['The max value of several columns (date and cost relationship)'], 3], [(1993947, 2), [["Well... it's possible but your model is now looking extremely precarious."], ['If it is at all within your power you need to  normalise  these tables, because the data model you have at the moment is essentially broken.']], [[' SELECT t0.ID,\n    CASE\n        WHEN t0.Date1>COALESCE(t0.Date2, 0) AND t0.Date1>COALESCE(t0.Date3, 0) THEN t0.Date1\n        WHEN t0.Date2>COALESCE(t0.Date1, 0) AND t0.Date2>COALESCE(t0.Date3, 0) THEN t0.Date2\n        WHEN t0.Date3>COALESCE(t0.Date1, 0) AND t0.Date3>COALESCE(t0.Date1, 0) THEN t0.Date3\n        WHEN t1.Date1>COALESCE(t1.Date2, 0) AND t1.Date1>COALESCE(t1.Date3, 0) THEN t1.Date1\n        WHEN t1.Date2>COALESCE(t1.Date1, 0) AND t1.Date2>COALESCE(t1.Date3, 0) THEN t1.Date2\n        WHEN t1.Date3>COALESCE(t1.Date1, 0) AND t1.Date3>COALESCE(t1.Date1, 0) THEN t1.Date3\n    END AS "Most Recent Date",\n    -- the same thing all over again for the cost selector\nFROM TableName AS t0\nLEFT JOIN BackupTableName AS t1 ON t0.ID=t1.ID;\n']], ['The max value of several columns (date and cost relationship)'], 3], [(1995805, 0), [['Use:'], ['Alternately:']], [[' SELECT s.name\n  FROM STUDENTS s\n  JOIN CLASSES_STUDENTS cs ON cs.student_id = s.student_id\n                          AND cs.class_id = 5\n']], ['How to fetch all recordsets which are linked through that table?'], 2], [(1995805, 1), [['Alternately:'], ["Because you want students only in a particular class, you'd use an INNER JOIN.  You'd use a LEFT JOIN if you wanted say a list of all the students, and then LEFT JOIN to  CLASSES_STUDENTS  to know if any are taking classes (because those that aren't would have null values in the  CLASSES_STUDENTS  columns).  I recommend  looking at this link for the breakdown of various JOINs and their impact on the data you'll get back ."]], [[' SELECT s.name\n  FROM STUDENTS s\n  JOIN CLASSES_STUDENTS cs ON cs.student_id = s.student_id\n  JOIN CLASSES c ON c.class_id = cs.class_id\n WHERE c.class_id = 5\n']], ['How to fetch all recordsets which are linked through that table?'], 2], [(1996699, 0), [['First, implement the CLR Split() function that you get in the Samples on the SQL 2005 installation media.'], ["And now that the question has changed, let's address the concatenation too:"]], [[' SELECT t.*, s.value\nFROM yourTable t\nCROSS APPLY\ndbo.Split(SkillsSelected) s\n\nEXCEPT\n\nSELECT t.*, s.value\nFROM yourTable t\nCROSS APPLY\ndbo.Split(TaskList) s\n;\n']], ['TSQL in SQL 2005: Query'], 2], [(1996699, 1), [["And now that the question has changed, let's address the concatenation too:"], ['-10000']], [[" SELECT t.*, \nSTUFF(\n(\n    SELECT ', ' + value\n    FROM \n    (\n    SELECT s.value\n    FROM\n    dbo.Split(SkillsSelected) s\n    EXCEPT\n    SELECT s.value\n    FROM\n    dbo.Split(TaskList) s\n    ) v\n    FOR XML PATH('')\n),1,2,'') AS MissingSkills\nFROM yourTable AS t;\n"]], ['TSQL in SQL 2005: Query'], 2], [(1997199, 0), [["It's been a while since I had to mess with Rdb.  I seem to recall that there was a way to convert to a TIMESTAMP datatype by doing something like"], ["WHERE 'YYYYMMDDHHNNSSTT' was a character string in year-month-day-hour-min-sec-fraction format.  You may need to use DATE ANSI here instead of TIMESTAMP - like I say, it's been a while.  Regardless, the following might work:"]], [[" CAST('YYYYMMDDHHMMSSTT' AS TIMESTAMP)\n"]], ['How to improve the following SQL select date in RDB'], 2], [(1997199, 1), [["WHERE 'YYYYMMDDHHNNSSTT' was a character string in year-month-day-hour-min-sec-fraction format.  You may need to use DATE ANSI here instead of TIMESTAMP - like I say, it's been a while.  Regardless, the following might work:"], ["which is still ugly but is perhaps better than all the substringing.  Anyways, play with it a bit and I'm sure you'll get it."]], [[" SELECT CAST((CAST(DATE_COL AS CHAR(8)) || '00000000') AS TIMESTAMP)...\n"]], ['How to improve the following SQL select date in RDB'], 2], [(1998545, 0), [['In simple terms:'], ['But using getdate() will provide both a date and a time, experience says that this is unlikely to be exactly what you want - you might want to strip the time down and just consider the date portion']], [[' Select * from Table where MyDateTimeRow < dateadd(dd,-3,getdate())\n']], ['sql compare datetime today'], 2], [(1998545, 1), [['But using getdate() will provide both a date and a time, experience says that this is unlikely to be exactly what you want - you might want to strip the time down and just consider the date portion'], ['-10000']], [[' Select * From Table where MyDateTimeRow < dateadd(dd, datediff(dd, 0, getdate()) - 3, 0)\n']], ['sql compare datetime today'], 2], [(1998627, 0), [['These are procedures I use within an anonymous block wrapper that defines a_tname, a_destTS, vTname, and vTspName - they should give you the general idea:'], ['2) Set table default partition tablespace so new partitions are created there:']], [[" procedure mvTabPart (a_tname in varchar2, a_destTS in varchar2) is\ncursor pCur(vTname varchar2, vTspName varchar2) is\n  select table_name, partition_name\n  from user_tab_partitions\n  where table_name = vTname\n      and tablespace_name not like vTspName\n  order by partition_position desc;\nbegin\nfor pRow in pCur(a_tname, a_destTS) loop\n sqlStmnt := 'alter table '||pRow.table_name||\n             ' move partition '||pRow.partition_name||\n             ' tablespace '||a_destTS;\nexecute immediate sqlStmnt;\nend loop;\nend mvTabPart;\n"]], ['How do you move a partitioned table from one tablespace to another in Oracle 11g?'], 5], [(1998627, 1), [['2) Set table default partition tablespace so new partitions are created there:'], ['3) Set index default partition tablespace so new index partitions (if any) are created where you want them:']], [["     procedure setDefTabPart (a_tname in varchar2, a_destTS in varchar2) is\n    cursor tCur(vTname varchar2) is\n      select table_name\n      from user_part_tables\n      where table_name = vTname;\n    begin\n    for tRow in tCur(a_tname) loop\n     sqlStmnt := 'alter table '||tRow.table_name||\n                 ' modify default attributes '||\n                 ' tablespace '||a_destTS;\n    execute immediate sqlStmnt;\n    end loop;\nend setDefNdxPart;\n"]], ['How do you move a partitioned table from one tablespace to another in Oracle 11g?'], 5], [(1998627, 2), [['3) Set index default partition tablespace so new index partitions (if any) are created where you want them:'], ['4) rebuild any partitioned indexes that need rebuilding and are not in the desired tablespace:']], [[" procedure setDefNdxPart (a_tname in varchar2, a_destTS in varchar2) is\ncursor iCur(vTname varchar2) is\n  select index_name\n  from user_part_indexes\n  where index_name in (select index_name\n             from user_indexes where table_name = vTname);\nbegin\nfor iRow in iCur(a_tname) loop\n sqlStmnt := 'alter index '||iRow.index_name||\n             ' modify default attributes '||\n             ' tablespace '||a_destTS;\nexecute immediate sqlStmnt;\nend loop;\n\nend setDefNdxPart;\n"]], ['How do you move a partitioned table from one tablespace to another in Oracle 11g?'], 5], [(1998627, 3), [['4) rebuild any partitioned indexes that need rebuilding and are not in the desired tablespace:'], ['5) Rebuild any global indexes']], [[" procedure mvNdxPart (a_tname in varchar2, a_destTS in varchar2) is\ncursor ndxCur(vTname varchar2, vTspName varchar2) is\nselect i.index_name index_name, ip.partition_name partition_name\n  from user_ind_partitions ip, user_indexes i\n  where i.index_name = ip.index_name\n     and i.table_name = vTname\n     and i.partitioned = 'YES'\n     and (ip.tablespace_name not like vTspName or ip.status not like 'USABLE')\n  order by index_name, partition_name ;\nbegin\nfor ndxRow in ndxCur(a_tname, a_destTS) loop\n sqlStmnt := 'alter index '||ndxRow.index_name||\n             ' rebuild partition '||ndxRow.partition_name||\n             ' tablespace '||a_destTS;\nexecute immediate sqlStmnt ;\nend loop;\nend mvNdxPart;\n"]], ['How do you move a partitioned table from one tablespace to another in Oracle 11g?'], 5], [(1998627, 4), [['5) Rebuild any global indexes'], ['-10000']], [[" procedure mvNdx (a_tname in varchar2, a_destTS in varchar2) is\ncursor ndxCur(vTname varchar2, vTspName varchar2) is\n  select index_name\n  from user_indexes\n  where table_name = vTname\n       and partitioned = 'NO'\n       and (tablespace_name not like vTspName or status like 'UNUSABLE')\n  order by index_name ;\nbegin\nfor ndxRow in ndxCur(a_tname, a_destTS) loop\n sqlStmnt := 'alter index '||ndxRow.index_name||\n             ' rebuild tablespace '||a_destTS;\nexecute immediate sqlStmnt ;\nend loop;\nend mvNdx;\n"]], ['How do you move a partitioned table from one tablespace to another in Oracle 11g?'], 5], [(1999494, 0), [['To merge #2705 into your django, you need to download it first:'], ['then rewind svn to the necessary django version:']], [[' cd <django-dir>\nwget http://code.djangoproject.com/attachment/ticket/2705/for_update_11366_cdestigter.diff?format=raw\n']], ['Doing an atomic update of the first instance in a QuerySet'], 4], [(1999494, 1), [['then rewind svn to the necessary django version:'], ['then apply it:']], [[' svn update -r11366\n']], ['Doing an atomic update of the first instance in a QuerySet'], 4], [(1999494, 2), [['then apply it:'], ['To unapply the patch, just write']], [[' patch -p1 for_update_11366_cdestigter.diff\n']], ['Doing an atomic update of the first instance in a QuerySet'], 4], [(1999494, 3), [['To unapply the patch, just write'], ['-10000']], [[' svn revert --recursive . \n']], ['Doing an atomic update of the first instance in a QuerySet'], 4], [(2000908, 0), [['Given this data ...'], ['... the following query gives what you want ...']], [[' SQL> select * from qtys\n  2  /\n\n        ID TS                      QTY\n---------- ---------------- ----------\n         1 2010-01-04 11:00        152\n         2 2010-01-04 11:00        210\n         1 2010-01-04 10:45        132\n         2 2010-01-04 10:45        318\n         4 2010-01-04 10:45        122\n         1 2010-01-04 10:30          1\n         3 2010-01-04 10:30        214\n         2 2010-01-04 10:30       5515\n         4 2010-01-04 10:30        210\n\n9 rows selected.\n\nSQL>\n']], ['Oracle SQL query: Retrieve latest values per group based on time'], 2], [(2000908, 1), [['... the following query gives what you want ...'], ['With regards to your additional requirements, you can apply additional filters to the outer WHERE clause.  Similarly you can join additional tables to the inline view like it was any other table. ']], [[' SQL> select x.id\n  2         , x.ts as "DATE"\n  3         , x.qty as "QUANTITY"\n  4  from (\n  5      select id\n  6             , ts\n  7             , rank () over (partition by id order by ts desc) as rnk\n  8             , qty\n  9      from qtys ) x\n 10  where x.rnk = 1\n 11  /\n\n        ID DATE               QUANTITY\n---------- ---------------- ----------\n         1 2010-01-04 11:00        152\n         2 2010-01-04 11:00        210\n         3 2010-01-04 10:30        214\n         4 2010-01-04 10:45        122\n\nSQL>\n']], ['Oracle SQL query: Retrieve latest values per group based on time'], 2], [(2001799, 0), [['As an actual function you could do:'], ['Which you could test in SQLPlus as:']], [[' create or replace function getSysdate\nreturn date is\n\n  l_sysdate date;\n\nbegin\n\n  select sysdate\n    into l_sysdate\n    from dual;\n\n  return l_sysdate;\n\nend;\n/\n']], ['Create a function to return current date and time in oracle'], 2], [(2001799, 1), [['Which you could test in SQLPlus as:'], ['Not sure why you would want this versus just having  sysdate  in your code.  The Oracle date datatype includes the time portion.']], [[' TEST>select getSysdate() from dual;\n\nGETSYSDATE\n----------\n2010-01-04\n']], ['Create a function to return current date and time in oracle'], 2], [(2002329, 0), [['No, it shouldn\'t "just coerce". Regarding the following:'], ['An obvious solution is to do the conversion yourself:']], [[' sql.eachRow("{call getnodes()}") { \n    nodes.add(it as Node)\n}\n']], ['Coerce result row into object'], 2], [(2002329, 1), [['An obvious solution is to do the conversion yourself:'], ['Alternatively, you could use meta-programming to override the  asType  method of  GroovyRowResult  such that it also handles conversion to Node. ']], [[' sql.eachRow("{call getnodes()}") {GroovyRowResult it ->\n\n    Node node = // TODO: Code to convert it to a Node \n    nodes.add(node)\n}\n']], ['Coerce result row into object'], 2], [(2003572, 0), [["You can either use the  ->quote  method (assuming you're using DBI):"], ['Better still, the best practice is to use bind values:']], [[' my $oldValue = $dbh->quote(\'oldValue\');\nmy $newValue = $dbh->quote(\'newValue\');\n$dbh->do("UPDATE myTable SET myValue=$newValue where myValue=$oldValue");\n']], ['How can I escape single and double quotes in SQL prepared statement?'], 3], [(2003572, 1), [['Better still, the best practice is to use bind values:'], ['This should also work for stored procedure calls, assuming the statement once the strings have been expanded is valid SQL. This may be driver/DB specific so YMMV.']], [[" my $sth = $dbh->prepare('UPDATE myTable SET myValue=? WHERE myValue=?');\n\n$sth->execute('newValue','oldValue');\n"]], ['How can I escape single and double quotes in SQL prepared statement?'], 3], [(2003572, 2), [['This should also work for stored procedure calls, assuming the statement once the strings have been expanded is valid SQL. This may be driver/DB specific so YMMV.'], ['-10000']], [[' my $sth = $dbh->prepare("DBName..ProcName ?,? ");\n$sth->execute($a, $b);\n']], ['How can I escape single and double quotes in SQL prepared statement?'], 3], [(2003639, 0), [['-10000'], ['Re your cryptic comment:  I tried the following script in my test database:']], [[" SELECT t1.Title, t1.Variable\nFROM Table t1\nJOIN Table t2 USING (Title, Variable)\nJOIN Table t3 USING (Title, Variable)\nWHERE (t1.Location, t1.Date) = ('Location1', 'Date1')\n  AND (t2.Location, t2.Date) = ('Location2', 'Date2')\n  AND (t3.Location, t3.Date) = ('Location3', 'Date3');\n"]], ['Translating INTERSECT statement to MySQL'], 3], [(2003639, 1), [['Re your cryptic comment:  I tried the following script in my test database:'], ['The output is this:']], [[" DROP TABLE IF EXISTS MyTable;\nCREATE TABLE MyTable (\n id       SERIAL PRIMARY KEY,\n title    VARCHAR(20) NOT NULL,\n variable VARCHAR(20) NOT NULL,\n location VARCHAR(20) NOT NULL,\n date     DATE NOT NULL\n);\n\nINSERT INTO MyTable VALUES\n (DEFAULT, 'A Tale of Two Cities', 'variable', 'America', '2010-01-01'),\n (DEFAULT, 'A Tale of Two Cities', 'variable', 'England', '2010-02-01'),\n (DEFAULT, 'A Tale of Two Cities', 'variable', 'France',  '2010-03-01');\n\nSELECT t1.Title, t1.Variable\nFROM MyTable t1\nJOIN MyTable t2 USING (Title, Variable)\nJOIN MyTable t3 USING (Title, Variable)\nWHERE (t1.Location, t1.Date) = ('America', '2010-01-01')\n  AND (t2.Location, t2.Date) = ('England', '2010-02-01')\n  AND (t3.Location, t3.Date) = ('France',  '2010-03-01');\n"]], ['Translating INTERSECT statement to MySQL'], 3], [(2003639, 2), [['The output is this:'], ['-10000']], [[' +----------------------+----------+\n| Title                | Variable |\n+----------------------+----------+\n| A Tale of Two Cities | variable |\n+----------------------+----------+\n']], ['Translating INTERSECT statement to MySQL'], 3], [(2004264, 0), [["Here's the code for reference if anyone has a similar issue in the future:"], ['Final Output:']], [[' DECLARE @i INT\nDECLARE @Count INT\nDECLARE @Selection INT\nDECLARE @Result TABLE (ID INT)\n\nSET @i = 1\nSET @Count = (SELECT count(*) FROM CFLAPS_AllStations)\n\nWHILE (@i <= @Count)\nBEGIN\n   IF @i < @Count - 4\n    BEGIN\n        SET @Selection = (SELECT TotalParticlesCount FROM CFLAPS_AllStations WHERE ID = @i)\n        IF  @Selection = (SELECT TotalParticlesCount FROM CFLAPS_AllStations WHERE ID = @i+4)\n        BEGIN   \n            INSERT INTO @Result SELECT ID FROM CFLAPS_AllStations WHERE ID = @i\n        END\n        ELSE\n        BEGIN\n            INSERT INTO @Result SELECT ID FROM CFLAPS_AllStations WHERE ID = @i\n\n            SET @i =  \n            CASE \n                WHEN @Selection = (SELECT TotalParticlesCount FROM CFLAPS_AllStations WHERE ID = @i+3) THEN @i-1\n                WHEN @Selection = (SELECT TotalParticlesCount FROM CFLAPS_AllStations WHERE ID = @i+2) THEN @i-2\n                WHEN @Selection = (SELECT TotalParticlesCount FROM CFLAPS_AllStations WHERE ID = @i+1) THEN @i-3\n                WHEN @Selection = (SELECT TotalParticlesCount FROM CFLAPS_AllStations WHERE ID = @i) THEN @i-4\n            END\n        END\n   END\n   ELSE\n   BEGIN\n      INSERT INTO @Result SELECT ID FROM CFLAPS_AllStations WHERE ID = @i\n   END\n   SET @i = @i+5\nEND\n\nSELECT p.ID, p.TotalParticlesCount, p.FullDateTime FROM CFLAPS_AllStations as p, @Result as q WHERE p.ID = q.ID\n']], ['Removing duplicates in SQL Server - Unusual Scenario'], 2], [(2004264, 1), [['Final Output:'], ['Thank you to all that helped out.']], [[' ID  TotalParticles  DateTime\n1       745     2009-06-23 00:00:00.000\n6       727     2009-06-23 00:00:05.000\n11      771     2009-06-23 00:00:10.000\n16      837     2009-06-23 00:00:15.000\n21      768     2009-06-23 00:00:20.000\n26      703     2009-06-23 00:00:25.000\n31      822     2009-06-23 00:00:30.000\n36      730     2009-06-23 00:00:35.000\n41      731     2009-06-23 00:00:40.000\n46      706     2009-06-23 00:00:45.000\n51      733     2009-06-23 00:00:50.000\n...\n2290089 677     2009-06-22 23:59:15.000\n2290094 720     2009-06-22 23:59:20.000\n2290099 771     2009-06-22 23:59:25.000\n2290104 770     2009-06-22 23:59:30.000\n2290109 761     2009-06-22 23:59:35.000\n2290114 851     2009-06-22 23:59:40.000\n2290119 801     2009-06-22 23:59:45.000\n2290124 754     2009-06-22 23:59:50.000\n2290129 702     2009-06-22 23:59:55.000\n']], ['Removing duplicates in SQL Server - Unusual Scenario'], 2], [(2005180, 0), [['This is an example that is fully functional:'], ['with your input: ']], [[' <?xml version="1.0" encoding="ISO-8859-1"?>\n<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n\n  <xsl:output method="text"/>\n\n  <!-- match the eelement to extract data from -->\n\n  <xsl:template match="/author">\n    <xsl:call-template name="authors">\n      <xsl:with-param name="authors" select="text()"/>\n    </xsl:call-template>\n  </xsl:template>\n\n  <!-- recursively extract individual authors -->\n  <xsl:template name="authors">\n    <xsl:param name="authors"/>\n    <xsl:variable name="author" select="substring-before($authors,\';\')"/>\n    <xsl:choose>\n      <xsl:when test="string-length($author)=0">\n        <xsl:call-template name="author">\n          <xsl:with-param name="author" select="$authors"/>\n        </xsl:call-template>\n      </xsl:when>\n      <xsl:otherwise>\n        <xsl:call-template name="author">\n          <xsl:with-param name="author" select="$author"/>\n        </xsl:call-template>\n        <xsl:call-template name="authors">\n          <xsl:with-param name="authors" select="substring-after($authors,\';\')"/>\n        </xsl:call-template>        \n      </xsl:otherwise>\n    </xsl:choose>\n  </xsl:template>\n\n  <!-- extract firstname, lastname, escape single quote, and generate SQL -->\n  <xsl:template name="author">\n    <xsl:param name="author"/>\n      <xsl:variable name="last-name" select="normalize-space(substring-before($author, \',\'))"/>\n      <xsl:variable name="first-name" select="normalize-space(substring-after($author, \',\'))"/>\n      INSERT INTO author (first_name, last_name) VALUES (\n        \'<xsl:call-template name="replace">\n           <xsl:with-param name="text" select="$first-name"/>\n           <xsl:with-param name="search">&apos;</xsl:with-param>\n           <xsl:with-param name="replace">&apos;&apos;</xsl:with-param>\n         </xsl:call-template>\'\n      ,\n        \'<xsl:call-template name="replace">\n           <xsl:with-param name="text" select="$last-name"/>\n           <xsl:with-param name="search">&apos;</xsl:with-param>\n           <xsl:with-param name="replace">&apos;&apos;</xsl:with-param>\n         </xsl:call-template>\'\n      );\n  </xsl:template>\n\n  <!-- recursive search and replace -->\n  <xsl:template name="replace">\n    <xsl:param name="text"/>\n    <xsl:param name="search"/>\n    <xsl:param name="replace"/>\n    <xsl:value-of select="$text"/>\n    <xsl:variable name="tail">\n      <xsl:if test="contains($text, $search)">\n        <xsl:call-template name="replace">\n          <xsl:with-param name="text" select="substring-after($text, $search)"/>\n          <xsl:with-param name="search" select="$search"/>\n          <xsl:with-param name="replace" select="$replace"/>\n        </xsl:call-template>\n      </xsl:if>\n    </xsl:variable>\n    <xsl:value-of select="concat(substring-before($text, $search), $tail)"/>\n  </xsl:template>\n</xsl:stylesheet>\n']], ['Split XML tags and transform to SQL'], 3], [(2005180, 1), [['with your input: '], ['This gives me this output:']], [[' <?xml version="1.0"?>\n<?xml-stylesheet type="text/xsl" href="author.xslt"?>\n<author>Evans, Jim; Henderson, Mike; Coyier, Alan</author>\n']], ['Split XML tags and transform to SQL'], 3], [(2005180, 2), [['This gives me this output:'], ["If you need to do a lot of XML munging and inserting it into databases, I can recommend using a tool like kettle, aka. pentaho data integration. It has many steps that you can use to process data, and out-of-the-box connectivity for more than 30 databases. It's free, and easy to install. get it here:\n http://sourceforge.net/projects/pentaho/files/Data%20Integration/"]], [[" INSERT INTO author (first_name, last_name) VALUES ( 'Jim' , 'Evans' );\nINSERT INTO author (first_name, last_name) VALUES ( 'Mike' , 'Henderson' );\nINSERT INTO author (first_name, last_name) VALUES ( 'Alan' , 'Coyier' ); \n"]], ['Split XML tags and transform to SQL'], 3], [(2005974, 0), [['The WHERE clause is restricting the results that can be returned:'], ['An example to show what I mean:']], [[" where h.attributT1_1 = k.attributT3_1 \nand s.attributT3_1 = '  260585'\nand h.attributT1_2 = 055\n"]], ['SQL/Oracle Server, Full Outer Join and 3 or more Tables'], 5], [(2005974, 1), [['An example to show what I mean:'], ['A full outer join:']], [[" SQL> create table t1 (id integer, text varchar2(10));\nSQL> create table t2 (id integer, text varchar2(10));\nSQL> insert into t1 values (1, 'text');\nSQL> insert into t1 values (2, 'text');\nSQL> insert into t2 values (2, 'text');\nSQL> insert into t2 values (3, 'text');\nSQL> commit;\n"]], ['SQL/Oracle Server, Full Outer Join and 3 or more Tables'], 5], [(2005974, 2), [['A full outer join:'], ['Now with filters in the WHERE clause (note that 2 records disappear just as if the "full outer" wasn\'t there):']], [[' SQL> select * from t1 full outer join t2 on t1.id = t2.id;\n\n        ID TEXT               ID TEXT\n---------- ---------- ---------- ----------\n         2 text                2 text\n                               3 text\n         1 text\n']], ['SQL/Oracle Server, Full Outer Join and 3 or more Tables'], 5], [(2005974, 3), [['Now with filters in the WHERE clause (note that 2 records disappear just as if the "full outer" wasn\'t there):'], ['Now with the filters moved into the join:']], [["   1* select * from t1 full outer join t2 on t1.id = t2.id\n  2* where t1.text='text'\n  3  and t2.text='text';\n\n        ID TEXT               ID TEXT\n---------- ---------- ---------- ----------\n         2 text                2 text\n"]], ['SQL/Oracle Server, Full Outer Join and 3 or more Tables'], 5], [(2005974, 4), [['Now with the filters moved into the join:'], ['-10000']], [[" SQL> select * from t1 full outer join t2 on t1.id = t2.id\n  2                                      and t1.text='text'\n  3                                      and t2.text='text';\n\n        ID TEXT               ID TEXT\n---------- ---------- ---------- ----------\n         2 text                2 text\n                               3 text\n         1 text             \n"]], ['SQL/Oracle Server, Full Outer Join and 3 or more Tables'], 5], [(2010025, 0), [['If it must be in the set, use this clause:'], ['otherwise:']], [[' AND a.email IN (SELECT c.Email from Members as c where c.MemberID = b.MemberID)\n']], ['How can I do a compare when the second is a sub select that returns multiple values?'], 2], [(2010025, 1), [['otherwise:'], ['-10000']], [[' AND a.email NOT IN (SELECT c.Email from Members as c where c.MemberID = b.MemberID)\n']], ['How can I do a compare when the second is a sub select that returns multiple values?'], 2], [(2013814, 0), [['no sure if it will work for v5 \ntry to set the database option to treat floats as doubles  via sql \nrun the query '], ['if you want it to hold for the current connection only use']], [[" set option FLOAT_AS_DOUBLE = 'ON'\n"]], ['Unexpected rounding when using ISNULL in sybase sql anywhere'], 2], [(2013814, 1), [['if you want it to hold for the current connection only use'], ["you can then try to use your query's first version "]], [[" set TEMPORARY option FLOAT_AS_DOUBLE = 'ON'\n"]], ['Unexpected rounding when using ISNULL in sybase sql anywhere'], 2], [(2014640, 0), [['The easiest might be to just simply create three triggers - one for each operation:'], ['As a sample, you could write a "AFTER INSERT" trigger like this (just guessing what your table structure might be....):']], [[' CREATE TRIGGER trgUserInsert\nON dbo.User AFTER INSERT\nAS BEGIN\n   INSERT INTO dbo.UserHistory............\nEND     \n\nCREATE TRIGGER trgUserDelete\nON dbo.User AFTER DELETE\nAS BEGIN\n   INSERT INTO dbo.UserHistory............\nEND \n\nCREATE TRIGGER trgUserUpdate\nON dbo.User AFTER UPDATE\nAS BEGIN\n   INSERT INTO dbo.UserHistory............\nEND \n']], ['what is the correct syntax for creating a database trigger for insert, modify and delete'], 4], [(2014640, 1), [['As a sample, you could write a "AFTER INSERT" trigger like this (just guessing what your table structure might be....):'], ['You\'re also looking for a "list of fields that were updated" - again, you won\'t have any simple solution, really. You could either just loop through the fields in the "Users" table that are of interest, and check ']], [[" CREATE TRIGGER trgUserInsert\nON dbo.User AFTER INSERT\nAS BEGIN\n   INSERT INTO \n      dbo.UserHistory(UserID, Action, DateTimeStamp, AuditMessage)\n      SELECT \n         i.UserID, 'INSERT', getdate(), 'User inserted into table'\n      FROM\n         Inserted i\nEND     \n"]], ['what is the correct syntax for creating a database trigger for insert, modify and delete'], 4], [(2014640, 2), [['You\'re also looking for a "list of fields that were updated" - again, you won\'t have any simple solution, really. You could either just loop through the fields in the "Users" table that are of interest, and check '], ['If you really want to create a single, big trigger, this could serve as a basis - it detects what operation has caused the trigger to fire, and will insert entries into your User_History table:']], [[' IF UPDATE(fieldname) ......\n']], ['what is the correct syntax for creating a database trigger for insert, modify and delete'], 4], [(2014640, 3), [['If you really want to create a single, big trigger, this could serve as a basis - it detects what operation has caused the trigger to fire, and will insert entries into your User_History table:'], ["I haven't included the figuring out which fields have been updated part just yet - that's left as an exercise to the reader :-)"]], [[" CREATE TRIGGER trgUser_Universal\nON dbo.Users\nAFTER INSERT, UPDATE, DELETE\nAS BEGIN\n  DECLARE @InsHasRows BIT = 0\n  DECLARE @DelHasRows BIT = 0\n\n  IF EXISTS(SELECT TOP 1 * FROM INSERTED)\n    SET @InsHasRows = 1\n\n  IF EXISTS(SELECT TOP 1 * FROM DELETED)\n    SET @DelHasRows = 1\n\n  DECLARE @TriggerAction VARCHAR(20)\n\n  IF @InsHasRows = 1 AND @DelHasRows = 1 \n     SET @TriggerAction = 'UPDATE'\n  ELSE\n     IF @InsHasRows = 1\n        SET @TriggerAction = 'INSERT'\n     ELSE  \n        SET @TriggerAction = 'DELETE'\n\n  IF @InsHasRows = 1\n    INSERT INTO dbo.UsersHistory(user_id, [action], [fields], timestamp)\n      SELECT i.UserId, @TriggerAction, null, getdate()\n      FROM INSERTED i\n  ELSE  \n    INSERT INTO dbo.UsersHistory(user_id, [action], [fields], timestamp)\n      SELECT d.UserId, @TriggerAction, null, getdate()\n      FROM DELETED d\nEND\n"]], ['what is the correct syntax for creating a database trigger for insert, modify and delete'], 4], [(2015207, 0), [['-10000'], ["This will return all the rows that you want, but for the rows that don't exist in  details  it will return  NULL  values, so you would get:"]], [[' SELECT\n  c.CityId\n  c.CityName\n  o.CustId,\n  o.CompletedOrders\n  o.PendingOrders\nFROM cities c\nLEFT JOIN orders o ON ( c.CityId = o.CityId )\n']], ['Joining SQL lookup table with data table'], 2], [(2015207, 1), [["This will return all the rows that you want, but for the rows that don't exist in  details  it will return  NULL  values, so you would get:"], ['The solution to get  0  instead depends on your database. With MySQL use  IFNULL , with Oracle use  NVL .']], [[' CityId CityName      CustId CompletedOrders PendingOrders\n1      New York      123    100             50\n2      San Francisco 123    75              20\n3      Chicago       123    NULL            NULL\n']], ['Joining SQL lookup table with data table'], 2], [(2015878, 0), [['You need to use a subselect to apply the condition:'], ['If you\'re running Access with "SQL 92" compatibility mode turned on, you can do the more standard:']], [['   SELECT *\n  FROM dbo_A LEFT JOIN \n    [SELECT dbo_B.* FROM dbo_B WHERE dbo_B.F_ID = 3]. AS dbo_B \n      ON dbo_A.ID = dbo_B.A_ID;\n']], ['LEFT JOINing on additional criteria in MS Access'], 2], [(2015878, 1), [['If you\'re running Access with "SQL 92" compatibility mode turned on, you can do the more standard:'], ["Do you need this to be editable in Access? If not, just use a passthrough query with the native T-SQL. If so, I would likely create a server-side view for this, and I'd especially want to move it server-side if the literal value is something you would parameterize (i.e., the F_ID=3 is really F_ID=N where N is a value chosen at runtime)."]], [['   SELECT *\n  FROM dbo_A LEFT JOIN \n    (SELECT dbo_B.* FROM dbo_B WHERE dbo_B.F_ID = 3) AS dbo_B \n      ON dbo_A.ID = dbo_B.A_ID;\n']], ['LEFT JOINing on additional criteria in MS Access'], 2], [(2017360, 0), [["If you're using Hibernate, you should be able to do that with HQL, using a  not in  and a subquery ( here's a page of examples ):"], ['Based on  this page , I believe you need to execute this query in a  Main.findAll  method:']], [[' from Main as main where main.id not in (select map.main_id from Map as map)\n']], ['Grails query with associations - find all in a table where id is not in another table'], 2], [(2017360, 1), [['Based on  this page , I believe you need to execute this query in a  Main.findAll  method:'], ['-10000']], [[' def results = Main.findAll("from Main as main where main.id not in (select map.main_id from Map as map)")\n']], ['Grails query with associations - find all in a table where id is not in another table'], 2], [(2019039, 0), [['You need to aggregate the id. If you need only the ID of one of them, for, say, deletion, you could do:'], ["If you want both id's and know there will never be more than 2, you could do the following:"]], [[' select max(id) id, firstname, lastname from t group by firstname, lastname having count(*) > 1\n']], ['SQL duplicates with different primary keys'], 2], [(2019039, 1), [["If you want both id's and know there will never be more than 2, you could do the following:"], ["If you want all duplicates, along with their id's, you'll have to use a derived table, as in Nitin Midha's answer."]], [[' select min(id) minid, max(id) maxid, firstname, lastname from t group by firstname, lastname having count(*) > 1\n']], ['SQL duplicates with different primary keys'], 2], [(2019228, 0), [['if the substring can appear in any position in another address, you can do a join like:'], ['or you can just ignore the stuff after char 5 with a group:']], [[" select a.id, a.addr, b.id as b_id, b.addr as b_addr from t a, t b where\n    b.addr like concat('%', substr(a.addr, 0, 5), '%') and\n    b.id <> a.id;\n"]], ['SQL group by LIKE pattern'], 3], [(2019228, 1), [['or you can just ignore the stuff after char 5 with a group:'], ['you might want to use a tool to normalize postal addresses, such as:']], [[' select firstname, substr(addr, 0, 5) from t group by firstname,\n  substr(addr, 0, 5);\n']], ['SQL group by LIKE pattern'], 3], [(2019228, 2), [['you might want to use a tool to normalize postal addresses, such as:'], ['(free up to 2500 records)']], [[' https://webgis.usc.edu/Services/AddressNormalization/Default.aspx\n']], ['SQL group by LIKE pattern'], 3], [(2020189, 0), [['I just found this Oracle example on Wikipedia that looks like a SELECT in the left-hand side of an update:'], ['Whereas most databases need the query to be written as:']], [[' UPDATE (\nSELECT *\n  FROM articles  \n  JOIN classification c \n    ON a.articleID = c.articleID \n) AS a\nSET a.[updated_column] = updatevalue\nWHERE c.classID = 1\n']], ['What is “E153 Updatable queries with subqueries” in the SQL standard?'], 3], [(2020189, 1), [['Whereas most databases need the query to be written as:'], ['Which means I can run the above, as well as:']], [[' UPDATE a\nSET a.[updated_column] = updatevalue\nFROM articles a \nJOIN classification c \nON a.articleID = c.articleID \nWHERE c.classID = 1\n']], ['What is “E153 Updatable queries with subqueries” in the SQL standard?'], 3], [(2020189, 2), [['Which means I can run the above, as well as:'], ["There are some more rules to determine what query expressions are updatable, contained in sql99-foundation 7.11 and 7.12; they are rather involved. PostgreSQL doesn't let query expressions that aren't table names be updatable. There is some work being done on updatable views. I'm not sure how useful the feature is outside of views, but the standard is definitely interesting, and weirder than expected."]], [[' DELETE FROM (SELECT * FROM t1 JOIN t2 WHERE t1c1 = t2c3);\n']], ['What is “E153 Updatable queries with subqueries” in the SQL standard?'], 3], [(2020231, 0), [['I was able to check this using the following SQL:'], ['Increasing PCT_FREE like this solved the performance issue for me:']], [[" select chain_cnt \nfrom user_tables \nwhere table_name='SV_KONGINFO';\n"]], ['Slow Update after Truncate'], 2], [(2020231, 1), [['Increasing PCT_FREE like this solved the performance issue for me:'], ['Thanks again for the input, they helped to rule out some potential issues until finally chained rows rose to the top of my mind.']], [[' alter table sv_konginfo pctfree 40;\n']], ['Slow Update after Truncate'], 2], [(2021968, 0), [["Did you index the columns you were actually selecting on? If you don't have a covering index on the indexed view for your query, then you will definitely find a table is quicker. If you do, though, there should be no real difference. Example:"], ['So far so good. Now, we try to select from this view as follows:']], [[" CREATE VIEW dbo.denormalized\nWITH SCHEMABINDING\nAS\n    SELECT  A.id,\n            A.col1,\n            A.col2,\n            ISNULL(B.col3, '') col3\n    FROM    dbo.A LEFT JOIN dbo.B ON A.Bid = B.id\nGO\n\nCREATE UNIQUE CLUSTERED INDEX UIX_denormlaized\nON dbo.denormalized (id)\n"]], ['Better for SQL Query performance to use an actual denormalized table with indexes rather than an indexed view?'], 3], [(2021968, 1), [['So far so good. Now, we try to select from this view as follows:'], ['The only persisted data for this view is the index on the ID column - the remainder has to be workout out on the fly. So the ISNULL is calculated again for each row. However if we add this index:']], [[' SELECT id, col3 FROM denormalized\n']], ['Better for SQL Query performance to use an actual denormalized table with indexes rather than an indexed view?'], 3], [(2021968, 2), [['The only persisted data for this view is the index on the ID column - the remainder has to be workout out on the fly. So the ISNULL is calculated again for each row. However if we add this index:'], ['then the same query is served entirely from the persisted index - much quicker, in fact equivalent performance to selecting from a table.']], [[' CREATE INDEX IX_denormalized\nON dbo.denormalized (id, col3)\n']], ['Better for SQL Query performance to use an actual denormalized table with indexes rather than an indexed view?'], 3], [(2022998, 0), [["I'll go ahead and answer my own question, while pursuing  IBM's UniVerse SQL Administration for DBAs  I came across code for  CREATE TABLE  on pg 55."], ['Later on page 5-19, I saw this']], [[" ACT_NO INTEGER FORMAT '5R' PRIMARY KEY\nBADGE_NO INTEGER FORMAT '5R' PRIMARY KEY\nANIMAL_ID INTEGER FORMAT '5L' PRIMARY KEY\n"]], ['Multi-valued Database (UniVerse) -- SM (MV) vs SM (VS) and ASSOC()'], 3], [(2022998, 1), [['Later on page 5-19, I saw this'], ['Which leads me to believe that tacking on  ASSOC (VAC_ASSOC)  to a column would be the same... like this']], [[' ALTER TABLE LIVESTOCK.T ADD ASSOC VAC_ASSOC (\n    VAC_TYPE KEY, VAC_DATE, VAC_NEXT, VAC_CERT\n);\n']], ['Multi-valued Database (UniVerse) -- SM (MV) vs SM (VS) and ASSOC()'], 3], [(2022998, 2), [['Which leads me to believe that tacking on  ASSOC (VAC_ASSOC)  to a column would be the same... like this'], ["Anyway, I'm not 100% sure I'm right, but I'm guessing the order doesn't matter, and that rather than these being an intransitive association they're just a order-insensitive grouping."]], [[' CREATE TABLE LIVESTOCK.T (\n    VAC_TYPE ... ASSOC ("VAC_ASSOC")\n    VAC_DATE ... ASSOC ("VAC_ASSOC")\n    VAC_NEXT ... ASSOC ("VAC_ASSOC")\n    VAC_cERT ... ASSOC ("VAC_ASSOC")\n);\n']], ['Multi-valued Database (UniVerse) -- SM (MV) vs SM (VS) and ASSOC()'], 3], [(2023374, 0), [["Since you're planning on using a relational database management system, I'd store this data in a set of normalized tables.  A first stab comes up with (this is all based on SQL Server 2005, and sorry, ):"], ['It could be efficient to move LineOfBusiness to a lookup table:']], [[' CREATE TABLE MyData\n (\n   LineOfBusiness  varchar(50)  not null\n  ,Year            smallint     not null\n  ,Element         varchar(50)  not null\n  ,Value           float        not null\n  ,constraint PK_MyData\n    primary key (LineOfBusiness, Year, Element)\n )\n']], ['Database model for semi-structured Data'], 4], [(2023374, 1), [['It could be efficient to move LineOfBusiness to a lookup table:'], ['If "elements" can be repeated between lines of business, it definitely is more efficient\nto move it to a lookup table:']], [[' CREATE TABLE LineOfBusiness\n (\n   LineOfBusinessId  int          not null\n    constraint PK_LineOfBusiness\n     primary key\n  ,Description       varchar(50)  not null\n )\n']], ['Database model for semi-structured Data'], 4], [(2023374, 2), [['If "elements" can be repeated between lines of business, it definitely is more efficient\nto move it to a lookup table:'], ["Based on the above two tables and working in relational integrity, you'd end up with"]], [[' CREATE TABLE Element\n (\n   ElementId    int          not null\n    constraint PK_Element\n     primary key\n  ,Description  varchar(50)  not null\n )\n']], ['Database model for semi-structured Data'], 4], [(2023374, 3), [["Based on the above two tables and working in relational integrity, you'd end up with"], ['This leaves many questions open regarding how to load data and ensure/preserver\nvalidity, and of course queries (and probably pivot queries) will need to be \nwritten, but you can spin wheels and get nowhere if your initial storage designs are\ninadequate.']], [[' CREATE TABLE MyData\n (\n   LineOfBusinessId  int       not null\n    constraint FK_MyData__LineOfBusiness\n      foreign key references LineOfBusiness (LineOfBusinessId)\n  ,Year              smallint  not null\n  ,ElementId         int       not null\n    constraint FK_MyData__Element\n      foreign key references Element (ElementId)\n  ,Value             float     not null\n  ,constraint PK_MyData\n    primary key (LineOfBusinessId, Year, ElementId)\n )\n']], ['Database model for semi-structured Data'], 4], [(2023866, 0), [['Example query to convert a datetime to another timezone:'], ['Using these functions ensure that the math is correct. After that you can of course format it the way you want to, for example: ']], [[' SELECT FROM_TZ(\n         CAST(TO_DATE(\'1999-12-01 11:00:00\',\'YYYY-MM-DD HH:MI:SS\') AS TIMESTAMP)\n       , \'America/New_York\'\n       )\n       AT TIME ZONE \'America/Los_Angeles\' "West Coast Time"\nFROM DUAL;\n']], ['Oracle TO_DATE not keeping format'], 2], [(2023866, 1), [['Using these functions ensure that the math is correct. After that you can of course format it the way you want to, for example: '], ['...but like I pointed out in the first answer, the result here will be a CHAR, not a date.']], [[' SELECT TO_CHAR(\n         FROM_TZ(\n           CAST(TO_DATE(\'1999-12-01 11:00:00\',\'YYYY-MM-DD HH:MI:SS\') AS TIMESTAMP)\n         , \'America/New_York\'\n         )\n         AT TIME ZONE \'America/Los_Angeles\' \n       , \'MON DD, YYYY\') "West Coast Time"\nFROM DUAL;\n']], ['Oracle TO_DATE not keeping format'], 2], [(2027521, 0), [['-10000'], ['-10000']], [[' select t1.post_id, t1.meta_value as lat, t2.meta_value as lon\nfrom metatdatatable t1, metadatatable t2\nwhere t1.meta_key = "_wp_field1"\nand t2.post_id = t1.post_id\nand t2.meta_key = "_wp_field2"\n']], ['mysql join table on itself'], 3], [(2027521, 1), [['-10000'], ['If you use a temp table it will be user session specific.']], [[' select d1.post_id, d1.distance\nfrom\n(select r1.post_id, ABS($lat - r1.lat) + ABS($lon - r1.lon) as DISTANCE\nfrom (select t1.post_id, t1.meta_value as lat, t2.meta_value as lon\n    from metatdatatable t1, metadatatable t2\n    where t1.meta_key = "_wp_field1"\n    and t2.post_id = t1.post_id\n    and t2.meta_key = "_wp_field2") as r1\n) as d1\nwhere d1.distance <= 10\norder by d1.distance ASC\n']], ['mysql join table on itself'], 3], [(2027521, 2), [['If you use a temp table it will be user session specific.'], ["NB. If your data spans the Greenwich Meridian, International Date Line or Equator, this will not be strictly correct. Assuming all of your lat/longs are for North America it won't be a problem."]], [[' (select t1.post_id, t1.meta_value as lat, t2.meta_value as lon\n        from metatdatatable t1, metadatatable t2\n        where t1.meta_key = "_wp_field1"\n        and t2.post_id = t1.post_id\n        and t2.meta_key = "_wp_field2"\n        and ABS(t2.meta_value - $lon) < 0.117\n        and ABS(t1.meta_value - $lat) < 0.117\n) as r1  \n']], ['mysql join table on itself'], 3], [(2027807, 0), [['As for the syntax, well here are the basics:'], ['A quick test to see that it works ...']], [[' SQL> create materialized view log on emp\n  2  with rowid, primary key, sequence (deptno, job)\n  3  including new values\n  4  /\n\nMaterialized view log created.\n\nSQL> create materialized view emp_mv\n  2  refresh fast on commit\n  3  as\n  4  select deptno, job from emp\n  5  group by deptno, job\n  6  /\n\nMaterialized view created.\n\nSQL>\n']], ['Update materialized view when urderlying tables change'], 3], [(2027807, 1), [['A quick test to see that it works ...'], ['How about a new record?']], [[' SQL> select * from emp_mv\n  2  order by deptno, job\n  3  /\n\n    DEPTNO JOB\n---------- ---------\n        10 MANAGER\n        10 PRESIDENT\n        10 SALES\n        20 ANALYST\n        20 CLERK\n        20 MANAGER\n        30 CLERK\n        30 MANAGER\n        30 SALESMAN\n        40 CLERK\n        40 DOGSBODY\n\n11 rows selected.\n\nSQL>\n']], ['Update materialized view when urderlying tables change'], 3], [(2027807, 2), [['How about a new record?'], ["You can find more details on the syntax in  the SQL Reference .  It's also worth reading the  Materialized View chapter in the Data Warehousing Guide ."]], [[" SQL> insert into emp (empno, ename, deptno, job)\n  2  values (6666, 'GADGET', 40, 'INSPECTOR')\n  3  /\n\n1 row created.\n\nSQL> commit\n  2  /\n\nCommit complete.\n\nSQL> select * from emp_mv\n  2  order by deptno, job\n  3  /\n\n    DEPTNO JOB\n---------- ---------\n        10 MANAGER\n        10 PRESIDENT\n        10 SALES\n        20 ANALYST\n        20 CLERK\n        20 MANAGER\n        30 CLERK\n        30 MANAGER\n        30 SALESMAN\n        40 CLERK\n        40 DOGSBODY\n\n12 rows selected.\n\nSQL>\n"]], ['Update materialized view when urderlying tables change'], 3], [(2029277, 0), [['In this particular case, a sequence is the right solution as mentioned. But if in some future situation you need to both update something and return a value in the same statement, you can use the  RETURNING  clause:'], ['Edit: Since you mentioned Perl, something like this ought to work (untested):']], [[' UPDATE atable SET foo = do_something_with(foo) RETURNING foo INTO ?\n']], ['Oracle SQL: How to read-and-increment a field'], 2], [(2029277, 1), [['Edit: Since you mentioned Perl, something like this ought to work (untested):'], ['See  DBI .']], [[" my $sth = $dbh->prepare('UPDATE mytable SET idnext = idnext + 1 returning idnext into ?');\nmy $idnext;\n$sth->bind_param_inout(1, \\$idnext, 8);\n$sth->execute; # now $idnext should contain the value\n"]], ['Oracle SQL: How to read-and-increment a field'], 2], [(2030035, 0), [['Okay, so for the stores, you same to have a valid primary key already - the StoreNumber. So you "Store" table will be something like'], ['Then you have another table Franchisee which will hold the franchisees and their info - primary key will be the FranchiseeID']], [[' Store     StoreNumber INTEGER   PRIMARY KEY\n          StoreName   STRING \n          ......\n']], ['Defining tables/Primary Keys'], 3], [(2030035, 1), [['Then you have another table Franchisee which will hold the franchisees and their info - primary key will be the FranchiseeID'], ['To join those two, since you can have more than a single owner, you need a StoreOwner table, something like this:']], [[' Franchisee  FranchiseeID    INTEGER  PRIMARY KEY\n            FranchiseeName  STRING\n            (other fields)\n']], ['Defining tables/Primary Keys'], 3], [(2030035, 2), [['To join those two, since you can have more than a single owner, you need a StoreOwner table, something like this:'], ['The combination of both fields  (StoreNumber, FranchiseeID)  will be your primary key in StoreOwner.']], [[' StoreOwner    StoreNumber    INTEGER  FOREIGN KEY to "Store"\n              FranchiseeID   INTEGER  FOREIGN KEY to "Franchisee"\n']], ['Defining tables/Primary Keys'], 3], [(2030610, 0), [['-10000'], ['yes - you can actually login now with this command line:']], [["  mysql> create user test identified by '/`~>:}{[]^';\n Query OK, 0 rows affected (0.13 sec)\n"]], ['password limitations in SQL Server and MySql'], 2], [(2030610, 1), [['yes - you can actually login now with this command line:'], ["I tried entering the password directly after -p, but that didn't work for windows - it thinks i want to invoke  more  if I do that. but I am 100% sure that's on the windows shell. MySQL itself feels this is a valid password."]], [['  C:\\Documents and Settings\\rbouman2>mysql -utest -h127.0.0.1 -P3351 -p\n Enter password: **********\n']], ['password limitations in SQL Server and MySql'], 2], [(2033756, 0), [['The precision returned needs to be consistent, so the only alternative is to use  DECODE  or  CASE  statements to conditionally return what you need:'], ['EDIT Michael-O (2013-06-25): For those who need it idiot-proof, you may try:']], [[" CASE \n  WHEN INSTR(TO_CHAR(t.col), '.') = 0 THEN TO_CHAR(t.col)\n  ELSE TO_CHAR(t.col, 'FM0.099')\nEND\n"]], ['Decimal number, to_char, and Oracle'], 2], [(2033756, 1), [['EDIT Michael-O (2013-06-25): For those who need it idiot-proof, you may try:'], ['It automatically observes the decimal separator. Adapt the the secodn format modal to your number size.']], [[" case\n  when instr(to_char(<col>), (select to_char(0, 'FMD') from dual))  = 0\n    then to_char(<col>) \n  else to_char(<col>, 'FM999990D999')\nend\n"]], ['Decimal number, to_char, and Oracle'], 2], [(2035312, 0), [["Instead, you'll have to make a query similar to this:"], ['If you have multiple points in a table and want to find the closest point for each of them:']], [[" DECLARE @mypoint GEOGRAPHY\nSET @mypoint = geography::STGeomFromText('POINT(@mylat, @mylon)', 4326);\n\nWITH    num (distance) AS\n        (\n        SELECT  1000\n        UNION ALL\n        SELECT  distance + 1000\n        FROM    num\n        WHERE   distance <= 50000\n        )\nSELECT  TOP 1 m.*\nFROM    num\nCROSS APPLY\n        (\n        SELECT  TOP 1 *\n        FROM    mytable\n        WHERE   myroad.STDistance(@mypoint) <= distance\n        ORDER BY\n                STDistance(@mypoint)\n        ) m\n"]], ['SQL Server Geography datatype nearest point on line'], 2], [(2035312, 1), [['If you have multiple points in a table and want to find the closest point for each of them:'], ['-10000']], [[' WITH    num (distance) AS\n        (\n        SELECT  1000\n        UNION ALL\n        SELECT  distance + 1000\n        FROM    num\n        WHERE   distance <= 50000\n        )\nSELECT  mp.mypoint, m.*\nFROM    @mypoints mp\nCROSS APPLY\n        (\n        SELECT  TOP 1 m.*\n        FROM    num\n        CROSS APPLY\n                (\n                SELECT  TOP 1 *\n                FROM    mytable\n                WHERE   myroad.STDistance(@mypoint) <= distance\n                ORDER BY\n                        STDistance(@mypoint)\n                ) m\n        ) m\n']], ['SQL Server Geography datatype nearest point on line'], 2], [(2035670, 0), [['Another solution is to precreate 100 rows and instead of  INSERT  use  UPDATE  to update the oldest row. \nAssuming that the table has a  datetime  field, the query'], ['Edit:  display the last 100  entries']], [[' UPDATE ...\nWHERE datetime = (SELECT min(datetime) FROM logtable)\n']], ["Limit an sqlite Table's Maximum Number of Rows"], 3], [(2035670, 1), [['Edit:  display the last 100  entries'], ['Update : here is a way to create 130 "dummy" rows by using join operation:']], [[' SELECT * FROM logtable\nORDER BY datetime DESC\nLIMIT 100\n']], ["Limit an sqlite Table's Maximum Number of Rows"], 3], [(2035670, 2), [['Update : here is a way to create 130 "dummy" rows by using join operation:'], ['-10000']], [[" CREATE TABLE logtable (time TIMESTAMP, msg TEXT);\nINSERT INTO logtable DEFAULT VALUES;\nINSERT INTO logtable DEFAULT VALUES;\n-- insert 2^7 = 128 rows\nINSERT INTO logtable SELECT NULL, NULL FROM logtable, logtable, logtable,\n   logtable, logtable, logtable, logtable;\nUPDATE logtable SET time = DATETIME('now'); \n"]], ["Limit an sqlite Table's Maximum Number of Rows"], 3], [(2036425, 0), [['Assuming  created_date  is unique per  album_id  and ( album_id , created_date ) is unique for all rows in  images , then this:'], ['By doing this:']], [[' select     i1.*, count(*) as position\nfrom       images i1\ninner join images i2\non         i1.album_id      = i2.album_id     -- get all other pics in this album\nand        i1.created_date >= i2.created_date -- in case they were created before this pic\nwhere      i1.album_id = 5\ngroup by   i1.created_date\n']], ['little complex sql row postion'], 4], [(2036425, 1), [['By doing this:'], ['By doing this:']], [[' select     i1.*, count(*) as position\nfrom       images i1\ninner join images i2\non         i1.album_id      = i2.album_id     -- get all other pics in this album\nand        i1.created_date >= i2.created_date -- in case they were created before this pic\nwhere      i1.album_id = 5\ngroup by   i1.created_date\nhaving     count(*) = 4\n']], ['little complex sql row postion'], 4], [(2036425, 2), [['By doing this:'], ['Of course, if you just want one particular image, you can simply do:']], [[' select     i1.*, count(*) as position\nfrom       images i1\ninner join images i2\non         i1.album_id      = i2.album_id     -- get all other pics in this album\nand        i1.created_date >= i2.created_date -- in case they were created before this pic\nwhere      i1.album_id = 5\ngroup by   i1.created_date\nhaving     count(*) between 1 and 10\n']], ['little complex sql row postion'], 4], [(2036425, 3), [['Of course, if you just want one particular image, you can simply do:'], ["This will correctly report the position of the image within the album (of course, assuming that image_id is unique with in the images table). You don't need the having clause in that case since you already pinpointed the image you want."]], [[" select     i1.*, count(*) as position\nfrom       images i1\ninner join images i2\non         i1.album_id      = i2.album_id     -- get all other pics in this album\nand        i1.created_date >= i2.created_date -- in case they were created before this pic\nwhere      i1.image_id = 's1234' \ngroup by   i1.created_date\n"]], ['little complex sql row postion'], 4], [(2038866, 0), [['Use:'], ['Use of  TO_DATE  constructs a date with a time portion of 00:00:00, which requires the end date to be one day ahead unless you want to use logic to correct the current date to be one second before midnight.  Untested:']], [[" SELECT *\n  FROM x\n WHERE x.wedding BETWEEN TO_DATE('2008-JUN-01', 'YYYY-MON-DD') \n                            AND TO_DATE('2008-JUL-01', 'YYYY-MON-DD')\n"]], ['oracle date range'], 2], [(2038866, 1), [['Use of  TO_DATE  constructs a date with a time portion of 00:00:00, which requires the end date to be one day ahead unless you want to use logic to correct the current date to be one second before midnight.  Untested:'], ['That should add one day to 30-Jun-2008, and then subtract one second in order to return a final date of  30-Jun-2008 23:59 .']], [[" TO_DATE('2008-JUN-30', 'YYYY-MON-DD') + 1 - (1/(24*60*60))\n"]], ['oracle date range'], 2], [(2042675, 0), [['-10000'], ['To check for the fixed date holidays, create a table with two separate columns containing the month and the date:']], [[" SELECT  *\nFROM    StoreClosedDates\nWHERE   NOT (DATEDIFF(day, GETDATE(), '2007/01/01') % 7 = 5 AND ClosedOnSaturday = 1)\n        AND NOT (DATEDIFF(day, GETDATE(), '2007/01/01') % 7 = 6 AND ClosedOnSunday = 1)\n"]], ['Need help with SQL to calculate if store is open or not'], 3], [(2042675, 1), [['To check for the fixed date holidays, create a table with two separate columns containing the month and the date:'], ['and use it in a query:']], [[" CREATE TABLE holiday (\n        hmon TINYINT, hday TINYINT,\n        PRIMARY KEY (hmon, hday),\n        CHECK(CAST('2008-' + CAST(hday AS VARCHAR) + '-' + CAST(hmon AS VARCHAR) AS DATETIME) > 0)\n        )\n"]], ['Need help with SQL to calculate if store is open or not'], 3], [(2042675, 2), [['and use it in a query:'], ['-10000']], [[" SELECT  *\nFROM    Stores\nWHERE   id NOT IN\n        (\n        SELECT  StoreID\n        FROM    StoreClosedDates\n        WHERE   NOT (DATEDIFF(day, GETDATE(), '2007/01/01') % 7 = 5 AND ClosedOnSaturday = 1)\n                AND NOT (DATEDIFF(day, GETDATE(), '2007/01/01') % 7 = 6 AND ClosedOnSunday = 1)\n        )\n        AND NOT EXISTS\n        (\n        SELECT  NULL\n        FROM    Holidays\n        WHERE   hday = DAY(GETDATE())\n                AND hmon = MONTH(GETDATE())\n        )\n"]], ['Need help with SQL to calculate if store is open or not'], 3], [(2043129, 0), [['-10000'], ['To select words ending on  -est , use this:']], [[" select 1 from dual where regexp_like('best','^[*est]');\n"]], ['Query on Regular Expressions in Oracle'], 2], [(2043129, 1), [['To select words ending on  -est , use this:'], ['which means "the string  est  followed by the end of string ( $ )"']], [[" select 1 from dual where regexp_like('nest','est$')\n"]], ['Query on Regular Expressions in Oracle'], 2], [(2043259, 0), [['-10000'], ['In  SQL Server 2005  and above, you could just replace  INNER JOIN  with  CROSS APPLY :']], [[' SELECT   Orders.OrderNumber, LineItems.Quantity, LineItems.Description\nFROM     Orders\nJOIN     LineItems\nON       LineItems.LineItemGUID =\n         (\n         SELECT  TOP 1 LineItemGUID \n         FROM    LineItems\n         WHERE   OrderID = Orders.OrderID\n         )\n']], ['SQL Server: How to Join to first row'], 2], [(2043259, 1), [['In  SQL Server 2005  and above, you could just replace  INNER JOIN  with  CROSS APPLY :'], ['-10000']], [[' SELECT  Orders.OrderNumber, LineItems2.Quantity, LineItems2.Description\nFROM    Orders\nCROSS APPLY\n        (\n        SELECT  TOP 1 LineItems.Quantity, LineItems.Description\n        FROM    LineItems\n        WHERE   LineItems.OrderID = Orders.OrderID\n        ) LineItems2\n']], ['SQL Server: How to Join to first row'], 2], [(2043281, 0), [["Here's one that works and is not ugly:"], ['Will give you the following output from your example:']], [[' ;WITH Time_CTE AS\n(\n    SELECT\n        MIN(_Timestamp) AS dt,\n        ROW_NUMBER() OVER (ORDER BY MIN(_Timestamp)) AS RowNum\n    FROM Table1\n    GROUP BY _Timestamp\n)\nSELECT\n    t1.dt AS StartDate,\n    t2.dt AS EndDate,\n    DATEDIFF(MS, t1.dt, t2.dt) AS Elapsed\nFROM Time_CTE t1\nINNER JOIN Time_CTE t2\nON t2.RowNum = t1.RowNum + 1\n']], ['Datediff between non-consecutive rows in a table'], 3], [(2043281, 1), [['Will give you the following output from your example:'], ['Edit2: And if you want the average, then change that final  SELECT t1.dt, ...  statement to:']], [[' StartDate               | EndDate                 | Elapsed\n------------------------+-------------------------+--------\n2009-12-20 11:59:56.000 | 2009-12-20 11:59:56.300 | 300\n2009-12-20 11:59:56.300 | 2009-12-20 11:59:56.400 | 100\n2009-12-20 11:59:56.400 | 2009-12-20 11:59:56.500 | 100\n2009-12-20 11:59:56.500 | 2009-12-20 11:59:56.900 | 400\n']], ['Datediff between non-consecutive rows in a table'], 3], [(2043281, 2), [['Edit2: And if you want the average, then change that final  SELECT t1.dt, ...  statement to:'], ['-10000']], [[' SELECT AVG(DATEDIFF(MS, t1.dt, t2.dt))\nFROM Time_CTE t1 ... (same as above)\n']], ['Datediff between non-consecutive rows in a table'], 3], [(2043845, 0), [['Not sure if Access supports it, but in most engines (including  SQL Server ) this is called a correlated subquery and works fine:'], ['This can be made more efficient by indexing  Type  and  Bread  and distributing the subqueries over the  UNION :']], [[" SELECT  TypesAndBread.Type, TypesAndBread.TBName,\n        (\n        SELECT  Count(Sandwiches.[SandwichID]) As SandwichCount\n        FROM    Sandwiches\n        WHERE   (Type = 'Sandwich Type' AND Sandwiches.Type = TypesAndBread.TBName)\n                OR (Type = 'Bread' AND Sandwiches.Bread = TypesAndBread.TBName)\n        ) As SandwichCount\nFROM    TypesAndBread\n"]], ['A select query selecting a select statement'], 2], [(2043845, 1), [['This can be made more efficient by indexing  Type  and  Bread  and distributing the subqueries over the  UNION :'], ['-10000']], [[' SELECT  [Sandwiches Types].[Sandwich Type] As TBName, "Sandwich Type" As Type,\n        (\n        SELECT  COUNT(*) As SandwichCount\n        FROM    Sandwiches\n        WHERE   Sandwiches.Type = [Sandwiches Types].[Sandwich Type]\n        )\nFROM    [Sandwiches Types]\nUNION ALL\nSELECT  [Breads].[Bread] As TBName, "Bread" As Type,\n        (\n        SELECT  COUNT(*) As SandwichCount\n        FROM    Sandwiches\n        WHERE   Sandwiches.Bread = [Breads].[Bread]\n        )\nFROM    [Breads]\n']], ['A select query selecting a select statement'], 2], [(2044644, 0), [["You shouldn't start with local time. Start directly with UTC time:"], ['Frankfurt is one hour ahead of UTC (UTC + 1)  when summer time is not in effect  so you  add  one hour:']], [[' DECLARE  @UTCDate DATETIME \nSET @UTCDate = GETUTCDATE();\n']], ['sql timezone calculation'], 2], [(2044644, 1), [['Frankfurt is one hour ahead of UTC (UTC + 1)  when summer time is not in effect  so you  add  one hour:'], ['Remember that time zones are not on 60 minutes intervals, Mumbai is UTC + 5:30 and Nepal is UTC + 5:45. You must also account for daylight savings, and those change regularly. Argentine for instance opts to use the daylight on a year-by-year basis based on the ammount of water stored in its hydro power plants.']], [[' print DATEADD(HOUR, 1, @UTCDate);\n']], ['sql timezone calculation'], 2], [(2044752, 0), [["To expand on Arthur Thomas's solution here's a  union  without the WHERE in the subselects so that you can create a universal view:"], ['Then, you can perform a query like:']], [[' SELECT A.Name as Animal, B.Name as Zoo FROM A, AtoB, B\n    WHERE AtoB.A_ID = A.ID && B.ID = AtoB.B_ID \nUNION\nSELECT C.Name as Animal, B.Name as Zoo FROM C, CtoB, B\n    WHERE CtoB.C_ID = C.ID && B.ID = CtoB.B_ID\n']], ['SQL mapping between multiple tables'], 2], [(2044752, 1), [['Then, you can perform a query like:'], ['-10000']], [[' SELECT Animal FROM zoo_animals WHERE Zoo="Seattle Zoo"\n']], ['SQL mapping between multiple tables'], 2], [(2045015, 0), [['Something like this will do:'], ['Edit:  Code for the index:']], [[" create table dates (id integer primary key);\ninsert into dates default values;\ninsert into dates default values;\ninsert into dates select null from dates d1, dates d2, dates d3 , dates d4;\ninsert into dates select null from dates d1, dates d2, dates d3 , dates d4;\nalter table dates add date datetime;\nupdate dates set date=date('2000-01-01',(-1+id)||' day');\n"]], ['SQLite query to join on a range of dates?'], 2], [(2045015, 1), [['Edit:  Code for the index:'], ['-10000']], [[' create unique index ux_dates_date on dates (date);\n']], ['SQLite query to join on a range of dates?'], 2], [(2045053, 0), [['-10000'], ['If the start and end dates come as strings, use  STR_TO_DATE  to convert from any given format:']], [[' SELECT timestamp\nFROM   tablename\nWHERE  timestamp >= userStartDate\n       AND timestamp < userEndDate + INTERVAL 1 DAY\n']], ['MYSQL - Retrieve Timestamps between dates'], 2], [(2045053, 1), [['If the start and end dates come as strings, use  STR_TO_DATE  to convert from any given format:'], ['-10000']], [[" SELECT timestamp\nFROM   tablename\nWHERE  timestamp >= STR_TO_DATE('01/11/2010', '%m/%d/%Y')\n       AND timestamp < STR_TO_DATE('01/12/2010', '%m/%d/%Y') + INTERVAL 1 DAY\n"]], ['MYSQL - Retrieve Timestamps between dates'], 2], [(2045075, 0), [['here, something like this on SQL 2005/2008:'], ['or perhaps just:']], [[' ;WITH \n  Counts AS (\n    SELECT ClassName, Grade, COUNT(*) AS GradeFreq \n    FROM Scores\n    GROUP BY ClassName, Grade\n    )\n, Ranked AS (\n    SELECT ClassName, Grade, GradeFreq\n    , Ranking = DENSE_RANK() OVER (PARTITION BY ClassName ORDER BY GradeFreq DESC)\n    FROM Counts\n    )\nSELECT * FROM Ranked WHERE Ranking = 1\n']], ['SQL Server mode SQL'], 2], [(2045075, 1), [['or perhaps just:'], ['-10000']], [[' ;WITH Ranked AS (\n  SELECT \n    ClassName, Grade\n  , GradeFreq = COUNT(*)\n  , Ranking = DENSE_RANK() OVER (PARTITION BY ClassName ORDER BY COUNT(*) DESC)\n  FROM Scores\n  GROUP BY ClassName, Grade\n  )\nSELECT * FROM Ranked WHERE Ranking = 1\n']], ['SQL Server mode SQL'], 2], [(2045617, 0), [['In other words, '], ['and']], [[" SELECT * FROM FACT WHERE \nBUSINESS_UNIT LIKE '%'\n"]], ['Would you send this simple SQL back for rework?'], 2], [(2045617, 1), [['and'], ["generated the exact same query plan.  So there shouldn't be a performance difference (depending on your DB engine I guess), although it does look kind of sloppy.  "]], [[' SELECT * FROM FACT\n']], ['Would you send this simple SQL back for rework?'], 2], [(2047743, 0), [['I assume that the id occurs only once in  your tables  table a, but could be missing in both. If it always exists in table  a , you can use a  LEFT JOIN  instead of the  UNION .'], ['If you have all users in table a, then use']], [[' SELECT COALESCE(SUM(marks), 0)\nFROM\n(\n  SELECT marks FROM a WHERE id = 45\n  UNION ALL\n  SELECT SUM(evaluation_marks) AS marks FROM b WHERE id = 45\n) x\n']], ['Database Query Help required in MySQL'], 3], [(2047743, 1), [['If you have all users in table a, then use'], ["You should consider changing your table model though. Why do you store name and id twice? Can't you do it like that:"]], [[' SELECT a.marks + COALESCE( SUM( b.evaluation_marks ), 0 )\nFROM a\nLEFT OUTER JOIN b ON ( b.id = a.id )\nWHERE a.id = 45\nGROUP BY a.id, a.marks\n']], ['Database Query Help required in MySQL'], 3], [(2047743, 2), [["You should consider changing your table model though. Why do you store name and id twice? Can't you do it like that:"], ['-10000']], [[' id    name    marks    evaluation marks\n=======================================\n12    Ram     87        0\n23    John    67       12\n45    Mark    45       34\n78    Chris    0        9\n98    Nancy    0       10\n']], ['Database Query Help required in MySQL'], 3], [(2049109, 0), [['From a sqlite prompt:'], ['Or:']], [[' sqlite> .read db.sql\n']], ['How do I import .sql files into SQLite 3?'], 3], [(2049109, 1), [['Or:'], ['Also, your SQL is invalid - you need  ;  on the end of your statements:']], [[' cat db.sql | sqlite3 database.db\n']], ['How do I import .sql files into SQLite 3?'], 3], [(2049109, 2), [['Also, your SQL is invalid - you need  ;  on the end of your statements:'], ['-10000']], [[' create table server(name varchar(50),ipaddress varchar(15),id init);\ncreate table client(name varchar(50),ipaddress varchar(15),id init);\n']], ['How do I import .sql files into SQLite 3?'], 3], [(2049317, 0), [['Use this instead:'], ['It does not shrink several records into one: instead, it returns the total value along with each record:']], [[' SELECT  name, number * 100.0 / SUM(number) OVER ()\nFROM    #names\n']], ['SQL Server Rounding Issue Looking for Explanation'], 3], [(2049317, 1), [['It does not shrink several records into one: instead, it returns the total value along with each record:'], ['-10000']], [[" -- This is an aggregate function. It shrinks all records into one record and returns the total sum\n\nWITH    q (name, number) AS\n        (\n        SELECT  'test1', 0\n        UNION ALL\n        SELECT  'test2', 22\n        UNION ALL\n        SELECT  'test3', 28\n        )\nSELECT  SUM(number)\nFROM    q\n\n--\n50\n"]], ['SQL Server Rounding Issue Looking for Explanation'], 3], [(2049317, 2), [['-10000'], ['-10000']], [[" -- This is an analytical function. It calcuates the total sum as well but does not shrink the records.\n\nWITH    q (name, number) AS\n        (\n        SELECT  'test1', 0\n        UNION ALL\n        SELECT  'test2', 22\n        UNION ALL\n        SELECT  'test3', 28\n        )\nSELECT  SUM(number) OVER ()\nFROM    q\n\n--\n50\n50\n50\n"]], ['SQL Server Rounding Issue Looking for Explanation'], 3], [(2050366, 0), [["Then it's as simple as doing a sub-select:"], ['And then putting that  IN  the other query:']], [[' var subcriteria = DetachedCriteria.For<Shipper>()\n                .CreateCriteria("Products", "productsForCategory")\n                .Add(Property.ForName("productsForCategory.Id").Eq(product.Id))\n                .SetProjection(Projections.Id());\n']], ['Creating an efficient (but complex) NHibernate query'], 2], [(2050366, 1), [['And then putting that  IN  the other query:'], ['-10000']], [[' Session.CreateCriteria<Warehouse>()\n                .Add(Subqueries.PropertyIn("Shipper", subcriteria))\n']], ['Creating an efficient (but complex) NHibernate query'], 2], [(2051033, 0), [['Effectively you\'ve got a "blob" of data that could in principle hold anything, and then a schema definition to say how the blob should be interpreted'], ['or']], [[" it's a date\n"]], ['Design for simple database for an event stream'], 2], [(2051033, 1), [['or'], ['This is quite reasonable for a personal project. A downside of the "blob" approach is that there can be something of an impedence mismatch when doing queries. If you need to work with the blob contents it\'s going to be a little cumbersome.']], [[" it's one of these values\n"]], ['Design for simple database for an event stream'], 2], [(2051772, 0), [['Text::CSV  recommends  Text::CSV::Encoded :'], ["Or, if you don't want to have to install a new module:"]], [[' my $csv = Text::CSV::Encoded->new({ eol => "\\015\\012" });\nopen my $fh, \'>:raw\', \'Foo.csv\';\nmy $sth = $dbh->prepare("SELECT * FROM Foo");\n$sth->execute();\n$csv->print($fh, $sth->{NAME_lc}); # or NAME or NAME_uc\n\nwhile (my $row = $sth->fetchrow_arrayref) {\n   $csv->print($fh, $row);\n}\n']], ['How do I export this Unicode table as CSV in Perl 5?'], 2], [(2051772, 1), [["Or, if you don't want to have to install a new module:"], ['-10000']], [[' use Encode \'find_encoding\';\nmy $utf8 = find_encoding(\'utf8\');\n\nmy $csv = Text::CSV->new({ binary => 1, eol => "\\015\\012" });\nopen my $fh, \'>:raw\', \'Foo.csv\';\nmy $sth = $dbh->prepare("SELECT * FROM Foo");\n$sth->execute();\n# I\'m assuming your field names are ASCII:\n$csv->print($fh, $sth->{NAME_lc}); # or NAME or NAME_uc\n\nwhile (my $row = $sth->fetchrow_arrayref) {\n   $csv->print($fh, [ map { $utf8->encode($_) } @$row ]);\n}\n']], ['How do I export this Unicode table as CSV in Perl 5?'], 2], [(2054185, 0), [['something like this for hours'], ['give me this:']], [[" select s.[user], datediff(hh,s.time,e.time) as duration\nfrom actiontable s\njoin actiontable e on s.[user] = e.[user] and e.actionname = 'enddoing'\nwhere s.actionname = 'startdoing' \n"]], ['select statement get time duration'], 4], [(2054185, 1), [['give me this:'], ['changing to  datediff(minute,s.time,e.time)  gives this']], [[' user       duration\n---------- -----------\nuserX      745\n']], ['select statement get time duration'], 4], [(2054185, 2), [['changing to  datediff(minute,s.time,e.time)  gives this'], ["this will work for an entire table of users and their start and end times if you only have one start and end time for each... if you don't have only one then it gets a little more complicated -- the easy way (with mssql 2005+) is to do something like like this:"]], [[' user       duration\n---------- -----------\nuserX      44700\n']], ['select statement get time duration'], 4], [(2054185, 3), [["this will work for an entire table of users and their start and end times if you only have one start and end time for each... if you don't have only one then it gets a little more complicated -- the easy way (with mssql 2005+) is to do something like like this:"], ['-10000']], [[" ;with sitems as\n(\n  select [user], max([time]) as [time]\n  from actiontable\n  where actionname = 'startdoing'\n  group by [user]\n), eitems as\n(\n  select [user], max([time]) as [time]\n  from actiontable\n  where actionname = 'enddoing'\n  group by [user]\n)\nselect s.[user], datediff(minute,s.time,e.time) as duration\nfrom sitems s\njoin eitems e on s.[user] = e.[user] \n"]], ['select statement get time duration'], 4], [(2054975, 0), [['Something like (might need to swap the 1 and 0, untested)'], ["Edit: after seeing OP's comment, you have to subtract 1 if the start day > end day"]], [[' datediff(month,[DateEngaged],getdate()) +\n CASE WHEN DATEPART(day, [DateEngaged]) < DATEPART(day, getdate()) THEN 1 ELSE 0 END\n']], ['how to get the number on months between two dates in sql server 2005'], 2], [(2054975, 1), [["Edit: after seeing OP's comment, you have to subtract 1 if the start day > end day"], ['So for 20 Dec to 13 Jan, DATEDIFF gives 1 and then 20 > 13 so subtract 1 = zero months.']], [[' DATEDIFF (month, DateEngaged, getdate()) -\n CASE\n   WHEN DATEPART(day, DateEngaged) > DATEPART(day, getdate()) THEN 1 ELSE 0\n END\n']], ['how to get the number on months between two dates in sql server 2005'], 2], [(2055746, 0), [['The query would be something like:'], ['To achieve this, you can use a  CURSOR  to loop through the results of the earlier  SELECT  statement, building a new T-SQL command in a string/varchar that will drop the table name.  An example of this is below:']], [[' USE [Your_Database_Name];\nGO\nSELECT name AS object_name \n  ,SCHEMA_NAME(schema_id) AS schema_name\n  ,type_desc\n  ,create_date\n  ,modify_date\nFROM sys.objects\nWHERE create_date > GETDATE() - [No_Of_Days_Old]\nORDER BY create_date;\nGO\n']], ['DROP SQL Tables if created date is more than a week - MS SQL Server'], 2], [(2055746, 1), [['To achieve this, you can use a  CURSOR  to loop through the results of the earlier  SELECT  statement, building a new T-SQL command in a string/varchar that will drop the table name.  An example of this is below:'], ["Note that in the above example, I have commented out the line  EXEC (@sql) .  This is the line that actually executes the T-SQL statement in the @sql variable, and since it's a destructive command, I simply commented it out and used a  PRINT @sql  command instead (the line below).  Run this as is, to see what tables you're likely to delete, and when you're happy, uncomment the  EXEC (@sql)  command and comment out the  PRINT @sql  command!"]], [[" DECLARE @tname VARCHAR(100)\nDECLARE @sql VARCHAR(max)\n\nDECLARE db_cursor CURSOR FOR \nSELECT name AS tname\nFROM sys.objects\nWHERE create_date > GETDATE() - 7\n\nOPEN db_cursor  \nFETCH NEXT FROM db_cursor INTO @tname  \n\nWHILE @@FETCH_STATUS = 0  \nBEGIN  \n       SET @sql = 'DROP TABLE ' + @tname\n       --EXEC (@sql)\n       PRINT @sql\n\n       FETCH NEXT FROM db_cursor INTO @tname  \nEND  \n\nCLOSE db_cursor  \nDEALLOCATE db_cursor\n"]], ['DROP SQL Tables if created date is more than a week - MS SQL Server'], 2], [(2056938, 0), [['These queries both isolate the row with the highest  xfer_id  for each distinct  client_plt_id'], ['or, for mysql this may be better performing:']], [[' select xfer_id, client_plt_id, xfer_doc_no\nfrom   tab t1\nwhere  xfer_id = (\n       select max(xfer_id)\n       from   tab t2\n       where  t2.client_plt_id = t1.client_plt_id\n   )\n']], ['SQL isolate greatest values in a column'], 3], [(2056938, 1), [['or, for mysql this may be better performing:'], ['If you simply want the one row with the highest  xfer_id , regardless of  client_plt_id , this is what you need:']], [[' select xfer_id, client_plt_id, xfer_doc_no\nfrom   tab t1\ninner join (\n       select max(xfer_id), client_plt_id\n       from   tab\n       group by client_plt_id\n       ) t2\non     t1.client_plt_id = t2.client_plt_id\nand    t1.xfer_id = t2.xfer_id\n']], ['SQL isolate greatest values in a column'], 3], [(2056938, 2), [['If you simply want the one row with the highest  xfer_id , regardless of  client_plt_id , this is what you need:'], ['-10000']], [[' select xfer_id, client_plt_id, xfer_doc_no\nfrom   tab t1\nwhere  xfer_id = (select max(xfer_id) from tab)\n']], ['SQL isolate greatest values in a column'], 3], [(2057113, 0), [['I think you should place the q2 subquery as a column and not as a table. Since you retrieve a single value, it could be easily put like this: '], ['or even better, why dont you get it as a normal aggregation, since you request the max from the same table:']], [[' SELECT s1.SkuApexId, s1.sku, s1.apex, s1.btw, s1.gebruikernr, \n         (SELECT MAX(s2.begindatum)\n              FROM tblskuapex  s2\n              WHERE s1.sku = s2.sku) as maxbegindatum\nFROM tblSkuApex AS s1\n']], ['Subquery question in MS Access'], 2], [(2057113, 1), [['or even better, why dont you get it as a normal aggregation, since you request the max from the same table:'], ['note: you could ommit the s1 alias everywhere']], [[' SELECT \n    s1.SkuApexId, s1.sku, s1.apex, \n    s1.btw, s1.gebruikernr, MAX(begindatum)\nFROM tblSkuApex AS s1\ngroup by \n    s1.SkuApexId, s1.sku, s1.apex, \n    s1.btw, s1.gebruikernr\n']], ['Subquery question in MS Access'], 2], [(2057216, 0), [['However, if you could use  NULL  instead of zero, you can get around the unique constraint.  A unique constraint allows multiple entries that have  NULL .  The reason is that uniqueness means no two  equal values  can exist.  Equality means  value1 = value2  must be true.  But in SQL,  NULL = NULL  is  unknown , not true.'], ["So far so good, now you might think the following statements would violate the unique constraint, but they don't:"]], [[" CREATE TABLE MyTable (id SERIAL PRIMARY KEY, userid INT, data VARCHAR(64));\n\nINSERT INTO MyTable (userid, data) VALUES (   1, 'foo');\nINSERT INTO MyTable (userid, data) VALUES (   1, 'bar');\nINSERT INTO MyTable (userid, data) VALUES (NULL, 'baz');\n"]], ['Conditional composite key in MySQL?'], 2], [(2057216, 1), [["So far so good, now you might think the following statements would violate the unique constraint, but they don't:"], ['-10000']], [[" INSERT INTO MyTable (userid, data) VALUES (   1, 'baz');\nINSERT INTO MyTable (userid, data) VALUES (NULL, 'foo');\nINSERT INTO MyTable (userid, data) VALUES (NULL, 'baz');\nINSERT INTO MyTable (userid, data) VALUES (NULL, 'baz');\n"]], ['Conditional composite key in MySQL?'], 2], [(2057997, 0), [['-10000'], ['Alternatively:']], [[' SELECT\n     O.sku,\n     O.qty,\n     PP.price\nFROM\n     Orders O\nINNER JOIN Purchase_Prices PP ON\n     PP.sku = O.sku AND\n     PP.start_date <= O.order_date\nWHERE\n     NOT EXISTS\n     (\n          SELECT\n               *\n          FROM\n                Purchase_Prices PP2\n          WHERE\n                PP2.sku = PP.sku AND\n                PP2.start_date <= O.order_date AND\n                PP2.start_date > PP.start_date\n     )\n']], ['MS-Access Get price of product at certain order date'], 2], [(2057997, 1), [['Alternatively:'], ['-10000']], [[' SELECT\n     O.sku,\n     O.qty,\n     PP.price\nFROM\n     Orders O\nINNER JOIN Purchase_Prices PP ON\n     PP.sku = O.sku AND\n     PP.start_date <= O.order_date\nLEFT OUTER JOIN Purchase_Prices PP2 ON\n     PP2.sku = O.sku AND\n     PP2.start_date <= O.order_date AND\n     PP2.start_date > PP.start_date\nWHERE\n     PP2.sku IS NULL\n']], ['MS-Access Get price of product at certain order date'], 2], [(2058021, 0), [['I created a view that returns the columns that I want. I added another extra column which aggregates all the columns I want to search among. So, in this case the view would be like'], ['After this I created a full-text index on SearchResult column. Then, I search on this column']], [[" SELECT emp.*, addr.*, ISNULL(emp.Name,'') + ' ' + ISNULL(addr.City, '') AS SearchResult \nFROM Employee emp \n    LEFT OUTER JOIN [Address] addr ON addr.EmployeeId = emp.EmployeeId\n"]], ['SQL Server 2005 Full Text Search over multiple tables and columns'], 2], [(2058021, 1), [['After this I created a full-text index on SearchResult column. Then, I search on this column'], ['-10000']], [[" SELECT *\nFROM vEmpAddr ea\nINNER JOIN CONTAINSTABLE(vEmpAddr, *, 'John AND Hamburg') a ON ea.ID = a.[Key]\n"]], ['SQL Server 2005 Full Text Search over multiple tables and columns'], 2], [(2058317, 0), [['e.g.'], ['so, store 002 is out of stock of sku 1235, but store 001 has plenty.  This table layout also allows you to get a group-wide view of your stock levels in a single table using something like']], [[' Sku    | StoreId   | StockLevel\n1234   | 001       | 15\n1235   | 001       | 16\n1234   | 002       | 8\n1235   | 002       | 0\n']], ['POS Database Layout'], 2], [(2058317, 1), [['so, store 002 is out of stock of sku 1235, but store 001 has plenty.  This table layout also allows you to get a group-wide view of your stock levels in a single table using something like'], ['-10000']], [[' select sku, sum(StockLevel) from stock group by sku\n']], ['POS Database Layout'], 2], [(2059240, 0), [['-10000'], ['Create a composite index on  (User_ID, Date) :']], [[' SELECT  COUNT(*) AS total\nFROM    (\n        SELECT  DISTINCT User_ID \n        FROM    UserClicks \n        WHERE   Date BETWEEN DATE_SUB(:startDate, INTERVAL 1 MONTH) AND :startDate\n        ) u1\nWHERE   EXISTS\n        (\n        SELECT  NULL\n        FROM    UserClicks u2\n        WHERE   u2.User_ID = u1.User_ID\n                AND u2.Date BETWEEN :startDate AND :endDate\n        )\n']], ['How to optimize this SQL select query?'], 3], [(2059240, 1), [['Create a composite index on  (User_ID, Date) :'], ['If you have few users but lots of clicks, and have a table  Users , you may use the  Users  table instead of  DISTINCT :']], [[' CREATE INDEX ix_userclicks_user_date ON UserClicks (User_ID, Date)\n']], ['How to optimize this SQL select query?'], 3], [(2059240, 2), [['If you have few users but lots of clicks, and have a table  Users , you may use the  Users  table instead of  DISTINCT :'], ['-10000']], [[' SELECT  COUNT(*)\nFROM    Users u\nWHERE   EXISTS\n        (\n        SELECT  NULL\n        FROM    UserClicks uc1\n        WHERE   uc1.UserId = u.Id\n                AND uc1.Date BETWEEN DATE_SUB(:startDate, INTERVAL 1 MONTH) AND :startDate\n        )\n        AND EXISTS\n        (\n        SELECT  NULL\n        FROM    UserClicks uc2\n        WHERE   uc2.UserId = u.Id\n                AND u2.Date BETWEEN :startDate AND :endDate\n        )\n']], ['How to optimize this SQL select query?'], 3], [(2061467, 0), [['but this:'], ['is vastly different from this:']], [[' SELECT\n    *\nFROM item, categories\nWHERE item.title LIKE "%hello%"\nOR item.title LIKE "%world%"\nOR item.title LIKE "%Joomla%"\nOR item.title LIKE "%Animal%"\nAND categories.name = "Book"\n']], ['sql query help (very specific)'], 3], [(2061467, 1), [['is vastly different from this:'], ['Also, like the others say, Book should be in quotes (like I have done here).']], [[' SELECT\n    *\nFROM item, categories\nWHERE (\n    item.title LIKE "%hello%"\n    OR item.title LIKE "%world%"\n    OR item.title LIKE "%Joomla%"\n    OR item.title LIKE "%Animal%"\n)\nAND categories.name = "Book"\n']], ['sql query help (very specific)'], 3], [(2061467, 2), [['Also, like the others say, Book should be in quotes (like I have done here).'], ['-10000']], [[' AND categories.name = "Book"\n']], ['sql query help (very specific)'], 3], [(2064067, 0), [['Traditionally, it would be:'], ['Now, you can make that flexible like:']], [[' (from s in Sales\nwhere s.SalesDate.Year = 2009\n&& s.SalesDate.Month = 2\nselect s.Amount).Sum();\n']], ['Data Binning with SQL or Linq'], 3], [(2064067, 1), [['Now, you can make that flexible like:'], ["The only thing I'm not sure of is whether you can use an enum for evaluation; you may be able to add booleans for each condition:"]], [[' .. GetData(TimePeriod period)\n{\nreturn (from s in Sales\n  where\n  (\n     //timeframe is enum of month, day, hour\n     period.TimeFrame == TimeFrame.Month \n     && s.SalesDate.Year == period.year\n     && s.SalesDate.Month == period.Month\n  )\n  ||\n  (\n     period.TimeFrame == TimeFrame.Day\n     && s.SalesDate.Year == period.Year\n     && s.SalesDate.Month == period.Month\n     && s.SalesDate.Day == period.Day\n  )\n  ||\n  (\n    ..\n  )\n  select s);\n\n}\n']], ['Data Binning with SQL or Linq'], 3], [(2064067, 2), [["The only thing I'm not sure of is whether you can use an enum for evaluation; you may be able to add booleans for each condition:"], ['and alter the query so that you use isMonth && instead of period.TimeFrame == Timeframe.Month.']], [[' bool isMonth = (period.TimeFrame == Timeframe.Month);\n']], ['Data Binning with SQL or Linq'], 3], [(2065754, 0), [["Complexity of a  MERGE JOIN  is  O(N*Log(N) + M*Log(M)) : it's the sum of times to sort both tables plus time to scan them."], ['The pointers are set to the minimal values in both tables:']], [[" SELECT  T1.name, T2.date\nFROM    T1, T2\nWHERE   T1.id=T2.id\n        AND T1.color='red'\n        AND T2.type='CAR'\n"]], ['Is there any general rule on SQL query complexity Vs performance?'], 4], [(2065754, 1), [['The pointers are set to the minimal values in both tables:'], ["The pointers are compared in a loop, and if they match, the records are returned. If they don't match, the pointer with the minimal value is advanced:"]], [[' >1  2<\n 2  3\n 2  4\n 3  5\n']], ['Is there any general rule on SQL query complexity Vs performance?'], 4], [(2065754, 2), [["The pointers are compared in a loop, and if they match, the records are returned. If they don't match, the pointer with the minimal value is advanced:"], ['Your query without the  WHERE  clause:']], [[' >1  2<  - no match, left pointer is less. Advance left pointer\n 2  3\n 2  4\n 3  5\n\n 1  2<  - match, return records and advance both pointers\n>2  3\n 2  4\n 3  5\n\n 1  2  - match, return records and advance both pointers\n 2  3< \n 2  4\n>3  5\n\n 1  2 - the left pointer is out of range, the query is over.\n 2  3\n 2  4<\n 3  5\n>\n']], ['Is there any general rule on SQL query complexity Vs performance?'], 4], [(2065754, 3), [['Your query without the  WHERE  clause:'], ['is more simple but returns more results and runs longer.']], [[' SELECT  T1.name, T2.date\nFROM    T1, T2\n']], ['Is there any general rule on SQL query complexity Vs performance?'], 4], [(2066966, 0), [['try'], ['The above returns a result set.   If you want just a variable, use']], [[" xp_fileExist ' <file Name> '\n"]], ['How to check .txt file existence with TSQL?'], 2], [(2066966, 1), [['The above returns a result set.   If you want just a variable, use'], ['-10000']], [[" declare @FileOK  INT\n\nexec xp_fileExist 'c:\\autoexec.bat' ,@FileOK OUTPUT\n\nPrint @FileOK\n"]], ['How to check .txt file existence with TSQL?'], 2], [(2067069, 0), [['First I update  t1  and set  sts=1  for every row (if only a few rows are affected, it might be more efficient to add a  WHERE -clause to get the relevant rows), and  rowid_t2  to  t2.rowid  where all relevant columns match.'], ['Then I do the same with  sts=2  and  sts=3  but only where  rowid_t2  has not already been set.']], [[' UPDATE t1\nSET\n  sts = 1, \n  rowid_t2 = (\n    SELECT rowid FROM t2\n    WHERE t2.f1 = t1.f1 AND t2.f2 = t1.f2 AND t2.f3 = t1.f3\n  );\n']], ['Matching two big SQLITE3 tables'], 4], [(2067069, 1), [['Then I do the same with  sts=2  and  sts=3  but only where  rowid_t2  has not already been set.'], ['Then I reset  t1.sts  that have been set to  3  but are not actually valid:']], [[' UPDATE t1\nSET\n  sts = 2, \n  rowid_t2 = (\n    SELECT rowid FROM t2\n    WHERE t2.f1 = t1.f1 AND t2.f2 = t1.f2\n  )\nWHERE t1.rowid_t2 IS NULL;\n\nUPDATE t1\nSET\n  sts = 3, \n  rowid_t2 = (\n    SELECT rowid FROM t2\n    WHERE t2.f1 = t1.f1\n  )\nWHERE t1.rowid_t2 IS NULL;\n']], ['Matching two big SQLITE3 tables'], 4], [(2067069, 2), [['Then I reset  t1.sts  that have been set to  3  but are not actually valid:'], ['And finally I update  sts  in  t2  to the "lowest" method that matched in  t1 . So if a row in  t2  has one row in  t1  that matches for all criterias, and one that matches only for  f1 , I still set  sts=1 .']], [[' UPDATE t1\nSET sts = NULL\nWHERE rowid_t2 IS NULL;\n']], ['Matching two big SQLITE3 tables'], 4], [(2067069, 3), [['And finally I update  sts  in  t2  to the "lowest" method that matched in  t1 . So if a row in  t2  has one row in  t1  that matches for all criterias, and one that matches only for  f1 , I still set  sts=1 .'], ['I have not tried with indexes, but I think you should have one for  t2.f1 ,  t2.f2  and  t2.f3  for the first three updates (might need separate indexes with  SQLite , not sure), and another one at  t1.rowid_t2  for the other two updates and for  t1.rowid_t2 IS NULL .']], [[' UPDATE t2\nSET sts = (\n  SELECT MIN(sts)\n  FROM t1\n  WHERE t1.rowid_t2 = t2.rowid\n)\n']], ['Matching two big SQLITE3 tables'], 4], [(2068439, 0), [['-10000'], ['Another way']], [[' select Id as StoreId, count(*) as ProductCount\nfrom StoreProduct\ngroup by Id\nhaving count(*) > 3\n']], ["Why can't I apply a criteria on a sub-query?"], 2], [(2068439, 1), [['Another way'], ['Which, assumes, the unique column in your StoreProduct table is named ProductId ']], [[' select S.Id, count(SP.ProductId) as ProductCount\nfrom Store S\nleft join StoreProduct SP on (SP.Store_id = S.Id)\ngroup by S.Id\nhaving COUNT(SP.ProductId) > 3\n']], ["Why can't I apply a criteria on a sub-query?"], 2], [(2069418, 0), [["Now for your problem, first let's populate your table:"], ['You would then loop through the elements rather simply:']], [[" SQL> DECLARE\n  2     l_prodtable prodtable := prodtable();\n  3  BEGIN\n  4     l_prodtable.extend(2);\n  5     l_prodtable(1) := prod_obj(1, 'Prod A', '', '', '', '', '');\n  6     l_prodtable(2) := prod_obj(2, 'Prod B', '', '', '', '', '');\n  7     FOR i IN 1 .. 2 LOOP\n  8        INSERT INTO fornecprods VALUES (fornec_obj(i, 'Forn '||i, '',\n  9                                                   '', '', '', '', ''),\n 10                                        l_prodtable);\n 11     END LOOP;\n 12  END;\n 13  /     \nPL/SQL procedure successfully completed\n"]], ['Looping through nested tables in oracle and returning a list of objects to java'], 2], [(2069418, 1), [['You would then loop through the elements rather simply:'], ['-10000']], [[" SQL> BEGIN\n  2     FOR cc IN (SELECT supplier, products FROM fornecprods) LOOP\n  3        dbms_output.put_line('-----------------------');\n  4        dbms_output.put_line('Products list of '\n  5                             || cc.supplier.NOME_FORNECEDOR);\n  6        dbms_output.put_line('-----------------------');\n  7        FOR i IN 1 .. cc.products.count LOOP\n  8           dbms_output.put_line('-' || cc.products(i).NOME_PROD);\n  9        END LOOP;\n 10     END LOOP;\n 11  END;\n 12  /\n\n-----------------------\nProducts list of Forn 1\n-----------------------\n-Prod A\n-Prod B\n-----------------------\nProducts list of Forn 2\n-----------------------\n-Prod A\n-Prod B\n\nPL/SQL procedure successfully completed\n"]], ['Looping through nested tables in oracle and returning a list of objects to java'], 2], [(2069679, 0), [['You need to define a table level check constraint.  The following uses Oracle syntax but most DBMS products will have something pretty similar....'], ['In response to your comment I guess it would be']], [[' alter table A add constraint a_or_b\n    check (\n        ( a is not null and b is null ) \n    or\n        ( a is null and b is not null ) \n    )\n/\n']], ['how do you enforce conditional not null check across sql columns'], 2], [(2069679, 1), [['In response to your comment I guess it would be'], ["But as a data modeller and a DBA this is really the sort of thing I would want enforced in the database.  I don't think the syntax will really vary that much, if at all, across the different flavours of RDBMS. "]], [[' @org.hibernate.annotations.Check(\n\nconstraints = “(a is not null and b is null) or (a is null and b is not null)”\n\n)\n']], ['how do you enforce conditional not null check across sql columns'], 2], [(2070396, 0), [['-10000'], ['-10000']], [[' select @@version\n']], ['How can I tell what edition of SQL Server runs on the machine?'], 3], [(2070396, 1), [['-10000'], ['To use in an automated script, you can get the edition ID, which is an integer:']], [[" select serverproperty('Edition')\n"]], ['How can I tell what edition of SQL Server runs on the machine?'], 3], [(2070396, 2), [['To use in an automated script, you can get the edition ID, which is an integer:'], ['-10000']], [[" select serverproperty('EditionID')\n"]], ['How can I tell what edition of SQL Server runs on the machine?'], 3], [(2071152, 0), [['-10000'], ["Here's a solution that does not use the analytic functions:"]], [[' SELECT  *\nFROM    t_stock s\nJOIN    (\n        SELECT  f.*, ROW_NUMBER() OVER (PARTITION BY id ORDER BY startDate DESC) AS rn\n        FROM    t_flow f\n        ) f\nON      f.id = s.id\n        AND f.rn = 1\n']], ['Create a SQL query to retrieve data from two tables'], 2], [(2071152, 1), [["Here's a solution that does not use the analytic functions:"], ['-10000']], [[' SELECT  *\nFROM    t_stock s\nJOIN    t_flow f\nON      (f.id, f.startDate) =\n        (\n        SELECT  id, MAX(startDate)\n        FROM    t_flow fi\n        WHERE   fi.id = s.id\n        GROUP BY\n                id\n        )\n']], ['Create a SQL query to retrieve data from two tables'], 2], [(2071456, 0), [['Try this:'], ['or this:']], [[" SELECT CODIGO FROM LOG WHERE TEL = :telnumber AND DATE_PROC = DATE '2008-07-05'\n"]], ['Oracle OCI: Query with Date field'], 2], [(2071456, 1), [['or this:'], ["If you can, refrain from using a date format  in your code  that uses letters for months (because the code  will fail  when you change the default language) and only two chars for years (ambiguity of century). I like to use  'YYYY/MM/RR'  because this format will be sorted as the original date."]], [[" SELECT CODIGO \n  FROM LOG \n WHERE TEL = :telnumber \n   AND DATE_PROC = to_date('05-JUL-08', 'DD-MON-RR')\n"]], ['Oracle OCI: Query with Date field'], 2], [(2071831, 0), [['To answer my own question, yes, in order to compare apples to apples, I needed to '], ['and also use ']], [[" select to_date(value, 'MM/DD/YYYY HH24:MI:SS') ... as edate\n"]], ['Select date range using SQL'], 2], [(2071831, 1), [['and also use '], ['in order to make an appropriate date to date comparison.']], [[" To_Date('10/15/2011', 'MM/DD/YYYY HH24:MI:SS')\n"]], ['Select date range using SQL'], 2], [(2072029, 0), [['-10000'], ['To select results company-wise:']], [[' SELECT  *, value - nextvalue AS diff\nFROM    (\n        SELECT  m.*, LEAD(value) OVER (ORDER BY date DESC) AS nextvalue\n        FROM    mytable m\n        ORDER BY\n                date DESC\n        )\nWHERE   rownum = 1\n']], ['How to compare values for last and second last entry in table?'], 2], [(2072029, 1), [['To select results company-wise:'], ['-10000']], [[' SELECT  value - nextvalue AS diff\nFROM    (\n        SELECT  m.*,\n                LEAD(value) OVER (PARTITION BY companyId ORDER BY date DESC) AS nextvalue,\n                ROW_NUMBER() OVER (PARTITION BY companyId ORDER BY date DESC) AS rn\n        FROM    mytable m\n        )\nWHERE   rn = 1\n']], ['How to compare values for last and second last entry in table?'], 2], [(2072086, 0), [['Just copy everything after  AS :'], ["Here's what  SSMS  outputs in the create script:"]], [[' BEGIN\n    DECLARE @myvar INT\n    SELECT  *\n    FROM    mytable\n    WHERE   @myvar ...\nEND\n']], ['How to check if a stored procedure exists before creating it'], 3], [(2072086, 1), [["Here's what  SSMS  outputs in the create script:"], ['Example of how to do it when including the schema:']], [[" IF EXISTS ( SELECT  *\n            FROM    sys.objects\n            WHERE   object_id = OBJECT_ID(N'myproc')\n                    AND type IN ( N'P', N'PC' ) ) \nDROP …\nCREATE …\n"]], ['How to check if a stored procedure exists before creating it'], 3], [(2072086, 2), [['Example of how to do it when including the schema:'], ['In the example above,  dbo  is the schema.']], [[" IF EXISTS ( SELECT * \n            FROM   sysobjects \n            WHERE  id = object_id(N'[dbo].[MyProc]') \n                   and OBJECTPROPERTY(id, N'IsProcedure') = 1 )\nBEGIN\n    DROP PROCEDURE [dbo].[MyProc]\nEND\n"]], ['How to check if a stored procedure exists before creating it'], 3], [(2072477, 0), [['Not sure if I understand everything, but take a look at this example:'], ['Returns']], [[" DECLARE @OrderDetails TABLE\n  ( \n   Order_ID int\n  ,Order_Code varchar(10)\n  ,Product_Name varchar(15)\n  ,Qty int\n  )\n\nINSERT  INTO @OrderDetails\n        ( Order_ID, Order_Code, Product_Name, Qty)\nVALUES  ( 10001, 'OC', 'Ottoman', 10 )\n,       ( 10002, 'OC', 'Ottoman', 3 )\n,       ( 10003, 'OC', 'Ottoman', 2 )\n,       ( 10004, 'OC', 'Ottoman', 2 )\n,       ( 10005, 'SF', 'Sofa', 2 )\n,       ( 10006, 'SF', 'Sofa', 7 )\n\n;\nWITH  abcd\n        AS ( SELECT Order_ID\n                   ,Order_Code\n                   ,Product_Name\n                   ,Qty\n                   ,DENSE_RANK() OVER ( ORDER BY Order_Code ) AS [RnkSeq]\n                   ,ROW_NUMBER() OVER ( PARTITION BY Order_Code ORDER BY Order_ID ) AS [NumSeq]\n             FROM   @OrderDetails\n           )\n  SELECT  Order_ID\n         ,Order_Code\n         ,Product_Name\n         ,Qty\n         ,CAST(RnkSeq AS varchar(10)) + CHAR(64 + NumSeq) AS SeqNo\n  FROM    abcd\n"]], ['Serial number issue in SQL Server 2008'], 3], [(2072477, 1), [['Returns'], ['To update and have  1, 1A, 1B..  use:']], [[' Order_ID    Order_Code Product_Name    Qty         SeqNo\n----------- ---------- --------------- ----------- -----------\n10001       OC         Ottoman         10          1A\n10002       OC         Ottoman         3           1B\n10003       OC         Ottoman         2           1C\n10004       OC         Ottoman         2           1D\n10005       SF         Sofa            2           2A\n10006       SF         Sofa            7           2B\n']], ['Serial number issue in SQL Server 2008'], 3], [(2072477, 2), [['To update and have  1, 1A, 1B..  use:'], ['Beware what happens when you get more than  1, 1A, ... 1Z  different order numbers for Ottomans.']], [[" ;\nWITH  abcd\n        AS ( SELECT Order_ID\n                   ,Order_Code\n                   ,Product_Name\n                   ,Qty\n                   ,DENSE_RANK() OVER ( ORDER BY Order_Code ) AS [RnkSeq]\n                   ,ROW_NUMBER() OVER ( PARTITION BY Order_Code ORDER BY Order_ID ) AS [NumSeq]\n             FROM   @OrderDetails\n           ),\n      efgh\n        AS ( SELECT Order_ID\n                   ,Order_Code\n                   ,Product_Name\n                   ,Qty\n                   ,CAST(RnkSeq AS varchar(10)) + CHAR(63 + NumSeq) AS [Seq]\n             FROM   abcd\n           )\n  UPDATE  @OrderDetails\n  SET     SeqNo = REPLACE(e.Seq,'@','')\n  FROM    @OrderDetails AS o\n          JOIN efgh AS e ON e.Order_ID = o.Order_ID\n"]], ['Serial number issue in SQL Server 2008'], 3], [(2072991, 0), [['Your FK should have a "ON UPDATE CASCADE" option.'], ['And then you can just do']], [[' ALTER TABLE child CHANGE myfkconst FOREIGN KEY id REFERENCES parent (id) ON UPDATE CASCADE;\n']], ['Disable Constraints on Bulk Update in SQL Server'], 2], [(2072991, 1), [['And then you can just do'], ['and the child table will be updated automatically.']], [[' UPDATE parent SET id = id + 10000 WHERE id = something\n']], ['Disable Constraints on Bulk Update in SQL Server'], 2], [(2074612, 0), [['This should do it, assuming you Epoch date is 1/1/1970 (usually for GMT seconds, but you will need to confirm)'], ['For you code, use']], [[" select dateAdd(ss,1247242537+(-420*60),'1/1/1970') \n == >  2009-07-10 09:15:37.000\n"]], ['SQL: Convert GMT in seconds to DateTime'], 2], [(2074612, 1), [['For you code, use'], ['Be sure you find some test cases to make sure the Epoch date is as expected.   Basically, the GMT time is number of seconds past 1/1/1970 12:00am, so DateAdd handles that part.   The offset is the number of minutes different from GMT, so multiply that by 60 to get seconds and adjust your value to DateAdd accordingly']], [[" select DATEADD(ss,StartTime+(Offset*60),'1/1/1970') as TheTime FROM myTable\n"]], ['SQL: Convert GMT in seconds to DateTime'], 2], [(2074986, 0), [['if  (EntityId, UsageTypeId)  is unique:'], ['otherwise, 4-way join for the 4 fields,']], [[' select s.PrimaryKeyField, s.ShipmentId from shipment s, item a\nwhere s.PrimaryKeyField = a.EntityId and a.UsageTypeId in (1,2,3,4)\ngroup by s.PrimaryKeyField, s.ShipmentId having count(*) = 4\n']], ['Using (IN operator) OR condition in Where clause as AND condition'], 2], [(2074986, 1), [['otherwise, 4-way join for the 4 fields,'], ["you'll want appropriate index on  (EntityId, UsageTypeId)  so it doesn't hang..."]], [[' select distinct s.* from shipment s, item a,  item b, item c, item d where\ns.PrimaryKeyField = a.EntityId = b.EntityId = c.EntityId = d.EntityId and\na.UsageTypeId = 1 and b.UsageTypeId = 2 and c.UsageTypeId = 3 and\nd.UsageTypeId = 4\n']], ['Using (IN operator) OR condition in Where clause as AND condition'], 2], [(2076745, 0), [['This query will list all the table names'], ['You can also use this bit of code to go through every table and list every field']], [[' SELECT MSysObjects.Name\nFROM MSysObjects\nWHERE (((MSysObjects.Type)=6))\n']], ['sql statement to return all fields from all tables'], 2], [(2076745, 1), [['You can also use this bit of code to go through every table and list every field'], ['Hope this helps']], [[' Public Sub List_fields_in_tables()\nDim tdf As DAO.TableDef\nDim fld As DAO.Field\n\nFor Each tdf In CurrentDb.TableDefs\n    For Each fld In tdf.Fields\n        Debug.Print "Table=\'" & tdf.name & "\'  Field=\'" & fld.name & "\'"\n\n    Next fld\n\nNext tdf\n\nEnd Sub\n']], ['sql statement to return all fields from all tables'], 2], [(2077807, 0), [['IF you have tables  A  and  B , both with colum  C , here are the records, which are present in table  A  but not in  B :'], ['To get all the differences with a single query, a full join must be used, like this:']], [[' SELECT A.*\nFROM A\n    LEFT JOIN B ON (A.C = B.C)\nWHERE B.C IS NULL\n']], ['sql query to return differences between two tables'], 2], [(2077807, 1), [['To get all the differences with a single query, a full join must be used, like this:'], ['What you need to know in this case is, that when a record can be found in  A , but not in  B , than the columns which come from  B  will be NULL, and similarly for those, which are present in  B  and not in  A , the columns from  A  will be null.']], [[' SELECT A.*, B.*\nFROM A\n    FULL JOIN B ON (A.C = B.C)\nWHERE A.C IS NULL OR B.C IS NULL\n']], ['sql query to return differences between two tables'], 2], [(2079302, 0), [['Like this:'], ['You can also do it like this:']], [[' UPDATE contact\nSET zip = Concat(\'0\', zip)\nWHERE zip LIKE "____";\n']], ['SQL Query Question: Select all rows of n length, and then append a character'], 2], [(2079302, 1), [['You can also do it like this:'], ['-10000']], [[" UPDATE contact\nSET zip = Concat('0', zip)\nWHERE LEN(zip) = 4;\n"]], ['SQL Query Question: Select all rows of n length, and then append a character'], 2], [(2080791, 0), [["Here's a data model that might do the trick for you:"], ['Another possibility is that you could define the  Row  model as an Expando, which allows you to dynamically create properties on an entity. You could set column values only for the columns that have values in them, and that you could also add columns to the table after it has data in it and not break anything:']], [[" class Table(db.Model):\n name = db.StringProperty(required=True)\n owner = db.UserProperty()\n column_names = db.StringListProperty()\n\nclass Row(db.Model):\n values = db.ListProperty(yourtype)\n table = db.ReferenceProperty(Table, collection_name='rows')\n"]], ['Best database design (model) for user tables'], 2], [(2080791, 1), [['Another possibility is that you could define the  Row  model as an Expando, which allows you to dynamically create properties on an entity. You could set column values only for the columns that have values in them, and that you could also add columns to the table after it has data in it and not break anything:'], ['-10000']], [[' class Row(db.Expando):\n    table = db.ReferenceProperty(Table, collection_name=\'rows\')\n\n    @staticmethod\n    def __name_for_column_index(index):\n        return "column_%d" % index\n\n    def __getitem__(self, key):\n        # Allows one to get at the columns of Row entities with\n        # subscript syntax:\n        # first_row = Row.get()\n        # col1 = first_row[1]\n        # col12 = first_row[12]\n        value = None\n        try:\n            value = self.__dict__[Row.__name_for_column_index]\n        catch KeyError:\n            # The given column is not defined for this Row\n            pass\n        return value\n\n    def __setitem__(self, key, value):\n        # Allows one to set the columns of Row entities with\n        # subscript syntax:\n        # first_row = Row.get()\n        # first_row[5] = "New values for column 5"\n\n        self.__dict__[Row.__name_for_column_index] = value\n        # In order to allow efficient multiple column changes,\n        # the put() can go somewhere else.\n        self.put()\n']], ['Best database design (model) for user tables'], 2], [(2081485, 0), [['You can use  for xml path  to concatenate the values:'], ['Sample data:']], [[" select distinct name + ', ' as [text()]\nfrom @t\nfor xml path('')\n\n-->\nElephant, Lion, Rhino, Tiger, Wolf, \n"]], ['how to select distinct and concatenate in sql'], 2], [(2081485, 1), [['Sample data:'], ['-10000']], [[" declare @t table (name varchar(max), id int)\ninsert into @t \nselect 'Tiger', 50\nunion all select 'Wolf', 4\nunion all select 'Tiger', 53\nunion all select 'Lion', 55\nunion all select 'Elephant', 54\nunion all select 'Rhino', 52\nunion all select 'Lion', 5\n"]], ['how to select distinct and concatenate in sql'], 2], [(2083180, 0), [['Try:'], ['Non CTE equivalent:']], [[" WITH rows AS (\n   SELECT t.id,\n          t.name,\n          ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY t.name) 'rank'\n     FROM TABLE t)\n  SELECT r.id,\n         MAX(CASE WHEN r.rank = 1 THEN r.name ELSE NULL END) AS Name1,\n         MAX(CASE WHEN r.rank = 2 THEN r.name ELSE NULL END) AS Name2,\n         MAX(CASE WHEN r.rank = 3 THEN r.name ELSE NULL END) AS Name3,\n         MAX(CASE WHEN r.rank = 4 THEN r.name ELSE NULL END) AS Name4,\n         MAX(CASE WHEN r.rank = 5 THEN r.name ELSE NULL END) AS Name5,\n         MAX(CASE WHEN r.rank = 6 THEN r.name ELSE NULL END) AS Name6,\n    FROM rows r\nGROUP BY r.id\n"]], ['Pivot SQL Statement'], 2], [(2083180, 1), [['Non CTE equivalent:'], ['Reference:']], [[" SELECT r.id,\n       MAX(CASE WHEN r.rank = 1 THEN r.name ELSE NULL END) AS Name1,\n       MAX(CASE WHEN r.rank = 2 THEN r.name ELSE NULL END) AS Name2,\n       MAX(CASE WHEN r.rank = 3 THEN r.name ELSE NULL END) AS Name3,\n       MAX(CASE WHEN r.rank = 4 THEN r.name ELSE NULL END) AS Name4,\n       MAX(CASE WHEN r.rank = 5 THEN r.name ELSE NULL END) AS Name5,\n       MAX(CASE WHEN r.rank = 6 THEN r.name ELSE NULL END) AS Name6,\n  FROM (SELECT t.id,\n               t.name,\n               ROW_NUMBER() OVER (PARTITION BY t.id ORDER BY t.name) 'rank'\n          FROM TABLE t) r\nGROUP BY r.id\n"]], ['Pivot SQL Statement'], 2], [(2085772, 0), [['Make sure that the following columns are indexed:'], ['Now try the following query:']], [[' explorer.booking_record.labelno\nexplorer.booking_record.bookingdate\nexplorer.booking_record.labelno\nexplorer.client.labelno\nexplorer.client.email\n']], ['Very slow SQL statement'], 2], [(2085772, 1), [['Now try the following query:'], ['-10000']], [[" select c.title, c.initial, c.surname, c.labelno, c.email, br1.bookingdate\nfrom explorer.booking_record br1\nleft outer join explorer.booking_record br2 on br2.labelno = br1.labelno\n    and br2.bookingdate >= '2010-01-01' and br2.bookingdate < '2010-01-31'\ninner join explorer.client c on c.labelno = br1.labelno and c.email <> ''\nwhere br1.bookingdate >= '2009-01-01'\n    and br1.bookingdate < '2009-01-31'\n    and br2.labelno is null\n"]], ['Very slow SQL statement'], 2], [(2085951, 0), [['-10000'], ['OR ']], [[' DELETE FROM Dependencies WHERE hasaComponentId In (YOUR OTHER QUERY);\nDELETE FROM Dependencies WHERE isaComponentId  In (YOUR OTHER QUERY);\n']], ['how would you write this sql to delete if either of two fields are in a set of values'], 2], [(2085951, 1), [['OR '], ['-10000']], [[' DELETE FROM Dependencies WHERE hasaComponentId In (YOUR OTHER QUERY) OR \n                               isaComponentId  In (YOUR OTHER QUERY);\n']], ['how would you write this sql to delete if either of two fields are in a set of values'], 2], [(2086234, 0), [['In your connection string you say'], ['Which means that the first row will be treated as the header, no matter what it contains. If you want to use F1, F2 etc, say']], [['  Excel 8.0;HDR=Yes\n']], ['Query Excel worksheet in MS-Access VBA (using ADODB recordset)'], 2], [(2086234, 1), [['Which means that the first row will be treated as the header, no matter what it contains. If you want to use F1, F2 etc, say'], ['-10000']], [[' Excel 8.0;HDR=No\n']], ['Query Excel worksheet in MS-Access VBA (using ADODB recordset)'], 2], [(2087589, 0), [['I suggest you perform all necessary calculations in Delphi so that your logic can be conceptually reduced to one of the following:'], ['These can then be expanded for your  rather unfortunate  schema as follows (using 1st 2 examples):']], [[' (DateCol > @DateVal)\n(DateCol >= @DateVal)\n(DateCol < @DateVal)\n(DateCol <= @DateVal)\n(DateCol = @DateVal)\n']], ['SQL Date Interval Algorithm'], 2], [(2087589, 1), [['These can then be expanded for your  rather unfortunate  schema as follows (using 1st 2 examples):'], ['NOTE: You need to be precise about where to use inclusive and where to use exclusive inequality operators.']], [[' (YearCol > @YearVal OR (YearCol = @YearVal AND MonthCol > @MonthVal) OR (YearCol = @YearVal AND MonthCol = @MonthVal AND DayCol > @DayVal))\n(YearCol > @YearVal OR (YearCol = @YearVal AND MonthCol > @MonthVal) OR (YearCol = @YearVal AND MonthCol = @MonthVal AND DayCol >= @DayVal))\n']], ['SQL Date Interval Algorithm'], 2], [(2087664, 0), [['-10000'], ['If you want it all in one row, you can do:']], [[' SELECT COUNT(*),  Year(pm.order_dts) as Year\nFROM dm.medications pm\nWHERE Year(pm.order_dts) between 1996 AND 2008\ngroup by Year(pm.order_dts)\n']], ['SQL Server 2008: Count Number of Keys In Multiple Date Ranges'], 2], [(2087664, 1), [['If you want it all in one row, you can do:'], ['-10000']], [[' SELECT \n    sum(case when Year(pm.order_dts) = 1996 then 1 end) as Count1996,\n    sum(case when Year(pm.order_dts) = 1997 then 1 end) as Count1997,\n    sum(case when Year(pm.order_dts) = 1998 then 1 end) as Count1998,\n    sum(case when Year(pm.order_dts) = 1999 then 1 end) as Count1999,\n    sum(case when Year(pm.order_dts) = 2000 then 1 end) as Count2000,\n    sum(case when Year(pm.order_dts) = 2001 then 1 end) as Count2001,\n    sum(case when Year(pm.order_dts) = 2002 then 1 end) as Count2002,\n    sum(case when Year(pm.order_dts) = 2003 then 1 end) as Count2003,\n    sum(case when Year(pm.order_dts) = 2004 then 1 end) as Count2004,\n    sum(case when Year(pm.order_dts) = 2005 then 1 end) as Count2005,\n    sum(case when Year(pm.order_dts) = 2006 then 1 end) as Count2006,\n    sum(case when Year(pm.order_dts) = 2007 then 1 end) as Count2007,\n    sum(case when Year(pm.order_dts) = 2008 then 1 end) as Count2008\nFROM dm.medications pm\n']], ['SQL Server 2008: Count Number of Keys In Multiple Date Ranges'], 2], [(2091399, 0), [["With that said, here's what you can do:"], ['That will produce this resultset (in my particular table):']], [[' SELECT t1.ID, t1.SomeText, t1.SomeDate,\n(\n  SELECT COUNT(*) + 1\n  FROM Table1 AS t2\n  WHERE t1.SomeText > t2.SomeText\n) as RowNumber\nFROM Table1 t1\nORDER BY t1.SomeText\n']], ['In Access97 SQL how do I return a range of rows?'], 3], [(2091399, 1), [['That will produce this resultset (in my particular table):'], ['I would make a saved query in Access (a view in a SQL Server) and then write a query like this in your application:  ']], [[' ID | SomeText             | SomeDate  | RowNumber\n10 | 4NGJN                | 1/20/2010 | 1\n11 | ABH                  | 1/20/2010 | 2\n2  | asldkfj              | 1/20/2010 | 3\n1  | asldkfjaslgh         | 1/20/2010 | 4\n7  | ewoiuhdkjnlbkjbn     | 1/20/2010 | 5\n4  | oihkjldhnlkmdfn,mn   | 1/20/2010 | 6\n3  | oihoih               | 1/20/2010 | 7\n5  | qwwern               | 1/20/2010 | 8\n8  | SKN                  | 1/20/2010 | 9\n9  | WEOIN                | 1/20/2010 | 10\n6  | wetrhn               | 1/20/2010 | 11\n12 | XDNKJ                | 1/20/2010 | 12\n']], ['In Access97 SQL how do I return a range of rows?'], 3], [(2091399, 2), [['I would make a saved query in Access (a view in a SQL Server) and then write a query like this in your application:  '], ['Of course, "5" & "11" you would pass in from your client app, and would be based on the particular page you\'re on.  (It would probably be 50 and 100 or something for you).']], [[' SELECT ID, SomeText, SomeDate, RowNumber\nFROM myView\nWHERE RowNumber > 5\n  AND RowNumber < 11\n']], ['In Access97 SQL how do I return a range of rows?'], 3], [(2093359, 0), [['To do this, I would have three tables:'], ['So you have the following tables:']], [[' Topics\n  topic_id\n  [whatever else you need to know for a topic]\nTags\n  tag_id\n  [etc]\nMap\n  topic_id\n  tag_id\n\nselect t.[whatever], tag.[whatever]\n  from topics t\n  join map m on t.topic_id = m.topic_id\n  join tags tag on tag.tag_id = m.tag_id\n  where [conditionals]\n']], ['how do i display all the tags related to all the feedbacks in one query'], 3], [(2093359, 1), [['So you have the following tables:'], ["Adapting Kevin's answer (which is supposed to work in SQL92 compliant systems):"]], [[' tbl_feedbacks\ntbl_users\ntbl_categories\ntbl_clients\ntbl_tags\ntbl_topics\ntbl_topics_tags\n']], ['how do i display all the tags related to all the feedbacks in one query'], 3], [(2093359, 2), [["Adapting Kevin's answer (which is supposed to work in SQL92 compliant systems):"], ['This should do the trick.  ']], [[' select \n[other stuff: same as in your post],\n (select tag\n  from tbl_tag tt\n  join tbl_feedbacks_tags tft on tft.tag_id = tt.tag_id\n  where tft.fk_feedbackid = tbl_feedbacks.pk_feedbackid\n  order by tag_id\n  limit 1\n  offset 0 ) as tag1,\n (select tag\n  from tbl_tag tt\n  join tbl_feedbacks_tags tft on tft.tag_id = tt.tag_id\n  where tft.fk_feedbackid = tbl_feedbacks.pk_feedbackid\n  order by tag_id\n  limit 1\n  offset 1 ) as tag2,\n (select tag\n  from tbl_tag tt\n  join tbl_feedbacks_tags tft on tft.tag_id = tt.tag_id\n  where tft.fk_feedbackid = tbl_feedbacks.pk_feedbackid\n  order by tag_id\n  limit 1\n  offset 2 ) as tag3\nfrom [same as in the OP]\n']], ['how do i display all the tags related to all the feedbacks in one query'], 3], [(2094268, 0), [["Let's start by calculating the bearing from one point to another. Given a starting point, a bearing, and a distance, the following function will return the destination point:"], ["Let's do it:"]], [[" CREATE FUNCTION [dbo].[func_MoveTowardsPoint](@start_point geography,\n                                              @end_point   geography,  \n                                              @distance    int)  /* Meters */   \nRETURNS geography\nAS\nBEGIN\n    DECLARE @ang_dist float = @distance / 6371000.0;  /* Earth's radius */\n    DECLARE @bearing  decimal(18,15);\n    DECLARE @lat_1    decimal(18,15) = Radians(@start_point.Lat);\n    DECLARE @lon_1    decimal(18,15) = Radians(@start_point.Long);\n    DECLARE @lat_2    decimal(18,15) = Radians(@end_point.Lat);\n    DECLARE @lon_diff decimal(18,15) = Radians(@end_point.Long - @start_point.Long);\n    DECLARE @new_lat  decimal(18,15);\n    DECLARE @new_lon  decimal(18,15);\n    DECLARE @result   geography;\n\n    /* First calculate the bearing */\n\n    SET @bearing = ATN2(sin(@lon_diff) * cos(@lat_2),\n                        (cos(@lat_1) * sin(@lat_2)) - \n                        (sin(@lat_1) * cos(@lat_2) * \n                        cos(@lon_diff)));\n\n    /* Then use the bearing and the start point to find the destination */\n\n    SET @new_lat = asin(sin(@lat_1) * cos(@ang_dist) + \n                        cos(@lat_1) * sin(@ang_dist) * cos(@bearing));\n\n    SET @new_lon = @lon_1 + atn2( sin(@bearing) * sin(@ang_dist) * cos(@lat_1), \n                                  cos(@ang_dist) - sin(@lat_1) * sin(@lat_2));\n\n    /* Convert from Radians to Decimal */\n\n    SET @new_lat = Degrees(@new_lat);\n    SET @new_lon = Degrees(@new_lon);\n\n    /* Return the geography result */\n\n    SET @result = \n        geography::STPointFromText('POINT(' + CONVERT(varchar(64), @new_lon) + ' ' + \n                                              CONVERT(varchar(64), @new_lat) + ')', \n                                   4326);\n\n    RETURN @result;\nEND\n"]], ['Moving a Point along a Path in SQL Server 2008'], 4], [(2094268, 1), [["Let's do it:"], ["With that in place, it's time to do some tests. Let's use the original linestring that was provided in the question, and we'll request the destination points at 350m, at 3500m and at 7000m:"]], [[' CREATE FUNCTION [dbo].[func_MoveAlongPath](@path geography, \n                                           @distance int, \n                                           @index int = 1)   \nRETURNS geography\nAS\nBEGIN\n    DECLARE @result       geography = null;\n    DECLARE @num_points   int = @path.STNumPoints();\n    DECLARE @dist_to_next float;\n\n    IF @index < @num_points\n    BEGIN\n        /* There is still at least one point further from the point @index\n           in the linestring. Find the distance to the next point. */\n\n        SET @dist_to_next = @path.STPointN(@index).STDistance(@path.STPointN(@index + 1));\n\n        IF @distance <= @dist_to_next \n        BEGIN\n            /* @dist_to_next is within this point and the next. Return\n              the destination point with func_MoveTowardsPoint(). */\n\n            SET @result = [dbo].[func_MoveTowardsPoint](@path.STPointN(@index),\n                                                        @path.STPointN(@index + 1),\n                                                        @distance);\n        END\n        ELSE\n        BEGIN\n            /* The destination is further from the next point. Subtract\n               @dist_to_next from @distance and continue recursively. */\n\n            SET @result = [dbo].[func_MoveAlongPath](@path, \n                                                     @distance - @dist_to_next,\n                                                     @index + 1);\n        END\n    END\n    ELSE\n    BEGIN\n        /* There is no further point. Our distance exceeds the length \n           of the linestring. Return the last point of the linestring.\n           You may prefer to return NULL instead. */\n\n        SET @result = @path.STPointN(@index);\n    END\n\n    RETURN @result;\nEND\n']], ['Moving a Point along a Path in SQL Server 2008'], 4], [(2094268, 2), [["With that in place, it's time to do some tests. Let's use the original linestring that was provided in the question, and we'll request the destination points at 350m, at 3500m and at 7000m:"], ['Our test returns the following results:']], [[" DECLARE @g geography;\nSET @g = geography::STGeomFromText('LINESTRING(-122.360 47.656, \n                                               -122.343 47.656, \n                                               -122.310 47.690)', 4326);\n\nSELECT [dbo].[func_MoveAlongPath](@g, 350, DEFAULT).ToString();\nSELECT [dbo].[func_MoveAlongPath](@g, 3500, DEFAULT).ToString();\nSELECT [dbo].[func_MoveAlongPath](@g, 7000, DEFAULT).ToString();\n"]], ['Moving a Point along a Path in SQL Server 2008'], 4], [(2094268, 3), [['Our test returns the following results:'], ['Note that the last distance we requested (7000m) exceeded the length of the linestring, so we were returned the last point. In this case, you can easily modify the function to return NULL, if you prefer.']], [[' POINT (-122.3553270591861 47.6560002502638)\nPOINT (-122.32676470116748 47.672728464582583)\nPOINT (-122.31 47.69)\n']], ['Moving a Point along a Path in SQL Server 2008'], 4], [(2094436, 0), [["I've been using this SQL script (which I got from someone, somewhere - can't reconstruct who it came from) for ages and it's helped me quite a bit understanding and determining the size of indices and tables:"], ['Of course, you can use another ordering criteria, e.g.']], [[" SELECT \n    t.NAME AS TableName,\n    i.name as indexName,\n    sum(p.rows) as RowCounts,\n    sum(a.total_pages) as TotalPages, \n    sum(a.used_pages) as UsedPages, \n    sum(a.data_pages) as DataPages,\n    (sum(a.total_pages) * 8) / 1024 as TotalSpaceMB, \n    (sum(a.used_pages) * 8) / 1024 as UsedSpaceMB, \n    (sum(a.data_pages) * 8) / 1024 as DataSpaceMB\nFROM \n    sys.tables t\nINNER JOIN      \n    sys.indexes i ON t.OBJECT_ID = i.object_id\nINNER JOIN \n    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id\nINNER JOIN \n    sys.allocation_units a ON p.partition_id = a.container_id\nWHERE \n    t.NAME NOT LIKE 'dt%' AND\n    i.OBJECT_ID > 255 AND   \n    i.index_id <= 1\nGROUP BY \n    t.NAME, i.object_id, i.index_id, i.name \nORDER BY \n    object_name(i.object_id) \n"]], ['How to find largest objects in a SQL Server database?'], 3], [(2094436, 1), [['Of course, you can use another ordering criteria, e.g.'], ['to get the tables with the most rows, or ']], [[' ORDER BY SUM(p.rows) DESC\n']], ['How to find largest objects in a SQL Server database?'], 3], [(2094436, 2), [['to get the tables with the most rows, or '], ['to get the tables with the most pages (8K blocks) used.']], [[' ORDER BY SUM(a.total_pages) DESC\n']], ['How to find largest objects in a SQL Server database?'], 3], [(2095415, 0), [['-10000'], ['The construction of the constraint name indicates a system generated constraint name.  For instance, if we specify NOT NULL in a table declaration.  Or indeed a primary or unique key.  For example:']], [[" select * from all_constraints\nwhere owner = '<NAME>'\nand constraint_name = 'SYS_C00381400'\n/\n"]], ['Oracle find a constraint'], 2], [(2095415, 1), [['The construction of the constraint name indicates a system generated constraint name.  For instance, if we specify NOT NULL in a table declaration.  Or indeed a primary or unique key.  For example:'], ["'C'  for check,  'P'  for primary.  "]], [[" SQL> create table t23 (id number not null primary key)\n  2  /\n\nTable created.\n\nSQL> select constraint_name, constraint_type\n  2  from user_constraints\n  3  where table_name = 'T23'\n  4  /\n\nCONSTRAINT_NAME                C\n------------------------------ -\nSYS_C00935190                  C\nSYS_C00935191                  P\n\nSQL>\n"]], ['Oracle find a constraint'], 2], [(2095912, 0), [['At the very least, if you have an  IDENTITY/AUTONUMBER , or at least a  DATE  to sort by you could'], ['Or']], [[' SELECT *\nFORM Table\nORDER BY DateColumn\n']], ['How I select a table sorted as a "Queue"?'], 2], [(2095912, 1), [['Or'], ['-10000']], [[' SELECT *\nFORM Table\nORDER BY IDColumn\n']], ['How I select a table sorted as a "Queue"?'], 2], [(2096798, 0), [['What do you mean fix?  You could just do something like this:'], ['The above was written before I saw the formating ... this I believe is what you want -- only tested on mssqlserver']], [[" SELECT name+' '+email1 as email1,\n       name+' '+email2 as email2, \n       name+' '+email3 as email3, \n       name+' '+email3 as email3, \n       ...\nFROM table\n"]], ['SQL query from flat file'], 2], [(2096798, 1), [['The above was written before I saw the formating ... this I believe is what you want -- only tested on mssqlserver'], ['-10000']], [[" declare @t table\n(\n  name varchar(max),\n  email1 varchar(max),\n  email2 varchar(max),\n  email3 varchar(max),\n  email4 varchar(max)\n)\n\ninsert into @t \n values ('name1a','email1a','email2a','email3a','email4a')\ninsert into @t  \n values ('name2b','email1b','email2b','email3b','email4b')\n\n select * from @t\n\nSELECT name, email \nFROM\n(\nSELECT name, email1, email2, email3, email4\nFROM @t) p\nUNPIVOT\n   (email FOR emails IN \n      (email1, email2, email3, email4)\n)AS unpvt\n"]], ['SQL query from flat file'], 2], [(2097482, 0), [['I like to use a Common Table Expression for that case, with a suitable ROW_NUMBER() function in it:'], ["It's that easy :-) And I get results something like this:"]], [[" WITH MaxPerUser AS\n(\n  SELECT \n    MyTableID, UserID, Counter,\n    ROW_NUMBER() OVER(PARTITION BY userid ORDER BY Counter DESC) AS 'RowNumber'\n  FROM dbo.MyTable\n)\nSELECT MyTableID, UserID, Counter \nFROM MaxPerUser\nWHERE RowNumber = 1\n"]], ['Fetch the row which has the Max value for a column in SQL Server'], 2], [(2097482, 1), [["It's that easy :-) And I get results something like this:"], ['Only one entry per user, no matter how many rows per user happen to have the same max value.']], [[' MyTableID   UserID  Counter  \n   2           1        7   \n   6           4        6\n   4          11        9\n']], ['Fetch the row which has the Max value for a column in SQL Server'], 2], [(2098817, 0), [['Something like this:'], ["Edit: This will only work in SQL 2005 and on. As we've just learned it's SQL 2000, this code instead:"]], [[" DECLARE @stillgoing bit;\nSET @stillgoing = 1;\n\nWHILE @stillgoing = 1\nBEGIN\n  DELETE TOP (100) YourTableName\n  WHERE IsObsolete = 1;\n\n  IF @@ROWCOUNT = 0\n      SET @stillgoing = 0;\n\n  CHECKPOINT /* Will encourage the log to clear if it's in Simple recovery model */\nEND\n"]], ['SQL Server: How to use Cursor to delete records'], 2], [(2098817, 1), [["Edit: This will only work in SQL 2005 and on. As we've just learned it's SQL 2000, this code instead:"], ['And... Simple Recovery Model means that the log will truncate on checkpoints, rather than only when the log is backed up.']], [[" DECLARE @stillgoing bit\nSET @stillgoing = 1\n\nSET ROWCOUNT 100\n\nWHILE @stillgoing = 1\nBEGIN\n  DELETE YourTableName\n  WHERE IsObsolete = 1\n\n  IF @@ROWCOUNT = 0\n      SET @stillgoing = 0\n\n  CHECKPOINT /* Will encourage the log to clear if it's in Simple recovery model */\nEND\n"]], ['SQL Server: How to use Cursor to delete records'], 2], [(2099240, 0), [['Use:'], ['in Postgresql, you have to do this, need to cast the boolean to integer:']], [[' UPDATE tbl SET featured = id IN (4, 10, 21);  \n']], ['MySQL conditional UPDATE using IN'], 2], [(2099240, 1), [['in Postgresql, you have to do this, need to cast the boolean to integer:'], ['-10000']], [[" update tbl set featured = (id in ('b','d'))::int\n"]], ['MySQL conditional UPDATE using IN'], 2], [(2099525, 0), [['Creating an index seems almost mandatory but it should be done  after  all the strings are in the database and before any queries are run.'], ['The SQL:']], [[" #!/usr/bin/perl\n\nuse strict; use warnings;\n\nuse DBI;\n\nmy $dbh = DBI->connect('dbi:SQLite:counter.db', undef, undef,\n    { RaiseError => 1, AutoCommit => 0 },\n);\n\nmy $sth = $dbh->prepare(q{\n    INSERT INTO strings (string) VALUES(?)\n});\n\nmy @strings = qw( 0123456789 9876543210 );\n\nfor ( 1 .. 10 ) {\n    my $val = $strings[0.5 > rand];\n    $sth->execute($val);\n}\n\n$dbh->commit;\n\nmy $result = $dbh->selectall_hashref(\n    q{SELECT string, count(string) FROM strings GROUP BY string},\n    'string',\n);\n\n$dbh->disconnect;\n\nuse Data::Dumper;\nprint Dumper $result;\n"]], ['How to count many things with SQLite under Perl?'], 2], [(2099525, 1), [['The SQL:'], ['Output:']], [[' DROP TABLE strings;\n\nCREATE TABLE strings (\n    id INTEGER PRIMARY KEY,\n    string char(10)\n);\n']], ['How to count many things with SQLite under Perl?'], 2], [(2099764, 0), [['If you just want to get status from the previous row if it is  NULL , use  LAG :'], ['Your example takes it from the last line where it was set, so you might need to do something like that:']], [[' SELECT\n  rn,\n  device_num,\n  COALESCE( status_01, LAG(status_01) OVER ( ORDER BY pri_id ) ) status_01,\n  COALESCE( status_02, LAG(status_02) OVER ( ORDER BY pri_id ) ) status_02\nFROM tt1\nORDER BY pri_id\n']], ['oracle sql to copy rows through to down below, excel like coping'], 2], [(2099764, 1), [['Your example takes it from the last line where it was set, so you might need to do something like that:'], ['-10000']], [[' SELECT\n  rn,\n  device_num,\n  COALESCE( status_01, ( SELECT MAX(status_01) KEEP( DENSE_RANK LAST ORDER BY pri_id )\n                         FROM tt1 tt1_1\n                         WHERE tt1_1.id < tt1.id\n                         AND tt1_1.status_01 IS NOT NULL ) ) status_01,\n  COALESCE( status_02, ( SELECT MAX(status_02) KEEP( DENSE_RANK LAST ORDER BY pri_id )\n                         FROM tt1 tt1_2\n                         WHERE tt1_2.id < tt1.id\n                         AND tt1_2.status_02 IS NOT NULL ) ) status_02\nFROM tt1\nORDER BY pri_id\n']], ['oracle sql to copy rows through to down below, excel like coping'], 2], [(2100008, 0), [["From my understanding, I would make a table for all the categories and store the categories' name and ID there. Next, I would create a separate table to store the additional options for each category. "], ['For example, using:']], [[' MySQL Table 1  \n----------------   \nCategory_ID int PRIMARY KEY  \nCategory_name varchar  \n\nMySQL Table 2  \n---------------- \nCategory_ID int   \nEntry_Number int PRIMARY KEY (this will keep track of which entry everything belongs to)\nAdditional_Option varchar  \nAdditional_Option_Answer varchar (this is the one that stores what your user clicks/inputs)\n']], ['Can this MySQL db be improved or is it good as it is?'], 5], [(2100008, 1), [['For example, using:'], ['It would look like this if the first user added something:']], [[' POSTER TABLE:\n- name\n- passw\n- tel\n- email\n']], ['Can this MySQL db be improved or is it good as it is?'], 5], [(2100008, 2), [['It would look like this if the first user added something:'], ['It would look like this if the second user added something:']], [[' ---------------------------------------------------------------------------------------------\nCategory_ID   |    Entry_Number    |    Additional_Options   |   Additional_Options_Answers\n---------------------------------------------------------------------------------------------\n       1      |   1                |    name                 |   doug\n       1      |   1                |    passw                |   1234\n']], ['Can this MySQL db be improved or is it good as it is?'], 5], [(2100008, 3), [['It would look like this if the second user added something:'], ["Further more, let's apply another category:"]], [[' ---------------------------------------------------------------------------------------------\nCategory_ID   |    Entry_Number    |    Additional_Options   |   Additional_Options_Answers\n---------------------------------------------------------------------------------------------\n       1      |   2                |    name                 |   Hamlet\n       1      |   2                |    passw                |   iliketurtles\n']], ['Can this MySQL db be improved or is it good as it is?'], 5], [(2100008, 4), [["Further more, let's apply another category:"], ['-10000']], [[' AREA TABLE:\n- area\n- community\n\n---------------------------------------------------------------------------------------------\n    Category_ID   |    Entry_Number    |    Additional_Options   |   Additional_Options_Answers\n    ---------------------------------------------------------------------------------------------\n           2      |   3                |    area                 |   San Francisco\n           2      |   3                |    community            |   community_name\n']], ['Can this MySQL db be improved or is it good as it is?'], 5], [(2100293, 0), [['The command you need is:'], ['However, it only works for code run from scripts, not command entered interactively.  You would create a script file like this (e.g. called  test.sql ):']], [[' SET ECHO OFF\n']], ['Clear the heading in Oracle spool'], 3], [(2100293, 1), [['However, it only works for code run from scripts, not command entered interactively.  You would create a script file like this (e.g. called  test.sql ):'], ['Then in SQL Plus run it like this:']], [[' SET HEADING OFF FEEDBACK OFF ECHO OFF PAGESIZE 0\nSPOOL D:\\TEST.TXT \nSELECT SYSDATE FROM DUAL; \nSPOOL OFF\n']], ['Clear the heading in Oracle spool'], 3], [(2100293, 2), [['Then in SQL Plus run it like this:'], ['I added PAGESIZE 0 to the SET command to remove the blank line you otherwise get before the date in the output file.']], [[' SQL> @test\n']], ['Clear the heading in Oracle spool'], 3], [(2101536, 0), [['-10000'], ['More efficiently, though, will be to make it in a  UNION :']], [[' SELECT  *\nFROM    users\nORDER BY\n        u.id = 872 DESC, RANDOM()\nLIMIT 5\n']], ['Selecting 5 rows from a table, but one row is specifically specified'], 2], [(2101536, 1), [['More efficiently, though, will be to make it in a  UNION :'], ['-10000']], [[' SELECT  *\nFROM    users\nWHERE   id = 872\nUNION ALL\nSELECT  *\nFROM    (\n        SELECT  *\n        FROM    user\n        WHERE   id <> 872\n        LIMIT 4\n        ) q\n']], ['Selecting 5 rows from a table, but one row is specifically specified'], 2], [(2102498, 0), [['Write an expression that will return the first alphabetical character, then just Order By [that expression]  '], ['If you want the rows sorted by the entire city name, and not just by the first character (as question title specifies) then use this:']], [["   Order By substring(LTrim(\n           Replace(Replace(Replace(Replace(Replace(\n           Replace(Replace(Replace(Replace(Replace(\n             colname, '1', ''),'2',''),'3',''),'4,''),'5', ''),\n                      '6',''),'7',''),'8',''),'9',''),'0',''))\n                   1,1)\n"]], ['Ordering by the first alphabetical char in a column in MYSQL'], 2], [(2102498, 1), [['If you want the rows sorted by the entire city name, and not just by the first character (as question title specifies) then use this:'], ["Above is a guess (I haven't tried it), but the idea is first delete all numeric characters from the column value, then take the first character of whatever is remaining.  "]], [["   Order By LTrim(\n           Replace(Replace(Replace(Replace(Replace(\n           Replace(Replace(Replace(Replace(Replace(\n             colname, '1', ''),'2',''),'3',''),'4,''),'5', ''),\n                      '6',''),'7',''),'8',''),'9',''),'0','')) \n"]], ['Ordering by the first alphabetical char in a column in MYSQL'], 2], [(2103879, 0), [['This script generates a list of all table privileges granted to roles...'], ["Note that I don't restrict the grantee roles, because your question is vague on that point.  You may need to add a filter to the sub_query on dba_roles .  If you have roles granted to other roles you will want to pick those up too ..."]], [[" select 'grant '||privilege||' on '||owner||'.'||table_name||' to '||grantee\n         ||case when grantable = 'YES' then ' with grant option' else null end\n         ||';'\nfrom dba_tab_privs\nwhere owner in ('A', 'B')\nand grantee in ( select role from dba_roles )\norder by grantee, owner\n/\n"]], ['Regenerate GRANTs for roles across schemas'], 5], [(2103879, 1), [["Note that I don't restrict the grantee roles, because your question is vague on that point.  You may need to add a filter to the sub_query on dba_roles .  If you have roles granted to other roles you will want to pick those up too ..."], ['To get your list of roles ...']], [[" select 'grant '||granted_role||' to '||grantee\n         ||case when admin_option = 'YES' then ' with admin option' else null end\n         ||';'\nfrom dba_role_privs\nwhere grantee in ( select role from dba_roles )\norder by grantee, granted_role\n/\n"]], ['Regenerate GRANTs for roles across schemas'], 5], [(2103879, 2), [['To get your list of roles ...'], ["Note that these scripts don't generate grants for system privileges.  Also, life is slightly more complicated if you use directory objects because that requires an additional key word..."]], [[" select 'create role '||role ||';'\nfrom dba_roles\nwhere role like '%PROXY'\n/\n"]], ['Regenerate GRANTs for roles across schemas'], 5], [(2103879, 3), [["Note that these scripts don't generate grants for system privileges.  Also, life is slightly more complicated if you use directory objects because that requires an additional key word..."], ['In 9i Oracle introduced the DBMS_METADATA package which wraps up a lot of these sorts of queries in a simple PL/SQL API.  For instance, this call will prorduces a CLOB with all the object privileges granted to A ...']], [[" select 'grant '||privilege||' on '||owner||'.'||table_name||' to '||grantee\n         ||case when grantable = 'YES' then ' with grant option' else null end\n         ||';'\nfrom dba_tab_privs\nwhere owner in ('A', 'B')\nand grantee in ( select role from dba_roles )\nand table_name not in ( select directory_name from dba_directories )\nunion all\nselect 'grant '||privilege||' on directory '||table_name||' to '||grantee\n         ||case when grantable = 'YES' then ' with grant option' else null end\n         ||';'\nfrom dba_tab_privs\nwhere grantee in ( select role from dba_roles )\nand table_name  in ( select directory_name from dba_directories )\n/\n"]], ['Regenerate GRANTs for roles across schemas'], 5], [(2103879, 4), [['In 9i Oracle introduced the DBMS_METADATA package which wraps up a lot of these sorts of queries in a simple PL/SQL API.  For instance, this call will prorduces a CLOB with all the object privileges granted to A ...'], ['This is obviously a lot simpler than rolling our own.']], [[" select dbms_metadata.get_granted_ddl('OBJECT_GRANT', 'A') from dual\n/\n"]], ['Regenerate GRANTs for roles across schemas'], 5], [(2104206, 0), [['I had to change the query itself to:'], ["Then in my Dao only needed to use  Spring's JdbcTemplate update method . It looks something like this:"]], [[' BEGIN \n  UPDATE jasper_report SET Uri = ? WHERE ReportId = ? \n  IF @@ROWCOUNT = 0 AND EXISTS(SELECT 1 FROM report WHERE Id = ?) \n  BEGIN \n       INSERT INTO jasper_report  (ReportId, Uri) VALUES (?, ?) \n  END \nEND\n']], ['Spring Jdbc query execution'], 2], [(2104206, 1), [["Then in my Dao only needed to use  Spring's JdbcTemplate update method . It looks something like this:"], ['-10000']], [[' @Repository("jasperReportsDao")\npublic class JasperReportsDaoImpl extends JdbcTemplate implements JasperReportsDao {\n\n    @Override\n    public void saveJasperReport(JasperReport report) {\n        // If a record already exists, do an update, otherwise, do an insert\n        int rowsAffected = this.update(UPSERT_JASPER_REPORT, new Object[] { report.getUri(), report.getId(),\n                               report.getId(), report.getId(), report.getUri()} );\n\n        if(log.isDebugEnabled()) { log.debug("Rows affected: " + rowsAffected); }\n    }\n}\n']], ['Spring Jdbc query execution'], 2], [(2105571, 0), [["Then for the extra info that you are talking about wanting to capture, just this extra info s would go in a separate 'audit' like table. In our case we have made this extra table quite generic and it can hold this audit info for any table... see below how it works..."], ['Now if you have other entities you want to capture (like Location - where Location is a table) as well it would look like this...']], [[' Event\nEventId   EventName   ...   Deleted\n1         Dinner            0\n2         Supper            1\n3         Lunch             0\n4         Lunch             1\n\nAudit\nAuditId    EntityTypeId     EntityId    ActionTypeId    ActionDateTime   ... etc \n1          1 (Event)        2 (EventId) 1 (Deleted)     2/1/2010 12:00:00\n1          1 (Event)        4 (EventId) 1 (Deleted)     3/1/2010 12:00:00\n']], ['Designing archive in database. Some patterns maybe?'], 3], [(2105571, 1), [['Now if you have other entities you want to capture (like Location - where Location is a table) as well it would look like this...'], ['Then when you want to get out the extra audit data you are talking about its quite simple. The query would look something like this']], [[' Audit\nAuditId    EntityTypeId     EntityId    ActionTypeId    ActionDateTime   ... etc \n1          1 (Event)        2 (EventId) 1 (Deleted)     1/1/2010 12:00:00\n1          1 (Event)        4 (EventId) 1 (Deleted)     2/1/2010 12:00:00\n1          2 (Event)        2 (LocationId) 1 (Deleted)     3/1/2010 12:00:00\n1          2 (Event)        8 (LocationId) 1 (Deleted)     4/1/2010 12:00:00\n1          2 (Event)        9 (LocationId) 1 (Deleted)     5/1/2010 12:00:00\n']], ['Designing archive in database. Some patterns maybe?'], 3], [(2105571, 2), [['Then when you want to get out the extra audit data you are talking about its quite simple. The query would look something like this'], ['Also this audit table can capture other events and not just deletes... This is done via using the ActionTypeId column. At the moment it just has 1 (which is delete), but you could have others as well.']], [[' SELECT  *\nFROM    Event E\n        INNER JOIN Audit A\n            ON E.EventId = A.EntityId \nWHERE   E.Deleted = 1\n        AND A.EntityTypeId = 1 -- Where 1 stands for events\n']], ['Designing archive in database. Some patterns maybe?'], 3], [(2105719, 0), [['Make Master 1 only auto-increment odd numbers by adding this to my.cnf under [mysqld]:'], ['Make Master 2 only auto-increment even numbers by adding this to my.cnf under [mysqld]:']], [[' auto_increment_increment= 2\nauto_increment_offset   = 1\n']], ['In a master-master setup, what command or files do I edit so that it can auto-increment by 2?'], 2], [(2105719, 1), [['Make Master 2 only auto-increment even numbers by adding this to my.cnf under [mysqld]:'], ['-10000']], [[' auto_increment_increment= 2\nauto_increment_offset   = 2\n']], ['In a master-master setup, what command or files do I edit so that it can auto-increment by 2?'], 2], [(2105886, 0), [['Have three tables:'], ['Whenever you list the contents of the list that you have the id for, you do a SELECT something like:']], [[' NOTE: _id, title, details\n\nLIST: _id, listname\n\nNOTES_IN_LIST: note_id, list_id\n']], ['How to link SQL database entries?'], 3], [(2105886, 1), [['Whenever you list the contents of the list that you have the id for, you do a SELECT something like:'], ['or']], [[' SELECT title, details\nfrom NOTE\nwhere NOTE._id in (\n    SELECT note_id from NOTES_IN_LIST\n    where list_id=<your list id>\n)\n']], ['How to link SQL database entries?'], 3], [(2105886, 2), [['or'], ['Hmm, to transfer old notes to new structure, I would:']], [[' SELECT title, details\nfrom NOTE, NOTES_IN_LIST\nwhere\n    NOTE._id=NOTES_IN_LIST.note_id\n    and\n    NOTES_IN_LIST.list_id=<your list id>\n']], ['How to link SQL database entries?'], 3], [(2106047, 0), [['-10000'], ['-10000']], [[" SELECT b.naam,\n       b.stigl\n  FROM BANDPLUSRATING b\n WHERE b.naam NOT IN (SELECT r.naam\n                        FROM RATINGS r\n                       WHERE r.fullname LIKE 'Obama')\n"]], ['How can i make this MySQL query work?'], 3], [(2106047, 1), [['-10000'], ['-10000']], [[" SELECT b.naam,\n       b.stigl\n  FROM BANDPLUSRATING b\n WHERE NOT EXISTS(SELECT NULL\n                    FROM RATINGS r\n                   WHERE r.naam = b.naam\n                     AND r.fullname LIKE 'Obama')\n"]], ['How can i make this MySQL query work?'], 3], [(2106047, 2), [['-10000'], ['-10000']], [["    SELECT b.naam,\n          b.stigl\n     FROM BANDPLUSRATING b\nLEFT JOIN RATINGS r ON r.naam = b.naam\n                   AND r.fullname LIKE 'Obama'\n    WHERE r.naam IS NULL\n"]], ['How can i make this MySQL query work?'], 3], [(2108187, 0), [['There are probably a few ways to optimise the sub-queries, but without using  case  statements or sub-optimal join clauses:'], ['Output:']], [[" select\n        *\n    from\n        (\n            select\n                    selection.CarId,\n                    selection.Colour,\n                    selection.Weight,\n                    selection.Type,\n                    3 as Relevance\n                from\n                    tblCars as selection\n                where\n                    selection.Colour = 'black' and selection.Weight = 'light' and selection.Type = 'van'\n            union all\n            select\n                    cars.CarId,\n                    cars.Colour,\n                    cars.Weight,\n                    cars.Type,\n                    count(*) as Relevance\n                from\n                    tblCars as cars\n                inner join\n                    (\n                        select\n                                byColour.CarId\n                            from\n                                tblCars as cars\n                            inner join\n                                tblCars as byColour\n                            on\n                                cars.Colour = byColour.Colour\n                            where\n                                cars.Colour = 'black' and cars.Weight = 'light' and cars.Type = 'van'\n                                and\n                                byColour.CarId <> cars.CarId\n                        union all\n                        select\n                                byWeight.CarId\n                            from\n                                tblCars as cars\n                            inner join\n                                tblCars as byWeight\n                            on\n                                cars.Weight = byWeight.Weight\n                            where\n                                cars.Colour = 'black' and cars.Weight = 'light' and cars.Type = 'van'\n                                and\n                                byWeight.CarId <> cars.CarId\n                        union all\n                        select\n                                byType.CarId\n                            from\n                                tblCars as cars\n                            inner join\n                                tblCars as byType\n                            on\n                                cars.Type = byType.Type\n                            where\n                                cars.Colour = 'black' and cars.Weight = 'light' and cars.Type = 'van'\n                                and\n                                byType.CarId <> cars.CarId\n                    ) as matches\n                on\n                    cars.CarId = matches.CarId\n                group by\n                    cars.CarId,\n                    cars.Colour,\n                    cars.Weight,\n                    cars.Type\n        ) as results\n    order by\n        Relevance desc\n"]], ['SQL : find rows and sort according to number of matching columns?'], 2], [(2108187, 1), [['Output:'], ['-10000']], [[' CarId   Colour  Weight  Type    Relevance\n1       black   light   van     3\n3       white   light   van     2\n4       blue    light   van     2\n5       black   medium  van     2\n6       white   medium  van     1\n7       blue    medium  van     1\n8       black   heavy   limo    1\n']], ['SQL : find rows and sort according to number of matching columns?'], 2], [(2109168, 0), [['I have just tested this using  C# 2008, Sql Server 2005  using Code as below and  it did rollback .'], ['Database code']], [[' SqlConnection con = new SqlConnection("server=svr;database=db;uid=user;pwd=pw;Connect Timeout=900");\nSqlCommand cmd = con.CreateCommand();\ncmd.CommandType = CommandType.StoredProcedure;\ncmd.CommandText = "MySp";\ncon.Open();\nSqlTransaction trans = con.BeginTransaction();\ncmd.Transaction = trans;\ncmd.ExecuteNonQuery();\ntrans.Rollback();  // or trans.Commit()\ncon.Close();\n']], ['ADO.NET Transaction and SQL Server 2008 Transaction'], 2], [(2109168, 1), [['Database code'], ['-10000']], [[' CREATE TABLE [dbo].[TEST](\n    [Val] [int] NULL\n)\n\nALTER PROCEDURE MySp\nAS \nBEGIN\n    BEGIN TRANSACTION T1\n    INSERT INTO TEST SELECT 1\n    COMMIT TRANSACTION T1\nEND\n']], ['ADO.NET Transaction and SQL Server 2008 Transaction'], 2], [(2112891, 0), [['Use solution #1 if you want the most portable SQL that will work on a wide variety of other brands of RDBMS (i.e. not all brands support  rownum ):'], ['Use solution #3 if you want the most efficient solution for Oracle:']], [[' select date from table where id in (select max(id) from table);\n']], ['How does sql optimization work internally?'], 3], [(2112891, 1), [['Use solution #3 if you want the most efficient solution for Oracle:'], ['Note that solution #2 doesn\'t always give the right answer, because it returns the "first" two rows  before  it has sorted them by  id .  If this happens to return the rows with the highest  id  values, it\'s only by coincidence.']], [[' select date from (select date from table order by id desc) where rownum < 2;\n']], ['How does sql optimization work internally?'], 3], [(2112891, 2), [['Note that solution #2 doesn\'t always give the right answer, because it returns the "first" two rows  before  it has sorted them by  id .  If this happens to return the rows with the highest  id  values, it\'s only by coincidence.'], ["Regarding the more complex queries #4 and #5 that give such a high cost, I agree I wouldn't recommend using them for such a simple task as fetching the row with the highest  id .  But understanding how to use subquery factoring and self-joins can be useful for solving other more complex types of queries, where the simple solutions simply don't do the job.  "]], [[' select date from table where rownum < 2 order by id desc;\n']], ['How does sql optimization work internally?'], 3], [(2113474, 0), [['Here is what a join would look like:'], ['I would use:']], [[' SELECT body \nFROM node_revisions nr\nINNER JOIN node n\n  ON nr.vid = n.vid\nWHERE n.nid = 4\n']], ['SQL: Is a query like this OK or is there a more efficient way of doing it, like using a join?'], 2], [(2113474, 1), [['I would use:'], ["Is this more readable or understandable? In this case, it's a matter of personal preference."]], [[' SELECT body \nFROM node_revisions \nWHERE vid IN (SELECT vid \n             FROM node \n             WHERE nid = 4);\n']], ['SQL: Is a query like this OK or is there a more efficient way of doing it, like using a join?'], 2], [(2114543, 0), [['We use this to drop all the objects in our database:'], ['We use this to recreate our database (assuming the dbScriptFolder contains .sql files that will create all the tables, views, stored procs, etc):']], [[' private static void DropDatabaseObjects()\n    {\n        var dropDatabaseObjects =\n            @"\n                    /* Drop all non-system stored procs */\n                    DECLARE @name VARCHAR(128)\n                    DECLARE @constraint VARCHAR(254)\n                    DECLARE @SQL VARCHAR(254)\n                    SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = \'P\' AND category = 0 ORDER BY [name])\n                    WHILE @name is not null\n                    BEGIN\n                        SELECT @SQL = \'DROP PROCEDURE [dbo].[\' + RTRIM(@name) +\']\'\n                        EXEC (@SQL)\n                        PRINT \'Dropped Procedure: \' + @name\n                        SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = \'P\' AND category = 0 AND [name] > @name ORDER BY [name])\n                    END\n\n                    /* Drop all views */\n                    SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = \'V\' AND category = 0 ORDER BY [name])\n                    WHILE @name IS NOT NULL\n                    BEGIN\n                        SELECT @SQL = \'DROP VIEW [dbo].[\' + RTRIM(@name) +\']\'\n                        EXEC (@SQL)\n                        PRINT \'Dropped View: \' + @name\n                        SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = \'V\' AND category = 0 AND [name] > @name ORDER BY [name])\n                    END\n\n                    /* Drop all functions */\n                    SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] IN (N\'FN\', N\'IF\', N\'TF\', N\'FS\', N\'FT\') AND category = 0 ORDER BY [name])\n                    WHILE @name IS NOT NULL\n                    BEGIN\n                        SELECT @SQL = \'DROP FUNCTION [dbo].[\' + RTRIM(@name) +\']\'\n                        EXEC (@SQL)\n                        PRINT \'Dropped Function: \' + @name\n                        SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] IN (N\'FN\', N\'IF\', N\'TF\', N\'FS\', N\'FT\') AND category = 0 AND [name] > @name ORDER BY [name])\n                    END                        \n\n                    /* Drop all Foreign Key constraints */\n                    SELECT @name = (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = \'FOREIGN KEY\' ORDER BY TABLE_NAME)\n                    WHILE @name is not null\n                    BEGIN\n                        SELECT @constraint = (SELECT TOP 1 CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = \'FOREIGN KEY\' AND TABLE_NAME = @name ORDER BY CONSTRAINT_NAME)\n                        WHILE @constraint IS NOT NULL\n                        BEGIN\n                            SELECT @SQL = \'ALTER TABLE [dbo].[\' + RTRIM(@name) +\'] DROP CONSTRAINT \' + RTRIM(@constraint)\n                            EXEC (@SQL)\n                            PRINT \'Dropped FK Constraint: \' + @constraint + \' on \' + @name\n                            SELECT @constraint = (SELECT TOP 1 CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = \'FOREIGN KEY\' AND CONSTRAINT_NAME <> @constraint AND TABLE_NAME = @name ORDER BY CONSTRAINT_NAME)\n                        END\n                    SELECT @name = (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = \'FOREIGN KEY\' ORDER BY TABLE_NAME)\n                    END\n\n                    /* Drop all Primary Key constraints */\n                    SELECT @name = (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = \'PRIMARY KEY\' ORDER BY TABLE_NAME)\n                    WHILE @name IS NOT NULL\n                    BEGIN\n                        SELECT @constraint = (SELECT TOP 1 CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = \'PRIMARY KEY\' AND TABLE_NAME = @name ORDER BY CONSTRAINT_NAME)\n                        WHILE @constraint is not null\n                        BEGIN\n                            SELECT @SQL = \'ALTER TABLE [dbo].[\' + RTRIM(@name) +\'] DROP CONSTRAINT \' + RTRIM(@constraint)\n                            EXEC (@SQL)\n                            PRINT \'Dropped PK Constraint: \' + @constraint + \' on \' + @name\n                            SELECT @constraint = (SELECT TOP 1 CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = \'PRIMARY KEY\' AND CONSTRAINT_NAME <> @constraint AND TABLE_NAME = @name ORDER BY CONSTRAINT_NAME)\n                        END\n                    SELECT @name = (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = \'PRIMARY KEY\' ORDER BY TABLE_NAME)\n                    END\n\n                    /* Drop all tables */\n                    SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = \'U\' AND category = 0 ORDER BY [name])\n                    WHILE @name IS NOT NULL\n                    BEGIN\n                        SELECT @SQL = \'DROP TABLE [dbo].[\' + RTRIM(@name) +\']\'\n                        EXEC (@SQL)\n                        PRINT \'Dropped Table: \' + @name\n                    SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = \'U\' AND category = 0 AND [name] > @name ORDER BY [name])\n                    END";\n        using (var connection = new SqlConnection(GetConnectionStringFromHibernateConfiguration("hibernate.cfg.xml")))\n        using (var command = new SqlCommand(dropDatabaseObjects, connection))\n        {\n            connection.Open();\n            command.ExecuteNonQuery();\n            connection.Close();\n        }\n    }\n']], ['SQL Server database creation scripts in Visual Studio'], 2], [(2114543, 1), [['We use this to recreate our database (assuming the dbScriptFolder contains .sql files that will create all the tables, views, stored procs, etc):'], ["These methods get called in a base testfixture method for when we run our integration tests so we know we're working with our database in a known state. "]], [[' private static void RecreateDatabase()\n    {\n        var directoryInfo = new DirectoryInfo(ConfigurationManager.AppSettings["dbScriptFolder"]);\n        using (var connection = new SqlConnection(GetConnectionStringFromHibernateConfiguration("hibernate.cfg.xml")))\n        {\n            connection.Open();\n            foreach (var fileInfo in directoryInfo.GetFiles())\n            {\n                if (fileInfo.Extension == ".sql")\n                {\n                    var script = ReadFromFile(fileInfo);\n                    var server = new Server(new ServerConnection(connection));\n                    server.ConnectionContext.ExecuteNonQuery(script);\n                }\n            }\n            connection.Close();\n        }\n    }\n']], ['SQL Server database creation scripts in Visual Studio'], 2], [(2115535, 0), [['Here is how you could do it.  Given a table CUSTOMERS with a business key of CUSTOMER_REF I might normally build it like this (I am using abbreviated syntax rather than best practice for reasons of space):'], ['The versioned equivalent would look like this:']], [[' create table customers \n( id number not null primary key\n  , customer_ref number not null unique key\n  , name varchar2(30) not null )\n/\n']], ['Oracle Data Versioning/Partitioning Strategies/Best Practices'], 3], [(2115535, 1), [['The versioned equivalent would look like this:'], ['Thinking about this makes discreet tables for each version seem very attractive.  For ease of use I would keep the current version un-prefixed, so that archiving becomes a process simply of ']], [[' create table customers \n( id number not null primary key\n  , customer_ref number not null \n  , version_number number\n  , name varchar2(30) not null\n  , constraint whatever unique (customer_ref, version_number) )\n/\n']], ['Oracle Data Versioning/Partitioning Strategies/Best Practices'], 3], [(2115535, 2), [['Thinking about this makes discreet tables for each version seem very attractive.  For ease of use I would keep the current version un-prefixed, so that archiving becomes a process simply of '], ["You might want to avoid downtime while creating the versioned tables. In that case you could use materialized views to capture the tables' state during the run-up to the archival switchover.  When the clock strikes twelve you can switch off the refresh.  (caveat: this is thinking on the fly, I have never done anything like this so try before you buy.)"]], [[' create table customers_n as select * from customers; \n']], ['Oracle Data Versioning/Partitioning Strategies/Best Practices'], 3], [(2115546, 0), [['Cast to bit?'], ['But can you not rewrite the query thus to avoid the subquery:']], [[' SELECT  Name,\n        CAST(\n        COALESCE(\n        (\n        SELECT  TOP 1 0\n        FROM    TbUserParam\n        WHERE   TbUserParam.ID_User = @ID_User\n                AND TbUserParam.ID_Param = CfgListParIzm.ID_ListParIzm\n        ), 1) as bit) Visi\nFROM    CfgListParIzm\nWHERE   CfgListParIzm.ID_ListGroupParIzm = @ID_ListGroupParIzm\n']], ['SQL [Conversion to bool]'], 2], [(2115546, 1), [['But can you not rewrite the query thus to avoid the subquery:'], ['-10000']], [[' SELECT\n    C.Name,\n    CAST(CASE WHEN T2.ID_Param IS NULL THEN 0 ELSE 1 END as bit) AS Visi\nFROM\n    CfgListParIzm C\n    LEFT JOIN\n    (\n    SELECT\n        T.ID_Param\n    FROM\n        TbUserParam T\n    WHERE\n        T.ID_User = @ID_User\n    ) T2 On T2.ID_Param = C.ID_ListParIzm\nWHERE\n    C.ID_ListGroupParIzm = @ID_ListGroupParIzm\n']], ['SQL [Conversion to bool]'], 2], [(2117708, 0), [['Dump you database schema (the -s tag) to a file:'], ['Delete the database:']], [[' pg_dump -s -f db.dump DB-NAME\n']], ['How to empty a SQL database?'], 5], [(2117708, 1), [['Delete the database:'], ['Recreate it:']], [[' dropdb DB-NAME\n']], ['How to empty a SQL database?'], 5], [(2117708, 2), [['Recreate it:'], ['Restore the schema only:']], [[' createdb DB-NAME\n']], ['How to empty a SQL database?'], 5], [(2117708, 3), [['Restore the schema only:'], ['Following comments, you might want to skip the  dropdb  command, and simply create another database with the dumped schema. If all went through well, you can drop the old database:']], [[' pg_restore db.dump > psql DB-NAME\n']], ['How to empty a SQL database?'], 5], [(2117708, 4), [['Following comments, you might want to skip the  dropdb  command, and simply create another database with the dumped schema. If all went through well, you can drop the old database:'], ["At this point, you have the full database at DB-NAME, and an empty schema at DB-NEW-NAME. after you're sure everything is OK, use  dropdb DB-NAME ."]], [[' pg_dump -s -f db.dump DB-NAME\ncreatedb DB-NEW-NAME\npg_restore db.dump > psql DB-NEW-NAME\n']], ['How to empty a SQL database?'], 5], [(2119049, 0), [['-10000'], ['In  Oracle 10g , more efficient:']], [[' UPDATE   operators o\nSET      user_id = \n         (\n         SELECT  u.user_id\n         FROM    users u\n         WHERE   o.op_name = u.name\n         )\nWHERE    o.op_name IN\n         (\n         SELECT  name\n         FROM    users\n         )\n']], ['Oracle UPDATE Question'], 2], [(2119049, 1), [['In  Oracle 10g , more efficient:'], ['-10000']], [[' MERGE\nINTO    operators o\nUSING   users u\nON      (u.name = o.op_name)\nWHEN MATCHED THEN\nUPDATE\nSET     user_id = u.user_id\n']], ['Oracle UPDATE Question'], 2], [(2121399, 0), [["Let's say you expect  agent  and  agency  to match, but  customer  and  company  might not.  This isn't too difficult:"], ["If you only expect a few different kinds of partial matches, you can write a few different queries similar to the one above and put them together with a  UNION  (or  UNION ALL  if you don't mind duplicates).  In other words:"]], [[" SELECT\n    i.agent, i.agency, i.customer, i.company, p.customer, p.company,\n    CASE\n        WHEN i.customer = p.Customer THEN 'Y'\n        ELSE 'N'\n    END AS matchescustomer,\n    CASE\n        WHEN i.company = p.Company THEN 'Y'\n        ELSE 'N'\n    END AS matchescompany\nFROM table1 i\nINNER JOIN table2 p\n    ON p.agent = i.agent\n    AND p.agency = i.agency\n"]], ['SQL Help: Find which columns caused the mismatch'], 3], [(2121399, 1), [["If you only expect a few different kinds of partial matches, you can write a few different queries similar to the one above and put them together with a  UNION  (or  UNION ALL  if you don't mind duplicates).  In other words:"], ["Now if you're looking to get  every conceivable mismatch , then this is quickly going to get out of control, so you might want to adapt a more heuristic method, and search for partial matches that match  at least  a certain number of columns (say 3).  Then you can restrict the obnoxiousness to at most the number of columns you have to compare:"]], [[' SELECT (columns)\nFROM table1 i INNER JOIN table2 p\n    ON p.agent = i.agent AND p.agency = i.agency\nUNION\nSELECT (columns)\nFROM table1 i INNER JOIN table2 p\n    ON p.agent = i.agent AND p.customer = i.customer\n']], ['SQL Help: Find which columns caused the mismatch'], 3], [(2121399, 2), [["Now if you're looking to get  every conceivable mismatch , then this is quickly going to get out of control, so you might want to adapt a more heuristic method, and search for partial matches that match  at least  a certain number of columns (say 3).  Then you can restrict the obnoxiousness to at most the number of columns you have to compare:"], ["Now, having said all this, there's one thing I'm wondering..."]], [[" ;WITH PartialMatches_CTE AS\n(\n    SELECT i.agent AS iagent, p.agent AS pagent, ... (etc.)\n    FROM table1 i INNER JOIN table2 p ON p.agent = i.agent\n    UNION ALL\n    SELECT (...) FROM table1 INNER JOIN table2 ON p.agency = i.agency\n    UNION ALL\n    SELECT (...) FROM table1 INNER JOIN table2 ON p.company = i.company\n    ... and so on\n),\nResolvedMatches_CTE AS\n(\n    SELECT DISTINCT\n        iagent, pagent, iagency, pagency, ...,\n        CASE WHEN pagent = iagent THEN 'Y' ELSE 'N' END AS agentmatch,\n        CASE WHEN pagency = iagency THEN 'Y' ELSE 'N' END AS agencymatch,\n        ...,\n        (CASE WHEN pagent = iagent THEN 1 ELSE 0 END +\n         CASE WHEN pagency = iagency THEN 1 ELSE 0 END +\n         ...) AS MatchCount\n    FROM PartialMatches_CTE\n)\nSELECT *\nFROM ResolvedMatches_CTE\nWHERE MatchCount >= 3\n"]], ['SQL Help: Find which columns caused the mismatch'], 3], [(2122205, 0), [['Use:'], ['To make sure things are working properly, run:']], [[' UPDATE HOTELS\n   SET dspartners = (SELECT x.dspartnerid\n                       FROM (SELECT hsm.dspartnerid,\n                                    ROW_NUMBER() OVER(PARTITION BY hsm.hotelid \n                                                      ORDER BY p.priority, p.name DESC) AS rank\n                               FROM HOTELSOURCEMAP hsm\n                               JOIN DSPARTNER p ON p.dspartnerid = hsm.dspartnerid\n                              WHERE hsm.hotelid = hotelid) x\n                      WHERE x.rank = 1)\n']], ['please help me to create a sql query'], 2], [(2122205, 1), [['To make sure things are working properly, run:'], ["Replace the  ?  with any hotelid of your choice. \nIt will only return one  dspartnerid  value, even if there were more than one  dspartnerid 's with the same high priority. "]], [[' SELECT x.dspartnerid\n  FROM (SELECT hsm.dspartnerid,\n               ROW_NUMBER() OVER(PARTITION BY hsm.hotelid \n                                 ORDER BY p.priority, p.name DESC) AS rank\n          FROM HOTELSOURCEMAP hsm\n          JOIN DSPARTNER p ON p.dspartnerid = hsm.dspartnerid\n         WHERE hsm.hotelid = ?) x\n WHERE x.rank = 1\n']], ['please help me to create a sql query'], 2], [(2122273, 0), [['To dump db to sql file you could use mysqldump command or you can do though phpmyadmin'], ['To replace text in .sql file you could do like']], [[' mysqldump --opt -uUSERNAME -pPASSWORD -h MYSQLDOMAIN YOURDB > yourdbdump.sql\n']], ['mysql: change http://old-domain.com to http://new-domain.com in all tables'], 3], [(2122273, 1), [['To replace text in .sql file you could do like'], ['To restore it back']], [[" sed -ie 's/old-domain.com/new-domain.com/g' yourdbdump.sql\n"]], ['mysql: change http://old-domain.com to http://new-domain.com in all tables'], 3], [(2122273, 2), [['To restore it back'], ['-10000']], [[' mysql -uUSERNAME -pPASSWORD -h MYSQLDOMAIN YOURDB < yourdbdump.sql\n']], ['mysql: change http://old-domain.com to http://new-domain.com in all tables'], 3], [(2123006, 0), [['With an inner join:'], ['With a left join:']], [[" select * from user as u\njoin banstatus as b on u.banStatus=b.id\n\n1, '1', 1, 'Banned'\n"]], ['inner join on null value'], 3], [(2123006, 1), [['With a left join:'], ['Using this test data:']], [[" select * from user as u\nleft join banstatus as b on u.banStatus=b.id\n\n1, '1', 1, 'Banned'\n2, 'NULL', , ''\n"]], ['inner join on null value'], 3], [(2123006, 2), [['Using this test data:'], ['-10000']], [[" CREATE TABLE user (id int, banstatus nvarchar(100));\nINSERT INTO user (id, banstatus) VALUES\n(1, '1'),\n(2, 'NULL');\n\nCREATE TABLE banstatus (id int, text nvarchar(100));\nINSERT INTO banstatus (id, text) VALUES\n(1, 'Banned');\n"]], ['inner join on null value'], 3], [(2124054, 0), [['There is nothing wrong with the way you store your products, these three tables are the right way to store that sort of relation.'], ["Replace  YOUR_CATEGORY_NAME  by the category name you search for. If you want the user to be able to enter just a part of the name, replace  WHERE c.name = 'YOUR_CATEGORY_NAME';  by"]], [[" SELECT *\nFROM Categories c\nJOIN Products_in_Categories pic ON ( pic.category_id = c.category_id )\nJOIN Products p ON ( p.id = pic.product_id )\nWHERE c.name = 'YOUR_CATEGORY_NAME';\n"]], ['MySQL querying products from one table only if they appear in certain category table'], 2], [(2124054, 1), [["Replace  YOUR_CATEGORY_NAME  by the category name you search for. If you want the user to be able to enter just a part of the name, replace  WHERE c.name = 'YOUR_CATEGORY_NAME';  by"], ['-10000']], [[" WHERE c.name LIKE '%CATEGORY_NAME_PART%;\n"]], ['MySQL querying products from one table only if they appear in certain category table'], 2], [(2124518, 0), [['Your question is a little unclear, but I guess you want this:'], ['Output for your data:']], [[' SELECT T2.* FROM (\n    SELECT color, max(area) AS area\n    FROM table1\n    GROUP BY color) AS T1\nJOIN table1 AS T2\nON T1.area = T2.area AND T1.color = T2.color\n']], ['one record from each group?'], 2], [(2124518, 1), [['Output for your data:'], ['If you want a better answer, please clarify all the questions I have posted as comments (some of them are hidden).']], [[' x1 | x2 | y1 | y2 | area | color\n 5 |  1 |  5 |  1 |    2 |     r\n 5 |  2 |  5 |  0 |    3 |     g\n 5 |  2 |  5 |  1 |    3 |     b\n']], ['one record from each group?'], 2], [(2125210, 0), [['As such, you might want to consider a schema along the lines of...'], ["For example, under this setup, to get all of the tags associated with company ID 1, you'd use..."]], [[' Company\n    id\n    ...\n    countryOfOrigin\n\nIndustries\n    id\n    description\n\nCompanyIndustriesLookup\n    companyID\n    industryID\n']], ['What sort of database design would I need to use in case I wanted users to save tags, and be able to call already used tags?'], 3], [(2125210, 1), [["For example, under this setup, to get all of the tags associated with company ID 1, you'd use..."], ['On a similar basis, to get all companies tagged with an industry of "testing", you\'d use...']], [[' SELECT Industries.description FROM (CompanyIndustriesLookup, Industries)\nWHERE companyID=1 AND industryID=Industries.ID\nORDER BY Industries.description ASC;\n']], ['What sort of database design would I need to use in case I wanted users to save tags, and be able to call already used tags?'], 3], [(2125210, 2), [['On a similar basis, to get all companies tagged with an industry of "testing", you\'d use...'], ['-10000']], [[' SELECT Company.name FROM (Company, Industries, CompanyIndustriesLookup)\nWHERE Company.id=CompanyIndustriesLookup.companyID\nAND Industries.id=CompanyIndustriesLookup.industryID\nAND Industries.description="testing"\nORDER BY Company.name ASC\n']], ['What sort of database design would I need to use in case I wanted users to save tags, and be able to call already used tags?'], 3], [(2126434, 0), [['What you can do is batch deletes like this:'], ['Or if you want to remove a very high percentage of rows...']], [[" SELECT 'Starting' --sets @@ROWCOUNT\nWHILE @@ROWCOUNT <> 0\n    DELETE TOP (xxx) MyTable WHERE ...\n"]], ['Bulk DELETE on SQL Server 2008 (Is there anything like Bulk Copy (bcp) for delete data?)'], 2], [(2126434, 1), [['Or if you want to remove a very high percentage of rows...'], ['-10000']], [[' SELECT col1, col2, ... INTO #Holdingtable\n           FROM MyTable WHERE ..opposite condition..\nTRUNCATE TABLE MyTable\nINSERT MyTable (col1, col2, ...)\n           SELECT col1, col2, ... FROM #Holdingtable\n']], ['Bulk DELETE on SQL Server 2008 (Is there anything like Bulk Copy (bcp) for delete data?)'], 2], [(2126728, 0), [['This query returns just one of the managers if there is a tie:'], ['Result of query:']], [[' SELECT T2.name FROM (\n    SELECT manager_id\n    FROM table1\n    WHERE manager_id IS NOT NULL\n    GROUP BY manager_id\n    ORDER BY count(*) DESC\n    LIMIT 1\n) AS T1\nJOIN table1 AS T2\nON T1.manager_id = T2.person_id\n']], ['What is the SQL query for finding the name of manager who supervises maximum number of employees?'], 5], [(2126728, 1), [['Result of query:'], ["Here's a query that fetches all managers with the tied maximum count in the case that there is a tie:"]], [[' Bar\n']], ['What is the SQL query for finding the name of manager who supervises maximum number of employees?'], 5], [(2126728, 2), [["Here's a query that fetches all managers with the tied maximum count in the case that there is a tie:"], ['Result of the second query:']], [[' SELECT name FROM (\n    SELECT manager_id, COUNT(*) AS C\n    FROM person\n    WHERE manager_id IS NOT NULL\n    GROUP BY manager_id) AS Counts\nJOIN (\n    SELECT COUNT(*) AS C\n    FROM person\n    WHERE manager_id IS NOT NULL\n    GROUP BY manager_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n) AS MaxCount\nON Counts.C = MaxCount.C\nJOIN person\nON Counts.manager_id = person.person_id\n']], ['What is the SQL query for finding the name of manager who supervises maximum number of employees?'], 5], [(2126728, 3), [['Result of the second query:'], ["Here's my test data:"]], [[' Foo\nBar\n']], ['What is the SQL query for finding the name of manager who supervises maximum number of employees?'], 5], [(2126728, 4), [["Here's my test data:"], ['-10000']], [[" CREATE TABLE Table1 (person_id int NOT NULL, manager_id nvarchar(100) NULL, name nvarchar(100) NOT NULL);\nINSERT INTO Table1 (person_id, manager_id, name) VALUES\n(1, NULL, 'Foo'),\n(2, '1', 'Bar'),\n(3, '1', 'Baz'),\n(4, '2', 'Qux'),\n(5, '2', 'Quux'),\n(6, '3', 'Corge');\n"]], ['What is the SQL query for finding the name of manager who supervises maximum number of employees?'], 5], [(2126926, 0), [['Here we go:'], ['And your view statement:']], [[" -- sample data, for somebody else start\nCREATE TABLE #Product\n    ( Name varchar(50), IdCurrency int, Value decimal(15,2) )\nCREATE TABLE #Currency\n    ( IdCurrency int, CurrencyID char(3) )\nCREATE TABLE #ForexExchange\n    ( IdForexExchange int, IdBaseCurrency char(3), IsActive bit)\nCREATE TABLE #ForexRates\n    ( IdForexRates int, IdForexExchange int,\n      ToCurrency char(3), ExchangeRate decimal(15,2) )\nGO\n\nINSERT INTO #Product VALUES ('Prod1', 1, 5000)\nINSERT INTO #Product VALUES ('Prod2', 2, 3000)\nINSERT INTO #Product VALUES ('Prod3', 3, 2000)\nINSERT INTO #Currency VALUES (1, 'EUR')\nINSERT INTO #Currency VALUES (2, 'USD')\nINSERT INTO #Currency VALUES (3, 'DKK')\nINSERT INTO #ForexExchange VALUES (1, 'EUR', 1)\nINSERT INTO #ForexExchange VALUES (2, 'DKK', 1)\nINSERT INTO #ForexRates VALUES (1, 1, 'AED', 2.3)\nINSERT INTO #ForexRates VALUES (2, 1, 'EGY', 1.3)\nINSERT INTO #ForexRates VALUES (3, 1, 'GBP', 2.4)\nINSERT INTO #ForexRates VALUES (4, 2, 'AED', 7.3)\nINSERT INTO #ForexRates VALUES (5, 3, 'EGY', 6.4)\nINSERT INTO #ForexRates VALUES (6, 4, 'GBP', 3.4)\nGO\n"]], ['How to create view to calculate currencies?'], 2], [(2126926, 1), [['And your view statement:'], ["I kept  WHERE  clause commented as you don't have any USD currency to show up. You shouldn't include that filter into your query, as it can be reused to display that product values in any currency:"]], [[" SELECT\n    #Product.Name,\n    #Currency.CurrencyID as FromCurrency,\n    #ForexRates.ToCurrency,\n    #ForexRates.ExchangeRate,\n    #Product.Value as OriginalValue, \n    #Product.Value * #ForexRates.ExchangeRate as CalculatedValue\nFROM\n    #Product LEFT JOIN\n    #Currency ON #Product.IdCurrency = #Currency.IdCurrency LEFT JOIN\n    #ForexExchange ON\n        IsActive = 1 AND\n        #Currency.CurrencyID = #ForexExchange.IdBaseCurrency LEFT JOIN\n    #ForexRates ON #ForexExchange.IdForexExchange = #ForexRates.IdForexExchange\n--WHERE\n--  #ForexRates.ToCurrency = 'USD'\n"]], ['How to create view to calculate currencies?'], 2], [(2127138, 0), [['With SQlite, it looks like for an autoincrement you would do '], ['In answer to your comment to get this value you would want to use SQL or OleDb code like:']], [[' SELECT last_insert_rowid()\n']], ['How to retrieve the last autoincremented ID from a SQLite table?'], 2], [(2127138, 1), [['In answer to your comment to get this value you would want to use SQL or OleDb code like:'], ['-10000']], [[' using (SqlConnection conn = new SqlConnection(connString))\n{\n    string sql = "SELECT last_insert_rowid()";\n    SqlCommand cmd = new SqlCommand(sql, conn);\n    conn.Open();\n    int lastID = (Int32) cmd.ExecuteScalar();\n}\n']], ['How to retrieve the last autoincremented ID from a SQLite table?'], 2], [(2128586, 0), [['-10000'], ['-10000']], [['  WITH usr_list AS (\n   SELECT x.user_id,\n          x.message_from_user AS other_user\n     FROM TABLE x\n   UNION\n   SELECT y.user_id,\n          y.message_to_user AS other_user\n     FROM TABLE y)\n  SELECT TOP 1\n         ul.user_id,\n         COUNT(*) AS num_friends\n    FROM usr_list ul\nGROUP BY ul.user_id\nORDER BY num_friends DESC\n']], ['Find the user with the most contact'], 2], [(2128586, 1), [['-10000'], ['-10000']], [['   SELECT TOP 1\n         ul.user_id,\n         COUNT(*) AS num_friends\n    FROM (SELECT x.user_id,\n                 x.message_from_user AS other_user\n            FROM TABLE x\n          UNION\n          SELECT y.user_id,\n                 y.message_to_user AS other_user\n            FROM TABLE y) ul\nGROUP BY ul.user_id\nORDER BY num_friends DESC\n']], ['Find the user with the most contact'], 2], [(2129076, 0), [['the format is not exactly clear, and is best done w/perl/php/python, but if you really want to use shell tools:'], ['this creates table1 and table 2 files with these contents:']], [[' cut -d , -f 1-5 file | awk -F, \'{print NR "," $0}\' > table1\n\ncut -d , -f 6- file | sed \'s,\\:,\\,,g\' | \\\n  awk -F, \'{i=1; while (i<=NF) {print NR "," $(i) "," $(i+1); i+=2;}}\' > table2\n']], ['DB load CSV into multiple tables'], 3], [(2129076, 1), [['this creates table1 and table 2 files with these contents:'], ['and']], [[' 1,tbl1.col1,tbl1.col2,tbl1.col3,tbl1.col4,tbl1.col5\n2,tbl1.col1,tbl1.col2,tbl1.col3,tbl1.col4,tbl1.col5\n3,tbl1.col1,tbl1.col2,tbl1.col3,tbl1.col4,tbl1.col5\n']], ['DB load CSV into multiple tables'], 3], [(2129076, 2), [['and'], ['-10000']], [[' 1,tbl2.col1,tbl2.col2\n1,tbl2.col1,tbl2.col2\n2,tbl2.col1,tbl2.col2\n2,tbl2.col1,tbl2.col2\n3,tbl2.col1,tbl2.col2\n3,tbl2.col1,tbl2.col2\n']], ['DB load CSV into multiple tables'], 3], [(2129878, 0), [["It's not clear, but if you want a count of unique conversations, use:"], ['...otherwise, use:']], [[' SELECT COUNT(DISTINCT m.conversation_id) AS unread\n  FROM MESSAGES m\n WHERE m.to_id = ?\n   AND m.readed = 0\n   AND m.hide_from != ?\n']], ['Re-writing this sql query'], 2], [(2129878, 1), [['...otherwise, use:'], ['-10000']], [[' SELECT COUNT(*) AS unread\n  FROM MESSAGES m\n WHERE m.to_id = ?\n   AND m.readed = 0\n   AND m.hide_from != ?\n']], ['Re-writing this sql query'], 2], [(2130131, 0), [['-10000'], ['-10000']], [[' WITH rows AS (\n  SELECT t.id,\n         t.staff_id,\n         t.skill_id,\n         t.mainskill,\n         ROW_NUMBER() OVER (PARTITION BY t.staff_id ORDER BY t.mainskill DESC) AS rank\n    FROM TABLE t)\n  SELECT r.id,\n         r.staff_id,\n         r.skill_id,\n         r.mainskill\n    FROM rows r\n   WHERE r.rank = 1\nORDER BY r.staff_id\n']], ['SQL - select distinct records in one field with highest records from another field'], 2], [(2130131, 1), [['-10000'], ['Both use  ROW_NUMBER , which is only available since SQL Server 2005.']], [['   SELECT r.id,\n         r.staff_id,\n         r.skill_id,\n         r.mainskill\n    FROM (SELECT t.id,\n                 t.staff_id,\n                 t.skill_id,\n                 t.mainskill,\n                 ROW_NUMBER() OVER (PARTITION BY t.staff_id ORDER BY t.mainskill DESC) AS rank\n            FROM TABLE t) r\n   WHERE r.rank = 1\nORDER BY r.staff_id\n']], ['SQL - select distinct records in one field with highest records from another field'], 2], [(2132085, 0), [['Creating my own test tables:'], ['This version will all people in a department if they are tied :)']], [[" DECLARE @Employee TABLE (Employee_id INT, Name VARCHAR(MAX), Chief_id INT)\nDECLARE @Department TABLE (Department_Id INT, Name VARCHAR(MAX))\nDECLARE @Emp_Dep TABLE (Employee_id INT, Department_Id INT)\nDECLARE @Emp_Sal TABLE (Employee_id INT, Salary DECIMAL)\n\nINSERT INTO @Employee\nSELECT  1, 'John Doe', 0 UNION ALL\nSELECT  2, 'John Doe', 0 UNION ALL\nSELECT  3, 'John Doe', 0 UNION ALL\nSELECT  4, 'John Doe', 0 UNION ALL\nSELECT  5, 'John Doe', 0 UNION ALL\nSELECT  6, 'John Doe', 0 UNION ALL\nSELECT  7, 'John Doe', 0;\n\nINSERT INTO @Department\nSELECT 1, 'Moomin' UNION ALL\nSELECT 2, 'Moo' UNION ALL\nSELECT 3, 'Min';\n\nINSERT INTO @Emp_Dep\nSELECT 1, 1 UNION ALL\nSELECT 2, 1 UNION ALL\nSELECT 3, 2 UNION ALL\nSELECT 4, 2 UNION ALL\nSELECT 5, 3 UNION ALL\nSELECT 6, 3 UNION ALL\nSELECT 7, 3;\n\nINSERT INTO @Emp_Sal\nSELECT 1, 1200 UNION ALL\nSELECT 2, 1100 UNION ALL\nSELECT 3, 2000 UNION ALL\nSELECT 4, 2000 UNION ALL\nSELECT 5, 3451 UNION ALL\nSELECT 6, 3321 UNION ALL\nSELECT 7, 3123;\n"]], ['Sql commands using joins for the following four tables'], 3], [(2132085, 1), [['This version will all people in a department if they are tied :)'], ["Whereas this version will only select 1 from each department, you'll have to figure out a way to get the person you want on top in the ROW_NUMBER() OVER"]], [[' WITH [Merged] AS (\n    SELECT [@Employee].[Employee_id],\n           [@Employee].[Name],\n           [@Department].[Name] [Department],\n           [@Department].[Department_Id],\n           [@Emp_Sal].[Salary]\n      FROM @Employee\n     INNER JOIN @Emp_Sal ON [@Employee].[Employee_id] = [@Emp_Sal].[Employee_id]\n     INNER JOIN @Emp_Dep ON [@Emp_Sal].[Employee_id] = [@Emp_Dep].[Employee_id]\n     INNER JOIN @Department ON [@Emp_Dep].[Department_Id] = [@Department].[Department_Id]\n)\nSELECT [Main].Employee_id, [Main].Name, [Main].Department, [Main].Salary\nFROM Merged [Main]\nWHERE [Salary] = (SELECT MAX(Salary) FROM [Merged] WHERE Department_Id = [Main].Department_Id);\n']], ['Sql commands using joins for the following four tables'], 3], [(2132085, 2), [["Whereas this version will only select 1 from each department, you'll have to figure out a way to get the person you want on top in the ROW_NUMBER() OVER"], ["Worth mentioning might be that it's for Microsoft SQL Server!"]], [[" WITH [Merged] AS (\n    SELECT [@Employee].[Employee_id],\n           [@Employee].[Name],\n           [@Department].[Name] [Department],\n           [@Department].[Department_Id],\n           [@Emp_Sal].[Salary],\n           ROW_NUMBER() OVER(ORDER BY [@Department].[Department_Id] ASC, [@Emp_Sal].[Salary] DESC, [@Employee].[Employee_id] ASC) AS 'RowNumber'\n      FROM @Employee\n     INNER JOIN @Emp_Sal ON [@Employee].[Employee_id] = [@Emp_Sal].[Employee_id]\n     INNER JOIN @Emp_Dep ON [@Emp_Sal].[Employee_id] = [@Emp_Dep].[Employee_id]\n     INNER JOIN @Department ON [@Emp_Dep].[Department_Id] = [@Department].[Department_Id]\n)\nSELECT [Main].Employee_id, [Main].Name, [Main].Department, [Main].Salary\nFROM Merged [Main]\nWHERE [RowNumber] = (SELECT MAX(RowNumber) FROM [Merged] WHERE Department_Id = [Main].Department_Id);\n"]], ['Sql commands using joins for the following four tables'], 3], [(2133230, 0), [['You can put extra conditions in a left outer join  ON  expression.  What you want is a row from  carRims  that matches your  rims  row,  and  belongs to car number 9, right?'], ["For an outer join, we want rows from  rims  even if there's no matching row in  carRims .  What if we were to put the carID=9 condition in the  WHERE  clause?"]], [[' SELECT\n    * \nFROM\n    rims \nLEFT OUTER JOIN\n    carRims \nON\n    carRims.rimId = rim.rimId \n    AND carRims.carId = 9\nWHERE\n    carRims.carId IS NULL\n']], ['SQL: Get list of non-coupled items using MySQL 4'], 4], [(2133230, 1), [["For an outer join, we want rows from  rims  even if there's no matching row in  carRims .  What if we were to put the carID=9 condition in the  WHERE  clause?"], ['So we need to exclude rows from  carRims  with the wrong carID before the rows are joined to  rims .  ']], [[' FROM rims r LEFT OUTER JOIN carRims c ON r.rimId = c.rimID\nWHERE c.carID = 9\n']], ['SQL: Get list of non-coupled items using MySQL 4'], 4], [(2133230, 2), [['So we need to exclude rows from  carRims  with the wrong carID before the rows are joined to  rims .  '], ["Many books say you can freely mix conditions between the  ON  clause and the  WHERE  clause.  But this isn't true in all cases.  It works for  INNER JOIN , because the end result is the same either way.  It also works for a condition that applies only to the left table in a left join, for example:"]], [[' FROM rims r LEFT OUTER JOIN carRims c ON r.rimId = c.rimID AND c.carID = 9\n']], ['SQL: Get list of non-coupled items using MySQL 4'], 4], [(2133230, 3), [["Many books say you can freely mix conditions between the  ON  clause and the  WHERE  clause.  But this isn't true in all cases.  It works for  INNER JOIN , because the end result is the same either way.  It also works for a condition that applies only to the left table in a left join, for example:"], ['For a condition on the  right  table in a left outer join, it  does  matter where you put the condition.']], [[" FROM rims r LEFT OUTER JOIN carRims c ON r.rimId = c.rimID AND r.make = 'ABC Rims'\n\nFROM rims r LEFT OUTER JOIN carRims c ON r.rimId = c.rimID \nWHERE r.make = 'ABC Rims'\n"]], ['SQL: Get list of non-coupled items using MySQL 4'], 4], [(2133620, 0), [['Standard SQL:'], ['For MS Access I believe that this would be:']], [[" WHERE\n     CASE NumberOfCycles\n          WHEN 1 THEN s1\n          WHEN 2 THEN s2\n          WHEN 3 THEN s3\n          WHEN 4 THEN s4\n          WHEN 5 THEN s5\n          WHEN 6 THEN s6\n          WHEN 7 THEN s7\n          WHEN 8 THEN s8\n          ELSE NULL\n     END IS NOT NULL  -- Can't use <> for NULL\n"]], ['How do you get SQL to add a variable to a field name in a where clause?'], 2], [(2133620, 1), [['For MS Access I believe that this would be:'], ['-10000']], [[' WHERE\n     SWITCH(NumberOfCycles=1, s1, NumberOfCycles=2, s2, NumberOfCycles=3, s3...) IS NOT NULL\n']], ['How do you get SQL to add a variable to a field name in a where clause?'], 2], [(2134102, 0), [['But SQL uses strict typing, see that:'], ['Regarding the standard (SQL 92, 99 & 2003) it seems to be wrong:']], [[" # SELECT 1=CAST('1' AS TEXT);\nERROR:  operator does not exist: integer = text\nLINE 1: SELECT 1=CAST('1' AS TEXT);\n                ^\nHINT:  No operator matches the given name and argument type(s). You might need to add  explicit type casts.\n"]], ["Does 1 always equal '1' in SQL?"], 2], [(2134102, 1), [['Regarding the standard (SQL 92, 99 & 2003) it seems to be wrong:'], ['because  <quote>  is only contained in  <bit string literal> ,  <hex string literal> , ... but not in numeric literals... ']], [['      <literal> ::=\n            <signed numeric literal>\n          | <general literal>\n\n     <general literal> ::=\n            <character string literal>\n          | <national character string literal>\n          | <bit string literal>\n          | <hex string literal>\n          | <datetime literal>\n          | <interval literal>\n\n     <signed numeric literal> ::=\n          [ <sign> ] <unsigned numeric literal>\n\n     <unsigned numeric literal> ::=\n            <exact numeric literal>\n          | <approximate numeric literal>\n\n     <exact numeric literal> ::=\n            <unsigned integer> [ <period> [ <unsigned integer> ] ]\n          | <period> <unsigned integer>\n\n     <unsigned integer> ::= <digit>...\n\n     <character string literal> ::=\n          [ <introducer><character set specification> ]\n          <quote> [ <character representation>... ] <quote>\n            [ { <separator>... <quote> [ <character representation>... ] <quote> }... ]\n']], ["Does 1 always equal '1' in SQL?"], 2], [(2134350, 0), [['You may want to consider modelling your database as follows:'], ['In this case, you would be able to build queries such as:']], [[' table_photos\n- photo_id\n- photo_filename\n- photo_date\n- photo_user_id\n- vote_id\n- warn_id\n- type\n- detail_id\n\ntable_houses\n- id\n- name\n- style\n\ntable_trees\n- id\n- name\n- species\n']], ['Relational database, photos, votes and warnings'], 3], [(2134350, 1), [['In this case, you would be able to build queries such as:'], ['Or else simply query all the photos without "late binding" with the specific type:']], [[' SELECT \n    table_trees.name\nFROM\n    table_photos\nINNER JOIN\n    table_trees ON \n    (table_trees.id = table_photos.detail_id AND table_photos.type = 1);\n']], ['Relational database, photos, votes and warnings'], 3], [(2134350, 2), [['Or else simply query all the photos without "late binding" with the specific type:'], ['You may be interested in checking out the following articles related to this database model:']], [[' SELECT \n    photo_filename\nFROM\n    table_photos;\n']], ['Relational database, photos, votes and warnings'], 3], [(2135075, 0), [['Try this:'], ['It should be the y CTE could be removed and changed to making it a smaller query:']], [[' WITH t AS\n(\n  SELECT Checkintime, DeviceID, rn = ROW_NUMBER() OVER (ORDER BY DeviceID, Checkintime)\n  FROM DeviceHeartbeat\n),\nx AS\n(\n  SELECT t1.deviceID, d = DATEDIFF(MINUTE, t1.Checkintime, t2.Checkintime)\n  FROM t AS t1\n  INNER JOIN t AS t2\n  ON t1.rn = t2.rn - 1 and t1.DeviceID = t2.DeviceID\n),\ny AS\n(\n  SELECT deviceID\n  FROM x\n  WHERE d > 12\n)\nselect deviceID, count(deviceID) as [Checkins over 12 mins] FROM y GROUP BY deviceID\n']], ['SQL Query to aggregate DateDiff greater than given value'], 2], [(2135075, 1), [['It should be the y CTE could be removed and changed to making it a smaller query:'], ['-10000']], [[' select deviceID, count(deviceID) as [Checkins over 12 mins] \nFROM x \nGROUP BY deviceID\nHAVING d > 12\n']], ['SQL Query to aggregate DateDiff greater than given value'], 2], [(2135326, 0), [['If you are inserting a single row, you can use this:'], ['You can also use it to insert multiple rows and assign your id to each one:']], [[' // cast if necessary\nusing (var insert = (SQLiteCommand)this.Adapter.InsertCommand.Clone()) { \n    insert.CommandText += "; SELECT last_insert_rowid()";\n    foreach (SQLiteParameter parameter in insert.Parameters) {\n        parameter.Value = row[parameter.SourceColumn];\n    }\n}\nvar index = Convert.ToInt32(insert.ExecuteScalar());\n']], ["How to Add a command/SQL statement to a strongly typed TableAdapter's Update/Insert command?"], 2], [(2135326, 1), [['You can also use it to insert multiple rows and assign your id to each one:'], ['Note: Be sure to open / close your connection']], [[' using (var insert = (SQLiteCommand)this.Adapter.InsertCommand.Clone())\n{\n    insert.CommandText += "; SELECT last_insert_rowid()";\n    // this filter only added rows\n    foreach (MyDataSet.MessageRow row in messages.GetChanges(DataRowState.Added))\n    {\n        foreach (SQLiteParameter parameter in insert.Parameters)\n        {\n            parameter.Value = row[parameter.SourceColumn];\n        }\n        // use the name of your rowid column\n        row.ID = Convert.ToInt32(insert.ExecuteScalar());\n        row.AcceptChanges();\n    }\n}\n// then you can perfom the other updates\nmessagesAdapter.Update(messages);\n']], ["How to Add a command/SQL statement to a strongly typed TableAdapter's Update/Insert command?"], 2], [(2136223, 0), [['Try this:'], ["However, I'd recommend doing this in two queries.  You don't have to do everything in a single query, and sometimes it's faster to run two simpler queries:"]], [[' SELECT \n    ...,\n    COUNT(DISTINCT downloads.download_id) AS download_count,\n    GROUP_CONCAT(DISTINCT tags.tag_name SEPARATOR ":") AS tags\nFROM items \nLEFT JOIN tags ON items.item_id = tags.item_id \nLEFT JOIN downloads ON items.item_id  = downloads.item_id \nWHERE items.item_id = 123\n']], ['Selecting with 2 JOINs to get a count and a concatenated string'], 2], [(2136223, 1), [["However, I'd recommend doing this in two queries.  You don't have to do everything in a single query, and sometimes it's faster to run two simpler queries:"], ['-10000']], [[' SELECT \n    ...,\n    COUNT(*) AS download_count,\nFROM items \nLEFT JOIN downloads ON items.item_id  = downloads.item_id \nWHERE items.item_id = 123\n\nSELECT \n    GROUP_CONCAT(tags.tag_name SEPARATOR ":") AS tags\nFROM items \nLEFT JOIN tags ON items.item_id = tags.item_id \nWHERE items.item_id = 123\n']], ['Selecting with 2 JOINs to get a count and a concatenated string'], 2], [(2138816, 0), [["I think your problem is that you are filtering out the rows where best is not 1, so they aren't included in the group by. Try this:"], ["Also, maybe I'm missing something but wouldn't this work, saving the subquery?"]], [[' SELECT o.author_id, SUM(o.vote_value) AS vote_value, n.best AS best_sum, \n            (SUM(o.vote_value) + (10 * n.best)) AS total\n            FROM comments o\n            JOIN (\n              SELECT SUM(best) AS best, author_id\n              FROM comments\n              GROUP BY author_id\n              ) n ON o.author_id = n.author_id\n            GROUP BY o.author_id\n            ORDER BY total DESC\n            LIMIT 0, 4\n']], ['Problem with SQL addition'], 2], [(2138816, 1), [["Also, maybe I'm missing something but wouldn't this work, saving the subquery?"], ['-10000']], [[' SELECT o.author_id, SUM(o.vote_value) AS vote_value, SUM(o.best) AS best_sum, \n            (SUM(o.vote_value) + (10 * SUM(o.best))) AS total\n            FROM comments o\n            GROUP BY o.author_id\n            ORDER BY total DESC\n            LIMIT 0, 4\n']], ['Problem with SQL addition'], 2], [(2140313, 0), [['You can create a view and an  INSTEAD OF UPDATE  trigger on that view:'], ["If you want to process a column only if its value had not changed, then you'll have to write several  UPDATE  statements:"]], [[' CREATE VIEW myview ON mytable\nAS\nSELECT  *\nFROM    table\n\nCREATE TRIGGER trg_myview_iu\nINSTEAD OF UPDATE\nON myview\nFOR EACH ROW\nBEGIN\n        UPDATE  mytable\n        SET     column1 = :NEW.column1\n        WHERE   id_c = :NEW.id_c;\nEND;\n']], ['Column-level privileges vs. legacy application'], 2], [(2140313, 1), [["If you want to process a column only if its value had not changed, then you'll have to write several  UPDATE  statements:"], ['This is far from being efficient, though.']], [[' CREATE TRIGGER trg_myview_iu\nINSTEAD OF UPDATE\nON myview\nFOR EACH ROW\nBEGIN\n        IF :NEW.column1 <> :OLD.column1 THEN -- add `NULL` processing options if necessary\n                UPDATE  mytable\n                SET     column1 = :NEW.column1\n                WHERE   id_c = :NEW.id_c;\n        END IF;\n        IF :NEW.column2 <> :OLD.column2 THEN\n                UPDATE  mytable\n                SET     column2 = :NEW.column2\n                WHERE   id_c = :NEW.id_c;\n        END IF;\n        …\nEND;\n']], ['Column-level privileges vs. legacy application'], 2], [(2140377, 0), [["It is rough'n'ready so you may need to edit it to tidy the output or to make the program more flexible. "], ['Anyway, here are the results:']], [[" create or replace procedure search_cols\n  (tname in user_tables.table_name%type\n   , pk_col in user_tab_columns.column_name%type\n   , pk in number\n   , val in number )\nis\n    firstcol boolean := true;\n    stmt varchar2(32767);\n    result varchar2(32767);\n    rc sys_refcursor;\nbegin\n    stmt := 'select ';\n    << projection >>\n    for lrec in ( select column_name from user_tab_columns\n                  where table_name = tname\n                  and column_name != pk_col\n                  and data_type = 'NUMBER'\n                  order by column_id )\n    loop\n        if not firstcol then\n            stmt := stmt || chr(10) || '||'',''||';\n        else\n            firstcol := false;\n        end if;\n        stmt := stmt || ' case when '|| lrec.column_name||' = '|| val ||\n                           ' then '''|| lrec.column_name || ''' else null end';\n    end loop projection;\n    stmt := stmt || chr(10)|| ' from '||tname||' where '|| pk_col || ' = '|| pk;\n    --  dbms_output.put_line(stmt);\n    open rc for stmt;\n    fetch rc into result;\n    close rc;\n    dbms_output.put_line(tname || '::' || val || ' found in '||result);\nend search_cols;\n/\n"]], ['SQL: Search a list of columns with a given value (within a row)'], 2], [(2140377, 1), [['Anyway, here are the results:'], ['-10000']], [[" SQL> set serveroutput on size unlimited\nSQL> exec search_cols('T23', 'ID', 111, 10)\nT23::10 found in ,COL_B,COL_C,\n\nPL/SQL procedure successfully completed.\n\nSQL> exec search_cols('T23', 'ID', 222, 10)\nT23::10 found in COL_A,,,\n\nPL/SQL procedure successfully completed.\n\nSQL>\n"]], ['SQL: Search a list of columns with a given value (within a row)'], 2], [(2140512, 0), [['Each of these solutions assumes that databases A and B have the following tables:'], ['The following will merge all terms and relationships from A into B:']], [[' create table Terms\n(\n  ID int identity(1,1),\n  Text nvarchar(MAX)\n)\n\ncreate table Relationships\n(\n  ParentID int,\n  ChildID int\n)\n']], ['Exporting/Importing a hierarchical graph from a database'], 5], [(2140512, 1), [['The following will merge all terms and relationships from A into B:'], ['First add an int column to your Terms table called "OldID", then use the following to merge all terms and relationships from A to B:']], [[' insert into A.Terms (Text)\n  select Text\n  from A.Terms\n  where Text not in (select Text from B.Terms)\n\ninsert into B.Relationships (ParentID, ChildID)\n  select\n    (select ID\n     from B.Terms BTerms inner join A.Terms ATerms on BTerms.Text = ATerms.Text\n     where ATerms.ID = Relationships.ParentID),\n    (select ID\n     from B.Terms BTerms inner join A.Terms ATerms on BTerms.Text = ATerms.Text\n     where ATerms.ID = Relationships.ChildID)\n  from A.Relationships\n']], ['Exporting/Importing a hierarchical graph from a database'], 5], [(2140512, 2), [['First add an int column to your Terms table called "OldID", then use the following to merge all terms and relationships from A to B:'], ['The following will merge all terms and relationships from A into B:']], [[' insert into A.Terms (Text, OldID)\n  select Text, ID\n  from A.Terms\n  where Text not in (select Text from B.Terms)\n\ninsert into B.Relationships (ParentID, ChildID)\n  select\n    (select ID from B.Terms where OldID = ParentID),\n    (select ID from B.Terms where OldID = ChildID)\n  from A.Relationships\n']], ['Exporting/Importing a hierarchical graph from a database'], 5], [(2140512, 3), [['The following will merge all terms and relationships from A into B:'], ['The following will merge all terms and relationships from A into B:']], [[' declare TermsCursor sys_refcursor; \nbegin \n\n-- Create temporary mapping table\ncreate table #Temporary (OldID int, NewID int)\n\n-- Add terms one at a time, remembering the id mapping\nopen TermsCursor for select * from A.Terms;\nfor term in TermsCursor \nloop\n  insert into B.Terms (Text) values ( term.Text ) returning ID into NewID;\n  insert into Temporary ( OldID, NewID ) values ( term.ID, NewID );\nend loop; \n\n-- Transfer the relationships\ninsert into B.Relationships (ParentID, ChildID)\n  select\n    (select ID\n     from B.Terms BTerms inner join Temporary on BTerms.ID = Temporary.NewID\n     where Temporary.OldID = Relationships.ParentID),\n    (select ID\n     from B.Terms BTerms inner join Temporary on BTerms.ID = Temporary.NewID\n     where Temporary.OldID = Relationships.ChildID),\n  from A.Relationships\n\n-- Drop the temporary table\ndrop table #Temporary\n\nend\n']], ['Exporting/Importing a hierarchical graph from a database'], 5], [(2140512, 4), [['The following will merge all terms and relationships from A into B:'], ['-10000']], [[' -- Create temporary mapping table\ncreate table #Temporary (OldID int, NewID int)\n\n-- Add terms to temporary mapping table\ninsert into #Tempoarary ( OldID, NewID )\nselect ID, sequence.nexval\nfrom A.Terms\n\n-- Transfer the terms\ninsert into B.Terms ( ID, Text )\nselect NewID, Text\nfrom A.Terms inner join Temporary on ID = OldID\n\n-- Transfer the relationships\ninsert into B.Relationships (ParentID, ChildID)\n  select\n    (select ID\n     from B.Terms BTerms inner join Temporary on BTerms.ID = Temporary.NewID\n     where Temporary.OldID = Relationships.ParentID),\n    (select ID\n     from B.Terms BTerms inner join Temporary on BTerms.ID = Temporary.NewID\n     where Temporary.OldID = Relationships.ChildID),\n  from A.Relationships\n\n-- Drop the temporary table\ndrop table #Temporary\n']], ['Exporting/Importing a hierarchical graph from a database'], 5], [(2141763, 0), [['-10000'], ["Here's the sample data I've used to test the query:"]], [[' select\n    oh.name,\n    oh.description,\n    hg."Groups"\nfrom\n    obshead oh\n    join ( select\n               groupid,\n               sys_connect_by_path( groupname, \':\' ) "Groups"\n           from\n               hiergrps\n           start with\n               parentid = 0\n           connect by\n               prior groupid = parentid\n         ) hg\n      on oh.groupid = hg.groupid\n']], ['Hierarchical query in Oracle - out of control?'], 2], [(2141763, 1), [["Here's the sample data I've used to test the query:"], ['-10000']], [[" create table obshead\n( name varchar2(30)\n, description varchar2(30)\n, groupid number(3)\n);\ninsert into obshead ( name, description, groupid )\n     select 'Name One', 'Description One', 100 from dual union all\n     select 'Name Two', 'Description Two', 200 from dual\n;\n\ncreate table hiergrps\n( groupid number(3)\n, parentid number(3)\n, groupname varchar2(30)\n);\ninsert into hiergrps ( groupid, parentid, groupname )\n     select 100, 50, 'Gynecology' from dual union all\n     select  50, 10, 'Tx'         from dual union all\n     select  10,  0, 'Basic'      from dual\n;\n"]], ['Hierarchical query in Oracle - out of control?'], 2], [(2142566, 0), [['Either a separate table for each matrix:'], ['Or, all of the matrices in one table:']], [[' CREATE TABLE YourMatrixName(\n    RowNo smallint NOT NULL,\n    ColNo smallint NOT NULL,\n    CellValue varchar](50) NULL,\n CONSTRAINT [PK_Matrices] PRIMARY KEY CLUSTERED \n    ([RowNo] ASC, [ColNo] ASC)\n) ON [PRIMARY];\nGO\n\nCREATE UNIQUE NONCLUSTERED INDEX IX_YourMatrixName ON dbo.YourMatrixName\n    (ColNo, RowNo); \nGO\n']], ['Storing matrices in a relational database'], 2], [(2142566, 1), [['Or, all of the matrices in one table:'], ['These are standard normal form, virtually all other ways of doing it are not well normalized.  Some advantages of these approaches:']], [[' CREATE TABLE Matrices(\n    MatrixName varchar(24) NOT NULL,\n    RowNo smallint NOT NULL,\n    ColNo smallint NOT NULL,\n    CellValue varchar(50) NULL,\n CONSTRAINT [PK_Matrices] PRIMARY KEY CLUSTERED \n    ([MatrixName] ASC, [RowNo] ASC, [ColNo] ASC)\n) ON [PRIMARY];\nGO\n\nCREATE UNIQUE NONCLUSTERED INDEX IX_Matrices ON dbo.Matrices\n    (ColNo, RowNo); \nGO\n']], ['Storing matrices in a relational database'], 2], [(2142907, 0), [['I believe this subquery will do it (not tested).'], ['Test code:']], [[' select *, \n   (select top 1 Discount \n    from table2 \n    where table2.Date <= t.Date \n    order by table2.Date desc) as Discount\nfrom Table1 t\n']], ['SQL Join on Nearest less than date'], 2], [(2142907, 1), [['Test code:'], ['Results:']], [[" create table #table1 ([date] datetime, val int)\ncreate table #table2 ([date] datetime, discount int)\n\ninsert into #table1 ([date], val) values ('1/26/2010', 10)\ninsert into #table1 ([date], val) values ('1/25/2010', 9)\ninsert into #table1 ([date], val) values ('1/24/2010', 8)\ninsert into #table1 ([date], val) values ('1/24/2010', 9)\ninsert into #table1 ([date], val) values ('1/23/2010', 7)\ninsert into #table1 ([date], val) values ('1/22/2010', 10)\ninsert into #table1 ([date], val) values ('1/21/2010', 11)\n\ninsert into #table2 ([date], discount) values ('1/26/2010', 2)\ninsert into #table2 ([date], discount) values ('1/23/2010', 1)\ninsert into #table2 ([date], discount) values ('1/20/2010', 0)\n\nselect *, \n   (select top 1 discount \n    from #table2 \n    where #table2.[date] <= t.[date]\n    order by #table2.[date] desc) as discount\nfrom #table1 t\n\ndrop table #table1\ndrop table #table2\n"]], ['SQL Join on Nearest less than date'], 2], [(2142922, 0), [['This should do what you want:'], ['Result:']], [[' SELECT object.name, COUNT(*) AS tag_count\nFROM tagset T1\nJOIN tagset T2\nON T1.tag_id = T2.tag_id AND T1.object_id != T2.object_id\nJOIN object\nON T2.object_id = object.id\nWHERE T1.object_id = 1\nGROUP BY T2.object_id\nORDER BY COUNT(*) DESC\n']], ['mysql Select related objects by tags'], 3], [(2142922, 1), [['Result:'], ['Using this test data:']], [[" 'object2', 2\n'object3', 1\n"]], ['mysql Select related objects by tags'], 3], [(2142922, 2), [['Using this test data:'], ['-10000']], [[" CREATE TABLE object (id int NOT NULL, name nvarchar(100) NOT NULL);\nINSERT INTO object (id, name) VALUES\n(1, 'object1'),\n(2, 'object2'),\n(3, 'object3');\n\nCREATE TABLE tagset (object_id int NOT NULL, tag_id int NOT NULL);\nINSERT INTO tagset (object_id, tag_id) VALUES\n(1, 1),\n(1, 2),\n(1, 3),\n(2, 1),\n(2, 3),\n(3, 2),\n(3, 4),\n(3, 5);\n"]], ['mysql Select related objects by tags'], 3], [(2143036, 0), [['Case 1 - Code generation:'], ['Case 2 - Parametrization:']], [[" DECLARE @SomeVariable int \nSET @SomeVariable = 'VALUE' \n  FROM someTable \n--do stuff with @SomeVariable \nGO \n\nDECLARE @sp as varchar(MAX)\n\nSET @sp = '\nCREATE PROCEDURE myProcedure -- I would actually name this myProcedure_ + CONVERT(varchar, @SomeVariable), since each proc generated might function differently\n( \n  @MyParameter \n) \nAS \nSET NOCOUNT ON \nDECLARE @SomeVariable AS int -- This is going to be an initialized local copy of the global at time of SP creation\nSET @SomeVariable = ' + CONVERT(varchar, @SomeVariable) + '\n\n--Do something \n--Do something using @SomeVariable \nSET NOCOUNT OFF \nRETURN 0 \n'\nEXEC(@sp) -- create the procedure dynamically\n\nExecuting the producedure normally as EXEC myProcedure or EXEC myProcedure_1, etc.\n"]], ['Global variables in SQL'], 4], [(2143036, 1), [['Case 2 - Parametrization:'], ['Case 3 - Configuration:']], [[" DECLARE @SomeVariable int \nSET @SomeVariable = 'VALUE' \n  FROM someTable \n--do stuff with @SomeVariable \nGO \n\nCREATE PROCEDURE myProcedure \n( \n  @MyParameter \n  ,@SomeVariable int\n) \nAS \nSET NOCOUNT ON \n\n--Do something \n--Do something using @SomeVariable \nSET NOCOUNT OFF \nRETURN 0 \nGO \n"]], ['Global variables in SQL'], 4], [(2143036, 2), [['Case 3 - Configuration:'], ["Now, whenever you EXEC myProcedure, you need to ensure that the configuration has been set in the table.  This scenario is recommended for slowly-changing configuration cases.  In this case, you can wrap the  @SomeVariable  initialization in a scalar-valued UDF, so that any times this same configuration is used in different SPs, they will all call through the same UDF, which frees you to change your configuration table conventions (you don't give your users SELECT permission on your tables, anyway, right?) and if the UDF needs to start varying based on user or similar, you now have a control point which enforces consistency, permissions and interface calling conventions:"]], [[" DECLARE @SomeVariable int \nSET @SomeVariable = 'VALUE' \n  FROM someTable \n--do stuff with @SomeVariable \nGO \n\nCREATE PROCEDURE myProcedure \n( \n  @MyParameter \n) \nAS \nSET NOCOUNT ON \n\n--Do something \nDECLARE @SomeVariable int \nSET @SomeVariable = 'VALUE' \n  FROM someTable \n\nSET NOCOUNT OFF \nRETURN 0 \nGO \n"]], ['Global variables in SQL'], 4], [(2143036, 3), [["Now, whenever you EXEC myProcedure, you need to ensure that the configuration has been set in the table.  This scenario is recommended for slowly-changing configuration cases.  In this case, you can wrap the  @SomeVariable  initialization in a scalar-valued UDF, so that any times this same configuration is used in different SPs, they will all call through the same UDF, which frees you to change your configuration table conventions (you don't give your users SELECT permission on your tables, anyway, right?) and if the UDF needs to start varying based on user or similar, you now have a control point which enforces consistency, permissions and interface calling conventions:"], ['-10000']], [[' DECLARE @SomeVariable int \nSET @SomeVariable = dbo.udf_Global(username, session, etc.)\n--do stuff with @SomeVariable \nGO \n\nCREATE PROCEDURE myProcedure \n( \n  @MyParameter \n) \nAS \nSET NOCOUNT ON \n\n--Do something \nDECLARE @SomeVariable int \nSET @SomeVariable = dbo.udf_Global(username, session, etc.)\n\nSET NOCOUNT OFF \nRETURN 0 \nGO \n']], ['Global variables in SQL'], 4], [(2144913, 0), [['-10000'], ['-10000']], [["   WITH threads_cte AS (\n    SELECT DISTINCT x.threadid \n      FROM THREADS x\n     WHERE x.itemid = ?)\n  SELECT t.threadid,\n         COUNT(DISTINCT t.itemid) 'num_itemid'\n    FROM THREADS t\n    JOIN threads_cte tc ON tc.threadid = t.threadid\nGROUP BY t.threadid\n"]], ['Need group by and counting query'], 2], [(2144913, 1), [['-10000'], ['-10000']], [["   SELECT t.threadid,\n         COUNT(DISTINCT t.itemid) 'num_itemid'\n    FROM THREADS t\n    JOIN (SELECT DISTINCT x.threadid \n            FROM THREADS x\n           WHERE x.itemid = ?) y ON y.threadid = t.threadid\nGROUP BY t.threadid\n"]], ['Need group by and counting query'], 2], [(2148912, 0), [['By way of illustration, I have a table called  RANGE_PART_INTERVAL_TABLE  which has three partitions.  I run the pertinent query against ALL_OBJECTS, and lo!'], ['Just to be clear, this has nothing to do with type inheritence.']], [[" SQL> select object_name, object_type, subobject_name\n  2  from all_objects\n  3  where object_name = 'RANGE_PART_INTERVAL_TABLE'\n  4  /\n\nOBJECT_NAME                    OBJECT_TYPE         SUBOBJECT_NAME\n------------------------------ ------------------- ---------------\nRANGE_PART_INTERVAL_TABLE      TABLE\nRANGE_PART_INTERVAL_TABLE      TABLE PARTITION     SYS_P60\nRANGE_PART_INTERVAL_TABLE      TABLE PARTITION     SYS_P61\nRANGE_PART_INTERVAL_TABLE      TABLE PARTITION     SYS_P62\n\nSQL>\n"]], ['What is a subobject for a type?'], 4], [(2148912, 1), [['Just to be clear, this has nothing to do with type inheritence.'], ['Inheritence is shown by the USER/ALL/DBA_TYPES view, which shows the supertype of the derived type:...']], [[" SQL> create type my_type as object (attr1 number) not final\n  2  /\n\nType created.\n\nSQL> create type my_sub_1 under my_type (attr2 date)\n  2  /\n\nType created.\n\nSQL> select object_name, object_type, subobject_name\n  2  from all_objects\n  3  where object_name = 'MY_TYPE'\n  4  /\n\nOBJECT_NAME                    OBJECT_TYPE         SUBOBJECT_NAME\n------------------------------ ------------------- ---------------\nMY_TYPE                        TYPE\n\nSQL> \n"]], ['What is a subobject for a type?'], 4], [(2148912, 2), [['Inheritence is shown by the USER/ALL/DBA_TYPES view, which shows the supertype of the derived type:...'], ['In the specific case they cites  $VNS_1  is an artefact of Type Evolution.  When we execute an ALTER TYPE after that Type has been in use Oracle creates a version of it.  We can see this in the %_TYPE_VERSIONS views....']], [[" SQL> select type_name, supertype_name\n  2  from all_types\n  3  where type_name in ('MY_TYPE', 'MY_SUB_1')\n  4  /\n\nTYPE_NAME                      SUPERTYPE_NAME\n------------------------------ ------------------------------\nMY_SUB_1                       MY_TYPE\nMY_TYPE\n\nSQL>\n"]], ['What is a subobject for a type?'], 4], [(2148912, 3), [['In the specific case they cites  $VNS_1  is an artefact of Type Evolution.  When we execute an ALTER TYPE after that Type has been in use Oracle creates a version of it.  We can see this in the %_TYPE_VERSIONS views....'], ['Find out more .']], [[" SQL> select * from dba_type_versions\n  2  where owner = 'MDSYS'\n  3  and type_name = 'SDO_TGL_OBJECT_ARRAY'\n  4  /\n\nOWNER                          TYPE_NAME                        VERSION#\n------------------------------ ------------------------------ ----------\nTYPECODE                       STATUS        LINE\n------------------------------ ------- ----------\nTEXT\n------------------------------------------------------------------------------\nHASHCODE\n----------------------------------\nMDSYS                          SDO_TGL_OBJECT_ARRAY                    1\nCOLLECTION                     VALID            1\ntype SDO_TGL_OBJECT_ARRAY\n61EB9AEC10198F71C141D13B32F52C00A8\n\nMDSYS                          SDO_TGL_OBJECT_ARRAY                    1\nCOLLECTION                     VALID            2\n                                        as VARRAY (1000000) of SDO_TGL_OBJECT\n61EB9AEC10198F71C141D13B32F52C00A8\n\nMDSYS                          SDO_TGL_OBJECT_ARRAY                    2\nCOLLECTION                     VALID            1\ntype SDO_TGL_OBJECT_ARRAY\n6184209BAEF1F731B937760C2BA8B45688\n\nMDSYS                          SDO_TGL_OBJECT_ARRAY                    2\nCOLLECTION                     VALID            2\n                                        as VARRAY (1000000) of SDO_TGL_OBJECT\n6184209BAEF1F731B937760C2BA8B45688\n\nMDSYS                          SDO_TGL_OBJECT_ARRAY                    2\nCOLLECTION                     VALID            3\n  alter type SDO_TGL_OBJECT_ARRAY modify limit 10000000 cascade\n6184209BAEF1F731B937760C2BA8B45688\n\n\nSQL>\n"]], ['What is a subobject for a type?'], 4], [(2150594, 0), [['You can "explode" your linestring path into separate line segmenets with just two points each, so that:'], ['would get broken down into:']], [[' LINESTRING(-122.360 47.656, -122.343 47.656, -122.310 47.690, -122.310 47.670)\n']], ['Determine if a POINT is between two other POINTs on a LINESTRING (SQL Server 2008 Geography)'], 4], [(2150594, 1), [['would get broken down into:'], ['If you opt for the above representation, we could solve this problem with the following recursive function, where  @path  is the linestring representing the road,  @start_point  and  @end_end  represent the indexes of two points on the  @path  (first index is 1), and  @test_point  is the geography point that will be tested. The test point can lie anywhere on the lie.']], [[' LINESTRING(-122.360 47.656, -122.343 47.656)\nLINESTRING(-122.343 47.656, -122.310 47.690)\nLINESTRING(-122.310 47.690, -122.310 47.670)\n']], ['Determine if a POINT is between two other POINTs on a LINESTRING (SQL Server 2008 Geography)'], 4], [(2150594, 2), [['If you opt for the above representation, we could solve this problem with the following recursive function, where  @path  is the linestring representing the road,  @start_point  and  @end_end  represent the indexes of two points on the  @path  (first index is 1), and  @test_point  is the geography point that will be tested. The test point can lie anywhere on the lie.'], ["To test the above function, I am defining the 6-point linestring which is shown in the map above. Then we'll define two test points:  @test_point_a , which lies exactly between the third and the fourth point, and  @test_point_b , which lies out of the path."]], [[" CREATE FUNCTION [dbo].[func_PointBetween](@path        geography, \n                                          @start_point int, \n                                          @end_point   int,\n                                          @test_point  geography)   \nRETURNS tinyint\nAS\nBEGIN\n    DECLARE @result       tinyint = 0;\n    DECLARE @num_points   int = @path.STNumPoints();\n    DECLARE @line_segment geography;\n\n    IF (@start_point < @end_point) AND (@end_point < @num_points)\n    BEGIN\n        /* Generate the line segment from the current start point\n           to the following point (@start_point + 1). */\n\n        SET @line_segment = geography::STLineFromText('LINESTRING(' + \n            CAST(@path.STPointN(@start_point).Long AS varchar(32))+ ' ' + \n            CAST(@path.STPointN(@start_point).Lat AS varchar(32)) + ',' +\n            CAST(@path.STPointN(@start_point + 1).Long AS varchar(32))+ ' ' + \n            CAST(@path.STPointN(@start_point + 1).Lat AS varchar(32)) + ')', \n            4326);\n\n        /* Add a buffer of 25m to @test_point. This is optional, but \n           recommended, otherwise it will be very difficult to get a\n           point exactly on the line. The buffer value may be tweaked\n           as necessary for your application. */\n\n        IF @test_point.STBuffer(25).STIntersects(@line_segment) = 1\n        BEGIN\n            /* The test point is on one of the line segments between\n               @start_point and @end_point. Return 1 and stop the \n               recursion. */\n\n            SET @result = 1;\n        END\n        ELSE\n        BEGIN\n            /* The test point is not between the @start_point and\n               @start_point + 1. Increment @start_point by 1 and\n               continue recursively. */\n\n            SET @result = [dbo].[func_PointBetween](@path, \n                                                    @start_point + 1,\n                                                    @end_point,\n                                                    @test_point);\n        END\n    END\n    ELSE\n    BEGIN\n        /* There are no further points. The test point is not between the\n           @start_point and @end_point. Return 0 and stop the recursion. */\n\n        SET @result = 0;\n    END\n\n    RETURN @result;\nEND\n"]], ['Determine if a POINT is between two other POINTs on a LINESTRING (SQL Server 2008 Geography)'], 4], [(2150594, 3), [["To test the above function, I am defining the 6-point linestring which is shown in the map above. Then we'll define two test points:  @test_point_a , which lies exactly between the third and the fourth point, and  @test_point_b , which lies out of the path."], ['-10000']], [[" DECLARE @road geography;\nDECLARE @test_point_a geography;\nDECLARE @test_point_b geography;\n\nSET @road = geography::STGeomFromText('LINESTRING(-122.360 47.656, \n                                                  -122.343 47.656, \n                                                  -122.310 47.690, \n                                                  -122.310 47.670, \n                                                  -122.300 47.670, \n                                                  -122.290 47.660)', \n                                                  4326);\n\n/* This point lies between point 3 and point 4 */           \nSET @test_point_a = geography::STGeomFromText('POINT(-122.310 47.680)', 4326);\n\n/* This point lies outside the path */\nSET @test_point_b = geography::STGeomFromText('POINT(-122.310 47.700)', 4326);\n\n/* This returns 1, because the test point is between start and end */\nSELECT dbo.func_PointBetween(@road, 2, 5, @test_point_a);\n\n/* This returns 0 because the test point is not between start and end */\nSELECT dbo.func_PointBetween(@road, 4, 5, @test_point_a);\n\n/* This returns 0 because the test point lies outside the path */\nSELECT dbo.func_PointBetween(@road, 1, 6, @test_point_b);\n"]], ['Determine if a POINT is between two other POINTs on a LINESTRING (SQL Server 2008 Geography)'], 4], [(2151590, 0), [['For example, composing the following string:'], ['will compile output with the value of variable (array element) dereferenced, for instance:']], [[' "Good morning {$_POST[\'user\']} !"\n']], ['why do you have {} around variables in a sql statement?'], 2], [(2151590, 1), [['will compile output with the value of variable (array element) dereferenced, for instance:'], ['SQL queries in PHP are composed from strings, so this  {}  syntax is used fairly often.']], [[' "Good morning noname !"\n']], ['why do you have {} around variables in a sql statement?'], 2], [(2151880, 0), [["Don't you want the Parent property?"], ['Edit:']], [[' $s.Databases | select Parent, Name, AutoShrink\n']], ['Get parent property in child select in Powershell?'], 2], [(2151880, 1), [['Edit:'], ['-10000']], [[' $s.Databases | select @{Name="ServerPlatform"; Expression={$_.Parent.Platform}}, Name, AutoShrink\n']], ['Get parent property in child select in Powershell?'], 2], [(2152024, 0), [['Use:'], ['The query you supplied checked for  contactappointment  being zero - if you wanted to include that check, the query would be:']], [[" UPDATE TB_CONTACT\n   SET contactassociate = 'Jane'\n WHERE contactassociate = 'Bob'\n"]], ['How to update value in a table'], 3], [(2152024, 1), [['The query you supplied checked for  contactappointment  being zero - if you wanted to include that check, the query would be:'], ["The  UPDATE  statement doesn't support the  TOP  keyword, so your update statement would be:"]], [[" UPDATE TB_CONTACT\n   SET contactassociate = 'Jane'\n WHERE contactassociate = 'Bob'\n   AND contactappointment = 0\n"]], ['How to update value in a table'], 3], [(2152024, 2), [["The  UPDATE  statement doesn't support the  TOP  keyword, so your update statement would be:"], ['...but that will give random contacts - you should specify an  ORDER BY  clause in the subquery to get consistent results.']], [[" UPDATE TB_CONTACT\n   SET contactassociate = 'Jane'\n WHERE contactid IN (SELECT TOP (1500)\n                            contactid \n                       FROM TB_CONTACT\n                      WHERE contactassociate = 'Bob'\n                        AND contactappointment = 0)\n"]], ['How to update value in a table'], 3], [(2152204, 0), [['http://msmvps.com/blogs/robfarley/archive/2009/12/07/randomising-data.aspx'], ["Edit: Sorry - didn't include the random length thing..."]], [[" select top (@stringlength) char(abs(checksum(newid())) % 26 + ascii('A')) \nfrom sys.all_objects \nfor xml path('')\n;\n"]], ['TSQL Pseudo Random text generator'], 3], [(2152204, 1), [["Edit: Sorry - didn't include the random length thing..."], ['Edit: Sorry - needs to be correlated... ']], [[" SELECT \n(\n  select top (abs(checksum(newid())) % (@maxlength-@minlength) + @minlength) char(abs(checksum(newid())) % 26 + ascii('A')) \n  from sys.all_objects \n  for xml path('')\n) as NewRandomString\nFROM yourTable; /* Maybe something like dbo.nums? */\n"]], ['TSQL Pseudo Random text generator'], 3], [(2152204, 2), [['Edit: Sorry - needs to be correlated... '], ['-10000']], [[" SELECT  \n( \n  select top (abs(checksum(newid())) % (@maxlength-@minlength) + @minlength) char(abs(checksum(newid())) % 26 + ascii('A'))  \n  from sys.all_objects a1\n  where sign(a1.object_id) = sign(t.object_id) /* Meaningless thing to force correlation */\n  for xml path('')\n) as NewRandomString \n,*\nFROM sys.all_objects t;\n"]], ['TSQL Pseudo Random text generator'], 3], [(2152456, 0), [['After the fact:'], ['Or in the table def:']], [[' alter table PostDetail\n    add constraint FK_PostDetail_Post \n        foreign key (PostID) references Post (PostID)\n']], ['What is the SQL to create a table where its PK is also a FK?'], 2], [(2152456, 1), [['Or in the table def:'], ['-10000']], [[' create table PostDetail(\n  PostID int not null constraint PK_PostDetail primary key clustered,\n  Text nvarchar(max) null,\n  constraint FK_PostDetail_Post foreign key (PostID) references Post (PostID)\n) on [primary]\n']], ['What is the SQL to create a table where its PK is also a FK?'], 2], [(2155553, 0), [['Assuming the data can be sorted on your  Column , the plan is to generate a  row number  for each row and do a  group by  to retrieve your data points.'], ['-10000']], [["SQL Server 2000 DECLARE @YourTable TABLE (Col VARCHAR(1))\nCREATE TABLE #TempTable (ID INTEGER IDENTITY(1, 1), Col VARCHAR(1))\n\nSET IDENTITY_INSERT #TempTable OFF\nINSERT INTO @YourTable (Col) VALUES ('A')\nINSERT INTO @YourTable (Col) VALUES ('A')\nINSERT INTO @YourTable (Col) VALUES ('A')\nINSERT INTO @YourTable (Col) VALUES ('B')\nINSERT INTO @YourTable (Col) VALUES ('B')\nINSERT INTO @YourTable (Col) VALUES ('B')\nINSERT INTO @YourTable (Col) VALUES ('B')\nINSERT INTO @YourTable (Col) VALUES ('C')\nINSERT INTO @YourTable (Col) VALUES ('D')\nINSERT INTO @YourTable (Col) VALUES ('D')\nINSERT INTO @YourTable (Col) VALUES ('E')\n\nINSERT INTO #TempTable\nSELECT      *\nFROM        @YourTable\nORDER BY    Col\n\nSELECT    MAX(ID)\nFROM      #TempTable\nGROUP BY  Col\n\nDROP TABLE #TempTable\n"]], ["A simple but challenging SQL Question, at least I couldn't find a way out except doing it externally (c#)"], 2], [(2155553, 1), [['-10000'], ['-10000']], [["SQL Server 2005 DECLARE @Table TABLE (Col VARCHAR(1))\n\nINSERT INTO @Table VALUES ('A')\nINSERT INTO @Table VALUES ('A')\nINSERT INTO @Table VALUES ('A')\nINSERT INTO @Table VALUES ('B')\nINSERT INTO @Table VALUES ('B')\nINSERT INTO @Table VALUES ('B')\nINSERT INTO @Table VALUES ('B')\nINSERT INTO @Table VALUES ('C')\nINSERT INTO @Table VALUES ('D')\nINSERT INTO @Table VALUES ('D')\nINSERT INTO @Table VALUES ('E')\n\n\nSELECT  MAX(RowNumber)\nFROM    (SELECT RowNumber = ROW_NUMBER() OVER (ORDER BY Col), Col\n         FROM   @Table) t\nGROUP BY Col\n"]], ["A simple but challenging SQL Question, at least I couldn't find a way out except doing it externally (c#)"], 2], [(2156294, 0), [['When running  CONNECT  inside  SQL*Plus , remove the quotes:'], ['They double quotes are required if you are passing the credentials as an argument to  sqlplus :']], [[' CONNECT myuser/mypass@mydb\n']], ['Should CONNECT work in SQL*PLUS script?'], 2], [(2156294, 1), [['They double quotes are required if you are passing the credentials as an argument to  sqlplus :'], [', for the shell to parse  myuser/mypass@mydb  as a single argument if you have spaces in your connection identifier or use additional options like  AS SYSDBA .']], [[' sqlplus "myuser/mypass@mydb"\n']], ['Should CONNECT work in SQL*PLUS script?'], 2], [(2157282, 0), [['This solution uses  no loops, procedures, or temp tables . The subquery generates dates for the last thousand days, and could be extended to go as far back or forward as you wish.'], ['Output:']], [[" select a.Date \nfrom (\n    select curdate() - INTERVAL (a.a + (10 * b.a) + (100 * c.a)) DAY as Date\n    from (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as a\n    cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as b\n    cross join (select 0 as a union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9) as c\n) a\nwhere a.Date between '2010-01-20' and '2010-01-24' \n"]], ['generate days from date range'], 2], [(2157282, 1), [['Output:'], ['Notes on Performance']], [[' Date\n----------\n2010-01-24\n2010-01-23\n2010-01-22\n2010-01-21\n2010-01-20\n']], ['generate days from date range'], 2], [(2157356, 0), [['The solution in this case is to either do the calculation manually, or, if your application will allow for it, add a very small buffer around the subtracted point to make it occupy space. In the example from the question, I do:'], ["SET @Route = geography::STLineFromText('LINESTRING(-0.175 51.0, -0.175 59.0)',4326)"]], [[' DECLARE @Route geography\n']], ["Why doesn't STDifference between a LINESTRING and a POINT on the line string yield a MULTILINESTRING of the two pieces?"], 2], [(2157356, 1), [["SET @Route = geography::STLineFromText('LINESTRING(-0.175 51.0, -0.175 59.0)',4326)"], ["This 0.01 meter buffer is irrelevant in my application but it solves the problem -- I now get a  MULTILINESTRING  with two pieces. The only gotcha is that they don't intersect, but I suppose this is to be expected."]], [[" DECLARE @Route2 geography\nSET @Route2 = @Route.STDifference(geography::STPointFromText('POINT(-0.175 52)', 4326).STBuffer(0.01))\n\nSELECT @Route2\n"]], ["Why doesn't STDifference between a LINESTRING and a POINT on the line string yield a MULTILINESTRING of the two pieces?"], 2], [(2160039, 0), [['So what you currently have is something like this ...'], ['... and what you want is ...']], [[' DESCRIPTION            SUPPLIER_CODE  COST_EX_TAX\nWidget                 X23                  42.00 \nBrass gadget           X23                  42.00 \nFlange                 X42                  23.00 \nFlange, steel          X42                  23.00 \n']], ['Rename data, then delete duplicates'], 2], [(2160039, 1), [['... and what you want is ...'], ["This still doesn't seem like the right approach.  That concatenated DESCRIPTION seems wrong to me.   However you know your data and your customer's requirements better than I do."]], [[' DESCRIPTION            SUPPLIER_CODE  COST_EX_TAX\nBrass gadget, Widget   X23                  42.00 \nFlange, Flange, steel  X42                  23.00 \n']], ['Rename data, then delete duplicates'], 2], [(2161590, 0), [['-10000'], ['Simple, and should work fine for small tables or tables with little duplicates.']], [[' DELETE T1\nFROM foo T1, foo T2\nWHERE (T1.city = T2.city AND foo1.zip=foo2.zip) -- Duplicate rows\n   AND T1.id > T2.id;                           -- Delete the one with higher id\n']], ['Delete duplicate entries via SQL?'], 3], [(2161590, 1), [['Simple, and should work fine for small tables or tables with little duplicates.'], ["If you're lucky enough to have a sequence as your id, simply:"]], [[' CREATE TABLE foo_temp LIKE(foo);\nINSERT INTO foo_temp (SELECT distinct city, zip) FORM foo;\nTRUNCATE TABLE foo;\n']], ['Delete duplicate entries via SQL?'], 3], [(2161590, 2), [["If you're lucky enough to have a sequence as your id, simply:"], ['A bit more complicated, but extremely efficient for very large tables with lots of duplicates. For these, creating an index for (city, zip) would incredibly improve the query performance.']], [[' INSERT INTO foo SELECT * FROM foo_temp;\nDROP TABLE foo_temp;\n']], ['Delete duplicate entries via SQL?'], 3], [(2164282, 0), [['It returns true if a column was updated. An update means that the query has SET the value of the column. Whether the previous value was the same as the new value is largely irelevant.'], ["it's an update."]], [[' UPDATE table SET col = col\n']], ['IF UPDATE() in SQL server trigger'], 2], [(2164282, 1), [["it's an update."], ["when the col already had value 99 also it's an update."]], [[' UPDATE table SET col = 99\n']], ['IF UPDATE() in SQL server trigger'], 2], [(2165119, 0), [['Also, while being potentially sub-optimal, this query is generic in a sense that it will work with most SQL implementation, not only the more modern ones, where the support of CTE, subqueries and related constructs are supported.'], ["Following is Joel's query here, slightly modified, to show how it can be expanded for more than 2 foo values."]], [["    SELECT DISTINCT Parent.ID\n    FROM Parent\n    JOIN Child C1 ON Parent.ID = C1.parent_Id\n    JOIN Child C2 ON Parent.ID = C2.parent_id\n    WHERE C1.foo = 'fizz'\n      AND C2.foo = 'buzz'\n"]], ['SQL Query to get records of parent table that have a list of child records'], 2], [(2165119, 1), [["Following is Joel's query here, slightly modified, to show how it can be expanded for more than 2 foo values."], ['-10000']], [[" SELECT Parent.Id\nFROM Parent\nINNER JOIN Child on Parent.Id = child.parent_id\nWHERE Child.foo IN ('fizz', 'buzz')  -- or say, ... IN ('fizz', 'buzz', 'bang', 'dong')\nGROUP BY Parent.Id\nHAVING COUNT(DISTINCT Child.foo) = 2  -- or 4 ...  \n"]], ['SQL Query to get records of parent table that have a list of child records'], 2], [(2167649, 0), [["You'll have to execute this with subqueries. "], ["Now, if you have multiple rows for a minimal field2 value, then you'll have dupes...If you don't want that (i.e. you want the minimal value of field3 for every minimal value of field2) in that case, you'd need another sub query: "]], [[' Select * from \n yourtable t\n  inner join \n    (   Select field1, min(field2) as minField2 \n        from yourtable \n        group by field1\n     ) xx \n    on t.field1 = xx.field1 and t.field2 = xx.minfield2\n']], ['How do I group by min value in one field of table, keeping all the values from that same row?'], 2], [(2167649, 1), [["Now, if you have multiple rows for a minimal field2 value, then you'll have dupes...If you don't want that (i.e. you want the minimal value of field3 for every minimal value of field2) in that case, you'd need another sub query: "], ['-10000']], [[' Select outert.field1, outert.field2, outert.field3\nfrom yourtable outert \ninner join \n\n( \n Select t.field1, xx.minfield2, min(field3) as minfield3 from \n yourtable t\n  inner join \n    (   Select field1, min(field2) as minField2 \n        from yourtable \n        group by field1\n     ) xx \n    on t.field1 = xx.field1 and t.field2 = xx.minfield2\n group by t.field1, xx.minfield2\n) outerx\non outerx.field1 = outert.field1 \nand outerx.field2 = outert.minfield2\nand outerx.field3 = outert.minfield3 \n']], ['How do I group by min value in one field of table, keeping all the values from that same row?'], 2], [(2168050, 0), [['Here is the simplest way I can think of.  It is a case statement in the group by.  If the condition is met then group by the label, otherwise group by the primary key.'], ['If you want to group by active and label:']], [[' SELECT id, label, active\nFROM table\nGROUP BY\n  CASE\n    WHEN active = 1 THEN active\n    ELSE id END\n']], ['Remove duplicate rows by value'], 2], [(2168050, 1), [['If you want to group by active and label:'], ['EDIT: I misunderstood which field you want to group on.  Corrected now.']], [[' SELECT id, label, active\nFROM table\nGROUP BY\n  CASE\n    WHEN active = 1 THEN active\n    ELSE id END,\n  label\n']], ['Remove duplicate rows by value'], 2], [(2168913, 0), [["I'm assuming your textboxes are on the same control (ie-they have the same parent object). You could use:"], ['Edit: For groupbox']], [[' Dim txtbox as TextBox = CType(parentControl.FindControl("TextBox" & dr(3).ToString()), TextBox)\ntxtBox.Text = dr(0)\n']], ['How to reference a control from a module?'], 2], [(2168913, 1), [['Edit: For groupbox'], ['-10000']], [[' For each ctrl as Control in myGB.Controls\n    If ctrl.ID = "TextBox" & dr(3).ToString() Then\n        CType(ctrl, TextBox).Text = dr(0)\n        \'EDIT: add exit to stop iteration once the textbox is found\n        Exit For  \n    End If\nNext \n']], ['How to reference a control from a module?'], 2], [(2169720, 0), [['Use:'], ['-10000']], [[' WITH summary AS (\n    SELECT TRUNC(ls.started,\'HH\') AS dt,\n           ls.depot,\n           COUNT(*) AS num_depot\n      FROM logstats ls\n  GROUP BY TRUNC(ls.started,\'HH\'), ls.depot)\n  SELECT s.dt,\n         MAX(CASE WHEN s.depot = \'foo\' THEN s.num_depot ELSE 0 END) AS "count_of_foo",\n         MAX(CASE WHEN s.depot = \'bar\' THEN s.num_depot ELSE 0 END) AS "count_of_bar"\n    FROM summary s\nGROUP BY s.dt\nORDER BY s.dt\n']], ['Oracle: pivot (coalesce) some counts onto a single row?'], 3], [(2169720, 1), [['-10000'], ['Pre Oracle9i would need the  CASE  statements changed to  DECODE , Oracle specific IF/ELSE logic.']], [['   SELECT s.dt,\n         MAX(CASE WHEN s.depot = \'foo\' THEN s.num_depot ELSE 0 END) AS "count_of_foo",\n         MAX(CASE WHEN s.depot = \'bar\' THEN s.num_depot ELSE 0 END) AS "count_of_bar"\n    FROM (SELECT TRUNC(ls.started,\'HH\') AS dt,\n                 ls.depot,\n                 COUNT(*) AS num_depot\n            FROM LOGSTATS ls\n        GROUP BY TRUNC(ls.started, \'HH\'), ls.depot) s\nGROUP BY s.dt\nORDER BY s.dt\n']], ['Oracle: pivot (coalesce) some counts onto a single row?'], 3], [(2169720, 2), [['Pre Oracle9i would need the  CASE  statements changed to  DECODE , Oracle specific IF/ELSE logic.'], ['-10000']], [["   SELECT * \n    FROM (SELECT TRUNC(ls.started, 'HH') AS dt,\n                 ls.depot\n            FROM LOGSTATS ls\n        GROUP BY TRUNC(ls.started, 'HH'), ls.depot)\n   PIVOT (\n     COUNT(*) FOR depot\n   )\nORDER BY 1\n"]], ['Oracle: pivot (coalesce) some counts onto a single row?'], 3], [(2170951, 0), [['Did you try this query?'], ['However, I think the real way to do it is to have 4 tables']], [[" select r.recordname\nfrom records r\nleft join values link on link.recordid = r.id and link.valname = 'myvalue'\nleft join keys k on r.keyid = link.key.id and k.keyname = 'mykey'\n"]], ["what's the best way to design dynamic key-value pairs in mysql?"], 3], [(2170951, 1), [['However, I think the real way to do it is to have 4 tables'], ['Then (with the right indexes) you can have a query like this']], [[' table records: id recordname\ntable keys: id keyname\ntable values : id valuename\ntable joins : id recordid keyid valueid\n']], ["what's the best way to design dynamic key-value pairs in mysql?"], 3], [(2170951, 2), [['Then (with the right indexes) you can have a query like this'], ['This should be quite fast... all it has to do is find the id in values and keys and then do a scan on j.  If you have the right indexes these will be quick.']], [[" select r.recordname\nfrom joins j\nleft join records r on j.recordid = r.id\nleft join keys k on j.keyid = k.id\nleft join values v on j.valueid = v.id\nwhere v.valuename = 'myvalue' and k.keyname = 'mykey'\n"]], ["what's the best way to design dynamic key-value pairs in mysql?"], 3], [(2174810, 0), [["While I am not very sure what you are going to achieve, but depending on what you've given as the table fields, I think a one-to-many relationship with the table itself is more appropriate."], ['EDIT:\nI would suppose you are going to have another table "aspnet_OwnerUser" which holds some user info.  Please take a look of the follow SQL if that\'s the case.  Otherwise, forget it.  ;)']], [[' TaskId (integer *Primary Key)\nRef_Id (integer *Foreign Key references to TaskId above)\nASPNet_OwnerUserId (integer)\nTitle (varchar/text)\nStartDate (Date/Timestamp)\nDueDate (Date/Timestamp)\n']], ['One-to-many relationship using same SQL table'], 2], [(2174810, 1), [['EDIT:\nI would suppose you are going to have another table "aspnet_OwnerUser" which holds some user info.  Please take a look of the follow SQL if that\'s the case.  Otherwise, forget it.  ;)'], ['p.s. the above SQL is written for PostgreSQL, for other DBMS, please feel free to alter it.']], [[' CREATE TABLE `aspnet_OwnerUser`\n(\n    `id` SERIAL PRIMARY KEY\n    , `name` VARCHAR(128)\n    -- further detail follows\n);\n\nCREATE TABLE `task`\n(\n    `id` SERIAL PRIMARY KEY\n    , `ref_id` INTEGER\n        CONSTRAINT REFERENCES `task`(`id`)\n    , `aspnet_OwnerUserId` INTEGER\n        CONSTRAINT REFERENCES `aspnet_OwnerUser`(`id`)\n    , `title` VARCHAR(128) NOT NULL\n    , `startdate` TIMESTAMP\n    , `duedate` TIMESTAMP\n);\n']], ['One-to-many relationship using same SQL table'], 2], [(2177358, 0), [['Think of the nested sets model as of an  XML  file with  lft  and  rgt  being the lines where the staring and ending tags reside:'], ["To insert a new subtag into the  root , you'll need to shift down all subsequent records:"]], [[' 1  <root>\n2   <item1>\n3   </item1>\n4  </root>\n']], ['Nested Set Model: Inserting Node at the end of SubNodes'], 3], [(2177358, 1), [["To insert a new subtag into the  root , you'll need to shift down all subsequent records:"], ["So you'll need to calculate the  item2.lft  and  item2.rgt  (which are the  item2.rgt + 1  and  item1.rgt + 2 , accordingly), and then increment  all   lft  and  rgt  of  all  items which are greater than the  item1.rgt :"]], [[' 1  <root>\n2   <item1>\n3   </item1>\n4   <item2>\n5   </item2>\n6  </root>\n']], ['Nested Set Model: Inserting Node at the end of SubNodes'], 3], [(2177358, 2), [["So you'll need to calculate the  item2.lft  and  item2.rgt  (which are the  item2.rgt + 1  and  item1.rgt + 2 , accordingly), and then increment  all   lft  and  rgt  of  all  items which are greater than the  item1.rgt :"], ['-10000']], [[' UPDATE  mytable\nSET     rgt = rgt + 2\nWHERE   rgt > item1.rgt\n\nUPDATE  mytable\nSET     lft = lft + 2\nWHERE   lft > item1.rgt\n']], ['Nested Set Model: Inserting Node at the end of SubNodes'], 3], [(2177605, 0), [["If the applications are run on the same machine but are started by 'root', then an option is to modify the code that runs the applications so that where it now does:"], ['in future it does:']], [[' run_application\n']], ['Maintaining application/system accounts for database access'], 2], [(2177605, 1), [['in future it does:'], ["User 'root', of course, is empowered to run things as other users without bothering with trivial details like passwords.  You might have to modify the application to avoid connecting with user name and password, again."]], [[' su app_user -c run_application\n']], ['Maintaining application/system accounts for database access'], 2], [(2178097, 0), [['If you mean that you want to return at most 1000 distinct records, regardless of how many duplicates are in the table, then write this:'], ['If you only want to  search  the first 1000 rows in the table, and potentially return much fewer than 1000 distinct rows, then you would write it with a subquery or CTE, like this:']], [[' SELECT DISTINCT TOP 1000 id, uname, tel\nFROM Users\nORDER BY <sort_columns>\n']], ['Get top first record from duplicate records having no unique identity'], 2], [(2178097, 1), [['If you only want to  search  the first 1000 rows in the table, and potentially return much fewer than 1000 distinct rows, then you would write it with a subquery or CTE, like this:'], ["The  ORDER BY  is of course optional if you don't care about which records you return."]], [[' SELECT DISTINCT *\nFROM\n(\n    SELECT TOP 1000 id, uname, tel\n    FROM Users\n    ORDER BY <sort_columns>\n) u\n']], ['Get top first record from duplicate records having no unique identity'], 2], [(2178460, 0), [["Depending on your DBMS transactions will be handled differently, so read the documentation. For instance with  mysql  here's how it goes:"], ['With  Postresql :']], [[' START TRANSACTION;\nSELECT @A:=SUM(salary) FROM table1 WHERE type=1;\nUPDATE table2 SET summary=@A WHERE type=1;\nCOMMIT;\n']], ['SQL update undo'], 3], [(2178460, 1), [['With  Postresql :'], ['With  TSQL :']], [[" BEGIN;\nUPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';\n-- etc etc\nCOMMIT;\n"]], ['SQL update undo'], 3], [(2178460, 2), [['With  TSQL :'], ["There are also some actions that can't be put into a transaction, but in most of the database management systems you can find these days you should be able to rollback an  update ."]], [[" DECLARE @TranName VARCHAR(20)\nSELECT @TranName = 'MyTransaction'\nBEGIN TRANSACTION @TranName\nGO\nUSE pubs\nGO\nUPDATE roysched\nSET royalty = royalty * 1.10\nWHERE title_id LIKE 'Pc%'\nGO\nCOMMIT TRANSACTION MyTransaction\nGO\n"]], ['SQL update undo'], 3], [(2178634, 0), [['-10000'], ['-10000']], [[' SELECT t.*\n  FROM TABLE t\n WHERE t.date_time_col = (SELECT TOP 1\n                                 x.date_time_col\n                            FROM TABLE x\n                           WHERE CONVERT(hh, x.date_time_col, 8) < @myTime\n                        ORDER BY x.date_time_col)\n']], ['SQL Query for lowest time rows'], 2], [(2178634, 1), [['-10000'], ['Neither will use an index, assuming one exists on the DATETIME column, because of the use of a function - the data type is being changed.']], [[' SELECT t.*\n  FROM TABLE t\n WHERE t.date_time_col = (SELECT MIN(x.date_time_col)\n                            FROM TABLE x\n                           WHERE CONVERT(hh, x.date_time_col, 8) < @myTime)\n']], ['SQL Query for lowest time rows'], 2], [(2179092, 0), [['-10000'], ['-10000']], [['SQL Server 2005+ Version ;WITH CTE AS\n(\n    SELECT\n        Amount, [Date], Name,\n        ROW_NUMBER() OVER (PARTITION BY Name ORDER BY [Amount]) AS RowNum\n    FROM Table\n)\nSELECT *\nFROM CTE\nWHERE RowNum = 1\n']], ['SQL Server query to select local maximums'], 2], [(2179092, 1), [['-10000'], ['-10000']], [['Alternative Version SELECT t.Amount, t.[Date], t.Name\nFROM\n(\n    SELECT Name, MIN(Amount) AS MinAmount\n    FROM Table\n    GROUP BY Name\n) m\nINNER JOIN Table t\n    ON t.Name = m.Name\n    AND t.Amount = m.Amount\n']], ['SQL Server query to select local maximums'], 2], [(2179512, 0), [['If you are in a test environment, you can put your tablespace offline and online again:'], ['Or you can try']], [[' ALTER TABLESPACE <tablespace_name> OFFLINE;\nALTER TABLESPACE <tablespace_name> ONLINE;\n']], ['How to disable oracle cache for performance tests'], 2], [(2179512, 1), [['Or you can try'], ['but again only on test environment.']], [[' ALTER SYSTEM FLUSH BUFFER_CACHE;\n']], ['How to disable oracle cache for performance tests'], 2], [(2180899, 0), [['So you should be able to do something like:'], ["You may want to make sure that you don't have a row where StartDate > EndDate, using a check constraint. Otherwise, include:"]], [[' select *\nfrom yourTable t1\n  join\n  yourTable t2\n   on  t2.StartDate < t1.EndDate\n   and t1.StartDate < t2.EndDate\n']], ['Transact-SQL: Detect Date boundaries across multiple rows'], 2], [(2180899, 1), [["You may want to make sure that you don't have a row where StartDate > EndDate, using a check constraint. Otherwise, include:"], ['-10000']], [['    and t1.StartDate < t1.EndDate\n   and t2.StartDate < t2.EndDate\n']], ['Transact-SQL: Detect Date boundaries across multiple rows'], 2], [(2182403, 0), [['First some test data:'], ['You need two steps, one to get empIds and their summed order value. Step two will be to get the total total and rank:']], [[' insert into #t values (1, 10, 100)\ninsert into #t values (1, 20, 101)\ninsert into #t values (2, 30, 120)\ninsert into #t values (3, 10, 130)\ninsert into #t values (3, 10.5, 131)\ninsert into #t values (4, 100, 140)\n']], ['Windowed Functions in SQL Server'], 4], [(2182403, 1), [['You need two steps, one to get empIds and their summed order value. Step two will be to get the total total and rank:'], ['This will give output of:']], [[' ; with Step1 (EmpId, ValueThisEmpId) as\n    (select empId, sum(OrderValue)\n    from #t\n    group by empId)\nselect EmpId, \n    rank() over(order by ValueThisEmpId desc) as "rank", \n    sum(ValueTHisEmpId) over() as ValueTotal, \n    ValueThisEmpId\nfrom Step1\n']], ['Windowed Functions in SQL Server'], 4], [(2182403, 2), [['This will give output of:'], ["If you don't want gaps in the ranking, use dense rank:"]], [[' 4   1   180.50  100.00\n1   2   180.50  30.00\n2   2   180.50  30.00\n3   4   180.50  20.50\n']], ['Windowed Functions in SQL Server'], 4], [(2182403, 3), [["If you don't want gaps in the ranking, use dense rank:"], ['-10000']], [[' ; with Step1 (EmpId, ValueThisEmpId) as\n    (select empId, sum(OrderValue)\n    from #t\n    group by empId)\nselect EmpId, \n    dense_rank() over(order by ValueThisEmpId desc) as "rank", \n    sum(ValueTHisEmpId) over() as TotalValue, \n    ValueThisEmpId\nfrom Step1    \n']], ['Windowed Functions in SQL Server'], 4], [(2182877, 0), [['Here is a simple set based way that will collapse multiple spaces into a single space by applying three replaces.'], ['Your Update statement can now be set based:']], [[" DECLARE @myTable TABLE (myTextColumn VARCHAR(50))\n\nINSERT INTO @myTable VALUES ('0Space')\nINSERT INTO @myTable VALUES (' 1 Spaces 1 Spaces. ')\nINSERT INTO @myTable VALUES ('  2  Spaces  2  Spaces.  ')\nINSERT INTO @myTable VALUES ('   3   Spaces  3   Spaces.   ')\nINSERT INTO @myTable VALUES ('    4    Spaces  4    Spaces.    ')\nINSERT INTO @myTable VALUES ('     5     Spaces  5     Spaces.     ')\nINSERT INTO @myTable VALUES ('      6      Spaces  6      Spaces.      ')\n\nselect replace(\n          replace(\n             replace(\n                LTrim(RTrim(myTextColumn)), ---Trim the field\n             '  ',' |'),                    ---Mark double spaces\n          '| ',''),                         ---Delete double spaces offset by 1\n       '|','')                              ---Tidy up\n       AS SingleSpaceTextColumn\n from @myTable\n"]], ['SQL method to replace repeating blanks with single blanks'], 3], [(2182877, 1), [['Your Update statement can now be set based:'], ['Example:']], [["  update @myTable\n    set myTextColumn = replace(\n                          replace(\n                             replace(\n                                LTrim(RTrim(myTextColumn)),\n                             '  ',' |'),\n                          '| ',''),\n                       '|','')  \n"]], ['SQL method to replace repeating blanks with single blanks'], 3], [(2182877, 2), [['Example:'], ['I have found an external write up on this method:  REPLACE Multiple Spaces with One']], [[" where 1<=Patindex('%  %', myTextColumn)\n"]], ['SQL method to replace repeating blanks with single blanks'], 3], [(2183107, 0), [['Create the indexes on  id  and  parentId  of your table manually:'], ['You can make the queries to use the  SPATIAL  indexes:']], [[' CREATE INDEX ix_mytable_parentid ON mytable (parentid)\n']], ['How to use foreign keys and a spatial index inside a MySQL table?'], 2], [(2183107, 1), [['You can make the queries to use the  SPATIAL  indexes:'], ['which will use the spatial index for searching and the relationship for fine filtering.']], [[" SELECT  *\nFROM    mytable m1\nJOIN    mytable m2\nON      MBRContains (m2.area, m1.area)\n        AND m2.parentId = m1.id\nWHERE   m1.name = 'London'\n"]], ['How to use foreign keys and a spatial index inside a MySQL table?'], 2], [(2183142, 0), [['The thing that jumps out the most is the  wr.wr_wo_id IN (SELECT...)  part. This would be far more efficient as a join, like this:'], ['To do the reverse, i.e. to replace  WHERE wr.wr_wo_id NOT IN (SELECT...) , you would use:']], [[" SELECT wr.wr_re_id as ReID, sum(wr.wr_total) as PRTotal \nFROM Workorder2 w\n    INNER JOIN Workorder_Row2 wr on wr.wr_wo_id = w.wo_id\n    INNER JOIN (\n        SELECT DISTINCT wr2.wr_wo_id\n        FROM Workorder_Row2 wr2 \n            INNER JOIN Workorder2 w2 on w2.wo_id = wr2.wr_wo_id \n        WHERE w2.wo_date_time >= '2010-01-01' \n            AND w2.wo_date_time <= '2010-01-31'\n            AND wr2.wr_row_type = 1\n    ) T ON T.wr_wo_id = wr.wr_wo_id\nWHERE (w.wo_type = 1 or w.wo_type = 2)\n    AND wr.wr_row_type = 2\n    AND w.wo_lo_id like '%'\n    AND w.wo_date_time >= '2010-01-01' AND w.wo_date_time <= '2010-01-31'\nGROUP BY wr.wr_re_id\n"]], ['optimize this SQL query'], 3], [(2183142, 1), [['To do the reverse, i.e. to replace  WHERE wr.wr_wo_id NOT IN (SELECT...) , you would use:'], ['However, it is more readable and (I would guess, though try it) more efficient to use:']], [[" SELECT wr.wr_re_id as ReID, sum(wr.wr_total) as PRTotal \nFROM Workorder2 w\n    INNER JOIN Workorder_Row2 wr on wr.wr_wo_id = w.wo_id\n    LEFT JOIN (\n        SELECT DISTINCT wr2.wr_wo_id\n        FROM Workorder_Row2 wr2 \n            INNER JOIN Workorder2 w2 on w2.wo_id = wr2.wr_wo_id \n        WHERE w2.wo_date_time >= '2010-01-01' \n            AND w2.wo_date_time <= '2010-01-31'\n            AND wr2.wr_row_type = 1\n    ) T ON T.wr_wo_id = wr.wr_wo_id\nWHERE T.wr2.wr_wo_id IS NULL\n    AND (w.wo_type = 1 or w.wo_type = 2)\n    AND wr.wr_row_type = 2\n    AND w.wo_lo_id like '%'\n    AND w.wo_date_time >= '2010-01-01' AND w.wo_date_time <= '2010-01-31'\nGROUP BY wr.wr_re_id\n"]], ['optimize this SQL query'], 3], [(2183142, 2), [['However, it is more readable and (I would guess, though try it) more efficient to use:'], ['-10000']], [[" SELECT wr.wr_re_id as ReID, sum(wr.wr_total) as PRTotal \nFROM Workorder2 w\n    INNER JOIN Workorder_Row2 wr on wr.wr_wo_id = w.wo_id\nWHERE (w.wo_type = 1 or w.wo_type = 2)\n    AND wr.wr_row_type = 2\n    AND w.wo_lo_id like '%'\n    AND w.wo_date_time >= '2010-01-01' AND w.wo_date_time <= '2010-01-31'\n    AND NOT EXISTS (\n        SELECT NULL\n        FROM Workorder_Row2 wr2 \n            INNER JOIN Workorder2 w2 on w2.wo_id = wr2.wr_wo_id \n        WHERE w2.wo_date_time >= '2010-01-01' \n            AND w2.wo_date_time <= '2010-01-31'\n            AND wr2.wr_row_type = 1\n            AND wr2.wr_wo_id = wr.wr_wo_id\n    )\nGROUP BY wr.wr_re_id\n"]], ['optimize this SQL query'], 3], [(2183373, 0), [["First, let's make some test data:"], ["If you didn't need the portfolio ID, it would be easy:"]], [[" create table client (client_id integer not null primary key auto_increment,\n                     name varchar(64));\ncreate table portfolio (portfolio_id integer not null primary key auto_increment,\n                        client_id integer references client.id,\n                        cash decimal(10,2),\n                        stocks decimal(10,2));\ninsert into client (name) values ('John Doe'), ('Jane Doe');\ninsert into portfolio (client_id, cash, stocks) values (1, 11.11, 22.22),\n                                                       (1, 10.11, 23.22),\n                                                       (2, 30.30, 40.40),\n                                                       (2, 40.40, 50.50);\n"]], ['MySQL GROUP BY two columns'], 6], [(2183373, 1), [["If you didn't need the portfolio ID, it would be easy:"], ["Since you need the portfolio ID, things get more complicated.  Let's do it in steps.  First, we'll write a subquery that returns the maximal portfolio value for each client:"]], [[' select client_id, name, max(cash + stocks)\nfrom client join portfolio using (client_id)\ngroup by client_id\n\n+-----------+----------+--------------------+\n| client_id | name     | max(cash + stocks) |\n+-----------+----------+--------------------+\n|         1 | John Doe |              33.33 | \n|         2 | Jane Doe |              90.90 | \n+-----------+----------+--------------------+\n']], ['MySQL GROUP BY two columns'], 6], [(2183373, 2), [["Since you need the portfolio ID, things get more complicated.  Let's do it in steps.  First, we'll write a subquery that returns the maximal portfolio value for each client:"], ["Then we'll query the portfolio table, but use a join to the previous subquery in order to keep only those portfolios the total value of which is the maximal for the client:"]], [[' select client_id, max(cash + stocks) as maxtotal\nfrom portfolio\ngroup by client_id\n\n+-----------+----------+\n| client_id | maxtotal |\n+-----------+----------+\n|         1 |    33.33 | \n|         2 |    90.90 | \n+-----------+----------+\n']], ['MySQL GROUP BY two columns'], 6], [(2183373, 3), [["Then we'll query the portfolio table, but use a join to the previous subquery in order to keep only those portfolios the total value of which is the maximal for the client:"], ['Finally, we can join to the client table (as you did) in order to include the name of each client:']], [['  select portfolio_id, cash + stocks from portfolio \n join (select client_id, max(cash + stocks) as maxtotal \n       from portfolio\n       group by client_id) as maxima\n using (client_id)\n where cash + stocks = maxtotal\n\n+--------------+---------------+\n| portfolio_id | cash + stocks |\n+--------------+---------------+\n|            5 |         33.33 | \n|            6 |         33.33 | \n|            8 |         90.90 | \n+--------------+---------------+\n']], ['MySQL GROUP BY two columns'], 6], [(2183373, 4), [['Finally, we can join to the client table (as you did) in order to include the name of each client:'], ['Note that this returns two rows for John Doe because he has two portfolios with the exact same total value.  To avoid this and pick an arbitrary top portfolio, tag on a GROUP BY clause:']], [[' select client_id, name, portfolio_id, cash + stocks\nfrom client\njoin portfolio using (client_id)\njoin (select client_id, max(cash + stocks) as maxtotal\n      from portfolio \n      group by client_id) as maxima\nusing (client_id)\nwhere cash + stocks = maxtotal\n\n+-----------+----------+--------------+---------------+\n| client_id | name     | portfolio_id | cash + stocks |\n+-----------+----------+--------------+---------------+\n|         1 | John Doe |            5 |         33.33 | \n|         1 | John Doe |            6 |         33.33 | \n|         2 | Jane Doe |            8 |         90.90 | \n+-----------+----------+--------------+---------------+\n']], ['MySQL GROUP BY two columns'], 6], [(2183373, 5), [['Note that this returns two rows for John Doe because he has two portfolios with the exact same total value.  To avoid this and pick an arbitrary top portfolio, tag on a GROUP BY clause:'], ['-10000']], [[' select client_id, name, portfolio_id, cash + stocks\nfrom client\njoin portfolio using (client_id)\njoin (select client_id, max(cash + stocks) as maxtotal\n      from portfolio \n      group by client_id) as maxima\nusing (client_id)\nwhere cash + stocks = maxtotal\ngroup by client_id, cash + stocks\n\n+-----------+----------+--------------+---------------+\n| client_id | name     | portfolio_id | cash + stocks |\n+-----------+----------+--------------+---------------+\n|         1 | John Doe |            5 |         33.33 | \n|         2 | Jane Doe |            8 |         90.90 | \n+-----------+----------+--------------+---------------+\n']], ['MySQL GROUP BY two columns'], 6], [(2184047, 0), [['instead of '], ['you would have']], [[" SELECT *\nFROM mytable\nWHERE match(text,phone,phone2) AGAINST ('something')\nORDER BY match(text,phone,phone2) AGAINST ('something');\n"]], ['Zend Framework zend_db_select ORDER'], 3], [(2184047, 1), [['you would have'], ['So, more in relation to your case your select would look something more like']], [[" SELECT mytable.*, match(text,phone,phone2) AGAINST ('something') AS relevanceScore\nFROM mytable\nWHERE match(text,phone,phone2) AGAINST ('something')\nORDER BY relevanceScore DESC;\n"]], ['Zend Framework zend_db_select ORDER'], 3], [(2184047, 2), [['So, more in relation to your case your select would look something more like'], ['-10000']], [[" $select->from('tableName',array('*','relevenceScore'=>$db->quoteInto('MATCH(text,phone,phone2,email,email2,www,gadi,augums,skype) AGAINST(?)',$searching_string));\n$select->where('MATCH(text,phone,phone2,email,email2,www,gadi,augums,skype) AGAINST(?)',$searching_string);\n$select->order('relevanceScore DESC');\n"]], ['Zend Framework zend_db_select ORDER'], 3], [(2185780, 0), [['I wrote code for this for an app just last week:'], ['In this case, a previous developer had stupidly used VBA variable naming conventions for the field names (txtLastName for what should be LastName, for instance) and I needed to remove all of them. The code is called like this:']], [['   Public Sub RenameFields(ByRef tdf As DAO.TableDef)\n    Dim fld As DAO.Field\n    Dim strFieldName As String\n    Dim strNewName As String\n\n    Debug.Print "==============================================" & vbCrLf & UCase(tdf.Name)\n    For Each fld In tdf.Fields\n      strFieldName = fld.Name\n      strNewName = Mid(strFieldName, 4)\n      Select Case Left(strFieldName, 3)\n        Case "boo", "byt", "cur", "dat", "hyp", "int", "mem", "obj", "txt"\n          fld.Name = strNewName\n          Debug.Print tdf.Name & "." & strFieldName & "=>" & strNewName\n      End Select\n    Next fld\n    Set fld = Nothing\n  End Sub\n']], ['MS Access: programmatically rename columns'], 4], [(2185780, 1), [['In this case, a previous developer had stupidly used VBA variable naming conventions for the field names (txtLastName for what should be LastName, for instance) and I needed to remove all of them. The code is called like this:'], ['You could easily adapt the RenameFields() sub to use Replace() for the new name, something like this:']], [['   Dim tdf As DAO.TableDef\n\n  For Each tdf in CurrentDB.TableDefs\n    If Left(tdf.Name,3) = "tbl" Then \' <= this line may differ for you\n       Call RenameFields(tdf)\n    End If\n  Next tdf\n  Set tdf = Nothing\n']], ['MS Access: programmatically rename columns'], 4], [(2185780, 2), [['You could easily adapt the RenameFields() sub to use Replace() for the new name, something like this:'], ["All that said, I'd really, really strongly suggest that you  not  replace the underscores with spaces, as this makes it much, much more difficult to work with the field names in SQL and in code. I would use CAMEL case with no underscores or spaces or dashes so that the Replace() line in the code above would become:"]], [['   Public Sub RenameFields(ByRef tdf As DAO.TableDef)\n    Dim fld As DAO.Field\n    Dim strFieldName As String\n    Dim strNewName As String\n\n    Debug.Print "==============================================" & vbCrLf & UCase(tdf.Name)\n    For Each fld In tdf.Fields\n      strFieldName = fld.Name\n      strNewName = Replace(strFieldName, "_"," ")\n      If strFieldName <> strNewName Then\n         fld.Name = strNewName\n         Debug.Print tdf.Name & "." & strFieldName & "=>" & strNewName\n      End If\n    Next fld\n    Set fld = Nothing\n  End Sub\n']], ['MS Access: programmatically rename columns'], 4], [(2185780, 3), [["All that said, I'd really, really strongly suggest that you  not  replace the underscores with spaces, as this makes it much, much more difficult to work with the field names in SQL and in code. I would use CAMEL case with no underscores or spaces or dashes so that the Replace() line in the code above would become:"], ['That would convert "Last_Name" or "last_name" to "LastName". Camel case for readability of field names has been standard for Access developers as long as I\'ve been programming in Access (since 1996), and avoids the issues caused by special characters or spaces (i.e., having to surround the field name with square brackets).']], [['   strNewName = Replace(StrConv(Replace(strFieldName, "_"," "), vbProper)," ", vbNullString)\n']], ['MS Access: programmatically rename columns'], 4], [(2186318, 0), [['Try this:'], ['On this test data:']], [[' SELECT\n    T1.SrcAddress,\n    T1.SrcPort,\n    T1.DestAddress,\n    T1.DestPort,\n    T1.Bytes + COALESCE(T2.Bytes, 0) AS TotalBytes,\n    T1.Bytes AS A_to_B,\n    COALESCE(T2.Bytes, 0) AS B_to_A\nFROM (\n    SELECT SrcAddress, SrcPort, DestAddress, DestPort, SUM(Bytes) AS Bytes\n    FROM PacketHeaders\n    GROUP BY SrcAddress, SrcPort, DestAddress, DestPort) AS T1\nLEFT JOIN (\n    SELECT SrcAddress, SrcPort, DestAddress, DestPort, SUM(Bytes) AS Bytes\n    FROM PacketHeaders\n    GROUP BY SrcAddress, SrcPort, DestAddress, DestPort) AS T2\nON T1.SrcAddress = T2.DestAddress\nAND T1.SrcPort = T2.DestPort\nAND T1.DestAddress = T2.SrcAddress\nAND T1.DestPort = T2.SrcPort\nWHERE T1.SrcAddress < T1.DestAddress OR\n    (T1.SrcAddress = T1.DestAddress AND T1.SrcPort = T1.DestPort) OR\n    T2.DestAddress IS NULL\n']], ['Combining SQL Rows'], 3], [(2186318, 1), [['On this test data:'], ['This gives the following results:']], [[" CREATE TABLE PacketHeaders (ID INT, SrcAddress NVARCHAR(100), SrcPort INT, DestAddress NVARCHAR(100), DestPort INT, Bytes INT);\nINSERT INTO PacketHeaders (ID, SrcAddress, SrcPort, DestAddress, DestPort, Bytes) VALUES\n(1, '10.0.25.1', 255, '10.0.25.50', 500, 64),\n(2, '10.0.25.50', 500, '10.0.25.1', 255, 80),\n(3, '10.0.25.50', 500, '10.0.25.1', 255, 16),\n(4, '75.48.0.25', 387, '74.26.9.40', 198, 72),\n(5, '74.26.9.40', 198, '75.48.0.25', 387, 64),\n(6, '10.0.25.1', 255, '10.0.25.50', 500, 48),\n(7, '10.0.25.2', 255, '10.0.25.50', 500, 48),\n(8, '10.0.25.52', 255, '10.0.25.50', 500, 48);\n"]], ['Combining SQL Rows'], 3], [(2186318, 2), [['This gives the following results:'], ['The way it works is to first group one-way conversations and total the byte counts. This assures that every conversation will be represented exactly twice - once for each direction. This result is then self-joined to give the result you need, filtering the duplicates by enforcing that the (address, port) of A must be less than B. A left join is used to allow one-way conversations.']], [[" '10.0.25.1', 255, '10.0.25.50', 500, 208, 112, 96\n'10.0.25.2', 255, '10.0.25.50', 500, 48, 48, 0\n'10.0.25.52', 255, '10.0.25.50', 500, 48, 48, 0\n'74.26.9.40', 198, '75.48.0.25', 387, 136, 64, 72\n"]], ['Combining SQL Rows'], 3], [(2186392, 0), [['For SQL Server try:'], ['OUTPUT:']], [[" DECLARE @Events  table (EventTime char(5), EventType varchar(5))\n\nINSERT INTO @Events VALUES ('08:00','Start')\nINSERT INTO @Events VALUES ('09:00','Stop')\nINSERT INTO @Events VALUES ('10:30','Start')\nINSERT INTO @Events VALUES ('10:45','Stop')\nINSERT INTO @Events VALUES ('11:00','Start')\nINSERT INTO @Events VALUES ('11:15','Start')\nINSERT INTO @Events VALUES ('12:00','Stop')\nINSERT INTO @Events VALUES ('12:30','Stop')\n\nSELECT\n    dt.StartTime, dt.StopTime\n    FROM (SELECT\n              p.EventTime AS StartTime,CASE WHEN c.EventType!='Stop' THEN NULL ELSE c.EventTime END AS StopTime\n                  ,p.EventTime AS SortBy\n              FROM @Events          p\n                INNER JOIN @Events  c ON p.EventTime<c.EventTime\n              WHERE p.EventType='Start'\n                  AND c.EventTime=(SELECT MIN(EventTime) FROM @Events WHERE  EventTime>p.EventTime)\n          UNION\n          SELECT\n              NULL AS StartTime,p.EventTime\n                  ,p.EventTime AS SortBy\n              FROM @Events          p\n                INNER JOIN @Events  c ON p.EventTime>c.EventTime\n              WHERE p.EventType='STOP'\n                  AND c.EventTime=(SELECT MAX(EventTime) FROM @Events WHERE  EventTime<p.EventTime)\n                  AND c.EventType='Stop'\n         ) dt\n    ORDER BY dt.SortBy\n"]], ['Self join of time series data'], 2], [(2186392, 1), [['OUTPUT:'], ['-10000']], [[' StartTime StopTime\n--------- --------\n08:00     09:00\n10:30     10:45\n11:00     NULL\n11:15     12:00\nNULL      12:30\n\n(5 row(s) affected)\n']], ['Self join of time series data'], 2], [(2186698, 0), [['So when a client creates a .Net TransactionScope and under this transaction scope it executes multiple requests on the same server, these requests are all local transactions enrolled in a distributed transaction. A simple example:'], ['Create a dummy test table:']], [[' class Program\n    {\n        static string sqlBatch = @"\nset nocount on;\ndeclare @i int;\nset @i = 0;\nwhile @i < 100000\nbegin\n    insert into test (a) values (replicate(\'a\',100));\n    set @i = @i+1;\nend";\n\n        static void Main(string[] args)\n        {\n            try\n            {\n                TransactionOptions to = new TransactionOptions();\n                to.IsolationLevel = IsolationLevel.ReadCommitted;\n                using (TransactionScope scp = new TransactionScope(TransactionScopeOption.Required, to))\n                {\n                    using (SqlConnection connA = new SqlConnection(Settings.Default.connString))\n                    {\n                        connA.Open();\n                        using (SqlConnection connB = new SqlConnection(Settings.Default.connString))\n                        {\n                            connB.Open();\n\n                            SqlCommand cmdA = new SqlCommand(sqlBatch, connA);\n                            SqlCommand cmdB = new SqlCommand(sqlBatch, connB);\n\n                            IAsyncResult arA = cmdA.BeginExecuteNonQuery();\n                            IAsyncResult arB = cmdB.BeginExecuteNonQuery();\n\n                            WaitHandle.WaitAll(new WaitHandle[] { arA.AsyncWaitHandle, arB.AsyncWaitHandle });\n\n                            cmdA.EndExecuteNonQuery(arA);\n                            cmdB.EndExecuteNonQuery(arB);\n                        }\n                    }\n                    scp.Complete();\n                }\n            }\n            catch (Exception e)\n            {\n                Console.Error.Write(e);\n            }\n        }\n    }\n']], ['How do distributed transactions behave with multiple connections to the same DB in a threaded environment?'], 3], [(2186698, 1), [['Create a dummy test table:'], ['Using explicit threads and dependent transactions:']], [[' create table test (id int not null identity(1,1) primary key, a varchar(100));\n']], ['How do distributed transactions behave with multiple connections to the same DB in a threaded environment?'], 3], [(2186698, 2), [['Using explicit threads and dependent transactions:'], ['-10000']], [['  private class ThreadState\n    {\n        public DependentTransaction Transaction {get; set;}\n        public EventWaitHandle Done {get; set;}\n        public SqlConnection Connection { get; set; }\n    }\n    static void Main(string[] args)\n    {\n        try\n        {\n            TransactionOptions to = new TransactionOptions();\n            to.IsolationLevel = IsolationLevel.ReadCommitted;\n            using (TransactionScope scp = new TransactionScope(TransactionScopeOption.Required, to))\n            {\n                ThreadState stateA = new ThreadState \n                {\n                    Transaction = Transaction.Current.DependentClone(DependentCloneOption.BlockCommitUntilComplete),\n                    Done = new AutoResetEvent(false),\n                    Connection = new SqlConnection(Settings.Default.connString),\n                };\n                stateA.Connection.Open();\n                ThreadState stateB = new ThreadState\n                {\n                    Transaction = Transaction.Current.DependentClone(DependentCloneOption.BlockCommitUntilComplete),\n                    Done = new AutoResetEvent(false),\n                    Connection = new SqlConnection(Settings.Default.connString),\n                };\n                stateB.Connection.Open();\n\n                ThreadPool.QueueUserWorkItem(new WaitCallback(Worker), stateA);\n                ThreadPool.QueueUserWorkItem(new WaitCallback(Worker), stateB);\n\n                WaitHandle.WaitAll(new WaitHandle[] { stateA.Done, stateB.Done });\n\n                scp.Complete();\n\n                //TODO: dispose the open connections\n            }\n\n        }\n        catch (Exception e)\n        {\n            Console.Error.Write(e);\n        }\n    }\n\n    private static void Worker(object args)\n    {\n        Debug.Assert(args is ThreadState);\n        ThreadState state = (ThreadState) args;\n        try\n        {\n            using (TransactionScope scp = new TransactionScope(state.Transaction))\n            {\n                SqlCommand cmd = new SqlCommand(sqlBatch, state.Connection);\n                cmd.ExecuteNonQuery();\n                scp.Complete();\n            }\n            state.Transaction.Complete();\n        }\n        catch (Exception e)\n        {\n            Console.Error.WriteLine(e);\n            state.Transaction.Rollback();\n        }\n        finally\n        {\n            state.Done.Set();\n        }\n\n    }\n']], ['How do distributed transactions behave with multiple connections to the same DB in a threaded environment?'], 3], [(2189822, 0), [['Since the numbers are zero-padded, you can simply compare them as strings:'], ['Or if you want to ignore the prefix in  field1 :']], [[' SELECT ...\nFROM ...\nORDER BY field1 ASC, field2 ASC\n']], ['sql order by numeric string '], 2], [(2189822, 1), [['Or if you want to ignore the prefix in  field1 :'], ['-10000']], [[' SELECT ..., SUBSTR(field1, 3) AS stripped_field1 \nFROM ...\nORDER BY stripped_field1 ASC, field2 ASC\n']], ['sql order by numeric string '], 2], [(2190434, 0), [["So it's not so much:"], ['but more like:']], [[' for every row:\n    set x = y\n    set y = x\n']], ['SQL: Exchange column values'], 2], [(2190434, 1), [['but more like:'], ["Keep in mind that's just the conceptual view. It's likely to be much more efficient under the covers."]], [[' for every row:\n    set tmpx = x\n    set tmpy = y\n    set x = tmpy\n    set y = tmpx\n']], ['SQL: Exchange column values'], 2], [(2191607, 0), [['Escape them:'], ['You may need to provide your own escape character for this to be portable:']], [[" SELECT '%' LIKE '%\\\\%%'\n"]], ['how to avoid & and % in search'], 2], [(2191607, 1), [['You may need to provide your own escape character for this to be portable:'], [', since  MySQL  treats backslash as a special character while  Oracle  does not.']], [[" LIKE '%!%%' ESCAPE '!'\n"]], ['how to avoid & and % in search'], 2], [(2192424, 0), [['-10000'], ['or even']], [[" select\n  trunc(sysdate, 'mi')\n  - numtodsinterval(mod(EXTRACT(minute FROM cast(sysdate as timestamp)), 10), 'minute')\nfrom dual;\n"]], ['Round date to 10 minutes interval'], 2], [(2192424, 1), [['or even'], ['-10000']], [[" select\n  trunc(sysdate, 'mi')\n  - mod(EXTRACT(minute FROM cast(sysdate as timestamp)), 10) / (24 * 60)\nfrom dual;\n"]], ['Round date to 10 minutes interval'], 2], [(2192719, 0), [['These records do not contribute into the first sum but do contribute into the second one.'], ['Use this:']], [[" WITH    q (ChargeOffDate, FaceValue) AS\n        (\n        SELECT  CAST('20030101' AS DATETIME), 1.0\n        UNION ALL\n        SELECT  CAST('20030201' AS DATETIME), 2.0\n        UNION ALL\n        SELECT  CAST('20030301' AS DATETIME), 3.0\n        UNION ALL\n        SELECT  NULL, 4.0\n        )\nSELECT  CONVERT(DATETIME, SUM(CONVERT(FLOAT, ChargeOffDate) * FaceValue) / SUM(FaceValue))\nFROM    q\n\n----\n1961-11-12 21:36:00.000\n"]], ['How do I get a proper weighted average date in SQL'], 2], [(2192719, 1), [['Use this:'], ['-10000']], [[" WITH    q (ChargeOffDate, FaceValue) AS\n        (\n        SELECT  CAST('20030101' AS DATETIME), 1.0\n        UNION ALL\n        SELECT  CAST('20030201' AS DATETIME), 2.0\n        UNION ALL\n        SELECT  CAST('20030301' AS DATETIME), 3.0\n        UNION ALL\n        SELECT  NULL, 4.0\n        )\nSELECT  CONVERT(DATETIME, SUM(CONVERT(FLOAT, ChargeOffDate) * FaceValue) / SUM(FaceValue))\nFROM    q\nWHERE   ChargeOffDate IS NOT NULL\n\n----\n2003-02-09 20:00:00.000\n"]], ['How do I get a proper weighted average date in SQL'], 2], [(2193735, 0), [['By setting the  NotifyOnSourceUpdated  property to True on the textbox binding like this:'], ["I am then able to update the table adapter in the Window's SourceUpdated event like this:"]], [[' <TextBox Name="lastName" Text="{Binding Path=lastname, NotifyOnSourceUpdated=True}" />\n']], ['How to automatically update TableAdapter bound to TextBox'], 2], [(2193735, 1), [["I am then able to update the table adapter in the Window's SourceUpdated event like this:"], ['This seems to work well.  Is there a better way to accomplish this?  ']], [[' private void Window_SourceUpdated(object sender, DataTransferEventArgs e)\n{\n  myTableAdapter.Update(myRow);\n}\n']], ['How to automatically update TableAdapter bound to TextBox'], 2], [(2194624, 0), [['In SQL Server, you can enable identity inserts:'], ['While idenitity insert is enabled, you can insert a value in the identity column like any other column.  This allows you to just copy the tables, for example from a linked server:']], [[' SET IDENTITY_INSERT NewTable ON\n<insert queries here>\nSET IDENTITY_INSERT NewTable OFF\n']], ["How to move data between multiple database's table while maintaining foreign-key relationships/referential integrity?"], 2], [(2194624, 1), [['While idenitity insert is enabled, you can insert a value in the identity column like any other column.  This allows you to just copy the tables, for example from a linked server:'], ['-10000']], [[' insert into newdb.dbo.NewTable\nselect *\nfrom oldserver.olddb.dbo.OldTable\n']], ["How to move data between multiple database's table while maintaining foreign-key relationships/referential integrity?"], 2], [(2197736, 0), [['OK I have found the answer    '], ['evaluates to  ']], [[' SELECT n FROM Nums    \nWHERE n NOT IN (1, 2, null)\n']], ['IN Operator SQL'], 4], [(2197736, 1), [['evaluates to  '], ['In case of ']], [[' SELECT n FROM Nums  \nn!=1 AND n!=2 AND n!=null\n']], ['IN Operator SQL'], 4], [(2197736, 2), [['In case of '], ['equates to']], [[' SELECT n FROM Nums\nWHERE n IN (1, 2, null) \n']], ['IN Operator SQL'], 4], [(2197736, 3), [['equates to'], ['Now for the row with n=1, the operation n=1 will come as true \nand for the row with n=2, the operation n=2 will come as true \nand for all rows n=null will be unknown  ']], [[' SELECT n FROM Nums\nWHERE n = 1 OR n =2 OR n=null\n']], ['IN Operator SQL'], 4], [(2198320, 0), [['The following level-limited recursive call will give the desired range without a backing table. Without the limit on level, DB2 complains that the function may be infinitely recursive.'], ['This gives:']], [[" with trange(lvl, tm) as (\n    select 1, time('00:00') from sysibm.sysdummy1\n    union all select lvl+1, tm + 1 hour from trange where lvl < 24\n) select left(char(tm,iso),5) as hour from trange;\n"]], ["What's an elegant way to retrieve all times of the day (1 hour resolution) in DB2 without a backing table?"], 2], [(2198320, 1), [['This gives:'], ['as desired.']], [[' HOUR \n-----\n00.00\n01.00\n02.00\n03.00\n: : :\n22.00\n23.00\n']], ["What's an elegant way to retrieve all times of the day (1 hour resolution) in DB2 without a backing table?"], 2], [(2199219, 0), [['The solution is clearly to build your SQL query "on the fly" with a VBA function. According to me, table1 should have an extra column containing the name of the table that holds the fields:'], ['The code that will generate the SQL query will then look like that:']], [[' Table 1\n[tableName] [Sequence]  [Name]\ntable2      1           CustomerId\ntable2      2           CustomerName\ntable2      3           CustomerBirthday\n...\ntablen      1           field 1\ntablen      2           field 2\n...\ntablen      i           field i\n']], ['Drawing dynamically defined fields in MS Access'], 2], [(2199219, 1), [['The code that will generate the SQL query will then look like that:'], ["This was written on the fly, just for you to get the principle. No error handler, no syntax check, nothing! We usually do similar things with ADO recordsets, so I am not quite sure of the 'getRows' DAO recordset method bt, according to the help, it works like the ADO one."]], [[' Public function fieldQueryFromTable1(x_tableName as String) as string\n\nDim rsTable1 as DAO.recordset, _\n    m_fieldQuery as String, _\n    m_tableQuery as string, _\n    a_fieldNames() as string\n\nm_tableQuery = "SELECT name FROM table1 WHERE tableName = """ & x_tablename & """ ORDER BY sequence"\n\nset rsTable1 = currentDb.openRecordset m_tableQuery, dbOpenDynaset, dbReadOnly\na_fieldNames = rsTable1.getrows()   \n    \'generate a 2 dim array a_fieldName(fieldName, fieldValue)\'\n\nset rsTable1 = Nothing\n\nm_fieldQuery = join(a_fieldNames(0),",")   \n    \'a_fieldNames(0) is a 1 dim array that contains the field names\'\n    \'m_fieldQuery is a string that looks like "field1,field2, ..., fieldi, ..."\'\n\n\nif m_fieldQuery <> "" then\n    m_fieldQuery = "SELECT " & m_fieldQuery & " FROM " & x_tableName\n    \'SELECT field1,field2, ..., fieldi, ... FROM Tablen\'\nEndif\n\nfieldQueryFromTable1 = m_fieldQuery\nend function\n']], ['Drawing dynamically defined fields in MS Access'], 2], [(2199315, 0), [['Try'], ["If this doesn't give sufficient precision, cast the inputs to  POWER  as floats:"]], [[' SELECT POWER(( 1.0 + 3.0 / 100.0 ), ( 1.0 / 365.0 ))\n']], ['How to get Microsoft SQL MATH POWER to show as decimal and not as INT (which it seems to do)?'], 2], [(2199315, 1), [["If this doesn't give sufficient precision, cast the inputs to  POWER  as floats:"], ['-10000']], [[' SELECT POWER(( CAST(1.0 as float) + CAST(3.0 AS float) / 100.0 ), ( 1.0 / 365.0 ))\n']], ['How to get Microsoft SQL MATH POWER to show as decimal and not as INT (which it seems to do)?'], 2], [(2199942, 0), [['The easiest way to get this is using a CTE (Common Table Expression) that is designed to recurse.'], ['The output is as follows:']], [['  WITH myCTE (Item_id, Depth)\n AS\n (\n    Select Item_ID, 0 as Depth From yourTable where Item_Parent=0\n    Union ALL\n    Select yourTable.Item_ID, Depth + 1 \n    From yourTable \n    inner join myCte on yourTable.item_Parent = myCte.Item_Id\n )\n\n Select Item_id, Depth from myCTE\n']], ['Getting hierarchy data from self-referencing tables'], 2], [(2199942, 1), [['The output is as follows:'], ['From that you can format it as you wish.']], [[' Item_Id  Depth\n    1   0\n    2   0\n    3   1\n    4   1\n    5   2\n']], ['Getting hierarchy data from self-referencing tables'], 2], [(2200731, 0), [["Copy the Inserted virtual table's data structure to a temporary table: "], ["Create a view to determine the default constraints for the view's underlying table (from system tables) and use them to build statements which will duplicate the constraints in the temporary table:"]], [[' SELECT * INTO aTempInserted FROM Inserted WHERE 1=2\n']], ['Using default values in an INSTEAD OF INSERT trigger'], 4], [(2200731, 1), [["Create a view to determine the default constraints for the view's underlying table (from system tables) and use them to build statements which will duplicate the constraints in the temporary table:"], ['Insert default record into the temporary table (all fields are nullable as created from Inserted virtual table):']], [[" SELECT  'ALTER TABLE dbo.aTempInserted\n               ADD CONSTRAINT ' + dc.name + 'Temp' +\n               ' DEFAULT(' + dc.definition + ') \n               FOR ' + c.name AS Cmd, OBJECT_NAME(c.object_id) AS Name\n  FROM  sys.default_constraints AS dc\n INNER  JOIN sys.columns AS c\n          ON dc.parent_object_id = c.object_id \n         AND dc.parent_column_id = c.column_id\n"]], ['Using default values in an INSTEAD OF INSERT trigger'], 4], [(2200731, 2), [['Insert default record into the temporary table (all fields are nullable as created from Inserted virtual table):'], ["Copy the records from the Inserted virtual table into the view's underlying table (where they would have been inserted originally, had the trigger not prevented this), joining the temporary table to supply default values. This requires use of the COALESCE function so that only unsupplied values are defaulted:"]], [[' INSERT INTO aTempInserted DEFAULT VALUES\n']], ['Using default values in an INSTEAD OF INSERT trigger'], 4], [(2200731, 3), [["Copy the records from the Inserted virtual table into the view's underlying table (where they would have been inserted originally, had the trigger not prevented this), joining the temporary table to supply default values. This requires use of the COALESCE function so that only unsupplied values are defaulted:"], ['Drop the temporary table']], [[' INSERT INTO realTable([a], [b], \n            SELECT COALESCE(I.[a], T.[a]),\n                   COALESCE(I.[a], T.[b])\n            FROM   Inserted      AS I,\n                   aTempInserted AS T\n']], ['Using default values in an INSTEAD OF INSERT trigger'], 4], [(2201288, 0), [['I re-wrote your query:'], ['UPDATE: Non-CTE Equivalent']], [[" WITH ledger_detail AS (\n      SELECT pld.fiscal_year,\n             pld.financial_deptid AS DEPTID, \n             pld.fund_code,\n             pld.class_fld AS CLASS_CODE, \n             pld.project_id,\n             pld.program_code,\n             CASE\n               WHEN pld.account IN ('500020','520000','520220','520240') THEN 2\n               WHEN LEFT(pld.account,1) = '5' THEN 1\n               WHEN LEFT(pld.account,1) = '6' THEN 3\n               WHEN LEFT(pld.account,1) = '7' THEN 4\n               WHEN LEFT(pld.account,1) = '8' THEN 5\n               ELSE 0\n             END AS ACCT_GRP_CODE,\n             pld.budget_amount,\n             pld.encumbrance_amount,\n             pld.expenditure_amount,\n             pld.account AS ACCOUNT_CODE, \n             CASE\n               WHEN LEFT(pld.class_fld, 2) ='12' THEN 0\n               WHEN LEFT(pld.class_fld, 3)='113' THEN 3\n               WHEN LEFT(pld.class_fld, 3)='112' THEN 14\n               WHEN LEFT(pld.class_fld, 3)='115' THEN 10\n               WHEN LEFT(pld.class_fld, 3)='116' THEN 13\n               WHEN LEFT(pld.class_fld, 3)='117' THEN 12\n               WHEN LEFT(pld.class_fld, 3)='118' THEN 11\n               WHEN LEFT(pld.class_fld, 2)='13' THEN 2\n               WHEN LEFT(pld.class_fld, 2)='14' THEN 3\n               WHEN LEFT(pld.class_fld, 1)='4' THEN 4\n               WHEN LEFT(pld.class_fld, 1)='6' THEN 6\n               ELSE 9\n             END AS FUND_SOURCE \n        FROM [DWPROD]..[DISC].[PS_LEDGER_DETAIL] pld\n       WHERE pld.budget_period = '2010' \n         AND pld.accounting_period BETWEEN 1 AND 12\n         AND pld.fiscal_year = 2010\n         AND pld.financial_deptid BETWEEN '100' AND '999'\n         AND pld.account BETWEEN '500000' AND '899999')\n   SELECT x.fiscal_year,\n          y.strdepentity AS ENTITY_CODE,\n          y.depdiv1 AS DIVISION_CODE,\n          x.deptid, \n          x.fund_code,\n          x.class_code,\n          x.project_id,\n          x.program_code,\n          x.acct_grp_code,\n          SUM(x.budget_amount) AS GL_BUD_AMT, \n          SUM(x.encumbrance_amount) AS GL_ENC_AMT, \n          SUM(x.expenditure_amount) AS GL_EXP_AMT,\n          x.account AS ACCOUNT_CODE, \n          x.fund_source\n     FROM ledger_detail x\nLEFT JOIN [Budgets].[dbo].[Departments] y ON y.deporg = x.financial_deptid    \n GROUP BY x.fiscal_year, y.strdepentity, y.depdiv1, x.deptid, x.fund_code, x.class_code, x.project_id, x.program_code, x.acct_grp_code\n ORDER BY x.financial_deptid, x.class_fld, x.project_id, x.account\n"]], ['Slow query in SQL Server 2008 using linked server. What can I look at?'], 2], [(2201288, 1), [['UPDATE: Non-CTE Equivalent'], ['-10000']], [["    SELECT x.fiscal_year,\n          y.strdepentity AS ENTITY_CODE,\n          y.depdiv1 AS DIVISION_CODE,\n          x.deptid, \n          x.fund_code,\n          x.class_code,\n          x.project_id,\n          x.program_code,\n          x.acct_grp_code,\n          SUM(x.budget_amount) AS GL_BUD_AMT, \n          SUM(x.encumbrance_amount) AS GL_ENC_AMT, \n          SUM(x.expenditure_amount) AS GL_EXP_AMT,\n          x.account AS ACCOUNT_CODE, \n          x.fund_source\n     FROM (SELECT pld.fiscal_year,\n                  pld.financial_deptid AS DEPTID, \n                  pld.fund_code,\n                  pld.class_fld AS CLASS_CODE, \n                  pld.project_id,\n                  pld.program_code,\n                  CASE\n                    WHEN pld.account IN ('500020','520000','520220','520240') THEN 2\n                    WHEN LEFT(pld.account,1) = '5' THEN 1\n                    WHEN LEFT(pld.account,1) = '6' THEN 3\n                    WHEN LEFT(pld.account,1) = '7' THEN 4\n                    WHEN LEFT(pld.account,1) = '8' THEN 5\n                    ELSE 0\n                  END AS ACCT_GRP_CODE,\n                  pld.budget_amount,\n                  pld.encumbrance_amount,\n                  pld.expenditure_amount,\n                  pld.account AS ACCOUNT_CODE, \n                  CASE\n                    WHEN LEFT(pld.class_fld, 2) ='12' THEN 0\n                    WHEN LEFT(pld.class_fld, 3)='113' THEN 3\n                    WHEN LEFT(pld.class_fld, 3)='112' THEN 14\n                    WHEN LEFT(pld.class_fld, 3)='115' THEN 10\n                    WHEN LEFT(pld.class_fld, 3)='116' THEN 13\n                    WHEN LEFT(pld.class_fld, 3)='117' THEN 12\n                    WHEN LEFT(pld.class_fld, 3)='118' THEN 11\n                    WHEN LEFT(pld.class_fld, 2)='13' THEN 2\n                    WHEN LEFT(pld.class_fld, 2)='14' THEN 3\n                    WHEN LEFT(pld.class_fld, 1)='4' THEN 4\n                    WHEN LEFT(pld.class_fld, 1)='6' THEN 6\n                    ELSE 9\n                  END AS FUND_SOURCE \n             FROM [DWPROD]..[DISC].[PS_LEDGER_DETAIL] pld\n            WHERE pld.budget_period = '2010' \n              AND pld.accounting_period BETWEEN 1 AND 12\n              AND pld.fiscal_year = 2010\n              AND pld.financial_deptid BETWEEN '100' AND '999'\n              AND pld.account BETWEEN '500000' AND '899999') x\nLEFT JOIN [Budgets].[dbo].[Departments] y ON y.deporg = x.financial_deptid    \n GROUP BY x.fiscal_year, y.strdepentity, y.depdiv1, x.deptid, x.fund_code, x.class_code, x.project_id, x.program_code, x.acct_grp_code\n ORDER BY x.financial_deptid, x.class_fld, x.project_id, x.account\n"]], ['Slow query in SQL Server 2008 using linked server. What can I look at?'], 2], [(2201308, 0), [['In  Oracle :'], ['In  SQL Server 2005  and above:']], [[' SELECT  *\nFROM    (\n        SELECT  t.*, rownum AS rn\n        FROM    tbl_messages t\n        ORDER BY\n                dt_made DESC, tnr_id DESC\n        )\nWHERE   rn > 40\n        AND rownum <= 20\n']], ['Getting messages 1-20, 21-40,... from a database'], 3], [(2201308, 1), [['In  SQL Server 2005  and above:'], ['If you can tolerate some discrepancies resulted from the concurrent updates, you can remember the last record on the current page of the client side and use it to get the next results faster:']], [[' DECLARE @start INT\nDECLARE @pagesize INT\nSET @start = 40\nSET @pagesize = 20  \n\nSELECT  *\nFROM    (\n        SELECT  TOP (@start + @pagesize)\n                t.*, ROW_NUMBER() OVER (ORDER BY dt_made DESC, tnr_id DESC) AS rn\n        FROM    tbl_messages t\n        ORDER BY\n                dt_made DESC, tnr_id DESC\n        ) q\nWHERE   rn > @start\n']], ['Getting messages 1-20, 21-40,... from a database'], 3], [(2201308, 2), [['If you can tolerate some discrepancies resulted from the concurrent updates, you can remember the last record on the current page of the client side and use it to get the next results faster:'], ['-10000']], [[' SELECT  TOP 20 *\nFROM    tbl_messages t\nWHERE   dt_made <= @last_dt_made\n        AND NOT (dt_made = @last_dt_made AND tnr_id >= @last_tnr_id)\nORDER BY\n        dt_made DESC, tnr_id DESC\n']], ['Getting messages 1-20, 21-40,... from a database'], 3], [(2202069, 0), [['I found a really ugly way to do what I want - maybe there is something better?'], ['Output of this is:']], [[' SELECT A.Text, A.Price,                   \n  CASE\n    WHEN D.Text IS NULL\n    THEN\n        CASE\n            WHEN C.Text IS NULL\n            THEN\n                CASE\n                    WHEN B.Text IS NULL\n                    THEN\n                        A.ID\n                    ELSE B.ID\n                END\n            ELSE C.ID\n            END\n    ELSE D.ID\n  END\n  AS LEV0,\n\n  CASE\n    WHEN D.Text IS NULL\n    THEN\n        CASE\n            WHEN C.Text IS NULL\n            THEN\n                CASE\n                    WHEN B.Text IS NULL\n                    THEN\n                        NULL\n                    ELSE A.ID\n                END\n            ELSE B.ID\n            END\n    ELSE C.ID\n  END\n  AS LEV1,\n\n  CASE\n    WHEN D.Text IS NULL\n    THEN\n        CASE\n            WHEN C.Text IS NULL\n            THEN\n                NULL\n            ELSE A.ID\n            END\n    ELSE B.ID\n  END\n  AS LEV2,\n\n  CASE\n    WHEN D.Text IS NULL\n    THEN NULL\n    ELSE A.ID\n  END\n  AS LEV3\n\nFROM         dbo.testOld AS A LEFT OUTER JOIN\n                  dbo.testOld AS B ON A.parentID = B.ID LEFT OUTER JOIN\n                  dbo.testOld AS C ON B.parentID = C.ID LEFT OUTER JOIN\n                  dbo.testOld AS D ON C.parentID = D.ID\n']], ['Grouping Hierarchical data (parentID+ID) and running sum?'], 2], [(2202069, 1), [['Output of this is:'], ['With this structure I can go ahead and create 4 nested groups on the LEV0-3 columns including subtotals per group (as shown above in my desired result).']], [[' Text       Price       LEV0        LEV1        LEV2        LEV3\n---------- ----------- ----------- ----------- ----------- -----------\nRoot       NULL        1           NULL        NULL        NULL\nFlowers    NULL        1           3           NULL        NULL\nElectro    NULL        1           4           NULL        NULL\nTelevision 100         1           4           5           NULL\nRadio      70          1           4           6           NULL\nRose       10          1           3           7           NULL\nViolet     5           1           3           8           NULL\nWebradio   90          1           4           5           14\nRed Rose   12          1           3           7           15\n']], ['Grouping Hierarchical data (parentID+ID) and running sum?'], 2], [(2202292, 0), [["What happens when the table is very full and you might want to specify which row of your top 1 to get, such as the first name? OMG Ponies' query will return the wrong answer in that case if you just change the ORDER BY clause. His query also costs about 8% more CPU than this modification (though it has equal reads)"], ["Just for fun, this is another way to do it which performs very closely to the above query (-15ms to +30ms). While it's more complicated than necessary for such a simple query, it demonstrates a technique that I don't see other SQL folks using very often."]], [[" SELECT TOP 1 *\nFROM (\n   SELECT TOP 1 ID,Name\n   FROM TableName\n   ORDER BY Name\n   UNION ALL\n   SELECT 0,''\n) X\nORDER BY ID DESC\n"]], ['SQL Server Top 1'], 2], [(2202292, 1), [["Just for fun, this is another way to do it which performs very closely to the above query (-15ms to +30ms). While it's more complicated than necessary for such a simple query, it demonstrates a technique that I don't see other SQL folks using very often."], ['-10000']], [[" SELECT\n   ID = Coalesce(T.ID, 0),\n   Name = Coalesce(T.Name, '')\nFROM\n   (SELECT 1) X (Num)\n   LEFT JOIN (\n      SELECT TOP 1 ID, Name\n      FROM TableName\n      ORDER BY ID DESC\n   ) T ON 1 = 1 -- effective cross join but does not limit rows in the first table\n"]], ['SQL Server Top 1'], 2], [(2202568, 0), [['For this example input:'], ['The output would be:']], [[' abc organized p3=123\ndef scattered p3=456\nghi ordered p3=789\n']], ['Need help interpreting this sed command'], 2], [(2202568, 1), [['The output would be:'], ['-10000']], [[' 456\n']], ['Need help interpreting this sed command'], 2], [(2202649, 0), [['To this end, django provides several methods of letting you drop down into raw sql quite simply.  Some of them return model objects as results, while others take you all the way down to your DBAPI2 connector.  The most low level looks like this:'], ["If you want to return a queryset from a SQL query, use the raw() on your model's manager:"]], [[' from django.db import connection\n\ncursor = connection.cursor()\ncursor.execute("SELECT DISTINCT column1 FROM tablename")\nrow = cursor.fetchone()\n']], ['django - guide to ORM for SQL users?'], 2], [(2202649, 1), [["If you want to return a queryset from a SQL query, use the raw() on your model's manager:"], ['Note:  raw() is only available in the development version of Django, which should be merged into trunk as of 1.2.']], [[' qs = ModelName.objects.raw("""SELECT first_name \n                              FROM myapp_modelname \n                              WHERE last_name = \'van Rossum\'")\nfor person in qs:\n     print person.first_name # Result already available\n     print person.last_name  # Has to hit the DB again\n']], ['django - guide to ORM for SQL users?'], 2], [(2203898, 0), [["Here's my code"], ["Ok so I fixed the problem - I guess you have to hard code primary key here's what i did"]], [[' stmt.text = "CREATE TABLE IF NOT EXISTS tbl_breed ("+" breed_id INTEGER PRIMARY KEY AUTOINCREMENT, "+"  breed_breed TEXT)";\nstmt.execute();\nstmt.text = "INSERT OR IGNORE INTO tbl_breed (breed_breed)"+" VALUES (\'Test\')";\nstmt.execute();\n']], ['sqlite & flex - insert into if not exists?'], 2], [(2203898, 1), [["Ok so I fixed the problem - I guess you have to hard code primary key here's what i did"], ['-10000']], [[' stmt.text = "CREATE TABLE IF NOT EXISTS tbl_breed ("+" breed_id INTEGER PRIMARY KEY AUTOINCREMENT, "+"  breed_breed TEXT)";\nstmt.execute();\nstmt.text = "INSERT OR IGNORE INTO tbl_breed (breed_id,breed_breed)"+" VALUES (\'1\',\'test\')";\nstmt.execute();\n']], ['sqlite & flex - insert into if not exists?'], 2], [(2204058, 0), [['Create some test data...'], ['List indexes and columns indexed:']], [[' create table test (a int, b int, c int, constraint pk_test primary key(a, b));\ncreate table test2 (a int, b int, c int, constraint uk_test2 unique (b, c));\ncreate table test3 (a int, b int, c int, constraint uk_test3b unique (b), constraint uk_test3c unique (c),constraint uk_test3ab unique (a, b));\n']], ['List columns with indexes in PostgreSQL'], 3], [(2204058, 1), [['List indexes and columns indexed:'], ['Roll up the column names:']], [[" select\n    t.relname as table_name,\n    i.relname as index_name,\n    a.attname as column_name\nfrom\n    pg_class t,\n    pg_class i,\n    pg_index ix,\n    pg_attribute a\nwhere\n    t.oid = ix.indrelid\n    and i.oid = ix.indexrelid\n    and a.attrelid = t.oid\n    and a.attnum = ANY(ix.indkey)\n    and t.relkind = 'r'\n    and t.relname like 'test%'\norder by\n    t.relname,\n    i.relname;\n\n table_name | index_name | column_name\n------------+------------+-------------\n test       | pk_test    | a\n test       | pk_test    | b\n test2      | uk_test2   | b\n test2      | uk_test2   | c\n test3      | uk_test3ab | a\n test3      | uk_test3ab | b\n test3      | uk_test3b  | b\n test3      | uk_test3c  | c\n"]], ['List columns with indexes in PostgreSQL'], 3], [(2204058, 2), [['Roll up the column names:'], ['-10000']], [[" select\n    t.relname as table_name,\n    i.relname as index_name,\n    array_to_string(array_agg(a.attname), ', ') as column_names\nfrom\n    pg_class t,\n    pg_class i,\n    pg_index ix,\n    pg_attribute a\nwhere\n    t.oid = ix.indrelid\n    and i.oid = ix.indexrelid\n    and a.attrelid = t.oid\n    and a.attnum = ANY(ix.indkey)\n    and t.relkind = 'r'\n    and t.relname like 'test%'\ngroup by\n    t.relname,\n    i.relname\norder by\n    t.relname,\n    i.relname;\n\n table_name | index_name | column_names\n------------+------------+--------------\n test       | pk_test    | a, b\n test2      | uk_test2   | b, c\n test3      | uk_test3ab | a, b\n test3      | uk_test3b  | b\n test3      | uk_test3c  | c\n"]], ['List columns with indexes in PostgreSQL'], 3], [(2206417, 0), [['Take a table with some hierarchical data in it:'], ['I have reworked the sample code from  another SO answer , to use the above table to dynamically populate a tree view (assuming the table lives in an SQL server database). The code sample is somewhat lenghty...']], [[' Id  Name                                ParentNodeId\n1   Top-level node 1                    -1\n2   A first-level child                  1\n3   Another top-level node              -1\n4   Another first-level child            1\n5   First-level child in another branch  3\n6   A second-level child                 2\n']], ['Windows Forms VB.NET - Populate TreeView with Hierarchical data'], 2], [(2206417, 1), [['I have reworked the sample code from  another SO answer , to use the above table to dynamically populate a tree view (assuming the table lives in an SQL server database). The code sample is somewhat lenghty...'], ['The data fetching code can probably be made a bit prettier by using Linq-to-SQL, but I wanted the same to be as complete as possible, so I decided to leave that out to keep the amount of code down... (that would require the inclusion of some generated Linq-to-SQL classes).']], [[' using System.Windows.Forms;\nusing System.Threading;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\npublic class TreeViewSample : Form\n{\n    private TreeView _treeView;\n    public TreeViewSample()\n    {\n        this._treeView = new System.Windows.Forms.TreeView();\n        this._treeView.Location = new System.Drawing.Point(12, 12);\n        this._treeView.Size = new System.Drawing.Size(200, 400);\n        this._treeView.AfterExpand +=\n            new TreeViewEventHandler(TreeView_AfterExpand);\n        this.ClientSize = new System.Drawing.Size(224, 424);\n        this.Controls.Add(this._treeView);\n        this.Text = "TreeView Lazy Load Sample";\n        PopulateChildren(null);\n    }\n\n    void TreeView_AfterExpand(object sender, TreeViewEventArgs e)\n    {\n        if (e.Node.Nodes.Count == 1 && e.Node.Nodes[0].Tag == "dummy")\n        {\n            PopulateChildren(e.Node);\n        }\n    }\n\n    private void PopulateChildren(TreeNode parent)\n    {\n        // this node has not yet been populated, launch a thread\n        // to get the data\n        int? parentId = parent != null ? (parent.Tag as DataNode).Id : (int?)null;\n        ThreadPool.QueueUserWorkItem(state =>\n        {\n            IEnumerable<DataNode> childItems = GetNodes(parentId);\n            // load the data into the tree view (on the UI thread)\n            _treeView.BeginInvoke((MethodInvoker)delegate\n            {\n                PopulateChildren(parent, childItems);\n            });\n        });\n    }\n\n    private void PopulateChildren(TreeNode parent, IEnumerable<DataNode> childItems)\n    {\n        TreeNodeCollection nodes = parent != null ? parent.Nodes : _treeView.Nodes;\n        TreeNode child;\n        TreeNode dummy;\n        TreeNode originalDummyItem = parent != null ? parent.Nodes[0] : null;\n        foreach (var item in childItems)\n        {\n            child = new TreeNode(item.Text);\n            child.Tag = item;\n            dummy = new TreeNode("Loading. Please wait...");\n            dummy.Tag = "dummy";\n            child.Nodes.Add(dummy);\n            nodes.Add(child);\n        }\n        if (originalDummyItem != null)\n        {\n            originalDummyItem.Remove();\n        }\n    }\n\n    private IEnumerable<DataNode> GetNodes(int? parentId)\n    {\n        List<DataNode> result = new List<DataNode>();\n        using (SqlConnection conn = new SqlConnection(@"[your connection string]"))\n        using (SqlCommand cmd = new SqlCommand("select * from Nodes where ParentNodeId = @parentNodeId", conn))\n        {\n            cmd.Parameters.Add(new SqlParameter("@parentNodeId", System.Data.SqlDbType.Int));\n            cmd.Parameters["@parentNodeId"].Value = parentId != null ? parentId : -1;\n            conn.Open();\n            using (SqlDataReader reader = cmd.ExecuteReader())\n            {\n                int nodeIdCol = reader.GetOrdinal("NodeId");\n                int nameCol = reader.GetOrdinal("Name");\n                int parentIdCl = reader.GetOrdinal("ParentNodeId");\n                while (reader.Read())\n                {\n                    result.Add(new DataNode\n                       {\n                           Id = reader.GetInt32(nodeIdCol),\n                           Text = reader.GetString(nameCol),\n                           ParentId = reader.IsDBNull(parentIdCl) ? (int?)null : reader.GetInt32(parentIdCl)\n                       });\n                }\n            }\n        }\n        return result;\n    }\n}\n\npublic class DataNode\n{\n    public int Id { get; set; }\n    public string Text { get; set; }\n    public int? ParentId { get; set; }\n}\n']], ['Windows Forms VB.NET - Populate TreeView with Hierarchical data'], 2], [(2206457, 0), [['Put the ID of the table  classified  as another key in the table options, so that you get'], ['Then you can get all values for all options for a specified classified:']], [[' Option Values table:\nvalue_id (PK)\noption_id (FK)\nclassified_id (FK)\nvalue // "red" for example\n']], ['little mysql help here please'], 2], [(2206457, 1), [['Then you can get all values for all options for a specified classified:'], ['-10000']], [[' SELECT c.option_name, o.value\nFROM option_Values o\nLEFT JOIN category_options c ON (o.option_id=c.option_id)\nWHERE o.classified_id = 15; -- as an example\n']], ['little mysql help here please'], 2], [(2207324, 0), [['Try explicitly listing the column names of the inner table in the select statement. Like:'], ['and then in the main select:']], [[' ...(SELECT auto.ID autoid, auto.Whatever)....\n']], ['Oracle PL/SQL: referencing to a column name in inner joined query'], 2], [(2207324, 1), [['and then in the main select:'], ['-10000']], [[' SELECT innertable.autoid ....\n']], ['Oracle PL/SQL: referencing to a column name in inner joined query'], 2], [(2208211, 0), [['A regular index is built against actual columns ... '], ['... whereas a function-based index is build on functions applied to columns.  For instance we might what an index we can use when we query a date column without the time element...      ']], [[' create index emp_job_idx on emp (job)\n/\n']], ['What are nested table objects in Oracle?'], 5], [(2208211, 1), [['... whereas a function-based index is build on functions applied to columns.  For instance we might what an index we can use when we query a date column without the time element...      '], ['When we query USER_IND_COLUMNS, the indexed column shows up in the first case but not in the second, because we are not indexing an actual column.  What we see instead is the system generated "column\'....']], [[' create index emp_hire_idx on emp(trunc(hiredate))\n/\n']], ['What are nested table objects in Oracle?'], 5], [(2208211, 2), [['When we query USER_IND_COLUMNS, the indexed column shows up in the first case but not in the second, because we are not indexing an actual column.  What we see instead is the system generated "column\'....'], ['We can see the make-up of the index in USER_IND_EXPRESSIONS ...']], [[" SQL> select index_name, column_name\n  2  from user_ind_columns\n  3  where table_name = 'EMP'\n  4  /\n\nINDEX_NAME                     COLUMN_NAME\n------------------------------ ---------------\nPK_EMP                         EMPNO\nEMP_UK                         ENAME\nEMP_JOB_IDX                    JOB\nEMP_HIRE_IDX                   SYS_NC00010$\n\nSQL> \n"]], ['What are nested table objects in Oracle?'], 5], [(2208211, 3), [['We can see the make-up of the index in USER_IND_EXPRESSIONS ...'], ['Nested tables are something different: they are user-defined arrays of simple or complex types.  They can be used to define PL/SQL collections or columns in an ORDBMS table.  Like this...']], [[' SQL> select index_name, column_expression\n  2  from user_ind_expressions\n  3  where table_name = \'EMP\'\n  4  /\n\nINDEX_NAME                     COLUMN_EXPRESSION\n------------------------------ --------------------\nEMP_HIRE_IDC                   TRUNC("HIREDATE")\n\nSQL>\n']], ['What are nested table objects in Oracle?'], 5], [(2208211, 4), [['Nested tables are something different: they are user-defined arrays of simple or complex types.  They can be used to define PL/SQL collections or columns in an ORDBMS table.  Like this...'], ['-10000']], [[' SQL> create or replace type address_t\n  2      as object\n  3      (\n  4          address_line_1 varchar2(70)\n  5          , address_line_2 varchar2(70)\n  6          , address_line_3 varchar2(70)\n  7          , address_line_4 varchar2(70)\n  8          , address_line_5 varchar2(70)\n  9          , postcode postcodestructure\n 10      ) final;\n 11  /\ncreate or replace type address_t\n*\nERROR at line 1:\nORA-02303: cannot drop or replace a type with type or table dependents\n\n\nSQL>\nSQL> create or replace type address_nt as table of address_t\n  2  /\n\nType created.\n\nSQL>\nSQL> create table contact_details (\n  2      person_id number not null\n  3      , email_address varchar2(254)\n  4      , addresses address_nt\n  5      )\n  6  nested table addresses store as nested_addresses\n  7  /\n\nTable created.\n\nSQL>\n']], ['What are nested table objects in Oracle?'], 5], [(2208756, 0), [['-10000'], ['If your table is  MyISAM , you can use this:']], [[" SELECT * FROM content WHERE tags RLIKE '[[:<:]]elephant[[:>:]]'\n"]], ['MySQL Select Like'], 3], [(2208756, 1), [['If your table is  MyISAM , you can use this:'], [', which can be drastically improved by creating a  FULLTEXT  index on it:']], [[" SELECT * FROM content WHERE MATCH(tags) AGAINST ('+elephant' IN BOOLEAN MODE)\n"]], ['MySQL Select Like'], 3], [(2208756, 2), [[', which can be drastically improved by creating a  FULLTEXT  index on it:'], [', but will work even without the index.']], [[' CREATE FULLTEXT INDEX ix_content_tags ON content (tags)\n']], ['MySQL Select Like'], 3], [(2209030, 0), [['-10000'], ['This change will decrease your table size by 152.5 MB for 40 million rows, and will decrease the size of your primary key index by 158.8 MB for 40 million rows.']], [[' `id` bigint(20) unsigned NOT NULL auto_increment,\n']], ['Edited- MySQL. Large MyISAM table (40mln records) having index that is very slow and huge in size on disk'], 3], [(2209030, 1), [['This change will decrease your table size by 152.5 MB for 40 million rows, and will decrease the size of your primary key index by 158.8 MB for 40 million rows.'], ['This will decrease the size of your table by 114.4 MB for 40 million rows, and will decrease the size of the  some_other_id_not_fk  index by approximately the same.']], [[' `some_other_id_not_fk` int(10) unsigned default NOT NULL,\n']], ['Edited- MySQL. Large MyISAM table (40mln records) having index that is very slow and huge in size on disk'], 3], [(2209030, 2), [['This will decrease the size of your table by 114.4 MB for 40 million rows, and will decrease the size of the  some_other_id_not_fk  index by approximately the same.'], ["Do you need a DATETIME? DATETIME's take 8 bytes, a TIMESTAMP takes 4 bytes. If you can use a TIMESTAMP then this will drastically reduce data and index size. Be aware of the limitations of TIMESTAMP fields though such as  Y2K38  and how they behave with respect to timezones and replication."]], [[' `event_time` datetime NOT NULL,\n']], ['Edited- MySQL. Large MyISAM table (40mln records) having index that is very slow and huge in size on disk'], 3], [(2209610, 0), [['-10000'], ['If you need all the fields of the content, you can do a join:']], [[' SELECT   comment.on AS content_id, COUNT(comment_id) AS num_comments\nFROM     comments\nGROUP BY content_id\nORDER BY num_comments DESC\n']], ['SQL function to sort by most popular content'], 2], [(2209610, 1), [['If you need all the fields of the content, you can do a join:'], ['-10000']], [[' SELECT   contents.*, COUNT(comment_id) AS num_comments\nFROM     contents\n  LEFT JOIN comments on contents.content_id = comments.on\nGROUP BY content_id\nORDER BY num_comments DESC\n']], ['SQL function to sort by most popular content'], 2], [(2210797, 0), [['Like this'], ['By the way, you rarely want to write a FROM clause like this:']], [[' SELECT DISTINCT Table1.Column1\nFROM Table1\nWHERE NOT EXISTS( SELECT * FROM Table2\n    WHERE Table1.Column1 = Table2.Column1  )\n']], ['How do I correctly use "Not Equal" in MS Access?'], 3], [(2210797, 1), [['By the way, you rarely want to write a FROM clause like this:'], ['as this means "FROM  all  combinations of every row in Table1 with every row in Table2..."  Usually that\'s a lot more result rows than you ever want to see.  And in the rare case that you really do want to do that, the more accepted syntax is:']], [[' FROM Table1, Table2\n']], ['How do I correctly use "Not Equal" in MS Access?'], 3], [(2210797, 2), [['as this means "FROM  all  combinations of every row in Table1 with every row in Table2..."  Usually that\'s a lot more result rows than you ever want to see.  And in the rare case that you really do want to do that, the more accepted syntax is:'], ['-10000']], [[' FROM Table1 CROSS JOIN Table2\n']], ['How do I correctly use "Not Equal" in MS Access?'], 3], [(2214628, 0), [['In your c# (or vb or whatever) code, add a parameter to your sql command object and set the byte array as the parameter value:'], ["You are using a parameterized query, which is not my thing, so I can't guarantee this will work. But, here is some code that should get you going."]], [[' command.Parameters.AddWithValue("@parameter_name", myByteArray);\n']], ['Insert Bytes array INTO varbinary(max) record'], 2], [(2214628, 1), [["You are using a parameterized query, which is not my thing, so I can't guarantee this will work. But, here is some code that should get you going."], ['The binary value must be represented as a parameter (@bin_value), and the value is set by the AddWithValue statement. The parameter name does not have to match the column name.']], [[' RemoteSQLcmd = New SqlCommand("INSERT INTO Table(1) Values (newid(), ProductID, @bin_value", RemoteSQLConn)\nRemoteSQLcmd.Parameters.AddWithValue(@bin_value", imSource) ;\n']], ['Insert Bytes array INTO varbinary(max) record'], 2], [(2215129, 0), [['Yet another variation: select the clients, then use CROSS APPLY (.. TOP (1) ... ORDER BY ...) to get the relevant entry.'], ['To talk about performance on a T-SQL query without knowing the schema is non-sense. This query is perfectly optimal on a properly designed schema for its needs. Since the access is by ClientName and CreatedOn, then even a simplistic schema would need to take this into consideration:']], [[' SELECT c.ClientName,r.LogEntryId, r.FileId, r.CreatedOn,  r.EventTypeId\nFROM (\n SELECT DISTINCT ClientName\n FROM LogEntries\n WHERE EventTypeId IN (2,4)) as c\nCROSS APPLY (\n   SELECT TOP (1) a.LogEntryId, a.FileId, a.CreatedOn,  a.EventTypeId\n   FROM LogEntries as a\n   WHERE a.ClientName = c.ClientName\n   AND a.EventTypeId IN (2,4)\n   ORDER BY a.CreatedOn DESC) as r;\n']], ['Can this Sql statement be refactored to NOT use RANK/PARTITION?'], 4], [(2215129, 1), [['To talk about performance on a T-SQL query without knowing the schema is non-sense. This query is perfectly optimal on a properly designed schema for its needs. Since the access is by ClientName and CreatedOn, then even a simplistic schema would need to take this into consideration:'], ['And lets load the table with some 2.4M rows:']], [[' CREATE TABLE LogEntries (\n   LogEntryId int identity(1,1),\n   FileID int,\n   CreatedOn datetime,\n   EventTypeID int,\n   ClientName varchar(30)\n);\n\ncreate clustered index cdxLogEntries on LogEntries (\n    ClientName, CreatedOn DESC);\ngo\n']], ['Can this Sql statement be refactored to NOT use RANK/PARTITION?'], 4], [(2215129, 2), [['And lets load the table with some 2.4M rows:'], ['What time and IO do we get with  set statistics io on; set statistics time on;  on a warmed cache?']], [[" declare @i int;\nset @i = 0;\n\nwhile @i < 1000\nbegin\n    insert into LogEntries (FileId, CreatedOn, EventTypeId, ClientName)\n    select cast(rand()*100 as int),\n        dateadd(minute, -rand()*10000, getdate()),\n        cast(rand() * 5 as int),\n        'Client' + cast(@i as varchar(10))\n        from master..spt_values;\n    set @i = @i+1;\nend\n"]], ['Can this Sql statement be refactored to NOT use RANK/PARTITION?'], 4], [(2215129, 3), [['What time and IO do we get with  set statistics io on; set statistics time on;  on a warmed cache?'], ['1.9 sec to get the data from 2.4M entries on my laptop (which is 4 years old and has 1Gb RAM). And there is still plenty of room for improvement int he schema design. Separate ClientName into a normalized table with a trusted a foreign key from LogEntries into it would reduce the time significantly. Proper filtered indexes on EntryTypeId IN (2,4) also would contribute. We did not even start the exploration of parallelism posibilities. ']], [[" (410 row(s) affected)\nTable 'LogEntries'. Scan count 411, logical reads 14354, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.\n\nSQL Server Execution Times:\n   CPU time = 1219 ms,  elapsed time = 1932 ms.\n"]], ['Can this Sql statement be refactored to NOT use RANK/PARTITION?'], 4], [(2218662, 0), [['-10000'], ["This'll set the whole table to the date now."]], [["  UPDATE table SET datecol=date('now')\n"]], ['SQLite Update date SQL'], 2], [(2218662, 1), [["This'll set the whole table to the date now."], ["Or if it's a datetime column, datetime('now')"]], [["  UPDATE table SET datecol=date('now') WHERE id=666\n"]], ['SQLite Update date SQL'], 2], [(2218886, 0), [['To obtain the  Oracle Client  IP address you have to use the one you suggested::'], ['To obtain the  Oracle Server  IP address you can use:']], [[" select sys_context('userenv','ip_address') \n  from dual;\n"]], ['How to obtain Local IP Address of PC within Oracle ApEx '], 2], [(2218886, 1), [['To obtain the  Oracle Server  IP address you can use:'], ['UPDATE (from comment):  If you are looking for the application server IP, nor client nor server. Right? This cannot be obtained by oracle. This is like asking oracle the web server IP. As Oracle Appex is 100% PLSQL you cannot obtain this information.']], [[" select utl_inaddr.get_host_address(sys_context('userenv','server_host')) \n  from dual;\n"]], ['How to obtain Local IP Address of PC within Oracle ApEx '], 2], [(2218991, 0), [['SQL Server'], ['MySQL']], [[' where loggedTime between\n   DATEADD(hour, 14, DATEADD(DAY, 0, DATEDIFF(DAY,0,getdate()))) and\n   DATEADD(hour, 34, DATEADD(DAY, 0, DATEDIFF(DAY,0,getdate())))\n']], ['sql query date time'], 2], [(2218991, 1), [['MySQL'], ['-10000']], [[' where loggedTime between\n   curdate() + interval 14 hour and\n   curdate() + interval 34 hour\n']], ['sql query date time'], 2], [(2219077, 0), [['You want to update the total sum column every time one of the columns in the other tables is changed?  Then a trigger may serve your purposes.  '], ['or, you can separate the code for a delete from the code for an insert or update by writing separate triggers, or by:']], [['    Create Trigger For Insert, Update, Delete\n   On OtherTable\n   As\n      Update SumTable Set\n          SumColumn =\n               (Select Sum(Column)\n                From OtherTable\n                Where something = s.Something)\n      From SumTable s\n      Where Something In\n           (Select Distinct something From inserted\n              Union\n            Select Distinct Something From deleted)\n']], ['Creating a default query for a column in a table (SQL)?'], 2], [(2219077, 1), [['or, you can separate the code for a delete from the code for an insert or update by writing separate triggers, or by:'], ['-10000']], [['    Create Trigger For Insert, Update, Delete\n   On OtherTable\n   As\n      If Exists(Select * From inserted) And Update(Column)\n          Update SumTable Set\n              SumColumn =\n                  (Select Sum(Column)\n                   From OtherTable\n                   Where something = s.Something)\n          From SumTable \n          Where Something In \n              (Select Distinct Something \n               From Inserted)\n      Else If Exists(Select * From deleted)              \n          Update SumTable Set\n              SumColumn =\n                  (Select Sum(Column)\n                   From OtherTable\n                   Where something = s.Something)\n          From SumTable \n          Where Something In \n              (Select Distinct Something \n               From deleted)\n']], ['Creating a default query for a column in a table (SQL)?'], 2], [(2219713, 0), [['The way to model this with SQL is  Class Table Inheritance .  Create a common super-table:'], ['Then for each operation type, define a sub-table with a column for each required equipment type.  For example,  OperationFoo  has a column for each of  equipA  and  equipB .  Since they are both required, the columns are  NOT NULL .  Constrain them to the correct types by creating a Class Table Inheritance super-table for equipment too.']], [[' CREATE TABLE Operation (\n  operation_id   SERIAL PRIMARY KEY,\n  operation_type CHAR(1) NOT NULL,\n  UNIQUE KEY (operation_id, operation_type),\n  FOREIGN KEY (operation_type) REFERENCES OperationTypes(operation_type)\n);\n']], ['Design question: Filterable attributes, SQL'], 5], [(2219713, 1), [['Then for each operation type, define a sub-table with a column for each required equipment type.  For example,  OperationFoo  has a column for each of  equipA  and  equipB .  Since they are both required, the columns are  NOT NULL .  Constrain them to the correct types by creating a Class Table Inheritance super-table for equipment too.'], ['Table  OperationBar  requires no equipment, so it has no equip columns:']], [[" CREATE TABLE OperationFoo (\n  operation_id   INT PRIMARY KEY,\n  operation_type CHAR(1) NOT NULL CHECK (operation_type = 'F'),\n  equipA         INT NOT NULL,\n  equipB         INT NOT NULL,\n  FOREIGN KEY (operation_id, operation_type) \n      REFERENCES Operations(operation_d, operation_type),\n  FOREIGN KEY (equipA) REFERENCES EquipmentA(equip_id),\n  FOREIGN KEY (equipB) REFERENCES EquipmentB(equip_id)\n);\n"]], ['Design question: Filterable attributes, SQL'], 5], [(2219713, 2), [['Table  OperationBar  requires no equipment, so it has no equip columns:'], ['Table OperationBaz has one required equipment  equipA , and then at least one of  equipB  and  equipC  must be  NOT NULL .  Use a  CHECK  constraint for this:']], [[" CREATE TABLE OperationBar (\n  operation_id   INT PRIMARY KEY,\n  operation_type CHAR(1) NOT NULL CHECK (operation_type = 'B'),\n  FOREIGN KEY (operation_id, operation_type) \n      REFERENCES Operations(operation_d, operation_type)\n);\n"]], ['Design question: Filterable attributes, SQL'], 5], [(2219713, 3), [['Table OperationBaz has one required equipment  equipA , and then at least one of  equipB  and  equipC  must be  NOT NULL .  Use a  CHECK  constraint for this:'], ['Likewise in table  OperationQuux  you can use a  CHECK  constraint to make sure at least one equipment resource of each pair is non-null:']], [[" CREATE TABLE OperationBaz (\n  operation_id   INT PRIMARY KEY,\n  operation_type CHAR(1) NOT NULL CHECK (operation_type = 'Z'),\n  equipA         INT NOT NULL,\n  equipB         INT,\n  equipC         INT,\n  FOREIGN KEY (operation_id, operation_type) \n      REFERENCES Operations(operation_d, operation_type)\n  FOREIGN KEY (equipA) REFERENCES EquipmentA(equip_id),\n  FOREIGN KEY (equipB) REFERENCES EquipmentB(equip_id),\n  FOREIGN KEY (equipC) REFERENCES EquipmentC(equip_id),\n  CHECK (COALESCE(equipB, equipC) IS NOT NULL)\n);\n"]], ['Design question: Filterable attributes, SQL'], 5], [(2219713, 4), [['Likewise in table  OperationQuux  you can use a  CHECK  constraint to make sure at least one equipment resource of each pair is non-null:'], ['This may seem like a lot of work.  But you asked how to do it in SQL.  The best way to do it in SQL is to use declarative constraints to model your business rules.  Obviously, this requires that you create a new sub-table every time you create a new operation type.  This is best when the operations and business rules never (or hardly ever) change. But this may not fit your project requirements.  Most people say, "but I need a solution that doesn\'t require schema alterations."']], [[" CREATE TABLE OperationQuux (\n  operation_id   INT PRIMARY KEY,\n  operation_type CHAR(1) NOT NULL CHECK (operation_type = 'Q'),\n  equipA         INT,\n  equipB         INT,\n  equipC         INT,\n  equipD         INT,\n  FOREIGN KEY (operation_id, operation_type) \n      REFERENCES Operations(operation_d, operation_type),\n  FOREIGN KEY (equipA) REFERENCES EquipmentA(equip_id),\n  FOREIGN KEY (equipB) REFERENCES EquipmentB(equip_id),\n  FOREIGN KEY (equipC) REFERENCES EquipmentC(equip_id),\n  FOREIGN KEY (equipD) REFERENCES EquipmentD(equip_id),\n  CHECK (COALESCE(equipA, equipB) IS NOT NULL AND COALESCE(equipC, equipD) IS NOT NULL)\n);\n"]], ['Design question: Filterable attributes, SQL'], 5], [(2221299, 0), [['The performance of a large  IN  clause is horrible, this is mainly due to query compile time.  So if you have say a  List<int>  containing the IDs then this:'], ['would be much faster than:']], [[' List<int> myIDs = GetIDs(); //20,000\nvar inList = myIDs.Distinct(); //5,000 distinct IDs\n//pass inList to SQL\n']], ['Performance for delete query in sql'], 3], [(2221299, 1), [['would be much faster than:'], ["If joining is an alternative, if you can get the list of IDs you want to delete by querying, it's better to do a subquery with that, something like this, using a query in the  Where :"]], [[' List<int> inList = GetIDS(); //20,000\n//pass inList to SQL\n']], ['Performance for delete query in sql'], 3], [(2221299, 2), [["If joining is an alternative, if you can get the list of IDs you want to delete by querying, it's better to do a subquery with that, something like this, using a query in the  Where :"], ["I'm not sure if your list comes from an external source and can't be determined like this...but if it can, your delete will be extremely faster."]], [[" DELETE FROM Table \nWhere IdColumn IN (Select ID\n                   From OtherTable\n                   Where Name Like '%DeleteMe%')\n"]], ['Performance for delete query in sql'], 3], [(2221555, 0), [['The following SQL will get you the row count of all tables in a database:'], ['If you just want the total row count across the whole database, appending:']], [[" CREATE TABLE #counts\n(\n    table_name varchar(255),\n    row_count int\n)\n\nEXEC sp_MSForEachTable @command1='INSERT #counts (table_name, row_count) SELECT ''?'', COUNT(*) FROM ?'\nSELECT table_name, row_count FROM #counts ORDER BY table_name, row_count DESC\nDROP TABLE #counts\n"]], ['How to fetch the row count for all tables in a SQL SERVER database'], 2], [(2221555, 1), [['If you just want the total row count across the whole database, appending:'], ['will get you a single value for the total number of rows in the whole database.']], [[' SELECT SUM(row_count) AS total_row_count FROM #counts\n']], ['How to fetch the row count for all tables in a SQL SERVER database'], 2], [(2222241, 0), [["Uncomment the commented lines and it'll update like MAGIC! (okay, not magic, but niftily hacky)"], ['/** this bit stolen from  http://www.tsqltutorials.com/pivot.php  **/']], [[" DROP TABLE Books\nDROP TABLE Prices\nDROP TABLE bookpricing\n\nCREATE TABLE Books ( id INT, title VARCHAR(20) )\nCREATE TABLE Prices ( id INT, [desc] VARCHAR(20), pricingchange VARCHAR(20))\nCREATE TABLE bookpricing ( id INT, bookid INT, priceid INT, bookprice MONEY )\n\nINSERT INTO Books VALUES (1, 'Hi Mom')\n--INSERT INTO Books Values (2, 'This is another book') \nINSERT INTO Prices VALUES (1, 'Standard', '1')\nINSERT INTO Prices  VALUES (2, 'Discount', '.5')\nINSERT INTO Prices VALUES(3, 'HyperMarkup', '1.5')\nINSERT INTO prices VALUES(4, 'Remaindered', '.1')\n\nINSERT INTO BookPricing VALUES (1,1,1,20.00)\nINSERT INTO BookPricing VALUES (2,1,2,10.00)\nINSERT INTO BookPricing VALUES (3,1,3,30.00)\n--INSERT INTO BookPricing VALUES (4,2,1,30.00)\n--INSERT INTO BookPricing VALUES (5,2,2,15.00)\n--INSERT INTO BookPricing VALUES (6,2,4,3.00)\n\nSELECT * FROM bookpricing \n"]], ['Best Approach for Storing One-Many Relationship - Practical Example/Dilemma'], 2], [(2222241, 1), [['/** this bit stolen from  http://www.tsqltutorials.com/pivot.php  **/'], ['-10000']], [[" DECLARE @columns VARCHAR(max)\n\nSELECT @columns = COALESCE(@columns + ',[' + cast(id as varchar) + ']',\n'[' + cast(id as varchar)+ ']')\nFROM prices\n\n\nDECLARE @query VARCHAR(max)\n\nSET @query = '\nSELECT * FROM (SELECT BookID, PriceID, BookPrice FROM BookPricing) AS BookTable PIVOT (SUM(bookprice) FOR priceid \nIN (' + @columns + ')\n)\nAS p'\n\nEXECUTE(@query)\n"]], ['Best Approach for Storing One-Many Relationship - Practical Example/Dilemma'], 2], [(2222681, 0), [['Put them in 1 start script?'], ['This is my /etc/init.d/dbora script. Add the call to start OC4J']], [[' start listener\nstart database\nstart appserver\n']], ['Starting oc4j and oracle using rc start script'], 2], [(2222681, 1), [['This is my /etc/init.d/dbora script. Add the call to start OC4J'], ['-10000']], [[' #!/bin/sh\n# chkconfig: 345 99 10\n# description: Oracle auto start-stop script.\n#\n# Set ORA_HOME to be equivalent to the $ORACLE_HOME\n# from which you wish to execute dbstart and dbshut;\n#\n# Set ORA_OWNER to the user id of the owner of the\n# Oracle database in ORA_HOME.\nORA_HOME=/app/oracle/product/10.2.0/db_1\nORA_OWNER=oracle\necho $1\nif [ ! -f $ORA_HOME/bin/dbstart ]\nthen\n    echo "Oracle startup: cannot start"\n    exit\nfi\ncase "$1" in\n    \'start\')\n        # Start the Oracle databases:\n        # The following command assumes that the oracle login\n        # will not prompt the user for any values\n        su - $ORA_OWNER -c "$ORA_HOME/bin/lsnrctl start"\n        su - $ORA_OWNER -c $ORA_HOME/bin/dbstart\n        su - $ORA_OWNER -c $ORA_HOME/bin/emctl start dbconsole\n        ;;\n    \'stop\')\n        # Stop the Oracle databases:\n        # The following command assumes that the oracle login\n        # will not prompt the user for any values\n        su - $ORA_OWNER -c $ORA_HOME/bin/emctl stop dbconsole\n        su - $ORA_OWNER -c $ORA_HOME/bin/dbshut\n        su - $ORA_OWNER -c "$ORA_HOME/bin/lsnrctl stop"\n        ;;\nesac\n']], ['Starting oc4j and oracle using rc start script'], 2], [(2224442, 0), [["I can not try it right now, but can't you use this syntax"], ['Guess your syntax would then look like this:']], [[' INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\n  ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);\n']], ['mysql conditional insert on duplicate update - multiple records'], 2], [(2224442, 1), [['Guess your syntax would then look like this:'], ['-10000']], [[' INSERT INTO tbl_name\n  (key_id,field1,filed2) \nVALUES\n  (1,2,3),\n  (1,5,6),\n  (1,8,9)\nON DUPLICATE KEY\n  UPDATE field1=VALUES(field1), field2=VALUES(field2);\n']], ['mysql conditional insert on duplicate update - multiple records'], 2], [(2224687, 0), [['To add a foreign key constraint within the CREATE TABLE statement for  PERSONS :'], ['Using an ALTER TABLE statement if the tables already exist:']], [[' FOREIGN KEY (surname) REFERENCES names(surnames)\n']], ['MySQL: Can I constraint column values in one table to values in a column in another table, by DB design only?'], 2], [(2224687, 1), [['Using an ALTER TABLE statement if the tables already exist:'], ['Be aware that if you use the  ALTER TABLE  statement, the data in the  PERSONS  table can only contain surname values that exist in the  NAMES.surname  table - it can not be applied until after the data has been fixed.']], [[' ALTER TABLE persons \n  ADD CONSTRAINT FOREIGN KEY (surname) REFERENCES names(surname)\n']], ['MySQL: Can I constraint column values in one table to values in a column in another table, by DB design only?'], 2], [(2225628, 0), [["I'm assuming that you want the adjusted table to only  adjust  values and not  add  or  remove  values. Your query has a disadvantage that it is in theory possible to add new values which don't even exist in the original table. This version prevents this possible risk:"], ['Also your query uses a UNION DISTINCT but really you only need a UNION ALL. This slightly modified version of your query should run slightly faster:']], [[' SELECT Table_Master.ID,\n    CASE WHEN Table_Adjusted.ID IS NULL THEN Table_Master.Value\n         ELSE Table_Adjusted.Value\n    END AS Value\nFROM Table_Master\nLEFT JOIN Table_Adjusted\nON Table_Master.ID = Table_Adjusted.ID\n']], ['What is the Correct Way To Have An Adjustments View Between Two Tables in SQL'], 2], [(2225628, 1), [['Also your query uses a UNION DISTINCT but really you only need a UNION ALL. This slightly modified version of your query should run slightly faster:'], ['-10000']], [[' SELECT ID, Value\nFROM Table_Adjusted\nUNION ALL\nSELECT ID, Value\nFROM Table_Master\nWHERE ID NOT IN (SELECT ID FROM Table_Adjusted)\n']], ['What is the Correct Way To Have An Adjustments View Between Two Tables in SQL'], 2], [(2227293, 0), [['The problem is that your conditions array stumbles across a PHP limitation: an array can not have two keys with the same name.'], ['The workaround looks like this:']], [[' \'or\'=> array(\n    "Message.to LIKE" => "".$this->Session->read(\'Auth.User.id\').",",\n    "Message.to LIKE" => ",".$this->Session->read(\'Auth.User.id\').","\n)\n']], ['How to use OR Condition in Paginate function in Cakephp?'], 2], [(2227293, 1), [['The workaround looks like this:'], ['Oh, and you should seriously think about a) database normalization and b) code readability.']], [[' \'or\'=> array(\n    array("Message.to LIKE" => $this->Session->read(\'Auth.User.id\') . ","),\n    array("Message.to LIKE" => "," . $this->Session->read(\'Auth.User.id\') . ",")\n)\n']], ['How to use OR Condition in Paginate function in Cakephp?'], 2], [(2227985, 0), [['Remove the reference to product from the translation table and put a reference to translation where you need it (the other way around).'], ['As an alternative (not especially a good one) you can have one single field and keep all translations there merged together (as XML, for example).']], [[' [ products ]\nid (INT)\nprice (DECIMAL)\ntitle_translation_id (INT, FK)\n\n[ translation ]\nid (INT, PK)\nneutral_text (VARCHAR)\n-- other properties that may be useful (date, creator etc.)\n\n[ translation_text ]\ntranslation_id (INT, FK)\nlanguage_id (INT, FK) \ntext (VARCHAR)\n']], ["What's the best database structure to keep multilingual data?"], 2], [(2227985, 1), [['As an alternative (not especially a good one) you can have one single field and keep all translations there merged together (as XML, for example).'], ['-10000']], [[' <translation>\n  <en>Supplier</en>\n  <de>Lieferant</de>\n  <fr>Fournisseur</fr>\n</translation>\n']], ["What's the best database structure to keep multilingual data?"], 2], [(2229218, 0), [['For SELECTs you can use the  FOUND_ROWS  construct ( documented here ):'], ["For  UPDATE / DELETE / INSERT , it's the  ROW_COUNT  construct"]], [[' SELECT SQL_CALC_FOUND_ROWS something FROM your_table WHERE whatever;\nSELECT FOUND_ROWS( ) ;\n']], ['Does Mysql have an equivalent to @@ROWCOUNT like in mssql?'], 2], [(2229218, 1), [["For  UPDATE / DELETE / INSERT , it's the  ROW_COUNT  construct"], ['which will return the number of affected rows.']], [[' INSERT INTO your_table VALUES (1,2,3);\nSELECT ROW_COUNT();\n']], ['Does Mysql have an equivalent to @@ROWCOUNT like in mssql?'], 2], [(2229295, 0), [['Or in SQL Plus you can simply save commonly used queries as scripts in files, for example a script called show_index could contain:'], ['You would run this in SQL Plus like this:']], [[" select index_name, column_name, column_position from user_ind_columns\nwhere table_name=upper('&TABLENAME.') order by index_name, column_position;\n"]], ['oracle in the real world'], 2], [(2229295, 1), [['You would run this in SQL Plus like this:'], ['-10000']], [[' SQL> @show_index \nEnter value for tablename: mytable\n']], ['oracle in the real world'], 2], [(2229317, 0), [['Assuming Field2 cannot be NULL, you could use a LEFT JOIN with COALESCE:'], ['If that Field2 can be NULL, replace the coalesce expression with the following:']], [[' SELECT T1.ID, T1.Field1, COALESCE(T2.Field2, T1.Field2) AS Field2, T1.ParentID\nFROM Table1 T1\nLEFT JOIN Table1 T2\nON T1.ParentID = T2.ID\n']], ['Parent Child Record Relationship in SQL?'], 2], [(2229317, 1), [['If that Field2 can be NULL, replace the coalesce expression with the following:'], ['-10000']], [[' CASE WHEN T2.Id IS NULL THEN T1.Field2 ELSE T2.Field2 END AS Field2\n']], ['Parent Child Record Relationship in SQL?'], 2], [(2229730, 0), [['Class:'], ['Mapping:']], [[' public class Invoice\n{\n    public virtual int Id { get; protected set; }\n    public virtual decimal Amount { get; set; }\n    public virtual decimal Paid { get; set; }\n    public virtual decimal Balance\n    {\n        get { return Amount - Paid; }\n    }\n}\n']], ['NHibernate.Linq - Custom/Calculated property expression'], 2], [(2229730, 1), [['Mapping:'], ['Now you can use Linq and query on  Invoice.Balance']], [[' <class name="Invoice">\n    <id name="Id">\n        <generator class="hilo"/>\n    </id>\n    <property name="Amount"/>\n    <property name="Paid"/>\n    <property name="Balance" formula="Amount - Paid" access="readonly"/>\n</class>\n']], ['NHibernate.Linq - Custom/Calculated property expression'], 2], [(2230629, 0), [['This query does the job:'], ['You need to supply a comma-separated list of personality ids for  <list-of-personality-ids>  and you also need to provide the number of items in th elist. Sticking to your example, you would get:']], [[' select  user_id\nfrom    user_has_personalities\nwhere   personality_id in (<list-of-personality-ids>)\ngroup by user_id\nhaving count(*) = <numer-of-items-in-IN-list>\n']], ['MySQL Many-To-Many Query Problem'], 2], [(2230629, 1), [['You need to supply a comma-separated list of personality ids for  <list-of-personality-ids>  and you also need to provide the number of items in th elist. Sticking to your example, you would get:'], ['this ensures you only get users that have all these personalities.']], [[' select  user_id\nfrom    user_has_personalities\nwhere   personality_id in (4,5,7)\ngroup by user_id\nhaving count(*) = 3\n']], ['MySQL Many-To-Many Query Problem'], 2], [(2232523, 0), [['In addition to using group by to fetch the group-wise maximum you probably want to make it an uncorrelated subquery to fetch additional fields for the specific rows from the table.'], ['This works best/fastest if you have an index']], [[' SELECT\n  la.user_id,la.message\nFROM\n  `log` as la\nINNER JOIN\n  (\n    SELECT\n      user_id, MAX(id) AS maxid\n    FROM\n      `log`\n    GROUP BY\n      user_id\n    ) as lb\nON\n  la.id = lb.maxid\n']], ['Select only newest records from table and make this FAST, how?'], 2], [(2232523, 1), [['This works best/fastest if you have an index'], ['but even without that key the performance is descent.']], [[' KEY `foo` (`user_id`,`id`)\n']], ['Select only newest records from table and make this FAST, how?'], 2], [(2233341, 0), [['Since you already have the Amount and Paid properties on your object, you can just define the Balance property as a regular property:'], ["If you don't set the Amount / Paid properties to 'Lazy', I think this is the best, most readable and most maintainable solution. \nIf either of these properties IS lazy-loaded, you can still use this method, just note that it would have side effects.\nFor example- a statement such as this"]], [[' public int Balance { get { return Amount - Paid; } }\n']], ['NHibernate linq - Use lambda expression in place of formula attribute on mapping'], 2], [(2233341, 1), [["If you don't set the Amount / Paid properties to 'Lazy', I think this is the best, most readable and most maintainable solution. \nIf either of these properties IS lazy-loaded, you can still use this method, just note that it would have side effects.\nFor example- a statement such as this"], ['would cause a DB access for each Invoice in the collection. \nThis might still be acceptable for you, just be aware of that.. \nCheers\nJhonny']], [[' invoices.Where(i => i.Balance > 5)\n']], ['NHibernate linq - Use lambda expression in place of formula attribute on mapping'], 2], [(2235563, 0), [['Ah okay, this should do it. Note that I\'m using Microsoft SQL Server table variables for this complete example, just change the select statement to use "Emails" & "Attachements" instead of "@Emails" & "@Attachements" for your tables.'], ["You could also do a DISTINCT with an inner JOIN, though I prefer the style above personally. I'm not sure which is more efficient."]], [[" DECLARE @Emails TABLE\n(\n    [UID] INT,\n    [Column1] VARCHAR(20),\n    [Column2] VARCHAR(20),\n    [Column3] VARCHAR(20),\n    [Column4] VARCHAR(20),\n    [Column5] VARCHAR(20)\n)\n\nDECLARE @Attachements TABLE\n(\n    [UID] INT,\n    [ReferenceID] INT\n)\n\nINSERT INTO @Emails ([UID], Column1, Column2, Column3, Column4, Column5) SELECT 1, 'Data 1', 'Data 2', 'Data 3', 'Data 4', 'Data 5'\nINSERT INTO @Emails ([UID], Column1, Column2, Column3, Column4, Column5) SELECT 2, 'Data 6', 'Data 7', 'Data 8', 'Data 9', 'Data 10'\nINSERT INTO @Emails ([UID], Column1, Column2, Column3, Column4, Column5) SELECT 3, 'Data 11', 'Data 12', 'Data 13', 'Data 14', 'Data 15'\nINSERT INTO @Emails ([UID], Column1, Column2, Column3, Column4, Column5) SELECT 4, 'Data 16', 'Data 17', 'Data 18', 'Data 19', 'Data 20'\n\nINSERT INTO @Attachements ([UID], [ReferenceID]) SELECT 1, 2\nINSERT INTO @Attachements ([UID], [ReferenceID]) SELECT 2, 2\nINSERT INTO @Attachements ([UID], [ReferenceID]) SELECT 3, 1\nINSERT INTO @Attachements ([UID], [ReferenceID]) SELECT 4, 3\n\n-- And here's the select!\nSELECT e.UID, e.Column1, e.Column2, e.Column3, e.Column4, e.Column5\nFROM @Emails e\nWHERE EXISTS\n    (SELECT 1 FROM @Attachements a WHERE a.ReferenceID = e.UID)\n"]], ['SQL: selection of rows with unique values but all columns'], 2], [(2235563, 1), [["You could also do a DISTINCT with an inner JOIN, though I prefer the style above personally. I'm not sure which is more efficient."], ['P.S. If the table names are in English, it\'s "Attachments" not "Attachements". If it\'s in another language, then ignore me! :)']], [[' SELECT DISTINCT e.UID, e.Column1, e.Column2, e.Column3, e.Column4, e.Column5\nFROM @Emails e\n    INNER JOIN @Attachements a ON a.ReferenceID = e.UID\n']], ['SQL: selection of rows with unique values but all columns'], 2], [(2237010, 0), [['Say, you have this table:'], ['and issue this operation:']], [[' id   value\n1    2\n2    1\n']], ['TSQL update trigger: joining inserted and deleted'], 3], [(2237010, 1), [['and issue this operation:'], ['which updates both records but leaves the table as this:']], [[' UPDATE  mytable\nSET     id = CASE WHEN id = 1 THEN 2 ELSE 1 END,\n        value = CASE WHEN value = 1 THEN 2 ELSE 1 END\n']], ['TSQL update trigger: joining inserted and deleted'], 3], [(2237010, 2), [['which updates both records but leaves the table as this:'], [', which from relational point of view is similar to not changing the table at all.']], [[' id   value\n2    1\n1    2\n']], ['TSQL update trigger: joining inserted and deleted'], 3], [(2237109, 0), [['It depends. If the fk between r and b was specified with  ON DELETE CASCADE , you could do:'], ['If there is no cascading delete, then you can do it with a temporary table:']], [[' START TRANSACTION;\n\nDELETE FROM b\nWHERE  id IN (\n    SELECT r.b_id\n    FROM       r\n    INNER JOIN a\n    ON         r.a_id = a.id\n    WHERE      <some condition on a>\n);\n\nDELETE FROM a\nWHERE      <some condition on a>;\n\nCOMMIT WORK;\n']], ['Delete all entries in a MxN relation with non-null FK constraints'], 2], [(2237109, 1), [['If there is no cascading delete, then you can do it with a temporary table:'], ['-10000']], [[' CREATE TEMPORARY TABLE to_be_deleted_from_b \nLIKE b;\n\nSTART TRANSACTION;\n\nINSERT INTO to_be_deleted_from_b\nSELECT * \nFROM b\nINNER JOIN r\nON         b.id = r.b_id\nINNER JOIN a\nON         r.a_id = a.id\nWHERE      <some condition on a>;\n\nDELETE FROM r\nWHERE  a_id IN (\n    SELECT a.id\n    FROM   a\n    WHERE  <some condition on a>\n);\n\nDELETE FROM a\nWHERE  <some condition on a>;\n\nDELETE FROM b\nWHERE b.id IN (\n    SELECT id\n    FROM   to_be_deleted_from_b\n);\n\nCOMMIT WORK;\n\nDROP TABLE to_be_deleted_from_b\n']], ['Delete all entries in a MxN relation with non-null FK constraints'], 2], [(2237221, 0), [['In  PostgreSQL 8.4 :'], [', or just this:']], [[' SELECT  date AS date1, time AS time1,\n        LEAD(date) OVER (ORDER BY date, time, id) AS date2,\n        LEAD(time) OVER (ORDER BY date, time, id) AS time2\nFROM    log_table\nORDER BY\n        date, time, id\n']], ['Is there a way to limit a left outer join?'], 3], [(2237221, 1), [[', or just this:'], ['In  PostgreSQL 8.3  and below:']], [[' SELECT  date1, time1, (lnext).*\nFROM    (\n        SELECT  date AS date1, time AS time1,\n                LEAD(lt) OVER (ORDER BY date, time, id) AS lnext\n        FROM    log_table lt\n        ) q\nORDER BY\n        date, time, id\n']], ['Is there a way to limit a left outer join?'], 3], [(2237221, 2), [['In  PostgreSQL 8.3  and below:'], ['-10000']], [[' SELECT  date AS date1, time AS time1,\n        (li).date AS date2, (li).time AS time2\nFROM    (\n        SELECT  lo.*,\n                (\n                SELECT  li\n                FROM    log_table li\n                WHERE   (li.date, li.time, li.id) > (lo.date, lo.time, lo.id)\n                ORDER BY\n                        date, time, id\n                LIMIT 1\n                ) AS li\n        FROM    log_table lo\n        ) q\n']], ['Is there a way to limit a left outer join?'], 3], [(2239896, 0), [['If I understand your question correctly, on the one hand, in your stored procedure you can refer to the table in the same database directly by name'], ['You can refer to a table in database  db1  by prefixing the database name and an empty owner:']], [[' SELECT  ...\nFROM    table_in_db2\n']], ['Database name while referencing tables - Sybase'], 4], [(2239896, 1), [['You can refer to a table in database  db1  by prefixing the database name and an empty owner:'], ['On the other hand, if you want to  avoid  hard-coding database names in the procedure you might create a view in database  db2  that references the  db1  table:']], [[' SELECT  ...\nFROM    db1..table_in_db1\n']], ['Database name while referencing tables - Sybase'], 4], [(2239896, 2), [['On the other hand, if you want to  avoid  hard-coding database names in the procedure you might create a view in database  db2  that references the  db1  table:'], ['and use that in the procedure:']], [[' CREATE VIEW view_in_db2\nAS\n    SELECT  *\n    FROM    db1..table_in_db1\n']], ['Database name while referencing tables - Sybase'], 4], [(2239896, 3), [['and use that in the procedure:'], ['-10000']], [[' SELECT  ...\nFROM    view_in_db2\n']], ['Database name while referencing tables - Sybase'], 4], [(2240057, 0), [['You could select the distinct products, and  cross apply  them on a function that computes a string of options:'], ['Code to create example:']], [[" select *\nfrom (select distinct product_id from @t) a\ncross apply (\n    select option_name + ', ' as [text()]\n    from @t b\n    where a.product_id = b.product_id\n    for xml path('')\n) c ( Options )\n\n-->\n\nproduct_id   Options\n17854        XSMALL (2-6), SMALL (6-10), MEDIUM (10-14), \n18232        LARGE, \n"]], ['How to aggregate data into view with the same ID'], 2], [(2240057, 1), [['Code to create example:'], ['-10000']], [[" declare @t table (option_name varchar(30), product_id int)\n\ninsert @t select 'XSMALL (2-6)', 17854\nunion all select 'SMALL (6-10)', 17854\nunion all select 'MEDIUM (10-14)', 17854\nunion all select 'LARGE', 18232\n"]], ['How to aggregate data into view with the same ID'], 2], [(2242024, 0), [['Just for completeness, a pure PL/SQL solution.'], ['This uses the preclared  sys.dbms_debug_vc2coll  datatype, which has quite a generous definition ...']], [[" SQL> set serveroutput on\nSQL>\nSQL> declare\n  2      my_array sys.dbms_debug_vc2coll\n  3          := sys.dbms_debug_vc2coll('The', 'Quick', 'brown', 'fox');\n  4  begin\n  5     for r in my_array.first..my_array.last\n  6      loop\n  7          dbms_output.put_line( my_array(r) );\n  8     end loop;\n  9  end;\n 10  /\nThe\nQuick\nbrown\nfox\n\nPL/SQL procedure successfully completed.\n\nSQL>\n"]], ['For each string, execute a function/procedure'], 2], [(2242024, 1), [['This uses the preclared  sys.dbms_debug_vc2coll  datatype, which has quite a generous definition ...'], ['... so, like Gary says, you may wish to declare your own.  Especially if your strings are short and you have lots of them.  ']], [[' SQL> desc sys.dbms_debug_vc2coll\n sys.dbms_debug_vc2coll TABLE OF VARCHAR2(1000)\n\nSQL>\n']], ['For each string, execute a function/procedure'], 2], [(2242743, 0), [['It sounds like you want a correlated subquery. Roughly, this:'], ['To handle the situation where there is no barcode for a given item you need an outer join and to give only one barcode when there are many you need an additional subquery. In ANSI SQL, it might look something like this:']], [['  select *\nfrom ITEMS\njoin BARCODES as B on ITEMS.ID = B.ITEM_ID\njoin CATEGORIES on CATEGORIES.ID = ITEMS.CATEGORY_ID\nwhere B.ACTIVE_FROM =\n    (select max(ACTIVE_FROM)\n     from BARCODES as B2\n     where B2.ITEM_ID = B.ITEM_ID)\n']], ['SQL Query - one column must be distinct, restricted column must be most recent'], 2], [(2242743, 1), [['To handle the situation where there is no barcode for a given item you need an outer join and to give only one barcode when there are many you need an additional subquery. In ANSI SQL, it might look something like this:'], ['-10000']], [['  select *\nfrom ITEMS\nLEFT OUTER join BARCODES as B on ITEMS.ID = B.ITEM_ID\njoin CATEGORIES on CATEGORIES.ID = ITEMS.CATEGORY_ID\nwhere B.ACTIVE_FROM =\n    (select max(ACTIVE_FROM)\n     from BARCODES as B2\n     where B2.ITEM_ID = B.ITEM_ID)\n    AND B.ID =\n    (SELECT MAX(ID)\n     FROM BARCODES AS B3\n     WHERE B3.ITEM_ID = B.ITEM_ID)\n    OR ACTIVE_FROM IS NULL\n']], ['SQL Query - one column must be distinct, restricted column must be most recent'], 2], [(2244390, 0), [['Not without using all the fields in the query. If this is your table:'], ['you can issue:']], [[' col0: TEXT NULL,\ncol1: TEXT NULL,\ncol2: INT NULL\n']], ['update all the fields in table which have empty values (MYSQL)'], 2], [(2244390, 1), [['you can issue:'], ['-10000']], [[" UPDATE YourTable SET col0='yourValue' WHERE col1 IS NULL or col2 IS NULL\n"]], ['update all the fields in table which have empty values (MYSQL)'], 2], [(2246086, 0), [['I think you wanted to filter groups. Use  HAVING COUNT(*)  instead of  WHERE :'], ['If you what to sort groups by number of elements then use  ORDER BY :']], [[' SELECT Id, QId, UName, Ans, Date, Count(*) * 10 as Total\nFROM question\nGROUP BY UName\nHAVING Count(*)\n']], ['Mysql Count(*) as Total WHERE Total?'], 2], [(2246086, 1), [['If you what to sort groups by number of elements then use  ORDER BY :'], ['-10000']], [[' SELECT Id, QId, UName, Ans, Date, Count(*) * 10 as Total\nFROM question\nGROUP BY UName\nORDER BY Count(*) DESC\n']], ['Mysql Count(*) as Total WHERE Total?'], 2], [(2246148, 0), [['DECBIN :'], ['So the sql looks something like this:']], [[' decimal   binary\n0         0000000000\n1         1000000000\n2         0100000000\n...\n1023      1111111111\n']], ['nested dependent sql question'], 2], [(2246148, 1), [['So the sql looks something like this:'], ['This is faster by a factor of 10. Thanks @JD_55 for getting me tho think about the problem in a new way.']], [["     SELECT DISTINCT\n       t.employeeID,\n       DECODE (SUBSTR (x.binary,  1, 1), 0, ' ', t.c1)  AS crit1,\n       DECODE (SUBSTR (x.binary,  2, 1), 0, ' ', t.c2)  AS crit2,\n       DECODE (SUBSTR (x.binary,  3, 1), 0, ' ', t.c3)  AS crit3,\n       DECODE (SUBSTR (x.binary,  4, 1), 0, ' ', t.c4)  AS crit4,\n       DECODE (SUBSTR (x.binary,  5, 1), 0, ' ', t.c5)  AS crit5,\n       DECODE (SUBSTR (x.binary,  6, 1), 0, ' ', t.c6)  AS crit6,\n       DECODE (SUBSTR (x.binary,  7, 1), 0, ' ', t.c7)  AS crit7,\n       DECODE (SUBSTR (x.binary,  8, 1), 0, ' ', t.c8)  AS crit8,\n       DECODE (SUBSTR (x.binary,  9, 1), 0, ' ', t.c9)  AS crit9,\n       DECODE (SUBSTR (x.binary, 10, 1), 0, ' ', t.c10) AS crit10,\n       DECODE (SUBSTR (x.binary, 10, 1), 0, 'Choose All',t.c11) AS crit10Descr\n  FROM Security t, DECBIN x\n WHERE TO_NUMBER (x.decimal) BETWEEN 0 AND POWER (2, 10) - 1\n"]], ['nested dependent sql question'], 2], [(2246617, 0), [['Create a  FULLTEXT  index:'], ['and issue a query like this:']], [[' CREATE FULLTEXT INDEX fx_music_artist_song ON music (artistname, songname)\n']], ['MySQL Optimization'], 3], [(2246617, 1), [['and issue a query like this:'], ['To match only the artist, you can create an additional index on  artistname  only and use it in a query:']], [[" SELECT  *\nFROM    mytable\nWHERE   MATCH(artistname, songname) AGAINST ('+queen +bohemian' IN BOOLEAN MODE)\n"]], ['MySQL Optimization'], 3], [(2246617, 2), [['To match only the artist, you can create an additional index on  artistname  only and use it in a query:'], ['The column set in the  MATCH  clause should be exactly the same as in the index definition for the corresponding index to be used.']], [[" SELECT  *\nFROM    mytable\nWHERE   MATCH(artistname) AGAINST ('+queen' IN BOOLEAN MODE)\n"]], ['MySQL Optimization'], 3], [(2247310, 0), [['To see all tables in another schema, you need to have one or more of the following system privileges:'], ['With any of those, you can select:']], [[' SELECT ANY DICTIONARY\n(SELECT | INSERT | UPDATE | DELETE) ANY TABLE\n']], ['How do I list all tables in a schema in Oracle SQL?'], 4], [(2247310, 1), [['With any of those, you can select:'], ['Without those system privileges, you can only see tables you have been granted some level of access to, whether directly or through a role.']], [[" SELECT DISTINCT OWNER, OBJECT_NAME \n  FROM DBA_OBJECTS\n WHERE OBJECT_TYPE = 'TABLE'\n   AND OWNER = '[some other schema]'\n"]], ['How do I list all tables in a schema in Oracle SQL?'], 4], [(2247310, 2), [['Without those system privileges, you can only see tables you have been granted some level of access to, whether directly or through a role.'], ['Lastly, you can always query the data dictionary for your own tables, as your rights to your tables cannot be revoked (as of 10g):']], [[" SELECT DISTINCT OWNER, OBJECT_NAME \n  FROM ALL_OBJECTS\n WHERE OBJECT_TYPE = 'TABLE'\n   AND OWNER = '[some other schema]'\n"]], ['How do I list all tables in a schema in Oracle SQL?'], 4], [(2247310, 3), [['Lastly, you can always query the data dictionary for your own tables, as your rights to your tables cannot be revoked (as of 10g):'], ['-10000']], [[" SELECT DISTINCT OBJECT_NAME \n  FROM USER_OBJECTS\n WHERE OBJECT_TYPE = 'TABLE'\n"]], ['How do I list all tables in a schema in Oracle SQL?'], 4], [(2247949, 0), [["I think the problem is that writing out the last update time into a hidden field like that will just do a  ToString  on the date which by default won't render out the milliseconds. You could try rendering out the timestamp as some absolute value such as ticks:"], ['You can then reconstruct your datetime on the other side by converting the value back into a long & reconstructing the DateTime:']], [[' <%= Html.Hidden("LastUpdate", Model.LastUpdate.Ticks) %>\n']], ['MVC.NET milliseconds get lost when using Html.hidden on a DateTime LastUpdated column for version tracking'], 2], [(2247949, 1), [['You can then reconstruct your datetime on the other side by converting the value back into a long & reconstructing the DateTime:'], ['-10000']], [[' var dt = new DateTime(Int64.Parse(ticks));\n']], ['MVC.NET milliseconds get lost when using Html.hidden on a DateTime LastUpdated column for version tracking'], 2], [(2250399, 0), [['You could try'], ['Even better would be to try']], [[' SELECT  DISTINCT tParent.*\nFROM    Table tParent LEFT JOIN\n        Table tChild ON tParent.ID = tChild.ParentID\nWHERE   tChild.ID IS NOT NULL\n']], ['How to remove all parrents with no children in SQL?'], 2], [(2250399, 1), [['Even better would be to try'], ['-10000']], [[' SELECT  *\nFROM    Table t\nWHERE   NOT EXISTS(SELECT 1 FROM Table WHERE ParentID = t.ID)\n']], ['How to remove all parrents with no children in SQL?'], 2], [(2250474, 0), [['-10000'], ['or']], [[' SELECT  v.*\nFROM    document d\nOUTER APPLY\n        (\n        SELECT  TOP 1 *\n        FROM    version v\n        WHERE   v.document = d.id\n        ORDER BY\n                v.revision DESC\n        ) v\n']], ['MYSQL top N rows from multiple table join'], 3], [(2250474, 1), [['or'], ['In  MySQL , you do it this way:']], [[' SELECT  v.*\nFROM    document d\nLEFT JOIN\n        (\n        SELECT  *, ROW_NUMBER() OVER (PARTITION BY v.id ORDER BY revision DESC)\n        FROM    version\n        ) v\nON      v.document = d.id\n        AND v.rn = 1\n']], ['MYSQL top N rows from multiple table join'], 3], [(2250474, 2), [['In  MySQL , you do it this way:'], ['Create a composite index on  version (document, revision, id)  for this to work fast.']], [[' SELECT  *\nFROM    document d\nLEFT JOIN\n        version v\nON      v.id = \n        (\n        SELECT  id\n        FROM    version vi\n        WHERE   vi.document = d.document\n        ORDER BY\n                vi.document DESC, vi.revision DESC, vi.id DESC\n        LIMIT 1\n        )\n']], ['MYSQL top N rows from multiple table join'], 3], [(2251035, 0), [['What about this'], ['For example']], [[' CREATE TYPE  [schema_name.]typename\nFROM system_data_type_name [(precision,scale)] [NULL|NOT NULL]\n']], ['Is there an equivalent to typedef in Transact-SQL?'], 2], [(2251035, 1), [['For example'], ['-10000']], [[' CREATE TYPE CountryCode\nFROM char(2) NULL\n']], ['Is there an equivalent to typedef in Transact-SQL?'], 2], [(2253604, 0), [['You can see which stand-alone procedure you can execute with this:'], ["But if they are in a package you can't directly see the procedure names, AFAIK, but you can see which package you can execute with this:"]], [[" select ao.object_type, ao.owner ||'.'|| ao.object_name\nfrom all_objects ao, user_tab_privs utp\nwhere ao.object_type = 'PROCEDURE'\nand utp.owner = ao.owner\nand utp.table_name = ao.object_name\nand utp.privilege = 'EXECUTE';\n"]], ['Oracle PL/SQL: Retrieve list of permissioned procedures for account'], 2], [(2253604, 1), [["But if they are in a package you can't directly see the procedure names, AFAIK, but you can see which package you can execute with this:"], ["And then you can desc[ribe] the package to see the individual procedures and functions within it. I guess that is probably held somewhere in the data dictionary but don't knwo where off-hand..."]], [[" select ao.object_type, ao.owner ||'.'|| ao.object_name\nfrom all_objects ao, user_tab_privs utp\nwhere ao.object_type = 'PACKAGE'\nand utp.owner = ao.owner\nand utp.table_name = ao.object_name\nand utp.privilege = 'EXECUTE';\n"]], ['Oracle PL/SQL: Retrieve list of permissioned procedures for account'], 2], [(2253764, 0), [["Here's the sample query:"], ["and it's plan:"]], [[' SELECT  ROUND(SUM(id), -1)\nFROM    master\nGROUP BY\n        name\nORDER BY\n        SUM(id) DESC\n']], ['in my sql statement I call sum twice for the same argument, is it duplicating the effort?'], 2], [(2253764, 1), [["and it's plan:"], ['As you can see, the aggregation is done once and stored in  Expr1003 .']], [['   |--Compute Scalar(DEFINE:([Expr1004]=round([Expr1003],(-1))))\n       |--Sort(ORDER BY:([Expr1003] DESC))\n            |--Stream Aggregate(GROUP BY:([test].[dbo].[master].[name]) DEFINE:([Expr1003]=SUM([test].[dbo].[master].[id])))\n                 |--Index Scan(OBJECT:([test].[dbo].[master].[ix_name_desc]), ORDERED BACKWARD)\n']], ['in my sql statement I call sum twice for the same argument, is it duplicating the effort?'], 2], [(2254640, 0), [['This had bothered me in the past, but I shelved it until I saw your question.  The  DBViewer  plug-in seems to do a fairly decent job of this, but I only tested it with basic SQL.  For example, it will transform '], ['into']], [[' select * from urbase order by foo;\n']], ['Eclipse Galileo SQL Editor: is there a code formatter (tidy) function?'], 2], [(2254640, 1), [['into'], ['This does the best job out of any that I tested, although there might be better plug-ins out there.']], [[' SELECT\n        *\n    FROM\n        urbase\n    ORDER BY\n        foo\n']], ['Eclipse Galileo SQL Editor: is there a code formatter (tidy) function?'], 2], [(2255115, 0), [['-10000'], ['or']], [[' IF (EXISTS YOUR_SELECT)\nBEGIN ...\n']], ['SQL - Counting Returned Records'], 2], [(2255115, 1), [['or'], ['or use  select count(*)  instead of selecting a value']], [[' IF (@record2ID IS NULL) \nBEGIN ...\n']], ['SQL - Counting Returned Records'], 2], [(2255908, 0), [['Just for fun I did a brute force solution. It will find combinations of one, two, or three records that add up to  Total_amt . You could expand it to handle more transactions per sum, by adding  d4 ,  d5  subselects, etc.:'], ['Output:']], [[' begin tran\n\ncreate table Table_1 (D_ID int, Deposit_amt int)\ncreate table Table_2 (Total_ID int, Total_amt int)\n\ninsert into Table_1 (D_ID, Deposit_amt) values (1, 4)\ninsert into Table_1 (D_ID, Deposit_amt) values (2, 3)\ninsert into Table_1 (D_ID, Deposit_amt) values (3, 1)\ninsert into Table_1 (D_ID, Deposit_amt) values (4, 1)\ninsert into Table_1 (D_ID, Deposit_amt) values (5, 9)\ninsert into Table_1 (D_ID, Deposit_amt) values (6, 13)\ninsert into Table_1 (D_ID, Deposit_amt) values (7, 6)\ninsert into Table_1 (D_ID, Deposit_amt) values (8, 7)\ninsert into Table_1 (D_ID, Deposit_amt) values (9, 12)\ninsert into Table_1 (D_ID, Deposit_amt) values (10, 4)\n\ninsert into Table_2 (Total_ID, Total_amt) values (1, 17)\ninsert into Table_2 (Total_ID, Total_amt) values (2, 23)\ninsert into Table_2 (Total_ID, Total_amt) values (3, 55)\ninsert into Table_2 (Total_ID, Total_amt) values (4, 4)\n\nselect t.Total_amt, \n    d1.D_ID as d1_ID, d1.Deposit_amt as d1_amt, \n    d2.D_ID as d2_ID, d2.Deposit_amt as d2_amt, \n    d3.D_ID as d3_ID, d3.Deposit_amt as d3_amt\nfrom Table_2 t\ncross join (\n    select D_ID, Deposit_amt from Table_1 \n) d1\ninner join (\n    select D_ID, Deposit_amt from Table_1 \n    union all\n    select null, null\n) d2 on d1.D_ID > d2.D_ID or d2.D_ID is null\ninner join (\n    select D_ID, Deposit_amt from Table_1 \n    union all\n    select null, null\n) d3 on d2.D_ID > d3.D_ID or d3.D_ID is null\nwhere isnull(d1.Deposit_amt, 0) + isnull(d2.Deposit_amt, 0) + isnull(d3.Deposit_amt, 0) = t.Total_amt\norder by Total_amt\n\nrollback tran\n']], ['In SQL find the combination of rows whose sum add up to a specific amount (or amt in other table)'], 2], [(2255908, 1), [['Output:'], ['Note:  You could filter out individual rows whose  Deposit_amt > Total_amt , but this would probably not help performance much unless  Deposit_amt  was indexed.']], [[' Total_amt   d1_ID       d1_amt      d2_ID       d2_amt      d3_ID       d3_amt\n----------- ----------- ----------- ----------- ----------- ----------- -----------\n4           3           1           2           3           NULL        NULL\n4           4           1           2           3           NULL        NULL\n4           1           4           NULL        NULL        NULL        NULL\n4           10          4           NULL        NULL        NULL        NULL\n17          9           12          3           1           1           4\n17          9           12          4           1           1           4\n17          10          4           5           9           1           4\n17          8           7           7           6           1           4\n17          6           13          1           4           NULL        NULL\n17          10          4           6           13          NULL        NULL\n17          10          4           8           7           7           6\n17          8           7           5           9           4           1\n17          10          4           9           12          4           1\n17          8           7           5           9           3           1\n17          10          4           9           12          3           1\n17          6           13          3           1           2           3\n17          6           13          4           1           2           3\n23          8           7           6           13          2           3\n23          6           13          5           9           3           1\n23          6           13          5           9           4           1\n23          10          4           7           6           6           13\n23          10          4           9           12          8           7\n23          7           6           6           13          1           4\n23          9           12          8           7           1           4\n\n(24 row(s) affected)\n']], ['In SQL find the combination of rows whose sum add up to a specific amount (or amt in other table)'], 2], [(2255964, 0), [['-10000'], ['is the same as']], [[' SELECT max(id) FROM Comics\n']], ['Obtain value preceding maximum value'], 3], [(2255964, 1), [['is the same as'], ['to get row 2 you can do']], [[' SELECT TOP 1 id FROM Comics ORDER BY ID DESC\n']], ['Obtain value preceding maximum value'], 3], [(2255964, 2), [['to get row 2 you can do'], ['-10000']], [[' SELECT TOP 1 ID \nFROM \n    (SELECT TOP 2 id \n     FROM Comics \n     ORDER BY ID DESC) \nORDER BY ID ASC\n']], ['Obtain value preceding maximum value'], 3], [(2256447, 0), [['IF you are using  EXISTS  Oracle I recommend using  null :'], ['The following will be the one with lower cost on Oracle:']], [[' select null \n  from dual where exists (select null from job_queue);\n']], ['Best way to write a named SQL query that returns if row exists?'], 3], [(2256447, 1), [['The following will be the one with lower cost on Oracle:'], ['Update:  To include the case when there are no rows on table you can run the following query:']], [[' select null\n  from job_queue\n where rownum = 1;\n']], ['Best way to write a named SQL query that returns if row exists?'], 3], [(2256447, 2), [['Update:  To include the case when there are no rows on table you can run the following query:'], ['With this query you have a optimum plan and only two possible results:  1  if there are rows and  0  if there are no rows.']], [[' select count(*)\n  from (select null\n          from job_queue\n          where rownum = 1);\n']], ['Best way to write a named SQL query that returns if row exists?'], 3], [(2257846, 0), [['You should leave ID as the primary key, and then can create a unique constraint for the tag1 and tag2:'], ['Some sample data:']], [[' ALTER TABLE my_table ADD CONSTRAINT uc_tags UNIQUE (tag1, tag2)\n']], ['Help with Primary keys and unique constraints'], 2], [(2257846, 1), [['Some sample data:'], ['-10000']], [[' Table: messages\n\nmessage_id   |   title\n-------------+------------------\n1            |   some message\n2            |   another message\n\n\nTable: tags\n\ntag_id       |   tags\n-------------+-------------------\n1            |   cat\n2            |   dog\n3            |   duck\n4            |   horse\n\n\nTable: messages_tags\n\nmessage_id   |   tag_id\n-------------+-------------------\n1            |   1\n1            |   2\n2            |   3\n2            |   4\n2            |   1\n']], ['Help with Primary keys and unique constraints'], 2], [(2257904, 0), [['What I would suggest, is to try and do a million single row deletes. I think that if you do all those in a single transaction, performance should not hurt too much. so you would get something like:'], ['You can generate the required statments by doing something like']], [[' START TRANSACTION;\n\nDELETE FROM tab WHERE id = 1;\n..\n..\nDELETE FROM tab WHERE id = x;\n\nCOMMIT;\n']], ['Deleting from table with millions of records'], 3], [(2257904, 1), [['You can generate the required statments by doing something like'], ['So the advantage over this method instead of doing:']], [[" SELECT CONCAT('DELETE FROM tab WHERE id = ', id)\nFROM   tab\nWHERE  <some intricate condition that selects the set you want to delete>\n"]], ['Deleting from table with millions of records'], 3], [(2257904, 2), [['So the advantage over this method instead of doing:'], ["is that in the first approach you only ever lock the record you're deleting, whereas in the second approach you could run the risk of locking other records that happen to be in the same range as the rows you are deleteing."]], [[' DELETE FROM tab \nWHERE  <some intricate condition that selects the set you want to delete>\n']], ['Deleting from table with millions of records'], 3], [(2260988, 0), [['CASE  is a possibility. But shorter to write would be  IF()  (at least with MySQL):'], ['Update : \nAgain at least for MySQL, I discovered, that the following is sufficient if you only want to get either  1  or  0  as result:']], [[' SELECT *, IF(COND2, 1, 0) AS cond2, IF(COND3, 1, 0) as cond3 ... \n']], ['SQL: Mark which WHERE condition matched'], 4], [(2260988, 1), [['Update : \nAgain at least for MySQL, I discovered, that the following is sufficient if you only want to get either  1  or  0  as result:'], ["and with respect to Mark's answer, you can avoid writing the conditions twice, if you use  HAVING  instead of  WHERE  ( HAVING  as access to aliases):"]], [[' SELECT *, COND2 AS cond2, COND3 as cond3 ...\n']], ['SQL: Mark which WHERE condition matched'], 4], [(2260988, 2), [["and with respect to Mark's answer, you can avoid writing the conditions twice, if you use  HAVING  instead of  WHERE  ( HAVING  as access to aliases):"], ['Well it changes not that much: you only have to check conditions that are connected via  OR  in your updated version it would be sufficient to check whether  COND2  is true or not. If so, then  COND3  is also true and vice versa.']], [[' SELECT *, COND2 AS cond2, COND3 as cond3\nFROM table\nHAVING COND1 AND (cond2 OR cond3)\n']], ['SQL: Mark which WHERE condition matched'], 4], [(2260988, 3), [['Well it changes not that much: you only have to check conditions that are connected via  OR  in your updated version it would be sufficient to check whether  COND2  is true or not. If so, then  COND3  is also true and vice versa.'], ['I think the point is clear.']], [[' SELECT *, COND1 AS cond1, COND2 as cond2, COND4 as cond4\nFROM table\nHAVING cond1 OR (cond2 AND COND3) OR cond4\n']], ['SQL: Mark which WHERE condition matched'], 4], [(2265457, 0), [['give this a try:'], ['OUTPUT:']], [[" DECLARE @TableA table (A int null)\nDECLARE @TableB table (B int null)\n\ninsert into @TableA (A) values (1)\ninsert into @TableB (B) values (2)\n\n--this assumes that you don't have a Numbers table, and generates one on the fly with up to 500 rows, you can increase or decrease as necessary, or just join in your Numbers table instead\n;WITH Digits AS\n( \n    SELECT 0 AS nbr\n    UNION SELECT 1 UNION SELECT 2 UNION SELECT 3\n    UNION SELECT 4 UNION SELECT 5 UNION SELECT 6\n    UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 \n)\n, AllNumbers AS\n(\n    SELECT u3.nbr * 100 + u2.nbr * 10 + u1.nbr + 1 AS Number\n        FROM Digits u1, Digits u2, Digits u3 \n        WHERE u3.nbr * 100 + u2.nbr * 10 + u1.nbr + 1 <= 500\n)\n, AllRowsA AS\n(\n  SELECT\n      A, ROW_NUMBER() OVER (ORDER BY A) AS RowNumber\n  FROM @TableA\n)\n, AllRowsB AS\n(\n  SELECT\n      B, ROW_NUMBER() OVER (ORDER BY B) AS RowNumber\n  FROM @TableB\n)\nSELECT\n    a.A,b.B\n    FROM AllNumbers               n\n        LEFT OUTER JOIN AllRowsA  a on n.Number=a.RowNumber\n        LEFT OUTER JOIN AllRowsB  b on n.Number=b.RowNumber\n    WHERE a.A IS NOT NULL OR b.B IS NOT NULL\n"]], ['Problem combining result of two different queries into one'], 3], [(2265457, 1), [['OUTPUT:'], ['if you  DELETE @TableB , the output is:']], [[' A           B\n----------- -----------\n1           2\n\n(1 row(s) affected)\n']], ['Problem combining result of two different queries into one'], 3], [(2265457, 2), [['if you  DELETE @TableB , the output is:'], ['-10000']], [[' A           B\n----------- -----------\n1           NULL\n\n(1 row(s) affected)\n']], ['Problem combining result of two different queries into one'], 3], [(2266171, 0), [['I hate answering my own questions, but I had some simple thought:'], ['This will additionally allow you to make the following lookup work:']], [[' public void setUp() throws Exception {\n  OracleDataSource ds = new OracleDataSource();\n  ds.setServerName("localhost");\n  ds.setPortName(1521);\n  ds.setDatabaseName("database"); // SID\n  ds.setUser("user");\n  ds.setPassword("pass");\n\n  InitialContext ic = new InitialContext();\n  ic.add("noTxDatasource", ds);\n}\n']], ['EJB3Unit testing no-tx-datasource'], 2], [(2266171, 1), [['This will additionally allow you to make the following lookup work:'], ['delivering a datasource (in this case oracle).']], [[' Object object = InitialContext.doLookup("java:/noTxDatasource");\n']], ['EJB3Unit testing no-tx-datasource'], 2], [(2268787, 0), [['It could look like this:'], ['If you need the points of an article, you get it by']], [[' article_votes\n--------------\nuser_id\narticle_id\nvote\n']], ['how to make mysql structure of up,down rating'], 2], [(2268787, 1), [['If you need the points of an article, you get it by'], ['-10000']], [[' SELECT SUM( vote )\nFROM article_votes\nWHERE article_id = <your_article_id> \n']], ['how to make mysql structure of up,down rating'], 2], [(2269156, 0), [['-10000'], ['and']], [[" SELECT  'Y'\nFROM    CRAFT MA\nJOIN    CONFIG MAC\nON      MAC.ACT_AC_TYPE = MA.ACT_AC_TYPE\n        AND MAC.MAC_ID = MA.MAC_ID_PRI\n        AND MA.AB_BASE_ID_LAUNCH = MCI.AB_BASE_ID\nLEFT JOIN\n        ARMS SM\nON      SM.MS_INVENTORY_NUMBER = MCI.MS_INVENTORY_NUMBER\nWHERE   SM.ACT_AC_TYPE = MAC.ACT_AC_TYPE\n        AND SM.MAC_ID = MAC.MAC_ID AND \n"]], ['Converting from Oracle Join to Postgres Join'], 2], [(2269156, 1), [['and'], ["I left the  LEFT JOIN  as it was in the original query, but it's redundant here due to the  WHERE  condition."]], [[' SELECT ASP.ASP_SPACE_NM,\n       SUM(MO.MO_TKR_TOTAL_OFF_SCHEDULED) AS "TOTAL_PLANNED"\nFROM   SPACE ASP\nLEFT JOIN\n       MISSION_OBJECTIVE MO\nON     MO.ASP_SPACE_NM = ASP.ASP_SPACE_NM\nWHERE  MO.MO_MSN_CLASS_NM = \'TOP\'\nGROUP BY\n       ASP.ASP_SPACE_NM\n']], ['Converting from Oracle Join to Postgres Join'], 2], [(2269364, 0), [['I think you may get away with'], ['Tested with:']], [[' select alias, upper(alias), count(*) cnt_alias\nfrom svcs m\nwhere upper(alias) in\n    (select upper(alias) up_a\n    from svcs\n    group by upper(alias)\n    having count(distinct alias) > 1) \ngroup by alias\norder by upper(alias), count(*) desc, alias;\n']], ['Vanilla SQL with correlated subquery works in T-SQL, fails in PL/SQL'], 2], [(2269364, 1), [['Tested with:'], ['-10000']], [[" create table svcs (id number, alias varchar2(10));\n\ninsert into svcs select level, 'phrase' from dual connect by level <= 25;\ninsert into svcs select level, 'Phrase' from dual connect by level <= 3;\ninsert into svcs select level, 'Two words' from dual connect by level <= 12;\ninsert into svcs select level, 'Two Words' from dual connect by level <= 9;\ninsert into svcs select level, 'TWO words' from dual connect by level <= 3;\ninsert into svcs select level, 'TWO WORDS' from dual connect by level <= 121;\ninsert into svcs select level, 'Only' from dual connect by level <= 121;\n"]], ['Vanilla SQL with correlated subquery works in T-SQL, fails in PL/SQL'], 2], [(2270983, 0), [['You could use a UNION ALL'], ['If my assumption is correct that CfgIzmeritel and CfgIzmerPoint are one to one you could try this using']], [[' SELECT A.ID_ListGroupParIzm, A.Name \nFROM    CfgListGroupParIzm A, \n        CfgIzmeritel B  \nWHERE   A.ID_TypeIzmerit = B.ID_TypeIzmerit  \nAND     B.ID_Izmerit=@ID_Izmerit \nAND     A.ForRun=0 \nUNION ALL\nSELECT  A.ID_ListGroupParIzm, \n        (C.Name + A.Name) AS Name \nFROM    CfgListGroupParIzm A, CfgIzmeritel B, CfgIzmerPoint C  \nWHERE   A.ID_TypeIzmerit = B.ID_TypeIzmerit  \nAND     B.ID_Izmerit=@ID_Izmerit AND A.ForRun=1 \nAND     C.ID_Izmerit=@ID_Izmerit \n']], ['Select groups. Case ForRun?'], 2], [(2270983, 1), [['If my assumption is correct that CfgIzmeritel and CfgIzmerPoint are one to one you could try this using'], ['From the where clause you should be able to ignore the ForRun, as this will only be used in the CASE statement.']], [[' SELECT  grp.ID_ListGroupParIzm,\n    CASE \n        WHEN ForRun=1 AND pnt.ID_TypeIzmerit IS NOT NULL THEN (C.Name + A.Name) \n        ELSE grp.Name\n    END AS Name\nFROM    CfgListGroupParIzm grp INNER JOIN\n        CfgIzmeritel item ON grp.ID_TypeIzmerit = item.ID_TypeIzmerit LEFT JOIN\n        CfgIzmerPoint pnt ON grp.ID_TypeIzmerit = pnt.ID_TypeIzmerit\nWHERE   item.ID_Izmerit=@ID_Izmerit\n']], ['Select groups. Case ForRun?'], 2], [(2272321, 0), [['If you have a composite index on columns (col0, col1, col2), this index will benefit queries that do:'], ['but it will not be used for a query that does:']], [[' select * from tablex where col0 = a\nselect * from tablex where col0 = a and col1 = b\nselect * from tablex where col0 = a and col1 = b and col2 = c\n']], ['Update an SQL table with its own rows with PostgreSQL'], 2], [(2272321, 1), [['but it will not be used for a query that does:'], ['So it would be redundant (and probably performance impeding) to create indexes on (col0), (col0, col1), and (col0, col1, col2).']], [[' select * from tablex where col1=b and col2=c\n']], ['Update an SQL table with its own rows with PostgreSQL'], 2], [(2272649, 0), [['-10000'], ['However, if you only want to process asterisk wildcards, you may use this syntax:']], [[" SELECT  *\nFROM    mytable\nWHERE   'foo.bar.baz' RLIKE match\n"]], ['Match text against wildcard expressions in database?'], 2], [(2272649, 1), [['However, if you only want to process asterisk wildcards, you may use this syntax:'], ['-10000']], [[" SELECT  *\nFROM    mytable\nWHERE   'foo.bar.baz' LIKE REPLACE(REPLACE(REPLACE(REPLACE('\\\\', '\\\\\\\\'), '.', '\\\\.'), '%', '\\\\%'), '*', '%') ESCAPE '\\\\'\n"]], ['Match text against wildcard expressions in database?'], 2], [(2273815, 0), [['Developers-turned-DBAs often naïvely write it row-by-row, like this:'], ['One very minor (and I emphasize minor) optimization is to just attempt the  UPDATE  anyway; if the row doesn\'t exist,  @@ROWCOUNT  will be 0 and you can then "safely" insert:']], [[' -- For each row in source\nIF EXISTS(<target_expression>)\n    IF @delete_flag = 1\n        DELETE <target_expression>\n    ELSE\n        UPDATE target\n        SET <target_columns> = <source_values>\n        WHERE <target_expression>\nELSE\n    INSERT target (<target_columns>)\n    VALUES (<source_values>)\n']], ['IF EXISTS before INSERT, UPDATE, DELETE for optimization'], 4], [(2273815, 1), [['One very minor (and I emphasize minor) optimization is to just attempt the  UPDATE  anyway; if the row doesn\'t exist,  @@ROWCOUNT  will be 0 and you can then "safely" insert:'], ['Before SQL Server 2008, you had to use an awkward 3-stage model to deal with this at the set level (still better than row-by-row):']], [[' -- For each row in source\nBEGIN TRAN\n\nUPDATE target\nSET <target_columns> = <source_values>\nWHERE <target_expression>\n\nIF (@@ROWCOUNT = 0)\n    INSERT target (<target_columns>)\n    VALUES (<source_values>)\n\nCOMMIT\n']], ['IF EXISTS before INSERT, UPDATE, DELETE for optimization'], 4], [(2273815, 2), [['Before SQL Server 2008, you had to use an awkward 3-stage model to deal with this at the set level (still better than row-by-row):'], ['As I said, performance was pretty lousy on this, but still a lot better than the one-row-at-a-time approach.  SQL Server 2008, however, finally introduced  MERGE  syntax, so now all you have to do is this:']], [[' BEGIN TRAN\n\nINSERT target (<target_columns>)\nSELECT <source_columns> FROM source s\nWHERE s.id NOT IN (SELECT id FROM target)\n\nUPDATE t SET <target_columns> = <source_columns>\nFROM target t\nINNER JOIN source s ON t.d = s.id\n\nDELETE t\nFROM target t\nWHERE t.id NOT IN (SELECT id FROM source)\n\nCOMMIT\n']], ['IF EXISTS before INSERT, UPDATE, DELETE for optimization'], 4], [(2273815, 3), [['As I said, performance was pretty lousy on this, but still a lot better than the one-row-at-a-time approach.  SQL Server 2008, however, finally introduced  MERGE  syntax, so now all you have to do is this:'], ["That's it.  One statement.  If you're using SQL Server 2008 and need to perform any sequence of  INSERT ,  UPDATE  and  DELETE  depending on whether or not the row already exists -  even if it's just one row  - there is  no  excuse not to be using  MERGE ."]], [[' MERGE target\nUSING source ON target.id = source.id\nWHEN MATCHED THEN UPDATE <target_columns> = <source_columns>\nWHEN NOT MATCHED THEN INSERT (<target_columns>) VALUES (<source_columns>)\nWHEN NOT MATCHED BY SOURCE THEN DELETE;\n']], ['IF EXISTS before INSERT, UPDATE, DELETE for optimization'], 4], [(2274381, 0), [['From Oracle 10G on there is an alternative to doubling up the single quotes:'], ['I used a double-quote character ("), but you can specify a different one e.g.:']], [[' insert into mytable (mycol) values (q\'"select * from table where col = \'col\'"\');\n']], ['How can I store sql statements in an oracle table?'], 4], [(2274381, 1), [['I used a double-quote character ("), but you can specify a different one e.g.:'], ['The syntax of the literal is:']], [[" insert into mytable (mycol) values (q'@select * from table where col = 'col'@');\n"]], ['How can I store sql statements in an oracle table?'], 4], [(2274381, 2), [['The syntax of the literal is:'], ["It isn't obviously more readable in a small example like this, but it pays off with large quantities of text e.g."]], [[" q'<special character><your string><special character>'\n"]], ['How can I store sql statements in an oracle table?'], 4], [(2274381, 3), [["It isn't obviously more readable in a small example like this, but it pays off with large quantities of text e.g."], ['-10000']], [[' insert into mytable (mycol) values (\n   q\'"select empno, ename, \'Hello\' message\n   from emp\n   where job = \'Manager\'\n   and name like \'K%\'"\'\n);\n']], ['How can I store sql statements in an oracle table?'], 4], [(2275212, 0), [['This may not be your solution, but you can divide this into two queries and try this (I assume this is first operation on LKCATEGORY in context):'], ['Alternative way:']], [[' var categories = context.LKCATEGORY.Where(c => c.ACTIVE).ToList();\nvar subcategories = context.LKSUBCATEGORY.Where(c => c.ACTIVE).ToList();\nreturn categories;\n']], ['Entity framework Querying'], 2], [(2275212, 1), [['Alternative way:'], ['-10000']], [[' context.LKCATEGORY.Where(c => c.ACTIVE).Select(c => new { Category = c, Subcategory = c.LKSUBCATEGORY.Where(sc => sc.ACTIVE) }).ToList().Select(a => a.Category);\n']], ['Entity framework Querying'], 2], [(2276701, 0), [["The most flexible way to write this, which doesn't require a correlated subquery, is to use  ROW_NUMBER  (SQL Server 2005+ only):"], ["If you're running SQL 2000, or this isn't efficient enough, you can try a  MIN  or  MAX  query:"]], [[' ;WITH Names_CTE AS\n(\n    SELECT\n        ID, RefNumber, Forename, Surname,\n        ROW_NUMBER() OVER (PARTITION BY RefNumber ORDER BY ID) AS RowNum\n    FROM Names\n)\nSELECT o.RefNumber, o.Charge, o.IssueDate, n.Forename, n.Surname\nFROM Orders o\n[INNER|LEFT] JOIN Names_CTE n\n    ON n.RefNumber = o.RefNumber\nWHERE n.RowNum = 1\n']], ['Limiting Results on Join Query'], 2], [(2276701, 1), [["If you're running SQL 2000, or this isn't efficient enough, you can try a  MIN  or  MAX  query:"], ['Sometimes this is actually faster, it depends a lot on the indexing strategy used.']], [[' SELECT o.RefNumber, o.Charge, o.IssueDate, n.Forename, n.Surname\nFROM Orders o\n[INNER|LEFT] JOIN\n(\n    SELECT RefNumber, MIN(ID) AS MinID\n    FROM Names\n    GROUP BY RefNumber\n) m\n    ON m.RefNumber = o.RefNumber\n[INNER|LEFT] JOIN Names n\n    ON n.ID = m.MinID\n']], ['Limiting Results on Join Query'], 2], [(2276731, 0), [["Here's my version:"], ["Note that this will ignore products that had zero sales from the start; there has to be a non-zero week to anchor it.  If you want to include products that had no sales since the beginning, then add the following line after `WHERE s1.Sales > 0':"]], [[' DECLARE @NumWeeks int\nSET @NumWeeks = 26\n\nSELECT s1.ProdID, s1.WeekEnd, COUNT(*) AS ZeroCount\nFROM Sales s1\nINNER JOIN Sales s2\n    ON s2.ProdID = s1.ProdID\n    AND s2.WeekEnd >= s1.WeekEnd\n    AND s2.WeekEnd <= DATEADD(WEEK, @NumWeeks + 1, s1.WeekEnd)\nWHERE s1.Sales > 0\nGROUP BY s1.ProdID, s1.WeekEnd\nHAVING COUNT(*) >= @NumWeeks\n']], ['SQL query to identify seasonal sales items'], 2], [(2276731, 1), [["Note that this will ignore products that had zero sales from the start; there has to be a non-zero week to anchor it.  If you want to include products that had no sales since the beginning, then add the following line after `WHERE s1.Sales > 0':"], ['This will slow the query down a lot but guarantees that the first week of "recorded" sales will always be taken into account.']], [[' OR s1.WeekEnd = (SELECT MIN(WeekEnd) FROM Sales WHERE ProdID = s1.ProdID)\n']], ['SQL query to identify seasonal sales items'], 2], [(2277285, 0), [["I've also seen the term used to refer to outer joins.  For example, this query:"], ['Might give you the following results:']], [[' SELECT A.id, A.name AS NameA, B.name AS NameB\nFROM A\nLEFT JOIN B\nON B.id = A.id\n']], ['What does null extended mean in relational queries?'], 3], [(2277285, 1), [['Might give you the following results:'], ["...doesn't really make sense when taken out of context.  You have to look at the whole thing:"]], [['   id  |   NameA   |   NameB\n------+-----------+-----------\n  10  |   John    |   Smith\n  11  |   Jane    |   Doe\n  12  |   Bob     |   NULL\n']], ['What does null extended mean in relational queries?'], 3], [(2277285, 2), [["...doesn't really make sense when taken out of context.  You have to look at the whole thing:"], ['And a little bit later:']], [[' SQ = SELECT DISTINCT Sc FROM S WHERE Sa < 20;\nM1 = SELECT Ra, Rb, Rc FROM R WHERE Rb < 100;\nM2 = SELECT Ra, Rb, Rc, Sc\n    FROM M1 LEFT OUTER JOIN SQ ON Rc == Sc;\nQ = SELECT Ra, Rb FROM M2\nWHERE Ra > 5 OR Rc != Sc;\n']], ['What does null extended mean in relational queries?'], 3], [(2277468, 0), [['If you want all the rows when there are multiple rows with the same maximum value, then you can use this query:'], ['Including your condition:']], [[' SELECT * FROM Table1\nWHERE stu1Vers + stu2Vers = (SELECT MAX(stu1Vers + stu2Vers) FROM Table1)\n']], ['Selecting max of a sum of two columns'], 3], [(2277468, 1), [['Including your condition:'], ['Result:']], [[' SELECT * FROM Table1\nWHERE stu1Vers + stu2Vers = (\n    SELECT MAX(stu1Vers + stu2Vers)\n    FROM Table1\n    WHERE stu1!=stu2 and assignmentid=9\n) AND stu1!=stu2 and assignmentid=9\n']], ['Selecting max of a sum of two columns'], 3], [(2277468, 2), [['Result:'], ["Regarding your update to the question, I'm not sure what you mean to return all the rows grouped by stu1 and stu2. Perhaps you mean ordered by these columns? If so, add  ORDER BY stu1, stu2  to the query."]], [[' 392, 19, 2, 1, 6\n']], ['Selecting max of a sum of two columns'], 3], [(2280939, 0), [["For table 3's foreign key, change:"], ['to']], [[' foreign key PrimaryType references Table1(PrimaryType)\nforeign key SubType references Table2(Subtype)\n']], ["Adding foreign key constraint to 'partial' primary key in PostgreSQL"], 2], [(2280939, 1), [['to'], ['-10000']], [[' foreign key (PrimaryType, SubType) references Table2(PrimaryType, SubTYpe)\n']], ["Adding foreign key constraint to 'partial' primary key in PostgreSQL"], 2], [(2281551, 0), [['-10000'], ['or']], [[' SELECT  post.id, post.title, comment.id, comment.message\nFROM    post\nOUTER APPLY\n        (\n        SELECT  TOP 1 *\n        FROM    comment с\n        WHERE   c.post_id = post.id\n        ORDER BY\n                date DESC\n        ) comment\n']], ['TSQL left join and only last row from right'], 2], [(2281551, 1), [['or'], ['The former is more efficient for few posts with many comments in each; the latter is more efficient for many posts with few comments in each.']], [[' SELECT  *\nFROM    (\n        SELECT  post.id, post.title, comment.id, comment.message,\n                ROW_NUMBER() OVER (PARTITION BY post.id ORDER BY comment.date DESC) AS rn\n        FROM    post\n        LEFT JOIN\n                comment\n        ON      comment.post_id = post.id\n        ) q\nWHERE   rn = 1\n']], ['TSQL left join and only last row from right'], 2], [(2283100, 0), [["I don't think I understand all aspects of your query, but it should basically work like this:"], ['BTW: You might want to switch to explicit join notation for better readablity (especially with more complex queries):']], [[" SELECT\n   COUNT(*) as Quantity,\n   SUM(CASE WHEN itemInstance.availability = 'AVAILABLE'\n            THEN 1\n            ELSE 0\n            END) As Available\nFROM itemInstance, itemType\nWHERE itemInstance.type = itemType.primary_key\n"]], ['Combine rows of SQL Union query'], 2], [(2283100, 1), [['BTW: You might want to switch to explicit join notation for better readablity (especially with more complex queries):'], ['-10000']], [[' ...\nFROM itemInstance\nJOIN itemType ON ( itemInstance.type = itemType.primary_key )\n']], ['Combine rows of SQL Union query'], 2], [(2283281, 0), [['Try this:'], ['Results:']], [[' SELECT\n    T1.lastname,\n    T1.firstname,\n    T1.id in (SELECT owner_id FROM cars WHERE usable_offroad) AS `Has Offroad Car`,\n    T1.id in (SELECT owner_id FROM cars WHERE usable_onroad) AS `Has Onroad Car`\nFROM owners T1\nORDER BY T1.lastname, T1.firstname\n']], ['MySQL - Getting summary of multiple grouped rows?'], 3], [(2283281, 1), [['Results:'], ["Here's my test data:"]], [[" 'Smith', 'Todd', 1, 0\n'Smith', 'Tom', 1, 1\n'Test', 'Sue', 0, 1\n'Thumb', 'Joe', 0, 0\n'White', 'Al', 1, 0\n"]], ['MySQL - Getting summary of multiple grouped rows?'], 3], [(2283281, 2), [["Here's my test data:"], ['-10000']], [[" CREATE TABLE owners (id INT NOT NULL, firstname NVARCHAR(100) NOT NULL, lastname NVARCHAR(100) NOT NULL);\nINSERT INTO owners (id, firstname, lastname) VALUES\n(1, 'Todd', 'Smith'),\n(2, 'Tom', 'Smith'),\n(3, 'Sue', 'Test'),\n(4, 'Joe', 'Thumb'),\n(5, 'Al', 'White');\n\nCREATE TABLE cars (id INT NOT NULL, owner_id INT NOT NULL, usable_onroad INT NOT NULL, usable_offroad INT NOT NULL);\nINSERT INTO cars (id, owner_id, usable_offroad, usable_onroad) VALUES\n(1, 1, 1, 0),\n(2, 2, 1, 0),\n(3, 2, 0, 1),\n(4, 3, 0, 1),\n(5, 3, 0, 1),\n(6, 5, 1, 0);\n"]], ['MySQL - Getting summary of multiple grouped rows?'], 3], [(2289907, 0), [['Here you can use a trick that boolean expressions evaluate to either 0 or 1 in SQL:'], ['A more general (and more conventional) way is to use a CASE expression:']], [[' SELECT a2 + a8 + a7 * (a1 BETWEEN 0 AND 2) AS SUM\nFROM table_name\n']], ['Computing different sums depending on the value of one column'], 3], [(2289907, 1), [['A more general (and more conventional) way is to use a CASE expression:'], ['You can also do something like this to include a CASE expression without repeating the common terms:']], [[' SELECT\n    CASE WHEN a1 BETWEEN 0 AND 2\n         THEN a2 + a7 + a8\n         ELSE a2 + a8\n    END AS SUM\nFROM table_name\n']], ['Computing different sums depending on the value of one column'], 3], [(2289907, 2), [['You can also do something like this to include a CASE expression without repeating the common terms:'], ['-10000']], [[' SELECT\n    a2 + a8 + (CASE WHEN a1 BETWEEN 0 AND 2 THEN a7 ELSE 0 END) AS SUM\nFROM table_name\n']], ['Computing different sums depending on the value of one column'], 3], [(2290331, 0), [["This means that you'll either need to aggregate all corresponding records from  t_large  (how?), or select a single record out of many (which?)."], ['or']], [[' SELECT  s.*, SUM(l.value)\nFROM    t_small s\nLEFT JOIN\n        t_large l\nON      s.id = l.small\n']], ['How do I join a one-to-many table with results only appended to the smaller table?'], 3], [(2290331, 1), [['or'], ['Now, imagine this table layout:']], [[' SELECT  s.*, l.*\nFROM    t_small s\nLEFT JOIN\n        t_large l\nON      l.id = \n        (\n        SELECT  MIN(id)\n        FROM    t_large li\n        WHERE   li.small = s.id\n        )\n']], ['How do I join a one-to-many table with results only appended to the smaller table?'], 3], [(2290331, 2), [['Now, imagine this table layout:'], ["Could you please post the resultset which you'd like to see as a result of the query?"]], [[' t_small\n\nid     value\n--     --\n1      Small 1\n2      Small 2\n\n\nt_large\n\nid     small_id  value\n--     --        --\n1      1         1\n2      1         4\n3      2         9\n4      2         16\n']], ['How do I join a one-to-many table with results only appended to the smaller table?'], 3], [(2290668, 0), [["You don't need a parameter to the method:"], ['To restrict to the budget for a particular year:']], [[' SQL> create or replace type budget as object (\n  2      year number,\n  3      amount number,\n  4      member function left_over return number\n  5  )\n  6  /\n\nType created.\n\nSQL> create or replace type body budget as\n  2      member function left_over return number is\n  3      begin\n  4          return amount;\n  5      end left_over;\n  6  end;\n  7  /\n\nType body created.\n\nSQL> create table budget_table of budget;\n\nTable created.\n\nSQL> insert into budget_table values (budget(2010,99));\n\n1 row created.\n\nSQL> commit;\n\nCommit complete.\n\nSQL> select b.left_over() from budget_table b;\n\nB.LEFT_OVER()\n-------------\n           99\n']], ['Calling member function in oracle 11g'], 2], [(2290668, 1), [['To restrict to the budget for a particular year:'], ['-10000']], [[' SQL> insert into budget_table values (budget(2010,99));\n\n1 row created.\nSQL> select b.left_over() from budget_table b;\n\nB.LEFT_OVER()\n-------------\n           88\n           99\n\nSQL> select b.left_over() from budget_table b\n  2  where b.year = 2010;\n\nB.LEFT_OVER()\n-------------\n           99\n']], ['Calling member function in oracle 11g'], 2], [(2290755, 0), [['Create the following indexes:'], ['If  id  is a  CLUSTERED PRIMARY KEY  in the corresponding tables, you can omit it from the index, since it will be implicitly included there anyway:']], [[' CREATE INDEX ix_tbl1_1_id ON tbl1 (col1, id)\nCREATE INDEX ix_tbl2_2_3_id ON tbl2 (col2, col3, id)\n']], ['Left Join and Where Clause'], 2], [(2290755, 1), [['If  id  is a  CLUSTERED PRIMARY KEY  in the corresponding tables, you can omit it from the index, since it will be implicitly included there anyway:'], ['-10000']], [[' CREATE INDEX ix_tbl1_1 ON tbl1 (col1)\nCREATE INDEX ix_tbl2_2_3 ON tbl2 (col2, col3)\n']], ['Left Join and Where Clause'], 2], [(2291238, 0), [["I wasn't able to get the answer I was looking for here so I posted the question on the Oracle forums. The answer I got was exactly what I was looking for.  The following query gets the answer with only one pass through the table and without any joins..."], ['Incase anyone would like to test it, here is some sample data.  ']], [[' \n  SELECT   pid,\n           MAX(CASE\n                  WHEN value_date > TRUNC (SYSDATE) - 6 THEN my_value\n                  ELSE 0\n               END)\n              max_7_days,\n           MAX(value_date)\n              KEEP (DENSE_RANK FIRST ORDER BY\n                                        (CASE\n                                            WHEN value_date >\n                                                    TRUNC (SYSDATE) - 6\n                                            THEN\n                                               my_value\n                                            ELSE\n                                               0\n                                         END) DESC)\n              day_7_days,\n           MAX(CASE\n                  WHEN value_date > TRUNC (SYSDATE) - 29 THEN my_value\n                  ELSE 0\n               END)\n              max_30_days,\n           MAX(value_date)\n              KEEP (DENSE_RANK FIRST ORDER BY\n                                        CASE\n                                           WHEN value_date >\n                                                   TRUNC (SYSDATE) - 29\n                                           THEN\n                                              my_value\n                                           ELSE\n                                              0\n                                        END DESC)\n              day_30_days\n    FROM   my_table\nGROUP BY   pid;\n']], ['tricky Oracle analytic function question'], 2], [(2291238, 1), [['Incase anyone would like to test it, here is some sample data.  '], ['Thank you all for your efforts in answering this question!']], [[" \nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,    300, '18-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,    200, '17-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,   4500, '16-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,    800, '15-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  12000, '14-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  21000, '13-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,   5600, '12-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  18400, '11-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,   7200, '10-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  24000, '09-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,   8800, '08-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,   6000, '07-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  44200, '06-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,   2800, '05-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  58500, '04-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,   8000, '03-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  30600, '02-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,   7200, '01-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  62700, '31-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  48000, '30-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  16800, '29-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  83600, '28-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  18400, '27-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  16800, '26-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  40000, '25-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  23400, '24-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  99900, '23-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  67200, '22-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,   5800, '21-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  57000, '20-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  96100, '19-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  64000, '18-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  52800, '17-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  71400, '16-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  14000, '15-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,   7200, '14-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1, 111000, '13-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  64600, '12-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1, 113100, '11-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (1,  84000, '10-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,   6000, '18-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,   7800, '17-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,  13500, '16-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,  25600, '15-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 276000, '14-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 210000, '13-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 162400, '12-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,  36800, '11-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,  86400, '10-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 480000, '09-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,   8800, '08-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 102000, '07-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,1237600, '06-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,  61600, '05-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,1287000, '04-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 144000, '03-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 275400, '02-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,  93600, '01-FEB-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,1630200, '31-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,1248000, '30-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 235200, '29-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,3176800, '28-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,  73600, '27-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 403200, '26-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 200000, '25-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 280800, '24-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 599400, '23-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,1612800, '22-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 110200, '21-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,1653000, '20-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,2498600, '19-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,2368000, '18-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 211200, '17-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,2570400, '16-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 224000, '15-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 223200, '14-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2, 999000, '13-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,2325600, '12-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,1017900, '11-JAN-10');\nINSERT INTO my_table (pid, my_value, value_date) VALUES (2,2352000, '10-JAN-10');\n"]], ['tricky Oracle analytic function question'], 2], [(2292167, 0), [['so try this..'], ['Option 1 - Explicit Fetchs']], [[' declare \n  CURSOR mytable_cur IS SELECT * FROM MY_TABLE WHERE SALARY < 50000 FOR UPDATE;\n\n  TYPE mytable_tt IS TABLE OF mytable_cur %ROWTYPE\n    INDEX BY PLS_INTEGER;\n\n  l_my_table_recs mytable_tt;\n  l_totalcount NUMBER;\nbegin\n\n   OPEN mytable_cur ;\n   l_totalcount := 0;\n\n   LOOP\n      FETCH mytable_cur \n      BULK COLLECT INTO l_my_table_recs LIMIT 100;\n\n      l_totalcount := l_totalcount + NVL(l_my_table_recs.COUNT,0);\n\n      --this is the check for only 1 row..\n      EXIT WHEN l_totalcount < 2;\n\n      FOR indx IN 1 .. l_my_table_recs.COUNT\n      LOOP\n         --process each record.. via l_my_table_recs (indx)\n\n      END LOOP;\n\n      EXIT WHEN mytable_cur%NOTFOUND;\n   END LOOP;\n\n   CLOSE mytable_cur ;\nend;\n']], ['How can I find the number of records in an Oracle PL/SQL cursor?'], 4], [(2292167, 1), [['Option 1 - Explicit Fetchs'], ['Option 2 - Exception Catching  ']], [[' declare \n  CURSOR C1 IS SELECT * FROM MY_TABLE WHERE SALARY < 50000 FOR UPDATE;\n  l_my_table_rec C1%rowtype;\n  l_my_table_rec2 C1%rowtype;\nbegin\n\n    open C1;\n    fetch c1 into l_my_table_rec;\n\n    if c1%NOTFOUND then\n       --no data found\n    end if;\n\n    fetch c1 into l_my_table_rec2;\n    if c1%FOUND THEN\n      --i have more then 1 row\n    end if;\n    close c1;\n\n  -- processing logic\n\nend;\n']], ['How can I find the number of records in an Oracle PL/SQL cursor?'], 4], [(2292167, 2), [['Option 2 - Exception Catching  '], ['Also, rememebr you can update the rows in the table with an']], [[' declare \n  CURSOR C1 IS SELECT * FROM MY_TABLE WHERE SALARY < 50000 FOR UPDATE;\n  l_my_table_rec C1%rowtype;\nbegin\n  begin\n    select * \n      from my_table\n      into l_my_table_rec\n     where salary < 50000\n       for update;\n  exception\n    when too_many_rows then\n      -- handle the exception where more than one row is returned\n    when no_data_found then\n      -- handle the exception where no rows are returned\n    when others then raise;\n  end;\n\n  -- processing logic\nend;\n']], ['How can I find the number of records in an Oracle PL/SQL cursor?'], 4], [(2292167, 3), [['Also, rememebr you can update the rows in the table with an'], ["type statement, but I that will only work if you haven't 'fetched' the 2nd row.."]], [[' UPDATE table_name\nSET set_clause\nWHERE CURRENT OF cursor_name;\n']], ['How can I find the number of records in an Oracle PL/SQL cursor?'], 4], [(2292706, 0), [['Look at the following working code built on SQL Server 2008'], ['try the following']], [[" DECLARE @MyTable TABLE\n(\n    ID int identity (1, 1),\n    Num int,\n    Quantity int,\n    Base varchar (1),\n    Code varchar (1)\n)\n\nINSERT INTO @MyTable VALUES \n  (1, 1, 'a', 'A')\n, (2, 2, 'b', 'B')\n, (3, 3, 'c', 'C')\n, (4, 4, 'd', 'D')\n, (5, 5, 'e', 'E')\n\nSELECT * FROM @MyTable\n\nSELECT \n    CASE WHEN Code = 'B' THEN Code+Base \n    ELSE Code+CONVERT (VarChar, Quantity) \n    END AS OutputValue\nFROM @MyTable\n"]], ['Sql Query With Select and IF'], 2], [(2292706, 1), [['try the following'], ['-10000']], [[" SELECT CASE WHEN Code = 'B' THEN Code+Base ELSE Code+Quantity END AS OutputValue\nFROM MyTable\nWHERE ID = @Id\nand Quantity = @Quantity\n"]], ['Sql Query With Select and IF'], 2], [(2293016, 0), [['For SQL*plus, you can use:'], ['or']], [[' @filename.sql\n']], ['How to load an external script file'], 2], [(2293016, 1), [['or'], ['Please realize that @ is a SQL*plus command - not a SQL or PL/SQL command. SO you cannot use this from inside a PL/SQL stored procedure - it would not make much sense either, as essential context like current working direcory is absent in that case.']], [[' @@filename.sql\n']], ['How to load an external script file'], 2], [(2294137, 0), [['There does not appear to be a xor operator for sqlite.  You can simulate it using:'], ['For example, when 1111 (15) is masked with 0100 (4):']], [[' select (~(a&b))&(a|b)\n']], ['SQLite, Exclusive Or. How do i clear a flag?'], 2], [(2294137, 1), [['For example, when 1111 (15) is masked with 0100 (4):'], ['the answer is 1011 (11).  In that way you can clear flags.']], [[' select (~(15&4))&(15|4)\n']], ['SQLite, Exclusive Or. How do i clear a flag?'], 2], [(2295946, 0), [['Try the following:'], ['Use  else  instead of the second  then , and use  end  at the end of the  case . \nYou might also have to use single quotes.']], [[' SELECT Name, MAX(Result) As Result\nFROM table_1\nGROUP BY Name\n']], ['Proper sql query in MySQL'], 2], [(2295946, 1), [['Use  else  instead of the second  then , and use  end  at the end of the  case . \nYou might also have to use single quotes.'], ['What do you expect to happen when the same name has different results?']], [[" select (case when Result = 'pass' then 'pass' then 'fail' end) as Final_verdict,\n       Name\nfrom table_1\n"]], ['Proper sql query in MySQL'], 2], [(2296423, 0), [['-10000'], ['If the friendship relationship is symmetric, you should make the following query:']], [[" SELECT  *\nFROM    (\n        SELECT  username\n        FROM    friends\n        START WITH\n                username = 'myname'\n        CONNECT BY\n                friendname = PRIOR username\n                AND level <= 3\n        )\nWHERE   username = 'friendname'\n        AND rownum = 1\n"]], ['Oracle SQL how to write a sql statement that verifies if user in my network( ie friends or friend of friends)'], 4], [(2296423, 1), [['If the friendship relationship is symmetric, you should make the following query:'], ['This query can be made much faster if you denormalize your table: store two records per friendship, like this:']], [[" WITH    q AS\n        (\n        SELECT  username, friendname\n        FROM    friends\n        UNION ALL\n        SELECT  friendname, username\n        FROM    friends\n        ),\n        f AS\n        (\n        SELECT  friendname, level\n        FROM    q\n        START WITH\n                username = 'Thomas'\n        CONNECT BY NOCYCLE\n                username = PRIOR friendname\n        )\nSELECT  *\nFROM    f\nWHERE   friendname = 'Jo'\n        AND rownum = 1\n"]], ['Oracle SQL how to write a sql statement that verifies if user in my network( ie friends or friend of friends)'], 4], [(2296423, 2), [['This query can be made much faster if you denormalize your table: store two records per friendship, like this:'], ['Then you can just replace the  CTE  above with the  dual_friends :']], [[' CREATE TABLE dual_friends (orestes NOT NULL, pylades NOT NULL, CONSTRAINT pk_dualfriends_op PRIMARY KEY (orestes, pylades)) ORGANIZATION INDEX\nAS\nSELECT  username, friendname\nFROM    friends\nUNION ALL\nSELECT  friendname, username\n        FROM    friends\n']], ['Oracle SQL how to write a sql statement that verifies if user in my network( ie friends or friend of friends)'], 4], [(2296423, 3), [['Then you can just replace the  CTE  above with the  dual_friends :'], [', which will use the index and be much more efficient, especially if you limit the level to some reasonable value.']], [[" WITH    f AS\n        (\n        SELECT  pylades, level\n        FROM    dual_friends\n        START WITH\n                orestes  = 'Thomas'\n        CONNECT BY NOCYCLE\n                orestes = PRIOR pylades\n                AND level <= 3\n        )\nSELECT  *\nFROM    f\nWHERE   pylades = 'Jo'\n        AND rownum = 1\n"]], ['Oracle SQL how to write a sql statement that verifies if user in my network( ie friends or friend of friends)'], 4], [(2297355, 0), [['1) Drop the existing clustered index first (IX_TableX_FieldB):'], ['2) Create a (temporary) UNIQUE constraint on the unique fields referenced in the primary key']], [['    DROP INDEX TableX.IX_TableX_FieldB\n']], ['Change a Primary Key from Nonclustered to Clustered'], 6], [(2297355, 1), [['2) Create a (temporary) UNIQUE constraint on the unique fields referenced in the primary key'], ['3) Drop the PRIMARY KEY']], [['     ALTER TABLE TableX\n    ADD CONSTRAINT UQ_TableX UNIQUE(FieldA)\n']], ['Change a Primary Key from Nonclustered to Clustered'], 6], [(2297355, 2), [['3) Drop the PRIMARY KEY'], ['4) Recreate the PRIMARY KEY as CLUSTERED']], [['     ALTER TABLE TableX\n    DROP CONSTRAINT PK_TableX\n']], ['Change a Primary Key from Nonclustered to Clustered'], 6], [(2297355, 3), [['4) Recreate the PRIMARY KEY as CLUSTERED'], ['5) Drop the temporary UNIQUE constraint']], [['    ALTER TABLE TableX\n   ADD CONSTRAINT PK_TableX PRIMARY KEY CLUSTERED(FieldA)\n']], ['Change a Primary Key from Nonclustered to Clustered'], 6], [(2297355, 4), [['5) Drop the temporary UNIQUE constraint'], ['6) Add the IX_TableX_FieldB back on as NONCLUSTERED']], [['    ALTER TABLE TableX\n   DROP CONSTRAINT UQ_TableX\n']], ['Change a Primary Key from Nonclustered to Clustered'], 6], [(2297355, 5), [['6) Add the IX_TableX_FieldB back on as NONCLUSTERED'], ['-10000']], [['    CREATE NONCLUSTERED INDEX IX_TableX_FieldB ON TableX(FieldB)\n']], ['Change a Primary Key from Nonclustered to Clustered'], 6], [(2297622, 0), [["I've ended up creating a rudimentary general-purpose framework for caching the results of a SQL function or view to a table. "], ['When the page loads I do this:']], [['     Public Sub CreateCacheTable(ByVal SourceView As String, ByVal FieldList As String)\n        Dim CacheTable As String = GetCacheTableName(SourceView)\n        If Not TableExists(CacheTable) Then\n            Dim Sql As String = " Select ~FieldList~ Into ~CacheTable~ From ~SourceView~ ". _\n                Replace("~CacheTable~", CacheTable). _\n                Replace("~FieldList~", FieldList). _\n                Replace("~SourceView~", SourceView)\n            ExecuteNonQuery(cs, CommandType.Text, Sql)\n        End If\n    End Sub\n\n    Public Function GetCacheTableName(ByVal SourceView As String)\n        Dim Result As String = "_c_~SourceView~". _\n            Replace("~SourceView~", SourceView). _\n            Replace(".", "_"). _\n            Replace(",", "_"). _\n            Replace("[", ""). _\n            Replace("]", ""). _\n            Replace("(", ""). _\n            Replace(")", "")\n        Return Result\n    End Function\n\n    Public Sub CleanupCacheTables()\n        ExecuteNonQuery(cs, CommandType.StoredProcedure, "CleanupCacheTables") \n    End Sub\n']], ['SQL caching strategy'], 3], [(2297622, 1), [['When the page loads I do this:'], ["Here's the SQL for  CleanupCacheTables :"]], [['         CleanupCacheTables()\n        CreateCacheTable(SourceView, FieldList)\n']], ['SQL caching strategy'], 3], [(2297622, 2), [["Here's the SQL for  CleanupCacheTables :"], ["This is crude: There's no invalidation, and it probably won't scale to a lot of concurrent users and/or very large datasets. Nevertheless, in my case it's resulted in near-instantaneous results as the user types or selects search criteria, with very little overhead. "]], [[" Create Procedure CleanupCacheTables as\n    /* Finds all tables starting with _c_ that were created more than 30 minutes ago and drops them */\n    Declare @TableName nvarchar(255)\n    Declare CacheTableCursor Cursor for\n        Select \n            TableName=name\n        From SYS.OBJECTS\n        Where Type_Desc = 'USER_TABLE'\n        And Left(name,3)=  '_c_'\n        And DateDiff(minute, create_date, GetDate())>30\n    Open CacheTableCursor\n    Fetch Next from CacheTableCursor into @TableName\n    While @@FETCH_STATUS = 0 Begin\n        Exec ('Drop Table ' + @TableName)\n        Fetch Next from CacheTableCursor into @TableName\n    End -- While\n    Close CacheTableCursor\n    Deallocate CacheTableCursor\nGo\n"]], ['SQL caching strategy'], 3], [(2298318, 0), [['In  PostgreSQL :'], ['In  SQL Server :']], [[' SELECT  num\nFROM    generate_series (11, 19) num\n']], ['SELECT any FROM system'], 3], [(2298318, 1), [['In  SQL Server :'], ['In  Oracle :']], [[' WITH    q (num) AS\n        (\n        SELECT  11\n        UNION ALL\n        SELECT  num + 1\n        FROM    q\n        WHERE   num < 19\n        )\nSELECT  num\nFROM    q\nOPTION (MAXRECURSION 0)\n']], ['SELECT any FROM system'], 3], [(2298318, 2), [['In  Oracle :'], ['In  MySQL :']], [[' SELECT  level + 10 AS num\nFROM    dual\nCONNECT BY\n        level < 10\n']], ['SELECT any FROM system'], 3], [(2298493, 0), [['-10000'], ['If you were comparing one col against multiple values, then there are other options, such as']], [[" select * from tableX where col1 like '10%'\nUNION\nselect * from tableX where col2 like '10%'\nUNION\nselect * from tableX where col3 like '10%'\n...\n"]], ['Could SQL query for muliple fields using like operator be written differently?'], 2], [(2298493, 1), [['If you were comparing one col against multiple values, then there are other options, such as'], ['-10000']], [[' SELECT *\nFROM\n   tableX t1\n   JOIN\n   tableFilter TF ON t1.col LIKE TF.FilterValue\n']], ['Could SQL query for muliple fields using like operator be written differently?'], 2], [(2298550, 0), [['ANY  (or its synonym  SOME ) is a syntax sugar for  EXISTS  with a simple correlation:'], ['is the same as:']], [[' SELECT  *\nFROM    mytable\nWHERE   x <= ANY\n        (\n        SELECT  y\n        FROM    othertable\n        )\n']], ["Oracle: '= ANY()' vs. 'IN ()'"], 2], [(2298550, 1), [['is the same as:'], ['With the equality condition on a not-nullable field, it becomes similar to  IN .']], [[' SELECT  *\nFROM    mytable m\nWHERE   EXISTS\n        (\n        SELECT  NULL\n        FROM    othertable o\n        WHERE   m.x <= o.y\n        )\n']], ["Oracle: '= ANY()' vs. 'IN ()'"], 2], [(2299375, 0), [['1 - Put your queries in a text file like so:'], ['3 - Run this at the command prompt:']], [[' set pagesize 0;\n\nselect some_field\nfrom some_table;\n\nselect another_field\nfrom another_table;\n/\n']], ['Oracle 10g - Write queries results to file'], 2], [(2299375, 1), [['3 - Run this at the command prompt:'], ['4 - Look inside "output.txt"']], [[' c:\\>sqlplus -s username/password@database.domain.com < tmp.sql > output.txt\n']], ['Oracle 10g - Write queries results to file'], 2], [(2300080, 0), [['1) Getting a list of tables -'], ['2) Iterate over that list, using COUNT(*) to determine if any rows exist within a table:']], [[" SELECT name \n  FROM sqlite_master\n WHERE type = 'table'\n"]], ['How to drop all empty tables in SQLite?'], 3], [(2300080, 1), [['2) Iterate over that list, using COUNT(*) to determine if any rows exist within a table:'], ['3) If the number returned is less than 1, execute a DROP statement:']], [[' SELECT COUNT(*) \n  FROM ~table\n']], ['How to drop all empty tables in SQLite?'], 3], [(2300080, 2), [['3) If the number returned is less than 1, execute a DROP statement:'], ["SQLite doesn't have function or stored procedure support - you'll have to do this from your application."]], [[' DROP TABLE ~table\n']], ['How to drop all empty tables in SQLite?'], 3], [(2300254, 0), [['in your view try to write something like'], ['in controller write']], [[" echo $form->input('Answer.n.title', array('type'=>text'));\n"]], ['How to insert multiple rows using cakePHP'], 2], [(2300254, 1), [['in controller write'], ['in my project I used jQuery, to add a new row without reloading a page.']], [[' function add(){\n    $this->Answer->saveAll($this->data);\n}\n']], ['How to insert multiple rows using cakePHP'], 2], [(2303282, 0), [['Another option as recommended by the  SQL Team  is to consider using Sub queries. This can often make the  GROUP BY  statements much simpler and makes the overall query much easier to read.'], ['-10000']], [['Using a Sub query: SELECT orders.billerID, \n    orders.invoiceDate, \n    orders.txnID, \n    orders.bName, \n    orders.bStreet1, \n    orders.bStreet2, \n    orders.bCity, \n    orders.bState, \n    orders.bZip, \n    orders.bCountry, \n    orders.sName, \n    orders.sStreet1, \n    orders.sStreet2, \n    orders.sCity, \n    orders.sState, \n    orders.sZip, \n    orders.sCountry, \n    orders.paymentType, \n    orders.invoiceNotes, \n    orders.pFee, \n    orders.shipping, \n    orders.tax, \n    orders.reasonCode, \n    orders.txnType, \n    orders.customerID, \n    customers.firstName AS firstName, \n    customers.lastName AS lastName, \n    customers.businessName AS businessName, \n    orderStatus.statusName AS orderStatus, \n    orderItem.fees + orders.shipping + orders.tax AS orderTotal, \n    orderItem.fees + orders.shipping + orders.tax - payments.amount AS orderBalance \nFROM orders \nLEFT JOIN customers ON orders.customerID = customers.id \nLEFT JOIN orderStatus ON orders.orderStatus = orderStatus.id\nLEFT JOIN \n    ( \n      SELECT orderID, SUM(itemPrice * itemQuantity) as fees\n      FROM orderItems\n      GROUP BY orderID\n    ) orderItems ON orderItems.orderID = orders.id \nLEFT JOIN \n    ( \n      SELECT orderID, SUM(amount) as amount\n      FROM payments\n      GROUP BY orderID\n    ) payments ON payments.orderID = orders.id\n']], ['Is there a better way to write this SQL statement?'], 3], [(2303282, 1), [['-10000'], ['-10000']], [['Using a <code>GROUP BY</code>: SELECT orders.billerID, \n    orders.invoiceDate, \n    orders.txnID, \n    orders.bName, \n    orders.bStreet1, \n    orders.bStreet2, \n    orders.bCity, \n    orders.bState, \n    orders.bZip, \n    orders.bCountry, \n    orders.sName, \n    orders.sStreet1, \n    orders.sStreet2, \n    orders.sCity, \n    orders.sState, \n    orders.sZip, \n    orders.sCountry, \n    orders.paymentType, \n    orders.invoiceNotes, \n    orders.pFee, \n    orders.shipping, \n    orders.tax, \n    orders.reasonCode, \n    orders.txnType, \n    orders.customerID, \n    customers.firstName AS firstName, \n    customers.lastName AS lastName, \n    customers.businessName AS businessName, \n    orderStatus.statusName AS orderStatus, \n    SUM(orderItems.itemPrice * orderItems.itemQuantity) + orders.shipping + orders.tax AS orderTotal, \n    SUM(orderItems.itemPrice * orderItems.itemQuantity) + orders.shipping + orders.tax - SUM(payments.amount) AS orderBalance \nFROM orders \nLEFT JOIN customers ON orders.customerID = customers.id \nLEFT JOIN orderStatus ON orders.orderStatus = orderStatus.id\nLEFT JOIN orderItems ON orderItems.orderID = orders.id \nLEFT JOIN payments ON payments.orderID = orders.id\nGROUP BY \n    orders.billerID, \n    orders.invoiceDate, \n    orders.txnID, \n    orders.bName, \n    orders.bStreet1, \n    orders.bStreet2, \n    orders.bCity, \n    orders.bState, \n    orders.bZip, \n    orders.bCountry, \n    orders.sName, \n    orders.sStreet1, \n    orders.sStreet2, \n    orders.sCity, \n    orders.sState, \n    orders.sZip, \n    orders.sCountry, \n    orders.paymentType, \n    orders.invoiceNotes, \n    orders.pFee, \n    orders.shipping, \n    orders.tax, \n    orders.reasonCode, \n    orders.txnType, \n    orders.customerID, \n    customers.firstName, \n    customers.lastName, \n    customers.businessName, \n    orderStatus.statusName  \n']], ['Is there a better way to write this SQL statement?'], 3], [(2303282, 2), [['-10000'], ['-10000']], [[' SELECT \n    Category, /* This is unique because it is in the GROUP BY clause */\n    AVG(Price) AS AveragePrice,\n    MAX(Price) AS MaxPrice,\n    MIN(Price) AS MinPrice\n    /* , Name */  /* This is invalid because it is not in the GROUP BY clause */\n                  /* The values are not unique so SQL does not know what to return */\nFROM Produce\nGROUP BY Category\n']], ['Is there a better way to write this SQL statement?'], 3], [(2304992, 0), [['SQL Server 2000:'], ['SQL Server 2005+:']], [[" SELECT c.name, \n       c.collation \n  FROM SYSCOLUMNS c\n WHERE [id] = OBJECT_ID('your_table_name')\n"]], ['How I can obtain the collation of a specific table in a database?'], 2], [(2304992, 1), [['SQL Server 2005+:'], ['-10000']], [[" SELECT c.name, \n       c.collation_name\n  FROM SYS.COLUMNS c\n  JOIN SYS.TABLES t ON t.object_id = c.object_id\n WHERE t.name = 'your_table_name'\n"]], ['How I can obtain the collation of a specific table in a database?'], 2], [(2305560, 0), [['If your OTL task needs to load a sorted list of companies that match the criteria:'], ['C  is your business object for a company. It may by an object ( TCompany ) or an interface ( ICompany ) implemented by the object.  Companies  is a  TList<TCompany>  or  TList<ICompany> . At the end of the task you send the list of companies to the VCL thread:']], [[' // create and open query to fetch list of companies\nwhile not qryCompanies.Eof do begin\n  C := TCompany.Create;\n  try\n    C.LoadFromDataset(qryCompanies);\n    Companies.Add(C);\n  except\n    C.Free;\n    raise;\n  end;\n  qryCompanies.Next;\nend;\n']], ['How to properly access query-results created in background thread?'], 5], [(2305560, 1), [['C  is your business object for a company. It may by an object ( TCompany ) or an interface ( ICompany ) implemented by the object.  Companies  is a  TList<TCompany>  or  TList<ICompany> . At the end of the task you send the list of companies to the VCL thread:'], ['In the form where you want to display the list of companies you handle the  OnTaskMessage  event of the  otlEventMonitor  instance that is monitoring your task:']], [[' Task.Comm.Send(TOmniMessage.Create(MSGID_LIST_OF_COMPANIES, Companies));\n']], ['How to properly access query-results created in background thread?'], 5], [(2305560, 2), [['In the form where you want to display the list of companies you handle the  OnTaskMessage  event of the  otlEventMonitor  instance that is monitoring your task:'], ["If you have so far preferred objects to interfaces, writing multi-threaded programs may be a reason to reconsider that. If you create your objects in a background thread, then pass them to the VCL thread and forget about them in the background thread, then objects may work well. I found however that much better performance can be had by caching objects in the application, and loading only records from the database that haven't been loaded yet, or that have changed. All my tables have a change index (64 bit integer, a time stamp may work as well) attached to it, that is changed with every update. Instead of executing a"]], [[' procedure TListBaseFrame.otlEventMonitorTaskMessage(\n  const task: IOmniTaskControl);\nvar\n  MsgID: word;\n  MsgValue: TOmniValue;\nbegin\n  task.Comm.Receive(MsgID, MsgValue);\n  Assert(MsgValue.IsInterface);\n  if fLoaderTask = task then begin\n    SetLoadedData(MsgID, MsgValue.AsInterface); // or MsgValue.AsObject);\n    fLoaderTask := nil;\n  end;\nend;\n']], ['How to properly access query-results created in background thread?'], 5], [(2305560, 3), [["If you have so far preferred objects to interfaces, writing multi-threaded programs may be a reason to reconsider that. If you create your objects in a background thread, then pass them to the VCL thread and forget about them in the background thread, then objects may work well. I found however that much better performance can be had by caching objects in the application, and loading only records from the database that haven't been loaded yet, or that have changed. All my tables have a change index (64 bit integer, a time stamp may work as well) attached to it, that is changed with every update. Instead of executing a"], ['I only ever execute a']], [[' select * from foo where (...) order by (...)\n']], ['How to properly access query-results created in background thread?'], 5], [(2305560, 4), [['I only ever execute a'], ['then check in the cache whether an object with the same id (primary key) and change index already exists, if so return the cached object, and only if not create a new business object and load all columns.']], [[' select id, change_index from foo where (...) order by (...)\n']], ['How to properly access query-results created in background thread?'], 5], [(2307130, 0), [["Say you have a 'Save()' method that takes a 'Doc' object, and returns a 'boolean' success flag"], ['Syntax various between frameworks, but in pseudo-code you would write something like this:']], [[' public bool Save(Doc docToSave(){...}\n']], ['Can a Mock framework do this for me?'], 3], [(2307130, 1), [['Syntax various between frameworks, but in pseudo-code you would write something like this:'], ['You can then use this dummy object to test your save method:']], [[' CreateMock of type Doc\nSetReturnValue for method Doc.data = "some test data"\n']], ['Can a Mock framework do this for me?'], 3], [(2307130, 2), [['You can then use this dummy object to test your save method:'], ["The mocking framework ensures that when your 'Save()' method accesses the properties on the dummyDoc object, the correct data is returned, and the save can happen naturally."]], [[' public void MyTest()\n{\n    ...\n    bool isSuccess = someClass.Save(dummyDoc);\n    ...\n}\n']], ['Can a Mock framework do this for me?'], 3], [(2312372, 0), [["Don't store the points at all. Just do queries on this view. That way it will be robust in the face of arbitrary changes."], ["You may select from the view by user_id or by action_type or sum the points column to get totals for a user or for all users. Look at the fun you can have, and it's practically free!"]], [[" create view UserPoints\nas\nselect\n    created_by_id as user_id,\n    'STORE' as action_type,\n    store_id as action_id,\n    (select points from action_points where action_desc='create store') as points\nfrom store\nunion\nselect\n    user_id,\n    'ANSWER' as action_type,\n    question_id as action_id,\n    (select points from action_points where action_desc='answer question') as points\nfrom answer\nunion\nselect\n    referred_by_id as user_id,\n    'REFERRAL' as action_type,\n    referred_id as action_id,\n    (select points from action_points where action_desc='referral') as points\nfrom referral\n"]], ['Database design - Approach for storing points for users'], 2], [(2312372, 1), [["You may select from the view by user_id or by action_type or sum the points column to get totals for a user or for all users. Look at the fun you can have, and it's practically free!"], ['-10000']], [[' select\n    sum(up.points) as total_points,\n    up.user_id,\n    u.user_name\nfrom\n    UserPoints up\n    join user u on up.user_id = u.user_id\ngroup by\n    user_id,\n    user_name\norder by\n    total_points desc\n']], ['Database design - Approach for storing points for users'], 2], [(2314564, 0), [["If you go the linked table route, you'd end up with two tables, like this:"], ['To get all the related attributes, you just do a  JOIN :']], [[' MyTable\nindex  name    length L  breadth B   height H\n1      M-1234  10        5           2\n2      M-2345  20        10          3\n3      ....\n\nXandY\nforeign_index  x    y\n1              12   9\n2              8    7\n3              ...\n']], ['How do I insert data with SQLite?'], 2], [(2314564, 1), [['To get all the related attributes, you just do a  JOIN :'], ['-10000']], [['  SELECT index, name, length, breadth, height, x, y FROM MyTable INNER JOIN XandY ON MyTable.index = XandY.foreign_index;\n']], ['How do I insert data with SQLite?'], 2], [(2315757, 0), [['The second example is an explicit cursor, and it is static.  That is, it is a variable associated with one SQL statement.  There is a implicit equivalent...'], ['The first example is a ref cursor, which is a pointer to a SQL statement and so can be dynamic.  For instance we can extend that example like this:']], [[' FOR lrec in ( SELECT  SomeTableID \n              FROM MYSCHEMA.SOMETABLE\n              WHERE SomeTableField = p_parameter )\nLOOP\n    do_something_with (lrec.sometableid);\nEND LOOP;\n']], ['In Oracle what is the difference between open-for and opening a cursor with parameters?'], 3], [(2315757, 1), [['The first example is a ref cursor, which is a pointer to a SQL statement and so can be dynamic.  For instance we can extend that example like this:'], ['Or even:']], [[' TYPE t_my_cursor IS REF CURSOR; \nv_my_cursor t_my_cursor;\n\n...\n\nif flag = 1 then\n    OPEN v_my_cursor FOR SELECT  SomeTableID \n        FROM MYSCHEMA.SOMETABLE\n        WHERE SomeTableField = p_parameter;\nelse\n    OPEN v_my_cursor FOR SELECT  SomeTableID \n        FROM MYSCHEMA.ANOTHERTABLE\n        WHERE AnotherTableField = p_parameter;\nend if;\n']], ['In Oracle what is the difference between open-for and opening a cursor with parameters?'], 3], [(2315757, 2), [['Or even:'], ['So using a ref cursor gives us a lot more control over the final SQL statement which gets executed.  The other difference is that, because a ref cursor is a pointer it can be passed between programs.  This is very useful for passing data from PL/SQL to other languages, for instance a JDBC result set.     ']], [["     l_stmt := 'SELECT * FROM your_table WHERE ';\n    if p_parameter is not null then\n        l_stmt := l_stmt ||'id = :1'; \n        open v_my_cursor for l_stmt using p_parameter;\n    else\n        l_stmt := l_stmt ||'created_date > trunc(sysdate)'; \n        open v_my_cursor for l_stmt;\n    end if;\n"]], ['In Oracle what is the difference between open-for and opening a cursor with parameters?'], 3], [(2316288, 0), [['With hours:'], ['Ignoring hours:']], [[' SELECT CONVERT(CHAR(8),DATEADD(second,90,0),108)\n00:01:30\n']], ['Efficient way to convert second to minute and seconds in sql server 2005'], 2], [(2316288, 1), [['Ignoring hours:'], ['-10000']], [[' SELECT RIGHT(CONVERT(CHAR(8),DATEADD(second,90,0),108),5)\n01:30\n']], ['Efficient way to convert second to minute and seconds in sql server 2005'], 2], [(2316289, 0), [['OK I made some guesses about structurehere (and you would want this all in one transaction)'], ["The derived table woudl be replaced by what ever query you need to sum up the charges that haven't been subtracted yet from tableb:"]], [[' DECLARE @outputTable (userid int)\n\nUPDATE b\n    SET amount = amount - newcharges\n    OUTPUT inserted.userid INTO @outputTable\nFROM tableb b\njoin \n    (SELECT c.userid, sum (a.amount) AS newcharges FROM tablea a\n    JOIN tablec c \n        ON a.productid =c.productid\n    WHERE c.date = getdate()\n    GROUP BY c.userid) a1\n        ON b.userid = a1.userid\nWHERE b.amount >= newcharges\n\nUPDATE d\nSET units = units + c.units\nFROM tabled d\nJOIN tablec c ON c.unitid = d.unitid\nJOIN @userid u ON c.userid = u.userid\nwhere c.date = getdate()\n']], ["updating a column in a table only if after the update it won't be negative and identifying all updated rows"], 2], [(2316289, 1), [["The derived table woudl be replaced by what ever query you need to sum up the charges that haven't been subtracted yet from tableb:"], ["Actually you might also want to condsider what to do if the amount would put the user in a negative amount status. How will you pick up that data later when he has more money or should the record from c be marked as not sent or deleted entirely or what? Personally I think a viable alternative woudl be to check the amount available at the time the record is inserted in c and not insert it if there is no money available. This would have the benefit of telling the user it won't process at the time he is working with the data."]], [['     (SELECT c.userid, sum (a.amount) AS newcharges FROM tablea a\n    JOIN tablec c \n        ON a.productid =c.productid\n    WHERE c.date = getdate()\n    GROUP BY c.userid) a1\n']], ["updating a column in a table only if after the update it won't be negative and identifying all updated rows"], 2], [(2318539, 0), [['Wrap your unioned queries in another one as a derived table and you can use the top clause.'], ['You were on the right track then. Add a defined column to each of your subsets of sorted results and then you can use that to keep the order sorted.']], [[" SELECT TOP 100 * FROM (\n   SELECT * FROM table where field = 'entry'\n   UNION ALL\n   SELECT * FROM table where field = 'entry#'\n) sortedresults\n"]], ['Paging and custom-ordering a result'], 2], [(2318539, 1), [['You were on the right track then. Add a defined column to each of your subsets of sorted results and then you can use that to keep the order sorted.'], ["It is important that you also sort each subquery by something other than keyword so their order stays the same between runs (and as a secondary sort on the row number function). Example: say you have k1, k2, k3, k4, k5 - if you select * where keyword like k% you might get k1, k2, k3, k4, k5 one time and k5, k4, k3, k2, k1 the next (SQL doesn't guarantee return order and it can differ). That will throw off your paging."]], [[" WITH SearchResult AS\n  (SELECT *, ROW_NUMBER() OVER (ORDER BY QueryNum) as RowNum FROM\n     (SELECT *, 1 as QueryNum FROM KeywordTable WHERE field = 'Keyword'\n      UNION ALL\n      SELECT *, 2 from KeywordTable WHERE field = 'Keyword#'\n      ) SortedResults\n  )\nSELECT * from SearchResults WHERE RowNum BETWEEN 4 and 10\n"]], ['Paging and custom-ordering a result'], 2], [(2318814, 0), [['Try this, if I understand your question correctly'], ['Revised query based on new information']], [[" select a._id\nfrom tableA a\njoin tableB b on a._id=b.tableA_id\nwhere b.optionString in ('Option1','Option2')\ngroup by a._id\nhaving count(*)=1\n"]], ['SQL - XOR based on referencing table'], 2], [(2318814, 1), [['Revised query based on new information'], ['What I am doing here is forcing distinct values from tableB']], [[" select a._id\nfrom tableA a\njoin (select distinct _id,tablea_id,optionString from TableB) b \n        on a._id=b.tableA_id\nwhere b.optionString in ('Option1','Option2')\ngroup by a._id\nhaving count(*)=1\n"]], ['SQL - XOR based on referencing table'], 2], [(2320370, 0), [["Very interesting question.  Here's an ugly hack that probably is useless unless your ranges are really that small..."], ['Edit:  Ok, so I got to thinking why not use cross joins.  So, here is another hack and this one will quickly net you pretty large in memory tables and is perhaps reasonably good.']], [[' select * from (\n  select 1 as num  UNION \n  select 2 as num  UNION \n  select 3 as num  UNION \n  select 4 as num  UNION \n  select 5 as num  UNION \n  select 6 as num  UNION \n  select 7 as num  UNION \n  select 8 as num  UNION \n  select 9 as num  UNION \n  select 10 as num\n  ) t ;\n\n+-----+\n| num |\n+-----+\n|   1 | \n|   2 | \n  .... \n|   9 | \n|  10 | \n+-----+\n10 rows in set (0.00 sec)\n']], ['sql range operator'], 2], [(2320370, 1), [['Edit:  Ok, so I got to thinking why not use cross joins.  So, here is another hack and this one will quickly net you pretty large in memory tables and is perhaps reasonably good.'], ['Will easily go to any power of 2 and should be fast enough.']], [[' select POW(2,0)*t0.num + POW(2,1)*t1.num + POW(2,2)*t2.num + POW(2,3)*t3.num  \nas num \nfrom (\n  select 0 as num  UNION \n  select 1 as num  \n  ) t0, (\n  select 0 as num  UNION \n  select 1 as num  \n  ) t1, (\n  select 0 as num  UNION \n  select 1 as num  \n  ) t2, (\n  select 0 as num  UNION \n  select 1 as num  \n  ) t3 \norder by num ;\n+------+\n| num  |\n+------+\n|    0 | \n|    1 | \n  ....\n|   14 | \n|   15 | \n+------+\n16 rows in set (0.00 sec)\n']], ['sql range operator'], 2], [(2320994, 0), [['If  gtyp_folderids_table   is declared as a SQL type (as opposed to a PL/SQL type) you could use it in a SQL statement via a  table()  function like this:'], ['Oracle introduced some neat-o set operators which we can use with collections.  The following example uses MULTISET UNION to munge several collections into one...']], [['     SELECT documentid\n      BULK COLLECT INTO gnt_documentids\n      FROM t$documents\n     WHERE parent_folderid in ( select * from table( paa_folderids_i)); \n']], ['PLSQL - How to retrieve values into a collection given an array of values?'], 2], [(2320994, 1), [['Oracle introduced some neat-o set operators which we can use with collections.  The following example uses MULTISET UNION to munge several collections into one...'], ['Find out more about collections in 10g .']], [[" SQL> set serveroutput on size unlimited\nSQL>\nSQL> declare\n  2      v1 sys.dbms_debug_vc2coll\n  3          := sys.dbms_debug_vc2coll('SAM I AM', 'FOX IN SOCKS');\n  4      v2 sys.dbms_debug_vc2coll\n  5          := sys.dbms_debug_vc2coll('MR KNOX', 'GRINCH');\n  6      v3 sys.dbms_debug_vc2coll\n  7          := sys.dbms_debug_vc2coll('LORAX', 'MAISIE');\n  8      v_all sys.dbms_debug_vc2coll := sys.dbms_debug_vc2coll();\n  9  begin\n 10      dbms_output.put_line('V_ALL has '|| v_all.count() ||' elements');\n 11      v_all := v1 multiset union v2;\n 12      dbms_output.put_line('V_ALL has '|| v_all.count() ||' elements');\n 13      v_all := v_all multiset union v3;\n 14      dbms_output.put_line('V_ALL has '|| v_all.count() ||' elements');\n 15  end;\n 16  /\nV_ALL has 0 elements\nV_ALL has 4 elements\nV_ALL has 6 elements\n\nPL/SQL procedure successfully completed.\n\nSQL>\n"]], ['PLSQL - How to retrieve values into a collection given an array of values?'], 2], [(2321704, 0), [['Oracle SQL Developer has a set of built-in reports that include these categories. I have expanded one of the categories.'], ['These are a few of the actual report names,']], [[' About Your Database\nAll Objects\nApplication Express\nASH and AWR\nDatabase Administration\n  All Tables\n  Cursors\n  Database Parameters\n  Locks\n  Memory\n  Sessions\n  Storage\n  Top SQL\n  Users\n  Waits and Events\nData Dictionary\nJobs\nPLSQL\nSecurity\nStreams\nTable\nXML\n']], ['Most useful SQL meta-queries'], 2], [(2321704, 1), [['These are a few of the actual report names,'], ['There are many more reports available.']], [[' Tables without Indexes\nTables without Primary Keys\nTables with Unindexed Foreign Keys\nLargest Average Row Length\nMost Rows\nUnusable Indexes\n']], ['Most useful SQL meta-queries'], 2], [(2324711, 0), [['This will return a row for every  status  and the count in the second column:'], ['So it would return']], [[' SELECT Status, COUNT(*) Cnt\nFROM Tbl\nGROUP BY Status\n']], ['help in sql count'], 2], [(2324711, 1), [['So it would return'], ['for your example (in no defined order). Use  ORDER BY  if you want to sort the results.']], [[' Status  Cnt\n U       3\n T       1\n L       1\n']], ['help in sql count'], 2], [(2325956, 0), [['-10000'], ['A sample script to reproduce:']], [[" SELECT  COUNT(StockID)\nFROM    (\n        SELECT  DISTINCT '%' + CategoryCode + '%' AS Expr\n        FROM    tblLookup\n        WHERE   CategoryID = 'EG'\n        ) cats\nJOIN    tblStock s\nON      s.CategoryCode LIKE cats.Expr\n"]], ['How to do partial match with a SELECT IN query?'], 2], [(2325956, 1), [['A sample script to reproduce:'], ['-10000']], [[" DECLARE @tblStock TABLE (StockID INT NOT NULL, CategoryCode VARCHAR(100) NOT NULL, quantity FLOAT NOT NULL)\nDECLARE @tblLookup TABLE (CategoryID VARCHAR(100) NOT NULL, CategoryCode VARCHAR(100) NOT NULL)\n\nINSERT\nINTO    @tblStock\nVALUES  (1, 'ETCE', 100)\n\nINSERT\nINTO    @tblStock\nVALUES  (2, 'ETC', 200)\n\nINSERT\nINTO    @tblStock\nVALUES  (3, 'FOO', 300)\n\nINSERT\nINTO    @tblLookup\nVALUES  ('EG', 'ETC')\n\nINSERT\nINTO    @tblLookup\nVALUES  ('EG', 'EGT')\n\nSELECT  *\nFROM    (\n        SELECT  DISTINCT '%' + CategoryCode + '%' AS Expr\n        FROM    @tblLookup\n        WHERE   CategoryID = 'EG'\n        ) cats\nJOIN    @tblStock s\nON      s.CategoryCode LIKE cats.Expr\n"]], ['How to do partial match with a SELECT IN query?'], 2], [(2326154, 0), [['As you have built it (which is bizarrely), the procedure insert_address can only be called in the context of an object of type address, and must be called with parameters line1 and city, with values that have no connection with the object you called it "for".  This is how I would build the table and code, and use it:'], ['With your funkier model, it seems that the insert_address procedure should insert "the address object itself" into the table.  Something like:']], [[" create table address_table (line1 varchar2(50), city varchar2(50));\n\ncreate package address_pkg as\n   procedure insert_address(p_line1 varchar2, p_city varchar2);\nend;\n/\n\ncreate package body address_pkg as\n   procedure insert_address(p_line1 varchar2, p_city varchar2) is\n   begin\n      insert into address_table (line1, city) values (p_line1, p_city);\n   end;\nend;\n/\n\nexec address_pkg.insert_address ('123 my road', 'london');\n"]], ['Calling a member procedure in Oracle 11g'], 3], [(2326154, 1), [['With your funkier model, it seems that the insert_address procedure should insert "the address object itself" into the table.  Something like:'], ['Then the insert would be like:']], [[' create type address as object (\n   line1 varchar2(50),\n   city varchar2(50),\n   member procedure insert_address\n)\n/\n\ncreate table address_table of address;\n\ncreate type body address as\n   member procedure insert_address is\n   begin\n       insert into address_table values (line1, city);\n       commit;\n   end insert_address;\nend;\n/\n']], ['Calling a member procedure in Oracle 11g'], 3], [(2326154, 2), [['Then the insert would be like:'], ['-10000']], [[" declare\n  v_address address := new address('123 my road','london');\nbegin\n  v_address.insert_address;\nend;\n"]], ['Calling a member procedure in Oracle 11g'], 3], [(2326395, 0), [['For instance,  CTE  (common table expressions) in  SQL Server  can (and most probably will) be reevaluated each time they are used. This query:'], ['On the other hand, this query:']], [[' WITH    q (uuid) AS\n        (\n        SELECT  NEWID()\n        )\nSELECT  *\nFROM    q\nUNION ALL\nSELECT  *\nFROM    q\n']], ['Which one have better performance : Derived Tables or Temporary Tables'], 2], [(2326395, 1), [['On the other hand, this query:'], ['is better with a derived table, because using a temporary table will require fetching all values from  master , while this solution will just scan the first  100  records using the index on  id .']], [[' SELECT  *\nFROM    (\n        SELECT  *, ROW_NUMBER() OVER (ORDER BY id) AS rn\n        FROM    master\n        ) q\nWHERE   rn BETWEEN 80 AND 100\n']], ['Which one have better performance : Derived Tables or Temporary Tables'], 2], [(2327521, 0), [['It seems you create a query with a field that has the following expression:'], ["I can't test this, so I hope it works.\nUsing this you may be able to do (where  queryAbove  is the above query):"]], [[' Place: (Select Count(*) from table1 Where [Time] < [table1alias].[Time]) + 1\n']], ['SQL Update each record with its position in an ordered select'], 2], [(2327521, 1), [["I can't test this, so I hope it works.\nUsing this you may be able to do (where  queryAbove  is the above query):"], ["It's a long shot but please give it a go."]], [[' UPDATE table1\nSET [Place] = queryAbove.[Place]\nFROM queryAbove\nWHERE table1.ID = queryAbove.ID\n']], ['SQL Update each record with its position in an ordered select'], 2], [(2328737, 0), [['give this a try:'], ['sample output:']], [[" DECLARE @SQL nvarchar(MAX), @YourTable nvarchar(200)\nSET @YourTable='YourTableName'\nSELECT @SQL=\n    STUFF(\n             (\n                  SELECT\n                  ' + '','' + COALESCE(''''''''+CONVERT(NVARCHAR(MAX),['+c.COLUMN_NAME+']'+CASE WHEN c.DATA_TYPE='datetime' THEN ',121' ELSE '' END+')+'''''''',''null'')'\n                      FROM INFORMATION_SCHEMA.COLUMNS c\n                      WHERE c.TABLE_NAME = 'ap_voucher'\n                      ORDER BY ORDINAL_POSITION\n                      FOR XML PATH('')\n             ), 1, 9, ''\n         )\nSET @SQL = 'SELECT ' + @SQL + ' FROM '+@YourTable\nexec (@SQL)\n"]], ['SQL select row into a string variable without knowing columns'], 2], [(2328737, 1), [['sample output:'], ['-10000']], [[" ---------------------------------------------------------------------------\n'030',null,'I','Zzz0',null,'1000021111          ','2000-03-01 00:00:00.000'\n'001',null,'I','zzz0',null,'900099618           ','1999-12-03 00:00:00.000'\n'001',null,'I','ET10',null,'KOU557              ','1999-11-01 00:00:00.000'\n'001',null,'I','Mzzz',null,'017288              ','1999-11-12 00:00:00.000'\n"]], ['SQL select row into a string variable without knowing columns'], 2], [(2332644, 0), [['try this:'], ['first example']], [[" --needed for each query run\nDECLARE @YourTable  table     (RowID int, FromDate datetime, ToDate datetime)\nDECLARE @datefrom  datetime\n       ,@dateto    datetime\n\nINSERT INTO @YourTable VALUES (1,'2010-01-10', '2010-01-13')\nINSERT INTO @YourTable VALUES (2,'2009-03-20', '2010-01-09')\n"]], ['help in sql query'], 7], [(2332644, 1), [['first example'], ['OUTPUT:  ']], [[" --be sure to use the DECLAREs and INSERTs from above with this\nSELECT @datefrom='2000-01-01'\n      ,@dateto='2009-03-21'\n\n--query to that only checks if the FromDate is between the given @datefrom and @dateto, which is necessary for the OPs first example\nSELECT \n    *\n    FROM @YourTable\n    WHERE FromDate>=@datefrom AND FromDate<@dateto+1\n"]], ['help in sql query'], 7], [(2332644, 2), [['OUTPUT:  '], ['second example']], [[' RowID       FromDate                ToDate\n----------- ----------------------- -----------------------\n2           2009-03-20 00:00:00.000 2010-01-09 00:00:00.000\n\n(1 row(s) affected)\n']], ['help in sql query'], 7], [(2332644, 3), [['second example'], ['OUTPUT:  ']], [[" --same query as above, but run with example two dates\n--be sure to use the DECLAREs and INSERTs from above with this\nSELECT @datefrom='2009-01-01'\n      ,@dateto='2011-01-01'\n\nSELECT \n    *\n    FROM @YourTable\n    WHERE FromDate>=@datefrom AND FromDate<@dateto+1\n"]], ['help in sql query'], 7], [(2332644, 4), [['OUTPUT:  '], ['Alternate queries, to make sure that the entire FromDate+ToDate range is within the given @datefrom and @dateto values use this query:']], [[' RowID       FromDate                ToDate\n----------- ----------------------- -----------------------\n1           2010-01-10 00:00:00.000 2010-01-13 00:00:00.000\n2           2009-03-20 00:00:00.000 2010-01-09 00:00:00.000\n\n(2 row(s) affected)\n']], ['help in sql query'], 7], [(2332644, 5), [['Alternate queries, to make sure that the entire FromDate+ToDate range is within the given @datefrom and @dateto values use this query:'], ['OUTPUT:  ']], [[" --be sure to use the DECLAREs and INSERTs from above with this    SELECT @datefrom='2009-03-22'\n      ,@dateto='2011-01-01'\n\nSELECT \n    *\n    FROM @YourTable\n    WHERE FromDate>=@datefrom AND ToDate<@dateto+1\n"]], ['help in sql query'], 7], [(2332644, 6), [['OUTPUT:  '], ['-10000']], [[' RowID       FromDate                ToDate\n----------- ----------------------- -----------------------\n1           2010-01-10 00:00:00.000 2010-01-13 00:00:00.000\n\n(1 row(s) affected)\n']], ['help in sql query'], 7], [(2333994, 0), [['Call this before the query:'], ['Alternatively, hacky:']], [[' set define off;\n']], ["How to avoid variable substitution in Oracle SQL Developer with 'trinidad & tobago'"], 2], [(2333994, 1), [['Alternatively, hacky:'], ['From  Tuning SQL*Plus :']], [[" update t set country = 'Trinidad and Tobago' where country = 'trinidad &' || ' tobago';\n"]], ["How to avoid variable substitution in Oracle SQL Developer with 'trinidad & tobago'"], 2], [(2334327, 0), [['.Contains'], ['Of course, with your simple problem, you could have something like:']], [[' var resultset = from x in collection where new[] {2,3,4,5}.Contains(x) select x\n']], ['What is the linq equivalent to the SQL IN operator'], 2], [(2334327, 1), [['Of course, with your simple problem, you could have something like:'], ['-10000']], [[' var resultset = from x in collection where x >= 2 && x <= 5 select x\n']], ['What is the linq equivalent to the SQL IN operator'], 2], [(2336743, 0), [['This is how I would do it. Variables/table-names/column-names are case-insensitive in Oracle, so I would use  user_name  instead of  UserName .'], ['Function  update_and_get_user . Note that I return a  ROWTYPE  instead of Pipelined Tables.']], [[' CREATE TABLE users( UserName varchar2(20), OtherStuff VARCHAR2(20) );\n']], ['How to return a record from an existing table from an Oracle PL/SQL function?'], 5], [(2336743, 1), [['Function  update_and_get_user . Note that I return a  ROWTYPE  instead of Pipelined Tables.'], ['And this is how you would call it. You can not check a  ROWTYPE  to be  NULL , but you can check  username  for example.']], [[' CREATE OR REPLACE FUNCTION update_and_get_user(\n  in_UserName   IN users.UserName%TYPE,\n  in_OtherStuff IN users.OtherStuff%TYPE )\nRETURN users%ROWTYPE\nIS\n  output_rec users%ROWTYPE;\nBEGIN\n  UPDATE users\n  SET OtherStuff = in_OtherStuff\n  WHERE UserName = in_UserName\n    RETURNING UserName, OtherStuff\n    INTO output_rec;\n  RETURN output_rec;\nEND update_and_get_user;\n']], ['How to return a record from an existing table from an Oracle PL/SQL function?'], 5], [(2336743, 2), [['And this is how you would call it. You can not check a  ROWTYPE  to be  NULL , but you can check  username  for example.'], ["A solution  using  PIPED ROWS  is below, but it doesn't work that way. You can not update tables inside a query."]], [[" DECLARE\n  users_rec users%ROWTYPE;\nBEGIN\n  users_rec := update_and_get_user('user', 'stuff');\n  IF( users_rec.username IS NOT NULL ) THEN\n    dbms_output.put_line('FOUND: ' || users_rec.otherstuff);\n  END IF;\nEND;\n"]], ['How to return a record from an existing table from an Oracle PL/SQL function?'], 5], [(2336743, 3), [["A solution  using  PIPED ROWS  is below, but it doesn't work that way. You can not update tables inside a query."], ['Solution would look like that:']], [[" SELECT * FROM TABLE(update_and_get_user('user', 'stuff'))\n\nORA-14551: cannot perform a DML operation inside a query\n"]], ['How to return a record from an existing table from an Oracle PL/SQL function?'], 5], [(2336743, 4), [['Solution would look like that:'], ['-10000']], [[' CREATE OR REPLACE TYPE users_type\nAS OBJECT\n(\n  username   VARCHAR2(20),\n  otherstuff VARCHAR2(20)\n)\n\nCREATE OR REPLACE TYPE users_tab\n   AS TABLE OF users_type;\n\nCREATE OR REPLACE FUNCTION update_and_get_user(\n  in_UserName   IN users.username%TYPE,\n  in_OtherStuff IN users.otherstuff%TYPE )\nRETURN users_tab PIPELINED\nIS\n  output_rec users%ROWTYPE;\nBEGIN\n  UPDATE users\n  SET OtherStuff = in_OtherStuff\n  WHERE UserName = in_UserName\n    RETURNING username, otherstuff\n    INTO output_rec;\n  PIPE ROW(users_type(output_rec.username, output_rec.otherstuff));\nEND;\n']], ['How to return a record from an existing table from an Oracle PL/SQL function?'], 5], [(2337339, 0), [["In query 1 you are validating that  @c  is not null (true, you set it) and that its length is greater than 0 (true, it's 10).  Since both are true, query 1 becomes:"], ['EDIT:   Addressing the comments on the question.']], [[' select top 1 * from myTable\n']], ['SQL Server variables'], 2], [(2337339, 1), [['EDIT:   Addressing the comments on the question.'], ["Now when I run this both queries return the same result.  You'll have to tell me where I'm misrepresenting your actual data / query to get more help (or just expand upon this to find a solution)."]], [[" declare @myTable table\n(\n    columnName varchar(50)\n)\n\ninsert into @myTable values ('8')\n\ndeclare @c nvarchar(50)\nset @c = 'columnName'\n\nselect top 1 * \nfrom @myTable \nwhere @c is not null \n      and len(convert(varchar, @c)) > 0\n\nselect top 1 * \nfrom @myTable \nwhere columnName is not null\n      and len(convert(varchar,columnName)) > 0\n"]], ['SQL Server variables'], 2], [(2338950, 0), [['In the end I wrote a simple query which creates a user history in chronological order for all user activity in the group for a given month. '], ['My php code, if anyone is interested  looks as follows:']], [[" SELECT Concat(firstname,' ',lastname) as name, username, UserID,ACTION , Date(ActionDate), Unix_Timestamp(ActionDate) as UN_Action, DateDiff('$enddate', actiondate ) AS DaysTo, DateDiff( actiondate, '$startdate' ) AS DaysFrom\n        FROM `groupuserlog` inner join users on users.id = groupuserlog.userid WHERE groupuserlog.groupid = $row[groupid] AND ( actiondate < '$enddate' AND actiondate >= '$startdate') ORDER BY userid, actiondate\n"]], ['Help writing a mysql query - this mustve been done 1000 times before but I am struggling..please help?'], 2], [(2338950, 1), [['My php code, if anyone is interested  looks as follows:'], ['-10000']], [[' while($logrow = mysql_fetch_row($res2)) {\n\n                list($fullname, $username, $guserid,$action,$actiondate,$uxaction,$daysto,$daysfrom) = $logrow;\n                if($action == 1)\n                    $actiondesc = "Added";\n                else\n                    $actiondesc = "Removed";\n\n\n                //listing each user by individual action and building a history\n                //the first action is very important as it defines the previous action\n\n                if($curruserid != $guserid) {\n\n                    if($curruserid > 0) {\n                        //new user history so reset and store previous user value\n                        if($wasMember) {\n                            //this was an existing member so check if need refund (if was not on for 15 days)\n                            $count = $basecount + $count;\n                            echo "<br>User was member and had $count days usage";\n                            if($count< 15) {\n                                array_push($refundarrinfo, "$fullname (#$guserid $username)");\n                                array_push($refundarr, $guserid);\n                                echo " REFUND";\n                            } else\n                                echo " NONE";\n\n                        } else {\n                            //this user was not an existing member - see if need to charge (ie if was on for min 15 days)\n                            $count = $basecount + $count;\n                            echo "<br>User was not a member and was added for $count days usage";\n                            if($count >= 15) {\n                                array_push($billarrinfo, "$fullname (#$guserid $username)");\n                                array_push($billarr, $guserid);\n                                echo " CHARGE";\n                            } else\n                                echo " NONE";\n                        }\n                    }\n\n                    $basecount = 0;\n                    $count = 0;\n                    $prev_uxaction = 0;\n\n                    //setup new user - check first action\n                     echo "<br><hr><br>$guserid<br>$actiondesc - $actiondate"; // - $daysto - $daysfrom";\n                    if($action == 1)\n                        $wasMember = FALSE;\n                    else {\n                        //for first action - if is a remove then store in basecount the number of days that are for sure in place\n                        $basecount = $daysfrom;\n                        $wasMember = TRUE; //if doing a remove myust have been a member\n                    }\n\n                } else\n                    echo "<br>$actiondesc - $actiondate";// - $daysto - $daysfrom";\n\n                $curruserid = $guserid;\n\n               if($action == 1) { //action = add\n                    $count = $daysto;\n                    $prev_uxaction = $uxaction;  //store this actiondate in case needed for remove calculation\n                } else { //action = remove\n                    //only do something if this is a remove coming after an add - if not it has been taken care of already\n                    if($prev_uxaction != 0) {\n                        //calc no. of days between previous date and this date and overwrite count by clearing and storing in basecount\n                        $count = ($uxaction - $prev_uxaction)/(60 * 60 * 24);\n                        $basecount = $basecount + $count;\n                        $count = 0; //clear the count as it is stored in basecount\n                    }\n                }\n']], ['Help writing a mysql query - this mustve been done 1000 times before but I am struggling..please help?'], 2], [(2339849, 0), [["connect to that specific database you're interested in "], ['execute this query']], [[' USE Databasename\n']], ['Retrieving users for specific SQL Server databases'], 2], [(2339849, 1), [['execute this query'], ['That gives you a slew of information on all users defined in the database']], [[' SELECT * FROM sys.database_principals\n']], ['Retrieving users for specific SQL Server databases'], 2], [(2340696, 0), [['Test Data'], ['SQL Statement']], [[" DECLARE @Data TABLE (\n  ID INTEGER PRIMARY KEY\n  , ParentID INTEGER\n  , Text VARCHAR(32)\n  , Price INTEGER\n)\n\nINSERT INTO @Data\n  SELECT 1, Null, 'Root', NULL\n  UNION ALL SELECT 2, 1, 'Flowers', NULL\n  UNION ALL SELECT 3, 1, 'Electro', NULL\n  UNION ALL SELECT 4, 2, 'Rose', 10\n  UNION ALL SELECT 5, 2, 'Violet', 5\n  UNION ALL SELECT 6, 4, 'Red Rose', 12\n  UNION ALL SELECT 7, 3, 'Television', 100\n  UNION ALL SELECT 8, 3, 'Radio', 70\n  UNION ALL SELECT 9, 8, 'Webradio', 90\n"]], ['Counting number of children in hierarchical SQL data'], 2], [(2340696, 1), [['SQL Statement'], ['-10000']], [[' ;WITH ChildrenCTE AS (\n  SELECT  RootID = ID, ID\n  FROM    @Data\n  UNION ALL\n  SELECT  cte.RootID, d.ID\n  FROM    ChildrenCTE cte\n          INNER JOIN @Data d ON d.ParentID = cte.ID\n)\nSELECT  d.ID, d.ParentID, d.Text, d.Price, cnt.Children\nFROM    @Data d\n        INNER JOIN (\n          SELECT  ID = RootID, Children = COUNT(*) - 1\n          FROM    ChildrenCTE\n          GROUP BY RootID\n        ) cnt ON cnt.ID = d.ID\n']], ['Counting number of children in hierarchical SQL data'], 2], [(2340816, 0), [['ALL_TABLES and ALL_SOURCE are actually views.  If you have the privileges you can view the source of them:'], ['As you can see, there are many tables referenced there, including SYS.OBJ$.  Now you can look up the indexes on those:']], [[" SQL> select text from all_views where view_name='ALL_TABLES';\n\nTEXT\n--------------------------------------------------------------------------------\nselect u.name, o.name,decode(bitand(t.property, 2151678048), 0, ts.name, null),\n       decode(bitand(t.property, 1024), 0, null, co.name),\n       decode((bitand(t.property, 512)+bitand(t.flags, 536870912)),\n              0, null, co.name),\n       decode(bitand(t.trigflag, 1073741824), 1073741824, 'UNUSABLE', 'VALID'),\n       decode(bitand(t.property, 32+64), 0, mod(t.pctfree$, 100), 64, 0, null),\n       decode(bitand(ts.flags, 32), 32, to_number(NULL),\n          decode(bitand(t.property, 32+64), 0, t.pctused$, 64, 0, null)),\n       decode(bitand(t.property, 32), 0, t.initrans, null),\n       decode(bitand(t.property, 32), 0, t.maxtrans, null),\n       s.iniexts * ts.blocksize,\n       decode(bitand(ts.flags, 3), 1, to_number(NULL),\n                                      s.extsize * ts.blocksize),\n       s.minexts, s.maxexts,\n       decode(bitand(ts.flags, 3), 1, to_number(NULL),\n                                      s.extpct),\n       decode(bitand(ts.flags, 32), 32, to_number(NULL),\n         decode(bitand(o.flags, 2), 2, 1, decode(s.lists, 0, 1, s.lists))),\n       decode(bitand(ts.flags, 32), 32, to_number(NULL),\n         decode(bitand(o.flags, 2), 2, 1, decode(s.groups, 0, 1, s.groups))),\n       decode(bitand(t.property, 32+64), 0,\n                decode(bitand(t.flags, 32), 0, 'YES', 'NO'), null),\n       decode(bitand(t.flags,1), 0, 'Y', 1, 'N', '?'),\n       t.rowcnt,\n       decode(bitand(t.property, 64), 0, t.blkcnt, null),\n       decode(bitand(t.property, 64), 0, t.empcnt, null),\n       decode(bitand(t.property, 64), 0, t.avgspc, null),\n       t.chncnt, t.avgrln, t.avgspc_flb,\n       decode(bitand(t.property, 64), 0, t.flbcnt, null),\n       lpad(decode(t.degree, 32767, 'DEFAULT', nvl(t.degree,1)),10),\n       lpad(decode(t.instances, 32767, 'DEFAULT', nvl(t.instances,1)),10),\n       lpad(decode(bitand(t.flags, 8), 8, 'Y', 'N'),5),\n       decode(bitand(t.flags, 6), 0, 'ENABLED', 'DISABLED'),\n       t.samplesize, t.analyzetime,\n       decode(bitand(t.property, 32), 32, 'YES', 'NO'),\n       decode(bitand(t.property, 64), 64, 'IOT',\n               decode(bitand(t.property, 512), 512, 'IOT_OVERFLOW',\n               decode(bitand(t.flags, 536870912), 536870912, 'IOT_MAPPING', null\n))),\n       decode(bitand(o.flags, 2), 0, 'N', 2, 'Y', 'N'),\n       decode(bitand(o.flags, 16), 0, 'N', 16, 'Y', 'N'),\n       decode(bitand(t.property, 8192), 8192, 'YES',\n              decode(bitand(t.property, 1), 0, 'NO', 'YES')),\n       decode(bitand(o.flags, 2), 2, 'DEFAULT',\n             decode(s.cachehint, 0, 'DEFAULT', 1, 'KEEP', 2, 'RECYCLE', NULL)),\n       decode(bitand(t.flags, 131072), 131072, 'ENABLED', 'DISABLED'),\n       decode(bitand(t.flags, 512), 0, 'NO', 'YES'),\n       decode(bitand(t.flags, 256), 0, 'NO', 'YES'),\n       decode(bitand(o.flags, 2), 0, NULL,\n          decode(bitand(t.property, 8388608), 8388608,\n                 'SYS$SESSION', 'SYS$TRANSACTION')),\n       decode(bitand(t.flags, 1024), 1024, 'ENABLED', 'DISABLED'),\n       decode(bitand(o.flags, 2), 2, 'NO',\n           decode(bitand(t.property, 2147483648), 2147483648, 'NO',\n              decode(ksppcv.ksppstvl, 'TRUE', 'YES', 'NO'))),\n       decode(bitand(t.property, 1024), 0, null, cu.name),\n       decode(bitand(t.flags, 8388608), 8388608, 'ENABLED', 'DISABLED'),\n       decode(bitand(t.property, 32), 32, null,\n                decode(bitand(s.spare1, 2048), 2048, 'ENABLED', 'DISABLED')),\n       decode(bitand(o.flags, 128), 128, 'YES', 'NO')\nfrom sys.user$ u, sys.ts$ ts, sys.seg$ s, sys.obj$ co, sys.tab$ t, sys.obj$ o,\n     sys.obj$ cx, sys.user$ cu, x$ksppcv ksppcv, x$ksppi ksppi\nwhere o.owner# = u.user#\n  and o.obj# = t.obj#\n  and bitand(t.property, 1) = 0\n  and bitand(o.flags, 128) = 0\n  and t.bobj# = co.obj# (+)\n  and t.ts# = ts.ts#\n  and t.file# = s.file# (+)\n  and t.block# = s.block# (+)\n  and t.ts# = s.ts# (+)\n  and (o.owner# = userenv('SCHEMAID')\n       or o.obj# in\n            (select oa.obj#\n             from sys.objauth$ oa\n             where grantee# in ( select kzsrorol\n                                 from x$kzsro\n                               )\n            )\n       or /* user has system privileges */\n         exists (select null from v$enabledprivs\n                 where priv_number in (-45 /* LOCK ANY TABLE */,\n                                       -47 /* SELECT ANY TABLE */,\n                                       -48 /* INSERT ANY TABLE */,\n                                       -49 /* UPDATE ANY TABLE */,\n                                       -50 /* DELETE ANY TABLE */)\n                 )\n      )\n  and t.dataobj# = cx.obj# (+)\n  and cx.owner# = cu.user# (+)\n  and ksppi.indx = ksppcv.indx\n  and ksppi.ksppinm = '_dml_monitoring_enabled'\n"]], ['What indexes are on the oracle data dictionary tables'], 2], [(2340816, 1), [['As you can see, there are many tables referenced there, including SYS.OBJ$.  Now you can look up the indexes on those:'], ['and so on.']], [[" SQL> select index_name from all_indexes where table_name='OBJ$' and owner='SYS';\n\nINDEX_NAME\n------------------------------\nI_OBJ1\nI_OBJ2\nI_OBJ3\n"]], ['What indexes are on the oracle data dictionary tables'], 2], [(2341374, 0), [['For this method to work, you need to do this one time table setup:'], ['Once the Numbers table is set up, create this split function:']], [[' SELECT TOP 10000 IDENTITY(int,1,1) AS Number\n    INTO Numbers\n    FROM sys.objects s1\n    CROSS JOIN sys.objects s2\nALTER TABLE Numbers ADD CONSTRAINT PK_Numbers PRIMARY KEY CLUSTERED (Number)\n']], ['SQL comma delimted column => to rows then sum totals?'], 6], [(2341374, 1), [['Once the Numbers table is set up, create this split function:'], ['You can now easily split a CSV string into a table and join on it:']], [[" CREATE FUNCTION [dbo].[FN_ListToTable]\n(\n     @SplitOn  char(1)      --REQUIRED, the character to split the @List string on\n    ,@List     varchar(8000)--REQUIRED, the list to split apart\n)\nRETURNS TABLE\nAS\nRETURN \n(\n\n    ----------------\n    --SINGLE QUERY-- --this will not return empty rows\n    ----------------\n    SELECT\n        ListValue\n        FROM (SELECT\n                  LTRIM(RTRIM(SUBSTRING(List2, number+1, CHARINDEX(@SplitOn, List2, number+1)-number - 1))) AS ListValue\n                  FROM (\n                           SELECT @SplitOn + @List + @SplitOn AS List2\n                       ) AS dt\n                      INNER JOIN Numbers n ON n.Number < LEN(dt.List2)\n                  WHERE SUBSTRING(List2, number, 1) = @SplitOn\n             ) dt2\n        WHERE ListValue IS NOT NULL AND ListValue!=''\n\n);\nGO \n"]], ['SQL comma delimted column => to rows then sum totals?'], 6], [(2341374, 2), [['You can now easily split a CSV string into a table and join on it:'], ['OUTPUT:']], [[" select * from dbo.FN_ListToTable(',','1,2,3,,,4,5,6777,,,')\n"]], ['SQL comma delimted column => to rows then sum totals?'], 6], [(2341374, 3), [['OUTPUT:'], ['Your can now use a CROSS APPLY to split every row in your table like:']], [[' ListValue\n-----------------------\n1\n2\n3\n4\n5\n6777\n\n(6 row(s) affected)\n']], ['SQL comma delimted column => to rows then sum totals?'], 6], [(2341374, 4), [['Your can now use a CROSS APPLY to split every row in your table like:'], ['OUTPUT:']], [[" DECLARE @YourTable table (NameList varchar(5000), TimeOf int)\nINSERT INTO @YourTable VALUES ('John Smith, Jeremy Boyle, Robert Brits, George Aldrich',  5)\nINSERT INTO @YourTable VALUES ('John Smith, Peter Hanson',    15)\nINSERT INTO @YourTable VALUES ('Jeremy Boyle, Robert Brits',  10)\n\nSELECT\n    st.ListValue AS NameOf, SUM(o.TimeOf) AS TimeOf\n    FROM @YourTable  o\n        CROSS APPLY  dbo.FN_ListToTable(',',o.NameList) AS st\n    GROUP BY st.ListValue\n    ORDER BY st.ListValue\n"]], ['SQL comma delimted column => to rows then sum totals?'], 6], [(2341374, 5), [['OUTPUT:'], ['Using this, I would recommend that you alter your table design and use this output to INSERT into a new table.  That would be a more normalized approach.  Also Don\'t use reserved words for column names, it makes it a hassle.  Notice how I use "NameOf" and "TimeOf", so I avoid using reserved words.']], [[' NameOf                  TimeOf     \n----------------------- -----------\nGeorge Aldrich          5          \nJeremy Boyle            15         \nJohn Smith              20         \nPeter Hanson            15         \nRobert Brits            15         \n\n(5 row(s) affected)\n']], ['SQL comma delimted column => to rows then sum totals?'], 6], [(2342006, 0), [['You would have a  MERGE  statement something like this:'], ['Of course, the  ON  clause can be much more involved if needed. And of course, your  WHEN  statements can also be more complex, e.g.']], [[' MERGE TargetTable AS t\nUSING SourceTable AS src\nON t.PrimaryKey = src.PrimaryKey\n\nWHEN NOT MATCHED THEN\n  INSERT (list OF fields)\n  VALUES (list OF values)\n\nWHEN MATCHED THEN\n  UPDATE\n    SET (list OF SET statements)\n;\n']], ['Best practices for inserting/updating large amount of data in SQL Server 2008'], 2], [(2342006, 1), [['Of course, the  ON  clause can be much more involved if needed. And of course, your  WHEN  statements can also be more complex, e.g.'], ['and so forth.']], [[' WHEN MATCHED AND (some other condition) THEN ......\n']], ['Best practices for inserting/updating large amount of data in SQL Server 2008'], 2], [(2342418, 0), [['You can get the identity columns for a database using the database schema table like this:'], ['You can also find all the identity columns using a VistaDB stored proc:']], [[' select * from [database schema] where typeid = 6\n']], ["Obtain 'Identity' setting for a column in VistaDB"], 3], [(2342418, 1), [['You can also find all the identity columns using a VistaDB stored proc:'], ['And yes, there is still another way.  You can call GetSchemaTable on a reader to get some more information about the underlying structure.']], [[' select * from VistaDBColumnSchema() where is_identity = true\n']], ["Obtain 'Identity' setting for a column in VistaDB"], 3], [(2342418, 2), [['And yes, there is still another way.  You can call GetSchemaTable on a reader to get some more information about the underlying structure.'], ['-10000']], [[' using (VistaDBConnection cn = new VistaDBConnection("Data Source=" + dbName))\n{\n    cn.Open();\n\n    using (VistaDBCommand cmd = new VistaDBCommand("Select * from simpletable", cn))\n    {\n        using (VistaDBDataReader myReader = cmd.ExecuteReader(CommandBehavior.KeyInfo))\n        {\n            //Retrieve column schema into a DataTable.\n            DataTable schemaTable = myReader.GetSchemaTable();\n\n            foreach (DataRow myField in schemaTable.Rows)\n            {\n                foreach (DataColumn myProperty in schemaTable.Columns)\n                {\n                    System.Diagnostics.Debug.WriteLine(myProperty.ColumnName + " = " + myField[myProperty].ToString());\n                }\n            }\n        }\n    }\n}\n']], ["Obtain 'Identity' setting for a column in VistaDB"], 3], [(2342431, 0), [['For this method to work, you need to do this one time table setup:'], ['Once the Numbers table is set up, create this split function:']], [[' SELECT TOP 10000 IDENTITY(int,1,1) AS Number\n    INTO Numbers\n    FROM sys.objects s1\n    CROSS JOIN sys.objects s2\nALTER TABLE Numbers ADD CONSTRAINT PK_Numbers PRIMARY KEY CLUSTERED (Number)\n']], ['How to split cell content and extract information into a new column in an SQL select statement?'], 6], [(2342431, 1), [['Once the Numbers table is set up, create this split function:'], ['You can now easily split a CSV string into a table and join on it:']], [[" CREATE FUNCTION [dbo].[FN_ListToTable]\n(\n     @SplitOn  char(1)      --REQUIRED, the character to split the @List string on\n    ,@List     varchar(8000)--REQUIRED, the list to split apart\n)\nRETURNS TABLE\nAS\nRETURN \n(\n\n    ----------------\n    --SINGLE QUERY-- --this will not return empty rows\n    ----------------\n    SELECT\n        ListValue\n        FROM (SELECT\n                  LTRIM(RTRIM(SUBSTRING(List2, number+1, CHARINDEX(@SplitOn, List2, number+1)-number - 1))) AS ListValue\n                  FROM (\n                           SELECT @SplitOn + @List + @SplitOn AS List2\n                       ) AS dt\n                      INNER JOIN Numbers n ON n.Number < LEN(dt.List2)\n                  WHERE SUBSTRING(List2, number, 1) = @SplitOn\n             ) dt2\n        WHERE ListValue IS NOT NULL AND ListValue!=''\n\n);\nGO \n"]], ['How to split cell content and extract information into a new column in an SQL select statement?'], 6], [(2342431, 2), [['You can now easily split a CSV string into a table and join on it:'], ['OUTPUT:']], [[" select * from dbo.FN_ListToTable(',','1,2,3,,,4,5,6777,,,')\n"]], ['How to split cell content and extract information into a new column in an SQL select statement?'], 6], [(2342431, 3), [['OUTPUT:'], ['Your can now use a CROSS APPLY to split every row in your table like:']], [[' ListValue\n-----------------------\n1\n2\n3\n4\n5\n6777\n\n(6 row(s) affected)\n']], ['How to split cell content and extract information into a new column in an SQL select statement?'], 6], [(2342431, 4), [['Your can now use a CROSS APPLY to split every row in your table like:'], ['OUTPUT:']], [[" DECLARE @YourTable table (RowID int, RowValue varchar(200))\nINSERT INTO @YourTable VALUES (1,'KEY11:VALUE11;KEY12:VALUE12;KEY13:VALUE13')\nINSERT INTO @YourTable VALUES (2,'KEY21:VALUE21;KEY22:VALUE22;KEY23:VALUE23')\nINSERT INTO @YourTable VALUES (3,'KEY31:VALUE31;KEY32:VALUE32;KEY33:VALUE33')\n\n\nSELECT\n    o.RowID,RIGHT(st.ListValue,LEN(st.ListValue)-CHARINDEX(':',st.ListValue)) AS RowValue\n    FROM @YourTable  o\n        CROSS APPLY  dbo.FN_ListToTable(';',o.RowValue) AS st\n"]], ['How to split cell content and extract information into a new column in an SQL select statement?'], 6], [(2342431, 5), [['OUTPUT:'], ['-10000']], [[' RowID       \n----------- -------\n1           VALUE11\n1           VALUE12\n1           VALUE13\n2           VALUE21\n2           VALUE22\n2           VALUE23\n3           VALUE31\n3           VALUE32\n3           VALUE33\n\n(9 row(s) affected)\n']], ['How to split cell content and extract information into a new column in an SQL select statement?'], 6], [(2342999, 0), [['This is the default behavior for PostgreSQL.  Make sure your  search_path  is set correctly.'], ['By default it should be:']], [[' SHOW search_path;\n']], ['Postgres: Is there a way to tie a User to a Schema?'], 3], [(2342999, 1), [['By default it should be:'], ['Update RE you comment: \nHere is what happens on my machine.  Which is what I believe you are wanting.']], [[' search_path\n--------------\n"$user",public\n']], ['Postgres: Is there a way to tie a User to a Schema?'], 3], [(2342999, 2), [['Update RE you comment: \nHere is what happens on my machine.  Which is what I believe you are wanting.'], ['-10000']], [[' skrall=# \\d\nNo relations found.\nskrall=# show search_path;\n  search_path   \n----------------\n "$user",public\n(1 row)\n\nskrall=# create schema skrall;\nCREATE SCHEMA\nskrall=# create table test(id serial);\nNOTICE:  CREATE TABLE will create implicit sequence "test_id_seq" for serial column "test.id"\nCREATE TABLE\nskrall=# \\d\n            List of relations\n Schema |    Name     |   Type   | Owner  \n--------+-------------+----------+--------\n skrall | test        | table    | skrall\n skrall | test_id_seq | sequence | skrall\n(2 rows)\n\nskrall=# select * from test;\n id \n----\n(0 rows)\n\nskrall=# \n']], ['Postgres: Is there a way to tie a User to a Schema?'], 3], [(2344590, 0), [['You need to use the operator  PIVOT  in your query to acheive this.Here is the example and explanation on how you can do that.The example is referenced from  this  source.  '], ['1.The first part of the query  ']], [[" ---I assumed your tablename as TESTTABLE---\nDECLARE @cols NVARCHAR(2000)\nDECLARE @query NVARCHAR(4000)\n\nSELECT  @cols = STUFF(( SELECT DISTINCT TOP 100 PERCENT\n                                '],[' + t.Name\n                        FROM    TESTTABLE AS t\n                        ORDER BY '],[' + t.Name\n                        FOR XML PATH('')\n                      ), 1, 2, '') + ']'\n\nSET @query = N'SELECT '+ @cols +' FROM\n(SELECT t1.Name , t1.Count FROM TESTTABLE AS t1) p\nPIVOT (MAX([Count]) FOR Name IN ( '+ @cols +' ))\nAS pvt;'\n\nEXECUTE(@query)\n"]], ['How do i transform rows into columns in sql server 2005'], 7], [(2344590, 1), [['1.The first part of the query  '], ['gives you a nice flattened result of your Name column values in a single row as follow']], [[" SELECT  @cols = STUFF(( SELECT DISTINCT TOP 100 PERCENT\n                        '],[' + t.Name\n                FROM TESTTABLE AS t\n                ORDER BY '],[' + t.Name\n                FOR XML PATH('')\n              ), 1, 2, '') + ']'\n"]], ['How do i transform rows into columns in sql server 2005'], 7], [(2344590, 2), [['gives you a nice flattened result of your Name column values in a single row as follow'], ['i.e  ']], [[' [Cheryl],[Drew],[Karen],[Kath],[Kirk],[Matt]  \n']], ['How do i transform rows into columns in sql server 2005'], 7], [(2344590, 3), [['i.e  '], ['3.This query pulls all the rows of data that we need to create the cross-tab results.  The (p) after the query is creating a temporary table of the results that can then be used to satisfy the query for step 1.']], [[' Select [Chery],[Drew],[Morgan],[Kath],[Kirk],[Matt] \n']], ['How do i transform rows into columns in sql server 2005'], 7], [(2344590, 4), [['3.This query pulls all the rows of data that we need to create the cross-tab results.  The (p) after the query is creating a temporary table of the results that can then be used to satisfy the query for step 1.'], ['4.The PIVOT expression ']], [[' (SELECT t1.Name, t1.Count FROM  TESTTABLE AS t1) p\n']], ['How do i transform rows into columns in sql server 2005'], 7], [(2344590, 5), [['4.The PIVOT expression '], ['does the actual summarization and puts the results into a temporary table called pvt as  ']], [[' PIVOT (MAX (Count) FOR Name IN ( @cols) AS pvt\n']], ['How do i transform rows into columns in sql server 2005'], 7], [(2344590, 6), [['does the actual summarization and puts the results into a temporary table called pvt as  '], ['-10000']], [[' Chery | Drew | Morgon | Kath | Kirk | Matt  \n-------------------------------------------  \n257     1500     13      500    200    76\n']], ['How do i transform rows into columns in sql server 2005'], 7], [(2345623, 0), [['So to get the code working I changed it like so:'], ['Call the method']], [['  public int checkCurrentDbVersion(Context context){\n        // Restore preferences\n        SharedPreferences settings = context.getSharedPreferences(PREFERENCES, 0);\n        int dbUpgradeVar = settings.getInt("dbUpgradeVar", 1);\n        return dbUpgradeVar;        \n    }\n']], ["Problems calling Android's getSharedPreferences(); from SQLiteOpenHelper class"], 2], [(2345623, 1), [['Call the method'], ['-10000']], [[' private final Context myContext;\n\n/*\n*do some other stuff here\n*/\n\n    MainClass currentDbVersion = new MainClass(); \n\n    int oldDbVersion = currentDbVersion.checkCurrentDbVersion(myContext);\n']], ["Problems calling Android's getSharedPreferences(); from SQLiteOpenHelper class"], 2], [(2346374, 0), [['-10000'], ['This variant also works (in at least one DBMS - namely IBM Informix Dynamic Server 11.50):']], [[" SELECT SD.EmpId, SD.RemainingAdvance \nFROM \nSalaryDetails SD INNER JOIN \n   (SELECT SD2.EmpID, MAX(SD2.CreatedDate) AS MAXDate \n   FROM SalaryDetails SD2 GROUP BY SD2.EmpID) AS SD2\nON SD.EmpID = SD2.EmpID\nINNER JOIN Employee E\nON SD.EmpID = E.EmpID\nWHERE E.Desig_Id = '27' AND SD.CreatedDate = SD2.MaxDate\n"]], ['What is wrong in this sql select statement?'], 2], [(2346374, 1), [['This variant also works (in at least one DBMS - namely IBM Informix Dynamic Server 11.50):'], ["The compound join in the first ON clause might improve the performance of the query - but it is quite possible that the optimizer would hoist the 'AND SD.CreatedDate = SD2.MaxDate' condition anyway, meaning you wouldn't spot any difference even if you examined the two query plans.  I'm not quite sure of the best way to indent the table expressions after the main FROM clause."]], [[" SELECT SD.EmpId, SD.RemainingAdvance \n  FROM SalaryDetails SD\n       INNER JOIN \n       (SELECT SD2.EmpID, MAX(SD2.CreatedDate) AS MAXDate \n          FROM SalaryDetails SD2 GROUP BY SD2.EmpID) AS SD2\n       ON SD.EmpID = SD2.EmpID AND SD.CreatedDate = SD2.MaxDate\n       INNER JOIN Employee E\n       ON SD.EmpID = E.EmpID\n WHERE E.Desig_Id = '27'\n"]], ['What is wrong in this sql select statement?'], 2], [(2346914, 0), [['Assuming that your new  id  has  AUTO_INCREMENT  this solution using  CROSS JOIN  and  COALESCE  should work for you.  name ,  country  and  description  from  death  will be ignored, if available in  birth .'], ['Alternatively, insert all rows from  birth :']], [[' INSERT INTO new_table ( name, country, bdate, ddate, description, link )\n(\n  SELECT\n    COALESCE(b.name, d.name),\n    COALESCE(b.country, d.country),\n    b.birthday_date,\n    d.death_date,\n    COALESCE(b.description, d.description),\n    COALESCE(b.link, d.link)\n  FROM birth b\n  CROSS JOIN death d ON ( d.link = b.link )\n)\n']], ['Merge tables by inserting null values for columns where no value can be derived from the merging tables?'], 4], [(2346914, 1), [['Alternatively, insert all rows from  birth :'], ['Then update those rows with a `death_date´ if available:']], [[' INSERT INTO new_table ( name, country, bdate, ddate, description, link )\n(\n  SELECT name, country, birthday_date, NULL, description, link\n  FROM birth\n)\n']], ['Merge tables by inserting null values for columns where no value can be derived from the merging tables?'], 4], [(2346914, 2), [['Then update those rows with a `death_date´ if available:'], ['Finally, add all rows from  death , that have no entry in  birth :']], [[' UPDATE new_table nt\nSET ddate = (SELECT death_date FROM death d WHERE d.link = nt.link )\n']], ['Merge tables by inserting null values for columns where no value can be derived from the merging tables?'], 4], [(2346914, 3), [['Finally, add all rows from  death , that have no entry in  birth :'], ['-10000']], [[' INSERT INTO new_table ( name, country, bdate, ddate, description, link )\n(\n  SELECT name, country, NULL, death_date, description, link\n  FROM death d\n  WHERE NOT EXISTS ( SELECT NULL\n                     FROM new_table\n                     WHERE link = d.link\n                   )\n)\n']], ['Merge tables by inserting null values for columns where no value can be derived from the merging tables?'], 4], [(2347067, 0), [["I'd first set parent ID to NULL rather than 0, but that's personal preference."], ['You can then manipulate the output something along these lines:']], [[' SELECT * FROM table t1\nLEFT JOIN table t2 ON t2.parent_id = t1.role_id\nLEFT JOIN table t3 ON t3.parent_id = t2.role_id\nWHERE t1.parent_id IS NULL\n']], ['Hierarchical Data in MySql'], 2], [(2347067, 1), [['You can then manipulate the output something along these lines:'], ['-10000']], [[' SELECT\n        (CASE \n        WHEN (t1.name IS NULL AND t2.name IS NULL) THEN t3.name\n        WHEN (t1.name IS NULL AND t2.name IS NOT NULL) THEN t2.name\n        ELSE t1.name END)  AS first,\n        (CASE \n        WHEN (t1.name IS NOT NULL AND t2.name IS NOT NULL) THEN t2.name\n        WHEN (t2.name IS NULL AND t3.name IS NOT NULL) THEN NULL\n        ELSE t3.name END)  AS second,\n        (CASE \n        WHEN (t1.name IS NOT NULL) THEN t3.name\n        ELSE  NULL END)  AS third\nFROM\n']], ['Hierarchical Data in MySql'], 2], [(2348887, 0), [["Assuming that you are running under MySQL  (based on your question's tag as well as your original SQL query), then you are able to issue the following statement:"], ['If you require better portability (also being able to issue the query on e.g. Postgres), you need a slightly more complex query, here using a single  JOIN :']], [[' SELECT subID1, subID2,stu1,stu2,comparisonID,MAX(stu1vers+stu2vers) AS maxvers\n FROM comparisons\n WHERE assignmentID=9 AND stu1!=stu2\n GROUP BY LEAST(stu1,stu2), GREATEST(stu1,stu2);\n']], ['Selecting Max of two columns (revisited)'], 3], [(2348887, 1), [['If you require better portability (also being able to issue the query on e.g. Postgres), you need a slightly more complex query, here using a single  JOIN :'], ['Note that the more portable query may still return  two  rows for a unique pair of students if both combinations yield the same  maxvers  (unless you decide to provided a rule to discriminate between the two), e.g.:']], [[' SELECT c1.subID1, c1.subID2,c1.stu1,c1.stu2,c1.comparisonID,c2.versmax\n FROM comparisons AS c1\n INNER JOIN (\n  SELECT\n    LEAST(stu1,stu2) AS stuA,\n    GREATEST(stu1,stu2) AS stuB,\n    MAX(stu1vers+stu2vers) AS versmax\n   FROM comparisons\n   WHERE assignmentID=9 AND stu1<>stu2\n   GROUP BY stuA, stuB\n ) AS c2\n ON ((c1.stu1=c2.stuA AND c1.stu2=c2.stuB) OR\n     (c1.stu2=c2.stuA AND c1.stu1=c2.stuB)\n    ) AND c1.stu1vers+c1.stu2vers=c2.versmax\n WHERE c1.assignmentID=9 AND c1.stu1<>c1.stu2;\n']], ['Selecting Max of two columns (revisited)'], 3], [(2348887, 2), [['Note that the more portable query may still return  two  rows for a unique pair of students if both combinations yield the same  maxvers  (unless you decide to provided a rule to discriminate between the two), e.g.:'], ['-10000']], [[' +--------+--------+------+------+--------------+---------+ \n| subID1 | subID2 | stu1 | stu2 | comparisonID | maxvers | \n+--------+--------+------+------+--------------+---------+ \n|     15 |     11 |    1 |    6 |           64 |       6 | \n|     11 |      3 |    6 |    1 |           55 |       6 | \n+--------+--------+------+------+--------------+---------+ \n']], ['Selecting Max of two columns (revisited)'], 3], [(2351875, 0), [['First, a table with a default value ...'], ['Next a procedure which updates the default column ...']], [[" SQL> create table t23 (\n  2      id number not null primary key\n  3      , col_d date default sysdate not null )\n  4  /\n\nTable created.\n\nSQL> insert into t23 values (1, trunc(sysdate, 'yyyy'))\n  2  /\n\n1 row created.\n\nSQL> select * from t23\n  2  /\n\n        ID COL_D\n---------- ---------\n         1 01-JAN-10\n\nSQL>\n"]], ['default value, oracle sp call'], 5], [(2351875, 1), [['Next a procedure which updates the default column ...'], ["... but which doesn't work as we would like:    "]], [[' SQL> create or replace procedure set_t23_date\n  2      ( p_id in t23.id%type\n  3        , p_date in t23.col_d%type )\n  4  is\n  5  begin\n  6      update t23\n  7      set col_d = p_date\n  8      where id = p_id;\n  9  end;\n 10  /\n\nProcedure created.\n\nSQL>\n']], ['default value, oracle sp call'], 5], [(2351875, 2), [["... but which doesn't work as we would like:    "], ["So, let's try adding a DEFAULT option ...    "]], [[' SQL> exec set_t23_date ( 1, null )\nBEGIN set_t23_date ( 1, null ); END;\n\n*\nERROR at line 1:\nORA-01407: cannot update ("APC"."T23"."COL_D") to NULL\nORA-06512: at "APC.SET_T23_DATE", line 6\nORA-06512: at line 1\n\n\nSQL>\n']], ['default value, oracle sp call'], 5], [(2351875, 3), [["So, let's try adding a DEFAULT option ...    "], ['... and lo!     ']], [[' SQL> create or replace procedure set_t23_date\n  2      ( p_id in t23.id%type\n  3        , p_date in t23.col_d%type )\n  4  is\n  5  begin\n  6      if p_date is not null then\n  7          update t23\n  8          set col_d = p_date\n  9          where id = p_id;\n 10      else\n 11          update t23\n 12          set col_d = default\n 13          where id = p_id;\n 14      end if;\n 15  end;\n 16  /\n\nProcedure created.\n\nSQL>\n']], ['default value, oracle sp call'], 5], [(2351875, 4), [['... and lo!     '], ["I ran this example on an 11g database.  I can't remember when Oracle introduced this exact support for DEFAULT, but it has been quite a while (9i???)"]], [[' SQL> exec set_t23_date ( 1, null )\n\nPL/SQL procedure successfully completed.\n\nSQL>\nSQL> select * from t23\n  2  /\n\n        ID COL_D\n---------- ---------\n         1 28-FEB-10\n\nSQL>\n']], ['default value, oracle sp call'], 5], [(2352469, 0), [['In  SQL Server 2005 ,  PostgreSQL 8.4  and  Oracle 11g :'], ['In  Oracle  before  11g :']], [[' WITH    \n        -- uncomment the next line in PostgreSQL\n        -- RECURSIVE\n        q AS\n        (\n        SELECT  directoryId\n        FROM    directories\n        WHERE   directoryId = 1\n        UNION ALL\n        SELECT  d.directoryId \n        FROM    q\n        JOIN    directories\n        WHERE   parentId = q.directoryId\n        )\nSELECT  c.*\nFROM    q\nJOIN    content c\nON      c.directory = q.directoryId\n']], ['Recursive subdirectory SQL problem'], 2], [(2352469, 1), [['In  Oracle  before  11g :'], ['For  PostgreSQL 8.3  and below see this article:']], [[' SELECT  c.*\nFROM    (\n        SELECT  directoryId\n        FROM    directories\n        START WITH\n                directoryId = 1\n        CONNECT BY\n                parent = PRIOR directoryID\n        ) q\nJOIN    content c\nON      c.directory = q.directoryId\n']], ['Recursive subdirectory SQL problem'], 2], [(2353377, 0), [['You should look at For Xml Explicit. For example, so using the following schema:'], ['And the following query:']], [[" Create Table #Employees\n(\n    Id int not null identity(1,1) primary key clustered\n    , EmployeeName nvarchar(100) not null\n    , EmployeeSalary decimal(18,4) not null\n)\n\nInsert #Employees Values( 'ABC', 12345 )\nInsert #Employees Values( 'DEF', 67890 )\nInsert #Employees Values( 'GHI', 11223 )\n"]], ['Format XML returned from SQL for XML'], 3], [(2353377, 1), [['And the following query:'], ['I get the following which is close:']], [[' Select 1 As Tag\n    , Null As Parent\n    , Id As [EmployeeDetails!1!Id!Hide]\n    , Null As [EmployeeName!2!Name]\n    , Null As [EmployeeSalary!3!Salary]\nFrom #Employees\nUnion All\nSelect 2 As Tag\n    , 1 As Parent\n    , Id\n    , EmployeeName\n    , Null\nFrom #Employees\nUnion All\nSelect 3 As Tag\n    , 1 As Parent\n    , Id\n    , Null\n    , EmployeeSalary\nFrom #Employees As EmployeeDetails\nOrder By [EmployeeDetails!1!Id!Hide]\nFor Xml Explicit\n']], ['Format XML returned from SQL for XML'], 3], [(2353377, 2), [['I get the following which is close:'], ['-10000']], [[' <EmployeeDetails>\n    <EmployeeName Name="ABC"/>\n    <EmployeeSalary Salary="12345.0000"/>\n</EmployeeDetails>\n<EmployeeDetails>\n    <EmployeeName Name="DEF"/>\n    <EmployeeSalary Salary="67890.0000"/>\n</EmployeeDetails>\n<EmployeeDetails>\n    <EmployeeName Name="GHI"/>\n    <EmployeeSalary Salary="11223.0000"/>\n</EmployeeDetails>\n']], ['Format XML returned from SQL for XML'], 3], [(2353669, 0), [['Of course a database can have relationships like that:'], ['Examples:']], [[' Users\n  id\n  name\n  address\n\nSnippets\n  id\n  user_id\n  body\n\nComments\n  id\n  body\n  snippet_id\n  user_id\n']], ['Can my database have a triangular relationship?'], 2], [(2353669, 1), [['Examples:'], ['-10000']], [[' --Get all comments by a user\nSELECT * FROM comments WHERE user_id = 1\n\n--Get all snippets by a user\nSELECT * FROM snippets WHERE user_id = 1\n\n--Get all comments on a snippet\nSELECT * FROM comments WHERE snippet_id = 1\n\n--Get all comments on a particular snippet by a particular user\nSELECT * FROM comments WHERE snippet_id = 1 AND user_id = 1\n']], ['Can my database have a triangular relationship?'], 2], [(2353790, 0), [['Looks like you want the max B value for each A value, so'], ['If you want entire record associated with the  A  and  MAX(b)  values, use:']], [['   SELECT t.a,\n         MAX(t.b)\n    FROM TABLE t\nGROUP BY t.a\n']], ['Simple query in DB2 for AS400'], 2], [(2353790, 1), [['If you want entire record associated with the  A  and  MAX(b)  values, use:'], ['-10000']], [[' SELECT t.a,\n       t.b,\n       t.c\n  FROM TABLE t\n  JOIN (SELECT x.a,\n               MAX(x.b) AS max_b\n          FROM TABLE x\n      GROUP BY x.a) y ON y.a = t.a\n                     AND y.max_b = t.b\n']], ['Simple query in DB2 for AS400'], 2], [(2354814, 0), [['The reference guide is the best starting point to learn about  Zend_Db_Select . Along with my example below, of course:'], ["It's then as simple as this to fetch a row:"]], [[" //$db is an instance of Zend_Db_Adapter_Abstract\n$select = $db->select();\n$select->from(array('p' => 'person'), array('person_id', 'name', 'dob'))\n       ->join(array('pa' => 'Person_Address'), 'pa.person_id = p.person_id', array())\n       ->join(array('a' => 'Address'), 'a.address_id = pa.address_id', array('address_id', 'street', 'city', 'state', 'country'));\n"]], ['Zend Framework: How to combine three tables in one query using Joins?'], 3], [(2354814, 1), [["It's then as simple as this to fetch a row:"], ["In debugging Zend_Db_Select there's a clever trick you can use - simply print the select object, which in turn invokes the toString method to produce SQl:"]], [[' $db->fetchRow($select);\n']], ['Zend Framework: How to combine three tables in one query using Joins?'], 3], [(2354814, 2), [["In debugging Zend_Db_Select there's a clever trick you can use - simply print the select object, which in turn invokes the toString method to produce SQl:"], ['-10000']], [[' echo $select; //prints SQL\n']], ['Zend Framework: How to combine three tables in one query using Joins?'], 3], [(2354974, 0), [["You can search for matching id2's, and use  count(distinct id2)  to verify that all id2's were matched.  The count should be equal to the number of id2's. For id2 = [1,2,3], the count should be 3:"], ['This prints 1.  For id2 = [1,6]:']], [[' select id1 \nfrom YourTable\nwhere id2 in (1,2,3)\ngroup by id1\nhaving count(distinct id2) = 3;\n']], ['How do I SELECT for the following?'], 3], [(2354974, 1), [['This prints 1.  For id2 = [1,6]:'], ['This prints 2.  For id2 = [1]:']], [[' select id1 \nfrom YourTable\nwhere id2 in (1,6)\ngroup by id1\nhaving count(distinct id2) = 2;\n']], ['How do I SELECT for the following?'], 3], [(2354974, 2), [['This prints 2.  For id2 = [1]:'], ['This prints 1, 2, 3.']], [[' select id1 \nfrom YourTable\nwhere id2 in (1)\ngroup by id1\nhaving count(distinct id2) = 1;\n']], ['How do I SELECT for the following?'], 3], [(2355038, 0), [['I assigned two properties, named "Property 1" and "Property 2", each defined in root with values "Root Prop 1" and "Root Prop 2" respectively.  In A, I overrode "Property 1" with value "A Prop 1" and in B, I overrode "Property 2" with value "B Prop 2".'], ["The where clause in Nathan's solution should be a condition of the join between keys and v, resulting in the revised procedure shown below (also I've renamed DataValue to KeyValuePair to be consistent with the original question):"]], [[" set identity_insert Node on\ninsert into Node(ID,ParentID,Name)\nvalues (1,null,'Root'),(2,1,'A'),(3,1,'B'),(4,2,'A1'),(5,2,'A2'),\n       (6,3,'B1'),(7,3,'B2')\nset identity_insert Node off\n\ninsert into KeyValuePair(KeyName, [Value], NodeID)\nvalues ('Property 1','Root Prop 1',1),\n('Property 2','Root Prop 2',1),\n('Property 1','A Prop 1',2),\n('Property 2','B Prop 2',3)\n"]], ['Tricky logic problem - how to create a set-based solution for this query?'], 3], [(2355038, 1), [["The where clause in Nathan's solution should be a condition of the join between keys and v, resulting in the revised procedure shown below (also I've renamed DataValue to KeyValuePair to be consistent with the original question):"], ['This yielded the correct results as expected:']], [[' create procedure dbo.ListDataValues\n    @nodeid bigint\nas\nbegin\n    with nodes as (\n        select ID, ParentID, 0 as Level\n        from Node n where ID=@nodeid\n        union all\n        select n.ID, n.ParentID, c.Level+1 as Level\n        from Node n inner join nodes c on c.ParentID = n.ID\n    ),\n    keys as (\n        select distinct(KeyName)\n        from KeyValuePair\n        where NodeID in (select ID from nodes)\n    )\n    select\n        keys.KeyName,\n        v.Value,\n        i.Value as [InheritedValue],\n        i.NodeID as [InheritedFromNodeID]\n    from\n        keys\n        left join KeyValuePair v on v.KeyName = keys.KeyName\n                                     and v.NodeID = @nodeid\n        left join KeyValuePair i on i.KeyName = keys.KeyName\n            and i.NodeID = (select top 1 NodeID from KeyValuePair d\n                            inner join nodes k on k.ID = d.NodeID\n                            where Level > 0 and d.KeyName = i.KeyName\n                            order by [Level])\nend\ngo\n']], ['Tricky logic problem - how to create a set-based solution for this query?'], 3], [(2355038, 2), [['This yielded the correct results as expected:'], ['-10000']], [[' KeyName      Value   InheritedValue    InheritedFromNodeID\n------------ ------- ----------------- --------------------\nProperty 1   NULL    A Prop 1          2\nProperty 2   NULL    Root Prop 2       1\n']], ['Tricky logic problem - how to create a set-based solution for this query?'], 3], [(2355302, 0), [['This statement:'], ['This statement:']], [[" SELECT  COUNT(*) AS found\nFROM    names\nWHERE   name = 'Hulk'\n"]], ['Should I use If exist or Count in this statement?'], 2], [(2355302, 1), [['This statement:'], ['will return  1  if at least one record exists, otherwise it will return nothing.']], [[" SELECT  1 AS found\nWHERE   EXISTS\n        (\n        SELECT  NULL\n        FROM    names\n        WHERE   name = 'Hulk'\n        )\n"]], ['Should I use If exist or Count in this statement?'], 2], [(2355480, 0), [['You can use  dbcc checkident  to reset the identity seed, like:'], ['This prints:']], [[" if object_id('IdentityTest') is not null\n    drop table IdentityTest\ncreate table IdentityTest (id int identity, name varchar(30))\ngo\ninsert into IdentityTest (name) values ('Jeff')\ninsert into IdentityTest (name) values ('Joel')\nDBCC CHECKIDENT ('IdentityTest', RESEED, 0)\ninsert into IdentityTest (name) values ('Julia')\ninsert into IdentityTest (name) values ('Christine')\ngo\nselect * from IdentityTest \n"]], ["whether the 'identity' used in sql server has been used twice inside same table"], 2], [(2355480, 1), [['This prints:'], ['-10000']], [[' 1    Jeff\n2    Joel\n1    Julia\n2    Christine\n']], ["whether the 'identity' used in sql server has been used twice inside same table"], 2], [(2355791, 0), [['-10000'], ['-10000']], [['SQL 2000 Based solution DECLARE @Stack TABLE (\n  StackID INTEGER IDENTITY\n  , Category VARCHAR(20)\n  , RootID INTEGER\n  , ChildID INTEGER\n  , Visited BIT)\n\nINSERT INTO @Stack\nSELECT  [Category] = c.category_name\n        , [RootID] = c.category_id\n        , [ChildID] = c.category_id\n        , 0\nFROM    Categories c\n\nWHILE EXISTS (SELECT * FROM @Stack WHERE Visited = 0)\nBEGIN\n  DECLARE @StackID INTEGER\n  SELECT  @StackID = MAX(StackID) FROM    @Stack\n\n  INSERT INTO @Stack\n  SELECT  st.Category\n          , st.RootID\n          , c.category_id\n          , 0\n  FROM    @Stack st\n          INNER JOIN Categories c ON c.father_id = st.ChildID  \n  WHERE   Visited = 0\n\n  UPDATE  @Stack\n  SET     Visited = 1\n  WHERE   StackID <= @StackID\nEND\n\nSELECT  st.RootID\n        , st.Category\n        , COUNT(s.sales_id)\nFROM    @Stack st\n        INNER JOIN Sales s ON s.category_id = st.ChildID\nGROUP BY st.RootID, st.Category\nORDER BY st.RootID\n']], ['Help with generating a report from data in a parent-children model'], 2], [(2355791, 1), [['-10000'], ['-10000']], [[' ;WITH QtyCTE AS (\n  SELECT  [Category] = c.category_name\n          , [RootID] = c.category_id\n          , [ChildID] = c.category_id\n  FROM    Categories c\n  UNION ALL \n  SELECT  cte.Category\n          , cte.RootID\n          , c.category_id\n  FROM    QtyCTE cte\n          INNER JOIN Categories c ON c.father_id = cte.ChildID\n)\nSELECT  cte.RootID\n        , cte.Category\n        , COUNT(s.sales_id)\nFROM    QtyCTE cte\n        INNER JOIN Sales s ON s.category_id = cte.ChildID\nGROUP BY cte.RootID, cte.Category\nORDER BY cte.RootID\n']], ['Help with generating a report from data in a parent-children model'], 2], [(2357515, 0), [['-10000'], ['In SQL Server 2012+:']], [[' WITH    rows AS\n        (\n        SELECT  *, ROW_NUMBER() OVER (ORDER BY DataDate) AS rn\n        FROM    mytable\n        )\nSELECT  DATEDIFF(second, mc.DataDate, mp.DataDate)\nFROM    rows mc\nJOIN    rows mp\nON      mc.rn = mp.rn - 1\n']], ['Calculate Time Difference Between Two Rows'], 2], [(2357515, 1), [['In SQL Server 2012+:'], ['-10000']], [[' SELECT  DATEDIFF(second, pDataDate, dataDate)\nFROM    (\n        SELECT  *,\n                LAG(dataDate) OVER (ORDER BY dataDate) pDataDate\n        FROM    rows\n        ) q\nWHERE   pDataDate IS NOT NULL\n']], ['Calculate Time Difference Between Two Rows'], 2], [(2358318, 0), [['no you need to do it in separate batches '], ['you can however add more than 1 column at a time']], [[' create table test(id int)\ngo\n\nalter table Test add id2 int\ngo\nalter table Test ALTER COLUMN id DECIMAL (5, 2) \n']], ['Syntax for Alter Column and Add Column in same query'], 2], [(2358318, 1), [['you can however add more than 1 column at a time'], ['-10000']], [[' alter table Test add id3 int, id4 int\ngo\n']], ['Syntax for Alter Column and Add Column in same query'], 2], [(2358477, 0), [["After finding out that the  LAG  function worked, I thought I might be able to get a  StrID  and the previous row's  StrID , concatenate them together, and then somehow keep doing that for all the rows for a  Person .  I found  this AskTom question  and was able to adapt it to work with my tables:"], ['I now get data in the format I expected, namely:']], [[" SELECT Person, \n       SUBSTR(\n         MAX(list) KEEP (DENSE_RANK FIRST ORDER BY lev DESC),\n         2\n       ) AS StrIDs\nFROM ( \n       SELECT Person,\n              SYS_CONNECT_BY_PATH(StrID, ', ') AS list,\n              LEVEL AS lev\n       FROM (\n              SELECT Person,\n                     StrID,\n                     LAG(StrID, 1)\n                       OVER (PARTITION BY Person ORDER BY StrID) AS prev_id\n              FROM my_table\n              WHERE other_conditions = 'blah blah'\n            )\n       START WITH prev_id IS NULL\n       CONNECT BY PRIOR StrID=prev_id\n     )\nGROUP BY Person\nORDER BY Person\n"]], ['Report Builder 2.0 or Oracle string aggregation'], 2], [(2358477, 1), [['I now get data in the format I expected, namely:'], ['-10000']], [[' Person StrIDs\njeff   a, b, c\nlinda  k, l, m\n']], ['Report Builder 2.0 or Oracle string aggregation'], 2], [(2358560, 0), [['Items:'], ['ItemDiamonds']], [[' p_Id >> PK\n\nc_Id >> FK\n']], ['Help with Database Design'], 2], [(2358560, 1), [['ItemDiamonds'], ['So Item ID and Diamond ID are individually foreign keys, and together (Item ID, Diamond ID) form a primary or unique key.  The no_of_diamonds attribute assumes an Item can have more than one of any type of Diamond.  ']], [[' d_Id >> FK  >>\n            >>  UK or PK\np_id >> FK  >>\n\nno_of_diamonds \n']], ['Help with Database Design'], 2], [(2358691, 0), [['Put this in cell F2'], ['and this in cell I2']], [[' =IF(C2="",C1,C2)\n']], ['Excel: Generate a SQL-Query from huge Excel'], 2], [(2358691, 1), [['and this in cell I2'], ['then copy the formulas up and down in columns F and I.']], [[' ="INSERT INTO SomeTable VALUES(\'" & B2 & "\',\'" & F2 & "\')"\n']], ['Excel: Generate a SQL-Query from huge Excel'], 2], [(2358771, 0), [["In short no you can't, but you can add to your search_path."], ['You can script a query of the case-insensitive named schemas and set them in the scripts environment.']], [[' test=# create schema "ECARROLL";\nCREATE SCHEMA\ntest=# create table "ECARROLL".foo ( foobar int );\nCREATE TABLE\ntest=# select * from foo;\nERROR:  relation "foo" does not exist\n']], ['Postgres Schema Issue'], 2], [(2358771, 1), [['You can script a query of the case-insensitive named schemas and set them in the scripts environment.'], ['-10000']], [[' test=# SELECT schema_name FROM information_schema.schemata WHERE schema_name ILIKE current_user;\n schema_name \n-------------\n ECARROLL\n']], ['Postgres Schema Issue'], 2], [(2359205, 0), [["You'll have to attach Database X with Database Y using the  ATTACH  command, then run the appropriate Insert Into commands for the tables you want to transfer."], ['Or, if the columns are not matched up in order:']], [[' INSERT INTO X.TABLE SELECT * FROM Y.TABLE;\n']], ['Copying data from one SQLite database to another'], 2], [(2359205, 1), [['Or, if the columns are not matched up in order:'], ['-10000']], [[' INSERT INTO X.TABLE(fieldname1, fieldname2) SELECT fieldname1, fieldname2 FROM Y.TABLE;\n']], ['Copying data from one SQLite database to another'], 2], [(2360396, 0), [['Specifying the columns on your query should do the trick:'], ['To get around the fact that some data is only in items_a and some data is only in items_b, you would be able to do:']], [[' select a.col1, b.col2, a.col3, b.col4, a.category_id \nfrom items_a a, items_b b \nwhere a.category_id = b.category_id\n']], ['How can I merge the columns from two tables into one output?'], 2], [(2360396, 1), [['To get around the fact that some data is only in items_a and some data is only in items_b, you would be able to do:'], ["The coalesce function will return the first non-null value, so for each row if col1 is non null, it'll use that, otherwise it'll get the value from col2, etc."]], [[' select \n  coalesce(a.col1, b.col1) as col1, \n  coalesce(a.col2, b.col2) as col2,\n  coalesce(a.col3, b.col3) as col3,\n  a.category_id\nfrom items_a a, items_b b\nwhere a.category_id = b.category_id\n']], ['How can I merge the columns from two tables into one output?'], 2], [(2362503, 0), [['Something like'], ['You can then try something like']], [[' SELECT DATENAME(DW, GETDATE())\n']], ['Group Specific set of data by Day'], 2], [(2362503, 1), [['You can then try something like'], ['-10000']], [[" DECLARE @Table TABLE(\n        VAL FLOAT,\n        DateVal DATETIME\n)\n\nINSERT INTO @Table SELECT 1, '01 Jan 2010'\nINSERT INTO @Table SELECT 2, '02 Jan 2010'\nINSERT INTO @Table SELECT 3, '03 Jan 2010'\nINSERT INTO @Table SELECT 4, '08 Jan 2010'\nINSERT INTO @Table SELECT 5, '09 Jan 2010'\n\nSELECT  DATENAME(DW,DateVal),\n        SUM(VAL)\nFROM    @Table\nGROUP BY DATENAME(DW,DateVal)\n"]], ['Group Specific set of data by Day'], 2], [(2367162, 0), [['You can use the COALESCE function to achieve this:'], ['In later versions of sql server (2005 and later), it is also possible to do this using XML Path() ']], [[" declare @result varchar(max)\n\nselect @result = COALESCE(@result + ', ', '') + name\nfrom users\n\nselect @result\n"]], ['Join query result to a single line of values separated by comma'], 2], [(2367162, 1), [['In later versions of sql server (2005 and later), it is also possible to do this using XML Path() '], ['-10000']], [[" select name + ','\nfrom users\nfor xml path('')\n"]], ['Join query result to a single line of values separated by comma'], 2], [(2367399, 0), [["In such a case I'd consider modifying the Address table to be as such"], ['which would save having two tables (WorkAddress and HomeAddress containing the same kind of data), but as I say, it depends on how complex your model is going to be. For example, a N:N relationship between address might be more appropriate, i.e.']], [[' Address (\n  addressid,\n  personid,\n  addresstype\n  address,\n  city,\n  state,\n  zip\n)\n']], ['MS SQL: One Large, Multi-Column dbo.Person table or Multiple Subsets With Multiple Joins?'], 2], [(2367399, 1), [['which would save having two tables (WorkAddress and HomeAddress containing the same kind of data), but as I say, it depends on how complex your model is going to be. For example, a N:N relationship between address might be more appropriate, i.e.'], ['would then allow for the fact that multiple persons can live at the same address.']], [[' Address (\n  addressid,\n  address,\n  city,\n  state,\n  zip\n)\n\nAddress_Person (\n  addressid,\n  personid\n  addresstype\n)\n']], ['MS SQL: One Large, Multi-Column dbo.Person table or Multiple Subsets With Multiple Joins?'], 2], [(2367485, 0), [['Assuming you have some sort of ID column, the most effective way is probably to use  UNPIVOT  so you can use the normal row-based  AVG  operator (which ignores  NULL  values):'], ["If you don't have the ID column, you can generate a surrogate ID using  ROW_NUMBER :"]], [[' DECLARE @Tbl TABLE\n(\n    ID int,\n    B1 int,\n    B2 int,\n    B3 int\n)\n\nINSERT @Tbl (ID, B1, B2, B3) VALUES (1, 10, 20, 30)\nINSERT @Tbl (ID, B1, B2, B3) VALUES (2, 10, NULL, 30)\nINSERT @Tbl (ID, B1, B2, B3) VALUES (3, 10, NULL, NULL)\n\nSELECT ID, AVG(Value) AS Average\nFROM @Tbl\nUNPIVOT (Value FOR B IN (B1, B2, B3)) AS u\nGROUP BY ID\n']], ['MS-SQL Average Columns with NULL'], 2], [(2367485, 1), [["If you don't have the ID column, you can generate a surrogate ID using  ROW_NUMBER :"], ['-10000']], [[' ;WITH CTE AS\n(\n    SELECT\n        B1, B2, B3,\n        ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS ID\n    FROM @Tbl\n)\nSELECT ID, AVG(Value)\nFROM CTE\nUNPIVOT (Value FOR B IN (B1, B2, B3)) AS u\nGROUP BY ID\n']], ['MS-SQL Average Columns with NULL'], 2], [(2367688, 0), [["In addition, you may have an open connection through Visual Studio's Server Explorer Data Connections, so be sure to disconnect from any database there."], ['Using .NET Refector the following command is used to detach the database.']], [[" H:\\Tools\\SQL Server Express Utility>sseutil -l\n1. master\n2. tempdb\n3. model\n4. msdb\n5. C:\\DEV_\\APP\\VISUAL STUDIO 2008\\PROJECTS\\MISSICO.LIBRARY.1\\CLIENTS\\CORE.DATA.C\nLIENT\\BIN\\DEBUG\\CORE.DATA.CLIENT.MDF\n\nH:\\Tools\\SQL Server Express Utility>sseutil -d C:\\DEV*\nFailed to detach 'C:\\DEV_\\APP\\VISUAL STUDIO 2008\\PROJECTS\\MISSICO.LIBRARY.1\\CLIE\nNTS\\CORE.DATA.CLIENT\\BIN\\DEBUG\\CORE.DATA.CLIENT.MDF'\n\nH:\\Tools\\SQL Server Express Utility>sseutil -l\n1. master\n2. tempdb\n3. model\n4. msdb\n\nH:\\Tools\\SQL Server Express Utility>\n"]], ['How do you stop a user-instance of Sql Server? (Sql Express user instance database files locked, even after stopping Sql Express service)'], 2], [(2367688, 1), [['Using .NET Refector the following command is used to detach the database.'], ['-10000']], [[' string.Format("USE master\\nIF EXISTS (SELECT * FROM sysdatabases WHERE name = N\'{0}\')\\nBEGIN\\n\\tALTER DATABASE [{1}] SET OFFLINE WITH ROLLBACK IMMEDIATE\\n\\tEXEC sp_detach_db [{1}]\\nEND", dbName, str);\n']], ['How do you stop a user-instance of Sql Server? (Sql Express user instance database files locked, even after stopping Sql Express service)'], 2], [(2368792, 0), [['Hence:'], ['You also need your DBMS (MySQL you said) to allow you to order by columns that are not listed in the SELECT-list.']], [[" SELECT K.ID, K.Title, K.URL, C.Title, S.Status,\n       MAX(NVL(M.Date_Added, DATE '0001-01-01')) AS MostRecentComment\n  FROM Pld_Link AS K JOIN Pld_Category AS C ON K.Category_ID = C.ID\n       JOIN Tll_Sort_Status AS C ON K.ID = S.Link_ID\n       OUTER JOIN Pld_Link_Comment AS M ON K.ID = M.Link_ID\n WHERE K.PageRank BETWEEN -1 AND 2\n   AND K.Category_ID IN (1291,2113,2664)\n GROUP BY K.ID, K.Title, K.URL, C.Title, S.Status\n ORDER BY COUNT(M.Link_ID) ASC\n"]], ['mysql query to sort some results but join data may or not be present'], 9], [(2368792, 1), [['You also need your DBMS (MySQL you said) to allow you to order by columns that are not listed in the SELECT-list.'], ['Result:']], [[" SELECT K.ID, K.Title, K.URL, C.Title, S.STATUS,\n       MAX(NVL(M.Date_Added, DATE('0001-01-01'))) AS MostRecentComment,\n  FROM PLD_Link AS K JOIN PLD_Category AS C ON K.Category_ID = C.ID\n       JOIN Tll_Sort_Status AS S ON K.ID = S.Link_ID\n       LEFT OUTER JOIN PLD_Link_Comment AS M ON K.ID = M.Link_ID\n WHERE K.PageRank BETWEEN -1 AND 2\n   AND K.Category_ID IN (1291,2113,2664)\n GROUP BY K.ID, K.Title, K.URL, C.Title, S.STATUS\n ORDER BY COUNT(M.Link_ID)\n"]], ['mysql query to sort some results but join data may or not be present'], 9], [(2368792, 2), [['Result:'], ['Alternative, selecting the comment count, to show that the data is presented in the correct order.']], [[' id  title                 url                       title   status  mostrecent\n4   #4: This should show  example.com/?id=4;c=2113  Cat 2113  0  0001-01-01\n3   #3: This should show  example.com/?id=3;c=1291  Cat 1291 -1  2010-03-10\n7   #7: This should show  example.com/?id=7;c=2664  Cat 2664  3  2010-07-11\n5   #5: This should show  example.com/?id=5;c=2113  Cat 2113  1  2010-05-17\n2   #2: This should show  example.com/?id=2;c=1291  Cat 1291 -2  2010-02-13\n']], ['mysql query to sort some results but join data may or not be present'], 9], [(2368792, 3), [['Alternative, selecting the comment count, to show that the data is presented in the correct order.'], ['Result set:']], [[" SELECT K.ID, K.Title, K.URL, C.Title, S.STATUS,\n       MAX(NVL(M.Date_Added, DATE('0001-01-01'))) AS MostRecentComment,\n       COUNT(M.Link_ID) AS CommentCount\n  FROM PLD_Link AS K JOIN PLD_Category AS C ON K.Category_ID = C.ID\n       JOIN Tll_Sort_Status AS S ON K.ID = S.Link_ID\n       LEFT OUTER JOIN PLD_Link_Comment AS M ON K.ID = M.Link_ID\n WHERE K.PageRank BETWEEN -1 AND 2\n   AND K.Category_ID IN (1291,2113,2664)\n GROUP BY K.ID, K.Title, K.URL, C.Title, S.STATUS\n ORDER BY CommentCount ASC;\n"]], ['mysql query to sort some results but join data may or not be present'], 9], [(2368792, 4), [['Result set:'], ['-10000']], [[' id title                 url                       title  status  recent  count\n4  #4: This should show  example.com/?id=4;c=2113  Cat 2113  0  0001-01-01  0\n3  #3: This should show  example.com/?id=3;c=1291  Cat 1291 -1  2010-03-10  1\n7  #7: This should show  example.com/?id=7;c=2664  Cat 2664  3  2010-07-11  1\n5  #5: This should show  example.com/?id=5;c=2113  Cat 2113  1  2010-05-17  2\n2  #2: This should show  example.com/?id=2;c=1291  Cat 1291 -2  2010-02-13  3\n']], ['mysql query to sort some results but join data may or not be present'], 9], [(2368792, 5), [['-10000'], ['-10000']], [["PLD_Category CREATE TABLE PLD_Category\n(\n    ID      SERIAL NOT NULL PRIMARY KEY,\n    Title   VARCHAR(32) NOT NULL\n);\n\nINSERT INTO PLD_Category VALUES(3961, 'Cat 3961');\nINSERT INTO PLD_Category VALUES(1291, 'Cat 1291');\nINSERT INTO PLD_Category VALUES(2113, 'Cat 2113');\nINSERT INTO PLD_Category VALUES(2664, 'Cat 2664');\n"]], ['mysql query to sort some results but join data may or not be present'], 9], [(2368792, 6), [['-10000'], ['-10000']], [["PLD_Link CREATE TABLE PLD_Link\n(\n    ID          SERIAL NOT NULL PRIMARY KEY,\n    Category_ID INTEGER NOT NULL REFERENCES PLD_Category,\n    Title       VARCHAR(32) NOT NULL,\n    PageRank    INTEGER NOT NULL,\n    URL         VARCHAR(64) NOT NULL\n);\n\nINSERT INTO PLD_Link\n    VALUES(1, 3961, '#1: This should not',  0, 'example.com/?id=1;c=3961');\nINSERT INTO PLD_Link\n    VALUES(2, 1291, '#2: This should show', 0, 'example.com/?id=2;c=1291');\nINSERT INTO PLD_Link\n    VALUES(3, 1291, '#3: This should show', 0, 'example.com/?id=3;c=1291');\nINSERT INTO PLD_Link\n    VALUES(4, 2113, '#4: This should show', 0, 'example.com/?id=4;c=2113');\nINSERT INTO PLD_Link\n    VALUES(5, 2113, '#5: This should show', 0, 'example.com/?id=5;c=2113');\nINSERT INTO PLD_Link\n    VALUES(6, 3961, '#6: This should not',  0, 'example.com/?id=6;c=3961');\nINSERT INTO PLD_Link\n    VALUES(7, 2664, '#7: This should show', 0, 'example.com/?id=7;c=2664');\nINSERT INTO PLD_Link\n    VALUES(8, 2664, '#8: This should show', 0, 'example.com/?id=8;c=2664');\n"]], ['mysql query to sort some results but join data may or not be present'], 9], [(2368792, 7), [['-10000'], ['-10000']], [['TLL_Sort_Status CREATE TABLE TLL_Sort_Status\n(\n    STATUS      INTEGER NOT NULL,\n    Link_ID     INTEGER NOT NULL REFERENCES PLD_Link\n);\n\nINSERT INTO TLL_Sort_Status VALUES(-3, 1);\nINSERT INTO TLL_Sort_Status VALUES(-2, 2);\nINSERT INTO TLL_Sort_Status VALUES(-1, 3);\nINSERT INTO TLL_Sort_Status VALUES( 0, 4);\nINSERT INTO TLL_Sort_Status VALUES(+1, 5);\nINSERT INTO TLL_Sort_Status VALUES(+2, 6);\nINSERT INTO TLL_Sort_Status VALUES(+3, 7);\nINSERT INTO TLL_Sort_Status VALUES(+4, 1);\n']], ['mysql query to sort some results but join data may or not be present'], 9], [(2368792, 8), [['-10000'], ['-10000']], [["PLD_Link_Comment CREATE TABLE PLD_Link_Comment\n(\n    Link_ID     INTEGER NOT NULL REFERENCES PLD_Link,\n    Date_Added  DATE NOT NULL,\n    COMMENT     VARCHAR(64) NOT NULL\n);\n\nINSERT INTO PLD_Link_Comment VALUES(1, DATE('2010-01-11'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(2, DATE('2010-02-11'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(2, DATE('2010-02-12'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(2, DATE('2010-02-13'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(3, DATE('2010-03-10'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(5, DATE('2010-05-15'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(5, DATE('2010-05-17'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(6, DATE('2010-06-10'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(6, DATE('2010-06-12'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(6, DATE('2010-06-14'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(6, DATE('2010-06-19'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(7, DATE('2010-07-11'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(8, DATE('2010-08-12'), 'Vacuous comment');\nINSERT INTO PLD_Link_Comment VALUES(8, DATE('2010-08-13'), 'Vacuous comment');\n"]], ['mysql query to sort some results but join data may or not be present'], 9], [(2369142, 0), [['Dual is another venerable slice of Oracle history.  It is a table which contains one row, and  which the database knows contains one row .  So the select statement you quote is just saying "give me the current datetime".  It is functionally equivalent to'], ['In PL/SQL the select from dual is nugatory.  We can just code this:']], [[' select sysdate \nfrom emp\nwhere rownum = 1\n/\n']], ['pseudo columns & DUAL table - what do they actually mean?'], 3], [(2369142, 1), [['In PL/SQL the select from dual is nugatory.  We can just code this:'], ['One common use for DUAL used to be getting the next value of a sequence in a trigger.  Since 11g we can do ...']], [[' l_date := sysdate;\n']], ['pseudo columns & DUAL table - what do they actually mean?'], 3], [(2369142, 2), [['One common use for DUAL used to be getting the next value of a sequence in a trigger.  Since 11g we can do ...'], ['Under the covers this still executes  select my_seq.nextval into :new.id from dual;  ']], [[' :new.id := my_seq.nextval;\n']], ['pseudo columns & DUAL table - what do they actually mean?'], 3], [(2369222, 0), [["Judging from your output it looks like you have defined START_DATE as a timestamp.  If it were a regular date Oracle would be able to handle the implicit conversion.  But as it isn't you need to explicitly cast those strings to be dates."], ["But we still only get one row.  This is because START_DATE has a time element.  If we don't specify the time component Oracle defaults it to midnight.  That is fine for the  from  side of the  BETWEEN  but not for the  until  side:"]], [[" SQL> alter session set nls_date_format = 'dd-mon-yyyy hh24:mi:ss'\n  2  /\n\nSession altered.\n\nSQL>\nSQL> select * from t23\n  2  where start_date between '15-JAN-10' and '17-JAN-10'\n  3  /\n\nno rows selected\n\nSQL> select * from t23\n  2  where start_date between to_date('15-JAN-10') and to_date('17-JAN-10')\n  3  /\n\nWIDGET                          START_DATE\n------------------------------  ----------------------\nSmall Widget                    15-JAN-10 04.25.32.000    \n\nSQL> \n"]], ['Oracle date "Between" Query'], 5], [(2369222, 1), [["But we still only get one row.  This is because START_DATE has a time element.  If we don't specify the time component Oracle defaults it to midnight.  That is fine for the  from  side of the  BETWEEN  but not for the  until  side:"], ['If you cannot pass in the time component there are a couple of choices.  One is to change the WHERE clause to remove the time element from the criteria: ']], [[" SQL> select * from t23\n  2  where start_date between to_date('15-JAN-10') \n  3                       and to_date('17-JAN-10 23:59:59')\n  4  /\n\nWIDGET                          START_DATE\n------------------------------  ----------------------\nSmall Widget                    15-JAN-10 04.25.32.000\nProduct 1                       17-JAN-10 04.31.32.000\n\nSQL>\n"]], ['Oracle date "Between" Query'], 5], [(2369222, 2), [['If you cannot pass in the time component there are a couple of choices.  One is to change the WHERE clause to remove the time element from the criteria: '], ['Alternatively you could add the time element to the date in your code:']], [[" where trunc(start_date) between to_date('15-JAN-10') \n                            and to_date('17-JAN-10')\n"]], ['Oracle date "Between" Query'], 5], [(2369222, 3), [['Alternatively you could add the time element to the date in your code:'], ['Because of these problems many people prefer to avoid the use of  between  by checking for date boundaries like this:']], [[" where start_date between to_date('15-JAN-10') \n                     and to_date('17-JAN-10') + (86399/86400) \n"]], ['Oracle date "Between" Query'], 5], [(2369222, 4), [['Because of these problems many people prefer to avoid the use of  between  by checking for date boundaries like this:'], ['-10000']], [[" where start_date >= to_date('15-JAN-10') \nand start_date < to_date('18-JAN-10')\n"]], ['Oracle date "Between" Query'], 5], [(2372597, 0), [['give this a try:'], ['OUTPUT:']], [[" --I added more test data :-)\nDECLARE @Unit table (ID int identity(1,1) primary key  ,Name  varchar(10))\nINSERT INTO @Unit (Name) VALUES ('Unit 1')\nINSERT INTO @Unit (Name) VALUES ('Unit 2')\n\nDECLARE @Unit_Location table (OrgID int,eff_date datetime,Location varchar(10))\nINSERT INTO @Unit_Location VALUES (1,'01/01/2009','LocationA')\nINSERT INTO @Unit_Location VALUES (1,'03/01/2010','LocationB')\nINSERT INTO @Unit_Location VALUES (2,'03/03/2010','Locationz')\n\nDECLARE @Unit_Size table (OrgID int, eff_date datetime, UnitSize varchar(10))\nINSERT INTO @Unit_Size VALUES (1,'02/20/2009','Size1')\nINSERT INTO @Unit_Size VALUES (1,'01/12/2010','Size2')\nINSERT INTO @Unit_Size VALUES (2,'01/02/2010','Size9')\n\n\n;WITH AllDates AS\n(\n    SELECT OrgID,eff_date FROM @Unit_Location\n    UNION \n    SELECT OrgID,eff_date FROM @Unit_Size\n\n), AllPKs AS\n(\nSELECT \n    a.OrgID,a.eff_date\n    ,(SELECT MAX(l.eff_date) FROM @Unit_Location l WHERE l.eff_date<=a.eff_date AND a.OrgID=l.OrgID) AS LocationPK\n    ,(SELECT MAX(s.eff_date) FROM @Unit_Size     s WHERE s.eff_date<=a.eff_date AND a.OrgID=s.OrgID) AS SizePK\n    FROM AllDates a\n)\nSELECT\n    a.eff_date, u.Name, l.Location, s.UnitSize\n    FROM AllPKs                        a\n        LEFT OUTER JOIN @Unit          u ON a.OrgID=u.ID\n        LEFT OUTER JOIN @Unit_Location l ON a.LocationPK=l.eff_date AND a.OrgID=l.OrgID\n        LEFT OUTER JOIN @Unit_Size     s ON a.SizePK=s.eff_date AND a.OrgID=s.OrgID\n    ORDER BY u.Name,a.eff_date\n"]], ['SQL View displaying current status of a "unit" for every date that something changes with the "unit"'], 2], [(2372597, 1), [['OUTPUT:'], ['-10000']], [[' eff_date                Name       Location   UnitSize\n----------------------- ---------- ---------- ----------\n2009-01-01 00:00:00.000 Unit 1     LocationA  NULL\n2009-02-20 00:00:00.000 Unit 1     LocationA  Size1\n2010-01-12 00:00:00.000 Unit 1     LocationA  Size2\n2010-03-01 00:00:00.000 Unit 1     LocationB  Size2\n2010-01-02 00:00:00.000 Unit 2     NULL       Size9\n2010-03-03 00:00:00.000 Unit 2     Locationz  Size9\n\n(6 row(s) affected)\n']], ['SQL View displaying current status of a "unit" for every date that something changes with the "unit"'], 2], [(2374084, 0), [["I'm sure there's a more analytic-ish way to do this, but I'm cheating with scalar subqueries to build the windows."], ['-10000']], [[' SQL> select * from logging_table;\n\n        ID MSG                            LOG_DT\n---------- ------------------------------ -------------------\n         1 TEst                           2010-01-01 09:00:00\n         2 Job Start                      2010-01-01 09:03:00\n         3 Do something                   2010-01-01 09:03:10\n         4 Do something else              2010-01-01 09:03:12\n         5 Do something                   2010-01-01 09:04:19\n         6 Job End                        2010-01-01 09:06:30\n         7 Job Start                      2010-01-01 09:18:03\n         8 Do something                   2010-01-01 09:18:17\n         9 Do other thing                 2010-01-01 09:19:48\n        10 Job End                        2010-01-01 09:20:27\n\nSQL> l\n  1      select dense_rank() over (order by job_start_id) as batch, \n         -- ^-- this part gets the batch\n  2             job_step_id, msg, log_dt\n  3             -- nested select to filter out rows outside of the boundaries\n  4        from (select *\n  5                from (select id as job_step_id, msg, log_dt,\n  6                             -- scalar subquery to get start of "window"\n  7                             (select max(id)\n  8                                from logging_table\n  9                               where msg = \'Job Start\'\n 10                                 and id < log.id) as job_start_id,\n 11                             -- scalar subquery to get end of "window"\n 12                             (select min(id)\n 13                                from logging_table\n 14                               where msg = \'Job End\'\n 15                                 and id > log.id) as job_end_id\n 16                       from logging_table log\n 17                      -- filter out the "window" rows themselves\n 18                      where msg not in (\'Job Start\', \'Job End\')\n 19                     )\n 20               -- the filtering out of "unbounded" records\n 21               where job_start_id is not null\n 22                 and job_end_id is not null\n 23             )\n 24*      order by job_step_id\nSQL> /\n\n BATCH JOB_STEP_ID MSG                            LOG_DT\n']], ['Oracle - grouping between pairs of records'], 2], [(2374084, 1), [['-10000'], ['-10000']], [['      1           3 Do something                   2010-01-01 09:03:10\n     1           4 Do something else              2010-01-01 09:03:12\n     1           5 Do something                   2010-01-01 09:04:19\n     2           8 Do something                   2010-01-01 09:18:17\n     2           9 Do other thing                 2010-01-01 09:19:48\n']], ['Oracle - grouping between pairs of records'], 2], [(2374180, 0), [['In Sql:'], ['And in Linq:']], [[" SELECT *\nFROM Products p\nWHERE p.VendorID = 1\nORDER BY CASE WHEN p.ProductType = 'widget' THEN 1 ElSE 2 END\n"]], ['How to get certain SQL query results at the top of the list'], 2], [(2374180, 1), [['And in Linq:'], ['-10000']], [[' IQueryable<Product> query =\n  from p in dc.Products\n  where p.VendorID == 1\n  orderby p.ProductType == "widget" ? 1 : 2\n  select p;\n']], ['How to get certain SQL query results at the top of the list'], 2], [(2378873, 0), [['Like, exact date will be'], [', c. 1960 will be']], [[' Jan 1, 1960   Jan 1, 1960\n']], ['How do I store (and sort) vague date ranges?'], 4], [(2378873, 1), [[', c. 1960 will be'], [', 1960s will be']], [[' Jan 1, 1960   Dec 31, 1960\n']], ['How do I store (and sort) vague date ranges?'], 4], [(2378873, 2), [[', 1960s will be'], ['Then you can order by the first date and the datediff:']], [[' Jan 1, 1960   Dec 31, 1969\n']], ['How do I store (and sort) vague date ranges?'], 4], [(2378873, 3), [['Then you can order by the first date and the datediff:'], ['Alternatively, you can store the expected value and the deviation instead of the start and end dates.']], [[' SELECT  *\nFROM    mytable\nORDER BY\n        start_date, DATEDIFF(end_date, start_date) DESC\n']], ['How do I store (and sort) vague date ranges?'], 4], [(2379116, 0), [['Okay, it looks like the  SCHEMATA  table in the  information_scheme  database contains a list of all databases. Thus, in order to get a list of all the databases you want to run the procedure on, you can do:'], ["The next step is to work this into some kind of procedure. Unfortunately, MySQL doesn't do well with executing dynamically generated SQL if it involves creating procedures. Thus, the purely-SQL version I came up with is a bit messy. It comes down to first creating the 'generator' procedure, then calling it, and finally executing the result of the generator:"]], [[" SELECT schema_name FROM information_schema.schemata\nWHERE schema_name LIKE 'application_%';\n"]], ['MySQL: Loop through databases and run a stored procedure on it'], 5], [(2379116, 1), [["The next step is to work this into some kind of procedure. Unfortunately, MySQL doesn't do well with executing dynamically generated SQL if it involves creating procedures. Thus, the purely-SQL version I came up with is a bit messy. It comes down to first creating the 'generator' procedure, then calling it, and finally executing the result of the generator:"], ['After this procedure is generated, call the procedure:']], [[' delimiter //\nDROP PROCEDURE IF EXISTS create_procedures//\nCREATE PROCEDURE create_procedures()\nBEGIN\n    DECLARE done INT DEFAULT 0;\n    DECLARE db VARCHAR(255);\n    DECLARE appDBs CURSOR FOR SELECT schema_name FROM information_schema.schemata WHERE schema_name LIKE \'application_%\';\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;\n\n    SET @procName = "simpleproc"; -- Change this to your proc name\n\n    SET @output = "delimiter //";\n\n    OPEN appDBs;\n    REPEAT\n        FETCH appDBs INTO db;\n        IF NOT done THEN\n            -- Replace this procedure declaration with your procedure.\n            -- Make sure to keep the \',db,\' syntax there.\n            -- You should really only have to change the parameters\n            -- and the stuff between the BEGIN and END clauses.\n            SET @output = CONCAT(@output,\'\n    DROP PROCEDURE IF EXISTS \',db,\'.\',@procName,\'//\n    CREATE PROCEDURE \',db,\'.\',@procName,\'()\n        BEGIN\n            SELECT 1;\n        END//\');\n\n        END IF;\n    UNTIL done END REPEAT;\n\n    CLOSE appDBs;\n\n    SET @output = CONCAT(@output,\'\\ndelimiter ;\');\n\n    SELECT @output AS procs;\nEND//\ndelimiter ;\n']], ['MySQL: Loop through databases and run a stored procedure on it'], 5], [(2379116, 2), [['After this procedure is generated, call the procedure:'], ["I've never used SQLyog, but if that doesn't work properly, then you may need to use MySQL's command line interface. First, generate a file  input.sql  containing:"]], [[' CALL create_procedures();\n']], ['MySQL: Loop through databases and run a stored procedure on it'], 5], [(2379116, 3), [["I've never used SQLyog, but if that doesn't work properly, then you may need to use MySQL's command line interface. First, generate a file  input.sql  containing:"], ['Then execute the following commands:']], [[' CALL create_procedures();\n']], ['MySQL: Loop through databases and run a stored procedure on it'], 5], [(2379116, 4), [['Then execute the following commands:'], ["changing  <username>  and  <dbname>  to appropriate values ( <dbname>  can be any database you have permission to access). If you don't run into any errors, then you should have stored procedures defined for every database."]], [[' mysql -u <username> -p --database=<dbname> -N -r -B < input.sql > proc.sql\nmysql -u <username> -p --database=<dbname> < proc.sql\n']], ['MySQL: Loop through databases and run a stored procedure on it'], 5], [(2380116, 0), [["I think I've got it - something like:"], ["FYI here's my table definition:"]], [[' SELECT TOP 1 ReleaseDate\nFROM Versions\nWHERE\n    (MajorVersion = @CurrentMajor AND MinorVersion = @CurrentMinor + 1)\n    OR (MajorVersion = @CurrentMajor + 1 AND MinorVersion = 0)\nORDER BY MajorVersion, MinorVersion\n']], ['Finding a single record in a table step-by-step by different requests'], 4], [(2380116, 1), [["FYI here's my table definition:"], ['Insert some data:']], [[' CREATE TABLE [dbo].[Versions](\n    [MajorVersion] [int] NOT NULL,\n    [MinorVersion] [int] NOT NULL,\n    [ReleaseDate] [datetime] NOT NULL,\n CONSTRAINT [PK_Versions] PRIMARY KEY CLUSTERED \n(\n    [MajorVersion] ASC,\n    [MinorVersion] ASC\n)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]\n) ON [PRIMARY]\n']], ['Finding a single record in a table step-by-step by different requests'], 4], [(2380116, 2), [['Insert some data:'], ['Try it out:']], [[" INSERT INTO Versions VALUES (1, 0, '2009-01-01')\nINSERT INTO Versions VALUES (1, 1, '2009-01-10')\nINSERT INTO Versions VALUES (1, 2, '2009-01-21')\nINSERT INTO Versions VALUES (2, 0, '2009-02-01')\nINSERT INTO Versions VALUES (2, 1, '2009-02-20')\nINSERT INTO Versions VALUES (1, 3, '2009-03-01')\n"]], ['Finding a single record in a table step-by-step by different requests'], 4], [(2380116, 3), [['Try it out:'], ['-10000']], [[' 1.0 = 2009-01-10\n1.1 = 2009-01-21\n1.2 = 2009-03-01\n1.3 = 2009-02-01\n2.0 = 2009-02-20\n2.1 = NULL (no rows)\n']], ['Finding a single record in a table step-by-step by different requests'], 4], [(2380923, 0), [["auto_increment  can't be just part of a field, so a single column might be a wash.  So how about:"], ['Or even better, so you can use those office codes and dates to filter data with:']], [[' CREATE TABLE xxxxx (\nid int unsigned not null auto_increment,\nrest_of_that_key char(xx) not null,\n// other goodies\nPRIMARY KEY (id)\n);\n']], ['MySQL auto increment plus alphanumerics in one column'], 2], [(2380923, 1), [['Or even better, so you can use those office codes and dates to filter data with:'], ["Then you can use  SELECT CONCAT(country_code, DATE_FORMAT(sysdate, '%Y%m%d'), office_code, LPAD(id, 7, '0')) AS full_key FROM xxxxx  and even throw in a  WHERE office_code = 1256 AND sysdate >= '2010-01-01'  without having to somehow parse that huge string."]], [[' CREATE TABLE xxxxx (\nid int unsigned not null auto_increment,\ncountry_code char(1) not null,\nsysdate date not null,\noffice_code smallint unsigned not null,\n// other goodies\nPRIMARY KEY (id),\nKEY country_code (country_code)\n// etc, index the useful stuff\n);\n']], ['MySQL auto increment plus alphanumerics in one column'], 2], [(2381382, 0), [['Add a unique index for "dt_name".'], ["[edit] not exactly sure what you're asking; if you want the combination of name & id to be unique, you'd create the unique index on both of the columns:"]], [[' create unique index ix_dt_name on your_table(dt_name)\n']], ["SQL Server table design - don't want two records the same"], 2], [(2381382, 1), [["[edit] not exactly sure what you're asking; if you want the combination of name & id to be unique, you'd create the unique index on both of the columns:"], ['-10000']], [[' create unique index ix_dt_name_and_id on your_table(dt_name, u_id)\n']], ["SQL Server table design - don't want two records the same"], 2], [(2381988, 0), [['By assuming that your schedule items are stored in an  NSArray  called  scheduleItems  and that these items have a  date  property, you could filter them with a predicate:'], ['The problem is that this will give you every item where its date is exactly now.  You probably want to compare the date in a range:']], [[' NSPredicate *predicate = [NSPredicate predicateWithFormat:@"date == %@", \n                            [NSDate date]];\nNSArray *todaysItems = [scheduleItems filteredArrayUsingPredicate:predicate];\n']], ['How can I detect the day of the week and the time, and then display data in a tableview based on the current day and time?'], 2], [(2381988, 1), [['The problem is that this will give you every item where its date is exactly now.  You probably want to compare the date in a range:'], ['Note: this is not tested.']], [[' NSDate *today = ...;\nNSDate *tomorrow = ...;\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@"date BETWEEN %@",\n                           [NSArray arrayWithObjects:today, tomorrow,nil]];\nNSArray *todaysItems = [scheduleItems fileteredArrayUsingPredicate:predicate];\n']], ['How can I detect the day of the week and the time, and then display data in a tableview based on the current day and time?'], 2], [(2383397, 0), [['Firebird comes with an external function library (UDF library) that has an ASCII_CHAR function. You have to declare it in your database like this:'], ['Then, you could try querying:']], [[" DECLARE EXTERNAL FUNCTION ascii_char\nINTEGER\nRETURNS CSTRING(1) FREE_IT\nENTRY_POINT 'IB_UDF_ascii_char' MODULE_NAME 'ib_udf'; */\n"]], ['NULL Characters in Firebird VARCHAR'], 2], [(2383397, 1), [['Then, you could try querying:'], ['or something similar...']], [[" select * from yourtable where column like '%' || ASCII_CHAR(0) || '%'\n"]], ['NULL Characters in Firebird VARCHAR'], 2], [(2383769, 0), [['With that said, here is the code:'], ['Lets run through this a little']], [[" -- table with multiple columns\nCREATE TABLE #TBL ( \n    NameColumn VARCHAR(10), \n    PriorityColumn INT,\n    AnotherColumn FLOAT,\n    DateColumn DATETIME \n)\n\n\n-- Insert the test data\nINSERT INTO #TBL VALUES ('a', 1, 7.2, '1/1/2000')\nINSERT INTO #TBL VALUES ('a', 2, 8.9, '1/2/2000')\nINSERT INTO #TBL VALUES ('a', 2, 53.2, '1/3/2000')\nINSERT INTO #TBL VALUES ('a', 3, 9.12, '1/4/2000')\nINSERT INTO #TBL VALUES ('b', 2, 1.26, '1/1/2001')\n\n\nDECLARE\n    @sql NVARCHAR(max),\n    @dates NVARCHAR(max)\n\n\n-- I separated this to make the code easier to read\nSET @dates = STUFF(\n    (\n        SELECT N',[' + CONVERT(VARCHAR, DateColumn, 101) + ']' AS [text()]\n        FROM #TBL\n        GROUP BY DateColumn\n        ORDER BY DateColumn\n        FOR XML PATH('')\n    ), 1, 1, N''\n)\n\n\n-- I will break this part of the code up below\nSET @sql = N'SELECT\n    *\nFROM (\n    SELECT\n        ColumnName,\n        ColumnValue,\n        CONVERT(VARCHAR, DateColumn, 101) AS DateString\n    FROM (\n        SELECT\n            CAST(NameColumn AS VARCHAR(100)) AS NameColumn,\n            CAST(PriorityColumn AS VARCHAR(100)) AS PriorityColumn,\n            CAST(AnotherColumn AS VARCHAR(100)) AS AnotherColumn,\n            DateColumn\n        FROM #TBL\n    ) P\n    UNPIVOT (\n        ColumnValue\n        FOR ColumnName IN (NameColumn, PriorityColumn, AnotherColumn)\n    ) UNPIV\n) P2\nPIVOT (\n    MAX(ColumnValue)\n    FOR DateString IN (' + @dates + N')\n) PIV'\n\nEXECUTE dbo.sp_ExecuteSQL @sql\n\n\nDROP TABLE #TBL\n"]], ['Help with Pivot / Unpivot'], 4], [(2383769, 1), [['Lets run through this a little'], ['Once I do this, the data will look something like this:']], [[' -- I first do an UNPIVOT on all of the columns I want to pivot on, at the same time, converting them to the same datatype\nSELECT\n    ColumnName,\n    ColumnValue,\n    CONVERT(VARCHAR, DateColumn, 101) AS DateString\nFROM (\n    SELECT\n        CAST(NameColumn AS VARCHAR(100)) AS NameColumn,\n        CAST(PriorityColumn AS VARCHAR(100)) AS PriorityColumn,\n        CAST(AnotherColumn AS VARCHAR(100)) AS AnotherColumn,\n        DateColumn\n    FROM #TBL\n) P\nUNPIVOT (\n    ColumnValue\n    FOR ColumnName IN (NameColumn, PriorityColumn, AnotherColumn)\n) UNPIV\n']], ['Help with Pivot / Unpivot'], 4], [(2383769, 2), [['Once I do this, the data will look something like this:'], ['Then we can use PIVOT like this to get all the columns we need:']], [[' ColumnName  ColumnValue DateString\n----------------------------------\nNameColumn      a       01/01/2000\nPriorityColumn  1       01/01/2000\nAnotherColumn   7.2     01/01/2000\nNameColumn      a       01/02/2000\nPriorityColumn  2       01/02/2000\nAnotherColumn   8.9     01/02/2000\nNameColumn      a       01/03/2000\nPriorityColumn  2       01/03/2000\nAnotherColumn   53.2     01/03/2000\nNameColumn      a       01/04/2000\nPriorityColumn  3       01/04/2000\nAnotherColumn   9.12     01/04/2000\nNameColumn      b       01/01/2001\nPriorityColumn  2       01/01/2001\nAnotherColumn   1.26     01/01/2001\n']], ['Help with Pivot / Unpivot'], 4], [(2383769, 3), [['Then we can use PIVOT like this to get all the columns we need:'], ['-10000']], [[" PIVOT (\n    MAX(ColumnValue)\n    FOR DateString IN (' + @dates + N')\n) PIV\n"]], ['Help with Pivot / Unpivot'], 4], [(2384114, 0), [['In order to calculate the standard deviation, you need to iterate through all of the elements, so it would be impossible to do this in one query.  The lazy way would be to just do it in two passes:'], ['Another simple option that  might  work (fairly common in analysis of scientific data) would be to just drop the minimum and maximum  x  values, which works if you have a lot of data to process.  You can use  ROW_NUMBER  to do this in one statement:']], [[' DECLARE\n    @Avg int,\n    @StDev int\n\nSELECT @Avg = AVG(Sales), @StDev = STDEV(Sales)\nFROM tbl_sales\nWHERE ...\n\nSELECT AVG(Sales) AS AvgSales, MAX(Sales) AS MaxSales, MIN(Sales) AS MinSales\nFROM tbl_sales\nWHERE ...\nAND Sales >= @Avg - @StDev * 3\nAND Sales <= @Avg + @StDev * 3\n']], ['SQL: Show average and min/max within standard deviations'], 2], [(2384114, 1), [['Another simple option that  might  work (fairly common in analysis of scientific data) would be to just drop the minimum and maximum  x  values, which works if you have a lot of data to process.  You can use  ROW_NUMBER  to do this in one statement:'], ['Replace  ROW_NUMBER  with  RANK  or  DENSE_RANK  if you want to discard a certain number of  unique  values.']], [[' WITH OrderedValues AS\n(\n    SELECT\n        Sales,\n        ROW_NUMBER() OVER (ORDER BY Sales) AS RowNumAsc,\n        ROW_NUMBER() OVER (ORDER BY Sales DESC) AS RowNumDesc\n)\nSELECT ...\nFROM tbl_sales\nWHERE ...\nAND Sales >\n(\n    SELECT MAX(Sales)\n    FROM OrderedValues\n    WHERE RowNumAsc <= @ElementsToDiscard\n)\nAND Sales <\n(\n    SELECT MIN(Sales)\n    FROM OrderedValues\n    WHERE RowNumDesc <= @ElementsToDiscard\n)\n']], ['SQL: Show average and min/max within standard deviations'], 2], [(2385155, 0), [["You could build up a list of visited nodes in another column and then prevent re-visiting them in your recursion. Something like this (not sure I've picked the right columns):"], ["If you want to avoid every re-traversing an edge, rather than ever re-visiting a vertex, you'd build up your links as e.g. ':' + FirstVertex + '@' + SecondVertex + ':'. In these examples, I'm just using ':' and '@' as characters that don't appear in vertex names. (Avoiding re-traversal - closer to results with b.Level <= 1, but not quite):"]], [[" With GraphRecursion (FirstVertex, SecondVertex, Weight, Level,Nodes)\nAs\n(\n    Select FirstVertex, SecondVertex, Weight, 0 As Level,CONVERT(varchar(8000),':' + FirstVertex + ':' + SecondVertex + ':')\n    From #graph\n    Where FirstVertex='A'\n\n    Union all\n\n    Select a.FirstVertex, a.SecondVertex, a.Weight, b.Level+1,b.Nodes + ':' + a.SecondVertex  + ':'\n    From #graph a \n    Inner Join GraphRecursion b\n    On a.FirstVertex=b.SecondVertex --And b.Level<=1\n    where not b.Nodes like '%:' + a.SecondVertex + ':%'\n)\nSelect * From GraphRecursion;\n"]], ['Common table expressions, how to avoid infinite recusion when traversing a graph?'], 2], [(2385155, 1), [["If you want to avoid every re-traversing an edge, rather than ever re-visiting a vertex, you'd build up your links as e.g. ':' + FirstVertex + '@' + SecondVertex + ':'. In these examples, I'm just using ':' and '@' as characters that don't appear in vertex names. (Avoiding re-traversal - closer to results with b.Level <= 1, but not quite):"], ["(Note that the original b.Level <= 1 version gets 5 rows from this sample, rather than the four from my second example above). But I believe it's correct. The b.Level <= 1 version returns a Level 2 row for a->c, c->a, a->c, which I don't think we want"]], [[" With GraphRecursion (FirstVertex, SecondVertex, Weight, Level,Nodes)\nAs\n(\n    Select FirstVertex, SecondVertex, Weight, 0 As Level,CONVERT(varchar(8000),':' + FirstVertex + '@' + SecondVertex + ':')\n    From #graph\n    Where FirstVertex='A'\n\n    Union all\n\n    Select a.FirstVertex, a.SecondVertex, a.Weight, b.Level+1,b.Nodes + ':' + a.FirstVertex + '@' + a.SecondVertex  + ':'\n    From #graph a \n    Inner Join GraphRecursion b\n    On a.FirstVertex=b.SecondVertex --And b.Level<=1\n    where not b.Nodes like '%:' + a.FirstVertex + '@' + a.SecondVertex + ':%'\n)\n"]], ['Common table expressions, how to avoid infinite recusion when traversing a graph?'], 2], [(2385791, 0), [['Depending on how heavy the formla is, you could use a subquery:'], ['Or rewrite the computation:']], [[' select inner.*, times_two * 2 from\n(select mycol * 2 as times_two from table) sub\n']], ['PostgreSQL Views: Referencing one calculated field in another calculated field'], 2], [(2385791, 1), [['Or rewrite the computation:'], ['-10000']], [[' select mycol * 2, mycol * 2 * 2 from table\n']], ['PostgreSQL Views: Referencing one calculated field in another calculated field'], 2], [(2386280, 0), [["For assigning a value in mysql don't forget  :="], ['or']], [[' SELECT @Param:=not_unique_id,\n(\n SELECT Count(not_unique_id)\n FROM TABLE0\n WHERE not_unique_id=@Param\n)\nFROM Table0 WHERE .....\n']], ['mySQL recursive Count()'], 2], [(2386280, 1), [['or'], ['-10000']], [[' SELECT not_unique_id,\n(\n SELECT Count(not_unique_id)\n FROM TABLE0\n WHERE not_unique_id=a.not_unique_id\n)\nFROM Table0 a WHERE .....\n']], ['mySQL recursive Count()'], 2], [(2386632, 0), [['For Ms Access you can try'], ['Example with table Data, which is the same...']], [[' SELECT  DISTINCT\n        *\nFROM Table1 tM\nWHERE NOT EXISTS(SELECT 1 FROM Table1 t WHERE tM.Source = t.Dest AND tM.Dest = t.Source AND tm.Source > t.Source)\n']], ['Fetch unique combinations of two field values'], 3], [(2386632, 1), [['Example with table Data, which is the same...'], ['or ( Nice and Access Formatted... )']], [[' SELECT  DISTINCT\n        *\nFROM Data  tM\nWHERE NOT EXISTS(SELECT 1 FROM Data t WHERE tM.Source = t.Dest AND tM.Dest = t.Source AND tm.Source > t.Source)\n']], ['Fetch unique combinations of two field values'], 3], [(2386632, 2), [['or ( Nice and Access Formatted... )'], ['-10000']], [[' SELECT DISTINCT *\nFROM Data AS tM\nWHERE (((Exists (SELECT 1 FROM Data t WHERE tM.Source = t.Dest AND tM.Dest = t.Source AND tm.Source > t.Source))=False));\n']], ['Fetch unique combinations of two field values'], 3], [(2387925, 0), [['First, make sure the SELECT is returning what you want before attempting insertion.  This:'], ['...is using ANSI-89 JOIN syntax. ANSI-92 join syntax is a better choice:']], [[" SELECT DISTINCT \n       u.user_id, \n       t.num \n  FROM temp t, users u \n WHERE t.name like '%' + u.l_name + '%'\n"]], ['MySql Searching two tables and comparing columns with like and %'], 2], [(2387925, 1), [['...is using ANSI-89 JOIN syntax. ANSI-92 join syntax is a better choice:'], ['...but the join criteria looks flawed.  It\'s going to link rows were the last name appears in the  t.name  value, leading to the Smith problem: If the last name is "Smith", all rows will link up - even if the names are John, Jim, etc.']], [[" SELECT DISTINCT\n       u.user_id,\n       t.num\n  FROM USERS u\n  JOIN TEMP t ON t.name LIKE CONCAT('%', u.l_name ,'%')\n"]], ['MySql Searching two tables and comparing columns with like and %'], 2], [(2388122, 0), [['Get rid of the  LEFT JOIN :'], ['If it is possible that you have less then  10  products sold for the table, but you sill need to show  10 , then do this:']], [[' SELECT  product.*, sumsell\nFROM    (\n        SELECT  ankieta_id, COUNT(*) AS sumsell\n        FROM    sale\n        WHERE   sale.DATE >= DATE_SUB( NOW( ) , INTERVAL 1 DAY )\n        GROUP BY\n                ankieta_id\n        ) s\nJOIN    product\nON      product.id = s.ankieta_id\nORDER BY\n        SUMSELL DESC\nLIMIT 10\n']], ['How to increase last day count query performance'], 2], [(2388122, 1), [['If it is possible that you have less then  10  products sold for the table, but you sill need to show  10 , then do this:'], ['-10000']], [[' SELECT  *\nFROM    (\n        SELECT  product.*, sumsell\n        FROM    (\n                SELECT  ankieta_id, COUNT(*) AS sumsell\n                FROM    sale\n                WHERE   sale.DATE >= DATE_SUB( NOW( ) , INTERVAL 1 DAY )\n                GROUP BY\n                        ankieta_id\n                ) s\n        JOIN    product\n        ON      product.id = s.ankieta_id\n        ORDER BY\n                SUMSELL DESC\n        LIMIT 10\n        ) p\nUNION ALL\nSELECT  *\nFROM    (\n        SELECT  product_id, 0\n        FROM    products p\n        WHERE   products NOT IN\n                (\n                SELECT  *\n                FROM    sale\n                WHERE   ankieta_id = p.id\n                        AND sale.DATE >= DATE_SUB( NOW( ) , INTERVAL 1 DAY )\n                ) p2\n        LIMIT 10\n        ) p2\nORDER BY\n        sumsell DESC\nLIMIT 10\n']], ['How to increase last day count query performance'], 2], [(2388125, 0), [["Here's the setup script for the test data:"], ["So we have a 1:Many and we want to make this a 1:1.  To do this, first queue up a list of updates (we'll index this over some  other  set of unique columns to speed up merging later):"]], [[" CREATE TABLE Colors\n(\n    ColorID int NOT NULL IDENTITY(1, 1) PRIMARY KEY,\n    ColorName varchar(50) NOT NULL\n)\n\nCREATE TABLE Markers\n(\n    MarkerID int NOT NULL IDENTITY(1, 1) PRIMARY KEY,\n    MarkerName varchar(50) NOT NULL,\n    ColorID int NOT NULL,\n    CONSTRAINT FK_Markers_Colors FOREIGN KEY (ColorID)\n        REFERENCES Colors (ColorID)\n)\n\nINSERT Colors (ColorName) VALUES ('Red')\nINSERT Colors (ColorName) VALUES ('Green')\nINSERT Colors (ColorName) VALUES ('Blue')\n\nINSERT Markers (MarkerName, ColorID) VALUES ('Test1', 1)\nINSERT Markers (MarkerName, ColorID) VALUES ('Test2', 1)\nINSERT Markers (MarkerName, ColorID) VALUES ('Test3', 1)\nINSERT Markers (MarkerName, ColorID) VALUES ('Test4', 2)\nINSERT Markers (MarkerName, ColorID) VALUES ('Test5', 2)\nINSERT Markers (MarkerName, ColorID) VALUES ('Test6', 3)\nINSERT Markers (MarkerName, ColorID) VALUES ('Test7', 3)\n"]], ['What is the best way to perform a manipulation with huge amounts of data in SQL Server?'], 6], [(2388125, 1), [["So we have a 1:Many and we want to make this a 1:1.  To do this, first queue up a list of updates (we'll index this over some  other  set of unique columns to speed up merging later):"], ['The result will have one row for every marker that needs to get a new colour.  Then insert the new colours and capture the full output:']], [[' CREATE TABLE #NewColors\n(\n    MarkerID int NOT NULL,\n    ColorName varchar(50) NOT NULL,\n    Seq int NOT NULL,\n    CONSTRAINT PK_#NewColors PRIMARY KEY (MarkerID)\n)\n\nCREATE INDEX IX_#NewColors\nON #NewColors (ColorName, Seq);\n\nWITH Refs AS\n(\n    SELECT\n        MarkerID,\n        ColorID,\n    ROW_NUMBER() OVER (PARTITION BY ColorID ORDER BY (SELECT 1)) AS Seq\n    FROM Markers\n)\nINSERT #NewColors (MarkerID, ColorName, Seq)\nSELECT r.MarkerID, c.ColorName, r.Seq - 1\nFROM Refs r\nINNER JOIN Colors c\n    ON c.ColorID = r.ColorID\nWHERE r.Seq > 1\n']], ['What is the best way to perform a manipulation with huge amounts of data in SQL Server?'], 6], [(2388125, 2), [['The result will have one row for every marker that needs to get a new colour.  Then insert the new colours and capture the full output:'], ["And finally merge it (here's where that extra index on the temp table comes in handy):"]], [[' DECLARE @InsertedColors TABLE\n(\n    ColorID int NOT NULL PRIMARY KEY,\n    ColorName varchar(50) NOT NULL\n)\n\nINSERT Colors (ColorName)\nOUTPUT inserted.ColorID, inserted.ColorName\nINTO @InsertedColors\n    SELECT ColorName\n    FROM #NewColors nc;\n']], ['What is the best way to perform a manipulation with huge amounts of data in SQL Server?'], 6], [(2388125, 3), [["And finally merge it (here's where that extra index on the temp table comes in handy):"], ['Test the results:']], [[' WITH InsertedColorSeq AS\n(\n    SELECT\n        ColorID, ColorName,\n        ROW_NUMBER() OVER (PARTITION BY ColorName ORDER BY ColorID) AS Seq\n    FROM @InsertedColors\n),\nUpdates AS\n(\n    SELECT nc.MarkerID, ic.ColorID AS NewColorID\n    FROM #NewColors nc\n    INNER JOIN InsertedColorSeq ic\n    ON ic.ColorName = nc.ColorName\n    AND ic.Seq = nc.Seq\n)\nMERGE Markers m\nUSING Updates u\n    ON m.MarkerID = u.MarkerID\nWHEN MATCHED THEN\n    UPDATE SET m.ColorID = u.NewColorID;\n\nDROP TABLE #NewColors\n']], ['What is the best way to perform a manipulation with huge amounts of data in SQL Server?'], 6], [(2388125, 4), [['Test the results:'], ["Here's our output:"]], [[' SELECT m.MarkerID, m.MarkerName, c.ColorID, c.ColorName\nFROM Markers m\nINNER JOIN Colors c\n    ON c.ColorID = m.ColorID\n']], ['What is the best way to perform a manipulation with huge amounts of data in SQL Server?'], 6], [(2388125, 5), [["Here's our output:"], ["This should be what you want, right?  No cursors, no serious ugliness.  If it chews up too much memory or tempdb space then you can replace the temp table / table variable with an indexed physical staging table.  Even with several million rows, there's no way this should fill up the transaction log and crash."]], [[' MarkerID     MarkerName   ColorID   ColorName\n1            Test1        1         Red\n2            Test2        6         Red\n3            Test3        7         Red\n4            Test4        2         Green\n5            Test5        5         Green\n6            Test6        3         Blue\n7            Test7        4         Blue\n']], ['What is the best way to perform a manipulation with huge amounts of data in SQL Server?'], 6], [(2391851, 0), [['Essentially:'], ['Then assuming you have the publisher and type inserted, you can insert the movie thus:']], [[' publisher:\n    publisher_id\n    publisher_name\n    <other publisher info>\ntype:\n    type_id\n    type_name\n    <other type info>\nmovie:\n    movie_id\n    movie_name\n    publisher_id references publisher(publisher_id)\n    <other movie info>\nmovie_type:\n    movie_id references movie(movie_id)\n    type_id references type(type_id)\n']], ['how to insert data using multiple tables'], 3], [(2391851, 1), [['Then assuming you have the publisher and type inserted, you can insert the movie thus:'], ["If you're not using a DBMS that supports selects in value sections, your best bet will be probably just to remember or extract the relevant values to a variable in whatever programming language you're using and construct a query to do it. In pseudo-code:"]], [[" begin transaction;\ninsert into movie (movie_name,publisher_id) values (\n    'Avatar',\n    (select publisher_id from publisher where publisher_name = 'Spielberg')\n);\ninsert into movie_type (movie_id,type_id) values (\n    (select movie_id from movie where movie_name = 'Avatar'),\n    (select type_id from type where type_name = 'SciFi')\n);\ninsert into movie_type (movie_id,type_id) values (\n    (select movie_id from movie where movie_name = 'Avatar'),\n    (select type_id from type where type_name = 'GrownUpSmurfs')\n);\ncommit;\n"]], ['how to insert data using multiple tables'], 3], [(2391851, 2), [["If you're not using a DBMS that supports selects in value sections, your best bet will be probably just to remember or extract the relevant values to a variable in whatever programming language you're using and construct a query to do it. In pseudo-code:"], ['In response to your comment:']], [[" begin transaction;\ninsert into movie (movie_name,publisher_id) values (\n    'Avatar',\n    (select publisher_id from publisher where publisher_name = 'Spielberg')\n);\nselect movie_id into :m_id from movie where movie_name = 'Avatar';\nselect type_id into :t_id1 from type where type_name = 'SciFi';\nselect type_id into :t_id2 from type where type_name = 'GrownUpSmurfs';\ninsert into movie_type (movie_id,type_id) values (:m_id, :t_id1);\ninsert into movie_type (movie_id,type_id) values (:m_id, :t_id2);\ncommit;\n"]], ['how to insert data using multiple tables'], 3], [(2392901, 0), [['In SQL, to find the teachers whose students all passed both semesters:'], ['Results:']], [[' SELECT teacher_id\nFROM student\nGROUP BY teacher_id\nHAVING MIN(passed_semester_1) AND MIN(passed_semester_2)\n']], ['Help me to write an sql-statement to do something like this'], 6], [(2392901, 1), [['Results:'], ['To find the teachers whose students all passed semester 1, but not all passed semester 2:']], [[' 1\n4\n']], ['Help me to write an sql-statement to do something like this'], 6], [(2392901, 2), [['To find the teachers whose students all passed semester 1, but not all passed semester 2:'], ['Results:']], [[' SELECT teacher_id\nFROM student\nGROUP BY teacher_id\nHAVING MIN(passed_semester_1) AND NOT MIN(passed_semester_2)\n']], ['Help me to write an sql-statement to do something like this'], 6], [(2392901, 3), [['Results:'], ['Update join demonstration:']], [[' 2\n']], ['Help me to write an sql-statement to do something like this'], 6], [(2392901, 4), [['Update join demonstration:'], ['Using this table structure and test data:']], [[' SELECT T2.*\nFROM (\n    SELECT teacher_id\n    FROM student\n    GROUP BY teacher_id\n    HAVING MIN(passed_semester_1) AND MIN(passed_semester_2)\n) AS T1\nJOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id\n']], ['Help me to write an sql-statement to do something like this'], 6], [(2392901, 5), [['Using this table structure and test data:'], ['-10000']], [[' CREATE TABLE student (student_id INT NOT NULL, teacher_id INT NOT NULL, passed_semester_1 INT NOT NULL, passed_semester_2 INT NOT NULL);\nINSERT INTO student (student_id, teacher_id, passed_semester_1, passed_semester_2) VALUES\n(1, 1, 1, 1),\n(2