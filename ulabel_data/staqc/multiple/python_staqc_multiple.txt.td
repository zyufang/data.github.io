[[(773, 0), [["The part I didn't get is that in the example construction"], ["Here's an example of that, using clearer variable names:"]], [[' groups = []\nuniquekeys = []\nfor k, g in groupby(data, keyfunc):\n   groups.append(list(g))    # Store group iterator as a list\n   uniquekeys.append(k)\n']], ["How do I use Python's itertools.groupby()?"], 3], [(773, 1), [["Here's an example of that, using clearer variable names:"], ["Here's a slightly different example with the same data, using a list comprehension:"]], [[' from itertools import groupby\n\nthings = [("animal", "bear"), ("animal", "duck"), ("plant", "cactus"), ("vehicle", "speed boat"), ("vehicle", "school bus")]\n\nfor key, group in groupby(things, lambda x: x[0]):\n    for thing in group:\n        print "A %s is a %s." % (thing[1], key)\n    print " "\n']], ["How do I use Python's itertools.groupby()?"], 3], [(773, 2), [["Here's a slightly different example with the same data, using a list comprehension:"], ['This will give you the output:']], [[' for key, group in groupby(things, lambda x: x[0]):\n    listOfThings = " and ".join([thing[1] for thing in group])\n    print key + "s:  " + listOfThings + "."\n']], ["How do I use Python's itertools.groupby()?"], 3], [(972, 0), [['In Python, there is a difference between functions and bound methods.'], ['Callables that are attributes of a class (as opposed to an instance) are still unbound, though, so you can modify the class definition whenever you want:']], [[' >>> def foo():\n...     print "foo"\n...\n>>> class A:\n...     def bar( self ):\n...         print "bar"\n...\n>>> a = A()\n>>> foo\n<function foo at 0x00A98D70>\n>>> a.bar\n<bound method A.bar of <__main__.A instance at 0x00A9BC88>>\n>>>\n']], ['Adding a Method to an Existing Object Instance'], 7], [(972, 1), [['Callables that are attributes of a class (as opposed to an instance) are still unbound, though, so you can modify the class definition whenever you want:'], ["Previously defined instances are updated as well (as long as they haven't overridden the attribute themselves):"]], [[' >>> def fooFighters( self ):\n...     print "fooFighters"\n...\n>>> A.fooFighters = fooFighters\n>>> a2 = A()\n>>> a2.fooFighters\n<bound method A.fooFighters of <__main__.A instance at 0x00A9BEB8>>\n>>> a2.fooFighters()\nfooFighters\n']], ['Adding a Method to an Existing Object Instance'], 7], [(972, 2), [["Previously defined instances are updated as well (as long as they haven't overridden the attribute themselves):"], ['The problem comes when you want to attach a method to a single instance:']], [[' >>> a.fooFighters()\nfooFighters\n']], ['Adding a Method to an Existing Object Instance'], 7], [(972, 3), [['The problem comes when you want to attach a method to a single instance:'], ["The function is not automatically bound when it's attached directly to an instance:"]], [[' >>> def barFighters( self ):\n...     print "barFighters"\n...\n>>> a.barFighters = barFighters\n>>> a.barFighters()\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: barFighters() takes exactly 1 argument (0 given)\n']], ['Adding a Method to an Existing Object Instance'], 7], [(972, 4), [["The function is not automatically bound when it's attached directly to an instance:"], ['To bind it, we can use the  MethodType function in the types module :']], [[' >>> a.barFighters\n<function barFighters at 0x00A98EF0>\n']], ['Adding a Method to an Existing Object Instance'], 7], [(972, 5), [['To bind it, we can use the  MethodType function in the types module :'], ['This time other instances of the class have not been affected:']], [[' >>> import types\n>>> a.barFighters = types.MethodType( barFighters, a )\n>>> a.barFighters\n<bound method ?.barFighters of <__main__.A instance at 0x00A9BC88>>\n>>> a.barFighters()\nbarFighters\n']], ['Adding a Method to an Existing Object Instance'], 7], [(972, 6), [['This time other instances of the class have not been affected:'], ['More information can be found by reading about  descriptors  and  metaclass   programming .']], [[' >>> a2.barFighters()\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nAttributeError: A instance has no attribute \'barFighters\'\n']], ['Adding a Method to an Existing Object Instance'], 7], [(1476, 0), [['For reference— future  Python possibilities: \nStarting with Python 2.6 you can express binary literals using the prefix  0b  or  0B :'], ['You can also use the new  bin  function to get the binary representation of a number:']], [[' >>> 0b101111\n47\n']], ['How do you express binary literals in Python?'], 2], [(1476, 1), [['You can also use the new  bin  function to get the binary representation of a number:'], ["Development version of the documentation:  What's New in Python 2.6"]], [[" >>> bin(173)\n'0b10101101'\n"]], ['How do you express binary literals in Python?'], 2], [(3061, 0), [['Assuming module  foo  with method  bar :'], ['As far as that goes, lines 2 and 3 can be compressed to:']], [[" import foo\nmethod_to_call = getattr(foo, 'bar')\nresult = method_to_call()\n"]], ["Calling a function of a module from a string with the function's name"], 2], [(3061, 1), [['As far as that goes, lines 2 and 3 can be compressed to:'], ['if that makes more sense for your use case.  You can use  getattr  in this fashion on class instance bound methods, module-level methods, class methods... the list goes on.']], [[" result = getattr(foo, 'bar')()\n"]], ["Calling a function of a module from a string with the function's name"], 2], [(13396, 0), [['The increment in the original  foreach  loop will not affect the contents of the array, the only way to do this remains a  for  loop:'], ['Linq is not intended to modify existing collections or sequences. It creates new sequences based on existing ones. It is possible to achieve the above code using Linq, though it is slightly against its purposes:']], [[' for(int i = 0; i < intArray.Length; ++i)\n{\n    if(intArray[i] > 3) ++intArray[i];\n}\n']], ['Replacement for for... if array iteration'], 4], [(13396, 1), [['Linq is not intended to modify existing collections or sequences. It creates new sequences based on existing ones. It is possible to achieve the above code using Linq, though it is slightly against its purposes:'], ['Using  where  (or equivalent), as shown in some of the other answers, will exclude any values less than or equal to 3 from the resulting sequence.']], [[' var newArray1 = from i in intArray select ((i > 3) ? (i + 1) : (i));\nvar newArray2 = intArray.Select(i => (i > 3) ? (i + 1) : (i));\n']], ['Replacement for for... if array iteration'], 4], [(13396, 2), [['Using  where  (or equivalent), as shown in some of the other answers, will exclude any values less than or equal to 3 from the resulting sequence.'], ['There is a  ForEach  method on arrays that will allow you to use a lambda function instead of a  foreach  block, though for anything more than a method call I would stick with  foreach .']], [[' var intArray = new int[] { 10, 1, 20, 2 };\nvar newArray = from i in intArray where i > 3 select i + 1;\n// newArray == { 11, 21 }\n']], ['Replacement for for... if array iteration'], 4], [(13396, 3), [['There is a  ForEach  method on arrays that will allow you to use a lambda function instead of a  foreach  block, though for anything more than a method call I would stick with  foreach .'], ['-10000']], [[' intArray.ForEach(i => DoSomething(i));\n']], ['Replacement for for... if array iteration'], 4], [(13941, 0), [['Have you tried :'], ['Actually, I think your original attempt works also with a little modification:']], [[" import sys\nsys.stdout.write('\\a')\nsys.stdout.flush()\n"]], ['Python Sound ("Bell")'], 2], [(13941, 1), [['Actually, I think your original attempt works also with a little modification:'], ['(You just need the single quotes around the character sequence).']], [[" print('\\a')\n"]], ['Python Sound ("Bell")'], 2], [(19339, 0), [['zip  is its own inverse! Provided you use the special * operator.'], ['The way this works is by calling  zip  with the arguments:']], [[" >>> zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]\n"]], ['Transpose/Unzip Function (inverse of zip)?'], 2], [(19339, 1), [['The way this works is by calling  zip  with the arguments:'], ["… except the arguments are passed to  zip  directly (after being converted to a tuple), so there's no need to worry about the number of arguments getting too big."]], [[" zip(('a', 1), ('b', 2), ('c', 3), ('d', 4))\n"]], ['Transpose/Unzip Function (inverse of zip)?'], 2], [(28165, 0), [['-10000'], ['You call it like so:']], [[' function subst($str, $dict){\n    return preg_replace(array_map(create_function(\'$a\', \'return "/%\\\\($a\\\\)s/";\'), array_keys($dict)), array_values($dict), $str);\n }\n']], ['Does PHP have an equivalent to this type of Python string substitution?'], 2], [(28165, 1), [['You call it like so:'], ['-10000']], [[" echo subst('The %(site)s site %(adj)s because it %(adj)s', array('site'=>'Stackoverflow', 'adj'=>'rocks'));\n"]], ['Does PHP have an equivalent to this type of Python string substitution?'], 2], [(28369, 0), [['Depends on your definition of safe I suppose. A lot of the security depends on what you pass in and what you are allowed to pass in the context. For instance, if a file is passed in, I can open arbitrary files:'], ["On the other hand, you don't need to write your own parser, you could just write your own evaluator for the python ast:"]], [[' >>> names[\'f\'] = open(\'foo\', \'w+\')\n>>> safe_eval.safe_eval("baz = type(f)(\'baz\', \'w+\')", names)\n>>> names[\'baz\']\n<open file \'baz\', mode \'w+\' at 0x413da0>\n']], ['Is "safe_eval" really safe?'], 2], [(28369, 1), [["On the other hand, you don't need to write your own parser, you could just write your own evaluator for the python ast:"], ['That way, hopefully, you could implement safe imports. The other idea is to use Jython or IronPython and take advantage of Java/.Net sandboxing capabilities.']], [[' >>> import compiler\n>>> ast = compiler.parse("print \'Hello world!\'")\n']], ['Is "safe_eval" really safe?'], 2], [(28559, 0), [["Short answer: there's no way to do inline variable assignment in a while loop in Python. Meaning that I  cannot  say:"], ['Since that\'s not possible, there are a number of "idiomatically correct" ways of doing this:']], [[' while x=next():\n    // do something here!\n']], ['Most Pythonic way equivalent for: while ((x = next()) != END)'], 4], [(28559, 1), [['Since that\'s not possible, there are a number of "idiomatically correct" ways of doing this:'], ['Obviously, this is kind of ugly. You can also use one of the "iterator" approaches listed above, but, again, that may not be ideal. Finally, you can use the "pita pocket" approach that I actually just found while googling:']], [[' while 1:\n    x = next()\n    if x != END:\n        // Blah\n    else:\n        break\n']], ['Most Pythonic way equivalent for: while ((x = next()) != END)'], 4], [(28559, 2), [['Obviously, this is kind of ugly. You can also use one of the "iterator" approaches listed above, but, again, that may not be ideal. Finally, you can use the "pita pocket" approach that I actually just found while googling:'], ['Now you can do:']], [[" class Pita( object ):\n    __slots__ = ('pocket',)\n    marker = object()\n    def __init__(self, v=marker):\n        if v is not self.marker:\n            self.pocket = v\n    def __call__(self, v=marker):\n        if v is not self.marker:\n            self.pocket = v\n        return self.pocket\n"]], ['Most Pythonic way equivalent for: while ((x = next()) != END)'], 4], [(28559, 3), [['Now you can do:'], ['Thanks for this question; learning about the  __call__  idiom was really cool! :)']], [[' p = Pita()\nwhile p( next() ) != END:\n    // do stuff with p.pocket!\n']], ['Most Pythonic way equivalent for: while ((x = next()) != END)'], 4], [(32899, 0), [['i use something like this:'], ['The  nose-parameterized  package can be used to automate this process:']], [[' import unittest\n\nl = [["foo", "a", "a",], ["bar", "a", "b"], ["lee", "b", "b"]]\n\nclass TestSequense(unittest.TestCase):\n    pass\n\ndef test_generator(a, b):\n    def test(self):\n        self.assertEqual(a,b)\n    return test\n\nif __name__ == \'__main__\':\n    for t in l:\n        test_name = \'test_%s\' % t[0]\n        test = test_generator(t[1], t[2])\n        setattr(TestSequense, test_name, test)\n    unittest.main()\n']], ['How to generate dynamic (parametrized) unit tests in python?'], 3], [(32899, 1), [['The  nose-parameterized  package can be used to automate this process:'], ['Which will generate the tests:']], [[' from nose_parameterized import parameterized\n\nclass TestSequence(unittest.TestCase):\n    @parameterized.expand([\n        ["foo", "a", "a",],\n        ["bar", "a", "b"],\n        ["lee", "b", "b"],\n    ])\n    def test_sequence(self, name, a, b):\n        self.assertEqual(a,b)\n']], ['How to generate dynamic (parametrized) unit tests in python?'], 3], [(32899, 2), [['Which will generate the tests:'], ['-10000']], [[' test_sequence_0_foo (__main__.TestSequence) ... ok\ntest_sequence_1_bar (__main__.TestSequence) ... FAIL\ntest_sequence_2_lee (__main__.TestSequence) ... ok\n\n======================================================================\nFAIL: test_sequence_1_bar (__main__.TestSequence)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File "/usr/local/lib/python2.7/site-packages/nose_parameterized/parameterized.py", line 233, in <lambda>\n    standalone_func = lambda *a: func(*(a + p.args), **p.kwargs)\n  File "x.py", line 12, in test_sequence\n    self.assertEqual(a,b)\nAssertionError: \'a\' != \'b\'\n']], ['How to generate dynamic (parametrized) unit tests in python?'], 3], [(35948, 0), [['To make it work in google app-engine you need to add a file to your main directory,\nI called mine  django_hack.py  which contains this little piece of code'], ['Now that we have this file, all we need to do is tell the app-engine to use it...\nwe do that by adding this little line to your main file']], [[' from google.appengine.ext import webapp\n\nregister = webapp.template.create_template_register()\n\ndef hash(h,key):\n    if key in h:\n        return h[key]\n    else:\n        return None\n\nregister.filter(hash)\n']], ['Django templates and variable attributes'], 3], [(35948, 1), [['Now that we have this file, all we need to do is tell the app-engine to use it...\nwe do that by adding this little line to your main file'], ['and in your template view add this template instead of the usual code']], [[" webapp.template.register_template_library('django_hack')\n"]], ['Django templates and variable attributes'], 3], [(35948, 2), [['and in your template view add this template instead of the usual code'], ['And its should work perfectly =)']], [[' {{ user|hash:item }}\n']], ['Django templates and variable attributes'], 3], [(36812, 0), [['Sample URLconf for the simplest case:'], ['Your template will get the context variable "form", which you just need to wrap in a <form> tag and add a submit button.  The simplest working template (by default should go in "my_products_app/product_form.html"):']], [[" from django.conf.urls.defaults import *\nfrom django.views.generic.create_update import create_object\n\nfrom my_products_app.models import Product\n\nurlpatterns = patterns('',\n    url(r'^admin/products/add/$', create_object, {'model': Product}))\n"]], ['How do I add data to an existing model in Django?'], 2], [(36812, 1), [['Your template will get the context variable "form", which you just need to wrap in a <form> tag and add a submit button.  The simplest working template (by default should go in "my_products_app/product_form.html"):'], ["Note that your Product model must have a get_absolute_url method, or else you must pass in the post_save_redirect parameter to the view.  Otherwise it won't know where to redirect to after save."]], [[' <form action="." method="POST">\n  {{ form }}\n  <input type="submit" name="submit" value="add">\n</form>\n']], ['How do I add data to an existing model in Django?'], 2], [(38601, 0), [["Define your own ModelForm subclass for your model (best to put it in forms.py in your app), and tell it to use the AdminDateWidget / AdminTimeWidget / AdminSplitDateTime (replace 'mydate' etc with the proper field names from your model):"], ["And the hacky part: the admin date/time widgets presume that the i18n JS stuff has been loaded, and also require core.js, but don't provide either one automatically.  So in your template above {{ form.media }} you'll need:"]], [[" from django import forms\nfrom my_app.models import Product\nfrom django.contrib.admin import widgets                                       \n\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n    def __init__(self, *args, **kwargs):\n        super(ProductForm, self).__init__(*args, **kwargs)\n        self.fields['mydate'].widget = widgets.AdminDateWidget()\n        self.fields['mytime'].widget = widgets.AdminTimeWidget()\n        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()\n"]], ['Using Django time/date widgets in custom form'], 5], [(38601, 1), [["And the hacky part: the admin date/time widgets presume that the i18n JS stuff has been loaded, and also require core.js, but don't provide either one automatically.  So in your template above {{ form.media }} you'll need:"], ['You may also wish to use the following admin CSS (thanks  Alex  for mentioning this):']], [[' <script type="text/javascript" src="/my_admin/jsi18n/"></script>\n<script type="text/javascript" src="/media/admin/js/core.js"></script>\n']], ['Using Django time/date widgets in custom form'], 5], [(38601, 2), [['You may also wish to use the following admin CSS (thanks  Alex  for mentioning this):'], ["This also requires that the URL /my_admin/jsi18n/ be manually wired up to the django.views.i18n.javascript_catalog view (or null_javascript_catalog if you aren't using I18N).  You have to do this yourself instead of going through the admin application so it's accessible regardless of whether you're logged into the admin (thanks  Jeremy  for pointing this out).  Sample code for your URLconf:"]], [[' <link rel="stylesheet" type="text/css" href="/media/admin/css/forms.css"/>\n<link rel="stylesheet" type="text/css" href="/media/admin/css/base.css"/>\n<link rel="stylesheet" type="text/css" href="/media/admin/css/global.css"/>\n<link rel="stylesheet" type="text/css" href="/media/admin/css/widgets.css"/>\n']], ['Using Django time/date widgets in custom form'], 5], [(38601, 3), [["This also requires that the URL /my_admin/jsi18n/ be manually wired up to the django.views.i18n.javascript_catalog view (or null_javascript_catalog if you aren't using I18N).  You have to do this yourself instead of going through the admin application so it's accessible regardless of whether you're logged into the admin (thanks  Jeremy  for pointing this out).  Sample code for your URLconf:"], ['Lastly, if you are using Django 1.2 or later, you need some additional code in your template to help the widgets find their media:']], [[" (r'^my_admin/jsi18n', 'django.views.i18n.javascript_catalog'),\n"]], ['Using Django time/date widgets in custom form'], 5], [(38601, 4), [['Lastly, if you are using Django 1.2 or later, you need some additional code in your template to help the widgets find their media:'], ['Thanks  lupefiasco  for this addition.']], [[' {% load adminmedia %} /* At the top of the template. */\n\n/* In the head section of the template. */\n<script type="text/javascript">\nwindow.__admin_media_prefix__ = "{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}";\n</script>\n']], ['Using Django time/date widgets in custom form'], 5], [(39960, 0), [['window  is a reference to the global scope, like  globals()  in python.'], ['is the same as:']], [[' globals()["foo"]\n']], ["Javascript equivalent of Python's locals()?"], 2], [(39960, 1), [['is the same as:'], ['-10000']], [[' window["foo"]\n']], ["Javascript equivalent of Python's locals()?"], 2], [(42950, 0), [['-10000'], ['so:']], [[' >>> import calendar\n>>> calendar.monthrange(2002,1)\n(1, 31)\n>>> calendar.monthrange(2008,2)\n(4, 29)\n>>> calendar.monthrange(2100,2)\n(0, 28)\n']], ['Get Last Day of the Month in Python'], 3], [(42950, 1), [['so:'], ['Just to be clear,  monthrange  supports leap years as well:']], [[' calendar.monthrange(year, month)[1]\n']], ['Get Last Day of the Month in Python'], 3], [(42950, 2), [['Just to be clear,  monthrange  supports leap years as well:'], ['My previous answer  still works, but is clearly suboptimal.']], [[' >>> from calendar import monthrange\n>>> monthrange(2012, 2)\n(2, 29)\n']], ['Get Last Day of the Month in Python'], 3], [(44778, 0), [['-10000'], ['As  Ricardo Reyes  suggested, if it contains non-string types (such as integers, floats, bools, None) then do:']], [[' myList = [\'a\',\'b\',\'c\',\'d\']\nmyString = ",".join(myList )\n']], ['How would you make a comma-separated string from a list?'], 2], [(44778, 1), [['As  Ricardo Reyes  suggested, if it contains non-string types (such as integers, floats, bools, None) then do:'], ['-10000']], [[" myList = ','.join(map(str, myList)) \n"]], ['How would you make a comma-separated string from a list?'], 2], [(47207, 0), [['Change the line in your urls.py to:'], ['Then, in your template you use this to display the URL:']], [[' (r\'^manage/products/add/$\', create_object, {\'model\': Product, \'post_save_redirect\': \'\'}, "create-product"),\n']], ['Django: Print url of view without hardcoding the url'], 3], [(47207, 1), [['Then, in your template you use this to display the URL:'], ["If you're using Django 1.5 or higher you need this:"]], [[' {% url create-product %}\n']], ['Django: Print url of view without hardcoding the url'], 3], [(47207, 2), [["If you're using Django 1.5 or higher you need this:"], ["You can do some more powerful things with named URL patterns, they're very handy.  Note that they are only in the development version (and also 1.0)."]], [[" {% url 'create-product' %}\n"]], ['Django: Print url of view without hardcoding the url'], 3], [(48458, 0), [['Here are some code examples that may help as well:'], ['-10000']], [["main.py import wsgiref.handlers\n\nfrom google.appengine.ext import webapp\nfrom myapp.views import *\n\napplication = webapp.WSGIApplication([\n  ('/', IndexHandler),\n  ('/foo', FooHandler)\n], debug=True)\n\ndef main():\n  wsgiref.handlers.CGIHandler().run(application)\n"]], ['Project structure for Google App Engine'], 3], [(48458, 1), [['-10000'], ['-10000']], [['myapp/views.py import os\nimport datetime\nimport logging\nimport time\n\nfrom google.appengine.api import urlfetch\nfrom google.appengine.ext.webapp import template\nfrom google.appengine.api import users\nfrom google.appengine.ext import webapp\nfrom models import *\n\nclass IndexHandler(webapp.RequestHandler):\n  def get(self):\n    date = "foo"\n    # Do some processing        \n    template_values = {\'data\': data }\n    path = os.path.join(os.path.dirname(__file__) + \'/../templates/\', \'main.html\')\n    self.response.out.write(template.render(path, template_values))\n\nclass FooHandler(webapp.RequestHandler):\n  def get(self):\n    #logging.debug("start of handler")\n']], ['Project structure for Google App Engine'], 3], [(48458, 2), [['-10000'], ['I think this layout works great for new and relatively small to medium projects. For larger projects I would suggest breaking up the views and models to have their own sub-folders with something like:']], [['myapp/models.py from google.appengine.ext import db\n\nclass SampleModel(db.Model):\n']], ['Project structure for Google App Engine'], 3], [(50499, 0), [['p1.py:'], ['p2.py:']], [[' execfile("p2.py")\n']], ['How do I get the path and name of the file that is currently executing?'], 2], [(50499, 1), [['p2.py:'], ['-10000']], [[' import inspect, os\nprint inspect.getfile(inspect.currentframe()) # script filename (usually with path)\nprint os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory\n']], ['How do I get the path and name of the file that is currently executing?'], 2], [(51553, 0), [['First I created a MV which refreshes every minute.'], ['While its refreshing, there is no rows returned']], [[' create materialized view mv_so_x \nbuild immediate \nrefresh complete \nSTART WITH SYSDATE NEXT SYSDATE + 1/24/60\n as select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;\n']], ["Why are SQL aggregate functions so much slower than Python and Java (or Poor Man's OLAP)"], 5], [(51553, 1), [['While its refreshing, there is no rows returned'], ['Once it refreshes, its MUCH faster than doing the raw query']], [[' SQL> select * from mv_so_x;\n\nno rows selected\n\nElapsed: 00:00:00.00\n']], ["Why are SQL aggregate functions so much slower than Python and Java (or Poor Man's OLAP)"], 5], [(51553, 2), [['Once it refreshes, its MUCH faster than doing the raw query'], ['If we insert into the base table, the result is not immediately viewable view the MV.']], [[' SQL> select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899459 7495.38839 22.2905454 5.00276131 2.13432836\n\nElapsed: 00:00:05.74\nSQL> select * from mv_so_x;\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899459 7495.38839 22.2905454 5.00276131 2.13432836\n\nElapsed: 00:00:00.00\nSQL> \n']], ["Why are SQL aggregate functions so much slower than Python and Java (or Poor Man's OLAP)"], 5], [(51553, 3), [['If we insert into the base table, the result is not immediately viewable view the MV.'], ['But wait a minute or so, and the MV will update behind the scenes, and the result is returned fast as you could want.']], [[' SQL> insert into so_x values (1,2,3,4,5);\n\n1 row created.\n\nElapsed: 00:00:00.00\nSQL> commit;\n\nCommit complete.\n\nElapsed: 00:00:00.00\nSQL> select * from mv_so_x;\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899459 7495.38839 22.2905454 5.00276131 2.13432836\n\nElapsed: 00:00:00.00\nSQL> \n']], ["Why are SQL aggregate functions so much slower than Python and Java (or Poor Man's OLAP)"], 5], [(51553, 4), [['But wait a minute or so, and the MV will update behind the scenes, and the result is returned fast as you could want.'], ["This isn't ideal. for a start, its not realtime, inserts/updates will not be immediately visible. Also, you've got a query running to update the MV whether you need it or not (this can be tune to whatever time frame, or on demand). But, this does show how much faster an MV can make it seem to the end user, if you can live with values which aren't quite upto the second accurate."]], [[' SQL> /\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899460 7495.35823 22.2905352 5.00276078 2.17647059\n\nElapsed: 00:00:00.00\nSQL> \n']], ["Why are SQL aggregate functions so much slower than Python and Java (or Poor Man's OLAP)"], 5], [(58622, 0), [['You can use doxygen to document your Python code. You can either use the Python documentation string syntax:'], ['Or  you can (similar to C-style languages under doxygen) double up the comment marker ( # ) on the first line before the member:']], [[' """@package docstring\nDocumentation for this module.\n\nMore details.\n"""\n\ndef func():\n    """Documentation for a function.\n\n    More details.\n    """\n    pass\n']], ['Can I document Python code with doxygen (and does it make sense)?'], 2], [(58622, 1), [['Or  you can (similar to C-style languages under doxygen) double up the comment marker ( # ) on the first line before the member:'], ["In that case, you can use the special doxygen commands. There's no particular Python output mode, but you can apparently improve the results by setting  OPTMIZE_OUTPUT_JAVA  to  YES ."]], [[' ## @package pyexample\n#  Documentation for this module.\n#\n#  More details.\n\n## Documentation for a function.\n#\n#  More details.\ndef func():\n    pass\n']], ['Can I document Python code with doxygen (and does it make sense)?'], 2], [(59825, 0), [["Two options that don't require copying the whole set:"], ['Or...']], [[' for e in s:\n    break\n# e is now an element from s\n']], ['How to retrieve an element from a set without removing it?'], 2], [(59825, 1), [['Or...'], ["But in general, sets don't support indexing or slicing."]], [[' e = next(iter(s))\n']], ['How to retrieve an element from a set without removing it?'], 2], [(60685, 0), [['This is a simple test program I knocked up:'], ['The re I used:']], [[' #!/usr/bin/env python\n\nTEST1="""\n#include "Foo.h"\n#define bar foo\\\\\n    x\n#include "Bar.h"\n"""\n\nTEST2="""\n#define bar foo\n#define x 1 \\\\\n    12 \\\\\n    2 \\\\\\\\ 3\nFoobar\n"""\n\nTEST3="""\n#define foo(x) if(x) \\\\\ndoSomething(x)\n"""\n\nTEST4="""\n#define foo(x) if(x) \\\\\ndoSomething(x)\nnormalCode();\n"""\n\nimport re\nmatcher = re.compile(r"^[ \\t]*#define(.*\\\\\\n)+.*$",re.MULTILINE)\n\ndef extractDefines(s):\n    mo = matcher.search(s)\n    if not mo:\n        print mo\n        return\n    print mo.group(0)\n\nextractDefines(TEST1)\nextractDefines(TEST2)\nextractDefines(TEST3)\nextractDefines(TEST4)\n']], ['python regex to match multi-line preprocessor macro'], 2], [(60685, 1), [['The re I used:'], ['Is very similar to the one use used, the changes:']], [[' r"^[ \\t]*#define(.*\\\\\\n)+.*$"\n']], ['python regex to match multi-line preprocessor macro'], 2], [(61605, 0), [['There is a builtin function  divmod()  that does exactly that.'], ['There are other examples:  zip ,  enumerate ,  dict.items . ']], [[' q, r = divmod(x, y) # ((x - x%y)/y, x%y) Invariant: div*y + mod == x\n']], ['Is it pythonic for a function to return multiple values?'], 3], [(61605, 1), [['There are other examples:  zip ,  enumerate ,  dict.items . '], ['Tuples are constructed by the comma\n  operator  (not within square brackets),\n  with or without enclosing parentheses,\n  but an empty tuple must have the\n  enclosing parentheses, such as a, b, c\n  or (). A single item tuple must have a\n  trailing comma, such as (d,).']], [[' for i, e in enumerate([1, 3, 3]):\n    print "index=%d, element=%s" % (i, e)\n\n# reverse keys and values in a dictionary\nd = dict((v, k) for k, v in adict.items()) # or \nd = dict(zip(adict.values(), adict.keys()))\n']], ['Is it pythonic for a function to return multiple values?'], 3], [(61605, 2), [['Tuples are constructed by the comma\n  operator  (not within square brackets),\n  with or without enclosing parentheses,\n  but an empty tuple must have the\n  enclosing parentheses, such as a, b, c\n  or (). A single item tuple must have a\n  trailing comma, such as (d,).'], ['-10000']], [[" >>> import collections\n>>> Point = collections.namedtuple('Point', 'x y')\n>>> x, y = Point(0, 1)\n>>> p = Point(x, y)\n>>> x, y, p\n(0, 1, Point(x=0, y=1))\n>>> p.x, p.y, p[0], p[1]\n(0, 1, 0, 1)\n>>> for i in p:\n...   print(i)\n...\n0\n1\n"]], ['Is it pythonic for a function to return multiple values?'], 3], [(67631, 0), [['For Python 3.5+ use:'], ['For Python 3.3 and 3.4 use:']], [[' import importlib.util\nspec = importlib.util.spec_from_file_location("module.name", "/path/to/file.py")\nfoo = importlib.util.module_from_spec(spec)\nspec.loader.exec_module(foo)\nfoo.MyClass()\n']], ['How to import a module given the full path?'], 3], [(67631, 1), [['For Python 3.3 and 3.4 use:'], ['Python 2 use:']], [[' from importlib.machinery import SourceFileLoader\n\nfoo = SourceFileLoader("module.name", "/path/to/file.py").load_module()\nfoo.MyClass()\n']], ['How to import a module given the full path?'], 3], [(67631, 2), [['Python 2 use:'], ['There are equivalent convenience functions for compiled Python files and DLLs.']], [[" import imp\n\nfoo = imp.load_source('module.name', '/path/to/file.py')\nfoo.MyClass()\n"]], ['How to import a module given the full path?'], 3], [(71151, 0), [['Try:'], ['Python 3.0']], [[' import HTMLParser\n']], ['HTML parser in Python'], 3], [(71151, 1), [['Python 3.0'], ['Python 2.2 and above']], [[' import html.parser\n']], ['HTML parser in Python'], 3], [(71151, 2), [['Python 2.2 and above'], ['-10000']], [[' import HTMLParser\n']], ['HTML parser in Python'], 3], [(74092, 0), [['The inspect module has exactly what you want:'], ['FYI, the code is:']], [[' inspect.isroutine( obj )\n']], ['Is there a common way to check in Python if an object is any function type?'], 2], [(74092, 1), [['FYI, the code is:'], ['-10000']], [[' def isroutine(object):\n    """Return true if the object is any kind of function or method."""\n    return (isbuiltin(object)\n            or isfunction(object)\n            or ismethod(object)\n            or ismethoddescriptor(object))\n']], ['Is there a common way to check in Python if an object is any function type?'], 2], [(75621, 0), [['If you add this method to your form class:'], ['you could then re-write your code as:']], [[" def get_cleaned_or_initial(self, fieldname):\n        if hasattr(self, 'cleaned_data'):\n            return self.cleaned_data.get(fieldname)\n        else:\n            return self[fieldname].field.initial\n"]], ['How to use form values from an unbound form'], 2], [(75621, 1), [['you could then re-write your code as:'], ['-10000']], [[" if request.method == 'GET':\n    form = MyForm()\nelse:\n    form = MyForm(request.method.POST)\n    form.is_valid()\n\ndo_query(form.get_cleaned_or_initial('start_date'), form.get_cleaned_or_initial('end_date'))\n"]], ['How to use form values from an unbound form'], 2], [(78431, 0), [['It can be done. As of Python 2.5, however, this mechanism is Linux-specific and not portable:'], ['That said, in the specific case of diff, you can simply take one of the files from stdin, and remove the need to use the bash-alike functionality in question:']], [[" import subprocess\nimport sys\n\nfile = sys.argv[1]\np1 = subprocess.Popen(['hg', 'cat', file], stdout=subprocess.PIPE)\np2 = subprocess.Popen([\n    'gvimdiff',\n    '/proc/self/fd/%s' % p1.stdout.fileno(),\n    file])\np2.wait()\n"]], ['Redirect command to input of another in Python'], 2], [(78431, 1), [['That said, in the specific case of diff, you can simply take one of the files from stdin, and remove the need to use the bash-alike functionality in question:'], ['-10000']], [[" file = sys.argv[1]\np1 = subprocess.Popen(['hg', 'cat', file], stdout=subprocess.PIPE)\np2 = subprocess.Popen(['diff', '-', file], stdin=p1.stdout)\ndiff_text = p2.communicate()[0]\n"]], ['Redirect command to input of another in Python'], 2], [(78799, 0), [['You might want to do this when the "inner" class is a one-off, which will never be used outside the  definition  of the outer class. For example to use a metaclass, it\'s sometimes handy to do'], ["The only other time I've used nested classes like that, I used the outer class only as a namespace to group a bunch of closely related classes together:"]], [[' class Foo(object):\n    class __metaclass__(type):\n        .... \n']], ['Is there a benefit to defining a class inside another class in Python?'], 2], [(78799, 1), [["The only other time I've used nested classes like that, I used the outer class only as a namespace to group a bunch of closely related classes together:"], ['Then from another module, you can import Group and refer to these as Group.cls1, Group.cls2 etc. However one might argue that you can accomplish exactly the same (perhaps in a less confusing way) by using a module.']], [[' class Group(object):\n    class cls1(object):\n       ...\n\n    class cls2(object):\n       ...\n']], ['Is there a benefit to defining a class inside another class in Python?'], 2], [(81451, 0), [['The purpose of this line in the\nServeHandler class is to "fix" the\nkey so that it gets rid of any name\nmangling that may have occurred in\nthe browser (I didn\'t observe any in\nChrome)'], ['The "save_as" clause at the end of this is important.  It will make sure that the file name does not get mangled when it is sent to your browser.  Get rid of it to observe what happens.']], [[' blob_key = str(urllib.unquote(blob_key))\n']], ['Upload files in Google App Engine'], 3], [(81451, 1), [['The "save_as" clause at the end of this is important.  It will make sure that the file name does not get mangled when it is sent to your browser.  Get rid of it to observe what happens.'], ['Good Luck!']], [[' self.send_blob(blobstore.BlobInfo.get(blob_key), save_as=True)\n']], ['Upload files in Google App Engine'], 3], [(81451, 2), [['Good Luck!'], ['-10000']], [[' import os\nimport urllib\n\nfrom google.appengine.ext import blobstore\nfrom google.appengine.ext import webapp\nfrom google.appengine.ext.webapp import blobstore_handlers\nfrom google.appengine.ext.webapp import template\nfrom google.appengine.ext.webapp.util import run_wsgi_app\n\nclass MainHandler(webapp.RequestHandler):\n    def get(self):\n        upload_url = blobstore.create_upload_url(\'/upload\')\n        self.response.out.write(\'<html><body>\')\n        self.response.out.write(\'<form action="%s" method="POST" enctype="multipart/form-data">\' % upload_url)\n        self.response.out.write("""Upload File: <input type="file" name="file"><br> <input type="submit" name="submit" value="Submit"> </form></body></html>""")\n\n        for b in blobstore.BlobInfo.all():\n            self.response.out.write(\'<li><a href="/serve/%s\' % str(b.key()) + \'">\' + str(b.filename) + \'</a>\')\n\nclass UploadHandler(blobstore_handlers.BlobstoreUploadHandler):\n    def post(self):\n        upload_files = self.get_uploads(\'file\')\n        blob_info = upload_files[0]\n        self.redirect(\'/\')\n\nclass ServeHandler(blobstore_handlers.BlobstoreDownloadHandler):\n    def get(self, blob_key):\n        blob_key = str(urllib.unquote(blob_key))\n        if not blobstore.get(blob_key):\n            self.error(404)\n        else:\n            self.send_blob(blobstore.BlobInfo.get(blob_key), save_as=True)\n\ndef main():\n    application = webapp.WSGIApplication(\n          [(\'/\', MainHandler),\n           (\'/upload\', UploadHandler),\n           (\'/serve/([^/]+)?\', ServeHandler),\n          ], debug=True)\n    run_wsgi_app(application)\n\nif __name__ == \'__main__\':\n  main()\n']], ['Upload files in Google App Engine'], 3], [(87317, 0), [["I'm not really an old hand at Python, but here's an XPath solution using libxml2."], ['With result...']], [[' import libxml2\n\nDOC = """<elements>\n    <parent name="CategoryA">\n        <child value="a1"/>\n        <child value="a2"/>\n        <child value="a3"/>\n    </parent>\n    <parent name="CategoryB">\n        <child value="b1"/>\n        <child value="b2"/>\n        <child value="b3"/>\n    </parent>\n</elements>"""\n\ndoc = libxml2.parseDoc(DOC)\n\ndef getValues(cat):\n    return [attr.content for attr in doc.xpathEval("/elements/parent[@name=\'%s\']/child/@value" % (cat))]\n\nprint getValues("CategoryA")\n']], ['Get list of XML attribute values in Python'], 2], [(87317, 1), [['With result...'], ['-10000']], [[" ['a1', 'a2', 'a3']\n"]], ['Get list of XML attribute values in Python'], 2], [(88194, 0), [['-10000'], ['also, the problem is greater, as you have multiple calls of bash ']], [[' $ cat > eg.sh \nexport FOO="bar";\n^D\n$ bash eg.sh \n$ echo $FOO; \n\n$\n']], ['Setting Environment Variables for Mercurial Hook'], 2], [(88194, 1), [['also, the problem is greater, as you have multiple calls of bash '], ['it would be like thinking I could set a variable in one php script and then magically get it with another simply by running one after the  other. ']], [[' bash 1 -> hg -> bash 2 ( shell script ) \n             -> bash 3 ( env call )\n']], ['Setting Environment Variables for Mercurial Hook'], 2], [(92928, 0), [["It blocks the thread.  If you look in Modules/timemodule.c in the Python source, you'll see that in the call to  floatsleep() , the substantive part of the sleep operation is wrapped in a Py_BEGIN_ALLOW_THREADS and Py_END_ALLOW_THREADS block, allowing other threads to continue to execute while the current one sleeps.  You can also test this with a simple python program:"], ['Which will print:']], [[' import time\nfrom threading import Thread\n\nclass worker(Thread):\n    def run(self):\n        for x in xrange(0,11):\n            print x\n            time.sleep(1)\n\nclass waiter(Thread):\n    def run(self):\n        for x in xrange(100,103):\n            print x\n            time.sleep(5)\n\ndef run():\n    worker().start()\n    waiter().start()\n']], ['time.sleep -- sleeps thread or process?'], 2], [(92928, 1), [['Which will print:'], ['-10000']], [[' >>> thread_test.run()\n0\n100\n>>> 1\n2\n3\n4\n5\n101\n6\n7\n8\n9\n10\n102\n']], ['time.sleep -- sleeps thread or process?'], 2], [(100210, 0), [['For example:'], ['results in the two values, three seconds apart:']], [[' import datetime\na = datetime.datetime(100,1,1,11,34,59)\nb = a + datetime.timedelta(0,3) # days, seconds, then other fields.\nprint a.time()\nprint b.time()\n']], ['What is the standard way to add N seconds to datetime.time in Python?'], 5], [(100210, 1), [['results in the two values, three seconds apart:'], ['You could also opt for the more readable']], [[' 11:34:59\n11:35:02\n']], ['What is the standard way to add N seconds to datetime.time in Python?'], 5], [(100210, 2), [['You could also opt for the more readable'], ["If you're after a function that can do this, you can look into using  addSecs  below:"]], [[' b = a + datetime.timedelta(seconds=3)\n']], ['What is the standard way to add N seconds to datetime.time in Python?'], 5], [(100210, 3), [["If you're after a function that can do this, you can look into using  addSecs  below:"], ['This outputs:']], [[' import datetime\n\ndef addSecs(tm, secs):\n    fulldate = datetime.datetime(100, 1, 1, tm.hour, tm.minute, tm.second)\n    fulldate = fulldate + datetime.timedelta(seconds=secs)\n    return fulldate.time()\n\na = datetime.datetime.now().time()\nb = addSecs(a, 300)\nprint a\nprint b\n']], ['What is the standard way to add N seconds to datetime.time in Python?'], 5], [(100210, 4), [['This outputs:'], ['-10000']], [['  09:11:55.775695\n 09:16:55\n']], ['What is the standard way to add N seconds to datetime.time in Python?'], 5], [(104420, 0), [["Starting with Python 2.6  (and if you're on Python 3) you have a  standard-library  tool for this:  itertools.permutations ."], ["If you're using an  older Python (<2.6)  for some reason or are just curious to know how it works, here's one nice approach, taken from   http://code.activestate.com/recipes/252178/ :"]], [[' import itertools\nlist(itertools.permutations([1, 2, 3]))\n']], ['How to generate all permutations of a list in Python'], 4], [(104420, 1), [["If you're using an  older Python (<2.6)  for some reason or are just curious to know how it works, here's one nice approach, taken from   http://code.activestate.com/recipes/252178/ :"], ["A couple of alternative approaches are listed in the documentation of  itertools.permutations . Here's one:"]], [[' def all_perms(elements):\n    if len(elements) <=1:\n        yield elements\n    else:\n        for perm in all_perms(elements[1:]):\n            for i in range(len(elements)):\n                # nb elements[0:1] works in both string and list contexts\n                yield perm[:i] + elements[0:1] + perm[i:]\n']], ['How to generate all permutations of a list in Python'], 4], [(104420, 2), [["A couple of alternative approaches are listed in the documentation of  itertools.permutations . Here's one:"], ['And another, based on  itertools.product :']], [[" def permutations(iterable, r=None):\n    # permutations('ABCD', 2) --> AB AC AD BA BC BD CA CB CD DA DB DC\n    # permutations(range(3)) --> 012 021 102 120 201 210\n    pool = tuple(iterable)\n    n = len(pool)\n    r = n if r is None else r\n    if r > n:\n        return\n    indices = range(n)\n    cycles = range(n, n-r, -1)\n    yield tuple(pool[i] for i in indices[:r])\n    while n:\n        for i in reversed(range(r)):\n            cycles[i] -= 1\n            if cycles[i] == 0:\n                indices[i:] = indices[i+1:] + indices[i:i+1]\n                cycles[i] = n - i\n            else:\n                j = cycles[i]\n                indices[i], indices[-j] = indices[-j], indices[i]\n                yield tuple(pool[i] for i in indices[:r])\n                break\n        else:\n            return\n"]], ['How to generate all permutations of a list in Python'], 4], [(104420, 3), [['And another, based on  itertools.product :'], ['-10000']], [[' def permutations(iterable, r=None):\n    pool = tuple(iterable)\n    n = len(pool)\n    r = n if r is None else r\n    for indices in product(range(n), repeat=r):\n        if len(set(indices)) == r:\n            yield tuple(pool[i] for i in indices)\n']], ['How to generate all permutations of a list in Python'], 4], [(108193, 0), [['You could use Q objects for #1:'], ["For part two, you're looking for a union of two queries, basically"]], [[" # Blogs who have either hockey or django tags.\nfrom django.db.models import Q\nBlog.objects.filter(\n    Q(tags__name__iexact='hockey') | Q(tags__name__iexact='django')\n)\n"]], ['Union and Intersect in Django'], 3], [(108193, 1), [["For part two, you're looking for a union of two queries, basically"], ["For part #3 I believe you're looking for an intersection. See  line 307 of models.py  "]], [[' def get_union_by_model(self, queryset_or_model, tags):\n    """\n    Create a ``QuerySet`` containing instances of the specified\n    model associated with *any* of the given list of tags.\n    """\n    tags = get_tag_list(tags)\n    tag_count = len(tags)\n    queryset, model = get_queryset_and_model(queryset_or_model)\n\n    if not tag_count:\n        return model._default_manager.none()\n\n    model_table = qn(model._meta.db_table)\n    # This query selects the ids of all objects which have any of\n    # the given tags.\n    query = """\n    SELECT %(model_pk)s\n    FROM %(model)s, %(tagged_item)s\n    WHERE %(tagged_item)s.content_type_id = %(content_type_id)s\n      AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)\n      AND %(model_pk)s = %(tagged_item)s.object_id\n    GROUP BY %(model_pk)s""" % {\n        \'model_pk\': \'%s.%s\' % (model_table, qn(model._meta.pk.column)),\n        \'model\': model_table,\n        \'tagged_item\': qn(self.model._meta.db_table),\n        \'content_type_id\': ContentType.objects.get_for_model(model).pk,\n        \'tag_id_placeholders\': \',\'.join([\'%s\'] * tag_count),\n    }\n\n    cursor = connection.cursor()\n    cursor.execute(query, [tag.pk for tag in tags])\n    object_ids = [row[0] for row in cursor.fetchall()]\n    if len(object_ids) > 0:\n        return queryset.filter(pk__in=object_ids)\n    else:\n        return model._default_manager.none()\n']], ['Union and Intersect in Django'], 3], [(108193, 2), [["For part #3 I believe you're looking for an intersection. See  line 307 of models.py  "], ['-10000']], [[' def get_intersection_by_model(self, queryset_or_model, tags):\n    """\n    Create a ``QuerySet`` containing instances of the specified\n    model associated with *all* of the given list of tags.\n    """\n    tags = get_tag_list(tags)\n    tag_count = len(tags)\n    queryset, model = get_queryset_and_model(queryset_or_model)\n\n    if not tag_count:\n        return model._default_manager.none()\n\n    model_table = qn(model._meta.db_table)\n    # This query selects the ids of all objects which have all the\n    # given tags.\n    query = """\n    SELECT %(model_pk)s\n    FROM %(model)s, %(tagged_item)s\n    WHERE %(tagged_item)s.content_type_id = %(content_type_id)s\n      AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)\n      AND %(model_pk)s = %(tagged_item)s.object_id\n    GROUP BY %(model_pk)s\n    HAVING COUNT(%(model_pk)s) = %(tag_count)s""" % {\n        \'model_pk\': \'%s.%s\' % (model_table, qn(model._meta.pk.column)),\n        \'model\': model_table,\n        \'tagged_item\': qn(self.model._meta.db_table),\n        \'content_type_id\': ContentType.objects.get_for_model(model).pk,\n        \'tag_id_placeholders\': \',\'.join([\'%s\'] * tag_count),\n        \'tag_count\': tag_count,\n    }\n\n    cursor = connection.cursor()\n    cursor.execute(query, [tag.pk for tag in tags])\n    object_ids = [row[0] for row in cursor.fetchall()]\n    if len(object_ids) > 0:\n        return queryset.filter(pk__in=object_ids)\n    else:\n        return model._default_manager.none()\n']], ['Union and Intersect in Django'], 3], [(108892, 0), [['I found  autonose  to be pretty unreliable but  sniffer  seems to work very well.'], ['Then instead of running "nosetests", you run:']], [[' $ pip install sniffer\n$ cd myproject\n']], ["Is there something like 'autotest' for Python unittests?"], 3], [(108892, 1), [['Then instead of running "nosetests", you run:'], ['Or instead of  nosetests --verbose --with-doctest , you run:']], [[' $ sniffer\n']], ["Is there something like 'autotest' for Python unittests?"], 3], [(108892, 2), [['Or instead of  nosetests --verbose --with-doctest , you run:'], ["As described in the  readme , it's a good idea to install one of the platform-specific filesystem-watching libraries,  pyinotify ,  pywin32  or  MacFSEvents  (all installable via  pip  etc)"]], [[' $ sniffer -x--verbose -x--with-doctest\n']], ["Is there something like 'autotest' for Python unittests?"], 3], [(110259, 0), [['Heapy  is quite simple to use. At some point in your code, you have to write the following:'], ['This gives you some output like this:']], [[' from guppy import hpy\nh = hpy()\nprint h.heap()\n']], ['Which Python memory profiler is recommended?'], 2], [(110259, 1), [['This gives you some output like this:'], ['You can also find out from where objects are referenced and get statistics about that, but somehow the docs on that are a bit sparse.']], [[' Partition of a set of 132527 objects. Total size = 8301532 bytes.\nIndex  Count   %     Size   % Cumulative  % Kind (class / dict of class)\n0  35144  27  2140412  26   2140412  26 str\n1  38397  29  1309020  16   3449432  42 tuple\n2    530   0   739856   9   4189288  50 dict (no owner)\n']], ['Which Python memory profiler is recommended?'], 2], [(110378, 0), [['Example for  long_desc  field in your ProductForm (when your form does not have a custom prefix):'], ['Second approach  is to pass the  attrs  keyword to your widget constructor.']], [[' #id_long_desc {\n    width: 300px;\n    height: 200px;\n}\n']], ['Change the width of form elements created with ModelForm in Django'], 3], [(110378, 1), [['Second approach  is to pass the  attrs  keyword to your widget constructor.'], ['Third approach  is to leave the nice declarative interface of newforms for a while and set your widget attributes in custom constructor.']], [[" class ProductForm(ModelForm):\n    long_desc = forms.CharField(widget=forms.Textarea(attrs={'cols': 10, 'rows': 20}))\n    short_desc = forms.CharField(widget=forms.Textarea)\n    class Meta:\n        model = Product\n"]], ['Change the width of form elements created with ModelForm in Django'], 3], [(110378, 2), [['Third approach  is to leave the nice declarative interface of newforms for a while and set your widget attributes in custom constructor.'], ['This approach has the following advantages:']], [[" class ProductForm(ModelForm):\n    long_desc = forms.CharField(widget=forms.Textarea)\n    short_desc = forms.CharField(widget=forms.Textarea)\n    class Meta:\n        model = Product\n\n    # Edit by bryan\n    def __init__(self, *args, **kwargs):\n        super(ProductForm, self).__init__(*args, **kwargs) # Call to ModelForm constructor\n        self.fields['long_desc'].widget.attrs['cols'] = 10\n        self.fields['long_desc'].widget.attrs['rows'] = 20\n"]], ['Change the width of form elements created with ModelForm in Django'], 3], [(111945, 0), [["I've used a variety of python HTTP libs in the past, and I've settled on ' Requests ' as my favourite.  Existing libs had pretty useable interfaces, but code can end up being a few lines too long for simple operations.  A basic PUT in requests looks like:"], ['You can then check the response status code with:']], [[' payload = {\'username\': \'bob\', \'email\': \'bob@bob.com\'}\n>>> r = requests.put("http://somedomain.org/endpoint", data=payload)\n']], ['Is there any way to do HTTP PUT in python'], 3], [(111945, 1), [['You can then check the response status code with:'], ['or the response with:']], [[' r.status_code\n']], ['Is there any way to do HTTP PUT in python'], 3], [(111945, 2), [['or the response with:'], ["Requests has a lot synactic sugar and shortcuts that'll make your life easier."]], [[' r.content\n']], ['Is there any way to do HTTP PUT in python'], 3], [(113341, 0), [['When you create an object (an instance of a class)'], ['A really common thing is ']], [[' b= BasicInfoPage(...)\n']], ['Python-passing variable between classes'], 3], [(113341, 1), [['A really common thing is '], ["When you build MOS, you provide it with the instance of BasicInfoPage that it's supposed to use."]], [[' class MOS( wx.wizard.PageSimple ):\n    def __init__( self, parent, title, basicInfoPage ):\n        <snip>\n        self.basicInfo= basicInfoPage\n']], ['Python-passing variable between classes'], 3], [(113341, 2), [["When you build MOS, you provide it with the instance of BasicInfoPage that it's supposed to use."], ['Now, the object  m  can examine  someBasicInfoPage.intelligence  ']], [[' someBasicInfoPage= BasicInfoPage( ... ) \nm= MOS( ..., someBasicInfoPage )\n']], ['Python-passing variable between classes'], 3], [(116894, 0), [["The empty Record class and the free-floating function that (generally) applies to an individual Record is a hint that you haven't designed your class properly."], ['Now, your  calculate_pnl( records, node_prices )  is simpler and uses the object properly.']], [[' class Record( object ):\n    """Assuming rtda and pnl must exist."""\n    def __init__( self ):\n        self.da= 0\n        self.rt= 0\n        self.rtda= 0 # or whatever\n        self.pnl= None # \n        self.sink = None # Not clear what this is\n    def setPnl( self, node_prices ):\n        # fill RT and DA prices from the hash retrieved above\n        # calculate dependent values: RT-DA and PNL\n']], ['Best practices for manipulating database result sets in Python?'], 2], [(116894, 1), [['Now, your  calculate_pnl( records, node_prices )  is simpler and uses the object properly.'], ["The point isn't to trivially refactor the code in small ways."]], [[' def calculate_pnl( records, node_prices ):\n    for record in records:\n        record.setPnl( node_prices )\n']], ['Best practices for manipulating database result sets in Python?'], 2], [(117211, 0), [['Use '], ['instead of']], [[" self.combo['selection']\n"]], ["How to update a Tix.ComboBox's text?"], 2], [(117211, 1), [['instead of'], ['-10000']], [[" self.combo['value']\n"]], ["How to update a Tix.ComboBox's text?"], 2], [(117986, 0), [['The middleware'], ['The test']], [[" from wsgiref.util import request_uri\nimport sys\n\ndef logging_middleware(application, stream=sys.stdout):\n    def _logger(environ, start_response):\n        stream.write('REQUEST\\n')\n        stream.write('%s %s\\n' %(\n            environ['REQUEST_METHOD'],\n            request_uri(environ),\n        ))\n\n        for name, value in environ.items():\n            if name.startswith('HTTP_'):\n                stream.write('    %s: %s\\n' %(\n                    name[5:].title().replace('_', '-'),\n                    value,\n                ))\n        stream.flush()\n        def _start_response(code, headers):\n            stream.write('RESPONSE\\n')\n            stream.write('%s\\n' % code)\n            for data in headers:\n                stream.write('    %s: %s\\n' % data)\n            stream.flush()\n            start_response(code, headers)\n        return application(environ, _start_response)\n    return _logger\n"]], ['Debug/Monitor middleware for python wsgi applications'], 2], [(117986, 1), [['The test'], ["See also the  werkzeug debugger  Armin wrote, it's usefull for interactive debugging."]], [[" def application(environ, start_response):\n    start_response('200 OK', [\n        ('Content-Type', 'text/html')\n    ])\n    return ['Hello World']\n\nif __name__ == '__main__':\n    logger = logging_middleware(application)\n    from wsgiref.simple_server import make_server\n    httpd = make_server('', 1234, logger)\n    httpd.serve_forever()\n"]], ['Debug/Monitor middleware for python wsgi applications'], 2], [(118096, 0), [['The shlex module solution allows escaped quotes, one quote escape another, and all fancy stuff shell supports.'], ['escaped quotes example:']], [[' >>> import shlex\n>>> my_splitter = shlex.shlex(\'\'\'foo, bar, "one, two", three four\'\'\', posix=True)\n>>> my_splitter.whitespace += \',\'\n>>> my_splitter.whitespace_split = True\n>>> print list(my_splitter)\n[\'foo\', \'bar\', \'one, two\', \'three\', \'four\']\n']], ['How can i parse a comma delimited string into a list (caveat)?'], 2], [(118096, 1), [['escaped quotes example:'], ['-10000']], [[' >>> my_splitter = shlex.shlex(\'\'\'"test, a",\'foo,bar",baz\',bar \\xc3\\xa4 baz\'\'\',\n                              posix=True) \n>>> my_splitter.whitespace = \',\' ; my_splitter.whitespace_split = True \n>>> print list(my_splitter)\n[\'test, a\', \'foo,bar",baz\', \'bar \\xc3\\xa4 baz\']\n']], ['How can i parse a comma delimited string into a list (caveat)?'], 2], [(118458, 0), [['Using the  csv  module you can do that way:'], ['If you need a string just use  StringIO  instance as a file:']], [[' import csv\nwriter = csv.writer(open("some.csv", "wb"))\nwriter.writerow(the_list)\n']], ['How can I join a list into a string (caveat)?'], 3], [(118458, 1), [['If you need a string just use  StringIO  instance as a file:'], ['csv  will write in a way it can read back later.\nYou can fine-tune its output by defining a  dialect , just set  quotechar ,  escapechar , etc, as needed:']], [[' f = StringIO.StringIO()\nwriter = csv.writer(f)\nwriter.writerow(the_list)\nprint f.getvalue()\n']], ['How can I join a list into a string (caveat)?'], 3], [(118458, 2), [['csv  will write in a way it can read back later.\nYou can fine-tune its output by defining a  dialect , just set  quotechar ,  escapechar , etc, as needed:'], ['The output:  a,one \\"two\\" three,"foo, bar",both\\"\'']], [[' class SomeDialect(csv.excel):\n    delimiter = \',\'\n    quotechar = \'"\'\n    escapechar = "\\\\"\n    doublequote = False\n    lineterminator = \'\\n\'\n    quoting = csv.QUOTE_MINIMAL\n\nf = cStringIO.StringIO()\nwriter = csv.writer(f, dialect=SomeDialect)\nwriter.writerow(the_list)\nprint f.getvalue()\n']], ['How can I join a list into a string (caveat)?'], 3], [(118813, 0), [['I have both installed:'], ['I also added the following line to my  .profile :']], [[' $ which python\n/usr/bin/python\n$ which python2.5\n/opt/local/bin/python2.5\n']], ['How do I uninstall python from OSX Leopard so that I can use the MacPorts version?'], 2], [(118813, 1), [['I also added the following line to my  .profile :'], ['-10000']], [[' export PATH=/opt/local/bin:/opt/local/sbin:$PATH\n']], ['How do I uninstall python from OSX Leopard so that I can use the MacPorts version?'], 2], [(119802, 0), [["You can't do this with plain xmlrpc since it has no notion of keyword arguments. However, you can superimpose this as a protocol on top of xmlrpc that would always pass a list as first argument, and a dictionary as a second, and then provide the proper support code so this becomes transparent for your usage, example below:"], ['-10000']], [["Server from SimpleXMLRPCServer import SimpleXMLRPCServer\n\nclass Server(object):\n    def __init__(self, hostport):\n        self.server = SimpleXMLRPCServer(hostport)\n\n    def register_function(self, function, name=None):\n        def _function(args, kwargs):\n            return function(*args, **kwargs)\n        _function.__name__ = function.__name__\n        self.server.register_function(_function, name)\n\n    def serve_forever(self):\n        self.server.serve_forever()\n\n#example usage\nserver = Server(('localhost', 8000))\ndef test(arg1, arg2):\n    print 'arg1: %s arg2: %s' % (arg1, arg2)\n    return 0\nserver.register_function(test)\nserver.serve_forever()\n"]], ['Using **kwargs with SimpleXMLRPCServer in python'], 2], [(119802, 1), [['-10000'], ['-10000']], [["Client import xmlrpclib\n\nclass ServerProxy(object):\n    def __init__(self, url):\n        self._xmlrpc_server_proxy = xmlrpclib.ServerProxy(url)\n    def __getattr__(self, name):\n        call_proxy = getattr(self._xmlrpc_server_proxy, name)\n        def _call(*args, **kwargs):\n            return call_proxy(args, kwargs)\n        return _call\n\n#example usage\nserver = ServerProxy('http://localhost:8000')\nserver.test(1, 2)\nserver.test(arg2=2, arg1=1)\nserver.test(1, arg2=2)\nserver.test(*[1,2])\nserver.test(**{'arg1':1, 'arg2':2})\n"]], ['Using **kwargs with SimpleXMLRPCServer in python'], 2], [(120886, 0), [['Starting with Python 2.6, you can use  itertools.chain.from_iterable :'], ['You can also do this with a nested generator comprehension:']], [[' itertools.chain.from_iterable(iterables)\n']], ['Python idiom to chain (flatten) an infinite iterable of finite iterables?'], 2], [(120886, 1), [['You can also do this with a nested generator comprehension:'], ['-10000']], [[' def flatten(iterables):\n    return (elem for iterable in iterables for elem in iterable)\n']], ['Python idiom to chain (flatten) an infinite iterable of finite iterables?'], 2], [(121025, 0), [['-10000'], ['or']], [[' os.path.getmtime(filepath)\n']], ['How do I get the modified date/time of a file in Python?'], 2], [(121025, 1), [['or'], ['-10000']], [[' os.stat(filepath).st_mtime\n']], ['How do I get the modified date/time of a file in Python?'], 2], [(122033, 0), [['In Ruby:'], ['and In Ruby 1.9 you can do this:']], [[' a = (0..100).entries.sort_by {rand}.slice! 0, 5\n']], ['How do I write this in Ruby/Python? Or, can you translate my LINQ to Ruby/Python?'], 2], [(122033, 1), [['and In Ruby 1.9 you can do this:'], ['-10000']], [[' Array(0..100).sample(5) \n']], ['How do I write this in Ruby/Python? Or, can you translate my LINQ to Ruby/Python?'], 2], [(123499, 0), [['add  WSGIPassAuthorization On :'], ["Then just read  environ['REMOTE_USER'] :"]], [[' <VirtualHost *>\n    <Location />\n        AuthType Digest\n        AuthName "global"\n        AuthDigestDomain /\n        AuthUserFile /root/apache_users\n        <Limit GET>\n            Require valid-user\n        </Limit>\n    </Location>\n    WSGIPassAuthorization On\n    WSGIScriptAlias / /some/script.wsgi\n    WSGIDaemonProcess mywsgi user=someuser group=somegroup processes=2 threads=25\n    WSGIProcessGroup mywsgi\n    ServerName some.example.org\n</VirtualHost>\n']], ['Passing apache2 digest authentication information to a wsgi script run by mod_wsgi'], 2], [(123499, 1), [["Then just read  environ['REMOTE_USER'] :"], ['More information at  mod_wsgi documentation .']], [[" def application(environ, start_response):\n    start_response('200 OK', [\n        ('Content-Type', 'text/plain'),\n    ])\n    return ['Hello %s' % environ['REMOTE_USER']]\n"]], ['Passing apache2 digest authentication information to a wsgi script run by mod_wsgi'], 2], [(127606, 0), [['Sample XML File:'], ['Python code:']], [[' <root>\n  <level1>leaf1</level1>\n  <level2>leaf2</level2>\n</root>\n']], ['Editing XML as a dictionary in python?'], 5], [(127606, 1), [['Python code:'], ['You can use the node names as methods:']], [[" from BeautifulSoup import BeautifulStoneSoup, Tag, NavigableString\n\nsoup = BeautifulStoneSoup('config-template.xml') # get the parser for the xml file\nsoup.contents[0].name\n# u'root'\n"]], ['Editing XML as a dictionary in python?'], 5], [(127606, 2), [['You can use the node names as methods:'], ['It is also possible to use regexes:']], [[" soup.root.contents[0].name\n# u'level1'\n"]], ['Editing XML as a dictionary in python?'], 5], [(127606, 3), [['It is also possible to use regexes:'], ['Adding and inserting new nodes is pretty straightforward:']], [[" import re\ntags_starting_with_level = soup.findAll(re.compile('^level'))\nfor tag in tags_starting_with_level: print tag.name\n# level1\n# level2\n"]], ['Editing XML as a dictionary in python?'], 5], [(127606, 4), [['Adding and inserting new nodes is pretty straightforward:'], ['-10000']], [[" # build and insert a new level with a new leaf\nlevel3 = Tag(soup, 'level3')\nlevel3.insert(0, NavigableString('leaf3')\nsoup.root.insert(2, level3)\n\nprint soup.prettify()\n# <root>\n#  <level1>\n#   leaf1\n#  </level1>\n#  <level2>\n#   leaf2\n#  </level2>\n#  <level3>\n#   leaf3\n#  </level3>\n# </root>\n"]], ['Editing XML as a dictionary in python?'], 5], [(127736, 0), [["I think its clear that nobody really understands your question. I would suggest putting it in context and making it shorter. As an example, here's one possible implementation of the state pattern in python, please study it to get an idea."], ['the output of this programm would be:']], [[" class State(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n        return self.name\n\nclass Automaton(object):\n    def __init__(self, instance, start):\n        self._state = start\n        self.transitions = instance.transitions()\n\n    def get_state(self):\n        return self._state\n\n    def set_state(self, target):\n        transition = self.transitions.get((self.state, target))\n        if transition:\n            action, condition = transition\n            if condition:\n                if condition():\n                    if action:\n                        action()\n                    self._state = target\n            else:\n                self._state = target\n        else:\n            self._state = target\n\n    state = property(get_state, set_state)\n\nclass Door(object):\n    open = State('open')\n    closed = State('closed')\n\n    def __init__(self, blocked=False):\n        self.blocked = blocked\n\n    def close(self):\n        print 'closing door'\n\n    def do_open(self):\n        print 'opening door'\n\n    def not_blocked(self):\n        return not self.blocked\n\n    def transitions(self):\n        return {\n            (self.open, self.closed):(self.close, self.not_blocked),\n            (self.closed, self.open):(self.do_open, self.not_blocked),\n        }\n\nif __name__ == '__main__':\n    door = Door()\n    automaton = Automaton(door, door.open)\n\n    print 'door is', automaton.state\n    automaton.state = door.closed\n    print 'door is', automaton.state\n    automaton.state = door.open\n    print 'door is', automaton.state\n    door.blocked = True\n    automaton.state = door.closed\n    print 'door is', automaton.state\n"]], ['How to implement a Decorator with non-local equality?'], 2], [(127736, 1), [['the output of this programm would be:'], ['-10000']], [[' door is open\nclosing door\ndoor is closed\nopening door\ndoor is open\ndoor is open\n']], ['How to implement a Decorator with non-local equality?'], 2], [(132058, 0), [['I have module I use for situations like this - where a process will be running for a long time but gets stuck sometimes for unknown and irreproducible reasons.  Its a bit hacky, and only works on unix (requires signals):'], ['To use, just call the listen() function at some point when your program starts up (You could even stick it in site.py to have all python programs use it), and let it run.  At any point, send the process a SIGUSR1 signal, using kill, or in python:']], [[' import code, traceback, signal\n\ndef debug(sig, frame):\n    """Interrupt running process, and provide a python prompt for\n    interactive debugging."""\n    d={\'_frame\':frame}         # Allow access to frame object.\n    d.update(frame.f_globals)  # Unless shadowed by global\n    d.update(frame.f_locals)\n\n    i = code.InteractiveConsole(d)\n    message  = "Signal received : entering python shell.\\nTraceback:\\n"\n    message += \'\'.join(traceback.format_stack(frame))\n    i.interact(message)\n\ndef listen():\n    signal.signal(signal.SIGUSR1, debug)  # Register handler\n']], ['Showing the stack trace from a running Python application'], 2], [(132058, 1), [['To use, just call the listen() function at some point when your program starts up (You could even stick it in site.py to have all python programs use it), and let it run.  At any point, send the process a SIGUSR1 signal, using kill, or in python:'], ["This will cause the program to break to a python console at the point it is currently at, showing you the stack trace, and letting you manipulate the variables.  Use control-d (EOF) to continue running (though note that you will probably interrupt any I/O etc at the point you signal, so it isn't fully non-intrusive."]], [['     os.kill(pid, signal.SIGUSR1)\n']], ['Showing the stack trace from a running Python application'], 2], [(135303, 0), [['In Python 2.5, there is'], ["which behaves a lot like ?: in C. However, it's frowned upon for two reasons: readability, and the fact that there's usually a simpler way to approach the problem. For instance, in your case:"]], [[' A if C else B\n']], ['How can I closely achieve ?: from C++/C# in Python?'], 2], [(135303, 1), [["which behaves a lot like ?: in C. However, it's frowned upon for two reasons: readability, and the fact that there's usually a simpler way to approach the problem. For instance, in your case:"], ['-10000']], [[' stringValue = otherString or defaultString\n']], ['How can I closely achieve ?: from C++/C# in Python?'], 2], [(138045, 0), [['There is also  Type.InvokeMember .'], ['Which could be used like:']], [[' public static class ReflectionExt\n{\n    public static object GetAttr(this object obj, string name)\n    {\n        Type type = obj.GetType();\n        BindingFlags flags = BindingFlags.Instance | \n                                 BindingFlags.Public | \n                                 BindingFlags.GetProperty;\n\n        return type.InvokeMember(name, flags, Type.DefaultBinder, obj, null);\n    }\n}\n']], ["Is there something like Python's getattr() in C#?"], 3], [(138045, 1), [['Which could be used like:'], ['or (as an extension method):']], [[' object value = ReflectionExt.GetAttr(obj, "PropertyName");\n']], ["Is there something like Python's getattr() in C#?"], 3], [(138045, 2), [['or (as an extension method):'], ['-10000']], [[' object value = obj.GetAttr("PropertyName");\n']], ["Is there something like Python's getattr() in C#?"], 3], [(138851, 0), [['Then make the following changes to that method:'], ['Make sure to do all the necessary imports at the top and then in your settings file set the setting:']], [[' // change\nold_name = settings.DATABASE_NAME\nfrom django.db import connection\nconnection.creation.create_test_db(verbosity, autoclobber=not interactive)\nresult = unittest.TextTestRunner(verbosity=verbosity).run(suite)\nconnection.creation.destroy_test_db(old_name, verbosity)\n\n// to:\nresult = unittest.TextTestRunner(verbosity=verbosity).run(suite)\n']], ['How do I test a django database schema?'], 3], [(138851, 1), [['Make sure to do all the necessary imports at the top and then in your settings file set the setting:'], ['Another thing you can do is create a copy of your database locally, and then do a check in your new run_test() method like this:']], [[" TEST_RUNNER = 'myproject.test.test_runner.run_tests'\n"]], ['How do I test a django database schema?'], 3], [(138851, 2), [['Another thing you can do is create a copy of your database locally, and then do a check in your new run_test() method like this:'], ["That way there's no danger of running tests against your main database."]], [[' if settings.DATABASE_NAME != \'my_test_db\': \n    sys.exit("You cannot run tests using the %s database. Please switch DATABASE_NAME to my_test_db in settings.py" % settings.DATABASE_NAME) \n']], ['How do I test a django database schema?'], 3], [(140182, 0), [['-10000'], ["sub  returns the string obtained by replacing the leftmost non-overlapping occurrences of the RE in string by the replacement replacement. If the pattern isn't found, string is returned unchanged."]], [[' sub (replacement, string[, count = 0])\n']], ['Regular expressions but for writing in the match'], 2], [(140182, 1), [["sub  returns the string obtained by replacing the leftmost non-overlapping occurrences of the RE in string by the replacement replacement. If the pattern isn't found, string is returned unchanged."], ['-10000']], [["     p = re.compile( '(blue|white|red)')\n    >>> p.sub( 'colour', 'blue socks and red shoes')\n    'colour socks and colour shoes'\n    >>> p.sub( 'colour', 'blue socks and red shoes', count=1)\n    'colour socks and red shoes'\n"]], ['Regular expressions but for writing in the match'], 2], [(141642, 0), [['The most important limitation, currently, is that you cannot assign to an outer-scope variable. In other words, closures are read-only:'], ['You can work around this limitation in the mean time by using a mutable container type:']], [[' >>> def outer(x): \n...     def inner_reads():\n...         # Will return outer\'s \'x\'.\n...         return x\n...     def inner_writes(y):\n...         # Will assign to a local \'x\', not the outer \'x\'\n...         x = y\n...     def inner_error(y):\n...         # Will produce an error: \'x\' is local because of the assignment,\n...         # but we use it before it is assigned to.\n...         tmp = x\n...         x = y\n...         return tmp\n...     return inner_reads, inner_writes, inner_error\n... \n>>> inner_reads, inner_writes, inner_error = outer(5)\n>>> inner_reads()\n5\n>>> inner_writes(10)\n>>> inner_reads()\n5\n>>> inner_error(10)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "<stdin>", line 11, in inner_error\nUnboundLocalError: local variable \'x\' referenced before assignment\n']], ['What limitations have closures in Python compared to language X closures?'], 2], [(141642, 1), [['You can work around this limitation in the mean time by using a mutable container type:'], ['-10000']], [[" >>> def outer(x):\n...     x = [x]\n...     def inner_reads():\n...         # Will return outer's x's first (and only) element.\n...         return x[0]\n...     def inner_writes(y):\n...         # Will look up outer's x, then mutate it.      \n...         x[0] = y\n...     def inner_error(y):\n...         # Will now work, because 'x' is not assigned to, just referenced.\n...         tmp = x[0]\n...         x[0] = y\n...         return tmp\n...     return inner_reads, inner_writes, inner_error\n... \n>>> inner_reads, inner_writes, inner_error = outer(5)\n>>> inner_reads()\n5\n>>> inner_writes(10)\n>>> inner_reads()\n10\n>>> inner_error(15)\n10\n>>> inner_reads()\n15\n"]], ['What limitations have closures in Python compared to language X closures?'], 2], [(142545, 0), [['a.py contains'], ['b.py contains']], [[' print foo\n']], ['Python: How to make a cross-module variable?'], 2], [(142545, 1), [['b.py contains'], ['The result is that "1" is printed.']], [[' import __builtin__\n__builtin__.foo = 1\nimport a\n']], ['Python: How to make a cross-module variable?'], 2], [(146522, 0), [['Got it!! The problem is that some of the imports are of  myproject.myapp.views , and some are just of  myapp.views . This is confusing the Python module system enough that it no longer detects the functions as the same object. This is because your main  settings.py  probably has a line like:'], ['To solve this, try using the full import in your shell session:']], [[' ROOT_URLCONF = `myproject.urls`\n']], ['How do I successfully pass a function reference to Django’s reverse() function?'], 4], [(146522, 1), [['To solve this, try using the full import in your shell session:'], ["Here's a log of the debugging session, for any interested future readers:"]], [[" >>> from django.core.urlresolvers import reverse\n>>> from myproject.myapp import views\n>>> reverse(views.myview)\n'/myview/'\n"]], ['How do I successfully pass a function reference to Django’s reverse() function?'], 4], [(146522, 2), [["Here's a log of the debugging session, for any interested future readers:"], ["Is  urls.py  the root URLconf, or in the  myapp  application? There needs to be a full path from the root to a view for it to be resolved. If that's  myproject/myapp/urls.py , then in  myproject/urls.py  you'll need code like this:"]], [[" >>> from django.core import urlresolvers\n>>> from myapp import myview\n>>> urlresolvers.get_resolver (None).reverse_dict\n{None: ([(u'myview/', [])], 'myview/$'), <function myview at 0x845d17c>: ([(u'myview/', [])], 'myview/$')}\n>>> v1 = urlresolvers.get_resolver (None).reverse_dict.items ()[1][0]\n>>> reverse(v1)\n'/myview/'\n>>> v1 is myview\nFalse\n>>> v1.__module__\n'testproject.myapp.views'\n>>> myview.__module__\n'myapp.views'\n"]], ['How do I successfully pass a function reference to Django’s reverse() function?'], 4], [(146522, 3), [["Is  urls.py  the root URLconf, or in the  myapp  application? There needs to be a full path from the root to a view for it to be resolved. If that's  myproject/myapp/urls.py , then in  myproject/urls.py  you'll need code like this:"], ['-10000']], [[" from django.conf.urls.defaults import patterns\nurlpatterns = patterns ('',\n    (r'^/', 'myapp.urls'),\n)\n"]], ['How do I successfully pass a function reference to Django’s reverse() function?'], 4], [(146607, 0), [['Another possibility is to use a single regex as below:'], ["Finally, you can combine this into the regex in processVariables.  Taking  Torsten Marek's  suggestion to use a function for re.sub, this improves and simplifies things dramatically."]], [[' MatchedQuotes = re.compile(r"([\'\\"])(.*)\\1", re.LOCALE)\nitem = MatchedQuotes.sub(r\'\\2\', item, 1)\n']], ["I'm using Python regexes in a criminally inefficient manner"], 3], [(146607, 1), [["Finally, you can combine this into the regex in processVariables.  Taking  Torsten Marek's  suggestion to use a function for re.sub, this improves and simplifies things dramatically."], ['Here are my timings for 100000 runs:']], [[' VariableDefinition = re.compile(r\'<%(["\\\']?)(.*?)\\1=(["\\\']?)(.*?)\\3%>\', re.LOCALE)\nVarRepl = re.compile(r\'<%(["\\\']?)(.*?)\\1%>\', re.LOCALE)\n\ndef processVariables(item):\n    vars = {}\n    def findVars(m):\n        vars[m.group(2).upper()] = m.group(4)\n        return ""\n\n    item = VariableDefinition.sub(findVars, item)\n    return VarRepl.sub(lambda m: vars[m.group(2).upper()], item)\n\nprint processVariables(\'<%"TITLE"="This Is A Test Variable"%>The Web <%"TITLE"%>\')\n']], ["I'm using Python regexes in a criminally inefficient manner"], 3], [(146607, 2), [['Here are my timings for 100000 runs:'], ['[Edit] Add missing non-greedy specifier']], [[' Original       : 13.637\nGlobal regexes : 12.771\nSingle regex   :  9.095\nFinal version  :  1.846\n']], ["I'm using Python regexes in a criminally inefficient manner"], 3], [(146789, 0), [['Basic tag definition:'], ['Use in templates (assuming the templatetag module containing it has already been  {% load %} -ed):']], [[" @register.inclusion_tag('person/address.html')\ndef display_address(address):\n    return {'address': address}\n"]], ['In Django, where is the best place to put short snippets of HTML-formatted data?'], 2], [(146789, 1), [['Use in templates (assuming the templatetag module containing it has already been  {% load %} -ed):'], ['-10000']], [[' {% display_address address %}\n']], ['In Django, where is the best place to put short snippets of HTML-formatted data?'], 2], [(147741, 0), [['Reading Unicode from a file is therefore simple:'], ["It's also possible to open files in update mode, allowing both reading and writing:"]], [[" import codecs\nf = codecs.open('unicode.rst', encoding='utf-8')\nfor line in f:\n    print repr(line)\n"]], ['Character reading from file in Python'], 3], [(147741, 1), [["It's also possible to open files in update mode, allowing both reading and writing:"], ["Use the  unicodedata  module's  normalize()  and the  string.encode()  method to convert as best you can to the next closest ASCII equivalent (Ref  https://web.archive.org/web/20090228203858/http://techxplorer.com/2006/07/18/converting-unicode-to-ascii-using-python ): "]], [[" f = codecs.open('test', encoding='utf-8', mode='w+')\nf.write(u'\\u4500 blah blah blah\\n')\nf.seek(0)\nprint repr(f.readline()[:1])\nf.close()\n"]], ['Character reading from file in Python'], 3], [(147741, 2), [["Use the  unicodedata  module's  normalize()  and the  string.encode()  method to convert as best you can to the next closest ASCII equivalent (Ref  https://web.archive.org/web/20090228203858/http://techxplorer.com/2006/07/18/converting-unicode-to-ascii-using-python ): "], ['-10000']], [[" >>> teststr\nu'I don\\xe2\\x80\\x98t like this'\n>>> unicodedata.normalize('NFKD', teststr).encode('ascii', 'ignore')\n'I donat like this'\n"]], ['Character reading from file in Python'], 3], [(147816, 0), [['Install  decorator  module:'], ['Adapt definition of  args_as_ints() :']], [[' $ pip install decorator\n']], ['Preserving signatures of decorated functions'], 4], [(147816, 1), [['Adapt definition of  args_as_ints() :'], ['-10000']], [[' import decorator\n\n@decorator.decorator\ndef args_as_ints(f, *args, **kwargs):\n    args = [int(x) for x in args]\n    kwargs = dict((k, int(v)) for k, v in kwargs.items())\n    return f(*args, **kwargs)\n\n@args_as_ints\ndef funny_function(x, y, z=3):\n    """Computes x*y + 2*z"""\n    return x*y + 2*z\n\nprint funny_function("3", 4.0, z="5")\n# 22\nhelp(funny_function)\n# Help on function funny_function in module __main__:\n# \n# funny_function(x, y, z=3)\n#     Computes x*y + 2*z\n']], ['Preserving signatures of decorated functions'], 4], [(147816, 2), [['-10000'], ['functools.wraps()  is available  at least since Python 2.5  but it does not preserve the signature there:']], [[' import functools\n\n\ndef args_as_ints(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        args = [int(x) for x in args]\n        kwargs = dict((k, int(v)) for k, v in kwargs.items())\n        return func(*args, **kwargs)\n    return wrapper\n\n\n@args_as_ints\ndef funny_function(x, y, z=3):\n    """Computes x*y + 2*z"""\n    return x*y + 2*z\n\n\nprint(funny_function("3", 4.0, z="5"))\n# 22\nhelp(funny_function)\n# Help on function funny_function in module __main__:\n#\n# funny_function(x, y, z=3)\n#     Computes x*y + 2*z\n']], ['Preserving signatures of decorated functions'], 4], [(147816, 3), [['functools.wraps()  is available  at least since Python 2.5  but it does not preserve the signature there:'], ['Notice:  *args, **kwargs  instead of  x, y, z=3 .']], [[' help(funny_function)\n# Help on function funny_function in module __main__:\n#\n# funny_function(*args, **kwargs)\n#    Computes x*y + 2*z\n']], ['Preserving signatures of decorated functions'], 4], [(148042, 0), [['-10000'], ['Note that when Python searches a tuple or list using the  in  operator, it does a linear search. If you have a large number of items on the right hand side, this could be a performance bottleneck. A larger-scale way of doing this would be to use a  frozenset :']], [[' if job in ("mechanic", "tech"):\n    print "awesome"\nelif job in ("tool", "rock"):\n    print "dolt"\n']], ['Using OR comparisons with IF statements'], 2], [(148042, 1), [['Note that when Python searches a tuple or list using the  in  operator, it does a linear search. If you have a large number of items on the right hand side, this could be a performance bottleneck. A larger-scale way of doing this would be to use a  frozenset :'], ['The use of  frozenset  over  set  is preferred if the list of awesome jobs does not need to be changed during the operation of your program.']], [[' AwesomeJobs = frozenset(["mechanic", "tech", ... lots of others ])\ndef func():\n    if job in AwesomeJobs:\n        print "awesome"\n']], ['Using OR comparisons with IF statements'], 2], [(148853, 0), [['You could use a decorator function such as:'], ['and define a function along the lines of:']], [[" class cache(object):\n    def __init__(self, fun):\n        self.fun = fun\n        self.cache = {}\n\n    def __call__(self, *args, **kwargs):\n        key  = str(args) + str(kwargs)\n        try:\n            return self.cache[key]\n        except KeyError:\n            self.cache[key] = rval = self.fun(*args, **kwargs)\n            return rval\n        except TypeError: # incase key isn't a valid key - don't cache\n            return self.fun(*args, **kwargs)\n"]], ['Caching in urllib2?'], 2], [(148853, 1), [['and define a function along the lines of:'], ["This is assuming you're not paying attention to HTTP Cache Controls, but just want to cache the page for the duration of the application"]], [[' @cache\ndef get_url_src(url):\n    return urllib.urlopen(url).read()\n']], ['Caching in urllib2?'], 2], [(152218, 0), [['You probably want to take the problem reverse, i.e. finding all the character without the spaces:'], ['Or you want to add the extra characters:']], [[' [^ \\t\\n]*\n']], ['Looking for a regular expression including aplhanumeric + "&" and ";"'], 3], [(152218, 1), [['Or you want to add the extra characters:'], ['In case you want to match HTML entities, you should try something like:']], [[' [a-zA-Z0-9&;]*\n']], ['Looking for a regular expression including aplhanumeric + "&" and ";"'], 3], [(152218, 2), [['In case you want to match HTML entities, you should try something like:'], ['-10000']], [[' (\\w+|&\\w+;)*\n']], ['Looking for a regular expression including aplhanumeric + "&" and ";"'], 3], [(152580, 0), [['To check if the type of  o  is exactly  str :'], ['To check if  o  is an instance of  str  or any subclass of  str  (this would be the "canonical" way):']], [[' type(o) is str\n']], ["What's the canonical way to check for type in Python?"], 5], [(152580, 1), [['To check if  o  is an instance of  str  or any subclass of  str  (this would be the "canonical" way):'], ['The following also works, and can be useful in some cases:']], [[' isinstance(o, str)\n']], ["What's the canonical way to check for type in Python?"], 5], [(152580, 2), [['The following also works, and can be useful in some cases:'], ['One more note: in this case, you may actually want to use:']], [[' issubclass(type(o), str)\ntype(o) in ([str] + str.__subclasses__())\n']], ["What's the canonical way to check for type in Python?"], 5], [(152580, 3), [['One more note: in this case, you may actually want to use:'], ['Alternatively,  isinstance  accepts a tuple of classes. This will return True if x is an instance of any subclass of any of (str, unicode):']], [[' isinstance(o, basestring)\n']], ["What's the canonical way to check for type in Python?"], 5], [(152580, 4), [['Alternatively,  isinstance  accepts a tuple of classes. This will return True if x is an instance of any subclass of any of (str, unicode):'], ['-10000']], [[' isinstance(o, (str, unicode))\n']], ["What's the canonical way to check for type in Python?"], 5], [(153584, 0), [['Use  dateutil  and its rrule implementation, like so:'], ['Output is']], [[' from dateutil import rrule\nfrom datetime import datetime, timedelta\n\nnow = datetime.now()\nhundredDaysLater = now + timedelta(days=100)\n\nfor dt in rrule.rrule(rrule.MONTHLY, dtstart=now, until=hundredDaysLater):\n    print dt\n']], ['How to iterate over a timespan after days, hours, weeks and months in Python?'], 2], [(153584, 1), [['Output is'], ['Replace MONTHLY with any of YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, or SECONDLY.  Replace dtstart and until with whatever datetime object you want.']], [[' 2008-09-30 23:29:54\n2008-10-30 23:29:54\n2008-11-30 23:29:54\n2008-12-30 23:29:54\n']], ['How to iterate over a timespan after days, hours, weeks and months in Python?'], 2], [(157039, 0), [["I'd probably create a function that allows doing:"], ['A starting point would be something like this:']], [[' twos, threes = countmatching(xrange(1,10),\n                             lambda a: a % 2 == 0,\n                             lambda a: a % 3 == 0)\n']], ['Most pythonic way of counting matching elements in something iterable'], 3], [(157039, 1), [['A starting point would be something like this:'], ['Btw, "itertools recipes" has a recipe for doing much like your alt4.']], [[' def countmatching(iterable, *predicates):\n    v = [0] * len(predicates)\n    for e in iterable:\n        for i,p in enumerate(predicates):\n            if p(e):\n                v[i] += 1\n    return tuple(v)\n']], ['Most pythonic way of counting matching elements in something iterable'], 3], [(157039, 2), [['Btw, "itertools recipes" has a recipe for doing much like your alt4.'], ['-10000']], [[' def quantify(seq, pred=None):\n    "Count how many times the predicate is true in the sequence"\n    return sum(imap(pred, seq))\n']], ['Most pythonic way of counting matching elements in something iterable'], 3], [(158546, 0), [['If you create a dictionary.py module, containing code which reads the file and builds a dictionary, this code will only be executed the first time it is imported. Further imports will return a reference to the existing module instance. As such, your classes can:'], ['where dictionary.py has:']], [[' import dictionary\n\ndictionary.words[whatever]\n']], ['Best way to store and use a large text-file in python'], 2], [(158546, 1), [['where dictionary.py has:'], ['-10000']], [[" words = {}\n\n# read file and add to 'words'\n"]], ['Best way to store and use a large text-file in python'], 2], [(159990, 0), [["If you're in the definition of the class itself (not in a method), self is the class itself:"], ["The straight 'def' defines an instance method, whereas the 'def self.xxx' defines a class method."]], [[' class C\n  puts "I am a #{self}"\n  def instance_method\n    puts \'instance_method\'\n  end\n  def self.class_method\n    puts \'class_method\'\n  end\nend\n']], ['What is the difference between Ruby and Python versions of"self"?'], 2], [(159990, 1), [["The straight 'def' defines an instance method, whereas the 'def self.xxx' defines a class method."], ['-10000']], [[' c=C.new\n\nc.instance_method\n#=> instance_method\nC.class_method\n#=> class_method\n']], ['What is the difference between Ruby and Python versions of"self"?'], 2], [(160009, 0), [['Use threadlocals if you want to get  current  user that edits this model. Threadlocals middleware puts current user into process-wide variable. Take this middleware'], ['Check the documentation on how to use middleware classes. Then anywhere in code you can call']], [[' from threading import local\n\n_thread_locals = local()\ndef get_current_user():\n    return getattr(getattr(_thread_locals, \'user\', None),\'id\',None)\n\nclass ThreadLocals(object):\n    """Middleware that gets various objects from the\n    request object and saves them in thread local storage."""\n    def process_request(self, request):\n        _thread_locals.user = getattr(request, \'user\', None)\n']], ["Model limit_choices_to={'user': user}"], 2], [(160009, 1), [['Check the documentation on how to use middleware classes. Then anywhere in code you can call'], ['-10000']], [[' user = threadlocals.get_current_user\n']], ["Model limit_choices_to={'user': user}"], 2], [(160245, 0), [["This works on Mac OS X 10.5.5.  Note the capital  -U  option.  Perhaps that's been your problem."], ["Here's the Python version"]], [[' import subprocess\nps = subprocess.Popen("ps -U 0", shell=True, stdout=subprocess.PIPE)\nprint ps.stdout.read()\nps.stdout.close()\nps.wait()\n']], ['Which is the best way to get a list of running processes in unix with python?'], 2], [(160245, 1), [["Here's the Python version"], ['-10000']], [[' Python 2.5.2 (r252:60911, Feb 22 2008, 07:57:53) \n[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin\n']], ['Which is the best way to get a list of running processes in unix with python?'], 2], [(160298, 0), [['Have you tried sorting the list first? The algorithm you proposed should work, albeit with lots of database hits.'], ['Now, about those queries:']], [[" import itertools\n\ncars = [\n    {'car': 'X2', 'mods': [1,2]},\n    {'car': 'Y2', 'mods': [2]},\n    {'car': 'W2', 'mods': [1]},\n    {'car': 'X1', 'mods': [1,2]},\n    {'car': 'W1', 'mods': [1]},\n    {'car': 'Y1', 'mods': [2]},\n    {'car': 'Z1', 'mods': [1,2,3]},\n    {'car': 'X3', 'mods': [1,2]},\n]\n\ncars.sort(key=lambda car: car['mods'])\n\ncars_by_common_mods = {}\nfor k, g in itertools.groupby(cars, lambda car: car['mods']):\n    cars_by_common_mods[frozenset(k)] = [car['car'] for car in g]\n\nprint cars_by_common_mods\n"]], ['Django/Python - Grouping objects by common set from a many-to-many relationships'], 2], [(160298, 1), [['Now, about those queries:'], ["Now that you've got your lists of car ids and mod ids, if you need the complete objects to work with, you could do a single query for each to get a complete list for each model and create a lookup  dict  for those, keyed by their ids  - then, I believe, Bob is your proverbial father's brother."]], [[" import collections\nimport itertools\nfrom operator import itemgetter\n\nfrom django.db import connection\n\ncursor = connection.cursor()\ncursor.execute('SELECT car_id, mod_id FROM someapp_car_mod ORDER BY 1, 2')\ncars = collections.defaultdict(list)\nfor row in cursor.fetchall():\n    cars[row[0]].append(row[1])\n\n# Here's one I prepared earlier, which emulates the sample data we've been working\n# with so far, but using the car id instead of the previous string.\ncars = {\n    1: [1,2],\n    2: [2],\n    3: [1],\n    4: [1,2],\n    5: [1],\n    6: [2],\n    7: [1,2,3],\n    8: [1,2],\n}\n\nsorted_cars = sorted(cars.iteritems(), key=itemgetter(1))\ncars_by_common_mods = []\nfor k, g in itertools.groupby(sorted_cars, key=itemgetter(1)):\n    cars_by_common_mods.append({'mods': k, 'cars': map(itemgetter(0), g)})\n\nprint cars_by_common_mods\n\n# Which, for the sample data gives me (reformatted by hand for clarity)\n[{'cars': [3, 5],    'mods': [1]},\n {'cars': [1, 4, 8], 'mods': [1, 2]},\n {'cars': [7],       'mods': [1, 2, 3]},\n {'cars': [2, 6],    'mods': [2]}]\n"]], ['Django/Python - Grouping objects by common set from a many-to-many relationships'], 2], [(163009, 0), [["You could use  urlparse.urlsplit , but if you have any URLs like at the second example, you'll end up having to pull the file name out yourself anyway:"], ['Might as well just do this:']], [[" >>> urlparse.urlsplit('http://example.com/somefile.zip')\n('http', 'example.com', '/somefile.zip', '', '')\n>>> urlparse.urlsplit('http://example.com/somedir/somefile.zip')\n('http', 'example.com', '/somedir/somefile.zip', '', '')\n"]], ['urllib2 file name'], 2], [(163009, 1), [['Might as well just do this:'], ['-10000']], [[" >>> 'http://example.com/somefile.zip'.split('/')[-1]\n'somefile.zip'\n>>> 'http://example.com/somedir/somefile.zip'.split('/')[-1]\n'somefile.zip'\n"]], ['urllib2 file name'], 2], [(166545, 0), [['This will fetch your remote IP address'], ["If you don't want to rely on someone else, then just upload something like this PHP script:"]], [[" import urllib\nip = urllib.urlopen('http://automation.whatismyip.com/n09230945.asp').read()\n"]], ['Finding a public facing IP address in Python?'], 3], [(166545, 1), [["If you don't want to rely on someone else, then just upload something like this PHP script:"], ['and change the URL in the Python or if you prefer ASP:']], [[" <?php echo $_SERVER['REMOTE_ADDR']; ?>\n"]], ['Finding a public facing IP address in Python?'], 3], [(166545, 2), [['and change the URL in the Python or if you prefer ASP:'], ["Note: I don't know ASP, but I figured it might be useful to have here so I googled."]], [[' <%\nDim UserIPAddress\nUserIPAddress = Request.ServerVariables("REMOTE_ADDR")\n%>\n']], ['Finding a public facing IP address in Python?'], 3], [(167923, 0), [['The rematcher function seems to do what you want:'], ['In your case, the final string should be:']], [[' def rematcher(re_str, iterable):\n\n    matcher= re.compile(re_str)\n    in_match= 0\n    for item in iterable:\n        if matcher.match(item):\n            if in_match == 0:\n                yield item\n            in_match+= 1\n        else:\n            if in_match > 1:\n                yield "%s repeats %d more times\\n" % (re_str, in_match-1)\n            in_match= 0\n            yield item\n    if in_match > 1:\n        yield "%s repeats %d more times\\n" % (re_str, in_match-1)\n\nimport sys, re\n\nfor line in rematcher(".*Dog.*", sys.stdin):\n    sys.stdout.write(line)\n']], ['What is best way to remove duplicate lines matching regex from string using Python?'], 2], [(167923, 1), [['In your case, the final string should be:'], ['-10000']], [[' final_string= \'\\n\'.join(rematcher(".*Dog.*", your_initial_string.split("\\n")))\n']], ['What is best way to remove duplicate lines matching regex from string using Python?'], 2], [(168167, 0), [["For CherryPy 3.1, you would need to find the right subclass of Session, run its 'setup' classmethod, and then set cherrypy.session to a ThreadLocalProxy. That all happens in cherrypy.lib.sessions.init, in the following chunks:"], ['Reducing (replace FileSession with the subclass you want):']], [[' # Find the storage class and call setup (first time only).\nstorage_class = storage_type.title() + \'Session\'\nstorage_class = globals()[storage_class]\nif not hasattr(cherrypy, "session"):\n    if hasattr(storage_class, "setup"):\n        storage_class.setup(**kwargs)\n\n# Create cherrypy.session which will proxy to cherrypy.serving.session\nif not hasattr(cherrypy, "session"):\n    cherrypy.session = cherrypy._ThreadLocalProxy(\'session\')\n']], ['Initializing cherrypy.session early'], 2], [(168167, 1), [['Reducing (replace FileSession with the subclass you want):'], ['The "kwargs" consist of "timeout", "clean_freq", and any subclass-specific entries from tools.sessions.* config.']], [[" FileSession.setup(**kwargs)\ncherrypy.session = cherrypy._ThreadLocalProxy('session')\n"]], ['Initializing cherrypy.session early'], 2], [(168409, 0), [["Here's a more verbose version of  @Greg Hewgill 's answer . It is the most conforming to the question requirements. It makes a distinction between creation and modification dates (at least on Windows)."], ['Example:']], [[" #!/usr/bin/env python\nfrom stat import S_ISREG, ST_CTIME, ST_MODE\nimport os, sys, time\n\n# path to the directory (relative or absolute)\ndirpath = sys.argv[1] if len(sys.argv) == 2 else r'.'\n\n# get all entries in the directory w/ stats\nentries = (os.path.join(dirpath, fn) for fn in os.listdir(dirpath))\nentries = ((os.stat(path), path) for path in entries)\n\n# leave only regular files, insert creation date\nentries = ((stat[ST_CTIME], path)\n           for stat, path in entries if S_ISREG(stat[ST_MODE]))\n#NOTE: on Windows `ST_CTIME` is a creation date \n#  but on Unix it could be something else\n#NOTE: use `ST_MTIME` to sort by a modification date\n\nfor cdate, path in sorted(entries):\n    print time.ctime(cdate), os.path.basename(path)\n"]], ['How do you get a directory listing sorted by creation date in python?'], 2], [(168409, 1), [['Example:'], ['-10000']], [[' $ python stat_creation_date.py\nThu Feb 11 13:31:07 2009 stat_creation_date.py\n']], ['How do you get a directory listing sorted by creation date in python?'], 2], [(168559, 0), [['You can use '], ['If you want to open the handle for writing you need to add the  "w"  mode']], [[' os.write(tup[0], "foo\\n")\n']], ['Python - How do I convert "an OS-level handle to an open file" to a file object?'], 2], [(168559, 1), [['If you want to open the handle for writing you need to add the  "w"  mode'], ['-10000']], [[' f = os.fdopen(tup[0], "w")\nf.write("foo")\n']], ['Python - How do I convert "an OS-level handle to an open file" to a file object?'], 2], [(169362, 0), [["If you don't feel like programming and would rather ask a question on stackoverflow.org instead, or (as suggested in the comments) left off the  homework  tag, well, here it is:"], ['With this function, you can just do:']], [[" import smtplib\nimport zipfile\nimport tempfile\nfrom email import encoders\nfrom email.message import Message\nfrom email.mime.base import MIMEBase\nfrom email.mime.multipart import MIMEMultipart    \n\ndef send_file_zipped(the_file, recipients, sender='you@you.com'):\n    zf = tempfile.TemporaryFile(prefix='mail', suffix='.zip')\n    zip = zipfile.ZipFile(zf, 'w')\n    zip.write(the_file)\n    zip.close()\n    zf.seek(0)\n\n    # Create the message\n    themsg = MIMEMultipart()\n    themsg['Subject'] = 'File %s' % the_file\n    themsg['To'] = ', '.join(recipients)\n    themsg['From'] = sender\n    themsg.preamble = 'I am not using a MIME-aware mail reader.\\n'\n    msg = MIMEBase('application', 'zip')\n    msg.set_payload(zf.read())\n    encoders.encode_base64(msg)\n    msg.add_header('Content-Disposition', 'attachment', \n                   filename=the_file + '.zip')\n    themsg.attach(msg)\n    themsg = themsg.as_string()\n\n    # send the message\n    smtp = smtplib.SMTP()\n    smtp.connect()\n    smtp.sendmail(sender, recipients, themsg)\n    smtp.close()\n"]], ['How can I compress a folder and email the compressed file in Python?'], 2], [(169362, 1), [['With this function, you can just do:'], ["You're welcome."]], [[" send_file_zipped('result.txt', ['me@me.org'])\n"]], ['How can I compress a folder and email the compressed file in Python?'], 2], [(171277, 0), [["I have come across this problem too and wrote a python function to fix it; my advice is to cut your losses with the DRM files and just move them out of whatever program you are using for playlists etc.  The typical issue is m4p's mixed in with your mp3's and m4a's; whatever your mix this will move all drm'd files into a new folder at  C:\\drm_music :"], ["So for example you could run the above with  python -i move_drm.py  (saving the script as  move_drm.py ) and call  move_drm_files('/users/alienfluid/music') , and all the drm'd filetypes would be moved to their own quarantined folder.  If you think you can save some of those you could do this to sort the drm files by type:"]], [[" import os, shutil\n\ndef move_drm_files(music_folder):\n    all_songs = []\n    good_filetypes = ['mp3', 'm4a', 'ogg', 'flv', 'wma']\n    for root, dirs, files in os.walk(music_folder):\n        for name in files:\n            full_name = os.path.join(root, name)\n            all_songs.append(full_name)\n    os.mkdir('/drm_music')\n    for song in all_songs:\n        if song[-3:] not in good_filetypes:\n            shutil.move(song, '/drm_music')\n"]], ['Sorting music'], 2], [(171277, 1), [["So for example you could run the above with  python -i move_drm.py  (saving the script as  move_drm.py ) and call  move_drm_files('/users/alienfluid/music') , and all the drm'd filetypes would be moved to their own quarantined folder.  If you think you can save some of those you could do this to sort the drm files by type:"], ["This will create a folder at  C:\\drm_collection  with subfolders named for their extension (m4p etc), and they will be filled with all instances of each type; if you run the first function, you could just save the second one in the same file and call  sort_drm('/drm_music')"]], [[" def sort_drm(drm_folder, all_songs=[]):\n    os.mkdir('/drm_collection')\n    known_types = []\n    for root, dirs, files in os.walk(drm_folder):\n        for name in files:\n            full_name = os.path.join(root, name)\n            all_songs.append(full_name)\n    for item in all_songs:\n        if item[-3:] not in known_types:\n            known_types.append(item[-3:])\n    for item in known_types:\n        os.mkdir('/drm_collection/'+item)\n    for item in all_songs:\n        shutil.copy2(item, '/drm_collection/'+item[-3:])\n"]], ['Sorting music'], 2], [(174890, 0), [['After a bit of work, I found the answer myself. Looking at the ElementTree.py source code, I found there was special handling of XML comments and preprocessing instructions. What they do is create a factory function for the special element type that uses a special (non-string) tag value to differentiate it from regular elements.'], ["Then in the  _write  function of ElementTree that actually outputs the XML, there's a special case handling for comments:"]], [[' def Comment(text=None):\n    element = Element(Comment)\n    element.text = text\n    return element\n']], ['How to output CDATA using ElementTree'], 3], [(174890, 1), [["Then in the  _write  function of ElementTree that actually outputs the XML, there's a special case handling for comments:"], ['The implementation seems to work with both ElementTree and cElementTree.']], [[' if tag is Comment:\n    file.write("<!-- %s -->" % _escape_cdata(node.text, encoding))\n']], ['How to output CDATA using ElementTree'], 3], [(174890, 2), [['The implementation seems to work with both ElementTree and cElementTree.'], ['-10000']], [[' import elementtree.ElementTree as etree\n#~ import cElementTree as etree\n\ndef CDATA(text=None):\n    element = etree.Element(CDATA)\n    element.text = text\n    return element\n\nclass ElementTreeCDATA(etree.ElementTree):\n    def _write(self, file, node, encoding, namespaces):\n        if node.tag is CDATA:\n            text = node.text.encode(encoding)\n            file.write("\\n<![CDATA[%s]]>\\n" % text)\n        else:\n            etree.ElementTree._write(self, file, node, encoding, namespaces)\n\nif __name__ == "__main__":\n    import sys\n\n    text = """\n    <?xml version=\'1.0\' encoding=\'utf-8\'?>\n    <text>\n    This is just some sample text.\n    </text>\n    """\n\n    e = etree.Element("data")\n    cdata = CDATA(text)\n    e.append(cdata)\n    et = ElementTreeCDATA(e)\n    et.write(sys.stdout, "utf-8")\n']], ['How to output CDATA using ElementTree'], 3], [(177284, 0), [['abs value fartherest from zero:'], ['will be zero if the value is negative:']], [[' select max(abs(mycol)) from mytbl\n']], ['SQL Absolute value across columns'], 2], [(177284, 1), [['will be zero if the value is negative:'], ['-10000']], [[' select n+abs(mycol)\n  from zzz\n where abs(mycol)=(select max(abs(mycol)) from mytbl);\n']], ['SQL Absolute value across columns'], 2], [(177287, 0), [['what about this:'], ['Additionally:']], [[" import win32api\n\nwin32api.MessageBox(0, 'hello', 'title')\n"]], ['Alert boxes in Python?'], 2], [(177287, 1), [['Additionally:'], ['will make the box appear on top of other windows, for urgent messages. See  MessageBox function  for other options.']], [[" win32api.MessageBox(0, 'hello', 'title', 0x00001000) \n"]], ['Alert boxes in Python?'], 2], [(178458, 0), [['For example, use this class:'], ['And in your test code, instead of writing  import myModule , write:']], [[' class ImportWrapper(object):\n    def __init__(self, real_import):\n        self.real_import = real_import\n\n    def wrapper(self, wantedModules):\n        def inner(moduleName, *args, **kwargs):\n            if moduleName in wantedModules:\n                print "IMPORTING MODULE", moduleName\n                self.real_import(*args, **kwargs)\n            else:\n                print "NOT IMPORTING MODULE", moduleName\n        return inner\n\n    def mock_import(self, moduleName, wantedModules):\n        __builtins__.__import__ = self.wrapper(wantedModules)\n        try:\n            __import__(moduleName, globals(), locals(), [], -1)\n        finally:\n            __builtins__.__import__ = self.real_import\n']], ['Python, unit-testing and mocking imports'], 2], [(178458, 1), [['And in your test code, instead of writing  import myModule , write:'], ['The second argument to  mock_import  is a list of module names you  do  want to import in inner module.']], [[" wrapper = ImportWrapper(__import__)\nwrapper.mock_import('myModule', [])\n"]], ['Python, unit-testing and mocking imports'], 2], [(181530, 0), [["You don't need to use 4 spaces on your second conditional line.  Maybe use:"], ["Also, don't forget the whitespace is more flexible than you might think:"]], [[" if (cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'):\n    do_something\n"]], ["Styling multi-line conditions in 'if' statements?"], 5], [(181530, 1), [["Also, don't forget the whitespace is more flexible than you might think:"], ['Maybe lose the brackets (the  Style Guide  discourages this though)?']], [[" if (   \n       cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'\n   ):\n    do_something\nif    (cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'):\n    do_something\n"]], ["Styling multi-line conditions in 'if' statements?"], 5], [(181530, 2), [['Maybe lose the brackets (the  Style Guide  discourages this though)?'], ['Or even:']], [[" if cond1 == 'val1' and cond2 == 'val2' and \\\n   cond3 == 'val3' and cond4 == 'val4':\n    do_something\n"]], ["Styling multi-line conditions in 'if' statements?"], 5], [(181530, 3), [['Or even:'], ['I think I prefer:']], [[" if cond1 == 'val1' and cond2 == 'val2' and \\\n                       cond3 == 'val3' and \\\n                       cond4 == 'val4':\n    do_something\n"]], ["Styling multi-line conditions in 'if' statements?"], 5], [(181530, 4), [['I think I prefer:'], ["Here's the  Style Guide , which (since 2010) recommends using brackets."]], [[" if cond1 == 'val1' and \\\n   cond2 == 'val2' and \\\n   cond3 == 'val3' and \\\n   cond4 == 'val4':\n    do_something\n"]], ["Styling multi-line conditions in 'if' statements?"], 5], [(183480, 0), [["To get around it, the best approach is to actually try create the file in such a way that you'll get an exception if it fails, and on success, return the actually opened file object.  This can be done with the lower level os.open functions, by passing both the os.O_CREAT and os.O_EXCL flags.  Once opened, return the actual file (and optionally filename) you create.  Eg, here's your code modified to use this approach (returning a (file, filename) tuple):"], ["[Edit]   Actually, a better way, which will handle the above issues for you, is probably to use the tempfile module, though you may lose some control over the naming.  Here's an example of using it (keeping a similar interface):"]], [[" def unique_file(file_name):\n    counter = 1\n    file_name_parts = os.path.splitext(file_name) # returns ('/path/file', '.ext')\n    while 1:\n        try:\n            fd = os.open(file_name, os.O_CREAT | os.O_EXCL | os.O_RDRW)\n            return os.fdopen(fd), file_name\n        except OSError:\n            pass\n        file_name = file_name_parts[0] + '_' + str(counter) + file_name_parts[1]\n        counter += 1\n"]], ['Is this the best way to get unique version of filename w/ Python?'], 2], [(183480, 1), [["[Edit]   Actually, a better way, which will handle the above issues for you, is probably to use the tempfile module, though you may lose some control over the naming.  Here's an example of using it (keeping a similar interface):"], ["The only downside with this approach is that you will always get a filename with some random characters in it, as there's no attempt to create an unmodified file (/home/some_dir/foo.txt) first.\nYou may also want to look at tempfile.TemporaryFile and NamedTemporaryFile, which will do the above and also automatically delete from disk when closed."]], [[' def unique_file(file_name):\n    dirname, filename = os.path.split(file_name)\n    prefix, suffix = os.path.splitext(filename)\n\n    fd, filename = tempfile.mkstemp(suffix, prefix+"_", dirname)\n    return os.fdopen(fd), filename\n\n>>> f, filename=unique_file(\'/home/some_dir/foo.txt\')\n>>> print filename\n/home/some_dir/foo_z8f_2Z.txt\n']], ['Is this the best way to get unique version of filename w/ Python?'], 2], [(184187, 0), [['Use of the Python API is quite similar to the command-line client:'], ["I'll verify it from the command line:"]], [[' PythonWin 2.5.1 (r251:54863, May  1 2007, 17:47:05) [MSC v.1310 32 bit (Intel)] on win32.\nPortions Copyright 1994-2006 Mark Hammond - see \'Help/About PythonWin\' for further copyright information.\n>>> import P4\n>>> p4 = P4.P4()\n>>> p4.connect() # connect to the default server, with the default clientspec\n>>> desc = {"Description": "My new changelist description",\n...         "Change": "new"\n...         }\n>>> p4.input = desc\n>>> p4.run("changelist", "-i")\n[\'Change 2579505 created.\']\n>>> \n']], ['How do I check out a file from perforce in python?'], 2], [(184187, 1), [["I'll verify it from the command line:"], ['-10000']], [[" P:\\>p4 changelist -o 2579505\n# A Perforce Change Specification.\n#\n#  Change:      The change number. 'new' on a new changelist.\n#  Date:        The date this specification was last modified.\n#  Client:      The client on which the changelist was created.  Read-only.\n#  User:        The user who created the changelist.\n#  Status:      Either 'pending' or 'submitted'. Read-only.\n#  Description: Comments about the changelist.  Required.\n#  Jobs:        What opened jobs are to be closed by this changelist.\n#               You may delete jobs from this list.  (New changelists only.)\n#  Files:       What opened files from the default changelist are to be added\n#               to this changelist.  You may delete files from this list.\n#               (New changelists only.)\n\nChange: 2579505\n\nDate:   2008/10/08 13:57:02\n\nClient: MYCOMPUTER-DT\n\nUser:   myusername\n\nStatus: pending\n\nDescription:\n        My new changelist description\n"]], ['How do I check out a file from perforce in python?'], 2], [(184643, 0), [["If you want a shallow copy (elements aren't copied) use:"], ['If you want to make a deep copy then use the copy module:']], [[' lst2=lst1[:]\n']], ['What is the best way to copy a list?'], 2], [(184643, 1), [['If you want to make a deep copy then use the copy module:'], ['-10000']], [[' import copy\nlst2=copy.deepcopy(lst1)\n']], ['What is the best way to copy a list?'], 2], [(186131, 0), [['Your example can be rewritten slightly to construct the first dictionary using a generator expression and to remove necessity of construction of another mappings. Just reuse the old ones:'], ["If you don't mind, then I suggest the solution above. In other case, this function preserves order and treats first-encountered ids with priority:"]], [[" def unique_mapping(mappings):\n    return dict((m['id'], m) for m in mappings).values()\n"]], ['Extracting unique items from a list of mappings'], 2], [(186131, 1), [["If you don't mind, then I suggest the solution above. In other case, this function preserves order and treats first-encountered ids with priority:"], ['You might need to call it with  list(unique_mappings(mappings))  if you need a list and not a generator.']], [[" def unique_mapping(mappings):\n    addedIds = set()\n    for m in mappings:\n        mId = m['id']\n        if mId not in addedIds:\n            addedIds.add(mId)\n            yield m\n"]], ['Extracting unique items from a list of mappings'], 2], [(186472, 0), [["The names don't clash.  Similar to the above, but more important.   Never  do something like:"], ['It also has advantages when testing however (eg. replacing os.open with a mock object, without having to change every module), and should be used when using mutable modules, e.g.']], [['  from os import open\n']], ["'from X import a' versus 'import X; X.a'"], 2], [(186472, 1), [['It also has advantages when testing however (eg. replacing os.open with a mock object, without having to change every module), and should be used when using mutable modules, e.g.'], ["If in doubt, I'd always go with the  import module  style."]], [[" import config\nconfig.dburl = 'sqlite:///test.db'\n"]], ["'from X import a' versus 'import X; X.a'"], 2], [(186857, 0), [["There's no builtin, but you can accomplish this fairly simply with a generator comprehension:"], ["[Edit]   From your update you indicate you may need to handle quoting.  This does complicate things, depending on what the exact format you are looking for is (what quote chars are accepted, what escape chars etc).  You may want to look at the csv module to see if it can cover your format.  Here's an example:  (Note that the API is a little clunky for this example, as CSV is designed to iterate through a sequence of records, hence the .next() calls I'm making to just look at the first line.  Adjust to suit your needs):"]], [[' s= "Name1=Value1;Name2=Value2;Name3=Value3"\ndict(item.split("=") for item in s.split(";"))\n']], ['Splitting a semicolon-separated string to a dictionary, in Python'], 2], [(186857, 1), [["[Edit]   From your update you indicate you may need to handle quoting.  This does complicate things, depending on what the exact format you are looking for is (what quote chars are accepted, what escape chars etc).  You may want to look at the csv module to see if it can cover your format.  Here's an example:  (Note that the API is a little clunky for this example, as CSV is designed to iterate through a sequence of records, hence the .next() calls I'm making to just look at the first line.  Adjust to suit your needs):"], ['Depending on the exact structure of your format, you may need to write your own simple parser however.']], [[' >>> s = "Name1=\'Value=2\';Name2=Value2;Name3=Value3"\n\n>>> dict(csv.reader([item], delimiter=\'=\', quotechar="\'").next() \n         for item in csv.reader([s], delimiter=\';\', quotechar="\'").next())\n\n{\'Name2\': \'Value2\', \'Name3\': \'Value3\', \'Name1\': \'Value1=2\'}\n']], ['Splitting a semicolon-separated string to a dictionary, in Python'], 2], [(187273, 0), [['For best efficiency, you generally want to process more than a single bit at a time.\nYou can use a simple method to get a fixed width binary representation. eg.'], ["_bin(x, 8) will now give a zero padded representation of x's lower 8 bits.  This can be used to build a lookup table, allowing your converter to process 8 bits at a time (or more if you want to devote the memory to it)."]], [[" def _bin(x, width):\n    return ''.join(str((x>>i)&1) for i in xrange(width-1,-1,-1))\n"]], ['Base-2 (Binary) Representation Using Python'], 4], [(187273, 1), [["_bin(x, 8) will now give a zero padded representation of x's lower 8 bits.  This can be used to build a lookup table, allowing your converter to process 8 bits at a time (or more if you want to devote the memory to it)."], ["Then you can use this in your real function, stripping off leading zeroes when returning it.  I've also added handling for signed numbers, as without it you will get an infinite loop (Negative integers conceptually have an infinite number of set sign bits.)"]], [[' _conv_table = [_bin(x,8) for x in range(256)]\n']], ['Base-2 (Binary) Representation Using Python'], 4], [(187273, 2), [["Then you can use this in your real function, stripping off leading zeroes when returning it.  I've also added handling for signed numbers, as without it you will get an infinite loop (Negative integers conceptually have an infinite number of set sign bits.)"], ["[Edit] Changed code to handle signed integers. \n[Edit2] Here are some timing figures of the various solutions.  bin is the function above, constantin_bin is from  Constantin's answer  and num_bin is the original version.  Out of curiosity, I also tried a 16 bit lookup table variant of the above (bin16 below), and tried out Python3's builtin bin() function.  All timings were for 100000 runs using an 01010101 bit pattern."]], [[' def bin(x):\n    if x == 0: \n        return \'0\' #Special case: Don\'t strip leading zero if no other digits\n    elif x < 0:\n        sign=\'-\'\n        x*=-1\n    else:\n        sign = \'\'\n    l=[]\n    while x:\n        l.append(_conv_table[x & 0xff])\n        x >>= 8\n    return sign + \'\'.join(reversed(l)).lstrip("0")\n']], ['Base-2 (Binary) Representation Using Python'], 4], [(187273, 3), [["[Edit] Changed code to handle signed integers. \n[Edit2] Here are some timing figures of the various solutions.  bin is the function above, constantin_bin is from  Constantin's answer  and num_bin is the original version.  Out of curiosity, I also tried a 16 bit lookup table variant of the above (bin16 below), and tried out Python3's builtin bin() function.  All timings were for 100000 runs using an 01010101 bit pattern."], ["As you can see, when processing long values using large chunks really pays off, but nothing beats the low-level C code of python3's builtin (which bizarrely seems consistently faster at 256 bits than 128!).  Using a 16 bit lookup table improves things, but probably isn't worth it unless you really need it, as it uses up a large chunk of memory, and can introduce a small but noticalbe startup delay to precompute the table."]], [[" Num Bits:              8       16       32       64      128      256\n---------------------------------------------------------------------\nbin                0.544    0.586    0.744    1.942    1.854    3.357 \nbin16              0.542    0.494    0.592    0.773    1.150    1.886\nconstantin_bin     2.238    3.803    7.794   17.869   34.636   94.799\nnum_bin            3.712    5.693   12.086   32.566   67.523  128.565\nPython3's bin      0.079    0.045    0.062    0.069    0.212    0.201 \n"]], ['Base-2 (Binary) Representation Using Python'], 4], [(189087, 0), [["I'd start by writing a generator method:"], ['Then whenever you need to iterate over the lists your code looks like this:']], [[' def grid_objects(alist, blist):\n    for i in range(len(alist)):\n        for j in range(len(alist[i])):\n            yield(alist[i][j], blist[i][j])\n']], ['How can I, in python, iterate over multiple 2d lists at once, cleanly?'], 2], [(189087, 1), [['Then whenever you need to iterate over the lists your code looks like this:'], ['-10000']], [[' for (a, b) in grid_objects(alist, blist):\n    if a.is_whatever():\n        b.do_something()\n']], ['How can I, in python, iterate over multiple 2d lists at once, cleanly?'], 2], [(192109, 0), [['Use  dir() ,  vars()  or the  inspect  module to get what you are interested in (I use  __builtins__  as an example; you can use any object instead).'], ['Print that dictionary however fancy you like:']], [[' >>> l = dir(__builtins__)\n>>> d = __builtins__.__dict__\n']], ['Is there a built-in function to print all the current properties and values of an object?'], 4], [(192109, 1), [['Print that dictionary however fancy you like:'], ['or']], [[" >>> print l\n['ArithmeticError', 'AssertionError', 'AttributeError',...\n"]], ['Is there a built-in function to print all the current properties and values of an object?'], 4], [(192109, 2), [['or'], ['Pretty printing is also available in the interactive debugger as a command:']], [[" >>> from pprint import pprint\n>>> pprint(l)\n['ArithmeticError',\n 'AssertionError',\n 'AttributeError',\n 'BaseException',\n 'DeprecationWarning',\n...\n\n>>> pprint(d, indent=2)\n{ 'ArithmeticError': <type 'exceptions.ArithmeticError'>,\n  'AssertionError': <type 'exceptions.AssertionError'>,\n  'AttributeError': <type 'exceptions.AttributeError'>,\n...\n  '_': [ 'ArithmeticError',\n         'AssertionError',\n         'AttributeError',\n         'BaseException',\n         'DeprecationWarning',\n...\n"]], ['Is there a built-in function to print all the current properties and values of an object?'], 4], [(192109, 3), [['Pretty printing is also available in the interactive debugger as a command:'], ['-10000']], [[" (Pdb) pp vars()\n{'__builtins__': {'ArithmeticError': <type 'exceptions.ArithmeticError'>,\n                  'AssertionError': <type 'exceptions.AssertionError'>,\n                  'AttributeError': <type 'exceptions.AttributeError'>,\n                  'BaseException': <type 'exceptions.BaseException'>,\n                  'BufferError': <type 'exceptions.BufferError'>,\n                  ...\n                  'zip': <built-in function zip>},\n '__file__': 'pass.py',\n '__name__': '__main__'}\n"]], ['Is there a built-in function to print all the current properties and values of an object?'], 4], [(192649, 0), [['If you mean, "can you change a class\'s methods at runtime?", then the answer is emphatically yes:'], ['If you mean, "can you change a class\'s methods at runtime and  make all of the instances of that class change after-the-fact ?" then the answer is yes as well.  Just change the order slightly:']], [[' class Foo:\n  pass # dummy class\n\nFoo.bar = lambda self: 42\n\nx = Foo()\nprint x.bar()\n']], ['Can you monkey patch methods on core types in python?'], 2], [(192649, 1), [['If you mean, "can you change a class\'s methods at runtime and  make all of the instances of that class change after-the-fact ?" then the answer is yes as well.  Just change the order slightly:'], ["But you can't do this for certain built-in classes, like  int  or  float .  These classes' methods are implemented in C and there are certain abstractions sacrificed in order to make the implementation easier and more efficient."]], [[' class Foo:\n  pass # dummy class\n\nx = Foo()\n\nFoo.bar = lambda self: 42\n\nprint x.bar()\n']], ['Can you monkey patch methods on core types in python?'], 2], [(196755, 0), [['-10000'], ["EDIT : Heck, I'll do it..."]], [[' >>> from urllib import urlencode\n>>> params = urlencode({\'q\': \'python best practices\', \'sort\': \'relevance\'})\n>>> params\n\'q=python+best+practices&sort=relevance\'\n>>> from urllib2 import urlopen\n>>> html = urlopen("http://stackoverflow.com/search?%s" % params).read()\n>>> import re\n>>> links = re.findall(r\'<h3><a href="([^"]*)" class="answer-title">([^<]*)</a></h3>\', html)\n>>> links\n[(\'/questions/5119/what-are-the-best-rss-feeds-for-programmersdevelopers#5150\', \'What are the best RSS feeds for programmers/developers?\'), (\'/questions/3088/best-ways-to-teach-a-beginner-to-program#13185\', \'Best ways to teach a beginner to program?\'), (\'/questions/13678/textual-versus-graphical-programming-languages#13886\', \'Textual versus Graphical Programming Languages\'), (\'/questions/58968/what-defines-pythonian-or-pythonic#59877\', \'What defines &#8220;pythonian&#8221; or &#8220;pythonic&#8221;?\'), (\'/questions/592/cxoracle-how-do-i-access-oracle-from-python#62392\', \'cx_Oracle - How do I access Oracle from Python? \'), (\'/questions/7170/recommendation-for-straight-forward-python-frameworks#83608\', \'Recommendation for straight-forward python frameworks\'), (\'/questions/100732/why-is-if-not-someobj-better-than-if-someobj-none-in-python#100903\', \'Why is if not someobj: better than if someobj == None: in Python?\'), (\'/questions/132734/presentations-on-switching-from-perl-to-python#134006\', \'Presentations on switching from Perl to Python\'), (\'/questions/136977/after-c-python-or-java#138442\', \'After C++ - Python or Java?\')]\n>>> from urlparse import urljoin\n>>> links = [(urljoin(\'http://stackoverflow.com/\', url), title) for url,title in links]\n>>> links\n[(\'http://stackoverflow.com/questions/5119/what-are-the-best-rss-feeds-for-programmersdevelopers#5150\', \'What are the best RSS feeds for programmers/developers?\'), (\'http://stackoverflow.com/questions/3088/best-ways-to-teach-a-beginner-to-program#13185\', \'Best ways to teach a beginner to program?\'), (\'http://stackoverflow.com/questions/13678/textual-versus-graphical-programming-languages#13886\', \'Textual versus Graphical Programming Languages\'), (\'http://stackoverflow.com/questions/58968/what-defines-pythonian-or-pythonic#59877\', \'What defines &#8220;pythonian&#8221; or &#8220;pythonic&#8221;?\'), (\'http://stackoverflow.com/questions/592/cxoracle-how-do-i-access-oracle-from-python#62392\', \'cx_Oracle - How do I access Oracle from Python? \'), (\'http://stackoverflow.com/questions/7170/recommendation-for-straight-forward-python-frameworks#83608\', \'Recommendation for straight-forward python frameworks\'), (\'http://stackoverflow.com/questions/100732/why-is-if-not-someobj-better-than-if-someobj-none-in-python#100903\', \'Why is if not someobj: better than if someobj == None: in Python?\'), (\'http://stackoverflow.com/questions/132734/presentations-on-switching-from-perl-to-python#134006\', \'Presentations on switching from Perl to Python\'), (\'http://stackoverflow.com/questions/136977/after-c-python-or-java#138442\', \'After C++ - Python or Java?\')]\n']], ['How can I search through Stack Overflow questions from a script?'], 2], [(196755, 1), [["EDIT : Heck, I'll do it..."], ['-10000']], [[' def get_stackoverflow(query):\n    import urllib, urllib2, re, urlparse\n    params = urllib.urlencode({\'q\': query, \'sort\': \'relevance\'})\n    html = urllib2.urlopen("http://stackoverflow.com/search?%s" % params).read()\n    links = re.findall(r\'<h3><a href="([^"]*)" class="answer-title">([^<]*)</a></h3>\', html)\n    links = [(urlparse.urljoin(\'http://stackoverflow.com/\', url), title) for url,title in links]\n\n    return links\n']], ['How can I search through Stack Overflow questions from a script?'], 2], [(196841, 0), [['You can also use '], ['or']], [[' printf "1: %<key1>s 2: %<key2>s\\n", {:key1 => "value1", :key2 => "value2"}\n']], ["How do I emulate Python's named printf parameters in Ruby?"], 5], [(196841, 1), [['or'], ["or (this needs ruby 1.9, for the other examples I'm not sure)"]], [[' data = {:key1 => "value1", :key2 => "value2"}\nprintf "1: %<key1>s 2: %<key2>s\\n",  data\n']], ["How do I emulate Python's named printf parameters in Ruby?"], 5], [(196841, 2), [["or (this needs ruby 1.9, for the other examples I'm not sure)"], ['This prints']], [[' data = {key1: "value1", key2: "value2"}\nprintf "1: %<key1>s 2: %<key2>s\\n", data\n']], ["How do I emulate Python's named printf parameters in Ruby?"], 5], [(196841, 3), [['This prints'], ['The following four calls have all the same result:']], [[' 1: value1 2: value2\n']], ["How do I emulate Python's named printf parameters in Ruby?"], 5], [(196841, 4), [['The following four calls have all the same result:'], ['The second version uses first the  String#% -method and sends the result to  printf .']], [[' printf "1: %<key1>s 2: %<key2>s\\n" , {:key1 => "value1", :key2 => "value2"}\nprintf "1: %<key1>s 2: %<key2>s\\n" % {:key1 => "value1", :key2 => "value2"}\nprint  "1: %<key1>s 2: %<key2>s\\n" % {:key1 => "value1", :key2 => "value2"}\nputs   "1: %<key1>s 2: %<key2>s"   % {:key1 => "value1", :key2 => "value2"}\n']], ["How do I emulate Python's named printf parameters in Ruby?"], 5], [(196876, 0), [['For 2.3 or after:'], ['To use:']], [[' class Enumerate(object):\n  def __init__(self, names):\n    for number, name in enumerate(names.split()):\n      setattr(self, name, number)\n']], ['Is there a better way to get a named series of constants (enumeration) in Python?'], 3], [(196876, 1), [['To use:'], ['If you only have 2.2, precede this with:']], [["  codes = Enumerate('FOO BAR BAZ')\n"]], ['Is there a better way to get a named series of constants (enumeration) in Python?'], 3], [(196876, 2), [['If you only have 2.2, precede this with:'], ['( This was taken from  here )']], [['  from __future__ import generators\n\n def enumerate(iterable):\n   number = 0\n   for name in iterable:\n     yield number, name\n     number += 1\n']], ['Is there a better way to get a named series of constants (enumeration) in Python?'], 3], [(196960, 0), [['A little nicer than inspecting the code object directly and working out the variables is to use the inspect module.'], ['If you want to know if its callable with a particular set of args, you need the args without a default already specified.  These can be got by:']], [[" >>> import inspect\n>>> def func(a,b,c=42, *args, **kwargs): pass\n>>> inspect.getargspec(func)\n(['a', 'b', 'c'], 'args', 'kwargs', (42,))\n"]], ['Can you list the keyword arguments a Python function receives?'], 5], [(196960, 1), [['If you want to know if its callable with a particular set of args, you need the args without a default already specified.  These can be got by:'], ['Then a function to tell what you are missing from your particular dict is:']], [[' def getRequiredArgs(func):\n    args, varargs, varkw, defaults = inspect.getargspec(func)\n    if defaults:\n        args = args[:-len(defaults)]\n    return args   # *args and **kwargs are not required, so ignore them.\n']], ['Can you list the keyword arguments a Python function receives?'], 5], [(196960, 2), [['Then a function to tell what you are missing from your particular dict is:'], ['Similarly, to check for invalid args, use:']], [[' def missingArgs(func, argdict):\n    return set(getRequiredArgs(func)).difference(argdict)\n']], ['Can you list the keyword arguments a Python function receives?'], 5], [(196960, 3), [['Similarly, to check for invalid args, use:'], ['And so a full test if it is callable is :']], [[' def invalidArgs(func, argdict):\n    args, varargs, varkw, defaults = inspect.getargspec(func)\n    if varkw: return set()  # All accepted\n    return set(argdict) - set(args)\n']], ['Can you list the keyword arguments a Python function receives?'], 5], [(196960, 4), [['And so a full test if it is callable is :'], ["(This is good only as far as python's arg parsing.  Any runtime checks for invalid values in kwargs obviously can't be detected.)"]], [[' def isCallableWithArgs(func, argdict):\n    return not missingArgs(func, argdict) and not invalidArgs(func, argdict)\n']], ['Can you list the keyword arguments a Python function receives?'], 5], [(201846, 0), [['That said, you can touch sys.path to modify the library loading order'], ['In addition, you may wish to avoid the full import and do it differently, like this:']], [[' ~# cat getopt.py\nprint "HI"\n~# python\nPython 2.5.2 (r252:60911, Jul 31 2008, 17:28:52)\n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2\nType "help", "copyright", "credits" or "license" for more information.\n>>> import sys\n>>> import getopt\nHI\n\n~# python\nPython 2.5.2 (r252:60911, Jul 31 2008, 17:28:52)\n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2\nType "help", "copyright", "credits" or "license" for more information.\n>>> import sys\n>>> sys.path.remove(\'\')\n>>> import getopt\n>>> dir(getopt)\n[\'GetoptError\', \'__all__\', \'__builtins__\', \'__doc__\', \'__file__\', \'__name__\', \'do_longs\', \'do_shorts\', \'error\', \'getopt\', \'gnu_getopt\', \'long_has_args\', \'os\', \'short_has_arg\']\n']], ['python name a file same as a lib'], 2], [(201846, 1), [['In addition, you may wish to avoid the full import and do it differently, like this:'], ['-10000']], [[' import sys\nsys.path.remove(\'\')\nfrom getopt import getopt\nsys.path.insert(0,\'\')\nopts, args = getopt(sys.argv[1:], "h:s")\nfor key,value in opts:\n    print key, "=>", value\n']], ['python name a file same as a lib'], 2], [(203859, 0), [['The modified filter:'], ['Within the template:']], [[" urlfinder = re.compile('^(http:\\/\\/\\S+)')\nurlfinder2 = re.compile('\\s(http:\\/\\/\\S+)')\n@register.filter('urlify_markdown')\ndef urlify_markdown(value):\n    value = urlfinder.sub(r'<\\1>', value)\n    return urlfinder2.sub(r' <\\1>', value)\n"]], ['How do I get python-markdown to additionally "urlify" links when formatting plain text?'], 2], [(203859, 1), [['Within the template:'], ['-10000']], [[' <div>\n    {{ content|urlify_markdown|markdown}}\n</div>\n']], ['How do I get python-markdown to additionally "urlify" links when formatting plain text?'], 2], [(204829, 0), [['-10000'], ['Outputs:']], [[' import re\n\nr = re.compile("[ab]")\ntext = "abcdedfe falijbijie bbbb laifsjelifjl"\n\nmatches = []\nreplaced = []\npos = 0\nfor m in r.finditer(text):\n    matches.append(m.group(0))\n    replaced.append(text[pos:m.start()])\n    pos = m.end()\nreplaced.append(text[pos:])\n\nprint matches\nprint \'\'.join(replaced)\n']], ['Capture the contents of a regex and delete them, efficiently'], 2], [(204829, 1), [['Outputs:'], ['-10000']], [[" ['a', 'b', 'a', 'b', 'b', 'b', 'b', 'b', 'a']\ncdedfe flijijie  lifsjelifjl\n"]], ['Capture the contents of a regex and delete them, efficiently'], 2], [(206734, 0), [["You are right,  somedata  is shared between all instances of the class and it's subclasses, because it is created at class  definition  time. The lines "], ['At class definition time, you can run arbritrary code, like this:']], [[" somedata = {}\nsomedata['was_false_in_base'] = False\n"]], ['Why do attribute references act like this with Python inheritance?'], 4], [(206734, 1), [['At class definition time, you can run arbritrary code, like this:'], ['In constrast, objects in  __init__  are created at  instantiation  time and belong to the instance only (when they are assigned to  self ):']], [['  import sys\n class Test(object):\n     if sys.platform == "linux2":\n         def hello(self):\n              print "Hello Linux"\n     else:\n         def hello(self):\n              print "Hello ~Linux"\n']], ['Why do attribute references act like this with Python inheritance?'], 4], [(206734, 2), [['In constrast, objects in  __init__  are created at  instantiation  time and belong to the instance only (when they are assigned to  self ):'], ['Objects defined on a class object rather than instance can be useful in many cases. For instance, you might want to cache instances of your class, so that instances with the same member values can be shared (assuming they are supposed to be immutable):']], [[' class Test(object):\n    def __init__(self):\n        self.inst_var = [1, 2, 3]\n']], ['Why do attribute references act like this with Python inheritance?'], 4], [(206734, 3), [['Objects defined on a class object rather than instance can be useful in many cases. For instance, you might want to cache instances of your class, so that instances with the same member values can be shared (assuming they are supposed to be immutable):'], ['Mostly, I use data in class bodies in conjunction with metaclasses or generic factory methods.']], [[' class SomeClass(object):\n    __instances__ = {}\n\n    def __new__(cls, v1, v2, v3):\n        try:\n            return cls.__insts__[(v1, v2, v3)]\n        except KeyError:\n            return cls.__insts__.setdefault(\n               (v1, v2, v3), \n               object.__new__(cls, v1, v2, v3))\n']], ['Why do attribute references act like this with Python inheritance?'], 4], [(206916, 0), [['So in your code above, add the marked line:'], ['On the other hand, why do you go through the lambda? An event has a .widget attribute which you can use. So you can change your code into:']], [[' if len(self.__value) > 2:\n    widgetName.delete(2,4)\n    return "break" # add this line\n']], ['Help with <key> event in python Entry widget'], 2], [(206916, 1), [['On the other hand, why do you go through the lambda? An event has a .widget attribute which you can use. So you can change your code into:'], ['All the changed lines are marked with "here!"']], [['     self.__aEntry.bind(\'<Key>\', self.callback) # ※ here!\n    self.__aEntry.pack(side=LEFT)\n\ndef callback(self, event):\n    self.__value = event.widget.get()+event.char # ※ here!\n    print self.__value\n    if len(self.__value)>2:\n        event.widget.delete(2,4) # ※ here!\n        return "break"\n']], ['Help with <key> event in python Entry widget'], 2], [(208894, 0), [['Actually, after some more digging, it looks like the  xmlrpclib  module may have the piece I need with its  Binary  helper class:'], ["Here's an example from the  Trac XML-RPC documentation"]], [[" binary_obj = xmlrpclib.Binary( open('foo.pdf').read() )\n"]], ['How to base64 encode a PDF file in Python'], 2], [(208894, 1), [["Here's an example from the  Trac XML-RPC documentation"], ['-10000']], [[' import xmlrpclib \nserver = xmlrpclib.ServerProxy("http://athomas:password@localhost:8080/trunk/login/xmlrpc") \nserver.wiki.putAttachment(\'WikiStart/t.py\', xmlrpclib.Binary(open(\'t.py\').read())) \n']], ['How to base64 encode a PDF file in Python'], 2], [(209484, 0), [["I'm not sure I understand the problem.  You could use readline.clear_history and readline.add_history to set up the completable strings you want, then control-r to search backword in the history (just as if you were at a shell prompt).  For example:"], ['Alternatively, you could write your own completer version and bind the appropriate key to it.  This version uses caching in case your match list is huge:']], [[" #!/usr/bin/env python\n\nimport readline\n\nreadline.clear_history()\nreadline.add_history('foo')\nreadline.add_history('bar')\n\nwhile 1:\n    print raw_input('> ')\n"]], ['Howto do python command-line autocompletion but NOT only at the beginning of a string'], 2], [(209484, 1), [['Alternatively, you could write your own completer version and bind the appropriate key to it.  This version uses caching in case your match list is huge:'], ['-10000']], [[" #!/usr/bin/env python\n\nimport readline\n\nvalues = ['Paul Eden <paul@domain.com>', \n          'Eden Jones <ejones@domain.com>', \n          'Somebody Else <somebody@domain.com>']\ncompletions = {}\n\ndef completer(text, state):\n    try:\n        matches = completions[text]\n    except KeyError:\n        matches = [value for value in values\n                   if text.upper() in value.upper()]\n        completions[text] = matches\n    try:\n        return matches[state]\n    except IndexError:\n        return None\n\nreadline.set_completer(completer)\nreadline.parse_and_bind('tab: menu-complete')\n\nwhile 1:\n    a = raw_input('> ')\n    print 'said:', a\n"]], ['Howto do python command-line autocompletion but NOT only at the beginning of a string'], 2], [(209513, 0), [["Without  the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:"], ['With  the 0x prefix, Python can distinguish hex and decimal automatically.']], [[' x = int("deadbeef", 16)\n']], ['Convert hex string to int in Python'], 2], [(209513, 1), [['With  the 0x prefix, Python can distinguish hex and decimal automatically.'], ['(You  must  specify  0  as the base in order to invoke this prefix-guessing behavior; omitting the second parameter means to assume base-10.)']], [[' >>> print int("0xdeadbeef", 0)\n3735928559\n>>> print int("10", 0)\n10\n']], ['Convert hex string to int in Python'], 2], [(211046, 0), [['You can use  wxPython  for this.'], ['This icon can then be applied to a wxFrame (a window) or a wxTaskBarIcon using:']], [[' from wx import EmptyIcon\nicon = EmptyIcon()\nicon.CopyFromBitmap(your_wxBitmap)\n']], ['Create an icon in memory with win32 in python'], 2], [(211046, 1), [['This icon can then be applied to a wxFrame (a window) or a wxTaskBarIcon using:'], ['-10000']], [[' frame.SetIcon(icon)\n']], ['Create an icon in memory with win32 in python'], 2], [(211695, 0), [["Given your requirements, I'd say the custom class is your best bet:"], ['options.py :']], [[' class options(object):\n    VERBOSE = True\n    IGNORE_WARNINGS = True\n\nif options.VERBOSE:\n    # ...\n']], ['What is an easy way to create a trivial one-off Python object?'], 3], [(211695, 1), [['options.py :'], ['Then, in  main.py :']], [[' VERBOSE = True\nIGNORE_WARNINGS = True\n']], ['What is an easy way to create a trivial one-off Python object?'], 3], [(211695, 2), [['Then, in  main.py :'], ['This has the feature of removing some clutter from your script. The default values are easy to find and change, as they are cordoned off in their own module. If later your application has grown, you can easily access the options from other modules.']], [[' import options\n\nif options.VERBOSE:\n    # ...\n']], ['What is an easy way to create a trivial one-off Python object?'], 3], [(212797, 0), [['However, if you really want a  Queue  method that does this, you can monkeypatch the  Queue  class.  For example:'], ['This would let you say']], [[' def interruptable_get(self):\n    while True:\n        try:\n            return self.get(timeout=1000)\n        except Queue.Empty:\n            pass\nQueue.interruptable_get = interruptable_get\n']], ['Keyboard interruptable blocking queue in Python'], 3], [(212797, 1), [['This would let you say'], ['instead of']], [[' q.interruptable_get()\n']], ['Keyboard interruptable blocking queue in Python'], 3], [(212797, 2), [['instead of'], ['although monkeypatching is generally discouraged by the Python community in cases such as these, since a regular function seems just as good.']], [[' interruptable_get(q)\n']], ['Keyboard interruptable blocking queue in Python'], 3], [(213237, 0), [["In a core library (e.g. mysite.core.views.create_update), I've written a decorator:"], ['And in animals/views.py, I have:']], [[' from django.contrib.contenttypes.models import ContentType\nfrom django.views.generic import create_update\n\ndef update_object_as_child(parent_model_class):\n   """\n   Given a base models.Model class, decorate a function to return  \n   create_update.update_object, on the child class.\n\n   e.g.\n   @update_object(Animal)\n   def update_object(request, object_id):\n      pass\n\n  kwargs should have an object_id defined.\n  """\n\n  def decorator(function):\n      def wrapper(request, **kwargs):\n          # may raise KeyError\n          id = kwargs[\'object_id\']\n\n          parent_obj = parent_model_class.objects.get( pk=id )\n\n          # following http://www.djangosnippets.org/snippets/1031/\n          child_class = parent_obj.content_type.model_class()\n\n          kwargs[\'model\'] = child_class\n\n          # rely on the generic code for testing/validation/404\n          return create_update.update_object(request, **kwargs)\n      return wrapper\n\n  return decorator\n']], ["In Django, how could one use Django's update_object generic view to edit forms of inherited models?"], 3], [(213237, 1), [['And in animals/views.py, I have:'], ['And in animals/urls.py, I have:']], [[' from mysite.core.views.create_update import update_object_as_child\n\n@update_object_as_child(Animal)\ndef edit_animal(request, object_id):\n  pass\n']], ["In Django, how could one use Django's update_object generic view to edit forms of inherited models?"], 3], [(213237, 2), [['And in animals/urls.py, I have:'], ['Now I only need a unique edit function for each base class, which is trivial to create with a decorator.']], [[' urlpatterns += patterns(\'animals.views\',\n  url(r\'^edit/(?P<object_id>\\d+)$\', \'edit_animal\', name="edit_animal"),\n)\n']], ["In Django, how could one use Django's update_object generic view to edit forms of inherited models?"], 3], [(214059, 0), [['Ah, forget it. This is too much of a pain. It was a lot easier to get the source to ngrep and make it print the hash marks to stderr:'], ['Then, filtering is a piece of cake:']], [[' --- ngrep.c     2006-11-28 05:38:43.000000000 -0800\n+++ ngrep.c.new 2008-10-17 16:28:29.000000000 -0700\n@@ -687,8 +687,7 @@\n     }\n\n     if (quiet < 1) {\n-        printf("#");\n-        fflush(stdout);\n+      fprintf (stderr, "#");\n     }\n\n     switch (ip_proto) {                 \n']], ['How can I write a wrapper around ngrep that highlights matches?'], 2], [(214059, 1), [['Then, filtering is a piece of cake:'], ['-10000']], [[' while (<CMD>) {\n  s/($keyword)/\\e[93m$1\\e[0m/g;\n  print;\n}\n']], ['How can I write a wrapper around ngrep that highlights matches?'], 2], [(215752, 0), [['First of all, change your function to  return  the value.  print ing it will complicate things since you want to get the value back. Suppose your  MyModule.py  looks like this:'], ['Now, to do what you want, you have to go beyond basic embedding, as the  documentation says . Here is the full code to run your function:']], [[' import thirdparty\n\ndef MyFunc(some_arg):\n    result = thirdparty.go()\n    return result\n']], ['Python embedded in CPP: how to get data back to CPP'], 2], [(215752, 1), [['Now, to do what you want, you have to go beyond basic embedding, as the  documentation says . Here is the full code to run your function:'], ['-10000']], [[' #include <Python.h>\n\nint\nmain(int argc, char *argv[])\n{\n    PyObject *pName, *pModule, *pFunc;\n    PyObject *pArgs, *pArg, *pResult;\n    int i;\n\n    Py_Initialize();\n    pName = PyString_FromString("MyModule.py");\n    /* Error checking of pName left out as exercise */\n\n    pModule = PyImport_Import(pName);\n    Py_DECREF(pName);\n\n    if (pModule != NULL) {\n        pFunc = PyObject_GetAttrString(pModule, "MyFunc");\n        /* pFunc is a new reference */\n\n        if (pFunc) {\n            pArgs = PyTuple_New(0);\n            pArg = PyString_FromString("some parameter")\n            /* pArg reference stolen here: */\n            PyTuple_SetItem(pArgs, 0, pArg);\n            pResult = PyObject_CallObject(pFunc, pArgs);\n            Py_DECREF(pArgs);\n            if (pResult != NULL) {\n                printf("Result of call: %s\\n", PyString_AsString(pResult));\n                Py_DECREF(pResult);\n            }\n            else {\n                Py_DECREF(pFunc);\n                Py_DECREF(pModule);\n                PyErr_Print();\n                fprintf(stderr,"Call failed\\n");\n                return 1;\n            }\n        }\n        else {\n            if (PyErr_Occurred())\n                PyErr_Print();\n            fprintf(stderr, "Cannot find function");\n        }\n        Py_XDECREF(pFunc);\n        Py_DECREF(pModule);\n    }\n    else {\n        PyErr_Print();\n        fprintf(stderr, "Failed to load module");\n        return 1;\n    }\n    Py_Finalize();\n    return 0;\n}\n']], ['Python embedded in CPP: how to get data back to CPP'], 2], [(218616, 0), [['Take a look at the  inspect  module - this will do the inspection of the various code object properties for you.'], ['The other results are the name of the *args and **kwargs variables, and the defaults provided.  ie.']], [[" >>> inspect.getargspec(aMethod)\n(['arg1', 'arg2'], None, None, None)\n"]], ['Getting method parameter names in python'], 2], [(218616, 1), [['The other results are the name of the *args and **kwargs variables, and the defaults provided.  ie.'], ['-10000']], [[" >>> def foo(a,b,c=4, *arglist, **keywords): pass\n>>> inspect.getargspec(foo)\n(['a', 'b', 'c'], 'arglist', 'keywords', (4,))\n"]], ['Getting method parameter names in python'], 2], [(218935, 0), [['Subprocess  replaces os.popen, os.system, os.spawn, popen2 and commands. A  simple example for piping  would be:'], ['multiprocessing  abstracts both  pipes  and  shared memory  and provides a higher level interface. Taken from the Processing documentation:']], [[' p1 = Popen(["dmesg"], stdout=PIPE)\np2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)\noutput = p2.communicate()[0]\n']], ['How do you share data between a parent and forked child process in Python?'], 2], [(218935, 1), [['multiprocessing  abstracts both  pipes  and  shared memory  and provides a higher level interface. Taken from the Processing documentation:'], ['-10000']], [[' from multiprocessing import Process, Pipe\n\ndef f(conn):\n    conn.send([42, None, \'hello\'])\n    conn.close()\n\nif __name__ == \'__main__\':\n    parent_conn, child_conn = Pipe()\n    p = Process(target=f, args=(child_conn,))\n    p.start()\n    print parent_conn.recv()   # prints "[42, None, \'hello\']"\n    p.join()\n']], ['How do you share data between a parent and forked child process in Python?'], 2], [(219547, 0), [["I cannot confirm your results, and your server is coded fishy. I whipped up my own server and do not have this problem either. Let's move the discussion to a simpler level:"], ['which on my machine does:']], [[" import thread, socket, Queue\n\nconnections = Queue.Queue()\nnum_threads = 10\nbacklog = 10\n\ndef request():\n    while 1:\n        conn = connections.get()\n        data = ''\n        while '\\r\\n\\r\\n' not in data:\n            data += conn.recv(4048)\n        conn.sendall('HTTP/1.1 200 OK\\r\\n\\r\\nHello World')\n        conn.close()\n\nif __name__ == '__main__':\n    for _ in range(num_threads):\n        thread.start_new_thread(request, ())\n\n    acceptor = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    acceptor.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    acceptor.bind(('', 1234))\n    acceptor.listen(backlog)\n    while 1:\n        conn, addr = acceptor.accept()\n        connections.put(conn)\n"]], ['I’m stunned: weird problem with python and sockets + threads'], 2], [(219547, 1), [['which on my machine does:'], ['-10000']], [[' ab -n 10000 -c 10 http://127.0.0.1:1234/ --> 8695.03 [#/sec]\nab -n 10000 -c 11 http://127.0.0.1:1234/ --> 8529.41 [#/sec]\n']], ['I’m stunned: weird problem with python and sockets + threads'], 2], [(221097, 0), [['Use  subprocess , it superseeds os.popen, though it is not much more of an abstraction:'], ['If you have only python 2.3 which has no subprocess module, you can still use os.popen']], [[' from subprocess import Popen, PIPE\noutput = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]\n\n#this is how I\'d mangle the arguments together\noutput = Popen([\n    self._ghostscriptPath, \n   \'gswin32c\',\n   \'-q\',\n   \'-dNOPAUSE\',\n   \'-dBATCH\',\n   \'-sDEVICE=tiffg4\',\n   \'-r196X204\',\n   \'-sPAPERSIZE=a4\',\n   \'-sOutputFile="%s %s"\' % (tifDest, pdfSource),\n], stdout=PIPE).communicate()[0]\n']], ['What is the best way on python 2.3 for windows to execute a program like ghostscript with multiple arguments and spaces in paths?'], 2], [(221097, 1), [['If you have only python 2.3 which has no subprocess module, you can still use os.popen'], ['-10000']], [[' os.popen(\' \'.join([\n    self._ghostscriptPath, \n   \'gswin32c\',\n   \'-q\',\n   \'-dNOPAUSE\',\n   \'-dBATCH\',\n   \'-sDEVICE=tiffg4\',\n   \'-r196X204\',\n   \'-sPAPERSIZE=a4\',\n   \'-sOutputFile="%s %s"\' % (tifDest, pdfSource),\n]))\n']], ['What is the best way on python 2.3 for windows to execute a program like ghostscript with multiple arguments and spaces in paths?'], 2], [(221328, 0), [['By default, you can access a Manager which gives you access to related items through a  RELATEDCLASSNAME_set  attribute:'], ['Or you can use the  related_name  argument to  ForeignKey  to specify the attribute which should hold the reverse relationship Manager:']], [[' some_foo.bar_set.all()\n']], ['How can I write a method within a Django model to retrieve related objects?'], 2], [(221328, 1), [['Or you can use the  related_name  argument to  ForeignKey  to specify the attribute which should hold the reverse relationship Manager:'], ['-10000']], [[" class Foo(models.Model):\n     name = models.CharField()\n\nclass Bar(models.Model):\n     title = models.CharField()\n     foo = models.ForeignKey(Foo, related_name='bars')\n\n...\n\nsome_foo.bars.all()\n"]], ['How can I write a method within a Django model to retrieve related objects?'], 2], [(221386, 0), [['The problem then is if you miss the pattern you are replacing.. For example:'], ['For example (pseudo code!):']], [[' target_seq = "567"\ninput_file = "1234567890"\n\ntarget_seq.read(5) # reads 12345, doesn\'t contain 567\ntarget_seq.read(5) # reads 67890, doesn\'t contain 567\n']], ['Removing a sequence of characters from a large binary file using python'], 2], [(221386, 1), [['For example (pseudo code!):'], ["It's not exactly the most efficient way, but it will work, and not require keeping a copy of the file in memory (or two)."]], [[' while cur_data != "":\n    seek_start = 0\n    chunk_size = len(target_seq)\n\n    input_file.seek(offset = seek_start, whence = 1) #whence=1 means seek from start of file (0 + offset)\n    cur_data = input_file.read(chunk_size) # reads 123\n    if target_seq == cur_data:\n        # Found it!\n        out_file.write("replacement_string")\n    else:\n        # not it, shove it in the new file\n        out_file.write(cur_data)\n    seek_start += 1\n']], ['Removing a sequence of characters from a large binary file using python'], 2], [(222752, 0), [['-10000'], ['or without  itemgetter :']], [[' from operator import itemgetter\n\nMY_SORTED_TUPLE = tuple(sorted(MY_TUPLE, key=itemgetter(1)))\n']], ['Sorting a tuple that contains tuples'], 2], [(222752, 1), [['or without  itemgetter :'], ['-10000']], [[' MY_SORTED_TUPLE = tuple(sorted(MY_TUPLE, key=lambda item: item[1]))\n']], ['Sorting a tuple that contains tuples'], 2], [(224145, 0), [['The naive approach can be written more compactly as a generator expression:'], ['The general approach can be written much more simply using a recursive function:']], [[' ((a,b,c) for a in [1,2,3] for b in [4,5,6,7,8,9] for c in [1,2])\n']], ['What would be a better implementation of all combinations in lexicographic order of a jagged list?'], 3], [(224145, 1), [['The general approach can be written much more simply using a recursive function:'], ['Sample usage:']], [[' def combinations(*seqs):\n  if not seqs: return (item for item in ())\n  first, rest = seqs[0], seqs[1:]\n  if not rest: return ((item,) for item in first)\n  return ((item,) + items for item in first for items in combinations(*rest))\n']], ['What would be a better implementation of all combinations in lexicographic order of a jagged list?'], 3], [(224145, 2), [['Sample usage:'], ['-10000']], [[" >>> for pair in combinations('abc', [1,2,3]):\n...   print pair\n... \n('a', 1)\n('a', 2)\n('a', 3)\n('b', 1)\n('b', 2)\n('b', 3)\n('c', 1)\n('c', 2)\n('c', 3)\n"]], ['What would be a better implementation of all combinations in lexicographic order of a jagged list?'], 3], [(225086, 0), [['You can use wsgiref.handlers.format_date_time from the stdlib which does not rely on locale settings'], ['You can use email.utils.formatdate from the stdlib which does not rely on locale settings ']], [[' from wsgiref.handlers import format_date_time\nfrom datetime import datetime\nfrom time import mktime\n\nnow = datetime.now()\nstamp = mktime(now.timetuple())\nprint format_date_time(stamp) #--> Wed, 22 Oct 2008 10:52:40 GMT\n']], ['RFC 1123 Date Representation in Python?'], 5], [(225086, 1), [['You can use email.utils.formatdate from the stdlib which does not rely on locale settings '], ['If you can set the locale process wide then you can do:']], [[' from email.utils import formatdate\nfrom datetime import datetime\nfrom time import mktime\n\nnow = datetime.now()\nstamp = mktime(now.timetuple())\nprint formatdate(\n    timeval     = stamp,\n    localtime   = False,\n    usegmt      = True\n) #--> Wed, 22 Oct 2008 10:55:46 GMT\n']], ['RFC 1123 Date Representation in Python?'], 5], [(225086, 2), [['If you can set the locale process wide then you can do:'], ["If you don't want to set the locale process wide you could use  Babel   date formating"]], [[" import locale, datetime\n\nlocale.setlocale(locale.LC_TIME, 'en_US')\ndatetime.datetime.utcnow().strftime('%a, %d %b %Y %H:%M:%S GMT')\n"]], ['RFC 1123 Date Representation in Python?'], 5], [(225086, 3), [["If you don't want to set the locale process wide you could use  Babel   date formating"], ['A manual way to format it which is identical with wsgiref.handlers.format_date_time is:']], [[" from datetime import datetime\nfrom babel.dates import format_datetime\n\nnow = datetime.utcnow()\nformat = 'EEE, dd LLL yyyy hh:mm:ss'\nprint format_datetime(now, format, locale='en') + ' GMT'\n"]], ['RFC 1123 Date Representation in Python?'], 5], [(225086, 4), [['A manual way to format it which is identical with wsgiref.handlers.format_date_time is:'], ['-10000']], [[' def httpdate(dt):\n    """Return a string representation of a date according to RFC 1123\n    (HTTP/1.1).\n\n    The supplied date must be in UTC.\n\n    """\n    weekday = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"][dt.weekday()]\n    month = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",\n             "Oct", "Nov", "Dec"][dt.month - 1]\n    return "%s, %02d %s %04d %02d:%02d:%02d GMT" % (weekday, dt.day, month,\n        dt.year, dt.hour, dt.minute, dt.second)\n']], ['RFC 1123 Date Representation in Python?'], 5], [(225735, 0), [['Such renaming is quite easy, for example with  os  and  glob  modules:'], ['You could then use it in your example like this:']], [[' import glob, os\n\ndef rename(dir, pattern, titlePattern):\n    for pathAndFilename in glob.iglob(os.path.join(dir, pattern)):\n        title, ext = os.path.splitext(os.path.basename(pathAndFilename))\n        os.rename(pathAndFilename, \n                  os.path.join(dir, titlePattern % title + ext))\n']], ['Batch Renaming of Files in a Directory'], 2], [(225735, 1), [['You could then use it in your example like this:'], ['The above example will convert all  *.doc  files in  c:\\temp\\xx  dir to  new(%s).doc , where  %s  is the previous base name of the file (without extension).']], [[" rename(r'c:\\temp\\xx', r'*.doc', r'new(%s)')\n"]], ['Batch Renaming of Files in a Directory'], 2], [(226528, 0), [['urls.py:'], ['Templates:']], [[" from django.conf.urls.defaults import *\n\nurlpatterns = patterns('myproject.views',\n    url(r'^$', 'index', name='index'),\n)\n"]], ["How does one put a link / url to the web-site's home page in Django?"], 2], [(226528, 1), [['Templates:'], ['This note in the Django Book has some tips about deploying your applications to a subdirectory:']], [[' <a href="{% url index %}">...\n']], ["How does one put a link / url to the web-site's home page in Django?"], 2], [(227459, 0), [['-10000'], ['In Python 2, there is also the  unichr  function, returning the  Unicode  character whose ordinal is the  unichr  argument:']], [[" >>> ord('a')\n97\n>>> chr(97)\n'a'\n>>> chr(ord('a') + 3)\n'd'\n>>>\n"]], ['ASCII value of a character in Python'], 2], [(227459, 1), [['In Python 2, there is also the  unichr  function, returning the  Unicode  character whose ordinal is the  unichr  argument:'], ['In Python 3 you can use  chr  instead of  unichr .']], [[" >>> unichr(97)\nu'a'\n>>> unichr(1234)\nu'\\u04d2'\n"]], ['ASCII value of a character in Python'], 2], [(227461, 0), [['Actually an easier way using fileinput is to use the inplace parameter:'], ['This example adds line numbers to your file:']], [[' import fileinput\nfor line in fileinput.input (filenameToProcess, inplace=1):\n    process (line)\n']], ['Open file, read it, process, and write back - shortest method in Python'], 2], [(227461, 1), [['This example adds line numbers to your file:'], ['-10000']], [[' import fileinput\n\nfor line in fileinput.input ("b.txt",inplace=1):\n    print "%d: %s" % (fileinput.lineno(),line),\n']], ['Open file, read it, process, and write back - shortest method in Python'], 2], [(228702, 0), [['This will do the trick:'], ['or, in function form (and stripping off the trailing "L"):']], [[' >>> print hex (-1 & 0xffffffff)\n0xffffffffL\n']], ['How to get hex string from signed integer'], 4], [(228702, 1), [['or, in function form (and stripping off the trailing "L"):'], ['or, a variant that always returns fixed size (there may well be a better way to do this):']], [[' >>> def hex2(n):\n...     return hex (n & 0xffffffff)[:-1]\n...\n>>> print hex2(-1)\n0xffffffff\n>>> print hex2(17)\n0x11\n']], ['How to get hex string from signed integer'], 4], [(228702, 2), [['or, a variant that always returns fixed size (there may well be a better way to do this):'], ['Or, avoiding the hex() altogether, thanks to Ignacio and bobince:']], [[' >>> def hex3(n):\n...     return "0x%s"%("00000000%s"%(hex(n&0xffffffff)[2:-1]))[-8:]\n...\n>>> print hex3(-1)\n0xffffffff\n>>> print hex3(17)\n0x00000011\n']], ['How to get hex string from signed integer'], 4], [(228702, 3), [['Or, avoiding the hex() altogether, thanks to Ignacio and bobince:'], ['-10000']], [[' def hex2(n):\n    return "0x%x"%(n&0xffffffff)\n\ndef hex3(n):\n    return "0x%s"%("00000000%x"%(n&0xffffffff))[-8:]\n']], ['How to get hex string from signed integer'], 4], [(228730, 0), [['You can use string.lowercase, as other posters have suggested:'], ['To do things the way you\'re "used to", treating letters as numbers, you can use the "ord" and "chr" functions.  There\'s absolutely no reason to ever do exactly this, but maybe it comes closer to what you\'re actually trying to figure out:']], [[' import string\nallTheLetters = string.lowercase\n']], ['How do I iterate through a string in Python?'], 7], [(228730, 1), [['To do things the way you\'re "used to", treating letters as numbers, you can use the "ord" and "chr" functions.  There\'s absolutely no reason to ever do exactly this, but maybe it comes closer to what you\'re actually trying to figure out:'], ['You can tell it does the right thing because this code prints  True :']], [[" def getAllTheLetters(begin='a', end='z'):\n    beginNum = ord(begin)\n    endNum = ord(end)\n    for number in xrange(beginNum, endNum+1):\n        yield chr(number)\n"]], ['How do I iterate through a string in Python?'], 7], [(228730, 2), [['You can tell it does the right thing because this code prints  True :'], ["But, to solve the problem you're actually trying to solve, you want to use a dictionary and collect the letters as you go:"]], [[" import string\nprint ''.join(getAllTheLetters()) == string.lowercase\n"]], ['How do I iterate through a string in Python?'], 7], [(228730, 3), [["But, to solve the problem you're actually trying to solve, you want to use a dictionary and collect the letters as you go:"], ['Use like so:']], [[' from collections import defaultdict    \ndef letterOccurrances(string):\n    frequencies = defaultdict(lambda: 0)\n    for character in string:\n        frequencies[character.lower()] += 1\n    return frequencies\n']], ['How do I iterate through a string in Python?'], 7], [(228730, 4), [['Use like so:'], ['Note that this works for unicode as well:']], [[' occs = letterOccurrances("Hello, world!")\nprint occs[\'l\']\nprint occs[\'h\']\n']], ['How do I iterate through a string in Python?'], 7], [(228730, 5), [['Note that this works for unicode as well:'], ['To implement your original function (print the counts of each letter in alphabetical order) in terms of this:']], [[' # -*- coding: utf-8 -*-\noccs = letterOccurrances(u"héĺĺó, ẃóŕĺd!")\nprint occs[u\'l\']\nprint occs[u\'ĺ\']\n']], ['How do I iterate through a string in Python?'], 7], [(228730, 6), [['To implement your original function (print the counts of each letter in alphabetical order) in terms of this:'], ['-10000']], [[' def alphCount(text):\n    for character, count in sorted(letterOccurrances(text).iteritems()):\n        print "%s: %s" % (character, count)\n\nalphCount("hello, world!")\n']], ['How do I iterate through a string in Python?'], 7], [(232435, 0), [['Next there is a class method in the model that reads the thread local variable and returns a list of ids to limit the choice of a foreign key field.'], ['The foreign key field is then declared as:']], [[' @classmethod\ndef _product_list(cls):\n    """\n    return a list containing the one product_id contained in the request URL,\n    or a query containing all valid product_ids if not id present in URL\n\n    used to limit the choice of foreign key object to those related to the current product\n    """\n    id = threadlocals.get_current_product()\n    if id is not None:\n        return [id]\n    else:\n        return Product.objects.all().values(\'pk\').query\n']], ['How do I restrict foreign keys choices to related objects only in django'], 2], [(232435, 1), [['The foreign key field is then declared as:'], ['The catch is that you have to provide the information to restrict the choices via the request. I don\'t see a way to access "self" here.']], [[' product = models.ForeignKey(\n    Product,\n    limit_choices_to={\n        id__in=BaseModel._product_list,\n    },\n)\n']], ['How do I restrict foreign keys choices to related objects only in django'], 2], [(236692, 0), [['Try this code:'], ['If you need help about what the code does, please ask and I will explain.']], [[' import Image\n\ndef estimate_color(c, bit, c_error):\n    c_new= c -  c_error\n    if c_new > 127:\n        c_bit= bit\n        c_error= 255 - c_new\n    else:\n        c_bit= 0\n        c_error= -c_new\n    return c_bit, c_error\n\ndef image2cga(im):\n    "Produce a sequence of CGA pixels from image im"\n    im_width= im.size[0]\n    for index, (r, g, b) in enumerate(im.getdata()):\n        if index % im_width == 0: # start of a line\n            r_error= g_error= 0\n        r_bit, r_error= estimate_color(r, 1, r_error)\n        g_bit, g_error= estimate_color(g, 2, g_error)\n        yield r_bit|g_bit\n\ndef cvt2cga(imgfn):\n    "Convert an RGB image to (K, R, G, Y) CGA image"\n    inp_im= Image.open(imgfn) # assume it\'s RGB\n    out_im= Image.new("P", inp_im.size, None)\n    out_im.putpalette( (\n        0, 0, 0,\n        255, 0, 0,\n        0, 255, 0,\n        255, 255, 0,\n    ) )\n    out_im.putdata(list(image2cga(inp_im)))\n    return out_im\n\nif __name__ == "__main__":\n    import sys, os\n\n    for imgfn in sys.argv[1:]:\n        im= cvt2cga(imgfn)\n        dirname, filename= os.path.split(imgfn)\n        name, ext= os.path.splitext(filename)\n        newpathname= os.path.join(dirname, "cga-%s.png" % name)\n        im.save(newpathname)\n']], ['How do I convert any image to a 4-color paletted image using the Python Imaging Library?'], 3], [(236692, 1), [['If you need help about what the code does, please ask and I will explain.'], ['-10000']], [[' def cga_quantize(image):\n    pal_image= Image.new("P", (1,1))\n    pal_image.putpalette( (0,0,0, 0,255,0, 255,0,0, 255,255,0) + (0,0,0)*252)\n    return image.convert("RGB").quantize(palette=pal_image)\n']], ['How do I convert any image to a 4-color paletted image using the Python Imaging Library?'], 3], [(236692, 2), [['-10000'], ['-10000']], [[' import itertools as it\n\n# setup: create a map with tuples [(0,0,0,0)‥(3,3,3,3)] as keys\n# and values [chr(0)‥chr(255)], because PIL does not yet support\n# 4 colour palette images\n\nTUPLE2CHAR= {}\n\n# Assume (b7, b6) are pixel0, (b5, b4) are pixel1…\n# Call it "big endian"\n\nKEY_BUILDER= [\n    (0, 64, 128, 192), # pixel0 value used as index\n    (0, 16, 32, 48), # pixel1\n    (0, 4, 8, 12), # pixel2\n    (0, 1, 2, 3), # pixel3\n]\n# For "little endian", uncomment the following line\n## KEY_BUILDER.reverse()\n\n# python2.6 has itertools.product, but for compatibility purposes\n# let\'s do it verbosely:\nfor ix0, px0 in enumerate(KEY_BUILDER[0]):\n    for ix1, px1 in enumerate(KEY_BUILDER[1]):\n        for ix2, px2 in enumerate(KEY_BUILDER[2]):\n            for ix3, px3 in enumerate(KEY_BUILDER[3]):\n                TUPLE2CHAR[ix0,ix1,ix2,ix3]= chr(px0+px1+px2+px3)\n\n# Another helper function, copied almost verbatim from itertools docs\ndef grouper(n, iterable, padvalue=None):\n    "grouper(3, \'abcdefg\', \'x\') --> (\'a\',\'b\',\'c\'), (\'d\',\'e\',\'f\'), (\'g\',\'x\',\'x\')"\n    return it.izip(*[it.chain(iterable, it.repeat(padvalue, n-1))]*n)\n\n# now the functions\ndef seq2str(seq):\n    """Takes a sequence of [0..3] values and packs them into bytes\n    using two bits per value"""\n    return \'\'.join(\n        TUPLE2CHAR[four_pixel]\n        for four_pixel in grouper(4, seq, 0))\n\n# and the image related function\n# Note that the following function is correct,\n# but is not useful for Windows 16 colour bitmaps,\n# which start at the *bottom* row…\ndef image2str(img):\n    return seq2str(img.getdata())\n']], ['How do I convert any image to a 4-color paletted image using the Python Imaging Library?'], 3], [(237235, 0), [['To turn it off for a single variable, use  mark_safe :'], ['Alternatively, to totally turn autoescaping off from your Python code,  use the  autoescape  argument when initialising a  Context :']], [[' from django.utils.safestring import mark_safe\n\nt = loader.get_template("sometemplate")\nc = Context({\n   \'foo\': \'bar\',\n   \'url\': mark_safe(\'http://127.0.0.1/test?a=1&b=2\'),\n})\nprint t.render(c)\n']], ['How to disable HTML encoding when using Context in django'], 2], [(237235, 1), [['Alternatively, to totally turn autoescaping off from your Python code,  use the  autoescape  argument when initialising a  Context :'], ["The  How to turn [Automatic HTML escaping] off  section of the documentation covers some of the in-template options if you'd rather do it there."]], [[" c = Context({\n   'foo': 'bar',\n   'url': 'http://127.0.0.1/test?a=1&b=2',\n}, autoescape=False)\n"]], ['How to disable HTML encoding when using Context in django'], 2], [(237432, 0), [['1) for read only properties,  property  can be used as a decorator:'], ['2) in Python 2.6,  properties grew a pair of methods   setter  and  deleter  which can be used to apply to general properties the shortcut already available for read-only ones:']], [[' class Foo(object):\n    @property\n    def age(self):\n        return 11\n\nclass Bar(Foo):\n    @property\n    def age(self):\n        return 44\n']], ['python properties and inheritance'], 2], [(237432, 1), [['2) in Python 2.6,  properties grew a pair of methods   setter  and  deleter  which can be used to apply to general properties the shortcut already available for read-only ones:'], ['-10000']], [[' class C(object):\n    @property\n    def x(self):\n        return self._x\n\n    @x.setter\n    def x(self, value):\n        self._x = value\n']], ['python properties and inheritance'], 2], [(238102, 0), [["So far as I know there's no way to make it a one-liner in current Python without introducing another function, e.g.:"], ["However, in Python 3.0 the specialized syntax used for variadic argument signatures and argument unpacking will become available for this type of general sequence unpacking as well, so in 3.0 you'll be able to write:"]], [[' split_list = lambda lst: (lst[0], lst[1:])\nhead, rest = split_list(my_func())\n']], ['Pattern matching of lists in Python'], 2], [(238102, 1), [["However, in Python 3.0 the specialized syntax used for variadic argument signatures and argument unpacking will become available for this type of general sequence unpacking as well, so in 3.0 you'll be able to write:"], ['See  PEP 3132  for details.']], [[' head, *rest = my_func()\n']], ['Pattern matching of lists in Python'], 2], [(239258, 0), [['A set is good way to deal with that:'], ['One suggestion w/r/t the first answer, is that sets and dicts are better at retrieving unique results quickly, membership in lists is O(n) versus O(1) for the other types, so if you want to store additional data, or do something like create the mentioned  unique_results  list, it may be better to do something like:']], [[" >>> a = ['google.com', 'livejournal.com', 'livejournal.com', 'google.com', 'stackoverflow.com']\n>>> b = set(a)\n>>> b\nset(['livejournal.com', 'google.com', 'stackoverflow.com'])\n>>> \n"]], ['Python: DISTINCT on GQuery result set (GQL, GAE)'], 2], [(239258, 1), [['One suggestion w/r/t the first answer, is that sets and dicts are better at retrieving unique results quickly, membership in lists is O(n) versus O(1) for the other types, so if you want to store additional data, or do something like create the mentioned  unique_results  list, it may be better to do something like:'], ['-10000']], [[" unique_results = {}\n>>> for item in a:\n    unique_results[item] = ''\n\n\n>>> unique_results\n{'livejournal.com': '', 'google.com': '', 'stackoverflow.com': ''}\n"]], ['Python: DISTINCT on GQuery result set (GQL, GAE)'], 2], [(245792, 0), [['1) You need to access the data  multiple  times (i.e. cache the results instead of recomputing them):'], ['2) You need  random access  (or any access other than forward sequential order):']], [[' for i in outer:           # used once, okay to be a generator or return a list\n    for j in inner:       # used multiple times, reusing a list is better\n         ...\n']], ['When is not a good time to use python generators?'], 3], [(245792, 1), [['2) You need  random access  (or any access other than forward sequential order):'], ['3) You need to  join  strings (which requires two passes over the data):']], [[" for i in reversed(data): ...     # generators aren't reversible\n\ns[i], s[j] = s[j], s[i]          # generators aren't indexable\n"]], ['When is not a good time to use python generators?'], 3], [(245792, 2), [['3) You need to  join  strings (which requires two passes over the data):'], ["4) You are using  PyPy  which sometimes can't optimize generator code as much as it can with normal function calls and list manipulations."]], [[" s = ''.join(data)                # lists are faster than generators in this use case\n"]], ['When is not a good time to use python generators?'], 3], [(246525, 0), [["A bezier curve isn't that hard to draw yourself. Given three points  A ,  B ,  C  you require three linear interpolations in order to draw the curve. We use the scalar  t  as the parameter for the linear interpolation:"], ["This interpolates between two edges we've created, edge AB and edge BC. The only thing we now have to do to calculate the point we have to draw is interpolate between P0 and P1 using the same t like so:"]], [[' P0 = A * t + (1 - t) * B\nP1 = B * t + (1 - t) * C\n']], ["How can I draw a bezier curve using Python's PIL?"], 2], [(246525, 1), [["This interpolates between two edges we've created, edge AB and edge BC. The only thing we now have to do to calculate the point we have to draw is interpolate between P0 and P1 using the same t like so:"], ['There are a couple of things that need to be done before we actually draw the curve. First off we have will walk some  dt  (delta t) and we need to be aware that  0 <= t <= 1 . As you might be able to imagine, this will not give us a smooth curve, instead it yields only a discrete set of positions at which to plot. The easiest way to solve this is to simply draw a line between the current point and the previous point.']], [[' Pfinal = P0 * t + (1 - t) * P1\n']], ["How can I draw a bezier curve using Python's PIL?"], 2], [(246725, 0), [['Create a file .pythonrc'], ['then in your .bashrc file, add']], [[' # ~/.pythonrc\n# enable syntax completion\ntry:\n    import readline\nexcept ImportError:\n    print("Module readline not available.")\nelse:\n    import rlcompleter\n    readline.parse_and_bind("tab: complete")\n']], ['How do I add tab completion to the Python shell?'], 2], [(246725, 1), [['then in your .bashrc file, add'], ['That seems to work.']], [[' export PYTHONSTARTUP=~/.pythonrc\n']], ['How do I add tab completion to the Python shell?'], 2], [(247770, 0), [['-10000'], ['Will actually give you the path to the .pyc file that was loaded, at least on Mac OS X. So I guess you can do']], [[' import a_module\nprint a_module.__file__\n']], ['Retrieving python module path'], 3], [(247770, 1), [['Will actually give you the path to the .pyc file that was loaded, at least on Mac OS X. So I guess you can do'], ['You can also try']], [[' import os\npath = os.path.dirname(amodule.__file__)\n']], ['Retrieving python module path'], 3], [(247770, 2), [['You can also try'], ['To get the directory to look for changes.']], [[' path = os.path.abspath(amodule.__file__)\n']], ['Retrieving python module path'], 3], [(248830, 0), [['-10000'], ['Or without an accumulator:']], [[' def getPermutations(string, prefix=""):\n    if len(string) == 1:\n        yield prefix + string\n    else:\n        for i in xrange(len(string)):\n            for perm in getPermutations(string[:i] + string[i+1:], prefix+string[i]):\n                yield perm\n']], ['Python: using a recursive algorithm as a generator'], 2], [(248830, 1), [['Or without an accumulator:'], ['-10000']], [[' def getPermutations(string):\n    if len(string) == 1:\n        yield string\n    else:\n        for i in xrange(len(string)):\n            for perm in getPermutations(string[:i] + string[i+1:]):\n                yield string[i] + perm\n']], ['Python: using a recursive algorithm as a generator'], 2], [(251464, 0), [['-10000'], ['Using  __name__  is the preferred method as it applies uniformly. Unlike  func_name , it works on built-in functions as well:']], [[' my_function.__name__\n']], ['How to get a function name as a string in Python?'], 2], [(251464, 1), [['Using  __name__  is the preferred method as it applies uniformly. Unlike  func_name , it works on built-in functions as well:'], ['Also the double underscores indicate to the reader this is a special attribute. As a bonus, classes and modules have a  __name__  attribute too, so you only have remember one special name.']], [[' >>> import time\n>>> time.time.func_name\nTraceback (most recent call last):\n  File "<stdin>", line 1, in ?\nAttributeError: \'builtin_function_or_method\' object has no attribute \'func_name\'\n>>> time.time.__name__ \n\'time\'\n']], ['How to get a function name as a string in Python?'], 2], [(252417, 0), [["The following example of ctypes is from actual code I've written (in Python 2.5).  This has been, by far, the easiest way I've found for doing what you ask."], ["All calls pass four void pointers (EHLLAPI sends the return code back through the fourth parameter, a pointer to an  int  so, while I specify  int  as the return type, I can safely ignore it) as per IBM's documentation  here . In other words, the C variant of the function would be:"]], [[' import ctypes\n\n# Load DLL into memory.\n\nhllDll = ctypes.WinDLL ("c:\\\\PComm\\\\ehlapi32.dll")\n\n# Set up prototype and parameters for the desired function call.\n# HLLAPI\n\nhllApiProto = ctypes.WINFUNCTYPE (\n    ctypes.c_int,      # Return type.\n    ctypes.c_void_p,   # Parameters 1 ...\n    ctypes.c_void_p,\n    ctypes.c_void_p,\n    ctypes.c_void_p)   # ... thru 4.\nhllApiParams = (1, "p1", 0), (1, "p2", 0), (1, "p3",0), (1, "p4",0),\n\n# Actually map the call ("HLLAPI(...)") to a Python name.\n\nhllApi = hllApiProto (("HLLAPI", hllDll), hllApiParams)\n\n# This is how you can actually call the DLL function.\n# Set up the variables and call the Python name with them.\n\np1 = ctypes.c_int (1)\np2 = ctypes.c_char_p (sessionVar)\np3 = ctypes.c_int (1)\np4 = ctypes.c_int (0)\nhllApi (ctypes.byref (p1), p2, ctypes.byref (p3), ctypes.byref (p4))\n']], ['How can I use a DLL file from Python?'], 2], [(252417, 1), [["All calls pass four void pointers (EHLLAPI sends the return code back through the fourth parameter, a pointer to an  int  so, while I specify  int  as the return type, I can safely ignore it) as per IBM's documentation  here . In other words, the C variant of the function would be:"], ["This makes for a single, simple  ctypes  function able to do anything the EHLLAPI library provides, but it's likely that other libraries will need a separate  ctypes  function set up per library function."]], [[' int hllApi (void *p1, void *p2, void *p3, void *p4)\n']], ['How can I use a DLL file from Python?'], 2], [(254350, 0), [['The low level way:'], ['The high level way:']], [[' from __future__ import with_statement\nwith open(filename1) as f1:\n   with open(filename2) as f2:\n      if f1.read() == f2.read():\n         ...\n']], ['In Python, is there a concise way of comparing whether the contents of two text files are the same?'], 2], [(254350, 1), [['The high level way:'], ['-10000']], [[' import filecmp\nif filecmp.cmp(filename1, filename2, shallow=False):\n   ...\n']], ['In Python, is there a concise way of comparing whether the contents of two text files are the same?'], 2], [(258119, 0), [['Here is the solution I and my colleagues came up with:'], ['Gives:']], [[" from types import MethodType\n\nclass PrePostCaller:\n    def __init__(self, other):\n        self.other = other\n\n    def pre(self): print 'pre'\n    def post(self): print 'post'\n\n    def __getattr__(self, name):\n        if hasattr(self.other, name):\n            func = getattr(self.other, name)\n            return lambda *args, **kwargs: self._wrap(func, args, kwargs)\n        raise AttributeError(name)\n\n    def _wrap(self, func, args, kwargs):\n        self.pre()\n        if type(func) == MethodType:\n            result = func( *args, **kwargs)\n        else:\n            result = func(self.other, *args, **kwargs)\n        self.post()\n        return result\n\n#Examples of use\nclass Foo:\n    def stuff(self):\n        print 'stuff'\n\na = PrePostCaller(Foo())\na.stuff()\n\na = PrePostCaller([1,2,3])\nprint a.count()\n"]], ['Python: wrapping method invocations with pre and post methods'], 2], [(258119, 1), [['Gives:'], ['So when creating an instance of your object, wrap it with the PrePostCaller object. After that you continue using the object as if it was an instance of the wrapped object. With this solution you can do the wrapping on a per instance basis.']], [[' pre\nstuff\npost\npre\npost\n0\n']], ['Python: wrapping method invocations with pre and post methods'], 2], [(258296, 0), [['Sounds like a job for  extra .'], ['If the B count is something you often need as a filtering or ordering criterion, or needs to be displayed on list views, you could consider denormalisation by adding a b_count field to your A model and using signals to update it when a B is added or deleted:']], [[" A.objects.extra(\n    select={\n        'b_count': 'SELECT COUNT(*) FROM yourapp_b WHERE yourapp_b.a_id = yourapp_a.id',\n    },\n    where=['b_count < 2']\n)\n"]], ['Django models - how to filter number of ForeignKey objects'], 3], [(258296, 1), [['If the B count is something you often need as a filtering or ordering criterion, or needs to be displayed on list views, you could consider denormalisation by adding a b_count field to your A model and using signals to update it when a B is added or deleted:'], ["Another solution would be to manage a status flag on the A object when you're adding or removing a related B."]], [[' from django.db import connection, transaction\nfrom django.db.models.signals import post_delete, post_save\n\ndef update_b_count(instance, **kwargs):\n    """\n    Updates the B count for the A related to the given B.\n    """\n    if not kwargs.get(\'created\', True) or kwargs.get(\'raw\', False):\n        return\n    cursor = connection.cursor()\n    cursor.execute(\n        \'UPDATE yourapp_a SET b_count = (\'\n            \'SELECT COUNT(*) FROM yourapp_b \'\n            \'WHERE yourapp_b.a_id = yourapp_a.id\'\n        \') \'\n        \'WHERE id = %s\', [instance.a_id])\n    transaction.commit_unless_managed()\n\npost_save.connect(update_b_count, sender=B)\npost_delete.connect(update_b_count, sender=B)\n']], ['Django models - how to filter number of ForeignKey objects'], 3], [(258296, 2), [["Another solution would be to manage a status flag on the A object when you're adding or removing a related B."], ['-10000']], [[' B.objects.create(a=some_a)\nif some_a.hidden and some_a.b_set.count() > 1:\n    A.objects.filter(id=some_a.id).update(hidden=False)\n\n...\n\nsome_a = b.a\nsome_b.delete()\nif not some_a.hidden and some_a.b_set.count() < 2:\n    A.objects.filter(id=some_a.id).update(hidden=True)\n']], ['Django models - how to filter number of ForeignKey objects'], 3], [(258746, 0), [['Use the  urlparse  module. Check this function:'], ['In your example:']], [[" import urlparse\n\ndef process_url(url, keep_params=('CONTENT_ITEM_ID=',)):\n    parsed= urlparse.urlsplit(url)\n    filtered_query= '&'.join(\n        qry_item\n        for qry_item in parsed.query.split('&')\n        if qry_item.startswith(keep_params))\n    return urlparse.urlunsplit(parsed[:3] + (filtered_query,) + parsed[4:])\n"]], ['Slicing URL with Python'], 3], [(258746, 1), [['In your example:'], ["This function has the added bonus that it's easier to use if you decide that you also want some more query parameters, or if the order of the parameters is not fixed, as in:"]], [[" >>> process_url(a)\n'http://www.domainname.com/page?CONTENT_ITEM_ID=1234'\n"]], ['Slicing URL with Python'], 3], [(258746, 2), [["This function has the added bonus that it's easier to use if you decide that you also want some more query parameters, or if the order of the parameters is not fixed, as in:"], ['-10000']], [[" >>> url='http://www.domainname.com/page?other_value=xx&param3&CONTENT_ITEM_ID=1234&param1'\n>>> process_url(url, ('CONTENT_ITEM_ID', 'other_value'))\n'http://www.domainname.com/page?other_value=xx&CONTENT_ITEM_ID=1234'\n"]], ['Slicing URL with Python'], 3], [(259234, 0), [['Theres a couple ways to run a function on a loop like that - You can either use a list comprehension'], ['Or you could use the map function']], [[" test = list('asdf')\n[function(x) for x in test]\n"]], ['python, functions running from a list and adding to a list through functions'], 2], [(259234, 1), [['Or you could use the map function'], ['The first answer is more "pythonic", while the second is more functional. ']], [[" test = list('asdf')\nmap(function, test)\n"]], ['python, functions running from a list and adding to a list through functions'], 2], [(259578, 0), [['Replace the call:'], ['with:']], [[' super(ConstParser, self).__init__(defaults)\n']], ['Is it safe to make an old-style class into a new-style class using Multiple Inheritance?'], 2], [(259578, 1), [['with:'], ['and it works just fine without multiple Inheritance.']], [[' SafeConfigParser.__init__(self, defaults)\n']], ['Is it safe to make an old-style class into a new-style class using Multiple Inheritance?'], 2], [(261655, 0), [['-10000'], ['produces:']], [[" l = [\n('a', 1),\n('a', 2),\n('a', 3),\n('b', 1),\n('b', 2),\n('c', 1),\n]\n\nd = {}\nfor x, y in l:\n    d.setdefault(x, []).append(y)\nprint d\n"]], ['Converting a List of Tuples into a Dict in Python'], 2], [(261655, 1), [['produces:'], ['-10000']], [[" {'a': [1, 2, 3], 'c': [1], 'b': [1, 2]}\n"]], ['Converting a List of Tuples into a Dict in Python'], 2], [(263550, 0), [['For example, a language like this:'], ['You might have a grammar like:']], [[' SCENARIO MyScenario\nDELAY 1\nCOUNT 1 ADD 1\nDIRECT_POWER 23, False, 150\nWAIT 3\n...\nEND_SCENARIO\n']], ['We have a graphical designer, now they want a text based designer. Suggestions?'], 3], [(263550, 1), [['You might have a grammar like:'], ['Which gives code like:']], [[" scenario :: 'SCENARIO' label newline _cmds END_SCENARIO\ncmds::  _delay or _count or _direct_power or...\ndelay:: 'DELAY' number\n"]], ['We have a graphical designer, now they want a text based designer. Suggestions?'], 3], [(263550, 2), [['Which gives code like:'], ['-10000']], [[" def scenario():\n    match_word('SCENARIO')\n    scenario_name = match_label()\n    emit('var scenario = new Scenario();')\n    cmds()\n    match_word('END_SCENARIO')\n    emit('byte[] ' + scenario_name + ' = scenario.Compile();')\n\ndef delay():\n    match_word('DELAY')\n    length = match_number()\n    emit('scenario.Add(new DelayCommand('+ length +'))')\n\ndef cmds():\n    word = peek_next_word()\n    if word == 'DELAY':\n       delay()\n    elif ...\n"]], ['We have a graphical designer, now they want a text based designer. Suggestions?'], 3], [(263623, 0), [['Ruby has a zip function:'], ['so your code example is actually:']], [[' [1,2].zip([3,4]) => [[1,3],[2,4]]\n']], ['What is a Ruby equivalent for Python\'s "zip" builtin?'], 3], [(263623, 1), [['so your code example is actually:'], ['or perhaps more succinctly:']], [[' a.zip(b).all? {|pair| pair[0] === pair[1]}\n']], ['What is a Ruby equivalent for Python\'s "zip" builtin?'], 3], [(263623, 2), [['or perhaps more succinctly:'], ['-10000']], [[' a.zip(b).all? {|a,b| a === b }\n']], ['What is a Ruby equivalent for Python\'s "zip" builtin?'], 3], [(265814, 0), [['Putting it all together:'], ['In one line:']], [[' ^\\s*\n(?P<SERVER>\\S+)\\s+\n(?P<SERVERKEY>\\S+)\\s+\n(?P<COMMAND>\\S+)\\s+\n(?P<FOLDERPATH>/.*?)\\s+   # Slash not that important, but should start with non-whitespace\n(?P<RETENTION>\\d+)\\s+\n(?P<TRANSFERMODE>\\S+)\\s+\n(?P<OUTPUTPATH>[A-Z]:\\\\.*?\\\\)\\s+   # Could also support network paths\n(?P<LOGTO>NO|[A-Z]:\\\\.*?)\n(?:\n  \\s+(?P<MAXSIZE>\\d+)\n  (?:\n    \\s+(?P<OFFSET>\\d+)\n  )?\n)?\n\\s*$\n']], ['How do I process a string such as this using regular expressions?'], 3], [(265814, 1), [['In one line:'], ['Testing:']], [[' ^\\s*(?P<SERVER>\\S+)\\s+(?P<SERVERKEY>\\S+)\\s+(?P<COMMAND>\\S+)\\s+(?P<FOLDERPATH>/.*?)\\s+(?P<RETENTION>\\d+)\\s+(?P<TRANSFERMODE>\\S+)\\s+(?P<OUTPUTPATH>[A-Z]:\\\\.*?\\\\)\\s+(?P<LOGTO>NO|[A-Z]:\\\\.*?)(?:\\s+(?P<MAXSIZE>\\d+)(?:\\s+(?P<OFFSET>\\d+))?)?\\s*$\n']], ['How do I process a string such as this using regular expressions?'], 3], [(265814, 2), [['Testing:'], ['-10000']], [[' >>> import re\n>>> p = re.compile(r\'^(?P<SERVER>\\S+)\\s+(?P<SERVERKEY>\\S+)\\s+(?P<COMMAND>\\S+)\\s+(?P<FOLDERPATH>/.*?)\\s+(?P<RETENTION>\\d+)\\s+(?P<TRANSFERMODE>\\S+)\\s+(?P<OUTPUTPATH>[A-Z]:\\\\.*?\\\\)\\s+(?P<LOGTO>NO|[A-Z]:\\\\.*?)(?:\\s+(?P<MAXSIZE>\\d+)(?:\\s+(?P<OFFSET>\\d+))?)?\\s*$\',re.M)\n>>> data = r"""loveserver love copy /muffin* 20 bin C:\\Puppies\\ NO 256 300\n... loveserver love copy /muffin* 20 bin C:\\Puppies\\ NO 256\n... loveserver love copy /hats* 300 ascii C:\\Puppies\\no\\ C:\\log\\love.log 256"""\n>>> import pprint\n>>> for match in p.finditer(data):\n...   print pprint.pprint(match.groupdict())\n...\n{\'COMMAND\': \'copy\',\n \'FOLDERPATH\': \'/muffin*\',\n \'LOGTO\': \'NO\',\n \'MAXSIZE\': \'256\',\n \'OFFSET\': \'300\',\n \'OUTPUTPATH\': \'C:\\\\Puppies\\\\\',\n \'RETENTION\': \'20\',\n \'SERVER\': \'loveserver\',\n \'SERVERKEY\': \'love\',\n \'TRANSFERMODE\': \'bin\'}\n{\'COMMAND\': \'copy\',\n \'FOLDERPATH\': \'/muffin*\',\n \'LOGTO\': \'NO\',\n \'MAXSIZE\': \'256\',\n \'OFFSET\': None,\n \'OUTPUTPATH\': \'C:\\\\Puppies\\\\\',\n \'RETENTION\': \'20\',\n \'SERVER\': \'loveserver\',\n \'SERVERKEY\': \'love\',\n \'TRANSFERMODE\': \'bin\'}\n{\'COMMAND\': \'copy\',\n \'FOLDERPATH\': \'/hats*\',\n \'LOGTO\': \'C:\\\\log\\\\love.log\',\n \'MAXSIZE\': \'256\',\n \'OFFSET\': None,\n \'OUTPUTPATH\': \'C:\\\\Puppies\\\\no\\\\\',\n \'RETENTION\': \'300\',\n \'SERVER\': \'loveserver\',\n \'SERVERKEY\': \'love\',\n \'TRANSFERMODE\': \'ascii\'}\n>>>\n']], ['How do I process a string such as this using regular expressions?'], 3], [(265960, 0), [["From an efficiency perspective, you're not going to beat "], ["If speed isn't a worry, another option though is:"]], [[' s.translate(None, string.punctuation)\n']], ['Best way to strip punctuation from a string in Python'], 4], [(265960, 1), [["If speed isn't a worry, another option though is:"], ['Timing code:']], [[" exclude = set(string.punctuation)\ns = ''.join(ch for ch in s if ch not in exclude)\n"]], ['Best way to strip punctuation from a string in Python'], 4], [(265960, 2), [['Timing code:'], ['This gives the following results:']], [[' import re, string, timeit\n\ns = "string. With. Punctuation"\nexclude = set(string.punctuation)\ntable = string.maketrans("","")\nregex = re.compile(\'[%s]\' % re.escape(string.punctuation))\n\ndef test_set(s):\n    return \'\'.join(ch for ch in s if ch not in exclude)\n\ndef test_re(s):  # From Vinko\'s solution, with fix.\n    return regex.sub(\'\', s)\n\ndef test_trans(s):\n    return s.translate(table, string.punctuation)\n\ndef test_repl(s):  # From S.Lott\'s solution\n    for c in string.punctuation:\n        s=s.replace(c,"")\n    return s\n\nprint "sets      :",timeit.Timer(\'f(s)\', \'from __main__ import s,test_set as f\').timeit(1000000)\nprint "regex     :",timeit.Timer(\'f(s)\', \'from __main__ import s,test_re as f\').timeit(1000000)\nprint "translate :",timeit.Timer(\'f(s)\', \'from __main__ import s,test_trans as f\').timeit(1000000)\nprint "replace   :",timeit.Timer(\'f(s)\', \'from __main__ import s,test_repl as f\').timeit(1000000)\n']], ['Best way to strip punctuation from a string in Python'], 4], [(265960, 3), [['This gives the following results:'], ['-10000']], [[' sets      : 19.8566138744\nregex     : 6.86155414581\ntranslate : 2.12455511093\nreplace   : 28.4436721802\n']], ['Best way to strip punctuation from a string in Python'], 4], [(266648, 0), [['If you need more than looking at extension, one way would be to read the JPEG header, and check that it matches valid data.  The format for this is:'], ['so a quick recogniser would be:']], [[' Start Marker  | JFIF Marker | Header Length | Identifier\n0xff, 0xd8    | 0xff, 0xe0  |    2-bytes    | "JFIF\\0"\n']], ['Python: Check if uploaded file is jpg'], 3], [(266648, 1), [['so a quick recogniser would be:'], ["However this won't catch any bad data in the body.  If you want a more robust check, you could try loading it with  PIL .  eg:"]], [[" def is_jpg(filename):\n    data = open(filename,'rb').read(11)\n    if data[:4] != '\\xff\\xd8\\xff\\xe0': return False\n    if data[6:] != 'JFIF\\0': return False\n    return True\n"]], ['Python: Check if uploaded file is jpg'], 3], [(266648, 2), [["However this won't catch any bad data in the body.  If you want a more robust check, you could try loading it with  PIL .  eg:"], ['-10000']], [[" from PIL import Image\ndef is_jpg(filename):\n    try:\n        i=Image.open(filename)\n        return i.format =='JPEG'\n    except IOError:\n        return False\n"]], ['Python: Check if uploaded file is jpg'], 3], [(268272, 0), [['You can use  operator.itemgetter  for that:'], ["Please note that if you were to have another key-value pair 'd': 3000 that this method will only return  one  of the  two  even though they both have the maximum value. "]], [[" import operator\nstats = {'a':1000, 'b':3000, 'c': 100}\nmax(stats.iteritems(), key=operator.itemgetter(1))[0]\n"]], ['Getting key with maximum value in dictionary?'], 2], [(268272, 1), [["Please note that if you were to have another key-value pair 'd': 3000 that this method will only return  one  of the  two  even though they both have the maximum value. "], ['-10000']], [[" >>> import operator\n>>> stats = {'a':1000, 'b':3000, 'c': 100, 'd':3000}\n>>> max(stats.iteritems(), key=operator.itemgetter(1))[0]\n'b' \n"]], ['Getting key with maximum value in dictionary?'], 2], [(268629, 0), [['I should start by saying that "I probably wouldn\'t do this myself, but I have in the past". The serve_forever (from SocketServer.py) method looks like this:'], ['You could replace (in subclass)  while 1  with  while self.should_be_running , and modify that value from a different thread. Something like:']], [[' def serve_forever(self):\n    """Handle one request at a time until doomsday."""\n    while 1:\n        self.handle_request()\n']], ['How to stop BaseHTTPServer.serve_forever() in a BaseHTTPRequestHandler subclass?'], 3], [(268629, 1), [['You could replace (in subclass)  while 1  with  while self.should_be_running , and modify that value from a different thread. Something like:'], ['Edit: I dug up the actual code I used at the time:']], [[' def stop_serving_forever(self):\n    """Stop handling requests"""\n    self.should_be_running = 0\n    # Make a fake request to the server, to really force it to stop.\n    # Otherwise it will just stop on the next request.\n    # (Exercise for the reader.)\n    self.make_a_fake_request_to_myself()\n']], ['How to stop BaseHTTPServer.serve_forever() in a BaseHTTPRequestHandler subclass?'], 3], [(268629, 2), [['Edit: I dug up the actual code I used at the time:'], ['-10000']], [[" class StoppableRPCServer(SimpleXMLRPCServer.SimpleXMLRPCServer):\n\n    stopped = False\n    allow_reuse_address = True\n\n    def __init__(self, *args, **kw):\n        SimpleXMLRPCServer.SimpleXMLRPCServer.__init__(self, *args, **kw)\n        self.register_function(lambda: 'OK', 'ping')\n\n    def serve_forever(self):\n        while not self.stopped:\n            self.handle_request()\n\n    def force_stop(self):\n        self.server_close()\n        self.stopped = True\n        self.create_dummy_request()\n\n    def create_dummy_request(self):\n        server = xmlrpclib.Server('http://%s:%s' % self.server_address)\n        server.ping()\n"]], ['How to stop BaseHTTPServer.serve_forever() in a BaseHTTPRequestHandler subclass?'], 3], [(270648, 0), [['For example:'], ["Here's an example of successfully accessing methods on a root window from some other object:"]], [[' from tkinter import *\n\ndef doFoo(*args):\n    print("Hello, world")\n\nroot = Tk()\nroot.bind("<<Foo>>", doFoo)\n\n# some time later, inject the "<<Foo>>" virtual event at the\n# tail of the event queue\nroot.event_generate("<<Foo>>", when="tail")\n']], ['Tkinter: invoke event in main loop'], 2], [(270648, 1), [["Here's an example of successfully accessing methods on a root window from some other object:"], ['-10000']], [[' from tkinter import *\n\nclass myClass:\n    def __init__(self, root):\n        print("root background is %s" % root.cget("background"))\n\nroot = Tk()\nnewObj = myClass(root)\n']], ['Tkinter: invoke event in main loop'], 2], [(270745, 0), [["Use the  netifaces  module.  Because networking is complex, using netifaces can be a little tricky, but here's how to do what you want:"], ['This can be made a little more readable like this:']], [[" >>> import netifaces\n>>> netifaces.interfaces()\n['lo', 'eth0']\n>>> netifaces.ifaddresses('eth0')\n{17: [{'broadcast': 'ff:ff:ff:ff:ff:ff', 'addr': '00:11:2f:32:63:45'}], 2: [{'broadcast': '10.0.0.255', 'netmask': '255.255.255.0', 'addr': '10.0.0.2'}], 10: [{'netmask': 'ffff:ffff:ffff:ffff::', 'addr': 'fe80::211:2fff:fe32:6345%eth0'}]}\n>>> for interface in netifaces.interfaces():\n...   print netifaces.ifaddresses(interface)[netifaces.AF_INET]\n...\n[{'peer': '127.0.0.1', 'netmask': '255.0.0.0', 'addr': '127.0.0.1'}]\n[{'broadcast': '10.0.0.255', 'netmask': '255.255.255.0', 'addr': '10.0.0.2'}]\n>>> for interface in netifaces.interfaces():\n...   for link in netifaces.ifaddresses(interface)[netifaces.AF_INET]:\n...     print link['addr']\n...\n127.0.0.1\n10.0.0.2\n"]], ['How do I determine all of my IP addresses when I have multiple NICs?'], 2], [(270745, 1), [['This can be made a little more readable like this:'], ["If you want IPv6 addresses, use  AF_INET6  instead of  AF_INET .  If you're wondering why  netifaces  uses lists and dictionaries all over the place, it's because a single computer can have multiple NICs, and each NIC can have multiple addresses, and each address has its own set of options."]], [[" from netifaces import interfaces, ifaddresses, AF_INET\n\ndef ip4_addresses():\n    ip_list = []\n    for interface in interfaces():\n        for link in ifaddresses(interface)[AF_INET]:\n            ip_list.append(link['addr'])\n    return ip_list\n"]], ['How do I determine all of my IP addresses when I have multiple NICs?'], 2], [(271488, 0), [['For example, the inevitable Hello World...'], ['can be exposed to Python by writing a Boost.Python wrapper:']], [[' char const* greet()\n{\n  return "hello, world";\n}\n']], ['Linking languages'], 3], [(271488, 1), [['can be exposed to Python by writing a Boost.Python wrapper:'], ["That's it. We're done. We can now build this as a shared library. The resulting DLL is now visible to Python. Here's a sample Python session:"]], [[' #include <boost/python.hpp>\n\nBOOST_PYTHON_MODULE(hello_ext)\n{\n  using namespace boost::python;\n  def("greet", greet);\n}\n']], ['Linking languages'], 3], [(271488, 2), [["That's it. We're done. We can now build this as a shared library. The resulting DLL is now visible to Python. Here's a sample Python session:"], ['(example taken from boost.org)']], [[' >>> import hello_ext\n>>> print hello.greet()\nhello, world\n']], ['Linking languages'], 3], [(273937, 0), [['You need an event handler in your bind expression'], ['needs to be changed to:']], [[" self.bind(wx.EVT_MENU, subPanel(None, -1, 'TEST'),id=1)\n"]], ['How do I Create an instance of a class in another class in Python'], 4], [(273937, 1), [['needs to be changed to:'], ['where your event handler responds to the event and instantiates the subpanel:']], [[' self.bind(wx.EVT_MENU, <event handler>, <id of menu item>)\n']], ['How do I Create an instance of a class in another class in Python'], 4], [(273937, 2), [['where your event handler responds to the event and instantiates the subpanel:'], ['Edit: Here is some code that will do what I think that you are asking:']], [[" def OnMenuItem(self, evt): #don't forget the evt\n    sp = SubPanel(self, wx.ID_ANY, 'TEST')\n    #I assume you will add it to a sizer\n    #if you aren't... you should\n    test_sizer.Add(sp, 1, wx.EXPAND)\n    #force the frame to refresh the sizers:\n    self.Layout()\n"]], ['How do I Create an instance of a class in another class in Python'], 4], [(273937, 3), [['Edit: Here is some code that will do what I think that you are asking:'], ['-10000']], [[' #!usr/bin/env python\n\nimport wx\n\nclass TestFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        wx.Frame.__init__(self, parent, *args, **kwargs)\n        framesizer = wx.BoxSizer(wx.VERTICAL)\n        mainpanel = MainPanel(self, wx.ID_ANY)\n        self.subpanel = SubPanel(self, wx.ID_ANY)\n        self.subpanel.Hide()\n        framesizer.Add(mainpanel, 1, wx.EXPAND)\n        framesizer.Add(self.subpanel, 1, wx.EXPAND)\n        self.SetSizerAndFit(framesizer)\n\nclass MainPanel(wx.Panel):\n    def __init__(self, parent, *args, **kwargs):\n        wx.Panel.__init__(self, parent, *args, **kwargs)\n        panelsizer = wx.BoxSizer(wx.VERTICAL)\n        but = wx.Button(self, wx.ID_ANY, "Add")\n        self.Bind(wx.EVT_BUTTON, self.OnAdd, but)\n        self.panel_shown = False\n        panelsizer.Add(but, 0)\n        self.SetSizer(panelsizer)\n\n    def OnAdd(self, evt):\n        if not self.panel_shown:\n            self.GetParent().subpanel.Show()\n            self.GetParent().Fit()\n            self.GetParent().Layout()\n            self.panel_shown = True\n        else:\n            self.GetParent().subpanel.Hide()\n            self.GetParent().Fit()\n            self.GetParent().Layout()\n            self.panel_shown = False\n\nclass SubPanel(wx.Panel):\n    def __init__(self, parent, *args, **kwargs):\n        wx.Panel.__init__(self, parent, *args, **kwargs)\n        spsizer = wx.BoxSizer(wx.VERTICAL)\n        text = wx.StaticText(self, wx.ID_ANY, label=\'I am a subpanel\')\n        spsizer.Add(text, 1, wx.EXPAND)\n        self.SetSizer(spsizer)\n\nif __name__ == \'__main__\':\n    app = wx.App()\n    frame = TestFrame(None, wx.ID_ANY, "Test Frame")\n    frame.Show()\n    app.MainLoop()\n']], ['How do I Create an instance of a class in another class in Python'], 4], [(275174, 0), [['Given the Django use case, there are two answers to this.  Here is its  django.utils.html.escape  function, for reference:'], ["To reverse this, the Cheetah function described in Jake's answer should work, but is missing the single-quote.  This version includes an updated tuple, with the order of replacement reversed to avoid symmetric problems:"]], [[' def escape(html):\n    """Returns the given HTML with ampersands, quotes and carets encoded."""\n    return mark_safe(force_unicode(html).replace(\'&\', \'&amp;\').replace(\'<\', \'&l\nt;\').replace(\'>\', \'&gt;\').replace(\'"\', \'&quot;\').replace("\'", \'&#39;\'))\n']], ['How do I perform HTML decoding/encoding using Python/Django?'], 4], [(275174, 1), [["To reverse this, the Cheetah function described in Jake's answer should work, but is missing the single-quote.  This version includes an updated tuple, with the order of replacement reversed to avoid symmetric problems:"], ['This, however, is not a general solution; it is only appropriate for strings encoded with  django.utils.html.escape .  More generally, it is a good idea to stick with the standard library:']], [[' def html_decode(s):\n    """\n    Returns the ASCII decoded version of the given HTML string. This does\n    NOT remove normal HTML tags like <p>.\n    """\n    htmlCodes = (\n            ("\'", \'&#39;\'),\n            (\'"\', \'&quot;\'),\n            (\'>\', \'&gt;\'),\n            (\'<\', \'&lt;\'),\n            (\'&\', \'&amp;\')\n        )\n    for code in htmlCodes:\n        s = s.replace(code[1], code[0])\n    return s\n\nunescaped = html_decode(my_string)\n']], ['How do I perform HTML decoding/encoding using Python/Django?'], 4], [(275174, 2), [['This, however, is not a general solution; it is only appropriate for strings encoded with  django.utils.html.escape .  More generally, it is a good idea to stick with the standard library:'], ['With Django, escaping only occurs during template rendering; so to prevent escaping you just tell the templating engine not to escape your string.  To do that, use one of these options in your template:']], [[' # Python 2.x:\nimport HTMLParser\nhtml_parser = HTMLParser.HTMLParser()\nunescaped = html_parser.unescape(my_string)\n\n# Python 3.x:\nimport html.parser\nhtml_parser = html.parser.HTMLParser()\nunescaped = html_parser.unescape(my_string)\n']], ['How do I perform HTML decoding/encoding using Python/Django?'], 4], [(275174, 3), [['With Django, escaping only occurs during template rendering; so to prevent escaping you just tell the templating engine not to escape your string.  To do that, use one of these options in your template:'], ['-10000']], [[' {{ context_var|safe }}\n{% autoescape off %}\n    {{ context_var }}\n{% endautoescape %}\n']], ['How do I perform HTML decoding/encoding using Python/Django?'], 4], [(275683, 0), [['...'], ["If for some reason you can't use the above, you can always use something like BeautifulSoup to get the cover url."]], [[' import imdb\n\naccess = imdb.IMDb()\nmovie = access.get_movie(1132626)\n\nprint "title: %s year: %s" % (movie[\'title\'], movie[\'year\'])\nprint "Cover url: %s" % movie[\'cover url\']\n']], ['How do you get a thumbnail of a movie using IMDbPy?'], 2], [(275683, 1), [["If for some reason you can't use the above, you can always use something like BeautifulSoup to get the cover url."], ['-10000']], [[' from BeautifulSoup import BeautifulSoup\nimport imdb\n\naccess = imdb.IMDb()\nmovie = access.get_movie(1132626)\n\npage = urllib2.urlopen(access.get_imdbURL(movie))\nsoup = BeautifulSoup(page)\ncover_div = soup.find(attrs={"class" : "photo"})\ncover_url = (photo_div.find(\'img\'))[\'src\']\nprint "Cover url: %s" % cover_url\n']], ['How do you get a thumbnail of a movie using IMDbPy?'], 2], [(276286, 0), [['-10000'], ["the browser will get the 301, and go to  /yournewpage.html  as expected. the other answer is technically correct, in that python is not handling the redirection per se, the browser is. this is what's happening under the hood:"]], [["    from django import http\n\n   return http.HttpResponsePermanentRedirect('/yournewpage.html')\n"]], ['How to show the visitor a moved web page AND return a 301 redirect HTTP response status code in Django?'], 2], [(276286, 1), [["the browser will get the 301, and go to  /yournewpage.html  as expected. the other answer is technically correct, in that python is not handling the redirection per se, the browser is. this is what's happening under the hood:"], ['-10000']], [[' Browser             Python         HTTP\n   ------------------->            GET /youroldpage.html HTTP/1.1\n\n   <-------------------            HTTP/1.1 301 Moved Permanently\n                                   Location: /yournewpage.html\n   ------------------->            GET /yournewpage.html HTTP/1.1\n']], ['How to show the visitor a moved web page AND return a 301 redirect HTTP response status code in Django?'], 2], [(277922, 0), [['functools.partial  returns a callable wrapping a function with some or all of the arguments frozen.'], ['-10000']], [[' import sys\nimport functools\n\nprint_hello = functools.partial(sys.stdout.write, "Hello world\\n")\n\nprint_hello()\n']], ['Python Argument Binders'], 3], [(277922, 1), [['-10000'], ['The above usage is equivalent to the following  lambda .']], [[' Hello world\n']], ['Python Argument Binders'], 3], [(277922, 2), [['The above usage is equivalent to the following  lambda .'], ['-10000']], [[' print_hello = lambda *a, **kw: sys.stdout.write("Hello world\\n", *a, **kw)\n']], ['Python Argument Binders'], 3], [(277965, 0), [['To avoid specifying the tag and handler in the dict, you could just use a handler class with methods named to match the type.  Eg'], ['Usage:']], [[' class  MyHandler(object):\n    def handle_extractTitle(self, dom):\n        # do something\n\n    def handle_extractMetaTags(self, dom):\n        # do something\n\n    def handle(self, type, dom):\n        func = getattr(self, \'handle_%s\' % type, None)\n        if func is None:\n            raise Exception("No handler for type %r" % type)\n        return func(dom)\n']], ['Dictionary or If statements, Jython'], 3], [(277965, 1), [['Usage:'], ["When you have multiple arguments, just change the handle function to take those arguments and pass them through to the function.  If you want to make it more generic (so you don't have to change both the handler functions and the handle method when you change the argument signature), you can use the *args and **kwargs syntax to pass through all received arguments.  The handle method then becomes:"]], [["  handler = MyHandler()\n handler.handle('extractTitle', dom)\n"]], ['Dictionary or If statements, Jython'], 3], [(277965, 2), [["When you have multiple arguments, just change the handle function to take those arguments and pass them through to the function.  If you want to make it more generic (so you don't have to change both the handler functions and the handle method when you change the argument signature), you can use the *args and **kwargs syntax to pass through all received arguments.  The handle method then becomes:"], ['-10000']], [[' def handle(self, type, *args, **kwargs):\n    func = getattr(self, \'handle_%s\' % type, None)\n    if func is None:\n        raise Exception("No handler for type %r" % type)\n    return func(*args, **kwargs)\n']], ['Dictionary or If statements, Jython'], 3], [(279561, 0), [['A bit reversed, but this should work:'], ['If you want the counter initialization code at the top instead of the bottom, you can create a decorator:']], [[' def foo():\n    foo.counter += 1\n    print "Counter is %d" % foo.counter\nfoo.counter = 0\n']], ['What is the Python equivalent of static variables inside a function?'], 4], [(279561, 1), [['If you want the counter initialization code at the top instead of the bottom, you can create a decorator:'], ['Then use the code like this:']], [[' def static_var(varname, value):\n    def decorate(func):\n        setattr(func, varname, value)\n        return func\n    return decorate\n']], ['What is the Python equivalent of static variables inside a function?'], 4], [(279561, 2), [['Then use the code like this:'], ['EDIT (thanks to  ony ): This looks even nicer:']], [[' @static_var("counter", 0)\ndef foo():\n    foo.counter += 1\n    print "Counter is %d" % foo.counter\n']], ['What is the Python equivalent of static variables inside a function?'], 4], [(279561, 3), [['EDIT (thanks to  ony ): This looks even nicer:'], ['-10000']], [[' def static_vars(**kwargs):\n    def decorate(func):\n        for k in kwargs:\n            setattr(func, k, kwargs[k])\n        return func\n    return decorate\n\n@static_vars(counter=0)\ndef foo():\n    foo.counter += 1\n    print "Counter is %d" % foo.counter\n']], ['What is the Python equivalent of static variables inside a function?'], 4], [(279782, 0), [['It\'s easier to get to the "real" class through generic relations, so here is the implementation for B. We can\'t have that \'food\' field in Person, Cat or Cow, or we\'ll run into the same problems. So we\'ll create an intermediary "FoodConsumer" model. We\'ll have to write additional validation tests if we don\'t want more than one food for an instance.'], ["Now, to demonstrate it let's just write this working  doctest :"]], [[' from django.db import models\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.contenttypes import generic\n\nclass Food(models.Model):\n     """Food, by name."""\n     name = models.CharField(max_length=25)\n\n# ConsumedFood has a foreign key to Food, and a "eaten_by" generic relation\nclass ConsumedFood(models.Model):\n    food = models.ForeignKey(Food, related_name="eaters")\n    content_type = models.ForeignKey(ContentType, null=True)\n    object_id = models.PositiveIntegerField(null=True)\n    eaten_by = generic.GenericForeignKey(\'content_type\', \'object_id\')\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    birth_date = models.DateField()\n    address = models.CharField(max_length=100)\n    city = models.CharField(max_length=50)\n    foods = generic.GenericRelation(ConsumedFood)\n\nclass Cat(models.Model):\n    name = models.CharField(max_length=50)\n    foods = generic.GenericRelation(ConsumedFood)    \n\nclass Cow(models.Model):\n    farmer = models.ForeignKey(Person)\n    foods = generic.GenericRelation(ConsumedFood)    \n']], ['How can one get the set of all classes with reverse relationships for a model in Django?'], 2], [(279782, 1), [["Now, to demonstrate it let's just write this working  doctest :"], ['-10000']], [[' """\n>>> from models import *\n\nCreate some food records\n\n>>> weed = Food(name="weed")\n>>> weed.save()\n\n>>> burger = Food(name="burger")\n>>> burger.save()\n\n>>> pet_food = Food(name="Pet food")\n>>> pet_food.save()\n\nJohn the farmer likes burgers\n\n>>> john = Person(first_name="John", last_name="Farmer", birth_date="1960-10-12")\n>>> john.save()\n>>> john.foods.create(food=burger)\n<ConsumedFood: ConsumedFood object>\n\nWilma the cow eats weed\n\n>>> wilma = Cow(farmer=john)\n>>> wilma.save()\n>>> wilma.foods.create(food=weed)\n<ConsumedFood: ConsumedFood object>\n\nFelix the cat likes pet food\n\n>>> felix = Cat(name="felix")\n>>> felix.save()\n>>> pet_food.eaters.create(eaten_by=felix)\n<ConsumedFood: ConsumedFood object>\n\nWhat food john likes again ?\n>>> john.foods.all()[0].food.name\nu\'burger\'\n\nWho\'s getting pet food ?\n>>> living_thing = pet_food.eaters.all()[0].eaten_by\n>>> isinstance(living_thing,Cow)\nFalse\n>>> isinstance(living_thing,Cat)\nTrue\n\nJohn\'s farm is in fire ! He looses his cow.\n>>> wilma.delete()\n\nJohn is a lot poorer right now\n>>> john.foods.clear()\n>>> john.foods.create(food=pet_food)\n<ConsumedFood: ConsumedFood object>\n\nWho\'s eating pet food now ?\n>>> for consumed_food in pet_food.eaters.all():\n...    consumed_food.eaten_by\n<Cat: Cat object>\n<Person: Person object>\n\nGet the second pet food eater\n>>> living_thing = pet_food.eaters.all()[1].eaten_by\n\nTry to find if it\'s a person and reveal his name\n>>> if isinstance(living_thing,Person): living_thing.first_name\nu\'John\'\n\n"""\n']], ['How can one get the set of all classes with reverse relationships for a model in Django?'], 2], [(280207, 0), [['This will get you the contents of the message'], ['I tried with a different MIME email because what you pasted seems malformed, hopefully it got malformed when you edited it.']], [[' self.currentEmailParsedInstance.get_payload()\n']], ['email body from a parsed email object in jython'], 2], [(280207, 1), [['I tried with a different MIME email because what you pasted seems malformed, hopefully it got malformed when you edited it.'], ['parts will contain all parts of the multipart message, you can check their content types as shown and get only the text/plain ones, for instance.']], [[" >>> parser = email.parser.Parser()\n>>> message = parser.parse(open('/home/vinko/jlm.txt','r'))\n>>> message.is_multipart()\nTrue\n>>> parts = message.get_payload()\n>>> len(parts)\n2\n>>> parts[0].get_content_type()\n'text/plain'\n>>> parts[1].get_content_type()\n'message/rfc822'\n>>> parts[0].get_payload()\n'Message Text'\n"]], ['email body from a parsed email object in jython'], 2], [(280243, 0), [["Here is some list functions based on  Martin v. Löwis's representation :"], ['a node that contains a cargo object and a reference to a linked list.']], [[' cons   = lambda el, lst: (el, lst)\nmklist = lambda *args: reduce(lambda lst, el: cons(el, lst), reversed(args), None)\ncar = lambda lst: lst[0] if lst else lst\ncdr = lambda lst: lst[1] if lst else lst\nnth = lambda n, lst: nth(n-1, cdr(lst)) if n > 0 else car(lst)\nlength  = lambda lst, count=0: length(cdr(lst), count+1) if lst else count\nbegin   = lambda *args: args[-1]\ndisplay = lambda lst: begin(w("%s " % car(lst)), display(cdr(lst))) if lst else w("nil\\n")\n']], ['Python Linked List'], 2], [(280243, 1), [['a node that contains a cargo object and a reference to a linked list.'], ['-10000']], [[' class Node: \n  def __init__(self, cargo=None, next=None): \n    self.car = cargo \n    self.cdr = next    \n  def __str__(self): \n    return str(self.car)\n\ndef display(lst):\n  if lst:\n    w("%s " % lst)\n    display(lst.cdr)\n  else:\n    w("nil\\n")\n']], ['Python Linked List'], 2], [(282393, 0), [['With:'], ['Without:']], [[' decorator(original_function)()\n']], ['Python decorating functions before call'], 2], [(282393, 1), [['Without:'], ['A decorator is just a function which takes a function as an argument and returns another one. The @ syntax is totally optional. Perhaps a sift through some  documentation  might help clarify things.']], [[' original_function()\n']], ['Python decorating functions before call'], 2], [(283707, 0), [['-10000'], ["Adding ChrisJY's idea to the example"]], [[' $ ls -la chardet-1.0.1.tgz\n-rwxr-xr-x 1 vinko vinko 179218 2008-10-20 17:49 chardet-1.0.1.tgz\n$ python\nPython 2.5.1 (r251:54863, Jul 31 2008, 22:53:39)\n[GCC 4.1.2 (Ubuntu 4.1.2-0ubuntu4)] on linux2\nType "help", "copyright", "credits" or "license" for more information.\n>>> f = open(\'chardet-1.0.1.tgz\',\'rb\')\n>>> f.seek(0,2)\n>>> f.tell()\n179218L\n']], ['Size of an open file object'], 2], [(283707, 1), [["Adding ChrisJY's idea to the example"], ['-10000']], [[' >>> import os\n>>> os.fstat(f.fileno()).st_size\n179218L\n>>>        \n']], ['Size of an open file object'], 2], [(285061, 0), [['-10000'], ['For help on it:']], [[" setattr(x, attr, 'magic')\n"]], ['How do you programmatically set an attribute?'], 2], [(285061, 1), [['For help on it:'], ['Edit: However, you should note (as pointed out in comment) that you can\'t do that to a "pure" instance of object. But it is likely you have a simple subclass of object where it will work fine. I would strongly urge the O.P. to never make instances of object like that.']], [[" >>> help(setattr)\nHelp on built-in function setattr in module __builtin__:\n\nsetattr(...)\n    setattr(object, name, value)\n\n    Set a named attribute on an object; setattr(x, 'y', v) is equivalent to\n    ``x.y = v''.\n"]], ['How do you programmatically set an attribute?'], 2], [(285408, 0), [['The nearest equivalent is probably the  dateutil  module.  Usage is:'], ['Using the fuzzy parameter should ignore extraneous text.  ie']], [[' >>> from dateutil.parser import parse\n>>> parse("Wed, Nov 12")\ndatetime.datetime(2008, 11, 12, 0, 0)\n']], ['Python module to extract probable dates from strings?'], 2], [(285408, 1), [['Using the fuzzy parameter should ignore extraneous text.  ie'], ['-10000']], [[' >>> parse("the date was the 1st of December 2006 2:30pm", fuzzy=True)\ndatetime.datetime(2006, 12, 1, 14, 30)\n']], ['Python module to extract probable dates from strings?'], 2], [(286558, 0), [['http://www.djangosnippets.org/snippets/177/'], ['To be used in templates:']], [[' @register.filter\ndef in_list(value,arg):\n    return value in arg\n']], ['Django multiselect checkboxes'], 2], [(286558, 1), [['To be used in templates:'], ['Not very smart, but it works.']], [[' The item is \n{% if item|in_list:list %} \n    in list \n{% else %} \n    not in list\n{% endif %}\n']], ['Django multiselect checkboxes'], 2], [(286614, 0), [['A listener ( ovpipe ) object holds an event handle, and waiting for a message with possible other events involves calling  win32event.WaitForMultipleObjects .'], ['Here is part of the python overlapped listener class:']], [[' rc = win32event.WaitForMultipleObjects(\n    eventlist,    # Objects to wait for.\n    0,            # Wait for one object\n    timeout)      # timeout in milli-seconds.\n']], ["What's the best way to transfer data from python to another application in windows?"], 2], [(286614, 1), [['Here is part of the python overlapped listener class:'], ['-10000']], [[' import win32event\nimport pywintypes\nimport win32file\nimport win32pipe\n\nclass ovpipe:\n"Overlapped I/O named pipe class"\ndef __init__(self):\n    self.over=pywintypes.OVERLAPPED()\n    evt=win32event.CreateEvent(None,1,0,None)\n    self.over.hEvent=evt\n    self.pname=\'mypipe\'\n    self.hpipe = win32pipe.CreateNamedPipe(\n        r\'\\\\.\\pipe\\mypipe\',             # pipe name \n        win32pipe.PIPE_ACCESS_DUPLEX|   # read/write access\n        win32file.FILE_FLAG_OVERLAPPED,\n        win32pipe.PIPE_TYPE_MESSAGE|    # message-type pipe \n        win32pipe.PIPE_WAIT,            # blocking mode \n        1,                              # number of instances \n        512,                            # output buffer size \n        512,                            # input buffer size \n        2000,                           # client time-out\n        None)                           # no security attributes\n    self.buffer = win32file.AllocateReadBuffer(512)\n    self.state=\'noconnected\'\n    self.chstate()\n\ndef execmsg(self):\n    "Translate the received message"\n    pass\n\ndef chstate(self):\n    "Change the state of the pipe depending on current state"\n    if self.state==\'noconnected\':\n        win32pipe.ConnectNamedPipe(self.hpipe,self.over)\n        self.state=\'connectwait\'\n        return -6\n\n    elif self.state==\'connectwait\':\n        j,self.strbuf=win32file.ReadFile(self.hpipe,self.buffer,self.over)\n        self.state=\'readwait\'\n        return -6\n\n    elif self.state==\'readwait\':\n        size=win32file.GetOverlappedResult(self.hpipe,self.over,1)\n        self.msg=self.strbuf[:size]\n        ret=self.execmsg()\n        self.state = \'noconnected\'\n        win32pipe.DisconnectNamedPipe(self.hpipe)\n        return ret\n']], ["What's the best way to transfer data from python to another application in windows?"], 2], [(287757, 0), [["ConfigParser gives you a dict-like structure for each section, so when you call parser.items(section), I'm expecting similar output to dict.items(), which is just a list of key/value tuples. I would never expect to see something like:"], ['Not to mention, how would you expect the following to behave?:']], [[" [('spam', 'eggs'), ('spam', 'ham')]\n"]], ["Python's ConfigParser unique keys per section"], 4], [(287757, 1), [['Not to mention, how would you expect the following to behave?:'], ['If you want to store multiple values for the same key, I would suggest something like this in your config file:']], [[" parser.get('Some Section', 'spam')\n"]], ["Python's ConfigParser unique keys per section"], 4], [(287757, 2), [['If you want to store multiple values for the same key, I would suggest something like this in your config file:'], ['And this in your code:']], [[' [Some Section]\nspam: eggs, ham\n']], ["Python's ConfigParser unique keys per section"], 4], [(287757, 3), [['And this in your code:'], ["Of course, this will only work for values that don't contain commas themselves or handle quoting. For that, you should employ a more advanced technique (see  this  and  this )."]], [[" spam_values = [v.strip() for v in parser.get('Some Section', 'spam').split(',')]\n"]], ["Python's ConfigParser unique keys per section"], 4], [(292167, 0), [["I don't think your regex is doing what you want."], ['If you are trying to capture the href, you might try something like this:']], [[' <a\\s*href=[\'|"](http:\\/\\/(.*?)\\S[\'|"]>\n']], ['excluding characters in \\S regex match'], 2], [(292167, 1), [['If you are trying to capture the href, you might try something like this:'], ['This uses the .*? (non-greedy match anything) to allow for other attributes (target, title, etc.).  It matches an href that begins and ends with either a single or double quote (it does not distinguish, and allows the href to open with one and close with the other).']], [[' <a .*?+href=[\'"](http:\\/\\/.*?)[\'"].*?>\n']], ['excluding characters in \\S regex match'], 2], [(295028, 0), [['test.ini:'], ['python:']], [[' [head]\nvar: self.post.id\n']], ['Inplace substitution from ConfigParser'], 2], [(295028, 1), [['python:'], ['-10000']], [[" import ConfigParser\n\nclass Test:\n  def __init__(self):\n      self.post = TestPost(5)\n  def getPost(self):\n      config = ConfigParser.ConfigParser()\n      config.read('/path/to/test.ini')\n      newvar = config.get('head', 'var')\n      print eval(newvar) \n\nclass TestPost:\n  def __init__(self, id):\n      self.id = id\n\ntest = Test()\ntest.getPost()   # prints 5\n"]], ['Inplace substitution from ConfigParser'], 2], [(295438, 0), [["Another simple approach is to have your test override urllib's  urlopen()  function.  For example, if your module has"], ['You could define your test like this:']], [[' import urllib\n\ndef some_function_that_uses_urllib():\n    ...\n    urllib.urlopen()\n    ...\n']], ['How can one mock/stub python module like urllib'], 2], [(295438, 1), [['You could define your test like this:'], ['Then, when your tests invoke functions in  mymodule ,  dummy_urlopen()  will be called instead of the real  urlopen() .  Dynamic languages like Python make it super easy to stub out methods and classes for testing.']], [[' import mymodule\n\ndef dummy_urlopen(url):\n    ...\n\nmymodule.urllib.urlopen = dummy_urlopen\n']], ['How can one mock/stub python module like urllib'], 2], [(296055, 0), [['Update:  The first response( below) does not accept parameters. So put this snippet at the end of the ipy_user_conf.py file ( it is in your home directory ).'], ['Before update: \nDoes it has to be %magic?\nYou can use the macro and store magic to reproduce this behavior without the magic %.']], [[' def ed_xed(self,arg):\n    ip = self.api\n    return ip.magic.im_class.magic_edit(ip.IP," -x %s "%arg)\n\nip.expose_magic(\'xed\',ed_xed)\n']], ['In IPython how do I create aliases for %magics?'], 2], [(296055, 1), [['Before update: \nDoes it has to be %magic?\nYou can use the macro and store magic to reproduce this behavior without the magic %.'], ['for magic alias from the documentation ( %magic? ):']], [[' In [5]: %edit -x\nIn [6]: macro xed 5\nIn [7]: store xed\nIn [8]: xed\n']], ['In IPython how do I create aliases for %magics?'], 2], [(296499, 0), [['Adapted version of  the script  is:'], ['Example:']], [[' #!/usr/bin/env python\nfrom __future__ import with_statement\nfrom contextlib import closing\nfrom zipfile import ZipFile, ZIP_DEFLATED\nimport os\n\ndef zipdir(basedir, archivename):\n    assert os.path.isdir(basedir)\n    with closing(ZipFile(archivename, "w", ZIP_DEFLATED)) as z:\n        for root, dirs, files in os.walk(basedir):\n            #NOTE: ignore empty directories\n            for fn in files:\n                absfn = os.path.join(root, fn)\n                zfn = absfn[len(basedir)+len(os.sep):] #XXX: relative path\n                z.write(absfn, zfn)\n\nif __name__ == \'__main__\':\n    import sys\n    basedir = sys.argv[1]\n    archivename = sys.argv[2]\n    zipdir(basedir, archivename)\n']], ['How do I zip the contents of a folder using python (version 2.5)?'], 2], [(296499, 1), [['Example:'], ["It creates  'C:\\zipdir\\test.zip'  archive with the contents of the  'c:\\tmp\\test'  directory."]], [[' C:\\zipdir> python -mzipdir c:\\tmp\\test test.zip\n']], ['How do I zip the contents of a folder using python (version 2.5)?'], 2], [(297383, 0), [["The normal way to do it would be to just have multiple class definitions for each possible exclude list.  But if you want the form itself to be dynamic, you'll have to create a class definition on the fly.  Something like:"], ["UPDATE :  I just revisited this post and thought I'd post a little more idiomatic way to handle a dynamic class:"]], [[" def get_form(exclude_list):\n    class MyForm(ModelForm):\n        class Meta:\n            model = Passenger\n            exclude = exclude_list\n    return MyForm\n\nform_class = get_form(('field1', 'field2'))\nform = form_class()\n"]], ["Dynamically update ModelForm's Meta class"], 2], [(297383, 1), [["UPDATE :  I just revisited this post and thought I'd post a little more idiomatic way to handle a dynamic class:"], ['-10000']], [[" def PassengerForm(exclude_list, *args, **kwargs):\n    class MyPassengerForm(ModelForm):\n        class Meta:\n            model = Passenger\n            exclude = exclude_list\n\n        def __init__(self):\n            super(MyPassengerForm, self).__init__(*args, **kwargs)\n\n    return MyPassengerForm()\n\nform = PassengerForm(('field1', 'field2'))\n"]], ["Dynamically update ModelForm's Meta class"], 2], [(300445, 0), [['The more common technique seems to be to UTF-8 encode the string and then % escape the resulting bytes using %XX. This scheme is supported by urllib.unquote:'], ['A more complete example:']], [[' >>> urllib2.unquote("%0a")\n\'\\n\'\n']], ['How to unquote a urlencoded unicode string in python?'], 2], [(300445, 1), [['A more complete example:'], ['-10000']], [[' >>> u"Tanım"\nu\'Tan\\u0131m\'\n>>> url = urllib.quote(u"Tanım".encode(\'utf8\'))\n>>> urllib.unquote(url).decode(\'utf8\')\nu\'Tan\\u0131m\'\n']], ['How to unquote a urlencoded unicode string in python?'], 2], [(301068, 0), [["You're being mislead by output -- the second approach you're taking actually does what you want, you just aren't believing it. :)"], ["Incidentally, there's another string form which might be a bit clearer:"]], [[' >>> foo = \'baz "\\\\"\'\n>>> foo\n\'baz "\\\\"\'\n>>> print foo\nbaz "\\"\n']], ['Quoting backslashes in Python string literals'], 2], [(301068, 1), [["Incidentally, there's another string form which might be a bit clearer:"], ['-10000']], [[' >>> print r\'baz "\\"\'\nbaz "\\"\n']], ['Quoting backslashes in Python string literals'], 2], [(301493, 0), [['source.py'], ['model.py']], [[' """A particular XML parser.  Formats change, so sometimes this changes, too."""\n\nimport xml.etree.ElementTree as xml\n\nclass SSXML_Source( object ):\n    ns0= "urn:schemas-microsoft-com:office:spreadsheet"\n    ns1= "urn:schemas-microsoft-com:office:excel"\n    def __init__( self, aFileName, *sheets ):\n        """Initialize a XML source.\n        XXX - Create better sheet filtering here, in the constructor.\n        @param aFileName: the file name.\n        """\n        super( SSXML_Source, self ).__init__( aFileName )\n        self.log= logging.getLogger( "source.PCIX_XLS" )\n        self.dom= etree.parse( aFileName ).getroot()\n    def sheets( self ):\n        for wb in self.dom.getiterator("{%s}Workbook" % ( self.ns0, ) ):\n            for ws in wb.getiterator( "{%s}Worksheet" % ( self.ns0, ) ):\n                yield ws\n    def rows( self ):\n        for s in self.sheets():\n            print s.attrib["{%s}Name" % ( self.ns0, ) ]\n            for t in s.getiterator( "{%s}Table" % ( self.ns0, ) ):\n                for r in t.getiterator( "{%s}Row" % ( self.ns0, ) ):\n                    # The XML may not be really useful.\n                    # In some cases, you may have to convert to something useful\n                    yield r\n']], ['Which language is easiest and fastest to work with XML content?'], 4], [(301493, 1), [['model.py'], ['builder_today.py  One of many mapping configurations']], [[' """This is your target object.  \nIt\'s part of the problem domain; it rarely changes.\n"""\nclass MyTargetObject( object ):\n    def __init__( self ):\n        self.someAttr= ""\n        self.anotherAttr= ""\n        self.this= 0\n        self.that= 3.14159\n    def aMethod( self ):\n        """etc."""\n        pass\n']], ['Which language is easiest and fastest to work with XML content?'], 4], [(301493, 2), [['builder_today.py  One of many mapping configurations'], ['loader.py']], [[' """One of many builders.  This changes all the time to fit\nspecific needs and situations.  The goal is to keep this\nshort and to-the-point so that it has the mapping and nothing\nbut the mapping.\n"""\n\nimport model\n\nclass MyTargetBuilder( object ):\n    def makeFromXML( self, element ):\n        result= model.MyTargetObject()\n        result.someAttr= element.findtext( "Some" )\n        result.anotherAttr= element.findtext( "Another" )\n        result.this= int( element.findtext( "This" ) )\n        result.that= float( element.findtext( "that" ) )\n        return result\n']], ['Which language is easiest and fastest to work with XML content?'], 4], [(301493, 3), [['loader.py'], ['To make changes, you can correct a builder or create a new builder.  You adjust the loader source to identify which builder will be used.  You can, without too much trouble, make the selection of builder a command-line parameter.  Dynamic imports in dynamic languages seem like overkill to me, but they are handy.']], [[' """An application that maps from XML to the domain object\nusing a configurable "builder".\n"""\nimport model\nimport source\nimport builder_1\nimport builder_2\nimport builder_today\n\n# Configure this:  pick a builder is appropriate for the data:\nb= builder_today.MyTargetBuilder()\n\ns= source.SSXML_Source( sys.argv[1] )\nfor r in s.rows():\n    data= b.makeFromXML( r )\n    # ... persist data with a DB save or file write\n']], ['Which language is easiest and fastest to work with XML content?'], 4], [(302651, 0), [['I myself use Django for its object/db mapping without using its urlconfigs.  Simply create a file called  djangosettings.py  and insert the necessary configuration, for example:'], ['Then in your regular Python code, do']], [[" DATABASE_ENGINE   = 'oracle'\nDATABASE_HOST     = 'localhost'\nDATABASE_NAME     = 'ORCL'\nDATABASE_USER     = 'scott' \nDATABASE_PASSWORD = 'tiger'\n"]], ['Use only some parts of Django?'], 2], [(302651, 1), [['Then in your regular Python code, do'], ["before you import any Django modules.  This will let you use Django's object/db mappings without actually having a Django project, so you can use it for standalone scripts or other web applications or whatever you want."]], [[' import os\nos.environ["DJANGO_SETTINGS_MODULE"] = "djangosettings"\n']], ['Use only some parts of Django?'], 2], [(304256, 0), [['I recently had to solve this problem myself, and came up with this solution:'], ['A few test cases:']], [[' import datetime\n\ndef iso_year_start(iso_year):\n    "The gregorian calendar date of the first day of the given ISO year"\n    fourth_jan = datetime.date(iso_year, 1, 4)\n    delta = datetime.timedelta(fourth_jan.isoweekday()-1)\n    return fourth_jan - delta \n\ndef iso_to_gregorian(iso_year, iso_week, iso_day):\n    "Gregorian calendar date for the given ISO year, week and day"\n    year_start = iso_year_start(iso_year)\n    return year_start + datetime.timedelta(days=iso_day-1, weeks=iso_week-1)\n']], ["What's the best way to find the inverse of datetime.isocalendar()?"], 2], [(304256, 1), [['A few test cases:'], ['-10000']], [[' >>> iso = datetime.date(2005, 1, 1).isocalendar()\n>>> iso\n(2004, 53, 6)\n>>> iso_to_gregorian(*iso)\ndatetime.date(2005, 1, 1)\n\n>>> iso = datetime.date(2010, 1, 4).isocalendar()    \n>>> iso\n(2010, 1, 1)\n>>> iso_to_gregorian(*iso)\ndatetime.date(2010, 1, 4)\n\n>>> iso = datetime.date(2010, 1, 3).isocalendar()\n>>> iso\n(2009, 53, 7)\n>>> iso_to_gregorian(*iso)\ndatetime.date(2010, 1, 3)\n']], ["What's the best way to find the inverse of datetime.isocalendar()?"], 2], [(304655, 0), [['Quite simply, the solution is that f does not need to be a member of the class. I am assuming that your thought-process has gone through a Javaish language filter causing the mental block. It goes a little something like this:'], ['Then when you want to use f again, just use it']], [[" def f(n):\n    return '<' + str(num) + '>'\n\nclass C(object):\n\n    v = f(9)\n    w = f(42)\n"]], ['The best way to invoke methods in Python class declarations?'], 2], [(304655, 1), [['Then when you want to use f again, just use it'], ['I think the moral of the tale is "In Python, you don\'t  have  to force everything into a class". ']], [[" >>> f(4)\n'<4>'\n"]], ['The best way to invoke methods in Python class declarations?'], 2], [(304883, 0), [['Just put this in the first line of your script :'], ['Make the file executable with']], [[' #!/usr/bin/env python\n']], ['What do I use on linux to make a python program executable'], 3], [(304883, 1), [['Make the file executable with'], ['Execute with']], [[' chmod +x myfile.py\n']], ['What do I use on linux to make a python program executable'], 3], [(304883, 2), [['Execute with'], ['-10000']], [[' ./myfile.py\n']], ['What do I use on linux to make a python program executable'], 3], [(308999, 0), [["When you use a decorator, you're replacing one function with another.  In other words, if you have a decorator"], ['then when you say']], [[' def logged(func):\n    def with_logging(*args, **kwargs):\n        print func.__name__ + " was called"\n        return func(*args, **kwargs)\n    return with_logging\n']], ['What does functools.wraps do?'], 5], [(308999, 1), [['then when you say'], ["it's exactly the same as saying"]], [[' @logged\ndef f(x):\n   """does some math"""\n   return x + x * x\n']], ['What does functools.wraps do?'], 5], [(308999, 2), [["it's exactly the same as saying"], ['and your function f is replaced with the function with_logging.  Unfortunately, this means that if you then say']], [[' def f(x):\n    """does some math"""\n    return x + x * x\nf = logged(f)\n']], ['What does functools.wraps do?'], 5], [(308999, 3), [['and your function f is replaced with the function with_logging.  Unfortunately, this means that if you then say'], ["If using a decorator always meant losing this information about a function, it would be a serious problem.  That's why we have  functools.wraps .  This takes a function used in a decorator and adds the functionality of copying over the function name, docstring, arguments list, etc.  And since  wraps  is itself a decorator, the following code does the correct thing:"]], [[' print f.__name__\n']], ['What does functools.wraps do?'], 5], [(308999, 4), [["If using a decorator always meant losing this information about a function, it would be a serious problem.  That's why we have  functools.wraps .  This takes a function used in a decorator and adds the functionality of copying over the function name, docstring, arguments list, etc.  And since  wraps  is itself a decorator, the following code does the correct thing:"], ['-10000']], [[' from functools import wraps\ndef logged(func):\n    @wraps(func)\n    def with_logging(*args, **kwargs):\n        print func.__name__ + " was called"\n        return func(*args, **kwargs)\n    return with_logging\n\n@logged\ndef f(x):\n   """does some math"""\n   return x + x * x\n\nprint f.__name__  # prints \'f\'\nprint f.__doc__   # prints \'does some math\'\n']], ['What does functools.wraps do?'], 5], [(309945, 0), [["And yes, this is psycopg2-specific. Basically, if you just want to quote a string you'd do this:"], ["If you have objects for the stuff you want to do, you can just create an adapter that conforms to the 'IPsycopgSQLQuote' protocol (see pydocs for the myfirstrecipe.py-example...actually that's the only reference I can find to that name) that quotes your object and then registering it like so:"]], [[' from psycopg2.extensions import adapt\n\nprint adapt("Hello World\'; DROP DATABASE World;")\n']], ['How to quote a string value explicitly (Python DB API/Psycopg2)'], 2], [(309945, 1), [["If you have objects for the stuff you want to do, you can just create an adapter that conforms to the 'IPsycopgSQLQuote' protocol (see pydocs for the myfirstrecipe.py-example...actually that's the only reference I can find to that name) that quotes your object and then registering it like so:"], ["Also, the other examples are interesting; esp.  'dialtone.py'  and  'simple.py' ."]], [[' from psycopg2.extensions import register_adapter\n\nregister_adapter(mytype, myadapter)\n']], ['How to quote a string value explicitly (Python DB API/Psycopg2)'], 2], [(311588, 0), [['It depends on how long they are. I tend to structure them like so:'], ['If any line becomes too big I like to extract it out in a lambda or expression:']], [[" [x.id for x\n in self.db.query(schema.allPostsUuid).execute(timeout=20)\n if x.type == 'post' \n    and x.deleted is not False\n    and ...\n    and ...]\n"]], ['How to indent Python list-comprehensions?'], 2], [(311588, 1), [['If any line becomes too big I like to extract it out in a lambda or expression:'], ['And then if a lambda becomes too long it gets promoted to a function.']], [[' transform = lambda x: x.id\nresults = self.db.query(schema.allPostsUuid).execute(timeout=20)\ncondition = lambda x: x.deleted is not False and ... and ...\n[transform(x) for x in results if condition(x)]\n']], ['How to indent Python list-comprehensions?'], 2], [(311775, 0), [['-10000'], ['Results . (evaluate each function 144 times and average the duration)']], [[' def doAppend( size=10000 ):\n    result = []\n    for i in range(size):\n        message= "some unique object %d" % ( i, )\n        result.append(message)\n    return result\n\ndef doAllocate( size=10000 ):\n    result=size*[None]\n    for i in range(size):\n        message= "some unique object %d" % ( i, )\n        result[i]= message\n    return result\n']], ['Python - Create a list with initial capacity'], 2], [(311775, 1), [['Results . (evaluate each function 144 times and average the duration)'], ['Conclusion .  It barely matters.  ']], [[' simple append 0.0102\npre-allocate  0.0098\n']], ['Python - Create a list with initial capacity'], 2], [(312443, 0), [["Here's a generator that yields the chunks you want:"], ['-10000']], [[' def chunks(l, n):\n    """Yield successive n-sized chunks from l."""\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n']], ['How do you split a list into evenly sized chunks?'], 5], [(312443, 1), [['-10000'], ["If you're using Python 2, you should use  xrange()  instead of  range() :"]], [[' import pprint\npprint.pprint(list(chunks(range(10, 75), 10)))\n[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n']], ['How do you split a list into evenly sized chunks?'], 5], [(312443, 2), [["If you're using Python 2, you should use  xrange()  instead of  range() :"], ['Also you can simply use list comprehension instead of writing a function. Python 3:']], [[' def chunks(l, n):\n    """Yield successive n-sized chunks from l."""\n    for i in xrange(0, len(l), n):\n        yield l[i:i + n]\n']], ['How do you split a list into evenly sized chunks?'], 5], [(312443, 3), [['Also you can simply use list comprehension instead of writing a function. Python 3:'], ['Python 2 version:']], [[' [l[i:i + n] for i in range(0, len(l), n)]\n']], ['How do you split a list into evenly sized chunks?'], 5], [(312443, 4), [['Python 2 version:'], ['-10000']], [[' [l[i:i + n] for i in xrange(0, len(l), n)]\n']], ['How do you split a list into evenly sized chunks?'], 5], [(312925, 0), [['Here is  first  revised draft of the decorator:'], ['Here is the view:']], [[" from functools import wraps\n\ndef ajax_login_required(view_func):\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        if request.user.is_authenticated():\n            return view_func(request, *args, **kwargs)\n        json = simplejson.dumps({ 'not_authenticated': True })\n        return HttpResponse(json, mimetype='application/json')\n    return wrapper\n"]], ['Django authentication and Ajax - URLs that require login'], 3], [(312925, 1), [['Here is the view:'], ['And here is the JavaScript (jQuery):']], [[" @ajax_login_required\ndef ajax_update_module(request, module_slug, action):\n    # Etc ...\n    return HttpResponse(json, mimetype='application/json')\n"]], ['Django authentication and Ajax - URLs that require login'], 3], [(312925, 2), [['And here is the JavaScript (jQuery):'], ["EDIT : I've attempted to use  functools.wraps , as suggested.  I have not actually used this decorator in working code, so beware of possible bugs."]], [[" $.post('/restricted-url/', data, function(json) {\n    if (json.not_authenticated) {\n        alert('Not authorized.');  // Or something in a message DIV\n        return;\n    }\n    // Etc ...\n});\n"]], ['Django authentication and Ajax - URLs that require login'], 3], [(316238, 0), [['-10000'], ['Or in Python 3.0:']], [['Python <2.7 "%.15g" % f\n']], ['Python float to Decimal conversion'], 2], [(316238, 1), [['Or in Python 3.0:'], ['-10000']], [[' format(f, ".15g")\n']], ['Python float to Decimal conversion'], 2], [(320232, 0), [['In your cleanup process, you can also implement your own wait, and kill it when a your desired timeout occurs.'], ["Here's a way to kill a process in windows. Your Popen object has a pid attribute, so you can just call it by  success = win_kill(p.pid)  (Needs  pywin32  installed):"]], [[" >>> import atexit\n>>> import sys\n>>> import time\n>>> \n>>> \n>>>\n>>> def cleanup():\n...     timeout_sec = 5\n...     for p in all_processes: # list of your processes\n...         p_sec = 0\n...         for second in range(timeout_sec):\n...             if p.poll() == None:\n...                 time.sleep(1)\n...                 p_sec += 1\n...         if p_sec >= timeout_sec:\n...             p.kill() # supported from python 2.6\n...     print 'cleaned up!'\n...\n>>>\n>>> atexit.register(cleanup)\n>>>\n>>> sys.exit()\ncleaned up!\n"]], ['Ensuring subprocesses are dead on exiting Python program'], 2], [(320232, 1), [["Here's a way to kill a process in windows. Your Popen object has a pid attribute, so you can just call it by  success = win_kill(p.pid)  (Needs  pywin32  installed):"], ['-10000']], [["     def win_kill(pid):\n        '''kill a process by specified PID in windows'''\n        import win32api\n        import win32con\n\n        hProc = None\n        try:\n            hProc = win32api.OpenProcess(win32con.PROCESS_TERMINATE, 0, pid)\n            win32api.TerminateProcess(hProc, 0)\n        except Exception:\n            return False\n        finally:\n            if hProc != None:\n                hProc.Close()\n\n        return True\n"]], ['Ensuring subprocesses are dead on exiting Python program'], 2], [(323972, 0), [['For example:'], ['The following code allows (with some restrictions) to raise an Exception in a Python thread:']], [[' import threading\n\nclass StoppableThread(threading.Thread):\n    """Thread class with a stop() method. The thread itself has to check\n    regularly for the stopped() condition."""\n\n    def __init__(self):\n        super(StoppableThread, self).__init__()\n        self._stop_event = threading.Event()\n\n    def stop(self):\n        self._stop_event.set()\n\n    def stopped(self):\n        return self._stop_event.is_set()\n']], ['Is there any way to kill a Thread in Python?'], 2], [(323972, 1), [['The following code allows (with some restrictions) to raise an Exception in a Python thread:'], ['As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.']], [[' def _async_raise(tid, exctype):\n    \'\'\'Raises an exception in the threads with id tid\'\'\'\n    if not inspect.isclass(exctype):\n        raise TypeError("Only types can be raised (not instances)")\n    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid,\n                                                  ctypes.py_object(exctype))\n    if res == 0:\n        raise ValueError("invalid thread id")\n    elif res != 1:\n        # "if it returns a number greater than one, you\'re in trouble,\n        # and you should call it again with exc=NULL to revert the effect"\n        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)\n        raise SystemError("PyThreadState_SetAsyncExc failed")\n\nclass ThreadWithExc(threading.Thread):\n    \'\'\'A thread class that supports raising exception in the thread from\n       another thread.\n    \'\'\'\n    def _get_my_tid(self):\n        """determines this (self\'s) thread id\n\n        CAREFUL : this function is executed in the context of the caller\n        thread, to get the identity of the thread represented by this\n        instance.\n        """\n        if not self.isAlive():\n            raise threading.ThreadError("the thread is not active")\n\n        # do we have it cached?\n        if hasattr(self, "_thread_id"):\n            return self._thread_id\n\n        # no, look for it in the _active dict\n        for tid, tobj in threading._active.items():\n            if tobj is self:\n                self._thread_id = tid\n                return tid\n\n        # TODO: in python 2.6, there\'s a simpler way to do : self.ident\n\n        raise AssertionError("could not determine the thread\'s id")\n\n    def raiseExc(self, exctype):\n        """Raises the given exception type in the context of this thread.\n\n        If the thread is busy in a system call (time.sleep(),\n        socket.accept(), ...), the exception is simply ignored.\n\n        If you are sure that your exception should terminate the thread,\n        one way to ensure that it works is:\n\n            t = ThreadWithExc( ... )\n            ...\n            t.raiseExc( SomeException )\n            while t.isAlive():\n                time.sleep( 0.1 )\n                t.raiseExc( SomeException )\n\n        If the exception is to be caught by the thread, you need a way to\n        check that your thread has caught it.\n\n        CAREFUL : this function is executed in the context of the\n        caller thread, to raise an excpetion in the context of the\n        thread represented by this instance.\n        """\n        _async_raise( self._get_my_tid(), exctype )\n']], ['Is there any way to kill a Thread in Python?'], 2], [(324214, 0), [['-10000'], ['The above pattern has one drawback; it does not clear the root element, so you will end up with a single element with lots of empty child elements. If your files are huge, rather than just large, this might be a problem. To work around this, you need to get your hands on the root element. The easiest way to do this is to enable start events, and save a reference to the first element in a variable:']], [[' for event, elem in iterparse(source):\n    if elem.tag == "record":\n        ... process record elements ...\n        elem.clear()\n']], ['What is the fastest way to parse large XML docs in Python?'], 2], [(324214, 1), [['The above pattern has one drawback; it does not clear the root element, so you will end up with a single element with lots of empty child elements. If your files are huge, rather than just large, this might be a problem. To work around this, you need to get your hands on the root element. The easiest way to do this is to enable start events, and save a reference to the first element in a variable:'], ['The  lxml.iterparse()  does not allow this.']], [[' # get an iterable\ncontext = iterparse(source, events=("start", "end"))\n\n# turn it into an iterator\ncontext = iter(context)\n\n# get the root element\nevent, root = context.next()\n\nfor event, elem in context:\n    if event == "end" and elem.tag == "record":\n        ... process record elements ...\n        root.clear()\n']], ['What is the fastest way to parse large XML docs in Python?'], 2], [(327002, 0), [["As per comments, I've updated the code:"], ['Python 2.6 + Psyco 2.0:  0.128000 vs. 0.067000']], [[' import time\nimport math\n\ndef timeit1():\n    s = time.time()\n    for i in xrange(750000):\n        z=i**.5\n    print "Took %f seconds" % (time.time() - s)\n\ndef timeit2(arg=math.sqrt):\n    s = time.time()\n    for i in xrange(750000):\n        z=arg(i)\n    print "Took %f seconds" % (time.time() - s)\n\ntimeit1()\ntimeit2()\n']], ['Which is faster in Python: x**.5 or math.sqrt(x)?'], 3], [(327002, 1), [['Python 2.6 + Psyco 2.0:  0.128000 vs. 0.067000'], ['Table results produced on machine:']], [[' | Interpreter    |  x**.5, |   sqrt, | sqrt faster, % |\n|                | seconds | seconds |                |\n|----------------+---------+---------+----------------|\n| Python 3.2rc1+ |    0.32 |    0.27 |             19 |\n| Python 3.1.2   |   0.136 |   0.088 |             55 |\n| Python 3.0.1   |   0.155 |   0.102 |             52 |\n| Python 2.7     |   0.132 |   0.079 |             67 |\n| Python 2.6.6   |   0.121 |   0.075 |             61 |\n| PyPy 1.4.1     |   0.083 |  0.0159 |            422 |\n| Jython 2.5.1   |   0.132 |    0.22 |            -40 |\n| Python 2.5.5   |   0.129 |   0.125 |              3 |\n| Python 2.4.6   |   0.131 |   0.123 |              7 |\n#+TBLFM: $4=100*($2-$3)/$3;%.0f\n']], ['Which is faster in Python: x**.5 or math.sqrt(x)?'], 3], [(327002, 2), [['Table results produced on machine:'], ['To reproduce results:']], [[" $ uname -vms\nLinux #42-Ubuntu SMP Thu Dec 2 02:41:37 UTC 2010 x86_64\n$ cat /proc/cpuinfo | grep 'model name' | head -1\nmodel name      : Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz\n"]], ['Which is faster in Python: x**.5 or math.sqrt(x)?'], 3], [(327191, 0), [['-10000'], ['Note that you can also get all of the keys and values sorted by keys like this:']], [[' for k in sorted(somedictionary.keys()):\n    doSomething(k)\n']], ['Is there a "one-liner" way to get a list of keys from a dictionary in sorted order?'], 2], [(327191, 1), [['Note that you can also get all of the keys and values sorted by keys like this:'], ['-10000']], [[' for k, v in sorted(somedictionary.iteritems()):\n   doSomething(k, v)\n']], ['Is there a "one-liner" way to get a list of keys from a dictionary in sorted order?'], 2], [(327223, 0), [['Some measurements. I took 10MB of free e-book text and computed trigram frequencies, producing a 24MB file. Storing it in different simple Python data structures took this much space in kB, measured as RSS from running ps, where d is a dict, keys and freqs are lists, and a,b,c,freq are the fields of a trigram record:'], ['\'Pair array\' is the scheme below in my original answer ("I\'d start with the array with keys\nbeing the first two words..."), where the value table for each pair is\nrepresented as a single string. \'Squeezed pair array\' is the same,\nleaving out the frequency values that are equal to 1 (the most common\ncase). \'Squeezed single array\' is like squeezed pair array, but gloms key and value together as one string (with a separator character). The squeezed single array code:']], [[" 295760     S. Lott's answer\n237984     S. Lott's with keys interned before passing in\n203172 [*] d[(a,b,c)] = int(freq)\n203156     d[a][b][c] = int(freq)\n189132     keys.append((a,b,c)); freqs.append(int(freq))\n146132     d[intern(a),intern(b)][intern(c)] = int(freq)\n145408     d[intern(a)][intern(b)][intern(c)] = int(freq)\n 83888 [*] d[a+' '+b+' '+c] = int(freq)\n 82776 [*] d[(intern(a),intern(b),intern(c))] = int(freq)\n 68756     keys.append((intern(a),intern(b),intern(c))); freqs.append(int(freq))\n 60320     keys.append(a+' '+b+' '+c); freqs.append(int(freq))\n 50556     pair array\n 48320     squeezed pair array\n 33024     squeezed single array\n"]], ['Memory Efficient Alternatives to Python Dictionaries'], 2], [(327223, 1), [['\'Pair array\' is the scheme below in my original answer ("I\'d start with the array with keys\nbeing the first two words..."), where the value table for each pair is\nrepresented as a single string. \'Squeezed pair array\' is the same,\nleaving out the frequency values that are equal to 1 (the most common\ncase). \'Squeezed single array\' is like squeezed pair array, but gloms key and value together as one string (with a separator character). The squeezed single array code:'], ["I haven't written the code to look up values from this structure (use bisect, as mentioned below), or implemented the fancier compressed structures also described below."]], [[" import collections\n\ndef build(file):\n    pairs = collections.defaultdict(list)\n    for line in file:  # N.B. file assumed to be already sorted\n        a, b, c, freq = line.split()\n        key = ' '.join((a, b))\n        pairs[key].append(c + ':' + freq if freq != '1' else c)\n    out = open('squeezedsinglearrayfile', 'w')\n    for key in sorted(pairs.keys()):\n        out.write('%s|%s\\n' % (key, ' '.join(pairs[key])))\n\ndef load():\n    return open('squeezedsinglearrayfile').readlines()\n\nif __name__ == '__main__':\n    build(open('freqs'))\n"]], ['Memory Efficient Alternatives to Python Dictionaries'], 2], [(327896, 0), [["This should do what you're asking for:"], ["Typically you don't draw to the original image, since you'll have to reload the image to get the original back (or create a copy of it before you start drawing onto it). Perhaps what you actually need is something more like this:"]], [[' # load the image\nimage = pygame.image.load("some_image.png")\n\n# draw a yellow line on the image\npygame.draw.line(image, (255, 255, 0), (0, 0), (100, 100))\n']], ['how to draw lines on a picture background in pygame'], 2], [(327896, 1), [["Typically you don't draw to the original image, since you'll have to reload the image to get the original back (or create a copy of it before you start drawing onto it). Perhaps what you actually need is something more like this:"], ['-10000']], [[' # initialize pygame and screen\nimport pygame\npygame.init()\nscreen = pygame.display.set_mode((720, 576))\n\n# Draw the image to the screen\nscreen.blit(image, (0, 0))\n\n# Draw a line on top of the image on the screen\npygame.draw.line(screen, (255, 255, 255), (0, 0), (50, 50))\n']], ['how to draw lines on a picture background in pygame'], 2], [(328851, 0), [['I see two options in this case:'], ['This has the disadvantage of being very slow when you have a lot of objects, but works with types over which you have no control.']], [['Garbage collector import gc\nfor obj in gc.get_objects():\n    if isinstance(obj, some_class):\n        dome_something(obj)\n']], ['Printing all instances of a class'], 2], [(328851, 1), [['This has the disadvantage of being very slow when you have a lot of objects, but works with types over which you have no control.'], ["In this case, all the references get stored as a weak reference in a list. If you create and delete a lot of instances frequently, you should clean up the list of weakrefs after iteration, otherwise there's going to be a lot of cruft. "]], [['Use a mixin and weakrefs from collections import defaultdict\nimport weakref\n\nclass KeepRefs(object):\n    __refs__ = defaultdict(list)\n    def __init__(self):\n        self.__refs__[self.__class__].append(weakref.ref(self))\n\n    @classmethod\n    def get_instances(cls):\n        for inst_ref in cls.__refs__[cls]:\n            inst = inst_ref()\n            if inst is not None:\n                yield inst\n\nclass X(KeepRefs):\n    def __init__(self, name):\n        super(X, self).__init__()\n        self.name = name\n\nx = X("x")\ny = X("y")\nfor r in X.get_instances():\n    print r.name\ndel y\nfor r in X.get_instances():\n    print r.name\n']], ['Printing all instances of a class'], 2], [(334827, 0), [['Here is a function that wraps  the contact sheet  function  S.Lott  mentioned.'], ['It is assuming the  recipe  is saved as  contactsheet.py . Usage is:']], [[' #!/usr/bin/env python\n\nimport os, os.path\nfrom contactsheet import make_contact_sheet\n\ndef make_film_strip(fnames,\n                   (photow,photoh),\n                   (marl,mart,marr,marb),\n                   padding):\n    return make_contact_sheet(fnames,\n                              (1, len(fnames)),\n                              (photow,photoh),\n                              (marl,mart,marr,marb),\n                              padding)\n']], ['How to generate a filmstrip image in python from a folder of images?'], 2], [(334827, 1), [['It is assuming the  recipe  is saved as  contactsheet.py . Usage is:'], ['Tested.']], [[" fstrip = filmstrip.make_film_strip(filmstrip.fnames, (120, 120), (0,0,0,0), 0)\nfstrip.save('/path/to/file.format')\n"]], ['How to generate a filmstrip image in python from a folder of images?'], 2], [(335896, 0), [['It is not an answer to your question, but It might be helpful:'], ['Example:']], [[' #!/usr/bin/env python\nimport Image\n\ndef makefilmstrip(images, mode=\'RGB\', color=\'white\'):\n    """Return a combined (filmstripped, each on top of the other) image of the images.\n\n    """\n    width  = max(img.size[0] for img in images)\n    height = sum(img.size[1] for img in images)\n\n    image = Image.new(mode, (width, height), color) \n\n    left, upper = 0, 0\n    for img in images:\n        image.paste(img, (left, upper))\n        upper += img.size[1]\n\n    return image\n\nif __name__==\'__main__\':\n    # Here\'s how it could be used:\n    from glob import glob\n    from optparse import OptionParser\n\n    # process command-line args\n    parser = OptionParser()\n    parser.add_option("-o", "--output", dest="file",\n                      help="write combined image to OUTPUT")\n\n    options, filepatterns = parser.parse_args()\n    outfilename = options.file\n\n    filenames = []\n    for files in map(glob, filepatterns):\n        if files:\n            filenames += files\n\n    # construct image\n    images = map(Image.open, filenames)    \n    img = makefilmstrip(images)\n    img.save(outfilename) \n']], ['How to complete this python function to save in the same folder?'], 2], [(335896, 1), [['Example:'], ['-10000']], [[' $ python filmstrip.py -o output.jpg *.jpg\n']], ['How to complete this python function to save in the same folder?'], 2], [(336866, 0), [['the python server file:'], ["...and the HTML file (I call it 'frontend.html', unfortunately the name has to appear in the JavaScript code as well):"]], [[' import threading\nimport webbrowser\nimport BaseHTTPServer\nimport SimpleHTTPServer\n\nFILE = \'frontend.html\'\nPORT = 8080\n\n\nclass TestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):\n    """The test example handler."""\n\n    def do_POST(self):\n        """Handle a post request by returning the square of the number."""\n        length = int(self.headers.getheader(\'content-length\'))        \n        data_string = self.rfile.read(length)\n        try:\n            result = int(data_string) ** 2\n        except:\n            result = \'error\'\n        self.wfile.write(result)\n\n\ndef open_browser():\n    """Start a browser after waiting for half a second."""\n    def _open_browser():\n        webbrowser.open(\'http://localhost:%s/%s\' % (PORT, FILE))\n    thread = threading.Timer(0.5, _open_browser)\n    thread.start()\n\ndef start_server():\n    """Start the server."""\n    server_address = ("", PORT)\n    server = BaseHTTPServer.HTTPServer(server_address, TestHandler)\n    server.serve_forever()\n\nif __name__ == "__main__":\n    open_browser()\n    start_server()\n']], ['How to implement a minimal server for AJAX in Python?'], 3], [(336866, 1), [["...and the HTML file (I call it 'frontend.html', unfortunately the name has to appear in the JavaScript code as well):"], ["Finally an alternative implementation using WSGI (unfortunately I didn't see a way to fall back on the standard file-serving handler if the request is not a POST):"]], [[' <html>\n<head>\n<title>AJAX test</title>\n</head>\n<body>\n<script type="text/javascript">\n\nfunction xml_http_post(url, data, callback) {\n    var req = false;\n    try {\n        // Firefox, Opera 8.0+, Safari\n        req = new XMLHttpRequest();\n    }\n    catch (e) {\n        // Internet Explorer\n        try {\n            req = new ActiveXObject("Msxml2.XMLHTTP");\n        }\n        catch (e) {\n            try {\n                req = new ActiveXObject("Microsoft.XMLHTTP");\n            }\n            catch (e) {\n                alert("Your browser does not support AJAX!");\n                return false;\n            }\n        }\n    }\n    req.open("POST", url, true);\n    req.onreadystatechange = function() {\n        if (req.readyState == 4) {\n            callback(req);\n        }\n    }\n    req.send(data);\n}\n\nfunction test_button() {\n    var data = document.test_form.test_text.value;           \n    xml_http_post("frontend.html", data, test_handle)\n}\n\nfunction test_handle(req) {\n    var elem = document.getElementById(\'test_result\')\n    elem.innerHTML =  req.responseText\n}\n\n</script>\n\n<form name=test_form>\nsqr(\n<input type="text" name="test_text" value="0" size="4">\n) =\n<span id="test_result">0</span>\n<input type=button onClick="test_button();" value="start" title="start">\n</form>\n\n</body>\n</html>\n']], ['How to implement a minimal server for AJAX in Python?'], 3], [(336866, 2), [["Finally an alternative implementation using WSGI (unfortunately I didn't see a way to fall back on the standard file-serving handler if the request is not a POST):"], ['-10000']], [[' import threading\nimport webbrowser\nfrom wsgiref.simple_server import make_server\n\nFILE = \'frontend.html\'\nPORT = 8080\n\ndef test_app(environ, start_response):\n    if environ[\'REQUEST_METHOD\'] == \'POST\':\n        try:\n            request_body_size = int(environ[\'CONTENT_LENGTH\'])\n            request_body = environ[\'wsgi.input\'].read(request_body_size)\n        except (TypeError, ValueError):\n            request_body = "0"\n        try:\n            response_body = str(int(request_body) ** 2)\n        except:\n            response_body = "error"\n        status = \'200 OK\'\n        headers = [(\'Content-type\', \'text/plain\')]\n        start_response(status, headers)\n        return [response_body]\n    else:\n        response_body = open(FILE).read()\n        status = \'200 OK\'\n        headers = [(\'Content-type\', \'text/html\'),\n                   (\'Content-Length\', str(len(response_body)))]\n        start_response(status, headers)\n        return [response_body]\n\ndef open_browser():\n    """Start a browser after waiting for half a second."""\n    def _open_browser():\n        webbrowser.open(\'http://localhost:%s/%s\' % (PORT, FILE))\n    thread = threading.Timer(0.5, _open_browser)\n    thread.start()\n\ndef start_server():\n    """Start the server."""\n    httpd = make_server("", PORT, test_app)\n    httpd.serve_forever()\n\nif __name__ == "__main__":\n    open_browser()\n    start_server()\n']], ['How to implement a minimal server for AJAX in Python?'], 3], [(336963, 0), [["As @Guillaume says, it's used for generating help. If you want to have an option that takes an argument, such as a filename, you can add the  metavar  parameter to the  add_option  call so your preferred argument name/descriptor is output in the help message. From  the current module documentation :"], ['would produce help like this:']], [[' usage = "usage: %prog [options] arg1 arg2"\nparser = OptionParser(usage=usage)\nparser.add_option("-f", "--filename",\n                  metavar="FILE", help="write output to FILE"),\n']], ['Python optparse metavar'], 2], [(336963, 1), [['would produce help like this:'], ['The "FILE" after the "-f" and the "--filename" comes from the metavar.']], [[' usage: <yourscript> [options] arg1 arg2\n\noptions:\n  -f FILE, --filename=FILE\n']], ['Python optparse metavar'], 2], [(337223, 0), [['-10000'], ["Here's a way that keeps the stopterm line:"]], [[' from itertools import takewhile\nusefullines = takewhile(lambda x: not re.search(stopterm, x), lines)\n\nfrom itertools import takewhile\nusefullines = takewhile(lambda x: stopterm not in x, lines)\n']], ['Python: item for item until stopterm in item?'], 2], [(337223, 1), [["Here's a way that keeps the stopterm line:"], ['-10000']], [[' def useful_lines(lines, stopterm):\n    for line in lines:\n        if stopterm in line:\n            yield line\n            break\n        yield line\n\nusefullines = useful_lines(lines, stopterm)\n# or...\nfor line in useful_lines(lines, stopterm):\n    # ... do stuff\n    pass\n']], ['Python: item for item until stopterm in item?'], 2], [(339007, 0), [['Strings:'], ['And for numbers:']], [[" >>> n = '4'\n>>> print n.zfill(3)\n004\n"]], ['Nicest way to pad zeroes to string'], 2], [(339007, 1), [['And for numbers:'], ['String formatting documentation .']], [[" >>> n = 4\n>>> print '%03d' % n\n004\n>>> print format(n, '03') # python >= 2.6\n004\n>>> print '{0:03d}'.format(n)  # python >= 2.6\n004\n>>> print '{foo:03d}'.format(foo=n)  # python >= 2.6\n004\n>>> print('{:03d}'.format(n))  # python >= 2.7 + python3\n004\n>>> print('{0:03d}'.format(n))  # python 3\n004\n>>> print(f'{n:03}') # python >= 3.6\n004\n"]], ['Nicest way to pad zeroes to string'], 2], [(339856, 0), [['Using the ending 3 words, no need for regexps (using the  time  module):'], ['Using the  datetime  module:']], [[' >>> import time\n>>> a="Some Random text of undetermined length Jan 28, 1986"\n>>> datetuple = a.rsplit(" ",3)[-3:]\n>>> datetuple\n[\'Jan\', \'28,\', \'1986\']\n>>> time.strptime(\' \'.join(datetuple),"%b %d, %Y")\ntime.struct_time(tm_year=1986, tm_mon=1, tm_mday=28, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=1, tm_yday=28, tm_isdst=-1)\n>>> \n']], ['How do I strptime from a pattern like this?'], 2], [(339856, 1), [['Using the  datetime  module:'], ['-10000']], [[' >>> from datetime import datetime\n>>> datetime.strptime(" ".join(datetuple), "%b %d, %Y")\ndatetime.datetime(1986, 1, 28, 0, 0)\n>>> \n']], ['How do I strptime from a pattern like this?'], 2], [(340341, 0), [['If you want to get at the paramiko logger to override the settings:'], ["There's also a convenience function to log everything to a file:"]], [[' logger = paramiko.util.logging.getLogger()\n']], ['Suppressing Output of Paramiko SSHClient Class'], 2], [(340341, 1), [["There's also a convenience function to log everything to a file:"], ['-10000']], [[" paramiko.util.log_to_file('filename.log')\n"]], ['Suppressing Output of Paramiko SSHClient Class'], 2], [(345401, 0), [["Because you are using  ForeignKey s to  Site s, that means sites don't share galleries and photos. Therefore having those I mentioned above is already useless."], ['Once you set the  site  on a gallery all its photos will inherit this property. And the site will be accessible as  photo_instance.gallery.site :']], [[" class Photo(models.Model):\n    title = models.CharField(max_length=100)\n    gallery = models.ForeignKey(Gallery, related_name='photos')\n    file = models.ImageField(upload_to=get_site_profile_path) \n\n    def __unicode__(self):\n        return self.title\n\n\nclass Gallery(models.Model):    \n    name = models.CharField(max_length=40)\n    site = models.ForeignKey(Site)\n\n    def __unicode__(self):\n        return self.name\n"]], ['Django MTMField: limit_choices_to = other_ForeignKeyField_on_same_model?'], 2], [(345401, 1), [['Once you set the  site  on a gallery all its photos will inherit this property. And the site will be accessible as  photo_instance.gallery.site :'], ["This should work as if you had a  site  field. But I haven't tested it."]], [[' @property\ndef site(self):\n    return self.gallery.site\n']], ['Django MTMField: limit_choices_to = other_ForeignKeyField_on_same_model?'], 2], [(345745, 0), [['The "a and b or c" idiom was the canonical way to express the ternary arithmetic if in Python, before  PEP 308  was written and implemented. This idiom fails the "b" answer is false itself; to support the general case, you could write'], ['An alternative way of spelling it was']], [['  return (a and [b] or [c])[0]\n']], ['Is this idiom pythonic? (someBool and "True Result" or "False Result")'], 3], [(345745, 1), [['An alternative way of spelling it was'], ['which, with the introduction of the bool type, could be rewritten as']], [['  return (b,c)[not a]\n']], ['Is this idiom pythonic? (someBool and "True Result" or "False Result")'], 3], [(345745, 2), [['which, with the introduction of the bool type, could be rewritten as'], ["(in case it isn't clear: the conversion to bool, and the not operator, is necessary if a is not known to be bool already)"]], [['  return (c,b)[bool(a)]\n']], ['Is this idiom pythonic? (someBool and "True Result" or "False Result")'], 3], [(346823, 0), [['One way to do this would be to "normalise" the difference between the minimum and maximum and do a case distinction on that value. In python:'], ['The above code assumes you want the biggest possible gap. For the smallest you would use the following if:']], [[' delta = maximum - minimum\nfactor = 10**math.ceil(math.log(delta,10))  # smallest power of 10 greater than delta\nnormalised_delta = delta / factor           # 0.1 <= normalised_delta < 1\nif normalised_delta/5 >= 0.1:\n  step_size = 0.1\nelif normalised_delta/5 >= 0.05:\n  step_size = 0.05\nelif normalised_delta/20 <= 0.01:\n  step_size = 0.01\nstep_size = step_size * factor\n']], ['Ticking function grapher'], 2], [(346823, 1), [['The above code assumes you want the biggest possible gap. For the smallest you would use the following if:'], ['Besides the possibility that there are more than one suitable values, there is also the somewhat worrisome possibility that there are none. Take for example the range [0,24] where a gap of 12.5p would give a step size of 1.2 and a gap of 50p would give step size 4.8. There is no "unit" or "half unit" in between. The problem is that the difference between a gap of 12.5p and one of 50p is a factor 4 while the difference between 0.01 and 0.05 is a factor 5. So you will have to widen the range of allowable gaps a bit and adjust the code accordingly.']], [[' if normalised_delta/20 == 0.005:\n  step_size = 0.005\nelif normalised_delta/20 <= 0.01:\n  step_size = 0.01\nelif normalised_delta/5 >= 0.05:\n  step_size = 0.05\n']], ['Ticking function grapher'], 2], [(346840, 0), [["Using the  direct_to_template  generic view would be a lot simpler.  You could use the passed in parameters on one view to specify the actual template in urls.py, if you don't want to add an entry for each page:"], ['Then import the template in your  foo_index.html :']], [[" r'^foo/(?P<template_name>.+)/$','direct_to_template', {'template': 'foo_index.html'}),\n"]], ['Django.contrib.flatpages without models'], 2], [(346840, 1), [['Then import the template in your  foo_index.html :'], ['-10000']], [[' {% include template_name %}\n']], ['Django.contrib.flatpages without models'], 2], [(347538, 0), [['-10000'], ['produces:']], [[' import math\n\ndef next_multiple(x, y):\n    return math.ceil(x/y)*y\n\ndef try_it(x, y):\n    print x, y, next_multiple(x, y)\n\nfor x, y in [\n    (1.002, 0.1),\n    (0.348, 0.1),\n    (0.50, 1),\n    (0.32, 0.05)\n    ]:\n    try_it(x, y)\n']], ['Rounding float to the nearest factor?'], 2], [(347538, 1), [['produces:'], ["I think your first example output is wrong, The correct answer for x' is 1.1, right?"]], [[' 1.002 0.1 1.1\n0.348 0.1 0.4\n0.5 1 1.0\n0.32 0.05 0.35\n']], ['Rounding float to the nearest factor?'], 2], [(347734, 0), [['You forgot parentheses around  4*t :'], ['You can use  decimal  to perform calculation with higher precision.']], [[' pi = (a+b)**2 / (4*t)\n']], ['Gauss-Legendre Algorithm in python'], 3], [(347734, 1), [['You can use  decimal  to perform calculation with higher precision.'], ['Output:']], [[' #!/usr/bin/env python\nfrom __future__ import with_statement\nimport decimal\n\ndef pi_gauss_legendre():\n    D = decimal.Decimal\n    with decimal.localcontext() as ctx:\n        ctx.prec += 2                \n        a, b, t, p = 1, 1/D(2).sqrt(), 1/D(4), 1                \n        pi = None\n        while 1:\n            an    = (a + b) / 2\n            b     = (a * b).sqrt()\n            t    -= p * (a - an) * (a - an)\n            a, p  = an, 2*p\n            piold = pi\n            pi    = (a + b) * (a + b) / (4 * t)\n            if pi == piold:  # equal within given precision\n                break\n    return +pi\n\ndecimal.getcontext().prec = 100\nprint pi_gauss_legendre()\n']], ['Gauss-Legendre Algorithm in python'], 3], [(347734, 2), [['Output:'], ['-10000']], [[' 3.141592653589793238462643383279502884197169399375105820974944592307816406286208\\\n    998628034825342117068\n']], ['Gauss-Legendre Algorithm in python'], 3], [(347812, 0), [['We do a lot of component caching and not all of them are updated at the same time. So we set host and timestamp values in a universally included context processor. At the top of each template fragment we stick in:'], ['All of our views that are object-detail pages define a context variable "page_object" and we have this at the top of the base.html template master:']], [[' <!-- component_name {{host}} {{timestamp}} -->\n']], ['How to test django caching?'], 3], [(347812, 1), [['All of our views that are object-detail pages define a context variable "page_object" and we have this at the top of the base.html template master:'], ['class_id() is a method from a super class used by all of our primary content classes. It is just:']], [[' <!-- {{page_object.class_id}} @ {{timestamp}} -->\n']], ['How to test django caching?'], 3], [(347812, 2), [['class_id() is a method from a super class used by all of our primary content classes. It is just:'], ["If you load a page and any of the timestamps are more than few seconds old, it's a pretty good bet that the component was cached."]], [[' def class_id(self):\n    "%s.%s.%s" % (self.__class__._meta.app_label,\n                    self.__class__.__name__, self.id)\n']], ['How to test django caching?'], 3], [(349175, 0), [['-10000'], ['produces']], [[" 'function(%s)' % ', '.join(args)\n"]], ['Formatting a data structure into a comma-separated list of arguments'], 2], [(349175, 1), [['produces'], ['-10000']], [[" 'function(a, b, c, d)'\n"]], ['Formatting a data structure into a comma-separated list of arguments'], 2], [(350519, 0), [['You actually want a sorted sequence of mins.'], ['This ran in zero time on my Dell.  I had to run it 10 times to get a measurable run time.']], [[' mins = items[:n]\nmins.sort()\nfor i in items[n:]:\n    if i < mins[-1]: \n        mins.append(i)\n        mins.sort()\n        mins= mins[:n]\n']], ['Getting the lesser n elements of a list in Python'], 2], [(350519, 1), [['This ran in zero time on my Dell.  I had to run it 10 times to get a measurable run time.'], ['Using  bisect.insort  instead of append and sort may speed this up a hair further.']], [[' mins(items, n): 0.297000169754\nsorted(items)[:n]: 0.109999895096\nmins2(items)[:n]: 0.0309998989105\n']], ['Getting the lesser n elements of a list in Python'], 2], [(351456, 0), [['From  Dive into Python:  '], ['Example using urllib2 from the  Python Library Reference:  ']], [[' import urllib\nsock = urllib.urlopen("http://en.wikipedia.org/wiki/Python_(programming_language)")\nhtmlsource = sock.read()\nsock.close()\nprint htmlsource\n']], ['How do I get data from stdin using os.system()'], 2], [(351456, 1), [['Example using urllib2 from the  Python Library Reference:  '], ["Edit: Also you might want to take a look at  wget. \nEdit2: Added urllib2 example based on S.Lott's advice"]], [[" import urllib2\nf = urllib2.urlopen('http://www.python.org/')\nprint f.read(100)\n"]], ['How do I get data from stdin using os.system()'], 2], [(352340, 0), [['Fully supported in CherryPy using'], ['As documented in the  CherryPy docs - FileDownload :']], [[' from cherrypy.lib.static import serve_file\n']], ['Return file from python module'], 2], [(352340, 1), [['As documented in the  CherryPy docs - FileDownload :'], ['-10000']], [[' import glob\nimport os.path\n\nimport cherrypy\nfrom cherrypy.lib.static import serve_file\n\n\nclass Root:\n    def index(self, directory="."):\n        html = """<html><body><h2>Here are the files in the selected directory:</h2>\n        <a href="index?directory=%s">Up</a><br />\n        """ % os.path.dirname(os.path.abspath(directory))\n\n        for filename in glob.glob(directory + \'/*\'):\n            absPath = os.path.abspath(filename)\n            if os.path.isdir(absPath):\n                html += \'<a href="/index?directory=\' + absPath + \'">\' + os.path.basename(filename) + "</a> <br />"\n            else:\n                html += \'<a href="/download/?filepath=\' + absPath + \'">\' + os.path.basename(filename) + "</a> <br />"\n\n        html += """</body></html>"""\n        return html\n    index.exposed = True\n\nclass Download:\n        def index(self, filepath):\n        return serve_file(filepath, "application/x-download", "attachment")\n        index.exposed = True\n\nif __name__ == \'__main__\':\n    root = Root()\n    root.download = Download()\n    cherrypy.quickstart(root)\n']], ['Return file from python module'], 2], [(352837, 0), [["Here's mimetypes' version:"], ['Example:']], [[' #!/usr/bin/env python\n"""It is a `filename -> filename.ext` filter. \n\n   `ext` is mime-based.\n\n"""\nimport fileinput\nimport mimetypes\nimport os\nimport sys\nfrom subprocess import Popen, PIPE\n\nif len(sys.argv) > 1 and sys.argv[1] == \'--rename\':\n    do_rename = True\n    del sys.argv[1]\nelse:\n    do_rename = False    \n\nfor filename in (line.rstrip() for line in fileinput.input()):\n    output, _ = Popen([\'file\', \'-bi\', filename], stdout=PIPE).communicate()\n    mime = output.split(\';\', 1)[0].lower().strip()\n    ext = mimetypes.guess_extension(mime, strict=False)\n    if ext is None:\n        ext = os.path.extsep + \'undefined\'\n    filename_ext = filename + ext\n    print filename_ext\n    if do_rename:\n       os.rename(filename, filename_ext)\n']], ['How to add file extensions based on file type on Linux/Unix?'], 3], [(352837, 1), [['Example:'], ["Here's a snippet for old python's versions (not tested):"]], [[' #!/usr/bin/env python\n"""It is a `filename -> filename.ext` filter. \n\n   `ext` is mime-based.\n"""\n# Mapping of mime-types to extensions is taken form here:\n# http://as3corelib.googlecode.com/svn/trunk/src/com/adobe/net/MimeTypeMap.as\nmime2exts_list = [\n    ["application/andrew-inset","ez"],\n    ["application/atom+xml","atom"],\n    ["application/mac-binhex40","hqx"],\n    ["application/mac-compactpro","cpt"],\n    ["application/mathml+xml","mathml"],\n    ["application/msword","doc"],\n    ["application/octet-stream","bin","dms","lha","lzh","exe","class","so","dll","dmg"],\n    ["application/oda","oda"],\n    ["application/ogg","ogg"],\n    ["application/pdf","pdf"],\n    ["application/postscript","ai","eps","ps"],\n    ["application/rdf+xml","rdf"],\n    ["application/smil","smi","smil"],\n    ["application/srgs","gram"],\n    ["application/srgs+xml","grxml"],\n    ["application/vnd.adobe.apollo-application-installer-package+zip","air"],\n    ["application/vnd.mif","mif"],\n    ["application/vnd.mozilla.xul+xml","xul"],\n    ["application/vnd.ms-excel","xls"],\n    ["application/vnd.ms-powerpoint","ppt"],\n    ["application/vnd.rn-realmedia","rm"],\n    ["application/vnd.wap.wbxml","wbxml"],\n    ["application/vnd.wap.wmlc","wmlc"],\n    ["application/vnd.wap.wmlscriptc","wmlsc"],\n    ["application/voicexml+xml","vxml"],\n    ["application/x-bcpio","bcpio"],\n    ["application/x-cdlink","vcd"],\n    ["application/x-chess-pgn","pgn"],\n    ["application/x-cpio","cpio"],\n    ["application/x-csh","csh"],\n    ["application/x-director","dcr","dir","dxr"],\n    ["application/x-dvi","dvi"],\n    ["application/x-futuresplash","spl"],\n    ["application/x-gtar","gtar"],\n    ["application/x-hdf","hdf"],\n    ["application/x-javascript","js"],\n    ["application/x-koan","skp","skd","skt","skm"],\n    ["application/x-latex","latex"],\n    ["application/x-netcdf","nc","cdf"],\n    ["application/x-sh","sh"],\n    ["application/x-shar","shar"],\n    ["application/x-shockwave-flash","swf"],\n    ["application/x-stuffit","sit"],\n    ["application/x-sv4cpio","sv4cpio"],\n    ["application/x-sv4crc","sv4crc"],\n    ["application/x-tar","tar"],\n    ["application/x-tcl","tcl"],\n    ["application/x-tex","tex"],\n    ["application/x-texinfo","texinfo","texi"],\n    ["application/x-troff","t","tr","roff"],\n    ["application/x-troff-man","man"],\n    ["application/x-troff-me","me"],\n    ["application/x-troff-ms","ms"],\n    ["application/x-ustar","ustar"],\n    ["application/x-wais-source","src"],\n    ["application/xhtml+xml","xhtml","xht"],\n    ["application/xml","xml","xsl"],\n    ["application/xml-dtd","dtd"],\n    ["application/xslt+xml","xslt"],\n    ["application/zip","zip"],\n    ["audio/basic","au","snd"],\n    ["audio/midi","mid","midi","kar"],\n    ["audio/mpeg","mp3","mpga","mp2"],\n    ["audio/x-aiff","aif","aiff","aifc"],\n    ["audio/x-mpegurl","m3u"],\n    ["audio/x-pn-realaudio","ram","ra"],\n    ["audio/x-wav","wav"],\n    ["chemical/x-pdb","pdb"],\n    ["chemical/x-xyz","xyz"],\n    ["image/bmp","bmp"],\n    ["image/cgm","cgm"],\n    ["image/gif","gif"],\n    ["image/ief","ief"],\n    ["image/jpeg","jpg","jpeg","jpe"],\n    ["image/png","png"],\n    ["image/svg+xml","svg"],\n    ["image/tiff","tiff","tif"],\n    ["image/vnd.djvu","djvu","djv"],\n    ["image/vnd.wap.wbmp","wbmp"],\n    ["image/x-cmu-raster","ras"],\n    ["image/x-icon","ico"],\n    ["image/x-portable-anymap","pnm"],\n    ["image/x-portable-bitmap","pbm"],\n    ["image/x-portable-graymap","pgm"],\n    ["image/x-portable-pixmap","ppm"],\n    ["image/x-rgb","rgb"],\n    ["image/x-xbitmap","xbm"],\n    ["image/x-xpixmap","xpm"],\n    ["image/x-xwindowdump","xwd"],\n    ["model/iges","igs","iges"],\n    ["model/mesh","msh","mesh","silo"],\n    ["model/vrml","wrl","vrml"],\n    ["text/calendar","ics","ifb"],\n    ["text/css","css"],\n    ["text/html","html","htm"],\n    ["text/plain","txt","asc"],\n    ["text/richtext","rtx"],\n    ["text/rtf","rtf"],\n    ["text/sgml","sgml","sgm"],\n    ["text/tab-separated-values","tsv"],\n    ["text/vnd.wap.wml","wml"],\n    ["text/vnd.wap.wmlscript","wmls"],\n    ["text/x-setext","etx"],\n    ["video/mpeg","mpg","mpeg","mpe"],\n    ["video/quicktime","mov","qt"],\n    ["video/vnd.mpegurl","m4u","mxu"],\n    ["video/x-flv","flv"],\n    ["video/x-msvideo","avi"],\n    ["video/x-sgi-movie","movie"],\n    ["x-conference/x-cooltalk","ice"]]\n\n#NOTE: take only the first extension\nmime2ext = dict(x[:2] for x in mime2exts_list)\n\nif __name__ == \'__main__\':\n    import fileinput, os.path\n    from subprocess import Popen, PIPE\n\n    for filename in (line.rstrip() for line in fileinput.input()):\n        output, _ = Popen([\'file\', \'-bi\', filename], stdout=PIPE).communicate()\n        mime = output.split(\';\', 1)[0].lower().strip()\n        print filename + os.path.extsep + mime2ext.get(mime, \'undefined\')\n']], ['How to add file extensions based on file type on Linux/Unix?'], 3], [(352837, 2), [["Here's a snippet for old python's versions (not tested):"], ['It should work on Python 2.3.5 (I guess).']], [[" #NOTE: take only the first extension\nmime2ext = {}\nfor x in mime2exts_list:\n    mime2ext[x[0]] = x[1]\n\nif __name__ == '__main__':\n    import os\n    import sys\n\n    # this version supports only stdin (part of fileinput.input() functionality)\n    lines = sys.stdin.read().split('\\n')\n    for line in lines:\n        filename = line.rstrip()\n        output = os.popen('file -bi ' + filename).read()        \n        mime = output.split(';')[0].lower().strip()\n        try: ext = mime2ext[mime]\n        except KeyError:\n             ext = 'undefined'\n        print filename + '.' + ext\n"]], ['How to add file extensions based on file type on Linux/Unix?'], 3], [(354421, 0), [['Which calls PyNumber_Power (implemented in  Objects/abstract.c ):'], ['If you dig into long_pow, you can see that after vetting the arguments and doing a bit of set up, the heart of the exponentiation can be see here:']], [[' PyObject *\nPyNumber_Power(PyObject *v, PyObject *w, PyObject *z)\n{\n    return ternary_op(v, w, z, NB_SLOT(nb_power), "** or pow()");\n}\n']], ['How is ** implemented in Python?'], 2], [(354421, 1), [['If you dig into long_pow, you can see that after vetting the arguments and doing a bit of set up, the heart of the exponentiation can be see here:'], ['Which uses algorithms discussed in  Chapter 14.6  of the  Handbook of Applied Cryptography  which describes efficient exponentiation algorithms for arbitrary precision arithmetic.']], [[' if (Py_SIZE(b) <= FIVEARY_CUTOFF) {\n    /* Left-to-right binary exponentiation (HAC Algorithm 14.79) */\n    /* http://www.cacr.math.uwaterloo.ca/hac/about/chap14.pdf    */\n    for (i = Py_SIZE(b) - 1; i >= 0; --i) {\n        digit bi = b->ob_digit[i];\n\n        for (j = 1 << (PyLong_SHIFT-1); j != 0; j >>= 1) {\n            MULT(z, z, z)\n            if (bi & j)\n                MULT(z, a, z)\n        }\n    }\n}\nelse {\n    /* Left-to-right 5-ary exponentiation (HAC Algorithm 14.82) */\n    Py_INCREF(z);   /* still holds 1L */\n    table[0] = z;\n    for (i = 1; i < 32; ++i)\n        MULT(table[i-1], a, table[i])\n\n    for (i = Py_SIZE(b) - 1; i >= 0; --i) {\n        const digit bi = b->ob_digit[i];\n\n        for (j = PyLong_SHIFT - 5; j >= 0; j -= 5) {\n            const int index = (bi >> j) & 0x1f;\n            for (k = 0; k < 5; ++k)\n                MULT(z, z, z)\n            if (index)\n                MULT(z, table[index], z)\n        }\n    }\n}\n']], ['How is ** implemented in Python?'], 2], [(354755, 0), [['-10000'], ['or:']], [[' Comments.objects.filter(post=post).count()\n']], ['How can I get the number of records that reference a particular foreign key in Django?'], 2], [(354755, 1), [['or:'], ['-10000']], [[' post.comment_set.count()\n']], ['How can I get the number of records that reference a particular foreign key in Django?'], 2], [(356483, 0), [['-10000'], ['or, a bit shorter:']], [[' re.findall(r"Test([0-9.]*[0-9]+)", text)\n']], ['Python regex findall numbers and dots'], 3], [(356483, 1), [['or, a bit shorter:'], ['By the way - you must not escape the dot in a character class:']], [[' re.findall(r"Test([\\d.]*\\d+)", text)\n']], ['Python regex findall numbers and dots'], 3], [(356483, 2), [['By the way - you must not escape the dot in a character class:'], ['-10000']], [[' [\\.0-9]  // matches: 0 1 2 3 4 5 6 7 8 9 . \\\n[.0-9]   // matches: 0 1 2 3 4 5 6 7 8 9 .\n']], ['Python regex findall numbers and dots'], 3], [(359347, 0), [['Use the following in  subprocess.Popen'], ['Use """s, like this.']], [[' "command1; command2; command3"\n']], ['Execute Commands Sequentially in Python'], 3], [(359347, 1), [['Use """s, like this.'], ['Or, if you must do things piecemeal, you have to do something like this.']], [[' """\ncommand1\ncommand2\ncommand3\n"""\n']], ['Execute Commands Sequentially in Python'], 3], [(359347, 2), [['Or, if you must do things piecemeal, you have to do something like this.'], ['That will allow you to build a sequence of commands.']], [[' class Command( object ):\n    def __init__( self, text ):\n        self.text = text\n    def execute( self ):\n        self.proc= subprocess.Popen( ... self.text ... )\n        self.proc.wait()\n\nclass CommandSequence( Command ):\n    def __init__( self, *steps ):\n        self.steps = steps\n    def execute( self ):\n        for s in self.steps:\n            s.execute()\n']], ['Execute Commands Sequentially in Python'], 3], [(359498, 0), [['you should be able to do it by disposing the object'], ['So the only way I see, a really,  really non-clean way , is to system dependently dlclose the handle, but it is very very unclean, as moreover ctypes keeps internally references to this handle. So unloading takes something of the form:']], [[" mydll = ctypes.CDLL('...')\ndel mydll\nmydll = ctypes.CDLL('...')\n"]], ['How can I unload a DLL using ctypes in Python?'], 3], [(359498, 1), [['So the only way I see, a really,  really non-clean way , is to system dependently dlclose the handle, but it is very very unclean, as moreover ctypes keeps internally references to this handle. So unloading takes something of the form:'], ["It's so unclean that I only checked it works using:"]], [[" mydll = ctypes.CDLL('./mylib.so')\nhandle = mydll._handle\ndel mydll\nwhile isLoaded('./mylib.so'):\n    dlclose(handle)\n"]], ['How can I unload a DLL using ctypes in Python?'], 3], [(359498, 2), [["It's so unclean that I only checked it works using:"], ['-10000']], [[' def isLoaded(lib):\n   libp = os.path.abspath(lib)\n   ret = os.system("lsof -p %d | grep %s > /dev/null" % (os.getpid(), libp))\n   return (ret == 0)\n\ndef dlclose(handle)\n   libdl = ctypes.CDLL("libdl.so")\n   libdl.dlclose(handle)\n']], ['How can I unload a DLL using ctypes in Python?'], 3], [(359903, 0), [["Use list.count to get the number of items in a list that match a value.  If that number doesn't match the number of items, you know they aren't all the same."], ['Which would look like...']], [[' if a.count( "foo" ) != len(a)\n']], ['Comparing List of Arguments to it self?'], 2], [(359903, 1), [['Which would look like...'], ['...in production code.']], [[' if a.count( a[0] ) != len(a)\n']], ['Comparing List of Arguments to it self?'], 2], [(362426, 0), [['argparse  is perfect for this, specifically  "sub-commands"  and positional args'], ['This can be used like so:']], [[' import argparse\n\n\ndef main():\n    arger = argparse.ArgumentParser()\n\n    # Arguments for top-level, e.g "subcmds.py -v"\n    arger.add_argument("-v", "--verbose", action="count", default=0)\n\n    subparsers = arger.add_subparsers(dest="command")\n\n    # Make parser for "subcmds.py info ..."\n    info_parser = subparsers.add_parser("info")\n    info_parser.add_argument("-m", "--moo", dest="moo")\n\n    # Make parser for "subcmds.py create ..."\n    create_parser = subparsers.add_parser("create")\n    create_parser.add_argument("name")\n    create_parser.add_argument("additional", nargs="*")\n\n    # Parse\n    opts = arger.parse_args()\n\n    # Print option object for debug\n    print opts\n\n    if opts.command == "info":\n        print "Info command"\n        print "--moo was %s" % opts.moo\n\n    elif opts.command == "create":\n        print "Creating %s" % opts.name\n        print "Additional: %s" % opts.additional\n\n    else:\n        # argparse will error on unexpected commands, but\n        # in case we mistype one of the elif statements...\n        raise ValueError("Unhandled command %s" % opts.command)\n\n\nif __name__ == \'__main__\':\n    main()\n']], ['Implementing a "[command] [action] [parameter]" style command-line interfaces?'], 2], [(362426, 1), [['This can be used like so:'], ['-10000']], [[" $ python subcmds.py create myapp v1 blah\nNamespace(additional=['v1', 'blah'], command='create', name='myapp', verbose=0)\nCreating myapp\nAdditional: ['v1', 'blah']\n$ python subcmds.py info --moo\nusage: subcmds.py info [-h] [-m MOO]\nsubcmds.py info: error: argument -m/--moo: expected one argument\n$ python subcmds.py info --moo 1\nNamespace(command='info', moo='1', verbose=0)\nInfo command\n--moo was 1\n"]], ['Implementing a "[command] [action] [parameter]" style command-line interfaces?'], 2], [(363944, 0), [['-10000'], ['-10000']], [['Python 2.6+ next(iter(your_list or []), None)\n']], ['Python idiom to return first item or None'], 6], [(363944, 1), [['-10000'], ['Example:']], [['Python 2.4 def get_first(iterable, default=None):\n    if iterable:\n        for item in iterable:\n            return item\n    return default\n']], ['Python idiom to return first item or None'], 6], [(363944, 2), [['Example:'], ['Another option is to inline the above function:']], [[' x = get_first(get_first_list())\nif x:\n    ...\ny = get_first(get_second_list())\nif y:\n    ...\n']], ['Python idiom to return first item or None'], 6], [(363944, 3), [['Another option is to inline the above function:'], ['To avoid  break  you could write:']], [[' for x in get_first_list() or []:\n    # process x\n    break # process at most one item\nfor y in get_second_list() or []:\n    # process y\n    break\n']], ['Python idiom to return first item or None'], 6], [(363944, 4), [['To avoid  break  you could write:'], ['Where:']], [[' for x in yield_first(get_first_list()):\n    x # process x\nfor y in yield_first(get_second_list()):\n    y # process y\n']], ['Python idiom to return first item or None'], 6], [(363944, 5), [['Where:'], ['-10000']], [[' def yield_first(iterable):\n    for item in iterable or []:\n        yield item\n        return\n']], ['Python idiom to return first item or None'], 6], [(365924, 0), [['Simple version, in pseudocode:'], ['EDIT: You can also use a simple while construct:']], [[' iterations = 0;\ntmp = origin_matrix;\n\ndo\n    tmp = operation(tmp);\n    iterations += 1;\nwhile tmp != origin_matrix;\n\nreturn iterations;\n']], ['how to determine the period of a function'], 3], [(365924, 1), [['EDIT: You can also use a simple while construct:'], ["For functionA, you'd use a for loop, most likely.  Pseudocode:"]], [[' while True:\n    tmp = operation(tmp)\n    iterations += 1\n\n    if tmp == origin_matrix:\n        break  # Or you could return here.\n']], ['how to determine the period of a function'], 3], [(365924, 2), [["For functionA, you'd use a for loop, most likely.  Pseudocode:"], ['-10000']], [[' matrix = origin_matrix\n\nfor i in range(N_times):\n    matrix = operation(matrix)\n\nreturn matrix\n']], ['how to determine the period of a function'], 3], [(367586, 0), [['-10000'], ['Note: this assumes lowercase and uppercase characters are desired. If lowercase only then change the second list comprehension to read:']], [[' #!/usr/bin/python\n\nimport random\nimport string\n\ndigits = "".join( [random.choice(string.digits) for i in xrange(8)] )\nchars = "".join( [random.choice(string.letters) for i in xrange(15)] )\nprint digits + chars\n']], ['Generating random text strings of a given pattern'], 2], [(367586, 1), [['Note: this assumes lowercase and uppercase characters are desired. If lowercase only then change the second list comprehension to read:'], ['Obviously for uppercase only you can just flip that around so the slice is [26:] instead of the other way around.']], [[' chars = "".join( [random.choice(string.letters[:26]) for i in xrange(15)] )\n']], ['Generating random text strings of a given pattern'], 2], [(368545, 0), [['just indent your code correctly:'], ['Following your idea to use an infinite loop, this is the best way to write it:']], [[' def determine_period(universe_array):\n    period=0\n    tmp=universe_array\n    while True:\n        tmp=apply_rules(tmp)#aplly_rules is a another function\n        period+=1\n        if numpy.array_equal(tmp,universe_array) is True:\n            return period\n        if period>12:  #i wrote this line to stop it..but seems its doesnt work....help..\n            return 0\n        else:   \n            return period\n']], ['How can I stop a While loop?'], 2], [(368545, 1), [['Following your idea to use an infinite loop, this is the best way to write it:'], ['-10000']], [[' def determine_period(universe_array):\n    period=0\n    tmp=universe_array\n    while True:\n        tmp=apply_rules(tmp)#aplly_rules is a another function\n        period+=1\n        if numpy.array_equal(tmp,universe_array) is True:\n            break\n        if period>12:  #i wrote this line to stop it..but seems its doesnt work....help..\n            period = 0\n            break\n\n    return period\n']], ['How can I stop a While loop?'], 2], [(369261, 0), [['Firstly,  r._dtstart = list(r)[-1]  will give you the last date in the original sequence of dates. If you use that, without modification, for the beginning of a new sequence, you will end up with a duplicate date, i.e. the last date of the first sequence will be the same as the first date of the new sequence, which is probably not what you want:'], ['Instead, do something like this:']], [[' >>> from dateutil.rrule import *\n>>> import datetime\n\n>>> r = rrule(WEEKLY, byweekday=SA, count=10, dtstart=datetime.datetime(2008,10,01))\n>>> print list(r)\n[datetime.datetime(2008, 10, 4, 0, 0), datetime.datetime(2008, 10, 11, 0, 0), datetime.datetime(2008, 10, 18, 0, 0), datetime.datetime(2008, 10, 25, 0, 0), datetime.datetime(2008, 11, 1, 0, 0), datetime.datetime(2008, 11, 8, 0, 0), datetime.datetime(2008, 11, 15, 0, 0), datetime.datetime(2008, 11, 22, 0, 0), datetime.datetime(2008, 11, 29, 0, 0), datetime.datetime(2008, 12, 6, 0, 0)]\n>>> r._dtstart = r[-1]\n>>> print list(r)\n[datetime.datetime(2008, 12, 6, 0, 0), datetime.datetime(2008, 12, 13, 0, 0), datetime.datetime(2008, 12, 20, 0, 0), datetime.datetime(2008, 12, 27, 0, 0), datetime.datetime(2009, 1, 3, 0, 0), datetime.datetime(2009, 1, 10, 0, 0), datetime.datetime(2009, 1, 17, 0, 0), datetime.datetime(2009, 1, 24, 0, 0), datetime.datetime(2009, 1, 31, 0, 0), datetime.datetime(2009, 2, 7, 0, 0)]\n']], ['using existing rrule to generate a further set of occurrences'], 2], [(369261, 1), [['Instead, do something like this:'], ['This codes does not access any private attributes of rrule (although you might have to look at  _byweekday ).']], [[' >>> r = rrule(WEEKLY, byweekday=SA, count=10, dtstart=datetime.datetime(2008,10,01))\n>>> r2 = rrule(WEEKLY, byweekday=SA, count=r.count(), dtstart=r[-1] + datetime.timedelta(days=1))\n>>> print list(r)\n[datetime.datetime(2008, 10, 4, 0, 0), datetime.datetime(2008, 10, 11, 0, 0), datetime.datetime(2008, 10, 18, 0, 0), datetime.datetime(2008, 10, 25, 0, 0), datetime.datetime(2008, 11, 1, 0, 0), datetime.datetime(2008, 11, 8, 0, 0), datetime.datetime(2008, 11, 15, 0, 0), datetime.datetime(2008, 11, 22, 0, 0), datetime.datetime(2008, 11, 29, 0, 0), datetime.datetime(2008, 12, 6, 0, 0)]\n>>> print list(r2)\n[datetime.datetime(2008, 12, 13, 0, 0), datetime.datetime(2008, 12, 20, 0, 0), datetime.datetime(2008, 12, 27, 0, 0), datetime.datetime(2009, 1, 3, 0, 0), datetime.datetime(2009, 1, 10, 0, 0), datetime.datetime(2009, 1, 17, 0, 0), datetime.datetime(2009, 1, 24, 0, 0), datetime.datetime(2009, 1, 31, 0, 0), datetime.datetime(2009, 2, 7, 0, 0), datetime.datetime(2009, 2, 14, 0, 0)]\n']], ['using existing rrule to generate a further set of occurrences'], 2], [(372042, 0), [["What you'll see sometimes is the following:"], ['Because Python has multiple inheritance, you may also see something like this']], [[' class Abstract1( object ):\n    """Some description that tells you it\'s abstract,\n    often listing the methods you\'re expected to supply."""\n    def aMethod( self ):\n        raise NotImplementedError( "Should have implemented this" )\n']], ['Difference between abstract class and interface in Python'], 2], [(372042, 1), [['Because Python has multiple inheritance, you may also see something like this'], ['This uses a kind of abstract superclass with mixins to create concrete subclasses that are disjoint.']], [[' class SomeAbstraction( object ):\n    pass # lots of stuff - but missing something\n\nclass Mixin1( object ):\n    def something( self ):\n        pass # one implementation\n\nclass Mixin2( object ):\n    def something( self ):\n        pass # another\n\nclass Concrete1( SomeAbstraction, Mixin1 ):\n    pass\n\nclass Concrete2( SomeAbstraction, Mixin2 ):\n    pass\n']], ['Difference between abstract class and interface in Python'], 2], [(372102, 0), [['After a quick test and visit to  PEP 0264: Defining Python Source Code Encodings , I see you may need to tell Python the whole file is UTF-8 encoded by adding adding a comment like this to the first line.'], ["Here's the test file I created and ran on Python 2.5.1 / OS X 10.5.6"]], [[' # encoding: utf-8\n']], ['UTF in Python Regex'], 2], [(372102, 1), [["Here's the test file I created and ran on Python 2.5.1 / OS X 10.5.6"], ['-10000']], [[' # encoding: utf-8\nimport re\nx = re.compile("–") \nprint x.search("xxx–x").start()\n']], ['UTF in Python Regex'], 2], [(377204, 0), [['Store the initial width of column.'], ['Register handler for update UI event.']], [[' self.SetColumnWidth(colNum, wx.LIST_AUTOSIZE_USEHEADER)\n\nself.__columnWidth[colNum] = self.GetColumnWidth(c)\n']], ['How to set and preserve minimal width?'], 3], [(377204, 1), [['Register handler for update UI event.'], ['And write the handler function.']], [[' wx.EVT_UPDATE_UI(self, self.GetId(), self.onUpdateUI)\n']], ['How to set and preserve minimal width?'], 3], [(377204, 2), [['And write the handler function.'], ["The  self.GetColumnCount() - 1  is intentional, so the last column is not resized. I know this is not an elegant solution, but it works well enough for me - you can not make columns too small by double clicking on dividers (in fact - you can't do it at all) and double-clicking on the divider after last column resizes the last column to fit list control width. "]], [[' def onUpdateUI(self, evt):\n    for colNum in xrange(0, self.GetColumnCount()-1):\n        if self.GetColumnWidth(colNum) < self.__columnWidth[colNum]:\n            self.SetColumnWidth(colNum, self.__columnWidth[colNum])\n    evt.Skip()\n']], ['How to set and preserve minimal width?'], 3], [(378157, 0), [['repeating your address 3 times with postcode PA23 6NH, PA2 6NH and PA2Q 6NH as test for you pattern and using the regex from wikipedia against yours, the code is..'], ['the result is ']], [[' import re\n\ns="123 Some Road Name\\nTown, City\\nCounty\\nPA23 6NH\\n123 Some Road Name\\nTown, City"\\\n    "County\\nPA2 6NH\\n123 Some Road Name\\nTown, City\\nCounty\\nPA2Q 6NH"\n\n#custom                                                                                                                                               \nprint re.findall(r\'\\b[A-Z]{1,2}[0-9][A-Z0-9]? [0-9][ABD-HJLNP-UW-Z]{2}\\b\', s)\n\n#regex from #http://en.wikipedia.orgwikiUK_postcodes#Validation                                                                                            \nprint re.findall(r\'[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][A-Z]{2}\', s)\n']], ['Python, Regular Expression Postcode search'], 2], [(378157, 1), [['the result is '], ["both the regex's give the same result."]], [[" ['PA23 6NH', 'PA2 6NH', 'PA2Q 6NH']\n['PA23 6NH', 'PA2 6NH', 'PA2Q 6NH']\n"]], ['Python, Regular Expression Postcode search'], 2], [(379995, 0), [['(Also, class names should be uppercase:  Graphics ).'], ["Here's an example of getting or setting an attribute of an object."]], [[' class Graphics:\nSCREEN_SIZE = (640, 480)\ndef __init__(self, Fullscreen = False, Width = 640, Height = 480):\n    print "Graphics Init"\n    self.SCREEN_SIZE = (Width, Height)\n    pygame.init()\n    if Fullscreen:\n        self.screen = pygame.display.set_mode(SCREEN_SIZE, FULLSCREEN, 32)\n        print "Fullscreen Initialized"\n    else:\n        self.screen = pygame.display.set_mode(SCREEN_SIZE, 0, 32)\n        print "Non-Fullscreen Initialized"\n']], ["How do you make a class attribute that isn't a standard data type?"], 2], [(379995, 1), [["Here's an example of getting or setting an attribute of an object."], ["Note that we created an object ( g ) from our class ( Graphics ).  We don't reference the class very often at all.  Almost the only time a class name is used is to create object instances ( Graphics() ).  We rarely say  Graphics.this  or  Graphics.that  to refer to attributes of the class itself."]], [[' g= Graphics() # create an object\n# access the object\'s instance variables\nprint "screen", g.screen\ng.screen= pygame.display.set_mode(SCREEN_SIZE, FULLSCREEN, 32)\n']], ["How do you make a class attribute that isn't a standard data type?"], 2], [(380420, 0), [['when checking for which mousebutton you press, use the button property of the event.'], ["However, if you don't want to use an event handler, you can let an update function check for input with:"]], [[" import pygame\nfrom pygame.locals import * #This lets you use pygame's constants directly.\n\nfor event in pygame.event.get():\n    if event.type == MOUSEBUTTONDOWN:  #Better to seperate to a new if statement aswell, since there's more buttons that can be clicked and makes for cleaner code.\n        if event.button == 1:\n            for object in clickableObjectsList:\n                object.clickCheck(event.pos)\n"]], ['How do I respond to mouse clicks on sprites in PyGame?'], 2], [(380420, 1), [["However, if you don't want to use an event handler, you can let an update function check for input with:"], ['This is a bad idea for larger projects, since it can create hard to find bugs. Better just keeping events in one place. Smaller games, like simple arcade games might make more sense using the probing style though.']], [[' pygame.mouse.get_pos() \npygame.mouse.get_pressed().\n']], ['How do I respond to mouse clicks on sprites in PyGame?'], 2], [(380734, 0), [["Your structure is unpleasantly irregular.  Here's a version with a  Visitor  function that traverses the  attrs  sub-dictionaries."], ["You'd use it like this."]], [[" def walkDict( aDict, visitor, path=() ):\n    for  k in aDict:\n        if k == 'attrs':\n            visitor( path, aDict[k] )\n        elif type(aDict[k]) != dict:\n            pass\n        else:\n            walkDict( aDict[k], visitor, path+(k,) )\n\ndef printMe( path, element ):\n    print path, element\n\ndef filterFor( path, element ):\n    if element['id'] == '4130-2-2':\n        print path, element\n"]], ['How to do this - python dictionary traverse and search'], 3], [(380734, 1), [["You'd use it like this."], ["You'd use it in a for loop."]], [[' walkDict( myDict, filterFor )\n']], ['How to do this - python dictionary traverse and search'], 3], [(380734, 2), [["You'd use it in a for loop."], ['-10000']], [[' for path, attrDict in walkDictIter( aDict ):\n    # process attrDict...\n']], ['How to do this - python dictionary traverse and search'], 3], [(382624, 0), [['For example the measured function (used as a decorator) is probably implemented like this...'], ['The decorator syntax is just a shorter and neater way of doing the following:']], [[' import time\n\ndef measured(orig_function):\n    # When you decorate a function, the decorator func is called\n    # with the original function as the first argument.\n    # You return a new, modified function. This returned function\n    # is what the to-be-decorated function becomes.\n\n    print "INFO: This from the decorator function"\n    print "INFO: I am about to decorate %s" % (orig_function)\n\n    # This is what some_func will become:\n    def newfunc(*args, **kwargs):\n        print "INFO: This is the decorated function being called"\n\n        start = time.time()\n\n        # Execute the old function, passing arguments\n        orig_func_return = orig_function(*args, **kwargs)\n        end = time.time()\n\n        print "Function took %s seconds to execute" % (end - start)\n        return orig_func_return # return the output of the original function\n\n    # Return the modified function, which..\n    return newfunc\n\n@measured\ndef some_func(arg1):\n    print "This is my original function! Argument was %s" % arg1\n\n# We call the now decorated function..\nsome_func(123)\n\n#.. and we should get (minus the INFO messages):\nThis is my original function! Argument was 123\n# Function took 7.86781311035e-06 to execute\n']], ['Is @measured a standard decorator? What library is it in?'], 3], [(382624, 1), [['The decorator syntax is just a shorter and neater way of doing the following:'], ['There are some decorators included with Python, for example  staticmethod  - but  measured  is not one of them:']], [[' def some_func():\n    print "This is my original function!"\n\nsome_func = measured(some_func)\n']], ['Is @measured a standard decorator? What library is it in?'], 3], [(382624, 2), [['There are some decorators included with Python, for example  staticmethod  - but  measured  is not one of them:'], ["Check the projects  import  statements to see where the function or class is coming from. If it uses  from blah import *  you'll need to check all of those files (which is why  import *  is discouraged), or you could just do something like  grep -R def measured *"]], [[' >>> type(measured)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nNameError: name \'measured\' is not defined\n']], ['Is @measured a standard decorator? What library is it in?'], 3], [(383010, 0), [['According to the  SANE documentation ,  SANE_get_devices()  will store a pointer to a NULL-terminated list of pointers to SANE devices if successful.  Thus, the proper way to call it is to declare a variable of type  const SANE_Device **  (i.e. a pointer to a pointer to a constant `SANE_Device), and pass in the address of that pointer:'], ["Now, this is how you would call it from C code.  I've skimmed the documentation on ctypes, and it appears that you want to use the  byref  function to pass the argument by reference, and that the value you pass should be a POINTER to a POINTER to a SANE_Device.  Note the distinction between  pointer  and  POINTER : the former creates a pointer to an  instance , whereas the latter creates a pointer to a  type .  Thus, I'm guessing the following code will work:"]], [[" const SANE_Device **device_list;\nSANE_get_devices(&device_list, local_only);  // check return value\n// Now, device_list[0] points to the first device,\n// device_list[1] points to the second device, etc.\n// Once you hit a NULL pointer, that's the end of the list:\nint num_devices = 0;\nwhile(device_list[num_devices] != NULL)\n    num_devices++;\n// num_devices now stores the total number of devices\n"]], ['Using Python\'s ctypes to pass/read a parameter declared as "struct_name *** param_name"?'], 2], [(383010, 1), [["Now, this is how you would call it from C code.  I've skimmed the documentation on ctypes, and it appears that you want to use the  byref  function to pass the argument by reference, and that the value you pass should be a POINTER to a POINTER to a SANE_Device.  Note the distinction between  pointer  and  POINTER : the former creates a pointer to an  instance , whereas the latter creates a pointer to a  type .  Thus, I'm guessing the following code will work:"], ["[Edit] I've tested the above code using a very simple placeholder for  SANE_get_devices , and it works."]], [[' // SANE_Device declared as you had it\ndevices = POINTER(POINTER(SANE_Device))()  // devices is a NULL pointer to a pointer to a SANE_Device\nstatus = libsane.sane_get_devices(byref(devices), c_int(0))\nif status != successful:   // replace this by whatever success is\n    print error\nelse:\n    num_devices = 0\n    // Convert NULL-terminated C list into Python list\n    device_list = []\n    while devices[num_devices]:\n        device_list.append(devices[num_devices].contents)  // use .contents here since each entry in the C list is itself a pointer\n        num_devices += 1\n    print device_list\n']], ['Using Python\'s ctypes to pass/read a parameter declared as "struct_name *** param_name"?'], 2], [(383623, 0), [['The built-in function  any  does what you want:'], ['any  has the advantage over  reduce  of shortcutting the test for later items in the sequence once it finds a true value. This can be very handy if the sequence is a generator with an expensive operation behind it. For example:']], [[' >>> any([True, True, False])\nTrue\n>>> any([False, False, False])\nFalse\n>>> any([False, False, True])\nTrue\n']], ["How do you apply 'or' to all values of a list in Python?"], 3], [(383623, 1), [['any  has the advantage over  reduce  of shortcutting the test for later items in the sequence once it finds a true value. This can be very handy if the sequence is a generator with an expensive operation behind it. For example:'], ["If your Python's version doesn't have  any() ,  all()  builtins then they are easily implemented as  Guido van Rossum suggested :"]], [[' >>> def iam(result):\n...  # Pretend this is expensive.\n...  print "iam(%r)" % result\n...  return result\n... \n>>> any((iam(x) for x in [False, True, False]))\niam(False)\niam(True)\nTrue\n>>> reduce(lambda x,y: x or y, (iam(x) for x in [False, True, False]))\niam(False)\niam(True)\niam(False)\nTrue\n']], ["How do you apply 'or' to all values of a list in Python?"], 3], [(383623, 2), [["If your Python's version doesn't have  any() ,  all()  builtins then they are easily implemented as  Guido van Rossum suggested :"], ['-10000']], [[' def any(S):\n    for x in S:\n        if x:\n            return True\n    return False\n\ndef all(S):\n    for x in S:\n        if not x:\n            return False\n    return True\n']], ["How do you apply 'or' to all values of a list in Python?"], 3], [(384759, 0), [["You're not saying how exactly  putdata()  is not behaving. I'm assuming you're doing "], ["This is because  putdata  expects a sequence of tuples and you're giving it a numpy array. This"]], [[' >>> pic.putdata(a)\nTraceback (most recent call last):\n  File "...blablabla.../PIL/Image.py", line 1185, in putdata\n    self.im.putdata(data, scale, offset)\nSystemError: new style getargs format but argument is not a tuple\n']], ['PIL and numpy'], 3], [(384759, 1), [["This is because  putdata  expects a sequence of tuples and you're giving it a numpy array. This"], ['As of PIL 1.1.6, the  "proper" way to convert between images and numpy arrays  is simply']], [[' >>> data = list(tuple(pixel) for pixel in pix)\n>>> pic.putdata(data)\n']], ['PIL and numpy'], 3], [(384759, 2), [['As of PIL 1.1.6, the  "proper" way to convert between images and numpy arrays  is simply'], ['although the resulting array is in a different format than yours (3-d array or rows/columns/rgb in this case).']], [[' >>> pix = numpy.array(pic)\n']], ['PIL and numpy'], 3], [(386753, 0), [['You probably want to use the struct module, e.g.'], ["EDIT #2 : If you don't mind using the array module as well, here is an alternate method that obviates the need for a list comprehension. Thanks to @ JimB  for pointing out that unpack can operate on arrays as well."]], [[' import struct\n\nresponse = (0, 0, 117, 143, 6)\nstruct.unpack(">I", \'\'.join([chr(x) for x in response[:-1]]))\n']], ['How do I convert part of a python tuple (byte array) into an integer'], 2], [(386753, 1), [["EDIT #2 : If you don't mind using the array module as well, here is an alternate method that obviates the need for a list comprehension. Thanks to @ JimB  for pointing out that unpack can operate on arrays as well."], ['-10000']], [[" import struct\nfrom array import array\n\nresponse = (0, 0, 117, 143, 6)\nbytes = array('B', response[:-1])\nstruct.unpack('>I', bytes)\n"]], ['How do I convert part of a python tuple (byte array) into an integer'], 2], [(386862, 0), [['As with many of the Project Euler problems, the trick is to find a technique that reduces the brute force solution into something more straight forward:'], ['So,']], [[' A = pqr and \n1/A = 1/p + 1/q + 1/r\n']], ['Finding Integers With A Certain Property - Project Euler Problem 221'], 4], [(386862, 1), [['So,'], ['There exists k ,  1 <= k <= p']], [[' pq + qr + rp = 1  or  -r = (pq - 1)/(p + q)\n']], ['Finding Integers With A Certain Property - Project Euler Problem 221'], 4], [(386862, 2), [['There exists k ,  1 <= k <= p'], ['But r is an integer, so k divides p^2 + 1']], [[' -q = p + k\n-r = (-p(p + k) – 1) / (p + -p – k)  = (p^2 + 1)/k + p\n']], ['Finding Integers With A Certain Property - Project Euler Problem 221'], 4], [(386862, 3), [['But r is an integer, so k divides p^2 + 1'], ['So to compute A we need to iterate over p, and where k can only take values which are divisors of p squared plus 1.']], [[' pqr = p(p + q)((p^2 + 1)/k + p)\n']], ['Finding Integers With A Certain Property - Project Euler Problem 221'], 4], [(387606, 0), [['Use  python-mysql . It is a  dbapi-compatible  module that lets you talk to the database.'], ['If you want something more high-level, consider using  SQLAlchemy  as a layer. It could allow you to do: ']], [[' import MySQLdb\n\nuser_input = raw_input("Please enter barcode and press Enter button: ")\n\ndb = MySQLdb.connect(passwd="moonpie",db="thangs")\nmycursor = db.cursor()\nmycursor.execute("""SELECT name, price FROM Product\n                 WHERE barcode = %s""", (user_input,))\n\n# calls fetchone until None is returned (no more rows)\nfor row in iter(mycursor.fetchone, None):\n    print row\n']], ['Using user input to find information in a Mysql database'], 2], [(387606, 1), [['If you want something more high-level, consider using  SQLAlchemy  as a layer. It could allow you to do: '], ['-10000']], [[' product = session.query(Product).filter(Product.barcode == user_input).scalar()\nprint product.name, product.price\n']], ['Using user input to find information in a Mysql database'], 2], [(387991, 0), [['Step 1 - How would you write this in a view function?'], ['Step 2 - Convert this into template syntax.']], [[' for p in Person.objects.all():\n    print "person", p\n    for h in p.home_address_set.all():\n         print " home", h\n         for ph in h.phone_set.all():\n             print "  phone", ph\n']], ['printing a list of persons with more than one home, each home with more than one phone number'], 2], [(387991, 1), [['Step 2 - Convert this into template syntax.'], ['The results should be the same as your view function.']], [[' {% for p on people %}\n    {% for h in p.home_address_set.all %}\n        {% fpr ph in h.phone_set.all %}\n        {% endfor %}\n    {% endfor %}\n{% endfor %} \n']], ['printing a list of persons with more than one home, each home with more than one phone number'], 2], [(388069, 0), [['File: appwrapper.py'], ['What "direct import" means.  You can examine the contents of  __future__ .  You\'re still bound by the fact the a  from __future__ import print_function  is information to the compiler, but you can poke around before importing the module that does the real work.']], [[' import sys\nmajor, minor, micro, releaselevel, serial = sys.version_info\nif (major,minor) <= (2,5):\n    # provide advice on getting version 2.6 or higher.\n    sys.exit(2)\nimport app\napp.main()\n']], ['How to gracefully deal with failed future feature (__future__) imports due to old interpreter version?'], 2], [(388069, 1), [['What "direct import" means.  You can examine the contents of  __future__ .  You\'re still bound by the fact the a  from __future__ import print_function  is information to the compiler, but you can poke around before importing the module that does the real work.'], ['-10000']], [[' import __future__, sys\nif hasattr(__future__, \'print_function\'): \n    # Could also check sys.version_info >= __future__. print_function.optional\n    import app\n    app.main()\nelse:\n    print "instructions for upgrading"\n']], ['How to gracefully deal with failed future feature (__future__) imports due to old interpreter version?'], 2], [(389945, 0), [['Perl has this'], ['In Python, it would be']], [[" %config = (\n    'color' => 'red',\n    'numbers' => [5, 8],\n    qr/^spam/ => 'eggs'\n);\n"]], ['How can I read Perl data structures from Python?'], 4], [(389945, 1), [['In Python, it would be'], ["However, Python's built-in  dict  doesn't do anything unusual with a regex as a hash key.  For that, you'd have to write your own subclass of  dict , and override  __getitem__  to check REGEX keys separately."]], [[' config = {\n    \'color\' : \'red\',\n    \'numbers\' : [5, 8],\n    re.compile( "^spam" ) : \'eggs\'\n}\n']], ['How can I read Perl data structures from Python?'], 4], [(389945, 2), [["However, Python's built-in  dict  doesn't do anything unusual with a regex as a hash key.  For that, you'd have to write your own subclass of  dict , and override  __getitem__  to check REGEX keys separately."], ["Here's the example of using a Perl-like dict."]], [[' class PerlLikeDict( dict ):\n    pattern_type= type(re.compile(""))\n    def __getitem__( self, key ):\n        if key in self:\n            return super( PerlLikeDict, self ).__getitem__( key )\n        for k in self:\n            if type(k) == self.pattern_type:\n                if k.match(key):\n                    return self[k]\n        raise KeyError( "key %r not found" % ( key, ) )\n']], ['How can I read Perl data structures from Python?'], 4], [(389945, 3), [["Here's the example of using a Perl-like dict."], ['-10000']], [[' >>> pat= re.compile( "hi" )\n>>> a = { pat : \'eggs\' } # native dict, no features.\n>>> x=PerlLikeDict( a )\n>>> x[\'b\']= \'c\'\n>>> x\n{<_sre.SRE_Pattern object at 0x75250>: \'eggs\', \'b\': \'c\'}\n>>> x[\'b\']\n\'c\'\n>>> x[\'ji\']\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "<stdin>", line 10, in __getitem__\nKeyError: "key \'ji\' not found"\n>>> x[\'hi\']\n\'eggs\'\n']], ['How can I read Perl data structures from Python?'], 4], [(391879, 0), [['Classes in your package directory can then be imported using syntax like:'], ['Within  __init__.py , you may create an  __all__  array that defines  from package import *  behavior:']], [[' from package import class\nimport package.class\n']], ['Organising my Python project'], 2], [(391879, 1), [['Within  __init__.py , you may create an  __all__  array that defines  from package import *  behavior:'], ['And here is  way more information than you even want to know about packages in Python']], [[' # name1 and name2 will be available in calling module\'s namespace \n# when using "from package import *" syntax\n__all__ = [\'name1\', \'name2\'] \n']], ['Organising my Python project'], 2], [(392160, 0), [['I have a class that handles non-interactive plotting, as a frontend to Matplotlib.  However, on occasion one wants to do interactive plotting.  With only a couple functions I found that I was able to increment the figure count, call draw manually, etc, but I needed to do these before and after every plotting call.  So to create both an interactive plotting wrapper and an offscreen plotting wrapper, I found it was more efficient to do this via metaclasses, wrapping the appropriate methods, than to do something like:'], ["This method doesn't keep up with API changes and so on, but one that iterates over the class attributes in  __init__  before re-setting the class attributes is more efficient and keeps things up to date:"]], [[' class PlottingInteractive:\n    add_slice = wrap_pylab_newplot(add_slice)\n']], ['What are your (concrete) use-cases for metaclasses in Python?'], 2], [(392160, 1), [["This method doesn't keep up with API changes and so on, but one that iterates over the class attributes in  __init__  before re-setting the class attributes is more efficient and keeps things up to date:"], ["Of course, there might be better ways to do this, but I've found this to be effective.  Of course, this could also be done in  __new__  or  __init__ , but this was the solution I found the most straightforward."]], [[' class _Interactify(type):\n    def __init__(cls, name, bases, d):\n        super(_Interactify, cls).__init__(name, bases, d)\n        for base in bases:\n            for attrname in dir(base):\n                if attrname in d: continue # If overridden, don\'t reset\n                attr = getattr(cls, attrname)\n                if type(attr) == types.MethodType:\n                    if attrname.startswith("add_"):\n                        setattr(cls, attrname, wrap_pylab_newplot(attr))\n                    elif attrname.startswith("set_"):\n                        setattr(cls, attrname, wrap_pylab_show(attr))\n']], ['What are your (concrete) use-cases for metaclasses in Python?'], 2], [(392784, 0), [['On the other hand, you could use a hidden input element that indicate which form was used'], ['With a view like:']], [[' <form action="/blog/" method="POST">\n    {{ blog_form.as_p }}\n    <input type="hidden" name="form-type" value"blog-form" /> <!-- set type -->\n    <input type="submit" value="Submit" />\n</form>\n\n... \n\n<form action="/blog/" method="POST">\n    {{ micro_form.as_p }}\n    <input type="hidden" name="form-type" value"micro-form" /> <!-- set type -->\n    <input type="submit" value="Submit" />\n</form>\n']], ['How to process two forms in one view?'], 2], [(392784, 1), [['With a view like:'], ['... but once again, I think one view per form (even if the view only accepts POSTs) is simpler than trying to do the above.']], [[' def blog(request):\n    if request.method == \'POST\':\n        if request.POST[\'form-type\'] == u"blog-form":   # test the form type\n            form = BlogForm(request.POST) \n            ...\n        else:\n            form = MicroForm(request.POST)\n            ...\n\n    return render_to_response(\'blog.html\', {\n        \'blog_form\': BlogForm(),\n        \'micro_form\': MicroForm(),\n    })\n']], ['How to process two forms in one view?'], 2], [(397125, 0), [['Create a shortcut using Python (via WSH)'], ['Read the Target of a Shortcut using Python (via WSH)']], [[' import sys\nimport win32com.client \n\nshell = win32com.client.Dispatch("WScript.Shell")\nshortcut = shell.CreateShortCut("t:\\\\test.lnk")\nshortcut.Targetpath = "t:\\\\ftemp"\nshortcut.save()\n']], ['Reading the target of a .lnk file in Python?'], 2], [(397125, 1), [['Read the Target of a Shortcut using Python (via WSH)'], ['-10000']], [[' import sys\nimport win32com.client \n\nshell = win32com.client.Dispatch("WScript.Shell")\nshortcut = shell.CreateShortCut("t:\\\\test.lnk")\nprint(shortcut.Targetpath)\n']], ['Reading the target of a .lnk file in Python?'], 2], [(397337, 0), [["I'm not sure if this is germane, but some googling turns up that PyQt is pretty popular inside of Maya.  You could try the technique  here  or  here  (explained  here  with source code) of creating a new threadloop via Maya and executing inside of that.  It seems Maya has a module included that sets up a new thread object, with a QApplication inside it:"], ['and then sets up a function to process the Qt events:']], [[' def initializePumpThread():\n    global pumpedThread\n    global app\n    if pumpedThread == None:\n        app = QtGui.QApplication(sys.argv)\n        pumpedThread = threading.Thread(target = pumpQt, args = ())\n        pumpedThread.start()\n']], ['Using external GUI libraries to make user interfaces in Autodesk Maya'], 4], [(397337, 1), [['and then sets up a function to process the Qt events:'], ['You can probably do something similar with wxPython as well.  (utils.executeDeferred is a Maya function.)  Be sure to check out how to create a  non-blocking GUI  on the wxPython wiki.  Instead of processEvents(), you\'ll want to set up an event loop and check for "Pending" events inside the (hopefully renamed?) pumpQt function above.  (The wxPython source has a  Python implementation  of MainLoop.)  Likely this should be done through the app.Yield() function, but I\'m not sure.']], [[' def pumpQt():\n    global app\n    def processor():\n        app.processEvents()\n    while 1:\n        time.sleep(0.01)\n        utils.executeDeferred( processor )\n']], ['Using external GUI libraries to make user interfaces in Autodesk Maya'], 4], [(397337, 2), [['You can probably do something similar with wxPython as well.  (utils.executeDeferred is a Maya function.)  Be sure to check out how to create a  non-blocking GUI  on the wxPython wiki.  Instead of processEvents(), you\'ll want to set up an event loop and check for "Pending" events inside the (hopefully renamed?) pumpQt function above.  (The wxPython source has a  Python implementation  of MainLoop.)  Likely this should be done through the app.Yield() function, but I\'m not sure.'], ["The wxPython docs  indicate SafeYield()  is preferred.  Again, this seems like it could be a first step, but I'm not sure it will work and not just crash horribly.  (There's some discussion about what you want to do on the  wxPython mailing list  but it's from a few minor versions of wx ago.)  There is also some indication in various forums that this technique causes problems with keyboard input.  You might also try doing:"]], [[' def pumpWx():\n    global app\n    def processor():\n        app.Yield(True)\n    while 1:\n        time.sleep(0.01)\n        utils.executeDeferred( processor )\n\ndef initializePumpThread():\n    global pumpedThread\n    global app\n    if pumpedThread == None:\n        app = wx.App(False)\n        pumpedThread = threading.Thread(target = pumpWx, args = ())\n        pumpedThread.start()\n']], ['Using external GUI libraries to make user interfaces in Autodesk Maya'], 4], [(397337, 3), [["The wxPython docs  indicate SafeYield()  is preferred.  Again, this seems like it could be a first step, but I'm not sure it will work and not just crash horribly.  (There's some discussion about what you want to do on the  wxPython mailing list  but it's from a few minor versions of wx ago.)  There is also some indication in various forums that this technique causes problems with keyboard input.  You might also try doing:"], ['to deal with the current list of events.']], [[' def processor():\n  while app.Pending(): app.Dispatch()\n']], ['Using external GUI libraries to make user interfaces in Autodesk Maya'], 4], [(400050, 0), [['Because python supports some algebraic forms, you could do:'], ['But this allows the input to execute about anything defined in your env:']], [[' eval("1 + 1")\n']], ['Reading and running a mathematical expression in Python'], 3], [(400050, 1), [['But this allows the input to execute about anything defined in your env:'], ["Also, if you want to support something python doesn't support, the approach fails:"]], [[' eval("__import__(\'sys\').exit(1)")\n']], ['Reading and running a mathematical expression in Python'], 3], [(400050, 2), [["Also, if you want to support something python doesn't support, the approach fails:"], ["Instead of doing this, you can implement a tokenizer and a parser with  ply . Evaluating a thing like '1 + 1' ought not take more than ten lines or so."]], [[' x³ + y² + c\n----------- = 0\n     z\n']], ['Reading and running a mathematical expression in Python'], 3], [(401277, 0), [["I typically don't use or find a need for class-level loggers, but I keep my modules at a few classes at most. A simple:"], ['At the top of the module and subsequent:']], [[' import logging\nLOG = logging.getLogger(__name__)\n']], ['Naming Python loggers'], 3], [(401277, 1), [['At the top of the module and subsequent:'], ['You could always use a pseudo-class-decorator:']], [[" LOG.info('Spam and eggs are tasty!')\n"]], ['Naming Python loggers'], 3], [(401277, 2), [['You could always use a pseudo-class-decorator:'], ['-10000']], [[" >>> import logging\n>>> class Foo(object):\n...     def __init__(self):\n...             self.log.info('Meh')\n... \n>>> def logged_class(cls):\n...     cls.log = logging.getLogger('{0}.{1}'.format(__name__, cls.__name__))\n... \n>>> logged_class(Foo)\n>>> logging.basicConfig(level=logging.DEBUG)\n>>> f = Foo()\nINFO:__main__.Foo:Meh\n"]], ['Naming Python loggers'], 3], [(405106, 0), [['SomeMainProgram.py'], ['someOtherModule.py']], [[" import data\nimport someOtherModule\n\nprint data.formations['Arrowhead']\nsomeOtherModule.function()\n"]], ["I can't but help get the idea I'm doing it all wrong (Python, again)"], 3], [(405106, 1), [['someOtherModule.py'], ['data.py']], [[" import data\ndef function():\n    print data.formations['Tight']\n"]], ["I can't but help get the idea I'm doing it all wrong (Python, again)"], 3], [(405106, 2), [['data.py'], ['So the main program works like this.']], [[' import theLoggerThing\nclass Formation( object ):\n    pass # details omitted.\ndef createFormations( logger ):\n    pass # details omitted\nformations= createFormations( theLoggerThing.logger )\n']], ["I can't but help get the idea I'm doing it all wrong (Python, again)"], 3], [(405489, 0), [["there is also another way of doing it by looping through the items in d. this doesn't have the same assuption that they will get stored in  c.__dict__  which isn't always true. "], ['or you could write a  update  method as part of  MyClass  so that  c.update(d)  works like you expected it to.']], [[" d = {'bar': 456}\nfor key,value in d.items():\n    setattr(c,key,value)\n"]], ['Python update object from dictionary'], 3], [(405489, 1), [['or you could write a  update  method as part of  MyClass  so that  c.update(d)  works like you expected it to.'], ['check out the help for setattr']], [[' def update(self,newdata):\n    for key,value in newdata:\n        setattr(self,key,value)\n']], ['Python update object from dictionary'], 3], [(405489, 2), [['check out the help for setattr'], ['-10000']], [[" setattr(...)\n    setattr(object, name, value)\n    Set a named attribute on an object; setattr(x, 'y', v) is equivalent to\n    ''x.y = v''.\n"]], ['Python update object from dictionary'], 3], [(405516, 0), [['Use: '], ['Example:']], [[' all( type(i) is int for i in lst )\n']], ['If all in list == something'], 2], [(405516, 1), [['Example:'], ['[Edit]. Made cleaner as per comments.']], [[" In [1]: lst = range(10)\nIn [2]: all( type(i) is int for i in lst )\nOut[2]: True\nIn [3]: lst.append('steve')\nIn [4]: all( type(i) is int for i in lst )\nOut[4]: False\n"]], ['If all in list == something'], 2], [(409217, 0), [['The decode for  \\x9d  fails.'], ['The decode for  \\xe5  passes but then, when the message is retrieved from Python somewhere it is trying to encode it in  ascii  which fails']], [[" In [290]: unicode(u'\\x9d'.encode('iso-8859-1'), 'cp1252')\n---------------------------------------------------------------------------\n<type 'exceptions.UnicodeDecodeError'>    Traceback (most recent call last)\n\n/home/jv/<ipython console> in <module>()\n\n/usr/lib/python2.5/encodings/cp1252.py in decode(self, input, errors)\n     13 \n     14     def decode(self,input,errors='strict'):\n---> 15         return codecs.charmap_decode(input,errors,decoding_table)\n     16 \n     17 class IncrementalEncoder(codecs.IncrementalEncoder):\n\n<type 'exceptions.UnicodeDecodeError'>: 'charmap' codec can't decode byte 0x9d in position 0: character maps to <undefined>\n"]], ['Python mailbox encoding errors'], 5], [(409217, 1), [['The decode for  \\xe5  passes but then, when the message is retrieved from Python somewhere it is trying to encode it in  ascii  which fails'], ['The decode error:']], [[" In [291]: unicode(u'\\xe5'.encode('iso-8859-1'), 'cp1252').encode('ascii')\n---------------------------------------------------------------------------\n<type 'exceptions.UnicodeEncodeError'>    Traceback (most recent call last)\n\n/home/jv/<ipython console> in <module>()\n\n<type 'exceptions.UnicodeEncodeError'>: 'ascii' codec can't encode character u'\\xe5' in position 0: ordinal not in range(128)\n"]], ['Python mailbox encoding errors'], 5], [(409217, 2), [['The decode error:'], ['Now the encode problem: It is a problem']], [[" In [75]: decd=open('jalf_decode_err','r').read()\n\nIn [76]: chardet.detect(decd)\nOut[76]: {'confidence': 0.98999999999999999, 'encoding': 'utf-8'}\n##this is what is tried at the back - my guess :)\nIn [77]: unicode(decd, 'cp1252') \n---------------------------------------------------------------------------\n<type 'exceptions.UnicodeDecodeError'>    Traceback (most recent call last)\n\n/home/jv/<ipython console> in <module>()\n\n/usr/lib/python2.5/encodings/cp1252.py in decode(self, input, errors)\n     13 \n     14     def decode(self,input,errors='strict'):\n---> 15         return codecs.charmap_decode(input,errors,decoding_table)\n     16 \n     17 class IncrementalEncoder(codecs.IncrementalEncoder):\n\n<type 'exceptions.UnicodeDecodeError'>: 'charmap' codec can't decode byte 0x9d in position 2812: character maps to <undefined>'\n\n##this is a FIX- this way all your messages r accepted\nIn [78]: unicode(decd, chardet.detect(decd)['encoding']) \nOut[78]: u'Return-path: <root@apps2.servage.net>\\nEnvelope-to: public@jalf.dk\\nDelivery-date: Fri, 22 Aug 2008 16:49:53 -0400\\nReceived: from [77.232.66.102] (helo=apps2.servage.net)\\n\\tby c1p.hostingzoom.com with esmtp (Exim 4.69)\\n\\t(envelope-from <root@apps2.servage.net>)\\n\\tid 1KWdZu-0003VX-HP\\n\\tfor public@jalf.dk; Fri, 22 Aug 2008 16:49:52 -0400\\nReceived: from apps2.servage.net (apps2.servage.net [127.0.0.1])\\n\\tby apps2.servage.net (Postfix) with ESMTP id 4A87F980026\\n\\tfor <public@jalf.dk>; Fri, 22 Aug 2008 21:49:46 +0100 (BST)\\nReceived: (from root@localhost)\\n\\tby apps2.servage.net (8.13.8/8.13.8/Submit) id m7MKnkrB006225;\\n\\tFri, 22 Aug 2008 21:49:46 +0100\\nDate: Fri, 22 Aug 2008 21:49:46 +0100\\nMessage-Id: <200808222049.m7MKnkrB006225@apps2.servage.net>\\nTo: public@jalf.dk\\nSubject: =?UTF-8?B?WW5ncmVzYWdlbnMgTnloZWRzYnJldiAyMi44LjA4?=\\nFrom: Nyhedsbrev fra Yngresagen <info@yngresagen.dk>\\nReply-To: info@yngresagen.dk\\nContent-type: text/plain; charset=UTF-8\\nX-Abuse: Servage.net Listid 16329\\nMime-Version: 1.0\\nX-mailer: Servage Maillist System\\nX-Spam-Status: No, score=0.1\\nX-Spam-Score: 1\\nX-Spam-Bar: /\\nX-Spam-Flag: NO\\nX-ClamAntiVirus-Scanner: This mail is clean\\n\\n\\nK\\xe6re medlem\\n\\nH\\xe5ber du har en god sommer og er klar p\\xe5 at l\\xe6se seneste nyt i Yngresagen. God forn\\xf8jelse!\\n\\n\\n::. KOM TIL YS-CAF\\xc8 .::\\nFlere og billigere ungdomsboliger, afskaf 24-\\xe5rs-reglen eller hvad synes du? Yngresagen indbyder dig til en \\xe5ben debat over kaffe og snacks. Yngresagens Kristian Lauta, Mette Marb\\xe6k, og formand Steffen M\\xf8ller fort\\xe6ller om tidligere projekter og vil gerne diskutere, hvad Yngresagen skal bruge sin tid p\\xe5 fremover.  \\nVil du diskutere et emne, du br\\xe6nder for, eller vil du bare v\\xe6re med p\\xe5 en lytter?\\nS\\xe5 kom torsdag d. 28/8 kl. 17-19, Kulturhuset 44, 2200 KBH N \\n \\n::. VIND GAVEKORT & BLIV H\\xd8RT .:: \\nYngresagen har lavet et sp\\xf8rgeskema, s\\xe5 du har direkte mulighed for at sige din mening, og v\\xe6re med til at forme Yngresagens arbejde. Brug 5 min. p\\xe5 at dele dine holdninger om f.eks. uddannelse, arbejde og unges vilk\\xe5r - og vind et gavekort til en musikbutik. Vi tr\\xe6kker lod blandt alle svarene og finder tre heldige vindere. Sp\\xf8rgeskemaet er her: www.yngresagen.dk\\n\\n::. YS SPARKER NORDJYLLAND I GANG .::\\nNordjylland bliver Yngresagens sunde region. Her er regionsansvarlig Andreas M\\xf8ller Stehr ved at starte tre projekter op: 1) L\\xf8beklub, 2) F\\xf8rstehj\\xe6lpskursus, 3) Mad til unge-program.\\nVi har brug for flere frivillige til at sparke projekterne i gang. Vi tilbyder gratis fede aktiviteter, gratis t-shirts og ture til K\\xf8benhavn, hvor du kan m\\xf8de andre unge i YS. Har det fanget din interesse, s\\xe5 t\\xf8v ikke med at kontakte os: nordjylland@yngresagen.dk tlf. 21935185. \\n\\n::. YNGRESAGEN I PRESSEN .::\\nL\\xe6s her et udsnit af sidste nyt om Yngresagen i medierne. L\\xe6s og lyt mere p\\xe5 hjemmesiden under \\u201dYS i pressen\\u201d.\\n\\n:: Radionyhederne: Unge skal informeres bedre om l\\xe5n \\nUnge ved for lidt om at l\\xe5ne penge. Det udnytter banker og rejseselskaber til at give dem l\\xe5n med t\\xe5rnh\\xf8je renter. S\\xe5dan lyder det fra formand Steffen M\\xf8ller fra landsforeningen Yngresagen. \\n\\n:: Danmarks Radio P1: Dansk Folkeparti - de \\xe6ldres parti? \\nHvorfor er det kun fattige \\xe6ldre og ikke alle fattige, der kan s\\xf8ge om at f\\xe5 nedsat medielicens?\\nDansk Folkepartis ungeordf\\xf8rer, Karin N\\xf8dgaard, og Yngresagens formand Steffen M\\xf8ller debatterer medielicens, \\xe6ldrecheck og indflydelse til unge \\n\\n:: Frederiksborg Amts Avis: Turen til Roskilde koster en holdning!\\nFor at skabe et m\\xf8de mellem politikere og unge fragter Yngresagen unge gratis til \\xe5rets Roskilde Festival. Det sker med den s\\xe5kaldte Yngrebussen, der kan l\\xe6ses mere om p\\xe5 www.yngrebussen.dk\\n\\n \\n \\nMed venlig hilsen \\nYngresagen\\n\\nLandsforeningen Yngresagen\\nKulturhuset Kapelvej 44\\n2200 K\\xf8benhavn N\\n\\ntlf. 29644960\\ninfo@yngresagen.dk\\nwww.yngresagen.dk\\n\\n\\n-------------------------------------------------------\\nUnsubscribe Link: \\nhttp://apps.corecluster.net/apps/ml/r.php?l=16329&e=public%40jalf.dk%0D%0A&id=40830383\\n-------------------------------------------------------\\n\\n'\n"]], ['Python mailbox encoding errors'], 5], [(409217, 3), [['Now the encode problem: It is a problem'], ['so the code should look like ']], [[' In [129]: encd=open(\'jalf_encode_err\',\'r\').read()\n\nIn [130]: chardet.detect(encd)\nOut[130]: {\'confidence\': 0.78187650822865284, \'encoding\': \'ISO-8859-2\'}\n\n#even after the unicode conversion the encoding to ascii fails - because the criteris is strict by default\nIn [131]: unicode(encd, chardet.detect(encd)[\'encoding\']).encode(\'ascii\')\n---------------------------------------------------------------------------\n<type \'exceptions.UnicodeEncodeError\'>    Traceback (most recent call last)\n\n/home/jv/<ipython console> in <module>()\n\n<type \'exceptions.UnicodeEncodeError\'>: \'ascii\' codec can\'t encode character u\'\\u0159\' in position 557: ordinal not in range(128)\'\n\n##changing the criteria to ignore\nIn [132]: unicode(encd, chardet.detect(encd)[\'encoding\']).encode(\'ascii\', \'ignore\')\nOut[132]: \'Return-path: <info@kollegierneskontor.dk>\\nEnvelope-to: alf@5elements.net\\nDelivery-date: Tue, 21 Aug 2007 06:10:08 -0400\\nReceived: from pfepc.post.tele.dk ([195.41.46.237]:52065)\\n\\tby c1p.hostingzoom.com with esmtp (Exim 4.66)\\n\\t(envelope-from <info@kollegierneskontor.dk>)\\n\\tid 1INQgX-0003fI-Un\\n\\tfor alf@5elements.net; Tue, 21 Aug 2007 06:10:08 -0400\\nReceived: from local.com (ns2.datadan.dk [195.41.7.21])\\n\\tby pfepc.post.tele.dk (Postfix) with SMTP id ADF4C8A0086\\n\\tfor <alf@5elements.net>; Tue, 21 Aug 2007 12:10:04 +0200 (CEST)\\nFrom: "Kollegiernes Kontor I Kbenhavn" <info@kollegierneskontor.dk>\\nTo: "Jesper Alf Dam" <alf@5elements.net>\\nSubject: Fornyelse af profil\\nDate: Tue, 21 Aug 2007 12:10:03 +0200\\nX-Mailer: Dundas Mailer Control 1.0\\nMIME-Version: 1.0\\nContent-Type: Multipart/Alternative;\\n\\tboundary="Gark=_20078211010346yhSD0hUCo"\\nMessage-Id: <20070821101004.ADF4C8A0086@pfepc.post.tele.dk>\\nX-Spam-Status: No, score=0.0\\nX-Spam-Score: 0\\nX-Spam-Bar: /\\nX-Spam-Flag: NO\\nX-ClamAntiVirus-Scanner: This mail is clean\\n\\n\\n\\n--Gark=_20078211010346yhSD0hUCo\\nContent-Type: text/plain; charset=ISO-8859-1\\nContent-Transfer-Encoding: Quoted-Printable\\n\\nHej Jesper Alf Dam=0D=0A=0D=0AHusk at forny din profil hos KKIK inden 28.=\\n august 2007=0D=0ALog ind p=E5 din profil og benyt ikonet "forny".=0D=0A=0D=\\n=0AVenlig hilsen=0D=0AKollegiernes Kontor i K=F8benhavn=0D=0A=0D=0Ahttp:/=\\n/www.kollegierneskontor.dk/=0D=0A=0D=0A\\n\\n--Gark=_20078211010346yhSD0hUCo\\nContent-Type: text/html; charset=ISO-8859-1\\nContent-Transfer-Encoding: Quoted-Printable\\n\\n<html>=0D=0A<head>=0D=0A=0D=0A<style>=0D=0ABODY, TD {=0D=0Afont-family: v=\\nerdana, arial, helvetica; font-size: 12px; color: #666666;=0D=0A}=0D=0A</=\\nstyle>=0D=0A=0D=0A<title></title>=0D=0A=0D=0A</head>=0D=0A<body bgcolor=3D=\\n#FFFFFF>=0D=0A<hr size=3D1 noshade>=0D=0A<table cellpadding=3D0 cellspaci=\\nng=3D0 border=3D0 width=3D100%>=0D=0A<tr><td >=0D=0AHej Jesper Alf Dam<br=\\n><br>Husk at forny din profil inden 28. august 2007<br>=0D=0ALog ind p=E5=\\n din profil og benyt ikonet "forny".=0D=0A<br><br>=0D=0A<a href=3D"http:/=\\n/www.kollegierneskontor.dk/">Klik her</a> for at logge ind.<br><br>Venlig=\\n hilsen<br>Kollegiernes Kontor i K=F8benhavn=0D=0A</td></tr>=0D=0A</table=\\n>=0D=0A<hr size=3D1 noshade>=0D=0A</body>=0D=0A</html>=0D=0A\\n\\n--Gark=_20078211010346yhSD0hUCo--\\n\\n\'\n\nIn [133]: len(encd)\nOut[133]: 2303\n\nIn [134]: len(unicode(encd, chardet.detect(encd)[\'encoding\']).encode(\'ascii\', \'ignore\'))\nOut[134]: 2302\n']], ['Python mailbox encoding errors'], 5], [(409217, 4), [['so the code should look like '], ['-10000']], [[" import chardet\n\nfor msg in src:\n    msg=unicode(msg, chardet.detect(msg)['encoding']).encode('ascii', 'ignore')\n    dest.add(msg)\n"]], ['Python mailbox encoding errors'], 5], [(409370, 0), [['For the first question, the first thing you should do is sort the list by the second field:'], ["Then you can use itertools' groupby function:"]], [[" x = [\n ['4', '21', '1', '14', '2008-10-24 15:42:58'], \n ['3', '22', '4', '2somename', '2008-10-24 15:22:03'], \n ['5', '21', '3', '19', '2008-10-24 15:45:45'], \n ['6', '21', '1', '1somename', '2008-10-24 15:45:49'], \n ['7', '22', '3', '2somename', '2008-10-24 15:45:51']\n]\n\nfrom operator import itemgetter\n\nx.sort(key=itemgetter(1))\n"]], ['Sorting and Grouping Nested Lists in Python'], 6], [(409370, 1), [["Then you can use itertools' groupby function:"], ["Now y is an iterator containing tuples of (element, item iterator). It's more confusing to explain these tuples than it is to show code:"]], [[' from itertools import groupby\ny = groupby(x, itemgetter(1))\n']], ['Sorting and Grouping Nested Lists in Python'], 6], [(409370, 2), [["Now y is an iterator containing tuples of (element, item iterator). It's more confusing to explain these tuples than it is to show code:"], ['Which prints:']], [[' for elt, items in groupby(x, itemgetter(1)):\n    print(elt, items)\n    for i in items:\n        print(i)\n']], ['Sorting and Grouping Nested Lists in Python'], 6], [(409370, 3), [['Which prints:'], ['For the second part, you should use list comprehensions as mentioned already here:']], [[" 21 <itertools._grouper object at 0x511a0>\n['4', '21', '1', '14', '2008-10-24 15:42:58']\n['5', '21', '3', '19', '2008-10-24 15:45:45']\n['6', '21', '1', '1somename', '2008-10-24 15:45:49']\n22 <itertools._grouper object at 0x51170>\n['3', '22', '4', '2somename', '2008-10-24 15:22:03']\n['7', '22', '3', '2somename', '2008-10-24 15:45:51']\n"]], ['Sorting and Grouping Nested Lists in Python'], 6], [(409370, 4), [['For the second part, you should use list comprehensions as mentioned already here:'], ['Which prints:']], [[" from pprint import pprint as pp\npp([y for y in x if y[3] == '2somename'])\n"]], ['Sorting and Grouping Nested Lists in Python'], 6], [(409370, 5), [['Which prints:'], ['-10000']], [[" [['3', '22', '4', '2somename', '2008-10-24 15:22:03'],\n ['7', '22', '3', '2somename', '2008-10-24 15:45:51']]\n"]], ['Sorting and Grouping Nested Lists in Python'], 6], [(409732, 0), [['-10000'], ['or']], [[' bool_list[:] = [False] * len(bool_list)\n']], ['Python: Alter elements of a list'], 2], [(409732, 1), [['or'], ['-10000']], [[' bool_list[:] = [False for item in bool_list]\n']], ['Python: Alter elements of a list'], 2], [(409769, 0), [['I assume that you are already getting the interesting data (between the BODY tags) with a regular expression like'], ['then, it should be as easy as:']], [[" import re\ndata = re.findall('<body>([^\\<]*)</body>', result)[0]\n"]], ['Parsing fixed-format data embedded in HTML in python'], 2], [(409769, 1), [['then, it should be as easy as:'], ['(note: I did not check this code against boundary cases, and I do expect it to fail. It is only here to show the generic idea)']], [[' start = 0\nend = 5\nwhile (end<len(data)):\n   print data[start:end]\n   start = end+1\n   end = end+5\nprint data[start:]\n']], ['Parsing fixed-format data embedded in HTML in python'], 2], [(412951, 0), [['In class SingleParameter, define get and set as usual:'], ['In class Collection, you cannot know the information until you create the property, so you define the metaset/metaget function and particularize them only later with a lambda function:']], [[' def get(self):\n  return self._s\ndef set(self, value):\n  self._s = value\n']], ['How to implement property() with dynamic name (in python)'], 2], [(412951, 1), [['In class Collection, you cannot know the information until you create the property, so you define the metaset/metaget function and particularize them only later with a lambda function:'], ['-10000']], [[' def metaget(self, par):\n  return par.s\ndef metaset(self, value, par):\n  par.s = value\ndef add(self, par):\n  self[par.name] = par\n  setattr(Collection, par.name,\n    property(\n      fget=lambda x : Collection.metaget(x, par),\n      fset=lambda x, y : Collection.metaset(x,y, par))\n']], ['How to implement property() with dynamic name (in python)'], 2], [(414679, 0), [["If this is a task of high importance; I'd create a Mixin that allows me to annotate the form fields with label classes and supplies form rendering methods using those classes. So that the following code works:"], ["But I'd like to ask; Do you really need a class on the label tag? I mean HTML design-wise. It is absolutely necessary to  add  a class in there? Couldn't it be solved with some CSS like:"]], [[' {{ form.as_table_with_label_classes }}\n']], ['Add class to Django label_tag() output'], 2], [(414679, 1), [["But I'd like to ask; Do you really need a class on the label tag? I mean HTML design-wise. It is absolutely necessary to  add  a class in there? Couldn't it be solved with some CSS like:"], ["I sometimes use  jQuery  for such cases where;  it will improve the page if it works, but it won't be a disaster if it doesn't . And keep the HTML source as lean as possible."]], [[' encapsulating_selector label {\n    some-attr: some-value;\n}\n']], ['Add class to Django label_tag() output'], 2], [(415407, 0), [["Use the  netifaces  module.  Because networking is complex, using netifaces can be a little tricky, but here's how to do what you want:"], ['This can be made a little more readable like this:']], [[" >>> import netifaces\n>>> netifaces.interfaces()\n['lo', 'eth0']\n>>> netifaces.ifaddresses('eth0')\n{17: [{'broadcast': 'ff:ff:ff:ff:ff:ff', 'addr': '00:11:2f:32:63:45'}], 2: [{'broadcast': '10.0.0.255', 'netmask': '255.255.255.0', 'addr': '10.0.0.2'}], 10: [{'netmask': 'ffff:ffff:ffff:ffff::', 'addr': 'fe80::211:2fff:fe32:6345%eth0'}]}\n>>> for interface in netifaces.interfaces():\n...   print netifaces.ifaddresses(interface)[netifaces.AF_INET]\n...\n[{'peer': '127.0.0.1', 'netmask': '255.0.0.0', 'addr': '127.0.0.1'}]\n[{'broadcast': '10.0.0.255', 'netmask': '255.255.255.0', 'addr': '10.0.0.2'}]\n>>> for interface in netifaces.interfaces():\n...   for link in netifaces.ifaddresses(interface)[netifaces.AF_INET]:\n...     print link['addr']\n...\n127.0.0.1\n10.0.0.2\n"]], ['Why does gethostbyaddr(gethostname()) return my IPv6 IP?'], 2], [(415407, 1), [['This can be made a little more readable like this:'], ["If you want IPv6 addresses, use  AF_INET6  instead of  AF_INET .  If you're wondering why  netifaces  uses lists and dictionaries all over the place, it's because a single computer can have multiple NICs, and each NIC can have multiple addresses, and each address has its own set of options."]], [[" from netifaces import interfaces, ifaddresses, AF_INET\n\ndef ip4_addresses():\n    ip_list = []\n    for interface in interfaces():\n        for link in ifaddresses(interface)[AF_INET]:\n            ip_list.append(link['addr'])\n    return ip_list\n"]], ['Why does gethostbyaddr(gethostname()) return my IPv6 IP?'], 2], [(415511, 0), [['-10000'], ['And just the time:']], [[' >>> import datetime\n>>> datetime.datetime.now()\ndatetime(2009, 1, 6, 15, 8, 24, 78915)\n']], ['How to get current time in Python?'], 4], [(415511, 1), [['And just the time:'], ['The same but slightly more compact:']], [[' >>> datetime.datetime.time(datetime.datetime.now())\ndatetime.time(15, 8, 24, 78915)\n']], ['How to get current time in Python?'], 4], [(415511, 2), [['The same but slightly more compact:'], ['To save typing, you can import the  datetime  object from the  datetime  module:']], [[' >>> datetime.datetime.now().time()\n']], ['How to get current time in Python?'], 4], [(415511, 3), [['To save typing, you can import the  datetime  object from the  datetime  module:'], ['Then remove the leading  datetime.  from all the above.']], [[' >>> from datetime import datetime\n']], ['How to get current time in Python?'], 4], [(418497, 0), [["It's worth to have a look at  http://lxml.de/objectify.html"], ['Or the other way around to build xml structures:']], [[' >>> xml = """<main>\n... <object1 attr="name">content</object1>\n... <object1 attr="foo">contenbar</object1>\n... <test>me</test>\n... </main>"""\n\n>>> from lxml import objectify\n\n>>> main = objectify.fromstring(xml)\n\n>>> main.object1[0]\n\'content\'\n\n>>> main.object1[1]\n\'contenbar\'\n\n>>> main.object1[0].get("attr")\n\'name\'\n\n>>> main.test\n\'me\'\n']], ['How to convert XML to objects?'], 2], [(418497, 1), [['Or the other way around to build xml structures:'], ['-10000']], [[' >>> item = objectify.Element("item")\n\n>>> item.title = "Best of python"\n\n>>> item.price = 17.98\n\n>>> item.price.set("currency", "EUR")\n\n>>> order = objectify.Element("order")\n\n>>> order.append(item)\n\n>>> order.item.quantity = 3\n\n>>> order.price = sum(item.price * item.quantity\n... for item in order.item)\n\n>>> import lxml.etree\n\n>>> print lxml.etree.tostring(order, pretty_print=True)\n<order>\n  <item>\n    <title>Best of python</title>\n    <price currency="EUR">17.98</price>\n    <quantity>3</quantity>\n  </item>\n  <price>53.94</price>\n</order>\n']], ['How to convert XML to objects?'], 2], [(419010, 0), [['Python comes with this inbuilt as part of distutils. The module is called  distutils.version  and is able to compare several different version number formats.'], ['For way more information than you need, see the documentation:']], [[" from distutils.version import StrictVersion\n\nprint StrictVersion('1.2.2') > StrictVersion('1.2.1')\n"]], ['How to raise an exception on the version number of a module'], 2], [(419010, 1), [['For way more information than you need, see the documentation:'], ['-10000']], [[' >>> import distutils.version\n>>> help(distutils.version)\n']], ['How to raise an exception on the version number of a module'], 2], [(422091, 0), [['Call '], ['and ']], [[" name = raw_input('What is your name?')\n"]], ['How can the user communicate with my python script using the shell?'], 2], [(422091, 1), [['and '], ['-10000']], [[" print 'You said', name\n"]], ['How can the user communicate with my python script using the shell?'], 2], [(427102, 0), [['An example:'], ["Now let's pretend that we have a Django model such as:"]], [[' <title> The 46 Year Old Virgin </title>\n<content> A silly comedy movie </content>\n<slug> the-46-year-old-virgin </slug>\n']], ['What is a "slug" in Django?'], 6], [(427102, 1), [["Now let's pretend that we have a Django model such as:"], ['How would you reference this object with a URL, with a meaningful name? You could use Article.id so the URL would look like this:']], [[' class Article(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField(max_length=1000)\n    slug = models.SlugField(max_length=40)\n']], ['What is a "slug" in Django?'], 6], [(427102, 2), [['How would you reference this object with a URL, with a meaningful name? You could use Article.id so the URL would look like this:'], ['Or, you could reference the title like so:']], [[' www.example.com/article/23\n']], ['What is a "slug" in Django?'], 6], [(427102, 3), [['Or, you could reference the title like so:'], ["Problem is, spaces aren't valid in URLs, they need to be replaced by  %20  which is ugly, making it the following:"]], [[' www.example.com/article/The 46 Year Old Virgin\n']], ['What is a "slug" in Django?'], 6], [(427102, 4), [["Problem is, spaces aren't valid in URLs, they need to be replaced by  %20  which is ugly, making it the following:"], ["That's not solving our meaningful URL. Wouldn't this be better:"]], [[' www.example.com/article/The%2046%20Year%20Old%20Virgin\n']], ['What is a "slug" in Django?'], 6], [(427102, 5), [["That's not solving our meaningful URL. Wouldn't this be better:"], ["That's a slug.  the-46-year-old-virgin . All letters are downcased and spaces are replaced by hyphens  - . See the URL of this very webpage for an example!"]], [[' www.example.com/article/the-46-year-old-virgin\n']], ['What is a "slug" in Django?'], 6], [(431205, 0), [['From python, if you have  appscript  installed ( sudo easy_install appscript ), you can simply do'], ['Otherwise, this applescript will change the desktop background']], [[" from appscript import app, mactypes\napp('Finder').desktop_picture.set(mactypes.File('/your/filename.jpg'))\n"]], ['How can I programmatically change the background in Mac OS X?'], 3], [(431205, 1), [['Otherwise, this applescript will change the desktop background'], ['You can run it from the command line using  osascript , or from Python using something like']], [[' tell application "Finder"\n    set desktop picture to POSIX file "/your/filename.jpg"\nend tell\n']], ['How can I programmatically change the background in Mac OS X?'], 3], [(431205, 2), [['You can run it from the command line using  osascript , or from Python using something like'], ['-10000']], [[' import subprocess\n\nSCRIPT = """/usr/bin/osascript<<END\ntell application "Finder"\nset desktop picture to POSIX file "%s"\nend tell\nEND"""\n\ndef set_desktop_background(filename):\n    subprocess.Popen(SCRIPT%filename, shell=True)\n']], ['How can I programmatically change the background in Mac OS X?'], 3], [(432786, 0), [['There is a builtin function for this:'], ['Example:']], [[' setattr(test, attr_name, 10)\n']], ['How can I assign a new class attribute via __dict__ in python?'], 2], [(432786, 1), [['Example:'], ['-10000']], [[' >>> class a(object): pass\n>>> a.__dict__[\'wut\'] = 4\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: \'dictproxy\' object does not support item assignment\n>>> setattr(a, \'wut\', 7)\n>>> a.wut\n7\n']], ['How can I assign a new class attribute via __dict__ in python?'], 2], [(434287, 0), [["Modified from the  recipes  section of Python's  itertools  docs:"], ['Example \nIn pseudocode to keep the example terse.']], [[' from itertools import izip_longest\n\ndef grouper(iterable, n, fillvalue=None):\n    args = [iter(iterable)] * n\n    return izip_longest(*args, fillvalue=fillvalue)\n']], ['What is the most "pythonic" way to iterate over a list in chunks?'], 2], [(434287, 1), [['Example \nIn pseudocode to keep the example terse.'], ['Note:   izip_longest  is new to Python 2.6. In Python 3 use  zip_longest .']], [[" grouper('ABCDEFG', 3, 'x') --> 'ABC' 'DEF' 'Gxx'\n"]], ['What is the most "pythonic" way to iterate over a list in chunks?'], 2], [(436198, 0), [['According to the documentation, instead of '], ['Use']], [[' execfile("./filename") \n']], ['What is an alternative to execfile in Python 3?'], 2], [(436198, 1), [['Use'], ['See:']], [[' exec(open("./filename").read())\n']], ['What is an alternative to execfile in Python 3?'], 2], [(438594, 0), [['Write a trivial CLI for your java "function".  (There\'s no such thing, so I\'ll assume you actually mean a method function of a Java class.)  '], ['Call this from a command created by subprocess.']], [[' public class ExposeAMethod {\n    public static void main( String args[] ) {\n         TheClassToExpose  x = new TheClassToExpose();\n        x.theFunction();\n    }\n}\n']], ['How to call java objects and functions from CPython?'], 2], [(438594, 1), [['Call this from a command created by subprocess.'], ["This is the minimum.  And it's really not much.  I count 6 lines of java, 3 lines of Python and you're up and running."]], [[' import subprocess\np = subprocess.Popen("java -jar ExposeAMethod.jar", shell=True)\nsts = os.waitpid(p.pid, 0)\n']], ['How to call java objects and functions from CPython?'], 2], [(438813, 0), [['Depending on how you are going to use the list, it may be that you actually want a dictionary.  This will work:'], ['... or more compactly:']], [[' d = {}\n\nfor row in rows:\n  c = list_of_categories.index(row["id"])\n  print c\n  d[c] = row["name"]\n']], ["How do you create a list like PHP's in Python?"], 2], [(438813, 1), [['... or more compactly:'], ['PHP arrays are much more like Python dicts than they are like Python lists.  For example, they can have strings for keys.']], [[" d = dict((list_of_categories.index(row['id']), row['name']) for row in rows)\nprint d\n"]], ["How do you create a list like PHP's in Python?"], 2], [(444058, 0), [['If you want to just display a particular attribute of each class instance, you can do'], ['Which will print out the  attr  attribute of each object in the list  my_list_of_objs .  Alternatively, you can define the  __str__()  method for your class, which specifies how to convert your objects into strings:']], [[' print([obj.attr for obj in my_list_of_objs])\n']], ['python - readable list of objects'], 2], [(444058, 1), [['Which will print out the  attr  attribute of each object in the list  my_list_of_objs .  Alternatively, you can define the  __str__()  method for your class, which specifies how to convert your objects into strings:'], ['-10000']], [[' class evolutions:\n    def __str__(self):\n        # return string representation of self\n\nprint(my_list_of_objs)  # each object is now printed out according to its __str__() method\n']], ['python - readable list of objects'], 2], [(445037, 0), [['To change the size of the buttons, use  SetToolBitmapSize  (24x24 for instance):'], ['This will only change the size of the buttons, though. If you want to change the size of the icons, simply use bigger ones. The easiest way is to use  wx.ArtProvider :']], [[' toolbar.SetToolBitmapSize((24, 24))\n']], ['How to make a wx Toolbar buttons larger?'], 3], [(445037, 1), [['This will only change the size of the buttons, though. If you want to change the size of the icons, simply use bigger ones. The easiest way is to use  wx.ArtProvider :'], ['So, summing it up:']], [[' wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE, wx.ART_TOOLBAR, (24, 24))\n']], ['How to make a wx Toolbar buttons larger?'], 3], [(445037, 2), [['So, summing it up:'], ['Remark:  As SetToolBitmapSize changes the size of the buttons, not the size of the icons, you can set the buttons to be larger than the icons. This should leave blank space around the icons.']], [[' # Define the size of the icons and buttons\niconSize = (24, 24)\n\n# Set the size of the buttons\ntoolbar.SetToolBitmapSize(iconSize)\n\n# Add some button\nsaveIcon = wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE, wx.ART_TOOLBAR, iconSize)\ntoolBar.AddSimpleTool(1, saveIcon, "Save", "Save current file")\n']], ['How to make a wx Toolbar buttons larger?'], 3], [(446026, 0), [['settings.py:'], ['urls.py:']], [[" MEDIA_ROOT = 'C:/Server/Projects/project_name/static/'\nMEDIA_URL = '/static/'\nADMIN_MEDIA_PREFIX = '/media/'\n"]], ['Django: how do you serve media / stylesheets and link to them within templates'], 4], [(446026, 1), [['urls.py:'], ['template file:']], [[" from django.conf import settings\n...\nif settings.DEBUG:\n    urlpatterns += patterns('',\n        (r'^static/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),\n    )\n"]], ['Django: how do you serve media / stylesheets and link to them within templates'], 4], [(446026, 2), [['template file:'], ['With the file located here:']], [[' <link rel="stylesheet" type="text/css" href="/static/css/style.css" />\n']], ['Django: how do you serve media / stylesheets and link to them within templates'], 4], [(446026, 3), [['With the file located here:'], ['-10000']], [[' "C:/Server/Projects/project_name/static/css/style.css"\n']], ['Django: how do you serve media / stylesheets and link to them within templates'], 4], [(447086, 0), [['It looks like you would ideally want an expression with side effects.  If this were allowed in Python:'], ["... then you would clearly and cleanly be expressing your intent.  But it's not.  If side effects were allowed in nested functions, you could:"]], [[" if m = re.match('foo (\\w+) bar (\\d+)', line):\n  # do stuff with m.group(1) and m.group(2)\nelif m = re.match('baz whoo_(\\d+)', line):\n  # do stuff with m.group(1)\nelif ...\n"]], ["Python's re module - saving state?"], 5], [(447086, 1), [["... then you would clearly and cleanly be expressing your intent.  But it's not.  If side effects were allowed in nested functions, you could:"], ["Now, not only is that getting ugly, but it's still not valid Python code -- the nested function 'assign_m' isn't allowed to modify the variable  m  in the outer scope.  The best I can come up with is  really  ugly, using nested class which is allowed side effects:"]], [[" m = None\ndef assign_m(x):\n  m = x\n  return x\n\nif assign_m(re.match('foo (\\w+) bar (\\d+)', line)):\n  # do stuff with m.group(1) and m.group(2)\nelif assign_m(re.match('baz whoo_(\\d+)', line)):\n  # do stuff with m.group(1)\nelif ...\n"]], ["Python's re module - saving state?"], 5], [(447086, 2), [["Now, not only is that getting ugly, but it's still not valid Python code -- the nested function 'assign_m' isn't allowed to modify the variable  m  in the outer scope.  The best I can come up with is  really  ugly, using nested class which is allowed side effects:"], ['You migth consider using an inner function to allow local scope exits, which allows you to remove the  else  nesting:']], [[" # per Brian's suggestion, a wrapper that is stateful\nclass m_(object):\n  def match(self, *args):\n    self.inner_ = re.match(*args)\n    return self.inner_\n  def group(self, *args):\n    return self.inner_.group(*args)\nm = m_()\n\n# now 'm' is a stateful regex\nif m.match('foo (\\w+) bar (\\d+)', line):\n  # do stuff with m.group(1) and m.group(2)\nelif m.match('baz whoo_(\\d+)', line):\n  # do stuff with m.group(1)\nelif ...\n"]], ["Python's re module - saving state?"], 5], [(447086, 3), [['You migth consider using an inner function to allow local scope exits, which allows you to remove the  else  nesting:'], ['Lastly, there are side-effect-free ways of dealing with this:']], [[" def find_the_right_match():\n  # now 'm' is a stateful regex\n  m = re.match('foo (\\w+) bar (\\d+)', line)\n  if m:\n    # do stuff with m.group(1) and m.group(2)\n    return # <== exit nested function only\n  m = re.match('baz whoo_(\\d+)', line)\n  if m:\n    # do stuff with m.group(1)\n    return\n\nfind_the_right_match()\n"]], ["Python's re module - saving state?"], 5], [(447086, 4), [['Lastly, there are side-effect-free ways of dealing with this:'], ['And now the code barely even  looks  like Python, let alone understandable to Python programmers (is that Lisp?).']], [[' def cond_with(*phrases):\n  """for each 2-tuple, invokes first item.  the first pair where\n  the first item returns logical true, result is passed to second\n  function in pair.  Like an if-elif-elif.. chain"""\n  for (cond_lambda, then_lambda) in phrases:\n    c = cond_lambda()\n    if c:\n      return then_lambda(c) \n  return None\n\n\ncond_with( \n  ((lambda: re.match(\'foo (\\w+) bar (\\d+)\', line)), \n      (lambda m: \n          ... # do stuff with m.group(1) and m.group(2)\n          )),\n  ((lambda: re.match(\'baz whoo_(\\d+)\', line)),\n      (lambda m:\n          ... # do stuff with m.group(1)\n          )),\n  ...)\n']], ["Python's re module - saving state?"], 5], [(447117, 0), [['New in Django 1.1 . \nCalls to update can also use F() objects to update one field based on the value of another field in the model. This is especially useful for incrementing counters based upon their current value.'], ['Getting the non-sliced query set is the hard bit. I wondered about using  in_bulk  but that returns a dictionary, not a query set. One would usually use  Q objects  to do complex OR type queries and that will work, but  pk__in  does the job much more simply.']], [[" Entry.objects.filter(is_published=True).update(views=F('views')+1)\n"]], ['Django: Increment blog entry view count by one. Is this efficient?'], 2], [(447117, 1), [['Getting the non-sliced query set is the hard bit. I wondered about using  in_bulk  but that returns a dictionary, not a query set. One would usually use  Q objects  to do complex OR type queries and that will work, but  pk__in  does the job much more simply.'], ['Due to the way that django executes queries lazily, this results in just 2 database hits, no matter how many items are updated. ']], [[" latest_entry_ids = Entry.objects.filter(is_published=True)\\\n                                      .order_by('-date_published')\n                                      .values_list('id', flat=True)[:10]  \nnon_sliced_query_set = Entry.objects.filter(pk__in=latest_entry_ids)  \nn = non_sliced_query_set.update(views=F('views')+1)  \nprint n or 0, 'items updated'\n"]], ['Django: Increment blog entry view count by one. Is this efficient?'], 2], [(448034, 0), [['Create the lock outside the method.'], ['or if using python >= 2.5:']], [[' class Agent(Thread):\n    mylock = Lock()\n    def write_result(self):\n        self.mylock.acquire()\n        try:\n            ...\n        finally:\n            self.mylock.release()\n']], ['Multithreaded Resource Access - Where Do I Put My Locks?'], 3], [(448034, 1), [['or if using python >= 2.5:'], ['To use that with python 2.5 you must import the statement from the future:']], [[' class Agent(Thread):\n    mylock = Lock()\n    def write_result(self):\n        with self.mylock:\n            ...\n']], ['Multithreaded Resource Access - Where Do I Put My Locks?'], 3], [(448034, 2), [['To use that with python 2.5 you must import the statement from the future:'], ['-10000']], [[' from __future__ import with_statement\n']], ['Multithreaded Resource Access - Where Do I Put My Locks?'], 3], [(451690, 0), [['You can use a  list comprehension :'], ['Which follows the format standard format of:']], [[" domains = [matching['domain'] for matching in matchings if matching['id'] == the_id]\n"]], ["What's the most efficient way to access sibling dictionary value in a Python dict?"], 3], [(451690, 1), [['Which follows the format standard format of:'], ['And basically encapsulates all the following functionality:']], [[' resulting_list = [item_to_return for item in items if condition]\n']], ["What's the most efficient way to access sibling dictionary value in a Python dict?"], 3], [(451690, 2), [['And basically encapsulates all the following functionality:'], ['All that functionality is represented in a single line using list comprehensions.']], [[" domains = []\nfor matching in matchings:\n    if matching['id'] == the_id:\n        domains.append(matching['domain'])\n"]], ["What's the most efficient way to access sibling dictionary value in a Python dict?"], 3], [(453329, 0), [["First, you should open a terminal and start a screen session called 'ipython' or whatever you want, and then start IPython:"], ['Then you should put this in your .vimrc:']], [[' $ screen -S ipython\n$ ipython\n']], ['Advice regarding IPython + MacVim Workflow'], 3], [(453329, 1), [['Then you should put this in your .vimrc:'], ['You can tweak this to execute the command you want inside IPython from Vim. For example I use this: ']], [[" autocmd FileType python map F5 :w<CR>:!screen -x ipython -X stuff $'\\%run %:p:h\\n'<CR><CR>\n"]], ['Advice regarding IPython + MacVim Workflow'], 3], [(453329, 2), [['You can tweak this to execute the command you want inside IPython from Vim. For example I use this: '], ['This executes %reset (answering yes to the prompt), then change to the directory where the current buffer in vim is located and then %run the file. This is specially useful if you have the %pdb active in IPython.']], [[" autocmd FileType python map <F5> :w<CR>:!screen -x ipython -X stuff $'\\%reset\\ny\\n\\%cd %:p:h\\n\\%run %:t\\n'<CR><CR>\n"]], ['Advice regarding IPython + MacVim Workflow'], 3], [(454648, 0), [['After thinking about it a while a few days ago, and coming up with nothing worth posting, I came back to it now and came up with some syntax I rather like, because it nearly looks like python:'], ['The internal syntax representation could also look the same:']], [[' macro PrintMacro:\n  syntax:\n    "print", OneOrMore(Var(), name=\'vars\')\n\n  return Printnl(vars, None)\n']], ['Pythonic macro syntax'], 8], [(454648, 1), [['The internal syntax representation could also look the same:'], ['The internal syntax classes like  OneOrMore  would follow this pattern to allow subitems and an optional name:']], [[" class PrintMacro(Macro):\n  syntax = 'print', OneOrMore(Var(), name='vars')\n  ...\n"]], ['Pythonic macro syntax'], 8], [(454648, 2), [['The internal syntax classes like  OneOrMore  would follow this pattern to allow subitems and an optional name:'], ['When the macro matches, you just collect all items that have a name and pass them as keyword parameters to the handler function:']], [[' class MacroSyntaxElement(object):\n  def __init__(self, *p, name=None):\n    self.subelements = p\n    self.name = name\n']], ['Pythonic macro syntax'], 8], [(454648, 3), [['When the macro matches, you just collect all items that have a name and pass them as keyword parameters to the handler function:'], ['The handler function would then be defined like this:']], [[' class Macro():\n   ...\n   def parse(self, ...):\n     syntaxtree = []\n     nameditems = {}\n     # parse, however this is done\n     # store all elements that have a name as\n     #   nameditems[name] = parsed_element\n     self.handle(syntaxtree, **nameditems)\n']], ['Pythonic macro syntax'], 8], [(454648, 4), [['The handler function would then be defined like this:'], ['Also, if you don\'t like the decorators, why not add the macro type like a "base class"?  IfMacro  would then look like this:']], [[' class PrintMacro(Macro):\n  ...\n  def handle(self, syntaxtree, vars):\n    return Printnl(vars, None)\n']], ['Pythonic macro syntax'], 8], [(454648, 5), [['Also, if you don\'t like the decorators, why not add the macro type like a "base class"?  IfMacro  would then look like this:'], ['And in the internal representation:']], [[' macro IfMacro(MultiLine):\n  syntax:\n    Group("if", Var(), ":", Var(), name=\'if_\')\n    ZeroOrMore("elif", Var(), ":", Var(), name=\'elifs\')\n    Optional("else", Var(name=\'elseBody\'))\n\n  return If(\n      [(cond, Stmt(body)) for keyword, cond, colon, body in [if_] + elifs],\n      None if elseBody is None else Stmt(elseBody)\n    )\n']], ['Pythonic macro syntax'], 8], [(454648, 6), [['And in the internal representation:'], ['The ToMacro would look something like this:']], [[' class IfMacro(MultiLineMacro):\n  syntax = (\n      Group("if", Var(), ":", Var(), name=\'if_\'),\n      ZeroOrMore("elif", Var(), ":", Var(), name=\'elifs\'),\n      Optional("else", Var(name=\'elseBody\'))\n    )\n\n  def handle(self, syntaxtree, if_=None, elifs=None, elseBody=None):\n    # Default parameters in case there is no such named item.\n    # In this case this can only happen for \'elseBody\'.\n    return If(\n        [(cond, Stmt(body)) for keyword, cond, body in [if_] + elifs],\n        None if elseNody is None else Stmt(elseBody)\n      )\n']], ['Pythonic macro syntax'], 8], [(454648, 7), [['The ToMacro would look something like this:'], ['-10000']], [[' # macro definition\nmacro ToMacro(Partial):\n  syntax:\n    Var(name=\'start\'), "to", Var(name=\'end\'), Optional("inclusive", name=\'inc\'), Optional("step", Var(name=\'step\'))\n\n  if step == None:\n    step = quote(1)\n  if inclusive:\n    return quote:\n      xrange($(start), $(end)+1, $(step))\n  else:\n    return quote:\n      xrange($(start), $(end), $(step))\n\n# resulting macro class\nclass ToMacro(PartialMacro):\n  syntax = Var(name=\'start\'), "to", Var(name=\'end\'), Optional("inclusive", name=\'inc\'), Optional("step", Var(name=\'step\'))\n\n  def handle(syntaxtree, start=None, end=None, inc=None, step=None):\n    if step is None:\n      step = Number(1)\n    if inclusive:\n      return [\'xrange\', [\'(\', start, [end, \'+\', Number(1)], step, \')\']]\n    return [\'xrange\', [\'(\', start, end, step, \')\']]\n']], ['Pythonic macro syntax'], 8], [(454691, 0), [['For example you could have the extension functionality in a completely different package, but allow it to inject classes into your basic framework through a specific interface. eg. myframework/_\u200b\u200b_\u200binit\u200b_\u200b\u200b_.py containing a basic application wrapper:'], ["Then you could have extension functionality in a myexts/helloer.py, that keeps a reference to its 'owner' or 'outer' MyFramework class instance:"]], [[' class MyFramework(object):\n    """A bare MyFramework, I only hold a person\'s name\n    """\n    _addons= {}\n    @staticmethod\n    def addAddon(name, addon):\n        MyFramework._addons[name]= addon\n\n    def __init__(self, person):\n        self.person= person\n        for name, addon in MyFramework._addons.items():\n            setattr(self, name, addon(self))\n']], ['Putting separate python packages into same namespace?'], 2], [(454691, 1), [["Then you could have extension functionality in a myexts/helloer.py, that keeps a reference to its 'owner' or 'outer' MyFramework class instance:"], ['So now if you just "import myframework", you only get the basic functionality. But if you also "import myexts.helloer" you also get the ability to call MyFramework.helloer.hello(). Naturally you can also define protocols for addons to interact with the basic framework behaviour, and each other. You can also do things like inner classes a subclass of the framework can override to customise without having to monkey-patch classes that might affect other applications, if you need that level of complexity.']], [[" class Helloer(object):\n    def __init__(self, owner):\n        self.owner= owner\n    def hello(self):\n        print 'hello '+self.owner.person\n\nimport myframework\nmyframework.MyFramework.addAddon('helloer', Helloer)\n"]], ['Putting separate python packages into same namespace?'], 2], [(458209, 0), [['Using  draw() :'], ['Using interactive mode:']], [[" from matplotlib.pyplot import plot, draw, show\nplot([1,2,3])\ndraw()\nprint 'continue computation'\n\n# at the end call show to ensure window won't close.\nshow()\n"]], ['Is there a way to detach matplotlib plots so that the computation can continue?'], 2], [(458209, 1), [['Using interactive mode:'], ['-10000']], [[" from matplotlib.pyplot import plot, ion, show\nion() # enables interactive mode\nplot([1,2,3]) # result shows immediatelly (implicit draw())\n\nprint 'continue computation'\n\n# at the end call show to ensure window won't close.\nshow()\n"]], ['Is there a way to detach matplotlib plots so that the computation can continue?'], 2], [(459083, 0), [['Use the  after  method on the  Tk  object:'], ["Here's the declaration and documentation for the  after  method:"]], [[' from tkinter import *\n\nroot = Tk()\n\ndef task():\n    print("hello")\n    root.after(2000, task)  # reschedule event in 2 seconds\n\nroot.after(2000, task)\nroot.mainloop()\n']], ["How do you run your own code alongside Tkinter's event loop?"], 2], [(459083, 1), [["Here's the declaration and documentation for the  after  method:"], ['-10000']], [[' def after(self, ms, func=None, *args):\n    """Call function once after given time.\n\n    MS specifies the time in milliseconds. FUNC gives the\n    function which shall be called. Additional parameters\n    are given as parameters to the function call.  Return\n    identifier to cancel scheduling with after_cancel."""\n']], ["How do you run your own code alongside Tkinter's event loop?"], 2], [(460479, 0), [["This should work, though I haven't tested it enough."], ['Output:']], [[" def spanningsets(items):\n    if not items: return\n    if len(items) == 1:\n        yield [[items[-1]]]\n    else:\n        for cc in spanningsets(items[:-1]):\n            yield cc + [[items[-1]]]\n            for i in range(len(cc)):\n                yield cc[:i] + [cc[i] + [items[-1]]] + cc[i+1:]\n\nfor sset in spanningsets([1, 2, 3, 4]):\n    print ' '.join(map(str, sset))\n"]], ['Algorithm to generate spanning set'], 2], [(460479, 1), [['Output:'], ['-10000']], [[' [1] [2] [3] [4]\n[1, 4] [2] [3]\n[1] [2, 4] [3]\n[1] [2] [3, 4]\n[1, 3] [2] [4]\n[1, 3, 4] [2]\n[1, 3] [2, 4]\n[1] [2, 3] [4]\n[1, 4] [2, 3]\n[1] [2, 3, 4]\n[1, 2] [3] [4]\n[1, 2, 4] [3]\n[1, 2] [3, 4]\n[1, 2, 3] [4]\n[1, 2, 3, 4]\n']], ['Algorithm to generate spanning set'], 2], [(462439, 0), [['Using  pypcap :'], ['output sample:']], [[" import dpkt, pcap\npc = pcap.pcap()     # construct pcap object\npc.setfilter('icmp') # filter out unwanted packets\nfor timestamp, packet in pc:\n    print dpkt.ethernet.Ethernet(packet)\n"]], ['Packet sniffing in Python (Windows)'], 2], [(462439, 1), [['output sample:'], ['-10000']], [[" Ethernet(src='\\x00\\x03G\\xb2M\\xe4', dst='\\x00\\x03G\\x06h\\x18', data=IP(src='\\n\\x00\\x01\\x1c',\ndst='\\n\\x00\\x01\\x10', sum=39799, len=60, p=1, ttl=128, id=35102, data=ICMP(sum=24667,\ntype=8, data=Echo(id=512, seq=60160, data='abcdefghijklmnopqrstuvwabcdefghi'))))\n\nEthernet(src='\\x00\\x03G\\x06h\\x18', dst='\\x00\\x03G\\xb2M\\xe4', data=IP(src='\\n\\x00\\x01\\x10',\ndst='\\n\\x00\\x01\\x1c', sum=43697, len=60, p=1, ttl=255, id=64227, data=ICMP(sum=26715,\ndata=Echo(id=512, seq=60160, data='abcdefghijklmnopqrstuvwabcdefghi'))))\n"]], ['Packet sniffing in Python (Windows)'], 2], [(463032, 0), [['The lines empty or shorter than 5 fields fall into the  else  part of this structure:'], ['A better, generic version of the same algorithm:']], [[" if len(lst) >= 4:             # Tuple w/ sort info first\n    lines[n] = (lst[4], lines[n])\nelse:                         # Short lines to end\n    lines[n] = (['\\377'], lines[n])\n"]], ['Schwartzian sort example in "Text Processing in Python"'], 2], [(463032, 1), [['A better, generic version of the same algorithm:'], ['The algorithm you provided is equivalent to this one.']], [[" sort_by_field(list_of_str, field_number, separator=' ', defaultvalue='\\xFF')\n    # decorates each value:\n    for i, line in enumerate(list_of_str)):\n        fields = line.split(separator)\n        try:\n             # places original line as second item:\n            list_of_str[i] = (fields[field_number], line)\n        except IndexError:\n            list_of_str[i] = (defaultvalue, line)\n    list_of_str.sort() # sorts list, in place\n    # undecorates values:\n    for i, group in enumerate(list_of_str))\n        list_of_str[i] = group[1] # the second item is original line\n"]], ['Schwartzian sort example in "Text Processing in Python"'], 2], [(463604, 0), [['-10000'], ["If you need to know whether it's definitely an actual int and not a subclass of int (generally you shouldn't need to do this):"]], [[' isinstance(n, int)\n']], ['How can I type-check variables in Python?'], 3], [(463604, 1), [["If you need to know whether it's definitely an actual int and not a subclass of int (generally you shouldn't need to do this):"], ['this:']], [[' type(n) is int\n']], ['How can I type-check variables in Python?'], 3], [(463604, 2), [['this:'], ["isn't such a good idea, as cross-type comparisons can be true - notably  int(3.0)==3.0"]], [[' return int(n) == n\n']], ['How can I type-check variables in Python?'], 3], [(464040, 0), [["suppose you're posting a html form with this:"], ['If using  raw cgi :']], [[' <input type="text" name="username">\n']], ['How are POST and GET variables handled in Python?'], 8], [(464040, 1), [['If using  raw cgi :'], ['If using  Django ,  Pylons ,  Flask  or  Pyramid : ']], [[' import cgi\nform = cgi.FieldStorage()\nprint form["username"]\n']], ['How are POST and GET variables handled in Python?'], 8], [(464040, 2), [['If using  Django ,  Pylons ,  Flask  or  Pyramid : '], ['Using  Turbogears ,  Cherrypy :']], [[" print request.GET['username'] # for GET form method\nprint request.POST['username'] # for POST form method\n"]], ['How are POST and GET variables handled in Python?'], 8], [(464040, 3), [['Using  Turbogears ,  Cherrypy :'], ['Web.py :']], [[" from cherrypy import request\nprint request.params['username']\n"]], ['How are POST and GET variables handled in Python?'], 8], [(464040, 4), [['Web.py :'], ['Werkzeug :']], [[' form = web.input()\nprint form.username\n']], ['How are POST and GET variables handled in Python?'], 8], [(464040, 5), [['Werkzeug :'], ['If using Cherrypy or Turbogears, you can also define your handler function taking a parameter directly:']], [[" print request.form['username']\n"]], ['How are POST and GET variables handled in Python?'], 8], [(464040, 6), [['If using Cherrypy or Turbogears, you can also define your handler function taking a parameter directly:'], ['Google App Engine :']], [[' def index(self, username):\n    print username\n']], ['How are POST and GET variables handled in Python?'], 8], [(464040, 7), [['Google App Engine :'], ['So you really will have to choose one of those frameworks.']], [[" class SomeHandler(webapp2.RequestHandler):\n    def post(self):\n        name = self.request.get('username') # this will get the value from the field named username\n        self.response.write(name) # this will write on the document\n"]], ['How are POST and GET variables handled in Python?'], 8], [(464342, 0), [['People seem to be over complicating this.. Just combine the two lists, then sort them:'], ['..or shorter (and without modifying  l1 ):']], [[' >>> l1 = [1, 3, 4, 7]\n>>> l2 = [0, 2, 5, 6, 8, 9]\n>>> l1.extend(l2)\n>>> sorted(l1)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n']], ['Combining two sorted lists in Python'], 4], [(464342, 1), [['..or shorter (and without modifying  l1 ):'], ['merge_sorted_lists  took..']], [[' >>> sorted(l1 + l2)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n']], ['Combining two sorted lists in Python'], 4], [(464342, 2), [['merge_sorted_lists  took..'], ['sorted(l1+l2)  took..']], [[' [9.7439379692077637, 9.8844599723815918, 9.552299976348877]\n']], ['Combining two sorted lists in Python'], 4], [(464342, 3), [['sorted(l1+l2)  took..'], ['-10000']], [[' [2.860386848449707, 2.7589840888977051, 2.7682540416717529]\n']], ['Combining two sorted lists in Python'], 4], [(464970, 0), [['Once you get the name of the function, use a dispatch dict to run the function:'], ['Alternatively create a class with the commands:']], [[" def mysum(...): ...\ndef myotherstuff(...): ...\n\n# create dispatch dict:\nmyfunctions = {'sum': mysum, 'stuff': myotherstuff}\n\n# run your parser:\nfunction_name, parameters = parse_result(line)\n\n# run the function:\nmyfunctions[function_name](parameters)\n"]], ['Parsing Functions'], 2], [(464970, 1), [['Alternatively create a class with the commands:'], ['You could also look at the  cmd module  in the stdlib to do your class. It can provide you with a command-line interface for your language, with tab command completion, automatically.']], [[" class Commands(object):\n    def do_sum(self, ...): ...\n    def do_stuff(self, ...): ...\n    def run(self, funcname, params):\n        getattr(self, 'do_' + funcname)(params)\n\ncmd = Commands()\nfunction_name, parameters = parse_result(line)\ncmd.run(function_name, parameters)\n"]], ['Parsing Functions'], 2], [(465144, 0), [['Programmatically create SVG documents based on this template, replacing "TEXT HERE" with the desired text content:'], ["Convert the documents to background-transparent PNGs with ImageMagick's  convert :"]], [[' <?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE svg PUBLIC\n      "-//W3C//DTD SVG 1.0//EN"\n      "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">\n<svg version="1.0" width="152px" height="50px">\n  <text style="font-size: 22px; font-weight:bold; font-family: Verdana-Bold;\n               letter-spacing: -1.3%;">\n    <tspan x="10" y="39">TEXT HERE</tspan>\n  </text>\n</svg>\n']], ['Tools for creating text as bitmaps (anti-aliased text, custom spacing, transparent background)'], 2], [(465144, 1), [["Convert the documents to background-transparent PNGs with ImageMagick's  convert :"], ['-10000']], [[' $ convert -background none input.svg output.png\n']], ['Tools for creating text as bitmaps (anti-aliased text, custom spacing, transparent background)'], 2], [(465421, 0), [['-10000'], ['The last 2 lines could be made into one:']], [[" p = subprocess.Popen(['ruby', 'ruby_program.rb'], stdin=subprocess.PIPE, \n                                          stdout=subprocess.PIPE)\nruby_question = p.stdout.readline()\nanswer = calculate_answer(ruby_question)\np.stdin.write(answer)\nprint p.communicate()[0]  # prints further info ruby may show.\n"]], ['How do I take the output of one program and use it as the input of another?'], 2], [(465421, 1), [['The last 2 lines could be made into one:'], ['-10000']], [[' print p.communicate(answer)[0]\n']], ['How do I take the output of one program and use it as the input of another?'], 2], [(466293, 0), [["Thanks to cournape's tip about Actions versus Generators ( and eclipse pydev debugger), I've finally figured out what I need to do.  You want to pass in your function to the 'Builder' class as an 'action' not a 'generator'.  This will allow you to actually execute the os.system or os.popen call directly.  Here's the updated code:"], ['This SConstruct file will produce the following output:']], [[" import os\n\ndef my_action(source, target, env):\n    cmd = r'''echo its a small world after all \\\n        its a small world after all'''\n    print cmd\n    return os.system(cmd)\n\nmy_cmd_builder = Builder(\n    action=my_action,  # <-- CRUCIAL PIECE OF SOLUTION\n    suffix = '.foo')\n\nenv = Environment()\nenv.Append( BUILDERS = {'MyCmd' : my_cmd_builder } )\n\nmy_cmd = env.MyCmd('foo.foo',os.popen('which bash').read().strip())\n"]], ['How can I generate multi-line build commands?'], 3], [(466293, 1), [['This SConstruct file will produce the following output:'], ['e.g., the solution that I personally want looks like:']], [[' scons: Reading SConscript files ...\nscons: done reading SConscript files.\nscons: Building targets ...\nmy_action(["foo.foo"], ["/bin/bash"])\necho its a small world after all \\\n        its a small world after all\nits a small world after all its a small world after all\nscons: done building targets.\n']], ['How can I generate multi-line build commands?'], 3], [(466293, 2), [['e.g., the solution that I personally want looks like:'], ['-10000']], [[" import os\n\ncmd = r'''echo its a small world after all \\\n        its a small world after all'''\n\ndef my_action(source, target, env):\n    print cmd\n    return os.system(cmd)\n\nmy_cmd_builder = Builder(\n    action=my_action,\n    suffix = '.foo')\n\nenv = Environment()\nenv['_MY_CMD'] = cmd  # <-- CREATE IMPLICIT DEPENDENCY ON CMD STRING\nenv.Append( BUILDERS = {'MyCmd' : my_cmd_builder } )\n\nmy_cmd = env.MyCmd('foo.foo',os.popen('which bash').read().strip())\n"]], ['How can I generate multi-line build commands?'], 3], [(469243, 0), [['This is basically the  example in the pyudev documentation , adapted to work with older versions, and with the glib loop, notice that the filter should be customized for your specific needing:'], ['Here is a small example, you can remove the comments and try it.']], [[" import glib\n\nfrom pyudev import Context, Monitor\n\ntry:\n    from pyudev.glib import MonitorObserver\n\n    def device_event(observer, device):\n        print 'event {0} on device {1}'.format(device.action, device)\nexcept:\n    from pyudev.glib import GUDevMonitorObserver as MonitorObserver\n\n    def device_event(observer, action, device):\n        print 'event {0} on device {1}'.format(action, device)\n\ncontext = Context()\nmonitor = Monitor.from_netlink(context)\n\nmonitor.filter_by(subsystem='usb')\nobserver = MonitorObserver(monitor)\n\nobserver.connect('device-event', device_event)\nmonitor.start()\n\nglib.MainLoop().run()\n"]], ["How can I listen for 'usb device inserted' events in Linux, in Python?"], 6], [(469243, 1), [['Here is a small example, you can remove the comments and try it.'], ['You need to connect to Hal Manager using the System Bus.']], [[' import dbus\nimport gobject\n\nclass DeviceAddedListener:\n    def __init__(self):\n']], ["How can I listen for 'usb device inserted' events in Linux, in Python?"], 6], [(469243, 2), [['You need to connect to Hal Manager using the System Bus.'], ['And you need to connect a listener to the signals you are interested on, in this case  DeviceAdded .']], [['         self.bus = dbus.SystemBus()\n        self.hal_manager_obj = self.bus.get_object(\n                                              "org.freedesktop.Hal", \n                                              "/org/freedesktop/Hal/Manager")\n        self.hal_manager = dbus.Interface(self.hal_manager_obj,\n                                          "org.freedesktop.Hal.Manager")\n']], ["How can I listen for 'usb device inserted' events in Linux, in Python?"], 6], [(469243, 3), [['And you need to connect a listener to the signals you are interested on, in this case  DeviceAdded .'], ["I'm using a filter based on capabilities. It will accept any  volume  and will call  do_something  with if, you can read Hal documentation to find the more suitable queries for your needs, or more information about the properties of the Hal devices."]], [['         self.hal_manager.connect_to_signal("DeviceAdded", self._filter)\n']], ["How can I listen for 'usb device inserted' events in Linux, in Python?"], 6], [(469243, 4), [["I'm using a filter based on capabilities. It will accept any  volume  and will call  do_something  with if, you can read Hal documentation to find the more suitable queries for your needs, or more information about the properties of the Hal devices."], ['Example function that shows some information about the volume:']], [['     def _filter(self, udi):\n        device_obj = self.bus.get_object ("org.freedesktop.Hal", udi)\n        device = dbus.Interface(device_obj, "org.freedesktop.Hal.Device")\n\n        if device.QueryCapability("volume"):\n            return self.do_something(device)\n']], ["How can I listen for 'usb device inserted' events in Linux, in Python?"], 6], [(469243, 5), [['Example function that shows some information about the volume:'], ['-10000']], [['      def do_something(self, volume):\n        device_file = volume.GetProperty("block.device")\n        label = volume.GetProperty("volume.label")\n        fstype = volume.GetProperty("volume.fstype")\n        mounted = volume.GetProperty("volume.is_mounted")\n        mount_point = volume.GetProperty("volume.mount_point")\n        try:\n            size = volume.GetProperty("volume.size")\n        except:\n            size = 0\n\n        print "New storage device detectec:"\n        print "  device_file: %s" % device_file\n        print "  label: %s" % label\n        print "  fstype: %s" % fstype\n        if mounted:\n            print "  mount_point: %s" % mount_point\n        else:\n            print "  not mounted"\n        print "  size: %s (%.2fGB)" % (size, float(size) / 1024**3)\n\nif __name__ == \'__main__\':\n    from dbus.mainloop.glib import DBusGMainLoop\n    DBusGMainLoop(set_as_default=True)\n    loop = gobject.MainLoop()\n    DeviceAddedListener()\n    loop.run()\n']], ["How can I listen for 'usb device inserted' events in Linux, in Python?"], 6], [(472575, 0), [['Single item:'], ['Too many items:']], [["  >>> name, = (name for name in ('bob','fred') if name=='bob')\n >>> name\n 'bob'\n"]], ['select single item from a collection : Python'], 3], [(472575, 1), [['Too many items:'], ['No items:']], [[' >>> name, = (name for name in (\'bob\',\'bob\') if name==\'bob\')\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nValueError: too many values to unpack\n']], ['select single item from a collection : Python'], 3], [(472575, 2), [['No items:'], ['-10000']], [[' >>> name, = (name for name in (\'fred\',\'joe\') if name==\'bob\')\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nValueError: need more than 0 values to unpack\n']], ['select single item from a collection : Python'], 3], [(472977, 0), [['You need to convert your data to a string'], ['One way to do this:']], [[' "\\xc0\\x04\\x00"\n']], ['Binary data with pyserial(python serial port)'], 2], [(472977, 1), [['One way to do this:'], ['-10000']], [[" >>> import array\n>>> array.array('B', [0xc0, 0x04, 0x00]).tostring()\n'\\xc0\\x04\\x00'\n"]], ['Binary data with pyserial(python serial port)'], 2], [(476511, 0), [['Yes, there is  urlparse.urljoin , or  urllib.parse.urljoin  for Python 3.'], ['for copy-and-paste:']], [[' >>> try: from urlparse import urljoin # Python2\n... except ImportError: from urllib.parse import urljoin # Python3\n...\n>>> urljoin("http://www.asite.com/folder/currentpage.html", "anotherpage.html")\n\'http://www.asite.com/folder/anotherpage.html\'\n>>> urljoin("http://www.asite.com/folder/currentpage.html", "folder2/anotherpage.html")\n\'http://www.asite.com/folder/folder2/anotherpage.html\'\n>>> urljoin("http://www.asite.com/folder/currentpage.html", "/folder3/anotherpage.html")\n\'http://www.asite.com/folder3/anotherpage.html\'\n>>> urljoin("http://www.asite.com/folder/currentpage.html", "../finalpage.html")\n\'http://www.asite.com/finalpage.html\'\n']], ['Resolving a relative url path to its absolute path'], 2], [(476511, 1), [['for copy-and-paste:'], ['-10000']], [[' try:\n    from urlparse import urljoin  # Python2\nexcept ImportError:\n    from urllib.parse import urljoin  # Python3\n']], ['Resolving a relative url path to its absolute path'], 2], [(477237, 0), [['random.random()  returns a  uniformly distributed  pseudo-random floating point number in the range [0, 1). This number is less than a given number  p  in the range [0,1) with probability  p . Thus:'], ['Some experiments:']], [[" def flip(p):\n    return 'H' if random.random() < p else 'T'\n"]], ['How do I simulate flip of biased coin in python?'], 2], [(477237, 1), [['Some experiments:'], ['-10000']], [[" >>> N = 100\n>>> flips = [flip(0.2) for i in xrange(N)]\n>>> float(flips.count('H'))/N\n0.17999999999999999  # Approximately 20% of the coins are heads\n\n>>> N = 10000\n>>> flips = [flip(0.2) for i in xrange(N)]\n>>> float(flips.count('H'))/N\n0.20549999999999999  # Better approximation \n"]], ['How do I simulate flip of biased coin in python?'], 2], [(477486, 0), [["You can also use the  NumPy  library (which isn't part of standard library but is relatively easy to obtain) which has the  arange  function:"], ['as well as the  linspace  function which lets you have control over what happens at the endpoint (non-trivial for floating point numbers when things won\'t always divide into the correct number of "slices"):']], [[' >>> import numpy as np\n>>> np.arange(0.0, 1.0, 0.1)\narray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])\n']], ['How to use a decimal range() step value?'], 2], [(477486, 1), [['as well as the  linspace  function which lets you have control over what happens at the endpoint (non-trivial for floating point numbers when things won\'t always divide into the correct number of "slices"):'], ['-10000']], [[' >>> np.linspace(0,1,11)\narray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])\n>>> np.linspace(0,1,10,endpoint=False)\narray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])\n']], ['How to use a decimal range() step value?'], 2], [(478655, 0), [['Try this:'], ['EDIT: it actually looks like you want something more like this.']], [[' class RandomResponder(object):\n    choices = [A, B, C]\n\n    @classmethod\n    def which(cls):\n        return random.choice(cls.choices)\n\n    def __getattr__(self, attr):\n        return getattr(self.which(), attr)\n']], ['Need to route instance calls inside a python class'], 2], [(478655, 1), [['EDIT: it actually looks like you want something more like this.'], ["This could be written using lambda, but I'll just leave it like this so it's clearer."]], [[' class RandomResponder(object):\n    choices = [A, B, C]\n\n    def __getattr__(self, attr):\n        # we define a function that actually gets called\n        # which takes up the first positional argument,\n        # the rest are left to args and kwargs\n        def doCall(which, *args, **kwargs):\n            # get the attribute of the appropriate one, call with passed args\n            return getattr(self.choices[which], attr)(*args, **kwargs)\n        return doCall\n']], ['Need to route instance calls inside a python class'], 2], [(479043, 0), [['This might work:'], ['Here is a test:']], [[' import re\n\ndef _callback(match):\n    """ This is a simple callback function for the regular expression which is \n        in charge of doing the actual capitalization. It is designed to only \n        capitalize words which aren\'t fully uppercased (like acronyms).\n    """\n    word = match.group(0)\n    if word == word.upper():\n        return word\n    else:\n        return word.capitalize()\n\ndef capwords(data):\n    """ This function converts `data` into a capitalized version of itself. This \n        function accomidates acronyms.\n    """\n    return re.sub("[\\w\\\'\\-\\_]+", _callback, data)\n']], ['is there a string method to capitalize acronyms in python?'], 2], [(479043, 1), [['Here is a test:'], ['-10000']], [[' print capwords("This is an IRS test.")    # Produces: "This Is An IRS Test."\nprint capwords("This is an I.R.S. test.") # Produces: "This Is An I.R.S. Test."\n']], ['is there a string method to capitalize acronyms in python?'], 2], [(481692, 0), [['The only way I can think of to do this amounts to giving the function a name:'], ['or alternately, for earlier versions of python:']], [[' fact = lambda x: 1 if x == 0 else x * fact(x-1)\n']], ['Can a lambda function call itself recursively in Python?'], 3], [(481692, 1), [['or alternately, for earlier versions of python:'], ['Update : using the ideas from the other answers, I was able to wedge the factorial function into a single unnamed lambda:']], [[' fact = lambda x: x == 0 and 1 or x * fact(x-1)\n']], ['Can a lambda function call itself recursively in Python?'], 3], [(481692, 2), [['Update : using the ideas from the other answers, I was able to wedge the factorial function into a single unnamed lambda:'], ["So it's possible, but not really recommended!"]], [[' >>> map(lambda n: (lambda f, *a: f(f, *a))(lambda rec, n: 1 if n == 0 else n*rec(rec, n-1), n), range(10))\n[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n']], ['Can a lambda function call itself recursively in Python?'], 3], [(484220, 0), [['You need to do something like'], ['Then,']], [[' class X:                                         \n   def __init__(self):\n     self._value = 90  \n\n   def _get(self):   \n     return self._value\n\n   def _set(self, value):\n     self._value = value  \n\n   value = property(_get, _set)\n']], ['calling methods on an instance with getattr [ python ]'], 2], [(484220, 1), [['Then,'], ['should work.']], [[" setattr(x, 'value', 99)\n"]], ['calling methods on an instance with getattr [ python ]'], 2], [(487184, 0), [['Annotations can be any object:'], ['and you can retrieve the objects using: ']], [[' def somefunc(param1: "string annotation", \n             param2: 151631,  \n             param3: any_object): -> "some information here":\n']], ['How do I specify input and output data types in python comments?'], 3], [(487184, 1), [['and you can retrieve the objects using: '], ['I suggest using other methods to document that. I use epydoc to generate my documentation, and it can read parameter typing information from docstrings:']], [[' print (somefunc.func_annotations)\n{\'param1\': "string annotation", \n \'param2\': 151631,  \n \'param3\': <object any_object>,\n \'return\': "some information here"}\n']], ['How do I specify input and output data types in python comments?'], 3], [(487184, 2), [['I suggest using other methods to document that. I use epydoc to generate my documentation, and it can read parameter typing information from docstrings:'], ["This example is from  epydoc's website . It can generate documentation in a variety of formats, and can generate good graphs from your classes and call profiles."]], [[' def x_intercept(m, b):\n    """\n    Return the x intercept of the line M{y=m*x+b}.  The X{x intercept}\n    of a line is the point at which it crosses the x axis (M{y=0}).\n\n    This function can be used in conjuction with L{z_transform} to\n    find an arbitrary function\'s zeros.\n\n    @type  m: number\n    @param m: The slope of the line.\n    @type  b: number\n    @param b: The y intercept of the line.  The X{y intercept} of a\n              line is the point at which it crosses the y axis (M{x=0}).\n    @rtype:   number\n    @return:  the x intercept of the line M{y=m*x+b}.\n    """\n    return -b/m\n']], ['How do I specify input and output data types in python comments?'], 3], [(488036, 0), [['You will need to add an  __init__  method to  Action_Form  to set your initial values, remembering to call  __init__  on the base  ModelForm  class via  super .'], ["If you plan to pass your filter params as keyword args to  Action_Form , you'll need to remove them prior invoking super:"]], [[" class Action_Form(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(Action_Form, self).__init__(*args, **kwargs)\n        self.fields['from_company'].queryset = Contact.object.filter(...\n"]], ["Django: ModelMultipleChoiceField doesn't select initial choices"], 3], [(488036, 1), [["If you plan to pass your filter params as keyword args to  Action_Form , you'll need to remove them prior invoking super:"], ['or, probably better:']], [[" myfilter = kwargs['myfilter']\ndel kwargs['myfilter']\n"]], ["Django: ModelMultipleChoiceField doesn't select initial choices"], 3], [(488036, 2), [['or, probably better:'], ["For more information, here's another link referring to  Dynamic ModelForms in Django ."]], [[" myfilter = kwargs.pop('myfilter')\n"]], ["Django: ModelMultipleChoiceField doesn't select initial choices"], 3], [(488670, 0), [["To calculate an  exponential smoothing  of your data with a smoothing factor  alpha  (it is  (1 - alpha)  in Wikipedia's terms):"], ["The above is not pretty, so let's refactor it a bit:"]], [[' >>> alpha = 0.5\n>>> assert 0 < alpha <= 1.0\n>>> av = sum(alpha**n.days * iq \n...     for n, iq in map(lambda (day, iq), today=max(days): (today-day, iq), \n...         sorted(zip(days, IQ), key=lambda p: p[0], reverse=True)))\n95.0\n']], ['calculate exponential moving average in python'], 3], [(488670, 1), [["The above is not pretty, so let's refactor it a bit:"], ['Example:']], [[' from collections import namedtuple\nfrom operator    import itemgetter\n\ndef smooth(iq_data, alpha=1, today=None):\n    """Perform exponential smoothing with factor `alpha`.\n\n    Time period is a day.\n    Each time period the value of `iq` drops `alpha` times.\n    The most recent data is the most valuable one.\n    """\n    assert 0 < alpha <= 1\n\n    if alpha == 1: # no smoothing\n        return sum(map(itemgetter(1), iq_data))\n\n    if today is None:\n        today = max(map(itemgetter(0), iq_data))\n\n    return sum(alpha**((today - date).days) * iq for date, iq in iq_data)\n\nIQData = namedtuple("IQData", "date iq")\n\nif __name__ == "__main__":\n    from datetime import date\n\n    days = [date(2008,1,1), date(2008,1,2), date(2008,1,7)]\n    IQ = [110, 105, 90]\n    iqdata = list(map(IQData, days, IQ))\n    print("\\n".join(map(str, iqdata)))\n\n    print(smooth(iqdata, alpha=0.5))\n']], ['calculate exponential moving average in python'], 3], [(488670, 2), [['Example:'], ['-10000']], [[' $ python26 smooth.py\nIQData(date=datetime.date(2008, 1, 1), iq=110)\nIQData(date=datetime.date(2008, 1, 2), iq=105)\nIQData(date=datetime.date(2008, 1, 7), iq=90)\n95.0\n']], ['calculate exponential moving average in python'], 3], [(492519, 0), [['You may use the  signal  package if you are running on UNIX:'], ['Note that  since we raise an exception when timeout happens, it may end up caught and ignored inside the function, for example of one such function:']], [[' In [1]: import signal\n\n# Register an handler for the timeout\nIn [2]: def handler(signum, frame):\n   ...:     print "Forever is over!"\n   ...:     raise Exception("end of time")\n   ...: \n\n# This function *may* run for an indetermined time...\nIn [3]: def loop_forever():\n   ...:     import time\n   ...:     while 1:\n   ...:         print "sec"\n   ...:         time.sleep(1)\n   ...:         \n   ...:         \n\n# Register the signal function handler\nIn [4]: signal.signal(signal.SIGALRM, handler)\nOut[4]: 0\n\n# Define a timeout for your function\nIn [5]: signal.alarm(10)\nOut[5]: 0\n\nIn [6]: try:\n   ...:     loop_forever()\n   ...: except Exception, exc: \n   ...:     print exc\n   ....: \nsec\nsec\nsec\nsec\nsec\nsec\nsec\nsec\nForever is over!\nend of time\n\n# Cancel the timer if the function returned before timeout\n# (ok, mine won\'t but yours maybe will :)\nIn [7]: signal.alarm(0)\nOut[7]: 0\n']], ['Timeout on a function call'], 2], [(492519, 1), [['Note that  since we raise an exception when timeout happens, it may end up caught and ignored inside the function, for example of one such function:'], ['-10000']], [[" def loop_forever():\n    while 1:\n        print 'sec'\n        try:\n            time.sleep(10)\n        except:\n            continue\n"]], ['Timeout on a function call'], 2], [(493484, 0), [["Here's an example parser for your format:"], ['Output:']], [[' from lepl import (AnyBut, Digit, Drop, Eos, Integer, Letter,\n                  NON_GREEDY, Regexp, Space, Separator, Word)\n\n# EBNF\n# name = ( letter | "_" ) , { letter | "_" | digit } ;\nname = Word(Letter() | \'_\',\n            Letter() | \'_\' | Digit())\n# words = word , space+ , word , { space+ , word } ;\n# two or more space-separated words (non-greedy to allow comment at the end)\nwords = Word()[2::NON_GREEDY, ~Space()[1:]] > list\n# value = integer | word | words  ;\nvalue = (Integer() >> int) | Word() | words\n# comment = "#" , { all characters - "\\n" } , ( "\\n" | EOF ) ;\ncomment = \'#\' & AnyBut(\'\\n\')[:] & (\'\\n\' | Eos())\n\nwith Separator(~Regexp(r\'\\s*\')):\n    # statement = name , "=" , value ;\n    statement = name & Drop(\'=\') & value > tuple\n    # suite     = "{" , { comment | statement } , "}" ;\n    suite     = Drop(\'{\') & (~comment | statement)[:] & Drop(\'}\') > dict\n    # block     = name , suite ;\n    block     = name & suite > tuple\n    # config    = { comment | block } ;\n    config    = (~comment | block)[:] & Eos() > dict\n\nfrom pprint import pprint\n\npprint(config.parse(open(\'input.cfg\').read()))\n']], ["What's the best way(error proof / foolproof) to parse a file using python with following format?"], 2], [(493484, 1), [['Output:'], ['-10000']], [[" [{'block1': {'othervalue': 32423432,\n             'some_value': ['some', 'other', 'kind', 'of', 'data'],\n             'value': 'data'},\n  'block2': {'othervalue': 32423432,\n             'some_value': ['some', 'other', 'kind', 'of', 'data'],\n             'value': 'data'}}]\n"]], ["What's the best way(error proof / foolproof) to parse a file using python with following format?"], 2], [(493853, 0), [['If you need many array manipulation, then numpy is the best choice in python'], ['or element wise operation with arrays']], [[' >>> import numpy\n>>> data = numpy.array([(2, 4, 8), (3, 6, 5), (7, 5, 2)])\n>>> data\narray([[2, 4, 8],\n       [3, 6, 5],\n       [7, 5, 2]])\n\n>>> data.sum()  # product of all elements\n42\n>>> data.sum(axis=1)   # sum of elements in rows\narray([14, 14, 14])\n>>> data.sum(axis=0)   # sum of elements in columns\narray([12, 15, 15])\n>>> numpy.product(data, axis=1)   # product of elements in rows\narray([64, 90, 70])\n>>> numpy.product(data, axis=0)   # product of elements in columns\narray([ 42, 120,  80])\n>>> numpy.product(data)      # product of all elements\n403200\n']], ['Which Python module is suitable for data manipulation in a list?'], 3], [(493853, 1), [['or element wise operation with arrays'], ['element wise mathematical operations, e.g.']], [[' >>> x,y,z = map(numpy.array,[(2, 4, 8), (3, 6, 5), (7, 5, 2)])\n>>> x\narray([2, 4, 8])\n>>> y\narray([3, 6, 5])\n>>> z\narray([7, 5, 2])\n\n>>> x*y\narray([ 6, 24, 40])\n>>> x*y*z\narray([ 42, 120,  80])\n>>> x+y+z\narray([12, 15, 15])\n']], ['Which Python module is suitable for data manipulation in a list?'], 3], [(493853, 2), [['element wise mathematical operations, e.g.'], ['-10000']], [[' >>> numpy.log(data)\narray([[ 0.69314718,  1.38629436,  2.07944154],\n       [ 1.09861229,  1.79175947,  1.60943791],\n       [ 1.94591015,  1.60943791,  0.69314718]])\n>>> numpy.exp(x)\narray([    7.3890561 ,    54.59815003,  2980.95798704])\n']], ['Which Python module is suitable for data manipulation in a list?'], 3], [(494594, 0), [["In programming,  infinite  doesn't exist. You can use a recursive form translating the math form directly in your language, for example in Python it becomes:"], ['This one is pretty easy to implement and very, very fast to compute, in Python:']], [[' def F(n):\n    if n == 0: return 0\n    elif n == 1: return 1\n    else: return F(n-1)+F(n-2)\n']], ['How to write the Fibonacci Sequence in Python'], 5], [(494594, 1), [['This one is pretty easy to implement and very, very fast to compute, in Python:'], ['If your language supports iterators you may do something like:']], [[' from math import sqrt\ndef F(n):\n    return ((1+sqrt(5))**n-(1-sqrt(5))**n)/(2**n*sqrt(5))\n']], ['How to write the Fibonacci Sequence in Python'], 5], [(494594, 2), [['If your language supports iterators you may do something like:'], ['-10000']], [[' def F():\n    a,b = 0,1\n    while True:\n        yield a\n        a, b = b, a + b\n']], ['How to write the Fibonacci Sequence in Python'], 5], [(494594, 3), [['-10000'], ["In python I'd use the iterator form and go for:"]], [[' def SubFib(startNumber, endNumber):\n    n = 0\n    cur = f(n)\n    while cur <= endNumber:\n        if startNumber <= cur:\n            print cur\n        n += 1\n        cur = f(n)\n']], ['How to write the Fibonacci Sequence in Python'], 5], [(494594, 4), [["In python I'd use the iterator form and go for:"], ['My hint is to  learn to read  what you need. Project Euler (google for it) will train you to do so :P\nGood luck and have fun!']], [[' def SubFib(startNumber, endNumber):\n    for cur in F():\n        if cur > endNumber: return\n        if cur >= startNumber:\n            yield cur\n\nfor i in SubFib(10, 200):\n    print i\n']], ['How to write the Fibonacci Sequence in Python'], 5], [(494919, 0), [['Start by opening the file and reading all the lines:'], ['Then...']], [[" f = open('filename string');\nlines = f.readlines()\n"]], ['File and space in Python'], 3], [(494919, 1), [['Then...'], ['Also:']], [[" # remove empty lines\nlines = [l for l in lines if len(l.strip()) > 0]\nheader = lines[0]\nline = lines[1].split(' ')\ncolumn1 = line[0]\ncolumn2 = line[1]\n...\n"]], ['File and space in Python'], 3], [(494919, 2), [['Also:'], ['-10000']], [[' total_lines = len(lines)\ntotal_columns = len(line)\n']], ['File and space in Python'], 3], [(498106, 0), [['Method 1 \nThe first method (which I prefer) is to use  msbuild :'], ['Method 2 \nYou can also run:']], [[' msbuild project.sln /Flags...\n']], ['How do I compile a Visual Studio project from the command-line?'], 3], [(498106, 1), [['Method 2 \nYou can also run:'], ['So, the end result might be:']], [[' vcexpress project.sln /build /Flags...\n']], ['How do I compile a Visual Studio project from the command-line?'], 3], [(498106, 2), [['So, the end result might be:'], ["You'll also want to make sure your environment variables are correct, as msbuild and vcexpress are not by default on the system path. Either start the Visual Studio build environment and run your script from there, or modify the paths in Python (with  os.putenv )."]], [[' os.system("msbuild project.sln /p:Configuration=Debug")\n']], ['How do I compile a Visual Studio project from the command-line?'], 3], [(499705, 0), [['At the top of your python script:'], ['Wherever you want to spin up a console:']], [[' from IPython import embed\n']], ['Can I use IPython in an embedded interactive Python console?'], 2], [(499705, 1), [['Wherever you want to spin up a console:'], ['-10000']], [[' embed()\n']], ['Can I use IPython in an embedded interactive Python console?'], 2], [(500578, 0), [['Use this to wrap your generator:'], ['Use it like this:']], [[" class GeneratorWrap(object):\n\n      def __init__(self, generator):\n          self.generator = generator\n\n      def __iter__(self):\n          return self\n\n      def next(self):\n          for o in self.generator:\n              return o\n          raise StopIteration # If you don't care about the iterator protocol, remove this line and the __iter__ method.\n"]], ['is there an alternative way of calling next on python generators?'], 2], [(500578, 1), [['Use it like this:'], ['Update:  Please use the answer below because it is much better than this one.']], [[' def example_generator():\n    for i in [1,2,3,4,5]:\n        yield i\n\ngen = GeneratorWrap(example_generator())\nprint gen.next()  # prints 1\nprint gen.next()  # prints 2\n']], ['is there an alternative way of calling next on python generators?'], 2], [(501021, 0), [['With your datetimes stored this way, you simply use text comparisons such as '], ['or']], [[" SELECT * FROM tbl WHERE tbl.start = '2009-02-01 10:30:00'\n"]], ['Python + SQLite query to find entries that sit in a specified time slot'], 2], [(501021, 1), [['or'], ['-10000']], [[" SELECT * FROM tbl WHERE '2009-02-01 10:30:00' BETWEEN tbl.start AND tbl.end;\n"]], ['Python + SQLite query to find entries that sit in a specified time slot'], 2], [(501585, 0), [['In any of your vim windows, type something like this:'], ['Visually select both of those lines (V to start visual mode), and type the following:']], [[" for x in range(1,10):\n    print '-> %d' % x\n"]], ['How can you use Python in Vim?'], 4], [(501585, 1), [['Visually select both of those lines (V to start visual mode), and type the following:'], ["Because you pressed ':' in visual mode, that will end up looking like:"]], [[' :!python\n']], ['How can you use Python in Vim?'], 4], [(501585, 2), [["Because you pressed ':' in visual mode, that will end up looking like:"], ['Hit enter and the selection is replaced by the output of the  print  statements. You could easily turn it into a mapping:']], [[" :'<,'>!python\n"]], ['How can you use Python in Vim?'], 4], [(501585, 3), [['Hit enter and the selection is replaced by the output of the  print  statements. You could easily turn it into a mapping:'], ['-10000']], [[' :vnoremap <f5> :!python<CR>\n']], ['How can you use Python in Vim?'], 4], [(501597, 0), [['I used the following  setup.py  file (full version is  here ):'], ['To work around this, I used the following  setup.cfg  file:']], [[" from setuptools import setup\n\nsetup(\n  # ...\n  data_files=[\n    ('share/icons/hicolor/scalable/apps', ['data/mypackage.svg']),\n    ('share/applications', ['data/mypackage.desktop'])\n  ],\n  entry_points={\n    'console_scripts': ['startit=mypackage.cli:run']\n  }\n)\n"]], ['How to distribute `.desktop` files and icons for a Python package in Gnome (with distutils or setuptools)?'], 2], [(501597, 1), [['To work around this, I used the following  setup.cfg  file:'], ['This works. Both data files are created in the right place and the  .desktop  file is recognized by Gnome.']], [[' [install]\nsingle-version-externally-managed=1\nrecord=install.txt\n']], ['How to distribute `.desktop` files and icons for a Python package in Gnome (with distutils or setuptools)?'], 2], [(505925, 0), [['Just use the Left() function to strip it out, i.e. '], ['By the way, instead of ']], [['  Left(Target, Len(Target)-1))\n']], ['Extracting data from MS Word'], 3], [(505925, 1), [['By the way, instead of '], ['Try this:']], [['  num_rows = Application.ActiveDocument.Tables(2).Rows.Count\n For n = 1 To num_rows\n      Descr = Application.ActiveDocument.Tables(2).Cell(n, 2).Range.Text\n']], ['Extracting data from MS Word'], 3], [(505925, 2), [['Try this:'], ['-10000']], [['  For Each row in Application.ActiveDocument.Tables(2).Rows\n      Descr = row.Cells(2).Range.Text\n']], ['Extracting data from MS Word'], 3], [(507405, 0), [['The DOM Level 3 LS parameter format-pretty-print in  pxdom  comes pretty close to your example. Its rule is that if an element contains only a single TextNode, no extra whitespace will be added. However it (currently) uses two spaces for an indent rather than four.'], ["If that's the rule you want, and you can get away with it, you might also be able to monkey-patch minidom's Element.writexml, eg.:"]], [[' >>> doc= pxdom.parseString(\'<a><b>c</b></a>\')\n>>> doc.domConfig.setParameter(\'format-pretty-print\', True)\n>>> print doc.pxdomContent\n<?xml version="1.0" encoding="utf-16"?>\n<a>\n  <b>c</b>\n</a>\n']], ['Python xml minidom. generate <text>Some text</text> element'], 2], [(507405, 1), [["If that's the rule you want, and you can get away with it, you might also be able to monkey-patch minidom's Element.writexml, eg.:"], ['All the usual caveats about the badness of monkey-patching apply.']], [[" >>> from xml.dom import minidom\n>>> def newwritexml(self, writer, indent= '', addindent= '', newl= ''):\n...     if len(self.childNodes)==1 and self.firstChild.nodeType==3:\n...         writer.write(indent)\n...         self.oldwritexml(writer) # cancel extra whitespace\n...         writer.write(newl)\n...     else:\n...         self.oldwritexml(writer, indent, addindent, newl)\n... \n>>> minidom.Element.oldwritexml= minidom.Element.writexml\n>>> minidom.Element.writexml= newwritexml\n"]], ['Python xml minidom. generate <text>Some text</text> element'], 2], [(508657, 0), [['You can create it using nested lists:'], ["If it has to be dynamic it's more complicated, why not write a small class yourself?"]], [[' matrix = [[a,b],[c,d],[e,f]]\n']], ['Multidimensional array in Python'], 5], [(508657, 1), [["If it has to be dynamic it's more complicated, why not write a small class yourself?"], ['This can be used like this:']], [[' class Matrix(object):\n    def __init__(self, rows, columns, default=0):\n        self.m = []\n        for i in range(rows):\n            self.m.append([default for j in range(columns)])\n\n    def __getitem__(self, index):\n        return self.m[index]\n']], ['Multidimensional array in Python'], 5], [(508657, 2), [['This can be used like this:'], ["If you need multidimensional arrays you can either create an array and calculate the offset or you'd use arrays in arrays in arrays, which can be pretty bad for memory. (Could be faster though…) I've implemented the first idea like this:"]], [[' m = Matrix(10,5)\nm[3][6] = 7\nprint m[3][6] // -> 7\n']], ['Multidimensional array in Python'], 5], [(508657, 3), [["If you need multidimensional arrays you can either create an array and calculate the offset or you'd use arrays in arrays in arrays, which can be pretty bad for memory. (Could be faster though…) I've implemented the first idea like this:"], ['Can be used like this:']], [[' class Matrix(object):\n    def __init__(self, *dims):\n        self._shortcuts = [i for i in self._create_shortcuts(dims)]\n        self._li = [None] * (self._shortcuts.pop())\n        self._shortcuts.reverse()\n\n    def _create_shortcuts(self, dims):\n        dimList = list(dims)\n        dimList.reverse()\n        number = 1\n        yield 1\n        for i in dimList:\n            number *= i\n            yield number\n\n    def _flat_index(self, index):\n        if len(index) != len(self._shortcuts):\n            raise TypeError()\n\n        flatIndex = 0\n        for i, num in enumerate(index):\n            flatIndex += num * self._shortcuts[i]\n        return flatIndex\n\n    def __getitem__(self, index):\n        return self._li[self._flat_index(index)]\n\n    def __setitem__(self, index, value):\n        self._li[self._flat_index(index)] = value\n']], ['Multidimensional array in Python'], 5], [(508657, 4), [['Can be used like this:'], ['-10000']], [[" m = Matrix(4,5,2,6)\nm[2,3,1,3] = 'x'\nm[2,3,1,3] // -> 'x'\n"]], ['Multidimensional array in Python'], 5], [(510751, 0), [['Example:'], ['What you could do is pass the password as part of the CVSROOT specification instead, like this:']], [[" cmd = ['cvs', \n       '-d:pserver:anonymous@bayonne.cvs.sourceforge.net:/cvsroot/bayonne', \n       'login']\np = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE) \n"]], ['Spawn subprocess that expects console input without blocking?'], 4], [(510751, 1), [['What you could do is pass the password as part of the CVSROOT specification instead, like this:'], ['I.e. a function to login to a sourceforge project:']], [[' :pserver:<user>[:<passwd>]@<server>:/<path>\n']], ['Spawn subprocess that expects console input without blocking?'], 4], [(510751, 2), [['I.e. a function to login to a sourceforge project:'], ['This works for me. Calling']], [[" import subprocess\n\ndef login_to_sourceforge_cvs(project, username='anonymous', password=''):\n    host = '%s.cvs.sourceforge.net' % project\n    path = '/cvsroot/%s' % project\n    cmd = ['cvs', \n           '-d:pserver:%s:%s@%s:%s' % (username, password, host, path), \n           'login']\n    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, \n                              stdout=subprocess.PIPE\n                              stderr=subprocess.STDOUT) \n    return p\n"]], ['Spawn subprocess that expects console input without blocking?'], 4], [(510751, 3), [['This works for me. Calling'], ["Will log in anonymously to the bayonne project's cvs."]], [[" login_to_sourceforge_cvs('bayonne')\n"]], ['Spawn subprocess that expects console input without blocking?'], 4], [(510972, 0), [['Have you tried the  __name__  attribute of the class? ie  type(x).__name__  will give you the name of the class, which I think is what you want.'], ['This method works with  new-style classes  only. Your code might use some old-style classes. The following works for both:']], [[" >>> import itertools\n>>> x = itertools.count(0)\n>>> type(x).__name__\n'count'\n"]], ['Getting the class name of an instance in Python'], 2], [(510972, 1), [['This method works with  new-style classes  only. Your code might use some old-style classes. The following works for both:'], ['-10000']], [[' x.__class__.__name__\n']], ['Getting the class name of an instance in Python'], 2], [(513291, 0), [['To turn an integer range into two digit strings:'], ['Then to get the AM/PM indicator:']], [[" >>> range(13)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n>>> [ '%02d' % i for i in range(13) ]\n['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\n"]], ['Various Python datetime issues'], 2], [(513291, 1), [['Then to get the AM/PM indicator:'], ['Voila!']], [[" >>> import datetime\n>>> current_dt = datetime.datetime.now()\n>>> current_dt\ndatetime.datetime(2009, 2, 4, 22, 2, 14, 390000)\n>>> ['AM','PM'][current_dt.hour>=12]\n'PM'\n"]], ['Various Python datetime issues'], 2], [(514029, 0), [['Use a regular expression:'], ['str.split()  takes a string on which to split input.  For instance:']], [[' import re \ns = "name[id]"\nre.find(r"\\[(.*?)\\]", s).group(1) # = \'id\'\n']], ['How to split a string by using [] in Python'], 3], [(514029, 1), [['str.split()  takes a string on which to split input.  For instance:'], ['The  re  module also allows you to split by regular expression, which can be  very  useful, and I think is what you meant to do.']], [[' "i,split,on commas".split(\',\') # = [\'i\', \'split\', \'on commas\']\n']], ['How to split a string by using [] in Python'], 3], [(514029, 2), [['The  re  module also allows you to split by regular expression, which can be  very  useful, and I think is what you meant to do.'], ['-10000']], [[' import re\ns = "name[id]"\n\n# split by either a \'[\' or a \']\'\nre.split(\'\\[|\\]\', s) # = [\'name\', \'id\', \'\']\n']], ['How to split a string by using [] in Python'], 3], [(514038, 0), [['For C++ I like boost::tuple plus boost::tie (or std::tr1 if you have it)'], ['or a less contrived example']], [[' typedef boost::tuple<double,double,double> XYZ;\n\nXYZ foo();\n\ndouble x,y,z;\nboost::tie(x,y,z) = foo();\n']], ['Elegant ways to return multiple values from a function'], 2], [(514038, 1), [['or a less contrived example'], ['-10000']], [[' MyMultimap::iterator lower,upper;\nboost::tie(lower,upper) = some_map.equal_range(key);\n']], ['Elegant ways to return multiple values from a function'], 2], [(516451, 0), [['Key concept here is backreferences in regular expressions:'], ["For pulling off the '.txt' in a reliable way, I recommend  os.path.splitext()"]], [[' import re\ntext = "ThisFileName.txt"\nprint re.sub(\'([a-z])([A-Z])\', r\'\\1 \\2\', text)\n# Prints: "This File Name.txt"\n']], ['Python regex: Turn "ThisFileName.txt" into "This File Name.txt"'], 2], [(516451, 1), [["For pulling off the '.txt' in a reliable way, I recommend  os.path.splitext()"], ['-10000']], [[' import os\nfilename = "ThisFileName.txt"\nprint os.path.splitext(filename)\n# Prints: (\'ThisFileName\', \'.txt\')\n']], ['Python regex: Turn "ThisFileName.txt" into "This File Name.txt"'], 2], [(516946, 0), [['Using C# you can create multiple Excel Application instances via:'], ['Using late binding in C# you can use:']], [[' Excel.Application xlApp1 = new Excel.Application();\nExcel.Application xlApp2 = new Excel.Application();\nExcel.Application xlApp3 = new Excel.Application();\n']], ['Control 2 separate Excel instances by COM independently... can it be done?'], 3], [(516946, 1), [['Using late binding in C# you can use:'], ['If using VB.NET, VB6 or VBA you can use CreateObject as follows:']], [[' object objXL1 = Activator.CreateInstance(Type.GetTypeFromProgID("Excel.Application"));\nobject objXL2 = Activator.CreateInstance(Type.GetTypeFromProgID("Excel.Application"));\nobject objXL3 = Activator.CreateInstance(Type.GetTypeFromProgID("Excel.Application"));\n']], ['Control 2 separate Excel instances by COM independently... can it be done?'], 3], [(516946, 2), [['If using VB.NET, VB6 or VBA you can use CreateObject as follows:'], ["Unfortunately, in Python, I don't have a clue. But unless there is some limitation to Python (which I can't imagine?) then I would think that it's very do-able."]], [[' Dim objXL1 As Object = CreateObject("Excel.Application")\nDim objXL2 As Object = CreateObject("Excel.Application")\nDim objXL3 As Object = CreateObject("Excel.Application")\n']], ['Control 2 separate Excel instances by COM independently... can it be done?'], 3], [(518021, 0), [['-10000'], ['The same works for tuples:']], [[' my_list = [1,2,3,4,5]\nlen(my_list)\n']], ['Getting the length of an array in Python'], 4], [(518021, 1), [['The same works for tuples:'], ['And strings, which are really just arrays of characters:']], [[' my_tuple = (1,2,3,4,5)\nlen(my_tuple)\n']], ['Getting the length of an array in Python'], 4], [(518021, 2), [['And strings, which are really just arrays of characters:'], ['The functional nature of  len()  also lends itself well to functional styles of programming.']], [[" my_string = 'hello world'\nlen(my_string)\n"]], ['Getting the length of an array in Python'], 4], [(518021, 3), [['The functional nature of  len()  also lends itself well to functional styles of programming.'], ['-10000']], [[' lengths = map(len, list_of_containers)\n']], ['Getting the length of an array in Python'], 4], [(519633, 0), [['To write a lazy function, just use  yield :'], ['Another option would be to use  iter  and a helper function:']], [[' def read_in_chunks(file_object, chunk_size=1024):\n    """Lazy function (generator) to read a file piece by piece.\n    Default chunk size: 1k."""\n    while True:\n        data = file_object.read(chunk_size)\n        if not data:\n            break\n        yield data\n\n\nf = open(\'really_big_file.dat\')\nfor piece in read_in_chunks(f):\n    process_data(piece)\n']], ['Lazy Method for Reading Big File in Python?'], 3], [(519633, 1), [['Another option would be to use  iter  and a helper function:'], ['If the file is line-based, the file object is already a lazy generator of lines:']], [[" f = open('really_big_file.dat')\ndef read1k():\n    return f.read(1024)\n\nfor piece in iter(read1k, ''):\n    process_data(piece)\n"]], ['Lazy Method for Reading Big File in Python?'], 3], [(519633, 2), [['If the file is line-based, the file object is already a lazy generator of lines:'], ['-10000']], [[" for line in open('really_big_file.dat'):\n    process_data(line)\n"]], ['Lazy Method for Reading Big File in Python?'], 3], [(520615, 0), [['-10000'], ["Here's a modified example from the article you cited:"]], [[' JButton("Push me", actionPerformed=self.nameOfMethodToCall)\n']], ['Event handling with Jython & Swing'], 2], [(520615, 1), [["Here's a modified example from the article you cited:"], ['-10000']], [[' from javax.swing import JButton, JFrame\n\nclass MyFrame(JFrame):\n    def __init__(self):\n        JFrame.__init__(self, "Hello Jython")\n        button = JButton("Hello", actionPerformed=self.hello)\n        self.add(button)\n\n        self.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\n        self.setSize(300, 300)\n        self.show()\n\n    def hello(self, event):\n        print "Hello, world!"\n\nif __name__=="__main__":\n    MyFrame()\n']], ['Event handling with Jython & Swing'], 2], [(521321, 0), [['-10000'], ['with counter:']], [[' import os.path\nfor dir, file in zip(directories, files):\n    print(os.path.join(dir, file))                      # for directories, files\n']], ['Python loops with multiple lists?'], 2], [(521321, 1), [['with counter:'], ['-10000']], [[' for i, (dir, file) in enumerate(zip(directories, files)):\n    print(i, os.path.join(dir, file))\n']], ['Python loops with multiple lists?'], 2], [(521502, 0), [['-10000'], ['example:']], [['  instance.__class__.__name__\n']], ['How to get the concrete class name as a string?'], 2], [(521502, 1), [['example:'], ['-10000']], [[" >>> class A():\n    pass\n>>> a = A()\n>>> a.__class__.__name__\n'A'\n"]], ['How to get the concrete class name as a string?'], 2], [(522430, 0), [['-10000'], ['If you are working with an iterable instead of a list, you should use  itertools :']], [[' for x in thousand[400:500]:\n    pass\n']], ['Is there a way to loop through a sub section of a list in Python'], 2], [(522430, 1), [['If you are working with an iterable instead of a list, you should use  itertools :'], ['If you need to loop over  thousand[500] , then use 501 as the latter index. This will work even if  thousand[501]  is not a valid index.']], [[' import itertools\nfor x in itertools.islice(thousand, 400, 500):\n    pass\n']], ['Is there a way to loop through a sub section of a list in Python'], 2], [(523356, 0), [["It's simple:"], ['Example -']], [[' from django.http import HttpResponseRedirect\n\ndef myview(request):\n    ...\n    return HttpResponseRedirect("/path/")\n']], ['Python + Django page redirect'], 3], [(523356, 1), [['Example -'], ['In Django 1.5  redirect_to  no longer exists and has been replaced by  RedirectView . Credit to  Yonatan']], [[" from django.views.generic.simple import redirect_to\n\nurlpatterns = patterns('',   \n    (r'^one/$', redirect_to, {'url': '/another/'}),\n\n    #etc...\n)\n"]], ['Python + Django page redirect'], 3], [(523356, 2), [['In Django 1.5  redirect_to  no longer exists and has been replaced by  RedirectView . Credit to  Yonatan'], ['-10000']], [[" from django.views.generic import RedirectView\n\nurlpatterns = patterns('',\n    (r'^one/$', RedirectView.as_view(url='/another/')),\n)\n"]], ['Python + Django page redirect'], 3], [(525272, 0), [['-10000'], ['-10000']], [["Remove all lines after you've done with them: with open('myfile.txt', 'rw+') as file:\n    for line in file:\n        processLine(line)\n    file.truncate(0)\n"]], ['Python truncate lines as they are read'], 3], [(525272, 1), [['-10000'], ['-10000']], [["Remove each line independently: lines = open('myfile.txt').readlines()\n\nfor i, line in enumerate(lines[:]):\n    processLine(line)\n    del lines[i]\n\nopen('myfile.txt', 'w').writelines(lines)\n"]], ['Python truncate lines as they are read'], 3], [(525272, 2), [['-10000'], ['In general, as other people already said it is a bad idea what you are trying to do.']], [["You can leave only those lines that cause exceptions: import fileinput\n\nfor line in fileinput.input(['myfile.txt'], inplace=1):\n    try: processLine(line)\n    except:\n         sys.stdout.write(line) # it prints to 'myfile.txt'\n"]], ['Python truncate lines as they are read'], 3], [(526255, 0), [["This activestate recipe  gives an easy-to-follow approach, specifically the version in the comments that doesn't require you to pre-normalize your weights:"], ['A binary-search choice function like so:']], [[' import random\n\ndef weighted_choice(items):\n    """items is a list of tuples in the form (item, weight)"""\n    weight_total = sum((item[1] for item in items))\n    n = random.uniform(0, weight_total)\n    for item, weight in items:\n        if n < weight:\n            return item\n        n = n - weight\n    return item\n']], ['Probability distribution in Python'], 6], [(526255, 1), [['A binary-search choice function like so:'], ['A compiling version of 1:']], [[' def weighted_choice_bisect(items):\n    added_weights = []\n    last_sum = 0\n\n    for item, weight in items:\n        last_sum += weight\n        added_weights.append(last_sum)\n\n    return items[bisect.bisect(added_weights, random.random() * last_sum)][0]\n']], ['Probability distribution in Python'], 6], [(526255, 2), [['A compiling version of 1:'], ['A compiling version of 2:']], [[' def weighted_choice_compile(items):\n    """returns a function that fetches a random item from items\n\n    items is a list of tuples in the form (item, weight)"""\n    weight_total = sum((item[1] for item in items))\n    def choice(uniform = random.uniform):\n        n = uniform(0, weight_total)\n        for item, weight in items:\n            if n < weight:\n                return item\n            n = n - weight\n        return item\n    return choice\n']], ['Probability distribution in Python'], 6], [(526255, 3), [['A compiling version of 2:'], ['I then built a big list of choices like so:']], [[' def weighted_choice_bisect_compile(items):\n    """Returns a function that makes a weighted random choice from items."""\n    added_weights = []\n    last_sum = 0\n\n    for item, weight in items:\n        last_sum += weight\n        added_weights.append(last_sum)\n\n    def choice(rnd=random.random, bis=bisect.bisect):\n        return items[bis(added_weights, rnd() * last_sum)][0]\n    return choice\n']], ['Probability distribution in Python'], 6], [(526255, 4), [['I then built a big list of choices like so:'], ['And an excessively simple profiling function:']], [[' choices = [(random.choice("abcdefg"), random.uniform(0,50)) for i in xrange(2500)]\n']], ['Probability distribution in Python'], 6], [(526255, 5), [['And an excessively simple profiling function:'], ['The results:']], [[' def profiler(f, n, *args, **kwargs):\n    start = time.time()\n    for i in xrange(n):\n        f(*args, **kwargs)\n    return time.time() - start\n']], ['Probability distribution in Python'], 6], [(529424, 0), [['Use the  reversed()  built-in function:'], ['To also access the original index:']], [[' >>> a = ["foo", "bar", "baz"]\n>>> for i in reversed(a):\n...     print i\n... \nbaz\nbar\nfoo\n']], ['Traverse a list in reverse order in Python'], 2], [(529424, 1), [['To also access the original index:'], ['-10000']], [[' >>> for i, e in reversed(list(enumerate(a))):\n...     print i, e\n... \n2 baz\n1 bar\n0 foo\n']], ['Traverse a list in reverse order in Python'], 2], [(533321, 0), [["if you want background pixmap as its parent's, set it as"], ['and to disable set it as']], [[' bg_pixmap[state] = "<parent>" \n']], ['Disable pixmap background defined by GTK theme per application'], 2], [(533321, 1), [['and to disable set it as'], ['-10000']], [[' bg_pixmap[state] = "<none>"\n']], ['Disable pixmap background defined by GTK theme per application'], 2], [(533631, 0), [["For an example of number one, consider  werkzeug's request and response system .  I can make a plain old request object by saying:"], ['If I want to add accept header support, I would make that']], [[' from werkzeug import BaseRequest\n\nclass Request(BaseRequest):\n    pass\n']], ['What is a mixin, and why are they useful?'], 3], [(533631, 1), [['If I want to add accept header support, I would make that'], ['If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:']], [[' from werkzeug import BaseRequest, AcceptMixin\n\nclass Request(BaseRequest, AcceptMixin):\n    pass\n']], ['What is a mixin, and why are they useful?'], 3], [(533631, 2), [['If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:'], ["The difference is subtle, but in the above examples, the mixin classes weren't made to stand on their own.  In more traditional multiple inheritance, the  AuthenticationMixin  (for example) would probably be something more like  Authenticator .  That is, the class would probably be designed to stand on its own."]], [[' from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin\n\nclass Request(BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin):\n    pass\n']], ['What is a mixin, and why are they useful?'], 3], [(534608, 0), [['-10000'], ['Example:']], [[' names_dict = dict((name,index)\n                  for index,lst in enumerate(names)\n                  for name in lst)\n']], ["Python Golf: what's the most concise way of turning this list of lists into a dictionary:"], 2], [(534608, 1), [['Example:'], ['-10000']], [[" >>> names = [['Tom', 'Dick'], ['Harry', 'John', 'Mike'], ['Bob']]\n>>> names_dict = dict((name,index)\n...                   for index,lst in enumerate(names)\n...                   for name in lst)\n>>> names_dict\n{'Tom': 0, 'Mike': 1, 'Dick': 0, 'Harry': 1, 'Bob': 2, 'John': 1}\n"]], ["Python Golf: what's the most concise way of turning this list of lists into a dictionary:"], 2], [(536148, 0), [['I`d do something like this:'], ['And include:']], [[' ifstream f("data.txt");\nstring str;\nwhile (getline(f, str)) {\n    Point p;\n    sscanf(str.c_str(), "%f, %f, %f\\n", &p.x, &p.y, &p.z); \n    points.push_back(p);\n}\n']], ['C++ string parsing (python style)'], 2], [(536148, 1), [['And include:'], ['-10000']], [[' #include <iostream>\n#include <fstream>\n']], ['C++ string parsing (python style)'], 2], [(537399, 0), [["Here's a simple example vhost, setup up to map any requests for /wsgi/something to the application (which can then look at PATH_INFO to choose an action, or however you are doing your dispatching). The root URL '/' is also routed to the WSGI application."], ['application.py would, when run, leave your WSGI callable in the global ‘application’ variable. You can also add a run-as-main footer for compatibility with old-school CGI:']], [[' LoadModule wsgi_module /usr/local/lib/mod_wsgi.so\n...\n\n<VirtualHost *:80>\n    ServerName                  www.example.com\n    DocumentRoot                /www/example/htdocs\n    WSGIScriptAliasMatch ^/$    /www/example/application.py\n    WSGIScriptAlias      /wsgi  /www/example/application.py\n</VirtualHost>\n']], ['How would you set up a python web server with multiple vhosts?'], 2], [(537399, 1), [['application.py would, when run, leave your WSGI callable in the global ‘application’ variable. You can also add a run-as-main footer for compatibility with old-school CGI:'], ['-10000']], [[" #!/usr/bin/env python\nfrom mymodule import MyApplication\n\napplication= MyApplication()\n\nif __name__=='main':\n    import wsgiref.handlers\n    wsgiref.handlers.CGIHandler().run(application)\n"]], ['How would you set up a python web server with multiple vhosts?'], 2], [(538346, 0), [['As Johannes pointed out, '], ['for example,  open("file.txt")  returns a file object (and opens the file), iterating over it iterates over lines in that file']], [[' for c in "string":\n    #do something with c\n']], ['Iterating over a string'], 2], [(538346, 1), [['for example,  open("file.txt")  returns a file object (and opens the file), iterating over it iterates over lines in that file'], ['If that seems like magic, well it kinda is, but the idea behind it is really simple.  ']], [[' for line in open(filename):\n    # do something with line\n']], ['Iterating over a string'], 2], [(538666, 0), [['I added two methods to the class like this:'], ['In my django I used this (sum is the object and it is in a dictionary):']], [[' def hours(self):\n    retval = ""\n    if self.totalTime:\n        hoursfloat = self.totalTime.seconds / 3600\n        retval = round(hoursfloat)\n    return retval\n\ndef minutes(self):\n    retval = ""\n    if self.totalTime:\n        minutesfloat = self.totalTime.seconds / 60\n        hoursAsMinutes = self.hours() * 60\n        retval = round(minutesfloat - hoursAsMinutes)\n    return retval\n']], ['Python format timedelta to string'], 2], [(538666, 1), [['In my django I used this (sum is the object and it is in a dictionary):'], ['-10000']], [[' <td>{{ sum.0 }}</td>    \n<td>{{ sum.1.hours|stringformat:"d" }}:{{ sum.1.minutes|stringformat:"#02.0d" }}</td>\n']], ['Python format timedelta to string'], 2], [(540427, 0), [["But, if you're dead set on using swig, what you need to do is make a typemap for  void**  that RETURNS the newly allocated  void* :"], ['Then your python looks like:']], [[' %typemap (in,numinputs=0) void** (void *temp)\n{\n    $1 = &temp;\n}\n\n%typemap (argout) void**\n{\n    PyObject *obj = PyCObject_FromVoidPtr(*$1);\n    $result = PyTuple_Pack(2, $result, obj);\n}\n']], ["C to Python via SWIG: can't get void** parameters to hold their value"], 3], [(540427, 1), [['Then your python looks like:'], ["I'd expect swig to handle a simple by-value  void*  arg gracefully on its own, but just in case, here's swig code to wrap the  void*  for GetFieldValue() and Cleanup():"]], [[' import test\nsuccess, p = test.Operation()\ntheAnswer = 0.0f\nif success:\n   theAnswer = test.GetFieldValue(p)\n   test.Cleanup(p)\n']], ["C to Python via SWIG: can't get void** parameters to hold their value"], 3], [(540427, 2), [["I'd expect swig to handle a simple by-value  void*  arg gracefully on its own, but just in case, here's swig code to wrap the  void*  for GetFieldValue() and Cleanup():"], ['-10000']], [[' %typemap (in) void*\n{\n    $1 = PyCObject_AsVoidPtr($input);\n}\n']], ["C to Python via SWIG: can't get void** parameters to hold their value"], 3], [(542212, 0), [['-10000'], ['or if you want a list:']], [[" from functools import partial\n\nfor name in iter(partial(raw_input, 'Name:'), ''):\n    do_something_with(name)\n"]], ['How to do variable assignment inside a while(expression) loop in Python?'], 2], [(542212, 1), [['or if you want a list:'], ['-10000']], [[" >>> names = list(iter(partial(raw_input, 'Name: '), ''))\nName: nosklo\nName: Andreas\nName: Aaron\nName: Phil\nName: \n>>> names\n['nosklo', 'Andreas', 'Aaron', 'Phil']\n"]], ['How to do variable assignment inside a while(expression) loop in Python?'], 2], [(542929, 0), [["If you are trying to highlight non-matching parenthesis in the python code, you could modify rainbow.vim to use the python syntax clusters instead of the C ones, but this is a little more involved, but you could use something along the lines of (modified version of Dr Chip's rainbow code):"], ["I've also carried out this test on Linux (with Vim 7.2), by entering the following command sequence:"]], [[' syn cluster pyParenGroup contains=pythonString,pythonRawString,pythonEscape,pythonNumber,pythonBuiltin,pythonException\nsyn match pyParenError display \')\'\nsyn region  pyParen     transparent matchgroup=hlLevel0 start=\'(\' end=\')\' contains=@pyParenGroup,pyParen1\nsyn region  pyParen1        transparent matchgroup=hlLevel1 start=\'(\' end=\')\' contains=@pyParenGroup,pyParen2\nsyn region  pyParen2        transparent matchgroup=hlLevel2 start=\'(\' end=\')\' contains=@pyParenGroup,pyParen3\nsyn region  pyParen3        transparent matchgroup=hlLevel3 start=\'(\' end=\')\' contains=@pyParenGroup,pyParen4\nsyn region  pyParen4        transparent matchgroup=hlLevel4 start=\'(\' end=\')\' contains=@pyParenGroup,pyParen5\nsyn region  pyParen5        transparent matchgroup=hlLevel5 start=\'(\' end=\')\' contains=@pyParenGroup,pyParen6\nsyn region  pyParen6        transparent matchgroup=hlLevel6 start=\'(\' end=\')\' contains=@pyParenGroup,pyParen7\nsyn region  pyParen7        transparent matchgroup=hlLevel7 start=\'(\' end=\')\' contains=@pyParenGroup,pyParen8\nsyn region  pyParen8        transparent matchgroup=hlLevel8 start=\'(\' end=\')\' contains=@pyParenGroup,pyParen9\nsyn region  pyParen9        transparent matchgroup=hlLevel9 start=\'(\' end=\')\' contains=@pyParenGroup,pyParen\nhi link pyParenError Error\n\nif &bg == "dark"\n    hi default   hlLevel0 ctermfg=red         guifg=red1\n    hi default   hlLevel1 ctermfg=yellow      guifg=orange1      \n    hi default   hlLevel2 ctermfg=green       guifg=yellow1      \n    hi default   hlLevel3 ctermfg=cyan        guifg=greenyellow  \n    hi default   hlLevel4 ctermfg=magenta     guifg=green1       \n    hi default   hlLevel5 ctermfg=red         guifg=springgreen1 \n    hi default   hlLevel6 ctermfg=yellow      guifg=cyan1        \n    hi default   hlLevel7 ctermfg=green       guifg=slateblue1   \n    hi default   hlLevel8 ctermfg=cyan        guifg=magenta1     \n    hi default   hlLevel9 ctermfg=magenta     guifg=purple1\nelse\n    hi default   hlLevel0 ctermfg=red         guifg=red3\n    hi default   hlLevel1 ctermfg=darkyellow  guifg=orangered3\n    hi default   hlLevel2 ctermfg=darkgreen   guifg=orange2\n    hi default   hlLevel3 ctermfg=blue        guifg=yellow3\n    hi default   hlLevel4 ctermfg=darkmagenta guifg=olivedrab4\n    hi default   hlLevel5 ctermfg=red         guifg=green4\n    hi default   hlLevel6 ctermfg=darkyellow  guifg=paleturquoise3\n    hi default   hlLevel7 ctermfg=darkgreen   guifg=deepskyblue4\n    hi default   hlLevel8 ctermfg=blue        guifg=darkslateblue\n    hi default   hlLevel9 ctermfg=darkmagenta guifg=darkviolet\nendif\n']], ['Highlighting unmatched brackets in vim'], 2], [(542929, 1), [["I've also carried out this test on Linux (with Vim 7.2), by entering the following command sequence:"], ['Again, the second bracket is highlighted and everything else seems normal.']], [[' cd ~\nmv .vimrc old_dot_vimrc\nmv .gvimrc old_dot_gvimrc\nmv .vim old_dot_vim\nvim pyprint.py\n:e pyprint.py\n" Add extra bracket here!\n:syntax on\n:source code.vim\n']], ['Highlighting unmatched brackets in vim'], 2], [(544433, 0), [['Base64-decode the string:'], ['This is the DER-encoding of:']], [[' 30819f300d06092a864886f70d010101050003818d0030818902818100df1b822e14eda1fcb74336\n6a27c06370e6cad69d4116ce806b3d117534cf0baa938c0f8e4500fb59d4d98fb471a8d01012d54b\n32244197c7434f27c1b0d73fa1b8bae55e70155f907879ce9c25f28a9a92ff97de1684fdaff05dce\n196ae76845f598b328c5ed76e0f71f6a6b7448f08691e6a556f5f0d773cb20d13f629b6391020301\n0001\n']], ['How do you verify an RSA SHA1 signature in Python?'], 2], [(544433, 1), [['This is the DER-encoding of:'], ['For a 1024 bit RSA key, you can treat  "30819f300d06092a864886f70d010101050003818d00308189028181"  as a constant header, followed by a 00-byte, followed by the 128 bytes of the RSA modulus. After that 95% of the time you will get  0203010001 , which signifies a RSA public exponent of 0x10001 = 65537.']], [['    0 30  159: SEQUENCE {\n   3 30   13:   SEQUENCE {\n   5 06    9:     OBJECT IDENTIFIER rsaEncryption (1 2 840 113549 1 1 1)\n  16 05    0:     NULL\n            :     }\n  18 03  141:   BIT STRING 0 unused bits, encapsulates {\n  22 30  137:       SEQUENCE {\n  25 02  129:         INTEGER\n            :           00 DF 1B 82 2E 14 ED A1 FC B7 43 36 6A 27 C0 63\n            :           70 E6 CA D6 9D 41 16 CE 80 6B 3D 11 75 34 CF 0B\n            :           AA 93 8C 0F 8E 45 00 FB 59 D4 D9 8F B4 71 A8 D0\n            :           10 12 D5 4B 32 24 41 97 C7 43 4F 27 C1 B0 D7 3F\n            :           A1 B8 BA E5 5E 70 15 5F 90 78 79 CE 9C 25 F2 8A\n            :           9A 92 FF 97 DE 16 84 FD AF F0 5D CE 19 6A E7 68\n            :           45 F5 98 B3 28 C5 ED 76 E0 F7 1F 6A 6B 74 48 F0\n            :           86 91 E6 A5 56 F5 F0 D7 73 CB 20 D1 3F 62 9B 63\n            :           91\n 157 02    3:         INTEGER 65537\n            :         }\n            :       }\n            :   }\n']], ['How do you verify an RSA SHA1 signature in Python?'], 2], [(544923, 0), [['Ok, I figured this out.  The answer is:  \n \n 1. you need a local printer (if you need to print to a network printer, download the drivers and add it as a local printer) \n 2. use win32print to get and set default printer \n 3. also using win32print, use the following code: \n'], ["printing is accomplished using internet explorer (from Graham King's blog)"]], [[' import win32print\nPRINTER_DEFAULTS = {"DesiredAccess":win32print.PRINTER_ALL_ACCESS}\npHandle = win32print.OpenPrinter(\'RICOH-LOCAL\', PRINTER_DEFAULTS)\nproperties = win32print.GetPrinter(pHandle, 2) #get the properties\npDevModeObj = properties["pDevMode"] #get the devmode\nautomaticTray = 7\ntray_one = 1\ntray_two = 3\ntray_three = 2\nprinter_tray = []\npDevModeObj.DefaultSource = tray_three #set the tray\nproperties["pDevMode"]=pDevModeObj #write the devmode back to properties\nwin32print.SetPrinter(pHandle,2,properties,0) #save the properties to the printer\n']], ['Switching Printer Trays'], 2], [(544923, 1), [["printing is accomplished using internet explorer (from Graham King's blog)"], ['Done']], [[' from win32com import client\n    import time\n    ie = client.Dispatch("InternetExplorer.Application")\n    def printPDFDocument(filename):\n        ie.Navigate(filename)\n        if ie.Busy:\n            time.sleep(1)\n        ie.Document.printAll()\n    ie.Quit()\n']], ['Switching Printer Trays'], 2], [(545061, 0), [['In python:'], ['In PHP:']], [[' print "RGVubmlzIEJhc2hhbQ==".decode(\'base_64\')\n']], ['How to make nntplib author name human readable?'], 2], [(545061, 1), [['In PHP:'], ['Enjoy.']], [[' <?php echo base64_decode("RGVubmlzIEJhc2hhbQ=="); ?>\n']], ['How to make nntplib author name human readable?'], 2], [(546385, 0), [['Then the display is easy'], ['The hard part is interleaving the two queries.']], [[' {% for order in orderList %}\n    {% for line in order.0 %}\n        {{ line }}\n    {% endfor %}\n    {{ order.1 }}\n{% endfor %}\n']], ['Generating lists/reports with in-line summaries in Django'], 2], [(546385, 1), [['The hard part is interleaving the two queries.'], ['This  interleaved  object can be given to your template for rendering.']], [[' details = Line.objects.all()\nddict = defaultdict( list )\nfor d in details:\n    ddict[d.order_number].append(d)\n\ninterleaved= []\nsubtotals = ... Django query to get subtotals ... \nfor s in subtotals:\n    interleaved.append( ( ddict[s.order], s.totals ) )\n']], ['Generating lists/reports with in-line summaries in Django'], 2], [(547829, 0), [["From the python documentation, here's the function you want:"], ["The reason a simple  __import__  won't work is because any import of anything past the first dot in a package string is an attribute of the module you're importing.  Thus, something like this won't work:"]], [[" def my_import(name):\n    components = name.split('.')\n    mod = __import__(components[0])\n    for comp in components[1:]:\n        mod = getattr(mod, comp)\n    return mod\n"]], ['How to dynamically load a Python class'], 6], [(547829, 1), [["The reason a simple  __import__  won't work is because any import of anything past the first dot in a package string is an attribute of the module you're importing.  Thus, something like this won't work:"], ["You'd have to call the above function like so:"]], [[" __import__('foo.bar.baz.qux')\n"]], ['How to dynamically load a Python class'], 6], [(547829, 2), [["You'd have to call the above function like so:"], ['Or in the case of your example:']], [[" my_import('foo.bar.baz.qux')\n"]], ['How to dynamically load a Python class'], 6], [(547829, 3), [['Or in the case of your example:'], ["EDIT :  I was a bit off on this.  What you're basically wanting to do is this:"]], [[" klass = my_import('my_package.my_module.my_class')\nsome_object = klass()\n"]], ['How to dynamically load a Python class'], 6], [(547829, 4), [["EDIT :  I was a bit off on this.  What you're basically wanting to do is this:"], ['The above function is only necessary if you have a  empty  fromlist.  Thus, the appropriate call would be like this:']], [[' from my_package.my_module import my_class\n']], ['How to dynamically load a Python class'], 6], [(547829, 5), [['The above function is only necessary if you have a  empty  fromlist.  Thus, the appropriate call would be like this:'], ['-10000']], [[" mod = __import__('my_package.my_module', fromlist=['my_class'])\nklass = getattr(mod, 'my_class')\n"]], ['How to dynamically load a Python class'], 6], [(550474, 0), [['Originally it was just C with a custom made preprocessor which took statements like this:'], ['and converted it to this before compiling:']], [[' [rectangle setX: 10 y: 10 width: 20 height: 20];\n']], ['Study Objective-C , Ruby OR Python?'], 2], [(550474, 1), [['and converted it to this before compiling:'], ['Apart from that Ruby, Python and Objective-C are very similar in their object model at least compared to C++. In C++ classes are created at compile time. In Objective-C, Ruby and Python classes are things created at runtime. ']], [['   objc_msgSend(rectangle, "setX:y:width:height:", 10, 10, 20, 20);\n']], ['Study Objective-C , Ruby OR Python?'], 2], [(550723, 0), [['Here is the source for the ConfigurationProxy library:'], ['and here is how it can be loaded from Python:']], [[' using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Configuration;\nusing System.Configuration.Internal;\nusing System.Xml;\nusing System.Collections.Specialized;\nusing System.Reflection;\nusing System.IO;\n\nnamespace IronPythonUtilities\n{\n    /// <summary>\n    /// A custom app.config injector for use with IronPython code that needs configuration files.\n    /// The code was taken and modified from the great work by Tom E Stephens:\n    /// http://tomestephens.com/2011/02/making-ironpython-work-overriding-the-configurationmanager/\n    /// </summary>\n    public sealed class ConfigurationProxy : IInternalConfigSystem\n    {\n        Configuration config;\n        Dictionary<string, IConfigurationSectionHandler> customSections;\n\n        // this is called filename but really it\'s the path as needed...\n        // it defaults to checking the directory you\'re running in.\n        public ConfigurationProxy(string fileName)\n        {\n            customSections = new Dictionary<string, IConfigurationSectionHandler>();\n\n            if (!Load(fileName))\n                throw new ConfigurationErrorsException(string.Format(\n                    "File: {0} could not be found or was not a valid cofiguration file.",\n                    config.FilePath));\n        }\n\n        private bool Load(string file)\n        {\n            var map = new ExeConfigurationFileMap { ExeConfigFilename = file };\n            config = ConfigurationManager.OpenMappedExeConfiguration(map, ConfigurationUserLevel.None);\n\n            var xml = new XmlDocument();\n            using (var stream = new FileStream(file, FileMode.Open, FileAccess.Read))\n                xml.Load(stream);\n\n            //var cfgSections = xml.GetElementsByTagName("configSections");\n\n            //if (cfgSections.Count > 0)\n            //{\n            //    foreach (XmlNode node in cfgSections[0].ChildNodes)\n            //    {\n            //        var type = System.Activator.CreateInstance(\n            //                             Type.GetType(node.Attributes["type"].Value))\n            //                             as IConfigurationSectionHandler;\n\n            //        if (type == null) continue;\n\n            //        customSections.Add(node.Attributes["name"].Value, type);\n            //    }\n            //}\n\n            return config.HasFile;\n        }\n\n        public Configuration Configuration\n        {\n            get { return config; }\n        }\n\n        #region IInternalConfigSystem Members\n\n        public object GetSection(string configKey)\n        {\n            if (configKey == "appSettings")\n                return BuildAppSettings();\n\n            object sect = config.GetSection(configKey);\n\n            if (customSections.ContainsKey(configKey) && sect != null)\n            {\n                var xml = new XmlDocument();\n\n                xml.LoadXml(((ConfigurationSection)sect).SectionInformation.GetRawXml());\n                // I have no idea what I should normally be passing through in the first\n                // two params, but I never use them in my confighandlers so I opted not to\n                // worry about it and just pass through something...\n                sect = customSections[configKey].Create(config,\n                                       config.EvaluationContext,\n                                       xml.FirstChild);\n            }\n\n            return sect;\n        }\n\n        public void RefreshConfig(string sectionName)\n        {\n            // I suppose this will work. Reload the whole file?\n            Load(config.FilePath);\n        }\n\n        public bool SupportsUserConfig\n        {\n            get { return false; }\n        }\n\n        #endregion\n\n        private NameValueCollection BuildAppSettings()\n        {\n            var coll = new NameValueCollection();\n\n            foreach (var key in config.AppSettings.Settings.AllKeys)\n                coll.Add(key, config.AppSettings.Settings[key].Value);\n\n            return coll;\n        }\n\n        public bool InjectToConfigurationManager()\n        {\n            // inject self into ConfigurationManager\n            var configSystem = typeof(ConfigurationManager).GetField("s_configSystem",\n                                            BindingFlags.Static | BindingFlags.NonPublic);\n            configSystem.SetValue(null, this);\n\n            // lame check, but it\'s something\n            if (ConfigurationManager.AppSettings.Count == config.AppSettings.Settings.Count)\n                return true;\n\n            return false;\n        }\n    }\n}\n']], ['How to use IronPython with App.Config?'], 3], [(550723, 1), [['and here is how it can be loaded from Python:'], ['Finally, a usage sample:']], [[" import clr\nclr.AddReferenceToFile('ConfigurationProxy.dll')\n\nfrom IronPythonUtilities import ConfigurationProxy\n\ndef override(filename):\n    proxy = ConfigurationProxy(filename)\n    return proxy.InjectToConfigurationManager()\n"]], ['How to use IronPython with App.Config?'], 3], [(550723, 2), [['Finally, a usage sample:'], ['-10000']], [[' import configproxy\nimport sys\n\nif not configproxy.override(\'blogsample.config\'):\n    print "could not load configuration file"\n    sys.exit(1)\n\nimport clr\nclr.AddReference(\'System.Configuration\')\nfrom System.Configuration import *\nconnstr = ConfigurationManager.ConnectionStrings[\'TestConnStr\']\nprint "The configuration string is {0}".format(connstr)\n']], ['How to use IronPython with App.Config?'], 3], [(552073, 0), [["The only library I've seen that can do this is  magicdate .  Examples:"], ['So, you need mxDateTime for that.  Examples:']], [[" >>> import magicdate\n>>> magicdate.magicdate('today')\ndatetime.date(2009, 2, 15)\n>>> magicdate.magicdate('tomorrow')\ndatetime.date(2009, 2, 16)\n>>> magicdate.magicdate('yesterday')\ndatetime.date(2009, 2, 14)\n"]], ['What\'s the best way to make a time from "Today" or "Yesterday" and a time in Python?'], 4], [(552073, 1), [['So, you need mxDateTime for that.  Examples:'], ["EDIT 2: As noted in the comments it looks python-dateutil can now handle fuzzy parsing.  I've also since discovered the  parsedatetime  module that was developed for use in Chandler and it works with the queries in this question:"]], [[' >>> import mx.DateTime\n\n>>> mx.DateTime.Parser.DateTimeFromString("Today 3:20 PM")\n<mx.DateTime.DateTime object for \'2009-02-15 15:20:00.00\' at 28faa28>\n\n>>> mx.DateTime.Parser.DateTimeFromString("Tomorrow 5:50 PM")\n<mx.DateTime.DateTime object for \'2009-02-15 17:50:00.00\' at 2a86088>\n']], ['What\'s the best way to make a time from "Today" or "Yesterday" and a time in Python?'], 4], [(552073, 2), [["EDIT 2: As noted in the comments it looks python-dateutil can now handle fuzzy parsing.  I've also since discovered the  parsedatetime  module that was developed for use in Chandler and it works with the queries in this question:"], ['and for reference here is the current time:']], [[" >>> import parsedatetime.parsedatetime as pdt\n>>> import parsedatetime.parsedatetime_consts as pdc\n>>> c=pdc.Constants()\n>>> p=pdt.Calendar(c)\n>>> p.parse('Today 3:20 PM')\n((2010, 3, 12, 15, 20, 0, 4, 71, -1), 3)\n>>> p.parse('Yesterday 11:06 AM')\n((2010, 3, 11, 11, 6, 0, 3, 70, -1), 3)\n"]], ['What\'s the best way to make a time from "Today" or "Yesterday" and a time in Python?'], 4], [(552073, 3), [['and for reference here is the current time:'], ['-10000']], [[' >>> import datetime\n>>> datetime.datetime.now()\ndatetime.datetime(2010, 3, 12, 15, 23, 35, 951652)\n']], ['What\'s the best way to make a time from "Today" or "Yesterday" and a time in Python?'], 4], [(552329, 0), [['When an object of class "Manager" is instantiated, it is an instance of the "Manager" class.  (that may sound repetitive).  To be perfectly clear, the value:'], ['does not exist.  Following the rules of classes, python says "hmm, that does not exist on this object instance, I\'ll look at the class object(s)".  So python actually finds the value at:']], [[' self.DefaultDomainName\n']], ['How do python classes work?'], 4], [(552329, 1), [['does not exist.  Following the rules of classes, python says "hmm, that does not exist on this object instance, I\'ll look at the class object(s)".  So python actually finds the value at:'], ['In the example above, run the builtin function id() on each of the values:']], [[' Manager.DefaultDomainName\n\n# also referenced by\nself.__class__.DefaultDomainName\n']], ['How do python classes work?'], 4], [(552329, 2), [['In the example above, run the builtin function id() on each of the values:'], ["Now, in (non)answer to the original question...   I don't know from perusing the code above.  I would suggest that you try a couple of techniques to find it out:"]], [[' print "1: %s" % id(self.DefaultDomainName)\nprint "2: %s" % id(Manager.DefaultDomainName)\n']], ['How do python classes work?'], 4], [(552329, 3), [["Now, in (non)answer to the original question...   I don't know from perusing the code above.  I would suggest that you try a couple of techniques to find it out:"], ['Please update here when you figure it out.']], [[" # Debug with pdb.  Follow every step of the process to ensure that you are \n# setting valeus as you thought, and that the code you thought would be \n# called is actually being called.  I've had many problems like this where \n# the error was in procedure, not in the actual code at hand.\nimport pdb; pdb.set_trace()\n\n# check to see if id(Manager) is the same as id(self.__class__)\n\n# in the set_domain() function:\n# check to see what attributes you can see on Manager, \n# and if they match the attributes on Manager and self.__class__ in __init__\n"]], ['How do python classes work?'], 4], [(553871, 0), [['itertools.groupby  seems to fit perfectly! Just define a  next_morris  function as follows:'], ["That's all!!! Look:"]], [[" def next_morris(number):\n    return ''.join('%s%s' % (len(list(group)), digit)\n                   for digit, group in itertools.groupby(str(number)))\n"]], ['Can anyone provide a more pythonic way of generating the morris sequence?'], 5], [(553871, 1), [["That's all!!! Look:"], ['I could use that to make a generator:']], [[' print next_morris(1)\n11\nprint next_morris(111221)\n312211\n']], ['Can anyone provide a more pythonic way of generating the morris sequence?'], 5], [(553871, 2), [['I could use that to make a generator:'], ['Usage:']], [[' def morris_generator(maxlen, start=1):\n    num = str(start)\n    while len(num) < maxlen:\n        yield int(num)\n        num = next_morris(num)\n']], ['Can anyone provide a more pythonic way of generating the morris sequence?'], 5], [(553871, 3), [['Usage:'], ['results:']], [[' for n in morris_generator(10):\n    print n\n']], ['Can anyone provide a more pythonic way of generating the morris sequence?'], 5], [(553871, 4), [['results:'], ['-10000']], [[' 1\n11\n21\n1211\n111221\n312211\n13112221\n']], ['Can anyone provide a more pythonic way of generating the morris sequence?'], 5], [(554957, 0), [['Well, as you build a regexp from a string, I see no other way.  But you could  parameterise the string itself  with a dictionary:'], ['Or, depending on the problem, you could use list comprehensions:']], [[" d = {'bar': 'a', 'foo': 'b'}\nregexp = '%(foo)s|%(bar)s' % d\n"]], ['Parameterised regular expression in Python'], 3], [(554957, 1), [['Or, depending on the problem, you could use list comprehensions:'], ["I'd probably go with an approach like this:"]], [[" vlist = ['a', 'b', 'c']\nregexp = '|'.join([s for s in vlist])\n"]], ['Parameterised regular expression in Python'], 3], [(554957, 2), [["I'd probably go with an approach like this:"], ['-10000']], [[" filename = 'bob_20090216.txt'\n\nregexps = {'bob': 'bob_[0-9]+.txt',\n           'fred': 'fred_[0-9]+.txt',\n           'paul': 'paul_[0-9]+.txt'}\n\nfor filetype, regexp in regexps.items():\n    m = re.match(regexp, filename)\n    if m != None:\n        print '%s is of type %s' % (filename, filetype)\n"]], ['Parameterised regular expression in Python'], 3], [(555344, 0), [['-10000'], ['or even shorter:']], [[' paren_pattern = re.compile(r"\\(([^()]*)\\)(?=(?:\\s*\\([^()]*\\))*\\s*$)")\n\ndef getParens(s):\n  return paren_pattern.findall(s)\n']], ['Match series of (non-nested) balanced parentheses at end of string'], 3], [(555344, 1), [['or even shorter:'], ['explaination:']], [[' getParens = re.compile(r"\\(([^()]*)\\)(?=(?:\\s*\\([^()]*\\))*\\s*$)").findall\n']], ['Match series of (non-nested) balanced parentheses at end of string'], 3], [(555344, 2), [['explaination:'], ['-10000']], [[' \\(                     # opening paren\n([^()]*)               # content, captured into group 1\n\\)                     # closing paren\n(?=                    # look ahead for...\n  (?:\\s*\\([^()]*\\))*   #   a series of parens, separated by whitespace\n  \\s*                  #   possibly more whitespace after\n  $                    #   end of string\n)                      # end of look ahead\n']], ['Match series of (non-nested) balanced parentheses at end of string'], 3], [(561486, 0), [['Instead of converting the number first to a byte-string (base 256), it converts it directly to base 64, which has the advantage of letting you represent negative numbers using a sign character.'], ['-10000']], [[" import string\nALPHABET = string.ascii_uppercase + string.ascii_lowercase + \\\n           string.digits + '-_'\nALPHABET_REVERSE = dict((c, i) for (i, c) in enumerate(ALPHABET))\nBASE = len(ALPHABET)\nSIGN_CHARACTER = '$'\n\ndef num_encode(n):\n    if n < 0:\n        return SIGN_CHARACTER + num_encode(-n)\n    s = []\n    while True:\n        n, r = divmod(n, BASE)\n        s.append(ALPHABET[r])\n        if n == 0: break\n    return ''.join(reversed(s))\n\ndef num_decode(s):\n    if s[0] == SIGN_CHARACTER:\n        return -num_decode(s[1:])\n    n = 0\n    for c in s:\n        n = n * BASE + ALPHABET_REVERSE[c]\n    return n\n"]], ['How to convert an integer to the shortest url-safe string in Python?'], 2], [(561486, 1), [['-10000'], ['A few side notes:']], [["     >>> num_encode(0)\n    'A'\n    >>> num_encode(64)\n    'BA'\n    >>> num_encode(-(64**5-1))\n    '$_____'\n"]], ['How to convert an integer to the shortest url-safe string in Python?'], 2], [(561791, 0), [['If order.py defines a class named  foo , then access to that class could be had by:'], ['A package is a directory with an  __init__.py  inside of it.  The  init .py initializes the package (ie. it is run on first import), and you can have either modules or sub-packages within that directory.']], [[' import order\no = order.foo()\n']], ['python MySQL module class file name'], 7], [(561791, 1), [['A package is a directory with an  __init__.py  inside of it.  The  init .py initializes the package (ie. it is run on first import), and you can have either modules or sub-packages within that directory.'], ['That way, to access any of the sub modules, you would simply say:']], [[' model\n    __init__.py\n    client.py\n    staff.py\n    order.py\n']], ['python MySQL module class file name'], 7], [(561791, 2), [['That way, to access any of the sub modules, you would simply say:'], ['However, that is simply importing the module.  It is not importing any of the attributes of the module.  So in order to access a class inside the module, you would need to specify it:']], [[' import model.client\n']], ['python MySQL module class file name'], 7], [(561791, 3), [['However, that is simply importing the module.  It is not importing any of the attributes of the module.  So in order to access a class inside the module, you would need to specify it:'], ['If you type the following code in  __init__.py :']], [[' import model.client\no = model.client.clientclass()   \n']], ['python MySQL module class file name'], 7], [(561791, 4), [['If you type the following code in  __init__.py :'], ['Then you have auto-loaded all of your classes, and they can be accessed as:']], [[' from .client import clientclass as client\nfrom .staff import staffclass as staff\nfrom .order import orderclass as order\n']], ['python MySQL module class file name'], 7], [(561791, 5), [['Then you have auto-loaded all of your classes, and they can be accessed as:'], ['In the end, it may be more simple to stick with the non-magical way to do it: ']], [[' import model\nc = model.client()\ns = model.staff()\no = model.order()\n']], ['python MySQL module class file name'], 7], [(561791, 6), [['In the end, it may be more simple to stick with the non-magical way to do it: '], ['--Gahooa']], [[' import model.client\no = model.client.clientclass()   \n']], ['python MySQL module class file name'], 7], [(566083, 0), [['Like:'], ['Then']], [[' class Pathology(models.Model):\n    pathology = models.CharField(max_length=100)\n    publications = models.ManyToManyField(Publication)\n\nclass Publication(models.Model):\n    pubtitle = models.TextField()\n']], ['python code for django view'], 2], [(566083, 1), [['Then'], ["Hope this works, haven't tested it, but you get the idea."]], [[" def pathology(request):\n    pathology_id = request.POST['pathology_id'] \n    p = get_object_or_404(Pathology, pk=pathology_id)\n    publications = p.publications.all()\n    return render_to_response('my_template.html',\n                              {'publications':publications},\n                              context_instance=RequestContext(request))\n"]], ['python code for django view'], 2], [(566574, 0), [['-10000'], ['That is enough to know the id of a certain value. Testing:']], [[" import operator\n\nranges = {\n    '4'  : 'a',\n    '70' : 'b',\n    '700': 'c',\n    '701': 'd',\n    '85' : 'e',\n    '87' : 'a',\n}\n\ndef id_for_value(value):\n    possible = '*'\n    for idvalue, id in sorted(ranges.iteritems()):\n        if value.startswith(idvalue):\n            possible = id\n        elif idvalue > value:\n            break\n    return possible\n"]], ['Building a "complete" number range w/out overlaps'], 4], [(566574, 1), [['That is enough to know the id of a certain value. Testing:'], ['If you really want the range, you can use itertools.groupby to calculate it:']], [[" assert id_for_value('10') == '*'\nassert id_for_value('499') == 'a'\nassert id_for_value('703') == 'b'\nassert id_for_value('7007') == 'c'\nassert id_for_value('7017') == 'd'\nassert id_for_value('76') == id_for_value('83') == '*'\nassert id_for_value('857') == 'e'\nassert id_for_value('8716') == 'a'\n"]], ['Building a "complete" number range w/out overlaps'], 4], [(566574, 2), [['If you really want the range, you can use itertools.groupby to calculate it:'], ['Gives:']], [[' def firstlast(iterator):\n    """ Returns the first and last value of an iterator"""\n    first = last = iterator.next()\n    for value in iterator:\n        last = value\n    return first, last\n\nmaxlen = max(len(x) for x in ranges) + 1\ntest_range = (\'%0*d\' % (maxlen, i) for i in xrange(10 ** maxlen))\nresult = dict((firstlast(gr), id) \n              for id, gr in itertools.groupby(test_range, key=id_for_value))\n']], ['Building a "complete" number range w/out overlaps'], 4], [(566574, 3), [['Gives:'], ['-10000']], [[" {('0000', '3999'): '*',\n ('4000', '4999'): 'a',\n ('5000', '6999'): '*',\n ('7000', '7009'): 'c',\n ('7010', '7019'): 'd',\n ('7020', '7099'): 'b',\n ('7100', '8499'): '*',\n ('8500', '8599'): 'e',\n ('8600', '8699'): '*',\n ('8700', '8799'): 'a',\n ('8800', '9999'): '*'}\n"]], ['Building a "complete" number range w/out overlaps'], 4], [(567222, 0), [["Here's your code with a few fixes, it prints out only primes:"], ["For much more efficient prime generation, see the Sieve of Erastothenes, as others have suggested. Here's a nice, optimized implementation with many comments:"]], [[' import math\n\ndef main():\n    count = 3\n   \xa0\n    while True:\n        isprime = True\n       \xa0\n        for x in range(2, int(math.sqrt(count) + 1)):\n            if count % x == 0: \n                isprime = False\n                break\n       \xa0\n        if isprime:\n            print count\n       \xa0\n        count += 1\n']], ['Simple Prime Generator in Python'], 2], [(567222, 1), [["For much more efficient prime generation, see the Sieve of Erastothenes, as others have suggested. Here's a nice, optimized implementation with many comments:"], ['Note that it returns a generator.']], [[' # Sieve of Eratosthenes\n# Code by David Eppstein, UC Irvine, 28 Feb 2002\n# http://code.activestate.com/recipes/117119/\n\ndef gen_primes():\n    """ Generate an infinite sequence of prime numbers.\n    """\n    # Maps composites to primes witnessing their compositeness.\n    # This is memory efficient, as the sieve is not "run forward"\n    # indefinitely, but only as long as required by the current\n    # number being tested.\n    #\n    D = {}\n   \xa0\n    # The running integer that\'s checked for primeness\n    q = 2\n   \xa0\n    while True:\n        if q not in D:\n            # q is a new prime.\n            # Yield it and mark its first multiple that isn\'t\n            # already marked in previous iterations\n            # \n            yield q\n            D[q * q] = [q]\n        else:\n            # q is composite. D[q] is the list of primes that\n            # divide it. Since we\'ve reached q, we no longer\n            # need it in the map, but we\'ll mark the next \n            # multiples of its witnesses to prepare for larger\n            # numbers\n            # \n            for p in D[q]:\n                D.setdefault(p + q, []).append(p)\n            del D[q]\n       \xa0\n        q += 1\n']], ['Simple Prime Generator in Python'], 2], [(567879, 0), [['As others answered, optparse is the best option, but if you just want quick code try something like this:'], ["So here's an example using optparse:"]], [[' import sys, re\n\nfirst_re = re.compile(r\'^\\d{3}$\')\n\nif len(sys.argv) > 1:\n\n    if first_re.match(sys.argv[1]):\n        print "Primary argument is : ", sys.argv[1]\n    else:\n        raise ValueError("First argument should be ...")\n\n    args = sys.argv[2:]\n\nelse:\n\n    args = ()\n\n# ... anywhere in code ...\n\nif \'debug\' in args:\n    print \'debug flag\'\n\nif \'xls\' in args:\n    print \'xls flag\'\n']], ['How can I process command line arguments in Python?'], 3], [(567879, 1), [["So here's an example using optparse:"], ['The differences here with optparse and your spec is that now you can have command lines like:']], [[' import sys, re, optparse\n\nfirst_re = re.compile(r\'^\\d{3}$\')\n\nparser = optparse.OptionParser()\nparser.set_defaults(debug=False,xls=False)\nparser.add_option(\'--debug\', action=\'store_true\', dest=\'debug\')\nparser.add_option(\'--xls\', action=\'store_true\', dest=\'xls\')\n(options, args) = parser.parse_args()\n\nif len(args) == 1:\n    if first_re.match(args[0]):\n        print "Primary argument is : ", args[0]\n    else:\n        raise ValueError("First argument should be ...")\nelif len(args) > 1:\n    raise ValueError("Too many command line arguments")\n\nif options.debug:\n    print \'debug flag\'\n\nif options.xls:\n    print \'xls flag\'\n']], ['How can I process command line arguments in Python?'], 3], [(567879, 2), [['The differences here with optparse and your spec is that now you can have command lines like:'], ['and you can easily add new options by calling parser.add_option()']], [[' python script.py --debug --xls 001\n']], ['How can I process command line arguments in Python?'], 3], [(570522, 0), [['Instead of zipping your forms with the additional data, you can override the constructor on your form and hold your title/description as  instance-level  member variables.  This is a bit more object-oriented and learning how to do this will help you solve other problems down the road such as dynamic choice fields.'], ['Then in your view code:']], [[' class MyForm (forms.Form):\n    def __init__ (self, title, desc, *args, **kwargs):\n        self.title = title\n        self.desc = desc\n        super (MyForm, self).__init__ (*args, **kwargs) # call base class\n']], ['How do I add plain text info to forms in a formset in Django?'], 3], [(570522, 1), [['Then in your view code:'], ['Adjust accordingly if you need these values to come from the database. Then in your template, you access the instance variables just like you do anything else, e.g.:']], [[" form = MyForm ('Title A', 'Description A')\n"]], ['How do I add plain text info to forms in a formset in Django?'], 3], [(570522, 2), [['Adjust accordingly if you need these values to come from the database. Then in your template, you access the instance variables just like you do anything else, e.g.:'], ['From the way you phrased your question, I think you probably have some confusion around the way Django uses Python  class attributes  to provide a declarative form API versus  instance-level  attributes that you apply to individual instances of a class, in this case your form objects.']], [['    <h1>{{ form.title }}</h1>\n   <p>{{ form.desc }}</p>\n']], ['How do I add plain text info to forms in a formset in Django?'], 3], [(570636, 0), [['Use the  atexit  module:'], ['Another simple example from the docs, using  register  as a decorator:']], [[" import mymodule\nimport atexit\n\n# call mymodule.unload('param1', 'param2') when the interpreter exits:\natexit.register(mymodule.unload, 'param1', 'param2')\n"]], ['Detect when a Python module unloads'], 2], [(570636, 1), [['Another simple example from the docs, using  register  as a decorator:'], ['-10000']], [[' import atexit\n\n@atexit.register\ndef goodbye():\n    print "You are now leaving the Python sector."\n']], ['Detect when a Python module unloads'], 2], [(571186, 0), [["Mmkay, well here's a generator solution that seems to work well for me.  You can also provide different open and close tags if you like."], ['Run against your target input like so:']], [[" def get_tags(s, open_delim  ='{{', \n                close_delim ='}}' ):\n\n   while True:\n\n      # Search for the next two delimiters in the source text\n      start = s.find(open_delim)\n      end   = s.find(close_delim)\n\n      # We found a non-empty match\n      if -1 < start < end:\n\n         # Skip the length of the open delimiter\n         start += len(open_delim)\n\n         # Spit out the tag\n         yield s[start:end].strip()\n\n         # Truncate string to start from last match\n         s = s[end+len(close_delim):]\n\n      else:\n         return\n"]], ['Split tags in python'], 2], [(571186, 1), [['Run against your target input like so:'], ['Edit: it also works against your new example :).  In my obviously quick testing, it also seemed to handle malformed tags in a reasonable way, though I make no guarantees of its robustness!']], [[' # prints: today, runner_up, blabla, oooo\nfor tag in get_tags(html):\n    print tag\n']], ['Split tags in python'], 2], [(572263, 0), [["Here's what I ended up doing. I wrote a custom template stringfilter to switch the tags around. Now, my template code looks like this:"], ["Here's a functional but ugly implementation of  pretty_checkbox  - this code doesn't have any error handling, it assumes that the Django generated attributes are formatted in a very specific way, and it would be a bad idea to use anything like this in your code:"]], [[' {% load pretty_forms %}\n<form action="." method="POST">\n{{ form.as_p|pretty_checkbox }}\n<p><input type="submit" value="Submit"></p>\n</form>\n']], ['How do I create a Django form that displays a checkbox label to the right of the checkbox?'], 2], [(572263, 1), [["Here's a functional but ugly implementation of  pretty_checkbox  - this code doesn't have any error handling, it assumes that the Django generated attributes are formatted in a very specific way, and it would be a bad idea to use anything like this in your code:"], ['pretty_checkbox  scans its string argument, finds pairs of <label> and <input> tags, and switches them around if the <input> tag\'s type is "checkbox". It also strips the last character of the label, which happens to be the \':\' character.']], [[' from django import template\nfrom django.template.defaultfilters import stringfilter\nimport logging\n\nregister=template.Library()\n\n@register.filter(name=\'pretty_checkbox\')\n@stringfilter\ndef pretty_checkbox(value):\n    # Iterate over the HTML fragment, extract <label> and <input> tags, and\n    # switch the order of the pairs where the input type is "checkbox".\n    scratch = value\n    output = \'\'\n    try:\n        while True:\n            ls = scratch.find(\'<label\')\n            if ls > -1:\n                le = scratch.find(\'</label>\')\n                ins = scratch.find(\'<input\')\n                ine = scratch.find(\'/>\', ins)\n                # Check whether we\'re dealing with a checkbox:\n                if scratch[ins:ine+2].find(\' type="checkbox" \')>-1:\n                    # Switch the tags\n                    output += scratch[:ls]\n                    output += scratch[ins:ine+2]\n                    output += scratch[ls:le-1]+scratch[le:le+8]\n                else:\n                    output += scratch[:ine+2]\n                scratch = scratch[ine+2:]\n            else:\n                output += scratch\n                break\n    except:\n        logging.error("pretty_checkbox caught an exception")\n    return output\n']], ['How do I create a Django form that displays a checkbox label to the right of the checkbox?'], 2], [(577302, 0), [['After each update to the TextView call'], ['You can do your update through a custom function:']], [[' while gtk.events_pending():\n  gtk.main_iteration()\n']], ["gtk TextView widget doesn't update during function"], 2], [(577302, 1), [['You can do your update through a custom function:'], ['From the PyGTK FAQ:\n How can I force updates to the application windows during a long callback or other internal operation?']], [[' def my_insert(self, widget, report, text):\n\n  report.insert_at_cursor(text)\n  while gtk.events_pending():\n    gtk.main_iteration()\n']], ["gtk TextView widget doesn't update during function"], 2], [(578200, 0), [['Oops.. turns out I was creating my child windows badly:'], ['should be:']], [[' wind = MyCustomWindow(self)\n']], ['Easiest way to create a scrollable area using wxPython?'], 2], [(578200, 1), [['should be:'], ['..which meant the child windows were waiting for the top-level window (the frame) to be re-drawn instead of listening to the scroll window. Changing that makes it all work wonderfully :)']], [[' wind = MyCustomWindow(self.scrolling_window)\n']], ['Easiest way to create a scrollable area using wxPython?'], 2], [(578379, 0), [["First I'd do fibo() as a generator:"], ["Then I'd also select for evenness as a generator rather than a list comprehension."]], [[' def fibo(a=-1,b=1,upto=4000000):\n    while a+b<upto:\n        a,b = b,a+b\n        yield b\n']], ['Python program to find fibonacci series. More Pythonic way'], 2], [(578379, 1), [["Then I'd also select for evenness as a generator rather than a list comprehension."], ['-10000']], [[' print sum(i for i in fibo() if not i%2)\n']], ['Python program to find fibonacci series. More Pythonic way'], 2], [(579272, 0), [['Here is an example. Calculator.py contains a simple class:'], ['You can use it from your pre .NET 4.0 C# code like this:']], [[' class Calculator(object):\n    def add(self, a, b):\n        return a + b\n']], ['Instantiating a python class in C#'], 4], [(579272, 1), [['You can use it from your pre .NET 4.0 C# code like this:'], ['C# 4 made this much easier with the  new  dynamic type.']], [[' ScriptEngine engine = Python.CreateEngine();\nScriptSource source = engine.CreateScriptSourceFromFile("Calculator.py");\nScriptScope scope = engine.CreateScope();\n\nObjectOperations op = engine.Operations;\n\nsource.Execute(scope); // class object created\nobject klaz = scope.GetVariable("Calculator"); // get the class object\nobject instance = op.Call(klaz); // create the instance\nobject method = op.GetMember(instance, "add"); // get a method\nint result = (int)op.Call(method, 4, 5); // call method and get result (9)\n']], ['Instantiating a python class in C#'], 4], [(579272, 2), [['C# 4 made this much easier with the  new  dynamic type.'], ['If you are using Visual Studio 2010 or later with NuGet support simply execute this to download and reference the appropriate libraries.']], [[' ScriptEngine engine = Python.CreateEngine();\nScriptSource source = engine.CreateScriptSourceFromFile("Calculator.py");\nScriptScope scope = engine.CreateScope();\nsource.Execute(scope);\n\ndynamic Calculator = scope.GetVariable("Calculator");\ndynamic calc = Calculator();\nint result = calc.add(4, 5);\n']], ['Instantiating a python class in C#'], 4], [(579272, 3), [['If you are using Visual Studio 2010 or later with NuGet support simply execute this to download and reference the appropriate libraries.'], ['-10000']], [[' Install-Package IronPython\n']], ['Instantiating a python class in C#'], 4], [(582336, 0), [['You can call it from within your code, or from the interpreter, like this:'], ['Even more usefully, you can invoke the cProfile when running a script:']], [[" import cProfile\ncProfile.run('foo()')\n"]], ['How can you profile a script?'], 5], [(582336, 1), [['Even more usefully, you can invoke the cProfile when running a script:'], ["To make it even easier, I made a little batch file called 'profile.bat':"]], [[' python -m cProfile myscript.py\n']], ['How can you profile a script?'], 5], [(582336, 2), [["To make it even easier, I made a little batch file called 'profile.bat':"], ['So all I have to do is run:']], [[' python -m cProfile %1\n']], ['How can you profile a script?'], 5], [(582336, 3), [['So all I have to do is run:'], ['And I get this:']], [[' profile euler048.py\n']], ['How can you profile a script?'], 5], [(582336, 4), [['And I get this:'], ['EDIT: Updated link to a good video resource from PyCon 2013 titled \n Python Profiling .']], [[" 1007 function calls in 0.061 CPU seconds\n\nOrdered by: standard name\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    1    0.000    0.000    0.061    0.061 <string>:1(<module>)\n 1000    0.051    0.000    0.051    0.000 euler048.py:2(<lambda>)\n    1    0.005    0.005    0.061    0.061 euler048.py:2(<module>)\n    1    0.000    0.000    0.061    0.061 {execfile}\n    1    0.002    0.002    0.053    0.053 {map}\n    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}\n    1    0.000    0.000    0.000    0.000 {range}\n    1    0.003    0.003    0.003    0.003 {sum}\n"]], ['How can you profile a script?'], 5], [(582723, 0), [["Your ' lib/__init__.py ' might look like this:"], ['Then the following example should work:']], [[" from . import settings # or just 'import settings' on old Python versions\nclass Helper(object):\n      pass\n"]], ['How to import classes defined in __init__.py'], 4], [(582723, 1), [['Then the following example should work:'], ['-10000']], [[' from lib.settings import Values\nfrom lib import Helper\n']], ['How to import classes defined in __init__.py'], 4], [(582723, 2), [['-10000'], ['Output:']], [[' $ python import_submodule.py\n']], ['How to import classes defined in __init__.py'], 4], [(582723, 3), [['Output:'], ['-10000']], [[' settings\nhelper\nHelper in lib.settings\nsomeobject\nHelper in lib.foo.someobject\n\n# ./import_submodule.py\nimport fnmatch, os\nfrom lib.settings import Values\nfrom lib import Helper\n\nprint\nfor root, dirs, files in os.walk(\'.\'):\n    for f in fnmatch.filter(files, \'*.py\'):\n        print "# %s/%s" % (os.path.basename(root), f)\n        print open(os.path.join(root, f)).read()\n        print\n\n\n# lib/helper.py\nprint \'helper\'\nclass Helper(object):\n    def __init__(self, module_name):\n        print "Helper in", module_name\n\n\n# lib/settings.py\nprint "settings"\nimport helper\n\nclass Values(object):\n    pass\n\nhelper.Helper(__name__)\n\n\n# lib/__init__.py\n#from __future__ import absolute_import\nimport settings, foo.someobject, helper\n\nHelper = helper.Helper\n\n\n# foo/someobject.py\nprint "someobject"\nfrom .. import helper\n\nhelper.Helper(__name__)\n\n\n# foo/__init__.py\nimport someobject\n']], ['How to import classes defined in __init__.py'], 4], [(589833, 0), [["If you don't want to use a full HTML parser, you could use something like this to approximate the work:"], ['Example:']], [[' import re, urlparse\n\nfind_re = re.compile(r\'\\bhref\\s*=\\s*("[^"]*"|\\\'[^\\\']*\\\'|[^"\\\'<>=\\s]+)\')\n\ndef fix_urls(document, base_url):\n    ret = []\n    last_end = 0\n    for match in find_re.finditer(document):\n        url = match.group(1)\n        if url[0] in "\\"\'":\n            url = url.strip(url[0])\n        parsed = urlparse.urlparse(url)\n        if parsed.scheme == parsed.netloc == \'\': #relative to domain\n            url = urlparse.urljoin(base_url, url)\n            ret.append(document[last_end:match.start(1)])\n            ret.append(\'"%s"\' % (url,))\n            last_end = match.end(1)\n    ret.append(document[last_end:])\n    return \'\'.join(ret)\n']], ['How to find a relative URL and translate it to an absolute URL in Python'], 2], [(589833, 1), [['Example:'], ['-10000']], [[' >>> document = \'\'\'<tr class="build"><th colspan="0">Build 110</th></tr> <tr class="arccase project flagday"><td>Feb-25</td><td></td><td></td><td></td><td><a href="../pages/2009022501/">Flag Day and Heads Up: Power Aware Dispatcher and Deep C-States</a><br />cpupm keyword mode extensions - <a href="/os/community/arc/caselog/2008/777/">PSARC/2008/777</a><br /> CPU Deep Idle Keyword - <a href="/os/community/arc/caselog/2008/663/">PSARC/2008/663</a><br /></td></tr>\'\'\'\n>>> fix_urls(document,"http://www.opensolaris.org/os/community/on/flag-days/all/")\n\'<tr class="build"><th colspan="0">Build 110</th></tr> <tr class="arccase project flagday"><td>Feb-25</td><td></td><td></td><td></td><td><a href="http://www.opensolaris.org/os/community/on/flag-days/pages/2009022501/">Flag Day and Heads Up: Power Aware Dispatcher and Deep C-States</a><br />cpupm keyword mode extensions - <a href="http://www.opensolaris.org/os/community/arc/caselog/2008/777/">PSARC/2008/777</a><br /> CPU Deep Idle Keyword - <a href="http://www.opensolaris.org/os/community/arc/caselog/2008/663/">PSARC/2008/663</a><br /></td></tr>\'\n>>>\n']], ['How to find a relative URL and translate it to an absolute URL in Python'], 2], [(590921, 0), [['Products have Features.'], ['Just a list of features.  ']], [[' class Feature( models.Model ):\n    feature_name = models.CharField( max_length=128 )\n    feature_value = models.TextField()\n    part_of = models.ForeignKey( Product )\n']], ['Django - designing models with virtual fields?'], 2], [(590921, 1), [['Just a list of features.  '], ["If you want, you can have a master list of feature names in a separate table.  Don't over-analyze features.  You can't do any processing on them.  All you do is present them. "]], [[' p= Product( "iPhone", "Apple", 350 )\np.save()\nf= Feature( "mp3 capacity", "16Gb", p )\nf.save()\n']], ['Django - designing models with virtual fields?'], 2], [(592931, 0), [['If you want to attach stateful information to a function, what you need is a class.  A trivially simple class, perhaps, but a class nonetheless:'], ["If you want your function's behavior to change each time it's called, what you need is a generator:"]], [[" def foo(bar):\n    static my_bar # doesn't work\n\n    if not my_bar:\n        my_bar = bar\n\n    do_stuff(my_bar)\n\nfoo(bar)\nfoo()\n\n# -- becomes ->\n\nclass Foo(object):\n    def __init__(self, bar):\n        self.bar = bar\n\n    def __call__(self):\n        do_stuff(self.bar)\n\nfoo = Foo(bar)\nfoo()\nfoo()\n"]], ["Why doesn't Python have static variables?"], 3], [(592931, 1), [["If you want your function's behavior to change each time it's called, what you need is a generator:"], ["Of course, static variables  are  useful for quick-and-dirty scripts where you don't want to deal with the hassle of big structures for little tasks.  But there, you don't really need anything more than  global  — it may seem a but kludgy, but that's okay for small, one-off scripts:"]], [[" def foo(bar):\n    static my_bar # doesn't work\n\n    if not my_bar:\n        my_bar = bar\n\n    my_bar = my_bar * 3 % 5\n\n    return my_bar\n\nfoo(bar)\nfoo()\n\n# -- becomes ->\n\ndef foogen(bar):\n    my_bar = bar\n\n    while True:\n        my_bar = my_bar * 3 % 5\n        yield my_bar\n\nfoo = foogen(bar)\nfoo.next()\nfoo.next()\n"]], ["Why doesn't Python have static variables?"], 3], [(592931, 2), [["Of course, static variables  are  useful for quick-and-dirty scripts where you don't want to deal with the hassle of big structures for little tasks.  But there, you don't really need anything more than  global  — it may seem a but kludgy, but that's okay for small, one-off scripts:"], ['-10000']], [[' def foo():\n    global bar\n    do_stuff(bar)\n\nfoo()\nfoo()\n']], ["Why doesn't Python have static variables?"], 3], [(597199, 0), [['One thing you can do is write a function to take the fields of the A instance and copy them over into a new B instance:'], ['Edit: depending on your situation,  composition instead of inheritance  could be a good bet; that is your B class could just contain an instance of A instead of inheriting:']], [[' class A: # defined by the library\n    def __init__(self, field):\n        self.field = field\n\nclass B(A): # your fancy new class\n    def __init__(self, field, field2):\n        self.field = field\n        self.field2 = field2 # B has some fancy extra stuff\n\ndef b_from_a(a_instance, field2):\n    """Given an instance of A, return a new instance of B."""\n    return B(a_instance.field, field2)\n\n\na = A("spam") # this could be your A instance from the library\nb = b_from_a(a, "ham") # make a new B which has the data from a\n\nprint b.field, b.field2 # prints "spam ham"\n']], ['Converting an object into a subclass in Python?'], 2], [(597199, 1), [['Edit: depending on your situation,  composition instead of inheritance  could be a good bet; that is your B class could just contain an instance of A instead of inheriting:'], ['-10000']], [[' class B2: # doesn\'t have to inherit from A\n    def __init__(self, a, field2):\n        self._a = a # using composition instead\n        self.field2 = field2\n\n    @property\n    def field(self): # pass accesses to a\n        return self._a.field\n    # could provide setter, deleter, etc\n\na = A("spam")\nb = B2(a, "ham")\n\nprint b.field, b.field2 # prints "spam ham"\n']], ['Converting an object into a subclass in Python?'], 2], [(598077, 0), [['You seem to be using  classic old-style classes . In order for  properties  to work correctly you need to use  new-style classes  instead ( inherit from  object ). Just declare your class as  MyClass(object) :'], ['It works:']], [[" class testDec(object):\n\n    @property\n    def x(self): \n        print 'called getter'\n        return self._x\n\n    @x.setter\n    def x(self, value): \n        print 'called setter'\n        self._x = value\n"]], ['Why does @foo.setter in Python not work for me?'], 2], [(598077, 1), [['It works:'], ['-10000']], [[' >>> k = testDec()\n>>> k.x\ncalled getter\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "/devel/class_test.py", line 6, in x\n    return self._x\nAttributeError: \'testDec\' object has no attribute \'_x\'\n>>> k.x = 5\ncalled setter\n>>> k.x\ncalled getter\n5\n>>> \n']], ['Why does @foo.setter in Python not work for me?'], 2], [(598398, 0), [['You can get a list of  all  matching elements with a list comprehension:'], ['If you simply want to determine if the list contains  any  element that matches and do it (relatively) efficiently, you can do']], [[' [x for x in myList if x.n == 30]  # list of all elements with .n==30\n']], ['Searching a list of objects in Python'], 2], [(598398, 1), [['If you simply want to determine if the list contains  any  element that matches and do it (relatively) efficiently, you can do'], ['-10000']], [[' def contains(list, filter):\n    for x in list:\n        if filter(x):\n            return True\n    return False\n\nif contains(myList, lambda x: x.n == 3)  # True if any element has .n==3\n    # do stuff\n']], ['Searching a list of objects in Python'], 2], [(599625, 0), [["I don't know exaxtly how you got the one-element lists; the contents member would be a list of strings and tags, which is apparently not what you have. Assuming that you really always get a list with a single element, and that your test is really  only  ASCII you would use this:"], ["However, please double-check that your data is really ASCII. This is pretty rare. Much more likely it's latin-1 or utf-8."]], [['  soup[0].encode("ascii")\n']], ["Python string prints as [u'String']"], 3], [(599625, 1), [["However, please double-check that your data is really ASCII. This is pretty rare. Much more likely it's latin-1 or utf-8."], ['Or you ask Beautiful Soup what the original encoding was and get it back in this encoding: ']], [['  soup[0].encode("latin-1")\n\n\n soup[0].encode("utf-8")\n']], ["Python string prints as [u'String']"], 3], [(599625, 2), [['Or you ask Beautiful Soup what the original encoding was and get it back in this encoding: '], ['-10000']], [['  soup[0].encode(soup.originalEncoding)\n']], ["Python string prints as [u'String']"], 3], [(599953, 0), [['If the string is fixed you can simply use:'], ['Or you can split the line at the first  = :']], [[' if line.startswith("Path="):\n    return line[5:]\n']], ['How to remove the left part of a string?'], 2], [(599953, 1), [['Or you can split the line at the first  = :'], ['Then param is "Path" and value is the rest after the first =.']], [[' if "=" in line:\n    param, value = line.split("=",1)\n']], ['How to remove the left part of a string?'], 2], [(601039, 0), [['Write a function similar to this and place it in your startup settings:'], ['Look at the documentation for remapping keystrokes - you may be able to accomplish it through a simple key remap.  The following works, but has "filename.py" hardcoded.  Perhaps you can dig in and figure out how to replace that with the current file?']], [[" function myex()\n   execute ':w'\n   execute ':!!'\nendfunction\n"]], ['VIM: Save and Run at the same time?'], 3], [(601039, 1), [['Look at the documentation for remapping keystrokes - you may be able to accomplish it through a simple key remap.  The following works, but has "filename.py" hardcoded.  Perhaps you can dig in and figure out how to replace that with the current file?'], ['imap, vmap, etc... are mappings in different modes.  The above only applies to command mode.  The following should work in insert mode also:']], [[' :map <F2> <Esc>:w<CR>:!filename.py<CR>\n']], ['VIM: Save and Run at the same time?'], 3], [(601039, 2), [['imap, vmap, etc... are mappings in different modes.  The above only applies to command mode.  The following should work in insert mode also:'], ['Section 40.1 of the VIM manual is very helpful.']], [[' :imap <F2> <Esc>:w<CR>:!filename.py<CR>a\n']], ['VIM: Save and Run at the same time?'], 3], [(601874, 0), [['While I agree with David that you should probably just use GIMP or some other image manipulation program, here is a script (as I took it to be an exercise to the reader) using  pygame  that does what you want.  You will need to install pygame as well as the PIL, usage would be:'], ['Actual script:']], [[' scriptname.py <input_path> <output_path>\n']], ['Digital Image cropping in Python'], 2], [(601874, 1), [['Actual script:'], ['Hope this helps :)']], [[' import pygame, sys\nfrom PIL import Image\npygame.init()\n\ndef displayImage( screen, px, topleft):\n    screen.blit(px, px.get_rect())\n    if topleft:\n        pygame.draw.rect( screen, (128,128,128), pygame.Rect(topleft[0], topleft[1], pygame.mouse.get_pos()[0] - topleft[0], pygame.mouse.get_pos()[1] - topleft[1]))\n    pygame.display.flip()\n\ndef setup(path):\n    px = pygame.image.load(path)\n    screen = pygame.display.set_mode( px.get_rect()[2:] )\n    screen.blit(px, px.get_rect())\n    pygame.display.flip()\n    return screen, px\n\ndef mainLoop(screen, px):\n    topleft = None\n    bottomright = None\n    runProgram = True\n    while runProgram:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                runProgram = False\n            elif event.type == pygame.MOUSEBUTTONUP:\n                if not topleft:\n                    topleft = event.pos\n                else:\n                    bottomright = event.pos\n                    runProgram = False\n        displayImage(screen, px, topleft)\n    return ( topleft + bottomright )\n\n\nif __name__ == "__main__":\n    screen, px = setup(sys.argv[1])\n    left, upper, right, lower = mainLoop(screen, px)\n    im = Image.open(sys.argv[1])\n    im = im.crop(( left, upper, right, lower))\n    im.save(sys.argv[2])\n']], ['Digital Image cropping in Python'], 2], [(602322, 0), [['You can model your game board as a multidimensional javascript array:'], ['You can further compress this format and just send the deltas. For example: save the coordinates of tiles changed by the user and send those to the server:']], [[' [[x0, x1, x2, x3 ... xn],\n.....\n.....]\n']], ['Differential AJAX updates for HTML table?'], 2], [(602322, 1), [['You can further compress this format and just send the deltas. For example: save the coordinates of tiles changed by the user and send those to the server:'], ['Or you can do it the other way around: send the full model array to the server, and have the server calculate the deltas.']], [[' [(x1, y2),.....(xn, yn)]\n']], ['Differential AJAX updates for HTML table?'], 2], [(602599, 0), [['e.g.'], ['In your ~/.pdbrc you can add the aliases so you have them every time:']], [[' (Pdb) alias s step ;; l\n(Pdb) s\n> /usr/lib/python2.5/distutils/core.py(14)<module>()\n-> from types import *\n 9      # This module should be kept compatible with Python 2.1.\n10      \n11      __revision__ = "$Id: core.py 38672 2005-03-20 22:19:47Z fdrake $"\n12      \n13      import sys, os\n14  ->  from types import *\n15      \n16      from distutils.debug import DEBUG\n17      from distutils.errors import *\n18      from distutils.util import grok_environment_error\n19      \n']], ["How to show the output of 'l' in python pdb after every command entered"], 2], [(602599, 1), [['In your ~/.pdbrc you can add the aliases so you have them every time:'], ['-10000']], [[' alias s step ;; l\n']], ["How to show the output of 'l' in python pdb after every command entered"], 2], [(603287, 0), [['Here are some examples, with an HTML string parsed like this:'], ['Using the css selector class your program would roughly look something like this:']], [[' from lxml.html import fromstring\nmySearchTree = fromstring(your_input_string)\n']], ['Need python lxml syntax help for parsing html'], 3], [(603287, 1), [['Using the css selector class your program would roughly look something like this:'], ['The equivalent using xpath method would be:']], [[' # Find all \'a\' elements inside \'tr\' table rows with css selector\nfor a in mySearchTree.cssselect(\'tr a\'):\n    print \'found "%s" link to href "%s"\' % (a.text, a.get(\'href\'))\n']], ['Need python lxml syntax help for parsing html'], 3], [(603287, 2), [['The equivalent using xpath method would be:'], ['-10000']], [[' # Find all \'a\' elements inside \'tr\' table rows with xpath\nfor a in mySearchTree.xpath(\'.//tr/*/a\'):\n    print \'found "%s" link to href "%s"\' % (a.text, a.get(\'href\'))\n']], ['Need python lxml syntax help for parsing html'], 3], [(603528, 0), [['In my list object I have the following method:'], ['Then in the custom combobox, I filter the event:']], [[' def mousePressEvent (self, e):\n    self.colapse_expand_click = False\n    if <user clicked node>:\n        colapse_expand_node()\n        e.accept ()\n        self.colapse_expand_click = True\n']], ['Using PyQT, how do you filter mousePressEvent for a QComboBox with custom list'], 2], [(603528, 1), [['Then in the custom combobox, I filter the event:'], ['-10000']], [[' class RevisionSelectorWidget(QtGui.QComboBox):\n    def __init__(self, parent = None):\n        QtGui.QComboBox.__init__(self, parent)\n\n        self.log_list = RevisionSelectorLogList(self)\n        self.setView(self.log_list)\n        self.log_list.installEventFilter(self)\n        self.log_list.viewport().installEventFilter(self)\n\n    def eventFilter(self, object, event):\n        if event.type() == QtCore.QEvent.MouseButtonRelease:\n            if self.log_list.colapse_expand_click:\n                return True\n        return False\n']], ['Using PyQT, how do you filter mousePressEvent for a QComboBox with custom list'], 2], [(603641, 0), [['So:'], ['Best to let the calling code handle the case of an empty iterator:']], [[' def iterate(i):\n    for value in i:\n        yield value\n    return\n']], ['Using for...else in Python generators'], 2], [(603641, 1), [['Best to let the calling code handle the case of an empty iterator:'], ["Might be a cleaner way of doing the above, but that ought to work fine, and doesn't fall into any of the common 'treating an iterator like a list' traps below."]], [[' count = 0\nfor value in iterate(range([])):\n    print value\n    count += 1\nelse:\n    if count == 0:\n        print "list was empty"\n']], ['Using for...else in Python generators'], 2], [(603856, 0), [['If you want to see the literal HTTP request that is sent out, and therefore see every last header exactly as it is represented on the wire, then you can tell  urllib2  to use your own version of an  HTTPHandler  that prints out (or saves, or whatever) the outgoing HTTP request.'], ['The result of running this code is:']], [[" import httplib, urllib2\n\nclass MyHTTPConnection(httplib.HTTPConnection):\n    def send(self, s):\n        print s  # or save them, or whatever!\n        httplib.HTTPConnection.send(self, s)\n\nclass MyHTTPHandler(urllib2.HTTPHandler):\n    def http_open(self, req):\n        return self.do_open(MyHTTPConnection, req)\n\nopener = urllib2.build_opener(MyHTTPHandler)\nresponse = opener.open('http://www.google.com/')\n"]], ['How do you get default headers in a urllib2 Request?'], 2], [(603856, 1), [['The result of running this code is:'], ['-10000']], [[' GET / HTTP/1.1\nAccept-Encoding: identity\nHost: www.google.com\nConnection: close\nUser-Agent: Python-urllib/2.6\n']], ['How do you get default headers in a urllib2 Request?'], 2], [(604721, 0), [["The code I present doesn't go from 'Z' to 'AA', instead goes to 'BA', but I suppose that doesn't matter, it still produces a unique id"], ['usage:']], [[' from string import uppercase as up\nimport itertools\n\ndef to_base(q, alphabet):\n    if q < 0: raise ValueError( "must supply a positive integer" )\n    l = len(alphabet)\n    converted = []\n    while q != 0:\n        q, r = divmod(q, l)\n        converted.insert(0, alphabet[r])\n    return "".join(converted) or alphabet[0]\n\nclass TimestampUniqifier( object ):\n    def __init__(self):\n        self.last = \'\'\n        self.counter = itertools.count()\n    def __call__( self, str ):\n        if str == self.last:\n            suf = self.counter.next()\n            return str + to_base( suf, up )\n        else:\n            self.last = str\n            self.counter = itertools.count()\n            return str            \n\ntimestamp_uniqify = TimestampUniqifier()\n']], ['How would you translate this from Perl to Python?'], 3], [(604721, 1), [['usage:'], ['You can call it maaaany times and it will still produce good results:']], [[" timestamp_uniqify('1')\n'1'\ntimestamp_uniqify('1')\n'1A'\ntimestamp_uniqify('1')\n'1B'\ntimestamp_uniqify('1')\n'1C'\ntimestamp_uniqify('2')\n'2'\ntimestamp_uniqify('3')\n'3'\ntimestamp_uniqify('3')\n'3A'\ntimestamp_uniqify('3')\n'3B'\n"]], ['How would you translate this from Perl to Python?'], 3], [(604721, 2), [['You can call it maaaany times and it will still produce good results:'], ['-10000']], [[" for i in range(100): print timestamp_uniqify('4')\n\n4\n4A\n4B\n4C\n4D\n4E\n4F\n4G\n4H\n4I\n4J\n4K\n4L\n4M\n4N\n4O\n4P\n4Q\n4R\n4S\n4T\n4U\n4V\n4W\n4X\n4Y\n4Z\n4BA\n4BB\n4BC\n4BD\n4BE\n4BF\n4BG\n4BH\n4BI\n4BJ\n4BK\n4BL\n4BM\n4BN\n4BO\n4BP\n4BQ\n4BR\n4BS\n4BT\n4BU\n4BV\n4BW\n4BX\n4BY\n4BZ\n4CA\n4CB\n4CC\n4CD\n4CE\n4CF\n4CG\n4CH\n4CI\n4CJ\n4CK\n4CL\n4CM\n4CN\n4CO\n4CP\n4CQ\n4CR\n4CS\n4CT\n4CU\n4CV\n4CW\n4CX\n4CY\n4CZ\n4DA\n4DB\n4DC\n4DD\n4DE\n4DF\n4DG\n4DH\n4DI\n4DJ\n4DK\n4DL\n4DM\n4DN\n4DO\n4DP\n4DQ\n4DR\n4DS\n4DT\n4DU\n"]], ['How would you translate this from Perl to Python?'], 3], [(604802, 0), [['For the objects in the list, you can do something like:'], ['Example of finding the index of an item that has value > 100.']], [[' def __eq__(self, other):\n    return self.Value == other.Value\n']], ['Python: finding an element in an array'], 2], [(604802, 1), [['Example of finding the index of an item that has value > 100.'], ['Source']], [[' for index, item in enumerate(arr):\n    if item > 100:\n        return index, item\n']], ['Python: finding an element in an array'], 2], [(607760, 0), [['Given the examples above, you might try putting the trailing parenthesis back in, and then using this pattern:'], ['To get at each group individual, just call them on the  info  object:']], [[" import re\npat = re.compile('([\\w\\s]+)\\(([\\w\\s]+)(\\d+/\\d+)\\)')\ninfo = pat.match(s)\nprint info.groups()\n\n('Michael Schenker Group ', 'House of Blues Dallas ', '3/26')\n"]], ['Python parsing'], 2], [(607760, 1), [['To get at each group individual, just call them on the  info  object:'], ["The hard thing about regex in this case is making sure you know all the known possible characters in the title. If there are non-alpha chars in the 'Michael Schenker Group' part, you'll have to adjust the regex for that part to allow them."]], [[' print info.group(1) # or info.groups()[0]\n\nprint \'"%s","%s","%s"\' % (info.group(1), info.group(2), info.group(3))\n"Michael Schenker Group","House of Blues Dallas","3/26"\n']], ['Python parsing'], 2], [(608789, 0), [['If so, override  admin/base_site.html  template with something this simple:'], ['Then just make a normal django view and at the top of the view check to make sure the user is superuser like this:']], [[' {% extends "admin/base.html" %}\n{% block nav-global %}\n  <p><a href="{% url your-named-url %}">Do Something</a></p>\n{% endblock %}\n']], ['django- run a script from admin'], 3], [(608789, 1), [['Then just make a normal django view and at the top of the view check to make sure the user is superuser like this:'], ["Do that with Python's subprocess module, for example:"]], [[' if not request.user.is_staff:\n    return Http404\n']], ['django- run a script from admin'], 3], [(608789, 2), [["Do that with Python's subprocess module, for example:"], ['-10000']], [[' from subprocess import call\nretcode = call(["/full/path/myscript.py", "arg1"])\n']], ['django- run a script from admin'], 3], [(612372, 0), [['You can give your application a custom name by defining app_label in your model definition. But as django builds the admin page it will hash models by their app_label, so if you want them to appear in one application, you have to define this name in all models of your application.'], ['Taken from the  docs :']], [[" class MyModel(models.Model):\n        pass\n    class Meta:\n        app_label = 'My APP name'\n"]], ['Can you give a Django app a verbose name for use throughout the admin?'], 3], [(612372, 1), [['Taken from the  docs :'], ['then set the  default_app_config  variable to  YourAppConfig']], [[" # in yourapp/apps.py\nfrom django.apps import AppConfig\n\nclass YourAppConfig(AppConfig):\n    name = 'yourapp'\n    verbose_name = 'Fancy Title'\n"]], ['Can you give a Django app a verbose name for use throughout the admin?'], 3], [(612372, 2), [['then set the  default_app_config  variable to  YourAppConfig'], ['-10000']], [[" # in yourapp/__init__.py\ndefault_app_config = 'yourapp.apps.YourAppConfig'\n"]], ['Can you give a Django app a verbose name for use throughout the admin?'], 3], [(613183, 0), [['For instance,'], ['And for those wishing to sort on keys instead of values:']], [[' import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\n']], ['How do I sort a dictionary by value?'], 2], [(613183, 1), [['And for those wishing to sort on keys instead of values:'], ['-10000']], [[' import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(0))\n']], ['How do I sort a dictionary by value?'], 2], [(616416, 0), [["A naive implementation of  @Joel Coehoorn's suggestion  follows:"], ['Example:']], [[' def XinY_Stack(x, y):\n    stack = [(x, 0, [0]*y)]\n    while stack:\n        x, index, slots = stack.pop()\n        if (y - index) == 1:\n            slots[index] = x\n            print slots\n            slots[index] = 0\n        else:\n            for i in range(x + 1):\n                slots[index] = x-i\n                stack.append((i, index + 1, slots[:]))\n']], ['Is it possible to remove recursion from this function?'], 5], [(616416, 1), [['Example:'], ['-10000']], [[' >>> XinY_Stack(2, 3)\n[0, 0, 2]\n[0, 1, 1]\n[0, 2, 0]\n[1, 0, 1]\n[1, 1, 0]\n[2, 0, 0]\n']], ['Is it possible to remove recursion from this function?'], 5], [(616416, 2), [['-10000'], ['-10000']], [['Based on <a href="http://docs.python.org/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> def XinY_Product(nmarbles, nslots):\n    return (slots\n            for slots in product(xrange(nmarbles + 1), repeat=nslots)\n            if sum(slots) == nmarbles) \n']], ['Is it possible to remove recursion from this function?'], 5], [(616416, 3), [['-10000'], ['Example:']], [['Based on nested loops def XinY_Iter(nmarbles, nslots):\n    assert 0 < nslots < 22 # 22 -> too many statically nested blocks\n    if nslots == 1: return iter([nmarbles])\n    # generate code for iter solution\n    TAB = "  "\n    loopvars   = []\n    stmt       = ["def f(n):\\n"]\n    for i in range(nslots - 1):\n        var = "m%d" % i\n        stmt += [TAB * (i + 1), "for %s in xrange(n - (%s)):\\n"\n                 % (var, \'+\'.join(loopvars) or 0)]\n        loopvars.append(var)\n\n    stmt += [TAB * (i + 2), "yield ", \',\'.join(loopvars),\n             \', n - 1 - (\', \'+\'.join(loopvars), \')\\n\']\n    print \'\'.join(stmt)\n    # exec the code within empty namespace\n    ns = {}\n    exec(\'\'.join(stmt), ns, ns)\n    return ns[\'f\'](nmarbles + 1) \n']], ['Is it possible to remove recursion from this function?'], 5], [(616416, 4), [['Example:'], ['-10000']], [[' >>> list(XinY_Product(2, 3))\n[(0, 0, 2), (0, 1, 1), (0, 2, 0), (1, 0, 1), (1, 1, 0), (2, 0, 0)]\n>>> list(XinY_Iter(2, 3))\ndef f(n):\n  for m0 in xrange(n - (0)):\n    for m1 in xrange(n - (m0)):\n      yield m0,m1, n - 1 - (m0+m1)\n\n[(0, 0, 2), (0, 1, 1), (0, 2, 0), (1, 0, 1), (1, 1, 0), (2, 0, 0)]\n']], ['Is it possible to remove recursion from this function?'], 5], [(616480, 0), [['I am running Leopard, 10.5.5. The python binary,  /usr/bin/python , is merely a symlink to the actual binary in the version specific Python folder. For example:'], ['And a look inside that  /Versions  folder reveals this:']], [[' $ ls -l /usr/bin/python\nlrwxr-xr-x  1 root  wheel  72 Aug 31  2008 /usr/bin/python -> ../../System/Library/Frameworks/Python.framework/Versions/2.5/bin/python\n']], ['Upgrading Python on OS X 10.4.11'], 2], [(616480, 1), [['And a look inside that  /Versions  folder reveals this:'], ['With the help of the  ln  command to create symlinks, you will be able to set the  python  in your path to point to the version of python you want to use.']], [[' $ ls -l /System/Library/Frameworks/Python.framework/Versions/\ntotal 8\ndrwxr-xr-x   7 root  wheel  238 Aug 31  2008 2.3\ndrwxr-xr-x  13 root  wheel  442 Nov 22 20:40 2.5\nlrwxr-xr-x   1 root  wheel    3 Aug 31  2008 Current -> 2.5\n']], ['Upgrading Python on OS X 10.4.11'], 2], [(619804, 0), [['So you would do something like '], ['and your config would look about like this']], [[' mysql_cmd_line = "/Applications/MAMP/Library/bin/mysql --defaults-file=credentials.cnf"\n']], ['Supplying password to wrapped-up MySQL'], 2], [(619804, 1), [['and your config would look about like this'], ['-10000']], [[' [client]\nhost     = localhost\nuser     = root\npassword = password\nsocket   = /var/run/mysqld/mysqld.sock\n']], ['Supplying password to wrapped-up MySQL'], 2], [(620530, 0), [['-10000'], ["or if you're only interested in first match(es) generator version:"]], [[" from inspect import getmro\n[st for cls, st in MY_TYPES.items() if cls in getmro(ClassB)]\n\n['This is ClassA or a subclass']\n"]], ["What's the best way to find the closest matching type to an existing type?"], 2], [(620530, 1), [["or if you're only interested in first match(es) generator version:"], ['-10000']], [[' (st for cls, st in MY_TYPES.iteritems() if cls in getmro(ClassB))\n']], ["What's the best way to find the closest matching type to an existing type?"], 2], [(621212, 0), [['I suspect that the  __unicode__  method for the Profile model instance, or the  repr  thereof is set to return a value other than  self.id . For example, I just set this up:'], ['With that, I see PlanForm.profile rendered thus in the template:']], [[" # models.py\nclass Profile(models.Model):\n    name = models.CharField('profile name', max_length=10)\n\n    def __unicode__(self):\n        return u'%d' % self.id\n\nclass Plan(models.Model):\n    name = models.CharField('plan name', max_length=10)\n    profile = models.ForeignKey(Profile, related_name='profiles')\n\n    def __unicode__(self):\n        return self.name\n\n\n# forms.py\nclass PlanForm(forms.ModelForm):\n    profile = forms.ModelChoiceField(queryset=Profile.objects.all(),\n            widget=forms.HiddenInput())\n\n    class Meta:\n        model = Plan\n\n# views.py\ndef add_plan(request):\n\n    if request.method == 'POST':\n        return HttpResponse(request.POST['profile'])\n\n\n    profile = Profile.objects.all()[0]\n    form = PlanForm(initial={'profile':profile})\n    return render_to_response('add_plan.html',\n            {\n                'form':form,\n            },\n            context_instance=RequestContext(request))\n"]], ['Another Django Forms : Foreign Key in Hidden Field'], 2], [(621212, 1), [['With that, I see PlanForm.profile rendered thus in the template:'], ['-10000']], [[' <input type="hidden" name="profile" value="1" id="id_profile" />\n']], ['Another Django Forms : Foreign Key in Hidden Field'], 2], [(624265, 0), [["If you need a blank form with a default value selected, then pass an 'initial' dictionary to the constructor of your model form using the name of your field as the key:"], ['You can override certain attributes of a ModelForm using the declarative nature of the Forms API.  However, this is probably a little cumbersome for this use case and I mention it only to show you that you can do it.   You may find other uses for this in the future.']], [[" form = MyModelForm (initial={'gender':'M'})\n"]], ['How do I make a Django ModelForm menu item selected by default?'], 3], [(624265, 1), [['You can override certain attributes of a ModelForm using the declarative nature of the Forms API.  However, this is probably a little cumbersome for this use case and I mention it only to show you that you can do it.   You may find other uses for this in the future.'], ["If you want a ModelForm that is bound to a particular instance of your model, you can pass an 'instance' of your model which causes Django to pull the selected value from that model.  "]], [[" class MyModelForm (forms.ModelForm):\n    gender = forms.ChoiceField (choices=..., initial='M', ...)\n    class Meta:\n        model=MyModel\n"]], ['How do I make a Django ModelForm menu item selected by default?'], 3], [(624265, 2), [["If you want a ModelForm that is bound to a particular instance of your model, you can pass an 'instance' of your model which causes Django to pull the selected value from that model.  "], ['-10000']], [[' form = MyModelForm (instance=someinst)\n']], ['How do I make a Django ModelForm menu item selected by default?'], 3], [(625491, 0), [["Try this: have a lock in the module where your function is, and if the input to the function is such that locking is required, acquire the lock inside the function. Otherwise don't."], ["As far as I can tell now, the question is actually about how to prevent any two threads from running the same function with the same argument at the same time. There's no problem with two threads running the same function with different arguments at the same time, though. The simple method to do this, if all valid arguments to the function can be dictionary keys, is to create a dictionary of arguments to locks:"]], [[' l = threading.RLock()\n\ndef fn(arg):\n    if arg == arg_that_needs_lock:\n        l.acquire()\n        try:\n            # do stuff\n        finally:\n            l.release()\n    else:\n        # do other stuff\n']], ['python conditional lock'], 3], [(625491, 1), [["As far as I can tell now, the question is actually about how to prevent any two threads from running the same function with the same argument at the same time. There's no problem with two threads running the same function with different arguments at the same time, though. The simple method to do this, if all valid arguments to the function can be dictionary keys, is to create a dictionary of arguments to locks:"], ['If your function can be called with many different arguments, though, that amounts to a lot of locks. Probably a better way is to have a set of all arguments with which the function is currently executing, and have the contents of that set protected by a lock. I think this should work:']], [[' import threading\n\ndict_lock = threading.RLock()\nlocks = {}\n\ndef fn_dict(arg):\n    dict_lock.acquire()\n    try:\n        if arg not in dict:\n            locks[arg] = threading.RLock()\n        l = locks[arg]\n    finally:\n        dict_lock.release()\n    l.acquire()\n    try:\n        # do stuff\n    finally:\n        l.release()\n']], ['python conditional lock'], 3], [(625491, 2), [['If your function can be called with many different arguments, though, that amounts to a lot of locks. Probably a better way is to have a set of all arguments with which the function is currently executing, and have the contents of that set protected by a lock. I think this should work:'], ['-10000']], [[' set_condition = threading.Condition()\ncurrent_args = set()\n\ndef fn_set(arg):\n    set_condition.acquire()\n    try:\n        while arg in current_args:\n            set_condition.wait()\n        current_args.add(arg)\n    finally:\n        set_condition.release()\n    # do stuff\n    set_condition.acquire()\n    try:\n        current_args.remove(arg)\n        set_condition.notifyAll()\n    finally:\n        set_condition.release()\n']], ['python conditional lock'], 3], [(625714, 0), [['This is the bind command you want:'], ['To detect a right click on the tab (e.g. to show a custom context menu):']], [[' self.Bind(wx.aui.EVT_AUINOTEBOOK_PAGE_CLOSED, self.close, self.nb)\n']], ['wxpython auinotebook close tab event'], 3], [(625714, 1), [['To detect a right click on the tab (e.g. to show a custom context menu):'], ["Here's a list of the aui notebook events:"]], [[' self.Bind(wx.aui.EVT_AUINOTEBOOK_TAB_RIGHT_DOWN, self.right, self.nb)\n']], ['wxpython auinotebook close tab event'], 3], [(625714, 2), [["Here's a list of the aui notebook events:"], ['From: {python folder}/Lib/site-packages/{wxpython folder}/wx/aui.py']], [[' EVT_AUINOTEBOOK_PAGE_CLOSE\nEVT_AUINOTEBOOK_PAGE_CLOSED\nEVT_AUINOTEBOOK_PAGE_CHANGED\nEVT_AUINOTEBOOK_PAGE_CHANGING\nEVT_AUINOTEBOOK_BUTTON\nEVT_AUINOTEBOOK_BEGIN_DRAG\nEVT_AUINOTEBOOK_END_DRAG\nEVT_AUINOTEBOOK_DRAG_MOTION\nEVT_AUINOTEBOOK_ALLOW_DND\nEVT_AUINOTEBOOK_DRAG_DONE\nEVT_AUINOTEBOOK_BG_DCLICK\nEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN\nEVT_AUINOTEBOOK_TAB_MIDDLE_UP\nEVT_AUINOTEBOOK_TAB_RIGHT_DOWN\nEVT_AUINOTEBOOK_TAB_RIGHT_UP\n']], ['wxpython auinotebook close tab event'], 3], [(626835, 0), [['From CPython source,  Objects/frameobject.c :'], ['The objects referred to by the attributes is not necessarily read-only. You could do this:']], [[' static PyMemberDef frame_memberlist[] = {\n    {"f_back",      T_OBJECT,       OFF(f_back),    RO},\n    {"f_code",      T_OBJECT,       OFF(f_code),    RO},\n    {"f_builtins",  T_OBJECT,       OFF(f_builtins),RO},\n    {"f_globals",   T_OBJECT,       OFF(f_globals), RO},\n    {"f_lasti",     T_INT,          OFF(f_lasti),   RO},\n    {"f_exc_type",  T_OBJECT,       OFF(f_exc_type)},\n    {"f_exc_value", T_OBJECT,       OFF(f_exc_value)},\n    {"f_exc_traceback", T_OBJECT,   OFF(f_exc_traceback)},\n    {NULL}    /* Sentinel */\n};\n...\nstatic PyGetSetDef frame_getsetlist[] = {\n    {"f_locals",    (getter)frame_getlocals, NULL, NULL},\n    {"f_lineno",    (getter)frame_getlineno,\n                    (setter)frame_setlineno, NULL},\n    {"f_trace",     (getter)frame_gettrace, (setter)frame_settrace, NULL},\n    {"f_restricted",(getter)frame_getrestricted,NULL, NULL},\n    {0}\n};\n']], ['Is it possible to write to a python frame object as returned by sys._getframe() from python code running within the interpreter?'], 3], [(626835, 1), [['The objects referred to by the attributes is not necessarily read-only. You could do this:'], ['Though this works in the interpreter, it fails inside functions. The execution engine uses a separate array for local variables ( f_fastlocals ), which is merged into  f_locals  on access, but the converse is not true.']], [[" >>> f = sys._getframe()\n>>> f.f_locals['foo'] = 3\n>>> foo\n3\n>>>\n"]], ['Is it possible to write to a python frame object as returned by sys._getframe() from python code running within the interpreter?'], 3], [(626835, 2), [['Though this works in the interpreter, it fails inside functions. The execution engine uses a separate array for local variables ( f_fastlocals ), which is merged into  f_locals  on access, but the converse is not true.'], ['On the global frame,  f_local  refers to  f_globals , which makes this trick work in the interpreter. Modifying  f_globals  works, but affects the whole module.']], [[" >>> def foo():\n...   x = 3\n...   f = sys._getframe()\n...   print f.f_locals['x']\n...   x = 4\n...   print f.f_locals['x']\n...   d = f.f_locals\n...   x = 5\n...   print d['x']\n...   f.f_locals\n...   print d['x']\n...\n>>> foo()\n3\n4\n4\n5\n>>>\n"]], ['Is it possible to write to a python frame object as returned by sys._getframe() from python code running within the interpreter?'], 3], [(627501, 0), [['-10000'], ['Example:']], [[" from functools import wraps\n\ndef intercept(target,**trigger):\n    def decorator(func):\n        names = getattr(func,'_names',None)\n        if names is None:\n            code = func.func_code\n            names = code.co_varnames[:code.co_argcount]\n        @wraps(func)\n        def decorated(*args,**kwargs):\n            all_args = kwargs.copy()\n            for n,v in zip(names,args):\n                all_args[n] = v\n            for k,v in trigger.iteritems():\n                if k in all_args and all_args[k] != v:\n                    break\n            else:\n                return target(all_args)\n            return func(*args,**kwargs)\n        decorated._names = names\n        return decorated\n    return decorator\n"]], ['How can I use named arguments in a decorator?'], 2], [(627501, 1), [['Example:'], ['functools.wraps  does what the "simple decorator" on the wiki does; Updates  __doc__ ,  __name__  and other attribute of the decorator.']], [[" def interceptor1(kwargs):\n    print 'Intercepted by #1!'\n\ndef interceptor2(kwargs):\n    print 'Intercepted by #2!'\n\ndef interceptor3(kwargs):\n    print 'Intercepted by #3!'\n\n@intercept(interceptor1,arg1=20,arg2=5) # if arg1 == 20 and arg2 == 5\n@intercept(interceptor2,arg1=20)        # elif arg1 == 20\n@intercept(interceptor3,arg2=5)         # elif arg2 == 5\ndef foo(arg1,arg2):\n    return arg1+arg2\n\n>>> foo(3,4)\n7\n>>> foo(20,4)\nIntercepted by #2!\n>>> foo(3,5)\nIntercepted by #3!\n>>> foo(20,5)\nIntercepted by #1!\n>>>\n"]], ['How can I use named arguments in a decorator?'], 2], [(628150, 0), [['List comprehensions.   In Python they look something like:'], ['You can define f(x) as a partially applied function with a construct like:']], [[' a = [f(x) for x in bar]\n']], ['How to run an operation on a collection in Python and collect the results?'], 4], [(628150, 1), [['You can define f(x) as a partially applied function with a construct like:'], ['Which will return a function that multiplies the parameter by x.  A trivial example of this type of construct used in a list comprehension looks like:']], [[' def foo(x):\n    return lambda f: f*x\n']], ['How to run an operation on a collection in Python and collect the results?'], 4], [(628150, 2), [['Which will return a function that multiplies the parameter by x.  A trivial example of this type of construct used in a list comprehension looks like:'], ["Although I don't imagine using this sort of construct in any but fairly esoteric cases.  Python is not a true functional language, so it has less scope to do clever tricks with higher order functions than (say) Haskell.  You may find applications for this type of construct, but it's not really  that  pythonic.  You could achieve a simple transformation with something like:"]], [[' >>> def foo (x):\n...     return lambda f: f*x\n... \n>>> a=[1,2,3]\n>>> fn_foo = foo(5)\n>>> [fn_foo (y) for y in a]\n[5, 10, 15]\n']], ['How to run an operation on a collection in Python and collect the results?'], 4], [(628150, 3), [["Although I don't imagine using this sort of construct in any but fairly esoteric cases.  Python is not a true functional language, so it has less scope to do clever tricks with higher order functions than (say) Haskell.  You may find applications for this type of construct, but it's not really  that  pythonic.  You could achieve a simple transformation with something like:"], ['-10000']], [[' >>> y=5\n>>> a=[1,2,3]\n>>> [x*y for x in a]\n[5, 10, 15]\n']], ['How to run an operation on a collection in Python and collect the results?'], 4], [(628162, 0), [['This is done sometimes.'], ['It gives an almost magical function that works with simple values as well as sequences.']], [[' def factorial( *args ):\n    def fact( n ):\n        if n == 0: return 1\n        return n*fact(n-1)\n    return [ fact(a) for a in args ]\n']], ['Single implementation to cover both single and multiple values in Python?'], 2], [(628162, 1), [['It gives an almost magical function that works with simple values as well as sequences.'], ['-10000']], [[' >>> factorial(5)\n[120]\n>>> factorial( 5, 6, 7 )\n[120, 720, 5040]\n>>> factorial( *[5, 6, 7] )\n[120, 720, 5040]\n']], ['Single implementation to cover both single and multiple values in Python?'], 2], [(629551, 0), [['If you mean to do aggregation you can use the  aggregation features of the ORM :'], ['This results in a query similar to']], [[" from django.db.models import Count\nMembers.objects.values('designation').annotate(dcount=Count('designation'))\n"]], ['How to query as GROUP BY in django?'], 3], [(629551, 1), [['This results in a query similar to'], ['and the output would be of the form']], [[' SELECT designation, COUNT(designation) AS dcount\nFROM members GROUP BY designation\n']], ['How to query as GROUP BY in django?'], 3], [(629551, 2), [['and the output would be of the form'], ['-10000']], [[" [{'designation': 'Salesman', 'dcount': 2}, \n {'designation': 'Manager', 'dcount': 2}]\n"]], ['How to query as GROUP BY in django?'], 3], [(631463, 0), [['One good place to start is by getting iPython ( easy_install ipython ) then poking around with tab completion,  ?  and  dir :'], ["Anyway, your problem with checking keys common between the two dictionaries: there are a few things to consider (maybe look at the  set  class?), but here's how I'd do it:"]], [[" In [2]: dir {}\n------> dir({})\n\nOut[2]: \n['__class__',\n ...\n 'keys',\n 'pop',\n 'popitem',\n 'setdefault',\n 'update',\n 'values']\n\nIn [3]: {}.update?\nType:       dict\nBase Class: <type 'dict'>\nString Form:    {}\nNamespace:  Interactive\nLength:     0\nDocstring:\n    dict() -> new empty dictionary.\n    dict(mapping) -> new dictionary initialized from a mapping object's\n        (key, value) pairs.\n    dict(seq) -> new dictionary initialized as if via:\n        d = {}\n        for k, v in seq:\n            d[k] = v\n    dict(**kwargs) -> new dictionary initialized with the name=value pairs\n        in the keyword argument list.  For example:  dict(one=1, two=2)\n"]], ['Dictionaries in Python'], 3], [(631463, 1), [["Anyway, your problem with checking keys common between the two dictionaries: there are a few things to consider (maybe look at the  set  class?), but here's how I'd do it:"], ["edit : alright, so this doesn't solve the problem of merging the two dicts into one with lists... But Lott's answer is good for that, or you could use the  setdefault  method:"]], [[' common_keys = [k for k in dict1 if k in dict2]\n']], ['Dictionaries in Python'], 3], [(631463, 2), [["edit : alright, so this doesn't solve the problem of merging the two dicts into one with lists... But Lott's answer is good for that, or you could use the  setdefault  method:"], ['-10000']], [[' new = {}\nfor (k, v) in dict1.items():\n    new.setdefault(k, []).append(v)\nfor (k, v) in dict2.items():\n    new.setdefault(k, []).append(v)\n']], ['Dictionaries in Python'], 3], [(631813, 0), [['Directory structure:'], ['Inside the  __init__.py  file, add the following line:']], [[' > ./packageTest\n>   ./packageTest/__init__.py\n>   ./packageTest/setup.py\n']], ['How do I assign a version number for a Python package using SVN and distutils?'], 4], [(631813, 1), [['Inside the  __init__.py  file, add the following line:'], ['setup.py file:']], [[' # package directory __init__.py\n__version__ = 1.0\n']], ['How do I assign a version number for a Python package using SVN and distutils?'], 4], [(631813, 2), [['setup.py file:'], ["Now in any module that imports from the package directory (I'll call packageTest), you can do this:"]], [[' # setup.py\nfrom packageTest import __version__\n...\n']], ['How do I assign a version number for a Python package using SVN and distutils?'], 4], [(631813, 3), [["Now in any module that imports from the package directory (I'll call packageTest), you can do this:"], ['-10000']], [[" from packageTest import setup\nprint 'Setup.py version:', setup.__version__  \n# prints Setup.py version: 1.0\n"]], ['How do I assign a version number for a Python package using SVN and distutils?'], 4], [(635483, 0), [['Here is a more elegant approach that has been available  (and documented)  since Python 2.5, and (particularly valuable to me)  it pretty prints just like a normal dict , instead of the ugly printing of an autovivified defaultdict:'], ["Note, these are the same semantics as the most upvoted answer but in half the lines of code - nosklo's implementation:"]], [[' class Vividict(dict):\n    def __missing__(self, key):\n        value = self[key] = type(self)() # retain local pointer to value\n        return value                     # faster to return than dict lookup\n']], ['What is the best way to implement nested dictionaries?'], 9], [(635483, 1), [["Note, these are the same semantics as the most upvoted answer but in half the lines of code - nosklo's implementation:"], ['-10000']], [[' class AutoVivification(dict):\n    """Implementation of perl\'s autovivification feature."""\n    def __getitem__(self, item):\n        try:\n            return dict.__getitem__(self, item)\n        except KeyError:\n            value = self[item] = type(self)()\n            return value\n']], ['What is the best way to implement nested dictionaries?'], 9], [(635483, 2), [['-10000'], ['Which outputs: ']], [[" import pprint\n\nclass Vividict(dict):\n    def __missing__(self, key):\n        value = self[key] = type(self)()\n        return value\n\nd = Vividict()\n\nd['foo']['bar']\nd['foo']['baz']\nd['fizz']['buzz']\nd['primary']['secondary']['tertiary']['quaternary']\npprint.pprint(d)\n"]], ['What is the best way to implement nested dictionaries?'], 9], [(635483, 3), [['Which outputs: '], ['And as the last line shows, it pretty prints beautifully and in order for manual inspection. But if you want to visually inspect your data, implementing  __missing__  to set a new instance of its class to the key and return it is a far better solution.']], [[" {'fizz': {'buzz': {}},\n 'foo': {'bar': {}, 'baz': {}},\n 'primary': {'secondary': {'tertiary': {'quaternary': {}}}}}\n"]], ['What is the best way to implement nested dictionaries?'], 9], [(635483, 4), [['And as the last line shows, it pretty prints beautifully and in order for manual inspection. But if you want to visually inspect your data, implementing  __missing__  to set a new instance of its class to the key and return it is a far better solution.'], ['Another criticism is that setdefault requires a new instance whether it is used or not. However, Python is rather smart about handling unused and unreferenced new instances, for example, it reuses the location in memory:']], [[" d = dict()\n\nd.setdefault('foo', {}).setdefault('bar', {})\nd.setdefault('foo', {}).setdefault('baz', {})\nd.setdefault('fizz', {}).setdefault('buzz', {})\nd.setdefault('primary', {}).setdefault('secondary', {}).setdefault('tertiary', {}).setdefault('quaternary', {})\n"]], ['What is the best way to implement nested dictionaries?'], 9], [(635483, 5), [['Another criticism is that setdefault requires a new instance whether it is used or not. However, Python is rather smart about handling unused and unreferenced new instances, for example, it reuses the location in memory:'], ['-10000']], [[' >>> id({}), id({}), id({})\n(523575344, 523575344, 523575344)\n']], ['What is the best way to implement nested dictionaries?'], 9], [(635483, 6), [['-10000'], ['But if you need to inspect your data, the results of an auto-vivified defaultdict populated with data in the same way looks like this:']], [[' from collections import defaultdict\n\ndef vivdict():\n    return defaultdict(vivdict)\n']], ['What is the best way to implement nested dictionaries?'], 9], [(635483, 7), [['But if you need to inspect your data, the results of an auto-vivified defaultdict populated with data in the same way looks like this:'], ["Finally, let's look at performance. I'm subtracting the costs of instantiation."]], [[" >>> d = vivdict(); d['foo']['bar']; d['foo']['baz']; d['fizz']['buzz']; d['primary']['secondary']['tertiary']['quaternary']; import pprint; \n>>> pprint.pprint(d)\ndefaultdict(<function vivdict at 0x17B01870>, {'foo': defaultdict(<function vivdict \nat 0x17B01870>, {'baz': defaultdict(<function vivdict at 0x17B01870>, {}), 'bar': \ndefaultdict(<function vivdict at 0x17B01870>, {})}), 'primary': defaultdict(<function \nvivdict at 0x17B01870>, {'secondary': defaultdict(<function vivdict at 0x17B01870>, \n{'tertiary': defaultdict(<function vivdict at 0x17B01870>, {'quaternary': defaultdict(\n<function vivdict at 0x17B01870>, {})})})}), 'fizz': defaultdict(<function vivdict at \n0x17B01870>, {'buzz': defaultdict(<function vivdict at 0x17B01870>, {})})})\n"]], ['What is the best way to implement nested dictionaries?'], 9], [(635483, 8), [["Finally, let's look at performance. I'm subtracting the costs of instantiation."], ["Based on performance,  dict.setdefault  works the best. I'd highly recommend it for production code, in cases where you care about execution speed. "]], [[" >>> import timeit\n>>> min(timeit.repeat(lambda: {}.setdefault('foo', {}))) - min(timeit.repeat(lambda: {}))\n0.13612580299377441\n>>> min(timeit.repeat(lambda: vivdict()['foo'])) - min(timeit.repeat(lambda: vivdict()))\n0.2936999797821045\n>>> min(timeit.repeat(lambda: Vividict()['foo'])) - min(timeit.repeat(lambda: Vividict()))\n0.5354437828063965\n>>> min(timeit.repeat(lambda: AutoVivification()['foo'])) - min(timeit.repeat(lambda: AutoVivification()))\n2.138362169265747\n"]], ['What is the best way to implement nested dictionaries?'], 9], [(635524, 0), [["I'm assuming that you've bound your form to the files using:"], ['If you have, once the form has been validated, you can access the file content itself using the request.FILES dictionary:']], [[' my_form = MyFormClass(request.POST, request.FILES)\n']], ['Django: Open uploaded file while still in memory; In the Form Clean method?'], 3], [(635524, 1), [['If you have, once the form has been validated, you can access the file content itself using the request.FILES dictionary:'], ["If you need to access the file contents from within the form's  clean  method (or any method of the cleaning machinery), you are doing it right.  cleaned_data.get('xml_file')  returns an  UploadedFile  object. The  __str__  method of that object just prints out the string, which is why you see only the file name. However, you can get access to the entire contents:"]], [[" if my_form.is_valid():\n    data = request.FILES['myfile'].read()\n"]], ['Django: Open uploaded file while still in memory; In the Form Clean method?'], 3], [(635524, 2), [["If you need to access the file contents from within the form's  clean  method (or any method of the cleaning machinery), you are doing it right.  cleaned_data.get('xml_file')  returns an  UploadedFile  object. The  __str__  method of that object just prints out the string, which is why you see only the file name. However, you can get access to the entire contents:"], ['This section of the docs has some great examples:  http://docs.djangoproject.com/en/dev/topics/http/file-uploads/']], [[" xml_file = myform.cleaned_data.get('xml_file')\nprint xml_file.read()\n"]], ['Django: Open uploaded file while still in memory; In the Form Clean method?'], 3], [(637800, 0), [['I was able to implement the NumberedCanvas approach from ActiveState.  It was very easy to do and did not change much of my existing code. All I had to do was add that NumberedCanvas class and add the canvasmaker attribute when building my doc.  I also changed the measurements of where the "x of y" was displayed:'], ['became ']], [[' self.doc.build(pdf)\n']], ['Showing page count with ReportLab'], 2], [(637800, 1), [['became '], ['doc  is a BaseDocTemplate and  pdf  is my list of flowable elements.']], [[' self.doc.build(pdf, canvasmaker=NumberedCanvas) \n']], ['Showing page count with ReportLab'], 2], [(638647, 0), [["I don't see any great way to do what you're trying to do directly.  If you're willing to accept a little de-normalization, I would recommend a pre-save signal to mark messages as being at the head."], ['Then your query becomes magically simple:']], [[" #In your model\nhead = models.BooleanField(default=True)\n\n#As a signal plugin:\ndef check_head(sender, **kwargs):\n    message = kwargs['instance']\n    if hasattr(message,'no_check_head') and message.no_check_head:\n        return\n    previous_message = Message.objects.filter(time__lt=message.time).order_by('-time')[0]\n    if message.source == previous_message.source:\n        message.head = False\n    next_message = Message.objects.filter(time__gt=message.time).order_by('time')[0]\n    if message.source == next_message.source:\n        next_message.head = False\n        next_message.no_check_head\n        next_message.save()\n"]], ['Paging depending on grouping of items in Django'], 3], [(638647, 1), [['Then your query becomes magically simple:'], ["If you had a server configuration that used a single process that's multi-threaded, a Lock or RLock should do the trick.  Here's a possible implementation with non-reentrant lock:"]], [[" messages = Message.objects.filter(head=True).order_by('time')[0:15]\n"]], ['Paging depending on grouping of items in Django'], 3], [(638647, 2), [["If you had a server configuration that used a single process that's multi-threaded, a Lock or RLock should do the trick.  Here's a possible implementation with non-reentrant lock:"], ['Again, a corresponding delete signal is critical as well.']], [[" import thread\nlock = thread.allocate_lock()\ndef check_head(sender, **kwargs):\n    # This check must come outside the safe zone\n    # Otherwise, your code will screech to a hault\n    message = kwargs['instance']\n    if hasattr(message,'no_check_head') and message.no_check_head:\n        return\n    # define safe zone\n    lock.acquire()\n    # see code above\n    ....\n    lock.release()\n"]], ['Paging depending on grouping of items in Django'], 3], [(638893, 0), [["Another solution (not that pythonic, but very fast) is to use string.translate - though note that this will not work for unicode.  It's also worth noting that you can speed up  Dana's code  by moving the characters into a set (which looks up by hash, rather than performing a linear search each time).  Here are the timings I get for various of the solutions given:"], ['This gives me:']], [[' import string, re, timeit\n\n# Precomputed values (for str_join_set and translate)\n\nletter_set = frozenset(string.ascii_lowercase + string.ascii_uppercase)\ntab = string.maketrans(string.ascii_lowercase + string.ascii_uppercase,\n                       string.ascii_lowercase * 2)\ndeletions = \'\'.join(ch for ch in map(chr,range(256)) if ch not in letter_set)\n\ns="A235th@#$&( er Ra{}|?>ndom"\n\n# From unwind\'s filter approach\ndef test_filter(s):\n    return filter(lambda x: x in string.ascii_lowercase, s.lower())\n\n# using set instead (and contains)\ndef test_filter_set(s):\n    return filter(letter_set.__contains__, s).lower()\n\n# Tomalak\'s solution\ndef test_regex(s):\n    return re.sub(\'[^a-z]\', \'\', s.lower())\n\n# Dana\'s\ndef test_str_join(s):\n    return \'\'.join(c for c in s.lower() if c in string.ascii_lowercase)\n\n# Modified to use a set.\ndef test_str_join_set(s):\n    return \'\'.join(c for c in s.lower() if c in letter_set)\n\n# Translate approach.\ndef test_translate(s):\n    return string.translate(s, tab, deletions)\n\n\nfor test in sorted(globals()):\n    if test.startswith("test_"):\n        assert globals()[test](s)==\'atherrandom\'\n        print "%30s : %s" % (test, timeit.Timer("f(s)", \n              "from __main__ import %s as f, s" % test).timeit(200000))\n']], ['What is the most efficient way in Python to convert a string to all lowercase stripping out all non-ascii alpha characters?'], 2], [(638893, 1), [['This gives me:'], ['[Edit] Updated with filter solutions as well.  (Note that using  set.__contains__  makes a big difference here, as it avoids making an extra function call for the lambda.']], [['                test_filter : 2.57138351271\n           test_filter_set : 0.981806765698\n                test_regex : 3.10069885233\n             test_str_join : 2.87172979743\n         test_str_join_set : 2.43197956381\n            test_translate : 0.335367566218\n']], ['What is the most efficient way in Python to convert a string to all lowercase stripping out all non-ascii alpha characters?'], 2], [(639744, 0), [["In order for this work you'll need to run nose programmatically.  Create a python file called  runtests.py  and put it next to your test files.  In it, include the following code:"], ['You may need to import the  maya.standalone  depending on what your tests do.']], [[" import os\nos.environ['PYTHONPATH'] = '/path/to/site-packages'\n\nimport nose\nnose.run()\n"]], ['Running unit tests with Nose inside a Python environment such as Autodesk Maya?'], 2], [(639744, 1), [['You may need to import the  maya.standalone  depending on what your tests do.'], ['-10000']], [[" import maya.standalone\nmaya.standalone.initialize(name='python')\n"]], ['Running unit tests with Nose inside a Python environment such as Autodesk Maya?'], 2], [(639792, 0), [['Write a context processor:'], ['Then in your url conf:']], [[" from django.views.generic.create_update import get_model_and_form_class\ndef form_user_default(request):\n    if request.method == 'GET':\n        model, custom_form = get_model_and_form_class(Post,None)\n        custom_form.author = request.user\n        return {'form':custom_form}\n    else: return {}\n"]], ['Setting object owner with generic create_object view in django'], 2], [(639792, 1), [['Then in your url conf:'], ['Again, I had to delve into the source code to figure out how to do this.  It might really be best to try writing your own view (but incorporate as many Django custom objects as possible).  There\'s no "simple default" way to do this, because in the django paradigm forms are more closely tied to the model layer than to views, and only views have knowledge of the request object.']], [[" url(r'pattern_to_match', 'django.views.generic.create_update.create_object', kwargs={'context_processors':form_user_default})\n"]], ['Setting object owner with generic create_object view in django'], 2], [(640001, 0), [['-10000'], ["So in Python, you'd do:"]], [[' s/\\([^)]*\\)//\n']], ['How can I remove text within parentheses with a regex?'], 2], [(640001, 1), [["So in Python, you'd do:"], ['-10000']], [[" re.sub(r'\\([^)]*\\)', '', filename)\n"]], ['How can I remove text within parentheses with a regex?'], 2], [(640045, 0), [['To define the event:'], ['To generate an event:']], [[' import wx.lib.newevent\nQuantityChangedEvent, EVT_QUANTITY_CHANGED = wx.lib.newevent.NewCommandEvent()\n']], ['Generate a custom CommandEvent in wxPython'], 2], [(640045, 1), [['To generate an event:'], ['Binding the event remains the same.']], [[' event = QuantityChangedEvent(self.GetId())\nself.GetEventHandler().ProcessEvent(event)\n# or ...\n#wx.PostEvent(self, event)\n']], ['Generate a custom CommandEvent in wxPython'], 2], [(640389, 0), [['The answer from  the link   @Jweede provided  is imprecise. It should be:'], ['-10000']], [[" import os\nos.environ['PYTHONINSPECT'] = '1'\n"]], ['tell whether python is in -i mode'], 2], [(640389, 1), [['-10000'], ["See the Python's  main.c ."]], [[' import os\nfrom ctypes import POINTER, c_int, cast, pythonapi\n\ndef in_interactive_inspect_mode():\n    """Whether \'-i\' option is present or PYTHONINSPECT is not empty."""\n    if os.environ.get(\'PYTHONINSPECT\'): return True\n    iflag_ptr = cast(pythonapi.Py_InteractiveFlag, POINTER(c_int))\n    #NOTE: in Python 2.6+ ctypes.pythonapi.Py_InspectFlag > 0\n    #      when PYTHONINSPECT set or \'-i\' is present \n    return iflag_ptr.contents.value != 0\n']], ['tell whether python is in -i mode'], 2], [(641794, 0), [['This code works (but not with comment) :'], ['For comment change in Python grammar :']], [[" {   scopeName = 'source.whitespace';\n    patterns = (\n        {  name = 'source.invalid.trailing-whitespace';\n            match = '(\\s+)$';\n            captures = { 1 = { name = 'invalid.trailing-whitespace'; }; };\n         },\n    );\n}\n"]], ['Highlighting trailing whitespace in Textmate for Python?'], 5], [(641794, 1), [['For comment change in Python grammar :'], ['In:']], [[" {  name = 'comment.line.number-sign.python';\n   match = '(#).*$\\n?';\n   captures = { 1 = { name = 'punctuation.definition.comment.python'; }; };\n},\n"]], ['Highlighting trailing whitespace in Textmate for Python?'], 5], [(641794, 2), [['In:'], ["You'll need to add an 'include' in Python language definition where:"]], [[" {  name = 'comment.line.number-sign.python';\n   match = '(#).*?(\\s*)$\\n?';\n   captures = { \n     1 = { name = 'punctuation.definition.comment.python'; }; \n     2 = { name = 'invalid.trailing-whitespace';  }; \n   };\n},\n"]], ['Highlighting trailing whitespace in Textmate for Python?'], 5], [(641794, 3), [["You'll need to add an 'include' in Python language definition where:"], ['Turns to:']], [[" :\npatterns = (\n {    name = 'comment.line.number-sign.python';\n:\n"]], ['Highlighting trailing whitespace in Textmate for Python?'], 5], [(641794, 4), [['Turns to:'], ['-10000']], [[" :\npatterns = (\n {  include = 'source.whitespace'; },\n {    name = 'comment.line.number-sign.python';\n:\n"]], ['Highlighting trailing whitespace in Textmate for Python?'], 5], [(642154, 0), [['int()  is the Python standard built-in function to convert a string into an integer value. You call it with a string containing a number as the argument, and it returns the number converted to an actual integer:'], ['If you know the structure of your list, T1 (that it simply contains lists, only one level), you could do this in Python 2:']], [[' print int("1") + 1\n']], ['How to convert strings into integers in Python?'], 3], [(642154, 1), [['If you know the structure of your list, T1 (that it simply contains lists, only one level), you could do this in Python 2:'], ['In Python 3:']], [[' T2 = [map(int, x) for x in T1]\n']], ['How to convert strings into integers in Python?'], 3], [(642154, 2), [['In Python 3:'], ['-10000']], [[' T2 = [list(map(int, x)) for x in T1]\n']], ['How to convert strings into integers in Python?'], 3], [(642648, 0), [["The best bet would be to write a patch to the optparse module.  In the meantime, you can accomplish this with a slightly modified OptionParser class.  This isn't perfect, but it'll get what you want done."], ['And the output you get from running this:']], [[' #!/usr/bin/env python\nfrom optparse import OptionParser, Option, IndentedHelpFormatter\n\nclass PosOptionParser(OptionParser):\n    def format_help(self, formatter=None):\n        class Positional(object):\n            def __init__(self, args):\n                self.option_groups = []\n                self.option_list = args\n\n        positional = Positional(self.positional)\n        formatter = IndentedHelpFormatter()\n        formatter.store_option_strings(positional)\n        output = [\'\\n\', formatter.format_heading("Positional Arguments")]\n        formatter.indent()\n        pos_help = [formatter.format_option(opt) for opt in self.positional]\n        pos_help = [line.replace(\'--\',\'\') for line in pos_help]\n        output += pos_help\n        return OptionParser.format_help(self, formatter) + \'\'.join(output)\n\n    def add_positional_argument(self, option):\n        try:\n            args = self.positional\n        except AttributeError:\n            args = []\n        args.append(option)\n        self.positional = args\n\n    def set_out(self, out):\n        self.out = out\ndef main():\n    usage = "usage: %prog [options] bar baz"\n    parser = PosOptionParser(usage)\n    parser.add_option(\'-f\', \'--foo\', dest=\'foo\',\n                      help=\'Enable foo\')\n    parser.add_positional_argument(Option(\'--bar\', action=\'store_true\',\n                                   help=\'The bar positional argument\'))\n    parser.add_positional_argument(Option(\'--baz\', action=\'store_true\',\n                                   help=\'The baz positional argument\'))\n    (options, args) = parser.parse_args()\n    if len(args) != 2:\n        parser.error("incorrect number of arguments")\n    pass\n\nif __name__ == \'__main__\':\n    main()\n']], ["How do I format positional argument help using Python's optparse?"], 2], [(642648, 1), [['And the output you get from running this:'], ['-10000']], [[' Usage: test.py [options] bar baz\n\n  Options:\n    -h, --help         show this help message and exit\n    -f FOO, --foo=FOO  Enable foo\n\nPositional Arguments:\n  bar  The bar positional argument\n  baz  The baz positional argument\n']], ["How do I format positional argument help using Python's optparse?"], 2], [(643823, 0), [['You can use a list comprehension (Python 2.6+):'], ['Or for Python prior to 2.6:']], [[' y = ["{0:0>2}".format(v) for v in x]\n']], ['Python - list transformation'], 2], [(643823, 1), [['Or for Python prior to 2.6:'], ['Edit: Missed the fact that you wanted zero-padding...']], [[' y = ["%02d" % v for v in x]\n']], ['Python - list transformation'], 2], [(644178, 0), [['-10000'], ['Or in Python2.7+ with  Dict Comprehensions :']], [[" name_map = {'oldcol1': 'newcol1', 'oldcol2': 'newcol2', 'oldcol3': 'newcol3'...}\n\nfor row in rows:\n    # Each row is a dict of the form: {'oldcol1': '...', 'oldcol2': '...'}\n    row = dict((name_map[name], val) for name, val in row.iteritems())\n    ...\n"]], ['How do I re-map python dict keys'], 2], [(644178, 1), [['Or in Python2.7+ with  Dict Comprehensions :'], ['-10000']], [[' for row in rows:\n    row = {name_map[name]: val for name, val in row.items()}\n']], ['How do I re-map python dict keys'], 2], [(644821, 0), [['I knew there was an obvious solution:'], ['Contents of dirFoo/test.py']], [[' dirFoo\\\n    __init__.py\n    test.py\n    dirBar\\\n        Foo.py\n        Bar.py\n']], ['Python: How to run unittest.main() for all source files in a subdirectory?'], 3], [(644821, 1), [['Contents of dirFoo/test.py'], ['Run the tests:']], [[' from dirBar import *\nimport unittest\n\nif __name__ == "__main__":\n\n    unittest.main()\n']], ['Python: How to run unittest.main() for all source files in a subdirectory?'], 3], [(644821, 2), [['Run the tests:'], ['Sorry for the silly question.']], [[' $ python test.py\n...........\n----------------------------------------------------------------------\nRan 11 tests in 2.305s\n\nOK\n']], ['Python: How to run unittest.main() for all source files in a subdirectory?'], 3], [(645312, 0), [['Python 2.x:'], ['Python 3.x:']], [[' import urllib2\nurllib2.urlopen("http://example.com/foo/bar").read()\n']], ['What is the quickest way to HTTP GET in Python?'], 2], [(645312, 1), [['Python 3.x:'], ['Documentation for  urllib.request  and  read .']], [[' import urllib.request\nurllib.request.urlopen("http://example.com/foo/bar").read()\n']], ['What is the quickest way to HTTP GET in Python?'], 2], [(645493, 0), [["The sensor architecture can be solved by using composition if you want to stick to your original map-of-data design. You seem to be new to Python so I'll try to keep idioms to a minimum."], ["The architectural problem you're describing with the actuators is solved by using mixins and  proxying  (via  __getattr__ ) rather than inheritance. (Proxying can be a nice alternative to inheritance because objects to proxy to can be bound/unbound at runtime. Also, you don't have to worry about handling all initialization in a single constructor using this technique.)"]], [[' class IRSensor:\n    def read(self): return {\'ir_amplitude\': 12}\n\nclass UltrasonicSensor:\n    def read(self): return {\'ultrasonic_amplitude\': 63}\n\nclass SickLaserSensor:\n    def read(self): return {\'laser_amplitude\': 55}\n\nclass CompositeSensor:\n    """Wrap multiple component sensors, coalesce the results, and return\n    the composite readout.\n    """\n    component_sensors = []\n\n    def __init__(self, component_sensors=None):\n        component_sensors = component_sensors or self.component_sensors\n        self.sensors = [cls() for cls in component_sensors]\n\n    def read(self):\n        measurements = {}\n        for sensor in self.sensors:\n            measurements.update(sensor.read())\n        return measurements\n\nclass MyCompositeSensor(CompositeSensor):\n    component_sensors = [UltrasonicSensor, IRSensor]\n\n\ncomposite_sensor = MyCompositeSensor()\nmeasurement_map = composite_sensor.read()\nassert measurement_map[\'ultrasonic_amplitude\'] == 63\nassert measurement_map[\'ir_amplitude\'] == 12\n']], ['Discussion of multiple inheritance vs Composition for a project (+other things)'], 5], [(645493, 1), [["The architectural problem you're describing with the actuators is solved by using mixins and  proxying  (via  __getattr__ ) rather than inheritance. (Proxying can be a nice alternative to inheritance because objects to proxy to can be bound/unbound at runtime. Also, you don't have to worry about handling all initialization in a single constructor using this technique.)"], ['And finally, you can throw it all together with a simple node declaration:']], [[' class MovementActuator:\n    def __init__(self, x=0, y=0):\n        self.x, self.y = (x, y)\n\n    def move(self, x, y):\n        print \'Moving to\', x, y\n        self.x, self.y = (x, y)\n\n    def get_position(self):\n        return (self.x, self.y)\n\nclass CommunicationActuator:\n    def communicate(self):\n        return \'Hey you out there!\'\n\nclass CompositeActuator:\n    component_actuators = []\n\n    def __init__(self, component_actuators=None):\n        component_actuators = component_actuators \\\n            or self.component_actuators\n        self.actuators = [cls() for cls in component_actuators]\n\n    def __getattr__(self, attr_name):\n        """Look for value in component sensors."""\n        for actuator in self.actuators:\n            if hasattr(actuator, attr_name):\n                return getattr(actuator, attr_name)\n        raise AttributeError(attr_name)\n\n\nclass MyCompositeActuator(CompositeActuator):\n    component_actuators = [MovementActuator, CommunicationActuator]\n\ncomposite_actuator = MyCompositeActuator()\nassert composite_actuator.get_position() == (0, 0)\nassert composite_actuator.communicate() == \'Hey you out there!\'\n']], ['Discussion of multiple inheritance vs Composition for a project (+other things)'], 5], [(645493, 2), [['And finally, you can throw it all together with a simple node declaration:'], ['You probably don\'t want this to begin with, since class hierarchy means squat in Python. What you want to do is make a  SensorInterface  (minimum requirements for a sensor) and have a bunch of "mixin" classes that have totally independent functionality that can be invoked through methods of various names. In your sensor framework you shouldn\'t say things like  isinstance(sensor, PositionSensor)  -- you should say things like "can this sensor geo-locate?" in the following form:']], [[' from sensors import *\nfrom actuators import *\n\nclass AbstractNode:\n    sensors = [] # Set of classes.\n    actuators = [] # Set of classes.\n    def __init__(self):\n        self.composite_sensor = CompositeSensor(self.sensors)\n        self.composite_actuator = CompositeActuator(self.actuators)\n\nclass MyNode(AbstractNode):\n    sensors = [UltrasonicSensor, SickLaserSensor]\n    actuators = [MovementActuator, CommunicationActuator]\n\n    def think(self):\n        measurement_map = self.composite_sensor.read()\n        while self.composite_actuator.get_position()[1] >= 0:\n            self.composite_actuator.move(100, -100)\n\nmy_node = MyNode()\nmy_node.think()\n']], ['Discussion of multiple inheritance vs Composition for a project (+other things)'], 5], [(645493, 3), [['You probably don\'t want this to begin with, since class hierarchy means squat in Python. What you want to do is make a  SensorInterface  (minimum requirements for a sensor) and have a bunch of "mixin" classes that have totally independent functionality that can be invoked through methods of various names. In your sensor framework you shouldn\'t say things like  isinstance(sensor, PositionSensor)  -- you should say things like "can this sensor geo-locate?" in the following form:'], ['If they write the code in a module that gets put in a plugin package or what have you, you can magically instrument the classes for them when you import their plugin modules. Something along the lines of this snippet (untested):']], [[' def get_position(sensor):\n    try:\n        return sensor.geolocate()\n    except AttributeError:\n        return None\n']], ['Discussion of multiple inheritance vs Composition for a project (+other things)'], 5], [(645493, 4), [['If they write the code in a module that gets put in a plugin package or what have you, you can magically instrument the classes for them when you import their plugin modules. Something along the lines of this snippet (untested):'], ['You can  find the modules within a package  with another function.']], [["  import inspect\n import types\n\n from sensors import Sensor\n\n def is_class(obj):\n     return type(obj) in (types.ClassType, types.TypeType)\n\n def instrumented_init(self, *args, **kwargs):\n     Sensor.__init__(self, *args, **kwargs)\n\n for module in plugin_modules: # Get this from somewhere...\n     classes = inspect.getmembers(module, predicate=is_class)\n     for name, cls in classes:\n         if hasattr(cls, '__init__'):\n             # User specified own init, may be deriving from something else.\n             continue \n         if cls.__bases__ != tuple([Sensor]):\n             continue # Class doesn't singly inherit from sensor.\n         cls.__init__ = instrumented_init\n"]], ['Discussion of multiple inheritance vs Composition for a project (+other things)'], 5], [(645864, 0), [['Briefly, I have an xdir.py file, which writes Windows commands to stdout:'], ['Then an xdir.cmd file:']], [[' # Obviously, this should be more interesting..\nimport sys\nprint "cd", sys.argv[1]\n']], ['Changing prompt working directory via Python script'], 4], [(645864, 1), [['Then an xdir.cmd file:'], ['Then I create a doskey alias:']], [[' @echo off\npython xdir.py %* >%TEMP%\\__xdir.cmd\ncall %TEMP%\\__xdir.cmd\n']], ['Changing prompt working directory via Python script'], 4], [(645864, 2), [['Then I create a doskey alias:'], ['The end result is that I can type']], [[' doskey x=xdir.cmd $*\n']], ['Changing prompt working directory via Python script'], 4], [(645864, 3), [['The end result is that I can type'], ['and change into subdir.']], [[' $ x subdir\n']], ['Changing prompt working directory via Python script'], 4], [(647142, 0), [['Use  IPython  shell'], ["Copy without the shell prompt in the first place (though I don't know how to do it on Google Chrome, for example)."]], [[' In [99]: %cpaste\nPasting code; enter \'--\' alone on the line to stop.\n:>>> class eg(object):\n:...     def __init__(self, name):\n:...             self.name = name\n:...     def hi(self):\n:...             print "Hi %s" % (self.name)\n:...\n:>>> greeter = eg("Bob")\n:>>> greeter.hi()\n:--\nHi Bob\n']], ['Why can I not paste the output of Pythons REPL without manual-editing?'], 4], [(647142, 1), [["Copy without the shell prompt in the first place (though I don't know how to do it on Google Chrome, for example)."], ['Output:']], [[' $ python -c "import doctest; doctest.testfile(\'documentation.txt\')" -v\n']], ['Why can I not paste the output of Pythons REPL without manual-editing?'], 4], [(647142, 2), [['Output:'], ['If you add the following snippet at the end of your module it will test all code in its docstrings:']], [[' Trying:\n    class eg(object):\n        def __init__(self, name):\n                self.name = name\n        def hi(self):\n                print "Hi %s" % (self.name)\nExpecting nothing\nok\nTrying:\n    greeter = eg("Bob")\nExpecting nothing\nok\nTrying:\n    greeter.hi()\nExpecting:\n    Hi Bob\nok\n1 items passed all tests:\n   3 tests in doctest.txt\n3 tests in 1 items.\n3 passed and 0 failed.\nTest passed.\n']], ['Why can I not paste the output of Pythons REPL without manual-editing?'], 4], [(647142, 3), [['If you add the following snippet at the end of your module it will test all code in its docstrings:'], ['QED']], [[' if __name__=="__main__":\n   import doctest; doctest.testmod()\n']], ['Why can I not paste the output of Pythons REPL without manual-editing?'], 4], [(647906, 0), [["The solution was pretty simple. The problem seemed to be that creating the new page didn't generate a page change event.\nThe solution is:"], ['Another solution is to add this line:']], [[' self.nb.AddPage(pnl, nm, select=True)\n']], ['wxPython auinotebook.GetSelection() return index to the first page'], 3], [(647906, 1), [['Another solution is to add this line:'], ['They both do the same. Trigger a page change event to the last added page.']], [[' self.nb.SetSelection(self.nb.GetPageCount()-1)\n']], ['wxPython auinotebook.GetSelection() return index to the first page'], 3], [(647906, 2), [['They both do the same. Trigger a page change event to the last added page.'], ['-10000']], [[' def new_panel(self, nm):\n        pnl = wx.Panel(self)\n        pnl.identifierTag = nm\n        self.nb.AddPage(pnl, nm, select=True) \n        self.sizer = wx.BoxSizer()\n        self.sizer.Add(self.nb, 1, wx.EXPAND)\n        self.SetSizer(self.sizer)\n        #self.nb.SetSelection(self.nb.GetPageCount()-1)\n        pnl.SetFocus() # Have focused the last panel.\n        print self.nb.GetSelection()\n']], ['wxPython auinotebook.GetSelection() return index to the first page'], 3], [(650877, 0), [['You do not have to split the stream/file into lines yourself. Just iterate:'], ['Example']], [[' for ln in f:\n    # work on line in ln\n']], ['Python, redirecting the stream of Popen to a python function'], 2], [(650877, 1), [['Example'], ['-10000']], [[" from subprocess import Popen, PIPE\npp = Popen('dir', shell=True, stdout=PIPE)\n\nfor ln in pp.stdout:\n    print '#',ln\n"]], ['Python, redirecting the stream of Popen to a python function'], 2], [(651794, 0), [['-10000'], ['Testing:']], [[' class AutoVivification(dict):\n    """Implementation of perl\'s autovivification feature."""\n    def __getitem__(self, item):\n        try:\n            return dict.__getitem__(self, item)\n        except KeyError:\n            value = self[item] = type(self)()\n            return value\n']], ["What's the best way to initialize a dict of dicts in Python?"], 3], [(651794, 1), [['Testing:'], ['Output:']], [[" a = AutoVivification()\n\na[1][2][3] = 4\na[1][3][3] = 5\na[1][2]['test'] = 6\n\nprint a\n"]], ["What's the best way to initialize a dict of dicts in Python?"], 3], [(651794, 2), [['Output:'], ['-10000']], [[" {1: {2: {'test': 6, 3: 4}, 3: {3: 5}}}\n"]], ["What's the best way to initialize a dict of dicts in Python?"], 3], [(652423, 0), [['While it is possible to construct a generic function that finds the animal in the list using a.index or testing with "dog" in animals, you really want a dictionary here, otherwise the add function will scale abysmally as more animals are added:'], ['You can then "one-shot" the add function using setdefault:']], [[" animals = {'dog':set(['bite']),\n           'cat':set(['bite', 'scratch'])}\n"]], ['Check if value exists in nested lists'], 2], [(652423, 1), [['You can then "one-shot" the add function using setdefault:'], ["It will create the 'dog' key if it doesn't exist, and since setdefault returns the set that either exists or was just created, you can then add the bite action. Sets ensure that there are no duplicates automatically."]], [[" animals.setdefault('dog', set()).add('bite')\n"]], ['Check if value exists in nested lists'], 2], [(653259, 0), [['You can use re.split'], ['However if the text is very large the resulting array may be consuming too much memory. Then you may consider re.finditer:']], [[' re.split(\'[\\s|!\\?\\.;:"]\', text)\n']], ['Effective way to iteratively append to a string in Python?'], 2], [(653259, 1), [['However if the text is very large the resulting array may be consuming too much memory. Then you may consider re.finditer:'], ['-10000']], [[' import re\ndef getwords(text, splitchars=\' \\t|!?.;:"\'):\n  words_iter = re.finditer(\n    "([%s]+)" % "".join([("^" + c) for c in splitchars]),\n    text)\n  for word in words_iter:\n    yield word.group()\n\n# a quick test\ns = "a:b cc? def...a||"\nwords = [x for x in getwords(s)]\nassert ["a", "b", "cc", "def", "a"] == words, words\n']], ['Effective way to iteratively append to a string in Python?'], 2], [(653368, 0), [["Like thobe's answer says, the only way to handle both cases is to check for both scenarios.  The easiest way is simply to check to see if there is a single argument and it is callabe (NOTE: extra checks will be necessary if your decorator only takes 1 argument and it happens to be a callable object):"], ['Using the following decorator decorator, we can deocrate our decorators so that they can be used with or without arguments:']], [[' def decorator(*args, **kwargs):\n    if len(args) == 1 and len(kwargs) == 0 and callable(args[0]):\n        # called as @decorator\n    else:\n        # called as @decorator(*args, **kwargs)\n']], ['How to create a Python decorator that can be used either with or without parameters?'], 3], [(653368, 1), [['Using the following decorator decorator, we can deocrate our decorators so that they can be used with or without arguments:'], ['The following demonstrates its use:']], [[" def doublewrap(f):\n    '''\n    a decorator decorator, allowing the decorator to be used as:\n    @decorator(with, arguments, and=kwargs)\n    or\n    @decorator\n    '''\n    @wraps(f)\n    def new_dec(*args, **kwargs):\n        if len(args) == 1 and len(kwargs) == 0 and callable(args[0]):\n            # actual decorated function\n            return f(args[0])\n        else:\n            # decorator arguments\n            return lambda realf: f(realf, *args, **kwargs)\n\n    return new_dec\n"]], ['How to create a Python decorator that can be used either with or without parameters?'], 3], [(653368, 2), [['The following demonstrates its use:'], ['-10000']], [[" def test_doublewrap():\n    from util import doublewrap\n    from functools import wraps    \n\n    @doublewrap\n    def mult(f, factor=2):\n        '''multiply a function's return value'''\n        @wraps(f)\n        def wrap(*args, **kwargs):\n            return factor*f(*args,**kwargs)\n        return wrap\n\n    # try normal\n    @mult\n    def f(x, y):\n        return x + y\n\n    # try args\n    @mult(3)\n    def f2(x, y):\n        return x*y\n\n    # try kwargs\n    @mult(factor=5)\n    def f3(x, y):\n        return x - y\n\n    assert f(2,3) == 10\n    assert f2(2,5) == 30\n    assert f3(8,1) == 5*7\n"]], ['How to create a Python decorator that can be used either with or without parameters?'], 3], [(654646, 0), [['The problem is that in '], ["I'd rewrite this code like that:"]], [[' results = dict.fromkeys(inputs, [])\n']], ['How do I create a unique value for each key using dict.fromkeys?'], 3], [(654646, 1), [["I'd rewrite this code like that:"], ['Other option is:']], [[' runs = 10\ninputs = (1, 2, 3, 5, 8, 13, 21, 34, 55)\nresults = {}\n\nfor run in range(runs):\n    for i in inputs:\n        results.setdefault(i,[]).append(benchmark(i))\n']], ['How do I create a unique value for each key using dict.fromkeys?'], 3], [(654646, 2), [['Other option is:'], ['-10000']], [[' runs = 10\ninputs = (1, 2, 3, 5, 8, 13, 21, 34, 55)\nresults = dict([(i,[]) for i in inputs])\n\nfor run in range(runs):\n    for i in inputs:\n        results[i].append(benchmark(i))\n']], ['How do I create a unique value for each key using dict.fromkeys?'], 3], [(656297, 0), [['The solution is in  the link that you provided  in your question:'], ['Full example:']], [[' datetime.combine(date.today(), time()) + timedelta(hours=1)\n']], ['python time + timedelta equivalent'], 3], [(656297, 1), [['Full example:'], ['Output:']], [[' from datetime import date, datetime, time, timedelta\n\ndt = datetime.combine(date.today(), time(23, 55)) + timedelta(minutes=30)\nprint dt.time()\n']], ['python time + timedelta equivalent'], 3], [(656297, 2), [['Output:'], ['-10000']], [[' 00:25:00\n']], ['python time + timedelta equivalent'], 3], [(658763, 0), [['-10000'], ['but you need to manage precision yourself. e.g.,']], [[" '%f' % (x/y)\n"]], ['How do I suppress scientific notation in Python?'], 2], [(658763, 1), [['but you need to manage precision yourself. e.g.,'], ['will display zeros only. \n details are in the docs']], [[" '%f' % (1/10**8)\n"]], ['How do I suppress scientific notation in Python?'], 2], [(658939, 0), [['-10000'], ['To install  Pygments :']], [[' $ pygmentize -O full -O style=native -o test.html test.py\n']], ['Python equivalent to "php -s"'], 4], [(658939, 1), [['To install  Pygments :'], ['You can use it as a library.']], [[' $ easy_install Pygments\n']], ['Python equivalent to "php -s"'], 4], [(658939, 2), [['You can use it as a library.'], ['Output:']], [[' from pygments import highlight\nfrom pygments.lexers import guess_lexer\nfrom pygments.formatters import HtmlFormatter\n\ncode = \'#!/usr/bin/python\\nprint "Hello World!"\'\nlexer = guess_lexer(code) # or just pygments.lexers.PythonLexer()\nformatter = HtmlFormatter(noclasses=True, nowrap=True, lineseparator="<br>\\n")\nprint highlight(code, lexer, formatter)\n']], ['Python equivalent to "php -s"'], 4], [(658939, 3), [['Output:'], ['(added whitespace for clarity)']], [[' <span style="color: #408080; font-style: italic">#!/usr/bin/python</span><br>\n<span style="color: #008000; font-weight: bold">print</span> \n<span style="color: #BA2121">&quot;Hello World!&quot;</span><br>\n']], ['Python equivalent to "php -s"'], 4], [(659575, 0), [['Quote:'], ['Something like this should work for you:']], [[" myargs = ['-vv', '-m', '-a', '-f', '//filesrver/eggs http://webserver1/python_eggs http://webserver2/python_eggs, 'myproject==trunk-99']\n\nsetuptools.command.easy_install.main( myargs )\n"]], ["What's the correct way to add extra find-links to easy_install when called as a function?"], 2], [(659575, 1), [['Something like this should work for you:'], ['-10000']], [[' myargs = [\'-v\', \'-m\', \'-a\', \'-f\', \'"//filesrver/eggs/" "http://webserver1/python_eggs/" "http://webserver2/python_eggs/"\', \'trunk-99\']\nsetuptools.command.easy_install.main( myargs )\n']], ["What's the correct way to add extra find-links to easy_install when called as a function?"], 2], [(660727, 0), [['-'], ['-']], [[' def decorator(f):\n  def decorated(*args,**kwargs):\n      cache = Cache(cachepath)\n      if cache.iscached(*args,**kwargs):\n          ...\n      else:\n          res = f(*args,**kwargs)\n          cache.store((*args,**kwargs), res)\n          return res\n  return decorated\n']], ['Python: decorator specific argument (unrelated to wrapped function)?'], 2], [(660727, 1), [['-'], ['-10000']], [[' def cache(filepath)\n    def decorator(f):\n      def decorated(*args,**kwargs):\n          cache = Cache(cachepath)\n          if cache.iscached(*args,**kwargs):\n              ...\n          else:\n              res = f(*args,**kwargs)\n              cache.store((*args,**kwargs), res)\n              return res\n      return decorated\n    return decorator\n']], ['Python: decorator specific argument (unrelated to wrapped function)?'], 2], [(661017, 0), [['Belowed code is not reliable (or comprehensive, there are a plefora of ways  errno  could be defined) but it should get you started (or reconsider your position on a tiny extension module (after all on Debian  python setup.py install  or  easy_install  should have no problem to build it)).  From   http://codespeak.net/pypy/dist/pypy/rpython/lltypesystem/ll2ctypes.py'], ['Where  standard_c_lib :']], [[" if not hasattr(ctypes, 'get_errno'):\n    # Python 2.5 or older\n    if sys.platform == 'win32':\n        standard_c_lib._errno.restype = ctypes.POINTER(ctypes.c_int)\n        def _where_is_errno():\n            return standard_c_lib._errno()\n\n    elif sys.platform in ('linux2', 'freebsd6'):\n        standard_c_lib.__errno_location.restype = ctypes.POINTER(ctypes.c_int)\n        def _where_is_errno():\n            return standard_c_lib.__errno_location()\n\n    elif sys.platform in ('darwin', 'freebsd7'):\n        standard_c_lib.__error.restype = ctypes.POINTER(ctypes.c_int)\n        def _where_is_errno():\n            return standard_c_lib.__error()\n    ctypes.get_errno = lambda: _where_is_errno().contents.value \n"]], ['Access to errno from Python?'], 2], [(661017, 1), [['Where  standard_c_lib :'], ['-10000']], [[" def get_libc_name():\n    if sys.platform == 'win32':\n        # Parses sys.version and deduces the version of the compiler\n        import distutils.msvccompiler\n        version = distutils.msvccompiler.get_build_version()\n        if version is None:\n            # This logic works with official builds of Python.\n            if sys.version_info < (2, 4):\n                clibname = 'msvcrt'\n            else:\n                clibname = 'msvcr71'\n        else:\n            if version <= 6:\n                clibname = 'msvcrt'\n            else:\n                clibname = 'msvcr%d' % (version * 10)\n\n        # If python was built with in debug mode\n        import imp\n        if imp.get_suffixes()[0][0] == '_d.pyd':\n            clibname += 'd'\n\n        return clibname+'.dll'\n    else:\n        return ctypes.util.find_library('c')\n\n# Make sure the name is determined during import, not at runtime\nlibc_name = get_libc_name() \nstandard_c_lib = ctypes.cdll.LoadLibrary(get_libc_name())\n"]], ['Access to errno from Python?'], 2], [(669152, 0), [['It somewhat depends how you created the menu item, since a MenuItem is a container that can contain anything. If you created it like:'], ['Then you can access the label widget in the menu item with:']], [[" menuitem = gtk.MenuItem('This is the label')\n"]], ['How can I change the display text of a MenuItem in Gtk2?'], 3], [(669152, 1), [['Then you can access the label widget in the menu item with:'], ['And can then treat that as a normal label:']], [[' label = menuitem.child\n']], ['How can I change the display text of a MenuItem in Gtk2?'], 3], [(669152, 2), [['And can then treat that as a normal label:'], ["However, unless you made the menu item yourself, you can't guarantee that the child widget will be a label like this, so you should take some care."]], [[" label.set_text('This is the new label')\n"]], ['How can I change the display text of a MenuItem in Gtk2?'], 3], [(671572, 0), [[''], ['']], [["Builder use Builder;\nmy $builder = Builder->new;\nmy $h = $builder->block( 'Builder::XML' );\n\n$h->table( { border => 0, cellpadding => 4 }, sub {\n   for ( my $i = 1; $i < 25; $i += 5 ) {\n       $h->tr( { align => 'right' }, sub {\n           for my $j (0..4) {\n               $h->td( { color => $j % 2 ? 'pink' : 'green' }, $i + $j );\n           }\n       });\n   } \n});\n\nsay $builder->render;\n"]], ['CL-WHO-like HTML templating for other languages?'], 7], [(671572, 1), [[''], ['']], [["HTML::AsSubs use HTML::AsSubs;\n\nmy $td = sub {\n    my $i = shift;\n    return map { \n        td( { color => $_ % 2 ? 'pink' : 'green' }, $i + $_ )\n    } 0..4;\n};\n\nsay table( { border => 0, cellpadding => 4 },\n    map { \n        &tr( { align => 'right' }, $td->( $_ ) ) \n    } loop( below => 25, by => 5 )\n)->as_HTML;\n"]], ['CL-WHO-like HTML templating for other languages?'], 7], [(671572, 2), [[''], ['']], [["HTML::Tiny use HTML::Tiny;\nmy $h = HTML::Tiny->new;\n\nmy $td = sub {\n    my $i = shift;\n    return map { \n        $h->td( { 'color' => $_ % 2 ? 'pink' : 'green' }, $i + $_ )\n    } 0..4;\n};\n\nsay $h->table(\n    { border => 0, cellpadding => 4 },\n    [\n        map { \n            $h->tr( { align => 'right' }, [ $td->( $_ ) ] )  \n        } loop( below => 25, by => 5 )    \n    ]\n);\n"]], ['CL-WHO-like HTML templating for other languages?'], 7], [(671572, 3), [[''], ['']], [["Markapl use Markapl;\n\ntemplate 'MyTable' => sub {\n    table ( border => 0, cellpadding => 4 ) {\n       for ( my $i = 1; $i < 25; $i += 5 ) {\n           row ( align => 'right' ) {\n               for my $j ( 0.. 4 ) {\n                   td ( color => $j % 2 ? 'pink' : 'green' ) { $i + $j }\n               }\n           }\n       } \n    }\n};\n\nprint main->render( 'MyTable' );\n"]], ['CL-WHO-like HTML templating for other languages?'], 7], [(671572, 4), [[''], ['']], [["Template::Declare package MyTemplates;\nuse Template::Declare::Tags;\nuse base 'Template::Declare';\n\ntemplate 'MyTable' => sub {\n    table {\n        attr { border => 0, cellpadding => 4 };\n        for ( my $i = 1; $i < 25; $i += 5 ) {\n            row  {\n                attr { align => 'right' };\n                    for my $j ( 0..4 ) {\n                        cell {\n                            attr { color => $j % 2 ? 'pink' : 'green' } \n                            outs $i + $j;\n                        }\n                    }\n            }\n        } \n    }\n};\n\npackage main;\nuse Template::Declare;\nTemplate::Declare->init( roots => ['MyTemplates'] );\nprint Template::Declare->show( 'MyTable' );\n"]], ['CL-WHO-like HTML templating for other languages?'], 7], [(671572, 5), [[''], ['\n And the following can be used to produce the "loop" in HTML::AsSubs / HTML::Tiny / XML::Generator examples....']], [["XML::Generator use XML::Generator;\nmy $x = XML::Generator->new( pretty => 2 );\n\nmy $td = sub {\n    my $i = shift;\n    return map { \n        $x->td( { 'color' => $_ % 2 ? 'pink' : 'green' }, $i + $_ )\n    } 0..4;\n};\n\nsay $x->table(\n    { border => 0, cellpadding => 4 },\n    map { \n        $x->tr( { align => 'right' }, $td->( $_ ) )  \n    } loop( below => 25, by => 5 )    \n);\n"]], ['CL-WHO-like HTML templating for other languages?'], 7], [(671572, 6), [['\n And the following can be used to produce the "loop" in HTML::AsSubs / HTML::Tiny / XML::Generator examples....'], ['-10000']], [[' sub loop {\n    my ( %p ) = @_;\n    my @list;\n\n    for ( my $i = $p{start} || 1; $i < $p{below}; $i += $p{by} ) {\n        push @list, $i;\n    }\n\n    return @list;\n}\n']], ['CL-WHO-like HTML templating for other languages?'], 7], [(672172, 0), [['The easiest way would be not to pass  bars  through the different functions, but to access it directly from  maptest :'], ['With your original  maptest  function you could also use a lambda function in  map :']], [[' foos = [1.0,2.0,3.0,4.0,5.0]\nbars = [1,2,3]\n\ndef maptest(foo):\n    print foo, bars\n\nmap(maptest, foos)\n']], ['Using python map and other functional tools'], 2], [(672172, 1), [['With your original  maptest  function you could also use a lambda function in  map :'], ['-10000']], [[' map((lambda foo: maptest(foo, bars)), foos)\n']], ['Using python map and other functional tools'], 2], [(673867, 0), [['You use the .items() method to do that. For example,'], ['Most efficient way to sort that is to use a key function. using cmp is less efficient because it has to be called for every pair of items, where using key it only needs to be called once for every item. Just specify a callable that will transform the item according to how it should be sorted:']], [[" >>> {'a': 1, 'b': 2}\n{'a': 1, 'b': 2}\n>>> {'a': 1, 'b': 2}.items()\n[('a', 1), ('b', 2)]\n"]], ['python: arbitrary order by'], 2], [(673867, 1), [['Most efficient way to sort that is to use a key function. using cmp is less efficient because it has to be called for every pair of items, where using key it only needs to be called once for every item. Just specify a callable that will transform the item according to how it should be sorted:'], ['The above defines a dict that specifies the custom order of the keys that you want, and the lambda returns that value for each key in the old dict.']], [[" sorted(somedict.items(), key=lambda x: {'carrot': 2, 'banana': 1, 'apple':3}[x[0]])\n"]], ['python: arbitrary order by'], 2], [(674509, 0), [['-10000'], ['for these of you that hate lambda :-)']], [[' sorted(dictionary.items(), key=lambda x: x[1])\n']], ['How do I iterate over a Python dictionary, ordered by values?'], 2], [(674509, 1), [['for these of you that hate lambda :-)'], ['However  operator  version requires CPython 2.5+']], [[' import operator\nsorted(dictionary.items(), key=operator.itemgetter(1))\n']], ['How do I iterate over a Python dictionary, ordered by values?'], 2], [(677656, 0), [['A list comprehension would work just fine:'], ['But there is a combination of built-in functions, since you ask :-)']], [[' [o.my_attr for o in my_list]\n']], ['How to extract from a list of objects a list of specific attribute?'], 2], [(677656, 1), [['But there is a combination of built-in functions, since you ask :-)'], ['-10000']], [[" from operator import attrgetter\nmap(attrgetter('my_attr'), my_list)\n"]], ['How to extract from a list of objects a list of specific attribute?'], 2], [(677962, 0), [['Program 1 - export from old database to simple flat-file.  CSV format or JSON format or something simple.'], ['Program 2 - read simple flat-file; build new database model objects.']], [[" for m in OldModel.objects.all():\n    aDict = { 'col1':m.col1, 'old_at_fk':m.fktoanothertable.id, 'old_id':id }\n    csvwriter.writerow( aDict )\n"]], ['Fill Django application with data using very large Python script'], 2], [(677962, 1), [['Program 2 - read simple flat-file; build new database model objects.'], ['-10000']], [[" # Pass 1 - raw load\n\nfor row in csv.reader:\n    new= NewModel.create( **row )\n\n# Pass 2 - resolve FK's\n\nfor nm in NewModel.objects.all():\n    ref1= OtherModel.objects.get( old_id=nm.old_at_fk )\n    nm.properfk = ref1\n    nm.save()\n"]], ['Fill Django application with data using very large Python script'], 2], [(678236, 0), [['Getting the name of the file without the extension :'], ['As for your import problem, you solve it this way :']], [[' import os\nprint(os.path.splitext("path_to_file")[0])\n']], ['How to get the filename without the extension from a path in Python?'], 2], [(678236, 1), [['As for your import problem, you solve it this way :'], ['-10000']], [[' from os.path import basename\n\n# now you can call it directly with basename\nprint(basename("/a/b/c.txt"))\n']], ['How to get the filename without the extension from a path in Python?'], 2], [(679670, 0), [["WSGI is really simple protocol, it's basically a function that takes two arguments, one with request info and the second with a callback function (which is used for setting headers, among other things). Perhaps something like the following (which is possible-working pseudo code)..."], ["To profile your application's performance, first rename your application's  main()  function to  real_main() . Then, add a new main function to your application, named  profile_main()  such as the one below:"]], [[' class IndexHandler(webapp.RequestHandler):\n    """Your site"""\n    def get(self):\n        self.response.out.write("hi")\n\nif __name__ == \'__main__\':\n    application = webapp.WSGIApplication([\n        (\'.*\', IndexHandler),\n    ], debug=True)\n\n    # Start fake-request/profiling bit\n    urls = [\n        "/",\n        "/blog/view/hello",\n        "/admin/post/edit/hello",\n        "/makeanerror404",\n        "/makeanerror500"\n    ]\n\n    def fake_wsgi_callback(response, headers):\n        """Prints heads to stdout"""\n        print("\\n".join(["%s: %s" % (n, v) for n, v in headers]))\n        print("\\n")\n\n    for request_url in urls:\n        html = application({\n        \'REQUEST_METHOD\': \'GET\',\n        \'PATH_INFO\': request_url},\n        fake_wsgi_callback\n        )\n        print html\n']], ["Best way to profile/optimize a website on google's appengine"], 2], [(679670, 1), [["To profile your application's performance, first rename your application's  main()  function to  real_main() . Then, add a new main function to your application, named  profile_main()  such as the one below:"], ['[...]']], [[' def profile_main():\n    # This is the main function for profiling \n    # We\'ve renamed our original main() above to real_main()\n    import cProfile, pstats\n    prof = cProfile.Profile()\n    prof = prof.runctx("real_main()", globals(), locals())\n    print "<pre>"\n    stats = pstats.Stats(prof)\n    stats.sort_stats("time")  # Or cumulative\n    stats.print_stats(80)  # 80 = how many to print\n    # The rest is optional.\n    # stats.print_callees()\n    # stats.print_callers()\n    print "</pre>"\n']], ["Best way to profile/optimize a website on google's appengine"], 2], [(682504, 0), [['Actually  None  is much better for "magic" values:'], ['Now if you want complete freedom of adding more parameters:']], [[' class Cheese():\n    def __init__(self, num_holes = None):\n        if num_holes is None:\n            ...\n']], ['What is a clean, pythonic way to have multiple constructors in Python?'], 3], [(682504, 1), [['Now if you want complete freedom of adding more parameters:'], ['To better explain the concept of  *args  and  **kwargs  (you can actually change these names):']], [[" class Cheese():\n    def __init__(self, *args, **kwargs):\n        #args -- tuple of anonymous arguments\n        #kwargs -- dictionary of named arguments\n        self.num_holes = kwargs.get('num_holes',random_holes())\n"]], ['What is a clean, pythonic way to have multiple constructors in Python?'], 3], [(682504, 2), [['To better explain the concept of  *args  and  **kwargs  (you can actually change these names):'], ['http://docs.python.org/reference/expressions.html#calls']], [[" def f(*args, **kwargs):\n   print 'args: ', args, ' kwargs: ', kwargs\n\n>>> f('a')\nargs:  ('a',)  kwargs:  {}\n>>> f(ar='a')\nargs:  ()  kwargs:  {'ar': 'a'}\n>>> f(1,2,param=3)\nargs:  (1, 2)  kwargs:  {'param': 3}\n"]], ['What is a clean, pythonic way to have multiple constructors in Python?'], 3], [(683494, 0), [['The code on the web page you linked to uses  doc.toprettyxml  to create a string from the XML DOM, so you can just write that string to a file:'], ['In Python 2.6 (or 2.7 I suppose, whenever it comes out), you can use the " with " statement:']], [[' f = open("output.xml", "w")\ntry:\n    f.write(doc.toprettyxml(indent="  "))\nfinally:\n    f.close()\n']], ['How to save an xml file to disk?'], 3], [(683494, 1), [['In Python 2.6 (or 2.7 I suppose, whenever it comes out), you can use the " with " statement:'], ['This also works in Python 2.5 if you put']], [[' with open("output.xml", "w") as f:\n    f.write(doc.toprettyxml(indent="  "))\n']], ['How to save an xml file to disk?'], 3], [(683494, 2), [['This also works in Python 2.5 if you put'], ['at the beginning of the file.']], [[' from __future__ import with_statement\n']], ['How to save an xml file to disk?'], 3], [(685758, 0), [['Look at what I discovered starting at line 284 in ctypes_configure/configure.py:'], ['And here, from line 425 in pypy/annotation/annrpython.py ( clicky )']], [['     for i in range(0, info[\'size\'] - csize + 1, info[\'align\']):\n        if layout[i:i+csize] == [None] * csize:\n            layout_addfield(layout, i, ctype, \'_alignment\')\n            break\n    else:\n        raise AssertionError("unenforceable alignment %d" % (\n            info[\'align\'],))\n']], ["Pythonic ways to use 'else' in a for loop"], 5], [(685758, 1), [['And here, from line 425 in pypy/annotation/annrpython.py ( clicky )'], ['In pypy/annotation/binaryop.py, starting at line 751:']], [[' if cell.is_constant():\n    return Constant(cell.const)\nelse:\n    for v in known_variables:\n        if self.bindings[v] is cell:\n            return v\n    else:\n        raise CannotSimplify\n']], ["Pythonic ways to use 'else' in a for loop"], 5], [(685758, 2), [['In pypy/annotation/binaryop.py, starting at line 751:'], ['A non-one-liner in pypy/annotation/classdef.py, starting at line 176:']], [[' def is_((pbc1, pbc2)):\n    thistype = pairtype(SomePBC, SomePBC)\n    s = super(thistype, pair(pbc1, pbc2)).is_()\n    if not s.is_constant():\n        if not pbc1.can_be_None or not pbc2.can_be_None:\n            for desc in pbc1.descriptions:\n                if desc in pbc2.descriptions:\n                    break\n            else:\n                s.const = False    # no common desc in the two sets\n    return s\n']], ["Pythonic ways to use 'else' in a for loop"], 5], [(685758, 3), [['A non-one-liner in pypy/annotation/classdef.py, starting at line 176:'], ['Later in the same file, starting at line 307, an example with an illuminating comment:']], [[' def add_source_for_attribute(self, attr, source):\n    """Adds information about a constant source for an attribute.\n    """\n    for cdef in self.getmro():\n        if attr in cdef.attrs:\n            # the Attribute() exists already for this class (or a parent)\n            attrdef = cdef.attrs[attr]\n            s_prev_value = attrdef.s_value\n            attrdef.add_constant_source(self, source)\n            # we should reflow from all the reader\'s position,\n            # but as an optimization we try to see if the attribute\n            # has really been generalized\n            if attrdef.s_value != s_prev_value:\n                attrdef.mutated(cdef) # reflow from all read positions\n            return\n    else:\n        # remember the source in self.attr_sources\n        sources = self.attr_sources.setdefault(attr, [])\n        sources.append(source)\n        # register the source in any Attribute found in subclasses,\n        # to restore invariant (III)\n        # NB. add_constant_source() may discover new subdefs but the\n        #     right thing will happen to them because self.attr_sources\n        #     was already updated\n        if not source.instance_level:\n            for subdef in self.getallsubdefs():\n                if attr in subdef.attrs:\n                    attrdef = subdef.attrs[attr]\n                    s_prev_value = attrdef.s_value\n                    attrdef.add_constant_source(self, source)\n                    if attrdef.s_value != s_prev_value:\n                        attrdef.mutated(subdef) # reflow from all read positions\n']], ["Pythonic ways to use 'else' in a for loop"], 5], [(685758, 4), [['Later in the same file, starting at line 307, an example with an illuminating comment:'], ['-10000']], [[' def generalize_attr(self, attr, s_value=None):\n    # if the attribute exists in a superclass, generalize there,\n    # as imposed by invariant (I)\n    for clsdef in self.getmro():\n        if attr in clsdef.attrs:\n            clsdef._generalize_attr(attr, s_value)\n            break\n    else:\n        self._generalize_attr(attr, s_value)\n']], ["Pythonic ways to use 'else' in a for loop"], 5], [(690622, 0), [['Use  pass  for no-op:'], ["And here's another example:"]], [[' if x == 0:\n  pass\nelse:\n  print "x not equal 0"\n']], ["What's a standard way to do a no-op in python?"], 3], [(690622, 1), [["And here's another example:"], ['Or:']], [[' def f():\n  pass\n']], ["What's a standard way to do a no-op in python?"], 3], [(690622, 2), [['Or:'], ['-10000']], [[' class c:\n  pass\n']], ["What's a standard way to do a no-op in python?"], 3], [(691267, 0), [['-10000'], ["It's basically the reverse of the  *  you might use to capture all non-keyword arguments in a function definition:"]], [[' printa(*cord())\n']], ['Passing functions which have multiple return values as arguments in Python'], 3], [(691267, 1), [["It's basically the reverse of the  *  you might use to capture all non-keyword arguments in a function definition:"], ['prints  (1, 2, 3, 4, 5)']], [[' def fn(*args):\n    # args is now a tuple of the non-keyworded arguments\n    print args\n\nfn(1, 2, 3, 4, 5)\n']], ['Passing functions which have multiple return values as arguments in Python'], 3], [(691267, 2), [['prints  (1, 2, 3, 4, 5)'], ['does the same.']], [[' fn(*[1, 2, 3, 4, 5])\n']], ['Passing functions which have multiple return values as arguments in Python'], 3], [(691946, 0), [['While this can be done safely to initialize a list:'], ['The same trick won’t work for a 2D list (list of lists):']], [[' lst = [0] * 3\n']], ['Short (and useful) python snippets'], 3], [(691946, 1), [['The same trick won’t work for a 2D list (list of lists):'], ['The operator * duplicates its operands, and duplicated lists constructed with [] point to the same list. The correct way to do this is:']], [[' >>> lst_2d = [[0] * 3] * 3\n>>> lst_2d\n[[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n>>> lst_2d[0][0] = 5\n>>> lst_2d\n[[5, 0, 0], [5, 0, 0], [5, 0, 0]]\n']], ['Short (and useful) python snippets'], 3], [(691946, 2), [['The operator * duplicates its operands, and duplicated lists constructed with [] point to the same list. The correct way to do this is:'], ['-10000']], [[' >>> lst_2d = [[0] * 3 for i in xrange(3)]\n>>> lst_2d\n[[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n>>> lst_2d[0][0] = 5\n>>> lst_2d\n[[5, 0, 0], [0, 0, 0], [0, 0, 0]]\n']], ['Short (and useful) python snippets'], 3], [(695505, 0), [['just for grins:'], ['output:']], [[' import re\nRE_kv = re.compile("\\[%(.*)%\\].*?\\n?\\s*{\\s*(.*)")\nmatches = re.findall(RE_kv, test, re.M)\nfor k, v in matches:\n    print k, v\n']], ['Parsing template schema with Python and Regular Expressions'], 2], [(695505, 1), [['output:'], ["Note I did just enough regex to get the matches to show up, it's not even bounded at the end for the close brace. Use at your own risk."]], [[' price $54.99\nmodel WRT54G\nbrand LINKSYS\n']], ['Parsing template schema with Python and Regular Expressions'], 2], [(697134, 0), [['You have to use the  hmac module  together with md5 or sha. Per default it uses md5:'], ['Your example would probably look something like:']], [[" In [1]: import hmac, hashlib\nIn [2]: hmac.new('key', 'msg').hexdigest()\nOut[2]: '18e3548c59ad40dd03907b7aeee71d67'\nIn [3]: hmac.new('key2', 'msg').hexdigest()\nOut[3]: 'a4bde113179bc2a7c6ac9ad7309ea073'\nIn [4]: hmac.new('key', 'msg', hashlib.sha256).hexdigest()\nOut[4]: '2d93cbc1be167bcb1637a4a23cbff01a7878f0c50ee833954ea5221bb1b8c628'\n"]], ["How to set the crypto key for Python's MD5 module?"], 2], [(697134, 1), [['Your example would probably look something like:'], ['-10000']], [[" hmac.new(CryptoKey, '^'.join([login, seq, time, amo]), hashlib.md5).hexdigest()\n"]], ["How to set the crypto key for Python's MD5 module?"], 2], [(697776, 0), [["If you want to check out the source,  here's a link to the latest tarball . The package is actually a set of three command line scripts and a module for interfacing with QL. If you want to install the whole thing, you can use:"], ["One thing to keep in mind about exfalso/quodlibet (and consequently sequitur) is that they actually implement audio metadata properly, which means that all tags support multiple values (unless the file type prohibits it, which there aren't many that do). So, doing something like:"]], [[' easy_install QLCLI\n']], ['abstracting the conversion between id3 tags, m4a tags, flac tags'], 4], [(697776, 1), [["One thing to keep in mind about exfalso/quodlibet (and consequently sequitur) is that they actually implement audio metadata properly, which means that all tags support multiple values (unless the file type prohibits it, which there aren't many that do). So, doing something like:"], ['Will not output a single string, but will output a list of strings like:']], [[" print qllib.AudioFile('foo.mp3')['artist']\n"]], ['abstracting the conversion between id3 tags, m4a tags, flac tags'], 4], [(697776, 2), [['Will not output a single string, but will output a list of strings like:'], ['The way you might use it to copy tags would be something like:']], [[" [u'The First Artist', u'The Second Artist']\n"]], ['abstracting the conversion between id3 tags, m4a tags, flac tags'], 4], [(697776, 3), [['The way you might use it to copy tags would be something like:'], ['-10000']], [[" import os.path\nimport qllib  # this is the module that comes with QLCLI\n\ndef update_tags(mp3_fn, flac_fn):\n    mp3 = qllib.AudioFile(mp3_fn)\n    flac = qllib.AudioFile(flac_fn)\n    # you can iterate over the tag names\n    # they will be the same for all file types\n    for tag_name in mp3:\n        flac[tag_name] = mp3[tag_name]\n    flac.write()\n\nmp3_filenames = ['foo.mp3', 'bar.mp3', 'baz.mp3']\n\nfor mp3_fn in mp3_filenames:\n    flac_fn = os.path.splitext(mp3_fn)[0] + '.flac'\n    if os.path.getmtime(mp3_fn) != os.path.getmtime(flac_fn):\n        update_tags(mp3_fn, flac_fn)\n"]], ['abstracting the conversion between id3 tags, m4a tags, flac tags'], 4], [(699510, 0), [['The usual way to wrap an object in Python is to override  __getattr__  in your class:'], ['So then you can do']], [[' class CustomVal(object):\n    def __init__(self, value):\n        self.value = value\n\n    def __getattr__(self, attr):\n        return getattr(self.value, attr)\n']], ['Is it possible to create a class that represents another type in Python, when directly referenced?'], 2], [(699510, 1), [['So then you can do'], ['You can also override  __setattr__  and  __delattr__  to enable setting and deleting attributes, respectively (see  the Python library documentation ).']], [[' >>> obj = CustomVal(wrapped_obj)\n>>> obj.SomeAttributeOfWrappedObj\n']], ['Is it possible to create a class that represents another type in Python, when directly referenced?'], 2], [(700016, 0), [['Format operator :'], ['Using  *  spec, the field length can be an argument:']], [[' >>> "%10d" % 5\n\'         5\'\n>>> \n']], ['Format a number as a string'], 2], [(700016, 1), [['Using  *  spec, the field length can be an argument:'], ['-10000']], [[' >>> "%*d" % (10,5)\n\'         5\'\n>>> \n']], ['Format a number as a string'], 2], [(701466, 0), [['Perhaps you could try something like this:'], ['You would call it like this:']], [[' def call_attrs(obj, attrs_list, *args):\n    for attr in attrs_list:\n        if hasattr(obj, attr):\n            bound_method = getattr(obj, attr)\n            return bound_method(*args)\n\n    raise AttributeError\n']], ['Nested try statements in python?'], 3], [(701466, 1), [['You would call it like this:'], ['This will try to call the methods in the order they are in in the list.  If you wanted to pass any arguments, you could just pass them along after the list like so:']], [[" call_attrs(a, ['method1', 'method2', 'method3'])\n"]], ['Nested try statements in python?'], 3], [(701466, 2), [['This will try to call the methods in the order they are in in the list.  If you wanted to pass any arguments, you could just pass them along after the list like so:'], ['-10000']], [[" call_attrs(a, ['method1', 'method2', 'method3'], arg1, arg2)\n"]], ['Nested try statements in python?'], 3], [(702337, 0), [["There is a python package called  unidecode  that I've adopted for the askbot Q&A forum, it works well for the latin-based alphabets and even looks reasonable for greek:"], ['It does something weird with asian languages:']], [[" >>> import unidecode\n>>> from unidecode import unidecode\n>>> unidecode(u'διακριτικός')\n'diakritikos'\n"]], ['How to make Django slugify work properly with Unicode strings?'], 3], [(702337, 1), [['It does something weird with asian languages:'], ['In askbot we compute slugs like so:']], [[" >>> unidecode(u'影師嗎')\n'Ying Shi Ma '\n>>> \n"]], ['How to make Django slugify work properly with Unicode strings?'], 3], [(702337, 2), [['In askbot we compute slugs like so:'], ['-10000']], [[' from unidecode import unidecode\nfrom django.template import defaultfilters\nslug = defaultfilters.slugify(unidecode(input_text))\n']], ['How to make Django slugify work properly with Unicode strings?'], 3], [(702760, 0), [["This isn't recursive, but I think it does what you want. "], ["And here's a recursive solution:"]], [[" doc = 'a b c d e f'\nwords = doc.split(None)\nmax = 3          \n\n\nfor index in xrange(len(words)):    \n    for n in xrange(max):\n        if index + n < len(words):           \n            print ' '.join(words[index:index+n+1])   \n"]], ['How do I generate multi-word terms recursively?'], 3], [(702760, 1), [["And here's a recursive solution:"], ["Here's the recursive function again, with some explaining variables and comments."]], [[' def find_terms(words, max_words_per_term):       \n    if len(words) == 0: return []\n    return [" ".join(words[:i+1]) for i in xrange(min(len(words), max_words_per_term))] + find_terms(words[1:], max_words_per_term)\n\n\ndoc = \'a b c d e f\'\nwords = doc.split(None) \nfor term in find_terms(words, 3):\n    print term\n']], ['How do I generate multi-word terms recursively?'], 3], [(702760, 2), [["Here's the recursive function again, with some explaining variables and comments."], ['-10000']], [[' def find_terms(words, max_words_per_term):   \n\n    # If there are no words, you\'ve reached the end. Stop.    \n    if len(words) == 0:\n        return []      \n\n    # What\'s the max term length you could generate from the remaining \n    # words? It\'s the lesser of max_words_per_term and how many words \n    # you have left.                                                         \n    max_term_len = min(len(words), max_words_per_term)       \n\n    # Find all the terms that start with the first word.\n    initial_terms = [" ".join(words[:i+1]) for i in xrange(max_term_len)]\n\n    # Here\'s the recursion. Find all of the terms in the list \n    # of all but the first word.\n    other_terms = find_terms(words[1:], max_words_per_term)\n\n    # Now put the two lists of terms together to get the answer.\n    return initial_terms + other_terms \n']], ['How do I generate multi-word terms recursively?'], 3], [(704526, 0), [['Least lines of code:'], ['Bisection (done in ~4 lookups):']], [[' # do this once, outside the loop\nalphabet=set(string.ascii_lowercase)\n# inside the loop, just 1 line:\nmissingletter=(alphabet-set(yourlist)).pop()\n']], ['python: finding a missing letter in the alphabet from a list - least lines of code'], 2], [(704526, 1), [['Bisection (done in ~4 lookups):'], ['This code requires fewer lookups, so is by far the better scaling version O(log n), but may still be slower when executed via a python interpreter because it goes via python  if s instead of  set  operations written in C.']], [[' frompos, topos = 0, len(str)\nfor i in range(1,100):  #never say forever with bisection...\n    trypos = (frompos+topos+1)/2\n    print "try:",frompos,trypos,topos\n    if alphabet[trypos] != str[trypos]:\n        topos = trypos\n    else:\n        frompos = trypos\n    if topos-frompos==1:\n        if alphabet[topos] != str[topos]:\n            print alphabet[frompos]\n        else:\n            print alphabet[topos]\n        break\n']], ['python: finding a missing letter in the alphabet from a list - least lines of code'], 2], [(704856, 0), [['In eg2.py:'], ['In eg3.py']], [[' def my_func():\n    # do useful stuff\n    pass\n']], ['Importing in Python between three or more files not working'], 2], [(704856, 1), [['In eg3.py'], ['-10000']], [[' import eg2\nwhile True:\n    eg2.my_func()\n']], ['Importing in Python between three or more files not working'], 2], [(706595, 0), [['-10000'], ['also works for']], [[' import a_ridiculously_long_module_name as short_name\n']], ['Can you define aliases for imported modules in Python?'], 2], [(706595, 1), [['also works for'], ['-10000']], [[' import module.submodule.subsubmodule as short_name\n']], ['Can you define aliases for imported modules in Python?'], 2], [(706755, 0), [['I think it might be'], ['Turns out, in the version of MySQLdb that I am using (1.2.2)\nYou would do the following:']], [[' newID = db.insert_id()\n']], ['How do you safely and efficiently get the row id after an insert with mysql using MySQLdb in python?'], 2], [(706755, 1), [['Turns out, in the version of MySQLdb that I am using (1.2.2)\nYou would do the following:'], ['I am leaving this as the correct answer, since it got me pointed in the right direction.']], [[' conn = MySQLdb(host...)\n\nc = conn.cursor()\nc.execute("INSERT INTO...")\nnewID = c.lastrowid\n']], ['How do you safely and efficiently get the row id after an insert with mysql using MySQLdb in python?'], 2], [(706813, 0), [['You could do it this way:'], ['You can of course pass some variables in the method() call too:']], [[" def method1(name):\n    def wrapper():\n        return 'Hello ' + name\n    return wrapper\n\ndef method2(method, question):\n    output = method()\n    return output + ', ' + question\n\nmethod2(method1(name = 'Sam'), 'How are you?')\n"]], ['What is the best way to pass a method (with parameters) to another method in python'], 2], [(706813, 1), [['You can of course pass some variables in the method() call too:'], ['-10000']], [[" def method1(name):\n    def wrapper(greeting):\n        return greeting + name\n    return wrapper\n\ndef method2(method, question):\n    output = method(greeting = 'Hello ')\n    return output + ', ' + question\n\nmethod2(method1(name = 'Sam'), 'How are you?')\n"]], ['What is the best way to pass a method (with parameters) to another method in python'], 2], [(709937, 0), [['The'], ["On each trip your string makes through the cookie's  output()  method, backslashes are multiplied (starting with the 1st pair of quotes)."]], [[' print cookie\n']], ['Backslashes being added into my cookie in Python'], 2], [(709937, 1), [["On each trip your string makes through the cookie's  output()  method, backslashes are multiplied (starting with the 1st pair of quotes)."], ['-10000']], [[' >>> c1=Cookie.SimpleCookie()\n>>> c1[\'name\']=\'A:0\'\n>>> print c1\nSet-Cookie: name="A:0"\n>>> c1[\'name\']=r\'"A:0"\'\n>>> print c1\nSet-Cookie: name="\\"A:0\\""\n>>> c1[\'name\']=r\'"\\"A:0\\""\'\n>>> print c1\nSet-Cookie: name="\\"\\\\\\"A:0\\\\\\"\\""\n>>> \n']], ['Backslashes being added into my cookie in Python'], 2], [(712460, 0), [['The parseIntSet has been modified here to handle "<3"-type entries and to only spit out the invalid strings if there are any.'], ["And here's the output from the sample run:"]], [[' #! /usr/local/bin/python\nimport sys\nimport os\n\n# return a set of selected values when a string in the form:\n# 1-4,6\n# would return:\n# 1,2,3,4,6\n# as expected...\n\ndef parseIntSet(nputstr=""):\n    selection = set()\n    invalid = set()\n    # tokens are comma seperated values\n    tokens = [x.strip() for x in nputstr.split(\',\')]\n    for i in tokens:\n        if len(i) > 0:\n            if i[:1] == "<":\n                i = "1-%s"%(i[1:])\n        try:\n            # typically tokens are plain old integers\n            selection.add(int(i))\n        except:\n            # if not, then it might be a range\n            try:\n                token = [int(k.strip()) for k in i.split(\'-\')]\n                if len(token) > 1:\n                    token.sort()\n                    # we have items seperated by a dash\n                    # try to build a valid range\n                    first = token[0]\n                    last = token[len(token)-1]\n                    for x in range(first, last+1):\n                        selection.add(x)\n            except:\n                # not an int and not a range...\n                invalid.add(i)\n    # Report invalid tokens before returning valid selection\n    if len(invalid) > 0:\n        print "Invalid set: " + str(invalid)\n    return selection\n# end parseIntSet\n\nprint \'Generate a list of selected items!\'\nnputstr = raw_input(\'Enter a list of items: \')\n\nselection = parseIntSet(nputstr)\nprint \'Your selection is: \'\nprint str(selection)\n']], ['Interpreting Number Ranges in Python'], 2], [(712460, 1), [["And here's the output from the sample run:"], ['-10000']], [[' $ python qq.py\nGenerate a list of selected items!\nEnter a list of items: <3, 45, 46, 48-51, 77\nYour selection is:\nset([1, 2, 3, 45, 46, 77, 48, 49, 50, 51])\n']], ['Interpreting Number Ranges in Python'], 2], [(713847, 0), [['Some frameworks that get it right are  web.py ,  Flask  and  Bottle . When combined with the  mimerender  library (full disclosure: I wrote it), they allow you to write nice RESTful webservices:'], ["The service's logic is implemented only once, and the correct representation selection (Accept header) + dispatch to the proper render function (or template) is done in a tidy, transparent way."]], [[' import web\nimport json\nfrom mimerender import mimerender\n\nrender_xml = lambda message: \'<message>%s</message>\'%message\nrender_json = lambda **args: json.dumps(args)\nrender_html = lambda message: \'<html><body>%s</body></html>\'%message\nrender_txt = lambda message: message\n\nurls = (\n    \'/(.*)\', \'greet\'\n)\napp = web.application(urls, globals())\n\nclass greet:\n    @mimerender(\n        default = \'html\',\n        html = render_html,\n        xml  = render_xml,\n        json = render_json,\n        txt  = render_txt\n    )\n    def GET(self, name):\n        if not name: \n            name = \'world\'\n        return {\'message\': \'Hello, \' + name + \'!\'}\n\nif __name__ == "__main__":\n    app.run()\n']], ['Recommendations of Python REST (web services) framework?'], 2], [(713847, 1), [["The service's logic is implemented only once, and the correct representation selection (Accept header) + dispatch to the proper render function (or template) is done in a tidy, transparent way."], ["Update (April 2012) : added information about Django's class-based views, CherryPy's MethodDispatcher and Flask and Bottle frameworks. Neither existed back when the question was asked."]], [[' $ curl localhost:8080/x\n<html><body>Hello, x!</body></html>\n\n$ curl -H "Accept: application/html" localhost:8080/x\n<html><body>Hello, x!</body></html>\n\n$ curl -H "Accept: application/xml" localhost:8080/x\n<message>Hello, x!</message>\n\n$ curl -H "Accept: application/json" localhost:8080/x\n{\'message\':\'Hello, x!\'}\n\n$ curl -H "Accept: text/plain" localhost:8080/x\nHello, x!\n']], ['Recommendations of Python REST (web services) framework?'], 2], [(714475, 0), [['WFM'], ['Update:  as Brian noticed, the limit is on the calling side:']], [[" >>> fstr = 'def f(%s): pass' % (', '.join(['arg%d' % i for i in range(5000)]))\n>>> exec(fstr)\n>>> f\n<function f at 0x829bae4>\n"]], ['What is a maximum number of arguments in a Python function?'], 3], [(714475, 1), [['Update:  as Brian noticed, the limit is on the calling side:'], ['on the other hand this works:']], [[' >>> exec \'f(\' + \',\'.join(str(i) for i in range(5000)) + \')\'\n\nTraceback (most recent call last):\n  File "<pyshell#63>", line 1, in <module>\n    exec \'f(\' + \',\'.join(str(i) for i in range(5000)) + \')\'\n  File "<string>", line 1\nSyntaxError: more than 255 arguments (<string>, line 1)\n']], ['What is a maximum number of arguments in a Python function?'], 3], [(714475, 2), [['on the other hand this works:'], ['Conclusion:  no, it does not apply to unrolled arguments.']], [[' >>> f(*range(5000))\n>>> \n']], ['What is a maximum number of arguments in a Python function?'], 3], [(714879, 0), [["Here's a quick hack that worked for me on Linux.  It might work for you, depending on your requirements.  It uses  tee  as a filter that, if you pass  print_all  to your script, will duplicate an extra copy to  /dev/tty  (hey, I said it was a hack):"], ['With the following as contents for  program :']], [[' #!/usr/bin/env python\n\nimport subprocess\nimport sys\n\nphrase = "bar"\nif len(sys.argv) > 1 and sys.argv[1] == \'print_all\':\n    tee_args = [\'tee\', \'/dev/tty\']\nelse:\n    tee_args = [\'tee\']\n\np1 = subprocess.Popen(["./program"], stderr=subprocess.STDOUT, stdout=subprocess.PIPE, shell=False)\np2 = subprocess.Popen(tee_args, stdin=p1.stdout, stdout=subprocess.PIPE, shell=False)\np3 = subprocess.Popen(["grep", phrase], stdin=p2.stdout, stdout=subprocess.PIPE, shell=False)\np1.wait()\np2.wait()\np3.wait()\np = str(p3.stdout.readlines())\nprint \'p is \', p\n']], ['How do I print outputs from calls to subprocess.Popen(...) in a loop?'], 2], [(714879, 1), [['With the following as contents for  program :'], ['Example output:']], [[' #!/bin/sh\n\necho foo\necho bar\necho baz\n']], ['How do I print outputs from calls to subprocess.Popen(...) in a loop?'], 2], [(714881, 0), [['You will need to import the other file as a module like this:'], ["If you don't want to prefix your  Calculate  function with the module name then do this:"]], [[' import Math\n']], ['How to include external Python code to use in other files?'], 3], [(714881, 1), [["If you don't want to prefix your  Calculate  function with the module name then do this:"], ['If you want to import all members of a module then do this:']], [[' from Math import Calculate\n']], ['How to include external Python code to use in other files?'], 3], [(714881, 2), [['If you want to import all members of a module then do this:'], ['Edit:   Here is a good chapter  from  Dive Into Python  that goes a bit more in depth on this topic.']], [[' from Math import *\n']], ['How to include external Python code to use in other files?'], 3], [(715417, 0), [['Really, you just compare the string to whatever you expect to accept as representing true, so you can do this:'], ['Or to checks against a whole bunch of values:']], [[" s == 'True'\n"]], ['Converting from a string to boolean in Python?'], 3], [(715417, 1), [['Or to checks against a whole bunch of values:'], ['Be cautious when using the following:']], [[" s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']\n"]], ['Converting from a string to boolean in Python?'], 3], [(715417, 2), [['Be cautious when using the following:'], ['Empty strings evaluate to  False , but everything else evaluates to  True . So this should not be used for any kind of parsing purposes.']], [[' >>> bool("foo")\nTrue\n>>> bool("")\nFalse\n']], ['Converting from a string to boolean in Python?'], 3], [(715550, 0), [['You might consider saying'], ["and then when you need to get the value out, you can just parse the keys themselves as JSON objects, which all modern browsers can do with the built-in  JSON.parse  method (I'm using  jQuery.each  to iterate here but you could use anything):"]], [[' {"[1,2]": [(2,3),(1,7)]}\n']], ['Best way to encode tuples with json'], 5], [(715550, 1), [["and then when you need to get the value out, you can just parse the keys themselves as JSON objects, which all modern browsers can do with the built-in  JSON.parse  method (I'm using  jQuery.each  to iterate here but you could use anything):"], ['On the other hand, you might want to just structure your object differently, e.g.']], [[' var myjson = JSON.parse(\'{"[1,2]": [[2,3],[1,7]]}\');\n$.each(myjson, function(keystr,val){\n    var key = JSON.parse(keystr);\n    // do something with key and val\n});\n']], ['Best way to encode tuples with json'], 5], [(715550, 2), [['On the other hand, you might want to just structure your object differently, e.g.'], ['so that instead of saying']], [[' {1: {2: [(2,3),(1,7)]}}\n']], ['Best way to encode tuples with json'], 5], [(715550, 3), [['so that instead of saying'], ['which is invalid Javascript syntax, you could say']], [[" myjson[1,2] // doesn't work\n"]], ['Best way to encode tuples with json'], 5], [(715550, 4), [['which is invalid Javascript syntax, you could say'], ['-10000']], [[' myjson[1][2] // returns [[2,3],[1,7]]\n']], ['Best way to encode tuples with json'], 5], [(715889, 0), [["Let's say the item to be commented has the primary key 5. You would build a link for the user to click with a URL that looks like this:"], ['Your view would pick up the parameter, and pass it on to the form in the  initial  parameter:']], [[' <a href="/comment/5/">Comment on me</a>\n']], ['Populating form field based on query/slug factor'], 3], [(715889, 1), [['Your view would pick up the parameter, and pass it on to the form in the  initial  parameter:'], ['By this I mean that, if the choices were to look like:']], [[" def show_comment_form(request, item_id):\n    form = MyCommentForm(initial={'item_drop_down':item_id})\n"]], ['Populating form field based on query/slug factor'], 3], [(715889, 2), [['By this I mean that, if the choices were to look like:'], ['Then the  item_id  should be 1 or 2 as that\'s what will be in the resulting  <select>  options (ie:  <option value="1">Item 1</option> ). Automatically created ModelForm classes will take care of this for you, otherwise just be vigilant.']], [[" choices = ( (1, 'Item 1'),\n            (2, 'Item 2') )\n"]], ['Populating form field based on query/slug factor'], 3], [(716278, 0), [["Usually is preferred that what follows after the end of sentence  :  is in a separate line (also don't add a space before it)"], ['instead of']], [[' if options.verbose:\n  print ""\n']], ["My first python program: can you tell me what I'm doing wrong?"], 6], [(716278, 1), [['instead of'], ["You don't need to check the len of a list if you are going to iterate over it"]], [[' if options.verbose : print ""\n']], ["My first python program: can you tell me what I'm doing wrong?"], 6], [(716278, 2), [["You don't need to check the len of a list if you are going to iterate over it"], ["is redundant, a more 'readable' is (python is smart enough to not iterate over an empty list):"]], [[' if len(threadlist) > 0 : \n  for server in threadlist :\n    ...\n']], ["My first python program: can you tell me what I'm doing wrong?"], 6], [(716278, 3), [["is redundant, a more 'readable' is (python is smart enough to not iterate over an empty list):"], ["Also a more 'pythonistic' is to use list's comprehensions (but certainly is a debatable opinion)"]], [[' for server in threadlist:\n  ...\n']], ["My first python program: can you tell me what I'm doing wrong?"], 6], [(716278, 4), [["Also a more 'pythonistic' is to use list's comprehensions (but certainly is a debatable opinion)"], ['can be shortened to']], [[' server = []\nfor i in grouplist : servers+=getServers(i)\n']], ["My first python program: can you tell me what I'm doing wrong?"], 6], [(716278, 5), [['can be shortened to'], ['-10000']], [[' server = [getServers(i) for i in grouplist]\n']], ["My first python program: can you tell me what I'm doing wrong?"], 6], [(716795, 0), [['-10000'], ['results in ']], [[' import sys\ndef get_caller(ext=False):\n    """ Get the caller of the caller of this function. If the optional ext parameter is given, returns the line\'s text as well. """\n    f=sys._getframe(2)\n    s=(f.f_code.co_filename, f.f_lineno)\n    del f\n    if ext:\n        import linecache\n        s=(s[0], s[1], linecache.getline(s[0], s[1]))\n\n    return s\n\ndef post_event(e):\n    caller=get_caller(True)\n    print "Event %r posted from %r"%(e, caller)\n\n## Testing the functions.\n\ndef q():\n    post_event("baz")\n\npost_event("foo")\nprint "Hello!"\nq()\n']], ['Locating (file/line) the invocation of a constructor in python'], 2], [(716795, 1), [['results in '], ['-10000']], [[' Event \'foo\' posted from (\'getcaller.py\', 20, \'post_event("foo")\\n\')\nHello!\nEvent \'baz\' posted from (\'getcaller.py\', 17, \'\\tpost_event("baz")\\n\')\n']], ['Locating (file/line) the invocation of a constructor in python'], 2], [(718769, 0), [["This is kind of a weird problem, and my initial reaction is that you might be better off doing something else entirely to accomplish whatever it is you're trying to do.  But it's still an interesting question, so here's my crack at it: I make the original code source an unused constant of the code object."], ['-10000']], [[' import types\n\ndef comp(source, *args, **kwargs):\n    """Compile the source string; takes the same arguments as builtin compile().\n    Modifies the resulting code object so that the original source can be\n    recovered with decomp()."""\n    c = compile(source, *args, **kwargs)\n    return types.CodeType(c.co_argcount, c.co_nlocals, c.co_stacksize, \n        c.co_flags, c.co_code, c.co_consts + (source,), c.co_names, \n        c.co_varnames, c.co_filename, c.co_name, c.co_firstlineno, \n        c.co_lnotab, c.co_freevars, c.co_cellvars)\n\ndef decomp(code_object):\n    return code_object.co_consts[-1]\n']], ['Reversible version of compile() in Python'], 2], [(718769, 1), [['-10000'], ['-10000']], [[" >>> a = comp('2 * (3 + x)', '', 'eval')\n>>> eval(a, dict(x=3))\n12\n>>> decomp(a)\n'2 * (3 + x)'\n"]], ['Reversible version of compile() in Python'], 2], [(719194, 0), [["We're going to assume the voting up and down is for questions/answers like on this site, but that can obviously be adjusted to your real life use case."], ['-10000']], [['The template <div id="answer_595" class="answer">\n  <img src="vote_up.png" class="vote up">\n  <div class="score">0</div>\n  <img src="vote_down.png" class="vote down">\n  Blah blah blah this is my answer.\n</div>\n\n<div id="answer_596" class="answer">\n  <img src="vote_up.png" class="vote up">\n  <div class="score">0</div>\n  <img src="vote_down.png" class="vote down">\n  Blah blah blah this is my other answer.\n</div>\n']], ['How can you make a vote-up-down button like in Stackoverflow?'], 3], [(719194, 1), [['-10000'], ['-10000']], [["Javascript $(function() {\n    $('div.answer img.vote').click(function() {\n        var id = $(this).parents('div.answer').attr('id').split('_')[1];\n        var vote_type = $(this).hasClass('up') ? 'up' : 'down';\n        if($(this).hasClass('selected')) {\n            $.post('/vote/', {id: id, type: vote_type}, function(json) {\n                if(json.success == 'success') {\n                    $('#answer_' + id)\n                     .find('img.' + vote_type);\n                     .attr('src', 'vote_' + vote_type + '_selected.png')\n                     .addClass('selected');\n                    $('div.score', '#answer_' + id).html(json.score);\n                }\n            });\n        } else {\n            $.post('/remove_vote/', {id: id, type: vote_type}, function(json) {\n                if(json.success == 'success') {\n                    $('#answer_' + id)\n                     .find('img.' + vote_type);\n                     .attr('src', 'vote_' + vote_type + '.png')\n                     .removeClass('selected');\n                    $('div.score', '#answer_' + id).html(json.score);\n                }\n            });                \n        }\n    });\n});\n"]], ['How can you make a vote-up-down button like in Stackoverflow?'], 3], [(719194, 2), [['-10000'], ["Yikes. When I started answering this question I didn't mean to write this much but I got carried away a little bit. You're still missing an initial request to get all the votes when the page is first loaded and such, but I'll leave that as an exercise to the reader. Anyhow, if you  are  in fact using Django and are interested in a more tested/real implemention of the Stackoverflow voting, I suggest you check out the  source code  for cnprog.com, a Chinese clone of Stackoverflow written in Python/Django. They released their code and it is pretty decent."]], [['Django views def vote(request):\n    if request.method == \'POST\':\n        try:\n            answer = Answer.objects.get(pk=request.POST[\'id\'])\n        except Answer.DoesNotExist:\n            return HttpResponse("{\'success\': \'false\'}")\n\n        try:\n            vote = Vote.objects.get(answer=answer, user=request.user)\n        except Vote.DoesNotExist:\n            pass\n        else:\n            return HttpResponse("{\'success\': \'false\'}")\n\n        if request.POST[\'type\'] == \'up\':\n            answer.score = answer.score + 1\n        else:\n            answer.score = answer.score - 1\n\n        answer.save()\n\n        Vote.objects.create(answer=answer,\n                            user=request.user,\n                            type=request.POST[\'type\'])\n\n        return HttpResponse("{\'success\':\'true\', \'score\':" + answer.score + "}")\n    else:\n        raise Http404(\'What are you doing here?\')\n\ndef remove_vote(request):\n    if request.method == \'POST\':\n        try:\n            answer = Answer.objects.get(pk=request.POST[\'id\'])\n        except Answer.DoesNotExist:\n            return HttpResponse("{\'success\': \'false\'}")\n\n        try:\n            vote = Vote.objects.get(answer=answer, user=request.user)\n        except Vote.DoesNotExist:\n            return HttpResponse("{\'success\': \'false\'}")\n        else:\n            vote.delete()\n\n        if request.POST[\'type\'] == \'up\':\n            answer.score = answer.score - 1\n        else:\n            answer.score = answer.score + 1\n\n        answer.save()\n\n        return HttpResponse("{\'success\':\'true\', \'score\':" + answer.score + "}")\n    else:\n        raise Http404(\'What are you doing here?\')\n']], ['How can you make a vote-up-down button like in Stackoverflow?'], 3], [(719771, 0), [['If you are using Apache just put multiple ServerAlias directives inside your virtual host like this:'], ['For nginx your config file would look something like:']], [[' <VirtualHost *:80>\n    ServerName www.mydomain.com\n    ServerAlias mydomain.com\n    ServerAlias forum.mydomain.com\n    ... other directives as needed ...\n</VirtualHost>\n']], ['How can domain aliases be set up using Django?'], 2], [(719771, 1), [['For nginx your config file would look something like:'], ['-10000']], [[' server {\n    listen 80;\n    server_name   www.mydomain.com   mydomain.com   forum.mydomain.com;\n    ... other directives as needed ...\n}\n']], ['How can domain aliases be set up using Django?'], 2], [(720113, 0), [["Here's a Python port of  Easiest way to convert a URL to a hyperlink in a C# string? :"], ['Output:']], [[' import re\n\nmyString = "This is my tweet check it out http://tinyurl.com/blah"\n\nr = re.compile(r"(http://[^ ]+)")\nprint r.sub(r\'<a href="\\1">\\1</a>\', myString)\n']], ['Find Hyperlinks in Text using Python (twitter related)'], 2], [(720113, 1), [['Output:'], ['-10000']], [[' This is my tweet check it out <a href="http://tinyurl.com/blah">http://tinyurl.com/blah</a>\n']], ['Find Hyperlinks in Text using Python (twitter related)'], 2], [(720927, 0), [["If you're working with URL parameters, it's probably safer to use urllib.urlencode:"], ['Regarding your 2nd question: If you absolutely also want to have the quotes in there, you still have to either escape them when appending the contained string, or (probably the safer way of doing it) would be using repr(...)']], [[" import urllib\n\nBASE_URL = 'http://foobar.com/?%s'\nprint BASE_URL % urllib.urlencode({\n   'foo': 'bar',   \n})\n"]], ['String inside a string'], 2], [(720927, 1), [['Regarding your 2nd question: If you absolutely also want to have the quotes in there, you still have to either escape them when appending the contained string, or (probably the safer way of doing it) would be using repr(...)'], ['-10000']], [[" lst = ['foo', 'bar', 'foo bar']\nlst2 = []\n\nfor l in lst:\n    if ' ' in l:\n        lst2.append(repr(l))\n"]], ['String inside a string'], 2], [(721035, 0), [['Usage:'], ['Here is the code:']], [[' {{ "hey there  world"|spacify }}\n']], ['Django templates stripping spaces?'], 2], [(721035, 1), [['Here is the code:'], ['For notes on how template filters work and how to install them,  check out the docs .']], [[" from django.template import Library\nfrom django.template.defaultfilters import stringfilter\nfrom django.utils.html import conditional_escape\nfrom django.utils.safestring import mark_safe\nimport re\n\nregister = Library()\n\n@stringfilter\ndef spacify(value, autoescape=None):\n    if autoescape:\n    esc = conditional_escape\n    else:\n    esc = lambda x: x\n    return mark_safe(re.sub('\\s', '&'+'nbsp;', esc(value)))\nspacify.needs_autoescape = True\nregister.filter(spacify)\n"]], ['Django templates stripping spaces?'], 2], [(725782, 0), [['For your case the only difference is performance: append is twice as fast.'], ['Comparing bytecodes we can assume that  append  version wastes cycles in  LOAD_ATTR  +  CALL_FUNCTION , and += version -- in  BUILD_LIST . Apparently  BUILD_LIST  outweighs  LOAD_ATTR  +  CALL_FUNCTION . ']], [[' Python 3.0 (r30:67507, Dec  3 2008, 20:14:27) [MSC v.1500 32 bit (Intel)] on win32\nType "help", "copyright", "credits" or "license" for more information.\n>>> import timeit\n>>> timeit.Timer(\'s.append("something")\', \'s = []\').timeit()\n0.20177424499999999\n>>> timeit.Timer(\'s += ["something"]\', \'s = []\').timeit()\n0.41192320500000079\n\nPython 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on win32\nType "help", "copyright", "credits" or "license" for more information.\n>>> import timeit\n>>> timeit.Timer(\'s.append("something")\', \'s = []\').timeit()\n0.23079359499999999\n>>> timeit.Timer(\'s += ["something"]\', \'s = []\').timeit()\n0.44208112500000141\n']], ['In Python, what is the difference between ".append()" and "+= []"? '], 3], [(725782, 1), [['Comparing bytecodes we can assume that  append  version wastes cycles in  LOAD_ATTR  +  CALL_FUNCTION , and += version -- in  BUILD_LIST . Apparently  BUILD_LIST  outweighs  LOAD_ATTR  +  CALL_FUNCTION . '], ['We can improve performance even more by removing  LOAD_ATTR  overhead:']], [[' >>> import dis\n>>> dis.dis(compile("s = []; s.append(\'spam\')", \'\', \'exec\'))\n  1           0 BUILD_LIST               0\n              3 STORE_NAME               0 (s)\n              6 LOAD_NAME                0 (s)\n              9 LOAD_ATTR                1 (append)\n             12 LOAD_CONST               0 (\'spam\')\n             15 CALL_FUNCTION            1\n             18 POP_TOP\n             19 LOAD_CONST               1 (None)\n             22 RETURN_VALUE\n>>> dis.dis(compile("s = []; s += [\'spam\']", \'\', \'exec\'))\n  1           0 BUILD_LIST               0\n              3 STORE_NAME               0 (s)\n              6 LOAD_NAME                0 (s)\n              9 LOAD_CONST               0 (\'spam\')\n             12 BUILD_LIST               1\n             15 INPLACE_ADD\n             16 STORE_NAME               0 (s)\n             19 LOAD_CONST               1 (None)\n             22 RETURN_VALUE\n']], ['In Python, what is the difference between ".append()" and "+= []"? '], 3], [(725782, 2), [['We can improve performance even more by removing  LOAD_ATTR  overhead:'], ['-10000']], [[' >>> timeit.Timer(\'a("something")\', \'s = []; a = s.append\').timeit()\n0.15924410999923566\n']], ['In Python, what is the difference between ".append()" and "+= []"? '], 3], [(728356, 0), [["First of all, your problem doesn't have anything to do with Tkinter; it's best if you reduce it down to a simple piece of code demonstrating your problem, so you can experiment with it more easily. Here's a simplified version of what you're doing that I experimented with. I'm substituting a dict in place of the menu, to make it easy to write a small test case."], ['Now, when we execute this, as you said, we get:']], [[' items = ["stack", "over", "flow"]\nmap = { }\n\nfor item in items:\n    def new_command():\n        print(item)\n\n    map[item] = new_command\n\nmap["stack"]()\nmap["over"]()\nmap["flow"]()\n']], ['Dynamically creating a menu in Tkinter. (lambda expressions?)'], 4], [(728356, 1), [['Now, when we execute this, as you said, we get:'], ['What you need to do is introduce a new level of scope, with a new binding, for each of the  item s. The easiest way to do that is to wrap it in a new function definition:']], [[' flow\nflow\nflow\n']], ['Dynamically creating a menu in Tkinter. (lambda expressions?)'], 4], [(728356, 2), [['What you need to do is introduce a new level of scope, with a new binding, for each of the  item s. The easiest way to do that is to wrap it in a new function definition:'], ['Now, if you substitute that into the preceding program, you get the desired result:']], [[' for item in items:\n    def item_command(name):\n        def new_command():\n            print(name)\n        return new_command\n\n    map[item] = item_command(item)\n']], ['Dynamically creating a menu in Tkinter. (lambda expressions?)'], 4], [(728356, 3), [['Now, if you substitute that into the preceding program, you get the desired result:'], ['-10000']], [[' stack\nover\nflow\n']], ['Dynamically creating a menu in Tkinter. (lambda expressions?)'], 4], [(730207, 0), [["Instead, I'd recommend having a string that holds the field name on the other table:"], ['This way, you can obtain the field with:']], [[' class ValidationRule(models.Model):\n    other = models.ForeignKey(OtherModel)\n    other_field = models.CharField(max_length=256)\n']], ['Django Model set foreign key to a field of another Model'], 2], [(730207, 1), [['This way, you can obtain the field with:'], ["Note that if you're using Many-to-Many fields (rather than a One-to-Many), there's built-in support for creating custom intermediary tables to hold meta data with the  through  option."]], [[' v = ValidationRule.objects.get(id=1)\nfield = getattr(v, v.other_field)\n']], ['Django Model set foreign key to a field of another Model'], 2], [(731759, 0), [['Here is the way I would do it (on windows):'], ['Test it by sending some data with:']], [[' import wx, wx.lib.newevent, threading\nimport win32event, win32pipe, win32file, pywintypes, winerror\n\n\nNewMessage, EVT_NEW_MESSAGE = wx.lib.newevent.NewEvent()\nclass MessageNotifier(threading.Thread):\n    pipe_name = r"\\\\.\\pipe\\named_pipe_demo"\n\n    def __init__(self, frame):\n        threading.Thread.__init__(self)\n        self.frame = frame\n\n    def run(self):\n        open_mode = win32pipe.PIPE_ACCESS_DUPLEX | win32file.FILE_FLAG_OVERLAPPED\n        pipe_mode = win32pipe.PIPE_TYPE_MESSAGE\n\n        sa = pywintypes.SECURITY_ATTRIBUTES()\n        sa.SetSecurityDescriptorDacl(1, None, 0)\n\n        pipe_handle = win32pipe.CreateNamedPipe(\n            self.pipe_name, open_mode, pipe_mode,\n            win32pipe.PIPE_UNLIMITED_INSTANCES,\n            0, 0, 6000, sa\n        )\n\n        overlapped = pywintypes.OVERLAPPED()\n        overlapped.hEvent = win32event.CreateEvent(None, 0, 0, None)\n\n        while 1:\n            try:\n                hr = win32pipe.ConnectNamedPipe(pipe_handle, overlapped)\n            except:\n                # Error connecting pipe\n                pipe_handle.Close()\n                break\n\n            if hr == winerror.ERROR_PIPE_CONNECTED:\n                # Client is fast, and already connected - signal event\n                win32event.SetEvent(overlapped.hEvent)\n\n            rc = win32event.WaitForSingleObject(\n                overlapped.hEvent, win32event.INFINITE\n            )\n\n            if rc == win32event.WAIT_OBJECT_0:\n                try:\n                    hr, data = win32file.ReadFile(pipe_handle, 64)\n                    win32file.WriteFile(pipe_handle, "ok")\n                    win32pipe.DisconnectNamedPipe(pipe_handle)\n                    wx.PostEvent(self.frame, NewMessage(data=data))\n                except win32file.error:\n                    continue\n\n\nclass Messages(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None)\n        self.messages = wx.TextCtrl(self, style=wx.TE_MULTILINE | wx.TE_READONLY)\n        self.Bind(EVT_NEW_MESSAGE, self.On_Update)\n\n    def On_Update(self, event):\n        self.messages.Value += "\\n" + event.data\n\n\napp = wx.PySimpleApp()\napp.TopWindow = Messages()\napp.TopWindow.Show()\nMessageNotifier(app.TopWindow).start()\napp.MainLoop()\n']], ['Showing data in a GUI where the data comes from an outside source'], 2], [(731759, 1), [['Test it by sending some data with:'], ['(you also get a response in this case)']], [[' import win32pipe\n\nprint win32pipe.CallNamedPipe(r"\\\\.\\pipe\\named_pipe_demo", "Hello", 64, 0)\n']], ['Showing data in a GUI where the data comes from an outside source'], 2], [(733264, 0), [['Thus, if your method may accept a string or a tuple, you might do something like this:'], ['Then you could do either of these:']], [[' def print_names(names):\n    """Takes a space-delimited string or an iterable"""\n    try:\n        for name in names.split(): # string case\n            print name\n    except AttributeError:\n        for name in names:\n            print name\n']], ['Function overloading in Python: Missing'], 2], [(733264, 1), [['Then you could do either of these:'], ['Although an API like that sometimes indicates a design problem.']], [[' print_names("Ryan Billy")\nprint_names(("Ryan", "Billy"))\n']], ['Function overloading in Python: Missing'], 2], [(734255, 0), [['How you arrange these is really up to your project. In a complicated case, you might do:'], ['Or, for a simpler project that wants to leverage an open-source plugin:']], [[' Project: StackOverflowProject\n    App: Web Version\n        Site: StackOverflow.com\n        Site: RackOverflow.com\n    App: XML API Version\n        Site: StackOverflow.com\n        Site: RackOverflow.com\n    Common non-app settings, libraries, auth, etc\n']], ['What is the difference between a site and an app in Django?'], 2], [(734255, 1), [['Or, for a simpler project that wants to leverage an open-source plugin:'], ['Aside from the fact that there needs to be a Project, and at least one app, the arrangement is very flexible; you can adapt however suits best to help abstract and manage the complexity (or simplicity) of your deployment.']], [[" Project: StackOverflowProject\n    App: Stackoverflow\n        (No specific use of the sites feature... it's just one site)\n    App: Plug-in TinyMCE editor with image upload\n        (No specific use of the sites feature)\n"]], ['What is the difference between a site and an app in Django?'], 2], [(736043, 0), [['I would just use..'], ['Another option would be a regular expression:']], [[' try:\n    float(element)\nexcept ValueError:\n    print "Not a float"\n']], ['Checking if a string can be converted to float in Python'], 2], [(736043, 1), [['Another option would be a regular expression:'], ['-10000']], [[' import re\nif re.match("^\\d+?\\.\\d+?$", element) is None:\n    print "Not float"\n']], ['Checking if a string can be converted to float in Python'], 2], [(736335, 0), [['In theory yes, you can start spewing crud into __builtin__:'], ['If you must have unqualified values, just put them in a file called something like “mypackage/constants.py” then:']], [[' >>> import __builtin__\n>>> __builtin__.rubbish= 3\n>>> rubbish\n3\n']], ['Python Superglobal?'], 2], [(736335, 1), [['If you must have unqualified values, just put them in a file called something like “mypackage/constants.py” then:'], ['If they really are ‘variables’ in that you change them during app execution, you need to start encapsulating them in objects.']], [[' from mypackage.constants import *\n']], ['Python Superglobal?'], 2], [(737303, 0), [['If you record the frame number in a variable, you can modulo this with the number of frames you have to get an animation frame number to display.'], ["Also, this assumes that it's ok to play the animation starting at  any  frame. If this is not the case, you'll need to record what the frame count was when the action started, and take this away from frame count before the modulo:"]], [[' frame_count = 0\nanimation_frames = 4\nwhile quit == False:\n    # ...\n    # snip\n    # ...\n    area = pygame.Rect(\n        image_number * 100,\n        (frame_count % animation_frames) * 150,\n        100,\n        150\n    )\n    display.blit(sprite, sprite_pos, area)\n    pygame.display.flip()\n    frame_count += 1\n']], ['Pygame: Sprite animation Theory - Need Feedback'], 2], [(737303, 1), [["Also, this assumes that it's ok to play the animation starting at  any  frame. If this is not the case, you'll need to record what the frame count was when the action started, and take this away from frame count before the modulo:"], ["A note about your event handling. If you hold down, say, left, and tap right but keep holding down left, the sprite stops moving because the last event you processed was a keyup event, despite the fact that I'm still holding left."]], [['     area = pygame.Rect(\n        image_number * 100,\n        ((frame_count - action_start_frame) % animation_frames) * 150,\n        100,\n        150\n    )\n']], ['Pygame: Sprite animation Theory - Need Feedback'], 2], [(737512, 0), [['With that being said, you could implement your own dict class:'], ["You'd use this class as follows:"]], [[' class DescDict(dict):\n    def __init__(self, *args, **kwargs):\n        self.descs = {}\n        dict.__init__(self)\n\n    def __getitem__(self, name):\n        return dict.__getitem__(self, name)\n\n    def __setitem__(self, name, tup):\n        value, description = tup\n        self.descs[name] = description\n        dict.__setitem__(self, name, value)\n\n    def get_desc(self, name):\n        return self.descs[name]\n']], ['Returning default members when accessing to objects in python'], 2], [(737512, 1), [["You'd use this class as follows:"], ['If you decide to go the magic behavior route, then this should be a good starting point.']], [[' my_dict = DescDict()\nmy_dict["foo"] = (0.5, "A foo var")  # just use a tuple if you only have 2 vals\nprint my_dict["foo"] + 15            # prints 15.5\nprint my_dict.get_desc("foo")        # prints \'A foo var\'\n']], ['Returning default members when accessing to objects in python'], 2], [(739090, 0), [['Instead of forwarding the signal to the debuggee from Python, you could try just ignoring it.  The following worked for me:'], ['Incidentally, I also had no problem when forwarding the signal to the target process.']], [[" import signal\nsignal.signal(signal.SIGINT, signal.SIG_IGN)\n\nimport subprocess\ncat = subprocess.Popen(['cat'])\nsubprocess.call(['gdb', '--pid=%d' % cat.pid])\n"]], ['How do you automate the launching/debugging of large scale projects?'], 2], [(739090, 1), [['Incidentally, I also had no problem when forwarding the signal to the target process.'], ['So, maybe something else is going on in your case?  It might help if you posted some code that breaks.']], [[" import subprocess\ncat = subprocess.Popen(['cat'])\n\nimport signal, os\nsignal.signal(signal.SIGINT,\n              lambda signum, frame: os.kill(cat.pid, signum))\n\nsubprocess.call(['gdb', '--pid=%d' % cat.pid])\n"]], ['How do you automate the launching/debugging of large scale projects?'], 2], [(739260, 0), [["Haven't tested this, but based on reading Django's code  here  and  here  I believe it should work:"], ["EDIT : As jlpp notes in his answer, this isn't complete - you have to re-assign the choices to the widgets after changing the empty_label attribute.  Since that's a bit hacky, the other option that might be easier to understand is just overriding the entire ModelChoiceField:"]], [[" class ThingForm(models.ModelForm):\n  class Meta:\n    model = Thing\n\n  def __init__(self, *args, **kwargs):\n    super(ThingForm, self).__init__(*args, **kwargs)\n    self.fields['verb'].empty_label = None\n"]], ['Customize/remove Django select box blank option'], 2], [(739260, 1), [["EDIT : As jlpp notes in his answer, this isn't complete - you have to re-assign the choices to the widgets after changing the empty_label attribute.  Since that's a bit hacky, the other option that might be easier to understand is just overriding the entire ModelChoiceField:"], ['-10000']], [[' class ThingForm(models.ModelForm):\n  verb = ModelChoiceField(Verb.objects.all(), empty_label=None)\n\n  class Meta:\n    model = Thing\n']], ['Customize/remove Django select box blank option'], 2], [(739311, 0), [["Next, I would put the main owner Application class in the package's __init__.py rather than a ‘master script’. Then from your run-script or just the interpreter, you can get a complete instance of the application as simply as:"], ['You could also consider moving any basic deployment settings from the Settings class into the initialiser:']], [[' import myapplication\n\na= myapplication.Application()\n']], ['Organizing a large Python project that must share an internal state?'], 4], [(739311, 1), [['You could also consider moving any basic deployment settings from the Settings class into the initialiser:'], ["What I'm doing with some of my apps is making the owned classes monkey-patch themselves into actual members of the owner application object:"]], [[" a= myapplication.Application(basedir= '/opt/myapp', site= 'www.example.com', debug= False)\n"]], ['Organizing a large Python project that must share an internal state?'], 4], [(739311, 2), [["What I'm doing with some of my apps is making the owned classes monkey-patch themselves into actual members of the owner application object:"], ["Then it's possible to extend, change or configure the Application from outside it by replacing/subclassing the inner classes:"]], [[' # myapplication/__init__.py\n\nclass Application(object):\n    def __init__(self, dbfactory, debug):\n        # ...\n        self.mailer= self.Mailer(self)\n        self.webservice= self.Webservice(self)\n        # ...\n\nimport myapplication.mailer, myapplication.webservice\n\n\n# myapplication/mailer.py\n\nimport myapplication\n\nclass Mailer(object):\n    def __init__(self, owner):\n        self.owner= owner\n\n    def send(self, message, recipients):\n        # ...\n\nmyapplication.Application.Mailer= Mailer\n']], ['Organizing a large Python project that must share an internal state?'], 4], [(739311, 3), [["Then it's possible to extend, change or configure the Application from outside it by replacing/subclassing the inner classes:"], ["I'm not that worried about internal data integrity"]], [[" import myapplication\n\nclass MockApplication(myapplication.Application):\n    class Mailer(myapplication.Application.Mailer):\n        def send(self, message, recipients):\n            self.owner.log('Mail send called (not actually sent)')\n            return True\n"]], ['Organizing a large Python project that must share an internal state?'], 4], [(739882, 0), [['You can make your class object iterable with a simple metaclass.'], ['(I have also changed  __registry  to  _registry  to make it easier to access from the metaclass).\nThen,']], [[' class IterRegistry(type):\n    def __iter__(cls):\n        return iter(cls._registry)\n\nclass Person(object):\n    __metaclass__ = IterRegistry\n    _registry = []\n\n    def __init__(self, name):\n        self._registry.append(self)\n        self.name = name\n']], ['Iterating over object instances of a given class in Python'], 2], [(739882, 1), [['(I have also changed  __registry  to  _registry  to make it easier to access from the metaclass).\nThen,'], ['-10000']], [[" >>> p = Person('John')\n>>> p2 = Person('Mary')\n>>> for personobject in Person:\n...     print personobject\n...\n<person.Person object at 0x70410>\n<person.Person object at 0x70250>\n"]], ['Iterating over object instances of a given class in Python'], 2], [(741270, 0), [['Something else that might make sense in some cases would be to give your MessageModel methods.  For instance, if you have a '], ['Then (assuming you have "messagesSQL" in the template), you can use the function as']], [[" def since_date_created(self):\n    '''Compute the time since creation time based on self.date_created.'''\n"]], ['Django: Adding additional properties to Model Class Object'], 2], [(741270, 1), [['Then (assuming you have "messagesSQL" in the template), you can use the function as'], ['Basically, you can call any method in the model as long as you it needs no arguments passed to it.']], [[' {% for msg in messagesSQL %}\n    {{ msg.since_date_created }}\n{% endfor %}\n']], ['Django: Adding additional properties to Model Class Object'], 2], [(742376, 0), [['I might be missing some subtle intricacy in your question, but given your first example, what precludes you from doing something like this:'], ['And if you want the classes to share some common (base) functionality, is there something keeping you from doing this:']], [[' class HandlerCase1(object):\n    def handle_stuff(self, *args, **kwargs):\n        print "Handling case 1"\n\n\nclass HandlerCase2(object):\n    def handle_stuff(self, *args, **kwargs):\n        print "Handling case 2"\n\n\nif __name__ == "__main__":\n    handlers = []\n    handlers.append(HandlerCase1())\n    handlers.append(HandlerCase2())\n    for h in handlers:\n        h.handle_stuff()\n']], ['Encapsulation vs. inheritance, help making a choice'], 2], [(742376, 1), [['And if you want the classes to share some common (base) functionality, is there something keeping you from doing this:'], ['-10000']], [[' class Handler(object):\n    def common_function(self):\n        print "Common function"\n\n\nclass HandlerCase1(Handler):\n    def handle_stuff(self, *args, **kwargs):\n        print "Handling case 1"\n\n\nclass HandlerCase2(Handler):\n    def handle_stuff(self, *args, **kwargs):\n        print "Handling case 2"\n\n\nif __name__ == "__main__":\n    handlers = []\n    handlers.append(HandlerCase1())\n    handlers.append(HandlerCase2())\n    for h in handlers:\n        h.handle_stuff()\n        h.common_function()\n']], ['Encapsulation vs. inheritance, help making a choice'], 2], [(742708, 0), [['Depends what you mean by "function".  Something like this could work, though:'], ['Then:']], [[' import inspect\n\ndef methods(c):\n    return (m for m in (getattr(c, d) for d in dir(c))\n            if inspect.ismethoddescriptor(m) or inspect.ismethod(m))\n']], ['For each function in class within python'], 2], [(742708, 1), [['Then:'], ['-10000']], [[' class C:\n    def f(self): pass\n\n>>> list(methods(C))\n[<unbound method C.f>]\n']], ['For each function in class within python'], 2], [(744308, 0), [['I would restructure it so both lists were contained in one model.'], ['Then, your lists would just be:']], [[" class PermissionList(models.Model):\n    setter = models.ManyToManyField(User)\n    email = models.EmailField(unique=True) #don't want conflicting results\n    permission = models.BooleanField()\n"]], ['email whitelist/blacklist in python/django'], 3], [(744308, 1), [['Then, your lists would just be:'], ['To check a particular user, you just add a couple functions to the model:']], [[' # whitelist\nPermissionList.objects.filter(permission=True)\n# blacklist\nPermissionList.objects.filter(permission=False)\n']], ['email whitelist/blacklist in python/django'], 3], [(744308, 2), [['To check a particular user, you just add a couple functions to the model:'], ['Having everything in one place is a lot simpler, and you can make more interesting queries with less work.']], [[' class PermissionList(...):\n    ...\n    @classmethod\n    def is_on_whitelist(email):\n        return PermissionList.objects.filter(email=email, permission=True).count() > 0\n\n    @classmethod\n    def is_on_blacklist(email):\n        return PermissionList.objects.filter(email=email, permission=False).count() > 0\n\n    @classmethod\n    def has_permission(email):\n        if PermissionList.is_on_whitelist(email):\n            return True\n        if PermissionList.is_on_blacklist(email):\n            return False\n        return None\n']], ['email whitelist/blacklist in python/django'], 3], [(744894, 0), [['After much pissing about I found the best way to do this:'], ['Then search for comments with a . like so:']], [[' #. Translators:\n# Blah blah blah\n_("String")\n']], ['adding comments to pot files automatically'], 2], [(744894, 1), [['Then search for comments with a . like so:'], ['-10000']], [[' xgettext --language=Python --keyword=_ --add-comments=. --output=test.pot *.py\n']], ['adding comments to pot files automatically'], 2], [(748324, 0), [['Enter  urllib2 , which offers the easiest way of doing this:'], ["For reference's sake, however,  note that this is also possible with  httplib :"]], [[" >>> import urllib2\n>>> fp = urllib2.urlopen('http://bit.ly/rgCbf')\n>>> fp.geturl()\n'http://webdesignledger.com/freebies/the-best-social-media-icons-all-in-one-place'\n"]], ['Python: Convert those TinyURL (bit.ly, tinyurl, ow.ly) to full URLS'], 3], [(748324, 1), [["For reference's sake, however,  note that this is also possible with  httplib :"], ["And with  PycURL , although I'm not sure if this is the best way to do it using it:"]], [[" >>> import httplib\n>>> conn = httplib.HTTPConnection('bit.ly')\n>>> conn.request('HEAD', '/rgCbf')\n>>> response = conn.getresponse()\n>>> response.getheader('location')\n'http://webdesignledger.com/freebies/the-best-social-media-icons-all-in-one-place'\n"]], ['Python: Convert those TinyURL (bit.ly, tinyurl, ow.ly) to full URLS'], 3], [(748324, 2), [["And with  PycURL , although I'm not sure if this is the best way to do it using it:"], ['-10000']], [[' >>> import pycurl\n>>> conn = pycurl.Curl()\n>>> conn.setopt(pycurl.URL, "http://bit.ly/rgCbf")\n>>> conn.setopt(pycurl.FOLLOWLOCATION, 1)\n>>> conn.setopt(pycurl.CUSTOMREQUEST, \'HEAD\')\n>>> conn.setopt(pycurl.NOBODY, True)\n>>> conn.perform()\n>>> conn.getinfo(pycurl.EFFECTIVE_URL)\n\'http://webdesignledger.com/freebies/the-best-social-media-icons-all-in-one-place\'\n']], ['Python: Convert those TinyURL (bit.ly, tinyurl, ow.ly) to full URLS'], 3], [(749682, 0), [['As always, use the source:'], ['As we can see, the password digests are made by concatenating the salt with the password using the selected hashing algorithm.  then the algorithm name, the original salt, and password hash are concatenated, separated by "$"s to form the digest.  ']], [[' # root/django/trunk/django/contrib/auth/models.py\n# snip\ndef get_hexdigest(algorithm, salt, raw_password):\n    """\n    Returns a string of the hexdigest of the given plaintext password and salt\n    using the given algorithm (\'md5\', \'sha1\' or \'crypt\').\n    """\n    raw_password, salt = smart_str(raw_password), smart_str(salt)\n    if algorithm == \'crypt\':\n        try:\n            import crypt\n        except ImportError:\n            raise ValueError(\'"crypt" password algorithm not supported in this environment\')\n        return crypt.crypt(raw_password, salt)\n\n    if algorithm == \'md5\':\n        return md5_constructor(salt + raw_password).hexdigest()\n    elif algorithm == \'sha1\':\n        return sha_constructor(salt + raw_password).hexdigest()\n    raise ValueError("Got unknown password algorithm type in password.")\n']], ['What is the format in which Django passwords are stored in the database?'], 2], [(749682, 1), [['As we can see, the password digests are made by concatenating the salt with the password using the selected hashing algorithm.  then the algorithm name, the original salt, and password hash are concatenated, separated by "$"s to form the digest.  '], ['To validate passwords django just verifies that the same salt and same password result in the same digest.']], [[' # Also from root/django/trunk/django/contrib/auth/models.py\ndef check_password(raw_password, enc_password):\n    """\n    Returns a boolean of whether the raw_password was correct. Handles\n    encryption formats behind the scenes.\n    """\n    algo, salt, hsh = enc_password.split(\'$\')\n    return hsh == get_hexdigest(algo, salt, raw_password)\n']], ['What is the format in which Django passwords are stored in the database?'], 2], [(750136, 0), [['Print simply prints out the structure to your output device (normally the console). Nothing more. To return it from your function, you would do:'], ["Why return? Well if you don't, that dictionary dies (gets garbage collected) and is no longer accessible as soon as this function call ends. If you return the value, you can do other stuff with it. Such as:"]], [[" def autoparts():\n  parts_dict = {}\n  list_of_parts = open('list_of_parts.txt', 'r')\n  for line in list_of_parts:\n        k, v = line.split()\n        parts_dict[k] = v\n  return parts_dict\n"]], ['How is returning the output of a function different from printing it?'], 2], [(750136, 1), [["Why return? Well if you don't, that dictionary dies (gets garbage collected) and is no longer accessible as soon as this function call ends. If you return the value, you can do other stuff with it. Such as:"], ["See what happened? autoparts() was called and it returned the parts_dict and we stored it into the my_auto_parts variable. Now we can use this variable to access the dictionary object and it continues to live even though the function call is over. We then printed out the object in the dictionary with the key 'engine'."]], [[" my_auto_parts = autoparts() \nprint my_auto_parts['engine']\n"]], ['How is returning the output of a function different from printing it?'], 2], [(752308, 0), [['-10000'], ['If you want a function:']], [[' A = [1,2,3,4,5,6]\nB = A[:len(A)/2]\nC = A[len(A)/2:]\n']], ['Split list into smaller lists'], 2], [(752308, 1), [['If you want a function:'], ['-10000']], [[' def split_list(a_list):\n    half = len(a_list)/2\n    return a_list[:half], a_list[half:]\n\nA = [1,2,3,4,5,6]\nB, C = split_list(A)\n']], ['Split list into smaller lists'], 2], [(752602, 0), [['Defining simple test class that just prints what is being passed:'], ['Expression example:']], [[' >>> class TestGetitem(object):\n...   def __getitem__(self, item):\n...     print type(item), item\n... \n>>> t = TestGetitem()\n']], ['"Slicing" in Python Expressions documentation'], 5], [(752602, 1), [['Expression example:'], ['Slice example:']], [[" >>> t[1]\n<type 'int'> 1\n>>> t[3-2]\n<type 'int'> 1\n>>> t['test']\n<type 'str'> test\n>>> t[t]\n<class '__main__.TestGetitem'> <__main__.TestGetitem object at 0xb7e9bc4c>\n"]], ['"Slicing" in Python Expressions documentation'], 5], [(752602, 2), [['Slice example:'], ['Ellipsis example:']], [[" >>> t[1:2]\n<type 'slice'> slice(1, 2, None)\n>>> t[1:'this':t]\n<type 'slice'> slice(1, 'this', <__main__.TestGetitem object at 0xb7e9bc4c>)\n"]], ['"Slicing" in Python Expressions documentation'], 5], [(752602, 3), [['Ellipsis example:'], ['Tuple with ellipsis and slice:']], [[" >>> t[...]\n<type 'ellipsis'> Ellipsis\n"]], ['"Slicing" in Python Expressions documentation'], 5], [(752602, 4), [['Tuple with ellipsis and slice:'], ['-10000']], [[" >>> t[...,1:]\n<type 'tuple'> (Ellipsis, slice(1, None, None))\n"]], ['"Slicing" in Python Expressions documentation'], 5], [(753052, 0), [['On Python 2'], ['For Python 3']], [[" from HTMLParser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.fed = []\n    def handle_data(self, d):\n        self.fed.append(d)\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef strip_tags(html):\n    s = MLStripper()\n    s.feed(html)\n    return s.get_data()\n"]], ['Strip HTML from strings in Python'], 2], [(753052, 1), [['For Python 3'], ["Note : this works only for 3.1. For 3.2 or above, you need to call the parent class's  init  function. See  Using HTMLParser in Python 3.2"]], [[" from html.parser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.strict = False\n        self.convert_charrefs= True\n        self.fed = []\n    def handle_data(self, d):\n        self.fed.append(d)\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef strip_tags(html):\n    s = MLStripper()\n    s.feed(html)\n    return s.get_data()\n"]], ['Strip HTML from strings in Python'], 2], [(753986, 0), [['-10000'], ['In Python 3.0 you can use a "dict comprehension" which is basically a shorthand for the above:']], [[' >>> l = [ 1, 2, 3, 4 ]\n>>> dict( ( v, v**2 ) for v in l )\n{1: 1, 2: 4, 3: 9, 4: 16}\n']], ['Is there a more pythonic way to build this dictionary?'], 2], [(753986, 1), [['In Python 3.0 you can use a "dict comprehension" which is basically a shorthand for the above:'], ['-10000']], [[' { v : v**2 for v in l }\n']], ['Is there a more pythonic way to build this dictionary?'], 2], [(754468, 0), [['The Pythonic way to write something like:'], ['would be:']], [[' chr(0xe2) . chr(0x80) . chr(0x98)\n']], ['Some Basic Python Questions'], 6], [(754468, 1), [['would be:'], ['But Python already has built-in functionality for the type of conversion you want to do:']], [[" '\\xe2\\x80\\x98'\n"]], ['Some Basic Python Questions'], 6], [(754468, 2), [['But Python already has built-in functionality for the type of conversion you want to do:'], ['If you want to replace those numeric entities with named ones where possible:']], [[" def defang(string):\n    return string.decode('utf-8').encode('ascii', 'xmlcharrefreplace')\n"]], ['Some Basic Python Questions'], 6], [(754468, 3), [['If you want to replace those numeric entities with named ones where possible:'], ['And use it like so:']], [[' import re\nfrom htmlentitydefs import codepoint2name\n\ndef convert_match_to_named(match):\n    num = int(match.group(1))\n    if num in codepoint2name:\n        return "&%s;" % codepoint2name[num]\n    else:\n        return match.group(0)\n\ndef defang_named(string):\n    return re.sub(\'&#(\\d+);\', convert_match_to_named, defang(string))\n']], ['Some Basic Python Questions'], 6], [(754468, 4), [['And use it like so:'], ['To complete the answer, the equivalent code to your example to process a file would look something like this:']], [[" >>> defang_named('\\xe2\\x80\\x9cHello, world!\\xe2\\x80\\x9d')\n'&ldquo;Hello, world!&rdquo;'\n"]], ['Some Basic Python Questions'], 6], [(754468, 5), [['To complete the answer, the equivalent code to your example to process a file would look something like this:'], ['Note that this answer is targeted at Python 2.5; the Unicode situation is dramatically different for Python 3+.']], [[' # in Python, it\'s common to operate a line at a time on a file instead of\n# reading the entire thing into memory\n\nmy_file = open("test100.html")\nfor line in my_file:\n    print defang_named(line)\nmy_file.close()\n']], ['Some Basic Python Questions'], 6], [(756055, 0), [['I found the  pseudocode  on  http://www.programmersheaven.com/mb/Algorithms/369713/369713/permutation-algorithm-help/ :'], ['Code:']], [[' makePermutations(permutation) {\n  if (length permutation < required length) {\n    for (i = min digit to max digit) {\n      if (i not in permutation) {\n        makePermutations(permutation+i)\n      }\n    }\n  }\n  else {\n    add permutation to list\n  }\n}\n']], ['Listing all permutations of a string/integer'], 2], [(756055, 1), [['Code:'], ['-10000']], [[' class Program\n{\n    private static void Swap(ref char a, ref char b)\n    {\n        if (a == b) return;\n\n        a ^= b;\n        b ^= a;\n        a ^= b;\n    }\n\n    public static void GetPer(char[] list)\n    {\n        int x = list.Length - 1;\n        GetPer(list, 0, x);\n    }\n\n    private static void GetPer(char[] list, int k, int m)\n    {\n        if (k == m)\n        {\n            Console.Write(list);\n        }\n        else\n            for (int i = k; i <= m; i++)\n            {\n                   Swap(ref list[k], ref list[i]);\n                   GetPer(list, k + 1, m);\n                   Swap(ref list[k], ref list[i]);\n            }\n    }\n\n    static void Main()\n    {\n        string str = "sagiv";\n        char[] arr = str.ToCharArray();\n        GetPer(arr);\n    }\n}\n']], ['Listing all permutations of a string/integer'], 2], [(756898, 0), [["By default  .  doesn't match newlines - you need to add the  re.DOTALL  option."], ['If you have more than one staff section, you might also want to make the match ungreedy:']], [[" re.search('<!-- begin staff -->.*<!-- end staff -->', text, re.DOTALL)\n"]], ['Matching a pair of comments in HTML using regular expressions'], 2], [(756898, 1), [['If you have more than one staff section, you might also want to make the match ungreedy:'], ['-10000']], [[" re.search('<!-- begin staff -->.*?<!-- end staff -->', text, re.DOTALL)\n"]], ['Matching a pair of comments in HTML using regular expressions'], 2], [(757476, 0), [['-10000'], ['Since  (tickets\\.)  is a group,  findall  returns that instead of the whole match.  If you want the whole match, put a group around the whole pattern and/or use non-grouping matches, i.e.']], [[' findall(pattern, string, flags=0)\n    Return a list of all non-overlapping matches in the string.\n\n    If one or more groups are present in the pattern, return a\n    list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.\n']], ['Difference in regex behavior between Perl and Python?'], 2], [(757476, 1), [['Since  (tickets\\.)  is a group,  findall  returns that instead of the whole match.  If you want the whole match, put a group around the whole pattern and/or use non-grouping matches, i.e.'], ["Note that you'll have to pick out the first element of each tuple returned by  findall  in the first case."]], [[" r'(\\w+@(tickets\\.)?company\\.com)'\nr'\\w+@(?:tickets\\.)?company\\.com'\n"]], ['Difference in regex behavior between Perl and Python?'], 2], [(758465, 0), [['I find that I forget to think in Lists and Dictionaries even though I use them.  Python has some powerful tools to work with these types to speed your ability to manipulate them. \nI need a slice so the slice references are easily obtained by'], ['where tempans is the datalist\nnow I can write']], [[" beginPosit = tempans.index('007 A000000 Y')\nendPosit = min([i for i, item in enumerate(tempans) if '008 ' in item])\n"]], ['Program Control-Flow in Python'], 3], [(758465, 1), [['where tempans is the datalist\nnow I can write'], ['Okay I am going to further edit my answer.  I have learned a lot here but some of this stuff is over my head still and I want to get some code written while I am learning more about this fantastic tool.  ']], [[' for line in tempans[beginPosit:endPosit]:\n    process each line\n']], ['Program Control-Flow in Python'], 3], [(758465, 2), [['Okay I am going to further edit my answer.  I have learned a lot here but some of this stuff is over my head still and I want to get some code written while I am learning more about this fantastic tool.  '], ["This is based on an earlier answer to a similar question and  Steven Huwig's  answer"]], [[" from itertools import takewhile\nbeginPosit = tempans.index('007 A000000 Y')\nnew=takewhile(lambda x: '007 ' in x, tempans[beginPosit:])\n"]], ['Program Control-Flow in Python'], 3], [(761361, 0), [['The  u  comes from the  unicode.__repr__  method, which is used to display stuff in REPL:'], ['The simplest way around this is to simply print the string..']], [[" >>> print repr(unicode('a'))\nu'a'\n>>> unicode('a')\nu'a'\n"]], ["Suppress the u'prefix indicating unicode' in python strings"], 3], [(761361, 1), [['The simplest way around this is to simply print the string..'], ['If you use the  unicode()  builtin to construct all your strings, you could do something like..']], [[" >>> print unicode('a')\na\n"]], ["Suppress the u'prefix indicating unicode' in python strings"], 3], [(761361, 2), [['If you use the  unicode()  builtin to construct all your strings, you could do something like..'], ["..but don't do that, it's horrible"]], [[' >>> class unicode(unicode):\n...     def __repr__(self):\n...             return __builtins__.unicode.__repr__(self).lstrip("u")\n... \n>>> unicode(\'a\')\na\n']], ["Suppress the u'prefix indicating unicode' in python strings"], 3], [(764360, 0), [['Looks like a good opportunity to use a loop:'], ["A faster approach if you don't mind the parentheses would be:"]], [[" mapping = { 'A':'1', 'B':'2', 'C':'3', 'D':'4', 'E':'5'}\nfor k, v in mapping.iteritems():\n    my_string = my_string.replace(k, v)\n"]], ['A list of string replacements in Python'], 2], [(764360, 1), [["A faster approach if you don't mind the parentheses would be:"], ['-10000']], [[" mapping = [ ('A', '1'), ('B', '2'), ('C', '3'), ('D', '4'), ('E', '5') ]\nfor k, v in mapping:\n    my_string = my_string.replace(k, v)\n"]], ['A list of string replacements in Python'], 2], [(765305, 0), [['The simplest was is to simply catch the IOError exception from urllib:'], ['Also, from  this blog post - "check status proxy address"  (with some slight improvements):']], [[' try:\n    urllib.urlopen(\n        "http://example.com",\n        proxies={\'http\':\'http://example.com:8080\'}\n    )\nexcept IOError:\n    print "Connection error! (Check proxy)"\nelse:\n    print "All was fine"\n']], ['Proxy Check in python'], 2], [(765305, 1), [['Also, from  this blog post - "check status proxy address"  (with some slight improvements):'], ['Remember this could double the time the script takes, if the proxy is down (as you will have to wait for two connection-timeouts).. Unless you specifically have to know the proxy is at fault, handling the IOError is far cleaner, simpler and quicker..']], [[' import urllib2\nimport socket\n\ndef is_bad_proxy(pip):    \n    try:\n        proxy_handler = urllib2.ProxyHandler({\'http\': pip})\n        opener = urllib2.build_opener(proxy_handler)\n        opener.addheaders = [(\'User-agent\', \'Mozilla/5.0\')]\n        urllib2.install_opener(opener)\n        req=urllib2.Request(\'http://www.example.com\')  # change the URL to test here\n        sock=urllib2.urlopen(req)\n    except urllib2.HTTPError, e:\n        print \'Error code: \', e.code\n        return e.code\n    except Exception, detail:\n        print "ERROR:", detail\n        return True\n    return False\n\ndef main():\n    socket.setdefaulttimeout(120)\n\n    # two sample proxy IPs\n    proxyList = [\'125.76.226.9:80\', \'213.55.87.162:6588\']\n\n    for currentProxy in proxyList:\n        if is_bad_proxy(currentProxy):\n            print "Bad Proxy %s" % (currentProxy)\n        else:\n            print "%s is working" % (currentProxy)\n\nif __name__ == \'__main__\':\n    main()\n']], ['Proxy Check in python'], 2], [(765797, 0), [["Your best bet is to use the  dateutil.relativedelta   object , but that's a 3rd party module.  If you want to know the  datetime  that was  n  years from some date (defaulting to right now), you can do the following::"], ["If you'd rather stick with the standard library, the answer is a little more complex::"]], [[' from dateutil.relativedelta import relativedelta\n\ndef yearsago(years, from_date=None):\n    if from_date is None:\n        from_date = datetime.now()\n    return from_date - relativedelta(years=years)\n']], ['Python timedelta in years'], 4], [(765797, 1), [["If you'd rather stick with the standard library, the answer is a little more complex::"], ["If it's 2/29, and 18 years ago there was no 2/29, this function will return 2/28.  If you'd rather return 3/1, just change the last  return  statement to read::"]], [[' from datetime import datetime\ndef yearsago(years, from_date=None):\n    if from_date is None:\n        from_date = datetime.now()\n    try:\n        return from_date.replace(year=from_date.year - years)\n    except ValueError:\n        # Must be 2/29!\n        assert from_date.month == 2 and from_date.day == 29 # can be removed\n        return from_date.replace(month=2, day=28,\n                                 year=from_date.year-years)\n']], ['Python timedelta in years'], 4], [(765797, 2), [["If it's 2/29, and 18 years ago there was no 2/29, this function will return 2/28.  If you'd rather return 3/1, just change the last  return  statement to read::"], ["Your question originally said you wanted to know how many years it's been since some date.  Assuming you want an integer number of years, you can guess based on 365.25 days per year and then check using either of the  yearsago  functions defined above::"]], [['     return from_date.replace(month=3, day=1,\n                             year=from_date.year-years)\n']], ['Python timedelta in years'], 4], [(765797, 3), [["Your question originally said you wanted to know how many years it's been since some date.  Assuming you want an integer number of years, you can guess based on 365.25 days per year and then check using either of the  yearsago  functions defined above::"], ['-10000']], [[' def num_years(begin, end=None):\n    if end is None:\n        end = datetime.now()\n    num_years = int((end - begin).days / 365.25)\n    if begin > yearsago(num_years, end):\n        return num_years - 1\n    else:\n        return num_years\n']], ['Python timedelta in years'], 4], [(766335, 0), [["datetime.timedelta  is just the difference between two datetimes ... so it's like a period of time, in days / seconds / microseconds"], ['You can do all sorts of maths with datetime.timedelta, eg:']], [[' >>> a = datetime.datetime.now()\n>>> b = datetime.datetime.now()\n>>> c = b - a\n\n>>> c\ndatetime.timedelta(0, 4, 316543)\n>>> c.days\n0\n>>> c.seconds\n4\n>>> c.microseconds\n316543\n']], ['Python speed testing - Time Difference - milliseconds'], 2], [(766335, 1), [['You can do all sorts of maths with datetime.timedelta, eg:'], ["It might be more useful to look at CPU time instead of wallclock time though ... that's operating system dependant though ... under Unix-like systems, check out the 'time' command."]], [[' >>> c / 10\ndatetime.timedelta(0, 0, 431654)\n']], ['Python speed testing - Time Difference - milliseconds'], 2], [(768175, 0), [['If you want to fall back  only  on None:'], ['If you want to fall back also on empty string,  false ,  0  etc.: ']], [[' a = x if x is not None else y \n']], ['What is the most Pythonic way to provide a fall-back value in an assignment?'], 5], [(768175, 1), [['If you want to fall back also on empty string,  false ,  0  etc.: '], ['or']], [[' a = x if x else y \n']], ['What is the most Pythonic way to provide a fall-back value in an assignment?'], 5], [(768175, 2), [['or'], ['As for undefined (as never defined, a.k.a. not bound):']], [[' a = x or y \n']], ['What is the most Pythonic way to provide a fall-back value in an assignment?'], 5], [(768175, 3), [['As for undefined (as never defined, a.k.a. not bound):'], ["or a bit more hackish (I'd not really recommend that, but it's short):"]], [[' try:\n  a = x \nexcept NameError:\n  a = y\n']], ['What is the most Pythonic way to provide a fall-back value in an assignment?'], 5], [(768175, 4), [["or a bit more hackish (I'd not really recommend that, but it's short):"], ['-10000']], [[" a = vars().get('x',y)\n"]], ['What is the most Pythonic way to provide a fall-back value in an assignment?'], 5], [(768474, 0), [['Instead consider making an instance at module import time as shown here:'], ['other_module.py']], [[' import Tkinter\n\nclass Monitor(object):\n\n  def __init__(self):\n    self.mw = Tkinter.Tk()\n    self.mw.title("Messages by NeuronSimulation")\n    self.text = Tkinter.Text(self.mw, width = 80, height = 30)\n    self.text.pack()\n    self.mw.protocol(name="WM_DELETE_WINDOW", func=self.handler)\n    self.is_mw = True\n\n  def write(self, s):\n    if self.is_mw:\n      self.text.insert(Tkinter.END, str(s) + "\\n")\n    else:\n      print str(s)\n\n  def handler(self):\n    self.is_mw = False\n    self.mw.quit()\n    self.mw.destroy()\n\nmonitor = Monitor()\n']], ['classmethod for Tkinter-Monitor-Window'], 2], [(768474, 1), [['other_module.py'], ['-10000']], [[' from monitor import monitor\nmonitor.write("Foo")\n']], ['classmethod for Tkinter-Monitor-Window'], 2], [(770845, 0), [['Methods on classes are just functions.'], ['When you fetch a method from an instance of a class, Python uses some magic (called descriptors) to return a bound method. Bound methods automatically insert the instance as the first argument when they are called.']], [[' class MyClass(object):\n...     def my_method(self): pass\n...\n>>> MyClass.my_method\n<function my_method at 0x661c38>\n']], ['What does python3 do with the methods passed to the "key" argument of sorted()?'], 2], [(770845, 1), [['When you fetch a method from an instance of a class, Python uses some magic (called descriptors) to return a bound method. Bound methods automatically insert the instance as the first argument when they are called.'], ['However, as you have noticed, you can also directly call the function with an instance as the first argument:  MyClass.my_method(MyClass())']], [[' >>> MyClass().my_method\n<bound method MyClass.my_method of <__main__.myClass object at 0x6e2498>>\n']], ['What does python3 do with the methods passed to the "key" argument of sorted()?'], 2], [(774502, 0), [["To get started with extracting ID3 tags in Python, there's a module for that."], ['If you want to recursively search a directory for mp3 files, the built-in  os  module can do that:']], [[" from ID3 import ID3\n\nmp3_filepath = r'/music/song.mp3'\nid3_data = ID3(mp3_filepath)\nprint 'Artist:', id3_data['ARTIST']\nprint 'Title:', id3_data['TITLE']\n"]], ['Python scripted mp3 database, with a php front end'], 2], [(774502, 1), [['If you want to recursively search a directory for mp3 files, the built-in  os  module can do that:'], ['Reference.']], [[" import os\n\ndef mp3_files(root):\n  # this is a generator that will return mp3 file paths within given dir\n  for f in os.listdir(root):\n      fullpath = os.path.join(root,f)\n      if os.path.isdir(fullpath) and not os.path.islink(fullpath):\n          for x in mp3_files(fullpath):  # recurse into subdir\n              yield x\n      else:\n          if fullpath[len(fullpath)-3:] == 'mp3':\n            yield fullpath\n\nfor p in mp3_files(root_dir):\n  id3_data = ID3(p)\n  print 'Artist:', id3_data['ARTIST']\n  print 'Title:', id3_data['TITLE']\n"]], ['Python scripted mp3 database, with a php front end'], 2], [(775880, 0), [['Here is what  sphinx-build  does:'], ['In your code, you would have to do something like:']], [[" from pkg_resources import load_entry_point\n\nload_entry_point('Sphinx==0.5.1', 'console_scripts', 'sphinx-build')()\n"]], ['access eggs in python?'], 2], [(775880, 1), [['In your code, you would have to do something like:'], ['You need to have a look at the Sphinx source code to figure out the parameters to  Sphinx.__init__()  and  Sphinx.build()']], [[' from sphinx.application import Sphinx\ns = Sphinx(...)\ns.build(...)\n']], ['access eggs in python?'], 2], [(777458, 0), [['Using  mark_safe'], ['When nothing else works try the following. In the file that contains your currencies tuple put the following line as the very first or second line:']], [[" from django.utils.safestring import mark_safe\n\ncurrencies = ((mark_safe('&#36;'), mark_safe('&#36;')), \n              (mark_safe('&pound;'), mark_safe('&pound;')), \n              (mark_safe('&euro;'), mark_safe('&euro;')))    \n"]], ['Django Form values without HTML escape'], 3], [(777458, 1), [['When nothing else works try the following. In the file that contains your currencies tuple put the following line as the very first or second line:'], ['and then in your currencies tuple put the actual unicode characters:']], [[' # coding=utf-8\n']], ['Django Form values without HTML escape'], 3], [(777458, 2), [['and then in your currencies tuple put the actual unicode characters:'], ['-10000']], [[" currencies = (('$', '$'), \n              ('£', '£'), \n              ('€', '€')) \n"]], ['Django Form values without HTML escape'], 3], [(779384, 0), [["That being said, here's an example:"], ['When run, you will see:']], [[' from multiprocessing import Process\nimport time\n\nclass Starter(object):\n    def __init__(self):\n        self.state = False\n\nx = Starter()\n\nclass EdgeRenderer(Process):\n    def __init__(self,starter,*args,**kwargs):\n        Process.__init__(self,*args,**kwargs)\n        self.starter=starter\n    def run(self):\n        self.starter.state = "HAM SANDWICH"\n        time.sleep(1)\n        print self.starter.state\n\na = EdgeRenderer(x)\na.start()\nx.state = True\na.join()\nprint x.state\n']], ['Python Multiprocessing: Sending data to a process'], 2], [(779384, 1), [['When run, you will see:'], ["So the changes the parent makes don't get communicated after the fork() and the changes the child makes have the same issue. You have to adhere to fork limitations. "]], [[' HAM SANDWICH\nTrue\n']], ['Python Multiprocessing: Sending data to a process'], 2], [(780057, 0), [['Not quite sure what you are after here but here goes:'], ['or:']], [[' rangeList = range(0,21)\nlastNumber = rangeList[len(rangeList)-1:][0]\n']], ['how get last number in range in python'], 2], [(780057, 1), [['or:'], ['-10000']], [[' lastNumber = rangeList[-1]\n']], ['how get last number in range in python'], 2], [(780774, 0), [['Just use an association proxy:'], ['Create a test environment:']], [[' from sqlalchemy import Column, Integer, String, Table, create_engine\nfrom sqlalchemy import orm, MetaData, Column, ForeignKey\nfrom sqlalchemy.orm import relation, mapper, sessionmaker\nfrom sqlalchemy.orm.collections import column_mapped_collection\nfrom sqlalchemy.ext.associationproxy import association_proxy\n']], ['SQLAlchemy - Dictionary of tags'], 8], [(780774, 1), [['Create a test environment:'], ['Define the tables:']], [[" engine = create_engine('sqlite:///:memory:', echo=True)\nmeta = MetaData(bind=engine)\n"]], ['SQLAlchemy - Dictionary of tags'], 8], [(780774, 2), [['Define the tables:'], ['Classes (note the  association_proxy  in the class):']], [[" tb_items = Table('items', meta, \n        Column('id', Integer, primary_key=True), \n        Column('name', String(20)),\n        Column('description', String(100)),\n    )\ntb_notes = Table('notes', meta, \n        Column('id_item', Integer, ForeignKey('items.id'), primary_key=True),\n        Column('name', String(20), primary_key=True),\n        Column('value', String(100)),\n    )\nmeta.create_all()\n"]], ['SQLAlchemy - Dictionary of tags'], 8], [(780774, 3), [['Classes (note the  association_proxy  in the class):'], ['Mapping:']], [[" class Note(object):\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\nclass Item(object):\n    def __init__(self, name, description=''):\n        self.name = name\n        self.description = description\n    notes = association_proxy('_notesdict', 'value', creator=Note)\n"]], ['SQLAlchemy - Dictionary of tags'], 8], [(780774, 4), [['Mapping:'], ['Then just test it:']], [[" mapper(Note, tb_notes)\nmapper(Item, tb_items, properties={\n        '_notesdict': relation(Note, \n             collection_class=column_mapped_collection(tb_notes.c.name)),\n    })\n"]], ['SQLAlchemy - Dictionary of tags'], 8], [(780774, 5), [['Then just test it:'], ['That prints:']], [[" Session = sessionmaker(bind=engine)\ns = Session()\n\ni = Item('ball', 'A round full ball')\ni.notes['color'] = 'orange'\ni.notes['size'] = 'big'\ni.notes['data'] = 'none'\n\ns.add(i)\ns.commit()\nprint i.notes\n"]], ['SQLAlchemy - Dictionary of tags'], 8], [(780774, 6), [['That prints:'], ['But, are those in the notes table?']], [[" {u'color': u'orange', u'data': u'none', u'size': u'big'}\n"]], ['SQLAlchemy - Dictionary of tags'], 8], [(780774, 7), [['But, are those in the notes table?'], ['It works!! :)']], [[" >>> print list(tb_notes.select().execute())\n[(1, u'color', u'orange'), (1, u'data', u'none'), (1, u'size', u'big')]\n"]], ['SQLAlchemy - Dictionary of tags'], 8], [(782255, 0), [['first after creating the widget you set the policy:'], ['then you connect the context menu event to a slot:']], [[' w->setContextMenuPolicy(Qt::CustomContextMenu);\n']], ['PyQt and context menu'], 4], [(782255, 1), [['then you connect the context menu event to a slot:'], ['Finally, you implement the slot:']], [[' connect(w, SIGNAL(customContextMenuRequested(const QPoint &)), this, SLOT(ctxMenu(const QPoint &)));\n']], ['PyQt and context menu'], 4], [(782255, 2), [['Finally, you implement the slot:'], ["EDIT:  after looking around on google, here's the setup portion of my example in python:"]], [[' void A::ctxMenu(const QPoint &pos) {\n    QMenu *menu = new QMenu;\n    menu->addAction(tr("Test Item"), this, SLOT(test_slot()));\n    menu->exec(w->mapToGlobal(pos));\n}\n']], ['PyQt and context menu'], 4], [(782255, 3), [["EDIT:  after looking around on google, here's the setup portion of my example in python:"], ['-10000']], [[" self.w = QWhatever();\nself.w.setContextMenuPolicy(Qt.CustomContextMenu)\nself.connect(self.w,SIGNAL('customContextMenuRequested(QPoint)'), self.ctxMenu)\n"]], ['PyQt and context menu'], 4], [(785078, 0), [['subprocess  is better than using  os.system  or  os.popen'], ['Or just calculate the md5sum yourself with the  hashlib  module.']], [[' import subprocess\nresultMD5 = subprocess.Popen(["md5sum","myFile"],stdout=subprocess.PIPE).communicate()[0]\n']], ['Getting Python System Calls as string results'], 2], [(785078, 1), [['Or just calculate the md5sum yourself with the  hashlib  module.'], ['-10000']], [[' import hashlib\nresultMD5 = hashlib.md5(open("myFile").read()).hexdigest()\n']], ['Getting Python System Calls as string results'], 2], [(786149, 0), [['First, add at the top of your  views.py :'], ['Then, update all of your views to look like:']], [[' from django.template import RequestContext\n']], ['Basic MVT issue in Django'], 4], [(786149, 1), [['Then, update all of your views to look like:'], ['In your  settings.py , add:']], [[" def someview(request, ...)\n    ...\n    return render_to_response('viewtemplate.html', someContext, context_instance=RequestContext(request))\n"]], ['Basic MVT issue in Django'], 4], [(786149, 2), [['In your  settings.py , add:'], ['Each of these  context_processors  is a function takes the  request  object and returns a context in the form of a dictionary. Just put all the functions in  context_processors.py  inside the appropriate app. For example, a blog might have a sidebar with a list of recent entries and comments.  context_processors.py  would just define:']], [[" TEMPLATE_CONTEXT_PROCESSORS = (\n    'django.core.context_processors.auth',\n    ...\n    'myproj.app.context_processors.dynamic',\n    'myproj.app.context_processors.sidebar',\n    'myproj.app.context_processors.etc',\n)\n"]], ['Basic MVT issue in Django'], 4], [(786149, 3), [['Each of these  context_processors  is a function takes the  request  object and returns a context in the form of a dictionary. Just put all the functions in  context_processors.py  inside the appropriate app. For example, a blog might have a sidebar with a list of recent entries and comments.  context_processors.py  would just define:'], ['You can add as many or as few as you like.']], [[" def sidebar(request):\n    recent_entry_list = Entry.objects...\n    recent_comment_list = Comment.objects...\n    return {'recent_entry_list': recent_entry_list, 'recent_comment_list': recent_comment_list}\n"]], ['Basic MVT issue in Django'], 4], [(787935, 0), [['Try converting the params dictionary to utf-8 first... urlencode seems to like that better than unicode:'], ["Of course, this assumes your input is unicode. If your input is something other than unicode, you'll want to decode it to unicode first, then encode it: "]], [[" params = urllib.urlencode(dict([k, v.encode('utf-8')] for k, v in params.items()))\n"]], ['Python interface to PayPal - urllib.urlencode non-ASCII characters failing'], 2], [(787935, 1), [["Of course, this assumes your input is unicode. If your input is something other than unicode, you'll want to decode it to unicode first, then encode it: "], ['-10000']], [[" params['foo'] = my_raw_input.decode('iso-8859-1')\nparams = urllib.urlencode(dict([k, v.encode('utf-8')] for k, v in params.items()))\n"]], ['Python interface to PayPal - urllib.urlencode non-ASCII characters failing'], 2], [(789401, 0), [['From ImageMagicK documentation I was able to understand what the effect is actually doing.'], ['I converted that into PIL, and the result looks exactly like you want it to be:']], [[' convert input.png gradient.png -fx "v.p{0,u*v.h}" output.png\n\nv is the second image (gradient.png)\nu is the first image (input.png)\nv.p will get a pixel value\nv.p{0, 0} -> first pixel in the image\nv.h -> the hight of the second image\nv.p{0, u * v.h} -> will read the Nth pixel where N = u * v.h\n']], ['Converting an ImageMagick FX operator to pure Python code with PIL'], 2], [(789401, 1), [['I converted that into PIL, and the result looks exactly like you want it to be:'], ['-10000']], [[" import Image\n\n# open the input image\ninput_img = Image.open('input.png')\n\n# open gradient image and resize to 256px height\ngradient_img = Image.open('gradient.png')\ngradient_img = gradient_img.resize( (gradient_img.size[0], 256,) )\n\n# get pixel access object (significantly quicker than getpixel method)\ngradient_pix = gradient_img.load()\n\ndata = input_img.getdata()\ninput_img.putdata([gradient_pix[0, r] for (r, g, b, a) in data])\ninput_img.save('output.png')\n"]], ['Converting an ImageMagick FX operator to pure Python code with PIL'], 2], [(790103, 0), [["As mentioned in Alex Martelli's answer (although the link in the mailing-list message was broken, it should be  https://docs.python.org/extending/embedding.html#pure-embedding ).. The C way of calling.. "], ["The following code should work (although it's probably not the best code ever written..)"]], [[' print urllib.urlopen("http://google.com").read()\n']], ['Is it possible to call a Python module from ObjC?'], 2], [(790103, 1), [["The following code should work (although it's probably not the best code ever written..)"], ['Also  this tutorial  is good']], [[' #include <Python.h>\n\nint main(){\n    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n    Py_Initialize();\n\n    // import urllib\n    PyObject *mymodule = PyImport_Import(PyString_FromString("urllib"));\n    // thefunc = urllib.urlopen\n    PyObject *thefunc = PyObject_GetAttrString(mymodule, "urlopen");\n\n    // if callable(thefunc):\n    if(thefunc && PyCallable_Check(thefunc)){\n        // theargs = ()\n        PyObject *theargs = PyTuple_New(1);\n\n        // theargs[0] = "http://google.com"\n        PyTuple_SetItem(theargs, 0, PyString_FromString("http://google.com"));\n\n        // f = thefunc.__call__(*theargs)\n        PyObject *f = PyObject_CallObject(thefunc, theargs);\n\n        // read = f.read\n        PyObject *read = PyObject_GetAttrString(f, "read");\n\n        // result = read.__call__()\n        PyObject *result = PyObject_CallObject(read, NULL);\n\n\n        if(result != NULL){\n            // print result\n            printf("Result of call: %s", PyString_AsString(result));\n        }\n    }\n    [pool release];\n}\n']], ['Is it possible to call a Python module from ObjC?'], 2], [(790560, 0), [['In Python attributes are implemented using a dictionary :'], ['But for "object", it uses a \'dictproxy\' as an interface to prevent such assignement :']], [[' >>> t = test()\n>>> t.__dict__["foo"] = "bla"\n>>> t.foo\n\'bla\'\n']], ['Object class override or modify'], 2], [(790560, 1), [['But for "object", it uses a \'dictproxy\' as an interface to prevent such assignement :'], ["So no, you can't."]], [[' >>> object.__dict__["test"] = "test"\nTypeError: \'dictproxy\' object does not support item assignment\n']], ['Object class override or modify'], 2], [(791708, 0), [['In python 3.0 you can use a dict comprehension:'], ["This is also possible in Python 2, but it's a bit uglier:"]], [[' {an_object.name : an_object for an_object in object_list}\n']], ['Best way to turn a list into a dict, where the keys are a value of each object?'], 2], [(791708, 1), [["This is also possible in Python 2, but it's a bit uglier:"], ['-10000']], [[' dict([(an_object.name, an_object) for an_object in object_list])\n']], ['Best way to turn a list into a dict, where the keys are a value of each object?'], 2], [(792304, 0), [['An iterator is just an object with a next method.  Every time you call it, it returns the next item in a collection.  If you need to access arbitrary indexes, you will pretty much have to convert it into a list.  Instead of this:'], ['You can say this though:']], [[" for result in messages:\n    times.append(result.group('time'))\n"]], ['Navigating Callable-Iterators'], 2], [(792304, 1), [['You can say this though:'], ["This does pretty much the same thing.  However, I should warn you that doing this for large result sets will be pretty slow and will eat up a bunch of memory.  Thus, you shouldn't do this if you don't need random access.  If data an untrusted user enters will determine how many results will appear, you might also want to limit the number of things they can enter."]], [[" times = [result.group('time') for result in messages]\n"]], ['Navigating Callable-Iterators'], 2], [(795190, 0), [['Version 1 - delegate everything.'], ['Version 2 - delegate just one step']], [[' class Subclass1(BaseClass):\n    def __init__(self):\n        super( Subclass1, self ).__init__()\n        self.specific()\n        super( Subclass1, self ).finalizeInitialization()\n']], ['How to perform common post-initialization tasks in inherited Python classes?'], 2], [(795190, 1), [['Version 2 - delegate just one step'], ['-10000']], [[' class BaseClass:\n    def __init__(self):\n        print \'base __init__\'\n        self.common1()\n        self.specific()\n        self.finalizeInitialization()\n\n    def common1(self):\n        print \'common 1\'\n\n    def finalizeInitialization(self):\n        print \'finalizeInitialization [common2]\'\n\n    def specific( self ):\n        # two choices:\n        # if this is "abstract": raise an exception\n        # if this is "concrete": pass\n']], ['How to perform common post-initialization tasks in inherited Python classes?'], 2], [(795570, 0), [['The simplest thing that I could find was using the scipy.stats package'], ['A more complicated, but purely numpy solution is']], [[' In [8]: x\nOut[8]: \narray([[ 0. ,  0. ,  0. ],\n       [-1. ,  0. , -1. ],\n       [-2. ,  0. , -2. ],\n       [-3. ,  0. , -3. ],\n       [-4. ,  0.1, -4. ]])\nIn [9]: y\nOut[9]: \narray([[0. , 0. ],\n       [1. , 0. ],\n       [2. , 0. ],\n       [3. , 0. ],\n       [4. , 0.1]])\n\nIn [10]: import scipy.stats\n\nIn [27]: (scipy.stats.cov(y,x)\n          /(numpy.sqrt(scipy.stats.var(y,axis=0)[:,numpy.newaxis]))\n          /(numpy.sqrt(scipy.stats.var(x,axis=0))))\nOut[27]: \narray([[-1.        ,  0.70710678, -1.        ],\n       [-0.70710678,  1.        , -0.70710678]])\n']], ['Correlate one set of vectors to another in numpy?'], 2], [(795570, 1), [['A more complicated, but purely numpy solution is'], ["This will be slower because it computes the correlation of each element in x with each other element in x, which you don't want.  Also, the advanced indexing techniques used to get the subset of the array you desire can make your head hurt."]], [[' In [40]: numpy.corrcoef(x.T,y.T)[numpy.arange(x.shape[1])[numpy.newaxis,:]\n                                 ,numpy.arange(y.shape[1])[:,numpy.newaxis]]\nOut[40]: \narray([[-1.        ,  0.70710678, -1.        ],\n       [-0.70710678,  1.        , -0.70710678]])\n']], ['Correlate one set of vectors to another in numpy?'], 2], [(799987, 0), [['Python:'], ['CSharp:']], [[' import clr\nclr.AddReference("IronPythonDelegates")\n\nimport IronPythonDelegates\n\ndef camActionPy(camera, time):\n  print "Camera: " + str(camera) + ", time: " + str(time)\n\nIronPythonDelegates.CameraAnimation(camActionPy);\n']], ['How to pass a lambda expression to a C# constructor from an IronPython script?'], 7], [(799987, 1), [['CSharp:'], ["I corrected the above to use System.Action, and it no longer requires explicit reflection.  It's a bit weird though.  For some reason, I could construct a user-created delegate like:"]], [[' namespace IronPythonDelegates\n{\n    public class Camera{}\n\n    public class CameraAnimation\n    {\n    private System.Action<Camera, float> animation;\n\n    public CameraAnimation(System.Action<Camera, float> animation)\n    {\n        this.animation = animation;\n        this.animation(new Camera(), 1.5f);\n    }\n    }\n }\n']], ['How to pass a lambda expression to a C# constructor from an IronPython script?'], 7], [(799987, 2), [["I corrected the above to use System.Action, and it no longer requires explicit reflection.  It's a bit weird though.  For some reason, I could construct a user-created delegate like:"], ['but could not do so with System.Action.  E.g. with ']], [[' explicitTestAction = IronPythonDelegates.TestAction[IronPythonDelegates.Camera, System.Single](camActionPy);\nIronPythonDelegates.CameraAnimation(explicitTestAction);\n']], ['How to pass a lambda expression to a C# constructor from an IronPython script?'], 7], [(799987, 3), [['but could not do so with System.Action.  E.g. with '], ['explicitSystemAction is null. TestAction was just defined as:']], [[' explicitSystemAction = System.Action[IronPythonDelegates.Camera, System.Single](camActionPy)\nIronPythonDelegates.CameraAnimation(explicitSystemAction);\n']], ['How to pass a lambda expression to a C# constructor from an IronPython script?'], 7], [(799987, 4), [['explicitSystemAction is null. TestAction was just defined as:'], ["But luckily either way it's fine to just do:"]], [[' public delegate void TestAction<T1, T2>(T1 one, T2 two);\n']], ['How to pass a lambda expression to a C# constructor from an IronPython script?'], 7], [(799987, 5), [["But luckily either way it's fine to just do:"], ['or ']], [[' CameraAnimation(System.Action) \n']], ['How to pass a lambda expression to a C# constructor from an IronPython script?'], 7], [(799987, 6), [['or '], ["though for some reason I don't remember that working when I first tried..."]], [[' CameraAnimation(TestAction)\n']], ['How to pass a lambda expression to a C# constructor from an IronPython script?'], 7], [(800015, 0), [["You method is basically correct. \nString formatting has a less often used  *  operator you can put for the formatting sizes, here's some code:"], ['and it outputs']], [[" import re\n\ndef parse_float(str):\n  re_float = re.compile(r'(-?)(\\d+)\\.(\\d+)')\n  grps = re_float.search(str)\n  sign, decimal, fraction = grps.groups()\n  float_val = float('%s%s.%s' % (sign, decimal, fraction))\n  total_len = len(grps.group(0))\n  print '%*.*f'  % (total_len, len(fraction), float_val)\n\nparse_float('1.2345678')\nparse_float('1.234')\nparse_float('1.2340000')\n"]], ['keeping same formatting for floating point values'], 2], [(800015, 1), [['and it outputs'], ['-10000']], [[' 1.2345678\n1.234\n1.2340000\n']], ['keeping same formatting for floating point values'], 2], [(801354, 0), [['Since request.POST and request.GET in the view are instances of QueryDict, you could do this:'], ['Then something like this:']], [[" <form action='/my/path/' method='POST'>\n<input type='text' name='hi' value='heya1'>\n<input type='text' name='hi' value='heya2'>\n<input type='submit' value='Go'>\n</form>\n"]], ["Django equivalent of PHP's form value array/associative array"], 2], [(801354, 1), [['Then something like this:'], ['-10000']], [[" def mypath(request):\n    if request.method == 'POST':\n        greetings = request.POST.getlist('hi') # will be ['heya1','heya2']\n"]], ["Django equivalent of PHP's form value array/associative array"], 2], [(801912, 0), [['Here\'s the "Normalize to Days" version.'], ['You can trivially turn a floating-point number into a timedelta. ']], [[' float(timedelta.days) + float(timedelta.seconds) / float(86400)\n']], ['How to put timedelta in django model?'], 4], [(801912, 1), [['You can trivially turn a floating-point number into a timedelta. '], ['Here\'s the "Normalize to Seconds" version.']], [[' >>> datetime.timedelta(2.5)\ndatetime.timedelta(2, 43200)\n']], ['How to put timedelta in django model?'], 4], [(801912, 2), [['Here\'s the "Normalize to Seconds" version.'], ["Here's the reverse (using seconds)"]], [[' timedelta.days*86400+timedelta.seconds\n']], ['How to put timedelta in django model?'], 4], [(801912, 3), [["Here's the reverse (using seconds)"], ['-10000']], [[' datetime.timedelta( someSeconds/86400 )\n']], ['How to put timedelta in django model?'], 4], [(802578, 0), [["Having a variable in Java be  final  basically means that once you assign to a variable, you may not reassign that variable to point to another object.  It actually doesn't mean that the object can't be modified.  For example, the following Java code works perfectly well:"], ["but the following wouldn't even compile:"]], [[' public final List<String> messages = new LinkedList<String>();\n\npublic void addMessage()\n{\n    messages.add("Hello World!");  // this mutates the messages list\n}\n']], ['`final` keyword equivalent for variables in Python?'], 2], [(802578, 1), [["but the following wouldn't even compile:"], ['So your question is about whether  final  exists in Python.  It does not.']], [[" public final List<String> messages = new LinkedList<String>();\n\npublic void changeMessages()\n{\n    messages = new ArrayList<String>();  // can't change a final variable\n}\n"]], ['`final` keyword equivalent for variables in Python?'], 2], [(803265, 0), [['I tried this, and for some reason while the code'], ['buffers aggressively, the variant']], [[' for line in p.stdout:\n  ...\n']], ['Getting realtime output using subprocess'], 2], [(803265, 1), [['buffers aggressively, the variant'], ['does not. Apparently this is a known bug:  http://bugs.python.org/issue3907']], [[' while True:\n  line = p.stdout.readline()\n  if not line: break\n  ...\n']], ['Getting realtime output using subprocess'], 2], [(804992, 0), [['ElementTree is provided as part of the standard Python libs. ElementTree is pure python, and cElementTree is the faster C implementation:'], ["Here's an example usage, where I'm consuming xml from a RESTful web service:"]], [[' # Try to use the C implementation first, falling back to python\ntry:\n    from xml.etree import cElementTree as ElementTree\nexcept ImportError, e:\n    from xml.etree import ElementTree\n']], ['How to consume XML from RESTful web services using Django / Python?'], 2], [(804992, 1), [["Here's an example usage, where I'm consuming xml from a RESTful web service:"], ['-10000']], [[' def find(*args, **kwargs):\n    """Find a book in the collection specified"""\n\n    search_args = [(\'access_key\', api_key),]\n    if not is_valid_collection(kwargs[\'collection\']):\n        return None\n    kwargs.pop(\'collection\')\n    for key in kwargs:\n        # Only the first keword is honored\n        if kwargs[key]:\n            search_args.append((\'index1\', key))\n            search_args.append((\'value1\', kwargs[key]))\n            break\n\n    url = urllib.basejoin(api_url, \'%s.xml\' % \'books\')\n    data = urllib.urlencode(search_args)\n    req = urllib2.urlopen(url, data)\n    rdata = []\n    chunk = \'xx\'\n    while chunk:\n        chunk = req.read()\n        if chunk:\n            rdata.append(chunk)\n    tree = ElementTree.fromstring(\'\'.join(rdata))\n    results = []\n    for i, elem in enumerate(tree.getiterator(\'BookData\')):\n        results.append(\n               {\'isbn\': elem.get(\'isbn\'),\n                \'isbn13\': elem.get(\'isbn13\'),\n                \'title\': elem.find(\'Title\').text,\n                \'author\': elem.find(\'AuthorsText\').text,\n                \'publisher\': elem.find(\'PublisherText\').text,}\n             )\n    return results\n']], ['How to consume XML from RESTful web services using Django / Python?'], 2], [(805393, 0), [['The trick is to make it easy to use and keep it "django" like. We use a make_instance function which takes the result of cursor and creates instances of a model populated from the cursor. This is nice because the cursor might return additional fields. Then you can use those instances in your code / templates much like normal django model objects.'], ['#  Use it like this:   ']], [[" def make_instance(instance, values):\n    '''\n    Copied from eviscape.com\n\n    generates an instance for dict data coming from an sp\n\n    expects:\n        instance - empty instance of the model to generate\n        values -   dictionary from a stored procedure with keys that are named like the\n                   model's attributes\n    use like:\n        evis = InstanceGenerator(Evis(), evis_dict_from_SP)\n\n    >>> make_instance(Evis(), {'evi_id': '007', 'evi_subject': 'J. Bond, Architect'})\n    <Evis: J. Bond, Architect>\n\n    '''\n    attributes = filter(lambda x: not x.startswith('_'), instance.__dict__.keys())\n\n    for a in attributes:\n        try:\n            # field names from oracle sp are UPPER CASE\n            # we want to put PIC_ID in pic_id etc.\n            setattr(instance, a, values[a.upper()])\n            del values[a.upper()]\n        except:\n            pass\n\n    #add any values that are not in the model as well\n    for v in values.keys():\n        setattr(instance, v, values[v])\n        #print 'setting %s to %s' % (v, values[v])\n\n    return instance\n"]], ["What is the best way to access stored procedures in Django's ORM"], 3], [(805393, 1), [['#  Use it like this:   '], ['#  And here are some helper functions:']], [[' pictures = [make_instance(Pictures(), item) for item in picture_dict]\n']], ["What is the best way to access stored procedures in Django's ORM"], 3], [(805393, 2), [['#  And here are some helper functions:'], ['cheers, Simon.']], [[' def call_an_sp(self, var):\n    cursor = connection.cursor()\n    cursor.callproc("fn_sp_name", (var,))\n    return self.fn_generic(cursor)\n\n\ndef fn_generic(self, cursor):\n    msg = cursor.fetchone()[0]\n    cursor.execute(\'FETCH ALL IN "%s"\' % msg)\n    thing = create_dict_from_cursor(cursor)\n    cursor.close()\n    return thing\n\ndef create_dict_from_cursor(cursor):\n    rows = cursor.fetchall()\n    # DEBUG settings (used to) affect what gets returned. \n    if DEBUG:\n        desc = [item[0] for item in cursor.cursor.description]\n    else:\n        desc = [item[0] for item in cursor.description]\n    return [dict(zip(desc, item)) for item in rows]    \n']], ["What is the best way to access stored procedures in Django's ORM"], 3], [(806835, 0), [['settings.py:'], ['base.html:']], [[' TEMPLATE_CONTEXT_PROCESSORS = (\n    "django.core.context_processors.auth",\n    "django.core.context_processors.debug",\n    "django.core.context_processors.i18n",\n    "django.core.context_processors.media",\n    "django.core.context_processors.request",\n)\n']], ['Django: Redirect to previous page after login'], 3], [(806835, 1), [['base.html:'], ['registration/login.html:']], [[' <a href="{% url django.contrib.auth.views.login %}?next={{request.path}}">Login</a>\n']], ['Django: Redirect to previous page after login'], 3], [(806835, 2), [['registration/login.html:'], ['-10000']], [[' {% block content %}\n<form method="post" action="">\n  {{form.as_p}}\n<input type="submit" value="Login">\n</form>\n{% endblock %}\n']], ['Django: Redirect to previous page after login'], 3], [(807863, 0), [["Alex is absolutely right, it's more efficient to do it this way:"], ['And then read the array like that:']], [[" from array import array\noutput_file = open('file', 'wb')\nfloat_array = array('d', [3.14, 2.7, 0.0, -1.0, 1.1])\nfloat_array.tofile(output_file)\noutput_file.close()\n"]], ['How to output list of floats to a binary file in Python'], 2], [(807863, 1), [['And then read the array like that:'], ['array.array  objects also have a  .fromfile  method which can be used for reading the file, if you know the count of items in advance (e.g. from the file size, or some other mechanism)']], [[" input_file = open('file', 'r')\nfloat_array = array('d')\nfloat_array.fromstring(input_file.read())\n"]], ['How to output list of floats to a binary file in Python'], 2], [(809837, 0), [['Here is an example'], ['Version 2, puts more into the regex, but as a result, changes the output:']], [[' import re\n\npattern = re.compile(r"\\[\\[([\\w \\|]+)\\]\\]")\ntext = "blah blah [[Alexander of Paris|poet named Alexander]] bldfkas"\nresults = pattern.findall(text)\n\noutput = []\nfor link in results:\n    output.append(link.split("|")[0])\n\n# outputs [\'Alexander of Paris\']\n']], ['Python regex for finding contents of MediaWiki markup links'], 3], [(809837, 1), [['Version 2, puts more into the regex, but as a result, changes the output:'], ['Version 3, if you only want the link without the title.']], [[' import re\n\npattern = re.compile(r"\\[\\[([\\w ]+)(\\|[\\w ]+)?\\]\\]")\ntext = "[[a|b]] fdkjf [[c|d]] fjdsj [[efg]]"\nresults = pattern.findall(text)\n\n# outputs [(\'a\', \'|b\'), (\'c\', \'|d\'), (\'efg\', \'\')]\n\nprint [link[0] for link in results]\n\n# outputs [\'a\', \'c\', \'efg\']\n']], ['Python regex for finding contents of MediaWiki markup links'], 3], [(809837, 2), [['Version 3, if you only want the link without the title.'], ['-10000']], [[' pattern = re.compile(r"\\[\\[([\\w ]+)(?:\\|[\\w ]+)?\\]\\]")\ntext = "[[a|b]] fdkjf [[c|d]] fjdsj [[efg]]"\nresults = pattern.findall(text)\n\n# outputs [\'a\', \'c\', \'efg\']\n']], ['Python regex for finding contents of MediaWiki markup links'], 3], [(811548, 0), [["The way I've done this in the past:"], ['Then you set it up in your connection:']], [[' def dict_factory(cursor, row):\n    d = {}\n    for idx,col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d\n']], ['Sqlite and Python -- return a dictionary using fetchone()?'], 2], [(811548, 1), [['Then you set it up in your connection:'], ['This works under pysqlite-2.4.1 and python 2.5.4.']], [[' from pysqlite2 import dbapi2 as sqlite\nconn = sqlite.connect(...)\nconn.row_factory = dict_factory\n']], ['Sqlite and Python -- return a dictionary using fetchone()?'], 2], [(812422, 0), [['That out of the way, the following code will make the logging module behave as you desire.'], ['Output:']], [[' import logging\nimport types\n\nclass ExtendedLogRecord(logging.LogRecord):\n\n    def getMessage(self):\n        """\n        Return the message for this LogRecord.\n\n        Return the message for this LogRecord after merging any user-supplied\n        arguments with the message.\n        """\n        if not hasattr(types, "UnicodeType"): #if no unicode support...\n            msg = str(self.msg)\n        else:\n            try:\n                msg = str(self.msg)\n            except UnicodeError:\n                msg = self.msg      #Defer encoding till later\n        if self.args:\n            msg +=\' \'+\' \'.join(map(str,self.args))\n        return msg\n\n#Patch the logging default logging class\nlogging.RootLogger.makeRecord=lambda self,*args: ExtendedLogRecord(*args)\n\nsome_dict={\'foo\':14,\'bar\':15}\nlogging.error(\'text\',15,\'some dictionary\',some_dict)\n']], ['Why does python logging package not support printing variable length args?'], 2], [(812422, 1), [['Output:'], ['-10000']], [[" ERROR:root:text 15 some dictionary {'foo': 14, 'bar': 15}\n"]], ['Why does python logging package not support printing variable length args?'], 2], [(812477, 0), [["The logging module doesn't appear to support this.  In the long run you'd probably be better off creating a new module, and adding this feature via sub-classing the items in the existing logging module to add the features you need, but you could also achieve this behavior pretty easily with a decorator:"], ['Output:']], [[' class callcounted(object):\n    """Decorator to determine number of calls for a method"""\n\n    def __init__(self,method):\n        self.method=method\n        self.counter=0\n\n    def __call__(self,*args,**kwargs):\n        self.counter+=1\n        return self.method(*args,**kwargs)\n\n\nimport logging\nlogging.error=callcounted(logging.error)\nlogging.error(\'one\')\nlogging.error(\'two\')\nprint logging.error.counter\n']], ['How many times was logging.error() called?'], 2], [(812477, 1), [['Output:'], ['-10000']], [[' ERROR:root:one\nERROR:root:two\n2\n']], ['How many times was logging.error() called?'], 2], [(813882, 0), [['This is a new that solution detects when the result of the function is used for assignment by examining its own bytecode. There is no bytecode writing done, and it should even be compatible with future versions of Python because it uses the opcode module for definitions.'], ['This is the old solution that detects whenever you are calling the function while debugging under python -i or PDB.']], [[' import inspect, dis, opcode\n\ndef check_status():\n\n    try:\n        frame = inspect.currentframe().f_back\n        next_opcode = opcode.opname[ord(frame.f_code.co_code[frame.f_lasti+3])]\n        if next_opcode == "POP_TOP": \n            # or next_opcode == "RETURN_VALUE":\n            # include the above line in the if statement if you consider "return check_status()" to be assignment\n            print "I was not assigned"\n            print "Pretty printer status check 0.02v"\n            print "NOTE: This is so totally not written for giant robots"\n            return\n    finally:\n        del frame    \n\n    # do normal routine\n\n    info = {\'cond_op\': 1, \'t_canoncharge\': 1342, \'stage_booster\': 5}\n\n    return info\n\n# no assignment    \ndef test1():\n    check_status()\n\n# assignment\ndef test2():\n    a = check_status()\n\n# could be assignment (check above for options)\ndef test3():\n    return check_status()\n\n# assignment\ndef test4():\n    a = []\n    a.append(check_status())\n    return a\n']], ['Is there a way to check whether function output is assigned to a variable in Python?'], 2], [(813882, 1), [['This is the old solution that detects whenever you are calling the function while debugging under python -i or PDB.'], ['-10000']], [[' import inspect\n\ndef check_status():\n    frame = inspect.currentframe()\n    try:\n        if frame.f_back.f_code.co_name == "<module>" and frame.f_back.f_code.co_filename == "<stdin>":\n            print "Pretty printer status check 0.02v"\n            print "NOTE: This is so totally not written for giant robots"\n    finally:\n        del frame\n\n    # do regular stuff   \n    return {\'cond_op\': 1, \'t_canoncharge\': 1342, \'stage_booster\': 5}\n\ndef test():\n    check_status()\n\n\n>>> check_status()\nPretty printer status check 0.02v\nNOTE: This is so totally not written for giant robots\n{\'cond_op\': 1, \'t_canoncharge\': 1342, \'stage_booster\': 5}\n\n>>> a=check_status()\nPretty printer status check 0.02v\nNOTE: This is so totally not written for giant robots\n\n>>> a\n{\'cond_op\': 1, \'t_canoncharge\': 1342, \'stage_booster\': 5}\n\ntest()\n>>>\n']], ['Is there a way to check whether function output is assigned to a variable in Python?'], 2], [(817087, 0), [['In the line:'], ['In the line:']], [[' def wrapper(func, *args):\n']], ['Call a function with argument list in python'], 3], [(817087, 1), [['In the line:'], ['So you can do the following:']], [['     func(*args)\n']], ['Call a function with argument list in python'], 3], [(817087, 2), [['So you can do the following:'], ['In  wrapper2 , the list is passed explicitly, but in both wrappers  args  contains the list  [1,2,3] .']], [[' def wrapper1(func, *args): # with star\n    func(*args)\n\ndef wrapper2(func, args): # without star\n    func(*args)\n\ndef func2(x, y, z):\n    print x+y+z\n\nwrapper1(func2, 1, 2, 3)\nwrapper2(func2, [1, 2, 3])\n']], ['Call a function with argument list in python'], 3], [(817122, 0), [['Add a space before the \\d+.'], ['Edit:  After looking at the comments, I decided to form a more complete answer.  I think this accounts for all the cases.']], [[' >>> s = "This must not b3 delet3d, but the number at the end yes 134411"\n>>> s = re.sub(" \\d+", " ", s)\n>>> s\n\'This must not b3 delet3d, but the number at the end yes \'\n']], ['Delete digits in Python (Regex)'], 2], [(817122, 1), [['Edit:  After looking at the comments, I decided to form a more complete answer.  I think this accounts for all the cases.'], ['-10000']], [[' s = re.sub("^\\d+\\s|\\s\\d+\\s|\\s\\d+$", " ", s)\n']], ['Delete digits in Python (Regex)'], 2], [(817284, 0), [["Also, your ModelForm should return the model it's saving. Usually a ModelForm's  save  will look something like:"], ["Aside:  Why not just use  ManyToManyField s in the Model so you don't have to do this? Seems like you're storing redundant data and making more work for yourself (and me  :P )."]], [[' def save(self, commit=True):\n    m = super(CallResultTypeForm, self).save(commit=False)\n    # do custom stuff\n    if commit:\n        m.save()\n    return m\n']], ['Overriding the save method in Django ModelForm'], 2], [(817284, 1), [["Aside:  Why not just use  ManyToManyField s in the Model so you don't have to do this? Seems like you're storing redundant data and making more work for yourself (and me  :P )."], ["This allows for inheritance of  CallResultTypeForm , just in case that's ever necessary."]], [[' from django.db.models import AutoField  \ndef copy_model_instance(obj):  \n    """\n    Create a copy of a model instance. \n    M2M relationships are currently not handled, i.e. they are not copied. (Fortunately, you don\'t have any in this case)\n    See also Django #4027. From http://blog.elsdoerfer.name/2008/09/09/making-a-copy-of-a-model-instance/\n    """  \n    initial = dict([(f.name, getattr(obj, f.name)) for f in obj._meta.fields if not isinstance(f, AutoField) and not f in obj._meta.parents.values()])  \n    return obj.__class__(**initial)  \n\nclass CallResultTypeForm(ModelForm):\n    callResult = ModelMultipleChoiceField(queryset=CallResult.objects.all())\n    campaign = ModelMultipleChoiceField(queryset=Campaign.objects.all())\n    callType = ModelMultipleChoiceField(queryset=CallType.objects.all())\n\n    def save(self, commit=True, *args, **kwargs):\n        m = super(CallResultTypeForm, self).save(commit=False, *args, **kwargs)\n        results = []\n        for cr in self.callResult:\n            for c in self.campain:\n                for ct in self.callType:\n                    m_new = copy_model_instance(m)\n                    m_new.callResult = cr\n                    m_new.campaign = c\n                    m_new.calltype = ct\n                    if commit:\n                        m_new.save()\n                    results.append(m_new)\n         return results\n']], ['Overriding the save method in Django ModelForm'], 2], [(817705, 0), [['What happens when seed isn\'t set (that\'s the "i is None" case):'], ['and the expovariate:']], [[' if a is None:\n    try:\n        a = long(_hexlify(_urandom(16)), 16)\n    except NotImplementedError:\n        import time\n        a = long(time.time() * 256) # use fractional seconds\n']], ["Python's random: What happens if I don't use seed(someValue)?"], 2], [(817705, 1), [['and the expovariate:'], ['obviously uses the same underlying random generator as every other method, and so is identically affected by the seeding or lack thereof (really, how else would it have been done?-)']], [[' random = self.random\nu = random()\nwhile u <= 1e-7:\n    u = random()\nreturn -_log(u)/lambd\n']], ["Python's random: What happens if I don't use seed(someValue)?"], 2], [(818705, 0), [['You can write your code as:'], ['If you are still getting blank lines in there, you can add in a test:']], [[" lines = []\nf = open(filename)\nfor line in f:\n    if not line.startswith('com'):\n        lines.append(line.strip())\n"]], ['Spliting a file into lines in Python using re.split'], 3], [(818705, 1), [['If you are still getting blank lines in there, you can add in a test:'], ['If you really want it in one line:']], [[" lines = []\nf = open(filename)\nfor line in f:\n    if line.strip() and not line.startswith('com'):\n        lines.append(line.strip())\n"]], ['Spliting a file into lines in Python using re.split'], 3], [(818705, 2), [['If you really want it in one line:'], ["Finally, if you're on python 2.6, look at the  with statement  to improve things a little more."]], [[" lines = [line.strip() for line in open(filename) if line.strip() and not line.startswith('com')]\n"]], ['Spliting a file into lines in Python using re.split'], 3], [(818936, 0), [['I think this might cost less than the use of regexes though i am not totally clear on what you are trying to accomplish'], ['I have learned from other posts it is cheaper and better to wrap up all of the data when you are reading through a file the first time.  Thus if you wanted to wrap up the whole datafile in one pass then you could do the following instead']], [[" symbolList=[]\nfor line in open('datafile.txt','r'):\nif '.o' in line:\n    tempname=line.split()[-1][0:-2]\n            pass\n\nif 'FUNC' not in line:\n    pass\n\nelse:\n    symbolList.append((tempname,line.split('|')[0]))\n"]], ['Parse a .txt file'], 3], [(818936, 1), [['I have learned from other posts it is cheaper and better to wrap up all of the data when you are reading through a file the first time.  Thus if you wanted to wrap up the whole datafile in one pass then you could do the following instead'], ['Then if you want the Func type you would use the following:']], [[" fullDict={}\nfor line in open('datafile.txt','r'):\n    if '.o' in line:\n        tempname=line.split()[-1][0:-2]\n    if '|' not in line:\n        pass\n    else:\n        tempDict={}\n            dataList=[dataItem.strip() for dataItem in line.strip().split('|')]\n            name=dataList[0].strip()\n            tempDict['Value']=dataList[1]\n            tempDict['Class']=dataList[2]\n            tempDict['Type']=dataList[3]\n            tempDict['Size']=dataList[4]\n            tempDict['Line']=dataList[5]\n            tempDict['Section']=dataList[6]\n            tempDict['o.name']=tempname\n            fullDict[name]=tempDict\n            tempDict={}\n"]], ['Parse a .txt file'], 3], [(818936, 2), [['Then if you want the Func type you would use the following:'], ['Sorry for being so obsessive but I am trying to get a better handle on creating list comprehensions and I decided that this was worthy of a shot']], [[" funcDict={}\nfor record in fullDict:\n    if fullDict[record]['Type']=='FUNC':\n        funcDict[record]=fullDict[record]\n"]], ['Parse a .txt file'], 3], [(819355, 0), [['This article  shows you can do it with  socket  and  struct  modules without too much extra effort.  I added a little to the article as follows:'], ['This outputs:']], [[' import socket,struct\n\ndef makeMask(n):\n    "return a mask of n bits as a long integer"\n    return (2L<<n-1) - 1\n\ndef dottedQuadToNum(ip):\n    "convert decimal dotted quad string to long integer"\n    return struct.unpack(\'L\',socket.inet_aton(ip))[0]\n\ndef networkMask(ip,bits):\n    "Convert a network address to a long integer" \n    return dottedQuadToNum(ip) & makeMask(bits)\n\ndef addressInNetwork(ip,net):\n   "Is an address in a network"\n   return ip & net == net\n\naddress = dottedQuadToNum("192.168.1.1")\nnetworka = networkMask("10.0.0.0",24)\nnetworkb = networkMask("192.168.0.0",24)\nprint (address,networka,networkb)\nprint addressInNetwork(address,networka)\nprint addressInNetwork(address,networkb)\n']], ['How can I check if an ip is in a network in python'], 3], [(819355, 1), [['This outputs:'], ['If you just want a single function that takes strings it would look like this:']], [[' False\nTrue\n']], ['How can I check if an ip is in a network in python'], 3], [(819355, 2), [['If you just want a single function that takes strings it would look like this:'], ['-10000']], [[' import socket,struct\n\ndef addressInNetwork(ip,net):\n   "Is an address in a network"\n   ipaddr = struct.unpack(\'L\',socket.inet_aton(ip))[0]\n   netaddr,bits = net.split(\'/\')\n   netmask = struct.unpack(\'L\',socket.inet_aton(netaddr))[0] & ((2L<<int(bits)-1) - 1)\n   return ipaddr & netmask == netmask\n']], ['How can I check if an ip is in a network in python'], 3], [(821173, 0), [['-10000'], ['That prints:']], [[' from BeautifulSoup import BeautifulSoup\n\nsoup = BeautifulSoup(\'\'\'\n<html>\n   <head><title>Testing</title></head>\n   <body>\n     <a href="http://foo.com/">foo</a>\n     <a href="http://bar.com/bar">Bar</a>\n   </body>\n</html>\'\'\')\n\nfor link in soup.findAll(\'a\'): # find all links\n    link[\'href\'] = link[\'href\'] + \'?foo\'\n\nprint soup\n']], ['Where can I find some "hello world"-simple Beautiful Soup examples?'], 2], [(821173, 1), [['That prints:'], ["The  documentation  also has some  examples for changing attributes . It is an extensive tutorial that covers all common aspects of BeautifulSoup. I don't know what is missing from the documentation, maybe you should clarify."]], [[' <html>\n<head><title>Testing</title></head>\n<body>\n<a href="http://foo.com/?foo">foo</a>\n<a href="http://bar.com/bar?foo">Bar</a>\n</body>\n</html>\n']], ['Where can I find some "hello world"-simple Beautiful Soup examples?'], 2], [(823030, 0), [["Really simple way, though I'm not sure you'd call it Pythonic:"], ['Saner way:']], [[' newDict = eval(repr(myDict).lower())\n']], ['Elegant, pythonic solution for forcing all keys and values to lower case in nested dictionaries of Unicode strings?'], 2], [(823030, 1), [['Saner way:'], ['-10000']], [[' newDict = dict((k1.lower(),\n                dict((k2.lower(),\n                      [s.lower() for s in v2]) for k2, v2 in v1.iteritems()))\n               for k1, v1 in myDict.iteritems())\n']], ['Elegant, pythonic solution for forcing all keys and values to lower case in nested dictionaries of Unicode strings?'], 2], [(825955, 0), [["If your goal is to only have things converted to upper case when saving in the admin section, you'll want to  create a form with custom validation  to make the case change:"], ['If your goal is to always have the value in uppercase, then you should  override save  in the model field:']], [[' class MyArticleAdminForm(forms.ModelForm):\n    class Meta:\n        model = Article\n    def clean_name(self):\n        return self.cleaned_data["name"].upper()\n']], ['Changing case (upper/lower) on adding data through Django admin site'], 2], [(825955, 1), [['If your goal is to always have the value in uppercase, then you should  override save  in the model field:'], ['-10000']], [[' class Blog(models.Model):\n    name = models.CharField(max_length=100)\n    def save(self, force_insert=False, force_update=False):\n        self.name = self.name.upper()\n        super(Blog, self).save(force_insert, force_update)\n']], ['Changing case (upper/lower) on adding data through Django admin site'], 2], [(830651, 0), [['-10000'], ['Yes. I solely use emacs with IronPython. "M-/" is good enough for me.\nI occasionally switch to Reflector and MSDN when I really need information on the SDK.']], [[' do you use the .NET framework without Intellisense?\n']], ['How are you using IronPython?'], 6], [(830651, 1), [['Yes. I solely use emacs with IronPython. "M-/" is good enough for me.\nI occasionally switch to Reflector and MSDN when I really need information on the SDK.'], ['You actually mean "Automatic Refactoring" when you said "Refactoring".\nI do a lot of Refactoring while coding. It could be better with some automation.\nBut I\'m fine with manual refactoring. It also force me to include more tests.\nI\'ve never use any IDE with refactoring feature extensively, perhaps that\'s why \nI\'m not suffering.  Simple search-and-replace is fine for me.']], [[' Refactoring\n']], ['How are you using IronPython?'], 6], [(830651, 2), [['You actually mean "Automatic Refactoring" when you said "Refactoring".\nI do a lot of Refactoring while coding. It could be better with some automation.\nBut I\'m fine with manual refactoring. It also force me to include more tests.\nI\'ve never use any IDE with refactoring feature extensively, perhaps that\'s why \nI\'m not suffering.  Simple search-and-replace is fine for me.'], ["Yes, this is my MAJOR pain, eventhough I'm working on 3GHz Quad-core with 4G Ram,\nit does takes 50s to run 359 test-cases. Half of that time (25s) is the startup time !!\nIt seems IronPython perform some very heavy processing task when importing large module.\nI'm now planning to spit my tests into parts to mitigate this pain."]], [[' Crippling startup time\n']], ['How are you using IronPython?'], 6], [(830651, 3), [["Yes, this is my MAJOR pain, eventhough I'm working on 3GHz Quad-core with 4G Ram,\nit does takes 50s to run 359 test-cases. Half of that time (25s) is the startup time !!\nIt seems IronPython perform some very heavy processing task when importing large module.\nI'm now planning to spit my tests into parts to mitigate this pain."], ["I use console occasionally, when I want to try some adhoc idea. Don't have problem with it.  Most of the time I wrote my thought into unit-test, however."]], [[' Interactive hacking - Do you use the console?\n']], ['How are you using IronPython?'], 6], [(830651, 4), [["I use console occasionally, when I want to try some adhoc idea. Don't have problem with it.  Most of the time I wrote my thought into unit-test, however."], ["If debugging means break-point and variable-inspection. I solely use print statement for that stuff.\nThe kind of application I'm working on is about to live and keep being maintained for at least a decade. \nTo handle defective code, I only bet on 3 things: comprehensible-code, unit-test and extensive-logging."]], [[" Debugging - what's the story here?\n"]], ['How are you using IronPython?'], 6], [(830651, 5), [["If debugging means break-point and variable-inspection. I solely use print statement for that stuff.\nThe kind of application I'm working on is about to live and keep being maintained for at least a decade. \nTo handle defective code, I only bet on 3 things: comprehensible-code, unit-test and extensive-logging."], ['I never come close to any tool you mention. Just use unittest.TextTestRunner.\nBeside the horrible startup time, I do not have any other complains.']], [[' Unit testing\n']], ['How are you using IronPython?'], 6], [(830997, 0), [['Suppose the variable  test_html  has the following html content:'], ['Just do this:']], [[' <html>\n<head><title>Test title</title></head>\n<body>\n<p>Some paragraph</p>\nUseless Text\n<a href="http://stackoverflow.com">Some link</a>not a link\n<a href="http://python.org">Another link</a>\n</body></html>\n']], ['Using Beautiful Soup, how do I iterate over all embedded text?'], 3], [(830997, 1), [['Just do this:'], ['That prints:']], [[" from BeautifulSoup import BeautifulSoup\n\ntest_html = load_html_from_above()\nsoup = BeautifulSoup(test_html)\n\nfor t in soup.findAll(text=True):\n    text = unicode(t)\n    for vowel in u'aeiou':\n        text = text.replace(vowel, u'') \n    t.replaceWith(text)\n\nprint soup\n"]], ['Using Beautiful Soup, how do I iterate over all embedded text?'], 3], [(830997, 2), [['That prints:'], ['Note that the tags and attributes are untouched.']], [[' <html>\n<head><title>Tst ttl</title></head>\n<body>\n<p>Sm prgrph</p>\nUslss Txt\n<a href="http://stackoverflow.com">Sm lnk</a>nt  lnk\n<a href="http://python.org">Anthr lnk</a>\n</body></html>\n']], ['Using Beautiful Soup, how do I iterate over all embedded text?'], 3], [(832331, 0), [['You need to use the  webbrowser  module'], ['If you want to open a url in a non-default browser try:']], [[" import webbrowser\nwebbrowser.open('http://www.google.com')\n"]], ['Launch a webpage on a Firefox (win) tab using Python'], 2], [(832331, 1), [['If you want to open a url in a non-default browser try:'], ['-10000']], [[" webbrowser.get('firefox').open_new_tab('http://www.google.com')\n"]], ['Launch a webpage on a Firefox (win) tab using Python'], 2], [(834395, 0), [["When you say 'simple network graph in ascii', do you mean something like this?"], ["I suspect there are probably better ways to display whatever information it is that you have than to try and draw it on the console. If it's just a pipeline, why not just print out:"]], [[" .===.   .===.   .===.   .===.\n| a |---| b |---| c |---| d |\n'==='   '==='   '---'   '==='\n"]], ['Python ASCII Graph Drawing'], 2], [(834395, 1), [["I suspect there are probably better ways to display whatever information it is that you have than to try and draw it on the console. If it's just a pipeline, why not just print out:"], ["If you're sure this is the route, one thing you could try would be to generate a decent graph using  Matplotlib  and then post the contents to one of  the many image-to-ascii converters  you can find on the web."]], [[' a-b-c-d\n']], ['Python ASCII Graph Drawing'], 2], [(837606, 0), [["Hm. Nadia's answer is closer to what you  meant  to ask; however, for finding the (single) oldest file in a tree, try this:"], ["With a little modification, you can get the  n  oldest files (similar to Nadia's answer):"]], [[' import os\ndef oldest_file_in_tree(rootfolder, extension=".avi"):\n    return min(\n        (os.path.join(dirname, filename)\n        for dirname, dirnames, filenames in os.walk(rootfolder)\n        for filename in filenames\n        if filename.endswith(extension)),\n        key=lambda fn: os.stat(fn).st_mtime)\n']], ['Find the oldest file (recursively) in a directory'], 5], [(837606, 1), [["With a little modification, you can get the  n  oldest files (similar to Nadia's answer):"], ['Note that using the  .endswith  method allows calls as:']], [[' import os, heapq\ndef oldest_files_in_tree(rootfolder, count=1, extension=".avi"):\n    return heapq.nsmallest(count,\n        (os.path.join(dirname, filename)\n        for dirname, dirnames, filenames in os.walk(rootfolder)\n        for filename in filenames\n        if filename.endswith(extension)),\n        key=lambda fn: os.stat(fn).st_mtime)\n']], ['Find the oldest file (recursively) in a directory'], 5], [(837606, 2), [['Note that using the  .endswith  method allows calls as:'], ["Finally, should you want the complete list of files, ordered by modification time, in order to delete as many as required to free space, here's some code:"]], [[' oldest_files_in_tree("/home/user", 20, (".avi", ".mov"))\n']], ['Find the oldest file (recursively) in a directory'], 5], [(837606, 3), [["Finally, should you want the complete list of files, ordered by modification time, in order to delete as many as required to free space, here's some code:"], ['By the way, for a complete solution to your issue, since you are running on Linux, where the  os.statvfs  is available, you can do:']], [[' import os\ndef files_to_delete(rootfolder, extension=".avi"):\n    return sorted(\n        (os.path.join(dirname, filename)\n         for dirname, dirnames, filenames in os.walk(rootfolder)\n         for filename in filenames\n         if filename.endswith(extension)),\n        key=lambda fn: os.stat(fn).st_mtime),\n        reverse=True)\n']], ['Find the oldest file (recursively) in a directory'], 5], [(837606, 4), [['By the way, for a complete solution to your issue, since you are running on Linux, where the  os.statvfs  is available, you can do:'], ['statvfs.f_bfree  are the device free blocks and  statvfs.f_bsize  is the block size. We take the  rootfolder  statvfs, so mind any symbolic links pointing to other devices, where we could delete many files without actually freeing up space in this device.']], [[' import os\ndef free_space_up_to(free_bytes_required, rootfolder, extension=".avi"):\n    file_list= files_to_delete(rootfolder, extension)\n    while file_list:\n        statv= os.statvfs(rootfolder)\n        if statv.f_bfree*statv.f_bsize >= free_bytes_required:\n            break\n        os.remove(file_list.pop())\n']], ['Find the oldest file (recursively) in a directory'], 5], [(838991, 0), [['You need to run Python in binary mode.  Change your CGI script from:'], ['or whatever it says to:']], [[' #!C:/Python25/python.exe\n']], ['Python cgi and stdin'], 3], [(838991, 1), [['or whatever it says to:'], ['Or you can do it programmatically like this:']], [[' #!C:/Python25/python.exe -u\n']], ['Python cgi and stdin'], 3], [(838991, 2), [['Or you can do it programmatically like this:'], ['before starting to read from  stdin .']], [[' msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)\n']], ['Python cgi and stdin'], 3], [(841654, 0), [['I tried compiling and got the same errors on my linux box:'], ['Well, I can answer the second question. You must edit setup.py:']], [[" $ python setup.py build\nDBG> include = ['/usr/include', '/usr/include/python2.6', '/usr/include/SDL']\nrunning build\nrunning build_ext\nbuilding 'surfutils' extension\ncreating build\ncreating build/temp.linux-i686-2.6\ncreating build/temp.linux-i686-2.6/src\ngcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I/usr/include -I/usr/include/python2.6 -I/usr/include/SDL -I/usr/include/python2.6 -c src/surfutils.c -o build/temp.linux-i686-2.6/src/surfutils.o\nIn file included from src/surfutils.c:1:\n/usr/include/python2.6/pygame/pygame.h:68:17: error: SDL.h: Arquivo ou diretório inexistente\nIn file included from src/surfutils.c:1:\n/usr/include/python2.6/pygame/pygame.h:312: error: expected specifier-qualifier-list before ‘SDL_VideoInfo’\n/usr/include/python2.6/pygame/pygame.h:350: error: expected specifier-qualifier-list before ‘SDL_Surface’\nsrc/surfutils.c:5: error: expected ‘)’ before ‘*’ token\nsrc/surfutils.c: In function ‘PyCollisionPoint’:\nsrc/surfutils.c:74: error: ‘SDL_Surface’ undeclared (first use in this function)\nsrc/surfutils.c:74: error: (Each undeclared identifier is reported only once\nsrc/surfutils.c:74: error: for each function it appears in.)\nsrc/surfutils.c:74: error: ‘surf1’ undeclared (first use in this function)\nsrc/surfutils.c:74: error: ‘surf2’ undeclared (first use in this function)\nsrc/surfutils.c:74: warning: left-hand operand of comma expression has no effect\nsrc/surfutils.c:92: error: ‘PySurfaceObject’ has no member named ‘surf’\nsrc/surfutils.c:97: error: ‘SDL_SRCALPHA’ undeclared (first use in this function)\nsrc/surfutils.c:111: error: ‘PySurfaceObject’ has no member named ‘surf’\nsrc/surfutils.c:161: warning: implicit declaration of function ‘collisionPoint’\nerror: command 'gcc' failed with exit status 1\n"]], ['Pygame cannot find include file "sdl.h"'], 4], [(841654, 1), [['Well, I can answer the second question. You must edit setup.py:'], ['Change line 9. It says:']], [[" #!/usr/bin/env python2.3\n\nfrom distutils.core       import setup, Extension\nfrom distutils.sysconfig  import get_config_vars\n\nincludes = []\nincludes.extend(get_config_vars('INCLUDEDIR'))\nincludes.extend(get_config_vars('INCLUDEPY'))\nincludes.append('/usr/include/SDL')\n\nprint 'DBG> include =', includes\n\nsetup(name='surfutils',\n      version='1.0',\n      ext_modules=[Extension(\n                    'surfutils', \n                    ['src/surfutils.c'], \n                    include_dirs=includes,\n                  )],\n     )\n"]], ['Pygame cannot find include file "sdl.h"'], 4], [(841654, 2), [['Change line 9. It says:'], ['Change this path to wherever your SDL headers are, i.e.:']], [[" includes.append('/usr/include/SDL')\n"]], ['Pygame cannot find include file "sdl.h"'], 4], [(841654, 3), [['Change this path to wherever your SDL headers are, i.e.:'], ["Leave a note to the game developer to say you're having this trouble. It could provide a better way of finding SDL headers on your platform."]], [[" includes.append(r'C:\\mydevelopmentheaders\\SDL')\n"]], ['Pygame cannot find include file "sdl.h"'], 4], [(842557, 0), [['Python threads cannot be interrupted except with a special C api.'], ['Here it is adapted to your use:']], [[' import time\nfrom threading import Thread\n\ndef noInterrupt():\n    for i in xrange(4):\n        print i\n        time.sleep(1)\n\na = Thread(target=noInterrupt)\na.start()\na.join()\nprint "done"\n\n\n0\n1\n2\n3\nTraceback (most recent call last):\n  File "C:\\Users\\Admin\\Desktop\\test.py", line 11, in <module>\n    a.join()\n  File "C:\\Python26\\lib\\threading.py", line 634, in join\n    self.__block.wait()\n  File "C:\\Python26\\lib\\threading.py", line 237, in wait\n    waiter.acquire()\nKeyboardInterrupt\n']], ['How to prevent a block of code from being interrupted by KeyboardInterrupt in Python?'], 2], [(842557, 1), [['Here it is adapted to your use:'], ['-10000']], [[" import time\nfrom threading import Thread\n\ndef noInterrupt(path, obj):\n    try:\n        file = open(path, 'w')\n        dump(obj, file)\n    finally:\n        file.close()\n\na = Thread(target=noInterrupt, args=(path,obj))\na.start()\na.join()\n"]], ['How to prevent a block of code from being interrupted by KeyboardInterrupt in Python?'], 2], [(842570, 0), [['Definitely have a look at  os.path .  It contains many of the "safe" cross-OS path manipulation functions you need.  For example, I\'ve always done this in the scenario you\'re outlining:'], ['Also note that if you want to get the path separator, you can use:']], [[" os.path.join(os.path.abspath(os.path.dirname(__file__)), 'logs')\n"]], ['What are some good ways to set a path in a Multi-OS supported Python script'], 2], [(842570, 1), [['Also note that if you want to get the path separator, you can use:'], ["This will yield '\\\\' on Windows, and '/' on Linux, for example."]], [[' os.path.sep\n']], ['What are some good ways to set a path in a Multi-OS supported Python script'], 2], [(842856, 0), [['So, here is an example:'], ['UPDATE: \nSome care should be taken when combining words in to a single pattern of alternative words.  The following code builds a regex, but  escapes any regex special characters  and sorts the words so that longer words get a chance to match before any shorter prefixes of the same word:']], [[' import re\n\ndef work():\n  to_find = re.compile("cat|fish|dog")\n  search_str = "blah fish cat dog haha"\n  match_obj = to_find.search(search_str)\n  the_index = match_obj.start()  # produces 5, the index of fish\n  which_word_matched = match_obj.group()  # "fish"\n  # Note, if no match, match_obj is None\n']], ["What's the most efficient way to find one of several substrings in Python?"], 4], [(842856, 1), [['UPDATE: \nSome care should be taken when combining words in to a single pattern of alternative words.  The following code builds a regex, but  escapes any regex special characters  and sorts the words so that longer words get a chance to match before any shorter prefixes of the same word:'], ['UPDATE:  I am unsure about how python implements regular expressions, but to answer Rax\'s question about whether or not there are limitations of re.compile() (for example, how many words you can try to "|" together to match at once), and the amount of time to run compile: neither of these seem to be an issue. I tried out this code, which is good enough to convince me. (I could have made this better by adding timing and reporting results, as well as throwing the list of words into a set to ensure there are no duplicates... but both of these improvements seem like overkill). This code ran basically instantaneously, and convinced me that I am able to search for 2000 words (of size 10), and that and of them will match appropriately. Here is the code:']], [[" def wordlist_to_regex(words):\n    escaped = map(re.escape, words)\n    combined = '|'.join(sorted(escaped, key=len, reverse=True))\n    return re.compile(combined)\n\n>>> r.search('smash atomic particles').span()\n(6, 10)\n>>> r.search('visit usenet:comp.lang.python today').span()\n(13, 29)\n>>> r.search('a north\\south division').span()\n(2, 13)\n>>> r.search('012cat').span()\n(3, 6)\n>>> r.search('0123dog789cat').span()\n(4, 7)\n"]], ["What's the most efficient way to find one of several substrings in Python?"], 4], [(842856, 2), [['UPDATE:  I am unsure about how python implements regular expressions, but to answer Rax\'s question about whether or not there are limitations of re.compile() (for example, how many words you can try to "|" together to match at once), and the amount of time to run compile: neither of these seem to be an issue. I tried out this code, which is good enough to convince me. (I could have made this better by adding timing and reporting results, as well as throwing the list of words into a set to ensure there are no duplicates... but both of these improvements seem like overkill). This code ran basically instantaneously, and convinced me that I am able to search for 2000 words (of size 10), and that and of them will match appropriately. Here is the code:'], ['UPDATE:  It should be noted that the order of of things ORed together in the regex  matters . Have a look at the following test inspired by  TZOTZIOY :']], [[' import random\nimport re\nimport string\nimport sys\n\ndef main(args):\n    words = []\n    letters_and_digits = "%s%s" % (string.letters, string.digits)\n    for i in range(2000):\n        chars = []\n        for j in range(10):\n            chars.append(random.choice(letters_and_digits))\n        words.append(("%s"*10) % tuple(chars))\n    search_for = re.compile("|".join(words))\n    first, middle, last = words[0], words[len(words) / 2], words[-1]\n    search_string = "%s, %s, %s" % (last, middle, first)\n    match_obj = search_for.search(search_string)\n    if match_obj is None:\n        print "Ahhhg"\n        return\n    index = match_obj.start()\n    which = match_obj.group()\n    if index != 0:\n        print "ahhhg"\n        return\n    if words[-1] != which:\n        print "ahhg"\n        return\n\n    print "success!!! Generated 2000 random words, compiled re, and was able to perform matches."\n\nif __name__ == "__main__":\n    main(sys.argv)\n']], ["What's the most efficient way to find one of several substrings in Python?"], 4], [(842856, 3), [['UPDATE:  It should be noted that the order of of things ORed together in the regex  matters . Have a look at the following test inspired by  TZOTZIOY :'], ["This suggests the order matters :-/. I am not sure what this means for Rax's application, but at least the behavior is known."]], [[' >>> search_str = "01catdog"\n>>> test1 = re.compile("cat|catdog")\n>>> match1 = test1.search(search_str)\n>>> match1.group()\n\'cat\'\n>>> match1.start()\n2\n>>> test2 = re.compile("catdog|cat")  # reverse order\n>>> match2 = test2.search(search_str)\n>>> match2.group()\n\'catdog\'\n>>> match2.start()\n2\n']], ["What's the most efficient way to find one of several substrings in Python?"], 4], [(843227, 0), [['Have you tried:'], ["Edit: If you don't want the enclosing tag, try:"]], [[' unicode(content)\n']], ['How to render contents of a tag in unicode in BeautifulSoup?'], 2], [(843227, 1), [["Edit: If you don't want the enclosing tag, try:"], ['-10000']], [[' content.renderContents()\n']], ['How to render contents of a tag in unicode in BeautifulSoup?'], 2], [(843580, 0), [["Relying on Django's built-in functionality and passing named parameters would be the simplest way to go."], ["But if you're set on saving some keystrokes, I'd suggest adding a static convenience method to the class instead of messing with the initializer."]], [[' p = User(name="Fred", email="fred@example.com")\n']], ['Writing a __init__ function to be used in django model'], 2], [(843580, 1), [["But if you're set on saving some keystrokes, I'd suggest adding a static convenience method to the class instead of messing with the initializer."], ['-10000']], [[' # In User class declaration\n@classmethod\ndef create(cls, name, email):\n  return cls(name=name, email=email)\n\n# Use it\np = User.create("Fred", "fred@example.com")\n']], ['Writing a __init__ function to be used in django model'], 2], [(843671, 0), [['That may not answer your question directly, but will definitely help. If use the profiler with option --sort cumulative it will sort the functions by cumulative time. Which is helpful to detect not only heavy functions but the functions that call them.'], ['There is a workaround to get the caller function:']], [[' python -m cProfile --sort cumulative myScript.py\n']], ['Profiling in Python: Who called the function?'], 4], [(843671, 1), [['There is a workaround to get the caller function:'], ['You can add as many f_back as you want in case you want the caller caller etc\nIf you want to calculate frequent calls you can do this:']], [[' import inspect\nprint inspect.getframeinfo(inspect.currentframe().f_back)[2]\n']], ['Profiling in Python: Who called the function?'], 4], [(843671, 2), [['You can add as many f_back as you want in case you want the caller caller etc\nIf you want to calculate frequent calls you can do this:'], ['Then print them by order of frequency:']], [[' record = {}\n\ncaller = inspect.getframeinfo(inspect.currentframe().f_back)[2]\nrecord[caller] = record.get(caller, 0) + 1\n']], ['Profiling in Python: Who called the function?'], 4], [(843671, 3), [['Then print them by order of frequency:'], ['-10000']], [[' print sorted(record.items(), key=lambda a: a[1])\n']], ['Profiling in Python: Who called the function?'], 4], [(844505, 0), [['Definitely not suitable for general purpose graph libraries (whatever you\'re supposed to do if more than one of the words meaningful in a node is in the input string -- is that an error? -- or if none does and there is no default for the node, as for node 30 in the example you supply).  Just write the table as a dict from node to tuple (default stuff, dict from word to specific stuff) where each stuff is a tuple (destination, word-to-add) (and use None for the special "word-to-add"  clear ).  So e.g.:'], ['Now handling this table and an input comma-separated string is easy, thanks to set operations -- e.g.:']], [[" tab = {1: (100, None), {'acs': (20, None)}),\n       20: ((30, 'hst_ota'), {'ota': (30, 'hst_ota'), 'noota': (30, None)}),\n       30: ((None, None), {'acs': (10000,None), 'cos':(11000,None)}),\n       etc etc\n"]], ['Is a graph library (eg NetworkX) the right solution for my Python problem?'], 2], [(844505, 1), [['Now handling this table and an input comma-separated string is easy, thanks to set operations -- e.g.:'], ['-10000']], [[" def f(icss):\n  kws = set(icss.split(','))\n  N = 1\n  while N in tab:\n    stuff, others = tab[N]\n    found = kws & set(others)\n    if found:\n      # maybe error if len(found) > 1 ?\n      stuff = others[found.pop()]\n    N, word_to_add = stuff\n    if word_to_add is not None:\n      print word_to_add\n"]], ['Is a graph library (eg NetworkX) the right solution for my Python problem?'], 2], [(844681, 0), [['-10000'], ['Examples:']], [[" comment_re = re.compile(\n    r'(^)?[^\\S\\n]*/(?:\\*(.*?)\\*/[^\\S\\n]*|/[^\\n]*)($)?',\n    re.DOTALL | re.MULTILINE\n)\n\ndef comment_replacer(match):\n    start,mid,end = match.group(1,2,3)\n    if mid is None:\n        # single line comment\n        return ''\n    elif start is not None or end is not None:\n        # multi line comment at start or end of a line\n        return ''\n    elif '\\n' in mid:\n        # multi line comment with line break\n        return '\\n'\n    else:\n        # multi line comment without line break\n        return ' '\n\ndef remove_comments(text):\n    return comment_re.sub(comment_replacer, text)\n"]], ['Python regex question: stripping multi-line comments but maintaining a line break'], 2], [(844681, 1), [['Examples:'], ['Edits:']], [[' >>> s = ("qwe /* 123\\n"\n         "456\\n"\n         "789 */ asd /* 123 */ zxc\\n"\n         "rty // fgh\\n")\n>>> print \'"\' + \'"\\n"\'.join(\n...     remove_comments(s).splitlines()\n... ) + \'"\'\n"qwe"\n"asd zxc"\n"rty"\n>>> comments_test = ("hello // comment\\n"\n...                  "line 2 /* a comment */\\n"\n...                  "line 3 /* a comment*/ /*comment*/\\n"\n...                  "line 4 /* a comment\\n"\n...                  "continuation of a comment*/ line 5\\n"\n...                  "/* comment */line 6\\n"\n...                  "line 7 /*********\\n"\n...                  "********************\\n"\n...                  "**************/\\n"\n...                  "line ?? /*********\\n"\n...                  "********************\\n"\n...                  "********************\\n"\n...                  "********************\\n"\n...                  "********************\\n"\n...                  "**************/\\n")\n>>> print \'"\' + \'"\\n"\'.join(\n...     remove_comments(comments_test).splitlines()\n... ) + \'"\'\n"hello"\n"line 2"\n"line 3 "\n"line 4"\n"line 5"\n"line 6"\n"line 7"\n"line ??"\n"line ??"\n']], ['Python regex question: stripping multi-line comments but maintaining a line break'], 2], [(844746, 0), [['(updated 2009-08-26 to now handle list index lookups as well)'], ['Template usage:']], [[' # app/templatetags/getattribute.py\n\nimport re\nfrom django import template\nfrom django.conf import settings\n\nnumeric_test = re.compile("^\\d+$")\nregister = template.Library()\n\ndef getattribute(value, arg):\n    """Gets an attribute of an object dynamically from a string name"""\n\n    if hasattr(value, str(arg)):\n        return getattr(value, arg)\n    elif hasattr(value, \'has_key\') and value.has_key(arg):\n        return value[arg]\n    elif numeric_test.match(str(arg)) and len(value) > int(arg):\n        return value[int(arg)]\n    else:\n        return settings.TEMPLATE_STRING_IF_INVALID\n\nregister.filter(\'getattribute\', getattribute)\n']], ['Performing a getattr() style lookup in a django template'], 2], [(844746, 1), [['Template usage:'], ['']], [[' {% load getattribute %}\n{{ object|getattribute:dynamic_string_var }}\n']], ['Performing a getattr() style lookup in a django template'], 2], [(844886, 0), [["Here's some code that will simplify the job for you. The following code assumes that whatever methods you call on your string, that method will return another string."], ["Here is some example code showing how you would use the above code in your own scripts. I've separated the arguments of  process_line  across multiple lines to show the grouping of the arguments. Of course, if you're just hacking away and using this code in day-to-day scripts, you can compress all the arguments onto one line; this actually makes it a little easier to read."]], [[' class O(object):\n    c = str.capitalize\n    r = str.replace\n    s = str.strip\n\ndef process_line(line, *ops):\n    i = iter(ops)\n    while True:\n        try:\n            op = i.next()\n            args = i.next()\n        except StopIteration:\n            break\n        line = op(line, *args)\n    return line\n']], ['Defining dynamic functions to a string'], 2], [(844886, 1), [["Here is some example code showing how you would use the above code in your own scripts. I've separated the arguments of  process_line  across multiple lines to show the grouping of the arguments. Of course, if you're just hacking away and using this code in day-to-day scripts, you can compress all the arguments onto one line; this actually makes it a little easier to read."], ["Of course, if you very specifically wanted to use numerals, you could name your functions  O.f1 ,  O.f2 ,  O.f3 … but I'm assuming that wasn't the spirit of your question."]], [[' f = open("parrot_sketch.txt")\nfor line in f:\n    p = process_line(\n        line,\n        O.r, ["He\'s resting...", "This is an ex-parrot!"],\n        O.c, [],\n        O.s, []\n    )\n    print p\n']], ['Defining dynamic functions to a string'], 2], [(845009, 0), [["The following returns a humanized diff between now and  comment_date  (e.g.  '8 hours' ):"], ['The following returns a humanized diff between  question_date  and  comment_date :']], [[' {{ comment_date|timesince }}\n']], ['"x Days ago\' template filter in Django?'], 2], [(845009, 1), [['The following returns a humanized diff between  question_date  and  comment_date :'], ['-10000']], [[' {{ comment_date|timesince:question_date }}\n']], ['"x Days ago\' template filter in Django?'], 2], [(845112, 0), [['Still, yet another way to do it :D'], ['Edit : you can also use the izip from itertools, a generator version of zip']], [[' In [1]: a = [1,2,3]\n\nIn [2]: b = [2,3,4]\n\nIn [3]: map(sum, zip(a,b))\nOut[3]: [3, 5, 7]\n']], ['Concise vector adding in Python?'], 2], [(845112, 1), [['Edit : you can also use the izip from itertools, a generator version of zip'], ['-10000']], [[' In [5]: from itertools import izip\n\nIn [6]: map(sum, izip(a,b))\nOut[6]: [3, 5, 7]\n']], ['Concise vector adding in Python?'], 2], [(845408, 0), [['Ultimately, any module implementing this behaviour is going to parse the string. And act according to the result. In feedparser for example they are parsing the url:'], ['Here is a nice decorator that will do this for you:']], [[" if urlparse.urlparse(url_file_stream_or_string)[0] in ('http', 'https', 'ftp'):\n    # do something with the url\nelse:\n    # This is a file path\n    return open(url_file_stream_or_string)\n"]], ['Canonical/Idiomatic "do what I mean" when passed a string that could a filename, URL, or the actual data to work on'], 2], [(845408, 1), [['Here is a nice decorator that will do this for you:'], ['-10000']], [[" import urlparse, urllib\n\ndef opener(fun):\n    def wrapper(url):\n        if urlparse.urlparse(url)[0] in ('http', 'https', 'ftp'):\n            return fun(urllib.urlopen(url))\n        return fun(open(url))\n    return wrapper\n\n@opener\ndef read(stream):\n   return stream.read()\n\nread('myfile')\nread('http://www.wikipedia.org')\n"]], ['Canonical/Idiomatic "do what I mean" when passed a string that could a filename, URL, or the actual data to work on'], 2], [(846485, 0), [["CHOICES = (\n    ('n', 'Normal'),\n    ('b', 'Bye'),\n    )"], ['Then, for your search criteria, to see a list of the players that a given player has played against:']], [[' class Round(models.Model):        \n    number = models.IntegerField()\n    round_type = models.CharField(max_length=1, default="n", choices=CHOICES)\n    tournament = models.ForeignKey(Tournament)\n    players = models.ManyToManyField(Player, related_name="rounds")\n    winner = models.ForeignKey(Player, null=True, related_name="round_winner") \n']], ['Modelling a swiss tournament in Django'], 2], [(846485, 1), [['Then, for your search criteria, to see a list of the players that a given player has played against:'], ['-10000']], [[" # grab a player \np = Player.objects.get(name='Tom')\n\n# see what rounds this player played in\nrounds_played = p.rounds.all()\n\n# who did this player play against?\n[r.players for r in rounds_played]\n\n# to see all rounds this player won\np.round_winner.all()\n"]], ['Modelling a swiss tournament in Django'], 2], [(846850, 0), [['win32_unicode_argv.py'], ['Now, the way I use it is simply to do:']], [[' """\nwin32_unicode_argv.py\n\nImporting this will replace sys.argv with a full Unicode form.\nWindows only.\n\nFrom this site, with adaptations:\n      http://code.activestate.com/recipes/572200/\n\nUsage: simply import this module into a script. sys.argv is changed to\nbe a list of Unicode strings.\n"""\n\n\nimport sys\n\ndef win32_unicode_argv():\n    """Uses shell32.GetCommandLineArgvW to get sys.argv as a list of Unicode\n    strings.\n\n    Versions 2.x of Python don\'t support Unicode in sys.argv on\n    Windows, with the underlying Windows API instead replacing multi-byte\n    characters with \'?\'.\n    """\n\n    from ctypes import POINTER, byref, cdll, c_int, windll\n    from ctypes.wintypes import LPCWSTR, LPWSTR\n\n    GetCommandLineW = cdll.kernel32.GetCommandLineW\n    GetCommandLineW.argtypes = []\n    GetCommandLineW.restype = LPCWSTR\n\n    CommandLineToArgvW = windll.shell32.CommandLineToArgvW\n    CommandLineToArgvW.argtypes = [LPCWSTR, POINTER(c_int)]\n    CommandLineToArgvW.restype = POINTER(LPWSTR)\n\n    cmd = GetCommandLineW()\n    argc = c_int(0)\n    argv = CommandLineToArgvW(cmd, byref(argc))\n    if argc.value > 0:\n        # Remove Python executable and commands if present\n        start = argc.value - len(sys.argv)\n        return [argv[i] for i in\n                xrange(start, argc.value)]\n\nsys.argv = win32_unicode_argv()\n']], ['Read Unicode characters from command-line arguments in Python 2.x on Windows'], 2], [(846850, 1), [['Now, the way I use it is simply to do:'], ['and from then on,  sys.argv  is a list of Unicode strings. The Python  optparse  module seems happy to parse it, which is great.']], [[' import sys\nimport win32_unicode_argv\n']], ['Read Unicode characters from command-line arguments in Python 2.x on Windows'], 2], [(848537, 0), [['An example with a fixed format for 3 data items:'], ['Same thing, field width supplied with the data:']], [[' >>> fmt="%4s%10s%10s"\n>>> fmt % (1,"ONE",2)\n\'   1       ONE         2\'\n>>> \n']], ['Writing/parsing a fixed width file using Python'], 3], [(848537, 1), [['Same thing, field width supplied with the data:'], ['Separating data and field widths, and using  zip()  and  str.join()  tricks:']], [[' >>> fmt2 = "%*s%*s%*s"\n>>> fmt2 % (4,1, 10,"ONE", 10,2)\n\'   1       ONE         2\'\n>>> \n']], ['Writing/parsing a fixed width file using Python'], 3], [(848537, 2), [['Separating data and field widths, and using  zip()  and  str.join()  tricks:'], ['-10000']], [[' >>> widths=(4,10,10)\n>>> items=(1,"ONE",2)\n>>> "".join("%*s" % i for i in zip(widths, items))\n\'   1       ONE         2\'\n>>> \n']], ['Writing/parsing a fixed width file using Python'], 3], [(849142, 0), [['This is working for me:'], ['Then in your model class, you would use it like this (field being the module where you put the above code):']], [[" from django.db import models\n\nclass IntegerRangeField(models.IntegerField):\n    def __init__(self, verbose_name=None, name=None, min_value=None, max_value=None, **kwargs):\n        self.min_value, self.max_value = min_value, max_value\n        models.IntegerField.__init__(self, verbose_name, name, **kwargs)\n    def formfield(self, **kwargs):\n        defaults = {'min_value': self.min_value, 'max_value':self.max_value}\n        defaults.update(kwargs)\n        return super(IntegerRangeField, self).formfield(**defaults)\n"]], ['How to limit the maximum value of a numeric field in a Django model?'], 4], [(849142, 1), [['Then in your model class, you would use it like this (field being the module where you put the above code):'], ['OR for a range of negative and positive (like an oscillator range):']], [[' size = fields.IntegerRangeField(min_value=1, max_value=50)\n']], ['How to limit the maximum value of a numeric field in a Django model?'], 4], [(849142, 2), [['OR for a range of negative and positive (like an oscillator range):'], ['What would be really cool is if it could be called with the range operator like this:']], [[' size = fields.IntegerRangeField(min_value=-100, max_value=100)\n']], ['How to limit the maximum value of a numeric field in a Django model?'], 4], [(849142, 3), [['What would be really cool is if it could be called with the range operator like this:'], ["But, that would require a lot more code since since you can specify a 'skip' parameter - range(1, 50, 2) - Interesting idea though..."]], [[' size = fields.IntegerRangeField(range(1, 50))\n']], ['How to limit the maximum value of a numeric field in a Django model?'], 4], [(849654, 0), [['Load both the source and target JPEGs'], ['Convert the pixels from RGB color space to L a b color space (or any other color space with luminosirty information)']], [[" from PIL import Image\nimg1 = Image.open('image1.jpg')\nimg2 = Image.open('image2.jpg')\n"]], ['Performing Photoshop\'s "Luminosity" filter programmatically'], 5], [(849654, 1), [['Convert the pixels from RGB color space to L a b color space (or any other color space with luminosirty information)'], ["Preserve target color channels and replace its luminosity channel by source's luminosity"]], [[' # Color matrix for Lab\ncolorMatrix = (\n    x1, y1, z1, 0,\n    x2, y2, z2, 0,\n    x3, y3, z3, 0\n)\nimg1 = img1.convert("RGB", colorMatrix)\nimg2 = img2.convert("RGB", colorMatrix)\n']], ['Performing Photoshop\'s "Luminosity" filter programmatically'], 5], [(849654, 2), [["Preserve target color channels and replace its luminosity channel by source's luminosity"], ['Convert back to RGB space']], [[' l1, a1, b1 = img1.split()\nl2, a2, b2 = img2.split()\nimg1.putdata(zip(l1.getdata(), a2.getdata(), b2.getdata()))\n']], ['Performing Photoshop\'s "Luminosity" filter programmatically'], 5], [(849654, 3), [['Convert back to RGB space'], ['Save the JPEG']], [[' # Color matrix for RGB\nRGBcolorMatrix = (\n    x1, y1, z1, 0,\n    x2, y2, z2, 0,\n    x3, y3, z3, 0\n)\nimg1 = img1.convert("RGB", RGBcolorMatrix)\n']], ['Performing Photoshop\'s "Luminosity" filter programmatically'], 5], [(849654, 4), [['Save the JPEG'], ['-10000']], [[" img1.save('new_image.jpg')\n"]], ['Performing Photoshop\'s "Luminosity" filter programmatically'], 5], [(850117, 0), [['You can write the rows to a file in the format\n"field1", "field2", .. and then use LOAD DATA to load them'], ['Then execute this:']], [[' data = \'\\n\'.join(\',\'.join(\'"%s"\' % field for field in row) for row in data)\nf= open(\'data.txt\', \'w\')\nf.write(data)\nf.close()\n']], ["What's the most efficient way to insert thousands of records into a table (MySQL, Python, Django)"], 2], [(850117, 1), [['Then execute this:'], ['Reference']], [[" LOAD DATA INFILE 'data.txt' INTO TABLE db2.my_table;\n"]], ["What's the most efficient way to insert thousands of records into a table (MySQL, Python, Django)"], 2], [(850566, 0), [['When you import a module, the code is compiled and inserted into a dictionary of names -> module objects. The dictionary is located at sys.modules.'], ['If you only have about 4 or 5 imports like that, its not too cluttery. Remember, "Explicit is better than implicit". However if it really bothers you that much, do this:']], [[" import sys\nsys.modules\n\n>>> pprint.pprint(sys.modules)\n{'UserDict': <module 'UserDict' from 'C:\\python26\\lib\\UserDict.pyc'>,\n '__builtin__': <module '__builtin__' (built-in)>,\n '__main__': <module '__main__' (built-in)>,\n '_abcoll': <module '_abcoll' from 'C:\\python26\\lib\\_abcoll.pyc'>,\n# the rest omitted for brevity\n"]], ['Can a Python module use the imports from another file?'], 2], [(850566, 1), [['If you only have about 4 or 5 imports like that, its not too cluttery. Remember, "Explicit is better than implicit". However if it really bothers you that much, do this:'], ['-10000']], [[' <importheaders.py>\nfrom django.utils import simplejson\nfrom google.appengine.ext import webapp\nfrom google.appengine.ext.webapp import template\nfrom google.appengine.ext import db\n\n\n<mycontroller.py>\nfrom importheaders import *\n']], ['Can a Python module use the imports from another file?'], 2], [(850795, 0), [["For example, this method doesn't affect other references:"], ['But this one does:']], [[' >>> a = [1, 2, 3]\n>>> b = a\n>>> a = []\n>>> print(a)\n[]\n>>> print(b)\n[1, 2, 3]\n']], ['Different ways of clearing lists'], 3], [(850795, 1), [['But this one does:'], ['You could also do:']], [[' >>> a = [1, 2, 3]\n>>> b = a\n>>> del a[:]      # equivalent to   del a[0:len(a)]\n>>> print(a)\n[]\n>>> print(b)\n[]\n>>> a is b\nTrue\n']], ['Different ways of clearing lists'], 3], [(850795, 2), [['You could also do:'], ['-10000']], [[' >>> a[:] = []\n']], ['Different ways of clearing lists'], 3], [(851012, 0), [['I believe that your guess is correct in how the comparison works, and the only way to intercept that is to add Fred as a base class to Bob. For example:'], ['As far as I know, this is the only way to make it work as you wrote it. However, if you simply rewrote the except: line as']], [[" # Assume both Bob and Fred are derived from Exception\n>>> class Bob(Bob, Fred):\n...     pass\n... \n>>> try:\n...     raise Bob()\n... except Fred:\n...     print 'blah'\nblah\n"]], ['how are exceptions compared in an except clause'], 2], [(851012, 1), [['As far as I know, this is the only way to make it work as you wrote it. However, if you simply rewrote the except: line as'], ['It would catch both Bob and Fred, without requiring the modification of the definition of Bob.']], [[' ... except (Bob, Fred):\n']], ['how are exceptions compared in an except clause'], 2], [(855114, 0), [['You can use it like this:'], ['I had a quick look at nose source code to confirm:  This is the line']], [[' --cover-package=foo --cover-package=bar\n']], ['Can I restrict nose coverage output to directory (rather than package)?'], 2], [(855114, 1), [['I had a quick look at nose source code to confirm:  This is the line'], ['-10000']], [['     if options.cover_packages:\n        for pkgs in [tolist(x) for x in options.cover_packages]:\n']], ['Can I restrict nose coverage output to directory (rather than package)?'], 2], [(855805, 0), [['With Perl, you have options. One option is to use processes as below. I need to look up how to write the analogous program using threads but  http://perldoc.perl.org/perlthrtut.html  should give you an idea.'], ['The following version using threads does not use a limit on the number of threads created (because I do not know how):']], [[' #!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Parallel::ForkManager;\n\nmy @data = (0 .. 19);\n\nmy $pm = Parallel::ForkManager->new(4);\n\nfor my $n ( @data ) {\n    my $pid = $pm->start and next;\n    warn sprintf "%d^3 = %d\\n", $n, slow_cube($n);\n    $pm->finish;\n}\n\nsub slow_cube {\n    my ($n) = @_;\n\n    sleep 1;\n    return $n * $n * $n;\n}\n\n__END__\n']], ['Please introduce a multi-processing library in Perl or Ruby'], 3], [(855805, 1), [['The following version using threads does not use a limit on the number of threads created (because I do not know how):'], ['Interestingly:']], [[' #!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse threads;\n\nmy @data = (0 .. 19);\nmy @threads = map { \n    threads->new( {context => \'list\' }, \\&slow_cube, $_ )\n} @data;\n\nfor my $thr ( @threads ) {\n    my ( $n, $ncubed ) = $thr->join;\n    print "$n^3 = $ncubed\\n";\n}\n\nsub slow_cube {\n    my ($n) = @_;\n\n    sleep 1;\n    return $n, $n * $n * $n;\n}\n\n__END__\n']], ['Please introduce a multi-processing library in Perl or Ruby'], 3], [(855805, 2), [['Interestingly:'], ['-10000']], [[' TimeThis :  Command Line :  t.pl\nTimeThis :  Elapsed Time :  00:00:01.281\n']], ['Please introduce a multi-processing library in Perl or Ruby'], 3], [(858623, 0), [['-10000'], ['or']], [[' import os, sys\nos.isatty(sys.stdout.fileno())\n']], ['How to recognize whether a script is running on a tty?'], 2], [(858623, 1), [['or'], ['-10000']], [[' sys.stdout.isatty()\n']], ['How to recognize whether a script is running on a tty?'], 2], [(859489, 0), [['Not being familiar with SQLite I think this approach should work for most databases, as it finds the weeknumber and subtracts the offset '], ['In Oracle I would use the following if time was a date column:']], [[' SELECT org, ROUND(time/604800) - week_offset, COUNT(*)\nFROM table\nGROUP BY org, ROUND(time/604800) - week_offset\n']], ['How do I GROUP BY on every given increment of a field value?'], 2], [(859489, 1), [['In Oracle I would use the following if time was a date column:'], ['SQLite probably has similar functionality that allows this kind of SELECT which is easier on the eye.']], [[" SELECT org, TO_CHAR(time, 'YYYY-IW'), COUNT(*)\nFROM table\nGROUP BY org, TO_CHAR(time, 'YYYY-IW')\n"]], ['How do I GROUP BY on every given increment of a field value?'], 2], [(860941, 0), [['This can be done in Django, but you will need to restructure your models a little bit differently:'], ['Now, when fetching Product objects, you can following the one-to-one relationship in one query using the  select_related()  method:']], [[" class Product(models.Model):\n    name = models.CharField(max_length=50)\n    product_rank = models.OneToOneField('ProductRank')\n\nclass ProductRank(models.Model):\n    rank = models.IntegerField(default=0)\n"]], ['How to do this join query in Django'], 3], [(860941, 1), [['Now, when fetching Product objects, you can following the one-to-one relationship in one query using the  select_related()  method:'], ['This will produce one query that fetches product ranks using a join:']], [[' Product.objects.filter([...]).select_related()\n']], ['How to do this join query in Django'], 3], [(860941, 2), [['This will produce one query that fetches product ranks using a join:'], ['I had to move the relationship field between Product and ProductRank to the Product model because it looks like select_related() follows foreign keys in one direction only.']], [[' SELECT "example_product"."id", "example_product"."name", "example_product"."product_rank_id", "example_productrank"."id", "example_productrank"."rank" FROM "example_product" INNER JOIN "example_productrank" ON ("example_product"."product_rank_id" = "example_productrank"."id")\n']], ['How to do this join query in Django'], 3], [(861190, 0), [['-10000'], ['or']], [[" mylist.sort(key=lambda d: (d['weight'], d['factor']))\n"]], ['Ordering a list of dictionaries in python'], 2], [(861190, 1), [['or'], ['-10000']], [[" import operator\nmylist.sort(key=operator.itemgetter('weight', 'factor'))\n"]], ['Ordering a list of dictionaries in python'], 2], [(862173, 0), [['Download scripts like that tend to push a header telling the user-agent what to name the file:'], ["There's  another thread  that has a little bit of code to offer up for  Content-Disposition -grabbing."]], [[' Content-Disposition: attachment; filename="the filename.ext"\n']], ["How to download a file using python in a 'smarter' way?"], 2], [(862173, 1), [["There's  another thread  that has a little bit of code to offer up for  Content-Disposition -grabbing."], ['-10000']], [[" remotefile = urllib2.urlopen('http://example.com/somefile.zip')\nremotefile.info()['Content-Disposition']\n"]], ["How to download a file using python in a 'smarter' way?"], 2], [(862412, 0), [["A.  No.  But you don't actually need to use a lambda.  You can put the statements in a  def  instead. ie:"], ['A.   sorted(l)[1]  is not actually the best way for this.  It has O(N log(N)) complexity, while an O(n) solution exists.  This can be found in the heapq module.']], [[' def second_lowest(l):\n    l.sort()\n    return l[1]\n\nmap(second_lowest, lst)\n']], ['Is it possible to have multiple statements in a python lambda expression?'], 4], [(862412, 1), [['A.   sorted(l)[1]  is not actually the best way for this.  It has O(N log(N)) complexity, while an O(n) solution exists.  This can be found in the heapq module.'], ['So just use:']], [[' >>> import  heapq\n>>> l = [5,2,6,8,3,5]\n>>> heapq.nsmallest(l, 2)\n[2, 3]\n']], ['Is it possible to have multiple statements in a python lambda expression?'], 4], [(862412, 2), [['So just use:'], ["It's also usually considered clearer to use a list comprehension, which avoids the lambda altogether:"]], [[' map(lambda x: heapq.nsmallest(x,2)[1],  list_of_lists)\n']], ['Is it possible to have multiple statements in a python lambda expression?'], 4], [(862412, 3), [["It's also usually considered clearer to use a list comprehension, which avoids the lambda altogether:"], ['-10000']], [[' [heapq.nsmallest(x,2)[1] for x in list_of_lists]\n']], ['Is it possible to have multiple statements in a python lambda expression?'], 4], [(862652, 0), [['In Python variables are names not locations.  For example:'], ["Here's a reworking of your code that should do what you want (untested):"]], [[' >>> a = 1\n>>> b = a\n>>> a = 2\n>>> print b\n1\n']], ['Pointers in Python on variables with None value'], 2], [(862652, 1), [["Here's a reworking of your code that should do what you want (untested):"], ['-10000']], [[' def neu(self, sortByValue, secondValue):\n    def child(node):\n        if(node is None):\n            return MyTree(sortByValue, secondValue)\n        else:\n            child.neu(sortByValue, secondValue)\n            return node\n\n    if(sortByValue.lower() < self.value[0].lower()):\n        self.left = child(self.left)\n    else:\n        self.right = child(self.right)\n']], ['Pointers in Python on variables with None value'], 2], [(863183, 0), [['In some more steps, for clarity:'], ['As far as I can see, it is the attribute  noNameSpaceSchemaLocation  that you want namespaced, not the  TreeInventory  element. So:']], [[" >>> NS = 'http://www.w3.org/2001/XMLSchema-instance'\n"]], ['Python: adding namespaces in lxml'], 3], [(863183, 1), [['As far as I can see, it is the attribute  noNameSpaceSchemaLocation  that you want namespaced, not the  TreeInventory  element. So:'], ['This looks like what you wanted... \nYou could of course also create the element first, without attributes, and then set the attribute, like this:']], [[' >>> location_attribute = \'{%s}noNameSpaceSchemaLocation\' % NS\n>>> elem = etree.Element(\'TreeInventory\', attrib={location_attribute: \'Trees.xsd\'})\n>>> etree.tostring(elem, pretty_print=True)\n\'<TreeInventory xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Trees.xsd"/>\\n\'\n']], ['Python: adding namespaces in lxml'], 3], [(863183, 2), [['This looks like what you wanted... \nYou could of course also create the element first, without attributes, and then set the attribute, like this:'], ['As for the  nsmap  parameter: I believe it is only used to define which prefixes to use on serialization. In this case, it is not needed, because lxml knows the commonly used prefix for the namespace in question is "xsi". If it were not some well-known namespace, you would probably see prefixes like "ns0", "ns1" etc..., unless you specified which prefix you preferred. (remember: the prefix is not supposed to matter)']], [[" >>> elem = etree.Element('TreeInventory')\n>>> elem.set(location_attribute, 'Trees.xsd')\n"]], ['Python: adding namespaces in lxml'], 3], [(864433, 0), [["You need to  use a custom ModelForm  in the ModelAdmin class for that model.  In the custom ModelForm's __init__ method, you can dynamically set the choices for that field:"], ["You'd use it like this:"]], [[" class FooForm(forms.ModelForm):\n    class Meta:\n        model = Foo\n\n    def __init__(self, *args, **kwargs):\n        super(FooForm, self).__init__(*args, **kwargs)\n        current_state = self.instance.state\n        ...construct available_choices based on current state...\n        self.fields['state'].choices = available_choices\n"]], ['how to modify choices on admin pages - django'], 2], [(864433, 1), [["You'd use it like this:"], ['-10000']], [[' class FooAdmin(admin.ModelAdmin):\n    form = FooForm\n']], ['how to modify choices on admin pages - django'], 2], [(864883, 0), [['-10000'], ['If you want more control over the format of each value:']], [[' m = [[1.1, 2.1, 3.1], [4.1, 5.1, 6.1], [7.1, 8.1, 9.1]]\nfile.write(str(m))\n']], ['How do I write a float list of lists to file in Python'], 2], [(864883, 1), [['If you want more control over the format of each value:'], ['-10000']], [[' def format(value):\n    return "%.3f" % value\n\nformatted = [[format(v) for v in r] for r in m]\nfile.write(str(formatted))\n']], ['How do I write a float list of lists to file in Python'], 2], [(865618, 0), [["EDIT  (again): so you can't assign to  timedelta.__div__ . Try this, then:"], ["And to incorporate this into nadia's suggestion:"]], [[' divtdi = datetime.timedelta.__div__\ndef divtd(td1, td2):\n    if isinstance(td2, (int, long)):\n        return divtdi(td1, td2)\n    us1 = td1.microseconds + 1000000 * (td1.seconds + 86400 * td1.days)\n    us2 = td2.microseconds + 1000000 * (td2.seconds + 86400 * td2.days)\n    return us1 / us2 # this does integer division, use float(us1) / us2 for fp division\n']], ['How can I perform divison on a datetime.timedelta in python?'], 3], [(865618, 1), [["And to incorporate this into nadia's suggestion:"], ['Example usage:']], [[' class MyTimeDelta:\n    __div__ = divtd\n']], ['How can I perform divison on a datetime.timedelta in python?'], 3], [(865618, 2), [['Example usage:'], ['etc. Of course you could even name (or alias) your custom class  timedelta  so it gets used in place of the real  timedelta , at least in your code.']], [[' >>> divtd(datetime.timedelta(hours = 12), datetime.timedelta(hours = 2))\n6\n>>> divtd(datetime.timedelta(hours = 12), 2)\ndatetime.timedelta(0, 21600)\n>>> MyTimeDelta(hours = 12) / MyTimeDelta(hours = 2)\n6\n']], ['How can I perform divison on a datetime.timedelta in python?'], 3], [(866000, 0), [['-10000'], ['Prints:']], [[' from BeautifulSoup import BeautifulSoup\nimport re\n\nhtml_text = """\n<h2>this is cool #12345678901</h2>\n<h2>this is nothing</h2>\n<h1>foo #126666678901</h1>\n<h2>this is interesting #126666678901</h2>\n<h2>this is blah #124445678901</h2>\n"""\n\nsoup = BeautifulSoup(html_text)\n\n\nfor elem in soup(text=re.compile(r\' #\\S{11}\')):\n    print elem.parent\n']], ['Using BeautifulSoup to find a HTML tag that contains certain text'], 2], [(866000, 1), [['Prints:'], ['-10000']], [[' <h2>this is cool #12345678901</h2>\n<h2>this is interesting #126666678901</h2>\n<h2>this is blah #124445678901</h2>\n']], ['Using BeautifulSoup to find a HTML tag that contains certain text'], 2], [(866737, 0), [['on terminal 1:'], ['on terminal 2 (bash):']], [[' mkfifo /tmp/display_data\nmyapp >> /tmp/display_data\n']], ['Creating a new terminal/shell window to simply display text'], 2], [(866737, 1), [['on terminal 2 (bash):'], ['Edit :  changed terminal 2 command to use "tail -f" instead of infinite loop.']], [[' tail -f /tmp/display_data\n']], ['Creating a new terminal/shell window to simply display text'], 2], [(868325, 0), [['python has a  return  statement, which allows you to do the follwing:'], ["but you don't need to have  result  at all, you can return a few values like so:"]], [[' def func(input):\n    # do calculation on input\n    return result\n\ns = "hello goodbye"\nres = func(s)       # res now a result dictionary\n']], ['Python Newbie: Returning Multiple Int/String Results in Python'], 2], [(868325, 1), [["but you don't need to have  result  at all, you can return a few values like so:"], ['-10000']], [[' def func(input):\n    # do work\n    return length, something_else         # one might be an integer another string, etc.\n\ns = "hello goodbye"\nlength, something = func(s)\n']], ['Python Newbie: Returning Multiple Int/String Results in Python'], 2], [(869229, 0), [['use while loop:'], ['use range:']], [[' 1           0 LOAD_CONST               0 (0)\n            3 STORE_NAME               0 (i)\n\n2           6 SETUP_LOOP              28 (to 37)\n      >>    9 LOAD_NAME                0 (i)              # <-\n           12 LOAD_CONST               1 (100000000)      # <-\n           15 COMPARE_OP               0 (<)              # <-\n           18 JUMP_IF_FALSE           14 (to 35)          # <-\n           21 POP_TOP                                     # <-\n\n3          22 LOAD_NAME                0 (i)              # <-\n           25 LOAD_CONST               2 (1)              # <-\n           28 INPLACE_ADD                                 # <-\n           29 STORE_NAME               0 (i)              # <-\n           32 JUMP_ABSOLUTE            9                  # <-\n      >>   35 POP_TOP\n           36 POP_BLOCK\n']], ['Why is looping over range() in Python faster than using a while loop?'], 2], [(869229, 1), [['use range:'], ['The loop body has 3 op']], [[' 1           0 SETUP_LOOP              23 (to 26)\n            3 LOAD_NAME                0 (range)\n            6 LOAD_CONST               0 (0)\n            9 LOAD_CONST               1 (100000000)\n           12 CALL_FUNCTION            2\n           15 GET_ITER\n      >>   16 FOR_ITER                 6 (to 25)        # <-\n           19 STORE_NAME               1 (n)            # <-\n\n2          22 JUMP_ABSOLUTE           16                # <-\n      >>   25 POP_BLOCK\n      >>   26 LOAD_CONST               2 (None)\n           29 RETURN_VALUE\n']], ['Why is looping over range() in Python faster than using a while loop?'], 2], [(870652, 0), [['Something like:'], ['Full example:']], [[' zip(t[::2], t[1::2])\n']], ['Pythonic way to split comma separated numbers into pairs'], 2], [(870652, 1), [['Full example:'], ['If the number of items is odd, the last element will be ignored.  Only complete pairs will be included.']], [[" >>> s = ','.join(str(i) for i in range(10))\n>>> s\n'0,1,2,3,4,5,6,7,8,9'\n>>> t = [int(i) for i in s.split(',')]\n>>> t\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> p = zip(t[::2], t[1::2])\n>>> p\n[(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)]\n>>>\n"]], ['Pythonic way to split comma separated numbers into pairs'], 2], [(870925, 0), [['In SQLAlchemy 0.8 you need to do'], ['In SQLAlchemy 0.9 the syntax is simplified.']], [[" engine = create_engine(\n'mssql+pyodbc://./MyDb',\nstrategy='mock',\nexecutor= lambda sql, *multiparams, **params: print (sql.compile(dialect=engine.dialect)))\n"]], ["How to generate a file with DDL in the engine's SQL dialect in SQLAlchemy?"], 2], [(870925, 1), [['In SQLAlchemy 0.9 the syntax is simplified.'], ["The longer answer is that capturing the output still has some slight issues. Like with the encoding of literals of types. But this hasn't been a big enough of an issue for anyone to step up and scratch their itch. You could always let SQLAlchemy programmatically create an empty database and dump the SQL from there."]], [[" engine = create_engine(\n'mssql+pyodbc://./MyDb',\nstrategy='mock',\nexecutor= lambda sql, *multiparams, **params: print (sql)\n"]], ["How to generate a file with DDL in the engine's SQL dialect in SQLAlchemy?"], 2], [(874245, 0), [['According to the  ctypes callback docs  you can define python function'], ['and then create a pointer to a C callable function like this:']], [[' def my_callback(a, p, frame, p1, p2)\n    pass\n']], ['Python ctypes and function pointers'], 2], [(874245, 1), [['and then create a pointer to a C callable function like this:'], ['This function pointer can then be passed into FLAC']], [[' callback = write_callback_prototype(my_callback)\n']], ['Python ctypes and function pointers'], 2], [(874521, 0), [['Create your script and place it in your project like this:'], ['In your  setup.py  file do this:']], [[' yourprojectdir/\n    setup.py\n    scripts/\n        myscript.sh\n']], ['Python - install script to system'], 4], [(874521, 1), [['In your  setup.py  file do this:'], ['Then type']], [[" from setuptools import setup\n# you may need setuptools instead of distutils\n\nsetup(\n    # basic stuff here\n    scripts = [\n        'scripts/myscript.sh'\n    ]\n)\n"]], ['Python - install script to system'], 4], [(874521, 2), [['Then type'], ["Basically that's it. There's a chance that your script will land not exactly in  /usr/bin , but in some other directory. If this is the case, type"]], [[' python setup.py install\n']], ['Python - install script to system'], 4], [(874521, 3), [["Basically that's it. There's a chance that your script will land not exactly in  /usr/bin , but in some other directory. If this is the case, type"], ['and search for  --install-scripts  parameter and friends.']], [[' python setup.py install --help\n']], ['Python - install script to system'], 4], [(875074, 0), [['Yes, you need to use  __repr__ . A quick example of its behavior:'], ["However, if you don't define a  __str__ , it falls back to  __repr__ , although this isn't recommended:"]], [[" >>> class Foo:\n...     def __str__(self):\n...             return '__str__'\n...     def __repr__(self):\n...             return '__repr__'\n...\n>>> bar = Foo()\n>>> bar \n__repr__\n>>> print bar \n__str__\n>>> repr(bar)\n'__repr__'\n>>> str(bar)\n'__str__'\n"]], ['How to print a list, dict or collection of objects, in Python'], 2], [(875074, 1), [["However, if you don't define a  __str__ , it falls back to  __repr__ , although this isn't recommended:"], ['All things considered, as the manual recommends,  __repr__  is used for debugging and should return something  repr esentative of the object.']], [[" >>> class Foo:\n...     def __repr__(self):\n...             return '__repr__'\n...\n>>> bar = Foo()\n>>> bar\n__repr__\n>>> print bar\n__repr__\n"]], ['How to print a list, dict or collection of objects, in Python'], 2], [(877479, 0), [['The shortest in terms of lines of code i can think of is for the first question.'], ['And the for the second question']], [[' >>> import numpy as np\n>>> p = np.array([[1,2],[3,4]])\n\n>>> p = np.append(p, [[5,6]], 0)\n>>> p = np.append(p, [[7],[8],[9]],1)\n\n>>> p\narray([[1, 2, 7],\n   [3, 4, 8],\n   [5, 6, 9]])\n']], ["What's the simplest way to extend a numpy array in 2 dimensions?"], 2], [(877479, 1), [['And the for the second question'], ['-10000']], [['     p = np.array(range(20))\n>>> p.shape = (4,5)\n>>> p\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14],\n       [15, 16, 17, 18, 19]])\n>>> n = 2\n>>> p = np.append(p[:n],p[n+1:],0)\n>>> p = np.append(p[...,:n],p[...,n+1:],1)\n>>> p\narray([[ 0,  1,  3,  4],\n       [ 5,  6,  8,  9],\n       [15, 16, 18, 19]])\n']], ["What's the simplest way to extend a numpy array in 2 dimensions?"], 2], [(880988, 0), [["Since your requirements on what parts you want are different from what urlparse gives you, that's as good as it's going to get. You could, however, replace this:"], ['With this:']], [[' partCount = len(pathParts) - 1\n\npath = "/"\nfor i in range(2, partCount):\n    path += pathParts[i] + "/"\n']], ['Pythonic URL Parsing'], 2], [(880988, 1), [['With this:'], ['-10000']], [[" path = '/'.join(pathParts[2:-1])\n"]], ['Pythonic URL Parsing'], 2], [(881792, 0), [['Here is how I do it:'], ['You would add something like ']], [[' from django.contrib.contenttypes.models import ContentType\nfrom django.contrib.contenttypes import fields\n\n\nclass Photo(models.Model):\n    picture = models.ImageField(null=True, upload_to=\'./images/\')\n    caption = models.CharField(_("Optional caption"),max_length=100,null=True, blank=True)\n\n    content_type = models.ForeignKey(ContentType)\n    object_id = models.PositiveIntegerField()\n    content_object = fields.GenericForeignKey(\'content_type\', \'object_id\')\n\nclass Article(models.Model):\n    ....\n    images     = fields.GenericRelation(Photo)\n']], ['How to use dynamic foreignkey in Django?'], 3], [(881792, 1), [['You would add something like '], ['to Faves\nand ']], [["     content_type = models.ForeignKey(ContentType)\n    object_id = models.PositiveIntegerField()\n    content_object = fields.GenericForeignKey('content_type', 'object_id')\n"]], ['How to use dynamic foreignkey in Django?'], 3], [(881792, 2), [['to Faves\nand '], ['to Article and Cast']], [['     fields.GenericRelation(Faves)\n']], ['How to use dynamic foreignkey in Django?'], 3], [(882215, 0), [["Imagine you have a template (e.g., 'subtemplate.html') of whatever size that contains a useful block you can reuse:"], ['By importing in your view file the snippet above you can easily reference to any block in your templates. A cool feature is that the inheritance relations among templates are taken into consideration, so if you reference to a block that includes another block and so on, everything should work just fine. So, the ajax-view looks like this: ']], [['      ........\n    <div id="results">          \n        {% block results %}\n            {% for el in items %}\n                   <li>{{el|capfirst}}</li>\n            {% endfor %}\n        {% endblock %}      \n    </div><br />\n     ........\n']], ['Rendering JSON objects using a Django template after an Ajax call'], 2], [(882215, 1), [['By importing in your view file the snippet above you can easily reference to any block in your templates. A cool feature is that the inheritance relations among templates are taken into consideration, so if you reference to a block that includes another block and so on, everything should work just fine. So, the ajax-view looks like this: '], ['-10000']], [[" from django.template import loader\n# downloaded from djangosnippets.com[942]\nfrom my_project.snippets.template import render_block_to_string\n\ndef ajax_view(request):\n    # some random context\n    context = Context({'items': range(100)})\n    # passing the template_name + block_name + context\n    return_str = render_block_to_string('standard/subtemplate.html', 'results', context)\n    return HttpResponse(return_str)\n"]], ['Rendering JSON objects using a Django template after an Ajax call'], 2], [(882430, 0), [['You can configure it in apache like that:'], ['example  myapp.py :']], [[' WSGIScriptAlias /myapp /usr/local/www/wsgi-scripts/myapp.py\n']], ['How to hide "cgi-bin", ".py", etc from my URLs?'], 2], [(882430, 1), [['example  myapp.py :'], ['-10000']], [[" def application(environ, start_response):\n    start_response('200 OK', [('Content-type', 'text/plain')])\n    return ['Hello World!']\n"]], ['How to hide "cgi-bin", ".py", etc from my URLs?'], 2], [(883313, 0), [["edit:  (adapted from ShawnMilo's comment):"], ['then, from your view function, just create the  xls  object and finish with ']], [[' def xls_to_response(xls, fname):\n    response = HttpResponse(mimetype="application/ms-excel")\n    response[\'Content-Disposition\'] = \'attachment; filename=%s\' % fname\n    xls.save(response)\n    return response\n']], ['django excel xlwt'], 2], [(883313, 1), [['then, from your view function, just create the  xls  object and finish with '], ['-10000']], [[" return xls_to_response(xls,'foo.xls')\n"]], ['django excel xlwt'], 2], [(883575, 0), [["As far as I'm aware, there's no way to specify database-side ordering in this way as it would be too backend-specific. You may wish to resort to good old-fashioned Python sorting:"], ["If you find yourself needing this kind of sorting a lot, I'd recommend making a custom  models.Manager  subclass for your model that performs the ordering. Something like:"]], [[" class Foo(models.Model):\n    name = models.CharField(max_length=128)\n\nFoo.objects.create(name='a10')\nFoo.objects.create(name='a1')\nFoo.objects.create(name='a2')\n\nordered = sorted(Foo.objects.all(), key=lambda n: (n[0], int(n[1:])))\nprint ordered # yields a1, a2, 10\n"]], ['Custom ordering in Django'], 2], [(883575, 1), [["If you find yourself needing this kind of sorting a lot, I'd recommend making a custom  models.Manager  subclass for your model that performs the ordering. Something like:"], ['-10000']], [[' class FooManager(models.Manager):\n    def in_a_number_order(self, *args, **kwargs):\n        qs = self.get_query_set().filter(*args, **kwargs)\n        return sorted(qs, key=lambda n: (n[0], int(n[1:])))\n\nclass Foo(models.Model):\n    ... as before ...\n    objects = FooManager()\n\nprint Foo.objects.in_a_number_order()\nprint Foo.objects.in_a_number_order(id__in=[5, 4, 3]) # or any filtering expression\n']], ['Custom ordering in Django'], 2], [(883679, 0), [['This involves monkeypatching and might not be the best solution. On the other hand, it seems to work.'], ['Output:']], [[' from optparse import OptionParser, Option\n\n# Complete hack.\nOption.ALWAYS_TYPED_ACTIONS += (\'callback\',)\n\ndef dostuff(*a):\n    pass\n\nparser = OptionParser()\nparser.add_option("-c",\n                  "--callback",\n                  dest="filename",\n                  action="callback",\n                  callback=dostuff,\n                  metavar=\'LIST\',\n                  help=\'do stuff\',\n                  )\n\n(options, args) = parser.parse_args()\n']], ['Optparse: Usage on variable arg callback action does not indicate that extra params are needed'], 2], [(883679, 1), [['Output:'], ['-10000']], [[' Usage: opt.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -c LIST, --callback=LIST\n                        do stuff\n']], ['Optparse: Usage on variable arg callback action does not indicate that extra params are needed'], 2], [(884650, 0), [['What you are looking for is the  process pool  class in multiprocessing.'], ["And here is a calculation example to make it easier to understand. The following will divide 10000 tasks on N processes where N is the cpu count. Note that I'm passing None as the number of processes. This will cause the Pool class to use cpu_count for the number of processes ( reference )"]], [[" import multiprocessing\nimport subprocess\n\ndef work(cmd):\n    return subprocess.call(cmd, shell=False)\n\nif __name__ == '__main__':\n    count = multiprocessing.cpu_count()\n    pool = multiprocessing.Pool(processes=count)\n    print pool.map(work, ['ls'] * count)\n"]], ['How to spawn parallel child processes on a multi-processor system?'], 2], [(884650, 1), [["And here is a calculation example to make it easier to understand. The following will divide 10000 tasks on N processes where N is the cpu count. Note that I'm passing None as the number of processes. This will cause the Pool class to use cpu_count for the number of processes ( reference )"], ['-10000']], [[" import multiprocessing\nimport subprocess\n\ndef calculate(value):\n    return value * 10\n\nif __name__ == '__main__':\n    pool = multiprocessing.Pool(None)\n    tasks = range(10000)\n    results = []\n    r = pool.map_async(calculate, tasks, callback=results.append)\n    r.wait() # Wait on the results\n    print results\n"]], ['How to spawn parallel child processes on a multi-processor system?'], 2], [(885546, 0), [['Use  groupby , it group elements by value:'], ['And here is the code in action:']], [[' from itertools import groupby\ngroup = groupby([1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1])\nprint max(group, key=lambda k: len(list(k[1])))\n']], ['How do you calculate the greatest number of repetitions in a list?'], 4], [(885546, 1), [['And here is the code in action:'], ['The operation of groupby() is similar\n  to the uniq filter in Unix. It\n  generates a break or new group every\n  time the value of the key function\n  changes']], [[' >>> group = groupby([1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1])\n>>> print max(group, key=lambda k: len(list(k[1])))\n(2, <itertools._grouper object at 0xb779f1cc>)\n>>> group = groupby([1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 3, 3, 3, 3])\n>>> print max(group, key=lambda k: len(list(k[1])))\n(3, <itertools._grouper object at 0xb7df95ec>)\n']], ['How do you calculate the greatest number of repetitions in a list?'], 4], [(885546, 2), [['The operation of groupby() is similar\n  to the uniq filter in Unix. It\n  generates a break or new group every\n  time the value of the key function\n  changes'], ['If you also want the index of the longest run you can do the following:']], [[" # [k for k, g in groupby('AAAABBBCCDAABBB')] --> A B C D A B\n# [list(g) for k, g in groupby('AAAABBBCCD')] --> AAAA BBB CC D\n"]], ['How do you calculate the greatest number of repetitions in a list?'], 4], [(885546, 3), [['If you also want the index of the longest run you can do the following:'], ['-10000']], [[' group = groupby([1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 3, 3, 3, 3])\nresult = []\nindex = 0\nfor k, g in group:\n   length = len(list(g))\n   result.append((k, length, index))\n   index += length\n\nprint max(result, key=lambda a:a[1])\n']], ['How do you calculate the greatest number of repetitions in a list?'], 4], [(886716, 0), [['Just use the  width  keyword argument:'], ['Or, since different months have different numbers of days, to make it look good you can use a sequence:']], [[' bar(x, y, width=30)\n']], ['Controling bars width in matplotlib with per-month data'], 2], [(886716, 1), [['Or, since different months have different numbers of days, to make it look good you can use a sequence:'], ['-10000']], [[' bar(x, y, width=[(x[j+1]-x[j]).days for j in range(len(x)-1)] + [30])\n']], ['Controling bars width in matplotlib with per-month data'], 2], [(888406, 0), [['check your environment variables:'], ['in your python hook, try:']], [[' $ LANG="en_US.UTF8" python -c "import sys; print sys.stdout.encoding"\nUTF-8\n$ LANG="en_US" python -c "import sys; print sys.stdout.encoding"  \nANSI_X3.4-1968\n']], ['Make Emacs use UTF-8 with Python Interactive Mode'], 2], [(888406, 1), [['in your python hook, try:'], ['-10000']], [[' (setenv "LANG" "en_US.UTF8")\n']], ['Make Emacs use UTF-8 with Python Interactive Mode'], 2], [(889088, 0), [['Though  inspect  may get you a bit on the way, what you want is in general  not  possible:'], ["Edit:  if you're willing to put up with  verbose  as a special keyword argument, you can do this:"]], [[' def f(*args):\n    pass\n']], ['Function Decorators'], 2], [(889088, 1), [["Edit:  if you're willing to put up with  verbose  as a special keyword argument, you can do this:"], ['(Thanks  Alex Martelli  for the  kwargs.pop  tip!)']], [[' import time\n\ndef timed(f):\n    def dec(*args, **kwargs):\n        verbose = kwargs.pop(\'verbose\', False)\n        t = time.clock()\n\n        ret = f(*args, **kwargs)\n\n        if verbose:\n            print("%s executed in %ds" % (f.__name__, time.clock() - t))\n\n        return ret\n\n    return dec\n\n@timed\ndef add(a, b):\n    return a + b\n\nprint(add(2, 2, verbose=True))\n']], ['Function Decorators'], 2], [(890051, 0), [['The easiest way to do it is by using masks. Create a black and white mask with any shape you want. And put that shape as an alpha layer '], ['If you want the thumbnail size to be variable you can use the ImageDraw and draw the mask.']], [[" from PIL import Image, ImageOps\n\nmask = Image.open('mask.png').convert('L')\nim = Image.open('image.png')\noutput = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))\noutput.putalpha(mask)\noutput.save('output.png')\n"]], ['How do I generate circular thumbnails with PIL?'], 3], [(890051, 1), [['If you want the thumbnail size to be variable you can use the ImageDraw and draw the mask.'], ['If you want the output in GIF then you need to use the paste function instead of putalpha:']], [[" from PIL import Image, ImageOps, ImageDraw\n\nsize = (128, 128)\nmask = Image.new('L', size, 0)\ndraw = ImageDraw.Draw(mask) \ndraw.ellipse((0, 0) + size, fill=255)\nim = Image.open('image.jpg')\noutput = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))\noutput.putalpha(mask)\noutput.save('output.png')\n"]], ['How do I generate circular thumbnails with PIL?'], 3], [(890051, 2), [['If you want the output in GIF then you need to use the paste function instead of putalpha:'], ['Note that I did the following changes:']], [[" from PIL import Image, ImageOps, ImageDraw\n\nsize = (128, 128)\nmask = Image.new('L', size, 255)\ndraw = ImageDraw.Draw(mask)\ndraw.ellipse((0, 0) + size, fill=0)\nim = Image.open('image.jpg')\noutput = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))\noutput.paste(0, mask=mask)\noutput.convert('P', palette=Image.ADAPTIVE)\noutput.save('output.gif', transparency=0)\n"]], ['How do I generate circular thumbnails with PIL?'], 3], [(890128, 0), [['Are you talking about  lambda functions ? Like'], ['Those things are actually quite useful.  Python supports a style of programming called  functional programming  where you can pass functions to other functions to do stuff. Example:']], [[' lambda x: x**2 + 2*x - 5\n']], ['Why are Python lambdas useful?'], 7], [(890128, 1), [['Those things are actually quite useful.  Python supports a style of programming called  functional programming  where you can pass functions to other functions to do stuff. Example:'], ['sets  mult3  to  [3, 6, 9] , those elements of the original list that are multiples of 3. This is shorter (and, one could argue, clearer) than']], [[' mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n']], ['Why are Python lambdas useful?'], 7], [(890128, 2), [['sets  mult3  to  [3, 6, 9] , those elements of the original list that are multiples of 3. This is shorter (and, one could argue, clearer) than'], ['Of course, in this particular case, you could do the same thing as a list comprehension:']], [[' def filterfunc(x):\n    return x % 3 == 0\nmult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n']], ['Why are Python lambdas useful?'], 7], [(890128, 3), [['Of course, in this particular case, you could do the same thing as a list comprehension:'], ['Returning a function from another function']], [[' mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]\n']], ['Why are Python lambdas useful?'], 7], [(890128, 4), [['Returning a function from another function'], ['Combining elements of an iterable sequence with  reduce()']], [[' >>> def transform(n):\n...     return lambda x: x + n\n...\n>>> f = transform(3)\n>>> f(4)\n7\n']], ['Why are Python lambdas useful?'], 7], [(890128, 5), [['Combining elements of an iterable sequence with  reduce()'], ['Sorting by an alternate key']], [[" >>> reduce(lambda a, b: '{}, {}'.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])\n'1, 2, 3, 4, 5, 6, 7, 8, 9'\n"]], ['Why are Python lambdas useful?'], 7], [(890128, 6), [['Sorting by an alternate key'], ["I use lambda functions on a regular basis. It took me a while to get used to them, but eventually I came to understand that they're a very valuable part of the language."]], [[' >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], key=lambda x: abs(5-x))\n[5, 4, 6, 3, 7, 2, 8, 1, 9]\n']], ['Why are Python lambdas useful?'], 7], [(890924, 0), [["Well, I think I have to answer to this. The problem is that Django caches its models in a singleton (singleton like structure) called AppCache. Basically, to reload Django models you need to first reload and re-import all the model modules stored in the AppCache. Then you need to wipe out the AppCache. Here's the code for it:"], ["I've put all of this in a separate file called reloadmodels.py in the root directory of my Django site. Using IPython I can reload everything by running:"]], [[" import os\nfrom django.db.models.loading import AppCache\ncache = AppCache()\n\ncurdir = os.getcwd()\n\nfor app in cache.get_apps():\n    f = app.__file__\n    if f.startswith(curdir) and f.endswith('.pyc'):\n        os.remove(f)\n    __import__(app.__name__)\n    reload(app)\n\nfrom django.utils.datastructures import SortedDict\ncache.app_store = SortedDict()\ncache.app_models = SortedDict()\ncache.app_errors = {}\ncache.handled = {}\ncache.loaded = False\n"]], ['How do you reload a Django model module using the interactive interpreter via "manage.py shell"?'], 2], [(890924, 1), [["I've put all of this in a separate file called reloadmodels.py in the root directory of my Django site. Using IPython I can reload everything by running:"], ['-10000']], [[' %run ~/mysite/reloadmodels.py\n']], ['How do you reload a Django model module using the interactive interpreter via "manage.py shell"?'], 2], [(893543, 0), [['(In a terminal.  You may have to use  sudo ln -s  depending on the permissions.'], ["If you take  Rory's advice  and put the #!/usr/bin/python at the beginning of the script, you'll also need to make the script executable."]], [[' ln -s /Users/xyz/long/absolute/path/to/script.py /usr/bin/script.py\n']], ['How to define a system-wide alias for a Python script?'], 2], [(893543, 1), [["If you take  Rory's advice  and put the #!/usr/bin/python at the beginning of the script, you'll also need to make the script executable."], ['-10000']], [[' chmod a+x /Users/xyz/long/absolute/path/to/script.py\n']], ['How to define a system-wide alias for a Python script?'], 2], [(893657, 0), [['So you just need to calculate the R-squared for that fit.  The wikipedia page on  linear regression  gives full details.  You are interested in R^2 which you can calculate in a couple of ways, the easisest probably being'], ["I'm not terribly familiar with numpy (I usually work in R), so there is probably a tidier way to calculate your R-squared, but the following should be correct"]], [[' SST = Sum(i=1..n) (y_i - y_bar)^2\nSSReg = Sum(i=1..n) (y_ihat - y_bar)^2\nRsquared = SSReg/SST\n']], ['How do I calculate r-squared using Python and Numpy?'], 2], [(893657, 1), [["I'm not terribly familiar with numpy (I usually work in R), so there is probably a tidier way to calculate your R-squared, but the following should be correct"], ['-10000']], [[" import numpy\n\n# Polynomial Regression\ndef polyfit(x, y, degree):\n    results = {}\n\n    coeffs = numpy.polyfit(x, y, degree)\n\n     # Polynomial Coefficients\n    results['polynomial'] = coeffs.tolist()\n\n    # r-squared\n    p = numpy.poly1d(coeffs)\n    # fit values, and mean\n    yhat = p(x)                         # or [p(z) for z in x]\n    ybar = numpy.sum(y)/len(y)          # or sum(y)/len(y)\n    ssreg = numpy.sum((yhat-ybar)**2)   # or sum([ (yihat - ybar)**2 for yihat in yhat])\n    sstot = numpy.sum((y - ybar)**2)    # or sum([ (yi - ybar)**2 for yi in y])\n    results['determination'] = ssreg / sstot\n\n    return results\n"]], ['How do I calculate r-squared using Python and Numpy?'], 2], [(894802, 0), [['To replace the word in all files found in the current directory and subdirectories'], ["The above won't work if you have spaces in filenames.  Safer to do:"]], [[" perl -p -i -e 's/Masi/Bond/g' $(grep -rl Masi *)\n"]], ["Unable to replace the word in a given folder's contents by Sed/Python/Perl"], 3], [(894802, 1), [["The above won't work if you have spaces in filenames.  Safer to do:"], ['or in Mac which has spaces in filenames']], [[" find . -type f -exec perl -p -i -e 's/Masi/Bond/g' {} \\;\n"]], ["Unable to replace the word in a given folder's contents by Sed/Python/Perl"], 3], [(894802, 2), [['or in Mac which has spaces in filenames'], ['Explanations']], [[" find . -type f -print0 | xargs -0 perl -p -i -e 's/Masi/Bond/g'\n"]], ["Unable to replace the word in a given folder's contents by Sed/Python/Perl"], 3], [(896166, 0), [['This "smart" stuff logic should not be in the template.\nBuild your end-of-urls in your view and then pass them to template:'], ['In template.html:']], [[' def the_view(request):\n  url_stuff = "custid=%s, sortid, ...." % (name.id, 2 ...)\n\n  return render_to_response(\'template.html\',\n    {\'url_stuff\':url_stuff,},\n    context_instance = RequestContext(request))\n']], ['Django -- how to use templatetags filter with multiple arguments'], 2], [(896166, 1), [['In template.html:'], ['If you need a url for a whole bunch of objects consider using  get_absolute_url  on the model.']], [["  ....\n\n    <a href='{{url_stuff}}'>{{name}}</a>\n\n ....\n"]], ['Django -- how to use templatetags filter with multiple arguments'], 2], [(897362, 0), [['Use  map  only for functions without side effects (like  print ). That is, use it only for functions that just return something. In this case a regular loop is more idiomatic:'], ['File  map.py :']], [[' for f in lst:\n    f("event_info")\n']], ['What is the idiomatic way of invoking a list of functions in Python?'], 3], [(897362, 1), [['File  map.py :'], ['2to3-3.0 map.py  output:']], [[' map(lambda x: x, range(10))\n']], ['What is the idiomatic way of invoking a list of functions in Python?'], 3], [(897362, 2), [['2to3-3.0 map.py  output:'], ['-10000']], [[' RefactoringTool: Skipping implicit fixer: buffer\nRefactoringTool: Skipping implicit fixer: idioms\nRefactoringTool: Skipping implicit fixer: set_literal\nRefactoringTool: Skipping implicit fixer: ws_comma\n--- map.py (original)\n+++ map.py (refactored)\n@@ -1,1 +1,1 @@\n-map(lambda x: x, range(10))\n+list(map(lambda x: x, list(range(10))))\nRefactoringTool: Files that need to be modified:\nRefactoringTool: map.py\nRefactoringTool: Warnings/messages while refactoring:\nRefactoringTool: ### In file map.py ###\nRefactoringTool: Line 1: You should use a for loop here\n']], ['What is the idiomatic way of invoking a list of functions in Python?'], 3], [(897941, 0), [['A simple solution for Linux and other systems with  /proc/self/status  is the following code, which I use in a project of mine:'], ['For the curious: the full output of  cat /proc/self/status  looks like this:']], [[' def memory_usage():\n    """Memory usage of the current process in kilobytes."""\n    status = None\n    result = {\'peak\': 0, \'rss\': 0}\n    try:\n        # This will only work on systems with a /proc file system\n        # (like Linux).\n        status = open(\'/proc/self/status\')\n        for line in status:\n            parts = line.split()\n            key = parts[0][2:-1].lower()\n            if key in result:\n                result[key] = int(parts[1])\n    finally:\n        if status is not None:\n            status.close()\n    return result\n']], ["Python equivalent of PHP's memory_get_usage()?"], 2], [(897941, 1), [['For the curious: the full output of  cat /proc/self/status  looks like this:'], ['-10000']], [[' % cat /proc/self/status\nName:   cat\nState:  R (running)\nTgid:   4145\nPid:    4145\nPPid:   4103\nTracerPid:      0\nUid:    1000    1000    1000    1000\nGid:    1000    1000    1000    1000\nFDSize: 32\nGroups: 20 24 25 29 40 44 46 100 1000 \nVmPeak:     3580 kB\nVmSize:     3580 kB\nVmLck:         0 kB\nVmHWM:       472 kB\nVmRSS:       472 kB\nVmData:      160 kB\nVmStk:        84 kB\nVmExe:        44 kB\nVmLib:      1496 kB\nVmPTE:        16 kB\nThreads:        1\nSigQ:   0/16382\nSigPnd: 0000000000000000\nShdPnd: 0000000000000000\nSigBlk: 0000000000000000\nSigIgn: 0000000000000000\nSigCgt: 0000000000000000\nCapInh: 0000000000000000\nCapPrm: 0000000000000000\nCapEff: 0000000000000000\nCapBnd: ffffffffffffffff\nCpus_allowed:   03\nCpus_allowed_list:      0-1\nMems_allowed:   1\nMems_allowed_list:      0\nvoluntary_ctxt_switches:        0\nnonvoluntary_ctxt_switches:     0\n']], ["Python equivalent of PHP's memory_get_usage()?"], 2], [(898739, 0), [['You have to set the "WritingMode" property for the cell. In C#:'], ["I haven't tried it in python yet, but I suppose it would be something like this:"]], [[' XCell cell = table.getCellByName(cellName);\n((XPropertySet)cell).setPropertyValue("WritingMode", new Any((short) \nWritingMode.TB_RL));\n']], ['How do you set the text direction for a TextTable Cell in OpenOffice?'], 2], [(898739, 1), [["I haven't tried it in python yet, but I suppose it would be something like this:"], ["If you're using a statically typed language, make sure you cast it to a short. Doing  typeof(WritingMode)  won't work, for some odd reason."]], [[' cell = table.getCellByName(cellName)\ncell.WritingMode = 2\n']], ['How do you set the text direction for a TextTable Cell in OpenOffice?'], 2], [(899103, 0), [["I'd use a loop:"], ['or:']], [[' for item in thelist:\n  thefile.write("%s\\n" % item)\n']], ['Writing a list to a file with Python'], 2], [(899103, 1), [['or:'], ["If you're keen on a single function call, at least remove the square brackets  []  so that the strings to be printed get made one at a time (a genexp rather than a listcomp) -- no reason to take up all the memory required to materialize the whole list of strings."]], [[' for item in thelist:\n  print>>thefile, item\n']], ['Writing a list to a file with Python'], 2], [(899138, 0), [['Basically, you create a Function interface:'], ['Your method could either apply the function to each element in-place:']], [[' public interface Func<In, Out> {\n    public Out apply(In in);\n}\n']], ['Python-like list comprehension in Java'], 3], [(899138, 1), [['Your method could either apply the function to each element in-place:'], ['or create a new  List  (basically creating a mapping from the input list to the output list):']], [[' public static <T> void applyToListInPlace(List<T> list, Func<T, T> f) {\n    ListIterator<T> itr = list.listIterator();\n    while (itr.hasNext()) {\n        T output = f.apply(itr.next());\n        itr.set(output);\n    }\n}\n// ...\nList<String> myList = ...;\napplyToListInPlace(myList, new Func<String, String>() {\n    public String apply(String in) {\n        return in.toLowerCase();\n    }\n});\n']], ['Python-like list comprehension in Java'], 3], [(899138, 2), [['or create a new  List  (basically creating a mapping from the input list to the output list):'], ['Which one is preferable depends on your use case. If your list is extremely large, the in-place solution may be the only viable one; if you wish to apply many different functions to the same original list to make many derivative lists, you will want the  map  version.']], [[' public static <In, Out> List<Out> map(List<In> in, Func<In, Out> f) {\n    List<Out> out = new ArrayList<Out>(in.size());\n    for (In inObj : in) {\n        out.add(f.apply(inObj));\n    }\n    return out;\n}\n// ...\nList<String> myList = ...;\nList<String> lowerCased = map(myList, new Func<String, String>() {\n    public String apply(String in) {\n        return in.toLowerCase();\n    }\n});\n']], ['Python-like list comprehension in Java'], 3], [(899273, 0), [['-10000'], ['Prints:']], [[" import os\n\ndef findup(filename):\n    drive, thisdir = os.path.splitdrive(os.getcwd())\n    while True:\n        fullpath = os.path.join(drive, thisdir, filename)\n        if os.path.isfile(fullpath):\n            return fullpath\n        if thisdir == os.path.sep: #root dir\n            raise LookupError('file not found: %r' % filename)\n        thisdir = os.path.dirname(thisdir)\n\nos.makedirs('/tmp/foo/bar/baz/qux')\nopen('/tmp/foo/findme.txt', 'w').close()\nos.chdir('/tmp/foo/bar/baz/qux')\nprint findup('findme.txt')\n"]], ['How to find a file upwardly in Python?'], 2], [(899273, 1), [['Prints:'], ['Also works on Windows. Probably will work on any platform.']], [[' /tmp/foo/findme.txt\n']], ['How to find a file upwardly in Python?'], 2], [(899804, 0), [['What about removing the  .  from the regex?'], ['replace with:']], [[' ^(\\d{2})\\.(\\d{1})[\\.](.*)\n']], ['Pad an integer using a regular expression'], 2], [(899804, 1), [['replace with:'], ['-10000']], [[' \\1.0\\2.\\3\n']], ['Pad an integer using a regular expression'], 2], [(900396, 0), [["What you are looking for is  eval . But please keep in mind that this function will evaluate and execute the lines. So don't run it on untrusted input ever!"], ['If you have control over the script that generate the output file, then I would suggest you use  json  encoding. JSON format is very similar to the python string representation of lists and dictionaries. And will be much more secure and robust to read from.']], [[' >>> print eval("[(\'tupleValueA\', 1), \'someString\']")\n[(\'tupleValueA\', 1), \'someString\']\n']], ['Is there a high-level way to read in lines from an output file and have the types recognized by the structure of the contents?'], 2], [(900396, 1), [['If you have control over the script that generate the output file, then I would suggest you use  json  encoding. JSON format is very similar to the python string representation of lists and dictionaries. And will be much more secure and robust to read from.'], ['-10000']], [[' >>> import json\n>>> json.dumps([\'foo\', {\'bar\': (\'baz\', None, 1.0, 2)}])\n\'["foo", {"bar": ["baz", null, 1.0, 2]}]\'\n>>> json.loads(\'["foo", {"bar": ["baz", null, 1.0, 2]}]\')\n["foo", {"bar": ["baz", null, 1.0, 2]}]\n']], ['Is there a high-level way to read in lines from an output file and have the types recognized by the structure of the contents?'], 2], [(900420, 0), [['Convert both sequences to lists, and use builtin list comparison. It should be sufficient, unless your sequences are really large.'], ['Testing done by schickb shows that using tuples is slightly faster:']], [[' list(a) == list(b)\n']], ['Elegant way to compare sequences'], 2], [(900420, 1), [['Testing done by schickb shows that using tuples is slightly faster:'], ['-10000']], [[' tuple(a) == tuple(b)\n']], ['Elegant way to compare sequences'], 2], [(901892, 0), [['What I like most about nested functions is that it is less verbose than classes. The equivalent class definition to your maker function is:'], ['It turns out that there is a speed advantage to the nested functions as well:']], [[' class clsmaker(object):\n    def __init__(self, N):\n        self.N = N\n    def __call__(self, X):\n        return X * self.N\n']], ['python factory functions compared to class'], 3], [(901892, 1), [['It turns out that there is a speed advantage to the nested functions as well:'], ['This may be due to there being fewer opcodes involved in the nested functions version:']], [[" >>> T1 = timeit.Timer('maker(3)(4)', 'from __main__ import maker')\n>>> T1.timeit()\n1.2818338871002197\n>>> T2 = timeit.Timer('clsmaker(3)(4)', 'from __main__ import clsmaker')\n>>> T2.timeit()\n2.2137160301208496\n"]], ['python factory functions compared to class'], 3], [(901892, 2), [['This may be due to there being fewer opcodes involved in the nested functions version:'], ['-10000']], [[' >>> dis(clsmaker.__call__)\n  5           0 LOAD_FAST                1 (X)\n              3 LOAD_FAST                0 (self)\n              6 LOAD_ATTR                0 (N)\n              9 BINARY_MULTIPLY     \n             10 RETURN_VALUE        \n>>> act = maker(3)\n>>> dis(act)\n  3           0 LOAD_FAST                0 (X)\n              3 LOAD_DEREF               0 (N)\n              6 BINARY_MULTIPLY     \n              7 RETURN_VALUE  \n']], ['python factory functions compared to class'], 3], [(902833, 0), [['With many Open Source packages, you can set:'], ['or even:']], [[' export CPPFLAGS="-I/usr/local/include"\n']], ['Compiling Python, curses.h not found'], 3], [(902833, 1), [['or even:'], ['The configure script only includes  <curses.h> .  I had to use:']], [[' export CPPFLAGS="-I/usr/local/include/ncurses"\n']], ['Compiling Python, curses.h not found'], 3], [(902833, 2), [['The configure script only includes  <curses.h> .  I had to use:'], ["To get the Python (2.5) configure to accept curses.  You'd replace ' gnu ' with ' local ' for your configuration."]], [[' export CPPFLAGS="-I/usr/gnu/include -I/usr/gnu/include/ncurses"\nexport LDFLAGS="-L/usr/gnu/lib"\n./configure\n']], ['Compiling Python, curses.h not found'], 3], [(903497, 0), [['Example:'], ['Then from a method somewhere you can write']], [[' def codeinfo():\n    import sys\n    f = sys._getframe(1)\n\n    filename = f.f_code.co_filename\n    classname = \'\'\n\n    if \'self\' in f.f_locals:\n        classname = f.f_locals[\'self\'].__class__.__name__\n\n    funcname = f.f_code.co_name\n\n    return "filename: %s\\nclass: %s\\nfunc: %s" % (filename, classname, funcname)\n']], ['Python - get static information'], 2], [(903497, 1), [['Then from a method somewhere you can write'], ['-10000']], [[' logger.info("Some message \\n %s" % codeinfo())\n']], ['Python - get static information'], 2], [(903562, 0), [['Use  (?:)  to get rid of the unnamed group:'], ['By the way, the alternation operator  |  has very low precedence in order to make parentheses unnecessary in cases like yours. You can drop the extra parentheses in your regex and it will continue to work as expected:']], [[' r"(?:(?P<a>1)=(?P<b>2))|(?P<c>3)"\n']], ['python, regular expressions, named groups and "logical or" operator'], 2], [(903562, 1), [['By the way, the alternation operator  |  has very low precedence in order to make parentheses unnecessary in cases like yours. You can drop the extra parentheses in your regex and it will continue to work as expected:'], ['-10000']], [[' r"(?P<a>1)=(?P<b>2)|(?P<c>3)"\n']], ['python, regular expressions, named groups and "logical or" operator'], 2], [(905142, 0), [['How about a more pythonic way?'], ['Finally, to jump to your correct answer']], [[" #input\nlistOfBubbles = ['45', '5j', ' f', 'e', 's ', ' ', ' ', ' 45', 'q', '']\n#Copy input, strip leading / trailing spaces. Remove empty items\nstripped = [x.strip() for x in listOfBubbles if x.strip()]    \n\n# list(filtered) is ['45', '5j', 'f', 'e', 's', '45', 'q']\nout = []\nfor val in filtered:\n  try:\n    out.append(int(val))\n  except:\n    # don't do anything here, but need pass because python expects at least one line\n    pass \n# out is [45, 45]\n"]], ["I can't find the logic error in this bubble sort code"], 3], [(905142, 1), [['Finally, to jump to your correct answer'], ['Update \nTo clarify pass']], [[' out.sort()\n']], ["I can't find the logic error in this bubble sort code"], 3], [(905142, 2), [['Update \nTo clarify pass'], ['-10000']], [[' >>> for i in range(0,5):\n        pass\n        print i\n\n0\n1\n2\n3\n4\n']], ["I can't find the logic error in this bubble sort code"], 3], [(907351, 0), [['mydbfields.py'], ['Usage: ']], [[' from django import forms\nfrom django.forms.fields import DEFAULT_DATE_INPUT_FORMATS\nfrom django.db import models\n\nclass EuDateFormField(forms.DateField):\n    def __init__(self, *args, **kwargs):\n        kwargs.update({\'input_formats\': ("%d.%m.%Y",)+DEFAULT_DATE_INPUT_FORMATS})\n        super(EuDateFormField, self).__init__(*args, **kwargs)\n\nclass EuDateField(models.DateField):\n    def formfield(self, **kwargs):\n        kwargs.update({\'form_class\': EuDateFormField})\n        return super(EuDateField, self).formfield(**kwargs)\n']], ['European date input in Django Admin'], 3], [(907351, 1), [['Usage: '], ['My django version is: ']], [[' from mydbfields import EuDateField\nclass Person(models.Model):\n    ...\n    birthday   = EuDateField("Birthday", null=True, blank=True, help_text="")\n']], ['European date input in Django Admin'], 3], [(907351, 2), [['My django version is: '], ['-10000']], [[" >>> import django\n>>> django.get_version()\nu'1.1 alpha 1 SVN-10105'\n"]], ['European date input in Django Admin'], 3], [(909062, 0), [["Just for completeness, I'd like to note that if your snippet is an example of the entire file, it is not valid XML. Valid XML should have start and end tags, like so:"], ["In response to your edits, I still won't do it as a one-liner, but here's a Perl script that you can use:"]], [[' <netlist>\n  <net NetName="abc" attr1="123" attr2="234" attr3="345".../>\n  <net NetName="cde" attr1="456" attr2="567" attr3="678".../>\n  ....\n</netlist>\n']], ['How can I mine an XML document with awk, Perl, or Python?'], 2], [(909062, 1), [["In response to your edits, I still won't do it as a one-liner, but here's a Perl script that you can use:"], ["Run this script from the command line with 1 or 2 arguments. The first argument is the  'NetName'  you want to look up, and the second is the attribute you want to look up. If no attribute is given, it should just list all the attributes for that  'NetName' ."]], [[' #!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse XML::Simple;\n\nsub usage {\n  die "Usage: $0 [NetName] ([attr])\\n";\n}\n\nmy $file = XMLin("file.xml", KeyAttr => { net => \'NetName\' });\n\nusage() if @ARGV == 0;\n\nexists $file->{net}{$ARGV[0]}\n  or die "$ARGV[0] does not exist.\\n";\n\n\nif(@ARGV == 2) {\n  exists $file->{net}{$ARGV[0]}{$ARGV[1]}\n    or die "NetName $ARGV[0] does not have attribute $ARGV[1].\\n";\n  print "$file->{net}{$ARGV[0]}{$ARGV[1]}.\\n";\n\n} elsif(@ARGV == 1) {\n  print "$ARGV[0]:\\n";\n  print "  $_ = $file->{net}{$ARGV[0]}{$_}\\n"\n    for keys %{ $file->{net}{$ARGV[0]} };\n\n} else {\n  usage();\n}\n']], ['How can I mine an XML document with awk, Perl, or Python?'], 2], [(909279, 0), [['You do realize you can write the exact same code in 1 line, right? It is easy using  randint :'], ['This will give you a list of 6 random  integers  between 1 and 60. In your code you are creating  strings  that have these numbers. If you are deliberately creating them as strings, however, you then can do this:']], [[' >>> [random.randint(1,60) for _ in range(6)]\n[22, 29, 48, 18, 20, 22]\n']], ['Python code that needs some overview'], 2], [(909279, 1), [['This will give you a list of 6 random  integers  between 1 and 60. In your code you are creating  strings  that have these numbers. If you are deliberately creating them as strings, however, you then can do this:'], ['-10000']], [[" >>> [str(random.randint(1,60)) for _ in range(6)]\n['55', '54', '15', '46', '42', '37']\n"]], ['Python code that needs some overview'], 2], [(910169, 0), [['It is quite easy - in  admin.py , define:'], ["Don't forget that you should import appropriate classes -- in this case:"]], [[" class YourModelAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.CharField: {'widget': TextInput(attrs={'size':'20'})},\n        models.TextField: {'widget': Textarea(attrs={'rows':4, 'cols':40})},\n    }\n\nadmin.site.register(YourModel, YourModelAdmin)\n"]], ['Resize fields in Django Admin'], 2], [(910169, 1), [["Don't forget that you should import appropriate classes -- in this case:"], ['-10000']], [[' from django.forms import TextInput, Textarea\nfrom django.db import models\n']], ['Resize fields in Django Admin'], 2], [(910930, 0), [["Here's another common approach"], ['Get the point where x=1,y=2,z=3.']], [[' class Point( object ):\n    def __init__( self, x, y, z, data ):\n        self.x, self.y, self.z = x, y, z\n        self.data = data\n    def distFrom( self, x, y, z )\n        return math.sqrt( (self.x-x)**2 + (self.y-y)**2 + (self.z-z)**2 )\n\ndatabase = [ Point(x,y,z,data), Point(x,y,z,data), ... ]\n']], ['Storing information on points in a 3d space'], 5], [(910930, 1), [['Get the point where x=1,y=2,z=3.'], ['Getting all points where y=2.']], [[' [ p for p in database if (p.x, p.y, p.z) == ( 1, 2, 3 ) ]\n']], ['Storing information on points in a 3d space'], 5], [(910930, 2), [['Getting all points where y=2.'], ['Getting all points within 3 units of position x=1,y=2,z=3.']], [[' [ p for p in database if p.y == 2 ]\n']], ['Storing information on points in a 3d space'], 5], [(910930, 3), [['Getting all points within 3 units of position x=1,y=2,z=3.'], ['Getting all points where point.getType() == "Foo"']], [[' [ p for p in database if p.distFrom( 1, 2, 3 ) <= 3.0 ]\n']], ['Storing information on points in a 3d space'], 5], [(910930, 4), [['Getting all points where point.getType() == "Foo"'], ['-10000']], [[' [ p for p in database if type(p.data) == Foo ]\n']], ['Storing information on points in a 3d space'], 5], [(911871, 0), [['This should be faster than iterating and will work regardless of shape.'], ['Edit: 30x faster:']], [[' numpy.isnan(myarray).any()\n']], ['Detect if a NumPy array contains at least one non-numeric value?'], 4], [(911871, 1), [['Edit: 30x faster:'], ['Results:']], [[' import timeit\ns = \'import numpy;a = numpy.arange(10000.).reshape((100,100));a[10,10]=numpy.nan\'\nms = [\n    \'numpy.isnan(a).any()\',\n    \'any(numpy.isnan(x) for x in a.flatten())\']\nfor m in ms:\n    print "  %.2f s" % timeit.Timer(m, s).timeit(1000), m\n']], ['Detect if a NumPy array contains at least one non-numeric value?'], 4], [(911871, 2), [['Results:'], ['Bonus: it works fine for non-array NumPy types:']], [['   0.11 s numpy.isnan(a).any()\n  3.75 s any(numpy.isnan(x) for x in a.flatten())\n']], ['Detect if a NumPy array contains at least one non-numeric value?'], 4], [(911871, 3), [['Bonus: it works fine for non-array NumPy types:'], ['-10000']], [[' >>> a = numpy.float64(42.)\n>>> numpy.isnan(a).any()\nFalse\n>>> a = numpy.float64(numpy.nan)\n>>> numpy.isnan(a).any()\nTrue\n']], ['Detect if a NumPy array contains at least one non-numeric value?'], 4], [(914382, 0), [['In Python 2.4 (possibly it works on earlier systems as well):'], ['In Perl:']], [[' #! /usr/bin/python2.4\nimport sys\nh = set()\nfor line in sys.stdin.xreadlines():\n  for term in line.split():\n    h.add(term)\nprint len(h)\n']], ['How can I count unique terms in a plaintext file case-insensitively?'], 2], [(914382, 1), [['In Perl:'], ['-10000']], [[' $ perl -ne \'for (split(" ", $_)) { $H{$_} = 1 } END { print scalar(keys%H), "\\n" }\' <file.txt\n']], ['How can I count unique terms in a plaintext file case-insensitively?'], 2], [(914675, 0), [['-10000'], ['is more portable than ']], [[' os.path.expanduser("~")\n']], ['best practice for user preferences in $HOME in Python'], 2], [(914675, 1), [['is more portable than '], ['so it should be ok to use the first.']], [[" os.environ['HOME']\n"]], ['best practice for user preferences in $HOME in Python'], 2], [(914821, 0), [['I think there must be something wrong with the web server part, as this works perfectly:'], ['Sample output:']], [[' from multiprocessing import Process, Queue, cpu_count\nimport random\nimport time\n\n\ndef serve(queue):\n    works = ["task_1", "task_2"]\n    while True:\n        time.sleep(0.01)\n        queue.put(random.choice(works))\n\n\ndef work(id, queue):\n    while True:\n        task = queue.get()\n        if task is None:\n            break\n        time.sleep(0.05)\n        print "%d task:" % id, task\n    queue.put(None)\n\n\nclass Manager:\n    def __init__(self):\n        self.queue = Queue()\n        self.NUMBER_OF_PROCESSES = cpu_count()\n\n    def start(self):\n        print "starting %d workers" % self.NUMBER_OF_PROCESSES\n        self.workers = [Process(target=work, args=(i, self.queue,))\n                        for i in xrange(self.NUMBER_OF_PROCESSES)]\n        for w in self.workers:\n            w.start()\n\n        serve(self.queue)\n\n    def stop(self):\n        self.queue.put(None)\n        for i in range(self.NUMBER_OF_PROCESS):\n            self.workers[i].join()\n        queue.close()\n\n\nManager().start()\n']], ['producer/consumer problem with python multiprocessing'], 2], [(914821, 1), [['Sample output:'], ['-10000']], [[' starting 2 workers\n0 task: task_1\n1 task: task_2\n0 task: task_2\n1 task: task_1\n0 task: task_1\n']], ['producer/consumer problem with python multiprocessing'], 2], [(915391, 0), [['re.sub can take a function which returns the replacement string:'], ['prints']], [[" import re\n\ns = 'this-is,-toronto.-and-this-is,-boston'\nt = re.sub(',-[a-z]', lambda x: x.group(0).upper(), s)\nprint t\n"]], ['How to convert specific character sequences in a string to upper case using Python?'], 2], [(915391, 1), [['prints'], ['-10000']], [[' this-is,-Toronto.-and-this-is,-Boston\n']], ['How to convert specific character sequences in a string to upper case using Python?'], 2], [(915910, 0), [['EmailField 75 chars length is hardcoded in django. You can fix this like that:'], ['but this will change ALL EmailField fields lengths, so you could also try:']], [[" from django.db.models.fields import EmailField\ndef email_field_init(self, *args, **kwargs):\n  kwargs['max_length'] = kwargs.get('max_length', 200)\n  CharField.__init__(self, *args, **kwargs)\nEmailField.__init__ = email_field_init\n"]], ['django auth User truncating email field'], 2], [(915910, 1), [['but this will change ALL EmailField fields lengths, so you could also try:'], ["both ways it'd be best to put this code in init of any module BEFORE django.contrib.auth in your INSTALLED_APPS"]], [[" from django.contrib.auth.models import User\nfrom django.utils.translation import ugettext as _\nfrom django.db import models\nUser.email = models.EmailField(_('e-mail address'), blank=True, max_length=200)\n"]], ['django auth User truncating email field'], 2], [(916779, 0), [['Well, you have better options. You can for example use  pickle  or  json  format.\nPickle serializing module is very easy to use.'], ['If you are using python 2.6 there is a builtin module called  json . It is as easy as pickle to use:']], [[" import cPickle\ncPickle.dump(obj, open('save.p', 'wb')) \nobj = cPickle.load(open('save.p', 'rb'))\n"]], ['Is something like ConfigParser appropriate for saving state (key, value) between runs?'], 2], [(916779, 1), [['If you are using python 2.6 there is a builtin module called  json . It is as easy as pickle to use:'], ["Json format is human readable and is very similar to the dictionary string representation in python. And doesn't have any security issues like pickle."]], [[' import json\nencoded = json.dumps(obj)\nobj = json.loads(encoded)\n']], ['Is something like ConfigParser appropriate for saving state (key, value) between runs?'], 2], [(916978, 0), [['You can write a little function for that'], ['if you want to apply the function on the sublists you can change the function to this:']], [[' def maplist(func, values):\n    return [map(func, values[i:]) for i in xrange(len(values))]\n\n>>> maplist(lambda a: a* 2, [1,2,3])\n[[2, 4, 6], [4, 6], [6]]\n']], ['Python equivalent of maplist?'], 2], [(916978, 1), [['if you want to apply the function on the sublists you can change the function to this:'], ['-10000']], [[' def maplist(func, values):\n    return [func(values[i:]) for i in xrange(len(values))]\n\n>>> maplist(lambda l: list(reversed(l)), [1,2,3])\n[[3, 2, 1], [3, 2], [3]]\n']], ['Python equivalent of maplist?'], 2], [(917202, 0), [['You can get a sorted tuple easy enough:'], ['Updated:  As a commenter noted, this returns a list.  You can get another tuple like so:']], [[" >>> sorted(mytuple)\n[['I', 4], ['say', 2], ['say', 5], ['tomato', 3], ['tomato', 6], ['you', 1]]\n"]], ['Sorting a tuple that contains lists'], 2], [(917202, 1), [['Updated:  As a commenter noted, this returns a list.  You can get another tuple like so:'], ['-10000']], [[" >>> tuple(sorted(mytuple))\n(['I', 4], ['say', 2], ['say', 5], ['tomato', 3], ['tomato', 6], ['you', 1])\n"]], ['Sorting a tuple that contains lists'], 2], [(918076, 0), [['This will generate the result you want'], ['And if you insist on using a dictionary to represent the index:']], [[' dict((myTuple[1], index) for index, myTuple in enumerate(l))\n\n>>> l = [(1, 2, 3), (4, 5, 6), (1, 4, 6)]\n>>> dict((myTuple[1], index) for index, myTuple in enumerate(l))\n{2: 0, 4: 2, 5: 1}\n']], ['Is there a way in Python to index a list of containers (tuples, lists, dictionaries) by an element of a container?'], 5], [(918076, 1), [['And if you insist on using a dictionary to represent the index:'], ['The result will be:']], [[" dict((myTuple[1], {'index': index}) for index, myTuple in enumerate(l))\n"]], ['Is there a way in Python to index a list of containers (tuples, lists, dictionaries) by an element of a container?'], 5], [(918076, 2), [['The result will be:'], ["EDIT \nIf you want to handle key collision then you'll have to extend the solution like this:"]], [[" {2: {'index': 0}, 4: {'index': 2}, 5: {'index': 1}}\n"]], ['Is there a way in Python to index a list of containers (tuples, lists, dictionaries) by an element of a container?'], 5], [(918076, 3), [["EDIT \nIf you want to handle key collision then you'll have to extend the solution like this:"], ['And a more generalized and compact solution (in a similar definition to  sorted )']], [[' def build_index(l):\n    indexes = [(myTuple[1], index) for index, myTuple in enumerate(l)]\n    d = {}\n    for e, index in indexes:\n        d[e] = min(index, d.get(e, index))\n    return d\n\n>>> l = [(1, 2, 3), (4, 5, 6), (1, 4, 6), (2, 4, 6)]\n>>> build_index(l)\n{2: 0, 4: 2, 5: 1}\n']], ['Is there a way in Python to index a list of containers (tuples, lists, dictionaries) by an element of a container?'], 5], [(918076, 4), [['And a more generalized and compact solution (in a similar definition to  sorted )'], ['So the answer to your question is yes: There is a way in Python to index a list of containers (tuples, lists, dictionaries) by an element of a container without preprocessing. But your request of storing the result in a dictionary makes it impossible to be a one liner. But there is no preprocessing here. The list is iterated only once.']], [[' def index(l, key):\n    d = {}\n    for index, myTuple in enumerate(l):\n        d[key(myTuple)] = min(index, d.get(key(myTuple), index))\n    return d\n\n>>> index(l, lambda a: a[1])\n{2: 0, 4: 2, 5: 1}\n']], ['Is there a way in Python to index a list of containers (tuples, lists, dictionaries) by an element of a container?'], 5], [(918154, 0), [['In the file that has the script, you want to do something like this:'], ["I'm assuming you mean the  __main__  script when you mention running the file directly.  If so, that doesn't appear to be the case on my system (python 2.5.1 on OS X 10.5.7):"]], [[" import os\ndir = os.path.dirname(__file__)\nfilename = os.path.join(dir, '/relative/path/to/file/you/want')\n"]], ['Relative paths in Python'], 3], [(918154, 1), [["I'm assuming you mean the  __main__  script when you mention running the file directly.  If so, that doesn't appear to be the case on my system (python 2.5.1 on OS X 10.5.7):"], ['However, I do know that there are some quirks with  __file__  on C extensions.  For example, I can do this on my Mac:']], [[' #foo.py\nimport os\nprint os.getcwd()\nprint __file__\n\n#in the interactive interpreter\n>>> import foo\n/Users/jason\nfoo.py\n\n#and finally, at the shell:\n~ % python foo.py\n/Users/jason\nfoo.py\n']], ['Relative paths in Python'], 3], [(918154, 2), [['However, I do know that there are some quirks with  __file__  on C extensions.  For example, I can do this on my Mac:'], ['However, this raises an exception on my Windows machine.']], [[" >>> import collections #note that collections is a C extension in Python 2.5\n>>> collections.__file__\n'/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-\ndynload/collections.so'\n"]], ['Relative paths in Python'], 3], [(918298, 0), [['Something like this for the  urls.py :'], ['And this for the view:']], [[" urlpatterns = patterns('',\n    (r'^compare/(\\d+)/(\\d+)/$', 'my.compareview'),\n)\n"]], ['Are asynchronous Django model queries possible?'], 2], [(918298, 1), [['And this for the view:'], ['-10000']], [[' def compareview(request, id1, id2):\n    # in_bulk returns a dict: { obj_id1: <MyModel instance>, \n    #                           obj_id2: <MyModel instance> }\n    # the SQL pulls all at once, rather than sequentially... arguably\n    # better than async as it pulls in one DB hit, rather than two\n    # happening at the same time\n    comparables = MyModel.objects.in_bulk([id1, id2])\n    o1, o2 = (comparables.get(id1), comparables.get(id2))      \n']], ['Are asynchronous Django model queries possible?'], 2], [(919816, 0), [['Your code will look pretty much like:'], ['In your views, create queued tasks by:']], [[' from lineup import registry\nfrom lineup import _debug\n\ndef create_archive(queue_id, queue):\n    queue.set_param("zip_link", _create_archive(resource = queue.context_object, user = queue.user))\n    return queue\n\n\ndef create_archive_callback(queue_id, queue):\n    _send_email_notification(subject = queue.get_param("zip_link"), user = queue.user)\n    return queue\n\nregistry.register_job(\'create_archive\', create_archive, callback = create_archive_callback)\n']], ['Progress bar with long web requests'], 3], [(919816, 1), [['In your views, create queued tasks by:'], ['Then run your queue processor (probably inside of a screen session):']], [["     from lineup.factory import JobFactory\n    j = JobFactory()\n    j.create_job(self, 'create_archive', request.user, your_resource_object_containing_files_to_zip, { 'extra_param': 'value' })\n"]], ['Progress bar with long web requests'], 3], [(919816, 2), [['Then run your queue processor (probably inside of a screen session):'], ['Oh, and on the subject you might be also interested in  estimating zip file creation time . I got pretty slick answers there.']], [[' ./manage.py run_queue\n']], ['Progress bar with long web requests'], 3], [(922323, 0), [['One way of finding the file is, if you can import the module, simply displaying the  repr()  of the module:'], ["One thing to note, if the module installed any command-line tools, you'll have to remove these manually also.. On OS X they are installde in  /usr/local/bin/  - you can find any tool which uses  cx_Oracle  using grep:"]], [[" >>> import urllib\n>>> urllib\n<module 'urllib' from '/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/urllib.pyc'>\n>>> import BeautifulSoup\n>>> BeautifulSoup\n<module 'BeautifulSoup' from '/Library/Python/2.5/site-packages/BeautifulSoup-3.0.6-py2.5.egg/BeautifulSoup.py'>\n"]], ['How do I deactivate an egg?'], 3], [(922323, 1), [["One thing to note, if the module installed any command-line tools, you'll have to remove these manually also.. On OS X they are installde in  /usr/local/bin/  - you can find any tool which uses  cx_Oracle  using grep:"], ['Or simply..']], [[' cd /usr/local/bin/\ngrep EASY-INSTALL * | grep cx_Oracle\n']], ['How do I deactivate an egg?'], 3], [(922323, 2), [['Or simply..'], ['-10000']], [[' cd /usr/local/bin/\ngrep cx_Oracle *\n']], ['How do I deactivate an egg?'], 3], [(922774, 0), [['You can check if a variable is a string or unicode string with'], ['You could do something like this:']], [[' isinstance(some_object, basestring)\n']], ['Check if input is a list/tuple of strings or a single string'], 2], [(922774, 1), [['You could do something like this:'], ['Stringness is probably not a word, but I hope you get the idea']], [[' if isinstance(some_object, basestring):\n    ...\nelif all(isinstance(item, basestring) for item in some_object): # check iterable for stringness of all items. Will raise TypeError if some_object is not iterable\n    ...\nelse:\n    raise TypeError # or something along that line\n']], ['Check if input is a list/tuple of strings or a single string'], 2], [(923111, 0), [['Use a  list comprehension :'], ['Or, as a function:']], [[' >>> mat = [[0]*2 for x in xrange(3)]\n>>> mat[0][0] = 1\n>>> mat\n[[1, 0], [0, 0], [0, 0]]\n']], ['Creating lists of lists in a pythonic way'], 2], [(923111, 1), [['Or, as a function:'], ['-10000']], [[' def matrix(rows, cols):\n    return [[0]*cols for x in xrange(rows)]\n']], ['Creating lists of lists in a pythonic way'], 2], [(923837, 0), [["Takes some playing with mako's  local  namespace, but here's a working example:"], ['As desired, this emits:']], [[' from mako.template import Template\nfrom mako.runtime import Context\nfrom StringIO import StringIO\n\nmytemplate = Template("""\n<%def name=\'html_link(w)\'>\n<a href=\'http://${w}\'>${w}</a>\n</%def>\n<%def name=\'text_link(w)\'>\n${w}\n</%def>\n<%def name="body()">\nI visit ${getattr(local, format + \'_link\')(website)} all the time.\n</%def>\n""")\n\nbuf = StringIO()\nctx = Context(buf, website=\'stackoverflow.com\', format=\'html\')\nmytemplate.render_context(ctx)\nprint buf.getvalue()\n']], ['How do I call template defs with names only known at runtime in the Python template language Mako?'], 2], [(923837, 1), [['As desired, this emits:'], ['-10000']], [[" I visit \n<a href='http://stackoverflow.com'>stackoverflow.com</a>\n all the time.\n"]], ['How do I call template defs with names only known at runtime in the Python template language Mako?'], 2], [(925305, 0), [['You would just have to throw all of his code into one Javascript file and then include the following in your admin.py:'], ["Looking at his source, you would also have to dynamically add the link to add more inlines using Javascript, but that's pretty easy to do:"]], [[" class Photo(admin.ModelAdmin):\n    class Media:\n        js = ('jquery.js', 'inlines.js',)\n"]], ['Uploading multiple images in Django admin'], 2], [(925305, 1), [["Looking at his source, you would also have to dynamically add the link to add more inlines using Javascript, but that's pretty easy to do:"], ['You probably need to do some styling to make it all look right, but that should get you started in the right direction.']], [[' $(document).ready(function(){\n    // Note the name passed in is the model\'s name, all lower case\n    $(\'div.last-related\').after(\'<div><a class="add" href="#" onclick="return add_inline_form(\\\'photos\\\')">\');\n});\n']], ['Uploading multiple images in Django admin'], 2], [(929103, 0), [['-10000'], ['Or a little more readable:  ']], [[' NewValue = (((OldValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin\n']], ['Convert a number range to another range, maintaining ratio'], 3], [(929103, 1), [['Or a little more readable:  '], ['Or if you want to protect for the case where the old range is 0 ( OldMin = OldMax ):']], [[' OldRange = (OldMax - OldMin)  \nNewRange = (NewMax - NewMin)  \nNewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin\n']], ['Convert a number range to another range, maintaining ratio'], 3], [(929103, 2), [['Or if you want to protect for the case where the old range is 0 ( OldMin = OldMax ):'], ["Note that in this case we're forced to pick one of the possible new range values arbitrarily. Depending on context, sensible choices could be:  NewMin  ( see sample ),  NewMax  or  (NewMin + NewMax) / 2"]], [[' OldRange = (OldMax - OldMin)\nif (OldRange == 0)\n    NewValue = NewMin\nelse\n{\n    NewRange = (NewMax - NewMin)  \n    NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin\n}\n']], ['Convert a number range to another range, maintaining ratio'], 3], [(929468, 0), [["This query is harder than it looks at first glance. AFAIK the Django ORM does not provide any way to generate efficient SQL for this query, because the efficient SQL requires a correlated subquery.  (I'd love to be corrected on this!)  You can generate some ugly SQL with this query:"], ['The other way to do this is to write raw SQL and encapsulate it in a manager method.  It looks a little bit scary but works great.  If you assign the manager as "objects" attribute on Projectfundingdetail, you can use it like this to get the latest funding details for each project:']], [[" Projectfundingdetail.objects.annotate(latest=Max('project__projectfundingdetail__end_date')).filter(end_date=F('latest')).filter(budget__lte==1000).select_related()\n"]], ['Django ORM Query to limit for the specific key instance'], 4], [(929468, 1), [['The other way to do this is to write raw SQL and encapsulate it in a manager method.  It looks a little bit scary but works great.  If you assign the manager as "objects" attribute on Projectfundingdetail, you can use it like this to get the latest funding details for each project:'], ['And it returns a normal QuerySet, so you can add on further filters:']], [[' >>> Projectfundingdetail.objects.latest_by_project()\n']], ['Django ORM Query to limit for the specific key instance'], 4], [(929468, 2), [['And it returns a normal QuerySet, so you can add on further filters:'], ["Here's the code:"]], [[' >>> Projectfundingdetail.objects.latest_by_project().filter(budget__lte=1000)\n']], ['Django ORM Query to limit for the specific key instance'], 4], [(929468, 3), [["Here's the code:"], ['About half of that code (the "names" dictionary) is only necessary to be robust against the possibility of nonstandard database table and column names.  You could also just hardcode the table and column names into the SQL if you\'re confident they won\'t ever change.']], [[' from django.db import connection, models\nqn = connection.ops.quote_name\n\nclass ProjectfundingdetailManager(models.Manager):\n    def latest_by_project(self):\n        project_model = self.model._meta.get_field(\'project\').rel.to\n\n        names = {\'project\': qn(project_model._meta.db_table),\n                 \'pfd\': qn(self.model._meta.db_table),\n                 \'end_date\': qn(self.model._meta.get_field(\'end_date\').column),\n                 \'project_id\': qn(self.model._meta.get_field(\'project\').column),\n                 \'pk\': qn(self.model._meta.pk.column),\n                 \'p_pk\': qn(project_model._meta.pk.column)}\n\n        sql = """SELECT pfd.%(pk)s FROM %(project)s AS p \n                 JOIN %(pfd)s AS pfd ON p.%(p_pk)s = pfd.%(project_id)s\n                 WHERE pfd.%(end_date)s =\n                     (SELECT MAX(%(end_date)s) FROM %(pfd)s \n                      WHERE %(project_id)s = p.%(p_pk)s)\n              """ % names\n\n        cursor = connection.cursor()\n        cursor.execute(sql)\n        return self.model.objects.filter(id__in=[r[0] for r\n                                                 in cursor.fetchall()])\n']], ['Django ORM Query to limit for the specific key instance'], 4], [(929887, 0), [['1) Since lines are variable length, you have to read the entire file to know where the newline chars are, so you can count how many lines:'], ['2) reading a chunk from the end of the file is the fastest method to find the last newline char.']], [[" count = 0\nfor line in open('myfile'):\n    count += 1\nprint count, line # it will be the last line\n"]], ['Two simple questions about python'], 3], [(929887, 1), [['2) reading a chunk from the end of the file is the fastest method to find the last newline char.'], ['You can use that like this:']], [[" def seek_newline_backwards(file_obj, eol_char='\\n', buffer_size=200):\n    if not file_obj.tell(): return # already in beginning of file\n    # All lines end with \\n, including the last one, so assuming we are just \n    # after one end of line char\n    file_obj.seek(-1, os.SEEK_CUR)\n    while file_obj.tell():\n        ammount = min(buffer_size, file_obj.tell())\n        file_obj.seek(-ammount, os.SEEK_CUR)\n        data = file_obj.read(ammount)\n        eol_pos = data.rfind(eol_char)\n        if eol_pos != -1:\n            file_obj.seek(eol_pos - len(data) + 1, os.SEEK_CUR)\n            break\n        file_obj.seek(-len(data), os.SEEK_CUR)\n"]], ['Two simple questions about python'], 3], [(929887, 2), [['You can use that like this:'], ['-10000']], [[" f = open('some_file.txt')\nf.seek(0, os.SEEK_END)\nseek_newline_backwards(f)\nprint f.tell(), repr(f.readline())\n"]], ['Two simple questions about python'], 3], [(930519, 0), [['-10000'], ['http://docs.python.org/library/signal.html']], [[' import time\n\ntry:\n    time.sleep(10)\nfinally:\n    print "clean up"\n\nclean up\nTraceback (most recent call last):\n  File "<stdin>", line 2, in <module>\nKeyboardInterrupt\n']], ['How to run one last function before getting killed in Python?'], 2], [(930519, 1), [['http://docs.python.org/library/signal.html'], ['-10000']], [['Signal Example from signal import *\nimport sys, time\n\ndef clean(*args):\n    print "clean me"\n    sys.exit(0)\n\nfor sig in (SIGABRT, SIGBREAK, SIGILL, SIGINT, SIGSEGV, SIGTERM):\n    signal(sig, clean)\n\ntime.sleep(10)\n']], ['How to run one last function before getting killed in Python?'], 2], [(930834, 0), [['You can use  positive look-ahead  to match something that is followed by something else. To match the coefficients, you can use:'], ['For the exponents, you can use  positive look-behind  instead:']], [[" >>> s = '3x3+6x2+2x1+8x0'\n>>> re.findall(r'\\d+(?=x)', s)\n['3', '6', '2', '8']\n"]], ['Python regex - conditional matching?'], 2], [(930834, 1), [['For the exponents, you can use  positive look-behind  instead:'], ['Again, from the docs:']], [[" >>> s = '3x3+6x2+2x1+8x0'\n>>> re.findall(r'(?<=x)\\d+', s)\n['3', '2', '1', '0']\n"]], ['Python regex - conditional matching?'], 2], [(932818, 0), [['here a basic (maybe weird) function that shows the name of its argument...\nthe idea is to analyze code and search for the calls to the function (added in the  init  method it could help to find the instance name, although with a more complex code analysis)'], ['please note:\ngetting multiple lines from the calling code helps in case the call was split as in the below example:']], [[' def display(var):\n    import inspect, re\n    callingframe = inspect.currentframe().f_back\n    cntext = "".join(inspect.getframeinfo(callingframe, 5)[3]) #gets 5 lines\n    m = re.search("display\\s+\\(\\s+(\\w+)\\s+\\)", cntext, re.MULTILINE)\n    print m.group(1), type(var), var\n']], ["retrieving a variable's name in python at runtime?"], 3], [(932818, 1), [['please note:\ngetting multiple lines from the calling code helps in case the call was split as in the below example:'], ['but will produce unexpected result on this:']], [[' display(\n        my_var\n       )\n']], ["retrieving a variable's name in python at runtime?"], 3], [(932818, 2), [['but will produce unexpected result on this:'], ["If you don't have control on the format of your project you can still improve the code to detect and manage different situations... "]], [[' display(first_var)\ndisplay(second_var)\n']], ["retrieving a variable's name in python at runtime?"], 3], [(933092, 0), [['You can implement this using generic relationships by manually creating the junction table between message and recipient:'], ["You'd use the above models like so:"]], [[' from django.db import models\nfrom django.contrib.contenttypes import generic\nfrom django.contrib.contenttypes.models import ContentType\n\nclass Client(models.Model):\n    city = models.CharField(max_length=16)\n\n    # These aren\'t required, but they\'ll allow you do cool stuff\n    # like "person.sent_messages.all()" to get all messages sent\n    # by that person, and "person.received_messages.all()" to\n    # get all messages sent to that person.\n    # Well...sort of, since "received_messages.all()" will return\n    # a queryset of "MessageRecipient" instances.\n    sent_messages = generic.GenericRelation(\'Message\',\n        content_type_field=\'sender_content_type\',\n        object_id_field=\'sender_id\'\n    )\n    received_messages = generic.GenericRelation(\'MessageRecipient\',\n        content_type_field=\'recipient_content_type\',\n        object_id_field=\'recipient_id\'\n    )\n\n    class Meta:\n        abstract = True\n\nclass PersonClient(Client):\n    first_name = models.CharField(max_length=16)\n    last_name = models.CharField(max_length=16)\n    gender = models.CharField(max_length=1)\n\n    def __unicode__(self):\n        return u\'%s %s\' % (self.last_name, self.first_name)\n\nclass CompanyClient(Client):\n    name = models.CharField(max_length=32)\n    tax_no = models.PositiveIntegerField()\n\n    def __unicode__(self):\n        return self.name\n\nclass Message(models.Model):\n    sender_content_type = models.ForeignKey(ContentType)\n    sender_id = models.PositiveIntegerField()\n    sender = generic.GenericForeignKey(\'sender_content_type\', \'sender_id\')\n    msg_body = models.CharField(max_length=1024)\n\n    def __unicode__(self):\n        return u\'%s...\' % self.msg_body[:25]\n\nclass MessageRecipient(models.Model):\n    message = models.ForeignKey(Message)\n    recipient_content_type = models.ForeignKey(ContentType)\n    recipient_id = models.PositiveIntegerField()\n    recipient = generic.GenericForeignKey(\'recipient_content_type\', \'recipient_id\')\n\n    def __unicode__(self):\n        return u\'%s sent to %s\' % (self.message, self.recipient)\n']], ['Generic many-to-many relationships'], 2], [(933092, 1), [["You'd use the above models like so:"], ["As you can see, this is a far more verbose (complicated?) solution. I'd probably keep it simple and go with Prariedogg's solution above."]], [[" >>> person1 = PersonClient.objects.create(first_name='Person', last_name='One', gender='M')\n>>> person2 = PersonClient.objects.create(first_name='Person', last_name='Two', gender='F')\n>>> company = CompanyClient.objects.create(name='FastCompany', tax_no='4220')\n>>> company_ct = ContentType.objects.get_for_model(CompanyClient)\n>>> person_ct = ContentType.objects.get_for_model(person1) # works for instances too.\n\n# now we create a message:\n\n>>> msg = Message.objects.create(sender_content_type=person_ct, sender_id=person1.pk, msg_body='Hey, did any of you move my cheese?')\n\n# and send it to a coupla recipients:\n\n>>> MessageRecipient.objects.create(message=msg, recipient_content_type=person_ct, recipient_id=person2.pk)\n>>> MessageRecipient.objects.create(message=msg, recipient_content_type=company_ct, recipient_id=company.pk)\n>>> MessageRecipient.objects.count()\n2\n"]], ['Generic many-to-many relationships'], 2], [(933612, 0), [['Just cut your view code to this line:'], ['And do this in the template:']], [[' entries = Entry.objects.filter(user=request.user).order_by("-timestamp")\n']], ['What is the best way to fetch/render one-to-many relationships?'], 6], [(933612, 1), [['And do this in the template:'], ['I am a big fan of using  related_name  in Models, however, so you could change this line:']], [[' {% for entry in entries %}\n    <td>{{ entry.datadesc }}</td>\n    <td><table>\n    {% for file in entry.entryfile_set.all %}\n        <td>{{ file.datafile.name|split:"/"|last }}</td>\n        <td>{{ file.datafile.size|filesizeformat }}</td>\n        <td><a href="{{ object.datafile.url }}">download</a></td>\n        <td><a href="{% url main.views.delete object.id %}">delete</a></td>\n    {% endfor %}\n    </table></td>\n{% endfor %}\n']], ['What is the best way to fetch/render one-to-many relationships?'], 6], [(933612, 2), [['I am a big fan of using  related_name  in Models, however, so you could change this line:'], ['To this:']], [[' entry = models.ForeignKey(Entry)\n']], ['What is the best way to fetch/render one-to-many relationships?'], 6], [(933612, 3), [['To this:'], ['And then you can access all the files for a particular entry by changing this:']], [[" entry = models.ForeignKey(Entry, related_name='files')\n"]], ['What is the best way to fetch/render one-to-many relationships?'], 6], [(933612, 4), [['And then you can access all the files for a particular entry by changing this:'], ['To the more readable/obvious:']], [[' {% for file in files.entryfile_set.all %}\n']], ['What is the best way to fetch/render one-to-many relationships?'], 6], [(933612, 5), [['To the more readable/obvious:'], ['-10000']], [[' {% for file in entry.files.all %}\n']], ['What is the best way to fetch/render one-to-many relationships?'], 6], [(937000, 0), [['On your recursive lines, you do not return anything.  If you want it to return 0, you should replace them with lines like:'], ['instead of just']], [[' return self.insert(key, root=tmp.left)\n']], ['Python recursion and return statements'], 2], [(937000, 1), [['instead of just'], ['-10000']], [[' self.insert(key, root=tmp.left)\n']], ['Python recursion and return statements'], 2], [(937697, 0), [['closest is probably:'], ['for example:']], [[' somere.sub(lambda m: replacements[m.group()], text)\n']], ['Can you pass a dictionary when replacing strings in Python?'], 5], [(937697, 1), [['for example:'], ["Edit: what rick really wants is to have a dict with keys to be taken as regular expression patterns, such as  '\\d+S' , and (hopefully) constant string values (hopefully w/o backreferences). The cookbook recipe can be adapted for this purpose:"]], [[" >>> za = re.compile('z\\w')\n>>> za.sub(lambda m: dict(za='BLU', zo='BLA')[m.group()], 'fa za zo bu')\n'fa BLU BLA bu'\n"]], ['Can you pass a dictionary when replacing strings in Python?'], 5], [(937697, 2), [["Edit: what rick really wants is to have a dict with keys to be taken as regular expression patterns, such as  '\\d+S' , and (hopefully) constant string values (hopefully w/o backreferences). The cookbook recipe can be adapted for this purpose:"], ['Example use:']], [[' def dict_sub(d, text): \n  """ Replace in \'text\' non-overlapping occurences of REs whose patterns are keys\n  in dictionary \'d\' by corresponding values (which must be constant strings: may\n  have named backreferences but not numeric ones). The keys must not contain\n  anonymous matching-groups.\n  Returns the new string.""" \n\n  # Create a regular expression  from the dictionary keys\n  regex = re.compile("|".join("(%s)" % k for k in d))\n  # Facilitate lookup from group number to value\n  lookup = dict((i+1, v) for i, v in enumerate(d.itervalues()))\n\n  # For each match, find which group matched and expand its value\n  return regex.sub(lambda mo: mo.expand(lookup[mo.lastindex]), text)\n']], ['Can you pass a dictionary when replacing strings in Python?'], 5], [(937697, 3), [['Example use:'], ['emits:']], [["   d={'\\d+S': 'wot', '\\d+T': 'zap'}\n  t='And 23S, and 45T, and 66T but always 029S!'\n  print dict_sub(d, t)\n"]], ['Can you pass a dictionary when replacing strings in Python?'], 5], [(937697, 4), [['emits:'], ["You could avoid building  lookup  and just use  mo.expand(d.values()[mo.lastindex-1]) , but that might be a tad slow if  d  is very large and there are many matches (sorry, haven't precisely measured/benchmarked both approaches, so this is just a guess;-)."]], [[' And wot, and zap, and zap but always wot!\n']], ['Can you pass a dictionary when replacing strings in Python?'], 5], [(938429, 0), [['To solve this you have to create another scope for lambda:'], ['Or with  functools.partial :']], [[" def callback(msg):\n    print msg\n\ndef callback_factory(m):\n    return lambda: callback(m)\n\nfuncList=[]\nfor m in ('do', 're', 'mi'):\n    funcList.append(callback_factory(m))\nfor f in funcList:\n    f()\n"]], ['Scope of lambda functions and their parameters?'], 2], [(938429, 1), [['Or with  functools.partial :'], ['-10000']], [[" from functools import partial\n\ndef callback(msg):\n    print msg\n\nfuncList=[partial(callback, m) for m in ('do', 're', 'mi')]\nfor f in funcList:\n    f()\n"]], ['Scope of lambda functions and their parameters?'], 2], [(938733, 0), [['On Windows, you can use WMI ( home page ,  cheeseshop ):'], ['On Linux (from python cookbook  http://code.activestate.com/recipes/286222/ :']], [[' \ndef memory():\n    import os\n    from wmi import WMI\n    w = WMI(\'.\')\n    result = w.query("SELECT WorkingSet FROM Win32_PerfRawData_PerfProc_Process WHERE IDProcess=%d" % os.getpid())\n    return int(result[0].WorkingSet)\n']], ['Total memory used by Python process?'], 2], [(938733, 1), [['On Linux (from python cookbook  http://code.activestate.com/recipes/286222/ :'], ['-10000']], [[" import os\n_proc_status = '/proc/%d/status' % os.getpid()\n\n_scale = {'kB': 1024.0, 'mB': 1024.0*1024.0,\n          'KB': 1024.0, 'MB': 1024.0*1024.0}\n\ndef _VmB(VmKey):\n    '''Private.\n    '''\n    global _proc_status, _scale\n     # get pseudo file  /proc/<pid>/status\n    try:\n        t = open(_proc_status)\n        v = t.read()\n        t.close()\n    except:\n        return 0.0  # non-Linux?\n     # get VmKey line e.g. 'VmRSS:  9999  kB\\n ...'\n    i = v.index(VmKey)\n    v = v[i:].split(None, 3)  # whitespace\n    if len(v) < 3:\n        return 0.0  # invalid format?\n     # convert Vm value to bytes\n    return float(v[1]) * _scale[v[2]]\n\n\ndef memory(since=0.0):\n    '''Return memory usage in bytes.\n    '''\n    return _VmB('VmSize:') - since\n\n\ndef resident(since=0.0):\n    '''Return resident memory usage in bytes.\n    '''\n    return _VmB('VmRSS:') - since\n\n\ndef stacksize(since=0.0):\n    '''Return stack size in bytes.\n    '''\n    return _VmB('VmStk:') - since\n"]], ['Total memory used by Python process?'], 2], [(940816, 0), [['To work with chunk data you just  yield  the chunks:'], ['EDIT : Based in the comments you gave, an example of piling data up to a certain length before sending forward:']], [[" def application(environ, start_response):\n    start_response('200 OK', [('Content-type', 'text/plain')]\n    yield 'Chunk 1\\n'    \n    yield 'Chunk 2\\n'    \n    yield 'Chunk 3\\n'\n    for chunk in chunk_data_generator():\n        yield chunk\n\ndef chunk_data_generator()\n    yield 'Chunk 4\\n'\n    yield 'Chunk 5\\n'\n"]], ['Passing data to mod_wsgi'], 2], [(940816, 1), [['EDIT : Based in the comments you gave, an example of piling data up to a certain length before sending forward:'], ['-10000']], [[" BUFFER_SIZE = 10 # 10 bytes for testing. Use something bigger\ndef application(environ, start_response):\n    start_response('200 OK', [('Content-type', 'text/plain')]\n    buffer = []\n    size = 0\n    for chunk in chunk_generator():\n        buffer.append(chunk)\n        size += len(chunk)\n        if size > BUFFER_SIZE:\n            for buf in buffer:\n                yield buf\n            buffer = []\n            size = 0\n\ndef chunk_data_generator()\n    yield 'Chunk 1\\n'    \n    yield 'Chunk 2\\n'    \n    yield 'Chunk 3\\n'\n    yield 'Chunk 4\\n'\n    yield 'Chunk 5\\n'\n"]], ['Passing data to mod_wsgi'], 2], [(944336, 0), [['Your module lives until the interpreter stops. you can add something to run at that time using the "atexit" module:'], ["Since you don't want it as a destructor, my answer above is correct. Just def another function (or static method if you wish) and register it with the atexit:"]], [[' import atexit\natexit.register(myfunction)\n']], ['Method that gets called on module deletion in Python'], 6], [(944336, 1), [["Since you don't want it as a destructor, my answer above is correct. Just def another function (or static method if you wish) and register it with the atexit:"], ['Example, instead of defining  database.py :']], [[' def close_database():\n    proceed_to_close()\n\nimport atexit\natexit.register(close_database)\n']], ['Method that gets called on module deletion in Python'], 6], [(944336, 2), [['Example, instead of defining  database.py :'], ['and using:']], [[' class DataBase(object):\n    @staticmethod\n    def execute_some_query(query):\n        code_here()\n        some_code()\n    @staticmethod\n    def close_database():\n        proceed_to_close()\nimport atexit ; atexit.register(DataBase.close_database)\n']], ['Method that gets called on module deletion in Python'], 6], [(944336, 3), [['and using:'], ['You could do this instead on  database.py :']], [[' from database import DataBase\nDataBase.execute_some_query(query)\n']], ['Method that gets called on module deletion in Python'], 6], [(944336, 4), [['You could do this instead on  database.py :'], ['And use it like this:']], [[' def execute_some_query(query):\n    code_here()\n    some_code()\n\ndef close_database():\n    proceed_to_close()\nimport atexit ; atexit.register(close_database)\n']], ['Method that gets called on module deletion in Python'], 6], [(944336, 5), [['And use it like this:'], ['Or better yet: Use  sqlalchemy  and avoid all this trouble of creating your own database interface.']], [[' import database\ndatabase.execute_some_query(query)\n']], ['Method that gets called on module deletion in Python'], 6], [(946170, 0), [["Here's a more complete variant of what I ended up using (it handles Unicode properly, too):"], ["Also, if there are Unicode characters (i.e. characters with codepoint >= 128) in the string, then to maintain compatibility with JavaScript's  encodeURIComponent() , the Python  quote_url()  would have to be:"]], [[" function quoteUrl(url, safe) {\n    if (typeof(safe) !== 'string') {\n        safe = '/';    // Don't escape slashes by default\n    }\n\n    url = encodeURIComponent(url);\n\n    // Unescape characters that were in the safe list\n    toUnencode = [  ];\n    for (var i = safe.length - 1; i >= 0; --i) {\n        var encoded = encodeURIComponent(safe[i]);\n        if (encoded !== safe.charAt(i)) {    // Ignore safe char if it wasn't escaped\n            toUnencode.push(encoded);\n        }\n    }\n\n    url = url.replace(new RegExp(toUnencode.join('|'), 'ig'), decodeURIComponent);\n\n    return url;\n}\n\n\nvar unquoteUrl = decodeURIComponent;    // Make alias to have symmetric function names\n"]], ["Equivalent Javascript Functions for Python's urllib.quote() and urllib.unquote()"], 3], [(946170, 1), [["Also, if there are Unicode characters (i.e. characters with codepoint >= 128) in the string, then to maintain compatibility with JavaScript's  encodeURIComponent() , the Python  quote_url()  would have to be:"], ['And  unquote_url()  would be:']], [[' def quote_url(url, safe):\n    """URL-encodes a string (either str (i.e. ASCII) or unicode);\n    uses de-facto UTF-8 encoding to handle Unicode codepoints in given string.\n    """\n    return urllib.quote(unicode(url).encode(\'utf-8\'), safe)\n']], ["Equivalent Javascript Functions for Python's urllib.quote() and urllib.unquote()"], 3], [(946170, 2), [['And  unquote_url()  would be:'], ['-10000']], [[' def unquote_url(url):\n    """Decodes a URL that was encoded using quote_url.\n    Returns a unicode instance.\n    """\n    return urllib.unquote(url).decode(\'utf-8\')\n']], ["Equivalent Javascript Functions for Python's urllib.quote() and urllib.unquote()"], 3], [(946860, 0), [['How about this?'], ['As pointed out in the comments, this would get all matches. To just get the first one, you can do:']], [[' >>> tuple_list = [("pineapple", 5), ("cherry", 7), ("kumquat", 3), ("plum", 11)]\n>>> [x for x, y in enumerate(tuple_list) if y[1] == 7]\n[1]\n>>> [x for x, y in enumerate(tuple_list) if y[0] == \'kumquat\']\n[2]\n']], ["Using Python's list index() method on a list of tuples or objects?"], 2], [(946860, 1), [['As pointed out in the comments, this would get all matches. To just get the first one, you can do:'], ["There is a good discussion in the comments as to the speed difference between all the solutions posted. I may be a little biased but I would personally stick to a one-liner as the speed we're talking about is pretty insignificant versus creating functions and importing modules for this problem, but if you are planning on doing this to a very large amount of elements you might want to look at the other answers provided, as they are faster than what I provided."]], [[" >>> [y[0] for y in tuple_list].index('kumquat')\n2\n"]], ["Using Python's list index() method on a list of tuples or objects?"], 2], [(946967, 0), [['Use the  st_birthtime  property on the result of a call to  os.stat()  (or  fstat / lstat ).'], ['Using  ctypes  to access the system call  stat64  (works with Python 2.5+):']], [[' def get_creation_time(path):\n    return os.stat(path).st_birthtime\n']], ['Get file creation time with Python on Mac'], 3], [(946967, 1), [['Using  ctypes  to access the system call  stat64  (works with Python 2.5+):'], ['Using  subprocess  to call the  stat  utility:']], [[' from ctypes import *\n\nclass struct_timespec(Structure):\n    _fields_ = [(\'tv_sec\', c_long), (\'tv_nsec\', c_long)]\n\nclass struct_stat64(Structure):\n    _fields_ = [\n        (\'st_dev\', c_int32),\n        (\'st_mode\', c_uint16),\n        (\'st_nlink\', c_uint16),\n        (\'st_ino\', c_uint64),\n        (\'st_uid\', c_uint32),\n        (\'st_gid\', c_uint32), \n        (\'st_rdev\', c_int32),\n        (\'st_atimespec\', struct_timespec),\n        (\'st_mtimespec\', struct_timespec),\n        (\'st_ctimespec\', struct_timespec),\n        (\'st_birthtimespec\', struct_timespec),\n        (\'dont_care\', c_uint64 * 8)\n    ]\n\nlibc = CDLL(\'libc.dylib\') # or /usr/lib/libc.dylib\nstat64 = libc.stat64\nstat64.argtypes = [c_char_p, POINTER(struct_stat64)]\n\ndef get_creation_time(path):\n    buf = struct_stat64()\n    rv = stat64(path, pointer(buf))\n    if rv != 0:\n        raise OSError("Couldn\'t stat file %r" % path)\n    return buf.st_birthtimespec.tv_sec\n']], ['Get file creation time with Python on Mac'], 3], [(946967, 2), [['Using  subprocess  to call the  stat  utility:'], ['-10000']], [[" import subprocess\n\ndef get_creation_time(path):\n    p = subprocess.Popen(['stat', '-f%B', path],\n        stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if p.wait():\n        raise OSError(p.stderr.read().rstrip())\n    else:\n        return int(p.stdout.read())\n"]], ['Get file creation time with Python on Mac'], 3], [(947372, 0), [['it seems to be returning the html mimetype for all files:'], ['EDIT : Trying to fix it for you:']], [[" self.send_header('Content-type', 'text/html')\n"]], ['Custom simple Python HTTP server not serving css files'], 2], [(947372, 1), [['EDIT : Trying to fix it for you:'], ['-10000']], [[" import os\nimport mimetypes\n\n#...\n\n    def do_GET(self):\n        try:\n\n            filepath = self.path\n            print filepath, USTAW['rootwww']\n\n            f = open(os.path.join('.', 'www', filepath))\n\n        except IOError:\n            self.send_error(404,'File Not Found: %s ' % filepath)\n\n        else:\n            self.send_response(200)\n            mimetype, _ = mimetypes.guess_type(filepath)\n            self.send_header('Content-type', mimetype)\n            self.end_headers()\n            for s in f:\n                self.wfile.write(s)\n"]], ['Custom simple Python HTTP server not serving css files'], 2], [(949098, 0), [['-10000'], ['That code is perfectly readable, and extremely clear!']], [[' good = [x for x in mylist if x in goodvals]\nbad  = [x for x in mylist if x not in goodvals]\n']], ['Python: split a list based on a condition?'], 4], [(949098, 1), [['That code is perfectly readable, and extremely clear!'], ['In fact, I may go another step "backward", and just use a simple for loop:']], [[" # files looks like: [ ('file1.jpg', 33L, '.jpg'), ('file2.avi', 999L, '.avi'), ... ]\nIMAGE_TYPES = ('.jpg','.jpeg','.gif','.bmp','.png')\nimages = [f for f in files if f[2].lower() in IMAGE_TYPES]\nanims  = [f for f in files if f[2].lower() not in IMAGE_TYPES]\n"]], ['Python: split a list based on a condition?'], 4], [(949098, 2), [['In fact, I may go another step "backward", and just use a simple for loop:'], ["The a list-comprehension or using  set()  is fine until you need to add some other check or another bit of logic - say you want to remove all 0-byte jpeg's, you just add something like.."]], [[' images, anims = [], []\n\nfor f in files:\n    if f.lower() in IMAGE_TYPES:\n        images.append(f)\n    else:\n        anims.append(f)\n']], ['Python: split a list based on a condition?'], 4], [(949098, 3), [["The a list-comprehension or using  set()  is fine until you need to add some other check or another bit of logic - say you want to remove all 0-byte jpeg's, you just add something like.."], ['-10000']], [[' if f[1] == 0:\n    continue\n']], ['Python: split a list based on a condition?'], 4], [(950053, 0), [['You can call unbound methods with the instance as the first parameter:'], ["So in your case you don't actually need to do anything specific, just the following:"]], [[' class A(int):\n    def sqr(self):\n        return A(self*self)\n\nsqr = A.sqr\na = A(5)\nprint sqr(a) # Prints 25\n']], ["Referencing a class' method, not an instance's"], 3], [(950053, 1), [["So in your case you don't actually need to do anything specific, just the following:"], ['Be aware that this is early binding, so if you have a subclass B that overrides sqr then still A.sqr is called. For late binding you can use a lambda at the callsite:']], [[' bin_pow(a, n, sqr=A.sqr)\n']], ["Referencing a class' method, not an instance's"], 3], [(950053, 2), [['Be aware that this is early binding, so if you have a subclass B that overrides sqr then still A.sqr is called. For late binding you can use a lambda at the callsite:'], ['-10000']], [[' bin_pow(a, n, sqr=lambda x: x.sqr())\n']], ["Referencing a class' method, not an instance's"], 3], [(952648, 0), [['Source Code'], ['Output']], [[' tokens = (\n    \'NAME\',\'NUMBER\',\n    )\n\nliterals = [\'=\',\'+\',\'-\',\'*\',\'/\', \'(\',\')\']\n\n# Tokens\n\nt_NAME    = r\'[a-zA-Z_][a-zA-Z0-9_]*\'\n\ndef t_NUMBER(t):\n    r\'\\d+\'\n    t.value = int(t.value)\n    return t\n\nt_ignore = " \\t"\n\ndef t_newline(t):\n    r\'\\n+\'\n    t.lexer.lineno += t.value.count("\\n")\n\ndef t_error(t):\n    print("Illegal character \'%s\'" % t.value[0])\n    t.lexer.skip(1)\n\n# Build the lexer\nimport ply.lex as lex\nlex.lex(debug=1)\n\n# Parsing rules\n\nprecedence = (\n    (\'left\',\'+\',\'-\'),\n    (\'left\',\'*\',\'/\'),\n    (\'right\',\'UMINUS\'),\n    )\n\n# dictionary of names\nnames = { }\n\ndef p_statement_assign(p):\n    \'statement : NAME "=" expression\'\n    names[p[1]] = p[3]\n\ndef p_statement_expr(p):\n    \'statement : expression\'\n    print(p[1])\n\ndef p_expression_binop(p):\n    \'\'\'expression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\'\'\'\n    if p[2] == \'+\'  : p[0] = p[1] + p[3]\n    elif p[2] == \'-\': p[0] = p[1] - p[3]\n    elif p[2] == \'*\': p[0] = p[1] * p[3]\n    elif p[2] == \'/\': p[0] = p[1] / p[3]\n\ndef p_expression_uminus(p):\n    "expression : \'-\' expression %prec UMINUS"\n    p[0] = -p[2]\n\ndef p_expression_group(p):\n    "expression : \'(\' expression \')\'"\n    p[0] = p[2]\n\ndef p_expression_number(p):\n    "expression : NUMBER"\n    p[0] = p[1]\n\ndef p_expression_name(p):\n    "expression : NAME"\n    try:\n        p[0] = names[p[1]]\n    except LookupError:\n        print("Undefined name \'%s\'" % p[1])\n        p[0] = 0\n\ndef p_error(p):\n    if p:\n        print("Syntax error at \'%s\'" % p.value)\n    else:\n        print("Syntax error at EOF")\n\nimport ply.yacc as yacc\nyacc.yacc()\n\nimport logging\nlogging.basicConfig(\n    level=logging.INFO,\n    filename="parselog.txt"\n)\n\nwhile 1:\n    try:\n        s = raw_input(\'calc > \')\n    except EOFError:\n        break\n    if not s: continue\n    yacc.parse(s, debug=1)\n']], ['Help me find an appropriate ruby/python parser generator'], 3], [(952648, 1), [['Output'], ['Parse Table generated at parser.out']], [[" lex: tokens   = ('NAME', 'NUMBER')\nlex: literals = ['=', '+', '-', '*', '/', '(', ')']\nlex: states   = {'INITIAL': 'inclusive'}\nlex: Adding rule t_NUMBER -> '\\d+' (state 'INITIAL')\nlex: Adding rule t_newline -> '\\n+' (state 'INITIAL')\nlex: Adding rule t_NAME -> '[a-zA-Z_][a-zA-Z0-9_]*' (state 'INITIAL')\nlex: ==== MASTER REGEXS FOLLOW ====\nlex: state 'INITIAL' : regex[0] = '(?P<t_NUMBER>\\d+)|(?P<t_newline>\\n+)|(?P<t_NAME>[a-zA-Z\n_][a-zA-Z0-9_]*)'\ncalc > 2+3\nPLY: PARSE DEBUG START\n\nState  : 0\nStack  : . LexToken(NUMBER,2,1,0)\nAction : Shift and goto state 3\n\nState  : 3\nStack  : NUMBER . LexToken(+,'+',1,1)\nAction : Reduce rule [expression -> NUMBER] with [2] and goto state 9\nResult : <int @ 0x1a1896c> (2)\n\nState  : 6\nStack  : expression . LexToken(+,'+',1,1)\nAction : Shift and goto state 12\n\nState  : 12\nStack  : expression + . LexToken(NUMBER,3,1,2)\nAction : Shift and goto state 3\n\nState  : 3\nStack  : expression + NUMBER . $end\nAction : Reduce rule [expression -> NUMBER] with [3] and goto state 9\nResult : <int @ 0x1a18960> (3)\n\nState  : 18\nStack  : expression + expression . $end\nAction : Reduce rule [expression -> expression + expression] with [2,'+',3] and goto state\n 3\nResult : <int @ 0x1a18948> (5)\n\nState  : 6\nStack  : expression . $end\nAction : Reduce rule [statement -> expression] with [5] and goto state 2\n5\nResult : <NoneType @ 0x1e1ccef4> (None)\n\nState  : 4\nStack  : statement . $end\nDone   : Returning <NoneType @ 0x1e1ccef4> (None)\nPLY: PARSE DEBUG END\ncalc >\n"]], ['Help me find an appropriate ruby/python parser generator'], 3], [(952648, 2), [['Parse Table generated at parser.out'], ['-10000']], [[" Created by PLY version 3.2 (http://www.dabeaz.com/ply)\n\nGrammar\n\nRule 0     S' -> statement\nRule 1     statement -> NAME = expression\nRule 2     statement -> expression\nRule 3     expression -> expression + expression\nRule 4     expression -> expression - expression\nRule 5     expression -> expression * expression\nRule 6     expression -> expression / expression\nRule 7     expression -> - expression\nRule 8     expression -> ( expression )\nRule 9     expression -> NUMBER\nRule 10    expression -> NAME\n\nTerminals, with rules where they appear\n\n(                    : 8\n)                    : 8\n*                    : 5\n+                    : 3\n-                    : 4 7\n/                    : 6\n=                    : 1\nNAME                 : 1 10\nNUMBER               : 9\nerror                : \n\nNonterminals, with rules where they appear\n\nexpression           : 1 2 3 3 4 4 5 5 6 6 7 8\nstatement            : 0\n\nParsing method: LALR\n\nstate 0\n\n    (0) S' -> . statement\n    (1) statement -> . NAME = expression\n    (2) statement -> . expression\n    (3) expression -> . expression + expression\n    (4) expression -> . expression - expression\n    (5) expression -> . expression * expression\n    (6) expression -> . expression / expression\n    (7) expression -> . - expression\n    (8) expression -> . ( expression )\n    (9) expression -> . NUMBER\n    (10) expression -> . NAME\n\n    NAME            shift and go to state 1\n    -               shift and go to state 2\n    (               shift and go to state 5\n    NUMBER          shift and go to state 3\n\n    expression                     shift and go to state 6\n    statement                      shift and go to state 4\n\nstate 1\n\n    (1) statement -> NAME . = expression\n    (10) expression -> NAME .\n\n    =               shift and go to state 7\n    +               reduce using rule 10 (expression -> NAME .)\n    -               reduce using rule 10 (expression -> NAME .)\n    *               reduce using rule 10 (expression -> NAME .)\n    /               reduce using rule 10 (expression -> NAME .)\n    $end            reduce using rule 10 (expression -> NAME .)\n\n\nstate 2\n\n    (7) expression -> - . expression\n    (3) expression -> . expression + expression\n    (4) expression -> . expression - expression\n    (5) expression -> . expression * expression\n    (6) expression -> . expression / expression\n    (7) expression -> . - expression\n    (8) expression -> . ( expression )\n    (9) expression -> . NUMBER\n    (10) expression -> . NAME\n\n    -               shift and go to state 2\n    (               shift and go to state 5\n    NUMBER          shift and go to state 3\n    NAME            shift and go to state 8\n\n    expression                     shift and go to state 9\n\nstate 3\n\n    (9) expression -> NUMBER .\n\n    +               reduce using rule 9 (expression -> NUMBER .)\n    -               reduce using rule 9 (expression -> NUMBER .)\n    *               reduce using rule 9 (expression -> NUMBER .)\n    /               reduce using rule 9 (expression -> NUMBER .)\n    $end            reduce using rule 9 (expression -> NUMBER .)\n    )               reduce using rule 9 (expression -> NUMBER .)\n\n\nstate 4\n\n    (0) S' -> statement .\n\n\n\nstate 5\n\n    (8) expression -> ( . expression )\n    (3) expression -> . expression + expression\n    (4) expression -> . expression - expression\n    (5) expression -> . expression * expression\n    (6) expression -> . expression / expression\n    (7) expression -> . - expression\n    (8) expression -> . ( expression )\n    (9) expression -> . NUMBER\n    (10) expression -> . NAME\n\n    -               shift and go to state 2\n    (               shift and go to state 5\n    NUMBER          shift and go to state 3\n    NAME            shift and go to state 8\n\n    expression                     shift and go to state 10\n\nstate 6\n\n    (2) statement -> expression .\n    (3) expression -> expression . + expression\n    (4) expression -> expression . - expression\n    (5) expression -> expression . * expression\n    (6) expression -> expression . / expression\n\n    $end            reduce using rule 2 (statement -> expression .)\n    +               shift and go to state 12\n    -               shift and go to state 11\n    *               shift and go to state 13\n    /               shift and go to state 14\n\n\nstate 7\n\n    (1) statement -> NAME = . expression\n    (3) expression -> . expression + expression\n    (4) expression -> . expression - expression\n    (5) expression -> . expression * expression\n    (6) expression -> . expression / expression\n    (7) expression -> . - expression\n    (8) expression -> . ( expression )\n    (9) expression -> . NUMBER\n    (10) expression -> . NAME\n\n    -               shift and go to state 2\n    (               shift and go to state 5\n    NUMBER          shift and go to state 3\n    NAME            shift and go to state 8\n\n    expression                     shift and go to state 15\n\nstate 8\n\n    (10) expression -> NAME .\n\n    +               reduce using rule 10 (expression -> NAME .)\n    -               reduce using rule 10 (expression -> NAME .)\n    *               reduce using rule 10 (expression -> NAME .)\n    /               reduce using rule 10 (expression -> NAME .)\n    $end            reduce using rule 10 (expression -> NAME .)\n    )               reduce using rule 10 (expression -> NAME .)\n\n\nstate 9\n\n    (7) expression -> - expression .\n    (3) expression -> expression . + expression\n    (4) expression -> expression . - expression\n    (5) expression -> expression . * expression\n    (6) expression -> expression . / expression\n\n    +               reduce using rule 7 (expression -> - expression .)\n    -               reduce using rule 7 (expression -> - expression .)\n    *               reduce using rule 7 (expression -> - expression .)\n    /               reduce using rule 7 (expression -> - expression .)\n    $end            reduce using rule 7 (expression -> - expression .)\n    )               reduce using rule 7 (expression -> - expression .)\n\n  ! +               [ shift and go to state 12 ]\n  ! -               [ shift and go to state 11 ]\n  ! *               [ shift and go to state 13 ]\n  ! /               [ shift and go to state 14 ]\n\n\nstate 10\n\n    (8) expression -> ( expression . )\n    (3) expression -> expression . + expression\n    (4) expression -> expression . - expression\n    (5) expression -> expression . * expression\n    (6) expression -> expression . / expression\n\n    )               shift and go to state 16\n    +               shift and go to state 12\n    -               shift and go to state 11\n    *               shift and go to state 13\n    /               shift and go to state 14\n\n\nstate 11\n\n    (4) expression -> expression - . expression\n    (3) expression -> . expression + expression\n    (4) expression -> . expression - expression\n    (5) expression -> . expression * expression\n    (6) expression -> . expression / expression\n    (7) expression -> . - expression\n    (8) expression -> . ( expression )\n    (9) expression -> . NUMBER\n    (10) expression -> . NAME\n\n    -               shift and go to state 2\n    (               shift and go to state 5\n    NUMBER          shift and go to state 3\n    NAME            shift and go to state 8\n\n    expression                     shift and go to state 17\n\nstate 12\n\n    (3) expression -> expression + . expression\n    (3) expression -> . expression + expression\n    (4) expression -> . expression - expression\n    (5) expression -> . expression * expression\n    (6) expression -> . expression / expression\n    (7) expression -> . - expression\n    (8) expression -> . ( expression )\n    (9) expression -> . NUMBER\n    (10) expression -> . NAME\n\n    -               shift and go to state 2\n    (               shift and go to state 5\n    NUMBER          shift and go to state 3\n    NAME            shift and go to state 8\n\n    expression                     shift and go to state 18\n\nstate 13\n\n    (5) expression -> expression * . expression\n    (3) expression -> . expression + expression\n    (4) expression -> . expression - expression\n    (5) expression -> . expression * expression\n    (6) expression -> . expression / expression\n    (7) expression -> . - expression\n    (8) expression -> . ( expression )\n    (9) expression -> . NUMBER\n    (10) expression -> . NAME\n\n    -               shift and go to state 2\n    (               shift and go to state 5\n    NUMBER          shift and go to state 3\n    NAME            shift and go to state 8\n\n    expression                     shift and go to state 19\n\nstate 14\n\n    (6) expression -> expression / . expression\n    (3) expression -> . expression + expression\n    (4) expression -> . expression - expression\n    (5) expression -> . expression * expression\n    (6) expression -> . expression / expression\n    (7) expression -> . - expression\n    (8) expression -> . ( expression )\n    (9) expression -> . NUMBER\n    (10) expression -> . NAME\n\n    -               shift and go to state 2\n    (               shift and go to state 5\n    NUMBER          shift and go to state 3\n    NAME            shift and go to state 8\n\n    expression                     shift and go to state 20\n\nstate 15\n\n    (1) statement -> NAME = expression .\n    (3) expression -> expression . + expression\n    (4) expression -> expression . - expression\n    (5) expression -> expression . * expression\n    (6) expression -> expression . / expression\n\n    $end            reduce using rule 1 (statement -> NAME = expression .)\n    +               shift and go to state 12\n    -               shift and go to state 11\n    *               shift and go to state 13\n    /               shift and go to state 14\n\n\nstate 16\n\n    (8) expression -> ( expression ) .\n\n    +               reduce using rule 8 (expression -> ( expression ) .)\n    -               reduce using rule 8 (expression -> ( expression ) .)\n    *               reduce using rule 8 (expression -> ( expression ) .)\n    /               reduce using rule 8 (expression -> ( expression ) .)\n    $end            reduce using rule 8 (expression -> ( expression ) .)\n    )               reduce using rule 8 (expression -> ( expression ) .)\n\n\nstate 17\n\n    (4) expression -> expression - expression .\n    (3) expression -> expression . + expression\n    (4) expression -> expression . - expression\n    (5) expression -> expression . * expression\n    (6) expression -> expression . / expression\n\n    +               reduce using rule 4 (expression -> expression - expression .)\n    -               reduce using rule 4 (expression -> expression - expression .)\n    $end            reduce using rule 4 (expression -> expression - expression .)\n    )               reduce using rule 4 (expression -> expression - expression .)\n    *               shift and go to state 13\n    /               shift and go to state 14\n\n  ! *               [ reduce using rule 4 (expression -> expression - expression .) ]\n  ! /               [ reduce using rule 4 (expression -> expression - expression .) ]\n  ! +               [ shift and go to state 12 ]\n  ! -               [ shift and go to state 11 ]\n\n\nstate 18\n\n    (3) expression -> expression + expression .\n    (3) expression -> expression . + expression\n    (4) expression -> expression . - expression\n    (5) expression -> expression . * expression\n    (6) expression -> expression . / expression\n\n    +               reduce using rule 3 (expression -> expression + expression .)\n    -               reduce using rule 3 (expression -> expression + expression .)\n    $end            reduce using rule 3 (expression -> expression + expression .)\n    )               reduce using rule 3 (expression -> expression + expression .)\n    *               shift and go to state 13\n    /               shift and go to state 14\n\n  ! *               [ reduce using rule 3 (expression -> expression + expression .) ]\n  ! /               [ reduce using rule 3 (expression -> expression + expression .) ]\n  ! +               [ shift and go to state 12 ]\n  ! -               [ shift and go to state 11 ]\n\n\nstate 19\n\n    (5) expression -> expression * expression .\n    (3) expression -> expression . + expression\n    (4) expression -> expression . - expression\n    (5) expression -> expression . * expression\n    (6) expression -> expression . / expression\n\n    +               reduce using rule 5 (expression -> expression * expression .)\n    -               reduce using rule 5 (expression -> expression * expression .)\n    *               reduce using rule 5 (expression -> expression * expression .)\n    /               reduce using rule 5 (expression -> expression * expression .)\n    $end            reduce using rule 5 (expression -> expression * expression .)\n    )               reduce using rule 5 (expression -> expression * expression .)\n\n  ! +               [ shift and go to state 12 ]\n  ! -               [ shift and go to state 11 ]\n  ! *               [ shift and go to state 13 ]\n  ! /               [ shift and go to state 14 ]\n\n\nstate 20\n\n    (6) expression -> expression / expression .\n    (3) expression -> expression . + expression\n    (4) expression -> expression . - expression\n    (5) expression -> expression . * expression\n    (6) expression -> expression . / expression\n\n    +               reduce using rule 6 (expression -> expression / expression .)\n    -               reduce using rule 6 (expression -> expression / expression .)\n    *               reduce using rule 6 (expression -> expression / expression .)\n    /               reduce using rule 6 (expression -> expression / expression .)\n    $end            reduce using rule 6 (expression -> expression / expression .)\n    )               reduce using rule 6 (expression -> expression / expression .)\n\n  ! +               [ shift and go to state 12 ]\n  ! -               [ shift and go to state 11 ]\n  ! *               [ shift and go to state 13 ]\n  ! /               [ shift and go to state 14 ]\n"]], ['Help me find an appropriate ruby/python parser generator'], 3], [(953477, 0), [["I recommend calling ssh as a subprocess.  It's reliable and portable."], ["You'd have to worry about quoting the destination filename.  If you want more flexibility, you could even do this:"]], [[" import subprocess\nproc = subprocess.Popen(['ssh', 'user@host', 'cat > %s' % filename],\n                        stdin=subprocess.PIPE)\nproc.communicate(file_contents)\nif proc.retcode != 0:\n    ...\n"]], ['SSH Connection with Python 3.0'], 2], [(953477, 1), [["You'd have to worry about quoting the destination filename.  If you want more flexibility, you could even do this:"], ['-10000']], [[" import subprocess\nimport tarfile\nimport io\ntardata = io.BytesIO()\ntar = tarfile.open(mode='w:gz', fileobj=tardata)\n... put stuff in tar ...\nproc = subprocess.Popen(['ssh', 'user@host', 'tar xz'],\n                        stdin=subprocess.PIPE)\nproc.communicate(tardata.getvalue())\nif proc.retcode != 0:\n    ...\n"]], ['SSH Connection with Python 3.0'], 2], [(953914, 0), [['If you mean, can the function act differently based on the return types the caller is expecting, the answer is no (bar seriously nasty bytecode inspection).  In this case, you should provide two different iterators on your object, and write something like:'], ['[Edit]  Just in case anyone wants to see what I mean by "seriously nasty bytecode inspection", here\'s a quick implementation:']], [[' for item in something:  # Default iterator: returns non-tuple objects\n    do_something(item)\n\nfor (item,key) in something.iter_pairs(): # iter_pairs returns different iterator\n    do_something_else(item, key)\n']], ['how to program functions with alternative return value signatures in python? (next() for alternative iterators)'], 3], [(953914, 1), [['[Edit]  Just in case anyone wants to see what I mean by "seriously nasty bytecode inspection", here\'s a quick implementation:'], ['Usable something like:']], [[' import inspect, opcode\n\ndef num_expected_results():\n    """Return the number of items the caller is expecting in a tuple.\n\n    Returns None if a single value is expected, rather than a tuple.\n    """\n    f = inspect.currentframe(2)\n    code = map(ord, f.f_code.co_code)\n    pos = f.f_lasti\n    if code[pos] == opcode.opmap[\'GET_ITER\']: pos += 1 # Skip this and the FOR_ITER\n    if code[pos] > opcode.EXTENDED_ARG: pos +=5\n    elif code[pos] > opcode.HAVE_ARGUMENT: pos +=3\n    else: pos += 1\n    if code[pos] == opcode.opmap[\'UNPACK_SEQUENCE\']:\n        return code[pos+1] + (code[pos+2] << 8)\n    return None\n']], ['how to program functions with alternative return value signatures in python? (next() for alternative iterators)'], 3], [(953914, 2), [['Usable something like:'], ['Disclaimer:  This is incredibly hacky, insanely bad practice, and  will  cause other programmers to hunt you down and kill you if they ever see it in real code.  Only works on cpython (if that).   Never  use this in production code (or for that matter, probably any code).']], [[' class MagicDict(dict):\n    def __iter__(self):\n        if num_expected_results() == 2:\n            for k,v in self.iteritems():\n                yield k,v\n        else:\n            for k in self.iterkeys(): \n                yield k\n\nd=MagicDict(foo=1, bar=2)\n\nprint "Keys:"\nfor key in d:\n    print "   ", key\nprint "Values"    \nfor k,v in d:\n    print "   ",k,v\n']], ['how to program functions with alternative return value signatures in python? (next() for alternative iterators)'], 3], [(956820, 0), [['You could define a little inline function:'], ['then']], [[' def EntryMatches(e):\n  if use_currency and not (e.currency == currency):\n    return False\n  if use_category and not (e.category == category):\n    return False\n  return True\n']], ['Iterating through large lists with potential conditions in Python'], 2], [(956820, 1), [['then'], ['EntryMatches() will have access to all variables in enclosing scope, so no need to pass in any more arguments. You get the advantage that all of the logic for which entries to use is in one place, you still get to use the list comprehension to make the sum() more readable, but you can have arbitrary logic in EntryMatches() now.']], [[" totals['quantity'] = sum([e.quantity for e in entries if EntryMatches(e)])\n"]], ['Iterating through large lists with potential conditions in Python'], 2], [(956867, 0), [['-10000'], ['Example usage:']], [["A solution with <code>object_hook</code> import json\n\ndef json_load_byteified(file_handle):\n    return _byteify(\n        json.load(file_handle, object_hook=_byteify),\n        ignore_dicts=True\n    )\n\ndef json_loads_byteified(json_text):\n    return _byteify(\n        json.loads(json_text, object_hook=_byteify),\n        ignore_dicts=True\n    )\n\ndef _byteify(data, ignore_dicts = False):\n    # if this is a unicode string, return its string representation\n    if isinstance(data, unicode):\n        return data.encode('utf-8')\n    # if this is a list of values, return list of byteified values\n    if isinstance(data, list):\n        return [ _byteify(item, ignore_dicts=True) for item in data ]\n    # if this is a dictionary, return dictionary of byteified keys and values\n    # but only if we haven't already byteified it\n    if isinstance(data, dict) and not ignore_dicts:\n        return {\n            _byteify(key, ignore_dicts=True): _byteify(value, ignore_dicts=True)\n            for key, value in data.iteritems()\n        }\n    # if it's anything else, return it in its original form\n    return data\n"]], ['How to get string objects instead of Unicode from JSON?'], 2], [(956867, 1), [['Example usage:'], ['-10000']], [[' >>> <b><i>json_loads_byteified(\'{"Hello": "World"}\')</i></b>\n{\'Hello\': \'World\'}\n>>> <b><i>json_loads_byteified(\'"I am a top-level string"\')</i></b>\n\'I am a top-level string\'\n>>> <b><i>json_loads_byteified(\'7\')</i></b>\n7\n>>> <b><i>json_loads_byteified(\'["I am inside a list"]\')</i></b>\n[\'I am inside a list\']\n>>> <b><i>json_loads_byteified(\'[[[[[[[["I am inside a big nest of lists"]]]]]]]]\')</i></b>\n[[[[[[[[\'I am inside a big nest of lists\']]]]]]]]\n>>> <b><i>json_loads_byteified(\'{"foo": "bar", "things": [7, {"qux": "baz", "moo": {"cow": ["milk"]}}]}\')</i></b>\n{\'things\': [7, {\'qux\': \'baz\', \'moo\': {\'cow\': [\'milk\']}}], \'foo\': \'bar\'}\n>>> <b><i>json_load_byteified(open(\'somefile.json\'))</i></b>\n{\'more json\': \'from a file\'}']], ['How to get string objects instead of Unicode from JSON?'], 2], [(958678, 0), [["The trick to this is to form all possible sub-products, and the code below does this.  It works by looping through the factors forming all possible single pairs, and then doing this recursively, to give all possible sets of all single or multiple pairings.  (It's inefficiently, but even large numbers have a small prime factorization):"], ["I'll leave it to you to generate the prime factors, but this seems to work for"]], [[' def xgroup(items):\n    L = len(items)\n    for i in range(L-1):\n        for j in range(1, L):\n            temp = list(items)\n            a = temp.pop(j)\n            b = temp.pop(i)\n            temp.insert(0, a*b)\n            yield temp\n            for x in xgroup(temp):\n                yield x\n\ndef product_combos(max_entry, n_boxes, items):\n    r = set()\n    if len(items)<=n_boxes:\n        r.add(tuple(items))\n    for i in xgroup(items):\n        x = i[:]\n        x.sort()\n        if x[-1]<=max_entry and len(x)<=n_boxes:\n            r.add(tuple(x))\n    r = [list(i) for i in r]\n    r.sort()\n    for i in r:\n        while len(i)<n_boxes:\n            i.insert(0, 1)\n    return r\n']], ["Find all possible factors in KenKen puzzle 'multiply' domain"], 3], [(958678, 1), [["I'll leave it to you to generate the prime factors, but this seems to work for"], ['and for a harder case where, say  target_number=2106  ']], [[' max_entry=6, n_boxes=3, items=(2,2,5)\n[2, 2, 5]\n[1, 4, 5]\n']], ["Find all possible factors in KenKen puzzle 'multiply' domain"], 3], [(958678, 2), [['and for a harder case where, say  target_number=2106  '], ['-10000']], [[' max_entry=50, n_boxes=6, items=(2,3,3,3,3,13)\n[2, 3, 3, 3, 3, 13]\n[1, 2, 3, 3, 3, 39]\n[1, 2, 3, 3, 9, 13]\n[1, 1, 2, 3, 9, 39]\n[1, 1, 2, 3, 13, 27]\n[1, 1, 2, 9, 9, 13]\n[1, 1, 1, 2, 27, 39]\n[1, 3, 3, 3, 3, 26]\n[1, 3, 3, 3, 6, 13]\n[1, 1, 3, 3, 6, 39]\n[1, 1, 3, 3, 9, 26]\n[1, 1, 3, 3, 13, 18]\n[1, 1, 3, 6, 9, 13]\n[1, 1, 1, 3, 18, 39]\n[1, 1, 1, 3, 26, 27]\n[1, 1, 1, 6, 9, 39]\n[1, 1, 1, 6, 13, 27]\n[1, 1, 1, 9, 9, 26]\n[1, 1, 1, 9, 13, 18]\n']], ["Find all possible factors in KenKen puzzle 'multiply' domain"], 3], [(959215, 0), [['The  lstrip()  method will remove leading whitespaces, newline and tab characters on a string beginning:'], ["As balpha pointed out in the comments , in order to remove  only  spaces from the beginning of the string,  lstrip(' ')  should be used:"]], [[" >>> '     hello world!'.lstrip()\n'hello world!'\n"]], ['How do I remove leading whitespace in Python?'], 2], [(959215, 1), [["As balpha pointed out in the comments , in order to remove  only  spaces from the beginning of the string,  lstrip(' ')  should be used:"], ['Related question:']], [[" >>> '   hello world with 2 spaces and a tab!'.lstrip(' ')\n'\\thello world with 2 spaces and a tab!'\n"]], ['How do I remove leading whitespace in Python?'], 2], [(959675, 0), [['Try creating Pixmap that uses the same colormap as your drawing area.'], ['and drawing it to the screen using']], [[' dr_area.realize()\nself.gc = dr_area.get_style().fg_gc[gtk.STATE_NORMAL]\nimg = gtk.gdk.pixbuf_new_from_file("image.png")\nself.image = gtk.gdk.Pixmap(dr_area.window, img.get_width(), img.get_height())\nself.image.draw_pixbuf(self.gc, img, 0, 0, 0, 0)\n']], ['What is the fastest way to draw an image in Gtk+?'], 2], [(959675, 1), [['and drawing it to the screen using'], ['-10000']], [[' dr_area.window.draw_drawable(self.gc, self.image, 0, 0, x, y, *self.image.get_size())\n']], ['What is the fastest way to draw an image in Gtk+?'], 2], [(959782, 0), [["The issue you're encountering, as explained in Python's  online docs , is that of Unicode encoding:"], ['So, call  .toxml(\'utf8\') , not just  .toxml() , and use unicode strings as text contents, and you should be fine for a "round-trip" as you desire. For example:']], [[' Node.toxml([encoding])\nReturn the XML that the DOM represents as a string.\n\nWith no argument, the XML header does not specify an encoding, and the result is\nUnicode string if the default encoding cannot represent all characters in the \ndocument. Encoding this string in an encoding other than UTF-8 is likely\nincorrect, since UTF-8 is the default encoding of XML.\n\nWith an explicit encoding [1] argument, the result is a byte string in the \nspecified encoding. It is recommended that this argument is always specified.\nTo avoid UnicodeError exceptions in case of unrepresentable text data, the \nencoding argument should be specified as “utf-8”.\n']], ['How to ensure xml.dom.minidom can parse its own output?'], 2], [(959782, 1), [['So, call  .toxml(\'utf8\') , not just  .toxml() , and use unicode strings as text contents, and you should be fine for a "round-trip" as you desire. For example:'], ['-10000']], [[' >>> t.data = u"The text\\u0180content"\n>>> dom.parseString(e.toxml(\'utf8\')).toxml(\'utf8\')\n\'<?xml version="1.0" encoding="utf8"?><node>The text\\xc6\\x80content</node>\'\n>>> \n']], ['How to ensure xml.dom.minidom can parse its own output?'], 2], [(959985, 0), [["I don't have an Outlook installation available to test this, so I'm wondering about the reason for the fifth line in your function."], ['In other words, add something like the following before the send line in the function listed in the question:']], [[' self.msg.content_subtype = "html"']], ['Django EmailMultiAlternatives and HTML e-mail display in Outlook 2003 on Win2003'], 3], [(959985, 1), [['In other words, add something like the following before the send line in the function listed in the question:'], ["Unfortunately, that will only change the encoding specified on the first part (msg_text in the function above). The function that attaches the alternative content doesn't seem to use the encoding attribute. I'm not sure it's the correct approach but I subclassed EmailMultiAlternatives to override the relevant function and it seemed to work okay."]], [[' self.msg.content_subtype = "iso-8859-1"']], ['Django EmailMultiAlternatives and HTML e-mail display in Outlook 2003 on Win2003'], 3], [(959985, 2), [["Unfortunately, that will only change the encoding specified on the first part (msg_text in the function above). The function that attaches the alternative content doesn't seem to use the encoding attribute. I'm not sure it's the correct approach but I subclassed EmailMultiAlternatives to override the relevant function and it seemed to work okay."], ['I\'m not sure if the "smart_str(content, settings.DEFAULT_CHARSET)" part should also reference "encoding" rather than "settings.DEFAULT_CHARSET" but that\'s the message body handling text is written (django.core.mail.EmailMessage.message).']], [[' class EmailMultiAlternativesWithEncoding(EmailMultiAlternatives):\n    def _create_attachment(self, filename, content, mimetype=None):\n        """\n        Converts the filename, content, mimetype triple into a MIME attachment\n        object. Use self.encoding when handling text attachments.\n        """\n        if mimetype is None:\n            mimetype, _ = mimetypes.guess_type(filename)\n            if mimetype is None:\n                mimetype = DEFAULT_ATTACHMENT_MIME_TYPE\n        basetype, subtype = mimetype.split(\'/\', 1)\n        if basetype == \'text\':\n            encoding = self.encoding or settings.DEFAULT_CHARSET\n            attachment = SafeMIMEText(smart_str(content,\n                settings.DEFAULT_CHARSET), subtype, encoding)\n            # original text being replaced above (not last argument)\n            # attachment = SafeMIMEText(smart_str(content,\n            #     settings.DEFAULT_CHARSET), subtype, settings.DEFAULT_CHARSET)\n        else:\n            # Encode non-text attachments with base64.\n            attachment = MIMEBase(basetype, subtype)\n            attachment.set_payload(content)\n            Encoders.encode_base64(attachment)\n        if filename:\n            attachment.add_header(\'Content-Disposition\', \'attachment\',\n                                  filename=filename)\n        return attachment']], ['Django EmailMultiAlternatives and HTML e-mail display in Outlook 2003 on Win2003'], 3], [(960557, 0), [['itertools.permutations  is built in (since 2.6) and fast.  We just need a filtering condition that for every (perm, perm[::-1]) would accept exactly one of them. Since the OP says items are always distinct, we can just compare any 2 elements:'], ['which prints:']], [[' for p in itertools.permutations(range(3)):\n    if p[0] < p[-1]:\n        print p\n']], ['How to generate permutations of a list without "reverse duplicates" in Python using generators'], 2], [(960557, 1), [['which prints:'], ['This works because reversing the permutation would always flip the relation! \n p[0] < p[1]  or any other pair would also work, so you also have some control over which half of permutations you get.']], [[' (0, 1, 2)\n(0, 2, 1)\n(1, 0, 2)\n']], ['How to generate permutations of a list without "reverse duplicates" in Python using generators'], 2], [(962082, 0), [['Here is the pythonic way to write this loop:'], ['After running some  timeit  tests using Python 2.5, I found  enumerate  to be slightly slower:']], [[' for index, obj in enumerate(objects):\n  # Use index, obj.\n']], ['How to enumerate a list of non-string objects in Python?'], 2], [(962082, 1), [['After running some  timeit  tests using Python 2.5, I found  enumerate  to be slightly slower:'], ['-10000']], [[" >>> timeit.Timer('for i in xrange(len(seq)): x = i + seq[i]', 'seq = range(100)').timeit()\n10.322299003601074\n>>> timeit.Timer('for i, e in enumerate(seq): x = i + e', 'seq = range(100)').timeit()\n11.850601196289062\n"]], ['How to enumerate a list of non-string objects in Python?'], 2], [(963448, 0), [['Well, depending on how varied your HTML is, you can use single quotes in HTML fine, so you could do:'], ['However, with  simplejson , which is built into Python 2.6 as the  json module , it does any escaping you need automatically:']], [[' {\n    "node":\n    {\n        "list": "<ul><li class=\'lists\'>Hello World</li><ul>"\n    }\n}\n']], ['HTML tags within JSON (in Python)'], 2], [(963448, 1), [['However, with  simplejson , which is built into Python 2.6 as the  json module , it does any escaping you need automatically:'], ['-10000']], [[' >>> import simplejson\n>>> simplejson.dumps({\'node\': {\'list\': \'<ul><li class="lists">Hello World</li><ul>\'}})\n\'{"node": {"list": "<ul><li class=\\\\"lists\\\\">Hello World</li><ul>"}}\'\n']], ['HTML tags within JSON (in Python)'], 2], [(963800, 0), [['You can add whatever you want to a zip file using  ZipFile.writestr() :'], ['You can also use sub-folders using  /  (or  os.sep ) as a separator:']], [[' my_data = "<html><body><p>Hello, world!</p></body></html>"\nz.writestr("hello.html", my_data)\n']], ['Zipping dynamic files in App Engine (Python)'], 2], [(963800, 1), [['You can also use sub-folders using  /  (or  os.sep ) as a separator:'], ['-10000']], [[' z.writestr("site/foo/hello/index.html", my_data)\n']], ['Zipping dynamic files in App Engine (Python)'], 2], [(963965, 0), [['The example in Python is not so different of the others. To mock the PHP script:'], ['Output:']], [[' class StrategyExample:\n    def __init__(self, func=None):\n        if func:\n             self.execute = func\n\n    def execute(self):\n        print("Original execution")\n\ndef executeReplacement1():\n    print("Strategy 1")\n\ndef executeReplacement2():\n    print("Strategy 2")\n\nif __name__ == "__main__":\n    strat0 = StrategyExample()\n    strat1 = StrategyExample(executeReplacement1)\n    strat2 = StrategyExample(executeReplacement2)\n\n    strat0.execute()\n    strat1.execute()\n    strat2.execute()\n']], ['How to write Strategy Pattern in Python differently than example in Wikipedia?'], 6], [(963965, 1), [['Output:'], ['If you need to use a reference to the current instance in the function, then you would combine the first and the last method. If you do not:']], [[' Original execution\nStrategy 1\nStrategy 2\n']], ['How to write Strategy Pattern in Python differently than example in Wikipedia?'], 6], [(963965, 2), [['If you need to use a reference to the current instance in the function, then you would combine the first and the last method. If you do not:'], ['You will get:']], [[' class StrategyExample:\n    def __init__(self, func=None):\n        self.name = "Strategy Example 0"\n        if func:\n             self.execute = func\n\n    def execute(self):\n        print(self.name)\n\ndef executeReplacement1():\n    print(self.name + " from execute 1")\n\ndef executeReplacement2():\n    print(self.name + " from execute 2")\n\nif __name__ == "__main__":\n    strat0 = StrategyExample()\n    strat1 = StrategyExample(executeReplacement1)\n    strat1.name = "Strategy Example 1"\n    strat2 = StrategyExample(executeReplacement2)\n    strat2.name = "Strategy Example 2"\n\n    strat0.execute()\n    strat1.execute()\n    strat2.execute()\n']], ['How to write Strategy Pattern in Python differently than example in Wikipedia?'], 6], [(963965, 3), [['You will get:'], ['So the proper code would be:']], [[' Traceback (most recent call last):\n  File "test.py", line 28, in <module>\n    strat1.execute()\n  File "test.py", line 13, in executeReplacement1\n    print self.name + " from execute 1"\nNameError: global name \'self\' is not defined\n']], ['How to write Strategy Pattern in Python differently than example in Wikipedia?'], 6], [(963965, 4), [['So the proper code would be:'], ['This will output the expected result:']], [[' import sys\nimport types\n\nif sys.version_info[0] > 2:  # Python 3+\n    create_bound_method = types.MethodType\nelse:\n    def create_bound_method(func, obj):\n        return types.MethodType(func, obj, obj.__class__)\n\nclass StrategyExample:\n    def __init__(self, func=None):\n        self.name = "Strategy Example 0"\n        if func:\n             self.execute = create_bound_method(func, self)\n\n    def execute(self):\n        print(self.name)\n\ndef executeReplacement1(self):\n    print(self.name + " from execute 1")\n\ndef executeReplacement2(self):\n    print(self.name + " from execute 2")\n\nif __name__ == "__main__":\n    strat0 = StrategyExample()\n    strat1 = StrategyExample(executeReplacement1)\n    strat1.name = "Strategy Example 1"\n    strat2 = StrategyExample(executeReplacement2)\n    strat2.name = "Strategy Example 2"\n\n    strat0.execute()\n    strat1.execute()\n    strat2.execute()\n']], ['How to write Strategy Pattern in Python differently than example in Wikipedia?'], 6], [(963965, 5), [['This will output the expected result:'], ['Of course, in the case the functions cannot be used stand alone anymore, but can still be bound to any other instance of any object, without any interface limitation.']], [[' Strategy Example 0\nStrategy Example 1 from execute 1\nStrategy Example 2 from execute 2\n']], ['How to write Strategy Pattern in Python differently than example in Wikipedia?'], 6], [(964123, 0), [['You can create a wrapper wsgi script and run it in a debugger. For example:'], ['You would run this script in the debugger, and you can use lighttpd as a frontend for the web application with a trivial config like this one:']], [[' import os\nimport trac.web.main\n\nos.environ[\'TRAC_ENV\'] = \'/path/to/your/trac/env\'\n\napplication = trac.web.main.dispatch_request\n\nfrom flup.server.fcgi import WSGIServer\nserver = WSGIServer(application, bindAddress=("127.0.0.1", 9000), )\nserver.run()\n']], ['How should I debug Trac plugins?'], 2], [(964123, 1), [['You would run this script in the debugger, and you can use lighttpd as a frontend for the web application with a trivial config like this one:'], ['Just run the fcgi wsgi wrapper in the debugger, set the breakpoints in your plugin, and open the web page.']], [[' server.document-root = "/path/to/your/trac/env"\nserver.port = 1234\nserver.modules = ( "mod_fastcgi" )\nserver.pid-file = "/path/to/your/trac/env/httpd.pid"\nserver.errorlog = "/path/to/your/trac/env/error.log"\nfastcgi.server = ( "/" =>\n  (( "host" => "127.0.0.1",\n     "port" => 9000,\n     "docroot" => "/",\n     "check-local" => "disable",\n  ))\n)\n']], ['How should I debug Trac plugins?'], 2], [(969074, 0), [["Why can't you compute the rank in the template?"], ['Or, you can compute the rank in the view function.']], [[' {% for row in results_to_display %}\n    <tr><td>{{forloop.counter}}</td><td>{{row.scorea}}</td>...\n{% endfor %}\n']], ['fetching row numbers in a database-independent way - django'], 3], [(969074, 1), [['Or, you can compute the rank in the view function.'], ['Or, you can compute the ranking in the model.']], [[" def fetch_ranked_scores( request ):\n    query = Score.objects.filter( ... ).orderby( scorea )\n    scores = [ r, s.scorea for r, s in enumerate(query) ]\n    return render_to_response ( template, { 'results_to_display':scores } )\n"]], ['fetching row numbers in a database-independent way - django'], 3], [(969074, 2), [['Or, you can compute the ranking in the model.'], ['I think there are many, many ways to do this.']], [['  class Score( models.Model ):\n     ScoreA = models.IntegerField( ... )\n     def ranked_by_a( self ):\n         return enumerate( self.objects.filter(...).orderby( scorea ) )\n']], ['fetching row numbers in a database-independent way - django'], 3], [(969093, 0), [['The  pydoc -k  flag searches the documentation.'], ['From a terminal, run..']], [[' pydoc -k <keyword>\n    Search for a keyword in the synopsis lines of all available modules.\n']], ['How to search help using python console'], 3], [(969093, 1), [['From a terminal, run..'], ['..for example:']], [[' $ pydoc -k pdf\n']], ['How to search help using python console'], 3], [(969093, 2), [['..for example:'], ['It doesn\'t search the contents of the documentation, but it searches all module names - if that\'s not enough, I\'d suggest using Google or StackOverflow to search for "Python PDF module" or similar']], [[' $ pydoc -k pdf\nPdfImagePlugin \nwx.lib.pdfwin \nPIL.PdfImagePlugin\n']], ['How to search help using python console'], 3], [(970983, 0), [["Basically you only know you've run out  after  you've run out. So you could wrap the  reader  iterator, e.g. as follows:"], ['and change your code to:']], [[' def isLast(itr):\n  old = itr.next()\n  for new in itr:\n    yield False, old\n    old = new\n  yield True, old\n']], ['Have csv.reader tell when it is on the last line'], 2], [(970983, 1), [['and change your code to:'], ['etc.']], [[' for line_num, (is_last, row) in enumerate(isLast(reader)):\n    if not is_last: assert len(row) == len(header)\n']], ['Have csv.reader tell when it is on the last line'], 2], [(973106, 0), [['One way is to test for the presence of command line arguments.  Given this  foo.clj  in the current directory:'], ["You'll get different behavior depending how you start Clojure."]], [[' (ns foo)\n\n(defn hello [x] (println "Hello," x))\n\n(if *command-line-args*\n  (hello "command line")\n  (hello "REPL"))\n']], ['What is the clojure equivalent of the Python idiom "if __name__ == \'__main__\'"?'], 5], [(973106, 1), [["You'll get different behavior depending how you start Clojure."], ['Another way is to compile your code into  .class  files and invoke them from the Java command line.  Given a source file  foo.clj :']], [[" $ java -cp ~/path/to/clojure.jar:. clojure.main foo.clj --\nHello, command line\n$ java -cp ~/path/to/clojure.jar:. clojure.main\nClojure 1.1.0-alpha-SNAPSHOT\nuser=> (use 'foo)\nHello, REPL\nnil\nuser=>\n"]], ['What is the clojure equivalent of the Python idiom "if __name__ == \'__main__\'"?'], 5], [(973106, 2), [['Another way is to compile your code into  .class  files and invoke them from the Java command line.  Given a source file  foo.clj :'], ["Make a directory to store the compiled  .class  files; this defaults to  ./classes .  You must make this folder yourself, Clojure won't create it.  Also make sure you set  $CLASSPATH  to include  ./classes  and the directory with your source code; I'll assume  foo.clj  is in the current directory.  So from the command line:"]], [[' (ns foo\n  (:gen-class))\n\n(defn hello [x] (println "Hello," x))\n\n(defn -main [] (hello "command line"))\n']], ['What is the clojure equivalent of the Python idiom "if __name__ == \'__main__\'"?'], 5], [(973106, 3), [["Make a directory to store the compiled  .class  files; this defaults to  ./classes .  You must make this folder yourself, Clojure won't create it.  Also make sure you set  $CLASSPATH  to include  ./classes  and the directory with your source code; I'll assume  foo.clj  is in the current directory.  So from the command line:"], ['In the  classes  directory you will now have a bunch of  .class  files.  To invoke your code from the command line (running the  -main  function by default):']], [[" $ mkdir classes\n$ java -cp ~/path/to/clojure.jar:./classes:. clojure.main\nClojure 1.1.0-alpha-SNAPSHOT\nuser=> (compile 'foo)\nfoo\n"]], ['What is the clojure equivalent of the Python idiom "if __name__ == \'__main__\'"?'], 5], [(973106, 4), [['In the  classes  directory you will now have a bunch of  .class  files.  To invoke your code from the command line (running the  -main  function by default):'], ["There's a lot of information about compiling Clojure code on  clojure.org ."]], [[' $ java -cp ~/path/to/clojure.jar:./classes foo\nHello, command line.\n']], ['What is the clojure equivalent of the Python idiom "if __name__ == \'__main__\'"?'], 5], [(973231, 0), [['You could leverage  doctest  to help you get this done. Write a method that executes each script, and in the docstring for each method you paste the expected output:'], ['Alternatively, as Shane mentioned, you could use subprocess. Something like this will work:']], [[' def run_example1():\n    """\n    This is example number 1. Running it should give you the following output:\n\n    >>> run_example1()\n    "This is the output from example1.py"\n    """\n\n    os.system(\'python example1.py\') # or you could use subprocess here\n\nif __name__ == "__main__":\n    import doctest\n    doctest.testmod()\n']], ['Running a set of Python scripts in a list'], 2], [(973231, 1), [['Alternatively, as Shane mentioned, you could use subprocess. Something like this will work:'], ['-10000']], [[' import subprocess\n\ncmd = (\'example1.py\', \'any\', \'more\', \'arguments\')\n\nexpected_out = """Your expected output of the script"""\n\nexampleP = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\nout, err = exampleP.communicate() # out and err are stdout and stderr, respectively\n\nif out != expected_out:\n    print "Output does not match"\n']], ['Running a set of Python scripts in a list'], 2], [(973473, 0), [['Either way, you could use  os.walk  to do this:'], ['will yield a tuple for each subdirectory. Ths first entry in the 3-tuple is a directory name, so']], [[' os.walk(directory)\n']], ['Getting a list of all subdirectories in the current directory'], 3], [(973473, 1), [['will yield a tuple for each subdirectory. Ths first entry in the 3-tuple is a directory name, so'], ['However, you could use it just to give you the immediate child directories:']], [[' [x[0] for x in os.walk(directory)]\n']], ['Getting a list of all subdirectories in the current directory'], 3], [(973473, 2), [['However, you could use it just to give you the immediate child directories:'], ['Or see the other solutions already posted, using  os.listdir  and  os.path.isdir , including those at " How to get all of the immediate subdirectories in Python ".']], [[" next(os.walk('.'))[1]\n"]], ['Getting a list of all subdirectories in the current directory'], 3], [(973481, 0), [["Setup your environment (I'm using the SQLite in-memory db to test):"], ['Define your table:']], [[" >>> from sqlalchemy import create_engine\n>>> engine = create_engine('sqlite:///:memory:', echo=True)\n>>> from sqlalchemy import Table, Column, Integer, String, MetaData\n>>> metadata = MetaData()\n"]], ['Dynamic Table Creation and ORM mapping in SqlAlchemy'], 5], [(973481, 1), [['Define your table:'], ['Define your class:']], [[" >>> players_table = Table('players', metadata,\n...   Column('id', Integer, primary_key=True),\n...   Column('name', String),\n...   Column('score', Integer)\n... )\n>>> metadata.create_all(engine) # create the table\n"]], ['Dynamic Table Creation and ORM mapping in SqlAlchemy'], 5], [(973481, 2), [['Define your class:'], ['Map the class to your table:']], [[' >>> class Player(object):\n...     def __init__(self, name, score):\n...         self.name = name\n...         self.score = score\n...\n...     def __repr__(self):\n...        return "<Player(\'%s\',\'%s\')>" % (self.name, self.score)\n']], ['Dynamic Table Creation and ORM mapping in SqlAlchemy'], 5], [(973481, 3), [['Map the class to your table:'], ['Create a player:']], [[' >>> from sqlalchemy.orm import mapper\n>>> mapper(Player, players_table) \n<Mapper at 0x...; Player>\n']], ['Dynamic Table Creation and ORM mapping in SqlAlchemy'], 5], [(973481, 4), [['Create a player:'], ["That's it, you now have a your player table.   \nAlso, the SqlAlchemy googlegroup is great.   \nMike Bayer is very quick to answer questions."]], [[" >>> a_player = Player('monty', 0)\n>>> a_player.name\n'monty'\n>>> a_player.score\n0\n"]], ['Dynamic Table Creation and ORM mapping in SqlAlchemy'], 5], [(974071, 0), [['PyAudiere  is a simple cross-platform solution for the problem:'], ['To support both Python 2 and 3 on Linux, Windows, OSX,  pyaudio  module  could be used instead:']], [[' >>> import audiere\n>>> d = audiere.open_device()\n>>> t = d.create_tone(17000) # 17 KHz\n>>> t.play() # non-blocking call\n>>> import time\n>>> time.sleep(5)\n>>> t.stop()\n']], ['Python library for playing fixed-frequency sound'], 3], [(974071, 1), [['To support both Python 2 and 3 on Linux, Windows, OSX,  pyaudio  module  could be used instead:'], ['Example:']], [[' #!/usr/bin/env python\n"""Play a fixed frequency sound."""\nfrom __future__ import division\nimport math\n\nfrom pyaudio import PyAudio # sudo apt-get install python{,3}-pyaudio\n\ntry:\n    from itertools import izip\nexcept ImportError: # Python 3\n    izip = zip\n    xrange = range\n\ndef sine_tone(frequency, duration, volume=1, sample_rate=22050):\n    n_samples = int(sample_rate * duration)\n    restframes = n_samples % sample_rate\n\n    p = PyAudio()\n    stream = p.open(format=p.get_format_from_width(1), # 8bit\n                    channels=1, # mono\n                    rate=sample_rate,\n                    output=True)\n    s = lambda t: volume * math.sin(2 * math.pi * frequency * t / sample_rate)\n    samples = (int(s(t) * 0x7f + 0x80) for t in xrange(n_samples))\n    for buf in izip(*[samples]*sample_rate): # write several samples at a time\n        stream.write(bytes(bytearray(buf)))\n\n    # fill remainder of frameset with silence\n    stream.write(b\'\\x80\' * restframes)\n\n    stream.stop_stream()\n    stream.close()\n    p.terminate()\n']], ['Python library for playing fixed-frequency sound'], 3], [(974071, 2), [['Example:'], ['It is a modified (to support Python 3) version of  this AskUbuntu answer .']], [[' sine_tone(\n    # see http://www.phy.mtu.edu/~suits/notefreqs.html\n    frequency=440.00, # Hz, waves per second A4\n    duration=3.21, # seconds to play sound\n    volume=.01, # 0..1 how loud it is\n    # see http://en.wikipedia.org/wiki/Bit_rate#Audio\n    sample_rate=22050 # number of samples per second\n)\n']], ['Python library for playing fixed-frequency sound'], 3], [(974678, 0), [['If all dicts have all keys, you could do this as:'], ['[Edit]  If speed is a big priority, you can also shave off ~20% (though at the cost of some readability) with the following instead:']], [[" >>> dict((key, sum(d[key] for d in dictList)) for key in dictList[0])\n{'a': 22, 'b': 56, 'c': 191}\n"]], ['How to create single Python dict from a list of dicts by summing values with common keys?'], 3], [(974678, 1), [['[Edit]  If speed is a big priority, you can also shave off ~20% (though at the cost of some readability) with the following instead:'], ['The speed depends on the size of the dict.  I get the following timings for the original 3 item list, and for various different sizes (created by mutliplying the original list by 10, 100 or 1000 etc):']], [[' import operator, itertools\ndict((key, sum(itertools.imap(operator.itemgetter(key), dictList))) \n      for key in dictList[0])\n']], ['How to create single Python dict from a list of dicts by summing values with common keys?'], 3], [(974678, 2), [['The speed depends on the size of the dict.  I get the following timings for the original 3 item list, and for various different sizes (created by mutliplying the original list by 10, 100 or 1000 etc):'], ['(All times for 10,000 runs)']], [[' List Size   Original      dict+generator       imap+itemgetter\n      3      0.054          0.090                0.097\n     30      0.473          0.255                0.236\n    300      4.668          1.884                1.529\n   3000     46.668         17.975               14.499\n']], ['How to create single Python dict from a list of dicts by summing values with common keys?'], 3], [(974952, 0), [['Just create a string out of it.'], ["That's enough. Now you can iterate over it:"]], [[' myinteger = 212345\nnumber_string = str(myinteger)\n']], ['Split an integer into digits to compute an ISBN checksum'], 4], [(974952, 1), [["That's enough. Now you can iterate over it:"], ['Or you can slice it:']], [[' for ch in number_string:\n    print ch # will print each digit in order\n']], ['Split an integer into digits to compute an ISBN checksum'], 4], [(974952, 2), [['Or you can slice it:'], ["Or better, don't convert the user's input to an integer (the user types a string)"]], [[' print number_string[:2] # first two digits\nprint number_string[-3:] # last three digits\nprint number_string[3] # forth digit\n']], ['Split an integer into digits to compute an ISBN checksum'], 4], [(974952, 3), [["Or better, don't convert the user's input to an integer (the user types a string)"], ['For more information read a  tutorial .']], [[' isbn = raw_input()\nfor pos, ch in enumerate(reversed(isbn)):\n    print "%d * %d is %d" % pos + 2, int(ch), int(ch) * (pos + 2)\n']], ['Split an integer into digits to compute an ISBN checksum'], 4], [(976324, 0), [['For Paradox 5.x, using Microsoft Jet OLEDB 4.0 driver:'], ["For Paradox 5.x, using Microsoft's Paradox ODBC Driver:"]], [[' r"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=c:\\myDb;\nExtended Properties=Paradox 5.x;"\n']], ['Can Python adodbapi be used to connect to a paradox db?'], 3], [(976324, 1), [["For Paradox 5.x, using Microsoft's Paradox ODBC Driver:"], ["For Paradox 7.x, using Microsoft's Paradox ODBC Driver:"]], [[' r"Driver={Microsoft Paradox Driver (*.db )};DriverID=538;Fil=Paradox 5.X;\nDefaultDir=c:\\pathToDb\\;Dbq=c:\\pathToDb\\;CollatingSequence=ASCII;"\n']], ['Can Python adodbapi be used to connect to a paradox db?'], 3], [(976324, 2), [["For Paradox 7.x, using Microsoft's Paradox ODBC Driver:"], ["Since you're probably going to use the ODBC driver anyway I strongly suggest you use  pyodbc  instead. It seems better supported than adodbapi and is also cross-platform."]], [[' r"Provider=MSDASQL;Persist Security Info=False;Mode=Read;\nExtended Properties=\'DSN=Paradox;DBQ=C:\\myDb;DefaultDir=C:\\myDb;DriverId=538;\nFIL=Paradox 7.X;MaxBufferSize=2048;PageTimeout=600;\';Initial Catalog=C:\\myDb;"\n']], ['Can Python adodbapi be used to connect to a paradox db?'], 3], [(976395, 0), [['When you make the button'], ['When the button is clicked:']], [[' b = wx.Button(self, 10, "Default Button", (20, 20))\nb.myname = "default button"\nself.Bind(wx.EVT_BUTTON, self.OnClick, b)\n']], ['Best way to get the name of a button that called an event?'], 2], [(976395, 1), [['When the button is clicked:'], ['-10000']], [[' def OnClick(self, event):\n    name = event.GetEventObject().myname\n']], ['Best way to get the name of a button that called an event?'], 2], [(980249, 0), [["When you access an object's attribute using the dot operator, python does a lot more than just looking up the attribute in that objects dictionary. A common case is when  x  is an object of class  C  and you call a method  m  on it."], ["So the difference between  vars(x)  and  dir(x)  is that  dir(x)  does the extra work of looking in  x 's class (and its bases) for attributes that are accessible from it, not just those attributes that are stored in  x 's own symbol table. In the above example,  vars(x)  returns an empty dictionary, because  x  has no instance variables. However,  dir(x)  returns"]], [[' class C(object):\n    def m(self):\n        print "m"\n\nx = C()\nx.m()\n']], ['Difference between dir(…) and vars(…).keys() in Python?'], 2], [(980249, 1), [["So the difference between  vars(x)  and  dir(x)  is that  dir(x)  does the extra work of looking in  x 's class (and its bases) for attributes that are accessible from it, not just those attributes that are stored in  x 's own symbol table. In the above example,  vars(x)  returns an empty dictionary, because  x  has no instance variables. However,  dir(x)  returns"], ['-10000']], [[" ['__class__', '__delattr__', '__dict__', '__doc__', '__getattribute__',\n'__hash__', '__init__', '__module__', '__new__', '__reduce__',\n'__reduce_ex__', '__repr__', '__setattr__', '__str__', '__weakref__', 'm']\n"]], ['Difference between dir(…) and vars(…).keys() in Python?'], 2], [(981291, 0), [['In the sending code:'], ['To recieve']], [[" conn.send(str(i), exchange=exchange, destination='')\n"]], ['Stomp Broadcast with Rabbitmq and Python'], 2], [(981291, 1), [['To recieve'], ['-10000']], [[' import stomp\nimport sys\nfrom amqplib import client_0_8 as amqp\n#read in the exchange name so I can set up multiple recievers for different exchanges to tset\nexchange = sys.argv[1]\nconn = amqp.Connection(host="localhost:5672", userid="username", password="password",\n virtual_host="/", insist=False)\n\nchan = conn.channel()\n\nchan.access_request(\'/\', active=True, write=True, read=True)\n\n#declare my exchange\nchan.exchange_declare(exchange, \'topic\')\n#not passing a queue name means I get a new unique one back\nqname,_,_ = chan.queue_declare()\n#bind the queue to the exchange\nchan.queue_bind(qname, exchange=exchange)\n\nclass MyListener(object):\n    def on_error(self, headers, message):\n        print \'recieved an error %s\' % message\n\n    def on_message(self, headers, message):\n        print \'recieved a message %s\' % message\n\nconn = stomp.Connection([(\'0.0.0.0\', 61613), (\'127.0.0.1\', 61613)], \'browser\', \'browser\')\nconn.set_listener(\'\', MyListener())\nconn.start()\nconn.connect(username="username", password="password")\nheaders = {}\n\n#subscribe to the queue\nconn.subscribe(destination=qname, ack=\'auto\')\n\nwhile True:\n    pass\nconn.disconnect()\n']], ['Stomp Broadcast with Rabbitmq and Python'], 2], [(981348, 0), [['Naturally this has some implications, you would probably have to let your PHP script run for a while longer since the process may be running slow.'], ['Integrated into your code:']], [[' # The pipe behaves like a file object in Python.\nprocess = Popen(cmd, shell=True, stdout=PIPE)\nprocess_output = ""\nwhile process.poll():\n     process_output += process.stdout.read(256)\ns.write(process_output)\n\n# Better yet.\nprocess = Popen(cmd, shell=true, stdout=PIPE)\nstdout, stderr = process.communicate() # will read and wait for process to end.\ns.write(stdout)\n']], ['Send output from a python server back to client'], 2], [(981348, 1), [['Integrated into your code:'], ['-10000']], [[' # ... snip ...\nimport subprocess\ncon, addr = s.accept()\nwhile True:\n    datagram = con.recv(1024)\n    if not datagram:\n        break\n    print "Rx Cmd:", datagram\n    if settings.has_key(datagram):\n        print "Launch:", settings[datagram]\n        process = subprocess.Popen(settings[datagram]+" &", shell=True, stdout=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        con.send(stdout)\n    con.close()\ns.close()\n']], ['Send output from a python server back to client'], 2], [(981375, 0), [['You can either use the separate fields to order:'], ['or do the ordering in Python:']], [[" Author.objects.order_by('first_name', 'last_name')\n"]], ['Using a Django custom model method property in order_by()'], 2], [(981375, 1), [['or do the ordering in Python:'], ['-10000']], [[' sorted(Author.objects.all(), key=lambda a: a.full_name)\n']], ['Using a Django custom model method property in order_by()'], 2], [(984014, 0), [["I don't think you're breaking any rule, but"], ["Edit: per comments, this isn't quite right -- @Miles gave the right variant (thanks!):"]], [[" sys.stdout = codecs.EncodedFile(sys.stdout, 'utf8')\n"]], ['Python 3, is using sys.stdout.buffer.write() good style?'], 2], [(984014, 1), [["Edit: per comments, this isn't quite right -- @Miles gave the right variant (thanks!):"], ["Edit: if you can arrange for environment variable  PYTHONIOENCODING  to be set to utf8 when Apache starts your script, that would be even better, making  sys.stdout  be set to  utf8  automatically; but if that's unfeasible or impractical the  codecs  solution stands."]], [[" sys.stdout = codecs.getwriter('utf8')(sys.stdout.buffer) \n"]], ['Python 3, is using sys.stdout.buffer.write() good style?'], 2], [(985294, 0), [['Right:'], ["There's a number of fundamental problems with this.  It's impossible to come up with an object-to-string transformation that maps equality correctly—think of the problem of object identity:"]], [[' >>> pickle.dumps({1: 0, 9: 0}) == pickle.dumps({9: 0, 1: 0})\nFalse\n']], ['Is the pickling process deterministic?'], 3], [(985294, 1), [["There's a number of fundamental problems with this.  It's impossible to come up with an object-to-string transformation that maps equality correctly—think of the problem of object identity:"], ['Depending on your exact requirements, you may be able to transform object hierarchies into ones that you could then hash:']], [[' >>> a = object()\n>>> b = object()\n>>> a == b\nFalse\n>>> pickle.dumps(b) == pickle.dumps(a)\nTrue\n']], ['Is the pickling process deterministic?'], 3], [(985294, 2), [['Depending on your exact requirements, you may be able to transform object hierarchies into ones that you could then hash:'], ['-10000']], [[' def hashablize(obj):\n    """Convert a container hierarchy into one that can be hashed.\n\n    Don\'t use this with recursive structures!\n    Also, this won\'t be useful if you pass dictionaries with\n    keys that don\'t have a total order.\n    Actually, maybe you\'re best off not using this function at all."""\n    try:\n        hash(obj)\n    except TypeError:\n        if isinstance(obj, dict):\n            return tuple((k, hashablize(v)) for (k, v) in sorted(obj.iteritems()))\n        elif hasattr(obj, \'__iter__\'):\n            return tuple(hashablize(o) for o in obj)\n        else:\n            raise TypeError("Can\'t hashablize object of type %r" % type(obj))\n    else:\n        return obj\n']], ['Is the pickling process deterministic?'], 3], [(988155, 0), [['Here ya go:'], ["Incidentally, item IS a reference to the  item  in  a , but of course you can't assign a new value to an integer. For any mutable type, your code would work just fine:"]], [[' # Your for loop should be rewritten as follows:\nfor index in xrange(len(a)):\n    a[index] += 1\n']], ['How do I operate on the actual object, not a copy, in a python for loop?'], 2], [(988155, 1), [["Incidentally, item IS a reference to the  item  in  a , but of course you can't assign a new value to an integer. For any mutable type, your code would work just fine:"], ['-10000']], [[' >>> a = [[1], [2], [3], [4]]\n>>> for item in a: item += [1]\n>>> a\n[[1,1], [2,1], [3,1], [4,1]]\n']], ['How do I operate on the actual object, not a copy, in a python for loop?'], 2], [(988228, 0), [['Starting in Python 2.6 you can use the built-in  ast.literal_eval :'], ['This is safer than using  eval .  As its own docs say:']], [[' >>> import ast\n>>> ast.literal_eval("{\'muffin\' : \'lolz\', \'foo\' : \'kitty\'}")\n{\'muffin\': \'lolz\', \'foo\': \'kitty\'}\n']], ['Convert a String representation of a Dictionary to a dictionary?'], 2], [(988228, 1), [['This is safer than using  eval .  As its own docs say:'], ['-10000']], [[' >>> eval("shutil.rmtree(\'mongo\')")\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "<string>", line 1, in <module>\n  File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 208, in rmtree\n    onerror(os.listdir, path, sys.exc_info())\n  File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 206, in rmtree\n    names = os.listdir(path)\nOSError: [Errno 2] No such file or directory: \'mongo\'\n>>> ast.literal_eval("shutil.rmtree(\'mongo\')")\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 68, in literal_eval\n    return _convert(node_or_string)\n  File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 67, in _convert\n    raise ValueError(\'malformed string\')\nValueError: malformed string\n']], ['Convert a String representation of a Dictionary to a dictionary?'], 2], [(989872, 0), [['The whole program...'], ["And here's a test run."]], [[' from urllib2 import urlopen\nfrom BeautifulSoup import BeautifulSoup\nimport sys\n\nURL = "http://hiscore.runescape.com/hiscorepersonal.ws?user1=" + sys.argv[1]\n\n# Grab page html, create BeatifulSoup object\nhtml = urlopen(URL).read()\nsoup = BeautifulSoup(html)\n\n# Grab the <table id="mini_player"> element\nscores = soup.find(\'table\', {\'id\':\'mini_player\'})\n\n# Get a list of all the <tr>s in the table, skip the header row\nrows = scores.findAll(\'tr\')[1:]\n\n# Helper function to return concatenation of all character data in an element\ndef parse_string(el):\n   text = \'\'.join(el.findAll(text=True))\n   return text.strip()\n\nfor row in rows:\n\n   # Get all the text from the <td>s\n   data = map(parse_string, row.findAll(\'td\'))\n\n   # Skip the first td, which is an image\n   data = data[1:]\n\n   # Do something with the data...\n   print data\n']], ['How do I draw out specific data from an opened url in Python using urllib2?'], 2], [(989872, 1), [["And here's a test run."], ['Voila :)']], [[" > test.py bigdrizzle13\n[u'Overall', u'87,417', u'1,784', u'78,772,017']\n[u'Attack', u'140,903', u'88', u'4,509,031']\n[u'Defence', u'123,057', u'85', u'3,449,751']\n[u'Strength', u'325,883', u'84', u'3,057,628']\n[u'Hitpoints', u'245,982', u'85', u'3,571,420']\n[u'Ranged', u'583,645', u'71', u'856,428']\n[u'Prayer', u'227,853', u'62', u'357,847']\n[u'Magic', u'368,201', u'75', u'1,264,042']\n[u'Cooking', u'34,754', u'99', u'13,192,745']\n[u'Woodcutting', u'50,080', u'93', u'7,751,265']\n[u'Fletching', u'53,269', u'99', u'13,051,939']\n[u'Fishing', u'5,195', u'99', u'14,512,569']\n[u'Firemaking', u'46,398', u'88', u'4,677,933']\n[u'Crafting', u'328,268', u'62', u'343,143']\n[u'Smithing', u'39,898', u'77', u'1,561,493']\n[u'Mining', u'31,584', u'85', u'3,331,051']\n[u'Herblore', u'247,149', u'52', u'135,215']\n[u'Agility', u'225,869', u'60', u'276,753']\n[u'Thieving', u'292,638', u'56', u'193,037']\n[u'Slayer', u'113,245', u'73', u'998,607']\n[u'Farming', u'204,608', u'51', u'115,507']\n[u'Runecraft', u'38,369', u'71', u'880,789']\n[u'Hunter', u'384,920', u'53', u'139,030']\n[u'Construction', u'232,379', u'52', u'125,708']\n[u'Summoning', u'87,236', u'64', u'419,086']\n"]], ['How do I draw out specific data from an opened url in Python using urllib2?'], 2], [(990169, 0), [["Assuming Python sees the name as a normal string, you'll first have to decode it to unicode:"], ['Another way of achieving this:']], [[" >>> name\n'Christensen Sk\\xf6ld'\n>>> unicode(name, 'latin-1')\nu'Christensen Sk\\xf6ld'\n"]], ['How do convert unicode escape sequences to unicode characters in a python string'], 4], [(990169, 1), [['Another way of achieving this:'], ['Note the "u" in front of the string, signalling it is uncode. If you print this, the accented letter is shown properly:']], [[" >>> name.decode('latin-1')\nu'Christensen Sk\\xf6ld'\n"]], ['How do convert unicode escape sequences to unicode characters in a python string'], 4], [(990169, 2), [['Note the "u" in front of the string, signalling it is uncode. If you print this, the accented letter is shown properly:'], ['BTW: when necessary, you can use de "encode" method to turn the unicode into e.g. a UTF-8 string:']], [[" >>> print name.decode('latin-1')\nChristensen Sköld\n"]], ['How do convert unicode escape sequences to unicode characters in a python string'], 4], [(990169, 3), [['BTW: when necessary, you can use de "encode" method to turn the unicode into e.g. a UTF-8 string:'], ['-10000']], [[" >>> name.decode('latin-1').encode('utf-8')\n'Christensen Sk\\xc3\\xb6ld'\n"]], ['How do convert unicode escape sequences to unicode characters in a python string'], 4], [(990934, 0), [['You can use the slicing operator to reverse a string:'], ['To convert an integer to a string, reverse it, and convert it back to an integer, you can do:']], [[' s = "hello, world"\ns = s[::-1]\nprint s  # prints "dlrow ,olleh"\n']], ['String reversal in Python'], 2], [(990934, 1), [['To convert an integer to a string, reverse it, and convert it back to an integer, you can do:'], ['-10000']], [[' x = 314159\nx = int(str(x)[::-1])\nprint x  # prints 951413\n']], ['String reversal in Python'], 2], [(991350, 0), [['My first idea was to do this:'], ["This is not a good idea, however!  This is going to scan the string 26 times, so you're going to potentially do 26 times more work than some of the other answers.  You really should do this:"]], [[' chars = "abcdefghijklmnopqrstuvwxyz"\ncheck_string = "i am checking this string to see how many times each character appears"\n\nfor char in chars:\n  count = check_string.count(char)\n  if count > 1:\n    print char, count\n']], ['Counting repeated characters in a string in Python'], 2], [(991350, 1), [["This is not a good idea, however!  This is going to scan the string 26 times, so you're going to potentially do 26 times more work than some of the other answers.  You really should do this:"], ['This ensures that you only go through the string once, instead of 26 times.  ']], [[' count = {}\nfor s in check_string:\n  if count.has_key(s):\n    count[s] += 1\n  else:\n    count[s] = 1\n\nfor key in count:\n  if count[key] > 1:\n    print key, count[key]\n']], ['Counting repeated characters in a string in Python'], 2], [(991784, 0), [['The result depends on whether line 13:'], ['hits the same index as one of lines 11 or 12:']], [[' sub[random.randint(0,9)] = 1\n']], ['Very simple Python script, puzzling behaviour'], 2], [(991784, 1), [['hits the same index as one of lines 11 or 12:'], ["You protect  second  from being the same as  first , but you don't protect that third entry from being the same as one of  first  or  second ."]], [[' sub[first] = 1\nsub[second] = 1\n']], ['Very simple Python script, puzzling behaviour'], 2], [(991864, 0), [['You can create your document with a doctype to begin with:'], ['prints:']], [[' # Adapted from example on http://codespeak.net/lxml/tutorial.html\nimport lxml.etree as et\nimport StringIO\ns = """<?xml version="1.0" encoding="utf-8"?>\n<!DOCTYPE root SYSTEM "test" [ <!ENTITY tasty "cheese"> \n<!ENTITY eacute "&#233;"> ]>\n<root>\n<a>&tasty; souffl&eacute;</a>\n</root>\n"""\ntree = et.parse(StringIO.StringIO(s))\nprint et.tostring(tree, xml_declaration=True, encoding="utf-8")\n']], ["Creating a doctype with lxml's etree"], 4], [(991864, 1), [['prints:'], ["If you want to add a doctype to some XML that wasn't created with one, you can first create one with the desired doctype (as above), then copy your doctype-less XML into it:"]], [[' <?xml version=\'1.0\' encoding=\'utf-8\'?>\n<!DOCTYPE root SYSTEM "test" [\n<!ENTITY tasty "cheese">\n<!ENTITY eacute "&#233;">\n]>\n<root>\n<a>cheese soufflé</a>\n</root>\n']], ["Creating a doctype with lxml's etree"], 4], [(991864, 2), [["If you want to add a doctype to some XML that wasn't created with one, you can first create one with the desired doctype (as above), then copy your doctype-less XML into it:"], ['prints:']], [[' xml = et.XML("<root><test/><a>whatever</a><end_test/></root>")\nroot = tree.getroot()\nroot[:] = xml\nroot.text, root.tail = xml.text, xml.tail\nprint et.tostring(tree, xml_declaration=True, encoding="utf-8")\n']], ["Creating a doctype with lxml's etree"], 4], [(991864, 3), [['prints:'], ["Is that what you're looking for?"]], [[' <?xml version=\'1.0\' encoding=\'utf-8\'?>\n<!DOCTYPE root SYSTEM "test" [\n<!ENTITY tasty "cheese">\n<!ENTITY eacute "&#233;">\n]>\n<root><test/><a>whatever</a><end_test/></root>\n']], ["Creating a doctype with lxml's etree"], 4], [(993274, 0), [['Because Python 2.x uses integer division for integers, so:'], ['You want to do:']], [[' 1/2 == 0\n']], ['Error while I use math.atan in Python!'], 3], [(993274, 1), [['You want to do:'], ['or do a']], [[' 1.0/2\n']], ['Error while I use math.atan in Python!'], 3], [(993274, 2), [['or do a'], ['-10000']], [[' from __future__ import division\n']], ['Error while I use math.atan in Python!'], 3], [(994460, 0), [['Template :'], ['Schema :']], [[" <tr>\n  <td>Yardage</td>\n  % for hole in range(9):\n  <td>${h.text('hole-%s.yardage'%(hole), maxlength=3, size=3)}</td>\n  % endfor\n</tr>\n"]], ['Pylons FormEncode with an array of form elements'], 3], [(994460, 1), [['Schema :'], ['Controller :']], [[" import formencode\n\nclass HoleSchema(formencode.Schema):\n    allow_extra_fields = False\n    yardage = formencode.validators.Int(not_empty=True)\n    par = formencode.validators.Int(not_empty=True)\n\nclass CourseForm(formencode.Schema):\n    allow_extra_fields = True\n    filter_extra_fields = True\n    name = formencode.validators.NotEmpty(messages={'empty': 'Name must not be empty'})\n    hole = formencode.ForEach(HoleSchema())\n"]], ['Pylons FormEncode with an array of form elements'], 3], [(994460, 2), [['Controller :'], ['Using the  @validate  decorator allows for a much cleaner way to validate and fill in the forms. The  variable_decode=True  is very important or the dictionary will not be properly created.']], [[" @validate(schema=CourseForm(), form='add', post_only=False, on_get=True, \n          auto_error_formatter=custom_formatter,\n          variable_decode=True)\ndef submit(self):\n    # Do whatever here.\n    return 'Submitted!'\n"]], ['Pylons FormEncode with an array of form elements'], 3], [(994732, 0), [["The first case seems more common than the second to me, but it's hard to tell from your question if this is better solved by a script that needs to parse arbitrary C or a script that needs to parse this specific file. For code that works on your specific case, the following works for me on your input:"], ["Here's the Perl code to read in the parse tree:"]], [[' #!/usr/bin/perl -w\n\nuse strict;\n\nopen FILE, "<header.h" or die $!;\nmy @file = <FILE>;\nclose FILE or die $!;\n\nmy $in_block = 0;\nmy $regex = \'Some_Idx\\[\\]\';\nmy $byte_line = \'\';\nmy @byte_entries;\nforeach my $line (@file) {\n    chomp $line;\n\n    if ( $line =~ /$regex.*\\{(.*)/ ) {\n        $in_block = 1;\n        my @digits = @{ match_digits($1) };\n        push @digits, @byte_entries;\n        next;\n    }\n\n    if ( $in_block ) {\n        my @digits = @{ match_digits($line) };\n        push @byte_entries, @digits;\n    }\n\n    if ( $line =~ /\\}/ ) {\n        $in_block = 0;\n    }\n}\n\nprint "const BYTE Some_Idx_Mod_mul_2[] = {\\n";\nprint join ",", map { $_ * 2 } @byte_entries;\nprint "};\\n";\n\nsub match_digits {\n    my $text = shift;\n    my @digits;\n    while ( $text =~ /(\\d+),*/g ) {\n        push @digits, $1;\n    }\n\n    return \\@digits;\n}\n']], ['How can I parse a C header file with Perl?'], 2], [(994732, 1), [["Here's the Perl code to read in the parse tree:"], ['-10000']], [['   use GCC::TranslationUnit;\n\n  # echo \'#include <stdio.h>\' > stdio.c\n  # gcc -fdump-translation-unit -c stdio.c\n  $node = GCC::TranslationUnit::Parser->parsefile(\'stdio.c.tu\')->root;\n\n  # list every function/variable name\n  while($node) {\n    if($node->isa(\'GCC::Node::function_decl\') or\n       $node->isa(\'GCC::Node::var_decl\')) {\n      printf "%s declared in %s\\n",\n        $node->name->identifier, $node->source;\n    }\n  } continue {\n    $node = $node->chain;\n  }\n']], ['How can I parse a C header file with Perl?'], 2], [(996183, 0), [['pyparsing  is pretty handy for quick and simple parsing like this.  A bare minimum would be something like:'], ['The use it as:']], [[' import pyparsing\nstring = pyparsing.CharsNotIn("{} \\t\\r\\n")\ngroup = pyparsing.Forward()\ngroup << pyparsing.Group(pyparsing.Literal("{").suppress() + \n                         pyparsing.ZeroOrMore(group) + \n                         pyparsing.Literal("}").suppress()) \n        | string\n\ntoplevel = pyparsing.OneOrMore(group)\n']], ['Parsing an existing config file'], 2], [(996183, 1), [['The use it as:'], ['From there you can get more sophisticated as you want (parse numbers seperately from strings, look for specific field names etc).  The above is pretty general, just looking for strings (defined as any non-whitespace character except "{" and "}") and {} delimited lists of strings.']], [[" >>> toplevel.parseString(text)\n['protocol', 'sample_thread', [['AUTOSTART', '0'], ['BITMAP', 'thread.gif'], \n['COORDS', ['0', '0']], ['DATAFORMAT', [['TYPE', 'hl7'], ['PREPROCS', \n[['ARGS', [[]]], ['PROCS', 'sample_proc']]]]]]]\n"]], ['Parsing an existing config file'], 2], [(996922, 0), [['Example:'], ['Now for the testing:']], [[' import sqlalchemy\nfrom sqlalchemy import Column, Table, create_engine, MetaData, Integer\nfrom sqlalchemy import func, select\nfrom sqlalchemy.pool import StaticPool\nfrom random import randrange\nimport numpy\nimport sqlite3\n\nclass NumpyVarAggregate(object):\n  def __init__(self):\n    self.values = []\n  def step(self, value):\n    self.values.append(value)\n  def finalize(self):\n    return numpy.array(self.values).var()\n\ndef sqlite_memory_engine_creator():\n    con = sqlite3.connect(\':memory:\')\n    con.create_aggregate("np_var", 1, NumpyVarAggregate)\n    return con\n\ne = create_engine(\'sqlite://\', echo=True, poolclass=StaticPool,\n                  creator=sqlite_memory_engine_creator)\nm = MetaData(bind=e)\nt = Table(\'mytable\', m, \n            Column(\'id\', Integer, primary_key=True),\n            Column(\'number\', Integer)\n          )\nm.create_all()\n']], ['How can I write my own aggregate functions with sqlalchemy?'], 3], [(996922, 1), [['Now for the testing:'], ['That prints (with SQLAlchemy statement echo turned on):']], [[" # insert 30 random-valued rows\nt.insert().execute([{'number': randrange(100)} for x in xrange(30)])\n\nfor row in select([func.avg(t.c.number), func.np_var(t.c.number)]).execute():\n    print 'RESULT ROW: ', row\n"]], ['How can I write my own aggregate functions with sqlalchemy?'], 3], [(996922, 2), [['That prints (with SQLAlchemy statement echo turned on):'], ["Note that I didn't use SQLAlchemy's ORM (just the sql expression part of SQLAlchemy was used) but you could use ORM just as well."]], [[' 2009-06-15 14:55:34,171 INFO sqlalchemy.engine.base.Engine.0x...d20c PRAGMA \ntable_info("mytable")\n2009-06-15 14:55:34,174 INFO sqlalchemy.engine.base.Engine.0x...d20c ()\n2009-06-15 14:55:34,175 INFO sqlalchemy.engine.base.Engine.0x...d20c \nCREATE TABLE mytable (\n    id INTEGER NOT NULL, \n    number INTEGER, \n    PRIMARY KEY (id)\n)\n2009-06-15 14:55:34,175 INFO sqlalchemy.engine.base.Engine.0x...d20c ()\n2009-06-15 14:55:34,176 INFO sqlalchemy.engine.base.Engine.0x...d20c COMMIT\n2009-06-15 14:55:34,177 INFO sqlalchemy.engine.base.Engine.0x...d20c INSERT\nINTO mytable (number) VALUES (?)\n2009-06-15 14:55:34,177 INFO sqlalchemy.engine.base.Engine.0x...d20c [[98], \n[94], [7], [1], [79], [77], [51], [28], [85], [26], [34], [68], [15], [43], \n[52], [97], [64], [82], [11], [71], [27], [75], [60], [85], [42], [40], \n[76], [12], [81], [69]]\n2009-06-15 14:55:34,178 INFO sqlalchemy.engine.base.Engine.0x...d20c COMMIT\n2009-06-15 14:55:34,180 INFO sqlalchemy.engine.base.Engine.0x...d20c SELECT\navg(mytable.number) AS avg_1, np_var(mytable.number) AS np_var_1 FROM mytable\n2009-06-15 14:55:34,180 INFO sqlalchemy.engine.base.Engine.0x...d20c []\nRESULT ROW: (55.0, 831.0)\n']], ['How can I write my own aggregate functions with sqlalchemy?'], 3], [(996965, 0), [['Yes.  Use int() with a base of 16.'], ['so:']], [[" >>> int('ffffffff',16)\n4294967295L\n"]], ['Refactor this block cipher keying function'], 3], [(996965, 1), [['so:'], ["[Edit]  In fact, there's generally no reason why you'd need to convert to a string representation at all, given an integer - you can simply extract out each 32 bit value by ANDing with  0xffffffff  and shifting the key right by 32 bits in a loop.  eg:"]], [[' subkey = int(hexkey[pos:pos+8], 16)\n']], ['Refactor this block cipher keying function'], 3], [(996965, 2), [["[Edit]  In fact, there's generally no reason why you'd need to convert to a string representation at all, given an integer - you can simply extract out each 32 bit value by ANDing with  0xffffffff  and shifting the key right by 32 bits in a loop.  eg:"], ["However, this initialization process seems a bit odd - it's using the hex digits starting from the left, with no zero padding to round to a multiple of 8 hex digits (so the number  0x123456789  would be split into  0x12345678  and  0x9 , rather than the more customary  0x00000001  and  0x23456789 .  It also repeats these numbers, rather than treating it as a single large number.  You should check that this code is actually performing the correct algorithm."]], [[' subkeys = []\nwhile key:\n    subkeys.append(key & 0xffffffff)\n    key >>= 32\n\nif not subkeys: subkeys = [0] # Handle 0 case\nsubkeys.reverse() # Use same order as before (BUT SEE BELOW)\n']], ['Refactor this block cipher keying function'], 3], [(997904, 0), [["The KDE way is quite elegant, which makes sense considering that Qt is KDE's toolkit. Instead of using the PyQt4.QtGui class QIcon, you instead use the PyKDE4.kdeui class KIcon. An example of this is:"], ['One way to gain support for this for gnome is to use the python gtk package. It is not as nice as the kde way, but it works none the less. It can be used like this:']], [[' from PyKDE4.kdeui import *\nicon = KIcon("*The Icon Name*")\n']], ['System theme icons and PyQt4'], 2], [(997904, 1), [['One way to gain support for this for gnome is to use the python gtk package. It is not as nice as the kde way, but it works none the less. It can be used like this:'], ['See the documentation for the  Icon Theme class  and  Icon Info class .']], [[' from PyQt4 import QtGui\nfrom gtk import icon_theme_get_default\n\niconTheme = icon_theme_get_default()\niconInfo = iconTheme.lookup_icon("*The Icon Name*", *Int of the icon size*, 0)\nicon = QtGui.QIcon(iconInfo.get_filename())\n']], ['System theme icons and PyQt4'], 2], [(1001068, 0), [['It is not related to WSGI or php or any other specific web technology. consider'], ['Consider this example:']], [[' <img src="someScript.php?param1=xyz">\n']], ['Creating dynamic images with WSGI, no files involved'], 2], [(1001068, 1), [['Consider this example:'], ['here any url pointing to serveImage will return a valid image and you can use it in any  img  tag or any other tag place where a image can be used e.g. css or background images']], [[' from wsgiref.simple_server import make_server\n\ndef serveImage(environ, start_response):\n    status = \'200 OK\'\n    headers = [(\'Content-type\', \'image/png\')]\n    start_response(status, headers)\n\n    return open("about.png", "rb").read()\n\nhttpd = make_server(\'\', 8000, serveImage)\nhttpd.serve_forever()\n']], ['Creating dynamic images with WSGI, no files involved'], 2], [(1001634, 0), [['The line'], ['computes the solution of the equation  c b = a T  for  c .  Numpy does not have an operator that does this directly.  Instead you should solve  b T  c T  = a  for  c T  and transpose the result:']], [[" c = a.' / b\n"]], ['Array division- translating from MATLAB to Python'], 2], [(1001634, 1), [['computes the solution of the equation  c b = a T  for  c .  Numpy does not have an operator that does this directly.  Instead you should solve  b T  c T  = a  for  c T  and transpose the result:'], ['-10000']], [[' c = numpy.linalg.lstsq(b.T, a.T)[0].T\n']], ['Array division- translating from MATLAB to Python'], 2], [(1005494, 0), [['If your commandline app is crawling the website for links, and you are only looking for a single item, building a dictionary is pointless.  It will take at least as long to build the dict as it would to just check as you go!  eg, just search as:'], ['If you are going to be doing multiple searches (rather than just a single commandline parameter),  then  it might be worth building a dictionary using something like:']], [[' for link in mysite.getallLinks():\n    if link[0] == firstletter:\n        print link\n']], ['A question on python sorting efficiency'], 2], [(1005494, 1), [['If you are going to be doing multiple searches (rather than just a single commandline parameter),  then  it might be worth building a dictionary using something like:'], ["Though given that there are just 26 buckets, it's not going to make that much of a difference."]], [[' import collections\nd=collections.defaultdict(list)\nfor link in mysite.getallLinks():\n    d[link[0]].append(link)             # Dict of first letter -> list of links\n\n# Print all links starting with firstletter\nfor link in d[firstletter]:\n    print link\n']], ['A question on python sorting efficiency'], 2], [(1008038, 0), [['Aha!! I have solved this by first attempting to remove the function from the stream: '], ['and then adding the updated/new version:']], [[' stream = stream | Transformer(\'.//head/script["functionName()"]\').remove()\n']], ['How do I test if a string exists in a Genshi stream?'], 2], [(1008038, 1), [['and then adding the updated/new version:'], ['-10000']], [[' stream = stream | Transformer(\'.//head\').append(tag.script(functionNameCode, type="text/javascript"))\n']], ['How do I test if a string exists in a Genshi stream?'], 2], [(1010381, 0), [['One possible way:'], ['The solution looks even nicer without the sets:']], [[' def genfactors(fdict):    \n    factors = set([1])\n\n    for factor, count in fdict.iteritems():\n        for ignore in range(count):\n            factors.update([n*factor for n in factors])\n            # that line could also be:\n            # factors.update(map(lambda e: e*factor, factors))\n\n    return factors\n\nfactors = {2:3, 3:2, 5:1}\n\nfor factor in genfactors(factors):\n    print factor\n']], ['Python factorization'], 2], [(1010381, 1), [['The solution looks even nicer without the sets:'], ['-10000']], [[' def genfactors(fdict):\n    factors = [1]\n\n    for factor, count in fdict.iteritems():\n        newfactors = factors\n        for ignore in range(count):\n            newfactors = map(lambda e: e*factor, newfactors)\n            factors += newfactors\n\n    return factors\n']], ['Python factorization'], 2], [(1010848, 0), [['In your view:'], ['In your template:']], [[' def categories_view(request):\n    categories = Categories.objects.all()   #maybe put an order_by or filter here\n    return render_to_response("your_template.html", {\'categories\':categories})\n']], ['Traversing multi-dimensional dictionary in django'], 2], [(1010848, 1), [['In your template:'], ["I haven't tested it but it should work. Compare this code to what you would have to write if you weren't using ORM, in either PHP or Python."]], [[' {% for category in categories %}\n    <h1>{{ category.name }}</h1>\n    {% for company in category.company_set.all %}\n        <h2>{{ company.name }}</h2>\n        <ul>\n        {% for video in company.video_set.all %}\n            <li>{{ video.name }}</li>\n        {% endfor %}\n        </ul>\n    {% endfor %}\n{% endfor %}\n']], ['Traversing multi-dimensional dictionary in django'], 2], [(1013246, 0), [['The windows shell saves the return code in the  ERRORLEVEL  variable:'], ['In the python script you can exit the script and set the return value by calling  exit() :']], [[' python somescript.py\necho %ERRORLEVEL%\n']], ['Call Python From Bat File And Get Return Code'], 3], [(1013246, 1), [['In the python script you can exit the script and set the return value by calling  exit() :'], ['In older versions of python you might first have to import the  exit()  function from the  sys  module:']], [[' exit(15)\n']], ['Call Python From Bat File And Get Return Code'], 3], [(1013246, 2), [['In older versions of python you might first have to import the  exit()  function from the  sys  module:'], ['-10000']], [[' from sys import exit\nexit(15)\n']], ['Call Python From Bat File And Get Return Code'], 3], [(1013828, 0), [["I initially thought this was not possible but after seeing Brian's comment, I searched CPAN and lo and behold, there is  Win32::Process::Memory :"], ['The module apparently uses the  ReadProcessMemory  function: Here is one of my attempts:']], [[' C:\\> ppm install Win32::Process::Info\nC:\\> ppm install Win32::Process::Memory\n']], ['How to write a Perl, Python, or Ruby program to change the memory of another process on Windows?'], 3], [(1013828, 1), [['The module apparently uses the  ReadProcessMemory  function: Here is one of my attempts:'], ['Output:']], [[' #!/usr/bin/perl\nuse strict; use warnings;\n\nuse Win32;\nuse Win32::Process;\nuse Win32::Process::Memory;\n\nmy $process;\n\nWin32::Process::Create(\n    $process,\n    \'C:/opt/vim/vim72/gvim.exe\',\n    q{},\n    0,\n    NORMAL_PRIORITY_CLASS,\n    q{.}\n) or die ErrorReport();\n\nmy $mem = Win32::Process::Memory->new({\n    pid => $process->GetProcessID(),\n    access => \'read/query\',\n});\n\n$mem->search_sub( \'VIM\', sub {\n    print $mem->hexdump($_[0], 0x20), "\\n";\n});\n\nsub ErrorReport{\n    Win32::FormatMessage( Win32::GetLastError() );\n}\n\nEND { $process->Kill(0) if $process }\n']], ['How to write a Perl, Python, or Ruby program to change the memory of another process on Windows?'], 3], [(1013828, 2), [['Output:'], ['-10000']], [[' C:\\Temp> proc\n0052A580 : 56 49 4D 20 2D 20 56 69 20 49 4D 70 72 6F 76 65 : VIM - Vi IMprove\n0052A590 : 64 20 37 2E 32 20 28 32 30 30 38 20 41 75 67 20 : d 7.2 (2008 Aug\n\n0052A5F0 :       56 49 4D 52 55 4E 54 49 4D 45 3A 20 22 00 :   VIMRUNTIME: ".\n0052A600 : 20 20 66 61 6C 6C 2D 62 61 63 6B 20 66 6F 72 20 :   fall-back for\n0052A610 : 24 56                                           : $V\n']], ['How to write a Perl, Python, or Ruby program to change the memory of another process on Windows?'], 3], [(1016997, 0), [["This solution does not require to keep all results in memory: (in case it doesn't fit in memory etc)"], ['Example:']], [[' def grandKids(generation, kidsFunc, val):\n  layer = [val]\n  for i in xrange(generation):\n    layer = itertools.chain.from_iterable(itertools.imap(kidsFunc, layer))\n  return layer\n']], ['Generate from generators'], 3], [(1016997, 1), [['Example:'], ['Btw, solution in Haskell:']], [[' def kids(x): # children indices in a 1-based binary heap\n  yield x*2\n  yield x*2+1\n\n>>> list(grandKids(3, kids, 2))\n[16, 17, 18, 19, 20, 21, 22, 23]\n']], ['Generate from generators'], 3], [(1016997, 2), [['Btw, solution in Haskell:'], ['-10000']], [[' grandKids generation kidsFunc val =\n  iterate (concatMap kidsFunc) [val] !! generation\n']], ['Generate from generators'], 3], [(1017087, 0), [['my_cgi.py'], ['wsgi.py']], [[' import cgi\nprint "status: 200 OK"\nprint "content-type: text/html"\nprint\nprint "<!doctype...>"\nprint "<html>"\netc.\n']], ['Python cgi performance'], 3], [(1017087, 1), [['wsgi.py'], ['wsgi.py']], [[' import cStringIO\ndef my_cgi( environ, start_response ):\n    page = cStringIO.StringIO()\n    sys.stdout= page\n    os.environ.update( environ ) \n    # you may have to do something like execfile( "my_cgi.py", globals=environ ) \n    execfile( "my_cgi.py" )\n    status = \'200 OK\' # HTTP Status\n    headers = [(\'Content-type\', \'text/html\')] # HTTP Headers\n    start_response(status, headers)\n    return page.getvalue()\n']], ['Python cgi performance'], 3], [(1017087, 2), [['wsgi.py'], ['This requires more work because you have to understand the legacy application.  However, this has two advantages.']], [[" from my_cgi import this_func, that_func\ndef my_cgi( environ, start_response ):\n\n    result= this_func( some_args )\n    page_text= that_func( result, some_other_args )\n\n    status = '200 OK' # HTTP Status\n    headers = [('Content-type', 'text/html')] # HTTP Headers\n    start_response(status, headers)\n    return page_text\n"]], ['Python cgi performance'], 3], [(1020037, 0), [['If you want your solution to be general, use a general techique. This is a fixed-point like generator:'], ['Usage:']], [[' def fixedpoint(f, start, stop):\n    while start != stop:\n        yield start\n        start = f(start)\n']], ['How to walk up a linked-list using a list comprehension?'], 2], [(1020037, 1), [['Usage:'], ['My personal helpers library has similar fixedpoint-like function for years... it is pretty useful for quick hacks.']], [[' print ".".join(x.name for x in fixedpoint(lambda p:p.parent, self, None))\n']], ['How to walk up a linked-list using a list comprehension?'], 2], [(1020053, 0), [['You cannot read and write the same file.'], ['In the lines']], [[' source = open("PALTemplateData.csv","rb")\nreader = csv.reader(source , dialect)\n\ntarget = open("AnotherFile.csv","wb")\nwriter = csv.writer(target , dialect)\n']], ["Writing with Python's built-in .csv module"], 2], [(1020053, 1), [['In the lines'], ['The "rb" and "wb" are absolutely required.  Every time you ignore those, you open the file for reading in the wrong format.']], [[' source = open("PALTemplateData.csv","rb")\n\ntarget = open("AnotherFile.csv","wb")\n']], ["Writing with Python's built-in .csv module"], 2], [(1020722, 0), [['Use  dict.fromkeys :'], ['Values default to  None , but you can specify them as an optional argument:']], [[' >>> my_list = [1, 2, 3]\n>>> dict.fromkeys(my_list)\n{1: None, 2: None, 3: None}\n']], ['Is there a better way to convert a list to a dictionary in Python with keys but no values?'], 2], [(1020722, 1), [['Values default to  None , but you can specify them as an optional argument:'], ['From the docs:']], [[' >>> my_list = [1, 2, 3]\n>>> dict.fromkeys(my_list, 0)\n{1: 0, 2: 0, 3: 0}\n']], ['Is there a better way to convert a list to a dictionary in Python with keys but no values?'], 2], [(1020892, 0), [["After the operations you performed, you'll see:"], ['and so:']], [[" >>> req.headers['content-type']\n'text/html; charset=windows-1251'\n"]], ['urllib2 read to Unicode'], 4], [(1020892, 1), [['and so:'], ['ucontent  is now a Unicode string (of 140655 characters) -- so for example to display a part of it, if your terminal is UTF-8:']], [[" >>> encoding=req.headers['content-type'].split('charset=')[-1]\n>>> ucontent = unicode(content, encoding)\n"]], ['urllib2 read to Unicode'], 4], [(1020892, 2), [['ucontent  is now a Unicode string (of 140655 characters) -- so for example to display a part of it, if your terminal is UTF-8:'], ["Edit: Unicode I/O is usually tricky (this may be what's holding up the original asker) but I'm going to bypass the difficult problem of inputting Unicode strings to an interactive Python interpreter (completely unrelated to the original question) to show how, once a Unicode string IS correctly input (I'm doing it by codepoints -- goofy but not tricky;-), search is absolutely a no-brainer (and thus hopefully the original question has been thoroughly answered).  Again assuming a UTF-8 terminal:"]], [[" >>> print ucontent[76:110].encode('utf-8')\n<title>Lenta.ru: Главное: </title>\n"]], ['urllib2 read to Unicode'], 4], [(1020892, 3), [["Edit: Unicode I/O is usually tricky (this may be what's holding up the original asker) but I'm going to bypass the difficult problem of inputting Unicode strings to an interactive Python interpreter (completely unrelated to the original question) to show how, once a Unicode string IS correctly input (I'm doing it by codepoints -- goofy but not tricky;-), search is absolutely a no-brainer (and thus hopefully the original question has been thoroughly answered).  Again assuming a UTF-8 terminal:"], ['Note : Keep in mind that this method may not work for all sites, since some sites only specify character encoding inside the served documents (using http-equiv meta tags, for example).']], [[" >>> x=u'\\u0413\\u043b\\u0430\\u0432\\u043d\\u043e\\u0435'\n>>> print x.encode('utf-8')\nГлавное\n>>> x in ucontent\nTrue\n>>> ucontent.find(x)\n93\n"]], ['urllib2 read to Unicode'], 4], [(1021464, 0), [['You might think you could call the base class function which is called by property:'], ['But a property is just an object, with a getter method to find the corresponding attribute:']], [[' class FooBar(Foo):\n\n    @property\n    def bar(self):\n        # return the same value\n        # as in the base class\n        return Foo.bar(self)\n']], ['How to call a property of the base class if this property is being overwritten in the derived class?'], 2], [(1021464, 1), [['But a property is just an object, with a getter method to find the corresponding attribute:'], ['-10000']], [[' class FooBar(Foo):\n\n    @property\n    def bar(self):\n        # return the same value\n        # as in the base class\n        return Foo.bar.fget(self)\n']], ['How to call a property of the base class if this property is being overwritten in the derived class?'], 2], [(1022429, 0), [['Example usage:'], ['And the result:']], [[' with open("...", "wb") as out:\n  xml = XmlWriter(out)\n  xml.addNamespace("xhtml", "http://www.w3.org/1999/xhtml")\n  xml.startTag("xhtml:html")\n  xml.startTag("xhtml:body")\n  xml.text("Hello world!")\n  xml.tag("xhtml:img", {"src": "smile.png", "alt": ":-)"})\n  xml.endTag()\n  xml.endTag()\n  xml.close()\n']], ['Writing XML from Python : Python equivalent of .NET XmlTextWriter?'], 2], [(1022429, 1), [['And the result:'], ['Among other features, it detects missalligned tags while you write, uses a streaming API with a small memory footprint, supports Unicode and allows to disable pretty printing.']], [[' <?xml version="1.0" encoding="utf-8"?>\n<xhtml:html xlmns:xhtml="http://www.w3.org/1999/xhtml">\n  <xhtml:body>\n    Hello world!\n    <xhtml:img alt=":-)" src="smile.png" />\n  </xhtml:body>\n</xhtml:html>\n']], ['Writing XML from Python : Python equivalent of .NET XmlTextWriter?'], 2], [(1023902, 0), [['You can use a backreference to do this:'], ['Edit \xa0\xa0\xa0Here’s some Python example:']], [[' (.)\\1\n']], ['It is possible to match a character repetition with regex? How?'], 2], [(1023902, 1), [['Edit \xa0\xa0\xa0Here’s some Python example:'], ['-10000']], [[' import re\n\nregexp = re.compile(r"(.)\\1")\ndata = ["parrot","follia","carrot","mattia","rettoo","melone"]\n\nfor str in data:\n    match = re.search(regexp, str)\n    if match:\n        print str, "<- match for double", match.group(1)\n    else:\n        print str, "<- doesn\'t match"\n']], ['It is possible to match a character repetition with regex? How?'], 2], [(1024437, 0), [['Python functions accept keyword arguments. If you define a function like so:'], ['You can call it like this:']], [[" def my_func(a, b='abc', c='def'):\n    print a, b, c\n"]], ['Python newbie: What does this code do?'], 6], [(1024437, 1), [['You can call it like this:'], ['And the result will be:']], [[" my_func('hello', c='world')\n"]], ['Python newbie: What does this code do?'], 6], [(1024437, 2), [['And the result will be:'], ['You can also support dynamic keyword arguments, using special syntax:']], [[' hello abc world\n']], ['Python newbie: What does this code do?'], 6], [(1024437, 3), [['You can also support dynamic keyword arguments, using special syntax:'], ['If you call the function like this:']], [[' def my_other_func(a, *b, **c):\n    print a, b, c\n']], ['Python newbie: What does this code do?'], 6], [(1024437, 4), [['If you call the function like this:'], ['You will get:']], [[" my_other_func('hello', 'world', 'what a', state='fine', what='day')\n"]], ['Python newbie: What does this code do?'], 6], [(1024437, 5), [['You will get:'], ['-10000']], [[" hello ('world', 'what a') {'state': 'fine', 'what': 'day'}\n"]], ['Python newbie: What does this code do?'], 6], [(1025244, 0), [['Why would do it in Python? You can just use the commandline, as in:'], ['If you really need it to be in Python, then you can use the  subprocess module :']], [[' gconftool-2 --type bool --set /apps/nautilus/preferences/media_automount false\n']], ["Disable GNOME's automount with Python"], 2], [(1025244, 1), [['If you really need it to be in Python, then you can use the  subprocess module :'], ["But I'm really not sure that it's necessary here."]], [[' import subprocess\n\ndef setAutomount(value):\n    """\n    @type value: boolean\n    """\n    cmd = [\'gconftool-2\', \'--type\', \'bool\', \'--set\', \n            \'/apps/nautilus/preferences/media_automount\']\n    cmd.append(str(value).lower())\n    subprocess.check_call(cmd)\n\nsetAutomount(False)\n']], ["Disable GNOME's automount with Python"], 2], [(1025379, 0), [["Sorry, but after thorough investigation I can't find any way to perform the task you require without a minimum of post-processing (to strip off the trailing zeros you don't want to see); something like:"], ["Edit : original question was edited to specify more significant digits, require no extra leading space beyond what's required for the largest number, and provide a new example (where my previous suggestion, above, doesn't match the desired output). The work of removing leading whitespace that's common to a bunch of strings is best performed with  textwrap.dedent  -- but that works on a single string (with newlines) while the required output is a list of strings. No problem, we'll just put the lines together, dedent them, and split them up again:"]], [[' import re\nut0 = re.compile(r\'(\\d)0+$\')\n\nthelist = [ut0.sub(r\'\\1\', "%12f" % x) for x in a]\n\nprint \'\\n\'.join(thelist)\n']], ['Decimal alignment formatting in Python'], 3], [(1025379, 1), [["Edit : original question was edited to specify more significant digits, require no extra leading space beyond what's required for the largest number, and provide a new example (where my previous suggestion, above, doesn't match the desired output). The work of removing leading whitespace that's common to a bunch of strings is best performed with  textwrap.dedent  -- but that works on a single string (with newlines) while the required output is a list of strings. No problem, we'll just put the lines together, dedent them, and split them up again:"], ['emits:']], [[' import re\nimport textwrap\n\na = [  5.50056103e+02,   6.77383566e+03,   6.01001513e+05,\n         3.55425142e+08,   7.07254875e+05,   8.83174744e+02,\n         8.22320510e+01,   4.25076609e+08,   6.28662635e+07,\n         1.56503068e+02]\n\nthelist = textwrap.dedent(\n        \'\\n\'.join(ut0.sub(r\'\\1\', "%20f" % x) for x in a)).splitlines()\n\nprint \'\\n\'.join(thelist)\n']], ['Decimal alignment formatting in Python'], 3], [(1025379, 2), [['emits:'], ['-10000']], [['       550.056103\n     6773.83566\n   601001.513\n355425142.0\n   707254.875\n      883.174744\n       82.232051\n425076609.0\n 62866263.5\n      156.503068\n']], ['Decimal alignment formatting in Python'], 3], [(1027714, 0), [['From the shell'], ["If you're typing interactively, try this."]], [[' python someFile.py\n']], ['How to execute a file within the python interpreter?'], 2], [(1027714, 1), [["If you're typing interactively, try this."], ['-10000']], [[' >>> variables= {}\n>>> execfile( "someFile.py", variables )\n>>> print variables # globals from the someFile module\n']], ['How to execute a file within the python interpreter?'], 2], [(1029207, 0), [['The UnivariateSpline class in scipy makes doing splines much more pythonic.'], ['To find x at y then do:']], [[" x = [70, 80, 90, 100, 110]\ny = [49.7, 80.6, 122.5, 153.8, 163.0]\nf = interpolate.UnivariateSpline(x, y, s=0)\nxnew = np.arange(70,111,1)\n\nplt.plot(x,y,'x',xnew,f(xnew))\n"]], ['Interpolation in SciPy: Finding X that produces Y'], 2], [(1029207, 1), [['To find x at y then do:'], ['I thought interpolating x in terms of y might work but it takes a somewhat different route. It might be closer with more points.']], [[' yToFind = 140\nyreduced = np.array(y) - yToFind\nfreduced = interpolate.UnivariateSpline(x, yreduced, s=0)\nfreduced.roots()\n']], ['Interpolation in SciPy: Finding X that produces Y'], 2], [(1029891, 0), [["Building on Alex's answer, it's actually pretty easy to do using  argparse :"], ["I haven't tested all of the flags you can pass into unittest to see if they work or not, but passing test names in does work, e.g.:"]], [[" if __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input', default='My Input')\n    parser.add_argument('filename', default='some_file.txt')\n    parser.add_argument('unittest_args', nargs='*')\n\n    args = parser.parse_args()\n    # TODO: Go do something with args.input and args.filename\n\n    # Now set the sys.argv to the unittest_args (leaving sys.argv[0] alone)\n    sys.argv[1:] = args.unittest_args\n    unittest.main()\n"]], ['python, unittest: is there a way to pass command line options to the app'], 2], [(1029891, 1), [["I haven't tested all of the flags you can pass into unittest to see if they work or not, but passing test names in does work, e.g.:"], ['Runs MyTest with  foo  and  data.txt .']], [[' python test.py --input=foo data.txt MyTest\n']], ['python, unittest: is there a way to pass command line options to the app'], 2], [(1029965, 0), [["you can use python's string formatting fairly easily in mako"], ['giving:']], [[' ${"%20s%10s" % ("string 1", "string 2")}\n']], ['Formatting with mako'], 2], [(1029965, 1), [['giving:'], ['-10000']], [[' >>> from mako.template import Template\n>>> Template(\'${"%20s%10s" % ("string 1", "string 2")}\').render()\n\'            string 1  string 2\'\n']], ['Formatting with mako'], 2], [(1031199, 0), [['How about that:'], ['Or without creating an intermediate list (generator is enough):']], [[' dict( [ (n, a.get(n, 0)+b.get(n, 0)) for n in set(a)|set(b) ] )\n']], ['"Adding" Dictionaries in Python?'], 3], [(1031199, 1), [['Or without creating an intermediate list (generator is enough):'], ['As a commentator addressed correctly, there is a way to implement that easier with the new (from Py2.7) collections.Counter class. As much I remember, this version was not available when I wrote the answer:']], [[' dict( (n, a.get(n, 0)+b.get(n, 0)) for n in set(a)|set(b) )\n']], ['"Adding" Dictionaries in Python?'], 3], [(1031199, 2), [['As a commentator addressed correctly, there is a way to implement that easier with the new (from Py2.7) collections.Counter class. As much I remember, this version was not available when I wrote the answer:'], ['-10000']], [[' from collections import Counter\ndict(Counter(a)+Counter(b))\n']], ['"Adding" Dictionaries in Python?'], 3], [(1031657, 0), [['you need to pass locals/globals dict and pass first argument what you will usually type\ne.g.'], ['use something like this']], [[' cProfile.runctx("self.profileCommand(100)", globals(),locals())\n']], ['Profiling self and arguments in python?'], 2], [(1031657, 1), [['use something like this'], ["and don't call whole UI in profile , profile the specific function or computation"]], [[' class A(object):\n    def performProfile(self):\n        import cProfile\n        cProfile.runctx("self.profileCommand(100)", globals(),locals())\n\n    def profileCommand(self, a):\n        for i in xrange(a):\n            pass\n        print "end."\n\nA().performProfile()\n']], ['Profiling self and arguments in python?'], 2], [(1032411, 0), [["There isn't one built in but it's not to hard to roll you own:"], ['So these two calls are homogeneous:']], [[' def TrueXor(*args):\n    return sum(args) == 1\n']], ['Check if only one variable in a list of variables is set'], 2], [(1032411, 1), [['So these two calls are homogeneous:'], ['If you want explicit boolean conversion:  sum( bool(x) for x in args ) == 1 .']], [[' TrueXor(1, 0, 0)\nTrueXor(True, False, False)\n']], ['Check if only one variable in a list of variables is set'], 2], [(1032976, 0), [['Main program:'], ['parsers/csv.py :']], [[" ...\ndef import_plugin(name):\n    mod = __import__(name)\n    components = name.split('.')\n    for comp in components[1:]:\n        mod = getattr(mod, comp)\n    return mod\n\n...\nfeed_parser = import_plugin('parsers.%s' % feed['format'])\ndata = feed_parser(...)\n...\n"]], ['Template driven feed parsing'], 3], [(1032976, 1), [['parsers/csv.py :'], ['If you don\'t particularly like dynamically loaded modules, you may consider writing, for example, a single module with several parses classes (probably derived from some "abstract parser" base class).']], [[' #!/usr/bin/python\nfrom __future__ import absolute_import\n\nimport urllib2\nimport csv\n\ndef parse_feed(...):\n    ...\n']], ['Template driven feed parsing'], 3], [(1032976, 2), [['If you don\'t particularly like dynamically loaded modules, you may consider writing, for example, a single module with several parses classes (probably derived from some "abstract parser" base class).'], ['-10000']], [[" class BaseParser(object):\n    ...\n\nclass CSVParser(BaseParser):\n    ...\nregister_feed_parser(CSVParser, ['text/plain', 'text/csv'])\n...\n\nparsers = get_registered_feed_parsers(feed['mime_type'])\ndata = None\nfor parser in parsers:\n    try:\n        data = parser(feed['data'])\n        if data is not None: break\n    except ParsingError:\n        pass\n...\n"]], ['Template driven feed parsing'], 3], [(1033130, 0), [['So you change your config file to:'], ['and, after  display = DisplayScreen(**config) , post-process  config  as follows:']], [[" 'menuBar':[('File', 0, [('Save', 0, (lambda widget=None: widget.onSave()))])],\n 'title': 'Employee Data Entry'}\n"]], ['Specifying TkInter Callbacks In Dictionary For Display Launcher Function'], 4], [(1033130, 1), [['and, after  display = DisplayScreen(**config) , post-process  config  as follows:'], ['So at module level you have, say:']], [[" def place_widget(widget, mess):\n  if isinstance(mess, (list, tuple)):\n    for item in mess:\n      place_widget(widget, item)\n  elif isinstance(mess, type(lambda:0)):\n    if mess.func_code.co_varnames[-1:] == ('widget',):\n      mess.func_defaults = mess.func_defaults[:-1] + (widget,)\n"]], ['Specifying TkInter Callbacks In Dictionary For Display Launcher Function'], 4], [(1033130, 2), [['So at module level you have, say:'], ['and in your function you assign the newly made widget to  widgets.foobar  instead of assigning to bare name  foobar .  Then your  eval ed  lambda  can be something like:']], [[' class Bunch(object): pass\nwidgets = Bunch()\n']], ['Specifying TkInter Callbacks In Dictionary For Display Launcher Function'], 4], [(1033130, 3), [['and in your function you assign the newly made widget to  widgets.foobar  instead of assigning to bare name  foobar .  Then your  eval ed  lambda  can be something like:'], ["and everything will be fine, because, this way, no closure is needed (it's only needed -- and none is forthcoming due to the  eval  -- in your original approach to preserve the  local  variables you are using for the time the  lambda  will be needing them)."]], [[' lambda: widgets.foobar.onSave()\n']], ['Specifying TkInter Callbacks In Dictionary For Display Launcher Function'], 4], [(1033897, 0), [['Using  pip  this is quite easy. For instance:'], ['You can also then run "pip freeze" and it will output a list of your currently-installed packages with their exact versions (including, for develop-installs, the exact revision from the VCS). You can put this straight into a requirements file and later run']], [[' pip install -e hg+http://bitbucket.org/andrewgodwin/south/#egg=South\n']], ['Python package install using pip or easy_install from repos'], 2], [(1033897, 1), [['You can also then run "pip freeze" and it will output a list of your currently-installed packages with their exact versions (including, for develop-installs, the exact revision from the VCS). You can put this straight into a requirements file and later run'], ['to install that same set of packages at the exact same versions.']], [[' pip install -r requirements.txt\n']], ['Python package install using pip or easy_install from repos'], 2], [(1034145, 0), [['-10000'], ['With your example input ']], [[" duplicate = []\n# Sort the list so we can compare adjacent values\nfail.sort()\n#if you didn't want to modify the list in place you can use:\n#sortedFail = sorted(fail)\n#      and then use sortedFail in the rest of the code instead of fail\nfor i, x in enumerate(fail):\n    if i+1 == len(fail):\n        #end of the list\n        break\n    if x[:2] == fail[i+1][:2]:\n        if x not in duplicate:\n            duplicate.add(x)\n        if fail[i+1] not in duplicate:\n            duplicate.add(fail[i+1])\n# diff is just anything not in duplicate as far as I can tell from the explanation\ndiff = [d for d in fail if d not in duplicate]\n"]], ['Python List Question'], 2], [(1034145, 1), [['With your example input '], ['So perhaps I missed something, but I think this is what you were asking for.']], [[" duplicate: [\n              ['95d1543adea47e88923c3d4ad56e9f65c2b40c76', 'ron\\\\c', ['apa.txt']], \n              ['95d1543adea47e88923c3d4ad56e9f65c2b40c76', 'ron\\\\c', 'knark.txt']\n           ]\n\ndiff: [\n          ['b5cc17d3a35877ca8b76f0b2e07497039c250696', 'ron\\\\a', ['apa2.txt']], \n          ['b5cc17d3a35877ca8b76f0b2e07497039c250696', 'ron\\\\c', 'apa1.txt'], \n          ['da39a3ee5e6b4b0d3255bfef95601890afd80709', 'ron\\\\a\\\\include', ['svin.txt']],\n          ['da39a3ee5e6b4b0d3255bfef95601890afd80709', 'ron\\\\b\\\\include', 'Test.java'],\n          ['da39a3ee5e6b4b0d3255bfef95601890afd80709', 'ron\\\\d', 'Sourcecheck.py']\n      ]\n"]], ['Python List Question'], 2], [(1034848, 0), [['I found  this  particular section in the Python multiprocessing docs helpful. The following program:'], ['Each process reads the configuration, does its processing (here, just sleep for 5 secs) then terminates. The output from running this script is:']], [[' from multiprocessing import Process, Queue, current_process\nimport time\n\ndef f(q):\n    name = current_process().name\n    config = q.get()\n    print "%s got config: %s" % (name, config)\n    print "%s beginning processing at %s" % (name, time.asctime())\n    time.sleep(5)\n    print "%s completing processing at %s" % (name, time.asctime())\n\nif __name__ == \'__main__\':\n    q = Queue()\n    processes = []\n    cfg = { \'my\' : \'config\', \'data\' : \'here\' }\n    for i in range(3):\n        p = Process(target=f, args=(q,))\n        processes.append(p)\n        p.start()\n        q.put(cfg)\n\n    for p in processes:\n        p.join()\n']], ['python multiprocessing manager'], 2], [(1034848, 1), [['Each process reads the configuration, does its processing (here, just sleep for 5 secs) then terminates. The output from running this script is:'], ['-10000']], [[" Process-1 got config: {'my': 'config', 'data': 'here'}\nProcess-1 beginning processing at Tue Jun 23 23:34:23 2009\nProcess-2 got config: {'my': 'config', 'data': 'here'}\nProcess-2 beginning processing at Tue Jun 23 23:34:23 2009\nProcess-3 got config: {'my': 'config', 'data': 'here'}\nProcess-3 beginning processing at Tue Jun 23 23:34:23 2009\nProcess-1 completing processing at Tue Jun 23 23:34:28 2009\nProcess-2 completing processing at Tue Jun 23 23:34:28 2009\nProcess-3 completing processing at Tue Jun 23 23:34:28 2009\n"]], ['python multiprocessing manager'], 2], [(1035340, 0), [['-10000'], ['By suggestion of chrispy:']], [[' f = open("myfile", "rb")\ntry:\n    byte = f.read(1)\n    while byte != "":\n        # Do stuff with byte.\n        byte = f.read(1)\nfinally:\n    f.close()\n']], ['Reading binary file and looping over each byte'], 5], [(1035340, 1), [['By suggestion of chrispy:'], ["Note that the with statement is not available in versions of Python below 2.5. To use it in v 2.5 you'll need to import it:"]], [[' with open("myfile", "rb") as f:\n    byte = f.read(1)\n    while byte != "":\n        # Do stuff with byte.\n        byte = f.read(1)\n']], ['Reading binary file and looping over each byte'], 5], [(1035340, 2), [["Note that the with statement is not available in versions of Python below 2.5. To use it in v 2.5 you'll need to import it:"], ["In Python 3, it's a bit different. We will no longer get raw characters from the stream in byte mode but byte objects, thus we need to alter the condition:"]], [[' from __future__ import with_statement\n']], ['Reading binary file and looping over each byte'], 5], [(1035340, 3), [["In Python 3, it's a bit different. We will no longer get raw characters from the stream in byte mode but byte objects, thus we need to alter the condition:"], ['Or as benhoyt says, skip the not equal and take advantage of the fact that  b""  evaluates to false. This makes the code compatible between 2.6 and 3.x without any changes. It would also save you from changing the condition if you go from byte mode to text or the reverse.']], [[' with open("myfile", "rb") as f:\n    byte = f.read(1)\n    while byte != b"":\n        # Do stuff with byte.\n        byte = f.read(1)\n']], ['Reading binary file and looping over each byte'], 5], [(1035340, 4), [['Or as benhoyt says, skip the not equal and take advantage of the fact that  b""  evaluates to false. This makes the code compatible between 2.6 and 3.x without any changes. It would also save you from changing the condition if you go from byte mode to text or the reverse.'], ['-10000']], [[' with open("myfile", "rb") as f:\n    byte = f.read(1)\n    while byte:\n        # Do stuff with byte.\n        byte = f.read(1)\n']], ['Reading binary file and looping over each byte'], 5], [(1038160, 0), [['Having a "table" in memory that needs lookups, sorting, and arbitrary aggregation really does call out for SQL.  You said you tried SQLite, but did you realize that SQLite can use an in-memory-only database?'], ['Here is a sample of how one might create and populate the database:']], [[" connection = sqlite3.connect(':memory:')\n"]], ['Data structure for maintaining tabular data in memory?'], 4], [(1038160, 1), [['Here is a sample of how one might create and populate the database:'], ["If you'd really prefer not to use SQL, you should probably use a list of dictionaries:"]], [[" import csv\nimport sqlite3\n\ndb = sqlite3.connect(':memory:')\n\ndef init_db(cur):\n    cur.execute('''CREATE TABLE foo (\n        Row INTEGER,\n        Name TEXT,\n        Year INTEGER,\n        Priority INTEGER)''')\n\ndef populate_db(cur, csv_fp):\n    rdr = csv.reader(csv_fp)\n    cur.executemany('''\n        INSERT INTO foo (Row, Name, Year, Priority)\n        VALUES (?,?,?,?)''', rdr)\n\ncur = db.cursor()\ninit_db(cur)\npopulate_db(cur, open('my_csv_input_file.csv'))\ndb.commit()\n"]], ['Data structure for maintaining tabular data in memory?'], 4], [(1038160, 2), [["If you'd really prefer not to use SQL, you should probably use a list of dictionaries:"], ['Testing then yields:']], [[' lod = [ ] # "list of dicts"\n\ndef populate_lod(lod, csv_fp):\n    rdr = csv.DictReader(csv_fp, [\'Row\', \'Name\', \'Year\', \'Priority\'])\n    lod.extend(rdr)\n\ndef query_lod(lod, filter=None, sort_keys=None):\n    if filter is not None:\n        lod = (r for r in lod if filter(r))\n    if sort_keys is not None:\n        lod = sorted(lod, key=lambda r:[r[k] for k in sort_keys])\n    else:\n        lod = list(lod)\n    return lod\n\ndef lookup_lod(lod, **kw):\n    for row in lod:\n        for k,v in kw.iteritems():\n            if row[k] != str(v): break\n        else:\n            return row\n    return None\n']], ['Data structure for maintaining tabular data in memory?'], 4], [(1038160, 3), [['Testing then yields:'], ["Personally I like the SQLite version better since it preserves your types better (without extra conversion code in Python) and easily grows to accommodate future requirements.  But then again, I'm quite comfortable with SQL, so YMMV."]], [[" >>> lod = []\n>>> populate_lod(lod, csv_fp)\n>>> \n>>> pprint(lookup_lod(lod, Row=1))\n{'Name': 'Cat', 'Priority': '1', 'Row': '1', 'Year': '1998'}\n>>> pprint(lookup_lod(lod, Name='Aardvark'))\n{'Name': 'Aardvark', 'Priority': '1', 'Row': '4', 'Year': '2000'}\n>>> pprint(query_lod(lod, sort_keys=('Priority', 'Year')))\n[{'Name': 'Cat', 'Priority': '1', 'Row': '1', 'Year': '1998'},\n {'Name': 'Dog', 'Priority': '1', 'Row': '3', 'Year': '1999'},\n {'Name': 'Aardvark', 'Priority': '1', 'Row': '4', 'Year': '2000'},\n {'Name': 'Wallaby', 'Priority': '1', 'Row': '5', 'Year': '2000'},\n {'Name': 'Fish', 'Priority': '2', 'Row': '2', 'Year': '1998'},\n {'Name': 'Zebra', 'Priority': '3', 'Row': '6', 'Year': '2001'}]\n>>> pprint(query_lod(lod, sort_keys=('Year', 'Priority')))\n[{'Name': 'Cat', 'Priority': '1', 'Row': '1', 'Year': '1998'},\n {'Name': 'Fish', 'Priority': '2', 'Row': '2', 'Year': '1998'},\n {'Name': 'Dog', 'Priority': '1', 'Row': '3', 'Year': '1999'},\n {'Name': 'Aardvark', 'Priority': '1', 'Row': '4', 'Year': '2000'},\n {'Name': 'Wallaby', 'Priority': '1', 'Row': '5', 'Year': '2000'},\n {'Name': 'Zebra', 'Priority': '3', 'Row': '6', 'Year': '2001'}]\n>>> print len(query_lod(lod, lambda r:1997 <= int(r['Year']) <= 2002))\n6\n>>> print len(query_lod(lod, lambda r:int(r['Year'])==1998 and int(r['Priority']) > 2))\n0\n"]], ['Data structure for maintaining tabular data in memory?'], 4], [(1038824, 0), [['You could do this:'], ['Or using regular expressions:']], [[" url = 'abcdc.com'\nif url.endswith('.com'):\n    url = url[:-4]\n"]], ['How do I remove a substring from the end of a string in Python?'], 2], [(1038824, 1), [['Or using regular expressions:'], ['-10000']], [[" import re\nurl = 'abcdc.com'\nurl = re.sub('\\.com$', '', url)\n"]], ['How do I remove a substring from the end of a string in Python?'], 2], [(1042391, 0), [['For example in  Django web framework  you first write a  view  (view — you know — from that famous  Model-View-Controller  pattern) function:'], ['And register it with  URL dispatcher  (in Django, there is a special file, called  urls.py ):']], [[" def my_view(request, movie):\n    return render_to_template('my_view.html',\n                              {'movie': settings.MEDIA_URL + 'flash.swf?' + movie})\n"]], ['Convert param into python?'], 4], [(1042391, 1), [['And register it with  URL dispatcher  (in Django, there is a special file, called  urls.py ):'], ['Then a  my_view.html   template :']], [[" ...\nurl(r'/flash/(?P<movie>.+)$', 'myapp.views.my_view'),\n...\n"]], ['Convert param into python?'], 4], [(1042391, 2), [['Then a  my_view.html   template :'], ["If you need something really simple (like in your example), where you don't need almost anything, you may just write small  WSGI  application, which then can be used, for example, with Apache's mod_python or mod_wsgi. It will be something like this:"]], [[' ...\n<object classid="clsid:XXXXXXXXX-YYYY-ZZZZ-AAAA-BBBBBBBBBB" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,0,0" width="100%" height="100%" id="main" align="middle">\n<param name="allowScriptAccess" value="all" />\n<param name="flashvars" value= />\n<param name="movie" value="{{ movie }}" />\n<param name="loop" value="false" />\n<param name="quality" value="high" />\n<param name="bgcolor" value="#eeeeee" />\n<embed src="{{ movie }}" loop="false" quality="high" bgcolor="#eeeeee" width="100%" height="100%" name="main" align="middle" allowScriptAccess="all" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" />\n</object>\n...\n']], ['Convert param into python?'], 4], [(1042391, 3), [["If you need something really simple (like in your example), where you don't need almost anything, you may just write small  WSGI  application, which then can be used, for example, with Apache's mod_python or mod_wsgi. It will be something like this:"], ["To sum it up: without additional support libraries, Python web programming is somehow painful, and requires doing  everything  from the URI parsing to output formatting from scratch. However, there are a lot of good libraries and frameworks, to make job not only painless, but sometimes even pleasant :) Learn about them more, and I believe you won't regret it."]], [[' def return_movie_html(environ, start_response):\n    request_uri = environ.get(\'REQUEST_URI\')\n    movie_uri = request_uri[request_uri.rfind(\'/\')+1:]\n    start_response(\'200 OK\', [(\'Content-Type\', \'text/html\')])\n    return [\'\'\'\n            <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"\n                                  "http://www.w3.org/TR/html4/strict.dtd">\n            <html>\n            ...\n            <object ...>\n            <param name="allowScriptAccess" value="all" />\n            <param name="flashvars" value= />\n            <param name="movie" value="%(movie)s" />\n            <param name="loop" value="false" />\n            <param name="quality" value="high" />\n            <param name="bgcolor" value="#eeeeee" />\n            <embed src="%(movie)s" loop="false" ... />\n            </object>\n            ...\n            </html>\n            \'\'\' % {\'movie\': movie_uri}]\n']], ['Convert param into python?'], 4], [(1042751, 0), [['One idea would be something like this (untested):'], ['Or this, which fits your data better.']], [[" years, months, days = the_string.split('-')\ndays, time = days.split(' ')\ntime = time.split(':')\n"]], ['Splitting a string @ once using different seps'], 2], [(1042751, 1), [['Or this, which fits your data better.'], ['-10000']], [[' date, time = the_string.split(\' \')\nyears, months, days = date.split(\'-\')\nhours, minute, seconds = time.split(":")\n']], ['Splitting a string @ once using different seps'], 2], [(1042900, 0), [['First we define our own very simple implementation of  datetime.date.today  in a file called  utils/date.py :'], ['Then we create the unittest for this validator in  tests.py :']], [[' import datetime\n\ndef today():\n    return datetime.date.today()\n']], ['Django unit testing with date/time-based objects'], 3], [(1042900, 1), [['Then we create the unittest for this validator in  tests.py :'], ['The final implementation looks like this:']], [[" import datetime\nimport mock\nfrom unittest2 import TestCase\n\nfrom django.core.exceptions import ValidationError\n\nfrom .. import validators\n\nclass ValidationTests(TestCase):\n    @mock.patch('utils.date.today')\n    def test_validate_future_date(self, today_mock):\n        # Pin python's today to returning the same date\n        # always so we can actually keep on unit testing in the future :)\n        today_mock.return_value = datetime.date(2010, 1, 1)\n\n        # A future date should work\n        validators.validate_future_date(datetime.date(2010, 1, 2))\n\n        # The mocked today's date should fail\n        with self.assertRaises(ValidationError) as e:\n            validators.validate_future_date(datetime.date(2010, 1, 1))\n        self.assertEquals([u'Date should be in the future.'], e.exception.messages)\n\n        # Date in the past should also fail\n        with self.assertRaises(ValidationError) as e:\n            validators.validate_future_date(datetime.date(2009, 12, 31))\n        self.assertEquals([u'Date should be in the future.'], e.exception.messages)\n"]], ['Django unit testing with date/time-based objects'], 3], [(1042900, 2), [['The final implementation looks like this:'], ['Hope this helps']], [[" from django.utils.translation import ugettext_lazy as _\nfrom django.core.exceptions import ValidationError\n\nfrom utils import date\n\ndef validate_future_date(value):\n    if value <= date.today():\n        raise ValidationError(_('Date should be in the future.'))\n"]], ['Django unit testing with date/time-based objects'], 3], [(1043708, 0), [['Gettext is the way to go, in your example you can also use gettext to "avoid storing the translations in the code":'], ['might be the same with gettext as:']], [[' wx.MessageBox(messages.GREET_SO)\n']], ['Making a wxPython application multilingual '], 2], [(1043708, 1), [['might be the same with gettext as:'], ["Gettext is pretty much the standard for multilingual applications, and I'm pretty sure you'll benefit from using it in the future. Example, you can use Poedit (or other similar app) to assign translations to your collaborators or contributors and later on flag one or several messages as not properly translated. Also if there are missing / extra entries poedit will warn you. Don't fool yourself, gettext is the only proven reliable way to maintain translations."]], [[' wx.MessageBox(_("GREET_SO")) or wx.MessageBox(_("messages.GREET_SO"))\n']], ['Making a wxPython application multilingual '], 2], [(1045628, 0), [['Once you open a document, you could do the following. \nAfter the following code, you can Close the document & open another.'], ['EDIT: After looking at some code by Matthew, you could do the following']], [[' Selection.Find.ClearFormatting\nSelection.Find.Replacement.ClearFormatting\nWith Selection.Find\n    .Text = "test"\n    .Replacement.Text = "test2"\n    .Forward = True\n    .Wrap = wdFindContinue\n    .Format = False\n    .MatchCase = False\n    .MatchWholeWord = False\n    .MatchKashida = False\n    .MatchDiacritics = False\n    .MatchAlefHamza = False\n    .MatchControl = False\n    .MatchWildcards = False\n    .MatchSoundsLike = False\n    .MatchAllWordForms = False\nEnd With\nSelection.Find.Execute Replace:=wdReplaceAll\n']], ['Can I use Win32 COM to replace text inside a word document?'], 4], [(1045628, 1), [['EDIT: After looking at some code by Matthew, you could do the following'], ['(VB)']], [[' MSWord.Documents.Open(filename)\nSelection = MSWord.Selection\n']], ['Can I use Win32 COM to replace text inside a word document?'], 4], [(1045628, 2), [['(VB)'], ['Python']], [[' With Selection.Find\n    .Text = "test"\n    .Replacement.Text = "test2"\nEnd With\n']], ['Can I use Win32 COM to replace text inside a word document?'], 4], [(1045628, 3), [['Python'], ['Pardon my python knowledge. But, I hope you get the idea to move forward. \nRemember to do a Save & Close on Document, after you are done with the find/replace operation.']], [[' find = Selection.Find\nfind.Text = "test"\nfind.Replacement.Text = "test2"\n']], ['Can I use Win32 COM to replace text inside a word document?'], 4], [(1048265, 0), [['On Django 1.0.x you can count automatically with an extra field:'], ['Then you can query like this:']], [[' class Lesson(models.Model):\n    contents = models.TextField()\n    visit_count = models.IntegerField(default=0)\n\nclass StatLesson(models.Model):\n    lesson = models.ForeignKey(Lesson)\n    datetime = models.DateTimeField(default=datetime.datetime.now())\n\n    def save(self, *args, **kwargs):\n        if self.pk is None:\n            self.lesson.visit_count += 1\n            self.lesson.save()\n        super(StatLesson, self).save(*args, **kwargs)\n']], ['How to sort on number of visits in Django app?'], 2], [(1048265, 1), [['Then you can query like this:'], ['-10000']], [[" Lesson.objects.all().order_by('visit_count')\n"]], ['How to sort on number of visits in Django app?'], 2], [(1049551, 0), [['Just delete the timestamp from the dict before doing the comparison:'], ['If you find yourself doing a lot of time-related tests that involve  datetime.now()  then you can monkeypatch the datetime class for your unit tests.  Consider this']], [[' class MonkeyTester(unittest.TestCase):\n    def test_myfunc(self):\n        without_timestamp = my_func()\n        del without_timestamp["monkey_creation"]\n        self.assertEqual(without_timestamp, {\'monkey_head_count\': 3})\n']], ['Dictionaries with volatile values in Python unit tests?'], 3], [(1049551, 1), [['If you find yourself doing a lot of time-related tests that involve  datetime.now()  then you can monkeypatch the datetime class for your unit tests.  Consider this'], ["Now whenever you call  datetime.datetime.now()  in your unit tests, it'll always return the  constant_now  timestamp.  And if you want/need to switch back to the original  datetime.datetime.now()  then you can simple say"]], [[' import datetime\nconstant_now = datetime.datetime(2009,8,7,6,5,4)\nold_datetime_class = datetime.datetime\nclass new_datetime(datetime.datetime):\n    @staticmethod\n    def now():\n        return constant_now\n\ndatetime.datetime = new_datetime\n']], ['Dictionaries with volatile values in Python unit tests?'], 3], [(1049551, 2), [["Now whenever you call  datetime.datetime.now()  in your unit tests, it'll always return the  constant_now  timestamp.  And if you want/need to switch back to the original  datetime.datetime.now()  then you can simple say"], ["and things will be back to normal.  This sort of thing can be useful, though in the simple example you gave, I'd recommend just deleting the timestamp from the dict before comparing."]], [[' datetime.datetime = old_datetime_class\n']], ['Dictionaries with volatile values in Python unit tests?'], 3], [(1050089, 0), [['From a code standpoint I would have the following objects:'], ['The config file might look like this:']], [[' # Reads in a config file, decides which feed to use, and passes\n# the commands in to one of the classes below for import and export\nclass FeedManager\n\n# Get data from db into a canonical format\nclass DbImport\n\n# Put data into db from a canonical format\nclass DbExport\n\n# Get data from ftp into a canonical format\nclass FtpImport\n\n# Put data into ftp from canonical format\nclass FtpExport\n']], ['Get remote text file, process, and update database - approach and scripting language to use?'], 3], [(1050089, 1), [['The config file might look like this:'], ['And finally, you would call it like this:']], [[' [GetVitalStats]\nSourceUrl=ftp.myhost.com\nSourceType=FTP\n\nDestination=Host=mydbserver; Database=somedb\nSourceType=Postgres\n']], ['Get remote text file, process, and update database - approach and scripting language to use?'], 3], [(1050089, 2), [['And finally, you would call it like this:'], ['-10000']], [[' process_feed.py --feed=GetVitalStats\n']], ['Get remote text file, process, and update database - approach and scripting language to use?'], 3], [(1052589, 0), [['here is a simple script without regex'], ['it outputs']], [[' lines = open("/proc/net/dev", "r").readlines()\n\ncolumnLine = lines[1]\n_, receiveCols , transmitCols = columnLine.split("|")\nreceiveCols = map(lambda a:"recv_"+a, receiveCols.split())\ntransmitCols = map(lambda a:"trans_"+a, transmitCols.split())\n\ncols = receiveCols+transmitCols\n\nfaces = {}\nfor line in lines[2:]:\n    if line.find(":") < 0: continue\n    face, data = line.split(":")\n    faceData = dict(zip(cols, data.split()))\n    faces[face] = faceData\n\nimport pprint\npprint.pprint(faces)\n']], ['How can I parse the output of /proc/net/dev into key:value pairs per interface using Python?'], 2], [(1052589, 1), [['it outputs'], ['-10000']], [[" {'    lo': {'recv_bytes': '7056295',\n            'recv_compressed': '0',\n            'recv_drop': '0',\n            'recv_errs': '0',\n            'recv_fifo': '0',\n            'recv_frame': '0',\n            'recv_multicast': '0',\n            'recv_packets': '12148',\n            'trans_bytes': '7056295',\n            'trans_carrier': '0',\n            'trans_colls': '0',\n            'trans_compressed': '0',\n            'trans_drop': '0',\n            'trans_errs': '0',\n            'trans_fifo': '0',\n            'trans_packets': '12148'},\n '  eth0': {'recv_bytes': '34084530',\n            'recv_compressed': '0',\n            'recv_drop': '0',\n            'recv_errs': '0',\n            'recv_fifo': '0',\n            'recv_frame': '0',\n            'recv_multicast': '0',\n            'recv_packets': '30599',\n            'trans_bytes': '6170441',\n            'trans_carrier': '0',\n            'trans_colls': '0',\n            'trans_compressed': '0',\n            'trans_drop': '0',\n            'trans_errs': '0',\n            'trans_fifo': '0',\n            'trans_packets': '32377'}}\n"]], ['How can I parse the output of /proc/net/dev into key:value pairs per interface using Python?'], 2], [(1052716, 0), [["There isn't an API to do it in Python 2.5, but you can just:"], ['in your child processes - if you know you only have one exit handler installed, and that no other handlers are installed. However, be aware that some parts of the stdlib (e.g.  logging ) register  atexit  handlers. To avoid trampling on them, you could try:']], [[' import atexit\natexit._exithandlers = []\n']], ['Is registered atexit handler inherited by spawned child processes?'], 2], [(1052716, 1), [['in your child processes - if you know you only have one exit handler installed, and that no other handlers are installed. However, be aware that some parts of the stdlib (e.g.  logging ) register  atexit  handlers. To avoid trampling on them, you could try:'], ['where  my_handler_func  is the  atexit  handler you registered, and this should remove your entry without removing the others.']], [[' my_handler_entries = [e for e in atexit._exithandlers if e[0] == my_handler_func]\nfor e in my_handler_entries:\n    atexit._exithandlers.remove(e)\n']], ['Is registered atexit handler inherited by spawned child processes?'], 2], [(1053053, 0), [['One solution is to store the subclass name in ArticleBase and some methods that return the subclass or subclass object based on that information.  As multi-table inheritance defines a property on the parent instance to access a child instance, this is all pretty straight forward.'], ['It could be useful to have the following in ArticleBase:']], [[' from django.db import models\n\nclass ArticleBase(models.Model):\n    title = models.CharField()\n    author = models.CharField()\n    # Store the actual class name.\n    class_name = models.CharField()\n\n    # Define save to make sure class_name is set.\n    def save(self, *args, **kwargs):\n        self.class_name = self.__class__.__name__\n        super(ArticleBase, self).save(*args, **kwargs)\n\n    # Multi-table inheritance defines an attribute to fetch the child\n    # from a parent instance given the lower case subclass name.\n    def get_child(self):\n        return getattr(self, self.class_name.lower())\n\n    # If indeed you really need the class.\n    def get_child_class(self):\n        return self.get_child().__class__\n\n    # Check the type against a subclass name or a subclass.\n    # For instance, \'if article.child_is(News):\'\n    # or \'if article.child_is("News"):\'.\n    def child_is(self, cls):\n        if isinstance(cls, basestring):\n            return cls.lower() == self.class_name.lower()\n        else:\n            return self.get_child_class()  == cls\n\nclass Review(ArticleBase):\n    rating = models.IntegerField()\n\nclass News(ArticleBase):\n    source = models.CharField()\n']], ['Can you access a subbed-classed model from within the super-class model in the Django ORM?'], 2], [(1053053, 1), [['It could be useful to have the following in ArticleBase:'], ['In that case, be aware that failure to define  __unicode__  in the subclasses, or calling  __unicode__  on an instance of ArticleBase (one that has not been subclassed) would lead to an infinite recursion.  Thus the admonition below re sanity checking (for instance, preventing just such an instantiation of ArticleBase directly).']], [[' def __unicode__(self)\n    return self.get_child().__unicode__()\n']], ['Can you access a subbed-classed model from within the super-class model in the Django ORM?'], 2], [(1053481, 0), [['The simplest regex a user (or I) could use is:'], ["I'll allow a few different named groups for these:"]], [[' (\\w+\\).s(\\d+)\\.e(\\d+)\n']], ['Regex and a sequences of patterns?'], 4], [(1053481, 1), [["I'll allow a few different named groups for these:"], ["To support multiple episodes, I'll support two named groups, something like  startingepisodenumber  and  endingepisodenumber  to support things like  showname.s01e01-03 :"]], [[' (?P<showname>\\w+\\).s(?P<seasonnumber>\\d+)\\.e(?P<episodenumber>\\d+)\n']], ['Regex and a sequences of patterns?'], 4], [(1053481, 2), [["To support multiple episodes, I'll support two named groups, something like  startingepisodenumber  and  endingepisodenumber  to support things like  showname.s01e01-03 :"], ['And finally, allow named groups with names matching  episodenumber\\d+  ( episodenumber1 ,  episodenumber2  etc):']], [[' (?P<showname>\\w+\\)\\.s(?P<seasonnumber>\\d+)\\.e(?P<startingepisodenumber>\\d+)-(?P<endingepisodenumber>e\\d+)\n']], ['Regex and a sequences of patterns?'], 4], [(1053481, 3), [['And finally, allow named groups with names matching  episodenumber\\d+  ( episodenumber1 ,  episodenumber2  etc):'], ['It still requires possibly duplicating the patterns for different amounts of  e01 s, but there will never be a file with two non-consecutive episodes (like  show.s01e01e03e04 ), so using the  starting/endingepisodenumber  groups should solve this, and for weird cases users come across, they can use the  episodenumber\\d+  group names']], [[' (?P<showname>\\w+\\)\\.\ns(?P<seasonnumber>\\d+)\\.\ne(?P<episodenumber1>\\d+)\ne(?P<episodenumber2>\\d+)\ne(?P<episodenumber3>\\d+)\n']], ['Regex and a sequences of patterns?'], 4], [(1055410, 0), [["Here's a quick hack on how to subclass  dict  to meet your specs, but probably not to meet Python's specs for a dictionary:"], ['which prints']], [[" class MyDict(dict):\n    def __getitem__(self, key):\n        if key == 'density':\n           return self['mass'] / self['volume']\n        else:\n            return dict.__getitem__(self,key)\n    def keys(self):\n        return ['density'] + dict.keys(self)\n\nx = MyDict()\nx['mass'] = 1.0\nx['volume'] = 0.5\n\nprint x\n\nprint x.keys()\n\nprint x['density']\n\nx['mass'] = 2.0\n\nprint x['density']\n"]], ['Python: linking/binding variables together in a dictionary'], 2], [(1055410, 1), [['which prints'], ["But that doesn't account for dict.iterkeys(), among other things."]], [[" {'volume': 0.5, 'mass': 1.0}\n['density', 'volume', 'mass']\n2.0\n4.0\n"]], ['Python: linking/binding variables together in a dictionary'], 2], [(1055646, 0), [['collections.defaultdict  from the standard library to the rescue:'], ['emits']], [[" from collections import defaultdict\n\nLofD = [{'name': 'johnny', 'surname': 'smith', 'age': 53},\n {'name': 'johnny', 'surname': 'ryan', 'age': 13},\n {'name': 'jakob', 'surname': 'smith', 'age': 27},\n {'name': 'aaron', 'surname': 'specter', 'age': 22},\n {'name': 'max', 'surname': 'headroom', 'age': 108},\n]\n\ndef counters():\n  return defaultdict(int)\n\ndef freqs(LofD):\n  r = defaultdict(counters)\n  for d in LofD:\n    for k, v in d.items():\n      r[k][v] += 1\n  return dict((k, dict(v)) for k, v in r.items())\n\nprint freqs(LofD)\n"]], ['item frequency in a python list of dictionaries'], 2], [(1055646, 1), [['emits'], ["as desired (order of keys apart, of course -- it's irrelevant in a dict)."]], [[" {'age': {27: 1, 108: 1, 53: 1, 22: 1, 13: 1}, 'surname': {'headroom': 1, 'smith': 2, 'specter': 1, 'ryan': 1}, 'name': {'jakob': 1, 'max': 1, 'aaron': 1, 'johnny': 2}}\n"]], ['item frequency in a python list of dictionaries'], 2], [(1056651, 0), [['pipelines.py :'], ['items.py :']], [[' from grabbers.items import FeedItem\n\nclass StoreFeedPost(object):\n\n    def process_item(self, domain, item):\n        if isinstance(item, FeedItem):\n            #process it...\n\n        return item\n']], ['Python Scrapy , how to define a pipeline for an item?'], 2], [(1056651, 1), [['items.py :'], ['-10000']], [[' from scrapy.item import ScrapedItem\n\nclass FeedItem(ScrapedItem):\n    pass\n']], ['Python Scrapy , how to define a pipeline for an item?'], 2], [(1057252, 0), [["A much better way is to override the form's  __init__  method to take an extra keyword argument,  request . This stores the request in the  form , where it's required, and from where you can access it in your clean method."], ['and in your view:']], [[" class MyForm(forms.Form):\n\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request', None)\n        super(MyForm, self).__init__(*args, **kwargs)\n\n\n    def clean(self):\n        ... access the request object via self.request ...\n"]], ["How do I access the request object or any other variable in a form's clean() method?"], 2], [(1057252, 1), [['and in your view:'], ['-10000']], [[' myform = MyForm(request.POST, request=request)\n']], ["How do I access the request object or any other variable in a form's clean() method?"], 2], [(1057518, 0), [['Defining'], ['This is not necessary, however. When you instanciate']], [[' def __init__(self):\n    self.foo = 5\n']], ['How to call a data member of the base class if it is being overwritten as a property in the derived class?'], 5], [(1057518, 1), [['This is not necessary, however. When you instanciate'], ['and the  __init__()  method of the base class calls']], [[' foobar = Derived()\n']], ['How to call a data member of the base class if it is being overwritten as a property in the derived class?'], 5], [(1057518, 2), [['and the  __init__()  method of the base class calls'], ["this will not result in the creation / overwriting of the attribute, but instead in  Derived 's setter being called, meaning"]], [[' self.foo = 5\n']], ['How to call a data member of the base class if it is being overwritten as a property in the derived class?'], 5], [(1057518, 3), [["this will not result in the creation / overwriting of the attribute, but instead in  Derived 's setter being called, meaning"], ['and thus  self._foo = 5 . So if you put']], [[' self.foo.fset(5)\n']], ['How to call a data member of the base class if it is being overwritten as a property in the derived class?'], 5], [(1057518, 4), [['and thus  self._foo = 5 . So if you put'], ["in your getter, you pretty much get what you want. If you need the value that  self.foo  is set to in  Base 's constructor, just look at  _foo , which was set correctly by the  @foo.setter ."]], [[' return 1 + self._foo\n']], ['How to call a data member of the base class if it is being overwritten as a property in the derived class?'], 5], [(1057934, 0), [['In other words, in  to_import_from.py :'], ['and then in  main_module.py :']], [[' class InstrumentBase(object):\n    def external_method(self, arg1, arg2):\n        if self.flag:\n            ...\n']], ['Importing methods for a Python class'], 2], [(1057934, 1), [['and then in  main_module.py :'], ['-10000']], [[' import to_import_from\n\nclass Instrument(to_import_from.InstrumentBase):\n    def __init__(self):\n        ...\n']], ['Importing methods for a Python class'], 2], [(1058599, 0), [['As per the docs, you first make a parse tree:'], ['and then you search in it, for example for  <a>  tags whose immediate parent is a  <td> :']], [[' import BeautifulSoup\nhtml = "<html><body><tr><td><a href=\'foo\'/></td></tr></body></html>"\nsoup = BeautifulSoup.BeautifulSoup(html)\n']], ['How to get a nested element in beautiful soup'], 2], [(1058599, 1), [['and then you search in it, for example for  <a>  tags whose immediate parent is a  <td> :'], ['-10000']], [[' for ana in soup.findAll(\'a\'):\n  if ana.parent.name == \'td\':\n    print ana["href"]\n']], ['How to get a nested element in beautiful soup'], 2], [(1060193, 0), [['In this case, you need to make your function return the decorator. (Anything can be solved by another level of indirection...)'], ["This means  substitute_args  isn't a decorator itself, it's a decorator  factory . Here's the equivalent without the  decorator  module."]], [[' from decorator import decorator\ndef substitute_args(arg_sub_dict):\n  @decorator\n  def wrapper(fun, arg):\n    new_arg = arg_sub_dict.get(arg, arg)\n    return fun(new_arg)\n  return wrapper\n']], ['Python Decorator 3.0 and arguments to the decorator'], 4], [(1060193, 1), [["This means  substitute_args  isn't a decorator itself, it's a decorator  factory . Here's the equivalent without the  decorator  module."], ["Three levels deep isn't very convenient, but remember two of them are when the function is defined:"]], [[' def substitute_args(arg_sub_dict):\n  def my_decorator(fun):\n    def wrapper(arg):\n      new_arg = arg_sub_dict.get(arg, arg)\n      return fun(new_arg)\n    # magic to update __name__, etc.\n    return wrapper\n  return my_decorator\n']], ['Python Decorator 3.0 and arguments to the decorator'], 4], [(1060193, 2), [["Three levels deep isn't very convenient, but remember two of them are when the function is defined:"], ['Which is equivalent to:']], [[' @substitute_args({}) # this function is called and return value is the decorator\ndef f(x):\n  return x\n# that (anonymous) decorator is applied to f\n']], ['Python Decorator 3.0 and arguments to the decorator'], 4], [(1060193, 3), [['Which is equivalent to:'], ['-10000']], [[' def f(x):\n  return x\nf = substitude_args({})(f) # notice the double call\n']], ['Python Decorator 3.0 and arguments to the decorator'], 4], [(1060279, 0), [['Why are there two nested iterations? For me it produces the same list of data with only one iteration:'], ['After all, a linear sequence should only require one iterator, not two.']], [[' for single_date in (start_date + timedelta(n) for n in range(day_count)):\n    print ...\n']], ['Iterating through a range of dates in Python'], 2], [(1060279, 1), [['After all, a linear sequence should only require one iterator, not two.'], ['NB: For consistency with the built-in  range()  function this iteration stops  before  reaching the  end_date . So for inclusive iteration use the next day, as you would with  range() .']], [[' from datetime import timedelta, date\n\ndef daterange(start_date, end_date):\n    for n in range(int ((end_date - start_date).days)):\n        yield start_date + timedelta(n)\n\nstart_date = date(2013, 1, 1)\nend_date = date(2015, 6, 2)\nfor single_date in daterange(start_date, end_date):\n    print single_date.strftime("%Y-%m-%d")\n']], ['Iterating through a range of dates in Python'], 2], [(1061283, 0), [['For example:'], ["Of course, if your class has some particularly fast way to implement (e.g.)  __eq__  and  __ne__ , it should define them directly so the mixin's versions are not use (for example, that is the case for  dict ) -- in fact  __ne__  might well be defined to facilitate that as:"]], [[' class ComparableMixin:\n  def __eq__(self, other):\n    return not self<other and not other<self\n  def __ne__(self, other):\n    return self<other or other<self\n  def __gt__(self, other):\n    return other<self\n  def __ge__(self, other):\n    return not self<other\n  def __le__(self, other):\n    return not other<self\n']], ['__lt__ instead of __cmp__'], 3], [(1061283, 1), [["Of course, if your class has some particularly fast way to implement (e.g.)  __eq__  and  __ne__ , it should define them directly so the mixin's versions are not use (for example, that is the case for  dict ) -- in fact  __ne__  might well be defined to facilitate that as:"], ["Further edit: there's actually an even better way to provide comparison AND hashing for many classes, including that in the question -- a  __key__  method, as I mentioned on my comment to the question. Since I never got around to writing the PEP for it, you must currently implement it with a Mixin (&c) if you like it:"]], [[' def __ne__(self, other):\n  return not self == other\n']], ['__lt__ instead of __cmp__'], 3], [(1061283, 2), [["Further edit: there's actually an even better way to provide comparison AND hashing for many classes, including that in the question -- a  __key__  method, as I mentioned on my comment to the question. Since I never got around to writing the PEP for it, you must currently implement it with a Mixin (&c) if you like it:"], ["It's a very common case for an instance's comparisons with other instances to boil down to comparing a tuple for each with a few fields -- and then, hashing should be implemented on exactly the same basis. The  __key__  special method addresses that need directly."]], [[' class KeyedMixin:\n  def __lt__(self, other):\n    return self.__key__() < other.__key__()\n  # and so on for other comparators, as above, plus:\n  def __hash__(self):\n    return hash(self.__key__())\n']], ['__lt__ instead of __cmp__'], 3], [(1061590, 0), [['So I would do it like this:'], ['Here\'s a version using generators, It saves a couple of lines, and memory if the values are really big, but as recursion, generators can be tricky to "get". ']], [[" from __future__ import division\nfrom math import ceil\n\ndef make_combos(max_val,target_sum,n_cells):\n    combos = []\n    # The highest possible value of the next cell is whatever is \n    # largest of the max_val, or the target_sum minus the number \n    # of remaining cells (as you can't enter 0).\n    highest = min(max_val, target_sum - n_cells + 1)\n    # The lowest is the lowest number you can have that will add upp to \n    # target_sum if you multiply it with n_cells.\n    lowest = int(ceil(target_sum/n_cells))\n    for x in range(highest, lowest-1, -1):\n        if n_cells == 1: # This is the last cell, no more recursion.\n            combos.append((x,))\n            break\n        # Recurse to get the next cell:\n        # Set the max to x (or we'll get duplicates like\n        # (6,3,2,1) and (6,2,3,1), which is pointless.\n        # Reduce the target_sum with x to keep the sum correct.\n        # Reduce the number of cells with 1.\n        for combo in make_combos(x, target_sum-x, n_cells-1):\n            combos.append((x,)+combo)\n    return combos\n\nif __name__ == '__main__':\n    import pprint\n    # And by using pprint the output gets easier to read\n    pprint.pprint(make_combos( 6,12,4))\n"]], ['KenKen puzzle addends: REDUX A (corrected) non-recursive algorithm'], 2], [(1061590, 1), [['Here\'s a version using generators, It saves a couple of lines, and memory if the values are really big, but as recursion, generators can be tricky to "get". '], ['-10000']], [[" from __future__ import division\nfrom math import ceil\n\ndef make_combos(max_val,target_sum,n_cells):\n    highest = min(max_val, target_sum - n_cells + 1)\n    lowest = int(ceil(target_sum/n_cells))\n    for x in xrange(highest, lowest-1, -1):\n        if n_cells == 1:\n            yield (x,)\n            break\n        for combo in make_combos(x, target_sum-x, n_cells-1):\n            yield (x,)+combo\n\nif __name__ == '__main__':\n    import pprint\n    pprint.pprint(list(make_combos( 6,12,4)))\n"]], ['KenKen puzzle addends: REDUX A (corrected) non-recursive algorithm'], 2], [(1061937, 0), [['-10000'], ['Edit : as the OP aks how to insert > 1 item at the start of each sublist, let me point out that the most efficient way is by assignment of the multiple items to a slice of each sublist (most list mutators can be seen as readable alternatives to slice assignments;-), i.e.:']], [[' for sublist in thelist:\n  sublist.insert(0, 9)\n']], ['Modifying list contents in Python'], 2], [(1061937, 1), [['Edit : as the OP aks how to insert > 1 item at the start of each sublist, let me point out that the most efficient way is by assignment of the multiple items to a slice of each sublist (most list mutators can be seen as readable alternatives to slice assignments;-), i.e.:'], ["sublist[0:0]  is the empty slice at the start of  sublist , and by assigning items to it you're inserting the items at that very spot."]], [[' for sublist in thelist:\n  sublist[0:0] = 8, 9\n']], ['Modifying list contents in Python'], 2], [(1062803, 0), [['at the very least use a list comprehension:'], ['otherwise use the  set  class:']], [[' [x for x in a + b if (a + b).count(x) == 1]\n']], ['Get the items not repeated in a list'], 3], [(1062803, 1), [['otherwise use the  set  class:'], ['there is also a more compact form:']], [[' list(set(a).symmetric_difference(set(b)))\n']], ['Get the items not repeated in a list'], 3], [(1062803, 2), [['there is also a more compact form:'], ['-10000']], [[' list(set(a) ^ set(b))\n']], ['Get the items not repeated in a list'], 3], [(1063775, 0), [["To convert it back to binary data in a string, you can use chr() if it's on just one integer. If it's many, you can use the %c formatting character of a string:"], ['However, a better way is probably to use struct.']], [[' >>> "Return value: %c%c%c" % (5,6,7)\n\'Return value: \\x05\\x06\\x07\'\n']], ['Hex data from socket, process and response'], 2], [(1063775, 1), [['However, a better way is probably to use struct.'], ['You may even want to take a look at ctypes.']], [[' >>> import struct\n>>> foo, bar, kaka = struct.unpack("BBB", \'\\x06\\x06\\x06\')\n>>> struct.pack("BBB", foo, bar+1, kaka+5)\n\'\\x06\\x07\\x0b\'\n']], ['Hex data from socket, process and response'], 2], [(1064644, 0), [["I do really like Python for writing multi-line scripts that I can invoke from Vim. For example, I've got one Python script that will, when given a signature for a Java constructor, like this:"], ['will emit a lot of the boilerplate that goes into creating a value class:']], [[' Foo(String name, int size) {\n']], ["Are Python commands suitable in Vim's visual mode?"], 2], [(1064644, 1), [['will emit a lot of the boilerplate that goes into creating a value class:'], ['I use this from Vim by highlighting the signature and then typing  !jhelper.py .']], [[' private final String name;\nprivate final int size;\n\npublic String getName() {\n  return name;\n}\n\npublic int getSize() {\n  return size;\n}\n\n@Override\npublic boolean equals(Object that) {\n  return this == that\n      || (that instanceof Foo && equals((Foo) that));\n}\n\npublic boolean equals(Foo that) {\n  return Objects.equal(getName(), that.getName())\n      && this.getSize() == that.getSize();\n}\n\n@Override\npublic int hashCode() {\n  return Objects.hashCode(\n      getName(),\n      getSize());\n}\n\nFoo(String name, int size) {\n  this.name = Preconditions.checkNotNull(name);\n  this.size = size;\n']], ["Are Python commands suitable in Vim's visual mode?"], 2], [(1066758, 0), [['While not  numpy  primitives,  itertools  functions are often very fast, so do give this one a try (and measure times for various solutions including this one, of course):'], ['If you do need the values in a list, just can use list(runs_of_ones(bits)), of course; but maybe a list comprehension might be marginally faster still:']], [[' def runs_of_ones(bits):\n  for bit, group in itertools.groupby(bits):\n    if bit: yield sum(group)\n']], ['find length of sequences of identical values in a numpy array (run length encoding)'], 3], [(1066758, 1), [['If you do need the values in a list, just can use list(runs_of_ones(bits)), of course; but maybe a list comprehension might be marginally faster still:'], ['Moving to "numpy-native" possibilities, what about:']], [[' def runs_of_ones_list(bits):\n  return [sum(g) for b, g in itertools.groupby(bits) if b]\n']], ['find length of sequences of identical values in a numpy array (run length encoding)'], 3], [(1066758, 2), [['Moving to "numpy-native" possibilities, what about:'], ['Again: be sure to benchmark solutions against each others in realistic-for-you examples!']], [[' def runs_of_ones_array(bits):\n  # make sure all runs of ones are well-bounded\n  bounded = numpy.hstack(([0], bits, [0]))\n  # get 1 at run starts and -1 at run ends\n  difs = numpy.diff(bounded)\n  run_starts, = numpy.where(difs > 0)\n  run_ends, = numpy.where(difs < 0)\n  return run_ends - run_starts\n']], ['find length of sequences of identical values in a numpy array (run length encoding)'], 3], [(1068246, 0), [['The "fast" subset.'], ['The "slow" subset.']], [[' fast = TestSuite()\nfast.addTests( TestFastThis )\nfast.addTests( TestFastThat )\n']], ['Python unittest: how to run only part of a test file?'], 4], [(1068246, 1), [['The "slow" subset.'], ['The "whole" set.']], [[' slow = TestSuite()\nslow.addTests( TestSlowAnother )\nslow.addTests( TestSlowSomeMore )\n']], ['Python unittest: how to run only part of a test file?'], 4], [(1068246, 2), [['The "whole" set.'], ['Or, you can trust that  sys.argv[1]  is one of three values and use something as simple as this']], [[' alltests = unittest.TestSuite([fast, slow])\n']], ['Python unittest: how to run only part of a test file?'], 4], [(1068246, 3), [['Or, you can trust that  sys.argv[1]  is one of three values and use something as simple as this'], ['-10000']], [[' if __name__ == "__main__":\n    suite = eval(sys.argv[1])  # Be careful with this line!\n    unittest.TextTestRunner().run(suite)\n']], ['Python unittest: how to run only part of a test file?'], 4], [(1070926, 0), [["To determine if every element is odd, I'd use  all()"], ["In general, however, Ruby's  inject  is most like Python's  reduce() :"]], [[' def is_odd(x): \n    return x%2==1\n\nresult = all(is_odd(x) for x in [1,3,5,7])\n']], ['Equivalent for inject() in Python?'], 2], [(1070926, 1), [["In general, however, Ruby's  inject  is most like Python's  reduce() :"], ['all()  is preferred in this case because it will be able to escape the loop once it finds a  False -like value, whereas the  reduce  solution would have to process the entire list to return an answer.']], [[' result = reduce(lambda x,y: x and y%2==1, [1,3,5,7], True)\n']], ['Equivalent for inject() in Python?'], 2], [(1071793, 0), [["It's probably easiest to just create a class for the (Name, Strength) tuple:"], ['Then you can use the new class in your map:']], [[' class NameStrength {\n    public String name;\n    public String strength;\n}\n']], ['how to convert a python dict object to a java equivalent object?'], 4], [(1071793, 1), [['Then you can use the new class in your map:'], ['In Java 5 and up, you can iterate like this:']], [[' Map<Integer, NameStrength> nodesMap = new HashMap<Integer, NameStrength>();\n']], ['how to convert a python dict object to a java equivalent object?'], 4], [(1071793, 2), [['In Java 5 and up, you can iterate like this:'], ['or like this:']], [[' for (NameStrength nameStrength : nodesMap.values()) {}\n']], ['how to convert a python dict object to a java equivalent object?'], 4], [(1071793, 3), [['or like this:'], ['-10000']], [[' for (Entry<Integer, NameStrength> entry : nodesMap.entrySet()) {}\n']], ['how to convert a python dict object to a java equivalent object?'], 4], [(1072569, 0), [['See  http://docs.python.org/library/filecmp.html \ne.g.'], ['Disclaimer: this is not the best way of timing or comparing two algo. and there is need for improvements but it does give rough idea. If you think it should be improved do tell me I will change it.']], [[" >>> import filecmp\n>>> filecmp.cmp('file1.txt', 'file1.txt')\nTrue\n>>> filecmp.cmp('file1.txt', 'file2.txt')\nFalse\n"]], ['see if two files have the same content in python'], 3], [(1072569, 1), [['Disclaimer: this is not the best way of timing or comparing two algo. and there is need for improvements but it does give rough idea. If you think it should be improved do tell me I will change it.'], ['and the output is']], [[' import random\nimport string\nimport hashlib\nimport time\n\ndef getRandText(N):\n    return  "".join([random.choice(string.printable) for i in xrange(N)])\n\nN=1000000\nrandText1 = getRandText(N)\nrandText2 = getRandText(N)\n\ndef cmpHash(text1, text2):\n    hash1 = hashlib.md5()\n    hash1.update(text1)\n    hash1 = hash1.hexdigest()\n\n    hash2 = hashlib.md5()\n    hash2.update(text2)\n    hash2 = hash2.hexdigest()\n\n    return  hash1 == hash2\n\ndef cmpByteByByte(text1, text2):\n    return text1 == text2\n\nfor cmpFunc in (cmpHash, cmpByteByByte):\n    st = time.time()\n    for i in range(10):\n        cmpFunc(randText1, randText2)\n    print cmpFunc.func_name,time.time()-st\n']], ['see if two files have the same content in python'], 3], [(1072569, 2), [['and the output is'], ['-10000']], [[' cmpHash 0.234999895096\ncmpByteByByte 0.0\n']], ['see if two files have the same content in python'], 3], [(1072821, 0), [["It's not threadsafe even on CPython. Try this to see for yourself:"], ['The reason is that while INPLACE_ADD is atomic under GIL, the attribute is still loaded and store (see  dis.dis(Foo.__init__) ). Use a lock to serialize the access to the class variable:']], [[' import threading\n\nclass Foo(object):\n    instance_count = 0\n\ndef inc_by(n):\n    for i in xrange(n):\n        Foo.instance_count += 1\n\nthreads = [threading.Thread(target=inc_by, args=(100000,)) for thread_nr in xrange(100)]\nfor thread in threads: thread.start()\nfor thread in threads: thread.join()\n\nprint(Foo.instance_count) # Expected 10M for threadsafe ops, I get around 5M\n']], ['Is modifying a class variable in python threadsafe?'], 2], [(1072821, 1), [['The reason is that while INPLACE_ADD is atomic under GIL, the attribute is still loaded and store (see  dis.dis(Foo.__init__) ). Use a lock to serialize the access to the class variable:'], ['-10000']], [[' Foo.lock = threading.Lock()\n\ndef interlocked_inc(n):\n    for i in xrange(n):\n        with Foo.lock:\n            Foo.instance_count += 1\n\nthreads = [threading.Thread(target=interlocked_inc, args=(100000,)) for thread_nr in xrange(100)]\nfor thread in threads: thread.start()\nfor thread in threads: thread.join()\n\nprint(Foo.instance_count)\n']], ['Is modifying a class variable in python threadsafe?'], 2], [(1072977, 0), [['I doubt these two lines'], ['this is a simple recursive structure so  i think something like below will suffice']], [[' score += child.points*math.pow(.1, get_ancestors(child))\nscore += get_score(child)\n']], ['Calculate score in a pyramid score system'], 3], [(1072977, 1), [['this is a simple recursive structure so  i think something like below will suffice'], ["you also do not need 'if children:' check\nso does it help"]], [[' score += get_score(child)*.1\n']], ['Calculate score in a pyramid score system'], 3], [(1072977, 2), [["you also do not need 'if children:' check\nso does it help"], ['-10000']], [[' def get_score(player):\n    score = player.points\n    for child in children:\n        score += get_score(child)*.1\n    return score\n']], ['Calculate score in a pyramid score system'], 3], [(1074062, 0), [['Yes, VariantDir is confusing in scons. Although not well advertised, you can put both SConstruct and SConscript in the same directory, using the current directory as the source directory'], ['and']], [[" # SConstruct\nSConscript('SConscript', build_dir='build', src='.')\n"]], ['Why does SCons VariantDir() not put output in the given directory?'], 2], [(1074062, 1), [['and'], ['I have never found a way to avoid using two files while keeping my sanity trying to understand variant dir :)']], [[" # SConscript\nProgram('main.c')\n"]], ['Why does SCons VariantDir() not put output in the given directory?'], 2], [(1080393, 0), [['First, copy and shuffle daily to initialize master:'], ['As I said the alteration part is the interesting one -- what about:']], [[' master = list(daily)\nrandom.shuffle(master)\n']], ['Random list with rules'], 4], [(1080393, 1), [['As I said the alteration part is the interesting one -- what about:'], ['Edit : thanks for the accept, let me complete the answer anyway with a different way of "random mixing preserving order" which does use the right probabilities -- it\'s only slightly more complicated because it cannot just call  random.choice ;-).']], [[' def random_mix(seq_a, seq_b):\n    iters = [iter(seq_a), iter(seq_b)]\n    while True:\n        it = random.choice(iters)\n        try: yield it.next()\n        except StopIteration:\n            iters.remove(it)\n            it = iters[0]\n            for x in it: yield x\n']], ['Random list with rules'], 4], [(1080393, 2), [['Edit : thanks for the accept, let me complete the answer anyway with a different way of "random mixing preserving order" which does use the right probabilities -- it\'s only slightly more complicated because it cannot just call  random.choice ;-).'], ["Of course other optimization opportunities arise here -- since we're tracking the lengths anyway, we could rely on a length having gone down to zero rather than on try/except to detect that one sequence is finished and we should just exhaust the other one, etc etc. But, I wanted to show the version closest to my original one. Here's one exploiting this idea to optimize and simplify:"]], [[' def random_mix_rp(seq_a, seq_b):\n    iters = [iter(seq_a), iter(seq_b)]\n    lens = [len(seq_a), len(seq_b)]\n    while True:\n        r = random.randrange(sum(lens))\n        itindex = r < lens[0]\n        it = iters[itindex]\n        lens[itindex] -= 1\n\n        try: yield it.next()\n        except StopIteration:\n            iters.remove(it)\n            it = iters[0]\n            for x in it: yield x\n']], ['Random list with rules'], 4], [(1080393, 3), [["Of course other optimization opportunities arise here -- since we're tracking the lengths anyway, we could rely on a length having gone down to zero rather than on try/except to detect that one sequence is finished and we should just exhaust the other one, etc etc. But, I wanted to show the version closest to my original one. Here's one exploiting this idea to optimize and simplify:"], ['-10000']], [[' def random_mix_rp1(seq_a, seq_b):\n    iters = [iter(seq_a), iter(seq_b)]\n    lens = [len(seq_a), len(seq_b)]\n    while all(lens):\n        r = random.randrange(sum(lens))\n        itindex = r < lens[0]\n        it = iters[itindex]\n        lens[itindex] -= 1\n        yield it.next()\n    for it in iters:\n        for x in it: yield x\n']], ['Random list with rules'], 4], [(1085071, 0), [['Looping over a file unavoidably buffers things in pretty large chunks -- a known issue with all Python 2.* implementations. It works as you intend in Python 3.1, with the final loop being slightly different:'], ['If upgrading to Python 3.1 is impractical (and I know it will often be!), go the other way and write the loop in an old-fashioned manner -- the following version of the loop does work as you intend in Python 2.*:']], [[' for line in proc.stdout:\n    print(">>> " + str(line.rstrip()))\n']], ['Real-time intercepting of stdout from another process in Python'], 2], [(1085071, 1), [['If upgrading to Python 3.1 is impractical (and I know it will often be!), go the other way and write the loop in an old-fashioned manner -- the following version of the loop does work as you intend in Python 2.*:'], ['-10000']], [[' while True:\n    line = proc.stdout.readline()\n    if not line:\n        break\n    print ">>> " + line.rstrip()\n']], ['Real-time intercepting of stdout from another process in Python'], 2], [(1085852, 0), [["Using setx has few drawbacks, especially if you're trying to append to environment variables (eg. setx PATH %Path%;C:\\mypath) This will repeatedly append to the path every time you run it, which can be a problem. Worse, it doesn't distinguish between the machine path (stored in HKEY_LOCAL_MACHINE), and the user path, (stored in HKEY_CURRENT_USER). The environment variable you see at a command prompt is made up of a concatenation of these two values. Hence, before calling setx:"], ['Trying to compensate for this in DOS is beyond my ability. So I turned to Python. The solution I have come up with today, to set environment variables by tweaking the registry, including appending to PATH without introducing duplicates, is as follows:']], [[' user PATH == u\nmachine PATH == m\n%PATH% == m;u\n\n> setx PATH %PATH%;new\n\nCalling setx sets the USER path by default, hence now:\nuser PATH == m;u;new\nmachine PATH == m\n%PATH% == m;m;u;new\n']], ['Interface for modifying Windows environment variables from Python'], 2], [(1085852, 1), [['Trying to compensate for this in DOS is beyond my ability. So I turned to Python. The solution I have come up with today, to set environment variables by tweaking the registry, including appending to PATH without introducing duplicates, is as follows:'], ['It does not affect the current process or the parent shell, but it will affect all cmd windows opened after it is run, without needing a reboot, and can safely be edited and re-run many times without introducing any duplicates.']], [[" from os import system, environ\nimport win32con\nfrom win32gui import SendMessage\nfrom _winreg import (\n    CloseKey, OpenKey, QueryValueEx, SetValueEx,\n    HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE,\n    KEY_ALL_ACCESS, KEY_READ, REG_EXPAND_SZ, REG_SZ\n)\n\ndef env_keys(user=True):\n    if user:\n        root = HKEY_CURRENT_USER\n        subkey = 'Environment'\n    else:\n        root = HKEY_LOCAL_MACHINE\n        subkey = r'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment'\n    return root, subkey\n\n\ndef get_env(name, user=True):\n    root, subkey = env_keys(user)\n    key = OpenKey(root, subkey, 0, KEY_READ)\n    try:\n        value, _ = QueryValueEx(key, name)\n    except WindowsError:\n        return ''\n    return value\n\n\ndef set_env(name, value):\n    key = OpenKey(HKEY_CURRENT_USER, 'Environment', 0, KEY_ALL_ACCESS)\n    SetValueEx(key, name, 0, REG_EXPAND_SZ, value)\n    CloseKey(key)\n    SendMessage(\n        win32con.HWND_BROADCAST, win32con.WM_SETTINGCHANGE, 0, 'Environment')\n\n\ndef remove(paths, value):\n    while value in paths:\n        paths.remove(value)\n\n\ndef unique(paths):\n    unique = []\n    for value in paths:\n        if value not in unique:\n            unique.append(value)\n    return unique\n\n\ndef prepend_env(name, values):\n    for value in values:\n        paths = get_env(name).split(';')\n        remove(paths, '')\n        paths = unique(paths)\n        remove(paths, value)\n        paths.insert(0, value)\n        set_env(name, ';'.join(paths))\n\n\ndef prepend_env_pathext(values):\n    prepend_env('PathExt_User', values)\n    pathext = ';'.join([\n        get_env('PathExt_User'),\n        get_env('PathExt', user=False)\n    ])\n    set_env('PathExt', pathext)\n\n\n\nset_env('Home', '%HomeDrive%%HomePath%')\nset_env('Docs', '%HomeDrive%%HomePath%\\docs')\nset_env('Prompt', '$P$_$G$S')\n\nprepend_env('Path', [\n    r'%SystemDrive%\\cygwin\\bin', # Add cygwin binaries to path\n    r'%HomeDrive%%HomePath%\\bin', # shortcuts and 'pass-through' bat files\n    r'%HomeDrive%%HomePath%\\docs\\bin\\mswin', # copies of standalone executables\n])\n\n# allow running of these filetypes without having to type the extension\nprepend_env_pathext(['.lnk', '.exe.lnk', '.py'])\n"]], ['Interface for modifying Windows environment variables from Python'], 2], [(1086266, 0), [["Then you'll need something to create a csv file outside your loop of the rows, like so:"], ['Then you need to actually pull the data out of the html row in your loop, similar to']], [[' writer = csv.writer(open("%s.csv" % filename, "wb"))\n']], ['Parsing HTML rows into CSV'], 2], [(1086266, 1), [['Then you need to actually pull the data out of the html row in your loop, similar to'], ['-10000']], [[' values = (td.fetchText() for td in row)\nwriter.writerow(values)\n']], ['Parsing HTML rows into CSV'], 2], [(1088392, 0), [["If you want a general function which you can pass as a parameter to  sort(key=XXX) , then here's a candidate complete with test:"], ['When you run the above script, you get:']], [[' DATA = [\n    { \'name\' : \'A\', \'value\' : \'10.0\' },\n    { \'name\' : \'B\', \'value\' : \'2.0\' },\n]\n\ndef get_attr(name):\n    def inner_func(o):\n        try:\n            rv = float(o[name])\n        except ValueError:\n            rv = o[name]\n        return rv\n    return inner_func\n\nfor attrname in (\'name\', \'value\'):\n    DATA.sort(key=get_attr(attrname))\n    print "%r-sorted: %s" % (attrname, DATA)\n']], ['Sorting a Python list by key... while checking for string OR float?'], 2], [(1088392, 1), [['When you run the above script, you get:'], ['-10000']], [[" 'name'-sorted: [{'name': 'A', 'value': '10.0'}, {'name': 'B', 'value': '2.0'}]\n'value'-sorted: [{'name': 'B', 'value': '2.0'}, {'name': 'A', 'value': '10.0'}]\n"]], ['Sorting a Python list by key... while checking for string OR float?'], 2], [(1090280, 0), [['Edit : thanks to the clarification and change in the spec I\'ve edited my code, still using an explicit  Node  class as an intermediate step for clarity -- the logic is to turn the list of lines into a list of nodes, then turn that list of nodes into a tree (by using their indent attribute appropriately), then print that tree in a readable form (this is just a "debug-help" step, to check the tree is well constructed, and can of course get commented out in the final version of the script -- which, just as of course, will take the lines from a file rather than having them hardcoded for debugging!-), finally build the desired Python structure and print it.  Here\'s the code, and as we\'ll see after that the result is  almost  as the OP specifies with one exception -- but, the code first:'], ['When run, this emits:']], [[' import sys\n\nclass Node(object):\n  def __init__(self, title, indent):\n    self.title = title\n    self.indent = indent\n    self.children = []\n    self.notes = []\n    self.parent = None\n  def __repr__(self):\n    return \'Node(%s, %s, %r, %s)\' % (\n        self.indent, self.parent, self.title, self.notes)\n  def aspython(self):\n    result = dict(title=self.title, children=topython(self.children))\n    if self.notes:\n      result[\'notes\'] = self.notes\n    return result\n\ndef print_tree(node):\n  print \' \' * node.indent, node.title\n  for subnode in node.children:\n    print_tree(subnode)\n  for note in node.notes:\n    print \' \' * node.indent, \'Note:\', note\n\ndef topython(nodelist):\n  return [node.aspython() for node in nodelist]\n\ndef lines_to_tree(lines):\n  nodes = []\n  for line in lines:\n    indent = len(line) - len(line.lstrip())\n    marker, body = line.strip().split(None, 1)\n    if marker == \'*\':\n      nodes.append(Node(body, indent))\n    elif marker == \'-\':\n      nodes[-1].notes.append(body)\n    else:\n      print>>sys.stderr, "Invalid marker %r" % marker\n\n  tree = Node(\'\', -1)\n  curr = tree\n  for node in nodes:\n    while node.indent <= curr.indent:\n      curr = curr.parent\n    node.parent = curr\n    curr.children.append(node)\n    curr = node\n\n  return tree\n\n\ndata = """\\\n* 1\n * 1.1\n * 1.2\n  - Note for 1.2\n* 2\n* 3\n- Note for root\n""".splitlines()\n\ndef main():\n  tree = lines_to_tree(data)\n  print_tree(tree)\n  print\n  alist = topython(tree.children)\n  print alist\n\nif __name__ == \'__main__\':\n  main()\n']], ['How can I parse marked up text for further processing?'], 2], [(1090280, 1), [['When run, this emits:'], ["Apart from the ordering of keys (which is immaterial and not guaranteed in a dict, of course), this is  almost  as requested -- except that here  all  notes appear as dict entries with a key of  notes  and a value that's a list of strings (but the notes entry is omitted if the list would be empty, roughly as done in the example in the question)."]], [["  1\n  1.1\n  1.2\n  Note: 1.2\n 2\n 3\n Note: 3\n\n[{'children': [{'children': [], 'title': '1.1'}, {'notes': ['Note for 1.2'], 'children': [], 'title': '1.2'}], 'title': '1'}, {'children': [], 'title': '2'}, {'notes': ['Note for root'], 'children': [], 'title': '3'}]\n"]], ['How can I parse marked up text for further processing?'], 2], [(1090863, 0), [['The  operator  module has functions that implement the standard arithmetic operators. With that, you can set up a mapping like:'], ['Then your main loop can look something like this:']], [[" OperatorFunctions = {\n    '+': operator.add,\n    '-': operator.sub,\n    '*': operator.mul,\n    '/': operator.div,\n    # etc\n}\n"]], ['Python operators'], 2], [(1090863, 1), [['Then your main loop can look something like this:'], ['You will want to take care to ensure that the operands to subtraction and division are popped off the stack in the correct order.']], [[' for char in postfix_expression:\n    if char in OperatorFunctions:\n        stack.append(OperatorFunctions[char](stack.pop(), stack.pop()))\n    else:\n        stack.append(char)\n']], ['Python operators'], 2], [(1094841, 0), [['Addressing the above "too small a task to require a library" issue by a straightforward implementation:'], ['Example:']], [[' def sizeof_fmt(num, suffix=\'B\'):\n    for unit in [\'\',\'Ki\',\'Mi\',\'Gi\',\'Ti\',\'Pi\',\'Ei\',\'Zi\']:\n        if abs(num) < 1024.0:\n            return "%3.1f%s%s" % (num, unit, suffix)\n        num /= 1024.0\n    return "%.1f%s%s" % (num, \'Yi\', suffix)\n']], ['Reusable library to get human readable version of file size?'], 2], [(1094841, 1), [['Example:'], ['by  Fred Cirera']], [[" >>> sizeof_fmt(168963795964)\n'157.4GiB'\n"]], ['Reusable library to get human readable version of file size?'], 2], [(1095026, 0), [['You probably want to take a look at the  CSV module , which has readers and writers that will enable you to create transforms.'], ['At which point you can do something like:']], [[' >>> from StringIO import StringIO\n>>> from csv import DictReader\n>>> fh = StringIO("""\n... id,case1,case2,case3\n... \n... 123,null,X,Y\n... \n... 342,X,X,Y\n... \n... 456,null,null,null\n... \n... 789,null,null,X\n... """.strip())\n>>> dr = DictReader(fh)\n>>> dr.next()\n{\'case1\': \'null\', \'case3\': \'Y\', \'case2\': \'X\', \'id\': \'123\'}\n']], ['Python strings / match case'], 2], [(1095026, 1), [['At which point you can do something like:'], ["The last bit is just pseudocode -- not sure  dr.fieldnames  is actually a property. Replace  out_fh  with the filehandle that you'd like to output to."]], [[" >>> from csv import DictWriter\n>>> out_fh = StringIO()\n>>> writer = DictWriter(fh, fieldnames=dr.fieldnames)\n>>> for mapping in dr:\n...     writer.write(dict((k, v) for k, v in mapping.items() if v != 'null'))\n...\n"]], ['Python strings / match case'], 2], [(1095270, 0), [['If the format example you give is somewhat reliable, something like:'], ["It's probably not much faster to just a bool, but, if you insist, changing the second statement of the function to:"]], [[" import re\ngrps = re.compile(r'CN=(\\w+)').findall\n\ndef anyof(short_group_list, adu):\n  all_groups_of_user = set(g for gs in adu.get('memberOf',()) for g in grps(gs))\n  return sorted(all_groups_of_user.intersection(short_group_list))\n"]], ['Finding partial strings in a list of strings - python'], 3], [(1095270, 1), [["It's probably not much faster to just a bool, but, if you insist, changing the second statement of the function to:"], ["If performance isn't yet good enough (and a bool yes/no is sufficient, as you say), try reversing the looping logic:"]], [['   return any(g for g in short_group_list if g in all_groups_of_user)\n']], ['Finding partial strings in a list of strings - python'], 3], [(1095270, 2), [["If performance isn't yet good enough (and a bool yes/no is sufficient, as you say), try reversing the looping logic:"], ['any \'s short-circuit abilities might prove more useful here (at least in the "true" case, again -- because, again, there\'s no way to give a "false" result without examining ALL the possibilities anyway!-).']], [[" def anyof_v2(short_group_list, adu):\n  gset = set(short_group_list)\n  return any(g for gs in adu.get('memberOf',()) for g in grps(gs) if g in gset)\n"]], ['Finding partial strings in a list of strings - python'], 3], [(1095725, 0), [['you can just print it out.'], ['or:']], [[' >>> import django\n>>> print django.__file__\n/var/lib/python-support/python2.5/django/__init__.pyc\n>>>\n']], ['where does django install in ubuntu'], 2], [(1095725, 1), [['or:'], ['-10000']], [[' import inspect\nimport django\nprint inspect.getabsfile(django)\n']], ['where does django install in ubuntu'], 2], [(1096216, 0), [['You first import it with  import :'], ['Then you make sure that this module gets known to Python as  project :']], [[" >>> __import__('temp/a40bd22344')\n<module 'temp/a40bd22344' from 'temp/a40bd22344/__init__.py'>\n"]], ['Override namespace in Python'], 5], [(1096216, 1), [['Then you make sure that this module gets known to Python as  project :'], ['After this, anything importing project in the current Python session will get the original module']], [[" >>> import sys\n>>> sys.modules['project'] = sys.modules.pop('temp/a40bd22344')\n"]], ['Override namespace in Python'], 5], [(1096216, 2), [['After this, anything importing project in the current Python session will get the original module'], ["This will work also for sub-modules: if you have a foobar.py in the same location you'll get"]], [[" >>> import project\n>>> project\n<module 'temp/a40bd22344' from 'temp/a40bd22344/__init__.py'>\n"]], ['Override namespace in Python'], 5], [(1096216, 3), [["This will work also for sub-modules: if you have a foobar.py in the same location you'll get"], ["Addendum.  Here's what I'm running:"]], [[" >>> import project.foobar\n>>> project.foobar\n<module 'project.foobar' from 'temp/a40bd22344/foobar.py'>\n"]], ['Override namespace in Python'], 5], [(1096216, 4), [["Addendum.  Here's what I'm running:"], ['-10000']], [[' >>> print sys.version\n2.5.2 (r252:60911, Jul 31 2008, 17:28:52) \n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]\n']], ['Override namespace in Python'], 5], [(1098461, 0), [['Agree with other posters that it seems like a strange thing to want to do. Of course, if you really want to, there is (as always) an elegant way to do it in Python (2.6+):'], ['Full solution with input handling:']], [[' from itertools import product\nmap("".join, product(*[[\'A\', \'C\'] if x == "M" else [x] for x in "GMTTMCA"]))\n']], ['Looking for elegant glob-like DNA string expansion'], 2], [(1098461, 1), [['Full solution with input handling:'], ['-10000']], [[' import sys\nfrom itertools import product\n\nbase_globs = {"M":[\'A\',\'C\'], "R":[\'A\',\'G\'], "W":[\'A\',\'T\'],\n              "S":[\'C\',\'G\'], "Y":[\'C\',\'T\'], "K":[\'G\',\'T\'],\n\n              "V":[\'A\',\'C\',\'G\'], "H":[\'A\',\'C\',\'T\'],\n              "D":[\'A\',\'G\',\'T\'], "B":[\'C\',\'G\',\'T\'],\n              }\n\ndef base_glob(glob_sequence):\n    production_sequence = [base_globs.get(base, [base]) for base in glob_sequence]\n    return map("".join, product(*production_sequence))\n\nfor line in sys.stdin.readlines():\n    productions = base_glob(line.strip())\n    print "\\n".join(productions)\n']], ['Looking for elegant glob-like DNA string expansion'], 2], [(1098549, 0), [['You can pass a default value to  get()  for keys that are not in the dictionary:'], ['However, if you plan on using a particular argument with a particular default value, why not use named arguments in the first place?']], [[' self.val2 = kwargs.get(\'val2\',"default value")\n']], ['Proper way to use **kwargs in Python'], 2], [(1098549, 1), [['However, if you plan on using a particular argument with a particular default value, why not use named arguments in the first place?'], ['-10000']], [[' def __init__(self, val2="default value", **kwargs):\n']], ['Proper way to use **kwargs in Python'], 2], [(1099178, 0), [['However, PyParsing is a very nice package for this type of thing:'], ['The output is:']], [[' from pyparsing import nestedExpr\n\ndata = "( (a ( ( c ) b ) ) ( d ) e )"\nprint nestedExpr().parseString(data).asList()\n']], ['Matching Nested Structures With Regular Expressions in Python'], 2], [(1099178, 1), [['The output is:'], ['More on PyParsing:']], [[" [[['a', [['c'], 'b']], ['d'], 'e']]\n"]], ['Matching Nested Structures With Regular Expressions in Python'], 2], [(1106223, 0), [["This is what I whipped up. It doesn't use a class, but it does use function attributes:"], ['Translation:  When using the decorator like this:']], [[' def max_execs(n=5):\n    def decorator(fn):\n        fn.max = n\n        fn.called = 0\n        def wrapped(*args, **kwargs):\n            fn.called += 1\n            if fn.called <= fn.max:\n                return fn(*args, **kwargs)\n            else:\n                # Replace with your own exception, or something\n                # else that you want to happen when the limit\n                # is reached\n                raise RuntimeError("max executions exceeded")\n        return wrapped\n    return decorator\n']], ['How are these type of python decorators written?'], 3], [(1106223, 1), [['Translation:  When using the decorator like this:'], ["You're basically doing something like this:"]], [[' @max_execs(5)\ndef f():\n    print "hi!"\n']], ['How are these type of python decorators written?'], 3], [(1106223, 2), [["You're basically doing something like this:"], ['-10000']], [[' f = max_execs(5)(f)\n']], ['How are these type of python decorators written?'], 3], [(1106455, 0), [['Taken from os.py on CPython 2.6:'], ['path  is defined earlier as the platform-specific module:']], [[" sys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\n"]], ['How does os.path map to posixpath.pyc and not os/path.py?'], 2], [(1106455, 1), [['path  is defined earlier as the platform-specific module:'], ['-10000']], [[" if 'posix' in _names:\n    name = 'posix'\n    linesep = '\\n'\n    from posix import *\n    try:\n        from posix import _exit\n    except ImportError:\n        pass\n    import posixpath as path\n\n    import posix\n    __all__.extend(_get_exports_list(posix))\n    del posix\n\nelif 'nt' in _names:\n# ...\n"]], ['How does os.path map to posixpath.pyc and not os/path.py?'], 2], [(1106849, 0), [['This is something you usually do in your view functions.'], ['Now you have a simple two-element list that you can display']], [[' aList = ["a", "b", "c"]\nlistAndFlags = [ (item,item in aList) for item in someQuerySet ]\n']], ["Is 'if element in aList' possible with Django templates?"], 2], [(1106849, 1), [['Now you have a simple two-element list that you can display'], ['-10000']], [[' {% for item, flag in someList %}\n    <tr><td class="{{flag}}">{{item}}</td></tr>\n{% endfor %}\n']], ["Is 'if element in aList' possible with Django templates?"], 2], [(1107598, 0), [['You could just reset your session table. This would logout every user. Of course, depending on what your doing with sessions, it could have other implications (like emptying a shopping cart, for example).'], ['Or in raw SQL:']], [[' python manage.py reset sessions\n']], ['Manually logging out a user, after a site update in Django'], 2], [(1107598, 1), [['Or in raw SQL:'], ['-10000']], [[' DELETE FROM django_sessions\n']], ['Manually logging out a user, after a site update in Django'], 2], [(1108974, 0), [['I use  easy_install  to install packages. On ubuntu you can get easy_install like this:'], ['To install virtualenv then do:']], [[' sudo apt-get install python-setuptools\n']], ['switch versions of python'], 4], [(1108974, 1), [['To install virtualenv then do:'], ["I tend to create a new virtualenv for each project I'm working on and don't give it access to the global site-packages. This keeps all the packages tight together and allows me to have the specific versions of everything I need."]], [[' easy_install virtualenv\n']], ['switch versions of python'], 4], [(1108974, 2), [["I tend to create a new virtualenv for each project I'm working on and don't give it access to the global site-packages. This keeps all the packages tight together and allows me to have the specific versions of everything I need."], ['And then whenever I am doing anything related to this project I activate it:']], [[' virtualenv -p python2.6 --no-site-packages ~/env/NEW_DJANGO_PROJECT\n']], ['switch versions of python'], 4], [(1108974, 3), [['And then whenever I am doing anything related to this project I activate it:'], ['If I run python now it uses this new python. If I use easy_install it installs things into my new virtual environment.']], [[' source ~/env/NEW_DJANGO_PROJECT/bin/activate\n']], ['switch versions of python'], 4], [(1111317, 0), [["Also see pytz module - it's quite easy to use -- as example:"], ['Example:']], [[" eastern = timezone('US/Eastern')\n"]], ['How do I print a Python datetime in the local timezone?'], 2], [(1111317, 1), [['Example:'], ['-10000']], [[' from datetime import datetime\nimport pytz\nfrom tzlocal import get_localzone # $ pip install tzlocal\n\nutc_dt = datetime(2009, 7, 10, 18, 44, 59, 193982, tzinfo=pytz.utc)\nprint(utc_dt.astimezone(get_localzone())) # print local time\n# -> 2009-07-10 14:44:59.193982-04:00\n']], ['How do I print a Python datetime in the local timezone?'], 2], [(1112012, 0), [['The code below is a simple translation to python.  You should confirm that it actually does what you want.  For more information, please see the  Python Regular Expression HOWTO .'], ["Here's what the output looks like at my end:"]], [[' import re\n\npat1 = re.compile(r"(^|[\\n ])(([\\w]+?://[\\w\\#$%&~.\\-;:=,?@\\[\\]+]*)(/[\\w\\#$%&~/.\\-;:=,?@\\[\\]+]*)?)", re.IGNORECASE | re.DOTALL)\n\npat2 = re.compile(r"#(^|[\\n ])(((www|ftp)\\.[\\w\\#$%&~.\\-;:=,?@\\[\\]+]*)(/[\\w\\#$%&~/.\\-;:=,?@\\[\\]+]*)?)", re.IGNORECASE | re.DOTALL)\n\n\nurlstr = \'http://www.example.com/foo/bar.html\'\n\nurlstr = pat1.sub(r\'\\1<a href="\\2" target="_blank">\\3</a>\', urlstr)\nurlstr = pat2.sub(r\'\\1<a href="http:/\\2" target="_blank">\\3</a>\', urlstr)\n\nprint urlstr\n']], ['Replace URL with a link using regex in python'], 2], [(1112012, 1), [["Here's what the output looks like at my end:"], ['-10000']], [[' <a href="http://www.example.com/foo/bar.html" target="_blank">http://www.example.com</a>\n']], ['Replace URL with a link using regex in python'], 2], [(1116172, 0), [["Here's my attempt, this is tested.  While recursive, there should be no unnecessary string duplication, although a generator might be more optimal"], ['and here is a generator version']], [[' def bracketed_find(s, start, end, startat=0):\n    startloc=s.find(start, startat)\n    if startloc==-1:\n        return []\n    endloc=s.find(end, startloc+len(start))\n    if endloc == -1:\n        return [s[startloc+len(start):]]\n    return [s[startloc+len(start):endloc]] + bracketed_find(s, start, end, endloc+len(end))\n']], ['Finding content between two words withou RegEx, BeautifulSoup, lXml ... etc'], 2], [(1116172, 1), [['and here is a generator version'], ['-10000']], [[' def bracketed_find(s, start, end, startat=0):\n    startloc=s.find(start, startat)\n    if startloc==-1:\n        return\n    endloc=s.find(end, startloc+len(start))\n    if endloc == -1:\n        yield s[startloc+len(start):]\n        return\n    else:\n        yield s[startloc+len(start):endloc]\n\n    for found in bracketed_find(s, start, end, endloc+len(end)):\n        yield found\n']], ['Finding content between two words withou RegEx, BeautifulSoup, lXml ... etc'], 2], [(1116921, 0), [['Jon Skeet answered instantly that I only needed...'], ['Apache Commons']], [[' httppost.addHeader("Referer", referer);\n']], ['html form submission in python and php is simple, can a novice do it in java?'], 2], [(1116921, 1), [['Apache Commons'], ['-10000']], [[' import org.apache.http.Header;\nimport org.apache.http.HeaderElement;\nimport org.apache.http.HttpRequestInterceptor;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.HttpException;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.protocol.HttpContext;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.impl.client.DefaultHttpClient;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.io.OutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\n\npublic class HttpClientTest\n{\n    public static void main(String[] args) throws Exception\n    {\n        // initialize some variables\n        String referer = "URL of referring web page goes here";\n        String submitUrl = "https URL of form action goes here";\n        List<NameValuePair> formparams = new ArrayList<NameValuePair>();\n        formparams.add(new BasicNameValuePair("firstName", "John"));\n        formparams.add(new BasicNameValuePair("lastName", "Doe"));\n\n        // set up httppost\n        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");\n        HttpPost httppost = new HttpPost(submitUrl);\n        httppost.setEntity(entity);\n\n        // add referer\n        httppost.addHeader("Referer", referer);\n\n        // create httpclient\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n\n        // execute the request\n        HttpResponse response = httpclient.execute(httppost);\n\n        // display the response body\n        HttpEntity responseEntity = response.getEntity();\n        OutputStream out = new ByteArrayOutputStream();\n        responseEntity.writeTo(out);\n        System.out.println(out);\n    }\n}\n']], ['html form submission in python and php is simple, can a novice do it in java?'], 2], [(1117958, 0), [["First you disable your network card's automatic checksumming:"], ['And then send your dodgy frame from python:']], [[' sudo ethtool -K eth1 tx off\n']], ['How Do I Use Raw Socket in Python?'], 2], [(1117958, 1), [['And then send your dodgy frame from python:'], ['Done.']], [[' #!/usr/bin/env python\nfrom socket import socket, AF_PACKET, SOCK_RAW\ns = socket(AF_PACKET, SOCK_RAW)\ns.bind(("eth1", 0))\n\n# We\'re putting together an ethernet frame here, \n# but you could have anything you want instead\n# Have a look at the \'struct\' module for more \n# flexible packing/unpacking of binary data\n# and \'binascii\' for 32 bit CRC\nsrc_addr = "\\x01\\x02\\x03\\x04\\x05\\x06"\ndst_addr = "\\x01\\x02\\x03\\x04\\x05\\x06"\npayload = ("["*30)+"PAYLOAD"+("]"*30)\nchecksum = "\\x1a\\x2b\\x3c\\x4d"\nethertype = "\\x08\\x01"\n\ns.send(dst_addr+src_addr+ethertype+payload+checksum)\n']], ['How Do I Use Raw Socket in Python?'], 2], [(1120156, 0), [["Change  User.get  to actually use the  cls  argument that's passed-in:"], ["You'll need to do something similar in  _from_ldap . You didn't list the code for  _from_ldap , but I assume that at some point it does something like:"]], [[" @classmethod\ndef get(cls, uid):\n    ldap_data = LdapUtil.get(uid + ',' + self.base_dn)\n    return cls._from_ldap(ldap_data)\n"]], ['How do you cast an instance to a derived class?'], 3], [(1120156, 1), [["You'll need to do something similar in  _from_ldap . You didn't list the code for  _from_ldap , but I assume that at some point it does something like:"], ['You want to replace this with:']], [[' result = User(... blah ...)\n']], ['How do you cast an instance to a derived class?'], 3], [(1120156, 2), [['You want to replace this with:'], ['Remember: in Python a class object is a callable that constructs instances of that class. So you can use the  cls  parameter of a classmethod to construct instances of the class used to call the classmethod.']], [[' result = cls(... blah ...)\n']], ['How do you cast an instance to a derived class?'], 3], [(1120758, 0), [['Here is a minimal Zope 2.11 buildout.cfg:'], ['As of Zope 2.12 installation is fully egg based. The following sample buildout.cfg is all you need to install the latest beta:']], [[' [buildout]\nparts = instance\n\n[zope2]\nrecipe = plone.recipe.zope2install\nurl = http://www.zope.org/Products/Zope/2.11.3/Zope-2.11.3-final.tgz\n\n[instance]\nrecipe = plone.recipe.zope2instance\nzope2-location = ${zope2:location}\nuser = admin:admin\nhttp-address = 127.0.0.1:8080\n']], ["What's the simplest possible buildout.cfg to install Zope 2?"], 2], [(1120758, 1), [['As of Zope 2.12 installation is fully egg based. The following sample buildout.cfg is all you need to install the latest beta:'], ['Note the extends; it pulls in a list of versions for all Zope2 egg dependencies from the Zope subversion tag for 2.12.0b3, to make sure you get a stable combination of eggs. Without it you may end up with newer egg versions that have introduced incompatibilities.']], [[' [buildout]\nparts = scripts\nextends = http://svn.zope.org/*checkout*/Zope/tags/2.12.0b3/versions.cfg\n\n[versions]\nZope2 = 2.12.0b3\n\n[scripts]\nrecipe = zc.recipe.egg:scripts\neggs = Zope2\n']], ["What's the simplest possible buildout.cfg to install Zope 2?"], 2], [(1120927, 0), [['The first is more efficient than the second.   del foo.bar  compiles to two bytecode instructions:'], ['whereas  delattr(foo, "bar")  takes five:']], [['   2           0 LOAD_FAST                0 (foo)\n              3 DELETE_ATTR              0 (bar)\n']], ['Which is better in python, del or delattr?'], 2], [(1120927, 1), [['whereas  delattr(foo, "bar")  takes five:'], ["This translates into the first running  slightly  faster (but it's not a huge difference – .15 μs on my machine)."]], [["   2           0 LOAD_GLOBAL              0 (delattr)\n              3 LOAD_FAST                0 (foo)\n              6 LOAD_CONST               1 ('bar')\n              9 CALL_FUNCTION            2\n             12 POP_TOP             \n"]], ['Which is better in python, del or delattr?'], 2], [(1123000, 0), [['The pythonic way would be to use a  dict :'], ["If that's a problem, you could easily define a class such as:"]], [[' >>> foo = dict(x=1, y=2)\n>>> bar = dict(y=2, x=1)\n>>> foo == bar\nTrue\n']], ['Does Python have anonymous classes?'], 3], [(1123000, 1), [["If that's a problem, you could easily define a class such as:"], ['Or, a nice and short one']], [[' class Bunch(object):\n    def __init__(self, **kwds):\n        self.__dict__.update(kwds)\n\n    def __eq__(self, other):\n        return self.__dict__ == other.__dict__\n']], ['Does Python have anonymous classes?'], 3], [(1123000, 2), [['Or, a nice and short one'], ['(but note that this second one has problems as Alex points out in his comment!)']], [[' class Bunch(dict):\n    __getattr__, __setattr__ = dict.get, dict.__setitem__\n']], ['Does Python have anonymous classes?'], 3], [(1123337, 0), [['Does this need to create an actual dict? could you get by with only something that looked like a dict?'], ['You could then wrap a model in this way:']], [[' class DictModelAdaptor():\n    def __init__(self, model):\n        self.model = model\n\n    def __getitem__(self, key):\n        return self.model.objects.get(key=key)\n\n    def __setitem__(self, key, item):\n        pair = self.model()\n        pair.key = key\n        pair.value = item\n        pair.save()\n\n    def __contains__(self, key):\n        ...\n']], ["Django: Converting an entire set of a Model's objects into a single dictionary"], 2], [(1123337, 1), [['You could then wrap a model in this way:'], ['etc...']], [[' modelDict = DictModelAdaptor(DictModel)\nmodelDict["name"] = "Bob Jones"\n']], ["Django: Converting an entire set of a Model's objects into a single dictionary"], 2], [(1125006, 0), [["The way I would do it is to simply go through the object 'a' on class B. So in the view, I would do:"], ['Edit:  In response to your comment, I suggest then making a base class that contains this line:']], [[' objects = B.objects.get(user=a.user)\nobjects += A.objects.get(user=user)\n']], ['Generic object "ownership" in Django'], 4], [(1125006, 1), [['Edit:  In response to your comment, I suggest then making a base class that contains this line:'], ["Class A and B can then inherit from that base class, and you can thus now just get all of the objects from that class. Say your base class was called 'C':"]], [[' user = models.ForeignKey(User)\n']], ['Generic object "ownership" in Django'], 4], [(1125006, 2), [["Class A and B can then inherit from that base class, and you can thus now just get all of the objects from that class. Say your base class was called 'C':"], ["That will obtain all of the C's, and you can then figure out their specific types by going through each object in objects and determining their type:"]], [[' objects = C.objects.get(user=user)\n']], ['Generic object "ownership" in Django'], 4], [(1125006, 3), [["That will obtain all of the C's, and you can then figure out their specific types by going through each object in objects and determining their type:"], ['-10000']], [[' for object in objects:\n    if object.A:\n        #code\n    if object.B:\n        #code   \n']], ['Generic object "ownership" in Django'], 4], [(1126930, 0), [['There is an  ipdb  project which embeds iPython into the standard pdb, so you can just do:'], ['ipdb  is pretty short, so instead of easy_installing you can also create a file  ipdb.py  somewhere on your Python path and paste the following into the file:']], [[' import ipdb; ipdb.set_trace()\n']], ['Is it possible to go into ipython from code?'], 2], [(1126930, 1), [['ipdb  is pretty short, so instead of easy_installing you can also create a file  ipdb.py  somewhere on your Python path and paste the following into the file:'], ['-10000']], [[" import sys\nfrom IPython.Debugger import Pdb\nfrom IPython.Shell import IPShell\nfrom IPython import ipapi\n\nshell = IPShell(argv=[''])\n\ndef set_trace():\n    ip = ipapi.get()\n    def_colors = ip.options.colors\n    Pdb(def_colors).set_trace(sys._getframe().f_back)\n"]], ['Is it possible to go into ipython from code?'], 2], [(1128693, 0), [['It can be something like'], ['in views you can have function:']], [[" urlpatterns = patterns('',\n   (r'^item/value/(?P<value>\\d+\\.\\d{2})/$', 'myapp.views.byvalue'),\n   ... more urls\n)\n"]], ['How Do I Use A Decimal Number In A Django URL Pattern?'], 2], [(1128693, 1), [['in views you can have function:'], ['-10000']], [[" def byvalue(request,value='0.99'):\n    try:\n        value = float(value)\n    except:\n        ...\n"]], ['How Do I Use A Decimal Number In A Django URL Pattern?'], 2], [(1128924, 0), [['First, find the number of possible locations to split: the number of non-function nodes.'], ['Then, a helper: given an index in the above range, figure out where it is.']], [[' def count(obj):\n    total = 0\n    for o in obj[1:]:\n        # Add the node itself.\n        total += 1\n\n        if isinstance(o, list):\n            total += count(o)\n    return total\n']], ['How to split two nested lists and combine the parts to create two new nested lists'], 3], [(1128924, 1), [['Then, a helper: given an index in the above range, figure out where it is.'], ['Doing the swap is pretty simple now:']], [[' def find_idx(tree, idx):\n    """\n    Return the node containing the idx\'th function parameter, and the index of that\n    parameter.  If the tree contains fewer than idx parameters, return (None, None).\n    """\n    if not isinstance(idx, list):\n        # Stash this in a list, so recursive calls share the same value.\n        idx = [idx]\n\n    for i, o in enumerate(tree):\n        # Skip the function itself.\n        if i == 0:\n            continue\n\n        if idx[0] == 0:\n            return tree, i\n\n        idx[0] -= 1\n        if isinstance(o, list):\n            container, result_index = find_idx(o, idx)\n            if container is not None:\n                return container, result_index\n\n    return None, None\n']], ['How to split two nested lists and combine the parts to create two new nested lists'], 3], [(1128924, 2), [['Doing the swap is pretty simple now:'], ["This doesn't implement a max depth, but it's a start."]], [[' def random_swap(tree1, tree2):\n    from random import randrange\n    pos_in_1 = randrange(0, count(tree1))\n    pos_in_2 = randrange(0, count(tree2))\n\n    parent1, idx1 = find_idx(tree1, pos_in_1)\n    parent2, idx2 = find_idx(tree2, pos_in_2)\n\n    # Swap:\n    parent1[idx1], parent2[idx2] = parent2[idx2], parent1[idx1]\n\nc = 1\ntree1 = ["f:2", c, ["f:1", c]]\ntree2 = ["f:2", ["f:2", ["f:2", c, c], ["f:2", c, c]], ["f:3", ["f:4", c, c, c, c], ["f:2", c, c], c]]\n\nwhile True:\n    random_swap(tree1, tree2)\n    print tree1\n    print tree2\n']], ['How to split two nested lists and combine the parts to create two new nested lists'], 3], [(1133286, 0), [["I guess you could use  reduce , though it's debatable whether that's pythonic .."], ["Here's another way using  map  and  zip :"]], [[' In [13]: reduce(lambda s, t: (s[0]+t[0], s[1]+t[1]), [a, b, c], (0, 0))\nOut[13]: (51, 73)\n']], ["Adding tuples to produce a tuple with a subtotal per 'column'"], 4], [(1133286, 1), [["Here's another way using  map  and  zip :"], ["or, if you're passing your collection of tuples in as a list:"]], [[' In [14]: map(sum, zip(a, b, c))\nOut[14]: [51, 73]\n']], ["Adding tuples to produce a tuple with a subtotal per 'column'"], 4], [(1133286, 2), [["or, if you're passing your collection of tuples in as a list:"], ['and, using a list comprehension instead of  map :']], [[' In [15]: tups = [a, b, c]\n\nIn [15]: map(sum, zip(*tups))\nOut[15]: [51, 73]\n']], ["Adding tuples to produce a tuple with a subtotal per 'column'"], 4], [(1133286, 3), [['and, using a list comprehension instead of  map :'], ['-10000']], [[' In [16]: [sum(z) for z in zip(*tups)]\nOut[16]: [51, 73]\n']], ["Adding tuples to produce a tuple with a subtotal per 'column'"], 4], [(1136106, 0), [['So it would be something like:'], ['In django 1.3 context managers were introduced.\nSo now you can use  transaction.commit_on_success()  in a similar way:']], [[' from django.db import transaction\n\n@transaction.commit_manually\ndef viewfunc(request):\n    ...\n    for item in items:\n        entry = Entry(a1=item.a1, a2=item.a2)\n        entry.save()\n    transaction.commit()\n']], ['What is an efficient way of inserting thousands of records into an SQLite table using Django?'], 5], [(1136106, 1), [['In django 1.3 context managers were introduced.\nSo now you can use  transaction.commit_on_success()  in a similar way:'], ['NOTE  the save method will not be called when using bulk create.']], [[' from django.db import transaction\n\ndef viewfunc(request):\n    ...\n    with transaction.commit_on_success():\n        for item in items:\n            entry = Entry(a1=item.a1, a2=item.a2)\n            entry.save()\n']], ['What is an efficient way of inserting thousands of records into an SQLite table using Django?'], 5], [(1136106, 2), [['NOTE  the save method will not be called when using bulk create.'], ['atomic is usable both as a decorator:']], [[' >>> Entry.objects.bulk_create([\n...     Entry(headline="Django 1.0 Released"),\n...     Entry(headline="Django 1.1 Announced"),\n...     Entry(headline="Breaking: Django is awesome")\n... ])\n']], ['What is an efficient way of inserting thousands of records into an SQLite table using Django?'], 5], [(1136106, 3), [['atomic is usable both as a decorator:'], ['and as a context manager:']], [[' from django.db import transaction\n\n@transaction.atomic\ndef viewfunc(request):\n    # This code executes inside a transaction.\n    do_stuff()\n']], ['What is an efficient way of inserting thousands of records into an SQLite table using Django?'], 5], [(1136106, 4), [['and as a context manager:'], ['-10000']], [[" from django.db import transaction\n\ndef viewfunc(request):\n    # This code executes in autocommit mode (Django's default).\n    do_stuff()\n\n    with transaction.atomic():\n        # This code executes inside a transaction.\n        do_more_stuff()\n"]], ['What is an efficient way of inserting thousands of records into an SQLite table using Django?'], 5], [(1136826, 0), [['From the  Python 3  documentation :'], ["If the string does not exists (hasn't been interned yet) the function saves\nit in the table and returns it from the interned strings table."]], [[' sys.intern(string)\n']], ['What does python sys.intern do, and when should it be used?'], 5], [(1136826, 1), [["If the string does not exists (hasn't been interned yet) the function saves\nit in the table and returns it from the interned strings table."], ['If the string exists (has been interned) the function returns it from the\ninterned strings table.']], [[" >>> import sys\n>>> a = sys.intern('why do pangolins dream of quiche')\n>>> a\n'why do pangolins dream of quiche'\n"]], ['What does python sys.intern do, and when should it be used?'], 5], [(1136826, 2), [['If the string exists (has been interned) the function returns it from the\ninterned strings table.'], ["Even though it is not immediately visible, because the string  'why do pangolins dream of quiche'  has been interned before,  b  holds now the same string object as  a ."]], [[" >>> b = sys.intern('why do pangolins dream of quiche')\n>>> b\n'why do pangolins dream of quiche'\n"]], ['What does python sys.intern do, and when should it be used?'], 5], [(1136826, 3), [["Even though it is not immediately visible, because the string  'why do pangolins dream of quiche'  has been interned before,  b  holds now the same string object as  a ."], ['If we create the same string without using intern, we end up with two different string objects that have the same value.']], [[' >>> b is a\nTrue\n']], ['What does python sys.intern do, and when should it be used?'], 5], [(1136826, 4), [['If we create the same string without using intern, we end up with two different string objects that have the same value.'], ['By using  sys.intern  you ensure that you never create two string objects that have the same value—when you request the creation of a second string object with the same value as an existing string object, you receive a reference to the pre-existing string object. This way, you are  saving memory . Also, string objects comparison is now  very efficient  because it is carried out by comparing the memory addresses of the two string objects instead of their content.']], [[" >>> c = 'why do pangolins dream of quiche'\n>>> c is a\nFalse\n>>> c is b\nFalse\n"]], ['What does python sys.intern do, and when should it be used?'], 5], [(1139090, 0), [['An XML document may start with a declaration like this:'], ["If the encoding is not UTF-8, then either the creator should include a declaration (or the recipient can prepend one) or the recipient can transcode the data to UTF-8. The following showcases what works and what doesn't:"]], [[' `<?xml version="1.0" encoding="UTF-8"?>`\n']], ['Alternative XML parser for ElementTree to ease UTF-8 woes?'], 2], [(1139090, 1), [["If the encoding is not UTF-8, then either the creator should include a declaration (or the recipient can prepend one) or the recipient can transcode the data to UTF-8. The following showcases what works and what doesn't:"], ['-10000']], [[' >>> import xml.etree.ElementTree as ET\n>>> from StringIO import StringIO as sio\n\n>>> raw_text = \'<root>can\\x92t</root>\' # text encoded in cp1252, no XML declaration\n\n>>> t = ET.parse(sio(raw_text))\n[tracebacks omitted]\nxml.parsers.expat.ExpatError: not well-formed (invalid token): line 1, column 9\n# parser is expecting UTF-8\n\n>>> t = ET.parse(sio(\'<?xml version="1.0" encoding="UTF-8"?>\' + raw_text))\nxml.parsers.expat.ExpatError: not well-formed (invalid token): line 1, column 47\n# parser is expecting UTF-8 again\n\n>>> t = ET.parse(sio(\'<?xml version="1.0" encoding="cp1252"?>\' + raw_text))\n>>> t.getroot().text\nu\'can\\u2019t\'\n# parser was told to expect cp1252; it works\n\n>>> import unicodedata\n>>> unicodedata.name(u\'\\u2019\')\n\'RIGHT SINGLE QUOTATION MARK\'\n# not quite an apostrophe, but better than an exception\n\n>>> fixed_text = raw_text.decode(\'cp1252\').encode(\'utf8\')\n# alternative: we transcode the data to UTF-8\n\n>>> t = ET.parse(sio(fixed_text))\n>>> t.getroot().text\nu\'can\\u2019t\'\n# UTF-8 is the default; no declaration needed\n']], ['Alternative XML parser for ElementTree to ease UTF-8 woes?'], 2], [(1141101, 0), [["Here's a complete guess at some code that might load the type of file this is an example of, but which should be a little robust: "], ['which outputs for your file:']], [[' f = open("mdata.txt")\n\ndata_dict = {}\nsection = None\ndata_for_section = ""\nfor line in f:\n    line = line.strip() #remove whitespace at start and end\n\n    if section != None and (line[0] == "*" or line == "///"):\n        # if we\'ve just finished a section, put whatever we got into the data dict\n        data_dict[section] = [bit for bit in data_for_section.split(",") if bit != ""]\n\n    if line[0] == "*":\n        # "*" denotes the start of a new section, probably, so remember the name\n        section = line [2:]\n        data_for_section = ""\n        continue\n    data_for_section += line\n\nf.close()\n#got the data, now for some output\nprint "loaded file. Found headings: %s"%(", ".join(data_dict.keys()))\n\nfor key in data_dict.keys():\n    if len(data_dict[key])>5:\n        print key, ": array of %i entries"%len(data_dict[key])\n    else:\n        print key, ": ", data_dict[key]\n']], ['Read Block Data in Python?'], 2], [(1141101, 1), [['which outputs for your file:'], ["But as to the ABC Names and how they combine with the rest of the file, we'd need some more information for that."]], [[' startingPosition = float(data_dict["Starting position"][0])\ndata_list_of_floats = map(float, data_dict["Data"])\n']], ['Read Block Data in Python?'], 2], [(1143260, 0), [['Or if you want to use pywin32, you can use the previously stated method, and to read, use:'], ['You may way to check that']], [[' from win32file import *\nfrom winioctlcon import FSCTL_GET_REPARSE_POINT\n\n__all__ = [\'islink\', \'readlink\']\n\n# Win32file doesn\'t seem to have this attribute.\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\n# To make things easier.\nREPARSE_FOLDER = (FILE_ATTRIBUTE_DIRECTORY | FILE_ATTRIBUTE_REPARSE_POINT)\n\n# For the parse_reparse_buffer function\nSYMBOLIC_LINK = \'symbolic\'\nMOUNTPOINT = \'mountpoint\'\nGENERIC = \'generic\'\n\ndef islink(fpath):\n    """ Windows islink implementation. """\n    if GetFileAttributes(fpath) & REPARSE_FOLDER:\n        return True\n    return False\n\n\ndef parse_reparse_buffer(original, reparse_type=SYMBOLIC_LINK):\n    """ Implementing the below in Python:\n\n    typedef struct _REPARSE_DATA_BUFFER {\n        ULONG  ReparseTag;\n        USHORT ReparseDataLength;\n        USHORT Reserved;\n        union {\n            struct {\n                USHORT SubstituteNameOffset;\n                USHORT SubstituteNameLength;\n                USHORT PrintNameOffset;\n                USHORT PrintNameLength;\n                ULONG Flags;\n                WCHAR PathBuffer[1];\n            } SymbolicLinkReparseBuffer;\n            struct {\n                USHORT SubstituteNameOffset;\n                USHORT SubstituteNameLength;\n                USHORT PrintNameOffset;\n                USHORT PrintNameLength;\n                WCHAR PathBuffer[1];\n            } MountPointReparseBuffer;\n            struct {\n                UCHAR  DataBuffer[1];\n            } GenericReparseBuffer;\n        } DUMMYUNIONNAME;\n    } REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;\n\n    """\n    # Size of our data types\n    SZULONG = 4 # sizeof(ULONG)\n    SZUSHORT = 2 # sizeof(USHORT)\n\n    # Our structure.\n    # Probably a better way to iterate a dictionary in a particular order,\n    # but I was in a hurry, unfortunately, so I used pkeys.\n    buffer = {\n        \'tag\' : SZULONG,\n        \'data_length\' : SZUSHORT,\n        \'reserved\' : SZUSHORT,\n        SYMBOLIC_LINK : {\n            \'substitute_name_offset\' : SZUSHORT,\n            \'substitute_name_length\' : SZUSHORT,\n            \'print_name_offset\' : SZUSHORT,\n            \'print_name_length\' : SZUSHORT,\n            \'flags\' : SZULONG,\n            \'buffer\' : u\'\',\n            \'pkeys\' : [\n                \'substitute_name_offset\',\n                \'substitute_name_length\',\n                \'print_name_offset\',\n                \'print_name_length\',\n                \'flags\',\n            ]\n        },\n        MOUNTPOINT : {\n            \'substitute_name_offset\' : SZUSHORT,\n            \'substitute_name_length\' : SZUSHORT,\n            \'print_name_offset\' : SZUSHORT,\n            \'print_name_length\' : SZUSHORT,\n            \'buffer\' : u\'\',\n            \'pkeys\' : [\n                \'substitute_name_offset\',\n                \'substitute_name_length\',\n                \'print_name_offset\',\n                \'print_name_length\',\n            ]\n        },\n        GENERIC : {\n            \'pkeys\' : [],\n            \'buffer\': \'\'\n        }\n    }\n\n    # Header stuff\n    buffer[\'tag\'] = original[:SZULONG]\n    buffer[\'data_length\'] = original[SZULONG:SZUSHORT]\n    buffer[\'reserved\'] = original[SZULONG+SZUSHORT:SZUSHORT]\n    original = original[8:]\n\n    # Parsing\n    k = reparse_type\n    for c in buffer[k][\'pkeys\']:\n        if type(buffer[k][c]) == int:\n            sz = buffer[k][c]\n            bytes = original[:sz]\n            buffer[k][c] = 0\n            for b in bytes:\n                n = ord(b)\n                if n:\n                    buffer[k][c] += n\n            original = original[sz:]\n\n    # Using the offset and length\'s grabbed, we\'ll set the buffer.\n    buffer[k][\'buffer\'] = original\n    return buffer\n\ndef readlink(fpath):\n    """ Windows readlink implementation. """\n    # This wouldn\'t return true if the file didn\'t exist, as far as I know.\n    if not islink(fpath):\n        return None\n\n    # Open the file correctly depending on the string type.\n    handle = CreateFileW(fpath, GENERIC_READ, 0, None, OPEN_EXISTING, FILE_FLAG_OPEN_REPARSE_POINT, 0) \\\n                if type(fpath) == unicode else \\\n            CreateFile(fpath, GENERIC_READ, 0, None, OPEN_EXISTING, FILE_FLAG_OPEN_REPARSE_POINT, 0)\n\n    # MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384 = (16*1024)\n    buffer = DeviceIoControl(handle, FSCTL_GET_REPARSE_POINT, None, 16*1024)\n    # Above will return an ugly string (byte array), so we\'ll need to parse it.\n\n    # But first, we\'ll close the handle to our file so we\'re not locking it anymore.\n    CloseHandle(handle)\n\n    # Minimum possible length (assuming that the length of the target is bigger than 0)\n    if len(buffer) < 9:\n        return None\n    # Parse and return our result.\n    result = parse_reparse_buffer(buffer)\n    offset = result[SYMBOLIC_LINK][\'substitute_name_offset\']\n    ending = offset + result[SYMBOLIC_LINK][\'substitute_name_length\']\n    rpath = result[SYMBOLIC_LINK][\'buffer\'][offset:ending].replace(\'\\x00\',\'\')\n    if len(rpath) > 4 and rpath[0:4] == \'\\\\??\\\\\':\n        rpath = rpath[4:]\n    return rpath\n\ndef realpath(fpath):\n    from os import path\n    while islink(fpath):\n        rpath = readlink(fpath)\n        if not path.isabs(rpath):\n            rpath = path.abspath(path.join(path.dirname(fpath), rpath))\n        fpath = rpath\n    return fpath\n\n\ndef example():\n    from os import system, unlink\n    system(\'cmd.exe /c echo Hello World > test.txt\')\n    system(\'mklink test-link.txt test.txt\')\n    print \'IsLink: %s\' % islink(\'test-link.txt\')\n    print \'ReadLink: %s\' % readlink(\'test-link.txt\')\n    print \'RealPath: %s\' % realpath(\'test-link.txt\')\n    unlink(\'test-link.txt\')\n    unlink(\'test.txt\')\n\nif __name__==\'__main__\':\n    example()\n']], ['Create NTFS junction point in Python'], 2], [(1143260, 1), [['You may way to check that'], ["if you put this into something you're releasing, since this form of symbolic link is only supported on Vista+."]], [[' sys.getwindowsversion()[0] >= 6\n']], ['Create NTFS junction point in Python'], 2], [(1143379, 0), [['Do you care about preserving order / which duplicate is removed?  If not, then:'], ['will do it.  If you want to preserve order, and want to keep the first one you find then:']], [[' dict((x[0], x) for x in L).values()\n']], ['Removing duplicates from list of lists in Python'], 2], [(1143379, 1), [['will do it.  If you want to preserve order, and want to keep the first one you find then:'], ['-10000']], [[' def unique_items(L):\n    found = set()\n    for item in L:\n        if item[0] not in found:\n            yield item\n            found.add(item[0])\n\nprint list(unique_items(L))\n']], ['Removing duplicates from list of lists in Python'], 2], [(1143671, 0), [['This answer works for any kind of column in the dictionary -- the negated column need not be a number.'], ['You can call it like this:']], [[" def multikeysort(items, columns):\n    from operator import itemgetter\n    comparers = [((itemgetter(col[1:].strip()), -1) if col.startswith('-') else\n                  (itemgetter(col.strip()), 1)) for col in columns]\n    def comparer(left, right):\n        for fn, mult in comparers:\n            result = cmp(fn(left), fn(right))\n            if result:\n                return mult * result\n        else:\n            return 0\n    return sorted(items, cmp=comparer)\n"]], ['Python sorting list of dictionaries by multiple keys'], 4], [(1143671, 1), [['You can call it like this:'], ['Taking my inspiration from this answer  What is the best way to get the first item from an iterable matching a condition? , I shortened the code:']], [[" b = [{u'TOT_PTS_Misc': u'Utley, Alex', u'Total_Points': 96.0},\n     {u'TOT_PTS_Misc': u'Russo, Brandon', u'Total_Points': 96.0},\n     {u'TOT_PTS_Misc': u'Chappell, Justin', u'Total_Points': 96.0},\n     {u'TOT_PTS_Misc': u'Foster, Toney', u'Total_Points': 80.0},\n     {u'TOT_PTS_Misc': u'Lawson, Roman', u'Total_Points': 80.0},\n     {u'TOT_PTS_Misc': u'Lempke, Sam', u'Total_Points': 80.0},\n     {u'TOT_PTS_Misc': u'Gnezda, Alex', u'Total_Points': 78.0},\n     {u'TOT_PTS_Misc': u'Kirks, Damien', u'Total_Points': 78.0},\n     {u'TOT_PTS_Misc': u'Worden, Tom', u'Total_Points': 78.0},\n     {u'TOT_PTS_Misc': u'Korecz, Mike', u'Total_Points': 78.0},\n     {u'TOT_PTS_Misc': u'Swartz, Brian', u'Total_Points': 66.0},\n     {u'TOT_PTS_Misc': u'Burgess, Randy', u'Total_Points': 66.0},\n     {u'TOT_PTS_Misc': u'Smugala, Ryan', u'Total_Points': 66.0},\n     {u'TOT_PTS_Misc': u'Harmon, Gary', u'Total_Points': 66.0},\n     {u'TOT_PTS_Misc': u'Blasinsky, Scott', u'Total_Points': 60.0},\n     {u'TOT_PTS_Misc': u'Carter III, Laymon', u'Total_Points': 60.0},\n     {u'TOT_PTS_Misc': u'Coleman, Johnathan', u'Total_Points': 60.0},\n     {u'TOT_PTS_Misc': u'Venditti, Nick', u'Total_Points': 60.0},\n     {u'TOT_PTS_Misc': u'Blackwell, Devon', u'Total_Points': 60.0},\n     {u'TOT_PTS_Misc': u'Kovach, Alex', u'Total_Points': 60.0},\n     {u'TOT_PTS_Misc': u'Bolden, Antonio', u'Total_Points': 60.0},\n     {u'TOT_PTS_Misc': u'Smith, Ryan', u'Total_Points': 60.0}]\n\na = multikeysort(b, ['-Total_Points', 'TOT_PTS_Misc'])\nfor item in a:\n    print item\n"]], ['Python sorting list of dictionaries by multiple keys'], 4], [(1143671, 2), [['Taking my inspiration from this answer  What is the best way to get the first item from an iterable matching a condition? , I shortened the code:'], ['This works with python3 (which eliminated the  cmp  argument to  sort ):']], [[" from operator import itemgetter as i\n\ndef multikeysort(items, columns):\n    comparers = [\n        ((i(col[1:].strip()), -1) if col.startswith('-') else (i(col.strip()), 1))\n        for col in columns\n    ]\n    def comparer(left, right):\n        comparer_iter = (\n            cmp(fn(left), fn(right)) * mult\n            for fn, mult in comparers\n        )\n        return next((result for result in comparer_iter if result), 0)\n    return sorted(items, cmp=comparer)\n"]], ['Python sorting list of dictionaries by multiple keys'], 4], [(1143671, 3), [['This works with python3 (which eliminated the  cmp  argument to  sort ):'], ['Inspired by this answer  How should I do custom sort in Python 3?']], [[" from operator import itemgetter as i\nfrom functools import cmp_to_key\n\ndef multikeysort(items, columns):\n    comparers = [\n        ((i(col[1:].strip()), -1) if col.startswith('-') else (i(col.strip()), 1))\n        for col in columns\n    ]\n    def comparer(left, right):\n        comparer_iter = (\n            cmp(fn(left), fn(right)) * mult\n            for fn, mult in comparers\n        )\n        return next((result for result in comparer_iter if result), 0)\n    return sorted(items, key=cmp_to_key(comparer))\n"]], ['Python sorting list of dictionaries by multiple keys'], 4], [(1144400, 0), [["It's not too difficult to write your own little parsor for that using  PyParsing ."], ['This is going to print']], [[' import json\nfrom pyparsing import *\n\ndata = """var txns = [\n   { apples: \'100\', oranges: \'20\', type: \'SELL\'}, \n   { apples: \'200\', oranges: \'10\', type: \'BUY\'}]"""\n\n\ndef js_grammar():\n    key = Word(alphas).setResultsName("key")\n    value = QuotedString("\'").setResultsName("value")\n    pair = Group(key + Literal(":").suppress() + value)\n    object_ = nestedExpr("{", "}", delimitedList(pair, ","))\n    array = nestedExpr("[", "]", delimitedList(object_, ","))\n    return array + StringEnd()\n\nJS_GRAMMAR = js_grammar()\n\ndef parse(js):\n    return JS_GRAMMAR.parseString(js[len("var txns = "):])[0]\n\ndef to_dict(object_):\n    return dict((p.key, p.value) for p in object_)\n\nresult = [\n    {"transaction": to_dict(object_)}\n    for object_ in parse(data)]\nprint json.dumps(result)\n']], ['Hacking JavaScript Array Into JSON With Python'], 2], [(1144400, 1), [['This is going to print'], ['You can also add the assignment to the grammar itself. Given there are already off-the-shelf parsers for it, you should better use those. ']], [[' [{"transaction": {"type": "SELL", "apples": "100", "oranges": "20"}},\n {"transaction": {"type": "BUY", "apples": "200", "oranges": "10"}}]\n']], ['Hacking JavaScript Array Into JSON With Python'], 2], [(1144702, 0), [["You can use the  setattr  function, which takes three arguments: the object, the name of the attribute, and it's value. For example,"], ['is equivalent to:']], [[" setattr(self, 'wavelength', wavelength_val)\n"]], ['Using Eval in Python to create class variables'], 3], [(1144702, 1), [['is equivalent to:'], ['So you could do something like this:']], [[' self.wavelength = wavelength_val\n']], ['Using Eval in Python to create class variables'], 3], [(1144702, 2), [['So you could do something like this:'], ['-10000']], [[" for variable in self.variable_list:\n       var_type,var_text_ctrl,var_name = variable\n       if var_type == 'f' :\n           setattr(self, var_name, var_text_ctrl.GetValue())\n"]], ['Using Eval in Python to create class variables'], 3], [(1145334, 0), [['Add the right url to your urlpatterns:'], ['And process it in your view, like AlbertoPL said:']], [[' # ...\n("^foo/(.*)$", "foo"), # or whatever\n# ...\n']], ['Using URLS that accept slashes as part of the parameter in Django'], 2], [(1145334, 1), [['And process it in your view, like AlbertoPL said:'], ['-10000']], [[" fields = paramPassedInAccordingToThatUrl.split('/')\n"]], ['Using URLS that accept slashes as part of the parameter in Django'], 2], [(1145428, 0), [['According to  pythonrun.c  corresponding  Py_InspectFlag  and  Py_InteractiveFlag  are used as follows:'], ['Python doesn\'t exit on  SystemExit  if "inspect" flag is true.']], [[" int Py_InspectFlag; /* Needed to determine whether to exit at SystemError */\n/* snip */\nstatic void\nhandle_system_exit(void)\n{\n    PyObject *exception, *value, *tb;\n    int exitcode = 0;\n\n    if (Py_InspectFlag)\n        /* Don't exit if -i flag was given. This flag is set to 0\n         * when entering interactive mode for inspecting. */\n        return;\n    /* snip */\n}\n"]], ['Difference between "inspect" and "interactive" command line flags in Python'], 2], [(1145428, 1), [['Python doesn\'t exit on  SystemExit  if "inspect" flag is true.'], ['If "interactive" flag is false and current input is not associated with a terminal then python doesn\'t bother entering "interactive" mode (unbuffering stdout, printing version, showing prompt, etc).']], [[' int Py_InteractiveFlag; /* Needed by Py_FdIsInteractive() below */\n/* snip */\n/*\n * The file descriptor fd is considered ``interactive\'\' if either\n *   a) isatty(fd) is TRUE, or\n *   b) the -i flag was given, and the filename associated with\n *      the descriptor is NULL or "<stdin>" or "???".\n */\nint\nPy_FdIsInteractive(FILE *fp, const char *filename)\n{\n    if (isatty((int)fileno(fp)))\n        return 1;\n    if (!Py_InteractiveFlag)\n        return 0;\n    return (filename == NULL) ||\n           (strcmp(filename, "<stdin>") == 0) ||\n           (strcmp(filename, "???") == 0);\n}\n']], ['Difference between "inspect" and "interactive" command line flags in Python'], 2], [(1147812, 0), [['I now have a log.py which looks something like this:'], ['My  settings.py  now contains  ']], [[" import logging, logging.handlers\nfrom django.conf import settings\n\nLOGGING_INITIATED = False\nLOGGER_NAME = 'project_logger'\n\ndef init_logging():\n    logger = logging.getLogger(LOGGER_NAME)\n    logger.setLevel(logging.INFO)\n    handler = logging.handlers.TimedRotatingFileHandler(settings.LOG_FILENAME, when = 'midnight')\n    formatter = logging.Formatter(LOG_MSG_FORMAT)\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n\nif not LOGGING_INITIATED:\n    LOGGING_INITIATED = True\n    init_logging()\n"]], ['What is the DRY way to configure different log file locations for different settings?'], 3], [(1147812, 1), [['My  settings.py  now contains  '], ['and  production.py  contains:']], [[" LOG_FILENAME = '/path/to/log/file/in/development/environment\n"]], ['What is the DRY way to configure different log file locations for different settings?'], 3], [(1147812, 2), [['and  production.py  contains:'], ['-10000']], [[" from settings import *\nLOG_FILENAME = '/path/to/log/file/in/production/environment'\n"]], ['What is the DRY way to configure different log file locations for different settings?'], 3], [(1148827, 0), [["It's the usual problem of binding -- you want early binding for the use of  i  inside the function and Python is doing late binding for it.  You can force the earlier binding this way:"], ['or by wrapping f into an outer function layer taking i as an argument:']], [[" class klass(object):\n    pass\n\nfor i in [1,2]:\n    def f(self, i=i):\n        print(i)\n    setattr(klass, 'f' + str(i), f)\n"]], ['MetaPython: Adding Methods to a Class'], 2], [(1148827, 1), [['or by wrapping f into an outer function layer taking i as an argument:'], ['-10000']], [[" class klass(object):\n    pass\n\ndef fmaker(i):\n    def f(self):\n        print(i)\n    return f\n\nfor i in [1,2]:\n    setattr(klass, 'f' + str(i), fmaker(i))\n"]], ['MetaPython: Adding Methods to a Class'], 2], [(1153183, 0), [['This will solve your current example. It can be tweaked for a larger data set.'], ['The result is:']], [[' import re\nsplitterForIndexing = re.compile(r"(?:[a-zA-Z0-9\\-,]+[a-zA-Z0-9\\-])|(?:[,.])")\nsource = "Hello. 1-methyl-4-phenylpyridinium is ultra-bad. However, 1-methyl-4-phenyl-1,2,3,6-tetrahydropyridine is worse."\nprint "\\n".join( splitterForIndexing.findall(source))\n']], ['Python: question about parsing human-readable text'], 4], [(1153183, 1), [['The result is:'], ["Sorry didn't see ultra-bad. If it's necessary for those words to be split.."]], [[' """\nHello\n.\n1-methyl-4-phenylpyridinium\nis\nultra-bad\n.\nHowever\n,\n1-methyl-4-phenyl-1,2,3,6-tetrahydropyridine\nis\nworse\n.\n"""\n']], ['Python: question about parsing human-readable text'], 4], [(1153183, 2), [["Sorry didn't see ultra-bad. If it's necessary for those words to be split.."], ['Gives:']], [[' import re\nsplitterForIndexing = re.compile(r"(?:[a-zA-Z]+)|(?:[a-zA-Z0-9][a-zA-Z0-9\\-(),]+[a-zA-Z0-9\\-()])|(?:[,.-])")\nsource = "Hello. 1-methyl-4-phenylpyridinium is ultra-bad. However, 1-methyl-4-phenyl-1,(2,3),6-tetrahydropyridine is worse."\nprint "\\n".join( splitterForIndexing.findall(source))\n']], ['Python: question about parsing human-readable text'], 4], [(1153183, 3), [['Gives:'], ['-10000']], [[' """\nHello\n.\n1-methyl-4-phenylpyridinium\nis\nultra\n-\nbad\n.\nHowever\n,\n1-methyl-4-phenyl-1,(2,3),6-tetrahydropyridine\nis\nworse\n.\n"""\n']], ['Python: question about parsing human-readable text'], 4], [(1153469, 0), [["It's true there's no official API, but you can get an idea about best practices by reading other extensions, particularly those bundled with hg. For this particular problem, I would do something like this:"], ["Update  At some point the parameter order changed, now it's like this:"]], [[" from mercurial import ui, hg\nfrom mercurial.node import hex\n\nrepo = hg.repository('/path/to/repo/root', ui.ui())\nfctx = repo.filectx('/path/to/file', 'tip')\nhexnode = hex(fctx.node())\n"]], ['Mercurial scripting with python'], 2], [(1153469, 1), [["Update  At some point the parameter order changed, now it's like this:"], ['-10000']], [["    repo = hg.repository(ui.ui(), '/path/to/repo/root' )\n"]], ['Mercurial scripting with python'], 2], [(1155376, 0), [['Documentation on  re.findall  can be found  here .'], ["If  polymer_str  is huge, it will be more memory efficient to use  re.finditer .  Here's how you might go about it:"]], [[" def getLongestSequenceSize(search_str, polymer_str):\n    matches = re.findall(r'(?:\\b%s\\b\\s?)+' % search_str, polymer_str)\n    longest_match = max(matches)\n    return longest_match.count(search_str)\n"]], ['Python: re..find longest sequence'], 2], [(1155376, 1), [["If  polymer_str  is huge, it will be more memory efficient to use  re.finditer .  Here's how you might go about it:"], ['The biggest difference between  findall  and  finditer  is that the first returns a list object, while the second iterates over Match objects.  Also, the  finditer  approach will be somewhat slower.']], [[" def getLongestSequenceSize(search_str, polymer_str):\n    longest_match = ''\n    for match in re.finditer(r'(?:\\b%s\\b\\s?)+' % search_str, polymer_str):\n        if len(match.group(0)) > len(longest_match):\n            longest_match = match.group(0)\n    return longest_match.count(search_str)\n"]], ['Python: re..find longest sequence'], 2], [(1155566, 0), [['If I define the namespaces like this:    '], ['the Python  ElementTree -API can be used like this:']], [[' <?xml version="1.0"?>\n<rs:data xmlns="http://example.com" xmlns:rs="http://example.com/rs" xmlns:z="http://example.com/z">\n  <z:row Attribute1="1" Attribute2="1" />\n  <z:row Attribute1="2" Attribute2="2" />\n  <z:row Attribute1="3" Attribute2="3" />\n  <z:row Attribute1="4" Attribute2="4" />\n  <z:row Attribute1="5" Attribute2="5" />\n  <z:row Attribute1="6" Attribute2="6" />\n</rs:data>\n']], ['Getting rows from XML using XPath and Python'], 2], [(1155566, 1), [['the Python  ElementTree -API can be used like this:'], ['See also  http://effbot.org/zone/element.htm#xml-namespaces']], [[' ElementTree.parse("r.xml").getroot().findall(\'{http://example.com/z}row\')\n# => [<Element {http://example.com/z}row at 551ee0>, <Element {http://example.com/z}row at 551c60>, <Element {http://example.com/z}row at 551f08>, <Element {http://example.com/z}row at 551be8>, <Element {http://example.com/z}row at 551eb8>, <Element {http://example.com/z}row at 551f30>]\n']], ['Getting rows from XML using XPath and Python'], 2], [(1156023, 0), [["Here's an example of getting the stack via the  traceback  module, and printing it:"], ['If you really only want to print the stack to stderr, you can use:']], [[' import traceback\n\ndef f():\n    g()\n\ndef g():\n    for line in traceback.format_stack():\n        print(line.strip())\n\nf()\n\n# Prints:\n# File "so-stack.py", line 10, in <module>\n#     f()\n# File "so-stack.py", line 4, in f\n#     g()\n# File "so-stack.py", line 7, in g\n#     for line in traceback.format_stack():\n']], ['Print current call stack from a method in Python code'], 3], [(1156023, 1), [['If you really only want to print the stack to stderr, you can use:'], ['Or to print to stdout (useful if want to keep redirected output together), use:']], [[' traceback.print_stack()\n']], ['Print current call stack from a method in Python code'], 3], [(1156023, 2), [['Or to print to stdout (useful if want to keep redirected output together), use:'], ['But getting it via  traceback.format_stack()  lets you do whatever you like with it.']], [[' traceback.print_stack(file=sys.stdout)\n']], ['Print current call stack from a method in Python code'], 3], [(1156030, 0), [["You could use Ping's  rxb :"], ['You can then match on the resulting date directly, or use']], [[' year = member("1", "2") + digit*3\nmonth = either("Jan", "Feb", "Mar")\nday = digit*2\nhour_mins = digit*2 + ":" + digit*2\n\ndate = month + " " + day + ", " + year + ", " + hour_mins\n']], ['Composable Regexp in Python'], 2], [(1156030, 1), [['You can then match on the resulting date directly, or use'], ['-10000']], [[' DateR = date.compile()\n']], ['Composable Regexp in Python'], 2], [(1156962, 0), [["Not sure what you're after exactly but to get an array with all 'Ticker.ticker' values you would do this:"], ['UPDATE 1: Since you have a database, the best way to find out if a new potential ticker needs to be inserted or not is to query the database. This will be much faster than reading all tickers into memory and checking. To see if a value is there or not, try this:']], [[' [instance.ticker for instance in Ticker.query.all()]\n']], ['How to a query a set of objects and return a set of object specific attribute in SQLachemy/Elixir?'], 3], [(1156962, 1), [['UPDATE 1: Since you have a database, the best way to find out if a new potential ticker needs to be inserted or not is to query the database. This will be much faster than reading all tickers into memory and checking. To see if a value is there or not, try this:'], ["If the result is None you don't have it yet. So all together,"]], [[' Ticker.query.filter_by(ticker=new_ticker_value).first()\n']], ['How to a query a set of objects and return a set of object specific attribute in SQLachemy/Elixir?'], 3], [(1156962, 2), [["If the result is None you don't have it yet. So all together,"], ['-10000']], [[' if Ticker.query.filter_by(ticker=new_ticker_value).first() is None:\n    Ticker(ticker=new_ticker_value)\n    session.commit()\n']], ['How to a query a set of objects and return a set of object specific attribute in SQLachemy/Elixir?'], 3], [(1157106, 0), [['2.x'], ['3.x']], [[' >>> x = [1,2,3,2,2,2,3,4]\n>>> filter(lambda a: a != 2, x)\n[1, 3, 3, 4]\n']], ['Remove all occurrences of a value from a list?'], 3], [(1157106, 1), [['3.x'], ['or ']], [[' >>> x = [1,2,3,2,2,2,3,4]\n>>> list(filter((2).__ne__, x))\n[1, 3, 3, 4]\n']], ['Remove all occurrences of a value from a list?'], 3], [(1157106, 2), [['or '], ['-10000']], [[' >>> x = [1,2,3,2,2,2,3,4]\n>>> list(filter(lambda a: a != 2, x))\n[1, 3, 3, 4]\n']], ['Remove all occurrences of a value from a list?'], 3], [(1157385, 0), [["After trying around, the only thing I could see was that you're 100% right. Multiplication by 255 results in a subtraction of 1 -- every time. In the end, I downloaded the pygame source code, and the answer is right there, in  surface.h :"], ['Pygame implements multiply blending as']], [[' #define BLEND_MULT(sR, sG, sB, sA, dR, dG, dB, dA) \\\n    dR = (dR && sR) ? (dR * sR) >> 8 : 0;          \\\n    dG = (dG && sG) ? (dG * sG) >> 8 : 0;          \\\n    dB = (dB && sB) ? (dB * sB) >> 8 : 0;\n']], ['Pygame and blitting: white on white = gray?'], 3], [(1157385, 1), [['Pygame implements multiply blending as'], ['and not, which would be the correct way, as']], [[' new_val = old_dest * old_source / 256\n']], ['Pygame and blitting: white on white = gray?'], 3], [(1157385, 2), [['and not, which would be the correct way, as'], ['This is probably done for optimization purposes -- a bit shift is a lot faster than a division. As the ratio  255 / 256  is very close to one, the only difference this makes is an "off by one": The value you get is the expected value minus one -- except if you expected zero, in which case the result is correct.']], [[' new_val = old_dest * old_source / 255\n']], ['Pygame and blitting: white on white = gray?'], 3], [(1157725, 0), [["You shouldn't have to think about escaping in 1.0 . If you have a template"], ['If you have a variable']], [[' <html>\n <body>\n  & == &amp; in HTML\n </body>\n</html>\n']], ['Django Double Escaping Quotes etc'], 5], [(1157725, 1), [['If you have a variable'], ['and ']], [[' <html>\n <body>\n  {{ msg }}\n </body>\n</html>\n']], ['Django Double Escaping Quotes etc'], 5], [(1157725, 2), [['and '], ['The only time you want to do the encoding yourself is if you need to paste in raw html. Like:']], [[' def view(request) :\n  msg = "& == &amp; in HTML"\n']], ['Django Double Escaping Quotes etc'], 5], [(1157725, 3), [['The only time you want to do the encoding yourself is if you need to paste in raw html. Like:'], ['and in your template']], [[' def view(request) :\n  msg = \'<img src="http://example.com/pretty.jpg" />This picture is very pretty\'\n']], ['Django Double Escaping Quotes etc'], 5], [(1157725, 4), [['and in your template'], ['-10000']], [[' <html>\n <body>\n  {{ msg|safe }}\n </body>\n</html>\n']], ['Django Double Escaping Quotes etc'], 5], [(1157773, 0), [['I think this causes the problem:'], ['If you take a look at the source code:']], [[' item.setPen(markupColors[drawable.source])\n']], ['Qt GraphicsScene constantly redrawing'], 2], [(1157773, 1), [['If you take a look at the source code:'], ['It calls update() each time pen is set.']], [[' void QAbstractGraphicsShapeItem::setPen(const QPen &pen)\n{\n    Q_D(QAbstractGraphicsShapeItem);\n    prepareGeometryChange();\n    d->pen = pen;\n    d->boundingRect = QRectF();\n    update();\n}\n']], ['Qt GraphicsScene constantly redrawing'], 2], [(1158076, 0), [['This tries to be a little more race-free than the other solutions.  (The  with  keyword is new in Python 2.5.)'], ['Roughly equivalent to this.']], [[" import os\ndef touch(fname, times=None):\n    with open(fname, 'a'):\n        os.utime(fname, times)\n"]], ['Implement touch using Python?'], 3], [(1158076, 1), [['Roughly equivalent to this.'], ['As noted by  Nate Parsons , Python 3.3 will  add   specifying a file descriptor  (when  os.supports_fd ) to functions such as  os.utime , which will use the  futimes  syscall instead of the  utimes  syscall under the hood.  In other words:']], [[" import os\ndef touch(fname, times=None):\n    fhandle = open(fname, 'a')\n    try:\n        os.utime(fname, times)\n    finally:\n        fhandle.close()\n"]], ['Implement touch using Python?'], 3], [(1158076, 2), [['As noted by  Nate Parsons , Python 3.3 will  add   specifying a file descriptor  (when  os.supports_fd ) to functions such as  os.utime , which will use the  futimes  syscall instead of the  utimes  syscall under the hood.  In other words:'], ['-10000']], [[' import os\ndef touch(fname, mode=0o666, dir_fd=None, **kwargs):\n    flags = os.O_CREAT | os.O_APPEND\n    with os.fdopen(os.open(fname, flags=flags, mode=mode, dir_fd=dir_fd)) as f:\n        os.utime(f.fileno() if os.utime in os.supports_fd else fname,\n            dir_fd=None if os.supports_fd else dir_fd, **kwargs)\n']], ['Implement touch using Python?'], 3], [(1159023, 0), [['Just like in my old recipe for 2.1 staticmethod:'], ['you should be able to do a 2.1 classmethod as:']], [[' class staticmethod:\n    def __init__(self, thefunc): self.f = thefunc\n    def __call__(self, *a, **k): return self.f(*a, **k)\n']], ['backport function modifiers to python2.1'], 5], [(1159023, 1), [['you should be able to do a 2.1 classmethod as:'], ['No  @ -syntax of course, but rather the old way (like in 2.2):']], [[' class classmethod:\n    def __init__(self, thefunc): self.f = thefunc\n    def __call__(self, obj, *a, **k): return self.f(obj.__class__, *a, **k)\n']], ['backport function modifiers to python2.1'], 5], [(1159023, 2), [['No  @ -syntax of course, but rather the old way (like in 2.2):'], ["If this doesn't work (sorry, been many many years since I had a Python 2.1 around to test), the class will need to be supplied more explicitly -- and since you call classmethod before the class object exists, it will need to be by name -- assuming a global class,"]], [[' class sic:\n  def f(cls): ...\n  f = classmethod(f)\n']], ['backport function modifiers to python2.1'], 5], [(1159023, 3), [["If this doesn't work (sorry, been many many years since I had a Python 2.1 around to test), the class will need to be supplied more explicitly -- and since you call classmethod before the class object exists, it will need to be by name -- assuming a global class,"], ['Since the lack of @ syntax in 2.1 inevitably requires editing of code that uses  @classmethod , an alternative is to move the functionality (decorating some methods to be "class" ones) to right AFTER the end of the  class  statement (the advantage is that the class object does exist at that time).']], [[" class classmethod2:\n    def __init__(self, thefunc, clsnam):\n        self.f = thefunc\n        self.clsnam = clsnam\n    def __call__(self, *a, **k):\n        klass = globals()[self.clsnam]\n        return self.f(klass, *a, **k)\n\nclass sic2:\n  def f(cls): ...\n  f = classmethod2(f, 'sic2')\n"]], ['backport function modifiers to python2.1'], 5], [(1159023, 4), [['Since the lack of @ syntax in 2.1 inevitably requires editing of code that uses  @classmethod , an alternative is to move the functionality (decorating some methods to be "class" ones) to right AFTER the end of the  class  statement (the advantage is that the class object does exist at that time).'], ['-10000']], [[" class classmethod3:\n    def __init__(self, thefunc, klass):\n        self.f = thefunc\n        self.klass = klass\n    def __call__(self, *a, **k):\n        return self.f(self.klass, *a, **k)\n\ndef decorate(klass, klassmethodnames):\n  for n in klassmethodnames:\n    thefunc = klass.__dict__[n]\n    setattr(klass, n, classmethod3(thefunc, klass))\n\nclass sic2:\n  def f(cls): ...\n  def g(self): ...\n  def h(cls): ...\ndecorate(sic2, ['f', 'h'])\n"]], ['backport function modifiers to python2.1'], 5], [(1160329, 0), [['Imagine you serve a page'], ['that contains']], [[' http://mydomain.com/bla\n']], ['redirect browser in SimpleHTTPServer.py?'], 3], [(1160329, 1), [['that contains'], ["On click, the user's browser would retrieve  http://mydomain.com/more.html . Had you instead served"]], [[' <a href="more.html">Read more...</a>\n']], ['redirect browser in SimpleHTTPServer.py?'], 3], [(1160329, 2), [["On click, the user's browser would retrieve  http://mydomain.com/more.html . Had you instead served"], ['(with the same content), the browser would retrieve  http://mydomain.com/bla/more.html . To avoid this ambiguity, the redirection appends a slash if the URL points to a directory.']], [[' http://mydomain.com/bla/\n']], ['redirect browser in SimpleHTTPServer.py?'], 3], [(1162592, 0), [["Dunno about cleaner, but there's another alternative:"], ['A no-copy version:']], [[' for (op, code) in zip(s[0::2], s[1::2]):\n    print op, code\n']], ['Iterate over a string 2 (or n) characters at a time in Python'], 2], [(1162592, 1), [['A no-copy version:'], ['-10000']], [[' from itertools import izip, islice\nfor (op, code) in izip(islice(s, 0, None, 2), islice(s, 1, None, 2)):\n    print op, code\n']], ['Iterate over a string 2 (or n) characters at a time in Python'], 2], [(1165002, 0), [['It is very simple to automatically pick up the field names:'], ['To automatically map classes to tables with same name, you could do:']], [[' from sqlalchemy import Table\nfrom sqlalchemy.orm import MetaData, mapper\n\nmetadata = MetaData()\nmetadata.bind = engine\n\nperson_table = Table(metadata, "tablename", autoload=True)\n\nclass Person(object):\n    pass\n\nmapper(Person, person_table)\n']], ['SQLAlchemy - Models - using dynamic fields - ActiveRecord'], 2], [(1165002, 1), [['To automatically map classes to tables with same name, you could do:'], ['Elixir might do everything you want.']], [[' def map_class(class_):\n    table = Table(metadata, class_.__name__, autoload=True)\n    mapper(class_, table)\n\nmap_class(Person)\nmap_class(Order)\n']], ['SQLAlchemy - Models - using dynamic fields - ActiveRecord'], 2], [(1166118, 0), [["In the general case, you can't, because"], ['is equivalent to']], [[' @with_connection\ndef spam(connection):\n    # Do something\n']], ['How to strip decorators from a function in python'], 3], [(1166118, 1), [['is equivalent to'], ['which means that the "original" spam might not even exist anymore. A (not too pretty) hack would be this:']], [[' def spam(connection):\n    # Do something\n\nspam = with_connection(spam)\n']], ['How to strip decorators from a function in python'], 3], [(1166118, 2), [['which means that the "original" spam might not even exist anymore. A (not too pretty) hack would be this:'], ['-10000']], [[' def with_connection(f):\n    def decorated(*args, **kwargs):\n        f(get_connection(...), *args, **kwargs)\n    decorated._original = f\n    return decorated\n\n@with_connection\ndef spam(connection):\n    # Do something\n\nspam._original(testcon) # calls the undecorated function\n']], ['How to strip decorators from a function in python'], 3], [(1168236, 0), [["And if you don't really need a function you can replace it even without a lambda. :)"], ['by itself is an expression that evaluates to True or False. Or even plainer,']], [[' (number % 2 != 0)\n']], ['Boolean evaluation in a lambda'], 3], [(1168236, 1), [['by itself is an expression that evaluates to True or False. Or even plainer,'], ['which you can simplify like so:']], [[' bool(number % 2)\n']], ['Boolean evaluation in a lambda'], 3], [(1168236, 2), [['which you can simplify like so:'], ["But if that's readable or not is probably in the eye of the beholder."]], [[' if number % 2:\n    print "Odd!"\nelse:\n    print "Even!"\n']], ['Boolean evaluation in a lambda'], 3], [(1168517, 0), [['This method parses the text once to obtain a list of all the "words". Each word is looked up in a dictionary of the target words, and if it is a target word it is counted. The time taken is O(P) + O(T) where P is the size of the paragraph and T is the number of target words. All other solutions to date (including the currently accepted solution) except my Aho-Corasick solution are O(PT).'], ["Here's the currently accepted solution expressed in a standardised form and augmented with word delimiters:"]], [[' def counts_all(targets, paragraph, word_regex=r"\\w+"):\n    tally = dict((target, 0) for target in targets)\n    for word in re.findall(word_regex, paragraph):\n        if word in tally:\n            tally[word] += 1\n    return [tally[target] for target in targets]\n\ndef counts_iter(targets, paragraph, word_regex=r"\\w+"):\n    tally = dict((target, 0) for target in targets)\n    for matchobj in re.finditer(word_regex, paragraph):\n        word = matchobj.group()\n        if word in tally:\n            tally[word] += 1\n    return [tally[target] for target in targets] \n']], ['Using map() to get number of times list elements exist in a string in Python'], 3], [(1168517, 1), [["Here's the currently accepted solution expressed in a standardised form and augmented with word delimiters:"], ['which goes overboard on closures and could be reduced to:']], [[' def currently_accepted_solution_augmented(targets, paragraph):\n    def tester(s): \n        def f(x):\n            return len(re.findall(r"\\b" + x + r"\\b", s))\n        return f\n    return map(tester(paragraph), targets)\n']], ['Using map() to get number of times list elements exist in a string in Python'], 3], [(1168517, 2), [['which goes overboard on closures and could be reduced to:'], ['All variations on the currently accepted solution are O(PT). Unlike the currently accepted solution, the regex search with word delimiters is not equivalent to a simple  paragraph.find(target) . Because the re engine doesn\'t use the "fast search" in this case, adding the word delimiters changes it fron slow to  very  slow.']], [[' # acknowledgement:\n# this is structurally the same as one of hughdbrown\'s benchmark functions\ndef currently_accepted_solution_augmented_without_extra_closure(targets, paragraph):\n    def tester(x):\n        return len(re.findall(r"\\b" + x + r"\\b", paragraph))\n    return map(tester, targets)\n']], ['Using map() to get number of times list elements exist in a string in Python'], 3], [(1169185, 0), [['Now, as for your looping issue. If you want the code run forever (or until you stop the program) the code you want is'], ["If you are attached to having a particular number of iterations, then you could do something like sunqiang's answer (repeated here)"]], [['  while True:\n    os.system(kjor)\n    time.sleep(seconds)\n']], ['Can I damage the system by running time.sleep() with this newbie code in Python?'], 2], [(1169185, 1), [["If you are attached to having a particular number of iterations, then you could do something like sunqiang's answer (repeated here)"], ['Finally, if you are on a Unix platform (such as Linux or Mac) you should take a look at cron, as it is designed to set up recurring programs to run and particular time periods. You could set it up to run your script every minute and it will happily do so until the end of time (or you remove it, whichever comes first).']], [[' for loop in xrange(240):\n    os.system(kjor)\n    time.sleep(seconds)\n']], ['Can I damage the system by running time.sleep() with this newbie code in Python?'], 2], [(1173520, 0), [["Python's version is much faster in a simple test on my Mac:"], ['vs']], [[' jython -m timeit -s "import random" "random.random()"\n']], ['Randomness in Jython'], 2], [(1173520, 1), [['vs'], ['1000000 loops, best of 3: 1.65 usec per loop']], [['  jython -m timeit -s "import java.util.Random; random=java.util.Random()" "random.nextDouble()"\n']], ['Randomness in Jython'], 2], [(1175208, 0), [['This is pretty thorough:'], ["Works with all these (and doesn't harm already-un-cameled versions):"]], [[" def convert(name):\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n"]], ['Elegant Python function to convert CamelCase to snake_case?'], 4], [(1175208, 1), [["Works with all these (and doesn't harm already-un-cameled versions):"], ["Or if you're going to call it a zillion times, you can pre-compile the regexes:"]], [[" >>> convert('CamelCase')\n'camel_case'\n>>> convert('CamelCamelCase')\n'camel_camel_case'\n>>> convert('Camel2Camel2Case')\n'camel2_camel2_case'\n>>> convert('getHTTPResponseCode')\n'get_http_response_code'\n>>> convert('get2HTTPResponseCode')\n'get2_http_response_code'\n>>> convert('HTTPResponseCode')\n'http_response_code'\n>>> convert('HTTPResponseCodeXYZ')\n'http_response_code_xyz'\n"]], ['Elegant Python function to convert CamelCase to snake_case?'], 4], [(1175208, 2), [["Or if you're going to call it a zillion times, you can pre-compile the regexes:"], ["Don't forget to import the regular expression module"]], [[" first_cap_re = re.compile('(.)([A-Z][a-z]+)')\nall_cap_re = re.compile('([a-z0-9])([A-Z])')\ndef convert(name):\n    s1 = first_cap_re.sub(r'\\1_\\2', name)\n    return all_cap_re.sub(r'\\1_\\2', s1).lower()\n"]], ['Elegant Python function to convert CamelCase to snake_case?'], 4], [(1175208, 3), [["Don't forget to import the regular expression module"], ['-10000']], [[' import re\n']], ['Elegant Python function to convert CamelCase to snake_case?'], 4], [(1180846, 0), [['Code:'], ['A simple test:']], [[' original.update(col[user])\n']], ['one liner for conditionally replacing dictionary values'], 3], [(1180846, 1), [['A simple test:'], ['Output']], [[' user = "user"\n\nmatrix = {\n    "user" : {\n        "a" : "b",\n        "c" : "d",\n        "e" : "f",\n    },\n}\n\ncol = {\n    "user" : {\n        "a" : "b_2",\n        "c" : "d_2",\n    },\n}\n\noriginal.update(col[user])\n\nprint(original)\n']], ['one liner for conditionally replacing dictionary values'], 3], [(1180846, 2), [['Output'], ['-10000']], [[" {'a': 'b_2', 'c': 'd_2', 'e': 'f'}\n"]], ['one liner for conditionally replacing dictionary values'], 3], [(1183428, 0), [["Edit : since the OP says this performance would be fine but he can't achieve anywhere near it, I guess I'd best show the script I used to measure these times...:"], ['and this is a typical run:']], [[" import gc\nimport operator\nimport random\nimport time\n\n\nnk = 1000\n\ndef popcon(d):\n  for x in xrange(nk*1000):\n    d['id%s' % x] = random.randrange(100*1000)\n\ndef sorted_container():\n  ctr = dict()\n  popcon(ctr)\n  start = time.time()\n  ctr_sorted = ctr.items()\n  ctr_sorted.sort(key=operator.itemgetter(1))\n  stend = time.time()\n  return stend-start, ctr_sorted\n\ndef do_update(ctr, newones):\n  start = time.time()\n  dicol = dict(ctr)\n  ctr.extend((k,v) for (k,v) in newones if v!=dicol.get(k,None))\n  dicnu = dict(newones)\n  ctr.sort(key=operator.itemgetter(1))\n  newctr = [(k,v) for (k,v) in ctr if v==dicnu.get(k,v)]\n  stend = time.time()\n  return stend-start, newctr\n\ndef main():\n  random.seed(12345)\n  for x in range(3):\n    duration, ctr = sorted_container()\n    print 'dict-to-sorted, %d: %.2f sec, len=%d' % (x, duration, len(ctr))\n    newones = [('id%s' % y, random.randrange(nk*100))\n                for y in xrange(nk*990,nk*1010)]\n    duration, ctr = do_update(ctr, newones)\n    print 'updt-to-sorted, %d: %.2f sec, len=%d' % (x, duration, len(ctr))\n    del ctr\n    gc.collect()\n\nmain()\n"]], ["Python: Zope's BTree OOSet, IISet, etc... Effective for this requirement?"], 2], [(1183428, 1), [['and this is a typical run:'], ['the overall elapsed time being a few seconds more than the totals I\'m measuring, obviously, because it includes the time needed to populate the container with random numbers, generate the "new data" also randomly, destroy and garbage-collect things at the end of each run, and so forth.']], [[' $ time python som.py\ndict-to-sorted, 0: 5.01 sec, len=1000000\nupdt-to-sorted, 0: 9.78 sec, len=1010000\ndict-to-sorted, 1: 5.02 sec, len=1000000\nupdt-to-sorted, 1: 9.12 sec, len=1010000\ndict-to-sorted, 2: 5.03 sec, len=1000000\nupdt-to-sorted, 2: 9.12 sec, len=1010000\n\nreal    0m54.073s\nuser    0m52.464s\nsys 0m1.258s\n']], ["Python: Zope's BTree OOSet, IISet, etc... Effective for this requirement?"], 2], [(1183716, 0), [['So, below, let\'s say we have a Math class that lets us set and get an integer variable named "pi". Then we can use this code:'], ['-10000']], [['example.h #ifndef EXAMPLE_H\n#define EXAMPLE_H\n\nclass Math {\n public:\n    int pi() const {\n        return this->_pi;\n    }\n\n    void pi(int pi) {\n        this->_pi = pi;\n    }\n\n private:\n    int _pi;\n};\n\n#endif\n']], ['Python Properties & Swig'], 5], [(1183716, 1), [['-10000'], ['-10000']], [['example.i %module example\n\n%{\n    #define SWIG_FILE_WITH_INIT\n    #include "example.h"\n%}\n\n[essentially example.h repeated again]\n']], ['Python Properties & Swig'], 5], [(1183716, 2), [['-10000'], ['-10000']], [['example.cpp #include "example.h"\n']], ['Python Properties & Swig'], 5], [(1183716, 3), [['-10000'], ['-10000']], [['util.py class PropertyVoodoo(type):\n    """A metaclass. Initializes when the *class* is initialized, not\n    the object. Therefore, we are free to muck around the class\n    methods and, specifically, descriptors."""\n\n    def __init__(cls, *a):\n        # OK, so the list of C++ properties using the style described\n        # in the OP is stored in a __properties__ magic variable on\n        # the class.\n        for prop in cls.__properties__:\n\n            # Get accessor.\n            def fget(self):\n                # Get the SWIG class using super. We have to use super\n                # because the only information we\'re working off of is\n                # the class object itself (cls). This is not the most\n                # robust way of doing things but works when the SWIG\n                # class is the only superclass.\n                s = super(cls, self)\n\n                # Now get the C++ method and call its operator().\n                return getattr(s, prop)()\n\n            # Set accessor.\n            def fset(self, value):\n                # Same as above.\n                s = super(cls, self)\n\n                # Call its overloaded operator(int value) to set it.\n                return getattr(s, prop)(value)\n\n            # Properties in Python are descriptors, which are in turn\n            # static variables on the class. So, here we create the\n            # static variable and set it to the property.\n            setattr(cls, prop, property(fget=fget, fset=fset))\n\n        # type() needs the additional arguments we didn\'t use to do\n        # inheritance. (Parent classes are passed in as arguments as\n        # part of the metaclass protocol.) Usually a = [<some swig\n        # class>] right now.\n        super(PropertyVoodoo, cls).__init__(*a)\n\n        # One more piece of work: SWIG selfishly overrides\n        # __setattr__. Normal Python classes use object.__setattr__,\n        # so that\'s what we use here. It\'s not really important whose\n        # __setattr__ we use as long as we skip the SWIG class in the\n        # inheritance chain because SWIG\'s __setattr__ will skip the\n        # property we just created.\n        def __setattr__(self, name, value):\n            # Only do this for the properties listed.\n            if name in cls.__properties__:\n                object.__setattr__(self, name, value)\n            else:\n                # Same as above.\n                s = super(cls, self)\n\n                s.__setattr__(name, value)\n\n        # Note that __setattr__ is supposed to be an instance method,\n        # hence the self. Simply assigning it to the class attribute\n        # will ensure it\'s an instance method; that is, it will *not*\n        # turn into a static/classmethod magically.\n        cls.__setattr__ = __setattr__\n']], ['Python Properties & Swig'], 5], [(1183716, 4), [['-10000'], ['So the end result is just that you have to create a wrapper class for every SWIG Python class and then type two lines: one to mark which methods should be converted in properties and one to bring in the metaclass.']], [["somefile.py import example\nfrom util import PropertyVoodoo\n\nclass Math(example.Math):\n    __properties__ = ['pi']\n    __metaclass__  = PropertyVoodoo\n\nm = Math()\nprint m.pi\nm.pi = 1024\nprint m.pi\nm.pi = 10000\nprint m.pi\n"]], ['Python Properties & Swig'], 5], [(1185388, 0), [["When you return from a conditional, you don't need to sitck the rest of the function in an else block."], ['Of course, for anything but an exercise, you should be using list.sort or sorted().']], [[' def mergesort(list):\n    if len(list) < 2:\n        return list\n    middle = len(list) / 2\n    left = mergesort(list[:middle])\n    right = mergesort(list[middle:])\n    return merge(left, right)\n']], ['merge sort implementation to sort by string length - python'], 2], [(1185388, 1), [['Of course, for anything but an exercise, you should be using list.sort or sorted().'], ['-10000']], [[' a = ["abc", "de", "f", "ghijkl"]\nprint sorted(a, lambda a,b: cmp(len(a), len(b)))\n']], ['merge sort implementation to sort by string length - python'], 2], [(1185628, 0), [["There's no built-in constraint for making sure a value is unique. You can do this however:"], ["If you're looking to check for uniqueness across  all  entities with transactions, you'd have to put all of them in the same group using the first method, which would be very inefficient. For transactions, use the second method like this:"]], [[" query = MyModel.all(keys_only=True).filter('unique_property', value_to_be_used)\nentity = query.get()\nif entity:\n    raise Exception('unique_property must have a unique value!')\n"]], ['How do I define a unique property for a Model in Google App Engine?'], 2], [(1185628, 1), [["If you're looking to check for uniqueness across  all  entities with transactions, you'd have to put all of them in the same group using the first method, which would be very inefficient. For transactions, use the second method like this:"], ["UniqueConstraint.check(...)  will assume that every single key/value pair must be unique to return success. The transaction will use a single entity group for every model kind. This way, the transaction is reliable for several different fields at once (for only one field, this would be much simpler.) Also, even if you've got fields with the same name in one or more models, they will not conflict with each other."]], [[" class UniqueConstraint(db.Model):\n    @classmethod\n    def check(cls, model, **values):\n        # Create a pseudo-key for use as an entity group.\n        parent = db.Key.from_path(model.kind(), 'unique-values')\n\n        # Build a list of key names to test.\n        key_names = []\n        for key in values:\n            key_names.append('%s:%s' % (key, values[key]))\n\n        def txn():\n            result = cls.get_by_key_name(key_names, parent)\n            for test in result:\n                if test: return False\n            for key_name in key_names:\n                uc = cls(key_name=key_name, parent=parent)\n                uc.put()\n            return True\n\n        return db.run_in_transaction(txn)\n"]], ['How do I define a unique property for a Model in Google App Engine?'], 2], [(1186501, 0), [["Since apparently you don't care about the ending value of  self.sorted_records  actually  being  sorted (you have values in order 1, 45, 20, 76 -- that's NOT sorted!-), AND you only appear to care about IDs in  updated_records  that are also in  self.sorted_data , a listcomp (with side effects if you want to change the updated_record on the fly) would serve you well, i.e.:"], ['the  .pop  call removes from  updated_records  the keys (and corresponding values) that are ending up in the new  self.sorted_data  (and the "previous value for that  recid ",  value , is supplied as the 2nd argument to pop to ensure no change where a recid is NOT in  updated_record ); this leaves in  updated_record  the "new" stuff so you can e.g append it to  self.sorted_data  before re-sorting, i.e I suspect you want to continue with something like']], [[' self.sorted_data = [(updated_records.pop(recid, value), recid) \n                    for (value, recid) in self.sorted_data]\n']], ['Python: update a list of tuples... fastest method'], 2], [(1186501, 1), [['the  .pop  call removes from  updated_records  the keys (and corresponding values) that are ending up in the new  self.sorted_data  (and the "previous value for that  recid ",  value , is supplied as the 2nd argument to pop to ensure no change where a recid is NOT in  updated_record ); this leaves in  updated_record  the "new" stuff so you can e.g append it to  self.sorted_data  before re-sorting, i.e I suspect you want to continue with something like'], ["though this part DOES go beyond the question you're actually asking (and I'm giving it only because I've seen your  previous  questions;-)."]], [[' self.sorted_data.extend(value, recid \n                        for recid, value in updated_records.iteritems())\nself.sorted_data.sort()\n']], ['Python: update a list of tuples... fastest method'], 2], [(1186789, 0), [['test1.py'], ['service.py']], [[" def some_func():\n    print 'in test 1, unproductive'\n\nif __name__ == '__main__':\n    # test1.py executed as script\n    # do something\n    some_func()\n"]], ['What is the best way to call a Python script from another Python script?'], 2], [(1186789, 1), [['service.py'], ['-10000']], [[" import test1\n\ndef service_func():\n    print 'service func'\n\nif __name__ == '__main__':\n    # service.py executed as script\n    # do something\n    service_func()\n    test1.some_func()\n"]], ['What is the best way to call a Python script from another Python script?'], 2], [(1187718, 0), [['Cracking open xml.dom.minidom and searching for "/>", we find this:'], ['We can deduce from this that the short-end-tag form only occurs when childNodes is an empty list. Indeed, this seems to be true:']], [[' # Method of the Element(Node) class.\ndef writexml(self, writer, indent="", addindent="", newl=""):\n    # [snip]\n    if self.childNodes:\n        writer.write(">%s"%(newl))\n        for node in self.childNodes:\n            node.writexml(writer,indent+addindent,addindent,newl)\n        writer.write("%s</%s>%s" % (indent,self.tagName,newl))\n    else:\n        writer.write("/>%s"%(newl))\n']], ['Empty XML element handling in Python'], 2], [(1187718, 1), [['We can deduce from this that the short-end-tag form only occurs when childNodes is an empty list. Indeed, this seems to be true:'], ['As pointed out by Lloyd, the XML spec makes no distinction between the two. If your code  does  make the distinction, that means you need to rethink how you want to serialize your data. ']], [[' >>> doc = Document()\n>>> v = doc.appendChild(doc.createElement(\'v\'))\n>>> v.toxml()\n\'<v/>\'\n>>> v.childNodes\n[]\n>>> v.appendChild(doc.createTextNode(\'\'))\n<DOM Text node "\'\'">\n>>> v.childNodes\n[<DOM Text node "\'\'">]\n>>> v.toxml()\n\'<v></v>\'\n']], ['Empty XML element handling in Python'], 2], [(1188052, 0), [['urls.py'], ['views.py']], [[" (r'^/(?P<kind>blog)/$', 'view.stuff'),\n(r'^/(?P<kind>news)/$', 'view.stuff'),\n"]], ['Reusing a Django app within a single project'], 2], [(1188052, 1), [['views.py'], ["Perhaps you don't need the same app twice, but need to extend the app to handle both use cases."]], [[' def stuff( request, kind ):\n    content= news_blog.objects.filter( kind=kind )\n    return render_to_response( kind+"_page", { \'content\': content } )\n']], ['Reusing a Django app within a single project'], 2], [(1189649, 0), [['-10000'], ['This will accomplish what you want. Or, in case you meant to use classToUse, simply use:']], [[' o = C2()\n']], ["In Python, what's the correct way to instantiate a class from a variable?"], 2], [(1189649, 1), [['This will accomplish what you want. Or, in case you meant to use classToUse, simply use:'], ['Hope this helps.']], [[' o = classToUse()\n']], ["In Python, what's the correct way to instantiate a class from a variable?"], 2], [(1191221, 0), [['Where you define your menu:'], ['Then your callback:']], [[' self.about_menu = wx.Menu()  # or whatever inherited class you have\nself.Bind(wx.EVT_MENU_OPEN, self.on_menu_open)\n']], ['Bind event to wx.Menu() instead of to the menu item in wxPython'], 2], [(1191221, 1), [['Then your callback:'], ['-10000']], [[' def on_menu_open(self, event):\n    if event.GetMenu()==self.about_menu:\n         #do something\n']], ['Bind event to wx.Menu() instead of to the menu item in wxPython'], 2], [(1192269, 0), [['You can use  results  instantly as an iterator.'], ['Selecting specific columns is done the following way:']], [[' results = s.execute()\n\nfor row in results:\n    print row\n']], ['SQLAlchemy: Operating on results'], 2], [(1192269, 1), [['Selecting specific columns is done the following way:'], ['To print the column names additional to the values the way you have done it in your question should be the best because RowProxy is really nothing more than a ordered dictionary.']], [[' from sqlalchemy.sql import select\n\ns = select([users_table.c.user_name, users_table.c.user_country], users_table.c.user_name == username)\n\nfor user_name, user_country in s.execute():\n   print user_name, user_country\n']], ['SQLAlchemy: Operating on results'], 2], [(1197042, 0), [['-10000'], ['Or, more succinctly,']], [[' def do_something(attribute, objects):\n    results = []\n    for object in objects:\n        if hasattr(object, attribute):\n            results.append(getattr(object, attribute))\n    return results\n']], ['Passing a Django model attribute name to a function'], 2], [(1197042, 1), [['Or, more succinctly,'], ['-10000']], [[' def do_something(attribute, objects):\n    return [getattr(o, attribute) for o in objects if hasattr(o, attribute)]\n']], ['Passing a Django model attribute name to a function'], 2], [(1197589, 0), [['Did you know that Python 2 provides some codecs for doing interesting conversions such as Caeser rotation (i.e. rot13)?  Thus, you can do things like:'], ["This doesn't work in Python 3 though, because even though certain str-to-str codecs like rot-13 still exist, the str.encode() interface requires that the codec return a bytes object. In order to use str-to-str codecs in both Python 2 and Python 3, you'll have to pop the hood and use a lower-level API, getting and calling the codec directly:"]], [[" >>> 'foo'.encode('rot-13')\n'sbb'\n"]], ['Stream/string/bytearray transformations in Python 3'], 2], [(1197589, 1), [["This doesn't work in Python 3 though, because even though certain str-to-str codecs like rot-13 still exist, the str.encode() interface requires that the codec return a bytes object. In order to use str-to-str codecs in both Python 2 and Python 3, you'll have to pop the hood and use a lower-level API, getting and calling the codec directly:"], ['You have to get the zeroth-element from the return value of the encoder because of the codecs API.  A bit ugly, but it works in both versions of Python.']], [[" >>> from codecs import getencoder\n>>> encoder = getencoder('rot-13')\n>>> rot13string = encoder(mystring)[0]\n"]], ['Stream/string/bytearray transformations in Python 3'], 2], [(1198262, 0), [['One of the following will work (no extra threads):'], ['With extra thread:']], [[" if __name__ == '__main__':\n    t = tk.Tk()\n    t.iconbitmap('icon.ico')\n\n    b = tk.Button(text='test', command=exit)\n    b.grid(row=0)\n\n    t.mainloop()\n"]], ['Tkinter locks Python when an icon is loaded and tk.mainloop is in a thread'], 3], [(1198262, 1), [['With extra thread:'], ['Here is an example:']], [[" def threadmain():\n    t = tk.Tk()\n    t.iconbitmap('icon.ico')\n    b = tk.Button(text='test', command=exit)\n    b.grid(row=0)\n    t.mainloop()\n\n\nif __name__ == '__main__':\n    thread.start_new_thread(threadmain, ())\n\n    while 1:\n        sleep(1)\n"]], ['Tkinter locks Python when an icon is loaded and tk.mainloop is in a thread'], 3], [(1198262, 2), [['Here is an example:'], ['-10000']], [[' import Tkinter as tk\nimport thread\nfrom time import sleep\nimport Queue\n\nrequest_queue = Queue.Queue()\nresult_queue = Queue.Queue()\n\ndef submit_to_tkinter(callable, *args, **kwargs):\n    request_queue.put((callable, args, kwargs))\n    return result_queue.get()\n\nt = None\ndef threadmain():\n    global t\n\n    def timertick():\n        try:\n            callable, args, kwargs = request_queue.get_nowait()\n        except Queue.Empty:\n            pass\n        else:\n            print "something in queue"\n            retval = callable(*args, **kwargs)\n            result_queue.put(retval)\n\n        t.after(500, timertick)\n\n    t = tk.Tk()\n    t.configure(width=640, height=480)\n    b = tk.Button(text=\'test\', name=\'button\', command=exit)\n    b.place(x=0, y=0)\n    timertick()\n    t.mainloop()\n\ndef foo():\n    t.title("Hello world")\n\ndef bar(button_text):\n    t.children["button"].configure(text=button_text)\n\ndef get_button_text():\n    return t.children["button"]["text"]\n\nif __name__ == \'__main__\':\n    thread.start_new_thread(threadmain, ())\n\n    trigger = 0\n    while 1:\n        trigger += 1\n\n        if trigger == 3:\n            submit_to_tkinter(foo)\n\n        if trigger == 5:\n            submit_to_tkinter(bar, "changed")\n\n        if trigger == 7:\n            print submit_to_tkinter(get_button_text)\n\n        sleep(1)\n']], ['Tkinter locks Python when an icon is loaded and tk.mainloop is in a thread'], 3], [(1198512, 0), [['This is the simplest and most pythonic solution I can think of:'], ['if the inputs are very large, then the iterators solution should be more convenient:']], [[' def partition(alist, indices):\n    return [alist[i:j] for i, j in zip([0]+indices, indices+[None])]\n']], ['Split a list into parts based on a set of indexes in Python'], 3], [(1198512, 1), [['if the inputs are very large, then the iterators solution should be more convenient:'], ["and of course, the very, very lazy guy solution (if you don't mind to get arrays instead of lists, but anyway you can always revert them to lists):"]], [[' from itertools import izip, chain\ndef partition(alist, indices):\n    pairs = izip(chain([0], indices), chain(indices, [None]))\n    return (alist[i:j] for i, j in pairs)\n']], ['Split a list into parts based on a set of indexes in Python'], 3], [(1198512, 2), [["and of course, the very, very lazy guy solution (if you don't mind to get arrays instead of lists, but anyway you can always revert them to lists):"], ['-10000']], [[' import numpy\npartition = numpy.split\n']], ['Split a list into parts based on a set of indexes in Python'], 3], [(1199350, 0), [['Go with a list of lists. That is:'], ['To modify a specific column, you can transform this into a list of columns with a single statement:']], [[' [[col1, col2, col3, col4], # Row 1\n [col1, col2, col3, col4], # Row 2\n [col1, col2, col3, col4], # Row 3\n [col1, col2, col3, col4]] # Row 4\n']], ['Whats the best way of putting tabular data into python?'], 2], [(1199350, 1), [['To modify a specific column, you can transform this into a list of columns with a single statement:'], ['-10000']], [[' >>> cols = zip(*rows)\n>>> cols\n[[row1, row2, row3, row4], # Col 1\n [row1, row2, row3, row4], # Col 2\n [row1, row2, row3, row4], # Col 3\n [row1, row2, row3, row4]] # Col 4\n']], ['Whats the best way of putting tabular data into python?'], 2], [(1199470, 0), [["Here's a Python script I made that I use with all my heavy JavaScript projects. I'm using YUICompressor, but you can change the code to use another compressor."], ['I use it like this (the below is just a code snippet, and assumes that the  compress  function exists in the current namespace):']], [[' import os, os.path, shutil\n\nYUI_COMPRESSOR = \'yuicompressor-2.4.2.jar\'\n\ndef compress(in_files, out_file, in_type=\'js\', verbose=False,\n             temp_file=\'.temp\'):\n    temp = open(temp_file, \'w\')\n    for f in in_files:\n        fh = open(f)\n        data = fh.read() + \'\\n\'\n        fh.close()\n\n        temp.write(data)\n\n        print \' + %s\' % f\n    temp.close()\n\n    options = [\'-o "%s"\' % out_file,\n               \'--type %s\' % in_type]\n\n    if verbose:\n        options.append(\'-v\')\n\n    os.system(\'java -jar "%s" %s "%s"\' % (YUI_COMPRESSOR,\n                                          \' \'.join(options),\n                                          temp_file))\n\n    org_size = os.path.getsize(temp_file)\n    new_size = os.path.getsize(out_file)\n\n    print \'=> %s\' % out_file\n    print \'Original: %.2f kB\' % (org_size / 1024.0)\n    print \'Compressed: %.2f kB\' % (new_size / 1024.0)\n    print \'Reduction: %.1f%%\' % (float(org_size - new_size) / org_size * 100)\n    print \'\'\n\n    #os.remove(temp_file)\n']], ['combine javascript files at deployment in python'], 2], [(1199470, 1), [['I use it like this (the below is just a code snippet, and assumes that the  compress  function exists in the current namespace):'], ['-10000']], [[" SCRIPTS = [\n    'app/js/libs/EventSource.js',\n    'app/js/libs/Hash.js',\n    'app/js/libs/JSON.js',\n    'app/js/libs/ServiceClient.js',\n    'app/js/libs/jquery.hash.js',\n    'app/js/libs/Application.js',\n    'app/js/intro.js',\n    'app/js/jquery-extras.js',\n    'app/js/settings.js',\n    'app/js/api.js',\n    'app/js/game.js',\n    'app/js/user.js',\n    'app/js/pages.intro.js',\n    'app/js/pages.home.js',\n    'app/js/pages.log-in.js',\n    'app/js/pages.log-out.js',\n    'app/js/pages.new-command.js',\n    'app/js/pages.new-frame.js',\n    'app/js/pages.not-found.js',\n    'app/js/pages.register.js',\n    'app/js/pages.outro.js',\n    'app/js/outro.js',\n    ]\nSCRIPTS_OUT_DEBUG = 'app/js/multifarce.js'\nSCRIPTS_OUT = 'app/js/multifarce.min.js'\n\nSTYLESHEETS = [\n    'app/media/style.css',\n    ]\nSTYLESHEETS_OUT = 'app/media/style.min.css'\n\ndef main():\n    print 'Compressing JavaScript...'\n    compress(SCRIPTS, SCRIPTS_OUT, 'js', False, SCRIPTS_OUT_DEBUG)\n\n    print 'Compressing CSS...'\n    compress(STYLESHEETS, STYLESHEETS_OUT, 'css')\n\nif __name__ == '__main__':\n    main()\n"]], ['combine javascript files at deployment in python'], 2], [(1199713, 0), [['You use  ReferenceProperty  to specify a relationship between two models:'], ['How to use:']], [[" class Country(db.Model):\n    name = db.StringProperty(required=True)\n\nclass State(db.Model):\n    country = db.ReferenceProperty(Country, collection_name='states')\n    name = db.StringProperty(required=True)\n\nclass City(db.Model):\n    state = db.ReferenceProperty(State, collection_name='cities')\n    name = db.StringProperty(required=True)\n"]], ['Google app engine - structuring model layout with regards to parents?'], 3], [(1199713, 1), [['How to use:'], ['Should output:']], [[" # Create a new country:\nus = Country(name='USA')\nus.put()\n\n# Create a new state\nca = State(name='California', country=us)\nca.put()\n\n# Create a new city\nla = City(name='Los Angeles', state=ca)\nla.put()\n\n# And another\nsf = City(name='San Francisco', state=ca)\nsf.put()\n\n# Print states\nfor state in us.states:\n    print state.name\n\n    # Print cities\n    for city in state.cities:\n        print ' ' + city.name\n"]], ['Google app engine - structuring model layout with regards to parents?'], 3], [(1199713, 2), [['Should output:'], ['-10000']], [[' California\n Los Angeles\n San Francisco\n']], ['Google app engine - structuring model layout with regards to parents?'], 3], [(1199743, 0), [['so I have looked into it a bit deeper, using this further useless package:'], ['I tried the two forms']], [[" A:(__init__.py: print 'importing A',\n   B:(__init__.py: print 'importing B',\n      C1:(__init__.py: print 'importing C1',\n          D:(__init__.py: print 'importing D'))\n      C2:(__init__.py: print 'importing C2',\n          D:(__init__.py: print 'importing D'))))\n"]], ['importing modules with submodules from deep in a library'], 6], [(1199743, 1), [['I tried the two forms'], ['and the much uglier one']], [[' from A.B import C1\n']], ['importing modules with submodules from deep in a library'], 6], [(1199743, 2), [['and the much uglier one'], ['and I would conclude that they are equivalent:']], [[' import A.B.C1\nC1 = A.B.C1\n']], ['importing modules with submodules from deep in a library'], 6], [(1199743, 3), [['and I would conclude that they are equivalent:'], ['-10000']], [[" Python 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) [GCC 4.3.3] on linux2\n>>> from A.B import C1\nimporting A\nimporting B\nimporting C1\n>>> C1\n<module 'A.B.C1' from 'A/B/C1/__init__.pyc'>\n>>> \n"]], ['importing modules with submodules from deep in a library'], 6], [(1199743, 4), [['-10000'], ['on the other hand, I am offered the opportunity to do so in  A.B.C1.__init__.py  if I please.  so if I append the line  import D  to the  __init__.py  in  A.B.C1 , this is what happens:']], [[" Python 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) [GCC 4.3.3] on linux2\n>>> import A.B.C1\nimporting A\nimporting B\nimporting C1\n>>> C1=A.B.C1\n>>> C1\n<module 'A.B.C1' from 'A/B/C1/__init__.pyc'>\n>>> \n"]], ['importing modules with submodules from deep in a library'], 6], [(1199743, 5), [['on the other hand, I am offered the opportunity to do so in  A.B.C1.__init__.py  if I please.  so if I append the line  import D  to the  __init__.py  in  A.B.C1 , this is what happens:'], ['importing included modules is probably best done at the end of the package initialization.']], [[' Python 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) [GCC 4.3.3] on linux2\n>>> from A.B import C1\nimporting A\nimporting B\nimporting C1\nimporting D\n>>> \n']], ['importing modules with submodules from deep in a library'], 6], [(1200548, 0), [['for this you can create an inclusion tag and use it like:'], ['To define the tag, add to your app/templatetags/mytags.py:']], [[' {% load my_tags %}\n{% product bicycle <extra vars ...> %}\n']], ['Writing a Template Tag in Django'], 3], [(1200548, 1), [['To define the tag, add to your app/templatetags/mytags.py:'], ["Then you'll need a template that returns html for the item:"]], [[" @register.inclusion_tag('results.html')\ndef product(item, *extra):\n    #maybe repackage extra variables\n    #and add them to the returned dictionary\n    item_form = ItemForm(item) #form.ModelForm instance\n    return {'item': item, 'item_form':item_form, ...}\n"]], ['Writing a Template Tag in Django'], 3], [(1200548, 2), [["Then you'll need a template that returns html for the item:"], ['-10000']], [[' <h1>{{item.title}}</h1>\n{{item_form}}\n... add some conditional statements depending on extra vars\n']], ['Writing a Template Tag in Django'], 3], [(1201381, 0), [['If your  Screenshot  model has a lot of attributes, then the code you showed is doing unnecessary work for your specific need. For example, you can do something like this:'], ["which will give you a list of all filenames in the database, and generate SQL to only fetch the filenames. It won't try to create and populate Screenshot objects. If you have"]], [[" files_in_db = Screenshot.objects.values_list('filename', flat=True).distinct()\n"]], ['Check if an element exists'], 2], [(1201381, 1), [["which will give you a list of all filenames in the database, and generate SQL to only fetch the filenames. It won't try to create and populate Screenshot objects. If you have"], ['then you can iterate over one list looking for membership in the other, or make one or both lists into sets to find common members etc.']], [[' files_on_disc = os.listdir(settings.SCREENSHOTS_ON_DISC)\n']], ['Check if an element exists'], 2], [(1202839, 0), [["As ars and Diarmuid have pointed out, you can pass  request.user  into your form, and use it in validating the email. Diarmuid's code, however, is wrong. The code should actually read:"], ['Then, in your view, you can use it like so:']], [[" from django import forms\n\nclass UserForm(forms.Form):\n    email_address = forms.EmailField(widget = forms.TextInput(attrs = {'class':'required'}))\n\n    def __init__(self, *args, **kwargs):\n        self.user = kwargs.pop('user', None)\n        super(UserForm, self).__init__(*args, **kwargs)\n\n    def clean_email_address(self):\n        email = self.cleaned_data.get('email_address')\n        if self.user and self.user.email == email:\n            return email\n        if UserProfile.objects.filter(email=email).count():\n            raise forms.ValidationError(u'That email address already exists.')\n        return email\n"]], ['get request data in Django form'], 2], [(1202839, 1), [['Then, in your view, you can use it like so:'], ["Note that you should pass request.POST as a keyword argument, since your constructor expects 'user' as the first positional argument."]], [[" def someview(request):\n    if request.method == 'POST':\n        form = UserForm(request.POST, user=request.user)\n        if form.is_valid():\n            # Do something with the data\n            pass\n    else:\n        form = UserForm(user=request.user)\n    # Rest of your view follows\n"]], ['get request data in Django form'], 2], [(1205626, 0), [['You can create the repeated fields in the  __init__  method of your form:'], ['edit: to answer the question in your comment: just give the number of repetitions as an argument to the  __init__  method, something like this:']], [[" class PaymentsForm(forms.Form):\n    invoice = forms.CharField(widget=forms.HiddenInput())\n    total = forms.CharField(widget=forms.HiddenInput())\n\n    def __init__(self, *args, **kwargs):\n        super(PaymentsForm, self).__init__(*args, **kwargs)\n        for i in xrange(10):\n            self.fields['item_name_%d' % i] = forms.CharField(widget=forms.HiddenInput())\n"]], ['Django - Repeating a form field n times in one form'], 3], [(1205626, 1), [['edit: to answer the question in your comment: just give the number of repetitions as an argument to the  __init__  method, something like this:'], ['and then in your view (or wherever you create the form):']], [["     def __init__(self, repetitions, *args, **kwargs):\n        super(PaymentsForm, self).__init__(*args, **kwargs)\n        for i in xrange(repetitions):\n            self.fields['item_name_%d' % i] = forms.CharField(widget=forms.HiddenInput())\n"]], ['Django - Repeating a form field n times in one form'], 3], [(1205626, 2), [['and then in your view (or wherever you create the form):'], ['-10000']], [[' payments_form = PaymentsForm(10)\n']], ['Django - Repeating a form field n times in one form'], 3], [(1205863, 0), [['As an example, the following works on all my linux systems'], ['Where in cluster50 - cluster100, there are numerous machines that are unresponsive, or nonexistent. This immediately starts printing:']], [[" import asyncore, socket\n\nclass client(asyncore.dispatcher):\n    def __init__(self, host):\n        self.host = host\n        asyncore.dispatcher.__init__(self)\n        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.connect((host, 22))\n\n    def handle_connect(self):\n        print 'Connected to', self.host\n\n    def handle_close(self):\n        self.close()\n\n    def handle_write(self):\n        self.send('')\n\n    def handle_read(self):\n        print ' ', self.recv(1024)\n\nclients = []\nfor i in range(50, 100):\n    clients.append(client('cluster%d' % i))\n\nasyncore.loop()\n"]], ["How can I get non-blocking socket connect()'s?"], 2], [(1205863, 1), [['Where in cluster50 - cluster100, there are numerous machines that are unresponsive, or nonexistent. This immediately starts printing:'], ["This however does not take into account getaddrinfo, which has to block. If you're having issues resolving the dns queries, everything has to wait. You probably need to gather the dns queries separately on your own, and use the ip addresses in your async loop"]], [[' Connected to cluster50\n  SSH-2.0-OpenSSH_4.3\n\nConnected to cluster51\n  SSH-2.0-OpenSSH_4.3\n\nConnected to cluster52\n  SSH-2.0-OpenSSH_4.3\n\nConnected to cluster60\n  SSH-2.0-OpenSSH_4.3\n\nConnected to cluster61\n  SSH-2.0-OpenSSH_4.3\n\n...\n']], ["How can I get non-blocking socket connect()'s?"], 2], [(1206832, 0), [['Hey, I just thought of something: I only need a list of all the modules in stdlib, and then I\'ll automatically generate a Python script that imports each of them "manually", like this:'], ['I got the list like this: I installed Python 2.6 on a virtual machine, then ran in IDLE:']], [[' import re\nimport math\nimport time\n# ...\n']], ['Importing the entire Python standard library'], 3], [(1206832, 1), [['I got the list like this: I installed Python 2.6 on a virtual machine, then ran in IDLE:'], ['Then copy pasted the output into my IDE, and made a little script to write:']], [[' import pkgutil\nstuff = [thing[1] for thing in pkgutil.iter_modules()]\nstuff.sort() # To make it easy to look through\nprint(stuff)\n']], ['Importing the entire Python standard library'], 3], [(1206832, 2), [['Then copy pasted the output into my IDE, and made a little script to write:'], ['Into a Python module which I import in my program.']], [[' if False:\n    import re\n    import email\n    import time\n    # ...\n']], ['Importing the entire Python standard library'], 3], [(1207406, 0), [["You can use a list comprehension to create a new list containing only the elements you don't want to remove:"], ['Or, by assigning to the slice  somelist[:] , you can mutate the existing list to contain only the items you want:']], [[' somelist = [x for x in somelist if not determine(x)]\n']], ['Remove items from a list while iterating'], 4], [(1207406, 1), [['Or, by assigning to the slice  somelist[:] , you can mutate the existing list to contain only the items you want:'], ['Instead of a comprehension, you could also use  itertools . In Python 2:']], [[' somelist[:] = [x for x in somelist if not determine(x)]\n']], ['Remove items from a list while iterating'], 4], [(1207406, 2), [['Instead of a comprehension, you could also use  itertools . In Python 2:'], ['Or in Python 3:']], [[' from itertools import ifilterfalse\nsomelist[:] = ifilterfalse(determine, somelist)\n']], ['Remove items from a list while iterating'], 4], [(1207406, 3), [['Or in Python 3:'], ['-10000']], [[' from itertools import filterfalse\nsomelist[:] = filterfalse(determine, somelist)\n']], ['Remove items from a list while iterating'], 4], [(1208067, 0), [['JavaScript:'], ['Django:']], [[" var myEvent = {id: calEvent.id, start: calEvent.start, end: calEvent.end,\n               allDay: calEvent.allDay };\n$.ajax({\n    url: '/event/save-json/',\n    type: 'POST',\n    contentType: 'application/json; charset=utf-8',\n    data: $.toJSON(myEvent),\n    dataType: 'text',\n    success: function(result) {\n        alert(result.Result);\n    }\n});\n"]], ["Where's my JSON data in my incoming Django request?"], 3], [(1208067, 1), [['Django:'], ['Django < 1.4:']], [[' def save_events_json(request):\n    if request.is_ajax():\n        if request.method == \'POST\':\n            print \'Raw Data: "%s"\' % request.body   \n    return HttpResponse("OK")\n']], ["Where's my JSON data in my incoming Django request?"], 3], [(1208067, 2), [['Django < 1.4:'], ['-10000']], [['   def save_events_json(request):\n    if request.is_ajax():\n        if request.method == \'POST\':\n            print \'Raw Data: "%s"\' % request.raw_post_data\n    return HttpResponse("OK")\n']], ["Where's my JSON data in my incoming Django request?"], 3], [(1209947, 0), [['What you have is a simple if-statement situation.'], ['The only optimization is something like the following.']], [[' for line in someRangeOfLines:\n    for col in someRangeOfCols:\n        try:\n            cell= FooVal.objects().get( col = col, line = line )\n        except FooVal.DoesNotExist:\n            cell= None\n']], ['outer join modelisation in django'], 2], [(1209947, 1), [['The only optimization is something like the following.'], ['-10000']], [[' matrix = {}\nfor f in FooVal.objects().all():\n    matrix[(f.line,f.col)] = f\n\nfor line in someRangeOfLines:\n    for col in someRangeOfCols:\n        cell= matrix.get((line,col),None)\n']], ['outer join modelisation in django'], 2], [(1210099, 0), [['Count the number of users:'], ['You can use the same to count the number of profile objects (assuming every user has at most 1 profile), e.g. if Profile is the profile model:']], [[' import django.contrib.auth\ndjango.contrib.auth.models.User.objects.all().count()\n']], ['How to find number of users, number of users with a profile object, and monthly logins in Django'], 2], [(1210099, 1), [['You can use the same to count the number of profile objects (assuming every user has at most 1 profile), e.g. if Profile is the profile model:'], ["To count the number of logins in a month you'd need to create a table logging each login with a time stamp. Then it's a matter of using count() again."]], [[' Profile.objects.all().count()\n']], ['How to find number of users, number of users with a profile object, and monthly logins in Django'], 2], [(1211035, 0), [['Using a generator is fine for this, but the whole point of using generators is so you can builtin syntax:'], ["If you don't care about that, then you can either say:"]], [[' for f in self.engine.processMovie():\n    c, s = dlg.Update(f, "Processing frame %d"%f)\n    if not c: break\n']], ['usage of generators as a progression notifier'], 3], [(1211035, 1), [["If you don't care about that, then you can either say:"], ['You could also use a plain callback:']], [[' for f in self.engine.processMovie(): pass\n']], ['usage of generators as a progression notifier'], 3], [(1211035, 2), [['You could also use a plain callback:'], ["... but that's not as nice if you want to process the data piecemeal; callback models prefer to do all the work at once--that's the real benefit of generators."]], [[' def update_state(f):\n    c, s = dlg.Update(f, "Processing frame %d"%f)\n    return c\nself.engine.processMovie(progress=update_state)\n']], ['usage of generators as a progression notifier'], 3], [(1211415, 0), [['The way I do this is to use TypeDescriptor to add a type converter attribute to PythonTuple at runtime.'], ['Then I use the following code to find the converter in the attribute setter (SetMemberAfter method)']], [[' TypeDescriptor.AddAttributes(typeof(PythonTuple), \n    new TypeConverterAttribute(typeof(Converter)));\n']], ['Embedded IronPython scripts and converting types'], 2], [(1211415, 1), [['Then I use the following code to find the converter in the attribute setter (SetMemberAfter method)'], ['-10000']], [[' var converter = TypeDescriptor.GetConverter(value);\nif (converter.CanConvertTo(destinationType))\n{\n    var destinationValue = converter.ConvertTo(value, destinationType);\n    return destinationValue;\n}\nelse\n{\n    throw new InvalidOperationException("Cannot convert from {0} to {1}".UIFormat(\n        value == null ? "null" : value.GetType().Name, destinationType.Name));\n}\n']], ['Embedded IronPython scripts and converting types'], 2], [(1212434, 0), [['How about this version:'], ['you can also do this:']], [[' setattr(MyClass, "blah", property(self.get_blah, self.set_blah,\n        self.del_blah, "bleh blih"))\n']], ['How to create a property with its name in a string?'], 2], [(1212434, 1), [['you can also do this:'], ['-10000']], [[' setattr(type(self), "blah", property(self.get_blah, self.set_blah,\n        self.del_blah, "bleh blih"))\n']], ['How to create a property with its name in a string?'], 2], [(1216697, 0), [['try'], ['or (v3)']], [[' >>> print hashlib.__doc__\n']], ['Make python __doc__ property display correctly in a Windows CMD window?'], 2], [(1216697, 1), [['or (v3)'], ['-10000']], [[' >>> print(hashlib.__doc__)\n']], ['Make python __doc__ property display correctly in a Windows CMD window?'], 2], [(1217251, 0), [['Here is one way to do this:'], ['To iterate over the keys/values in this list, you can use something like:']], [[" >>> sorted(myDict.items(), key=lambda e: e[1][2])\n[('item2', [8, 2, 3]), ('item1', [7, 1, 9]), ('item3', [9, 3, 11])]\n"]], ['Python: sorting a dictionary of lists'], 2], [(1217251, 1), [['To iterate over the keys/values in this list, you can use something like:'], ['-10000']], [[' >>> for key, value in sorted(myDict.items(), key=lambda e: e[1][2]):\n...   print key, value\n... \nitem2 [8, 2, 3]\nitem1 [7, 1, 9]\nitem3 [9, 3, 11]\n']], ['Python: sorting a dictionary of lists'], 2], [(1222677, 0), [['Sure, the difference between the following two:'], ['and this:']], [[' [f(x) for x in list]\n']], ['List Comprehensions in Python : efficient selection in a list'], 4], [(1222677, 1), [['and this:'], ['So, simply write the "unfiltered" list as a generator instead. Here\'s your code, with the generator inline:']], [[' (f(x) for x in list)\n']], ['List Comprehensions in Python : efficient selection in a list'], 4], [(1222677, 2), [['So, simply write the "unfiltered" list as a generator instead. Here\'s your code, with the generator inline:'], ['To do a simple change to your code in your question, rewrite unfiltered as this:']], [[' def myFunction(x):\n    print("called for: " + str(x))\n    return x * x\n\noriginalList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlimit = 10\nresult =   [C2 for C2 in ((myFunction(C), C) for C in originalList) if C2[0] < limit]\n# result = [C2 for C2 in [(myFunction(C), C) for C in originalList] if C2[0] < limit]\n']], ['List Comprehensions in Python : efficient selection in a list'], 4], [(1222677, 3), [['To do a simple change to your code in your question, rewrite unfiltered as this:'], ['-10000']], [[' unfiltered = [ (myFunction(C),C) for C in originalList ]\n             ^                                         ^\n             +---------- change these to (..) ---------+\n                                 |\n                                 v\nunfiltered = ( (myFunction(C),C) for C in originalList )\n']], ['List Comprehensions in Python : efficient selection in a list'], 4], [(1223763, 0), [['To get the browser form data into the form object:'], ['In the template page you can do things like this with the form:']], [[" if request.method == 'POST':\n    form = SomeForm(request.POST)\n    if form.is_valid():\n        model.attr = form.cleaned_data['attr']\n        model.attr2 = form.cleaned_data['attr2']\n        model.save()\nelse:\n    form = SomeForm()\nreturn render_to_response('page.html', {'form': form, })\n"]], ['How do I associate input to a Form with a Model in Django?'], 2], [(1223763, 1), [['In the template page you can do things like this with the form:'], ["That's just one example that I pulled from  here ."]], [[' <form method="POST">\n{{ form.as_p }}\n<input type="submit"/>\n</form>\n']], ['How do I associate input to a Form with a Model in Django?'], 2], [(1223967, 0), [['Something like this?'], ['Example']], [[' import csv\nsource= csv.reader( open("some file","rb") )\ndest= csv.writer( open("another file","wb") )\nfor row in source:\n    result= row[:6] + [ row[6]+row[7]+row[8] ] + row[9:]\n    dest.writerow( result )\n']], ['How can I merge fields in a CSV string using Python?'], 2], [(1223967, 1), [['Example'], ['-10000']], [[' >>> data=\'\'\',,Joe,Smith,New Haven,CT,"Moved from Portland, CT",,goo,\n... \'\'\'.splitlines()\n>>> rdr= csv.reader( data )\n>>> row= rdr.next()\n>>> row\n[\'\', \'\', \'Joe\', \'Smith\', \'New Haven\', \'CT\', \'Moved from Portland, CT\', \'\', \'goo\', \'\' ]\n>>> row[:6] + [ row[6]+row[7]+row[8] ] +  row[9:]\n[\'\', \'\', \'Joe\', \'Smith\', \'New Haven\', \'CT\', \'Moved from Portland, CTgoo\', \'\']\n']], ['How can I merge fields in a CSV string using Python?'], 2], [(1224585, 0), [['It takes trickery to perform the request (and one  raise  statement is in fact inevitable because it\'s the one and only way specified in the PEP 302 for an import hook to say "I don\'t deal with this path item"!), but the following would avoid any  try / except :'], ['This prints:']], [[" import sys\n\nsentinel = object()\n\nclass FakeLoader(object):\n  def find_module(self, fullname, path=None):\n    return self\n  def load_module(*_):\n    return sentinel\n\ndef fakeHook(apath):\n  if apath == 'GIVINGUP!!!':\n    return FakeLoader()\n  raise ImportError\n\nsys.path.append('GIVINGUP!!!')\nsys.path_hooks.append(fakeHook)\n\ndef isModuleOK(modulename):\n  result = __import__(modulename)\n  return result is not sentinel\n\nprint 'sys', isModuleOK('sys')\nprint 'Cookie', isModuleOK('Cookie')\nprint 'nonexistent', isModuleOK('nonexistent')\n"]], ['Check for a module in Python without using exceptions'], 2], [(1224585, 1), [['This prints:'], ["Of course, these would be absurd lengths to go to in real life for the pointless purpose of avoiding a perfectly normal  try / except , but they seem to satisfy the request as posed (and can hopefully prompt Python-wizards wannabes to start their own research -- finding out exactly how and why all of this code does work as required is in fact instructive, which is why for once I'm not offering detailed explanations and URLs;-)."]], [[' sys True\nCookie True\nnonexistent False\n']], ['Check for a module in Python without using exceptions'], 2], [(1227121, 0), [["As usual with Python, it's  KISS :"], ['It outputs:']], [[' class Test(object):\n\n    def __init__(self, attr1, attr2):\n        self.attr1 = attr1\n        self.attr2 = attr2\n\n    def __str__(self):\n        return str(self.__dict__)\n\n    def __eq__(self, other): \n        return self.__dict__ == other.__dict__\n\nt1 = Test("foo", 42)\nt2 = Test("foo", 42)\nt3 = Test("bar", 42)\n\nprint t1, t2, t3\nprint t1 == t2\nprint t2 == t3\n']], ['Compare object instances for equality by their attributes in Python'], 2], [(1227121, 1), [['It outputs:'], ['N.B.: be aware that before Python 3.0, you are more likely to use  __cmp__  instead of  __eq__ , working the same way.']], [[" {'attr2': 42, 'attr1': 'foo'} {'attr2': 42, 'attr1': 'foo'} {'attr2': 42, 'attr1': 'bar'}\nTrue\nFalse\n"]], ['Compare object instances for equality by their attributes in Python'], 2], [(1228655, 0), [['Option 1: you can pass arguments into each Thread when it is instantiated:'], ['in which case your  run  method will be called:']], [[' ClientThread(arg1, arg2, kwarg1="three times!").start()\n']], ['Globally-scoped variable: can its value change before it is picked up by the thread?'], 4], [(1228655, 1), [['in which case your  run  method will be called:'], ['Option 2: you can set an instance variable on your  ClientThread  objects:']], [[' run(arg1, arg2, kwarg1="three times!")\n']], ['Globally-scoped variable: can its value change before it is picked up by the thread?'], 4], [(1228655, 2), [['Option 2: you can set an instance variable on your  ClientThread  objects:'], ['Option 3: grab the global when  run  is first called and store a copy locally']], [[" myThread.setMyAttribute('new value')\n"]], ['Globally-scoped variable: can its value change before it is picked up by the thread?'], 4], [(1228655, 3), [['Option 3: grab the global when  run  is first called and store a copy locally'], ['Option 1 is the right way to go if the value a thread is given never needs to change during its lifetime, Option 2 if the value does need to change. Option 3 is a hack.']], [[' run(self):\n    localVar = globalVar # only for immutable types\n    localList = globalList[:] # copy of a list\n    localDict = globalDict.copy() # Warning! Shallow copy only!\n']], ['Globally-scoped variable: can its value change before it is picked up by the thread?'], 4], [(1229146, 0), [['Sorry, misunderstood the question with my first answer.  You can accomplish the ability to have optional arguments to command line flags use the  callback  action type when you define an option.  Use the following function as a call back (you will likely wish to tailor to your needs) and configure it for each of the flags that can optionally receive an argument:'], ["Running from the command line you'll see this:"]], [[" import optparse\n\ndef optional_arg(arg_default):\n    def func(option,opt_str,value,parser):\n        if parser.rargs and not parser.rargs[0].startswith('-'):\n            val=parser.rargs[0]\n            parser.rargs.pop(0)\n        else:\n            val=arg_default\n        setattr(parser.values,option.dest,val)\n    return func\n\ndef main(args):\n    parser=optparse.OptionParser()\n    parser.add_option('--foo',action='callback',callback=optional_arg('empty'),dest='foo')\n    parser.add_option('--file',action='store_true',default=False)\n    return parser.parse_args(args)\n\nif __name__=='__main__':\n    import sys\n    print main(sys.argv)\n"]], ['Parsing empty options in Python'], 2], [(1229146, 1), [["Running from the command line you'll see this:"], ['-10000']], [[" # python parser.py\n(<Values at 0x8e42d8: {'foo': None, 'file': False}>, [])\n\n# python parser.py --foo\n(<Values at 0x8e42d8: {'foo': 'empty', 'file': False}>, [])\n\n# python parser.py --foo bar\n(<Values at 0x8e42d8: {'foo': 'bar', 'file': False}>, [])\n"]], ['Parsing empty options in Python'], 2], [(1230321, 0), [['its for inserting values into strings containing  format specifications'], ['or ']], [[' string = "number is %d" % 1\n']], ['What is the % operator in python for?'], 3], [(1230321, 1), [['or '], ['You can insert multiple values in two ways:']], [[' string = "float is %.3f" % 3.1425\n']], ['What is the % operator in python for?'], 3], [(1230321, 2), [['You can insert multiple values in two ways:'], ['-10000']], [[' string = "number %d and float %f" % (1,3.1415)\nstring = "number %(mynum)d and float %(myfloat)f" % {\'mynum\':1,\'myfloat\':3.1415}\n']], ['What is the % operator in python for?'], 3], [(1230383, 0), [["property works because QObject has a metaclass that takes care of them. Witness this small variation on @quark's code...:"], ['running this emits:']], [[" from PyQt4.QtCore import QObject\n\ndef makec(base):\n  class X( base ):\n      def __init__(self):\n          self.__x = 10\n      def get_x(self):\n          print 'getting',\n          return self.__x\n      def set_x(self, x):\n          print 'setting', x\n          self.__x = x\n      x = property(get_x, set_x)\n\n  print 'made class of mcl', type(X), issubclass(type(X), type)\n  return X\n\nclass old: pass\nfor base in (QObject, old):\n  X = makec(base)\n  x = X()\n  print x.x # Should be 10\n  x.x = 30\n  print x.x # Should be 30\n"]], ['Does using properties on an old-style python class cause problems'], 2], [(1230383, 1), [['running this emits:'], ['see the difference? In the class that\'s really a legacy (old-type) class, the one made the second time, metaclass is  classobj  (which ISN\'T a subclass of type) and properties don\'t work right (assigning  x.x  bypasses the property, and after that getting  x.x  doesn\'t see the property any more either). But in the first case, the Qt case, there\'s a different metaclass, and it IS a subclass of type (so it\'s not really correct to say the class "isn\'t new-style"!), and things therefore DO work correctly.']], [[" made class of mcl <type 'PyQt4.QtCore.pyqtWrapperType'> True\ngetting 10\nsetting 30\ngetting 30\nmade class of mcl <type 'classobj'> False\ngetting 10\n30\n"]], ['Does using properties on an old-style python class cause problems'], 2], [(1233539, 0), [['If you want to make a URL with repetitive params such as:  p=1&p=2&p=3  you have two options:'], ['or if you want to make a url with repetitive params:']], [[" >>> import urllib\n>>> a = (('p',1),('p',2), ('p', 3))\n>>> urllib.urlencode(a)\n'p=1&p=2&p=3'\n"]], ['Python Dictionary to URL Parameters'], 2], [(1233539, 1), [['or if you want to make a url with repetitive params:'], ['-10000']], [[" >>> urllib.urlencode({'p': [1, 2, 3]}, doseq=True)\n'p=1&p=2&p=3'\n"]], ['Python Dictionary to URL Parameters'], 2], [(1235618, 0), [['-10000'], ['On an old Linux box, measuring this code:']], [[" thelist[:] = [d for d in thelist if d.get('id') != 2]\n"]], ['Python: remove dictionary from list'], 6], [(1235618, 1), [['On an old Linux box, measuring this code:'], ["When it is known that there is exactly one item to remove, it's possible to locate and remove it even more expeditiously:"]], [[' $ python -mtimeit -s"lod=[{\'id\':i, \'name\':\'nam%s\'%i} for i in range(99)]; import random" "thelist=list(lod); random.shuffle(thelist); thelist[:] = [d for d in thelist if d.get(\'id\') != 2]"\n10000 loops, best of 3: 82.3 usec per loop\n']], ['Python: remove dictionary from list'], 6], [(1235618, 2), [["When it is known that there is exactly one item to remove, it's possible to locate and remove it even more expeditiously:"], ["(use the  next  builtin rather than the  .next  method if you're on Python 2.6 or better, of course) -- but this code breaks down if the number of dicts that satisfy the removal condition is not exactly one. Generalizing this, we have:"]], [[' $ python -mtimeit -s"lod=[{\'id\':i, \'name\':\'nam%s\'%i} for i in range(99)]; import random" "thelist=list(lod); random.shuffle(thelist); where=(i for i,d in enumerate(thelist) if d.get(\'id\')==2).next(); del thelist[where]"\n10000 loops, best of 3: 72.8 usec per loop\n']], ['Python: remove dictionary from list'], 6], [(1235618, 3), [["(use the  next  builtin rather than the  .next  method if you're on Python 2.6 or better, of course) -- but this code breaks down if the number of dicts that satisfy the removal condition is not exactly one. Generalizing this, we have:"], ['where the shuffling can be removed because there are already three equispaced dicts to remove, as we know. And the listcomp, unchanged, fares well:']], [[' $ python -mtimeit -s"lod=[{\'id\':i, \'name\':\'nam%s\'%i} for i in range(33)]*3; import random" "thelist=list(lod); where=[i for i,d in enumerate(thelist) if d.get(\'id\')==2]; where.reverse()" "for i in where: del thelist[i]"\n10000 loops, best of 3: 23.7 usec per loop\n']], ['Python: remove dictionary from list'], 6], [(1235618, 4), [['where the shuffling can be removed because there are already three equispaced dicts to remove, as we know. And the listcomp, unchanged, fares well:'], ['totally neck and neck, with even just 3 elements of 99 to be removed. With longer lists and more repetitions, this holds even more of course:']], [[' $ python -mtimeit -s"lod=[{\'id\':i, \'name\':\'nam%s\'%i} for i in range(33)]*3; import random" "thelist=list(lod); thelist[:] = [d for d in thelist if d.get(\'id\') != 2]"\n10000 loops, best of 3: 23.8 usec per loop\n']], ['Python: remove dictionary from list'], 6], [(1235618, 5), [['totally neck and neck, with even just 3 elements of 99 to be removed. With longer lists and more repetitions, this holds even more of course:'], ['All in all, it\'s obviously not worth deploying the subtlety of making and reversing the list of indices to remove, vs the perfectly simple and obvious list comprehension, to possibly gain 100 nanoseconds in one small case -- and lose 113 microseconds in a larger one;-). Avoiding or criticizing simple, straightforward, and perfectly performance-adequate solutions (like list comprehensions for this general class of "remove some items from a list" problems) is a particularly nasty example of Knuth\'s and Hoare\'s well-known thesis that "premature optimization is the root of all evil in programming"!-)']], [[' $ python -mtimeit -s"lod=[{\'id\':i, \'name\':\'nam%s\'%i} for i in range(33)]*133; import random" "thelist=list(lod); where=[i for i,d in enumerate(thelist) if d.get(\'id\')==2]; where.reverse()" "for i in where: del thelist[i]"\n1000 loops, best of 3: 1.11 msec per loop\n$ python -mtimeit -s"lod=[{\'id\':i, \'name\':\'nam%s\'%i} for i in range(33)]*133; import random" "thelist=list(lod); thelist[:] = [d for d in thelist if d.get(\'id\') != 2]"\n1000 loops, best of 3: 998 usec per loop\n']], ['Python: remove dictionary from list'], 6], [(1239035, 0), [['You can use the  multiprocessing module  added in Python 2.6. You can use pools of processes and then get results asynchronously with: '], ['E.g.:']], [[' apply_async(func[, args[, kwds[, callback]]])\n']], ['Asynchronous method call in Python?'], 2], [(1239035, 1), [['E.g.:'], ['This is only one alternative. This module provides lots of facilities to achieve what you want. Also it will be really easy to make a decorator from this.']], [[' from multiprocessing import Pool\n\ndef f(x):\n    return x*x\n\nif __name__ == \'__main__\':\n    pool = Pool(processes=1)              # Start a worker processes.\n    result = pool.apply_async(f, [10], callback) # Evaluate "f(10)" asynchronously calling callback when finished.\n']], ['Asynchronous method call in Python?'], 2], [(1239538, 0), [['The examples on the site show us with something like this:'], ['however, the result is a pre-parsed object that is great for access by Python, but not for XML document access. Fortunately the Client object still has the original SOAP message received stored.']], [[' client = Client(url)\nresult = client.service.Invoke(subm)\n']], ['Python SOAP document handling'], 2], [(1239538, 1), [['however, the result is a pre-parsed object that is great for access by Python, but not for XML document access. Fortunately the Client object still has the original SOAP message received stored.'], ['Will give you the actual SOAP message received back.']], [[' result = client.last_received()\nprint result\n']], ['Python SOAP document handling'], 2], [(1239751, 0), [['If you really want a comparison function, you can use'], ["This relies on tuple comparison. If you want to sort a list, you shouldn't write a comparison function, though, but a key function:"]], [[' def comparepeople(p1, p2):\n    o1 = p1.lastname, p1.firstname, p1.dob\n    o2 = p2.lastname, p2.firstname, p2.dob\n    return cmp(o1,o2)\n']], ['Pythonic Comparison Functions'], 2], [(1239751, 1), [["This relies on tuple comparison. If you want to sort a list, you shouldn't write a comparison function, though, but a key function:"], ['This has the advantage that it is a) shorter and b) faster, because each key gets computed only once (rather than tons of tuples being created in the comparison function during sorting).']], [[' l.sort(key=lambda p:(p.lastname, p.firstname, p.dob))\n']], ['Pythonic Comparison Functions'], 2], [(1242209, 0), [["Here's an outline (untested) ... basically you do it a line at a time"], ['The above assumes that you are selecting fix-up targets by line-type (example: "OBR") and column index (example: 7). If there are only a few such targets, just add more similar fix statements. If there are many targets, you could specify them like this:']], [[' for line in infile:\n    data = line.rstrip("\\n").split("|")\n    kind = data[0]\n    # start of changes\n    if kind == "OBR":\n        data[7] += "0000" # check that 7 is correct!\n    # end of changes\n    outrecord = "|".join(data)\n    outfile.write(outrecord + "\\n")\n']], ['Optimal way to replace characters in large string with Python?'], 3], [(1242209, 1), [['The above assumes that you are selecting fix-up targets by line-type (example: "OBR") and column index (example: 7). If there are only a few such targets, just add more similar fix statements. If there are many targets, you could specify them like this:'], ['and the fix_up code would look like this:']], [[' fix_targets = {\n    "OBR": [7],\n    "XYZ": [1, 42],\n    }\n']], ['Optimal way to replace characters in large string with Python?'], 3], [(1242209, 2), [['and the fix_up code would look like this:'], ['You may like in any case to add code to check that data[col_index] really is a date in YYYYMMDD format before changing it.']], [[' if kind in fix_targets:\n    for col_index in fix_targets[kind]:\n        data[col_index] += "0000"\n']], ['Optimal way to replace characters in large string with Python?'], 3], [(1242531, 0), [['This seems to work:'], ['EDIT:  self.rowStyle  is set as follows:']], [["     def attach(w,c1,c2,r1,r2):\n        eb = gtk.EventBox()\n        a = gtk.Alignment(xalign=0.0,yalign=0.5)\n        a.add(w)\n        eb.add(a)\n        eb.set_style(self.rowStyle)\n        def ene(eb,ev):\n            eb.set_state(gtk.STATE_PRELIGHT)\n        def lne(eb,ev):\n            eb.set_state(gtk.STATE_NORMAL)\n        eb.connect('enter-notify-event', ene)\n        eb.connect('leave-notify-event', lne)\n\n        self.table.attach(eb, c1, c2, r1, r2,\n                          xoptions=gtk.EXPAND|gtk.FILL,\n                          yoptions=gtk.SHRINK)\n"]], ['How can I highlight a row in a gtk.Table?'], 2], [(1242531, 1), [['EDIT:  self.rowStyle  is set as follows:'], ['I create an  EventBox  just to get its style.']], [[' tmpeb = gtk.EventBox()\nst = tmpeb.get_style().copy()\nst.bg[gtk.STATE_PRELIGHT] = gtk.gdk.Color(65535,65535,0)\nself.rowStyle = st\n']], ['How can I highlight a row in a gtk.Table?'], 2], [(1242589, 0), [['You could write a Mixin by yourself:'], ['Then use it like this:']], [[' class IntMathMixin:\n    def __add__(self, other):\n        return type(self)(int(self).__add__(int(other)))\n    # ... analog for the others\n']], ['subclassing int to attain a Hex representation'], 2], [(1242589, 1), [['Then use it like this:'], ['-10000']], [[' class Hex(IntMathMixin, int):\n    def __repr__(self):\n         return "0x%x"%self\n    __str__=__repr__ \n']], ['subclassing int to attain a Hex representation'], 2], [(1244463, 0), [["I haven't automated Excel, but I'm using some code from Microsoft's  Speech API  that may be similar enough to get you started:"], ['then later in a main loop:']], [[' ListenerBase = win32com.client.getevents("SAPI.SpInProcRecoContext")\nclass Listener(ListenerBase):\n    def OnRecognition(self, _1, _2, _3, Result):\n        """Callback whenever something is recognized."""\n        # Work with Result\n\n    def OnHypothesis(self, _1, _2, Result):\n        """Callback whenever we have a potential match."""\n        # Work with Result\n']], ['Consuming COM events in Python'], 2], [(1244463, 1), [['then later in a main loop:'], ['Edit for more detail on the main loop:']], [["     while not self.shutting_down.is_set():\n        # Trigger the event handlers if we have anything.\n        pythoncom.PumpWaitingMessages() \n        time.sleep(0.1) # Don't use up all our CPU checking constantly\n"]], ['Consuming COM events in Python'], 2], [(1247133, 0), [['you should probably use a defaultdictionary for this:'], ['then you can recursively print it (with indentation) like']], [[' from collections import defaultdict    \n\nitemdict = defaultdict(list)\nfor id, parent_id in itemlist:\n   itemdict[parent_id].append(id)\n']], ['Recursive? looping to n levels in Python'], 2], [(1247133, 1), [['then you can recursively print it (with indentation) like'], ['-10000']], [[" def printitem(id, depth=0):\n    print '  '*depth, id\n    for child in itemdict[id]:\n        printitem(child, depth+1)\n"]], ['Recursive? looping to n levels in Python'], 2], [(1247486, 0), [['An example of the tiny speed advantage of map when using exactly the same function:'], ['An example of how performance comparison gets completely reversed when map needs a lambda:']], [[" $ python -mtimeit -s'xs=range(10)' 'map(hex, xs)'\n100000 loops, best of 3: 4.86 usec per loop\n$ python -mtimeit -s'xs=range(10)' '[hex(x) for x in xs]'\n100000 loops, best of 3: 5.58 usec per loop\n"]], ['Python List Comprehension Vs. Map'], 2], [(1247486, 1), [['An example of how performance comparison gets completely reversed when map needs a lambda:'], ['-10000']], [[" $ python -mtimeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'\n100000 loops, best of 3: 4.24 usec per loop\n$ python -mtimeit -s'xs=range(10)' '[x+2 for x in xs]'\n100000 loops, best of 3: 2.32 usec per loop\n"]], ['Python List Comprehension Vs. Map'], 2], [(1247863, 0), [['Your solution is fine, but if you want a stricter simulation of the problem as posed (and somewhat higher-quality Python;-), try:'], ['a typical output is:']], [[' import random\n\niterations = 100000\n\ndoors = ["goat"] * 2 + ["car"]\nchange_wins = 0\nchange_loses = 0\n\nfor i in xrange(iterations):\n    random.shuffle(doors)\n    # you pick door n:\n    n = random.randrange(3)\n    # monty picks door k, k!=n and doors[k]!="car"\n    sequence = range(3)\n    random.shuffle(sequence)\n    for k in sequence:\n        if k == n or doors[k] == "car":\n            continue\n    # now if you change, you lose iff doors[n]=="car"\n    if doors[n] == "car":\n        change_loses += 1\n    else:\n        change_wins += 1\n\nprint "Changing has %s wins and %s losses" % (change_wins, change_loses)\nperc = (100.0 * change_wins) / (change_wins + change_loses)\nprint "IOW, by changing you win %.1f%% of the time" % perc\n']], ["Is this a good or bad 'simulation' for Monty Hall? How come?"], 2], [(1247863, 1), [['a typical output is:'], ['-10000']], [[' Changing has 66721 wins and 33279 losses\nIOW, by changing you win 66.7% of the time\n']], ["Is this a good or bad 'simulation' for Monty Hall? How come?"], 2], [(1249412, 0), [['Simplest way is:'], ['In the extremely unlikely case that you have to deal with absolutely humungous text files (ones over 200-300 times larger than the King James Bible, for example, which is about 4.3 MB in its entirety as a text file), I recommend a generator producing a sliding window (a "FIFO" of lines).  Focusing for simplicity only on searching lines excluding the first and last few ones of the file (which requires a couple of special-case loops in addition -- that\'s why I\'m returning the index as well... because it\'s not always 5 in those two extra loops!-):']], [[' for filename in os.listdir("."):\n    lines = open(filename).readlines()\n    for i, line in enumerate(lines):\n        if "foo" in line:\n            for x in lines[i-5 : i+6]:\n                print x,\n']], ['`cat filename | grep -B 5 -C 5 foo`'], 2], [(1249412, 1), [['In the extremely unlikely case that you have to deal with absolutely humungous text files (ones over 200-300 times larger than the King James Bible, for example, which is about 4.3 MB in its entirety as a text file), I recommend a generator producing a sliding window (a "FIFO" of lines).  Focusing for simplicity only on searching lines excluding the first and last few ones of the file (which requires a couple of special-case loops in addition -- that\'s why I\'m returning the index as well... because it\'s not always 5 in those two extra loops!-):'], ["I think I'll leave the special-case loops (and worries about files of very few lines;-) as exercises, since the whole thing is so incredibly hypothetical anyway."]], [[' import collections\n\ndef sliding_windows(it):\n  fifo = collections.deque()\n  # prime the FIFO with the first 10 \n  for i, line in enumerate(it):\n    fifo.append(line)\n    if i == 9: break\n  # keep yielding 11-line sliding-windows\n  for line in it:\n    fifo.append(line)\n    yield fifo, 5\n    fifo.popleft()\n\nfor w, i in sliding_windows(open(filename)):\n  if "foo" in w[i]:\n    for line in w: print line,\n']], ['`cat filename | grep -B 5 -C 5 foo`'], 2], [(1249670, 0), [['The two main alternatives: read everything in as a single string and remove newlines:'], ['or, read line by line, removing the newline that ends each line, and join it up again:']], [[" clean = open('thefile.txt').read().replace('\\n', '')\n"]], ['Simple python/Regex problem: Removing all new lines from a file'], 3], [(1249670, 1), [['or, read line by line, removing the newline that ends each line, and join it up again:'], ['So here are some numbers for a specific text file on my laptop:']], [[" clean = ''.join(l[:-1] for l in open('thefile.txt'))\n"]], ['Simple python/Regex problem: Removing all new lines from a file'], 3], [(1249670, 2), [['So here are some numbers for a specific text file on my laptop:'], ["The file is a version of the KJ Bible, downloaded and unzipped from  here  (I do think it's important to run such measurements on one easily fetched file, so others can easily reproduce them!)."]], [[' $ python -mtimeit -s"import re" "re.sub(\'\\n\',\'\',open(\'AV1611Bible.txt\').read())"\n10 loops, best of 3: 53.9 msec per loop\n$ python -mtimeit "\'\'.join(l[:-1] for l in open(\'AV1611Bible.txt\'))"\n10 loops, best of 3: 51.3 msec per loop\n$ python -mtimeit "open(\'AV1611Bible.txt\').read().replace(\'\\n\', \'\')"\n10 loops, best of 3: 35.1 msec per loop\n']], ['Simple python/Regex problem: Removing all new lines from a file'], 3], [(1249786, 0), [['The built-in  string.split()  method will split on runs of whitespace, so you can use that and then join the resulting list using spaces, like this:'], ["Here's a complete test script:"]], [[" ' '.join(my_string.split())\n"]], ['Is there a string-collapse library function in python?'], 2], [(1249786, 1), [["Here's a complete test script:"], ['-10000']], [[' TEST = """This\nis        a test\\twith a\n  mix of\\ttabs,     newlines and repeating\nwhitespace"""\n\nprint \' \'.join(TEST.split())\n# Prints:\n# This is a test with a mix of tabs, newlines and repeating whitespace\n']], ['Is there a string-collapse library function in python?'], 2], [(1251294, 0), [["Lennart's hypothesis is correct: a metaclass is indeed the culprit. No need to guess, just look at  the sources : the metaclass is  DeclarativeFieldsMetaclass  currently at line 53 of that file, and adds attributes  base_fields  and possibly  media  based on what attributes the class has at creation time. At line 329 ff you see:"], ["This implies there's some fragility in creating a new class with base  type  -- the supplied black magic might or might not carry through!  A more solid approach is to use the type of  EmployeeForm  which will pick up any metaclass that may be involved -- i.e.:"]], [[' class Form(BaseForm):\n    "A collection of Fields, plus their associated data."\n    # This is a separate class from BaseForm in order to abstract the way\n    # self.fields is specified. This class (Form) is the one that does the\n    # fancy metaclass stuff purely for the semantic sugar -- it allows one\n    # to define a form using declarative syntax.\n    # BaseForm itself has no way of designating self.fields.\n    __metaclass__ = DeclarativeFieldsMetaclass\n']], ['Difference between returning modified class and using type()'], 2], [(1251294, 1), [["This implies there's some fragility in creating a new class with base  type  -- the supplied black magic might or might not carry through!  A more solid approach is to use the type of  EmployeeForm  which will pick up any metaclass that may be involved -- i.e.:"], ["(no need to copy that  __dict__ , btw). The difference is subtle but important: rather than using directly  type 's 3-args form, we use the 1-arg form to pick up the type (i.e., the metaclass) of the form class, then call THAT metaclass in the 3-args form."]], [[" return type(EmployeeForm)('EmployeeForm', (forms.Form, ), EmployeeForm.__dict__)\n"]], ['Difference between returning modified class and using type()'], 2], [(1252275, 0), [['jQuery.load  does exactly that:'], ['templates/base.html']], [[' $("div#my-container").load("/url/to/content/ #content-id")\n']], ['Django + Jquery, expanding AJAX div'], 6], [(1252275, 1), [['templates/base.html'], ['templates/page.html']], [[' <html>\n    <head>\n        <title>My funky example</title>\n        <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>\n        {% block extrahead %}{% endblock %}\n    </head>\n    <body>\n        {% block content %}{% endblock %}\n    </body>\n</html>\n']], ['Django + Jquery, expanding AJAX div'], 6], [(1252275, 2), [['templates/page.html'], ['templates/a.html']], [[' {% extends "base.html" %}\n{% block extrahead %}\n    <script type="text/javascript">\n        $(function(){\n            $(\'a.extendable\').click(function(){\n                $(this).after($(\'<div class="external-content"></div>\').load($(this).attr(\'href\') + \' #content\'));\n                return false;\n            });\n        });\n    </script>\n{% endblock extrahead %}\n{% block content %}\n    <p>Hi! <a href="/external/content/a/" class="extendable">Click here</a> and wait for something funny to happen!</p>\n    <p><a href="/external/content/b/" class="extendable">This link</a> is cool, too!</p>\n{% endblock content %}\n']], ['Django + Jquery, expanding AJAX div'], 6], [(1252275, 3), [['templates/a.html'], ['templates/b.html']], [[' {% extends "base.html" %}\n{% block content %}\n    <div id="content">so long and thanks for all the fish</div>\n{% endblock %}\n']], ['Django + Jquery, expanding AJAX div'], 6], [(1252275, 4), [['templates/b.html'], ['urls.py']], [[' {% extends "base.html" %}\n{% block content %}\n    <div id="content">Don\'t panic</div>\n{% endblock %}\n']], ['Django + Jquery, expanding AJAX div'], 6], [(1252275, 5), [['urls.py'], ['You can download all the code  here .']], [[" from django.conf.urls.defaults import *\nurlpatterns = patterns('django.views.generic.simple',\n    (r'^$',                    'direct_to_template', {'template': 'page.html'}),\n    (r'^external/content/a/$', 'direct_to_template', {'template': 'a.html'}),\n    (r'^external/content/b/$', 'direct_to_template', {'template': 'b.html'}),\n)\n"]], ['Django + Jquery, expanding AJAX div'], 6], [(1252316, 0), [['If you want the div tags included in the matched item:'], ["If you don't want the div tags included, only the DATA portion:"]], [[' regexpHandler = re.compile(\'(<div class="deg">.*?</div>)\')\n']], ['Python and web-tags regex'], 3], [(1252316, 1), [["If you don't want the div tags included, only the DATA portion:"], ['Then to run the match and get the result:']], [[' regexpHandler = re.compile(\'<div class="deg">(.*?)</div>\')\n']], ['Python and web-tags regex'], 3], [(1252316, 2), [['Then to run the match and get the result:'], ['-10000']], [[' result = regexHandler.search( pageData )\nmatchedText = result.groups()[0]\n']], ['Python and web-tags regex'], 3], [(1252481, 0), [['Anyway, given for example:'], ['one nifty way to get the desired result  [\'thisfile.flt\', \'box\', \'8.7\', \'10.5\', \'2.2\', "red.jpg\']  would be:']], [[" d = {'file_name':'thisfile.flt', 'item_name':'box', 'item_height':'8.7', \n     'item_width':'10.5', 'item_depth':'2.2', 'texture_file': 'red.jpg'}\n\norder = {\n    'file_name':    0,\n    'item_name':    1, \n    'item_height':  2,\n    'item_width':   3,\n    'item_depth':   4,\n    'texture_file': 5\n}\n"]], ['sort dictionary by another dictionary'], 2], [(1252481, 1), [['one nifty way to get the desired result  [\'thisfile.flt\', \'box\', \'8.7\', \'10.5\', \'2.2\', "red.jpg\']  would be:'], ['-10000']], [[' def doit(d, order):\n  return  [d[k] for k in sorted(order, key=order.get)]\n']], ['sort dictionary by another dictionary'], 2], [(1253122, 0), [['So the strange implementation is actually the  UNIX  one, which does the following (where each space separates a different argument):'], ['It looks like the correct implementation (at least on Linux) would be:']], [[' /bin/sh -c gcc --version\n']], ['Why does subprocess.Popen() with shell=True work differently on Linux vs Windows?'], 3], [(1253122, 1), [['It looks like the correct implementation (at least on Linux) would be:'], ['This patch seems to fairly simply do the trick:']], [[' /bin/sh -c "gcc --version" gcc --version\n']], ['Why does subprocess.Popen() with shell=True work differently on Linux vs Windows?'], 3], [(1253122, 2), [['This patch seems to fairly simply do the trick:'], ['-10000']], [[' --- subprocess.py.orig  2009-04-19 04:43:42.000000000 +0200\n+++ subprocess.py       2009-08-10 13:08:48.000000000 +0200\n@@ -990,7 +990,7 @@\n                 args = list(args)\n\n             if shell:\n-                args = ["/bin/sh", "-c"] + args\n+                args = ["/bin/sh", "-c"] + [" ".join(args)] + args\n\n             if executable is None:\n                 executable = args[0]\n']], ['Why does subprocess.Popen() with shell=True work differently on Linux vs Windows?'], 3], [(1253528, 0), [['You could serialise the function bytecode and then reconstruct it on the caller.  The  marshal  module can be used to serialise code objects, which can then be reassembled into a function.  ie:'], ['Then in the remote process (after transferring code_string):']], [[' import marshal\ndef foo(x): return x*x\ncode_string = marshal.dumps(foo.func_code)\n']], ['Is there an easy way to pickle a python function (or otherwise serialize its code)?'], 2], [(1253528, 1), [['Then in the remote process (after transferring code_string):'], ['A few caveats:']], [[' import marshal, types\n\ncode = marshal.loads(code_string)\nfunc = types.FunctionType(code, globals(), "some_func_name")\n\nfunc(10)  # gives 100\n']], ['Is there an easy way to pickle a python function (or otherwise serialize its code)?'], 2], [(1254187, 0), [["This is actually because the  decimal  module's source code has changed: In python 2.4 and python2.5 the  decimal.Decimal.__repr__  function contains:"], ['whereas in python2.6 it contains:']], [[' return \'Decimal("%s")\' % str(self)\n']], ['string quoting issues in doctests'], 2], [(1254187, 1), [['whereas in python2.6 it contains:'], ['So in this case the best thing to do is just to print out  str()  of the result and check the type separately if necessary...']], [[' return "Decimal(\'%s\')" % str(self)\n']], ['string quoting issues in doctests'], 2], [(1255976, 0), [['First I tried:'], ['The correct way happens to be:']], [[' field.widget = field.hidden_widget\n']], ['How do you dynamically hide form fields in Django?'], 2], [(1255976, 1), [['The correct way happens to be:'], ['-10000']], [[' field.widget = field.hidden_widget()\n']], ['How do you dynamically hide form fields in Django?'], 2], [(1256704, 0), [["I'd switch to using a data structure mapping regexes to functions.  Something like:"], ['Then you just loop through them:']], [[' map = { reg1: handleReg1, reg2: handleReg2, etc }\n']], ['Need help in refactoring my python script'], 2], [(1256704, 1), [['Then you just loop through them:'], ["If you need the matches to happen in a particular order you'll need to use a list instead of a dictionary, but the principal is the same."]], [[' for reg, handler in map.items():\n    result = reg.match(line)\n    if result:\n       handler(result)\n       break\n']], ['Need help in refactoring my python script'], 2], [(1257413, 0), [['I\'ve coded myself the tuple general versions, I like the first one for it\'s ellegant simplicity, the more I look at it, the more Pythonic it feels to me... after all, what is more Pythonic than a one liner with zip, asterisk argument expansion, list comprehensions, list slicing, list concatenation and "range"?'], ['The itertools version should be efficient enough even for large lists...']], [[' def ntuples(lst, n):\n    return zip(*[lst[i:]+lst[:i] for i in range(n)])\n']], ['Iterate over pairs in a list (circular fashion) in Python'], 3], [(1257413, 1), [['The itertools version should be efficient enough even for large lists...'], ['And a version for non-indexable sequences:']], [[' from itertools import *\ndef ntuples(lst, n):\n    return izip(*[chain(islice(lst,i,None), islice(lst,None,i)) for i in range(n)])\n']], ['Iterate over pairs in a list (circular fashion) in Python'], 3], [(1257413, 2), [['And a version for non-indexable sequences:'], ['Anyway, thanks everybody for your suggestions! :-)']], [[' from itertools import *\ndef ntuples(seq, n):\n    iseq = iter(seq)\n    curr = head = tuple(islice(iseq, n))\n    for x in chain(iseq, head):\n        yield curr\n        curr = curr[1:] + (x,)\n']], ['Iterate over pairs in a list (circular fashion) in Python'], 3], [(1259219, 0), [['In python code, you can do this to convert a date or datetime to the Unix Epoch'], ["This doesn't work in a Django template though, so you need a custom filter, e.g:"]], [[' import time\nepoch = int(time.mktime(mydate.timetuple())*1000)\n']], ['django Datefield to Unix timestamp'], 2], [(1259219, 1), [["This doesn't work in a Django template though, so you need a custom filter, e.g:"], ['-10000']], [[" import time\n\nfrom django import template\n\nregister = template.Library()\n\n@register.filter\ndef epoch(value):\n    try:\n        return int(time.mktime(value.timetuple())*1000)\n    except AttributeError:\n        return ''\n"]], ['django Datefield to Unix timestamp'], 2], [(1259873, 0), [['This is what I\'ve done in a "pycheckers" script:'], ['For the emacs lisp part:']], [[' #!/bin/bash\n\nepylint "$1" 2>/dev/null\npyflakes "$1"\npep8 --ignore=E221,E701,E202 --repeat "$1"\ntrue\n']], ['How can I use Emacs Flymake mode for python with pyflakes and pylint checking code?'], 2], [(1259873, 1), [['For the emacs lisp part:'], ['-10000']], [[' (when (load "flymake" t)\n  (defun flymake-pyflakes-init ()\n    (let* ((temp-file (flymake-init-create-temp-buffer-copy\n               \'flymake-create-temp-inplace))\n       (local-file (file-relative-name\n            temp-file\n            (file-name-directory buffer-file-name))))\n      (list "pycheckers"  (list local-file))))\n   (add-to-list \'flymake-allowed-file-name-masks\n             \'("\\\\.py\\\\\'" flymake-pyflakes-init)))\n']], ['How can I use Emacs Flymake mode for python with pyflakes and pylint checking code?'], 2], [(1259963, 0), [['inspect.ismethod  is what you want to find out if you definitely have a method, rather than just something you can call.'], ['Methods have different properties than functions (like  im_class  and  im_self ).  So you want']], [[' import inspect\n\ndef foo(): pass\n\nclass Test(object):\n    def method(self): pass\n\nprint inspect.ismethod(foo) # False\nprint inspect.ismethod(Test) # False\nprint inspect.ismethod(Test.method) # True\nprint inspect.ismethod(Test().method) # True\n\nprint callable(foo) # True\nprint callable(Test) # True\nprint callable(Test.method) # True\nprint callable(Test().method) # True\n']], ['Python : Assert that variable is instance method?'], 2], [(1259963, 1), [['Methods have different properties than functions (like  im_class  and  im_self ).  So you want'], ['-10000']], [[' assert inspect.ismethod(Test().method)  \n']], ['Python : Assert that variable is instance method?'], 2], [(1260947, 0), [['You can also use a list comprehension : '], ["(and if you were really looking for strings  starting  with 'foobar' as THC4k noticed, consider the following : "]], [[" matches = [s for s in mytext if 'foobar' in s]\n"]], ['Pythonic way of searching for a substring in a list'], 2], [(1260947, 1), [["(and if you were really looking for strings  starting  with 'foobar' as THC4k noticed, consider the following : "], ['-10000']], [[" matches = [s for s in mytext if s.startswith('foobar')]\n"]], ['Pythonic way of searching for a substring in a list'], 2], [(1261264, 0), [['-10000'], ['gives']], [[' import py_streamhtmlparser\nparser = py_streamhtmlparser.HtmlParser()\nhtml = """<html><body><a href=\'http://google.com\' id=100>\n        link</a><p><a href=heise.de/></body></html>"""\ncur_attr = cur_value = None\nfor index, character in enumerate(html):\n   parser.Parse(character)\n   if parser.State() == py_streamhtmlparser.HTML_STATE_VALUE:\n      # we are in an attribute value. Record what we got so far\n      cur_tag = parser.Tag()\n      cur_attr = parser.Attribute()\n      cur_value = parser.Value()\n      continue\n   if cur_value:\n      # we are not in the value anymore, but have seen one just before\n      print "%r %r %r" % (cur_tag, cur_attr, cur_value)\n      cur_value = None\n']], ['example for using streamhtmlparser'], 2], [(1261264, 1), [['gives'], ['If you only want the href attributes, check for cur_attr at the point of the print as well.']], [[" 'a' 'href' 'http://google.com'\n'a' 'id' '100'\n'a' 'href' 'heise.de/'\n"]], ['example for using streamhtmlparser'], 2], [(1261875, 0), [['Compare this, without using  nonlocal :'], ["To this, using  nonlocal , where  inner() 's  x  is now also  outer() 's  x :"]], [[' x = 0\ndef outer():\n    x = 1\n    def inner():\n        x = 2\n        print("inner:", x)\n\n    inner()\n    print("outer:", x)\n\nouter()\nprint("global:", x)\n\n# inner: 2\n# outer: 1\n# global: 0\n']], ['Python nonlocal statement'], 3], [(1261875, 1), [["To this, using  nonlocal , where  inner() 's  x  is now also  outer() 's  x :"], ['If we were to use  global , it would bind  x  to the properly "global" value:']], [[' x = 0\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x = 2\n        print("inner:", x)\n\n    inner()\n    print("outer:", x)\n\nouter()\nprint("global:", x)\n\n# inner: 2\n# outer: 2\n# global: 0\n']], ['Python nonlocal statement'], 3], [(1261875, 2), [['If we were to use  global , it would bind  x  to the properly "global" value:'], ['-10000']], [[' x = 0\ndef outer():\n    x = 1\n    def inner():\n        global x\n        x = 2\n        print("inner:", x)\n\n    inner()\n    print("outer:", x)\n\nouter()\nprint("global:", x)\n\n# inner: 2\n# outer: 1\n# global: 2\n']], ['Python nonlocal statement'], 3], [(1263479, 0), [['You  can  use a meta class to automatically register your classes in  magic_reverse_mapping :'], ['Alternatively you can use a decorator on your classes to register them. I think this is more readable and easier to understand:']], [[" magic_reverse_mapping = {}\n\nclass MagicRegister(type):\n   def __new__(meta, name, bases, dict):\n      cls = type.__new__(meta, name, bases, dict)\n      magic_reverse_mapping[dict['_internal_attribute']] = cls\n      return cls\n\nclass A(object):\n    __metaclass__ = MagicRegister\n    _internal_attribute = 'A attribute'\n\nafoo = magic_reverse_mapping['A attribute']()\n"]], ['Reverse mapping class attributes to classes in Python'], 3], [(1263479, 1), [['Alternatively you can use a decorator on your classes to register them. I think this is more readable and easier to understand:'], ["Or you could even do it by hand. It's not that much more work without using any magic:"]], [[" magic_reverse_mapping = {}\n\ndef magic_register(cls):\n   magic_reverse_mapping[cls._internal_attribute] = cls\n   return cls\n\n@magic_register\nclass A(object):\n    _internal_attribute = 'A attribute'\n\nafoo = magic_reverse_mapping['A attribute']()\n"]], ['Reverse mapping class attributes to classes in Python'], 3], [(1263479, 2), [["Or you could even do it by hand. It's not that much more work without using any magic:"], ['Looking at the different variants I think the decorator version would be the most pleasant to use.']], [[" reverse_mapping = {}\n\nclass A(object):\n    _internal_attribute = 'A attribute'\n\nreverse_mapping[A._internal_attribute] = A\n"]], ['Reverse mapping class attributes to classes in Python'], 3], [(1264319, 0), [['Python iterators, as such, have very limited functionality -- no "appending" or anything like that. You\'ll need to wrap the generic iterator in a wrapper adding that functionality. E.g.:'], ['Edit : the OP now says what they need is "peek ahead without consuming". Wrapping is still the best option, but an alternative is:']], [[' class Wrapper(object):\n  def __init__(self, it):\n    self.it = it\n    self.pushedback = []\n  def __iter__(self):\n    return self\n  def next(self):\n    if self.pushedback:\n      return self.pushedback.pop()\n    else:\n      return self.it.next()\n  def pushback(self, val):\n    self.pushedback.append(val)\n']], ['Need to add an element at the start of an iterator in python'], 2], [(1264319, 1), [['Edit : the OP now says what they need is "peek ahead without consuming". Wrapping is still the best option, but an alternative is:'], ["this doesn't advance  o  (remember to advance it if and when you decide you DO want to;-)."]], [[' import itertools\n   ...\no, peek = itertools.tee(o)\nif isneat(peek.next()): ...\n']], ['Need to add an element at the start of an iterator in python'], 2], [(1264833, 0), [["An update of ThomasH's variant:"], ['This allows parameters (and named parameters) passed into  __init__()  (without any validation - seems crude):']], [[' def Struct(*args, **kwargs):\n    def init(self, *iargs, **ikwargs):\n        for k,v in kwargs.items():\n            setattr(self, k, v)\n        for i in range(len(iargs)):\n            setattr(self, args[i], iargs[i])\n        for k,v in ikwargs.items():\n            setattr(self, k, v)\n\n    name = kwargs.pop("name", "MyStruct")\n    kwargs.update(dict((k, None) for k in args))\n    return type(name, (object,), {\'__init__\': init, \'__slots__\': kwargs.keys()})\n']], ['Class factory to produce simple struct-like classes?'], 2], [(1264833, 1), [['This allows parameters (and named parameters) passed into  __init__()  (without any validation - seems crude):'], ['-10000']], [[" >>> Person = Struct('fname', 'age')\n>>> person1 = Person('Kevin', 25)\n>>> person2 = Person(age=42, fname='Terry')\n>>> person1.age += 10\n>>> person2.age -= 10\n>>> person1.fname, person1.age, person2.fname, person2.age\n('Kevin', 35, 'Terry', 32)\n>>> \n"]], ['Class factory to produce simple struct-like classes?'], 2], [(1266911, 0), [['Maybe something like this?'], ["This will work in PHP 5.3+, in an older version you'd have to define the callback for  array_map  separately"]], [[' $out=array_map(function($x) {return $x*$x;}, range(0, 9))\n']], ["Does PHP have an equivalent to Python's list comprehension syntax?"], 2], [(1266911, 1), [["This will work in PHP 5.3+, in an older version you'd have to define the callback for  array_map  separately"], ['-10000']], [[" function sq($x) {return $x*$x;}\n$out=array_map('sq', range(0, 9));\n"]], ["Does PHP have an equivalent to Python's list comprehension syntax?"], 2], [(1267314, 0), [['I think this is what you want...'], ['or the "comprehensive" solution, for those who prefer that style:']], [[' import unicodedata\ndef eval_unicode(s):\n    #sum all the unicode fractions\n    u = sum(map(unicodedata.numeric, filter(lambda x: unicodedata.category(x)=="No",s)))\n    #eval the regular digits (with optional dot) as a float, or default to 0\n    n = float("".join(filter(lambda x:x.isdigit() or x==".", s)) or 0)\n    return n+u\n']], ['How do I calculate the numeric value of a string with unicode components in python?'], 2], [(1267314, 1), [['or the "comprehensive" solution, for those who prefer that style:'], ["But beware, there are many unicode values that seem to not have a numeric value assigned in python (for example ⅜⅝ don't work... or maybe is just a matter with my keyboard xD)."]], [[' import unicodedata\ndef eval_unicode(s):\n    #sum all the unicode fractions\n    u = sum(unicodedata.numeric(i) for i in s if unicodedata.category(i)=="No")\n    #eval the regular digits (with optional dot) as a float, or default to 0\n    n = float("".join(i for i in s if i.isdigit() or i==".") or 0)\n    return n+u\n']], ['How do I calculate the numeric value of a string with unicode components in python?'], 2], [(1268050, 0), [['You want to use binary operations to decode the original. The following code actually returns the correct strings:'], ['If you really just want the constants:']], [[" >>> FLAGS = ('User', 'Redo', 'Enqueue', 'Cache', 'OS',\n...          'Real Application Clusters', 'SQL', 'Debug')\n>>> def getFlags(value):\n...   flags = []\n...   for i, flag in enumerate(FLAGS):\n...     if value & (1 << i):\n...       flags.append(flag)\n...   return flags\n...\n>>> print getFlags(22)\n['Redo', 'Enqueue', 'OS']\n"]], ['Standard Solution for Decoding Additive Numbers'], 2], [(1268050, 1), [['If you really just want the constants:'], ['-10000']], [[' >>> def binaryDecomposition(value):\n...   return [1 << i for i in xrange(len(FLAGS)) if value & (1 << i)]\n...\n>>> print binaryDecomposition(22)\n[2, 4, 16]\n']], ['Standard Solution for Decoding Additive Numbers'], 2], [(1268899, 0), [['Just a shot in the dark:'], ['or maybe:']], [[' all_accepted_parts = acceptedFragment.objects.filter(fragment__in = fragment.objects.filter(categories = fragmentCategory.objects.get(id=1)))\n']], ['Really long query'], 2], [(1268899, 1), [['or maybe:'], ['-10000']], [[' all_accepted_parts = acceptedFragment.objects.filter(fragment__in = fragment.objects.filter(categories = 1))\n']], ['Really long query'], 2], [(1269320, 0), [['Load the image from a file using gtk.gdk.Pixbuf for that:'], ['then scale it:']], [[" import gtk\npixbuf = gtk.gdk.pixbuf_new_from_file('/path/to/the/image.png')\n"]], ['Scale an image in GTK'], 4], [(1269320, 1), [['then scale it:'], ['Then, if you want use it in a gtk.Image, crate the widget and set the image from the pixbuf.']], [[' pixbuf = pixbuf.scale_simple(width, height, gtk.gdk.INTERP_BILINEAR)\n']], ['Scale an image in GTK'], 4], [(1269320, 2), [['Then, if you want use it in a gtk.Image, crate the widget and set the image from the pixbuf.'], ['Or maybe in a direct way:']], [[' image = gkt.Image()\nimage.set_from_pixbuf(pixbuf)\n']], ['Scale an image in GTK'], 4], [(1269320, 3), [['Or maybe in a direct way:'], ['-10000']], [[' image = gtk.image_new_from_pixbuf(pixbuf)\n']], ['Scale an image in GTK'], 4], [(1270615, 0), [['Any docstring is available through the  .__doc__  property:'], ["In python 3, you'll need parenthesis for printing:"]], [[' >>> print str.__doc__\n']], ['Python Get Docstring Without Going into Interactive Mode'], 2], [(1270615, 1), [["In python 3, you'll need parenthesis for printing:"], ['-10000']], [[' >>> print(str.__doc__)\n']], ['Python Get Docstring Without Going into Interactive Mode'], 2], [(1270920, 0), [['One way is to use  all  and a list comprehension:'], ['This works for empty lists as well. More generally, to test whether the list only contains things that evaluate to  False , you can use  any :']], [[" if all(e is None for e in myList):\n    print('all empty or None')\n"]], ['Most concise way to check whether a list is empty or contains only None?'], 2], [(1270920, 1), [['This works for empty lists as well. More generally, to test whether the list only contains things that evaluate to  False , you can use  any :'], ['-10000']], [[" if not any(myList):\n    print('all empty or evaluating to False')\n"]], ['Most concise way to check whether a list is empty or contains only None?'], 2], [(1272315, 0), [["The  rsplit  string method splits a string starting from the right instead of the left, and so it's probably what you're looking for (it takes an argument specifying the max number of times to split):"], ['If you want to strip the whitespace from the beginning and end of each item in your splitted list, then you can just use the  strip  method with a list comprehension']], [[' line = "hello, world    , 1       , 2   , 3"\nparts = line.rsplit(",", 3)\nprint parts  # prints [\'hello, world    \', \' 1       \', \' 2   \', \' 3\']\n']], ['parsing CSV files backwards'], 2], [(1272315, 1), [['If you want to strip the whitespace from the beginning and end of each item in your splitted list, then you can just use the  strip  method with a list comprehension'], ['-10000']], [[" parts = [s.strip() for s in parts]\nprint parts  # prints ['hello, world', '1', '2', '3']\n"]], ['parsing CSV files backwards'], 2], [(1272405, 0), [['Could it be because of:'], ['It deletes the last 5 entries from the original list as well. Instead of using  del , you can try:']], [[' del Files[5:]\n']], ['Python looping to read and parse all in a directory'], 2], [(1272405, 1), [['It deletes the last 5 entries from the original list as well. Instead of using  del , you can try:'], ['-10000']], [[' for file in Files[:5]:\n  #...\n']], ['Python looping to read and parse all in a directory'], 2], [(1274035, 0), [['albums.txt'], ['Code']], [[' Album title1\nsong1 title\nsong1 url\nsong2 title\nsong2 url\n\nAlbum title2\nsong1 title\nsong1 url\nsong2 title\nsong2 url\n']], ['What is the correct way to generate a json from file in GoogleAppEngine?'], 4], [(1274035, 1), [['Code'], ['Output']], [[' from django.utils import simplejson\n\ndef gen_groups(lines):\n   """ Returns contiguous groups of lines in a file """\n\n   group = []\n\n   for line in lines:\n      line = line.strip()\n      if not line and group:\n         yield group\n         group = []\n      elif line:\n         group.append(line)\n\n\ndef gen_albums(groups):\n   """ Given groups of lines in an album file, returns albums  """\n\n   for group in groups:\n      title    = group.pop(0)\n      songinfo = zip(*[iter(group)]*2)\n      songs    = [dict(title=title,url=url) for title,url in songinfo]\n      album    = dict(title=title, songs=songs)\n\n      yield album\n\n\ninput = open(\'albums.txt\')\ngroups = gen_groups(input)\nalbums = gen_albums(groups)\n\nprint simplejson.dumps(list(albums))\n']], ['What is the correct way to generate a json from file in GoogleAppEngine?'], 4], [(1274035, 2), [['Output'], ['Album information could then be accessed in Javascript like so:']], [[' [{"songs": [{"url": "song1 url", "title": "song1 title"}, {"url": "song2 url", "title": "song2 title"}], "title": "song2\ntitle"},\n{"songs": [{"url": "song1 url", "title": "song1 title"}, {"url": "song2 url", "title": "song2 title"}], "title": "song2\ntitle"}]\n']], ['What is the correct way to generate a json from file in GoogleAppEngine?'], 4], [(1274035, 3), [['Album information could then be accessed in Javascript like so:'], ["Lastly, here's a note about that  tricky zip line ."]], [[' var url = albums[1].songs[0].url;\n']], ['What is the correct way to generate a json from file in GoogleAppEngine?'], 4], [(1275646, 0), [["Indeed, it's not hard to create a generic annotation enforcer in Python. Here's my take:"], ['But in real life you often mix quantities of the same  computer type  as seen by compiler but clearly different  human type , for example the following snippet contains an obvious mistake:']], [[" '''Very simple enforcer of type annotations.\n\nThis toy super-decorator can decorate all functions in a given module that have \nannotations so that the type of input and output is enforced; an AssertionError is\nraised on mismatch.\n\nThis module also has a test function func() which should fail and logging facility \nlog which defaults to print. \n\nSince this is a test module, I cut corners by only checking *keyword* arguments.\n\n'''\n\nimport sys\n\nlog = print\n\n\ndef func(x:'int' = 0) -> 'str':\n    '''An example function that fails type checking.'''\n    return x\n\n\n# For simplicity, I only do keyword args.\ndef check_type(*args):\n    param, value, assert_type = args\n    log('Checking {0} = {1} of {2}.'.format(*args))\n    if not isinstance(value, assert_type):\n        raise AssertionError(\n            'Check failed - parameter {0} = {1} not {2}.'\n            .format(*args))\n    return value\n\ndef decorate_func(func):    \n    def newf(*args, **kwargs):\n        for k, v in kwargs.items():\n            check_type(k, v, ann[k])\n        return check_type('<return_value>', func(*args, **kwargs), ann['return'])\n\n    ann = {k: eval(v) for k, v in func.__annotations__.items()}\n    newf.__doc__ = func.__doc__\n    newf.__type_checked = True\n    return newf\n\ndef decorate_module(module = '__main__'):\n    '''Enforces type from annotation for all functions in module.'''\n    d = sys.modules[module].__dict__\n    for k, f in d.items():\n        if getattr(f, '__annotations__', {}) and not getattr(f, '__type_checked', False):\n            log('Decorated {0!r}.'.format(f.__name__))\n            d[k] = decorate_func(f)\n\n\nif __name__ == '__main__':\n    decorate_module()\n\n    # This will raise AssertionError.\n    func(x = 5)\n"]], ['Python 3 and static typing'], 2], [(1275646, 1), [['But in real life you often mix quantities of the same  computer type  as seen by compiler but clearly different  human type , for example the following snippet contains an obvious mistake:'], ["Any human should immediately see a mistake in the above line provided it knows the 'human type' of variables  height  and  length  even though it looks to computer as  perfectly legal  multiplication of  int  and  float ."]], [[" height = 1.75 # Bob's height in meters.\nlength = len(sys.modules) # Number of modules imported by program.\narea = height * length # What's that supposed to mean???\n"]], ['Python 3 and static typing'], 2], [(1277519, 0), [['The Python compiler optimizes access to local variables by recognizing at compile time whether the barenames a function is accessing are local (i.e., barenames assigned or otherwise bound within the function). So if you code:'], ['So, the following code works as you desire:']], [[' def lv1(d):\n  locals().update(d)\n  print zap\n']], ['How can I pass my locals and access the variables directly from another function?'], 2], [(1277519, 1), [['So, the following code works as you desire:'], ['it emits  23  as you want.']], [[' def lv1(d):\n  exec ""\n  locals().update(d)\n  print zap\n\nlv1({\'zap\': 23})\n']], ['How can I pass my locals and access the variables directly from another function?'], 2], [(1277866, 0), [["You have to worry about deadlocks if you're  communicating  with your subprocess, i.e. if you're writing to stdin as well as reading from stdout. Because these pipes may be cached, doing this kind of two-way communication is very much a no-no:"], ["However, if you've not set up stdin (or stderr) when constructing data_stream, you should be fine."]], [[' data_stream = Popen(mycmd, stdin=PIPE, stdout=PIPE)\ndata_stream.stdin.write("do something\\n")\nfor line in data_stream:\n  ...  # BAD!\n']], ['python subprocess module: looping over stdout of child process'], 2], [(1277866, 1), [["However, if you've not set up stdin (or stderr) when constructing data_stream, you should be fine."], ['If you need two-way communication, use  communicate .']], [[' data_stream = Popen(mycmd, stdout=PIPE)\nfor line in data_stream.stdout:\n   ...  # Fine\n']], ['python subprocess module: looping over stdout of child process'], 2], [(1277914, 0), [['This should be the most efficent and shortest:'], ['Edit: this in python 3000:']], [[' import operator\nfilter(operator.isNumberType, list_1)\n']], ['Is there a way to output the numbers only from a python list?'], 2], [(1277914, 1), [['Edit: this in python 3000:'], ['-10000']], [[' import numbers\n[x for x in list_1 if isinstance(x, numbers.Number)]\n']], ['Is there a way to output the numbers only from a python list?'], 2], [(1277968, 0), [["Here's a module that creates a timer which does not suffer this problem."], ['To use in program:']], [[' #threadtimer.py\n\nimport threading\nimport time\nimport wx\n\nwxEVT_THREAD_TIMER = wx.NewEventType()\nEVT_THREAD_TIMER = wx.PyEventBinder(wxEVT_THREAD_TIMER, 1)\n\nclass ThreadTimer(object):\n   def __init__(self, parent):\n        self.parent = parent\n        self.thread = Thread()\n        self.thread.parent = self\n        self.alive = False\n\n   def start(self, interval):\n       self.interval = interval\n       self.alive = True\n       self.thread.start()\n\n   def stop(self):\n       self.alive = False\n\nclass Thread(threading.Thread):\n    def run(self):\n       while self.parent.alive:\n           time.sleep(self.parent.interval / 1000.0)\n           event = wx.PyEvent()\n           event.SetEventType(wxEVT_THREAD_TIMER)\n           wx.PostEvent(self.parent.parent, event)\n']], ['wxPython: wx.CallLater being very late'], 2], [(1277968, 1), [['To use in program:'], ['-10000']], [[' import threadtimer\n\ntimer = threadtimer.ThreadTimer(window)\ntimer.start(150)\nwindow.Bind(threadtimer.EVT_THREAD_TIMER, function_to_call)\n']], ['wxPython: wx.CallLater being very late'], 2], [(1279356, 0), [["If you need full objects you'll need to select maximum versions by name in a subquery and join to that:"], ['This will result in something like this:']], [[" max_versions = session.query(Cls.name, func.max(Cls.version).label('max_version'))\\\n                      .group_by(Cls.name).subquery()\nobjs = session.query(Cls).join((max_versions,\n           and_(Cls.name == max_versions.c.name,\n                Cls.version == max_versions.c.max_version)\n       )).all()\n"]], ['sqlalchemy - grouping items and iterating over the sub-lists'], 2], [(1279356, 1), [['This will result in something like this:'], ["Be aware that you'll get multiple rows with the same name if there are multiple rows with the max version."]], [[' SELECT tbl.id AS tbl_id, tbl.name AS tbl_name, tbl.version AS tbl_version\nFROM tbl JOIN (SELECT tbl.name AS name, max(tbl.version) AS max_version\nFROM tbl GROUP BY tbl.name) AS anon_1 ON tbl.name = anon_1.name AND tbl.version = anon_1.max_version\n']], ['sqlalchemy - grouping items and iterating over the sub-lists'], 2], [(1279490, 0), [["I don't think Vinay Sajip's answer is correct. The closest correct variant based on his code is:"], ['That\'s "exclude the ones less than the minimum timestamp and exclude the ones greater than the maximum timestamp." Alternatively, you can do this:']], [[" MyModel.objects.filter(\n                       primaryid=1987\n                      ).exclude(\n                       timestamp__lt=min_timestamp\n                      ).exclude(\n                       timestamp__gt=max_timestamp\n                      ).values_list('valuefield', flat=True)\n"]], ['Django - SQL Query - Timestamp'], 2], [(1279490, 1), [['That\'s "exclude the ones less than the minimum timestamp and exclude the ones greater than the maximum timestamp." Alternatively, you can do this:'], ['exclude() and filter() are opposites: exclude() omits the identified rows and filter() includes them. You can use a combination of them to include/exclude whichever you prefer. In your case, you want to exclude() those below your minimum time stamp and to exclude() those above your maximum time stamp.']], [[" MyModel.objects.filter(\n                       primaryid=1987\n                      ).filter(\n                       timestamp__gte=min_timestamp\n                      ).exclude(\n                       timestamp__gte=max_timestamp\n                      ).values_list('valuefield', flat=True)\n"]], ['Django - SQL Query - Timestamp'], 2], [(1281397, 0), [['With Pyobjc something like this should work. Pyobjc comes with Leopard.'], ['With that, you can also grab the width and height.']], [[' from AppKit import NSScreen\nprint(NSScreen.mainScreen().frame())\n']], ['How to get the desktop resolution in Mac via Python?'], 3], [(1281397, 1), [['With that, you can also grab the width and height.'], ['For example:']], [[' NSScreen.mainScreen().frame().size.width\nNSScreen.mainScreen().frame().size.height\n']], ['How to get the desktop resolution in Mac via Python?'], 3], [(1281397, 2), [['For example:'], ['-10000']], [[' print("Current screen resolution: %dx%d" % (NSScreen.mainScreen().frame().size.width, NSScreen.mainScreen().frame().size.height))\n']], ['How to get the desktop resolution in Mac via Python?'], 3], [(1281944, 0), [['no need to use regular expression '], ['output']], [[' d = {}\nfor line in open("file"):\n    line=line.strip()\n    if line.endswith("\\\\"):\n        directory = line.split(":")[-1].strip().replace("\\\\","")\n        d.setdefault(directory,[])\n    if line.startswith("->"):\n        song=line.split(" ")[-1]\n        d[directory].append(song)\nprint d\n']], ['Copying files to directories as specified in a file list with python'], 2], [(1281944, 1), [['output'], ['-10000']], [[" # python python.py\n{'Images': ['01-some_image1.jpg', '02-some_image2.jpg'], 'Music': ['01-some_song1.mp3', '02-some_song2.mp3', '03-some_song3.mp3']}\n"]], ['Copying files to directories as specified in a file list with python'], 2], [(1282368, 0), [["As per my comment on @Mark's answer, I like the factory approach he's advocating. However, I wouldn't do it exactly his way, because he makes a new class afresh every time. Rather, this is a nice use case for mixin MI and  super , as follows:"], ["Edit : the extra injection of  object  in the bases is needed only to compensate for the sad fact that in Python 2.* the HTTPConnection class is old-style and therefore doesn't play well with others -- witness...:"]], [[' class MyConnectionPlugin(object):\n  def __init__(self, *args, **kw):\n    super(MyConnectionPlugin, self).__init__(*args, **kw)\n    # etc etc -- rest of initiatizations, other methods\n\nclass SecureConnection(MyConnectionPlugin,\n                       httplib.HTTPSConnection, object):\n  pass\n\nclass PlainConnection(MyConnectionPlugin,\n                      httplib.HTTPConnection, object):\n  pass\n\ndef ConnectionClass(secure):\n  if secure:\n    return SecureConnection\n  else:\n    return PlainConnection\n\nconn = ConnectionClass(whatever_expression())()\n']], ['Handling both SSL and non-SSL connections when inheriting from httplib.HTTP(s)Connection'], 2], [(1282368, 1), [["Edit : the extra injection of  object  in the bases is needed only to compensate for the sad fact that in Python 2.* the HTTPConnection class is old-style and therefore doesn't play well with others -- witness...:"], ['The method-resolution order (aka MRO) in class Y (without the further injection of an  object  base) has object before the class from httplib (so  super  doesn\'t do the right thing), but the extra injection jiggles the MRO to compensate. Alas, such care is needed in Python 2.* when dealing with bad old legacy-style classes; fortunately, in Python 3, the legacy style has disappeared and every class "plays well with others" as it should!-)']], [[" >>> import httplib\n>>> class Z(object): pass\n... \n>>> class Y(Z, httplib.HTTPConnection): pass\n... \n>>> Y.mro()\n[<class '__main__.Y'>, <class '__main__.Z'>, <type 'object'>, <class httplib.HTTPConnection at 0x264ae0>]\n>>> class X(Z, httplib.HTTPConnection, object): pass\n... \n>>> X.mro()\n[<class '__main__.X'>, <class '__main__.Z'>, <class httplib.HTTPConnection at 0x264ae0>, <type 'object'>]\n>>> \n"]], ['Handling both SSL and non-SSL connections when inheriting from httplib.HTTP(s)Connection'], 2], [(1283266, 0), [['How about'], ["where  myfilter  does the selection.  Here, for example, only allowing result with 10 or more 1's,"]], [[' import itertools\n\nresults = []\nfor x in itertools.product(range(3), repeat=12):\n    if myfilter(x):\n        results.append(x)\n']], ['Recursive generation + filtering. Better non-recursive?'], 3], [(1283266, 1), [["where  myfilter  does the selection.  Here, for example, only allowing result with 10 or more 1's,"], ['Edit: This approach also has a one-liner form, as suggested in the comments by hughdbrown:']], [[' def myfilter(x):  # example filter, only take lists with 10 or more 1s\n    return x.count(1)>=10\n']], ['Recursive generation + filtering. Better non-recursive?'], 3], [(1283266, 2), [['Edit: This approach also has a one-liner form, as suggested in the comments by hughdbrown:'], ['-10000']], [[' results = [x for x in itertools.product(range(3), repeat=12) if myfilter(x)]\n']], ['Recursive generation + filtering. Better non-recursive?'], 3], [(1283646, 0), [['The code to setup your database would look something like this:'], ["In production code, you'd probably want to cache the reflected database metadata somehow. Like for instance pickle it to a file:"]], [[" from sqlalchemy import create_engine, MetaData\nfrom sqlalchemy.ext.declarative import declarative_base\n\nmetadata = MetaData(create_engine(database_url), reflect=True)\nBase = declarative_base(metadata)    \n\nclass Order(Base):\n    __table__ = metadata.tables['orders']\n\nclass OrderLine(Base):\n    __table__ = metadata.tables['orderlines']\n    order = relation(Order, backref='lines')\n"]], ['Entity Framwework-like ORM NOT for .NET'], 2], [(1283646, 1), [["In production code, you'd probably want to cache the reflected database metadata somehow. Like for instance pickle it to a file:"], ['-10000']], [[" from cPickle import dump, load\nimport os\n\nif os.path.exists('metadata.cache'):\n    metadata = load(open('metadata.cache'))\n    metadata.bind = create_engine(database_url)\nelse:\n    metadata = MetaData(create_engine(database_url), reflect=True)\n    dump(metadata, open('metadata.cache', 'w'))\n"]], ['Entity Framwework-like ORM NOT for .NET'], 2], [(1286619, 0), [['Python 2.5 up:'], ['below 2.5:']], [[' from datetime import datetime\ndt = datetime.strptime(s, "%d/%m/%Y-%H:%M:%S")\n']], ['Django - String to Date - Date to UNIX Timestamp'], 2], [(1286619, 1), [['below 2.5:'], ['-10000']], [[' from datetime import datetime\nfrom time import strptime\ndt = datetime(*strptime(s, "%d/%m/%Y-%H:%M:%S")[0:6])\n']], ['Django - String to Date - Date to UNIX Timestamp'], 2], [(1288474, 0), [['To change tabs into spaces and fill comments at the same time, you can use this command:'], ['Which you can bind to the key of your choice, presumably like so:']], [[' (defun my-format-python-text ()\n  "untabify and wrap python comments"\n  (interactive)\n  (untabify (point-min) (point-max))\n  (goto-char (point-min))\n  (while (re-search-forward comment-start nil t)\n    (call-interactively \'fill-paragraph)\n    (forward-line 1)))\n']], ['Is there any way to format a complete python buffer in emacs with a key press?'], 4], [(1288474, 1), [['Which you can bind to the key of your choice, presumably like so:'], ['If you wanted to all tabs with spaces with just built-in commands, this is a possible sequence:']], [[' (eval-after-load "python"\n  \'(progn\n     (define-key python-mode-map (kbd "RET") \'newline-and-indent)\n     (define-key python-mode-map (kbd "<f4>") \'my-format-python-text)))\n']], ['Is there any way to format a complete python buffer in emacs with a key press?'], 4], [(1288474, 2), [['If you wanted to all tabs with spaces with just built-in commands, this is a possible sequence:'], ['To get the fill column and tab width to be what you want, add to your .emacs:']], [[' C-x h           ;; mark-whole-buffer\nM-x untabify    ;; tabs->spaces\n']], ['Is there any way to format a complete python buffer in emacs with a key press?'], 4], [(1288474, 3), [['To get the fill column and tab width to be what you want, add to your .emacs:'], ["Arguably, the tab-width should be set to 8, depending on how other folks have indented their code in your environment (8 being a default that some other editors have).  If that's the case, you could just set it to 4 in the  'python-mode-hook .  It kind of depends on your environment."]], [[' (setq fill-column 79)\n(setq-default tab-width 4)\n']], ['Is there any way to format a complete python buffer in emacs with a key press?'], 4], [(1288498, 0), [['To expand on the  __get__  approach. This can be generalized into a decorator decorator.'], ['In this way you can just make your decorator automatically adapt to the conditions it is used in.']], [[' class _MethodDecoratorAdaptor(object):\n    def __init__(self, decorator, func):\n        self.decorator = decorator\n        self.func = func\n    def __call__(self, *args, **kwargs):\n        return self.decorator(self.func)(*args, **kwargs)\n    def __get__(self, instance, owner):\n        return self.decorator(self.func.__get__(instance, owner))\n\ndef auto_adapt_to_methods(decorator):\n    """Allows you to use the same decorator on methods and functions,\n    hiding the self argument from the decorator."""\n    def adapt(func):\n        return _MethodDecoratorAdaptor(decorator, func)\n    return adapt\n']], ['Using the same decorator (with arguments) with functions and methods'], 3], [(1288498, 1), [['In this way you can just make your decorator automatically adapt to the conditions it is used in.'], ['Usage of the decorator:']], [[' def allowed(*allowed_methods):\n    @auto_adapt_to_methods\n    def wrapper(func):\n        def wrapped(request):\n            if request not in allowed_methods:\n                raise ValueError("Invalid method %s" % request)\n            return func(request)\n        return wrapped\n    return wrapper\n']], ['Using the same decorator (with arguments) with functions and methods'], 3], [(1288498, 2), [['Usage of the decorator:'], ['-10000']], [[' class Foo(object):\n    @allowed(\'GET\', \'POST\')\n    def do(self, request):\n        print "Request %s on %s" % (request, self)\n\n@allowed(\'GET\')\ndef do(request):\n    print "Plain request %s" % request\n\nFoo().do(\'GET\')  # Works\nFoo().do(\'POST\') # Raises\n']], ['Using the same decorator (with arguments) with functions and methods'], 3], [(1289971, 0), [['foo 2>&1 means redirect all of the output, including handle 2 (that is, STDERR), from the foo command to handle 1 (that is, STDOUT) \nso here out = !foo 2>&1 maybe good enough. below is the demo: \negg.py:  '], ['IPython 0.10   ']], [[' #!/usr/bin/env python\n# -*- coding: utf8 -*-\ndef main():\n    print \'hello\'\n    print 3/0\nif __name__ == "__main__":\n    main()\n']], ['How can I capture the error output from the ipython shell?'], 2], [(1289971, 1), [['IPython 0.10   '], ['Hope this helps']], [[' In [5]: out = !egg.py\nTraceback (most recent call last):\n  File "D:\\python\\note\\egg.py", line 7, in <module>\n    main()\n  File "D:\\python\\note\\egg.py", line 5, in main\n    print 3/0\nZeroDivisionError: integer division or modulo by zero\n\nIn [6]: out\nOut[6]: SList (.p, .n, .l, .s, .grep(), .fields(), sort() available):\n0: hello\n\nIn [7]: out = !egg.py 2>&1\n\nIn [8]: out\nOut[8]: SList (.p, .n, .l, .s, .grep(), .fields(), sort() available):\n0: hello\n1: Traceback (most recent call last):\n2:   File "D:\\python\\note\\egg.py", line 7, in <module>\n3:     main()\n4:   File "D:\\python\\note\\egg.py", line 5, in main\n5:     print 3/0\n6: ZeroDivisionError: integer division or modulo by zero\n']], ['How can I capture the error output from the ipython shell?'], 2], [(1292081, 0), [["I decided to approach this differently and chose not to use annotations at all. I added a manager to the Job model that returned only active (30 days or less old) jobs, and created a property on the JobCategory model that queried for the instance's job count. My templatetag simply returned all categories. Here is the relevant code."], ['and the tag...']], [[' class JobCategory(models.Model):\n    title = models.CharField(_(\'title\'), max_length=50, help_text=_("Max 50 chars. Required."))\n    slug = models.SlugField(_(\'slug\'), help_text=_("Only letters, numbers, or hyphens. Required."))\n\n    class Meta:\n        verbose_name = _(\'job category\')\n        verbose_name_plural = _(\'job categories\')\n\n    def __unicode__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return reverse(\'djobs_category_jobs\', args=[self.slug])\n\n    @property\n    def active_job_count(self):\n        return len(Job.active.filter(category=self))\n\nclass ActiveJobManager(models.Manager):\n    def get_query_set(self):\n        return super(ActiveJobManager, self).get_query_set().filter(created_date__gte=datetime.datetime.now() - datetime.timedelta(days=30))\n\nclass Job(models.Model):\n    title = models.CharField(_(\'title\'), max_length=50, help_text=_("Max 50 chars. Required."))\n    description = models.TextField(_(\'description\'), help_text=_("Required."))\n    category = models.ForeignKey(JobCategory, related_name=\'jobs\')\n    employment_type = models.CharField(_(\'employment type\'), max_length=5, choices=EMPLOYMENT_TYPE_CHOICES, help_text=_("Required."))\n    employment_level = models.CharField(_(\'employment level\'), max_length=5, choices=EMPLOYMENT_LEVEL_CHOICES, help_text=_("Required."))\n    employer = models.ForeignKey(Employer)\n    location = models.ForeignKey(Location)\n    contact = models.ForeignKey(Contact)\n    allow_applications = models.BooleanField(_(\'allow applications\'))\n    created_date = models.DateTimeField(auto_now_add=True)\n\n    objects = models.Manager()\n    active = ActiveJobManager()\n\n    class Meta:\n        verbose_name = _(\'job\')\n        verbose_name_plural = _(\'jobs\')\n\n    def __unicode__(self):\n        return \'%s at %s\' % (self.title, self.employer.name)\n']], ['Is it possible to filter on a related item in Django annotations?'], 2], [(1292081, 1), [['and the tag...'], ['-10000']], [[" def job_categories():\n    categories = JobCategory.objects.all()\n    return {'categories': categories}\n"]], ['Is it possible to filter on a related item in Django annotations?'], 2], [(1293828, 0), [['-10000'], ['Produces:']], [[' import urllib2\nfrom cookielib import CookieJar, DefaultCookiePolicy\npolicy = DefaultCookiePolicy(\nrfc2965=True, strict_ns_domain=DefaultCookiePolicy.DomainStrict)\ncj = CookieJar(policy)\nopener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))\nr = opener.open("http://somewebsite.com")\n\n[str(i) for i in cj]\n']], ['Human readable cookie information using cookielib?'], 2], [(1293828, 1), [['Produces:'], ['-10000']], [[" ['<Cookie JSESSIONID=BE71BFC3EE6D9799DEBD939A7487BB08 for somewebsite.com>']\n"]], ['Human readable cookie information using cookielib?'], 2], [(1295415, 0), [["why don't you just try:"], ['example :']], [[' f = replacement_f\n']], ['How to replace Python function while supporting all passed in parameters'], 2], [(1295415, 1), [['example :'], ['-10000']], [[" >>> def rep(*args):\n    print(*args, sep=' -- ')\n\n>>> def ori(*args):\n    print(args)\n\n>>> ori('dfef', 32)\n('dfef', 32)\n>>> ori = rep\n>>> ori('dfef', 32)\ndfef -- 32\n"]], ['How to replace Python function while supporting all passed in parameters'], 2], [(1295994, 0), [['Numpy is creating an array of 32-bit unsigned ints.\nWhen it sums them, it sums them into a 32-bit value.'], ['You can explicitly choose the data type at array creation time:']], [[' if 499999500000L % (2**32) == 1783293664L:\n    print "Overflowed a 32-bit integer"\n']], ['Numpy: Is there an array size limit?'], 2], [(1295994, 1), [['You can explicitly choose the data type at array creation time:'], ['-10000']], [[' a = numpy.arange(1000000, dtype=numpy.uint64)\na.sum() -> 499999500000\n']], ['Numpy: Is there an array size limit?'], 2], [(1296042, 0), [['For Python 2.x only (thanks Alex):'], ["For Python 3.x only (taken from  Alex's answer ):"]], [[' yourdict = {}\n# ...\nitems = yourdict.items()\n']], ['Tuple list from dict in Python'], 2], [(1296042, 1), [["For Python 3.x only (taken from  Alex's answer ):"], ['-10000']], [[' yourdict = {}\n# ...\nitems = list(yourdict.items())\n']], ['Tuple list from dict in Python'], 2], [(1298319, 0), [['I guess you will have to write the decoder function by yourself. Here is an implementation to get you started:'], ['Usage:']], [[' def decode(file):\n    while True:\n        c = file.read(1)\n        if c == "":\n            # End of file\n            break\n        if c != "%":\n            # Not an escape sequence\n            yield c\n            continue\n        c = file.read(1)\n        if c != "u":\n            # One hex-byte\n            yield chr(int(c + file.read(1), 16))\n            continue\n        # Two hex-bytes\n        yield chr(int(file.read(2), 16))\n        yield chr(int(file.read(2), 16))\n']], ['Unescape/unquote binary strings in (extended) url encoding in python'], 2], [(1298319, 1), [['Usage:'], ['-10000']], [[' input = open("/path/to/input-file", "r")\noutput = open("/path/to/output-file", "wb")\noutput.writelines(decode(input))\noutput.close()\ninput.close()\n']], ['Unescape/unquote binary strings in (extended) url encoding in python'], 2], [(1301156, 0), [['Sort the digits in ascending and descending orders:'], ['Like this:']], [[' ascending = "".join(sorted(str(number)))\n\ndescending = "".join(sorted(str(number), reverse=True))\n']], ['How to sort digits in a number?'], 3], [(1301156, 1), [['Like this:'], ['And if you need them to be numbers again (not just strings), call  int()  on them:']], [[' >>> number = 5896\n>>> ascending = "".join(sorted(str(number)))\n>>>\n>>> descending = "".join(sorted(str(number), reverse=True))\n>>> ascending\n\'5689\'\n>>> descending\n\'9865\'\n']], ['How to sort digits in a number?'], 3], [(1301156, 2), [['And if you need them to be numbers again (not just strings), call  int()  on them:'], ['-10000']], [[' >>> int(ascending)\n5689\n>>> int(descending)\n9865\n']], ['How to sort digits in a number?'], 3], [(1301257, 0), [['Then,'], ['using the lazy .*? or']], [[' A\\d+.*?(B\\d+)?\n']], ['What regex can I use to capture groups from this string?'], 3], [(1301257, 1), [['using the lazy .*? or'], ['EDIT: Upon further reflection, I have parenthesized the patterns in a less-than-perfect way. The following patterns should require fewer assumptions:']], [[' A\\d+[^B]*(B\\d+)?\n']], ['What regex can I use to capture groups from this string?'], 3], [(1301257, 2), [['EDIT: Upon further reflection, I have parenthesized the patterns in a less-than-perfect way. The following patterns should require fewer assumptions:'], ['-10000']], [[' A\\d+(.*?B\\d+)?\na\\d+([^B]*B\\d+)?\n']], ['What regex can I use to capture groups from this string?'], 3], [(1301493, 0), [['-10000'], ["To get the specific values you've listed:"]], [[" >>> import os, time\n>>> time.strftime('%X %x %Z')\n'12:45:20 08/19/09 CDT'\n>>> os.environ['TZ'] = 'Europe/London'\n>>> time.tzset()\n>>> time.strftime('%X %x %Z')\n'18:45:39 08/19/09 BST'\n"]], ['Setting timezone in Python'], 2], [(1301493, 1), [["To get the specific values you've listed:"], ['See  here  for a complete list of directives. Keep in mind that the strftime() function will always return a string, not an integer or other type.']], [[" >>> year = time.strftime('%Y')\n>>> month = time.strftime('%m')\n>>> day = time.strftime('%d')\n>>> hour = time.strftime('%H')\n>>> minute = time.strftime('%M')\n"]], ['Setting timezone in Python'], 2], [(1301735, 0), [['Sounds like almost the textbook example for decorators!'], ['You could even use another decorator to automate the recording of how many times a function is called inside another function:']], [[' def counted(fn):\n    def wrapper(*args, **kwargs):\n        wrapper.called += 1\n        return fn(*args, **kwargs)\n    wrapper.called = 0\n    wrapper.__name__ = fn.__name__\n    return wrapper\n\n@counted\ndef foo():\n    return\n\n>>> foo()\n>>> foo.called\n1\n']], ['Counting python method calls within another method'], 2], [(1301735, 1), [['You could even use another decorator to automate the recording of how many times a function is called inside another function:'], ["If  foo  or  bar  can end up calling themselves, though, you'd need a more complicated solution involving stacks to cope with the recursion. Then you're heading towards a full-on profiler..."]], [[" def counting(other):\n    def decorator(fn):\n        def wrapper(*args, **kwargs):\n            other.called = 0\n            try:\n                return fn(*args, **kwargs)\n            finally:\n                print '%s was called %i times' % (other.__name__, other.called)\n        wrapper.__name__ = fn.__name__\n        return wrapper\n    return decorator\n\n@counting(foo)\ndef bar():\n    foo()\n    foo()\n\n>>> bar()\nfoo was called 2 times\n"]], ['Counting python method calls within another method'], 2], [(1302999, 0), [["Assuming you're running Django 1.1 or a fairly recent checkout, you can use the new  aggregation features . Something like:"], ['This actually gets you a list of dictionaries:']], [[" counts = MyModel.objects.values('datettimefield').annotate(Count('datettimefield'))\n"]], ['How to populate a list with items.count() from a queryset sorted by a datetime field'], 3], [(1302999, 1), [['This actually gets you a list of dictionaries:'], ["Edited after comment : If you're on 1.0.2, the most efficient thing to do is to fall back to raw SQL."]], [[" [{'datetimefield':<date1>, 'datettimefield__count':<count1>},\n {'datetimefield':<date2>, 'datettimefield__count':<count2>}, ...]\n"]], ['How to populate a list with items.count() from a queryset sorted by a datetime field'], 3], [(1302999, 2), [["Edited after comment : If you're on 1.0.2, the most efficient thing to do is to fall back to raw SQL."], ['-10000']], [[' cursor = connection.cursor()\ncursor.execute(\n     "SELECT COUNT(0) FROM `mymodel_table` "\n     "GROUP BY `mydatetimefield`;"\n)\ncounts = cursor.fetchall()\n']], ['How to populate a list with items.count() from a queryset sorted by a datetime field'], 3], [(1303047, 0), [["Here's a simple, cheap solution to get you started"], ['returns (eg)']], [[" from subprocess import *\np = Popen('ssh servername who', shell=True, stdout=PIPE)\np.wait()\nprint p.stdout.readlines()\n"]], ['Interface with remote computers using Python'], 3], [(1303047, 1), [['returns (eg)'], ['and for cpuinfo:']], [[" ['usr      pts/0        2009-08-19 16:03 (kakapo)\\n',\n 'usr      pts/1        2009-08-17 15:51 (kakapo)\\n',\n 'usr      pts/5        2009-08-17 17:00 (kakapo)\\n']\n"]], ['Interface with remote computers using Python'], 3], [(1303047, 2), [['and for cpuinfo:'], ['-10000']], [[" p = Popen('ssh servername cat /proc/cpuinfo', shell=True, stdout=PIPE)\n"]], ['Interface with remote computers using Python'], 3], [(1303105, 0), [['-10000'], ['these are already subject predicate object form so just slap some URI notation on it, load it in the triple store and query at-will via SPARQL.  Here it is in NT format:']], [[' 1 <- 2 -> 3\n3 <- 4 -> 5\n']], ['Graph databases and RDF triplestores: storage of graph data in python'], 3], [(1303105, 1), [['these are already subject predicate object form so just slap some URI notation on it, load it in the triple store and query at-will via SPARQL.  Here it is in NT format:'], ['Now query for all nodes two hops from node 1:']], [[' <http://mycompany.com#1> <http://mycompany.com#2> <http://mycompany.com#3> .\n<http://mycompany.com#3> <http://mycompany.com#4> <http://mycompany.com#5> .\n']], ['Graph databases and RDF triplestores: storage of graph data in python'], 3], [(1303105, 2), [['Now query for all nodes two hops from node 1:'], ['This would of course yield < http://mycompany.com#5 >.']], [[' SELECT ?node\nWHERE {\n    <http://mycompany.com#1> ?p1 ?o1 .\n    ?o1 ?p2 ?node .\n}\n']], ['Graph databases and RDF triplestores: storage of graph data in python'], 3], [(1303347, 0), [['Do this:'], ["If all you're going to do is iterate over this list eventually, there's no need to even convert it to a list, because you can still iterate over the  map  object like so:"]], [[' list(map(chr,[66,53,0,94]))\n']], ['Getting a map() to return a list in Python 3.x'], 2], [(1303347, 1), [["If all you're going to do is iterate over this list eventually, there's no need to even convert it to a list, because you can still iterate over the  map  object like so:"], ['-10000']], [[' # Prints "ABCD"\nfor ch in map(chr,[65,66,67,68]):\n    print(ch)\n']], ['Getting a map() to return a list in Python 3.x'], 2], [(1304106, 0), [['SOAPpy also has a SOAPContext class so that each server method can be \nimplemented in such a way that it gets the context of the connecting client.\nThis includes both common SOAP information and connection information (see \nbelow for an example).'], ['This should succeed (provided the server has defined echoInteger), as it\nbuilds a valid header into this client with MustUnderstand set to 0\nand then sends the SOAP with this header.']], [['Client Examples import SOAPpy\ntest = 42\nserver = SOAPpy.SOAPProxy("http://localhost:8888")\nserver = server._sa ("urn:soapinterop")\n\nhd = SOAPpy.Header()\nhd.InteropTestHeader =\'This should fault, as you don\\\'t understand the header.\'\nhd._setMustUnderstand (\'InteropTestHeader\', 0)\nhd._setActor (\'InteropTestHeader\',\'http://schemas.xmlsoap.org/soap/actor/next\')\nserver = server._hd (hd)\n\nprint server.echoInteger (test)\n']], ['Sage CRM web services example in Python'], 2], [(1304106, 1), [['This should succeed (provided the server has defined echoInteger), as it\nbuilds a valid header into this client with MustUnderstand set to 0\nand then sends the SOAP with this header.'], ["This should fail (even if the server has defined 'echoInteger'), as it\nbuilds a valid header into this client, but sets MustUnderstand to 1\nfor a message that the server presumably won't understand before sending.  "]], [[' import SOAPpy\ntest = 42\nserver = SOAPpy.SOAPProxy("http://localhost:8888")\nserver = server._sa ("urn:soapinterop")\n#Header\nhd = SOAPpy.Header()\nhd.InteropTestHeader = \'This should fault,as you don\\\'t understand the header.\'\nhd._setMustUnderstand (\'InteropTestHeader\', 1)\nhd._setActor (\'InteropTestHeader\',\'http://schemas.xmlsoap.org/soap/actor/next\')\nserver = server._hd (hd)\n\nprint server.echoInteger (test)\n']], ['Sage CRM web services example in Python'], 2], [(1305437, 0), [['Straight-forward way:'], ['Testing:']], [[' def delete_if_not(predicate_key, some_dict):\n    for key, subdict in some_dict.items():\n        if not subdict.get(predicate_key, True):\n            del some_dict[key]\n']], ['How to delete entries in a dictionary with a given flag in python?'], 2], [(1305437, 1), [['Testing:'], ["The other answers on this page so far create another dict. They don't delete the keys in your actual dict."]], [[" mydict = {\n        'test1': {\n                'turned_on': True,\n                'other_data': 'foo',\n            },\n        'test2': {\n            'turned_on': False,\n            'other_data': 'bar',\n            },\n        }\ndelete_if_not('turned_on', mydict)\nprint mydict\n"]], ['How to delete entries in a dictionary with a given flag in python?'], 2], [(1305532, 0), [['Update:  In Python 2.6 and onwards, consider whether the  namedtuple  data structure suits your needs:'], ['The alternative (original answer contents) is:']], [[' >>> from collections import namedtuple\n>>> MyStruct = namedtuple(\'MyStruct\', \'a b d\')\n>>> s = MyStruct(a=1, b={\'c\': 2}, d=[\'hi\'])\n>>> s\nMyStruct(a=1, b={\'c\': 2}, d=[\'hi\'])\n>>> s.a\n1\n>>> s.b\n{\'c\': 2}\n>>> s.c\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nAttributeError: \'MyStruct\' object has no attribute \'c\'\n>>> s.d\n[\'hi\']\n']], ['Convert Python dict to object?'], 3], [(1305532, 1), [['The alternative (original answer contents) is:'], ['Then, you can use:']], [[' class Struct:\n    def __init__(self, **entries):\n        self.__dict__.update(entries)\n']], ['Convert Python dict to object?'], 3], [(1305532, 2), [['Then, you can use:'], ['-10000']], [[" >>> args = {'a': 1, 'b': 2}\n>>> s = Struct(**args)\n>>> s\n<__main__.Struct instance at 0x01D6A738>\n>>> s.a\n1\n>>> s.b\n2\n"]], ['Convert Python dict to object?'], 3], [(1308079, 0), [['It is included with Leopard & later.'], ['It even works with iPython:']], [[' >>> from Foundation import *\n>>> a = NSArray.arrayWithObjects_("a", "b", "c", None)\n>>> a\n(\n      a,\n      b,\n      c\n)\n>>> a[1]\n\'b\'\n>>> a.objectAtIndex_(1)\n\'b\'\n>>> type(a)\n<objective-c class NSCFArray at 0x7fff708bc178>\n']], ['Calling Python from Objective-C'], 3], [(1308079, 1), [['It even works with iPython:'], ['I.e.']], [[' In [1]: from Foundation import *\n\nIn [2]: a = NSBundle.allFrameworks()\n\nIn [3]: ?a\nType:       NSCFArray\nBase Class: <objective-c class NSCFArray at 0x1002adf40>\n']], ['Calling Python from Objective-C'], 3], [(1308079, 2), [['I.e.'], ['-10000']], [[' @interface Abstract : NSObject\n- (unsigned int) foo: (NSString *) aBar;\n+ newConcrete;\n@end\n\n@implementation Abstract\n- (unsigned int) foo: (NSString *) aBar { return 42; }\n+ newConcrete { return [[NSClassFromString(@"MyConcrete") new] autorelease]; }\n@end\n\n.....\n\nclass Concrete(Abstract):\n    def foo_(self, s): return s.length()\n\n.....\n\nx = [Abstract newFoo];\n[x  foo: @"bar"];\n']], ['Calling Python from Objective-C'], 3], [(1308386, 0), [['I have some code that fetches an image off the web and stores it in a model.  The important bits are:'], ['Edit: for the sake of clarity, here is the model (minus any required import statements):']], [[' from django.core.files import File  # you need this somewhere\nimport urllib\n\n\n# The following actually resides in a method of my model\n\nresult = urllib.urlretrieve(image_url) # image_url is a URL to an image\n\n# self.photo is the ImageField\nself.photo.save(\n    os.path.basename(self.url),\n    File(open(result[0]))\n    )\n\nself.save()\n']], ['Programmatically saving image to Django ImageField'], 2], [(1308386, 1), [['Edit: for the sake of clarity, here is the model (minus any required import statements):'], ['-10000']], [[' class CachedImage(models.Model):\n    url = models.CharField(max_length=255, unique=True)\n    photo = models.ImageField(upload_to=photo_path, blank=True)\n\n    def cache(self):\n        """Store image locally if we have a URL"""\n\n        if self.url and not self.photo:\n            result = urllib.urlretrieve(self.url)\n            self.photo.save(\n                    os.path.basename(self.url),\n                    File(open(result[0]))\n                    )\n            self.save()\n']], ['Programmatically saving image to Django ImageField'], 2], [(1309606, 0), [['PYTHONPATH searches in the order that the paths are listed'], ['is not the same as']], [[' PythonPath "[ \'/myproject\', \'/myproject/site-deps\' ] + sys.path"\n']], ['How to tame the location of third party contributions in Django'], 2], [(1309606, 1), [['is not the same as'], ["The former order fails; perhaps because it figures it's already looked at the site-deps and there's no point in looking again."]], [[' PythonPath "[ \'/myproject/site-deps\', \'/myproject\' ] + sys.path"\n']], ['How to tame the location of third party contributions in Django'], 2], [(1310819, 0), [["Given an  Autodesk.Revit.Elements.Room  object  room , the 'Name' property in its base class can be called with"], ['or']], [[' Autodesk.Revit.Element.Name.__get__(room)\n']], ['How can I access the overridden properties of a .NET API object in IronPython?'], 2], [(1310819, 1), [['or'], ['-10000']], [[' Autodesk.Revit.Element.Name.GetValue(room)\n']], ['How can I access the overridden properties of a .NET API object in IronPython?'], 2], [(1312331, 0), [['Thread A running:'], ['Thread B running:']], [[' a = global_dict["foo"]\n']], ['Using a global dictionary with threads in Python'], 6], [(1312331, 1), [['Thread B running:'], ['Thread C running:']], [[' global_dict["bar"] = "hello"\n']], ['Using a global dictionary with threads in Python'], 6], [(1312331, 2), [['Thread C running:'], ['Thread A:']], [[' global_dict["baz"] = "world"\n']], ['Using a global dictionary with threads in Python'], 6], [(1312331, 3), [['Thread A:'], ['Thread B: ']], [[' if "foo" not in global_dict:\n   global_dict["foo"] = 1\n']], ['Using a global dictionary with threads in Python'], 6], [(1312331, 4), [['Thread B: '], ['as the test/set in thread A is not atomic ("time-of-check/time-of-use" race condition). So, it is generally best, if you lock things:']], [[' global_dict["foo"] = 2\n']], ['Using a global dictionary with threads in Python'], 6], [(1312331, 5), [['as the test/set in thread A is not atomic ("time-of-check/time-of-use" race condition). So, it is generally best, if you lock things:'], ['-10000']], [[' lock = RLock()\n\ndef thread_A():\n    lock.acquire()\n    try:\n        if "foo" not in global_dict:\n            global_dict["foo"] = 1\n    finally:\n        lock.release()\n\ndef thread_B():\n    lock.acquire()\n    try:\n        global_dict["foo"] = 2\n    finally:\n        lock.release()\n']], ['Using a global dictionary with threads in Python'], 6], [(1316068, 0), [['Have a look at  itertools , especially  itertools.product . You can compress the three loops into one with '], ['You can also create the cube this way:']], [[' import itertools\n\nfor x, y, z in itertools.product(*map(xrange, (x_dim, y_dim, z_dim)):\n    ...\n']], ['Pythonic way of iterating over 3D array'], 4], [(1316068, 1), [['You can also create the cube this way:'], ['and add the offsets by a simple addition']], [[' cube = numpy.array(list(itertools.product((0,1), (0,1), (0,1))))\nprint cube\narray([[0, 0, 0],\n       [0, 0, 1],\n       [0, 1, 0],\n       [0, 1, 1],\n       [1, 0, 0],\n       [1, 0, 1],\n       [1, 1, 0],\n       [1, 1, 1]])\n']], ['Pythonic way of iterating over 3D array'], 4], [(1316068, 2), [['and add the offsets by a simple addition'], ['which would to translate to  cube + (x,y,z)  in your case. The very compact version of your code would be ']], [[' print cube + (10,100,1000)\narray([[  10,  100, 1000],\n       [  10,  100, 1001],\n       [  10,  101, 1000],\n       [  10,  101, 1001],\n       [  11,  100, 1000],\n       [  11,  100, 1001],\n       [  11,  101, 1000],\n       [  11,  101, 1001]])\n']], ['Pythonic way of iterating over 3D array'], 4], [(1316068, 3), [['which would to translate to  cube + (x,y,z)  in your case. The very compact version of your code would be '], ['Edit :  itertools.product  makes the product over the different arguments, i.e.  itertools.product(a,b,c) , so I have to pass  map(xrange, ...)  with as  *map(...)']], [[' import itertools, numpy\n\ncube = numpy.array(list(itertools.product((0,1), (0,1), (0,1))))\n\nx_dim = y_dim = z_dim = 10\n\nfor offset in itertools.product(*map(xrange, (x_dim, y_dim, z_dim))):\n    work_with_cube(cube+offset)\n']], ['Pythonic way of iterating over 3D array'], 4], [(1318676, 0), [['You could  monkey patch  it for the behavior you want. For example, here is a full script which adds a "reset_list" or "rl" command to pdb:'], ['edit:  And here is such a patch:']], [[' import pdb\n\ndef Pdb_reset_list(self, arg):\n    self.lineno = None\n    print >>self.stdout, "Reset list position."\npdb.Pdb.do_reset = Pdb_reset_list\npdb.Pdb.do_rl = Pdb_reset_list\n\na = 1\nb = 2\n\npdb.set_trace()\n\nprint a, b\n']], ['In pdb how do you reset the list (l) command line count?'], 2], [(1318676, 1), [['edit:  And here is such a patch:'], ['-10000']], [[" import pdb\nPdb = pdb.Pdb\n\nPdb._do_list = Pdb.do_list\ndef pdb_list_wrapper(self, arg):\n    if arg.strip().lower() in ('r', 'reset', 'c', 'current'):\n        self.lineno = None\n        arg = ''\n    self._do_list(arg)\nPdb.do_list = Pdb.do_l = pdb_list_wrapper\n\na = 1\nb = 2\n\npdb.set_trace()\n\nprint a, b\n"]], ['In pdb how do you reset the list (l) command line count?'], 2], [(1318935, 0), [["The modification was to use a sliding window over the target to ensure the subset sequence was found. I think I should have used a more appropriate word than 'Set' to describe my problem."], ['Result:']], [[' def is_sublist_of_any_list(cand, lists):\n    # Compare candidate to a single list\n    def is_sublist_of_list(cand, target):\n        try:\n            i = 0            \n            try:\n                start = target.index(cand[0])\n            except:\n                return False\n\n            while start < (len(target) + len(cand)) - start:\n                if cand == target[start:len(cand)]:\n                    return True\n                else:\n                    start = target.index(cand[0], start + 1)\n        except ValueError:\n            return False\n\n    # See if candidate matches any other list\n    return any(is_sublist_of_list(cand, target) for target in lists if len(cand) <= len(target))\n\n# Compare candidates to all other lists\ndef super_lists(lists):\n    a = [cand for i, cand in enumerate(lists) if not is_sublist_of_any_list(cand, lists[:i] + lists[i+1:])]\n    return a\n\nlists = [[2, 16, 17], [1, 2, 3, 4, 5, 6, 7], [1], [1, 2, 3, 4], [1, 2], [17, 18, 19, 22, 41, 48], [2, 3], [1, 2, 3], [50, 69], [1, 2, 3], [2, 3, 21], [1, 2, 3], [1, 2, 4, 8], [1, 2, 4, 5, 6]]\nexpect = [[2, 16, 17], [1, 2, 3, 4, 5, 6, 7], [17, 18, 19, 22, 41, 48], [50, 69],  [2, 3, 21], [1, 2, 4, 8], [1, 2, 4, 5, 6]]\n\ndef test():\n    out = super_lists(list(lists))\n\n    print "In  : ", lists\n    print "Out : ", out\n\n    assert (out == expect)\n']], ['Python list filtering: remove subsets from list of lists'], 2], [(1318935, 1), [['Result:'], ['-10000']], [[' In  :  [[2, 16, 17], [1, 2, 3, 4, 5, 6, 7], [1], [1, 2, 3, 4], [1, 2], [17, 18, 19, 22, 41, 48], [2, 3], [1, 2, 3], [50, 69], [1, 2, 3], [2, 3, 21], [1, 2, 3], [1, 2, 4, 8], [1, 2, 4, 5, 6]]\nOut :  [[2, 16, 17], [1, 2, 3, 4, 5, 6, 7], [17, 18, 19, 22, 41, 48], [50, 69], [2, 3, 21], [1, 2, 4, 8], [1, 2, 4, 5, 6]]\n']], ['Python list filtering: remove subsets from list of lists'], 2], [(1319338, 0), [["You need to append to the first list those elements of the second list that aren't in the first - sets are the easiest way of determining which elements they are, like this:"], ['Or if you prefer one-liners 8-)']], [[' first_list = [1, 2, 2, 5]\nsecond_list = [2, 5, 7, 9]\n\nin_first = set(first_list)\nin_second = set(second_list)\n\nin_second_but_not_in_first = in_second - in_first\n\nresult = first_list + list(in_second_but_not_in_first)\nprint result  # Prints [1, 2, 2, 5, 9, 7]\n']], ['Combining two lists and removing duplicates, without removing duplicates in original list'], 2], [(1319338, 1), [['Or if you prefer one-liners 8-)'], ['-10000']], [[' print first_list + list(set(second_list) - set(first_list))\n']], ['Combining two lists and removing duplicates, without removing duplicates in original list'], 2], [(1321655, 0), [['You could use a factory function to reduce code duplication'], ['There is a much more natural way. You will like it. In PyGTK 2.12+:']], [[' def make_image_from_file(fname):\n  im = gtk.Image()\n  im.set_from_file(fname)\n  return im\n\nself.out_button.set_image(make_image_from_file(..))\n']], ['How to use the same widget twice in pygtk?'], 2], [(1321655, 1), [['There is a much more natural way. You will like it. In PyGTK 2.12+:'], ["I had something in the back of my mind telling me this, but I didn't look it up."]], [[' gtk.image_new_from_file(filename)\n']], ['How to use the same widget twice in pygtk?'], 2], [(1322380, 0), [['Define a list and an array'], ['Multiplication duplicates the python list, but distributes over the numpy array']], [[' >>> l = range(10)\n>>> l\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> import numpy\n>>> a = numpy.array(l)\n>>> a\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n']], ['gotchas where Numpy differs from straight python?'], 4], [(1322380, 1), [['Multiplication duplicates the python list, but distributes over the numpy array'], ['Addition and division are not defined on python lists']], [[' >>> l * 2\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> a * 2\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])\n']], ['gotchas where Numpy differs from straight python?'], 4], [(1322380, 2), [['Addition and division are not defined on python lists'], ['Numpy overloads to treat lists like arrays sometimes']], [[' >>> l + 2\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: can only concatenate list (not "int") to list\n>>> a + 2\narray([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n>>> l / 2.0\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: unsupported operand type(s) for /: \'list\' and \'float\'\n>>> a / 2.0\narray([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5])\n']], ['gotchas where Numpy differs from straight python?'], 4], [(1322380, 3), [['Numpy overloads to treat lists like arrays sometimes'], ['-10000']], [[' >>> a + a\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])\n>>> a + l\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])\n']], ['gotchas where Numpy differs from straight python?'], 4], [(1323364, 0), [['Answer, wrapped up in a function, with annotated interactive session:'], ["Note: There is a comparison with using re.match() further down in this answer. Further timings show that match() would win with much longer strings; match() seems to have a much larger overhead than search() when the final answer is True; this is puzzling (perhaps it's the cost of returning a MatchObject instead of None) and may warrant further rummaging."]], [[' >>> import re\n>>> def special_match(strg, search=re.compile(r\'[^a-z0-9.]\').search):\n...     return not bool(search(strg))\n...\n>>> special_match("")\nTrue\n>>> special_match("az09.")\nTrue\n>>> special_match("az09.\\n")\nFalse\n# The above test case is to catch out any attempt to use re.match()\n# with a `$` instead of `\\Z` -- see point (6) below.\n>>> special_match("az09.#")\nFalse\n>>> special_match("az09.X")\nFalse\n>>>\n']], ['In Python, how to check if a string only contains certain characters?'], 5], [(1323364, 1), [["Note: There is a comparison with using re.match() further down in this answer. Further timings show that match() would win with much longer strings; match() seems to have a much larger overhead than search() when the final answer is True; this is puzzling (perhaps it's the cost of returning a MatchObject instead of None) and may warrant further rummaging."], ['(1) Presentation gives the appearance of being the result of an interactive Python session:']], [[' ==== Earlier text ====\n']], ['In Python, how to check if a string only contains certain characters?'], 5], [(1323364, 2), [['(1) Presentation gives the appearance of being the result of an interactive Python session:'], ["(5)  Slower than the OP's code!  "]], [[" reg=re.compile('^[a-z0-9\\.]+$')\n>>>reg.match('jsdlfjdsf12324..3432jsdflsdf')\nTrue\n"]], ['In Python, how to check if a string only contains certain characters?'], 5], [(1323364, 3), [["(5)  Slower than the OP's code!  "], ['(6)  Can produce the wrong answer!!']], [[' prompt>rem OP\'s version -- NOTE: OP used raw string!\n\nprompt>\\python26\\python -mtimeit -s"t=\'jsdlfjdsf12324..3432jsdflsdf\';import\nre;reg=re.compile(r\'[^a-z0-9\\.]\')" "not bool(reg.search(t))"\n1000000 loops, best of 3: 1.43 usec per loop\n\nprompt>rem OP\'s version w/o backslash\n\nprompt>\\python26\\python -mtimeit -s"t=\'jsdlfjdsf12324..3432jsdflsdf\';import\nre;reg=re.compile(r\'[^a-z0-9.]\')" "not bool(reg.search(t))"\n1000000 loops, best of 3: 1.44 usec per loop\n\nprompt>rem cleaned-up version of accepted answer\n\nprompt>\\python26\\python -mtimeit -s"t=\'jsdlfjdsf12324..3432jsdflsdf\';import\nre;reg=re.compile(r\'[a-z0-9.]+\\Z\')" "bool(reg.match(t))"\n100000 loops, best of 3: 2.07 usec per loop\n\nprompt>rem accepted answer\n\nprompt>\\python26\\python -mtimeit -s"t=\'jsdlfjdsf12324..3432jsdflsdf\';import\nre;reg=re.compile(\'^[a-z0-9\\.]+$\')" "bool(reg.match(t))"\n100000 loops, best of 3: 2.08 usec per loop\n']], ['In Python, how to check if a string only contains certain characters?'], 5], [(1323364, 4), [['(6)  Can produce the wrong answer!!'], ['-10000']], [[" >>> import re\n>>> bool(re.compile('^[a-z0-9\\.]+$').match('1234\\n'))\nTrue # uh-oh\n>>> bool(re.compile('^[a-z0-9\\.]+\\Z').match('1234\\n'))\nFalse\n"]], ['In Python, how to check if a string only contains certain characters?'], 5], [(1324067, 0), [['I changed your function to build a dict mapping the ordinal of every character to the ordinal of what you want to translate to:'], ['edit:  It turns out that the translation mapping must map from the Unicode ordinal (via  ord ) to either another Unicode ordinal, a Unicode string, or None (to delete). I have thus changed the default value for  translate_to  to be a Unicode literal. For example:']], [[' def translate_non_alphanumerics(to_translate, translate_to=u\'_\'):\n    not_letters_or_digits = u\'!"#%\\\'()*+,-./:;<=>?@[\\]^_`{|}~\'\n    translate_table = dict((ord(char), translate_to) for char in not_letters_or_digits)\n    return to_translate.translate(translate_table)\n\n>>> translate_non_alphanumerics(u\'<foo>!\')\nu\'_foo__\'\n']], ['How do I get str.translate to work with Unicode strings?'], 2], [(1324067, 1), [['edit:  It turns out that the translation mapping must map from the Unicode ordinal (via  ord ) to either another Unicode ordinal, a Unicode string, or None (to delete). I have thus changed the default value for  translate_to  to be a Unicode literal. For example:'], ['-10000']], [[" >>> translate_non_alphanumerics(u'<foo>!', u'bad')\nu'badfoobadbad'\n"]], ['How do I get str.translate to work with Unicode strings?'], 2], [(1324748, 0), [['-10000'], ['Testing with your times from the question:']], [[" from datetime import datetime, timedelta\n\nSTART, END = xrange(2)\ndef tparse(timestring):\n    return datetime.strptime(timestring, '%H:%M')\n\ndef sum_intervals(intervals):\n    times = []\n    for interval in intervals:\n        times.append((tparse(interval[START]), START))\n        times.append((tparse(interval[END]), END))\n    times.sort()\n\n    started = 0\n    result = timedelta()\n    for t, type in times:\n        if type == START:\n            if not started:\n                start_time = t\n            started += 1\n        elif type == END:\n            started -= 1\n            if not started:\n               result += (t - start_time) \n    return result\n"]], ['python time interval algorithm sum'], 5], [(1324748, 1), [['Testing with your times from the question:'], ['That prints:']], [[" intervals = [\n                ('16:30', '20:00'),\n                ('15:00', '19:00'),\n            ]\nprint sum_intervals(intervals)\n"]], ['python time interval algorithm sum'], 5], [(1324748, 2), [['That prints:'], ["Testing it together with data that doesn't overlap"]], [[' 5:00:00\n']], ['python time interval algorithm sum'], 5], [(1324748, 3), [["Testing it together with data that doesn't overlap"], ['result:']], [[" intervals = [\n                ('16:30', '20:00'),\n                ('15:00', '19:00'),\n                ('03:00', '04:00'),\n                ('06:00', '08:00'),\n                ('07:30', '11:00'),\n            ]\nprint sum_intervals(intervals)\n"]], ['python time interval algorithm sum'], 5], [(1324748, 4), [['result:'], ['-10000']], [[' 11:00:00\n']], ['python time interval algorithm sum'], 5], [(1325673, 0), [["You  can  add a property to a class dynamically.  But that's the catch: you have to add it to the  class ."], ["Descriptors are really Python's way of exposing the plumbing of its entire OO implementation.  In fact, there's another type of descriptor even more common than  property ."]], [[' >>> class Foo(object):\n...     pass\n... \n>>> foo = Foo()\n>>> foo.a = 3\n>>> Foo.b = property(lambda self: self.a + 1)\n>>> foo.b\n4\n']], ['How to add property to a class dynamically?'], 3], [(1325673, 1), [["Descriptors are really Python's way of exposing the plumbing of its entire OO implementation.  In fact, there's another type of descriptor even more common than  property ."], ['The humble method is just another kind of descriptor.  Its  __get__  tacks on the calling instance as the first argument; in effect, it does this:']], [[" >>> class Foo(object):\n...     def bar(self):\n...         pass\n... \n>>> Foo().bar\n<bound method Foo.bar of <__main__.Foo object at 0x7f2a439d5dd0>>\n>>> Foo().bar.__get__\n<method-wrapper '__get__' of instancemethod object at 0x7f2a43a8a5a0>\n"]], ['How to add property to a class dynamically?'], 3], [(1325673, 2), [['The humble method is just another kind of descriptor.  Its  __get__  tacks on the calling instance as the first argument; in effect, it does this:'], ["Anyway, I suspect this is why descriptors only work on classes: they're a formalization of the stuff that powers classes in the first place.  They're even the exception to the rule: you can obviously assign descriptors to a class, and classes are themselves instances of  type !  In fact, trying to read  Foo.b  still calls  property.__get__ ; it's just idiomatic for descriptors to return themselves when accessed as class attributes."]], [[' def __get__(self, instance, owner):\n    return functools.partial(self.function, instance)\n']], ['How to add property to a class dynamically?'], 3], [(1326459, 0), [["This correctly reproduces the 'bug':"], ['with the output:']], [[" import shelve\n\na = 'trxns.xml'\nb = 'foobar.xml'\nc = 'profile.xml'\n\nurls = [a, b, c]\ncache = shelve.open('my.cache', 'c')\n\ntry:\n    cache[a] = a*1000\n    cache[b] = b*10000\nfinally:\n    cache.close()\n\n\ncache = shelve.open('my.cache', 'c')\n\ntry:\n    print cache.keys()\n    print [url for url in urls if cache.has_key(url)]\n    print cache.keys()\nfinally:\n    cache.close()\n"]], ['Problem with shelve module?'], 2], [(1326459, 1), [['with the output:'], ["The answer, therefore, is don't store anything big—like raw xml—but rather results of calculations in a shelf."]], [[" []\n['trxns.xml', 'foobar.xml']\n['foobar.xml', 'trxns.xml']\n"]], ['Problem with shelve module?'], 2], [(1327362, 0), [["You could do what Ned suggests (though, I'd use  functools.partial  rather than defining fooA/fooB longhand):"], ['You could rewrite your decorator to allow functions that only take one parameter, but return functions that take two:']], [[' import functools\n\n...\n\nfooA = functools.partial(call_one, _fooA)\nfooB = functools.partial(call_one, _fooB)\n']], ['Code refactoring with python decorators?'], 4], [(1327362, 1), [['You could rewrite your decorator to allow functions that only take one parameter, but return functions that take two:'], ['I would embrace the fact that this code is specific to your fooXXX functions, by making the decorator internal and having it take precisely the number of arguments needed (because foo(*args, **kwargs) signatures makes introspection a pain).']], [[' def refactorMe(func):\n    def wrapper(parm1, parm2):\n        if parm1:\n            code_chunk_1\n\n        func(parm1)\n\n        if parm2[-1]:\n            code_chunk_2\n\n    return wrapper\n']], ['Code refactoring with python decorators?'], 4], [(1327362, 2), [['I would embrace the fact that this code is specific to your fooXXX functions, by making the decorator internal and having it take precisely the number of arguments needed (because foo(*args, **kwargs) signatures makes introspection a pain).'], ["I'd leave the calls taking two parameters, even though one is unused just so that the decorator doesn't change the signature. This isn't strictly necessary as if you document the functions as they look after decoration and you are restricting the use of the decorator to this small set of functions then the fact that the signature changes shouldn't be that big a deal."]], [[' def _refactorMe(func):\n        @functools.wraps(func) #the wraps decorator propagates name/docsting\n        def wrapper(parm1, parm2):\n            if parm1:\n                code_chunk_1\n\n            func(parm1, parm2)\n\n            if parm2:\n                code_chunk_2\n\n        return wrapper\n']], ['Code refactoring with python decorators?'], 4], [(1327362, 3), [["I'd leave the calls taking two parameters, even though one is unused just so that the decorator doesn't change the signature. This isn't strictly necessary as if you document the functions as they look after decoration and you are restricting the use of the decorator to this small set of functions then the fact that the signature changes shouldn't be that big a deal."], ['-10000']], [[' @_refactorMe\ndef fooB(param1, param2):\n    fooB_code  #uses only param1\n\n\n@_refactorMe\ndef fooB(param1, param2):\n    fooB_code  #uses only param1\n']], ['Code refactoring with python decorators?'], 4], [(1327954, 0), [["Since you know that the pixel values are 0-4095, I can't find a faster way than this:"], ['EDIT: Since the function given to point  must  be of the form  argument * scale + offset  for in  I  image, then this is the best possible using the  point  function:']], [[' new_image= image.point(lambda value: value<<4 | value>>8)\n']], ['Rescale intensities of a PIL Image'], 3], [(1327954, 1), [['EDIT: Since the function given to point  must  be of the form  argument * scale + offset  for in  I  image, then this is the best possible using the  point  function:'], ['The maximum output pixel value will be 65520.']], [[' new_image= image.point(lambda argument: argument*16)\n']], ['Rescale intensities of a PIL Image'], 3], [(1327954, 2), [['The maximum output pixel value will be 65520.'], ['This avoids the limitation of the  point  function argument.']], [[' import itertools as it # for brevity\nimport operator\n\ndef scale_12to16(image):\n    new_image= image.copy()\n    new_image.putdata(\n        it.imap(operator.or_,\n            it.imap(operator.lshift, image.getdata(), it.repeat(4)),\n            it.imap(operator.rshift, image.getdata(), it.repeat(8))\n        )\n    )\n    return new_image\n']], ['Rescale intensities of a PIL Image'], 3], [(1329172, 0), [["I have this problem regularly when I'm trying to test code that brings up dialogs for user input, and the same solution should work for both.  You need to provide a new function bound to the name  input  in your test scope with the same signature as the standard  input  function which just returns a test value without actually prompting the user.  Depending on how your tests and code are setup this injection can be done in a number of ways, so I'll leave that as an exercise for the reader, but your replacement method will be something simple like:"], ['Obviously you could also switch on the contents of  message  if that were relevant, and return the datatype of your choice of course.  You can also do something more flexible and general that allows for reusing the same replacement method in a number of situations:']], [[' def my_test_input(message):\n  return 7\n']], ['Python 3 unittest simulate user input'], 3], [(1329172, 1), [['Obviously you could also switch on the contents of  message  if that were relevant, and return the datatype of your choice of course.  You can also do something more flexible and general that allows for reusing the same replacement method in a number of situations:'], ['and then you would inject a partial function into  input :']], [[' def my_test_input(retval, message):\n  return retval\n']], ['Python 3 unittest simulate user input'], 3], [(1329172, 2), [['and then you would inject a partial function into  input :'], ['Leaving  test_input_a  and  test_input_b  as functions that take a single  message  argument, with the  retval  argument already bound.']], [[' import functools\ntest_input_a = functools.partial(my_test_input, retval=7)\ntest_input_b = functools.partial(my_test_input, retval="Foo")\n']], ['Python 3 unittest simulate user input'], 3], [(1331471, 0), [['The recommendation from  an earlier question  on this was to use  sys.getsizeof() , quoting:'], ['You could take this approach:']], [[" >>> import sys\n>>> x = 2\n>>> sys.getsizeof(x)\n14\n>>> sys.getsizeof(sys.getsizeof)\n32\n>>> sys.getsizeof('this')\n38\n>>> sys.getsizeof('this also')\n48\n"]], ['In-memory size of a Python structure'], 5], [(1331471, 1), [['You could take this approach:'], ['python 2.7 (linux, 32-bit):']], [[' >>> import sys\n>>> import decimal\n>>> \n>>> d = {\n...     "int": 0,\n...     "float": 0.0,\n...     "dict": dict(),\n...     "set": set(),\n...     "tuple": tuple(),\n...     "list": list(),\n...     "str": "a",\n...     "unicode": u"a",\n...     "decimal": decimal.Decimal(0),\n...     "object": object(),\n... }\n>>> for k, v in sorted(d.iteritems()):\n...     print k, sys.getsizeof(v)\n...\ndecimal 40\ndict 140\nfloat 16\nint 12\nlist 36\nobject 8\nset 116\nstr 25\ntuple 28\nunicode 28\n']], ['In-memory size of a Python structure'], 5], [(1331471, 2), [['python 2.7 (linux, 32-bit):'], ['python 3.3 (linux, 32-bit)']], [[' decimal 36\ndict 136\nfloat 16\nint 12\nlist 32\nobject 8\nset 112\nstr 22\ntuple 24\nunicode 32\n']], ['In-memory size of a Python structure'], 5], [(1331471, 3), [['python 3.3 (linux, 32-bit)'], ['OSX, Python 2.7.10 (default, Oct 23 2015, 19:19:21) [GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin']], [[' decimal 52\ndict 144\nfloat 16\nint 14\nlist 32\nobject 8\nset 112\nstr 26\ntuple 24\nunicode 26\n']], ['In-memory size of a Python structure'], 5], [(1331471, 4), [['OSX, Python 2.7.10 (default, Oct 23 2015, 19:19:21) [GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin'], ['-10000']], [[' decimal 80\ndict 280\nfloat 24\nint 24\nlist 72\nobject 16\nset 232\nstr 38\ntuple 56\nunicode 52\n']], ['In-memory size of a Python structure'], 5], [(1334222, 0), [['You could have a factory for your classes:'], ['And then use:']], [[' def completefactory(baseclass):\n    class AutoComplete(baseclass):\n        pass\n    return AutoComplete\n']], ['How to change baseclass'], 3], [(1334222, 1), [['And then use:'], ['On the other hand depending on what you want to achieve and how your classes look, maybe AutoComplete is meant to be a mixin, so that you would define  TextAutoComplete  with:']], [[' TextAutoComplete = completefactory(TextCtrl)\nPriceAutoComplete = completefactory(PriceCtrl)\n']], ['How to change baseclass'], 3], [(1334222, 2), [['On the other hand depending on what you want to achieve and how your classes look, maybe AutoComplete is meant to be a mixin, so that you would define  TextAutoComplete  with:'], ['-10000']], [[' class TextAutocomplete(TextCtrl, AutoComplete):\n    pass\n']], ['How to change baseclass'], 3], [(1335392, 0), [['If you need to store state then you can use an object for that.'], ['Example:']], [[' class Chunker(object):\n    """Split `iterable` on evenly sized chunks.\n\n    Leftovers are remembered and yielded at the next call.\n    """\n    def __init__(self, chunksize):\n        assert chunksize > 0\n        self.chunksize = chunksize        \n        self.chunk = []\n\n    def __call__(self, iterable):\n        """Yield items from `iterable` `self.chunksize` at the time."""\n        assert len(self.chunk) < self.chunksize\n        for item in iterable:\n            self.chunk.append(item)\n            if len(self.chunk) == self.chunksize:\n                # yield collected full chunk\n                yield self.chunk\n                self.chunk = [] \n']], ['Iteration over list slices'], 3], [(1335392, 1), [['Example:'], ['Output:']], [[' chunker = Chunker(3)\nfor s in "abcd", "efgh":\n    for chunk in chunker(s):\n        print \'\'.join(chunk)\n\nif chunker.chunk: # is there anything left?\n    print \'\'.join(chunker.chunk)\n']], ['Iteration over list slices'], 3], [(1335392, 2), [['Output:'], ['-10000']], [[' abc\ndef\ngh\n']], ['Iteration over list slices'], 3], [(1336980, 0), [['The following works:'], ['The following works, but feels a bit weird:']], [[' $ ipython\n...\nIn [1]: %run file.py\n\nTrying:\n    3+2\nExpecting:\n    5\nok\n1 items had no tests:\n    __main__\n1 items passed all tests:\n   1 tests in __main__.Foo\n1 tests in 2 items.\n1 passed and 0 failed.\nTest passed.\n\nIn [2]: \n']], ['Running doctests through iPython and pseudo-consoles'], 4], [(1336980, 1), [['The following works, but feels a bit weird:'], ['The following script,  ipython_doctest , makes ipython behave the way you want:']], [[" if __name__ == '__main__':\n    import doctest\n    import the_current_module\n    doctest.testmod(the_current_module)\n"]], ['Running doctests through iPython and pseudo-consoles'], 4], [(1336980, 2), [['The following script,  ipython_doctest , makes ipython behave the way you want:'], ['Example:']], [[' #! /usr/bin/env bash\n\necho "__IP.magic_run(\\"$1\\")" > __ipython_run.py\nipython __ipython_run.py\n']], ['Running doctests through iPython and pseudo-consoles'], 4], [(1336980, 3), [['Example:'], ['-10000']], [[' $ ./ipython_doctest file.py\nTrying:\n    3+2\nExpecting:\n    5\nok\n1 items had no tests:\n    __main__\n1 items passed all tests:\n   1 tests in __main__.Foo\n1 tests in 2 items.\n1 passed and 0 failed.\nTest passed.\nPython 2.5 (r25:51908, Mar  7 2008, 03:27:42) \nType "copyright", "credits" or "license" for more information.\n\nIPython 0.9.1 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython\'s features.\n%quickref -> Quick reference.\nhelp      -> Python\'s own help system.\nobject?   -> Details about \'object\'. ?object also works, ?? prints more.\n\nIn [1]:\n']], ['Running doctests through iPython and pseudo-consoles'], 4], [(1337095, 0), [['Single table inheritance setup with declarative looks like this:'], ["To make it joined table inheritance, you'll need to add"]], [[" class Building(Base):\n    __tablename__ = 'building'\n    id = Column(Integer, primary_key=True)\n    building_type = Column(String(32), nullable=False)\n    x = Column(Float, nullable=False)\n    y = Column(Float, nullable=False)\n    __mapper_args__ = {'polymorphic_on': building_type}\n\nclass Commercial(Building):\n    __mapper_args__ = {'polymorphic_identity': 'commercial'}\n    business = Column(String(50))\n\nclass Residential(Building):\n    __mapper_args__ = {'polymorphic_identity': 'residential'}\n    num_residents = Column(Integer)\n"]], ['SQLAlchemy Inheritance'], 3], [(1337095, 1), [["To make it joined table inheritance, you'll need to add"], ['Querying is mostly the same with both approaches:']], [[" __tablename__ = 'commercial'\nid = Column(None, ForeignKey('building.id'), primary_key=True)\n"]], ['SQLAlchemy Inheritance'], 3], [(1337095, 2), [['Querying is mostly the same with both approaches:'], ['To control which fields are loaded you can use the  query.with_polymorphic()  method.']], [[' # buildings that are within x>5 and y>3\nsession.query(Building).filter((Building.x > 5) & (Building.y > 3))\n# Residential buildings that have only 1 resident\nsession.query(Residential).filter(Residential.num_residents == 1)\n']], ['SQLAlchemy Inheritance'], 3], [(1338714, 0), [['For that purpose, lo that many years ago, I invented the simple  Bunch  idiom; one simple way to implement  Bunch  is:'], ["If  config  is a dict, you can't use  config.account_receivable  -- that's absolutely impossible, because a dict doesn't  have  that attribute, period. However, you  can  wrap  config  into a  Bunch :"]], [[' class Bunch(object):\n  def __init__(self, adict):\n    self.__dict__.update(adict)\n']], ['Accesing dictionary with class attribute'], 3], [(1338714, 1), [["If  config  is a dict, you can't use  config.account_receivable  -- that's absolutely impossible, because a dict doesn't  have  that attribute, period. However, you  can  wrap  config  into a  Bunch :"], ["Edit : if you want  attribute assignment  on the  Bunch  to also affect the original  dict  ( config  in this case), so that e.g.  cb.foo = 23  will do  config['foo'] = 23 , you need a slighly different implementation of  Bunch :"]], [[' cb = Bunch(config)\n']], ['Accesing dictionary with class attribute'], 3], [(1338714, 2), [["Edit : if you want  attribute assignment  on the  Bunch  to also affect the original  dict  ( config  in this case), so that e.g.  cb.foo = 23  will do  config['foo'] = 23 , you need a slighly different implementation of  Bunch :"], ['Normally, the plain  Bunch  is preferred, exactly  because , after instantiation, the  Bunch  instance and the  dict  it was "primed" from are entirely decoupled -- changes to either of them do not affect the other; and such decoupling, most often, is what\'s desired.']], [[' class RwBunch(object):\n  def __init__(self, adict):\n    self.__dict__ = adict\n']], ['Accesing dictionary with class attribute'], 3], [(1341137, 0), [['For example, tweak the greeting.py from  here  to be:'], ['add to your app.yaml right under  handlers:  the two lines:']], [[' from pyparsing import Word, alphas\ngreet = Word( alphas ) + "," + Word( alphas ) + "!" # <-- grammar defined here\nhello = "Hello, World!"\nprint "Content-type: text/plain\\n"\nprint hello, "->", greet.parseString( hello )\n']], ['How do I get PyParsing set up on the Google App Engine?'], 3], [(1341137, 1), [['add to your app.yaml right under  handlers:  the two lines:'], ["start your app, visit  http://localhost:8083/parshello  (or whatever port you're running on;-), and you'll see in your browser the plain text output:"]], [[' - url: /parshello\n  script: greeting.py\n']], ['How do I get PyParsing set up on the Google App Engine?'], 3], [(1341137, 2), [["start your app, visit  http://localhost:8083/parshello  (or whatever port you're running on;-), and you'll see in your browser the plain text output:"], ['-10000']], [[" Hello, World! -> ['Hello', ',', 'World', '!']\n"]], ['How do I get PyParsing set up on the Google App Engine?'], 3], [(1342601, 0), [['any() :'], ['Also, if you\'re going to use "True in ...", make it a generator expression so it doesn\'t take O(n) memory:']], [[' if any(t < 0 for t in x):\n    # do something\n']], ['Pythonic way of checking if a condition holds for any element of a list'], 2], [(1342601, 1), [['Also, if you\'re going to use "True in ...", make it a generator expression so it doesn\'t take O(n) memory:'], ['-10000']], [[' if True in (t < 0 for t in x):\n']], ['Pythonic way of checking if a condition holds for any element of a list'], 2], [(1342679, 0), [['There are two options here. The first is to create a method to look it up dynamically, but use the  property  decorator so that other code can still use straight attribute access.'], ["The other option is to override the model's  save()  method so that it does the lookup when you save:"]], [[" class MyModel(models.Model):\n    _first_name = models.CharField(max_length=100, db_column='first_name')\n\n    @property\n    def first_name(self):\n        return self._first_name or self.user.first_name\n\n    @first_name.setter\n    def first_name(self, value):\n       self._first_name = value\n"]], ['Django empty field fallback'], 2], [(1342679, 1), [["The other option is to override the model's  save()  method so that it does the lookup when you save:"], ["This way you don't have to change your db, but it is only refreshed on save - so if the related User object is changed but this object isn't, it will refer to the old User value."]], [[' def save(self, *args, **kwargs):\n    if not self.first_name:\n        self.first_name = self.user.first_name\n    # now call the default save() method\n    super(MyModel, self).save(*args, **kwargs)\n']], ['Django empty field fallback'], 2], [(1343479, 0), [['This kind of processing can be very tricky.  This simple code does almost the right thing:'], ['produces:']], [[' for s in re.finditer(r"([A-Z][a-z]+[. ]+)+([A-Z][a-z]+)?", text):\n    print s.group(0)\n']], ['How to find Title case phrases from a passage or bunch of paragraphs'], 2], [(1343479, 1), [['produces:'], ['To include "Dr. Joseph Bell", you need to be ok with the period in the string, which allows in "Edinburgh Royal Infirmary. Like Holmes".']], [[' Conan Doyle\nHolmes\nDr. Joseph Bell\nDoyle\nEdinburgh Royal Infirmary. Like Holmes\nBell\nMichael Harrison\nEllery Queen\nMystery Magazine\nWendell Scherer\nEngland\n']], ['How to find Title case phrases from a passage or bunch of paragraphs'], 2], [(1345448, 0), [["Here's the superclass for all commands"], ['Your overall application looks something like this.']], [[' class Command( object ):\n    name= "name"\n    def setup_opts( self, parser ):\n        """Add any options to the parser that this command needs."""\n        pass\n    def execute( self, context, options, args ):\n        """Execute the command in some application context with some options and args."""\n        raise NotImplemented\n']], ['command line arg parsing through introspection'], 2], [(1345448, 1), [['Your overall application looks something like this.'], ['-10000']], [[' commands = [ \n    Install(),\n    Remove(),\n]\ndef main():\n    parser= optparse.OptionParser()\n    for c in commands:\n        c.setup_opts( parser )\n    options, args = parser.parse()\n    command= None\n    for c in commands:\n        if c.name.startswith(args[0].lower()):\n            command= c\n            break\n    if command:\n        status= command.execute( context, options, args[1:] )\n    else:\n        logger.error( "Command %r is unknown", args[0] )\n        status= 2\n    sys.exit( status )\n']], ['command line arg parsing through introspection'], 2], [(1345632, 0), [['The Windows API for this is  GetBinaryType . You can call this from Python using  pywin32 :'], ["If you want to do this without pywin32, you'll have to read the  PE header  yourself. Here's  an example  in C#, and here's a quick port to Python:"]], [[' import win32file\ntype=GetBinaryType("myfile.exe")\nif type==win32file.SCS_32BIT_BINARY:\n    print "32 bit"\n# And so on\n']], ['Determine if an executable (or library) is 32 -or 64-bits (on Windows)'], 2], [(1345632, 1), [["If you want to do this without pywin32, you'll have to read the  PE header  yourself. Here's  an example  in C#, and here's a quick port to Python:"], ['-10000']], [[' import struct\n\nIMAGE_FILE_MACHINE_I386=332\nIMAGE_FILE_MACHINE_IA64=512\nIMAGE_FILE_MACHINE_AMD64=34404\n\nf=open("c:\\windows\\explorer.exe", "rb")\n\ns=f.read(2)\nif s!="MZ":\n    print "Not an EXE file"\nelse:\n    f.seek(60)\n    s=f.read(4)\n    header_offset=struct.unpack("<L", s)[0]\n    f.seek(header_offset+4)\n    s=f.read(2)\n    machine=struct.unpack("<H", s)[0]\n\n    if machine==IMAGE_FILE_MACHINE_I386:\n        print "IA-32 (32-bit x86)"\n    elif machine==IMAGE_FILE_MACHINE_IA64:\n        print "IA-64 (Itanium)"\n    elif machine==IMAGE_FILE_MACHINE_AMD64:\n        print "AMD64 (64-bit x86)"\n    else:\n        print "Unknown architecture"\n\nf.close()\n']], ['Determine if an executable (or library) is 32 -or 64-bits (on Windows)'], 2], [(1348026, 0), [['Use  os.open()  with  os.O_CREAT  and  os.O_EXCL  to create the file.  That will fail if the file already exists:'], ["Once you've created a new file, use  os.fdopen()  to turn the handle into a standard Python file object:"]], [[' >>> fd = os.open("x", os.O_WRONLY | os.O_CREAT | os.O_EXCL)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nOSError: [Errno 17] File exists: \'x\'\n']], ['How do I create a file in python without overwriting an existing file'], 2], [(1348026, 1), [["Once you've created a new file, use  os.fdopen()  to turn the handle into a standard Python file object:"], ['Edit:  From Python 3.3, the builtin  open()  has an  x  mode that means "open for exclusive creation, failing if the file already exists".']], [[' >>> fd = os.open("y", os.O_WRONLY | os.O_CREAT | os.O_EXCL)\n>>> f = os.fdopen(fd, "w")  # f is now a standard Python file object\n']], ['How do I create a file in python without overwriting an existing file'], 2], [(1349311, 0), [['I have built a new code that relates these. Thanks to Peter S Magnusson, sepp2k, hughdbrown, David Wolever and others for indicating important points I had missed earlier. Also, in this code I might have missed something. So, I highly appreciate any replies pointing our errors, suggestions, criticisms etc. After all, I am here for learning. Here is my new code:'], ["And here is what I have got. [In the time column two times (scaled) are shown: first one is the total function execution time, and the second time is the actual(?) concatenation time. I have deducted the function calling time, function buildup time(initialization time), and iteration time. Here I am considering a case where it can't be done without loop (say more statement inside).]"]], [[' from timeit import timeit\n\nnoc = 100\ntocat = "a"\ndef f_call():\n    pass\n\ndef loop_only():\n    for i in range(noc):\n        pass\n\ndef concat_method():\n    s = \'\'\n    for i in range(noc):\n        s = s + tocat\n\ndef list_append():\n    s=[]\n    for i in range(noc):\n        s.append(tocat)\n    \'\'.join(s)\n\ndef list_append_opt():\n    s = []\n    zap = s.append\n    for i in range(noc):\n        zap(tocat)\n    \'\'.join(s)\n\ndef list_comp():\n    \'\'.join(tocat for i in range(noc))\n\ndef concat_method_buildup():\n    s=\'\'\n\ndef list_append_buildup():\n    s=[]\n\ndef list_append_opt_buildup():\n    s=[]\n    zap = s.append\n\ndef function_time(f):\n    return timeit(f,number=1000)*1000\n\nf_callt = function_time(f_call)\n\ndef measure(ftuple,n,tc):\n    global noc,tocat\n    noc = n\n    tocat = tc\n    loopt = function_time(loop_only) - f_callt\n    buildup_time = function_time(ftuple[1]) -f_callt if ftuple[1] else 0\n    total_time = function_time(ftuple[0])\n    return total_time, total_time - f_callt - buildup_time - loopt*ftuple[2]\n\nfunctions ={\'Concat Method\\t\\t\':(concat_method,concat_method_buildup,True),\n            \'List append\\t\\t\\t\':(list_append,list_append_buildup,True),\n            \'Optimized list append\':(list_append_opt,list_append_opt_buildup,True),\n            \'List comp\\t\\t\\t\':(list_comp,0,False)}\n\nfor i in range(5):\n    print("\\n\\n%d concatenation\\t\\t\\t\\t10\'a\'\\t\\t\\t\\t 100\'a\'\\t\\t\\t1000\'a\'"%10**i)\n    print(\'-\'*80)\n    for (f,ft) in functions.items():\n        print(f,"\\t|",end="\\t")\n        for j in range(3):\n            t = measure(ft,10**i,\'a\'*10**j)\n            print("%.3f %.3f |" % t,end="\\t")\n        print()\n']], ["Python string 'join' is faster (?) than '+', but what's wrong here?"], 2], [(1349311, 1), [["And here is what I have got. [In the time column two times (scaled) are shown: first one is the total function execution time, and the second time is the actual(?) concatenation time. I have deducted the function calling time, function buildup time(initialization time), and iteration time. Here I am considering a case where it can't be done without loop (say more statement inside).]"], ['To sum up all these I have made this decisions for me:']], [[" 1 concatenation                 1'a'                  10'a'               100'a'\n-------------------     ----------------------  -------------------  ----------------\nList comp               |   2.310 2.168       |  2.298 2.156       |  2.304 2.162\nOptimized list append   |   1.069 0.439       |  1.098 0.456       |  1.071 0.413\nConcat Method           |   0.552 0.034       |  0.541 0.025       |  0.565 0.048\nList append             |   1.099 0.557       |  1.099 0.552       |  1.094 0.552\n\n\n10 concatenations                1'a'                  10'a'               100'a'\n-------------------     ----------------------  -------------------  ----------------\nList comp               |   3.366 3.224       |  3.473 3.331       |  4.058 3.916\nOptimized list append   |   2.778 2.003       |  2.956 2.186       |  3.417 2.639\nConcat Method           |   1.602 0.943       |  1.910 1.259       |  3.381 2.724\nList append             |   3.290 2.612       |  3.378 2.699       |  3.959 3.282\n\n\n100 concatenations               1'a'                  10'a'               100'a'\n-------------------     ----------------------  -------------------  ----------------\nList comp               |   15.900 15.758     |  17.086 16.944     |  20.260 20.118\nOptimized list append   |   15.178 12.585     |  16.203 13.527     |  19.336 16.703\nConcat Method           |   10.937 8.482      |  25.731 23.263     |  29.390 26.934\nList append             |   20.515 18.031     |  21.599 19.115     |  24.487 22.003\n\n\n1000 concatenations               1'a'                  10'a'               100'a'\n-------------------     ----------------------  -------------------  ----------------\nList comp               |   134.507 134.365   |  143.913 143.771   |  201.062 200.920\nOptimized list append   |   112.018 77.525    |  121.487 87.419    |  151.063 117.059\nConcat Method           |   214.329 180.093   |  290.380 256.515   |  324.572 290.720\nList append             |   167.625 133.619   |  176.241 142.267   |  205.259 171.313\n\n\n10000 concatenations              1'a'                  10'a'               100'a'\n-------------------     ----------------------  -------------------  ----------------\nList comp               |   1309.702 1309.560 |  1404.191 1404.049 |  2912.483 2912.341\nOptimized list append   |   1042.271 668.696  |  1134.404 761.036  |  2628.882 2255.804\nConcat Method           |   2310.204 1941.096 |  2923.805 2550.803 |  STUCK    STUCK\nList append             |   1624.795 1251.589 |  1717.501 1345.137 |  3182.347 2809.233\n"]], ["Python string 'join' is faster (?) than '+', but what's wrong here?"], 2], [(1350174, 0), [["It's just the square of each element."], ['prints']], [[' from numpy import *\na = arange(4).reshape((2,2))\nprint a**2\n']], ['What does matrix**2 mean in python/numpy?'], 2], [(1350174, 1), [['prints'], ['-10000']], [[' [[0 1]\n [4 9]]\n']], ['What does matrix**2 mean in python/numpy?'], 2], [(1350887, 0), [['Example:'], ['So do it like this:']], [[" # my_imports.py\n'''Here go all of my imports'''\nimport sys\nimport functools\nfrom contextlib import contextmanager  # This is a long name, no chance to confuse it.\n....\n\n\n# something1.py\n'''One of my project files.'''\nfrom my_imports import * \n....\n\n# something2.py\n'''Another project file.'''\nfrom my_imports import * \n....\n"]], ['Python: Is there a place when I can put default imports for all my modules?'], 2], [(1350887, 1), [['So do it like this:'], ['-10000']], [[" # something1.py\n'''One of my project files. Takes care of main cycle.'''\nimport sys\n....\n\n# something2.py\n'''Another project file. Main program logic.'''\nimport functools\nfrom contextlib import contextmanager  # This is a long name, no chance to confuse it.\n....\n"]], ['Python: Is there a place when I can put default imports for all my modules?'], 2], [(1355555, 0), [['The preferred solution in Python is generally to return multiple values, as many as you need, and assign them appropriately in the caller.  So deletemin would return two values, the current returnval and the modified node, and the caller would assign the latter as needed. I.e.:'], ["and in the caller, where you previously had  foo = DELETEMIN( bar ) , you'd use instead"]], [[' def DELETEMIN( A ):\n        if A.leftchild is None:\n                return A.element, A.rightchild\n        else:\n                return DELETEMIN( A.leftchild )\n']], ['Python classes -- mutability'], 2], [(1355555, 1), [["and in the caller, where you previously had  foo = DELETEMIN( bar ) , you'd use instead"], ["Peculiar capitalization and spacing within parentheses, BTW, but that's another issue;-)."]], [[' foo, bar = DELETEMIN( bar )\n']], ['Python classes -- mutability'], 2], [(1360507, 0), [['Assuming that each value in the dictionary is a list of pairs, then this should do it for you:'], ['Try it out. The Python shell is your friend!...']], [[' [pair[1] for pairlist in dict1.values() for pair in pairlist]\n']], ['Generating a list from complex dictionary'], 2], [(1360507, 1), [['Try it out. The Python shell is your friend!...'], ["While I'm at it, I'll just say:  ipython  loves you!"]], [[" >>> dict1 = {}\n>>> dict1['a'] = [[1,2], [3,4]]\n>>> dict1['b'] = [[5, 6], [42, 69], [220, 284]]\n>>> \n>>> dict1.values()\n[[[1, 2], [3, 4]], [[5, 6], [42, 69], [220, 284]]]\n>>> \n>>> [pairlist for pairlist in dict1.values()]\n[[[1, 2], [3, 4]], [[5, 6], [42, 69], [220, 284]]]\n>>> # No real difference here, but we can refer to each list now.\n>>> \n>>> [pair for pairlist in dict1.values() for pair in pairlist]\n[[1, 2], [3, 4], [5, 6], [42, 69], [220, 284]]\n>>> \n>>> # Finally...\n>>> [pair[1] for pairlist in dict1.values() for pair in pairlist]\n[2, 4, 6, 69, 284]\n"]], ['Generating a list from complex dictionary'], 2], [(1361373, 0), [['How about:'], ['Output:']], [[" import re\nreg4 = re.compile(r'^(?:PMID- (?P<pmid>[0-9]+)|TI  - (?P<title>.*?)^PG|AB  - (?P<abstract>.*?)^AD)', re.MULTILINE | re.DOTALL)\nfor i in reg4.finditer(data):\n    print i.groupdict()\n"]], ['Match multiple patterns in a multiline string'], 5], [(1361373, 1), [['Output:'], ["As a verbose RE to make it more understandable (I think verbose REs should be used for anything but the simplest of expressions, but that's just my opinion!):"]], [[" {'pmid': '19587274', 'abstract': None, 'title': None}\n{'pmid': None, 'abstract': None, 'title': 'Domain general mechanisms of perceptual decision making in human cortex.\\n'}\n{'pmid': None, 'abstract': 'To successfully interact with objects in the environment, sensory evidence must\\n      be continuously acquired, interpreted, and used to guide appropriate motor\\n      responses. For example, when driving, a red \\n', 'title': None}\n{'pmid': '19583148', 'abstract': None, 'title': None}\n{'pmid': None, 'abstract': None, 'title': 'Ursodeoxycholic acid for treatment of cholestasis in patients with hepatic\\n      amyloidosis.\\n'}\n{'pmid': None, 'abstract': 'BACKGROUND: Amyloidosis represents a group of different diseases characterized by\\n      extracellular accumulation of pathologic fibrillar proteins in various tissues\\n', 'title': None}\n"]], ['Match multiple patterns in a multiline string'], 5], [(1361373, 2), [["As a verbose RE to make it more understandable (I think verbose REs should be used for anything but the simplest of expressions, but that's just my opinion!):"], ['If you want to catch the whole thing in one regexp, get rid of the starting  (?: , the ending  )  and change the  |  characters to  .*? :']], [[' #!/usr/bin/python\nimport re\nreg4 = re.compile(r\'\'\'\n        ^                     # Start of a line (due to re.MULTILINE, this may match at the start of any line)\n        (?:                   # Non capturing group with multiple options, first option:\n            PMID-\\s           # Literal "PMID-" followed by a space\n            (?P<pmid>[0-9]+)  # Then a string of one or more digits, group as \'pmid\'\n        |                     # Next option:\n            TI\\s{2}-\\s        # "TI", two spaces, a hyphen and a space\n            (?P<title>.*?)    # The title, a non greedy match that will capture everything up to...\n            ^PG               # The characters PG at the start of a line\n        |                     # Next option\n            AB\\s{2}-\\s        # "AB  - "\n            (?P<abstract>.*?) # The abstract, a non greedy match that will capture everything up to...\n            ^AD               # "AD" at the start of a line\n        )\n        \'\'\', re.MULTILINE | re.DOTALL | re.VERBOSE)\nfor i in reg4.finditer(data):\n    print i.groupdict()\n']], ['Match multiple patterns in a multiline string'], 5], [(1361373, 3), [['If you want to catch the whole thing in one regexp, get rid of the starting  (?: , the ending  )  and change the  |  characters to  .*? :'], ['This gives:']], [[' #!/usr/bin/python\nimport re\nreg4 = re.compile(r\'\'\'\n        ^                 # Start of a line (due to re.MULTILINE, this may match at the start of any line)\n        PMID-\\s           # Literal "PMID-" followed by a space\n        (?P<pmid>[0-9]+)  # Then a string of one or more digits, group as \'pmid\'\n        .*?               # Next part:\n        TI\\s{2}-\\s        # "TI", two spaces, a hyphen and a space\n        (?P<title>.*?)    # The title, a non greedy match that will capture everything up to...\n        ^PG               # The characters PG at the start of a line\n        .*?               # Next option\n        AB\\s{2}-\\s        # "AB  - "\n        (?P<abstract>.*?) # The abstract, a non greedy match that will capture everything up to...\n        ^AD               # "AD" at the start of a line\n        \'\'\', re.MULTILINE | re.DOTALL | re.VERBOSE)\nfor i in reg4.finditer(data):\n    print i.groupdict()\n']], ['Match multiple patterns in a multiline string'], 5], [(1361373, 4), [['This gives:'], ['-10000']], [[" {'pmid': '19587274', 'abstract': 'To successfully interact with objects in the environment, sensory evidence must\\n      be continuously acquired, interpreted, and used to guide appropriate motor\\n      responses. For example, when driving, a red \\n', 'title': 'Domain general mechanisms of perceptual decision making in human cortex.\\n'}\n{'pmid': '19583148', 'abstract': 'BACKGROUND: Amyloidosis represents a group of different diseases characterized by\\n      extracellular accumulation of pathologic fibrillar proteins in various tissues\\n', 'title': 'Ursodeoxycholic acid for treatment of cholestasis in patients with hepatic\\n      amyloidosis.\\n'}\n"]], ['Match multiple patterns in a multiline string'], 5], [(1361740, 0), [['You could use:'], ['Or more generally:']], [[' -math.pow(3, float(1)/3)\n']], ['Cubic root of the negative number on python'], 2], [(1361740, 1), [['Or more generally:'], ['-10000']], [[' if x > 0:\n    return math.pow(x, float(1)/3)\nelif x < 0:\n    return -math.pow(abs(x), float(1)/3)\nelse:\n    return 0\n']], ['Cubic root of the negative number on python'], 2], [(1364923, 0), [["The standard way is to disconnect the signal. This however needs to have a destructor-like method in your class, called explicitly by code which maintains your object. This is necessary, because otherwise you'll get circular dependency."], ['As you pointed out, you need weakrefs if you want to avoid explicite destroying. I would write a weak callback factory, like:']], [[' class ClipboardMonitor(object):\n    [...]\n\n    def __init__(self):\n        self.clip = gtk.clipboard_get(gtk.gdk.SELECTION_CLIPBOARD)\n        self.signal_id = self.clip.connect("owner-change", self._clipboard_changed)\n\n    def close(self):\n        self.clip.disconnect(self.signal_id)\n']], ['How to connect to a GObject signal in python, without it keeping a reference to the connecter?'], 2], [(1364923, 1), [['As you pointed out, you need weakrefs if you want to avoid explicite destroying. I would write a weak callback factory, like:'], ['(this is a proof of concept code, works for me -- you should probably adapt this piece to your needs). Few notes:']], [[' import weakref\n\nclass CallbackWrapper(object):\n    def __init__(self, sender, callback):\n        self.weak_obj = weakref.ref(callback.im_self)\n        self.weak_fun = weakref.ref(callback.im_func)\n        self.sender = sender\n        self.handle = None\n\n    def __call__(self, *things):\n        obj = self.weak_obj()\n        fun = self.weak_fun()\n        if obj is not None and fun is not None:\n            return fun(obj, *things)\n        elif self.handle is not None:\n            self.sender.disconnect(self.handle)\n            self.handle = None\n            self.sender = None\n\ndef weak_connect(sender, signal, callback):\n    wrapper = CallbackWrapper(sender, callback)\n    wrapper.handle = sender.connect(signal, wrapper)\n    return wrapper\n']], ['How to connect to a GObject signal in python, without it keeping a reference to the connecter?'], 2], [(1365722, 0), [['Check out  http://www.ipinfodb.com/ . You can get a latitude and longitude value by passing their services an IP address. I did something recently where I created a simple service that grabbed the current IP address and then passed it to the service ("api/location/city" is just a service that curls the ipinfodb service). Using jquery:'], ['The key here is this line:']], [[' $.get("api/location/city", null, function(data, textStatus)\n{        \n    if (data != null)\n    {\n        if (data.Status == "OK")\n        {\n            var lat = parseFloat(data.Latitude);\n            var lng = parseFloat(data.Longitude);\n\n            $.setCenter(lat, lng, $.settings.defaultCityZoom);\n\n            manager = new MarkerManager(map, {trackMarkers : true });\n\n            var e = $.createUserMarker(map.getCenter());\n            e.bindInfoWindowHtml($("#marker-content-event").html());\n\n            var m = [];\n            m.push(e);\n\n            // map.addOverlay(e);\n            manager.addMarkers(m, 10);\n            manager.refresh();\n        }\n        else\n        {\n            $.setCenter($.settings.defaultLat, $.settings.defaultLng, $.settings.defaultZoom);\n        }\n    }\n}, "json");\n']], ['Center Google Map Based on geocoded IP'], 2], [(1365722, 1), [['The key here is this line:'], ['Just setting the center to the lat/lng of the result of the service call.']], [[' $.setCenter(lat, lng, $.settings.defaultCityZoom);\n']], ['Center Google Map Based on geocoded IP'], 2], [(1365963, 0), [['First of all, you don\'t need to use deepcopy for this. Re-querying the sender from the database returns a "fresh" object.'], ['You can get a list of all the many-to-many fields for a class, and check the values related to  the current instance:']], [[" def pre_save(sender, **kwargs):\n    pk = kwargs['instance'].pk\n    instance = sender.objects.get(pk=pk)\n    tracking[sender] = instance\n"]], ['Diff django model objects with ManyToMany fields'], 2], [(1365963, 1), [['You can get a list of all the many-to-many fields for a class, and check the values related to  the current instance:'], ['-10000']], [[' for field in sender._meta.local_many:\n    values = field.value_from_object(instance).objects.all()\n    # Now values is a list of related objects, which you can diff\n']], ['Diff django model objects with ManyToMany fields'], 2], [(1366047, 0), [["It shouldn't be generating duplicates."], ["That said, this isn't a good way to generate cookies, because session cookies need to be unpredictable, to avoid attacks involving stealing other people's session cookies.  The Mersenne Twister is not designed for generating secure random numbers.  This is what I do:"]], [[' import random\nchars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"\ndef gen():\n    return \'\'.join([random.choice(chars) for x in range(32)])\n\ntest = [gen() for i in range(100000)]\nprint len(test), len(set(test)) # 100000 100000\n']], ['random.choice not random'], 2], [(1366047, 1), [["That said, this isn't a good way to generate cookies, because session cookies need to be unpredictable, to avoid attacks involving stealing other people's session cookies.  The Mersenne Twister is not designed for generating secure random numbers.  This is what I do:"], ['... which should be very secure (which is to say, difficult to take a string of session cookies and guess other existing session cookies from them).']], [[' import os, hashlib\ndef gen():\n    return hashlib.sha1(os.urandom(512)).hexdigest()\n\ntest = [gen() for i in range(100000)]\nprint len(test), len(set(test))\n']], ['random.choice not random'], 2], [(1368181, 0), [['-10000'], ["EDIT: For those who object that they aren't exactly equivalent because str.split will include an empty string in the set, we can do it even more verbose:"]], [[' String str = "i am a string";\nSystem.out.println(new HashSet<String>(Arrays.asList(str.split(""))));\n']], ['Java equivalent of a Python functionality -> set(string)'], 2], [(1368181, 1), [["EDIT: For those who object that they aren't exactly equivalent because str.split will include an empty string in the set, we can do it even more verbose:"], ['But of course it depends on what you need to accomplish.']], [[' String str = "i am a string";\nSet<String> set = new HashSet<String>(Arrays.asList(str.split("")));\nset.remove("");\nSystem.out.println(set);\n']], ['Java equivalent of a Python functionality -> set(string)'], 2], [(1369287, 0), [['For the first parts :'], ['For instance, you could use something like this :']], [[' $str = <<<STR\ndate,test,time,avail\n2009-09-01,JS,0.119,99.90\n2009-09-02,JS,0.154,99.89\n2009-09-03,SWF,0.177,99.90\n2009-09-04,SWF,0.177,99.90\n2009-09-05,SWF,0.177,99.90\n2009-09-06,SWF,0.177,99.90\n2009-09-07,SWF,0.177,99.90\n2009-09-08,SWF,0.177,99.90\n2009-09-09,SWF,0.177,99.90\n2009-09-10,SWF,0.177,99.90\nSTR;\n$lines = explode(PHP_EOL, $str);\nunset($lines[0]); // first line is useless\n']], ['How do I extract a date range from a csv using perl/php/grep/etc?'], 4], [(1369287, 1), [['For instance, you could use something like this :'], ['And your callback function would be :']], [[" $new_lines = array_filter($lines, 'my_filter');\nvar_dump($new_lines);\n"]], ['How do I extract a date range from a csv using perl/php/grep/etc?'], 4], [(1369287, 2), [['And your callback function would be :'], ['And, the result :']], [[" function my_filter($line) {\n    $min = '2009-09-04';\n    $max = '2009-09-09';\n    if ($line >= $min && $line <= $max) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"]], ['How do I extract a date range from a csv using perl/php/grep/etc?'], 4], [(1369287, 3), [['And, the result :'], ['Hope this helps ;-)']], [[" array\n  4 => string '2009-09-04,SWF,0.177,99.90' (length=26)\n  5 => string '2009-09-05,SWF,0.177,99.90' (length=26)\n  6 => string '2009-09-06,SWF,0.177,99.90' (length=26)\n  7 => string '2009-09-07,SWF,0.177,99.90' (length=26)\n  8 => string '2009-09-08,SWF,0.177,99.90' (length=26)\n"]], ['How do I extract a date range from a csv using perl/php/grep/etc?'], 4], [(1369697, 0), [['First, making sure I have the same defined functions as you:'], ["Now, let's compare their disassembled values:"]], [[' >>> def a(lines):\n    for line in lines:\n        numbers.append(eval(line.strip().split()[0]))\n\n>>> def b(lines):\n    for line in lines:\n        a = line.strip()\n        b = a.split()\n        c = b[0]\n        d = eval(c)\n        numbers.append(d)\n']], ['Why is my "exploded" Python code actually running faster?'], 2], [(1369697, 1), [["Now, let's compare their disassembled values:"], ["It's a lot of information, but we can see the second method is riddled with  STORE_FAST ,  LOAD_FAST  pairs due to the local variables being used.  That  might  be enough to cause your small timing differences, (perhaps) in addition to the different operation order as others have mentioned."]], [[' >>> import dis\n>>> dis.dis(a)\n  2           0 SETUP_LOOP              49 (to 52)\n              3 LOAD_FAST                0 (lines)\n              6 GET_ITER            \n        >>    7 FOR_ITER                41 (to 51)\n             10 STORE_FAST               1 (line)\n\n  3          13 LOAD_GLOBAL              0 (numbers)\n             16 LOAD_ATTR                1 (append)\n             19 LOAD_GLOBAL              2 (eval)\n             22 LOAD_FAST                1 (line)\n             25 LOAD_ATTR                3 (strip)\n             28 CALL_FUNCTION            0\n             31 LOAD_ATTR                4 (split)\n             34 CALL_FUNCTION            0\n             37 LOAD_CONST               1 (0)\n             40 BINARY_SUBSCR       \n             41 CALL_FUNCTION            1\n             44 CALL_FUNCTION            1\n             47 POP_TOP             \n             48 JUMP_ABSOLUTE            7\n        >>   51 POP_BLOCK           \n        >>   52 LOAD_CONST               0 (None)\n             55 RETURN_VALUE        \n>>> dis.dis(b)\n  2           0 SETUP_LOOP              73 (to 76)\n              3 LOAD_FAST                0 (lines)\n              6 GET_ITER            \n        >>    7 FOR_ITER                65 (to 75)\n             10 STORE_FAST               1 (line)\n\n  3          13 LOAD_FAST                1 (line)\n             16 LOAD_ATTR                0 (strip)\n             19 CALL_FUNCTION            0\n             22 STORE_FAST               2 (a)\n\n  4          25 LOAD_FAST                2 (a)\n             28 LOAD_ATTR                1 (split)\n             31 CALL_FUNCTION            0\n             34 STORE_FAST               3 (b)\n\n  5          37 LOAD_FAST                3 (b)\n             40 LOAD_CONST               1 (0)\n             43 BINARY_SUBSCR       \n             44 STORE_FAST               4 (c)\n\n  6          47 LOAD_GLOBAL              2 (eval)\n             50 LOAD_FAST                4 (c)\n             53 CALL_FUNCTION            1\n             56 STORE_FAST               5 (d)\n\n  7          59 LOAD_GLOBAL              3 (numbers)\n             62 LOAD_ATTR                4 (append)\n             65 LOAD_FAST                5 (d)\n             68 CALL_FUNCTION            1\n             71 POP_TOP             \n             72 JUMP_ABSOLUTE            7\n        >>   75 POP_BLOCK           \n        >>   76 LOAD_CONST               0 (None)\n             79 RETURN_VALUE        \n']], ['Why is my "exploded" Python code actually running faster?'], 2], [(1370997, 0), [['assuming you db engine actually supports functions like  MONTH() , you can try'], ['else you can group in python like']], [[' import sqlalchemy as sa\nDBSession.query(Article).group_by( sa.func.year(Article.created), sa.func.month(Article.created)).all()\n']], ['group by year, month, day in a sqlalchemy'], 2], [(1370997, 1), [['else you can group in python like'], ['-10000']], [[' from itertools import groupby\n\ndef grouper( item ): \n    return item.created.year, item.created.month\nfor ( (year, month), items ) in groupby( query_result, grouper ):\n    for item in items:\n        # do stuff\n']], ['group by year, month, day in a sqlalchemy'], 2], [(1372531, 0), [['This is the problem of finding minimal values of a set of sets. The naive algorithm and problem definition looks like this:'], ["There are sub-quadratic algorithms to do this (such as  this ), but given that N is 10000 the efficiency of the implementation probably matters more. The optimal approach depends heavily on the distribution of the input data. Given that the input sets are natural language phrases that mostly differ, the approach suggested by redtuna should work well. Here's a python implementation of that algorithm. "]], [[' set(s for s in sets if not any(other < s for other in sets))\n']], ['Algorithm to filter a set of all phrases containing in other phrase'], 2], [(1372531, 1), [["There are sub-quadratic algorithms to do this (such as  this ), but given that N is 10000 the efficiency of the implementation probably matters more. The optimal approach depends heavily on the distribution of the input data. Given that the input sets are natural language phrases that mostly differ, the approach suggested by redtuna should work well. Here's a python implementation of that algorithm. "], ['This is still quadratic, but on my machine it runs in 350ms for a set of 10k phrases containing 50% of minimal values with words from an exponential distribution.']], [[' from collections import defaultdict\n\ndef find_minimal_phrases(phrases):\n    # Make the phrases hashable\n    phrases = map(frozenset, phrases)\n\n    # Create a map to find all phrases containing a word\n    phrases_containing = defaultdict(set)\n    for phrase in phrases:\n        for word in phrase:\n            phrases_containing[word].add(phrase)\n\n    minimal_phrases = []\n    found_superphrases = set()\n    # in sorted by length order to find minimal sets first thanks to the\n    # fact that a.superset(b) implies len(a) > len(b)\n    for phrase in sorted(phrases, key=len):\n        if phrase not in found_superphrases:\n            connected_phrases = [phrases_containing[word] for word in phrase]\n            connected_phrases.sort(key=len)\n            superphrases = reduce(set.intersection, connected_phrases)\n            found_superphrases.update(superphrases)\n            minimal_phrases.append(phrase)\n    return minimal_phrases\n']], ['Algorithm to filter a set of all phrases containing in other phrase'], 2], [(1373164, 0), [['You can use dictionaries to accomplish this. Dictionaries are stores of keys and values. '], ['You can use variable key names to achieve the effect of variable variables without the security risk.']], [[' >>> dct = {\'x\': 1, \'y\': 2, \'z\': 3}\n>>> dct\n{\'y\': 2, \'x\': 1, \'z\': 3}\n>>> dct["y"]\n2\n']], ['How do I create a variable number of variables?'], 4], [(1373164, 1), [['You can use variable key names to achieve the effect of variable variables without the security risk.'], ["For cases where you're thinking of doing something like"]], [[' >>> x = "spam"\n>>> z = {x: "eggs"}\n>>> z["spam"]\n\'eggs\'\n']], ['How do I create a variable number of variables?'], 4], [(1373164, 2), [["For cases where you're thinking of doing something like"], ['a list may be more appropriate than a dict. A list represents an ordered sequence of objects, with integer indices:']], [[" var1 = 'foo'\nvar2 = 'bar'\nvar3 = 'baz'\n...\n"]], ['How do I create a variable number of variables?'], 4], [(1373164, 3), [['a list may be more appropriate than a dict. A list represents an ordered sequence of objects, with integer indices:'], ['For ordered sequences, lists are more convenient than dicts with integer keys, because lists support iteration in index order,  slicing ,  append , and other operations that would require awkward key management with a dict.']], [[" l = ['foo', 'bar', 'baz']\nprint(l[1])           # prints bar, because indices start at 0\nl.append('potatoes')  # l is now ['foo', 'bar', 'baz', 'potatoes']\n"]], ['How do I create a variable number of variables?'], 4], [(1374457, 0), [['The existing solutions based on  findall  are fine for non-overlapping matches (and no doubt optimal except maybe for HUGE number of matches), although alternatives such as  sum(1 for m in re.finditer(thepattern, thestring))  (to avoid ever materializing the list when all you care about is the count) are also quite possible. Somewhat idiosyncratic would be using  subn  and ignoring the resulting string...:'], ['Assuming for example that you want possibly-overlapping matches  starting at distinct spots in the string  (which then would give TWO matches for the example in the previous paragraph):']], [[" def countnonoverlappingrematches(pattern, thestring):\n  return re.subn(pattern, '', thestring)[1]\n"]], ['Find out how many times a regex matches in a string in Python'], 2], [(1374457, 1), [['Assuming for example that you want possibly-overlapping matches  starting at distinct spots in the string  (which then would give TWO matches for the example in the previous paragraph):'], ["Note that you do have to compile the pattern into a RE object in this case: function  re.search  does not accept a  start  argument (starting position for the search) the way  method   search  does, so you'd have to be slicing thestring as you go -- definitely more effort than just having the next search start at the next possible distinct starting point, which is what I'm doing in this function."]], [[' def countoverlappingdistinct(pattern, thestring):\n  total = 0\n  start = 0\n  there = re.compile(pattern)\n  while True:\n    mo = there.search(thestring, start)\n    if mo is None: return total\n    total += 1\n    start = 1 + mo.start()\n']], ['Find out how many times a regex matches in a string in Python'], 2], [(1377446, 0), [['First define this function:'], ['Then you can use it like this:']], [[' import cStringIO as StringIO\nfrom xhtml2pdf import pisa\nfrom django.template.loader import get_template\nfrom django.template import Context\nfrom django.http import HttpResponse\nfrom cgi import escape\n\n\ndef render_to_pdf(template_src, context_dict):\n    template = get_template(template_src)\n    context = Context(context_dict)\n    html  = template.render(context)\n    result = StringIO.StringIO()\n\n    pdf = pisa.pisaDocument(StringIO.StringIO(html.encode("ISO-8859-1")), result)\n    if not pdf.err:\n        return HttpResponse(result.getvalue(), content_type=\'application/pdf\')\n    return HttpResponse(\'We had some errors<pre>%s</pre>\' % escape(html))\n']], ['Render HTML to PDF in Django site'], 3], [(1377446, 1), [['Then you can use it like this:'], ['The template:']], [[" def myview(request):\n    #Retrieve data or whatever you need\n    return render_to_pdf(\n            'mytemplate.html',\n            {\n                'pagesize':'A4',\n                'mylist': results,\n            }\n        )\n"]], ['Render HTML to PDF in Django site'], 3], [(1377446, 2), [['The template:'], ['Hope it helps.']], [[' <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n    <head>\n        <title>My Title</title>\n        <style type="text/css">\n            @page {\n                size: {{ pagesize }};\n                margin: 1cm;\n                @frame footer {\n                    -pdf-frame-content: footerContent;\n                    bottom: 0cm;\n                    margin-left: 9cm;\n                    margin-right: 9cm;\n                    height: 1cm;\n                }\n            }\n        </style>\n    </head>\n    <body>\n        <div>\n            {% for item in mylist %}\n                RENDER MY CONTENT\n            {% endfor %}\n        </div>\n        <div id="footerContent">\n            {%block page_foot%}\n                Page <pdf:pagenumber>\n            {%endblock%}\n        </div>\n    </body>\n</html>\n']], ['Render HTML to PDF in Django site'], 3], [(1378325, 0), [['An implementation might look like'], ['Example usage:']], [[' import json\nimport sqlalchemy\nfrom sqlalchemy.types import TypeDecorator\n\nSIZE = 256\n\nclass TextPickleType(TypeDecorator):\n\n    impl = sqlalchemy.Text(SIZE)\n\n    def process_bind_param(self, value, dialect):\n        if value is not None:\n            value = json.dumps(value)\n\n        return value\n\n    def process_result_value(self, value, dialect):\n        if value is not None:\n            value = json.loads(value)\n        return value\n']], ['Python dicts in sqlalchemy'], 2], [(1378325, 1), [['Example usage:'], ['This is outlined in  an example in the SQLAlchemy docs , which also shows how to track mutations of that dictionary.']], [[" class SomeModel(Base):\n    __tablename__ = 'the_table'\n    id = Column(Integer, primary_key=True)\n    json_field = Column(TextPickleType())\n\ns = SomeEntity(json_field={'baked': 'beans', 'spam': 'ham'})\nsession.add(s)\nsession.commit()\n"]], ['Python dicts in sqlalchemy'], 2], [(1378926, 0), [['Existing answers do a good job of showing you how to get the ATTRIBUTES of an object, but do not precisely answer the question you posed -- how to get the METHODS of an object. Python objects have a unified namespace (differently from Ruby, where methods and attributes use different namespaces).  Consider for example:'], ['If and when you need to be more selective, try:']], [[" >>> class X(object):\n...   @classmethod\n...   def clame(cls): pass\n...   @staticmethod\n...   def stame(): pass\n...   def meth(self): pass\n...   def __init__(self):\n...     self.lam = lambda: None\n...     self.val = 23\n... \n>>> x = X()\n>>> dir(x)\n['__class__', '__delattr__', '__dict__', '__doc__', '__format__',\n '__getattribute__', '__hash__', '__init__', '__module__',\n '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__',\n '__sizeof__', '__str__', '__subclasshook__', '__weakref__',\n 'clame', 'lam', 'meth', 'stame', 'val']\n"]], ['list of methods for python shell?'], 2], [(1378926, 1), [['If and when you need to be more selective, try:'], ["Standard library module  inspect  is the best way to do introspection in Python: it builds on top of the built-in introspection hooks (such as  dir  and more advanced ones) to offer you useful, rich, and simple introspection services. Here, for example, you see that only instance and class methods specifically designed by this class are shown -- not static methods, not instance attributes whether callable or not, not special methods inherited from  object . If your selectivity needs are slightly different, it's easy to build your own tweaked version of  ismethod  and pass it as the second argument of  getmembers , to tailor the results to your precise, exact needs."]], [[" >>> import inspect\n>>> [n for n, v in inspect.getmembers(x, inspect.ismethod)]\n['__init__', 'clame', 'meth']\n"]], ['list of methods for python shell?'], 2], [(1380566, 0), [['Sure, make a custom descriptor as per the concepts clearly explained in  this doc :'], ['and then just use it:']], [[' class JonProperty(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __get__(self, obj, objtype):\n        return getattr(obj, self.name)\n\n    def __set__(self, obj, val):\n        setattr(obj, self.name, float(val))\n']], ['Can I add parameters to a python property to reduce code duplication?'], 2], [(1380566, 1), [['and then just use it:'], ['-10000']], [[" class Vector(object):\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n    x = JonProperty('_x')\n    y = JonProperty('_y')\n    z = JonProperty('_z')\n"]], ['Can I add parameters to a python property to reduce code duplication?'], 2], [(1380860, 0), [["Tuples are immutable; you can't change which variables they contain after construction. However, you can concatenate or slice them to form new tuples:"], ['And, of course, build them from existing values:']], [[' a = (1, 2, 3)\nb = a + (4, 5, 6)\nc = b[1:]\n']], ['Add Variables to Tuple'], 2], [(1380860, 1), [['And, of course, build them from existing values:'], ['-10000']], [['    name = "Joe"\n   age = 40\n   location = "New York"\n   joe = (name, age, location)\n']], ['Add Variables to Tuple'], 2], [(1381016, 0), [['To make an array with, say,  n  doubles:'], ['and pass  x  to your function where it wants a  double* .  Or if you need to initialize  x  as you make it:']], [[' arr7 = ctypes.c_double * `n` \nx = arr7()\n']], ['How do I wrap this C function, with multiple arguments, with ctypes?'], 2], [(1381016, 1), [['and pass  x  to your function where it wants a  double* .  Or if you need to initialize  x  as you make it:'], ['and the like.  You can loop over  x , index it, and so on.']], [[' x = arr7(i*0.1 for i in xrange(7))\n']], ['How do I wrap this C function, with multiple arguments, with ctypes?'], 2], [(1381333, 0), [['As long as you\'re using new-style classes (i.e.,  object  or some other built-in type is the "deepest ancestor"),  __mro__  is what you\'re looking for.  For example, given:'], ['now,']], [[" >>> class Root(object):\n...   d = {'za': 23}\n... \n>>> class Trunk(Root):\n...   d = {'ki': 45}\n... \n>>> class Branch(Root):\n...   d = {'fu': 67}\n... \n>>> class Leaf(Trunk, Branch):\n...   d = {'po': 89}\n"]], ['How to aggregate all attributes of a hierarchy of classes?'], 2], [(1381333, 1), [['now,'], ['-10000']], [[" >>> def getem(x):\n...   d = {}\n...   for x in x.__class__.__mro__:\n...     d.update(x.__dict__.get('d', ()))\n...   return d\n... \n>>> x = Leaf()\n>>> getem(x)\n{'za': 23, 'ki': 45, 'po': 89, 'fu': 67}\n"]], ['How to aggregate all attributes of a hierarchy of classes?'], 2], [(1382252, 0), [['use:'], ['e.g.']], [[' $svn co <address of template you want> /Developer/Library/Xcode/Project Templates/Application/<Folder you want it in>\n']], ['XCode 3.2 Ruby and Python templates'], 2], [(1382252, 1), [['e.g.'], ['-10000']], [[' $svn co http://svn.red-bean.com/pyobjc/trunk/pyobjc/pyobjc-xcode/Project%20Templates/Cocoa-Python%20Document-based%20Application/ /Developer/Library/Xcode/Project\\ Templates/Application/Cocoa-Python\\ NSDocument\\ based\\ Application\n']], ['XCode 3.2 Ruby and Python templates'], 2], [(1382569, 0), [['I would take the sources of an existing Debian package, and replace the actual package in it with your package. To find a list of packages that depend on python-support, do'], ['Pick a package that is  Architecture: all , so that it is a pure-Python package. Going through this list, I found that e.g. python-flup might be a good starting point.\nTo get the source of one such package, do']], [['  apt-cache rdepends python-support\n']], ['How do I do Debian packaging of a Python package?'], 3], [(1382569, 1), [['Pick a package that is  Architecture: all , so that it is a pure-Python package. Going through this list, I found that e.g. python-flup might be a good starting point.\nTo get the source of one such package, do'], ['To build it, do']], [[' apt-get source <package>\n']], ['How do I do Debian packaging of a Python package?'], 3], [(1382569, 2), [['To build it, do'], ['When editing it, expect that you only need the files in the  debian  folder; replace all references to flup with your own package name.']], [[' cd <packagesrc>\ndpkg-buildpackage -rfakeroot\n']], ['How do I do Debian packaging of a Python package?'], 3], [(1383693, 0), [['The only real problem is "what if the  .key  gets reassigned". Well then, clearly you must use a property that updates all the relevant dicts as well as the instance\'s attribute; so each object must know all the dicts in which it may be enregistered. Ideally one would want to use weak references for the purpose, to avoid circular dependencies, but, alas, you can\'t take a  weakref.ref  (or proxy) to a dict. So, I\'m using normal references here, instead (the alternative is not to use  dict  instances but e.g. some special subclass -- not handy).'], ["Edit : if you want a single collection with ALL the instances of Item, that's even easier, as you can make the collection a class-level attribute; indeed it can be a WeakValueDictionary to avoid erroneously keeping items alive, if that's what you need.  I.e.:"]], [[' def enregister(d, obj):\n  obj.ds.append(d)\n  d[obj.key] = obj\n\nclass Item(object):\n    def __init__(self, uniq_key, title=None):\n        self._key = uniq_key\n        self.title = title\n        self.ds = []\n\n    def adjust_key(self, newkey):\n        newds = [d for d in self.ds if self._key in d]\n        for d in newds:\n          del d[self._key]\n          d[newkey] = self\n        self.ds = newds\n        self._key = newkey\n\n    def get_key(self):\n        return self._key\n\n    key = property(get_key, adjust_key)\n']], ['Python data structure for a collection of objects with random access based on an attribute'], 2], [(1383693, 1), [["Edit : if you want a single collection with ALL the instances of Item, that's even easier, as you can make the collection a class-level attribute; indeed it can be a WeakValueDictionary to avoid erroneously keeping items alive, if that's what you need.  I.e.:"], ["Now you can use  Item.all['akey'] ,  Item.all.get('akey') ,  for akey in Item.all: , and so forth -- all the rich functionality of dicts."]], [[' class Item(object):\n\n    all = weakref.WeakValueDictionary()\n\n    def __init__(self, uniq_key, title=None):\n        self._key = uniq_key\n        self.title = title\n        # here, if needed, you could check that the key\n        # is not ALREADY present in self.all\n        self.all[self._key] = self\n\n    def adjust_key(self, newkey):\n        # "key non-uniqueness" could be checked here too\n        del self.all[self._key]\n        self.all[newkey] = self\n        self._key = newkey\n\n    def get_key(self):\n        return self._key\n\n    key = property(get_key, adjust_key)\n']], ['Python data structure for a collection of objects with random access based on an attribute'], 2], [(1384406, 0), [['I can\'t believe any of the many answers gives what I\'d consider the "one obvious way to do it" (and I\'m not even Dutch...!-) -- up to just below 24 hours\' worth of seconds (86399 seconds, specifically):'], ["Doing it in a Django template's more finicky, since the  time  filter supports a funky time-formatting syntax (inspired, I believe, from PHP), and also needs the datetime module, and a timezone implementation such as pytz, to prep the data. For example:"]], [[" >>> import time\n>>> time.strftime('%H:%M:%S', time.gmtime(12345))\n'03:25:45'\n"]], ['Python: convert seconds to hh:mm:ss'], 2], [(1384406, 1), [["Doing it in a Django template's more finicky, since the  time  filter supports a funky time-formatting syntax (inspired, I believe, from PHP), and also needs the datetime module, and a timezone implementation such as pytz, to prep the data. For example:"], ['Depending on your exact needs, it might be more convenient to define a custom filter for this formatting task in your app.']], [[' >>> from django import template as tt\n>>> import pytz\n>>> import datetime\n>>> tt.Template(\'{{ x|time:"H:i:s" }}\').render(\n...     tt.Context({\'x\': datetime.datetime.fromtimestamp(12345, pytz.utc)}))\nu\'03:25:45\'\n']], ['Python: convert seconds to hh:mm:ss'], 2], [(1384542, 0), [['You can use  object.__str__() :'], ['This gives you the default output for instances of  B :']], [[' class A:\n   def __str__(self):\n      return "Something useless"\n\nclass B(A):\n   def __str__(self):\n      return object.__str__(self)\n']], ['Python : Revert to base __str__ behavior'], 2], [(1384542, 1), [['This gives you the default output for instances of  B :'], ['-10000']], [[" >>> b = B()\n>>> str(b)\n'<__main__.B instance at 0x7fb34c4f09e0>'\n"]], ['Python : Revert to base __str__ behavior'], 2], [(1387644, 0), [['Pyparsing will process this data, and will be tolerant of unexpected things like spaces before and after commas, commas within quotes, etc.  (csv module is too, but regex solutions force you to add "\\s*" bits all over the place).'], ['Prints']], [[' from pyparsing import *\n\ninteger = Regex(r"-?\\d+").setName("integer")\ninteger.setParseAction(lambda tokens: int(tokens[0]))\nfloatnum = Regex(r"-?\\d+\\.\\d*").setName("float")\nfloatnum.setParseAction(lambda tokens: float(tokens[0]))\ndblQuotedString.setParseAction(removeQuotes)\nCOMMA = Suppress(\',\')\nvalidLine = dblQuotedString + COMMA + dblQuotedString + COMMA + \\\n        integer + COMMA + floatnum + LineEnd()\n\ntests = """\\\n"good data","good2",100,3.14\n"good data" , "good2", 100, 3.14\nbad, "good","good2",100,3.14\n"bad","good2",100,3\n"bad","good2",100.5,3\n""".splitlines()\n\nfor t in tests:\n    print t\n    try:\n        print validLine.parseString(t).asList()\n    except ParseException, pe:\n        print pe.markInputline(\'?\')\n        print pe.msg\n    print\n']], ['Verify CSV against given format'], 6], [(1387644, 1), [['Prints'], ['You will probably be stripping those quotation marks off at some future time, pyparsing can do that at parse time by adding:']], [[' "good data","good2",100,3.14\n[\'good data\', \'good2\', 100, 3.1400000000000001]\n\n"good data" , "good2", 100, 3.14\n[\'good data\', \'good2\', 100, 3.1400000000000001]\n\nbad, "good","good2",100,3.14\n?bad, "good","good2",100,3.14\nExpected string enclosed in double quotes\n\n"bad","good2",100,3\n"bad","good2",100,?3\nExpected float\n\n"bad","good2",100.5,3\n"bad","good2",100?.5,3\nExpected ","\n']], ['Verify CSV against given format'], 6], [(1387644, 2), [['You will probably be stripping those quotation marks off at some future time, pyparsing can do that at parse time by adding:'], ["If you want to add comment support to your input file, say a '#' followed by the rest of the line, you can do this:"]], [[' dblQuotedString.setParseAction(removeQuotes)\n']], ['Verify CSV against given format'], 6], [(1387644, 3), [["If you want to add comment support to your input file, say a '#' followed by the rest of the line, you can do this:"], ['You can also add names to these fields, so that you can access them by name instead of index position (which I find gives more robust code in light of changes down the road):']], [[" comment = '#' + restOfline\nvalidLine.ignore(comment)\n"]], ['Verify CSV against given format'], 6], [(1387644, 4), [['You can also add names to these fields, so that you can access them by name instead of index position (which I find gives more robust code in light of changes down the road):'], ['And your post-processing code can then do this:']], [[' validLine = dblQuotedString("key") + COMMA + dblQuotedString("title") + COMMA + \\\n        integer("qty") + COMMA + floatnum("price") + LineEnd()\n']], ['Verify CSV against given format'], 6], [(1387644, 5), [['And your post-processing code can then do this:'], ['-10000']], [[' data = validLine.parseString(t)\nprint "%(key)s: %(title)s, %(qty)d in stock at $%(price).2f" % data\nprint data.qty*data.price\n']], ['Verify CSV against given format'], 6], [(1388818, 0), [['Not the most efficient one, but by far the most obvious way to do it is:'], ['if order is significant you can do it with list comprehensions like this:']], [[' >>> a = [1, 2, 3, 4, 5]\n>>> b = [9, 8, 7, 6, 5]\n>>> set(a) & set(b)\n{5}\n']], ['How can I compare two lists in python and return matches'], 2], [(1388818, 1), [['if order is significant you can do it with list comprehensions like this:'], ['(only works for equal-sized lists, which order-significance implies).']], [[' >>> [i for i, j in zip(a, b) if i == j]\n[5]\n']], ['How can I compare two lists in python and return matches'], 2], [(1389180, 0), [['Here is the complete solution:'], ['Edit: Adam asked me to extend the solution to support keyword arguments']], [[' from functools import wraps\nimport inspect\n\n\ndef initializer(func):\n    """\n    Automatically assigns the parameters.\n\n    >>> class process:\n    ...     @initializer\n    ...     def __init__(self, cmd, reachable=False, user=\'root\'):\n    ...         pass\n    >>> p = process(\'halt\', True)\n    >>> p.cmd, p.reachable, p.user\n    (\'halt\', True, \'root\')\n    """\n    names, varargs, keywords, defaults = inspect.getargspec(func)\n\n    @wraps(func)\n    def wrapper(self, *args, **kargs):\n        for name, arg in list(zip(names[1:], args)) + list(kargs.items()):\n            setattr(self, name, arg)\n\n        for name, default in zip(reversed(names), reversed(defaults)):\n            if not hasattr(self, name):\n                setattr(self, name, default)\n\n        func(self, *args, **kargs)\n\n    return wrapper\n']], ['Python: Automatically initialize instance variables?'], 4], [(1389180, 1), [['Edit: Adam asked me to extend the solution to support keyword arguments'], ['You can use a decorator:']], [[' from functools import wraps\nimport inspect\n\ndef initializer(fun):\n   names, varargs, keywords, defaults = inspect.getargspec(fun)\n   @wraps(fun)\n   def wrapper(self, *args, **kargs):\n       for name, arg in zip(names[1:], args) + kargs.items():\n           setattr(self, name, arg)\n       fun(self, *args, **kargs)\n   return wrapper\n']], ['Python: Automatically initialize instance variables?'], 4], [(1389180, 2), [['You can use a decorator:'], ['Output:']], [[' from functools import wraps\nimport inspect\n\ndef initializer(fun):\n    names, varargs, keywords, defaults = inspect.getargspec(fun)\n    @wraps(fun)\n    def wrapper(self, *args):\n        for name, arg in zip(names[1:], args):\n            setattr(self, name, arg)\n        fun(self, *args)\n    return wrapper\n\nclass process:\n    @initializer\n    def __init__(self, PID, PPID, cmd, FDs, reachable, user):\n        pass\n']], ['Python: Automatically initialize instance variables?'], 4], [(1389180, 3), [['Output:'], ['-10000']], [[" >>> c = process(1, 2, 3, 4, 5, 6)\n>>> c.PID\n1\n>>> dir(c)\n['FDs', 'PID', 'PPID', '__doc__', '__init__', '__module__', 'cmd', 'reachable', 'user'\n"]], ['Python: Automatically initialize instance variables?'], 4], [(1391657, 0), [["It's not clear to me from your question why you need to worry about the  div  tags -- what about doing just:"], ['On the HTML you give, running this emits exactly:']], [[" soup = BeautifulSoup(html)\nthetd = soup.find('td', attrs={'class': 'author'})\nprint thetd.string\n"]], ['Python web scraping involving HTML tags with attributes'], 3], [(1391657, 1), [['On the HTML you give, running this emits exactly:'], ["Edit : if, as per the OP's latest comment, there are multiple such td tags, one per author:"]], [[' ####I want whatever is located here ###\n']], ['Python web scraping involving HTML tags with attributes'], 3], [(1391657, 2), [["Edit : if, as per the OP's latest comment, there are multiple such td tags, one per author:"], ['...i.e., not much harder at all!-)']], [[" thetds = soup.findAll('td', attrs={'class': 'author'})\nfor thetd in thetds:\n    print thetd.string\n"]], ['Python web scraping involving HTML tags with attributes'], 3], [(1392413, 0), [['This grabs subdirectories:'], ['And a oneliner for fun using  os.listdir  ( Does not include sub-directories ):']], [[" import os\ndef get_size(start_path = '.'):\n    total_size = 0\n    for dirpath, dirnames, filenames in os.walk(start_path):\n        for f in filenames:\n            fp = os.path.join(dirpath, f)\n            total_size += os.path.getsize(fp)\n    return total_size\n\nprint get_size()\n"]], ['Calculating a directory size using Python?'], 2], [(1392413, 1), [['And a oneliner for fun using  os.listdir  ( Does not include sub-directories ):'], ['Reference:']], [[" import os\nsum(os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f))\n"]], ['Calculating a directory size using Python?'], 2], [(1393010, 0), [['Code:  You may need to handle other iterable types though:'], ['Bug? \nIn your code instead of:']], [[" def flatten(obj):\n    if obj is None:\n        return None\n    elif hasattr(obj, '__dict__') and obj.__dict__:\n        return dict([(k, flatten(v)) for (k, v) in obj.__dict__.items()])\n    elif isinstance(obj, (dict,)):\n        return dict([(k, flatten(v)) for (k, v) in obj.items()])\n    elif isinstance(obj, (list,)):\n        return [flatten(x) for x in obj]\n    elif isinstance(obj, (tuple,)):\n        return tuple([flatten(x) for x in obj])\n    else:\n        return obj\n"]], ['Pythonic way to "flatten" object hierarchy to nested dicts?'], 3], [(1393010, 1), [['Bug? \nIn your code instead of:'], ['please do:']], [[' class spam(object):\n    eggs = []\n\nx = spam()\nx.eggs.add(...)\n']], ['Pythonic way to "flatten" object hierarchy to nested dicts?'], 3], [(1393010, 2), [['please do:'], ['If you do not, then all instances of  spam  will share the same  eggs  list.']], [[' class spam(object):\n    eggs = None #// if you need this line at all though\n\nx = spam()\nx.eggs = []\nx.eggs.add(...)\n']], ['Pythonic way to "flatten" object hierarchy to nested dicts?'], 3], [(1393324, 0), [['Actually the simplest way is :'], ['You don\'t even need "readlines", as Will suggested. You could even shorten it to ']], [[" import urllib2  # the lib that handles the url stuff\n\ndata = urllib2.urlopen(target_url) # it's a file like object and works just like a file\nfor line in data: # files are iterable\n    print line\n"]], ['In Python, given a URL to a text file, what is the simplest way to read the contents of the text file?'], 3], [(1393324, 1), [['You don\'t even need "readlines", as Will suggested. You could even shorten it to '], ["However, this is the simplest way but not the safe way because most of the time with network programming, you don't know if the amount of data to expect will be respected. So you'd generally better read a fixed and reasonable amount of data, something you know to be enough for the data you expect but will prevent your script from been flooded :"]], [[' import urllib2\n\nfor line in urllib2.urlopen(target_url):\n    print line\n']], ['In Python, given a URL to a text file, what is the simplest way to read the contents of the text file?'], 3], [(1393324, 2), [["However, this is the simplest way but not the safe way because most of the time with network programming, you don't know if the amount of data to expect will be respected. So you'd generally better read a fixed and reasonable amount of data, something you know to be enough for the data you expect but will prevent your script from been flooded :"], ['Edit 09/2016: In python 3 and up use  urllib.request  instead of urllib2']], [[' import urllib2\n\ndata = urllib2.urlopen("http://www.google.com").read(20000) # read only 20 000 chars\ndata = data.split("\\n") # then split it into lines\n\nfor line in data:\n    print line\n']], ['In Python, given a URL to a text file, what is the simplest way to read the contents of the text file?'], 3], [(1394721, 0), [['To download:'], ['To verify can use  PIL']], [[' import urllib2\nimg = urllib2.urlopen("http://example.com/image.jpg").read()\n']], ['How do I copy a remote image in python?'], 3], [(1394721, 1), [['To verify can use  PIL'], ['If you just want to verify this is an image even if the image data is not valid:  You can use  imghdr']], [[' import StringIO\nfrom PIL import Image\ntry:\n    im = Image.open(StringIO.StringIO(img))\n    im.verify()\nexcept Exception, e:\n    # The image is not valid\n']], ['How do I copy a remote image in python?'], 3], [(1394721, 2), [['If you just want to verify this is an image even if the image data is not valid:  You can use  imghdr'], ['The method checks the headers and determines the image type. It will return None if the image was not identifiable.']], [[" import imghdr\nimghdr.what('ignore', img)\n"]], ['How do I copy a remote image in python?'], 3], [(1395593, 0), [['"code.py"  shows how  pkg_resources  is used to refer to the resource objects:'], ['If you run it, you get:']], [[" from pkg_resources import resource_string, resource_listdir\n\n# Itemize data files under proj/resources/images:\nprint resource_listdir('proj.resources.images', '')\n# Get the data file bytes:\nprint resource_string('proj.resources.images', 'pic2.png').encode('base64')\n"]], ['Managing resources in a Python project'], 2], [(1395593, 1), [['If you run it, you get:'], ['Caveat: \nTo test things "locally", that is w/o installing the package first, you\'ll have to invoke your test scripts from directory that has  setup.py . If you\'re in the same directory as  code.py , Python won\'t know about  proj  package. So things like  proj.resources  won\'t resolve.']], [[" #!/usr/bin/env python\n\nfrom setuptools import setup, find_packages\n\nsetup(name='proj',\n      packages=find_packages(),\n      package_data={'': ['*.png']})\n"]], ['Managing resources in a Python project'], 2], [(1396646, 0), [["This isn't an answer, but it might lead you in the right direction.  Try turning on Mechanize's extensive debugging facilities, using some combination of the statements below:"], ["I should note that I'm not doing much (if anything) different in my application than what you showed in your question.  I create a browser object the same way, then pass it to this login function:"]], [[' browser.set_debug_redirects(True)\nbrowser.set_debug_responses(True)\nbrowser.set_debug_http(True)\n']], ['python and mechanize.open()'], 2], [(1396646, 1), [["I should note that I'm not doing much (if anything) different in my application than what you showed in your question.  I create a browser object the same way, then pass it to this login function:"], ['I can then open authentication-required pages with browser.open(url) and all of the cookie handling is handled transparently and automatically for me.']], [[' def login(browser):\n    browser.open(config.login_url)\n    browser.select_form(nr=0)\n    browser[config.username_field] = config.username\n    browser[config.password_field] = config.password\n    browser.submit()\n    return browser\n']], ['python and mechanize.open()'], 2], [(1396820, 0), [['I don\'t think there\'s a general, cross-platform way to "get the width of the terminal" --  most definitely NOT  "look at the COLUMNS environment variable" (see my comment on the question).  On Linux and Mac OS X (and I expect all modern Unix versions),'], ["So, taking somewhat-arbitrary guesses for all the specs that you don't express, one approach might be something like...:"]], [[" curses.wrapper(lambda _: curses.tigetnum('cols'))\n"]], ['apt like column output - python library'], 2], [(1396820, 1), [["So, taking somewhat-arbitrary guesses for all the specs that you don't express, one approach might be something like...:"], ['-10000']], [[" import sys\n\ndef colprint(totwidth, table):\n  numcols = max(len(row) for row in table)\n  # ensure all rows have >= numcols columns, maybe empty\n  padded = [row+numcols*('',) for row in table]\n  # compute col widths, including separating space (except for last one)\n  widths = [ 1 + max(len(x) for x in column) for column in zip(*padded)]\n  widths[-1] -= 1\n  # drop or truncate columns from the right in order to fit\n  while sum(widths) > totwidth:\n    mustlose = sum(widths) - totwidth\n    if widths[-1] <= mustlose:\n      del widths[-1]\n    else:\n      widths[-1] -= mustlose\n      break\n  # and finally, the output phase!\n  for row in padded:\n    for w, i in zip(widths, row):\n      sys.stdout.write('%*s' % (-w, i[:w]))\n    sys.stdout.write('\\n')\n"]], ['apt like column output - python library'], 2], [(1396985, 0), [['Do you definitely need it to be a queryset? If you only need it to be an iterable, a simple expression for your purposes is:'], ["I'm not sure if a list comprehension counts as irritating iterating, but to me this is a perfectly intuitive, pythonic approach. Of course if you need it to be a queryset, you're going to do something messier with two queries, eg:"]], [[' profiles = [r.profile for r in thingie.relation_set.all()]\n']], ['How Do I Select all Objects via a Relationship Model'], 2], [(1396985, 1), [["I'm not sure if a list comprehension counts as irritating iterating, but to me this is a perfectly intuitive, pythonic approach. Of course if you need it to be a queryset, you're going to do something messier with two queries, eg:"], ['See the " in " documentation for more. I prefer the first approach, if you don\'t need a queryset. Oh and if you only want distinct profiles you can just take  set(profiles)  in the first approach or use the  distinct()  queryset method in the second approach.']], [[" relation_values = thingie.relation_set.all().values_list('pk', flat=True)\nprofiles = Profile.objects.filter(relation__in=relation_values)\n"]], ['How Do I Select all Objects via a Relationship Model'], 2], [(1397537, 0), [['The Problem'], ['Use the  InheritanceCastModel  mixin in the answer linked above as a base class for Entity. You can then cast from Entity instances to the actual derived class instances. This is particularly handy when you want to use querysets on your parent class (Entity) but access the derived class instances. ']], [[' for entity in Entity.objects.all()\n  print unicode(entity) # Calls the Entity class unicode, which is not what you want.\n']], ['Polymorphism in Django'], 2], [(1397537, 1), [['Use the  InheritanceCastModel  mixin in the answer linked above as a base class for Entity. You can then cast from Entity instances to the actual derived class instances. This is particularly handy when you want to use querysets on your parent class (Entity) but access the derived class instances. '], ['-10000']], [[' class Entity(InheritanceCastModel):\n  # your model definition. You can get rid of the entity_type_list and type, as the\n  # real_type provided by InheritanceCastModel provides this info\n\nclass Athlete(Entity):\n  # unchanged\n\nclass Team(Entity):\n  # unchanged\n\nfor entity in Entity.objects.all():\n  actual_entity = entity.cast()\n  print unicode(actual_entity) # actual entity is a a Team or Athlete\n']], ['Polymorphism in Django'], 2], [(1398022, 0), [['-10000'], ['gives you all attributes of the object.\nYou need to filter out the members from methods etc yourself:']], [[' dir(obj)\n']], ['looping over all member variables of a class in python'], 3], [(1398022, 1), [['gives you all attributes of the object.\nYou need to filter out the members from methods etc yourself:'], ['Will give you:']], [[' class Example(object):\n    bool143 = True\n    bool2 = True\n    blah = False\n    foo = True\n    foobar2000 = False\n\nexample = Example()\nmembers = [attr for attr in dir(example) if not callable(getattr(example, attr)) and not attr.startswith("__")]\nprint members   \n']], ['looping over all member variables of a class in python'], 3], [(1398022, 2), [['Will give you:'], ['-10000']], [[" ['blah', 'bool143', 'bool2', 'foo', 'foobar2000']\n"]], ['looping over all member variables of a class in python'], 3], [(1400179, 0), [['how about having a look at the  source of wxHtmlWindow  for inspiration? for example at  wxHtmlWindow::LoadPage() : it'], ['this saved scroll position is used in  wxHtmlWindow::HistoryBack() :']], [[' // store[s the current] scroll position into history item:\nint x, y;\nGetViewStart(&x, &y);\n(*m_History)[m_HistoryPos].SetPos(y);\n']], ['How do I scroll a wxPython wx.html.HtmlWindow back down to where it was when the user clicked a link?'], 2], [(1400179, 1), [['this saved scroll position is used in  wxHtmlWindow::HistoryBack() :'], ['to go back to the saved position.']], [[' Scroll(0, (*m_History)[m_HistoryPos].GetPos());\nRefresh();\n']], ['How do I scroll a wxPython wx.html.HtmlWindow back down to where it was when the user clicked a link?'], 2], [(1400537, 0), [['Well, first we define the classes'], ["Now let's make a test:"]], [[" from sqlalchemy import Column, Integer, String, Table, create_engine\nfrom sqlalchemy import orm, MetaData, Column, ForeignKey\nfrom sqlalchemy.orm import relation, mapper, sessionmaker\nfrom sqlalchemy.orm.collections import column_mapped_collection\nfrom sqlalchemy.ext.associationproxy import association_proxy\nfrom sqlalchemy.ext.declarative import declarative_base\n\nengine = create_engine('sqlite:///:memory:', echo=True)\nBase = declarative_base(bind=engine)\n\nclass Note(Base):\n    __tablename__ = 'notes'\n\n    id_item = Column(Integer, ForeignKey('items.id'), primary_key=True)\n    name = Column(String(20), primary_key=True)\n    value = Column(String(100))\n\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value        \n\nclass Item(Base):\n    __tablename__ = 'items'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(20))\n    description = Column(String(100))\n    _notesdict = relation(Note, \n                          collection_class=column_mapped_collection(Note.name))\n    notes = association_proxy('_notesdict', 'value', creator=Note)\n\n    def __init__(self, name, description=''):\n        self.name = name\n        self.description = description\n\nBase.metadata.create_all()\n"]], ['Dictionary of tags in declarative SQLAlchemy?'], 5], [(1400537, 1), [["Now let's make a test:"], ['I get:']], [[" Session = sessionmaker(bind=engine)\ns = Session()\n\ni = Item('ball', 'A round full ball')\ni.notes['color'] = 'orange'\ni.notes['size'] = 'big'\ni.notes['data'] = 'none'\n\ns.add(i)\ns.commit()\nprint i.notes\n"]], ['Dictionary of tags in declarative SQLAlchemy?'], 5], [(1400537, 2), [['I get:'], ["Now let's check the notes table..."]], [[" {u'color': u'orange', u'data': u'none', u'size': u'big'}\n"]], ['Dictionary of tags in declarative SQLAlchemy?'], 5], [(1400537, 3), [["Now let's check the notes table..."], ['I get:']], [[' for note in s.query(Note):\n    print note.id_item, note.name, note.value\n']], ['Dictionary of tags in declarative SQLAlchemy?'], 5], [(1400537, 4), [['I get:'], ['It works!! :D']], [[' 1 color orange\n1 data none\n1 size big\n']], ['Dictionary of tags in declarative SQLAlchemy?'], 5], [(1403084, 0), [["First, you should use the SQLAlchemy SQL builder for the inserts to give SQLAlcehemy more insight into what you're doing."], ["To insert tag associations to your schema you need to fist look up your tag identifiers and create any that don't exist:"]], [["  result = conn.execute(RSSEntries.insert(), {'feed_id': id, 'short_url': tinyurl,\n        'content': content, 'hashtags': hashtags, 'date': date})\n entry_id = result.last_insert_ids()[0]\n"]], ['Setting up/Inserting into Many-to-Many Database with Python, SQLALchemy, Sqlite'], 3], [(1403084, 1), [["To insert tag associations to your schema you need to fist look up your tag identifiers and create any that don't exist:"], ["Then just insert the associated id's into the  feedtag_table . You can use the executemany support by passing a list of dicts to the execute method."]], [[" tags = tag_table\ntag_id_query = select([tags.c.tagname, tags.c.id], tags.c.tagname.in_(hashtags))\ntag_ids = dict(conn.execute(tag_id_query).fetchall())\nfor tag in hashtags:\n    if tag not in tag_ids:\n        result = conn.execute(tags.insert(), {'tagname': tag})\n        tag_ids[tag] = result.last_inserted_ids()[0]\n"]], ['Setting up/Inserting into Many-to-Many Database with Python, SQLALchemy, Sqlite'], 3], [(1403084, 2), [["Then just insert the associated id's into the  feedtag_table . You can use the executemany support by passing a list of dicts to the execute method."], ['-10000']], [[" conn.execute(feedtag_table.insert(),\n    [{'feedid': entry_id, 'tagid': tag_ids[tag]} for tag in hashtags])\n"]], ['Setting up/Inserting into Many-to-Many Database with Python, SQLALchemy, Sqlite'], 3], [(1403674, 0), [['-10000'], ['EDIT: just for fun, a little timing comparison (ignoring the boundary condition):']], [[' >>> l = range(165)\n>>> l[0::10]\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\n']], ['Pythonic way to return list of every nth item in a larger list'], 2], [(1403674, 1), [['EDIT: just for fun, a little timing comparison (ignoring the boundary condition):'], ['-10000']], [[' $ python -m timeit -s "l = range(1000)" "l1 = [x for x in l if x % 10 == 0]"\n1000 loops, best of 3: 525 usec per loop\n$ python -m timeit -s "l = range(1000)" "l1 = l[0::10]"\n100000 loops, best of 3: 4.02 usec per loop\n']], ['Pythonic way to return list of every nth item in a larger list'], 2], [(1405602, 0), [["Use PIL's  resize  method manually:"], ['Followed by the save method']], [[' image = image.resize((x, y), Image.ANTIALIAS)  # LANCZOS as of Pillow 2.7\n']], ['How to adjust the quality of a resized image in Python Imaging Library?'], 2], [(1405602, 1), [['Followed by the save method'], ['Take a look at the source for  models.py  from Photologue to see how they do it.']], [[" quality_val = 90\nimage.save(filename, 'JPEG', quality=quality_val)\n"]], ['How to adjust the quality of a resized image in Python Imaging Library?'], 2], [(1405913, 0), [['UPDATED:\nOne way is to look at  sys.maxsize  as documented  here :'], ['sys.maxsize  was introduced in Python 2.6.  If you need a test for older systems, this slightly more complicated test should work on all Python 2 and 3 releases:']], [[' $ python-32 -c \'import sys;print("%x" % sys.maxsize, sys.maxsize > 2**32)\'\n(\'7fffffff\', False)\n$ python-64 -c \'import sys;print("%x" % sys.maxsize, sys.maxsize > 2**32)\'\n(\'7fffffffffffffff\', True)\n']], ['How do I determine if my python shell is executing in 32bit or 64bit mode on OS X?'], 3], [(1405913, 1), [['sys.maxsize  was introduced in Python 2.6.  If you need a test for older systems, this slightly more complicated test should work on all Python 2 and 3 releases:'], ['BTW, you might be tempted to use  platform.architecture()  for this.  Unfortunately, its results are not always reliable,  particularly in the case of OS X universal binaries .']], [[' $ python-32 -c \'import struct;print( 8 * struct.calcsize("P"))\'\n32\n$ python-64 -c \'import struct;print( 8 * struct.calcsize("P"))\'\n64\n']], ['How do I determine if my python shell is executing in 32bit or 64bit mode on OS X?'], 3], [(1405913, 2), [['BTW, you might be tempted to use  platform.architecture()  for this.  Unfortunately, its results are not always reliable,  particularly in the case of OS X universal binaries .'], ['-10000']], [[" $ arch -x86_64 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize > 2**32'\n64bit True\n$ arch -i386 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize > 2**32'\n64bit False\n"]], ['How do I determine if my python shell is executing in 32bit or 64bit mode on OS X?'], 3], [(1406145, 0), [['To answer your specific question about how to hide it, use the  withdraw  method of the root window:'], ['If you want to make the window visible again, call the  deiconify  (or wm_deiconify) method.']], [[' import Tkinter as tk\nroot = tk.Tk()\nroot.withdraw()\n']], ['How do I get rid of Python Tkinter root window?'], 3], [(1406145, 1), [['If you want to make the window visible again, call the  deiconify  (or wm_deiconify) method.'], ['Once you are done with the dialog, you can destroy the root window along with all other tkinter widgets with the  destroy  method:']], [[' root.deiconify()\n']], ['How do I get rid of Python Tkinter root window?'], 3], [(1406145, 2), [['Once you are done with the dialog, you can destroy the root window along with all other tkinter widgets with the  destroy  method:'], ['-10000']], [[' root.destroy()\n']], ['How do I get rid of Python Tkinter root window?'], 3], [(1407021, 0), [['Yes, you can specify a post install script, all you need is to declare in the bdist_rpm in the options arg the file you want to use:'], ['In the post_uninstall file, put he code you need to remove the link, somethink like:']], [[" setup(\n...\noptions = {'bdist_rpm':{'post_install' : 'post_install',\n                        'post_uninstall' : 'post_uninstall'}},\n...)\n"]], ['distutils setup.py and %post %postun'], 2], [(1407021, 1), [['In the post_uninstall file, put he code you need to remove the link, somethink like:'], ['-10000']], [[' rm -f /var/lib/mylink\n']], ['distutils setup.py and %post %postun'], 2], [(1407474, 0), [['I resorted to scanning the logging.handlers module and was unable to see any way to specify a different file permissions mode. So, I have a solution now based on extending the RotatingFileHandler as a custom handler.  It was fairly painless, once I found some nice references to creating one.  The code for the custom handler is below.'], ['I also discovered that to reference the custom handler from a logging config file, I had to bind my module to the logging namespace.  Simple to do, but annoying.']], [[' class GroupWriteRotatingFileHandler(handlers.RotatingFileHandler):\n\n    def doRollover(self):\n        """\n        Override base class method to make the new log file group writable.\n        """\n        # Rotate the file first.\n        handlers.RotatingFileHandler.doRollover(self)\n\n        # Add group write to the current permissions.\n        currMode = os.stat(self.baseFilename).st_mode\n        os.chmod(self.baseFilename, currMode | stat.S_IWGRP)\n']], ['Does python logging.handlers.RotatingFileHandler allow creation of a group writable log file?'], 2], [(1407474, 1), [['I also discovered that to reference the custom handler from a logging config file, I had to bind my module to the logging namespace.  Simple to do, but annoying.'], ['References I found useful:\n binding custom handlers  and\n creating custom handlers']], [[' from mynamespace.logging import custom_handlers\nlogging.custom_handlers = custom_handlers\n']], ['Does python logging.handlers.RotatingFileHandler allow creation of a group writable log file?'], 2], [(1408253, 0), [["Beyond that, it's best to keep your decorators narrowly focused and well designed.  Don't use  *args  or  **kw  if your decorator expects specific arguments.  And  do  fill in what arguments you expect, so instead of:"], ['... use ...']], [[' def keep_none(func):\n    def _exec(*args, **kw):\n        return None if args[0] is None else func(*args, **kw)\n\n    return _exec\n']], ['Nice Python Decorators'], 2], [(1408253, 1), [['... use ...'], ['-10000']], [[' def keep_none(func):\n    """Wraps a function which expects a value as the first argument, and\n    ensures the function won\'t get called with *None*.  If it is, this \n    will return *None*.\n\n    >>> def f(x):\n    ...     return x + 5\n    >>> f(1)\n    6\n    >>> f(None) is None\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for +: \'NoneType\' and \'int\'\n    >>> f = keep_none(f)\n    >>> f(1)\n    6\n    >>> f(None) is None\n    True"""\n\n    @wraps(func)\n    def _exec(value, *args, **kw):\n        return None if value is None else func(value, *args, **kw)\n\n    return _exec\n']], ['Nice Python Decorators'], 2], [(1408678, 0), [['Just set stdout to be line buffered at the beginning of your C program (before performing any output), like this:'], ['or']], [[' #include <stdio.h>\nsetvbuf(stdout, NULL, _IOLBF, 0);\n']], ["Getting another program's output as input on the fly"], 2], [(1408678, 1), [['or'], ['Either one will work on Linux, but  setvbuf  is part of the C standard so it will work on more systems.']], [[' #include <stdio.h>\nsetlinebuf(stdout);\n']], ["Getting another program's output as input on the fly"], 2], [(1408940, 0), [['Your form'], ['Javascript code to add to your template']], [[" TO_HIDE_ATTRS = {'class': 'hidden'}\nclass GalleryAdminForm(forms.ModelForm):\n    auto_id=False\n    order = forms.CharField(widget=forms.TextInput(attrs=TO_HIDE_ATTRS))\n"]], ['How do I hide the field label for a HiddenInput widget in Django Admin?'], 5], [(1408940, 1), [['Javascript code to add to your template'], ["That works if you're rendering your form as a table. If you want to make it work with any kind of form rendering you can do as follows:"]], [[" $(document).ready(function(){\n    $('tr:has(.hidden)').hide();\n});\n"]], ['How do I hide the field label for a HiddenInput widget in Django Admin?'], 5], [(1408940, 2), [["That works if you're rendering your form as a table. If you want to make it work with any kind of form rendering you can do as follows:"], ['If you render your form like this:']], [[" $(document).ready(function(){\n    $('{{ form_field_container }}:has(.hidden)').hide();\n});\n"]], ['How do I hide the field label for a HiddenInput widget in Django Admin?'], 5], [(1408940, 3), [['If you render your form like this:'], ['Your context must include:']], [['     <form>\n        <span>{{ field.label_tag }} {{ field }}</span>\n    </form>\n']], ['How do I hide the field label for a HiddenInput widget in Django Admin?'], 5], [(1408940, 4), [['Your context must include:'], ['You get the idea...']], [[" 'form_field_container': 'span'\n"]], ['How do I hide the field label for a HiddenInput widget in Django Admin?'], 5], [(1411867, 0), [['-10000'], ["Works for me. You do need the second print though, as you need a double-newline to end the HTTP response headers. Otherwise your web server may complain you aren't sending it a complete set of headers."]], [[" print 'Status: 403 Forbidden'\nprint\n"]], ['Python CGI returning an http status code, such as 403?'], 2], [(1411867, 1), [["Works for me. You do need the second print though, as you need a double-newline to end the HTTP response headers. Otherwise your web server may complain you aren't sending it a complete set of headers."], ["may be technically more correct, according to RFC (assuming that your CGI script isn't running in text mode on Windows). However both line endings seem to work everywhere."]], [[" sys.stdout('Status: 403 Forbidden\\r\\n\\r\\n')\n"]], ['Python CGI returning an http status code, such as 403?'], 2], [(1412210, 0), [['Use 3-arguments  type :'], ['Edit : in the general case if someclass has a custom metaclass you may need to extract and use it (with a 1-argument  type ) in lieu of  type  itself, to preserve it (this may be the case for your Django and App Engine models):']], [[" def makeSomeNicelyDecoratedSubclass(someclass):\n  return type('MyNiceName', (someclass,), {'new_attribute':'something'})\n"]], ['Python decorate a class to change parent object type'], 2], [(1412210, 1), [['Edit : in the general case if someclass has a custom metaclass you may need to extract and use it (with a 1-argument  type ) in lieu of  type  itself, to preserve it (this may be the case for your Django and App Engine models):'], ['This also works where the simpler version above does (since in simple cases w/no custom metaclasses  type(someclass) is type ).']], [[" def makeSomeNicelyDecoratedSubclass(someclass):\n  mcl = type(someclass)\n  return mcl('MyNiceName', (someclass,), {'new_attribute':'something'})\n"]], ['Python decorate a class to change parent object type'], 2], [(1415812, 0), [["Decorators - they're usually generic, so you can't specify the arguments upfront:"], ["Places where you want to do magic with an unknown number of keyword arguments. Django's ORM does that, e.g.:"]], [[' def decorator(old):\n    def new(*args, **kwargs):\n        # ...\n        return old(*args, **kwargs)\n    return new\n']], ['Why use **kwargs in python? What are some real world advantages over using named arguments?'], 2], [(1415812, 1), [["Places where you want to do magic with an unknown number of keyword arguments. Django's ORM does that, e.g.:"], ['-10000']], [[" Model.objects.filter(foo__lt = 4, bar__iexact = 'bar')\n"]], ['Why use **kwargs in python? What are some real world advantages over using named arguments?'], 2], [(1416646, 0), [["I like Andrei Vajna's suggestion of  hasattr(var,'__iter__') .  Note these results from some typical Python types:"], ['Note that in Python 3 the  str  type  does  have the  __iter__  attribute and this does not work:']], [[' >>> hasattr("abc","__iter__")\nFalse\n>>> hasattr((0,),"__iter__")\nTrue\n>>> hasattr({},"__iter__")\nTrue\n>>> hasattr(set(),"__iter__")\nTrue\n']], ['pythonic way to convert variable to list'], 2], [(1416646, 1), [['Note that in Python 3 the  str  type  does  have the  __iter__  attribute and this does not work:'], ['-10000']], [[' >>> hasattr("abc", "__iter__")\nTrue\n']], ['pythonic way to convert variable to list'], 2], [(1416921, 0), [['Both of your questions should be solved using template filters. If it was Django, I would use something like this for your second question:'], ['For your first question (string replace), there may be no built-in filter you can use for that. You will need to write your own. Something like this;']], [[' {{ item.description|truncatewords:10 }}\n']], ['Google appengine string replacement in template file'], 3], [(1416921, 1), [['For your first question (string replace), there may be no built-in filter you can use for that. You will need to write your own. Something like this;'], ['Then, in your template, you can do this:']], [[" from google.appengine.ext.webapp.template import create_template_register\n\nregister = create_template_register()\n\n@register.filter\ndef replace_underscores(strng):\n    return strng.replace('_', ' ')\n"]], ['Google appengine string replacement in template file'], 3], [(1416921, 2), [['Then, in your template, you can do this:'], ['-10000']], [[' {{ item.code|replace_underscores }}\n']], ['Google appengine string replacement in template file'], 3], [(1417825, 0), [['I think what you want is to use an intermediary model to form the M2M relationship using the  through  keyword argument in the ManyToManyField. Sort of like the first answer above, but more "Django-y".'], ['When using the  through  keyword, the usual M2M manipulation methods are no longer available (this means  add ,  create ,  remove , or assignment with  =  operator). Instead you must create the intermediary model itself, like so:']], [[" class A(models.Model):\n    name = models.CharField(max_length=200)\n\nclass B(models.Model):\n    a = models.ManyToManyField(A, through='C')\n    ...\n\nclass C(models.Model):\n    a = models.ForeignKey(A)\n    b = models.ForeignKey(B)\n"]], ['adding the same object twice to a ManyToManyField'], 4], [(1417825, 1), [['When using the  through  keyword, the usual M2M manipulation methods are no longer available (this means  add ,  create ,  remove , or assignment with  =  operator). Instead you must create the intermediary model itself, like so:'], ['However, you will still be able to use the usual querying operations on the model containing the  ManyToManyField . In other words the following will still work:']], [['  >>> C.objects.create(a=a1, b=b)\n']], ['adding the same object twice to a ManyToManyField'], 4], [(1417825, 2), [['However, you will still be able to use the usual querying operations on the model containing the  ManyToManyField . In other words the following will still work:'], ['But maybe a better example is something like this:']], [['  >>> b.a.filter(a=a1)\n']], ['adding the same object twice to a ManyToManyField'], 4], [(1417825, 3), [['But maybe a better example is something like this:'], ['As long as the FK fields on the intermediary model are not designated as  unique  you will be able to create multiple instances with the same FKs. You can also attach additional information about the relationship by adding any other fields you like to  C . ']], [[" >>> B.objects.filter(a__name='Test')\n"]], ['adding the same object twice to a ManyToManyField'], 4], [(1418588, 0), [['For tiny containers, you can easily check the boundaries with  timeit -based benchmarks. For example:'], ['this shows that checking membership in empty lists or tuples is faster, by a whopping 20-30 nanoseconds, than checking membership in empty sets or dicts; when every nanosecond matters, this info might be relevant to you.  Moving up a bit...:']], [[" $ python -mtimeit -s'empty=()' '23 in empty'\n10000000 loops, best of 3: 0.0709 usec per loop\n$ python -mtimeit -s'empty=set()' '23 in empty'\n10000000 loops, best of 3: 0.101 usec per loop\n$ python -mtimeit -s'empty=[]' '23 in empty'\n10000000 loops, best of 3: 0.0716 usec per loop\n$ python -mtimeit -s'empty=dict()' '23 in empty'\n10000000 loops, best of 3: 0.0926 usec per loop\n"]], ['How expensive are Python dictionaries to handle?'], 3], [(1418588, 1), [['this shows that checking membership in empty lists or tuples is faster, by a whopping 20-30 nanoseconds, than checking membership in empty sets or dicts; when every nanosecond matters, this info might be relevant to you.  Moving up a bit...:'], ['you see that for 7-items containers (not including the one of interest) the balance of performance has shifted, and now dicts and sets have the advantages by HUNDREDS of nanoseconds.  When the item of interest IS present:']], [[" $ python -mtimeit -s'empty=range(7)' '23 in empty'\n1000000 loops, best of 3: 0.318 usec per loop\n$ python -mtimeit -s'empty=tuple(range(7))' '23 in empty'\n1000000 loops, best of 3: 0.311 usec per loop\n$ python -mtimeit -s'empty=set(range(7))' '23 in empty'\n10000000 loops, best of 3: 0.109 usec per loop\n$ python -mtimeit -s'empty=dict.fromkeys(range(7))' '23 in empty'\n10000000 loops, best of 3: 0.0933 usec per loop\n"]], ['How expensive are Python dictionaries to handle?'], 3], [(1418588, 2), [['you see that for 7-items containers (not including the one of interest) the balance of performance has shifted, and now dicts and sets have the advantages by HUNDREDS of nanoseconds.  When the item of interest IS present:'], ["dicts and sets don't gain much, but tuples and list do, even though dicts and set remain vastly faster."]], [[" $ python -mtimeit -s'empty=range(7)' '5 in empty'\n1000000 loops, best of 3: 0.246 usec per loop\n$ python -mtimeit -s'empty=tuple(range(7))' '5 in empty'\n1000000 loops, best of 3: 0.25 usec per loop\n$ python -mtimeit -s'empty=dict.fromkeys(range(7))' '5 in empty'\n10000000 loops, best of 3: 0.0921 usec per loop\n$ python -mtimeit -s'empty=set(range(7))' '5 in empty'\n10000000 loops, best of 3: 0.112 usec per loop\n"]], ['How expensive are Python dictionaries to handle?'], 3], [(1418912, 0), [['Hopefully this sample code demonstrates their equality:'], ["Note that this is only valid in Python 2.X, as SilentGhost pointed out in the comment.  To make this compatible with Python 3, you'll have to wrap the calls to map or filter in the  list  constructor, because map and filter have been updated to return iterators, not lists."]], [[' >>> # Python 2\n>>> [x**2 for x in range(10)] == map(lambda x: x**2, range(10))\nTrue\n>>> [2**i for i in range(13)] == map(lambda x: 2**x, range(13))\nTrue\n>>> S = [x**2 for x in range(10)]\n>>> [x for x in S if x % 2 == 0] == filter(lambda x: x % 2 == 0, S)\nTrue\n']], ['Are Python list comprehensions the same thing as map/grep in Perl?'], 2], [(1418912, 1), [["Note that this is only valid in Python 2.X, as SilentGhost pointed out in the comment.  To make this compatible with Python 3, you'll have to wrap the calls to map or filter in the  list  constructor, because map and filter have been updated to return iterators, not lists."], ['-10000']], [[' >>> # Python 3\n>>> [x**2 for x in range(10)] == list(map(lambda x: x**2, range(10)))\nTrue\n>>> [2**i for i in range(13)] == list(map(lambda x: 2**x, range(13)))\nTrue\n>>> S = [x**2 for x in range(10)]\n>>> [x for x in S if x % 2 == 0] == list(filter(lambda x: x % 2 == 0, S))\nTrue\n']], ['Are Python list comprehensions the same thing as map/grep in Perl?'], 2], [(1419442, 0), [['In other words, instead of:'], ['do:']], [[' class Link(models.Model):\n    blog_post = models.ForeignKey(BlogPost)\n']], ['How to Model a Foreign Key in a Reusable Django App?'], 3], [(1419442, 1), [['do:'], ['and in your settings.py:']], [[' from django.conf import setings\nclass Link(models.Model):\n    link_model = models.ForeignKey(settings.LINK_MODEL)\n']], ['How to Model a Foreign Key in a Reusable Django App?'], 3], [(1419442, 2), [['and in your settings.py:'], ['-10000']], [[" LINK_MODEL = 'someproject.somemodel'\n"]], ['How to Model a Foreign Key in a Reusable Django App?'], 3], [(1419470, 0), [['Here you go. Yes this is an ugly evil hack. Yes the object needs a __dict__ variable. But hey, its a neat little one liner!'], ['The constructor can take any type of arguments.']], [[' def __init__(self):\n    self.__dict__.update(locals())\n']], ['Python __init__ setattr on arguments?'], 2], [(1419470, 1), [['The constructor can take any type of arguments.'], ['It will also include self, but you can easily delete that or make your own update function that ignores self.']], [[" class test(object):\n    def __init__(self, a, b, foo, bar=5)...\n\na = test(1,2,3)\ndir(a)\n\n['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'a', 'b', 'foo', 'bar', 'self']\n"]], ['Python __init__ setattr on arguments?'], 2], [(1419629, 0), [['Bamboo essentially just runs a shell script, so this could just as easily be:'], ['as it typically is:']], [[' ./manage.py test\n']], ['Atlassian Bamboo with Django & Python - Possible?'], 3], [(1419629, 1), [['as it typically is:'], ['or:']], [[' mvn clean install\n']], ['Atlassian Bamboo with Django & Python - Possible?'], 3], [(1419629, 2), [['or:'], ['You may have to massage to output of the Django test runner into traditional JUnit XML output, so that Bamboo can give you pretty graphs on how many tests passed.  Look at  this post  about using xmlrunner.py to get Python working with  Hudson .  Also take a look at  NoseXUnit .']], [[' ant compile\n']], ['Atlassian Bamboo with Django & Python - Possible?'], 3], [(1419653, 0), [['Here is a first stab at a pyparsing solution ( easy-to-copy code at the pyparsing pastebin ).  Walk through the separate parts, according to the interleaved comments.'], ['Prints:']], [[' data = """\\\n. 55 MORILLO ZONE VIII,\nBARANGAY ZONE VIII\n(POB.), LUISIANA, LAGROS\nF\n01/16/1952\nALOMO, TERESITA CABALLES\n3412-00000-A1652TCA2\n12\n. 22 FABRICANTE ST. ZONE\nVIII LUISIANA LAGROS,\nBARANGAY ZONE VIII\n(POB.), LUISIANA, LAGROS\nM\n10/14/1967\nAMURAO, CALIXTO MANALO13\n"""\n\nfrom pyparsing import LineEnd, oneOf, Word, nums, Combine, restOfLine, \\\n    alphanums, Suppress, empty, originalTextFor, OneOrMore, alphas, \\\n    Group, ZeroOrMore\n\nNL = LineEnd().suppress()\ngender = oneOf("M F")\ninteger = Word(nums)\ndate = Combine(integer + \'/\' + integer + \'/\' + integer)\n\n# define the simple line definitions\ngender_line = gender("sex") + NL\ndob_line = date("DOB") + NL\nname_line = restOfLine("name") + NL\nid_line = Word(alphanums+"-")("ID") + NL\nrecnum_line = integer("recnum") + NL\n\n# define forms of address lines\nfirst_addr_line = Suppress(\'.\') + empty + restOfLine + NL\n# a subsequent address line is any line that is not a gender definition\nsubsq_addr_line = ~(gender_line) + restOfLine + NL\n\n# a line with a name and a recnum combined, if there is no ID\nname_recnum_line = originalTextFor(OneOrMore(Word(alphas+\',\')))("name") + \\\n    integer("recnum") + NL\n\n# defining the form of an overall record, either with or without an ID\nrecord = Group((first_addr_line + ZeroOrMore(subsq_addr_line))("address") + \n    gender_line + \n    dob_line +\n    ((name_line +\n        id_line + \n        recnum_line) |\n      name_recnum_line))\n\n# parse data\nrecords = OneOrMore(record).parseString(data)\n\n# output the desired results (note that address is actually a list of lines)\nfor rec in records:\n    if rec.ID:\n        print "%(name)s, %(ID)s, %(address)s, %(sex)s, %(DOB)s" % rec\n    else:\n        print "%(name)s, , %(address)s, %(sex)s, %(DOB)s" % rec\nprint\n\n# how to access the individual fields of the parsed record\nfor rec in records:\n    print rec.dump()\n    print rec.name, \'is\', rec.sex\n    print\n']], ['Parsing unstructured text in Python'], 2], [(1419653, 1), [['Prints:'], ['-10000']], [[" ALOMO, TERESITA CABALLES, 3412-00000-A1652TCA2, ['55 MORILLO ZONE VIII,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS'], F, 01/16/1952\nAMURAO, CALIXTO MANALO, , ['22 FABRICANTE ST. ZONE', 'VIII LUISIANA LAGROS,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS'], M, 10/14/1967\n\n['55 MORILLO ZONE VIII,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS', 'F', '01/16/1952', 'ALOMO, TERESITA CABALLES', '3412-00000-A1652TCA2', '12']\n- DOB: 01/16/1952\n- ID: 3412-00000-A1652TCA2\n- address: ['55 MORILLO ZONE VIII,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS']\n- name: ALOMO, TERESITA CABALLES\n- recnum: 12\n- sex: F\nALOMO, TERESITA CABALLES is F\n\n['22 FABRICANTE ST. ZONE', 'VIII LUISIANA LAGROS,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS', 'M', '10/14/1967', 'AMURAO, CALIXTO MANALO', '13']\n- DOB: 10/14/1967\n- address: ['22 FABRICANTE ST. ZONE', 'VIII LUISIANA LAGROS,', 'BARANGAY ZONE VIII', '(POB.), LUISIANA, LAGROS']\n- name: AMURAO, CALIXTO MANALO\n- recnum: 13\n- sex: M\nAMURAO, CALIXTO MANALO is M\n"]], ['Parsing unstructured text in Python'], 2], [(1420235, 0), [["If you have an array of integers and the max value isn't too large you can use numpy.bincount:"], ['Edit:\nIf you have float data, or data spread over a huge range you can convert it to integers by doing:']], [[' hist = dict((key,val) for key, val in enumerate(numpy.bincount(data)) if val)\n']], ['How can I generate a complete histogram with numpy?'], 2], [(1420235, 1), [['Edit:\nIf you have float data, or data spread over a huge range you can convert it to integers by doing:'], ['-10000']], [[' bins = numpy.unique(data)\nbincounts = numpy.bincount(numpy.digitize(data, bins) - 1)\nhist = dict(zip(bins, bincounts))\n']], ['How can I generate a complete histogram with numpy?'], 2], [(1420484, 0), [["Yes it's possible, but there are several problems.\nFirst whet you get method from class in obvious way you get a warper object but not the function itself."], ["Second I don't know if settings new method will always work:"]], [[" class X(object):\n    def m(self,x):\n        print x\n\nprint X.m           #>>> <unbound method X.m>\nprint vars(X)['m']  #>>> <function m at 0x9e17e64>\n\ndef increase_decorator(function):\n    return lambda self,x: function(self,x+1)\n"]], ['How can I add a decorator to an existing object method?'], 2], [(1420484, 1), [["Second I don't know if settings new method will always work:"], ['-10000']], [[" x = X()\nx.m(1)         #>>> 1\nX.m = increase_decorator( vars(X)['m'] )\nx.m(1)         #>>> 2\n"]], ['How can I add a decorator to an existing object method?'], 2], [(1420705, 0), [['If you care only about ordered relationship, you could do the following:'], ['if you need all combinations you should use  itertools.combinations :']], [[' >>> for i, u in enumerate(users[1:]):\n    print(users[i], u)           # or do something else\n\n\n1 2\n2 3\n3 4\n4 5\n']], ['How do I loop through relationships in a list only once?'], 2], [(1420705, 1), [['if you need all combinations you should use  itertools.combinations :'], ['-10000']], [[' >>> import itertools\n>>> for i in itertools.combinations(users, 2):\n    print(*i)\n\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n']], ['How do I loop through relationships in a list only once?'], 2], [(1421311, 0), [['Have you tried to feed your string to  communicate  as a string?'], ['It works like this:']], [[' Popen.communicate(input=my_input)\n']], ['How do I pass a string into subprocess.Popen in Python 2?'], 3], [(1421311, 1), [['It works like this:'], ['output:']], [[' p = subprocess.Popen(["head", "-n", "1"], stdin=subprocess.PIPE)\np.communicate(\'first\\nsecond\')\n']], ['How do I pass a string into subprocess.Popen in Python 2?'], 3], [(1421311, 2), [['output:'], ['I forgot to set stdin to subprocess.PIPE when I tried it at first.']], [[' first\n']], ['How do I pass a string into subprocess.Popen in Python 2?'], 3], [(1422270, 0), [["Here's an extremely simplified example of what we're doing to use the bulkloader to load JSON data instead of CSV data:"], ["In this example, I'm assuming a JSON format that looks something like"]], [[" class JSONLoader(bulkloader.Loader):\n    def generate_records(self, filename):\n        for item in json.load(open(filename)):\n            yield item['fields']\n"]], ['GAE load data into datastore without using CSV'], 2], [(1422270, 1), [["In this example, I'm assuming a JSON format that looks something like"], ['which is oversimplified.']], [[' [\n    {\n        "fields": [\n            "a", \n            "b", \n            "c", \n            "d"\n        ]\n    }, \n    {\n        "fields": [\n            "e", \n            "f", \n            "g", \n            "h"\n        ]\n    }\n]\n']], ['GAE load data into datastore without using CSV'], 2], [(1423251, 0), [['Assuming that this is the case, I can cause a very similar TCP sequence with this code for the server:'], ['and this for the client:']], [[" # server.py\nimport socket\nfrom time import sleep\n\ndef f(s):\n        r,a = s.accept()\n        print r.recv(100)\n\ns = socket.socket()\ns.bind(('localhost',1234))\ns.listen(1)\n\nf(s)\n# wait around a bit for the client to send it's second packet\nsleep(10)\n"]], ['talking between python tcp server and a c++ client'], 3], [(1423251, 1), [['and this for the client:'], ['Start your packet sniffer, then run server.py and then, client.py. Here is the outout of  tcpdump -A -i lo , which matches your observations:']], [[" # client.py\nimport socket\nfrom time import sleep\n\ns = socket.socket()\ns.connect(('localhost',1234))\n\ns.send('hello 1')\n# wait around for a while so that the socket in server.py goes out of scope\nsleep(5)\ns.send('hello 2')\n"]], ['talking between python tcp server and a c++ client'], 3], [(1423251, 2), [['Start your packet sniffer, then run server.py and then, client.py. Here is the outout of  tcpdump -A -i lo , which matches your observations:'], ['-10000']], [[' tcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on lo, link-type EN10MB (Ethernet), capture size 96 bytes\n12:42:37.683710 IP localhost:33491 > localhost.1234: S 1129726741:1129726741(0) win 32792 <mss 16396,sackOK,timestamp 640881101 0,nop,wscale 7>\nE..<R.@.@...............CVC.........I|....@....\n&3..........\n12:42:37.684049 IP localhost.1234 > localhost:33491: S 1128039653:1128039653(0) ack 1129726742 win 32768 <mss 16396,sackOK,timestamp 640881101 640881101,nop,wscale 7>\nE..<..@.@.<.............C<..CVC.....Ia....@....\n&3..&3......\n12:42:37.684087 IP localhost:33491 > localhost.1234: . ack 1 win 257 <nop,nop,timestamp 640881102 640881101>\nE..4R.@.@...............CVC.C<......1......\n&3..&3..\n12:42:37.684220 IP localhost:33491 > localhost.1234: P 1:8(7) ack 1 win 257 <nop,nop,timestamp 640881102 640881101>\nE..;R.@.@...............CVC.C<......./.....\n&3..&3..hello 1\n12:42:37.684271 IP localhost.1234 > localhost:33491: . ack 8 win 256 <nop,nop,timestamp 640881102 640881102>\nE..4.(@.@...............C<..CVC.....1}.....\n&3..&3..\n12:42:37.684755 IP localhost.1234 > localhost:33491: F 1:1(0) ack 8 win 256 <nop,nop,timestamp 640881103 640881102>\nE..4.)@.@...............C<..CVC.....1{.....\n&3..&3..\n12:42:37.685639 IP localhost:33491 > localhost.1234: . ack 2 win 257 <nop,nop,timestamp 640881104 640881103>\nE..4R.@.@...............CVC.C<......1x.....\n&3..&3..\n12:42:42.683367 IP localhost:33491 > localhost.1234: P 8:15(7) ack 2 win 257 <nop,nop,timestamp 640886103 640881103>\nE..;R.@.@...............CVC.C<......./.....\n&3%W&3..hello 2\n12:42:42.683401 IP localhost.1234 > localhost:33491: R 1128039655:1128039655(0) win 0\nE..(..@.@.<.............C<......P...b...\n\n9 packets captured\n27 packets received by filter\n0 packets dropped by kernel\n']], ['talking between python tcp server and a c++ client'], 3], [(1424005, 0), [['To simply repeat the same letter 10 times:'], ["And if you want something more complex, like  n  random lowercase letters, it's still only one line of code (not counting the import statements and defining  n ):"]], [[' string_val = "x" * 10  # gives you "xxxxxxxxxx"\n']], ['In Python, how do I create a string of n characters in one line of code?'], 2], [(1424005, 1), [["And if you want something more complex, like  n  random lowercase letters, it's still only one line of code (not counting the import statements and defining  n ):"], ['-10000']], [[' from random import choice\nfrom string import lowercase\nn = 10\n\nstring_val = "".join(choice(lowercase) for i in range(n))\n']], ['In Python, how do I create a string of n characters in one line of code?'], 2], [(1424398, 0), [["On OS X, if you launch  IDLE.app  (by double-clicking or using  open(1) , for example), the default directory is hardwired to  ~/Documents .  If you want to change the default permanently, you'll need to edit the file  idlemain.py  within the IDLE.app application bundle; depending on which Python(s) you have installed, it will likely be in one of:"], ['Edit the line:']], [[' /Applications/MacPython 2.x/IDLE.app/Contents/Resources\n/Applications/MacPython 2.x/IDLE.app/Contents/Resources\n/Applications/MacPorts/Python 2.x/IDLE.app/Contents/Resources\n/Applications/Python 2.x/IDLE.app/Contents/Resources\n/Applications/Python 3.x/IDLE.app/Contents/Resources\n']], ['Default save path for Python IDLE?'], 3], [(1424398, 1), [['Edit the line:'], ['On the other hand, if you start IDLE from the command line, for example, with:']], [[" os.chdir(os.path.expanduser('~/Documents'))\n"]], ['Default save path for Python IDLE?'], 3], [(1424398, 2), [['On the other hand, if you start IDLE from the command line, for example, with:'], ['IDLE will use that current directory as the default.']], [[' $ cd /some/directory    \n$ /usr/local/bin/idle\n']], ['Default save path for Python IDLE?'], 3], [(1425162, 0), [["A simpler and cleaner way is to just use a dictionary with sorted tuples as keys. The tuples correspond with your matrix index. Override  __getitem__  and  __setitem__  to access the dictionary by sorted tuples; here's an example class:"], ['And then use it like this:']], [[' class Matrix(dict):\n    def __getitem__(self, index):\n        return super(Matrix, self).__getitem__(tuple(sorted(index)))\n    def __setitem__(self, index, value):\n        return super(Matrix, self).__setitem__(tuple(sorted(index)), value)\n']], ['Symmetrically adressable matrix'], 2], [(1425162, 1), [['And then use it like this:'], ['-10000']], [[' >>> matrix = Matrix()\n>>> matrix[2,3] = 1066\n>>> print matrix\n{(2, 3): 1066}\n>>> matrix[2,3]\n1066\n>>> matrix[3,2]\n1066\n>>> matrix[1,1]\nTraceback (most recent call last):\n  File "<stdin>", line 1, in ?\n  File "z.py", line 3, in __getitem__\n    return super(Matrix, self).__getitem__(tuple(sorted(index)))\nKeyError: (1, 1)\n']], ['Symmetrically adressable matrix'], 2], [(1428780, 0), [['You can use a reluctant qualifier in your pattern (for more details, reference the  python documentation  on the  *? ,  +? , and  ??  operators):'], ['Or, exclude  <  from the possible matched characters:']], [[' <bla><blabla>87765.*?</blabla><bla>\n']], ['Is it possible to make re find the smallest match while using greedy characters'], 2], [(1428780, 1), [['Or, exclude  <  from the possible matched characters:'], ['only  if there are no children tags between  <blabla>  and  </blabla> .']], [[' <bla><blabla>87765[^<]*</blabla><bla>\n']], ['Is it possible to make re find the smallest match while using greedy characters'], 2], [(1428872, 0), [["I tried the tools  with the default settings  (it's important because you can pretty much choose your check rules) on the following script :"], ['Corrected script (with lazy doc strings and variable names) :']], [[" #!/usr/local/bin/python\n# by Daniel Rosengren modified by e-satis\n\nimport sys, time\nstdout = sys.stdout\n\nBAILOUT = 16\nMAX_ITERATIONS = 1000\n\nclass Iterator(object) :\n\n    def __init__(self):\n\n        print 'Rendering...'\n        for y in xrange(-39, 39): \n            stdout.write('\\n')\n            for x in xrange(-39, 39):\n                if self.mandelbrot(x/40.0, y/40.0) :\n                    stdout.write(' ')\n                else:\n                    stdout.write('*')\n\n\n    def mandelbrot(self, x, y):\n        cr = y - 0.5\n        ci = x\n        zi = 0.0\n        zr = 0.0\n\n        for i in xrange(MAX_ITERATIONS) :\n            temp = zr * zi\n            zr2 = zr * zr\n            zi2 = zi * zi\n            zr = zr2 - zi2 + cr\n            zi = temp + temp + ci\n\n            if zi2 + zr2 > BAILOUT:\n                return i\n\n        return 0\n\nt = time.time()\nIterator() \nprint '\\nPython Elapsed %.02f' % (time.time() - t)\n"]], ['PyLint, PyChecker or PyFlakes?'], 4], [(1428872, 1), [['Corrected script (with lazy doc strings and variable names) :'], ['pep8 :']], [[' #!/usr/local/bin/python\n# by Daniel Rosengren, modified by e-satis\n"""\nModule doctring\n"""\n\n\nimport time\nfrom sys import stdout\n\nBAILOUT = 16\nMAX_ITERATIONS = 1000\n\ndef mandelbrot(dim_1, dim_2):\n    """\n    function doc string\n    """\n    cr1 = dim_1 - 0.5\n    ci1 = dim_2\n    zi1 = 0.0\n    zr1 = 0.0\n\n    for i in xrange(MAX_ITERATIONS) :\n        temp = zr1 * zi1\n        zr2 = zr1 * zr1\n        zi2 = zi1 * zi1\n        zr1 = zr2 - zi2 + cr1\n        zi1 = temp + temp + ci1\n\n        if zi2 + zr2 > BAILOUT:\n            return i\n\n    return 0\n\ndef execute() :\n    """\n    func doc string\n    """\n    print \'Rendering...\'\n    for dim_1 in xrange(-39, 39): \n        stdout.write(\'\\n\')\n        for dim_2 in xrange(-39, 39):\n            if mandelbrot(dim_1/40.0, dim_2/40.0) :\n                stdout.write(\' \')\n            else:\n                stdout.write(\'*\')\n\n\nSTART_TIME = time.time()\nexecute()\nprint \'\\nPython Elapsed %.02f\' % (time.time() - START_TIME)\n']], ['PyLint, PyChecker or PyFlakes?'], 4], [(1428872, 2), [['pep8 :'], ['PyLint :']], [[" ./python_mandelbrot.py:4:11: E401 multiple imports on one line\n./python_mandelbrot.py:10:1: E302 expected 2 blank lines, found 1\n./python_mandelbrot.py:10:23: E203 whitespace before ':'\n./python_mandelbrot.py:15:80: E501 line too long (108 characters)\n./python_mandelbrot.py:23:1: W291 trailing whitespace\n./python_mandelbrot.py:41:5: E301 expected 1 blank line, found 3\n"]], ['PyLint, PyChecker or PyFlakes?'], 4], [(1428872, 3), [['PyLint :'], ['-10000']], [[' ************* Module python_mandelbrot\nC: 15: Line too long (108/80)\nC: 61: Line too long (85/80)\nC:  1: Missing docstring\nC:  5: Invalid name "stdout" (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)\nC: 10:Iterator: Missing docstring\nC: 15:Iterator.__init__: Invalid name "y" (should match [a-z_][a-z0-9_]{2,30}$)\nC: 17:Iterator.__init__: Invalid name "x" (should match [a-z_][a-z0-9_]{2,30}$)\n\n[...] and a very long report with useful stats like :\n\nDuplication\n-----------\n\n+-------------------------+------+---------+-----------+\n|                         |now   |previous |difference |\n+=========================+======+=========+===========+\n|nb duplicated lines      |0     |0        |=          |\n+-------------------------+------+---------+-----------+\n|percent duplicated lines |0.000 |0.000    |=          |\n+-------------------------+------+---------+-----------+\n']], ['PyLint, PyChecker or PyFlakes?'], 4], [(1429147, 0), [['The key is in  the docs :'], ["So what you need is clearly,  not   msg = MIMEText('€10') , but rather:"]], [[" class email.mime.text.MIMEText(_text, _subtype='plain', _charset='us-ascii')\n"]], ['Python 3 smtplib send with unicode characters'], 2], [(1429147, 1), [["So what you need is clearly,  not   msg = MIMEText('€10') , but rather:"], ['While not all that clearly documented,  sendmail  needs a byte-string, not a Unicode one (that\'s what the SMTP protocol specifies); look to what  msg.as_string()  looks like for each of the two ways of building it -- given the "no guessing or encoding", your way still has that euro character in there (and no way for sendmail to turn it into a bytestring), mine doesn\'t (and utf-8 is clearly specified throughout).']], [[" msg = MIMEText('€10'.encode('utf-8'), _charset='utf-8')\n"]], ['Python 3 smtplib send with unicode characters'], 2], [(1432760, 0), [['Example for a non-persistent data structure: The list (vector-list)'], ['Persistence example: Linked lists (Haskell)']], [[' list = [1, 2, 3]\n# List is [1, 2, 3]\n\nlist += [4]\n# Added an element at the end\n\nlist[0] = 42\n# We changed the first element to 42\n# List is [42, 2, 3, 4]\n']], ['Explaining persistent data structures in simple terms'], 2], [(1432760, 1), [['Persistence example: Linked lists (Haskell)'], ['-10000']], [[' list = [1, 2, 3]\n# List is [1, 2, 3]\n\nlist2 = 0 : list\n# List2 combines [0] and [1, 2, 3] to [0, 1, 2, 3]\n# List is still [1, 2, 3]\n\nlist3 = updateAt 0 42 list\n# List3 contains the elements of list2 with the first one set to 42\n# List and List2 still hold their original values\n']], ['Explaining persistent data structures in simple terms'], 2], [(1432924, 0), [['This will change your current working directory to so that opening relative paths will work:'], ["However, you asked how to change into whatever directory your Python script is located, even if you don't know what directory that will be when you're writing your script.  To do this, you can use the  os.path  functions:"]], [[' import os\nos.chdir("/home/udi/foo")\n']], ["python: Change the scripts working directory to the script's own directory"], 2], [(1432924, 1), [["However, you asked how to change into whatever directory your Python script is located, even if you don't know what directory that will be when you're writing your script.  To do this, you can use the  os.path  functions:"], ['This takes the filename of your script, converts it to an absolute path, then extracts the directory of that path, then changes into that directory.']], [[' import os\n\nabspath = os.path.abspath(__file__)\ndname = os.path.dirname(abspath)\nos.chdir(dname)\n']], ["python: Change the scripts working directory to the script's own directory"], 2], [(1435438, 0), [["I don't think there is a clean solution to this, since you want data from two different models. Depending on your data structure you might want to use select_related to avoid hitting the database for all the toppings. Going for your desired result, I would do:"], ['This would generate:']], [[" result = []\npizzas = Pizza.objects.select_related().filter(name='deluxe')\nfor pizza in pizzas:\n    for toppings in pizza.toppings.all():\n        result.append((pizza.pk, topping.name))\n"]], ["Retrieving values from 2 different tables with Django's QuerySet"], 2], [(1435438, 1), [['This would generate:'], ['Now there are different ways to setup the data, using lists, tuples and dictionaries, but I think you get the idea of how you could do it.']], [[' [\n    (1, topping_1),\n    (1, topping_2),\n    (2, topping_3),\n    (2, topping_4),\n]\n']], ["Retrieving values from 2 different tables with Django's QuerySet"], 2], [(1435535, 0), [['In general, the items in the legend are related with some kind of  plotted object . The  scatter  function/method treats all circles as a single object, see:'], ['The  Legend guide  recommends using  Proxy Artist  in similar cases. The  Color API  explains valid  fc  values.']], [[' print type(ax.scatter(...))\n']], ['Matplotlib Legend for Scatter with custom colours'], 3], [(1435535, 1), [['The  Legend guide  recommends using  Proxy Artist  in similar cases. The  Color API  explains valid  fc  values.'], ['To get the colors used previously in a plot, use the above example like:']], [[' p1 = Rectangle((0, 0), 1, 1, fc="b")\np2 = Rectangle((0, 0), 1, 1, fc="g")\np3 = Rectangle((0, 0), 1, 1, fc="r")\nlegend((p1, p2, p3), (\'proj1\',\'proj2\',\'proj3\'))\n']], ['Matplotlib Legend for Scatter with custom colours'], 3], [(1435535, 2), [['To get the colors used previously in a plot, use the above example like:'], ['This example will make a plot like:']], [[" pl1, = plot(x1, y1, '.', alpha=0.1, label='plot1')\npl2, = plot(x2, y2, '.', alpha=0.1, label='plot2')\np1 = Rectangle((0, 0), 1, 1, fc=pl1.get_color())\np2 = Rectangle((0, 0), 1, 1, fc=pl2.get_color())\nlegend((p1, p2), (pl1.get_label(), pl2.get_label()), loc='best')\n"]], ['Matplotlib Legend for Scatter with custom colours'], 3], [(1436552, 0), [['As expressed (without any word " distinct " to indicate lack of repetition), I\'d do:'], ['With  an additional condition that all the pins returned be unique:']], [[" import random\nimport string\n\ndef generate_pins(length, count):\n  return [''.join(random.choice(string.digits) for x in xrange(length))\n          for x in xrange(count)]\n"]], ['unique pin generator'], 2], [(1436552, 1), [['With  an additional condition that all the pins returned be unique:'], ['assuming that the specs require you to return a list.']], [[' def generate_pins(length, count, alphabet=string.digits):\n  alphabet = \'\'.join(set(alphabet))\n  if count > len(alphabet)**length:\n    raise ValueError("Can\'t generate more than %s > %s pins of length %d out of %r" %\n                      count, len(alphabet)**length, length, alphabet)\n  def onepin(length):\n    return \'\'.join(random.choice(alphabet) for x in xrange(length))\n  result = set(onepin(length) for x in xrange(count))\n  while len(result) < count:\n    result.add(onepin(length))\n  return list(result)\n']], ['unique pin generator'], 2], [(1437402, 0), [['To install with the Apple-supplied Python in 10.6:'], ['To use:']], [[' $ sudo /usr/bin/easy_install-2.6 ipython\n']], ['How to install iPython on Snow Leopard'], 2], [(1437402, 1), [['To use:'], ['-10000']], [[' $ ipython\n']], ['How to install iPython on Snow Leopard'], 2], [(1438924, 0), [['As quoted  here , the solution is in David Wheeler\'s famous saying, "All problems in computer science can be solved by another level of indirection". Consider e.g....:'], ['The output (just running this  indexer.py  as a check, then with  timeit , two ways):']], [[" import bisect\n\nlistofdicts = [\n  {'dt': '2009-%2.2d-%2.2dT12:00:00' % (m,d) }\n  for m in range(4,9) for d in range(1,30)\n  ]\n\nclass Indexer(object):\n  def __init__(self, lod, key):\n    self.lod = lod\n    self.key = key\n  def __len__(self):\n    return len(self.lod)\n  def __getitem__(self, idx):\n    return self.lod[idx][self.key]\n\n\nlookfor = listofdicts[len(listofdicts)//2]['dt']\n\ndef mid(res=listofdicts, target=lookfor):\n    keys = [r['dt'] for r in res]\n    return res[bisect.bisect_left(keys, target)]\n\ndef midi(res=listofdicts, target=lookfor):\n    wrap = Indexer(res, 'dt')\n    return res[bisect.bisect_left(wrap, target)]\n\nif __name__ == '__main__':\n  print '%d dicts on the list' % len(listofdicts)\n  print 'Looking for', lookfor\n  print mid(), midi()\nassert mid() == midi()\n"]], ['Finding closest match in collection of strings representing numbers'], 3], [(1438924, 1), [['The output (just running this  indexer.py  as a check, then with  timeit , two ways):'], ['So much for the main search loop. For the secondary task of converting two entries (the one just below and the one just above the target) and the target to a number of seconds, consider, again, a higher-reuse approach, namely:']], [[" $ python indexer.py \n145 dicts on the list\nLooking for 2009-06-15T12:00:00\n{'dt': '2009-06-15T12:00:00'} {'dt': '2009-06-15T12:00:00'}\n$ python -mtimeit -s'import indexer' 'indexer.mid()'\n10000 loops, best of 3: 27.2 usec per loop\n$ python -mtimeit -s'import indexer' 'indexer.midi()'\n100000 loops, best of 3: 9.43 usec per loop\n"]], ['Finding closest match in collection of strings representing numbers'], 3], [(1438924, 2), [['So much for the main search loop. For the secondary task of converting two entries (the one just below and the one just above the target) and the target to a number of seconds, consider, again, a higher-reuse approach, namely:'], ["Here, there is no performance advantage to the reuse approach (indeed, and on the contrary,  dttosecs  is faster) -- but then, you only need to perform three conversions per search, no matter how many entries are on your list of dicts, so it's not clear whether that performance issue is germane. Meanwhile, with  simpler  you only have to write, test and maintain one simple line of code, while  dttosecs  is a dozen lines; given this ratio, in most situations (i.e., excluding absolute bottlenecks), I would prefer  simpler . The important thing is to be aware of both approaches and of the tradeoffs between them so as to ensure the choice is made wisely."]], [[" import time\n\nadt = '2009-09-10T12:00:00'\n\ndef dttosecs(dt=adt):\n    # string to seconds since the beginning\n    date,tim = dt.split('T')\n    y,m,d = date.split('-')\n    h,mn,s = tim.split(':')\n    y = int(y)\n    m = int(m)\n    d = int(d)\n    h = int(h)\n    mn = int(mn)\n    s = min(59,int(float(s)+0.5)) # round to neatest second\n    s = int(s)\n    secs = time.mktime((y,m,d,h,mn,s,0,0,-1))\n    return secs\n\ndef simpler(dt=adt):\n  return time.mktime(time.strptime(dt, '%Y-%m-%dT%H:%M:%S'))\n\nif __name__ == '__main__':\n  print adt, dttosecs(), simpler()\nassert dttosecs() == simpler()\n"]], ['Finding closest match in collection of strings representing numbers'], 3], [(1440434, 0), [['For example you could have in a SP language:'], ["While on an OOP you'd have:"]], [[' #Pseudocode!!!\n\nfunction talk(dog):\n    if dog is aDog:\n        print "bark!"\n    raise "IS NOT A SUPPORTED ANIMAL!!!"\n\n>>var dog as aDog\n>>talk(dog)\n"bark!"\n>>var cat as aCat\n>>talk(cat)\nEXCEPTION: IS NOT A SUPPORTED ANIMAL!!!\n\n# Lets add the cat\nfunction talk(animal):\n    if animal is aDog:\n        print "bark!"\n    if animal is aCat:\n        print "miau!"\n    raise "IS NOT A SUPPORTED ANIMAL!!!"\n']], ['Class usage in Python'], 2], [(1440434, 1), [["While on an OOP you'd have:"], ["You can see that with SP, every animal that you add, you'd have to add another  if  to  talk , add another variable to store the name of the animal, touch potentially every function in the module, while on OOP, you can consider your class as independent to the rest. When there is a global change, you change the  Animal , when it's a narrow change, you just have to look at the class definition."]], [[' class Animal:\n     def __init__(self, name="skippy"):\n         self.name = name\n     def talk(self):\n         raise "MUTE ANIMAL"\n\nclass Dog(Animal):\n     def talk(self):\n         print "bark!"\n\nclass Cat(Animal):\n     def talk(self):\n         print "miau!"\n\n>>dog = new Dog()\n>>dog.talk()\n"bark!"\n>>cat = new Cat()\n>>cat.talk()\n"miau!"\n']], ['Class usage in Python'], 2], [(1445065, 0), [['The  len()  function is not a true generic function (at least in the sense of the packages mentioned above, and also in the sense, this term is used in languages like  Common Lisp ,  Dylan  or  Cecil ), as it is simply a convenient syntax for a call to specially named (but otherwise regular) method:'], ['Also note, that this is single-dispatch only, that is, the actual receiver ( s  in the code above) determines the method implementation called. And even a hypothetical']], [[' len(s) == s.__len__()\n']], ['What is the best-maintained generic functions implementation for Python?'], 4], [(1445065, 1), [['Also note, that this is single-dispatch only, that is, the actual receiver ( s  in the code above) determines the method implementation called. And even a hypothetical'], ['This is different from multiple-dispatch, where there is no dedicated receiver, and all arguments are used in order to find the actual method implementation to call. This is, what actually makes the whole thing worthwhile. If it were only some odd kind of syntactic sugar, nobody would bother with using it, IMHO.']], [[' def call_special(receiver, *args, **keys):\n    return receiver.__call_special__(*args, **keys)\n']], ['What is the best-maintained generic functions implementation for Python?'], 4], [(1445065, 2), [['This is different from multiple-dispatch, where there is no dedicated receiver, and all arguments are used in order to find the actual method implementation to call. This is, what actually makes the whole thing worthwhile. If it were only some odd kind of syntactic sugar, nobody would bother with using it, IMHO.'], ['In this example, a call like']], [[' from peak.rules import abstract, when\n\n@abstract\ndef serialize_object(object, target):\n    pass\n\n@when(serialize_object, (MyStuff, BinaryStream))\ndef serialize_object(object, target):\n    target.writeUInt32(object.identifier)\n    target.writeString(object.payload)\n\n@when(serialize_object, (MyStuff, XMLStream))\ndef serialize_object(object, target):\n    target.openElement("my-stuff")\n    target.writeAttribute("id", str(object.identifier))\n    target.writeText(object.payload)\n    target.closeElement()\n']], ['What is the best-maintained generic functions implementation for Python?'], 4], [(1445065, 3), [['In this example, a call like'], ['considers  both  arguments in order to decide, which method must actually be called.']], [[' serialize_object(MyStuff(10, "hello world"), XMLStream())\n']], ['What is the best-maintained generic functions implementation for Python?'], 4], [(1445989, 0), [['In the view:'], ['In the template:']], [[' from django.utils import simplejson\n\n\ndef view(request, …):\n    js_data = simplejson.dumps(my_dict)\n    …\n    render_template_to_response("my_template.html", {"my_data": js_data, …})\n']], ['Passing Python Data to JavaScript via Django'], 4], [(1445989, 1), [['In the template:'], ['In Django:']], [[' <script type="text/javascript">\n    data_from_django = {{ my_data }};\n    widget.init(data_from_django);\n</script>\n']], ['Passing Python Data to JavaScript via Django'], 4], [(1445989, 2), [['In Django:'], ["In JavaScript, assuming you've done something like  time_t = {{ time_t }}  with the results of the snippet above:"]], [[' time_t = time.mktime(my_date.timetuple())\n']], ['Passing Python Data to JavaScript via Django'], 4], [(1445989, 3), [["In JavaScript, assuming you've done something like  time_t = {{ time_t }}  with the results of the snippet above:"], ["Finally, pay attention to UTC - you'll want to have the Python and Django date functions exchange data in UTC to avoid embarrassing shifts from the user's local time."]], [[' my_date = new Date();\nmy_date.setTime(time_t*1000);\n']], ['Passing Python Data to JavaScript via Django'], 4], [(1446347, 0), [['When built with --enable-unicode=ucs4:'], ['When built with --enable-unicode=ucs2:']], [[' >>> import sys\n>>> print sys.maxunicode\n1114111\n']], ['How to find out if Python is compiled with UCS-2 or UCS-4?'], 2], [(1446347, 1), [['When built with --enable-unicode=ucs2:'], ['-10000']], [[' >>> import sys\n>>> print sys.maxunicode\n65535\n']], ['How to find out if Python is compiled with UCS-2 or UCS-4?'], 2], [(1448820, 0), [['This is a carryover from the C formatting markup:'], ["If you want left-justified text (for entries shorter than  max_title_width ), put a '-' before the '*'."]], [[' print "%*s, blah" % (max_title_width,column)\n']], ['variable length of %s with the % operator in python'], 5], [(1448820, 1), [["If you want left-justified text (for entries shorter than  max_title_width ), put a '-' before the '*'."], ['If the len field is shorter than the text string, the string just overflows:']], [[' >>> text = "abcdef"\n>>> print "<%*s>" % (len(text)+2,text)\n<  abcdef>\n>>> print "<%-*s>" % (len(text)+2,text)\n<abcdef  >\n>>>\n']], ['variable length of %s with the % operator in python'], 5], [(1448820, 2), [['If the len field is shorter than the text string, the string just overflows:'], ["If you want to clip at a maximum length, use the '.' precision field of the format placeholder:"]], [[' >>> print "<%*s>" % (len(text)-2,text)\n<abcdef>\n']], ['variable length of %s with the % operator in python'], 5], [(1448820, 3), [["If you want to clip at a maximum length, use the '.' precision field of the format placeholder:"], ['Put them all together this way:']], [[' >>> print "<%.*s>" % (len(text)-2,text)\n<abcd>\n']], ['variable length of %s with the % operator in python'], 5], [(1448820, 4), [['Put them all together this way:'], ['-10000']], [[" %\n- if left justified\n* or integer - min width (if '*', insert variable length in data tuple)\n.* or .integer - max width (if '*', insert variable length in data tuple)\n"]], ['variable length of %s with the % operator in python'], 5], [(1449494, 0), [['Install  setuptools :'], ['Install  pip :']], [[' curl https://bootstrap.pypa.io/ez_setup.py | python\n']], ['How do I install Python packages on Windows?'], 2], [(1449494, 1), [['Install  pip :'], ["Optionally, you can add the path to your environment so that you can use  pip  anywhere. It's somewhere like  C:\\Python33\\Scripts ."]], [[' curl https://bootstrap.pypa.io/get-pip.py | python\n']], ['How do I install Python packages on Windows?'], 2], [(1450874, 0), [['If you are thinking of a fixed color table, just map your delta values into the index range for that table. For example, you can construct a color table with color names recognized by your plot package:'], ['The range of possible  delta  values, from your example, is  0  to  delta.max . Mapping that to the length of the color tables, gives the  step :']], [[" >>> colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\n"]], ['Setting a colour scale in ipython'], 3], [(1450874, 1), [['The range of possible  delta  values, from your example, is  0  to  delta.max . Mapping that to the length of the color tables, gives the  step :'], ['And the computation required to get a color name matching a given  data  point is:']], [[' >>> step = delta.max / len(colors)\n']], ['Setting a colour scale in ipython'], 3], [(1450874, 2), [['And the computation required to get a color name matching a given  data  point is:'], ['This method works for any set of pre-selected colors, for example RGB values expressed as hex numbers.']], [[' >>> color = colors[math.trunc(data / step)]\n']], ['Setting a colour scale in ipython'], 3], [(1450897, 0), [['In Python 2.*, by far the fastest approach is the  .translate  method:'], ['Back to 2.*, the performance difference is impressive...:']], [[" >>> x='aaa12333bb445bb54b5b52'\n>>> import string\n>>> all=string.maketrans('','')\n>>> nodigs=all.translate(all, string.digits)\n>>> x.translate(all, nodigs)\n'1233344554552'\n>>> \n"]], ['Python: removing characters except digits from string'], 5], [(1450897, 1), [['Back to 2.*, the performance difference is impressive...:'], ['Speeding things up by 7-8 times is hardly peanuts, so the  translate  method is well worth knowing and using. The other popular non-RE approach...:']], [[' $ python -mtimeit -s\'import string; all=string.maketrans("", ""); nodig=all.translate(all, string.digits); x="aaa12333bb445bb54b5b52"\' \'x.translate(all, nodig)\'\n1000000 loops, best of 3: 1.04 usec per loop\n$ python -mtimeit -s\'import re;  x="aaa12333bb445bb54b5b52"\' \'re.sub(r"\\D", "", x)\'\n100000 loops, best of 3: 7.9 usec per loop\n']], ['Python: removing characters except digits from string'], 5], [(1450897, 2), [['Speeding things up by 7-8 times is hardly peanuts, so the  translate  method is well worth knowing and using. The other popular non-RE approach...:'], ['In Python 3, or for Unicode, you need to pass  .translate  a mapping (with ordinals, not characters directly, as keys) that returns  None  for what you want to delete. Here\'s a convenient way to express this for deletion of "everything but" a few characters:']], [[' $ python -mtimeit -s\'x="aaa12333bb445bb54b5b52"\' \'"".join(i for i in x if i.isdigit())\'\n100000 loops, best of 3: 11.5 usec per loop\n']], ['Python: removing characters except digits from string'], 5], [(1450897, 3), [['In Python 3, or for Unicode, you need to pass  .translate  a mapping (with ordinals, not characters directly, as keys) that returns  None  for what you want to delete. Here\'s a convenient way to express this for deletion of "everything but" a few characters:'], ["also emits  '1233344554552' .  However, putting this in xx.py we have...:"]], [[" import string\n\nclass Del:\n  def __init__(self, keep=string.digits):\n    self.comp = dict((ord(c),c) for c in keep)\n  def __getitem__(self, k):\n    return self.comp.get(k)\n\nDD = Del()\n\nx='aaa12333bb445bb54b5b52'\nx.translate(DD)\n"]], ['Python: removing characters except digits from string'], 5], [(1450897, 4), [["also emits  '1233344554552' .  However, putting this in xx.py we have...:"], ['...which shows the performance advantage disappears, for this kind of "deletion" tasks, and becomes a performance decrease.']], [[' $ python3.1 -mtimeit -s\'import re;  x="aaa12333bb445bb54b5b52"\' \'re.sub(r"\\D", "", x)\'\n100000 loops, best of 3: 8.43 usec per loop\n$ python3.1 -mtimeit -s\'import xx; x="aaa12333bb445bb54b5b52"\' \'x.translate(xx.DD)\'\n10000 loops, best of 3: 24.3 usec per loop\n']], ['Python: removing characters except digits from string'], 5], [(1452883, 0), [['-10000'], ["There's another way to use namespaces too:"]], [[' namespace bhn = big_honkin_name;\n']], ['Is there an C++ equivalent to Python\'s "import bigname as b"?'], 2], [(1452883, 1), [["There's another way to use namespaces too:"], ['-10000']], [[' using big_honkin_name::fn;\nint a = fn(27);\n']], ['Is there an C++ equivalent to Python\'s "import bigname as b"?'], 2], [(1453488, 0), [['-10000'], ['or, with a ModelForm']], [[" class MyForm(forms.Form):\n    myfield = forms.CharField(widget=forms.TextInput(attrs={'class' : 'myfieldclass'}))\n"]], ["How to markup form fields with <div class='field_type'> in Django"], 3], [(1453488, 1), [['or, with a ModelForm'], ["or, when you don't want to redefine the widget"]], [[" class MyForm(forms.ModelForm):\n    class Meta:\n        model = MyModel\n        widgets = {\n            'myfield': forms.TextInput(attrs={'class': 'myfieldclass'}),\n        }\n"]], ["How to markup form fields with <div class='field_type'> in Django"], 3], [(1453488, 2), [["or, when you don't want to redefine the widget"], ['render normally with {{ form }}']], [[" class MyForm(forms.ModelForm):\n    class Meta:\n        model = MyModel\n\n    def __init__(self, *args, **kwargs):\n        super(MyForm, self).__init__(*args, **kwargs)\n        self.fields['myfield'].widget.attrs.update({'class' : 'myfieldclass'})\n"]], ["How to markup form fields with <div class='field_type'> in Django"], 3], [(1455160, 0), [['As far as I could find, the python regular expression engine does not support partial ignore-case. Here is a solution using a case-insensitive regular expression, which then tests if the token is uppercase afterward.'], ["Here is the program's output:"]], [[" #! /usr/bin/env python\n\nimport re\n\ntoken_re = re.compile(r'use\\s+([a-z0-9]+)\\s+code', re.IGNORECASE)\ndef find_token(s):\n    m = token_re.search(s)\n    if m is not None:\n        token = m.group(1)\n        if token.isupper():\n            return token\n\nif __name__ == '__main__':\n    for s in ['Use HELLO1 code',\n              'USE hello1 CODE',\n              'this does not match',\n             ]:\n        print s, '->',\n        print find_token(s)\n"]], ['How to set ignorecase flag for part of regular expression in Python?'], 2], [(1455160, 1), [["Here is the program's output:"], ['-10000']], [[' Use HELLO1 code -> HELLO1\nUSE hello1 CODE -> None\nthis does not match -> None\n']], ['How to set ignorecase flag for part of regular expression in Python?'], 2], [(1456373, 0), [["You can create your own dictionary type by subclassing  dict  and adding the logic that you want. Here's a basic example:"], ['And it works like so:']], [[' class TwoWayDict(dict):\n    def __setitem__(self, key, value):\n        # Remove any previous connections with these values\n        if key in self:\n            del self[key]\n        if value in self:\n            del self[value]\n        dict.__setitem__(self, key, value)\n        dict.__setitem__(self, value, key)\n\n    def __delitem__(self, key):\n        dict.__delitem__(self, self[key])\n        dict.__delitem__(self, key)\n\n    def __len__(self):\n        """Returns the number of connections"""\n        return dict.__len__(self) // 2\n']], ['Two way/reverse map'], 2], [(1456373, 1), [['And it works like so:'], ["I'm sure I didn't cover all the cases, but that should get you started."]], [[' >>> d = TwoWayDict()\n>>> d[\'foo\'] = \'bar\'\n>>> d[\'foo\']\n\'bar\'\n>>> d[\'bar\']\n\'foo\'\n>>> len(d)\n1\n>>> del d[\'foo\']\n>>> d[\'bar\']\nTraceback (most recent call last):\n  File "<stdin>", line 7, in <module>\nKeyError: \'bar\'\n']], ['Two way/reverse map'], 2], [(1457104, 0), [["Some what related, if you're running tests off of a directory i.e "], ['for example:']], [[' nosetests ... tests/\n']], ['Nose unable to find tests in ubuntu'], 3], [(1457104, 1), [['for example:'], ['nosetests will run this function when executed in this directory while']], [['  def test_something():\n    ...\n']], ['Nose unable to find tests in ubuntu'], 3], [(1457104, 2), [['nosetests will run this function when executed in this directory while'], ['would not.']], [['  def somethin_to_test():\n    ...\n']], ['Nose unable to find tests in ubuntu'], 3], [(1459006, 0), [["But it's very easy to convert hex to binary byte by byte (well, nibble by nibble actually) :"], ['EDIT: the method above converts to binary, not to base64. This one converts to base64 :']], [[" static string Hex2Binary(string hexvalue)\n{\n    StringBuilder binaryval = new StringBuilder();\n    for(int i=0; i < hexvalue.Length; i++)\n    {\n        string byteString = hexvalue.Substring(i, 1);\n        byte b = Convert.ToByte(byteString, 16);\n        binaryval.Append(Convert.ToString(b, 2).PadLeft(4, '0'));\n    }\n    return binaryval.ToString();\n}\n"]], ["Is there a C# equivalent to Python's unhexlify?"], 2], [(1459006, 1), [['EDIT: the method above converts to binary, not to base64. This one converts to base64 :'], ['-10000']], [[' static string Hex2Base64(string hexvalue)\n{\n    if (hexvalue.Length % 2 != 0)\n        hexvalue = "0" + hexvalue;\n    int len = hexvalue.Length / 2;\n    byte[] bytes = new byte[len];\n    for(int i = 0; i < len; i++)\n    {\n        string byteString = hexvalue.Substring(2 * i, 2);\n        bytes[i] = Convert.ToByte(byteString, 16);\n    }\n    return Convert.ToBase64String(bytes);\n}\n']], ["Is there a C# equivalent to Python's unhexlify?"], 2], [(1460512, 0), [['Have you tried this?'], ['However , since your  point_a  is essentially global you could "hard-code" it into the  distance  function:']], [[' min(points_list, key=lambda x: distance(x, point_a))\n']], ['How can I get the element of a list that has a minimum/maximum property in Python?'], 3], [(1460512, 1), [['However , since your  point_a  is essentially global you could "hard-code" it into the  distance  function:'], ['This way you could pass  distance  as a key argument skipping  lambda  altogether.']], [[' >>> point_a = point([1, 2, 3], 5)\n>>> def distance(x):\n    return numpy.linalg.norm(x.coord - point_a.coord)\n']], ['How can I get the element of a list that has a minimum/maximum property in Python?'], 3], [(1460512, 2), [['This way you could pass  distance  as a key argument skipping  lambda  altogether.'], ['-10000']], [[' >>> min(points_list, key=distance)\n']], ['How can I get the element of a list that has a minimum/maximum property in Python?'], 3], [(1460590, 0), [['See the subprocess module for all your external process invoking needs.'], ["If you need to get the relative location and you aren't sure how the other command is going to take it, make it absolute."]], [[" p = subprocess.Popen(['myjavaapp', 'afilename.txt'])\n"]], ['Related to executing Java programs through Python'], 2], [(1460590, 1), [["If you need to get the relative location and you aren't sure how the other command is going to take it, make it absolute."], ['-10000']], [[" p = subprocess.Popen(['myjavaapp', os.path.abspath('afilename.txt')])\n"]], ['Related to executing Java programs through Python'], 2], [(1462842, 0), [['on the command line:'], ['from python:']], [[' gsprint -printer \\\\server\\printer "test.pdf"\n']], ["Print PDF document with python's win32print module?"], 2], [(1462842, 1), [['from python:'], ["Note that I've added to my PATH variable in these examples, so I don't have to include the entire path when calling the executable."]], [[' win32api.ShellExecute(0, \'open\', \'gsprint.exe\', \'-printer "\\\\\\\\\' + self.server + \'\\\\\' + self.printer_name + \'" \' + file, \'.\', 0)\n']], ["Print PDF document with python's win32print module?"], 2], [(1464028, 0), [['In such situations, you normally need to check for ANY iterable, not just lists -- if you\'re accepting lists OR numbers, rejecting (e.g) a tuple would be weird. The one kind of iterable you might want to treat as a "scalar" is a string -- in Python 2.*, this means  str  or  unicode . So, either:'], ['or, usually much handier:']], [[' def isNonStringIterable(x):\n  if isinstance(x, basestring):\n    return False\n  try: iter(x)\n  except: return False\n  else: return True\n']], ['What is the pythonic way of checking if an object is a list?'], 2], [(1464028, 1), [['or, usually much handier:'], ['where you just go  for i in makeNonStringIterable(x): ...']], [[' def makeNonStringIterable(x):\n  if isinstance(x, basestring):\n    return (x,)\n  try: return iter(x)\n  except: return (x,)\n']], ['What is the pythonic way of checking if an object is a list?'], 2], [(1464923, 0), [['Python'], ['Perl']], [[' print list[::3] # print it\nnewlist = list[::3] # copy it\n']], ['How can I print only every third index in Perl or Python?'], 2], [(1464923, 1), [['Perl'], ['-10000']], [[' for ($i = 0; $i < @list; $i += 3) {\n    print $list[$i]; # print it\n    push @y, $list[$i]; # copy it\n}\n']], ['How can I print only every third index in Perl or Python?'], 2], [(1465846, 0), [['make sure /opt/local/lib/mysql5/bin is in your path or edit site.cfg to include: '], ['Comment out line 38 of _mysql.c ']], [[' mysql_config = /opt/local/lib/mysql5/bin/mysql_config\n']], ['Install mysqldb on snow leopard'], 3], [(1465846, 1), [['Comment out line 38 of _mysql.c '], ['Then run:']], [[' // #define uint unsigned int\n']], ['Install mysqldb on snow leopard'], 3], [(1465846, 2), [['Then run:'], ['should be all good.']], [[' sudo python setup.py install\n']], ['Install mysqldb on snow leopard'], 3], [(1466282, 0), [['Consider this'], ['Which lets you do this']], [[' def make_b( a, seed ):\n    yield seed\n    for a,b in zip( a[:-1], a[1:] ):\n        seed= someFunction( seed, a, b )\n        yield seed\n']], ['how to rewrite this loop in a more efficient way in python'], 3], [(1466282, 1), [['Which lets you do this'], ['Note that you can often use this:  ']], [[' a = xrange(10)\nb= list(make_b(a,something))\n']], ['how to rewrite this loop in a more efficient way in python'], 3], [(1466282, 2), [['Note that you can often use this:  '], ['Instead of actually creating  b  as a list.   b  as a generator function saves you considerable storage (and some time) because you may not really need a  list  object in the first place.  Often, you only need something iterable.']], [[' b = make_b(a)\n']], ['how to rewrite this loop in a more efficient way in python'], 3], [(1466676, 0), [["You're almost there, you just need to do some introspection inside  __getattr__ , returning a new wrapped function when the original attribute is callable:"], ['Now with this code:']], [[' class Wrapper(object):\n    def __init__(self,wrapped_class):\n        self.wrapped_class = wrapped_class()\n\n    def __getattr__(self,attr):\n        orig_attr = self.wrapped_class.__getattribute__(attr)\n        if callable(orig_attr):\n            def hooked(*args, **kwargs):\n                self.pre()\n                result = orig_attr(*args, **kwargs)\n                # prevent wrapped_class from becoming unwrapped\n                if result == self.wrapped_class:\n                    return self\n                self.post()\n                return result\n            return hooked\n        else:\n            return orig_attr\n\n    def pre(self):\n        print ">> pre"\n\n    def post(self):\n        print "<< post"\n']], ['Create a wrapper class to call a pre and post function around existing functions?'], 3], [(1466676, 1), [['Now with this code:'], ['The result is:']], [[' number = Wrapper(Simple)\n\nprint "\\nCalling wrapped \'one\':"\nnumber.one()\n\nprint "\\nCalling wrapped \'two\':"\nnumber.two("2")\n']], ['Create a wrapper class to call a pre and post function around existing functions?'], 3], [(1466676, 2), [['The result is:'], ['-10000']], [[" Calling wrapped 'one':\n>> pre\none\n<< post\n\nCalling wrapped 'two':\n>> pre\ntwo2\n<< post\n"]], ['Create a wrapper class to call a pre and post function around existing functions?'], 3], [(1467930, 0), [['-10000'], ['or more generally:']], [[" projfiles['buildasm'] = ['#build/'+os.path.splitext(x)[0]+'.asm' for x in projfiles['a'] if x != 'baz.a']\n"]], ['python: how to get all members of an array except for ones that match a condition'], 2], [(1467930, 1), [['or more generally:'], ['-10000']], [[" ignored_files = ['baz.a',\n                 'foo.a',\n                 'xyzzy.a',\n                 ]\nprojfiles['buildasm'] = ['#build/'+os.path.splitext(x)[0]+'.asm' for x in projfiles['a'] if x not in ignored_files]\n"]], ['python: how to get all members of an array except for ones that match a condition'], 2], [(1470343, 0), [['You can use sequence assignment to copy the pointed-to objects (rather than assigning to  p.contents , which changes the pointer value):'], ['Example of use, with verification that it does in fact work ;):']], [[' def copy(dst, src):\n    """Copies the contents of src to dst"""\n    pointer(dst)[0] = src\n\n# alternately\ndef new_copy(src):\n    """Returns a new ctypes object which is a bitwise copy of an existing one"""\n    dst = type(src)()\n    pointer(dst)[0] = src\n    return dst\n\n# or if using pointers\ndef ptr_copy(dst_ptr, src_ptr):\n    dst_ptr[0] = src_ptr[0]\n']], ["Python ctypes: copying Structure's contents"], 2], [(1470343, 1), [['Example of use, with verification that it does in fact work ;):'], ['-10000']], [[' >>> o1 = Point(1, 1)\n>>> o2 = Point(2, 2)\n>>> print (o1.x, o1.y, addressof(o1)), (o2.x, o2.y, addressof(o2))\n(1, 1, 6474004) (2, 2, 6473524)\n>>> copy(o2, o1)\n>>> pprint (o1.x, o1.y, addressof(o1)), (o2.x, o2.y, addressof(o2))\n(1, 1, 6474004) (1, 1, 6473524)\n\n>>> o1 = Point(1, 1), o2 = Point(2, 2)\n>>> print (o1.x, o1.y, addressof(o1)), (o2.x, o2.y, addressof(o2))\n(1, 1, 6473844) (2, 2, 6473684)\n>>> p1, p2 = pointer(o1), pointer(o2)\n>>> addressof(p1.contents), addressof(p2.contents)\n(6473844, 6473684)\n>>> ptr_copy(p1, p2)\n>>> print (o1.x, o1.y, addressof(o1)), (o2.x, o2.y, addressof(o2))\n(2, 2, 6473844) (2, 2, 6473684)\n>>> addressof(p1.contents), addressof(p2.contents)\n(6473844, 6473684)\n']], ["Python ctypes: copying Structure's contents"], 2], [(1470453, 0), [['I am able to solve my problem by writing a modifed version of python  trace  module , which can be enabled disabled, basically modify  Trace  class something like this'], ['Output:']], [[" import sys\nimport trace\n\nclass MyTrace(trace.Trace):\n    def __init__(self, *args, **kwargs):\n        trace.Trace.__init__(self, *args, **kwargs)\n        self.enabled = False\n\n    def localtrace_trace_and_count(self, *args, **kwargs):\n        if not self.enabled:\n            return None \n        return trace.Trace.localtrace_trace_and_count(self, *args, **kwargs)\n\ntracer = MyTrace(ignoredirs=[sys.prefix, sys.exec_prefix],)\n\ndef main():\n    a = 1\n    tracer.enabled = True\n    a = 2\n    tracer.enabled = False\n    a = 3\n\n# run the new command using the given tracer\ntracer.run('main()')\n"]], ['How to check which part of app is consuming CPU?'], 2], [(1470453, 1), [['Output:'], ['Enabling it at the critical points helps me to trace line by line which code statements are executing most.']], [['  --- modulename: untitled-2, funcname: main\nuntitled-2.py(19):     a = 2\nuntitled-2.py(20):     tracer.enabled = False\n']], ['How to check which part of app is consuming CPU?'], 2], [(1470811, 0), [["I've run into this before - for some reason passing can_delete as an argument doesn't work, but setting it in the formset's  init  method does. Try this:"], ['then in your admin inline class:']], [[' class MyInlineFormset(generic.generic_inlineformset_factory(MyModel)):\n    def __init__(self, *args, **kwargs):\n        super(MyInlineFormset, self).__init__(*args, **kwargs)\n        self.can_delete = False\n']], ['Django: disallow can_delete on GenericStackedInline'], 2], [(1470811, 1), [['then in your admin inline class:'], ['-10000']], [[' class MyModelStackedInline(generic.GenericStackedInline):\n    model = MyModel\n    formset = MyInlineFormset\n    extra = 0\n']], ['Django: disallow can_delete on GenericStackedInline'], 2], [(1471924, 0), [["For the example of location = 'Boston' OR type = 'Primary', if you had this data:"], ['You can do the  WHERE ... OR ...  query like this:']], [[' users = {\n   1: dict(Name="Mr. Foo", Location="Boston", Type="Secondary"),\n   2: dict(Name="Mr. Bar", Location="New York", Type="Primary"),\n   3: dict(Name="Mr. Quux", Location="Chicago", Type="Secondary"),\n   #...\n}\n']], ['Small Tables in Python?'], 4], [(1471924, 1), [['You can do the  WHERE ... OR ...  query like this:'], ['Or with just one expression:']], [[" set1 = set(u for u in users if users[u]['Location'] == 'Boston')\nset2 = set(u for u in users if users[u]['Type'] == 'Primary')\nresult = set1.union(set2)\n"]], ['Small Tables in Python?'], 4], [(1471924, 2), [['Or with just one expression:'], ['You can also use the functions in  itertools  to create fairly efficient queries of the data. For example if you want to do something similar to a  GROUP BY city :']], [[" result = set(u for u in users if users[u]['Location'] == 'Boston'\n                              or users[u]['Type'] == 'Primary')\n"]], ['Small Tables in Python?'], 4], [(1471924, 3), [['You can also use the functions in  itertools  to create fairly efficient queries of the data. For example if you want to do something similar to a  GROUP BY city :'], ['You could also build indexes manually (build a  dict  mapping Location to User ID) to speed things up. If this becomes too slow or unwieldy then I would probably switch to  sqlite , which is now included in the Python (2.5) standard library.']], [[" cities = ('Boston', 'New York', 'Chicago')\ncities_users = dict(map(lambda city: (city, ifilter(lambda u: users[u]['Location'] == city, users)), cities))\n"]], ['Small Tables in Python?'], 4], [(1471987, 0), [['-10000'], ['If you want a  datetime.datetime  object, you can do:']], [[" >>> import email.utils as eut\n>>> eut.parsedate('Wed, 23 Sep 2009 22:15:29 GMT')\n(2009, 9, 23, 22, 15, 29, 0, 1, -1)\n"]], ['How do I parse an HTTP date-string in Python?'], 2], [(1471987, 1), [['If you want a  datetime.datetime  object, you can do:'], ['-10000']], [[' def my_parsedate(text):\n    return datetime.datetime(*eut.parsedate(text)[:6])\n']], ['How do I parse an HTTP date-string in Python?'], 2], [(1477300, 0), [['For example:'], ['To make things easier you can also create aliases:']], [[' $ /usr/bin/python -V\nPython 2.3.4\n$ /usr/bin/python2.4 -V\nPython 2.4.4\n$ /opt/local/bin/python2.7 -V\nPython 2.7a0\n$ python -V\nPython 2.5.2\n$ which python\n/usr/bin/python\n']], ['How to find and run my old (global) version of Python?'], 2], [(1477300, 1), [['To make things easier you can also create aliases:'], ['Aliases make it pretty easy for you to run different versions of python. Place them in your .bashrc file so they are always defined.']], [[' $ alias python2.4=/usr/bin/python2.4\n$ alias python2.5=/usr/bin/python2.5\n$ python2.4 -V\nPython 2.4.4\n$ python2.5 -V\nPython 2.5.2\n']], ['How to find and run my old (global) version of Python?'], 2], [(1478248, 0), [['Mark had it almost right -- essentially "mydata" will hold references to all the TL variables in it, whatever thread they were created from. To wit...:'], ['Emits:']], [[' import threading\nimport gc\n\nmydata = threading.local()\n\nclass x:\n    def __del__(self):\n        print "x got deleted!"\n\ndef run():\n    mydata.foo = x()\n\nt = threading.Thread(target=run)\nprint "t created"\ngc.collect()\nt.start()\nprint "t started"\ngc.collect()\ndel mydata\nprint "mydata deleted"\ngc.collect()\nt.join()\nprint "t joined"\ngc.collect()\nprint "Done!"\n']], ["What's the life-time of a thread-local value in Python?"], 4], [(1478248, 1), [['Emits:'], ['gc actually plays no role here in CPython, so you can simplify the code down to:']], [[' t created\nt started\nx got deleted!\nmydata deleted\nt joined\nDone!\n']], ["What's the life-time of a thread-local value in Python?"], 4], [(1478248, 2), [['gc actually plays no role here in CPython, so you can simplify the code down to:'], ['and still see...:']], [[' import threading\n\nmydata = threading.local()\n\nclass x:\n    def __init__(self):\n        print "x got created!"\n    def __del__(self):\n        print "x got deleted!"\n\ndef run():\n    mydata.foo = x()\n\nt = threading.Thread(target=run)\nprint "t created"\nt.start()\nprint "t started"\ndel mydata\nprint "mydata deleted"\nt.join()\nprint "t joined"\nprint "Done!"\n']], ["What's the life-time of a thread-local value in Python?"], 4], [(1478248, 3), [['and still see...:'], ['-10000']], [[' t created\nx got created!\nt started\nx got deleted!\nmydata deleted\nt joined\nDone!\n']], ["What's the life-time of a thread-local value in Python?"], 4], [(1479649, 0), [['Actually pprint seems to sort the keys for you under python2.5'], ['But not always under python 2.4']], [[' >>> from pprint import pprint\n>>> mydict = {\'a\':1, \'b\':2, \'c\':3}\n>>> pprint(mydict)\n{\'a\': 1, \'b\': 2, \'c\': 3}\n>>> mydict = {\'a\':1, \'b\':2, \'c\':3, \'d\':4, \'e\':5}\n>>> pprint(mydict)\n{\'a\': 1, \'b\': 2, \'c\': 3, \'d\': 4, \'e\': 5}\n>>> d = dict(zip("kjihgfedcba",range(11)))\n>>> pprint(d)\n{\'a\': 10,\n \'b\': 9,\n \'c\': 8,\n \'d\': 7,\n \'e\': 6,\n \'f\': 5,\n \'g\': 4,\n \'h\': 3,\n \'i\': 2,\n \'j\': 1,\n \'k\': 0}\n']], ['Readably print out a python dict() sorted by key'], 4], [(1479649, 1), [['But not always under python 2.4'], ['Reading the source code of pprint.py (2.5) it does sort the dictionary using']], [[' >>> from pprint import pprint\n>>> mydict = {\'a\':1, \'b\':2, \'c\':3, \'d\':4, \'e\':5}\n>>> pprint(mydict)\n{\'a\': 1, \'c\': 3, \'b\': 2, \'e\': 5, \'d\': 4}\n>>> d = dict(zip("kjihgfedcba",range(11)))\n>>> pprint(d)\n{\'a\': 10,\n \'b\': 9,\n \'c\': 8,\n \'d\': 7,\n \'e\': 6,\n \'f\': 5,\n \'g\': 4,\n \'h\': 3,\n \'i\': 2,\n \'j\': 1,\n \'k\': 0}\n>>> \n']], ['Readably print out a python dict() sorted by key'], 4], [(1479649, 2), [['Reading the source code of pprint.py (2.5) it does sort the dictionary using'], ['for multiline or this for single line']], [[' items = object.items()\nitems.sort()\n']], ['Readably print out a python dict() sorted by key'], 4], [(1479649, 3), [['for multiline or this for single line'], ["before it attempts to print anything, so if your dictionary sorts properly like that then it should pprint properly.  In 2.4 the second sorted() is missing (didn't exist then) so objects printed on a single line won't be sorted."]], [[' for k, v in sorted(object.items()):\n']], ['Readably print out a python dict() sorted by key'], 4], [(1479979, 0), [["Here's version that works for any pair of iterables:"], ['Example:']], [[' def intersection(iterableA, iterableB, key=lambda x: x):\n    """Return the intersection of two iterables with respect to `key` function.\n\n    """\n    def unify(iterable):\n        d = {}\n        for item in iterable:\n            d.setdefault(key(item), []).append(item)\n        return d\n\n    A, B = unify(iterableA), unify(iterableB)\n\n    return [(A[k], B[k]) for k in A if k in B]\n']], ['Case-insensitive comparison of sets in Python'], 2], [(1479979, 1), [['Example:'], ['-10000']], [[" print intersection('Today I am fine'.split(),\n                   'Hello How a re you TODAY'.split(),\n                   key=str.lower)\n# -> [(['Today'], ['TODAY'])]\n"]], ['Case-insensitive comparison of sets in Python'], 2], [(1480655, 0), [['From the xmacroplay website'], ['This is probably the command you are interested in']], [[' xmacroplay:\nReads lines from the standard input. It can understand the following lines:\n\nDelay [sec]     - delays the program with [sec] secundums\nButtonPress [n] - sends a ButtonPress event with button [n]\n          this emulates the pressing of the mouse button [n]\nButtonRelease [n]   - sends a ButtonRelease event with button [n]\n          this emulates the releasing of the mouse button [n]\n... snip lots more ...\n']], ['How can I, on some global keystroke, paste some text to current active application in linux with Python or C++'], 2], [(1480655, 1), [['This is probably the command you are interested in'], ['There is also  Xnee  which does a similar thing.']], [[' String [max. 1024 long string]\n        - Sends the string as single characters converted to\n          KeyPress and KeyRelease events based on a\n          character table in chartbl.h (currently only\n          Latin1 is used...)\n']], ['How can I, on some global keystroke, paste some text to current active application in linux with Python or C++'], 2], [(1481192, 0), [["If you're into something Pythonic, I think  1:3,6,8:10,16  would be a better choice, as  x:y  is a standard notation for index range and the syntax allows you to use this notation on objects. Note that the call"], ['gets translated into']], [[' z[1:3,6,8:10,16]\n']], ['pythonic format for indices'], 7], [(1481192, 1), [['gets translated into'], ["And here's the parser (a beautiful one-liner that suffers from  slice(16, None, None)  glitch described below):"]], [[' z.__getitem__((slice(1, 3, None), 6, slice(8, 10, None), 16))\n']], ['pythonic format for indices'], 7], [(1481192, 2), [["And here's the parser (a beautiful one-liner that suffers from  slice(16, None, None)  glitch described below):"], ["There's one pitfall, however:  8:10  by definition includes only indices 8 and 9 -- without upper bound. If that's unacceptable for your purposes, you certainly need a different format  and  1-3,6,8-10,16  looks good to me. The parser then would be "]], [[" def parse(s):\n    return [slice(*map(int, x.split(':'))) for x in s.split(',')]\n"]], ['pythonic format for indices'], 7], [(1481192, 3), [["There's one pitfall, however:  8:10  by definition includes only indices 8 and 9 -- without upper bound. If that's unacceptable for your purposes, you certainly need a different format  and  1-3,6,8-10,16  looks good to me. The parser then would be "], ["Update:  here's the full parser for a combined format:"]], [[" def myslice(start, stop=None, step=None):\n    return slice(start, (stop if stop is not None else start) + 1, step)\n\ndef parse(s):\n    return [myslice(*map(int, x.split('-'))) for x in s.split(',')]\n"]], ['pythonic format for indices'], 7], [(1481192, 4), [["Update:  here's the full parser for a combined format:"], ['This handles negative numbers as well, so']], [[" from sys import maxsize as INF\n\ndef indices(s: 'string with indices list') -> 'indices generator':\n    for x in s.split(','):\n        splitter = ':' if (':' in x) or (x[0] == '-') else '-'\n        ix = x.split(splitter)\n        start = int(ix[0]) if ix[0] is not '' else -INF\n        if len(ix) == 1:\n            stop = start + 1\n        else:\n            stop = int(ix[1]) if ix[1] is not '' else INF\n        step = int(ix[2]) if len(ix) > 2 else 1\n        for y in range(start, stop + (splitter == '-'), step):\n            yield y\n"]], ['pythonic format for indices'], 7], [(1481192, 5), [['This handles negative numbers as well, so'], ['prints']], [["  print(list(indices('-5, 1:3, 6, 8:15:2, 20-25, 18')))\n"]], ['pythonic format for indices'], 7], [(1481192, 6), [['prints'], ['Yet another alternative is to use  ...  (which Python recognizes as the built-in constant Ellipsis so you can call  z[...]  if you want) but I think  1,...,3,6, 8,...,10,16  is less readable.']], [[' [-5, 1, 2, 6, 7, 8, 10, 12, 14, 20, 21, 22, 23, 24, 25, 18, 19]\n']], ['pythonic format for indices'], 7], [(1482308, 0), [['The Python  itertools  page  has exactly a  powerset  recipe for this:'], ['Output:']], [[' def powerset(iterable):\n    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n']], ["what's a good way to combinate through a set?"], 2], [(1482308, 1), [['Output:'], ["If you don't like that empty tuple at the beginning, you can just change the  range  statement to  range(1, len(s)+1)  to avoid a 0-length combination."]], [[' >>> list(powerset("abcd"))\n[(), (\'a\',), (\'b\',), (\'c\',), (\'d\',), (\'a\', \'b\'), (\'a\', \'c\'), (\'a\', \'d\'), (\'b\', \'c\'), (\'b\', \'d\'), (\'c\', \'d\'), (\'a\', \'b\', \'c\'), (\'a\', \'b\', \'d\'), (\'a\', \'c\', \'d\'), (\'b\', \'c\', \'d\'), (\'a\', \'b\', \'c\', \'d\')]\n']], ["what's a good way to combinate through a set?"], 2], [(1482480, 0), [["Okay, here's a go at a fuller reimplementation."], ['And some testing:']], [[' class MyXRange(object):\n    def __init__(self, a1, a2=None, step=1):\n        if step == 0:\n            raise ValueError("arg 3 must not be 0")\n        if a2 is None:\n            a1, a2 = 0, a1\n        if (a2 - a1) % step != 0:\n            a2 += step - (a2 - a1) % step\n        if cmp(a1, a2) != cmp(0, step):\n            a2 = a1\n        self.start, self.stop, self.step = a1, a2, step\n\n    def __iter__(self):\n        n = self.start\n        while cmp(n, self.stop) == cmp(0, self.step):\n            yield n\n            n += self.step\n\n    def __repr__(self):\n        return "MyXRange(%d,%d,%d)" % (self.start, self.stop, self.step)\n\n    # NB: len(self) will convert this to an int, and may fail\n    def __len__(self):\n        return (self.stop - self.start)//(self.step)\n\n    def __getitem__(self, key):\n        if key < 0:\n            key = self.__len__() + key\n            if key < 0:\n                raise IndexError("list index out of range")\n            return self[key]\n        n = self.start + self.step*key\n        if cmp(n, self.stop) != cmp(0, self.step):\n            raise IndexError("list index out of range")\n        return n\n\n    def __reversed__(self):\n        return MyXRange(self.stop-self.step, self.start-self.step, -self.step)\n\n    def __contains__(self, val):\n        if val == self.start: return cmp(0, self.step) == cmp(self.start, self.stop)\n        if cmp(self.start, val) != cmp(0, self.step): return False\n        if cmp(val, self.stop) != cmp(0, self.step): return False\n        return (val - self.start) % self.step == 0\n']], ['`xrange(2**100)` -> OverflowError: long int too large to convert to int'], 2], [(1482480, 1), [['And some testing:'], ['-10000']], [[' def testMyXRange(testsize=10):\n    def normexcept(f,args):\n        try:\n            r = [f(args)]\n        except Exception, e:\n            r = type(e)\n        return r\n\n    for i in range(-testsize,testsize+1):\n        for j in range(-testsize,testsize+1):\n            print i, j\n            for k in range(-9, 10, 2):\n                r, mr = range(i,j,k), MyXRange(i,j,k)\n\n                if r != list(mr):\n                    print "iter fail: %d, %d, %d" % (i,j,k)\n\n                if list(reversed(r)) != list(reversed(mr)):\n                    print "reversed fail: %d, %d, %d" % (i,j,k)\n\n                if len(r) != len(mr):\n                    print "len fail: %d, %d, %d" % (i,j,k)\n\n                z = [m for m in range(-testsize*2,testsize*2+1)\n                      if (m in r) != (m in mr)]\n                if z != []:\n                    print "contains fail: %d, %d, %d, %s" % (i,j,k,(z+["..."])[:10])\n\n                z = [m for m in range(-testsize*2, testsize*2+1) \n                      if normexcept(r.__getitem__, m) != normexcept(mr.__getitem__, m)]\n                if z != []:\n                    print "getitem fail: %d, %d, %d, %s" % (i,j,k,(z+["..."])[:10])\n']], ['`xrange(2**100)` -> OverflowError: long int too large to convert to int'], 2], [(1482649, 0), [['If you just  print  the string, it will not be shown with quotes (unless the string  has  quotes in it).'], ['If you actually  do  need to  remove  leading/trailing quotation marks, use the  .strip  method of the string to remove single and/or double quotes:']], [[' >>> 1 # just a number, so no quotes\n1\n>>> "hi" # just a string, displayed with quotes\n\'hi\'\n>>> print("hi") # being *printed* to the screen, so do not show quotes\nhi\n>>> "\'hello\'" # string with embedded single quotes\n"\'hello\'"\n>>> print("\'hello\'") # *printing* a string with embedded single quotes\n\'hello\'\n']], ['In Python interpreter, return without " \' "'], 2], [(1482649, 1), [['If you actually  do  need to  remove  leading/trailing quotation marks, use the  .strip  method of the string to remove single and/or double quotes:'], ['-10000']], [[' >>> print("""\'"hello"\'""")\n\'"hello"\'\n>>> print("""\'"hello"\'""".strip(\'"\\\'\'))\nhello\n']], ['In Python interpreter, return without " \' "'], 2], [(1483108, 0), [['-10000'], ["And be sure to  match , don't  search"]], [[' [^.]*\\.?[^.]*$\n']], ['regex for character appearing at most once'], 3], [(1483108, 1), [["And be sure to  match , don't  search"], ["If you consider only integers and decimals, it's even easier:"]], [[' >>> dot = re.compile("[^.]*\\.[^.]*$")\n>>> dot.match("fooooooooooooo.bar")\n<_sre.SRE_Match object at 0xb7651838>\n>>> dot.match("fooooooooooooo.bar.sad") is None\nTrue\n>>>\n']], ['regex for character appearing at most once'], 3], [(1483108, 2), [["If you consider only integers and decimals, it's even easier:"], ['-10000']], [[' def valid(s):\n    return re.match(\'[0-9]+(\\.[0-9]*)?$\', s) is not None\n\nassert valid("42")\nassert valid("13.37")\nassert valid("1.")\nassert not valid("1.2.3.4")\nassert not valid("abcd")\n']], ['regex for character appearing at most once'], 3], [(1483874, 0), [['My indexer is as follows:'], ['Here is how I filter results (never mind the first line that does stuff for wildcard usage):']], [[" class MarketIndexer( djapian.Indexer ):\n\n    fields = [ 'name', 'description', 'tags_string', 'state']\n    tags = [('state', 'state'),]\n"]], ['Djapian - filtering results'], 2], [(1483874, 1), [['Here is how I filter results (never mind the first line that does stuff for wildcard usage):'], ['When executed, it now brings  Market s that have their state equal to "1".']], [[' objects = model.indexer.search(q_wc).flags(djapian.resultset.xapian.QueryParser.FLAG_WILDCARD).prefetch()\nobjects = objects.filter(state=1)\n']], ['Djapian - filtering results'], 2], [(1486558, 0), [['Try'], ['or (holy ugly)']], [[" for arg in arguments:\n    lst = equal if '=' in arg else plain\n    lst.append(arg)\n"]], ['Evaluating into two or more lists'], 2], [(1486558, 1), [['or (holy ugly)'], ['A third option: Create a class which offers  append()  and which sorts into several lists.']], [[" for arg in arguments:\n    (equal if '=' in arg else plain).append(arg)\n"]], ['Evaluating into two or more lists'], 2], [(1490039, 0), [['In your case, the following code will call  [NSSpeechSynthesizer availableVoices] :'], ['which returns']], [[' from AppKit import NSSpeechSynthesizer\n\nNSSpeechSynthesizer.availableVoices()\n']], ['calling Objective C functions from Python?'], 2], [(1490039, 1), [['which returns'], ['(a bridged NSCFArray) on my SL machine.']], [[' (\n    "com.apple.speech.synthesis.voice.Agnes",\n    "com.apple.speech.synthesis.voice.Albert",\n    "com.apple.speech.synthesis.voice.Alex",\n    "com.apple.speech.synthesis.voice.BadNews",\n    "com.apple.speech.synthesis.voice.Bahh",\n    "com.apple.speech.synthesis.voice.Bells",\n    "com.apple.speech.synthesis.voice.Boing",\n    "com.apple.speech.synthesis.voice.Bruce",\n    "com.apple.speech.synthesis.voice.Bubbles",\n    "com.apple.speech.synthesis.voice.Cellos",\n    "com.apple.speech.synthesis.voice.Deranged",\n    "com.apple.speech.synthesis.voice.Fred",\n    "com.apple.speech.synthesis.voice.GoodNews",\n    "com.apple.speech.synthesis.voice.Hysterical",\n    "com.apple.speech.synthesis.voice.Junior",\n    "com.apple.speech.synthesis.voice.Kathy",\n    "com.apple.speech.synthesis.voice.Organ",\n    "com.apple.speech.synthesis.voice.Princess",\n    "com.apple.speech.synthesis.voice.Ralph",\n    "com.apple.speech.synthesis.voice.Trinoids",\n    "com.apple.speech.synthesis.voice.Vicki",\n    "com.apple.speech.synthesis.voice.Victoria",\n    "com.apple.speech.synthesis.voice.Whisper",\n    "com.apple.speech.synthesis.voice.Zarvox"\n)\n']], ['calling Objective C functions from Python?'], 2], [(1491796, 0), [['From a Windows command line you can use:'], ['For example:']], [[' echo %ERRORLEVEL%\n']], ['get the exit code for python program'], 2], [(1491796, 1), [['For example:'], ['-10000']], [[' C:\\work>python helloworld.py\nHello World!\n\nC:\\work>echo %ERRORLEVEL%\n0\n']], ['get the exit code for python program'], 2], [(1491957, 0), [['That done, your code looks like this:'], ['In fact, you can simplify it even more:']], [[' def my_func(choice_pattern, input):\n    # Search in input for some things to choose from.\n    choice_iterator = choice_pattern.finditer(input, re.M)\n    if not choice_iterator:\n        print "No choices. Exiting..."\n        sys.exit()\n\n    # Show choices to the user. For each one, ask user for a yes/no response. If\n    # choice accepted, return a result. Otherwise show user next choice. If no\n    # choices accepted by user, quit.\n    for choice in choice_iterator:\n        print choice\n        # get_yes_no_answer() returns True or False depending on user response.\n        if get_yes_no_answer():\n            return choice\n    # Loop exited without matches.\n    print "No matches. Exiting..."\n    sys.exit()\n']], ['Testing for an empty iterator in a Python for... loop'], 2], [(1491957, 1), [['In fact, you can simplify it even more:'], ["Iterators are used pretty much as any sequence type. You don't need to treat it differently from a list."]], [[' def my_func(choice_pattern, input):\n    choice_iterator = choice_pattern.finditer(input, re.M)\n    if choice_iterator:\n        for choice in choice_iterator:\n            print choice\n            if get_yes_no_answer():\n                return choice\n    # If there is no choices or no matches, you end up here:\n    print "No matches. Exiting..."\n    sys.exit()\n']], ['Testing for an empty iterator in a Python for... loop'], 2], [(1494231, 0), [["In python, there's the  datetime module .  Specifically, the date class will help."], ['Or, to your specific problem, working with timedelta will help out.']], [[' from datetime import date\nprint date(1850, 1, 1).weekday()  # 1, which is Tuesday \n# (Mon is 0)\n']], ['How to get a timestamp older than 1901'], 2], [(1494231, 1), [['Or, to your specific problem, working with timedelta will help out.'], ['-10000']], [[' from datetime import datetime\ntd = datetime.now() - datetime(1850, 1, 1)\nprint (86400*td.days)+td.seconds  # seconds since then till now\n']], ['How to get a timestamp older than 1901'], 2], [(1494442, 0), [['The simplest command pattern is already built into Python, simply use a callable:'], ['The command pattern as an object oriented design pattern makes more sense if your commands need to be able to do more than just be invoked. Common usecase is when you need to be able to undo/redo your actions. Then a command class is a good way to couple the forward and backwards actions together. For example:']], [[' def greet(who):\n    print "Hello %s" % who\n\ngreet_command = lambda: greet("World")\n# pass the callable around, and invoke it later\ngreet_command()\n']], ['General Command pattern and Command Dispatch pattern in Python'], 2], [(1494442, 1), [['The command pattern as an object oriented design pattern makes more sense if your commands need to be able to do more than just be invoked. Common usecase is when you need to be able to undo/redo your actions. Then a command class is a good way to couple the forward and backwards actions together. For example:'], ['-10000']], [[" class MoveFileCommand(object):\n    def __init__(self, src, dest):\n        self.src = src\n        self.dest = dest\n        os.rename(self.src, self.dest)\n    def undo(self):\n        os.rename(self.dest, self.src)\n\nundo_stack = []\nundo_stack.append(MoveFileCommand('foo.txt', 'bar.txt'))\nundo_stack.append(MoveFileCommand('bar.txt', 'baz.txt'))\n# foo.txt is now renamed to baz.txt\nundo_stack.pop().undo() # Now it's bar.txt\nundo_stack.pop().undo() # and back to foo.txt\n"]], ['General Command pattern and Command Dispatch pattern in Python'], 2], [(1495487, 0), [["parsedatetime  -  Python module that is able to parse 'human readable' date/time expressions."], ['-10000']], [[' #!/usr/bin/env python\nfrom datetime import datetime\nimport parsedatetime as pdt # $ pip install parsedatetime\n\ncal = pdt.Calendar()\nnow = datetime.now()\nprint("now: %s" % now)\nfor time_string in ["tomorrow at 6am", "next moday at noon", \n                    "2 min ago", "3 weeks ago", "1 month ago"]:\n   print("%s:\\t%s" % (time_string, cal.parseDT(time_string, now)[0]))\n']], ['Is there any python library for parsing dates and times from a natural language?'], 2], [(1495487, 1), [['-10000'], ['-10000']], [['Output now: 2015-10-18 13:55:29.732131\ntomorrow at 6am:    2015-10-19 06:00:00\nnext moday at noon: 2015-10-18 12:00:00\n2 min ago:  2015-10-18 13:53:29\n3 weeks ago:    2015-09-27 13:55:29\n1 month ago:    2015-09-18 13:55:29\n']], ['Is there any python library for parsing dates and times from a natural language?'], 2], [(1495510, 0), [['If the list of tuples is sorted,  itertools.groupby , as suggested by @gnibbler, is not a bad alternative to  defaultdict , but it needs to be used differently than he suggested:'], ['For "merging" dicts of lists into a new d.o.l...:']], [[" import itertools\nimport operator\n\ndef lot_to_dict(lot):\n  key = operator.itemgetter(0)\n  # if lot's not sorted, you also need...:\n  # lot = sorted(lot, key=key)\n  # NOT in-place lot.sort to avoid changing it!\n  grob = itertools.groupby(lot, key)\n  return dict((k, [v[1] for v in itr]) for k, itr in grob)\n"]], ['Combining Dictionaries Of Lists In Python'], 3], [(1495510, 1), [['For "merging" dicts of lists into a new d.o.l...:'], ["I'm giving  []  a nickname  no  to avoid uselessly constructing a lot of empty lists, given that performance is important. If the sets of the dols' keys overlap only modestly, faster would be:"]], [[' def merge_dols(dol1, dol2):\n  keys = set(dol1).union(dol2)\n  no = []\n  return dict((k, dol1.get(k, no) + dol2.get(k, no)) for k in keys)\n']], ['Combining Dictionaries Of Lists In Python'], 3], [(1495510, 2), [["I'm giving  []  a nickname  no  to avoid uselessly constructing a lot of empty lists, given that performance is important. If the sets of the dols' keys overlap only modestly, faster would be:"], ['since this uses list-catenation only for overlapping keys -- so, if those are few, it will be faster.']], [[' def merge_dols(dol1, dol2):\n  result = dict(dol1, **dol2)\n  result.update((k, dol1[k] + dol2[k])\n                for k in set(dol1).intersection(dol2))\n  return result\n']], ['Combining Dictionaries Of Lists In Python'], 3], [(1496346, 0), [['Yes. You do it like this:'], ['Running this in Python confirms these produce identical results:']], [[" def method(**kwargs):\n  print kwargs\n\nkeywords = {'keyword1': 'foo', 'keyword2': 'bar'}\nmethod(keyword1='foo', keyword2='bar')\nmethod(**keywords)\n"]], ['Passing a list of kwargs?'], 2], [(1496346, 1), [['Running this in Python confirms these produce identical results:'], ['-10000']], [[" {'keyword2': 'bar', 'keyword1': 'foo'}\n{'keyword2': 'bar', 'keyword1': 'foo'}\n"]], ['Passing a list of kwargs?'], 2], [(1497258, 0), [["Didn't you look at the  signature ,"], ['takes no  **kwargs  at all.']], [[' def reverse(viewname, urlconf=None, args=None, kwargs=None, \n                      prefix=None, current_app=None):\n']], ['question related to reverse function and kwargs'], 5], [(1497258, 1), [['takes no  **kwargs  at all.'], ['means ']], [[' kwargs={"year":2009,"month":9}\nreverse("name",**kwargs)\n']], ['question related to reverse function and kwargs'], 5], [(1497258, 2), [['means '], ['which is completely different from ']], [[' reverse("name", year=2009, month=9)\n']], ['question related to reverse function and kwargs'], 5], [(1497258, 3), [['which is completely different from '], ["When a function actually does take  **kwargs , both ways to call it are the same. But that's not the case here. Reverse would have look like this to take  **kwargs :"]], [[' reverse("name",kwargs={"year":2009,"month":9})\n']], ['question related to reverse function and kwargs'], 5], [(1497258, 4), [["When a function actually does take  **kwargs , both ways to call it are the same. But that's not the case here. Reverse would have look like this to take  **kwargs :"], ['-10000']], [[' def reverse(viewname, urlconf=None, prefix=None, \n                      current_app=None, *args, **kwargs):\n']], ['question related to reverse function and kwargs'], 5], [(1501907, 0), [['(Example came from a app I was debuging)'], ['Just  re-read the docs as well and maybe this might be better,']], [[' cron:\n- description: Description of what you want done...\n  url: /script/path/goes/here\n  schedule: every 60 minutes synchronized\n  timezone: America/New_York\n']], ["Run a task every hour on the hour with App Engine's cron API"], 2], [(1501907, 1), [['Just  re-read the docs as well and maybe this might be better,'], ['-10000']], [['   schedule: every 60 minutes from 00:00 to 23:59\n']], ["Run a task every hour on the hour with App Engine's cron API"], 2], [(1502470, 0), [['Underscore is often used as a name for stuff you do not need, so something like this would work:'], ["In this particular case, you could do this, but it isn't a pretty solution:"]], [[" part0, _, part2 = str.partition(' ')\n"]], ['How to pick certain elements of x-tuple returned by a function?'], 3], [(1502470, 1), [["In this particular case, you could do this, but it isn't a pretty solution:"], ['A more esoteric solution:']], [[" part0, part2 = str.partition(' ')[::2]\n"]], ['How to pick certain elements of x-tuple returned by a function?'], 3], [(1502470, 2), [['A more esoteric solution:'], ['-10000']], [[" from operator import itemgetter\npart0, part2 = itemgetter(0, 2)(str.partition(' '))\n"]], ['How to pick certain elements of x-tuple returned by a function?'], 3], [(1507566, 0), [["Yep, weakref's excellent here. Specifically, instead of:"], ['use:']], [[' self.children = {}\n']], ['How and when to appropriately use weakref in Python'], 2], [(1507566, 1), [['use:'], ["Nothing else needs change in your code. This way, when a child has no other differences, it just goes away -- and so does the entry in the parent's  children  map that has that child as the value."]], [[' self.children = weakref.WeakValueDictionary()\n']], ['How and when to appropriately use weakref in Python'], 2], [(1510018, 0), [["You should use a functional unique index to apply this constraint. Unfortunately the database generic database independent schema definition machinery in SQLAlchemy doesn't abstract functional indexes yet. You'll have to use the DDL construct to register custom schema definition clauses. If you are using the declarative approach to declaring your schema add the following after your class definition:"], ["This method works very nicely but throws a SADeprecation warning in v0.7\nThe syntax that I've used successfully:"]], [[' DDL(\n    "CREATE UNIQUE INDEX doc_year_num_uniq ON %(fullname)s "\n    "(EXTRACT(YEAR FROM date), number)"\n).execute_at(\'after-create\', Document.__table__)\n']], ['Compound UniqueConstraint with a function'], 2], [(1510018, 1), [["This method works very nicely but throws a SADeprecation warning in v0.7\nThe syntax that I've used successfully:"], ['-10000']], [[' from sqlalchemy import event\n\nevent.listen(ModelObject.__table__,\n         \'after_create\',\n          DDL("CREATE UNIQUE INDEX term_year ON %(fullname)s "\n              "(EXTRACT(YEAR FROM start_date), term)",\n              on = \'postgresql\'\n              )\n         )\n']], ['Compound UniqueConstraint with a function'], 2], [(1510447, 0), [['You need to generate (author, otherauthor) pairs so you can add them as edges. The typical way to do that would be a nested iteration:'], ["This is a naïve implementation that includes self-loops (giving an author an edge connecting himself to himself), which you may or may not want; it also includes both (1,2) and (2,1), which if you're doing an undirected graph is redundant. (In Python 2.6, the built-in  permutations  generator also does this.) Here's a generator that fixes these things:"]], [[' for thing in things:\n    for otherthing in things:\n        add_edge(thing, otherthing)\n']], ['Follow-up on iterating over a graph using XML minidom'], 3], [(1510447, 1), [["This is a naïve implementation that includes self-loops (giving an author an edge connecting himself to himself), which you may or may not want; it also includes both (1,2) and (2,1), which if you're doing an undirected graph is redundant. (In Python 2.6, the built-in  permutations  generator also does this.) Here's a generator that fixes these things:"], ["I've not used NetworkX, but looking at the doc it seems to say you can call add_node on the same node twice (with nothing happening the second time). If so, you can discard the dict you were using to try to keep track of what nodes you'd inserted. Also, it seems to say that if you add an edge to an unknown node, it'll add that node for you automatically. So it should be possible to make the code much shorter:"]], [[' def pairs(l):\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            yield l[i], l[j]\n']], ['Follow-up on iterating over a graph using XML minidom'], 3], [(1510447, 2), [["I've not used NetworkX, but looking at the doc it seems to say you can call add_node on the same node twice (with nothing happening the second time). If so, you can discard the dict you were using to try to keep track of what nodes you'd inserted. Also, it seems to say that if you add an edge to an unknown node, it'll add that node for you automatically. So it should be possible to make the code much shorter:"], ['-10000']], [[" for conference in dom.getElementsByTagName('conference'):\n    var conf_name= node.getAttribute('name')\n    for paper in conference.getElementsByTagName('paper'):\n        authors= paper.getElementsByTagName('author')\n        auth_names= [author.firstChild.data.split('(')[0] for author in authors]\n\n        # Note author's conference attendance\n        #\n        for auth_name in auth_names:\n            G.add_edge(auth_name, conf_name)\n\n        # Note combinations of authors working on same paper\n        #\n        for auth_name, other_name in pairs(auth_names):\n            G.add_edge(auth_name, otherauth_name)\n"]], ['Follow-up on iterating over a graph using XML minidom'], 3], [(1511256, 0), [["If I'm understanding what you want correctly, you need to do this:"], ['Edit:  apparently I managed to miss the point completely. You can use something like this (maybe a bit too "magic" for my taste, but oh well):']], [['  BarManager(models.Manager):\n      use_for_related_fields = True\n']], ['Django: How to access originating instance from a RelatedManager?'], 2], [(1511256, 1), [['Edit:  apparently I managed to miss the point completely. You can use something like this (maybe a bit too "magic" for my taste, but oh well):'], ['-10000']], [[" class BarManager(models.Manager):\n    use_for_related_fields = True\n\n    def bar(self, foo=None):\n        if foo == None:\n            qs = Foo.objects.all()\n            for field_name, field_val in self.core_filters.items():\n                field_name = field_name.split('__')[1]\n                qs = qs.filter(**{ field_name: field_val })\n            foo = qs.get()\n        # do k00l stuff with foo\n"]], ['Django: How to access originating instance from a RelatedManager?'], 2], [(1511950, 0), [['Suppose the input is in string s; either from direct assignment or from file.read:'], ['Then you can this:']], [[' s="""dcenter: code=d1, loc=San Jose, x=100, y=100, ctype=ct1\ndcenter: code=d2, loc=San Ramon, x=300, y=200, ctype=ct2\nstorage: code=s1, locFrom=d1, x=50, y=50, rtype=rt1\nstorage: code=s2, locFrom=d1, x=-50,y=100, rtype=rt1"""\n']], ['Please help me with this program to parse a file into an XML file'], 2], [(1511950, 1), [['Then you can this:'], ["Not sure why d2 is missing from your sample output; I assume that's by mistake."]], [[' print \'<?xml version="1.0"?>\'\nprint "<dcenters>"\nfor line in s.splitlines():\n    type, fields = line.split(":")\n    params = fields.split(",")\n    code = params[0].split("=")[1].strip()\n    print \'<%s code="%s">\' % (type, code)\n    for p in params[1:]:\n        ptype, pvalue = p.strip().split("=")\n        print \'<%s> %s </%s>\' % (ptype, pvalue, ptype)\n    print \'</%s>\' % type\nprint "</dcenters>"\n']], ['Please help me with this program to parse a file into an XML file'], 2], [(1514457, 0), [['There is no direct implementation of this in the .NET framework, but you can define an extension method:'], ['Usage:']], [[' public static V SetDefault<K,V>(this IDictionary<K,V> dict, K key, V @default)\n{\n    V value;\n    if (!dict.TryGetValue(key, out value))\n    {\n        dict.Add(key, @default);\n        return @default;\n    }\n    else\n    {\n        return value;\n    }\n}\n']], ['C#: Does a dictionary in C# have something similar to the Python setdefault?'], 2], [(1514457, 1), [['Usage:'], ['-10000']], [[' string key;\nDictionary<string, int> dict;\n\ndict[key] = dict.SetDefault(key, 0) + 1;\n']], ['C#: Does a dictionary in C# have something similar to the Python setdefault?'], 2], [(1515357, 0), [['So, consider, for example:'], ["Here, we're overriding  generic_visit  to print the class name, but  also  calling up to the base class (so that all children will also be visited).  So for example...:"]], [[' >>> class v(ast.NodeVisitor):\n...   def generic_visit(self, node):\n...     print type(node).__name__\n...     ast.NodeVisitor.generic_visit(self, node)\n... \n']], ['Simple example of how to use ast.NodeVisitor?'], 7], [(1515357, 1), [["Here, we're overriding  generic_visit  to print the class name, but  also  calling up to the base class (so that all children will also be visited).  So for example...:"], ['emits:']], [[" >>> x = v()\n>>> t = ast.parse('d[x] += v[y, x]')\n>>> x.visit(t)\n"]], ['Simple example of how to use ast.NodeVisitor?'], 7], [(1515357, 2), [['emits:'], ["But suppose we didn't care for Load nodes (and children thereof -- if they had any;-). Then a simple way to deal with that might be, e.g.:"]], [[' Module\nAugAssign\nSubscript\nName\nLoad\nIndex\nName\nLoad\nStore\nAdd\nSubscript\nName\nLoad\nIndex\nTuple\nName\nLoad\nName\nLoad\nLoad\nLoad\n']], ['Simple example of how to use ast.NodeVisitor?'], 7], [(1515357, 3), [["But suppose we didn't care for Load nodes (and children thereof -- if they had any;-). Then a simple way to deal with that might be, e.g.:"], ["Now when we're visiting a Load node,  visit  dispatches, NOT to  generic_visit  any more, but to our new  visit_Load ... which doesn't do anything at all.  So:"]], [[' >>> class w(v):\n...   def visit_Load(self, node): pass\n... \n']], ['Simple example of how to use ast.NodeVisitor?'], 7], [(1515357, 4), [["Now when we're visiting a Load node,  visit  dispatches, NOT to  generic_visit  any more, but to our new  visit_Load ... which doesn't do anything at all.  So:"], ['or, suppose we also wanted to see the actual names for Name nodes; then...:']], [[' >>> y = w()\n>>> y.visit(t)\nModule\nAugAssign\nSubscript\nName\nIndex\nName\nStore\nAdd\nSubscript\nName\nIndex\nTuple\nName\nName\n']], ['Simple example of how to use ast.NodeVisitor?'], 7], [(1515357, 5), [['or, suppose we also wanted to see the actual names for Name nodes; then...:'], ['But, NodeVisitor is a class because this lets it store information during a visit. Suppose all we want is the set of names in a "module".  Then we don\'t need to override  generic_visit  any more, but rather...:']], [[" >>> class z(v):\n...   def visit_Name(self, node): print 'Name:', node.id\n... \n>>> z().visit(t)\nModule\nAugAssign\nSubscript\nName: d\nIndex\nName: x\nStore\nAdd\nSubscript\nName: v\nIndex\nTuple\nName: y\nName: x\nLoad\nLoad\n"]], ['Simple example of how to use ast.NodeVisitor?'], 7], [(1515357, 6), [['But, NodeVisitor is a class because this lets it store information during a visit. Suppose all we want is the set of names in a "module".  Then we don\'t need to override  generic_visit  any more, but rather...:'], ["This kind of thing is a more typical use case than ones requiring overrides of  generic_visit  -- normally, you're only interested in a few kinds of nodes, like we are here in Module and Name, so we can just override  visit_Module  and  visit_Name  and let ast's  visit  do the dispatching on our behalf."]], [[" >>> class allnames(ast.NodeVisitor):\n...   def visit_Module(self, node):\n...     self.names = set()\n...     self.generic_visit(node)\n...     print sorted(self.names)\n...   def visit_Name(self, node):\n...     self.names.add(node.id)\n... \n>>> allnames().visit(t)\n['d', 'v', 'x', 'y']\n"]], ['Simple example of how to use ast.NodeVisitor?'], 7], [(1515601, 0), [['You can use  eval . But be very careful! This opens up lots of security holes.'], ['If you want it callable:']], [[" >>> s = '3+4'\n>>> eval(s)\n7\n"]], ['How do you convert a string to a function in python?'], 2], [(1515601, 1), [['If you want it callable:'], ['More information on  eval   here .']], [[" >>> s = '3+4'\n>>> f = eval('lambda: ' + s)\n>>> f()\n7\n"]], ['How do you convert a string to a function in python?'], 2], [(1516249, 0), [['If your attributes are numeric, you have this.'], ["The  .sort()  method is stable: you can do multiple passes.  This is perhaps the simplest.  It's also remarkably fast."]], [[' def mixed_order( a ):\n    return ( a.attribute1, -a.attribute2 )\n\nsomeList.sort( key=mixed_order )\n']], ['Python: List Sorting with Multiple Attributes and Mixed Order'], 2], [(1516249, 1), [["The  .sort()  method is stable: you can do multiple passes.  This is perhaps the simplest.  It's also remarkably fast."], ['If this is the only sort, you can define your own special-purpose comparison operators.  Minimally, you need  __eq__  and  __lt__ .  The other four can be derived from these two by simple logic.']], [[' def key1( a ): return a.attribute1\ndef key2( a ): return a.attribute2\n\nsomeList.sort( key=key2, reverse=True )\nsomeList.sort( key=key1 )\n']], ['Python: List Sorting with Multiple Attributes and Mixed Order'], 2], [(1516795, 0), [["For your first question -- 'all tasks whose prerequisites are all complete':"], ['This will also include tasks with no prerequisites (as they have no incomplete prerequisites).  As a doctest (using your model definition), the following passes:']], [[" >>> Task.objects.exclude(prerequisites__status__in=['A','P','F'])\n"]], ['In Django, how do I filter based on all entities in a many-to-many relation instead of any?'], 2], [(1516795, 1), [['This will also include tasks with no prerequisites (as they have no incomplete prerequisites).  As a doctest (using your model definition), the following passes:'], ["This doesn't answer how many incomplete prerequisites each task has -- which you might need for display, optimization, etc. "]], [[" >>> a = Task.objects.create(status='C')\n>>> b = Task.objects.create(status='A')\n>>> b.prerequisites.add(a)\n>>> c = Task.objects.create(status='P')\n>>> c.prerequisites.add(b)\n>>> prerequisites_complete = Task.objects.exclude(prerequisites__status__in=['A','P','F'])\n>>> set([t.id for t in prerequisites_complete]) == set([a.id, b.id])\nTrue\n"]], ['In Django, how do I filter based on all entities in a many-to-many relation instead of any?'], 2], [(1517959, 0), [['in django, you can use:'], ['instead of:']], [[" request.FILES['file']\n"]], ['Python Image Uploading with AjaxUpload'], 2], [(1517959, 1), [['instead of:'], ['i did not know how to do in pylons...maybe it is the same concept..']], [[" request.POST['file']\n"]], ['Python Image Uploading with AjaxUpload'], 2], [(1518286, 0), [["As of Django 1.5,  LOGIN_URL  and  LOGIN_REDIRECT_URL  accept named URL patterns. That means you don't need to hardcode any urls in your settings."], ["For Django 1.5 - 1.9, you can also use the view function name, but this is not recommended because it is deprecated in Django 1.8 and won't work in Django 1.10+."]], [[" LOGIN_URL = 'login'  # name of url pattern\n"]], ['Django - use reverse url mapping in settings'], 6], [(1518286, 1), [["For Django 1.5 - 1.9, you can also use the view function name, but this is not recommended because it is deprecated in Django 1.8 and won't work in Django 1.10+."], ['For Django 1.4, you can could use  reverse_lazy']], [[" LOGIN_URL = 'django.contrib.auth.views.login' # path to view function\n"]], ['Django - use reverse url mapping in settings'], 6], [(1518286, 2), [['For Django 1.4, you can could use  reverse_lazy'], ['In urls.py, import settings:']], [[" LOGIN_URL = reverse_lazy('login')\n"]], ['Django - use reverse url mapping in settings'], 6], [(1518286, 3), [['In urls.py, import settings:'], ['Then add the url pattern']], [[' from django.conf import settings\n']], ['Django - use reverse url mapping in settings'], 6], [(1518286, 4), [['Then add the url pattern'], ['In the shell:']], [[' urlpatterns=(\'\',\n    ...\n    url(\'^%s$\' %settings.LOGIN_URL[1:], \'django.contrib.auth.views.login\', \n        name="login")\n    ...\n)\n']], ['Django - use reverse url mapping in settings'], 6], [(1518286, 5), [['In the shell:'], ['-10000']], [[" >>>from django.core.urlresolvers import reverse\n>>>reverse('login')\n'/accounts/login/'\n"]], ['Django - use reverse url mapping in settings'], 6], [(1518522, 0), [["With so many solutions proposed, I'm amazed nobody's proposed what I'd consider an obvious one (for non-hashable but comparable elements) -- [ itertools.groupby ][1].   itertools  offers fast, reusable functionality, and lets you delegate some tricky logic to well-tested standard library components.  Consider for example:"], ["This could be written more concisely, of course, but I'm aiming for maximal clarity.  The two  print  statements can be uncommented to better see the machinery in action; for example,  with  prints uncommented:"]], [[' import itertools\nimport operator\n\ndef most_common(L):\n  # get an iterable of (item, iterable) pairs\n  SL = sorted((x, i) for i, x in enumerate(L))\n  # print \'SL:\', SL\n  groups = itertools.groupby(SL, key=operator.itemgetter(0))\n  # auxiliary function to get "quality" for an item\n  def _auxfun(g):\n    item, iterable = g\n    count = 0\n    min_index = len(L)\n    for _, where in iterable:\n      count += 1\n      min_index = min(min_index, where)\n    # print \'item %r, count %r, minind %r\' % (item, count, min_index)\n    return count, -min_index\n  # pick the highest-count/earliest item\n  return max(groups, key=_auxfun)[0]\n']], ['Python most common element in a list'], 5], [(1518522, 1), [["This could be written more concisely, of course, but I'm aiming for maximal clarity.  The two  print  statements can be uncommented to better see the machinery in action; for example,  with  prints uncommented:"], ['emits:']], [[" print most_common(['goose', 'duck', 'duck', 'goose'])\n"]], ['Python most common element in a list'], 5], [(1518522, 2), [['emits:'], ['This code could be much simpler if it worried a  little  less about big-O issues in time and space, e.g....:']], [[" SL: [('duck', 1), ('duck', 2), ('goose', 0), ('goose', 3)]\nitem 'duck', count 2, minind 1\nitem 'goose', count 2, minind 0\ngoose\n"]], ['Python most common element in a list'], 5], [(1518522, 3), [['This code could be much simpler if it worried a  little  less about big-O issues in time and space, e.g....:'], ['Finally, for those who prefer "oneliners" to clarity and performance, a bonus 1-liner version with suitably mangled names:-).']], [[' def most_common(L):\n  groups = itertools.groupby(sorted(L))\n  def _auxfun((item, iterable)):\n    return len(list(iterable)), -L.index(item)\n  return max(groups, key=_auxfun)[0]\n']], ['Python most common element in a list'], 5], [(1518522, 4), [['Finally, for those who prefer "oneliners" to clarity and performance, a bonus 1-liner version with suitably mangled names:-).'], ['-10000']], [[' from itertools import groupby as g\ndef most_common_oneliner(L):\n  return max(g(sorted(L)), key=lambda(x, v):(len(list(v)),-L.index(x)))[0]\n']], ['Python most common element in a list'], 5], [(1518915, 0), [['I believe that in both Java and .NET, if you allocate a lot of smallish objects in quick succession within a single thread then those objects are  likely  to have good locality of reference. When the GC compacts a heap, this may improve - or it may potentially become worse, if a heap with'], ['is compacted to']], [[' A B C D E\n']], ['In managed code, how do I achieve good locality of reference?'], 2], [(1518915, 1), [['is compacted to'], ['(where C is collected) - suddenly A and B, which may have been "close" before, are far apart. I don\'t know whether this actually happens in any garbage collector (there are loads around!) but it\'s possible.']], [[' A D E B\n']], ['In managed code, how do I achieve good locality of reference?'], 2], [(1519589, 0), [['To install eggs from that directory, type:'], ['or.']], [[' $ easy_install -H None -f http://server/vdir TheEggToInstall\n']], ['How do you host your own egg repository?'], 2], [(1519589, 1), [['or.'], ['-H None  means do not allow egg download from any host (except the one named in  -f ).']], [[' $ easy_install -H None -f /path/to/directory TheEggToInstall\n']], ['How do you host your own egg repository?'], 2], [(1520442, 0), [['something like that: '], ['Testing with Python as Application (in Eclipse) / after remark from  Oleg Tarasenko :']], [[' import subprocess\nbufsize =1024\ninitial_data = get_initial_data_from_db()\np = subprocess.Popen("application -parameter1", shell=True, bufsize=bufsize,\n          stdin=subprocess.PIPE,   close_fds=True)\n\np.stdin.write(initial_data)\nprint p.communicate()\n']], ['Python: Running command line application to the script. Sending parameters in files'], 3], [(1520442, 1), [['Testing with Python as Application (in Eclipse) / after remark from  Oleg Tarasenko :'], ['Output:']], [[' import subprocess\n\ninitial_data = """\nimport sys\nprint sys.path\n"""\n\nfor test in [1,2,3] :\n    p = subprocess.Popen("C:/python26/python", shell=True, bufsize=512,\n          stdin=subprocess.PIPE,  stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)\n\n    p.stdin.write(initial_data)\n    print p.communicate()\n']], ['Python: Running command line application to the script. Sending parameters in files'], 3], [(1520442, 2), [['Output:'], ['-10000']], [[' ("[\'\', \'C:\\\\\\\\dev\\\\\\\\ide\\\\\\\\eclipse\\\\\\\\plugins\\\\\\\\org.python.pydev_1.5.0.1251989166\\\\\\\\PySrc\\\\\\\\pydev_sitecustomize\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\libs\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jacob.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jiffie.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jaxen-1.1.1.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\swt.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\mysql-connector-java-3.0.17-ga-bin.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\qpslib.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\ifxjdbc.jar\', \'C:\\\\\\\\server\\\\\\\\jboss\\\\\\\\client\\\\\\\\jbossall-client.jar\', \'C:\\\\\\\\usr\\\\\\\\local\\\\\\\\machine\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\\\\\\\\config\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\oknos\\\\\\\\tickcardimp\\\\\\\\bin\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\common\\\\\\\\jar\\\\\\\\shared.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\libs\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jacob.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jiffie.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jaxen-1.1.1.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\swt.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\mysql-connector-java-3.0.17-ga-bin.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\qpslib.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\ifxjdbc.jar\', \'C:\\\\\\\\server\\\\\\\\jboss\\\\\\\\client\\\\\\\\jbossall-client.jar\', \'C:\\\\\\\\usr\\\\\\\\local\\\\\\\\machine\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\\\\\\\\config\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\oknos\\\\\\\\tickcardimp\\\\\\\\bin\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\common\\\\\\\\jar\\\\\\\\shared.jar\', \'C:\\\\\\\\jython\\\\\\\\jython2.5.0\\\\\\\\Lib\', \'C:\\\\\\\\jython\\\\\\\\jython2.5.0\\\\\\\\Lib\\\\\\\\site-packages\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\rt.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\jsse.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\jce.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\charsets.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\dnsns.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\localedata.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\sunjce_provider.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\sunpkcs11.jar\', \'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\python26.zip\', \'C:\\\\\\\\python26\\\\\\\\DLLs\', \'C:\\\\\\\\python26\\\\\\\\lib\', \'C:\\\\\\\\python26\\\\\\\\lib\\\\\\\\plat-win\', \'C:\\\\\\\\python26\\\\\\\\lib\\\\\\\\lib-tk\', \'C:\\\\\\\\python26\']\\r\\n", "\'import site\' failed; use -v for traceback\\r\\n")\n("[\'\', \'C:\\\\\\\\dev\\\\\\\\ide\\\\\\\\eclipse\\\\\\\\plugins\\\\\\\\org.python.pydev_1.5.0.1251989166\\\\\\\\PySrc\\\\\\\\pydev_sitecustomize\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\libs\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jacob.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jiffie.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jaxen-1.1.1.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\swt.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\mysql-connector-java-3.0.17-ga-bin.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\qpslib.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\ifxjdbc.jar\', \'C:\\\\\\\\server\\\\\\\\jboss\\\\\\\\client\\\\\\\\jbossall-client.jar\', \'C:\\\\\\\\usr\\\\\\\\local\\\\\\\\machine\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\\\\\\\\config\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\oknos\\\\\\\\tickcardimp\\\\\\\\bin\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\common\\\\\\\\jar\\\\\\\\shared.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\libs\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jacob.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jiffie.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jaxen-1.1.1.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\swt.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\mysql-connector-java-3.0.17-ga-bin.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\qpslib.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\ifxjdbc.jar\', \'C:\\\\\\\\server\\\\\\\\jboss\\\\\\\\client\\\\\\\\jbossall-client.jar\', \'C:\\\\\\\\usr\\\\\\\\local\\\\\\\\machine\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\\\\\\\\config\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\oknos\\\\\\\\tickcardimp\\\\\\\\bin\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\common\\\\\\\\jar\\\\\\\\shared.jar\', \'C:\\\\\\\\jython\\\\\\\\jython2.5.0\\\\\\\\Lib\', \'C:\\\\\\\\jython\\\\\\\\jython2.5.0\\\\\\\\Lib\\\\\\\\site-packages\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\rt.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\jsse.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\jce.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\charsets.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\dnsns.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\localedata.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\sunjce_provider.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\sunpkcs11.jar\', \'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\python26.zip\', \'C:\\\\\\\\python26\\\\\\\\DLLs\', \'C:\\\\\\\\python26\\\\\\\\lib\', \'C:\\\\\\\\python26\\\\\\\\lib\\\\\\\\plat-win\', \'C:\\\\\\\\python26\\\\\\\\lib\\\\\\\\lib-tk\', \'C:\\\\\\\\python26\']\\r\\n", "\'import site\' failed; use -v for traceback\\r\\n")\n("[\'\', \'C:\\\\\\\\dev\\\\\\\\ide\\\\\\\\eclipse\\\\\\\\plugins\\\\\\\\org.python.pydev_1.5.0.1251989166\\\\\\\\PySrc\\\\\\\\pydev_sitecustomize\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\libs\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jacob.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jiffie.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jaxen-1.1.1.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\swt.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\mysql-connector-java-3.0.17-ga-bin.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\qpslib.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\ifxjdbc.jar\', \'C:\\\\\\\\server\\\\\\\\jboss\\\\\\\\client\\\\\\\\jbossall-client.jar\', \'C:\\\\\\\\usr\\\\\\\\local\\\\\\\\machine\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\\\\\\\\config\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\oknos\\\\\\\\tickcardimp\\\\\\\\bin\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\common\\\\\\\\jar\\\\\\\\shared.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\libs\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jacob.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jiffie.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\jaxen-1.1.1.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\swt.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\script_jy\\\\\\\\jars\\\\\\\\mysql-connector-java-3.0.17-ga-bin.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\qpslib.jar\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\nlibs\\\\\\\\ifxjdbc.jar\', \'C:\\\\\\\\server\\\\\\\\jboss\\\\\\\\client\\\\\\\\jbossall-client.jar\', \'C:\\\\\\\\usr\\\\\\\\local\\\\\\\\machine\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\\\\\\\\config\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\\\\\\\\build\\\\\\\\components\\\\\\\\jobcontrol\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\event\\\\\\\\src\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\oknos\\\\\\\\tickcardimp\\\\\\\\bin\', \'C:\\\\\\\\dev\\\\\\\\ws\\\\\\\\central\\\\\\\\head\\\\\\\\common\\\\\\\\jar\\\\\\\\shared.jar\', \'C:\\\\\\\\jython\\\\\\\\jython2.5.0\\\\\\\\Lib\', \'C:\\\\\\\\jython\\\\\\\\jython2.5.0\\\\\\\\Lib\\\\\\\\site-packages\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\rt.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\jsse.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\jce.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\charsets.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\dnsns.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\localedata.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\sunjce_provider.jar\', \'C:\\\\\\\\dev\\\\\\\\java\\\\\\\\jdk1.5.0_17\\\\\\\\jre\\\\\\\\lib\\\\\\\\ext\\\\\\\\sunpkcs11.jar\', \'C:\\\\\\\\WINDOWS\\\\\\\\system32\\\\\\\\python26.zip\', \'C:\\\\\\\\python26\\\\\\\\DLLs\', \'C:\\\\\\\\python26\\\\\\\\lib\', \'C:\\\\\\\\python26\\\\\\\\lib\\\\\\\\plat-win\', \'C:\\\\\\\\python26\\\\\\\\lib\\\\\\\\lib-tk\', \'C:\\\\\\\\python26\']\\r\\n", "\'import site\' failed; use -v for traceback\\r\\n")\n']], ['Python: Running command line application to the script. Sending parameters in files'], 3], [(1520953, 0), [["Here's an example WSGI app that sends the current time to the client every second:"], ['If I go to the URL in my browser, I see this:']], [[' import time\n\ndef application(environ, start_response):\n    start_response(\'200 OK\', [(\'content-type\', \'text/plain\')])\n    while True:\n        time.sleep(1.0)\n        yield time.ctime() + \'\\n\'\n\nif __name__ == \'__main__\':\n    from wsgiref.simple_server import make_server\n    print "Serving on http://localhost:4000..."\n    make_server(\'localhost\', 4000, application).serve_forever()\n']], ['Basic Comet in Python using just std lib'], 2], [(1520953, 1), [['If I go to the URL in my browser, I see this:'], ["The problem with this approach is that you can't keep very many connections like this open at the same time. In fact, the  wsgiref  server is single-threaded, so you can only have one connection open at any time. If this is a problem then you must use a multithreaded (e.g. CherryPy) or non-blocking server (e.g. Twisted, Tornado, etc.)."]], [[' Mon Oct 05 12:21:26 2009\nMon Oct 05 12:21:27 2009\nMon Oct 05 12:21:28 2009\nMon Oct 05 12:21:29 2009\nMon Oct 05 12:21:30 2009\n(...a new line appears every second...)\n']], ['Basic Comet in Python using just std lib'], 2], [(1521655, 0), [['I believe you want this:'], ['To make  isinstance() work with classes you need to define them as new-style classes:']], [[" class CakeFactory:\n    @staticmethod\n    def create(name):\n        if name == 'banana':\n            return BananaCake()         # call the constructor\n        elif name == 'chocolate':\n            return ChocolateCake()      # call the constructor\n        else:\n            return None\n"]], ["Using Python's isinstance"], 2], [(1521655, 1), [['To make  isinstance() work with classes you need to define them as new-style classes:'], ['You should declare all your classes as new-style classes anyway, there is a lot of extra functionality and old-style classes were dropped in Python 3.']], [[' class ChocolateCake(object):\n    pass\n']], ["Using Python's isinstance"], 2], [(1522960, 0), [["It appears as though you're looking for something like this:"], ['A slightly shorter way to do the same thing is:']], [[' [[1 if j <= 1 else 2 for i in range(3)] for j in range(3)]\n']], ['Python: List comprehension to assign different values'], 2], [(1522960, 1), [['A slightly shorter way to do the same thing is:'], ['-10000']], [[' [[1 if j <= 1 else 2]*3 for j in range(3)]\n']], ['Python: List comprehension to assign different values'], 2], [(1525611, 0), [['First consider the part of the payment you want to pay off.'], ['The monthly payment is given by:']], [[' Principal = start - end\n']], ['Python: smarter way to calculate loan payments'], 5], [(1525611, 1), [['The monthly payment is given by:'], ['You then need to consider the extra interest. Which is just equal to the remaining principal times the monthly interest']], [[' pay_a = (interest / 12) / (1 - (1+interest/12) ^ (-months))) * Principal\n']], ['Python: smarter way to calculate loan payments'], 5], [(1525611, 2), [['You then need to consider the extra interest. Which is just equal to the remaining principal times the monthly interest'], ['So the total payment is']], [[' pay_b = interest / 12 * end\n']], ['Python: smarter way to calculate loan payments'], 5], [(1525611, 3), [['So the total payment is'], ['On the example you gave of ']], [[' payment = (interest / 12) * (1 / (1 - (1+interest/12) ^ (-months))) * Principal + end)\n']], ['Python: smarter way to calculate loan payments'], 5], [(1525611, 4), [['On the example you gave of '], ['When I tested these values in Excel, after 70 payments the remaing loan was 50,000. This is assuming you pay the interest on the notional before the payment is made each month.']], [[' Start: 100000\nEnd:  50000\nMonths: 70\nInterest: 8% \npay_a = 896.20\npay_b = 333.33\nPayment = 1229.54\n']], ['Python: smarter way to calculate loan payments'], 5], [(1527641, 0), [['Javascript:'], ['Django']], [[' $.getJSON("/abc/?x="+3,\n    function(data){\n      if (data["HTTPRESPONSE"] == 1)\n      {\n          alert("success")\n      }\n    });\n']], ['How to use JQuery and Django (ajax + HttpResponse)?'], 3], [(1527641, 1), [['Django'], ['An alternative View suggested by Issy (cute because it follows the DRY principle)']], [[' #you might need to easy_install this\nimport json \n\ndef your_view(request):\n    # You can dump a lot of structured data into a json object, such as \n    # lists and touples\n    json_data = json.dumps({"HTTPRESPONSE":1})\n    # json data is just a JSON string now. \n    return HttpResponse(json_data, mimetype="application/json")\n']], ['How to use JQuery and Django (ajax + HttpResponse)?'], 3], [(1527641, 2), [['An alternative View suggested by Issy (cute because it follows the DRY principle)'], ['-10000']], [[' def updates_after_t(request, id): \n    response = HttpResponse() \n    response[\'Content-Type\'] = "text/javascript" \n    response.write(serializers.serialize("json", \n                   TSearch.objects.filter(pk__gt=id))) \n    return response           \n']], ['How to use JQuery and Django (ajax + HttpResponse)?'], 3], [(1527689, 0), [['-10000'], ['You can use it like this:']], [[' >>> import sys\n>>> class Quitter(object):\n...     def __repr__(self):\n...         sys.exit()\n... \n>>> exit = Quitter()\n']], ['exit from ipython'], 4], [(1527689, 1), [['You can use it like this:'], ['I dont use  ipython  myself, but it seems to have some wierd  sys.exit  handler.\nThe solution I found is as follows:']], [[' >>> exit\n']], ['exit from ipython'], 4], [(1527689, 2), [['I dont use  ipython  myself, but it seems to have some wierd  sys.exit  handler.\nThe solution I found is as follows:'], ['Usage:']], [[" In [1]: type(exit).__repr__ = lambda s: setattr(s.shell, 'exit_now', True) or ''\n"]], ['exit from ipython'], 4], [(1527689, 3), [['Usage:'], ['-10000']], [[' In [2]: exit\n']], ['exit from ipython'], 4], [(1528656, 0), [['That means your original code does something like:'], ['If for whatever reason you needed to do this on a QuerySet rather than just using get(), you could write:']], [[' thechan = Score.objects.filter(content=44)[0:1]\nthechan[0].custom_score = 2\n\nthechan = Score.objects.filter(content=44)[0:1]\nthechan[0].save() # saves an unmodified object back to the DB, no effective change\n']], ["Why can't I save an object in Django?"], 2], [(1528656, 1), [['If for whatever reason you needed to do this on a QuerySet rather than just using get(), you could write:'], ['instead.  This distinction becomes a bit more important if you are, say, iterating over the elements of a QuerySet instead of dealing with a single record.']], [[' thechan = Score.objects.filter(content=44)[0]\nthechan.custom_score = 2\nthechan.save()\n']], ["Why can't I save an object in Django?"], 2], [(1528711, 0), [['-10000'], ['Here\'s a more general "N at a time" iterator-wrapper:']], [[" import itertools\n\nwith open(fn) as f:\n  for line, line2 in itertools.izip_longest(f, f, fillvalue=''):\n    print line, line2\n"]], ['reading lines 2 at a time'], 4], [(1528711, 1), [['Here\'s a more general "N at a time" iterator-wrapper:'], ['itertools  is generally the best way to go, but, if you insisted on implementing it by yourself, then:']], [[' def natatime(itr, fillvalue=None, n=2):\n  return itertools.izip_longest(*(iter(itr),)*n, fillvalue=fillvalue)\n']], ['reading lines 2 at a time'], 4], [(1528711, 2), [['itertools  is generally the best way to go, but, if you insisted on implementing it by yourself, then:'], ['In 2.5, I think the best approach is actually not a generator, but another itertools-based solution:']], [[' def natatime_no_itertools(itr, fillvalue=None, n=2):\n  x = iter(itr)\n  for item in x:\n    yield (item,) + tuple(next(x, fillvalue) for _ in xrange(n-1))\n']], ['reading lines 2 at a time'], 4], [(1528711, 3), [['In 2.5, I think the best approach is actually not a generator, but another itertools-based solution:'], ["(since 2.5 doesn't have the built-in  next , as well as missing  izip_longest )."]], [[' def natatime_25(itr, fillvalue=None, n=2):\n  x = itertools.chain(iter(itr), (fillvalue,) * (n-1))\n  return itertools.izip(*(x,)*n)\n']], ['reading lines 2 at a time'], 4], [(1530245, 0), [['Example in C++:'], ['in python:']], [[" char *ch = new char[100];\nch[0]='a';\nch[1]='b';\n//....\n// somewhere else in your program you need to release the alocated memory.\ndelete [] ch; \n// use *delete ch;* if you've initialized *ch with new char; \n"]], ['I heard that Python has automated "garbage collection" , but C++ does not. What does that mean?'], 2], [(1530245, 1), [['in python:'], ['python takes care about "a" object by itself.']], [[' def fun():\n    a=[1, 2] #dynamic allocation\n    a.append(3)\n    return a[0]\n']], ['I heard that Python has automated "garbage collection" , but C++ does not. What does that mean?'], 2], [(1530430, 0), [['To get two decimals, use'], ['To get a comma, use  replace() :']], [[" '%.2f' % 1.2333333\n"]], ['How do I change my float into a two decimal number with a comma as a decimal point separator in python?'], 3], [(1530430, 1), [['To get a comma, use  replace() :'], ['A second option would be to  change the locale  to some place which uses a comma and then use  locale.format() :']], [[" ('%.2f' % 1.2333333).replace('.', ',')\n"]], ['How do I change my float into a two decimal number with a comma as a decimal point separator in python?'], 3], [(1530430, 2), [['A second option would be to  change the locale  to some place which uses a comma and then use  locale.format() :'], ['-10000']], [[" locale.setlocale(locale.LC_ALL, 'FR')\nlocale.format('%.2f', 1.2333333)\n"]], ['How do I change my float into a two decimal number with a comma as a decimal point separator in python?'], 3], [(1530598, 0), [['Therefore, it seems to me that mathematical functions that should work on usual numbers  and  NumPy arrays  and  their counterparts with uncertainties are best defined in a separate name space.  For instance, the user could do:'], ['or']], [[' from uncertainties import sin\n']], ['Definition of mathematical operations (sin…) on NumPy arrays containing objects'], 4], [(1530598, 1), [['or'], ['For optimization purposes, an alternative might be to provide two distinct sets of mathematical functions: those that generalize functions to simple numbers with uncertainties, and those that generalize them to arrays with uncertainties:']], [[' from uncertainties import *  # sin, cos, etc.\n']], ['Definition of mathematical operations (sin…) on NumPy arrays containing objects'], 4], [(1530598, 2), [['For optimization purposes, an alternative might be to provide two distinct sets of mathematical functions: those that generalize functions to simple numbers with uncertainties, and those that generalize them to arrays with uncertainties:'], ['or']], [[' from uncertainties.math_ops import *  # Work on scalars and scalars with uncertainty\n']], ['Definition of mathematical operations (sin…) on NumPy arrays containing objects'], 4], [(1530598, 3), [['or'], ['-10000']], [[' from uncertainties.numpy_ops import *  # Work on everything (scalars, arrays, numbers with uncertainties, arrays with uncertainties)\n']], ['Definition of mathematical operations (sin…) on NumPy arrays containing objects'], 4], [(1532488, 0), [['(1) Just like you described: Try something and work around the exception for old versions. For example, you could try to import the  json  module and import a userland implementation if this fails:'], ['This is an example from Django (they use this technique often):']], [[' try:\n    import json\nexcept ImportError:\n    import myutils.myjson as json\n']], ['Supporting Multiple Python Versions In Your Code?'], 3], [(1532488, 1), [['This is an example from Django (they use this technique often):'], ['(2) Explicitely compare the version of the Python interpreter:']], [[' try:\n    reversed\nexcept NameError:\n    from django.utils.itercompat import reversed     # Python 2.3 fallback\n']], ['Supporting Multiple Python Versions In Your Code?'], 3], [(1532488, 2), [['(2) Explicitely compare the version of the Python interpreter:'], ['sys.version_info  is a tuple that can easily be compared with similar version tuples.']], [[' import sys\nif sys.version_info < (2, 6, 0):\n    # Do stuff for old version...\nelse:\n    # Do 2.6+ stuff\n']], ['Supporting Multiple Python Versions In Your Code?'], 3], [(1534407, 0), [['You should change'], ['to']], [[' def __init__(self, resources=[]):\n    self._resources = resources\n']], ['Python object initialization bug. Or am I misunderstanding how objects work?'], 2], [(1534407, 1), [['to'], ["and all will be better. This is a detail in the way default arguments are handled if they're mutable. There's some more information in the discussion section of  this page ."]], [[' def __init__(self, resources=None):\n    if resources is None:\n        resources = []\n    self._resources = resources\n']], ['Python object initialization bug. Or am I misunderstanding how objects work?'], 2], [(1534542, 0), [["You can sort the keys the way that you want, by splitting them on '.' and then converting each of the components into an integer, like this:"], ['which returns this:']], [[" sorted(mydict.keys(), key=lambda a:map(int,a.split('.')))\n"]], ['Can I sort text by its numeric value in Python?'], 4], [(1534542, 1), [['which returns this:'], ['You could also sort the result of mydict.items(), very similarly:']], [[" ['0',\n '1',\n '2.0',\n '2.1',\n '3',\n '4.0.0',\n '4.0.1',\n '5',\n '10',\n '11.0',\n '11.1',\n '12.0',\n '12.1.0',\n '12.1.1']\n"]], ['Can I sort text by its numeric value in Python?'], 4], [(1534542, 2), [['You could also sort the result of mydict.items(), very similarly:'], ['This gives you a sorted list of (key, value) pairs, like this:']], [[" sorted(mydict.items(), key=lambda a:map(int,a[0].split('.')))\n"]], ['Can I sort text by its numeric value in Python?'], 4], [(1534542, 3), [['This gives you a sorted list of (key, value) pairs, like this:'], ['-10000']], [[" [('0', 10),\n ('1', 23),\n ('2.0', 321),\n ('2.1', 3231),\n ('3', 3),\n # ...\n ('12.1.1', 2)]\n"]], ['Can I sort text by its numeric value in Python?'], 4], [(1537161, 0), [['-10000'], ['The results in my system:']], [[' import urllib2\nimport time\n\ndef report(start, size, text):\n    total = time.time() - start\n    print "%s reading took %d seconds, transfer rate %.2f KBPS" % (\n            text, total, (size / 1024.0) / total)\n\nstart = time.time()\nurl = (\'http://itc.conversationsnetwork.org/audio/download/\'\n       \'ITC.SO-Episode69-2009.09.29.mp3\')\nf = urllib2.urlopen(url)\nstart = time.time()\ndata = f.read() # read all data in a single, blocking operation\nreport(start, len(data), \'All data\')\nf.close()\n\nf = urllib2.urlopen(url)\nstart = time.time()\nwhile True:\n    chunk = f.read(4096) # read a chunk\n    if not chunk:\n        break\nreport(start, len(data), \'Chunked\')\nf.close()\n']], ['Reading from sockets and download speed'], 2], [(1537161, 1), [['The results in my system:'], ['So for my system, 2 megabit connection, file size, server chosen, it is not much of a difference if I used chunked reading or not.']], [[' All data reading took 137 seconds, transfer rate 230.46 KBPS\nChunked reading took 137 seconds, transfer rate 230.49 KBPS\n']], ['Reading from sockets and download speed'], 2], [(1540049, 0), [['The most efficient:'], ['The easiest to read:']], [[' items = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfor index, item in enumerate(items):\n    if not (item % 2):\n        items[index] = None\n']], ['Replace values in list using Python'], 2], [(1540049, 1), [['The easiest to read:'], ['-10000']], [[' new_items = [x if x % 2 else None for x in items]\n']], ['Replace values in list using Python'], 2], [(1540519, 0), [['Python, simplest:'], ["Of course normally we'd want to get the limit numerically rather than analytically, so the normal way to loop would be rather different -- and best encapsulated in a higher-order function...:"]], [[" def a(n):\n  if n == 0: return 1\n  return 1 - 1 / float(a(n-1) + 3)\n\n# limit is sqrt(3) - 1\nlimit = 3.0 ** 0.5 - 1.0\n\n# get 9 digits' precision\ni = 0\nwhile abs(a(i) - limit) > 1.0e-9:\n  i += 1\n\nprint i\n"]], ['Recurrence sequence in Java / Python / Mathematica'], 5], [(1540519, 1), [["Of course normally we'd want to get the limit numerically rather than analytically, so the normal way to loop would be rather different -- and best encapsulated in a higher-order function...:"], ['Nontrivial looping logic is usually best encapsulated in a generator:']], [[" # get a function's limit numerically\ndef limit(f, eps=1.0e-11):\n  previous_value = f(0)\n  next_value = f(1)\n  i = 2\n  while abs(next_value - previous_value) > eps:\n    previous_value = next_value\n    next_value = f(i)\n    i += 1\n  return next_value\n"]], ['Recurrence sequence in Java / Python / Mathematica'], 5], [(1540519, 2), [['Nontrivial looping logic is usually best encapsulated in a generator:'], ['with the help of this generator, the  limit  HOF becomes much simpler:']], [[' def next_prev(f):\n  previous_value = f(0)\n  i = 1\n  while True:\n    next_value = f(i)\n    yield next_value, previous_value\n    i += 1\n    previous_value = next_value\n']], ['Recurrence sequence in Java / Python / Mathematica'], 5], [(1540519, 3), [['with the help of this generator, the  limit  HOF becomes much simpler:'], ['Last but not least,  itertools  often offers a good alternative to generators, letting you encapsulate finicky iteration logic in speedy ways (though it does take some getting used to...;-):']], [[' def limit(f, eps=1.0e-11):\n  for next_value, previous_value in next_prev(f):\n    if abs(next_value - previous_value) < eps:\n      return next_value\n']], ['Recurrence sequence in Java / Python / Mathematica'], 5], [(1540519, 4), [['Last but not least,  itertools  often offers a good alternative to generators, letting you encapsulate finicky iteration logic in speedy ways (though it does take some getting used to...;-):'], ['-10000']], [[' import itertools\n\ndef next_prev(f):\n  values = itertools.imap(f, itertools.count())\n  prv, nxt = itertools.tee(values)\n  nxt.next()\n  return itertools.izip(prv, nxt)\n']], ['Recurrence sequence in Java / Python / Mathematica'], 5], [(1541273, 0), [["I'm not sure how this behavior contradicts the documentation, because there's some very clear methods on Popen that seem to indicate it is not waited for, like:"], ["To wait for the program to finish, I'd recommend using  subprocess 's convenience method,  subprocess.call , or using  communicate  on a  Popen  object (for the case when you need stdout).  You are already doing this for your second call."]], [[' Popen.wait()\n  Wait for child process to terminate. Set and return returncode attribute.\n']], ['Why is subprocess.Popen not waiting until the child process terminates?'], 4], [(1541273, 1), [["To wait for the program to finish, I'd recommend using  subprocess 's convenience method,  subprocess.call , or using  communicate  on a  Popen  object (for the case when you need stdout).  You are already doing this for your second call."], ["Additionally, in most cases, you do not need to run the command in a shell.  This is one of those cases, but you'll have to rewrite your command like a sequence.  Doing it that way also allows you to avoid traditional shell injection and worry less about quoting, like so:"]], [[' ### START MAIN\n# copy some rows from a source table to a destination table\n# note that the destination table is empty when this script is run\ncmd = \'mysql -u ve --skip-column-names --batch --execute="insert into destination (select * from source limit 100000)" test\'\nsubprocess.call(cmd)\n\n# check to see how many rows exist in the destination table\ncmd = \'mysql -u ve --skip-column-names --batch --execute="select count(*) from destination" test\'\nprocess = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\ntry: count = (int(process.communicate()[0][:-1]))\nexcept: count = 0\n']], ['Why is subprocess.Popen not waiting until the child process terminates?'], 4], [(1541273, 2), [["Additionally, in most cases, you do not need to run the command in a shell.  This is one of those cases, but you'll have to rewrite your command like a sequence.  Doing it that way also allows you to avoid traditional shell injection and worry less about quoting, like so:"], ["This will even work, and will not inject as you'd expect:"]], [[' prog = ["mysql", "-u", "ve", "--execute", \'insert into foo values ("snargle", 2)\']\nsubprocess.call(prog)\n']], ['Why is subprocess.Popen not waiting until the child process terminates?'], 4], [(1541273, 3), [["This will even work, and will not inject as you'd expect:"], ["Try it interactively.  You avoid the possibilities of shell injection, particularly if you're accepting user input.  I suspect you're using the less-awesome string method of communicating with subprocess because you ran into trouble getting the sequences to work :^)"]], [[' prog = ["printf", "%s", "<", "/etc/passwd"]\nsubprocess.call(prog)\n']], ['Why is subprocess.Popen not waiting until the child process terminates?'], 4], [(1542551, 0), [['First point: your example code'], ['would be much more readable as:']], [[' data = [1,2,3]\noutput = ((lambda x: x + x)\n          (data[2]))\n']], ['binding local variables in python'], 5], [(1542551, 1), [['would be much more readable as:'], ['but anyway, in this concrete case, using a lambda is total overkill, overcomplexificated, and mostly inefficient. A braindead']], [[' data = [1, 2, 3]\noutput = (lambda x=data[2] : x +x)()\n']], ['binding local variables in python'], 5], [(1542551, 2), [['but anyway, in this concrete case, using a lambda is total overkill, overcomplexificated, and mostly inefficient. A braindead'], ['Now wrt/ to local bindings / namespaces, the usual solution is to use... functions - eventually nested. While 100% object (as in "everything is an object"), Python is not pure object, and plain functions are just fine. FWIW, even for "scripts", you should put your logic in a function then call it - function\'s local namespace access is faster than "global" (really: module level) namespace access. The canonical pattern is']], [[' output = data[2] + data[2]\n']], ['binding local variables in python'], 5], [(1542551, 3), [['Now wrt/ to local bindings / namespaces, the usual solution is to use... functions - eventually nested. While 100% object (as in "everything is an object"), Python is not pure object, and plain functions are just fine. FWIW, even for "scripts", you should put your logic in a function then call it - function\'s local namespace access is faster than "global" (really: module level) namespace access. The canonical pattern is'], ['Note also that nested functions can also access the enclosing namespace, ie']], [[" import whatever\n\ndef some_func(args):\n    code_here\n\ndef some_other_func(args)\n    code_here\n\ndef main(args):\n    parse_args\n    some_func(something)\n    some_other_func(something_else)\n    return some_exit_code\n\nif __name__ == '__main__'\n    import sys\n    sys.exit(main(sys.argv))         \n"]], ['binding local variables in python'], 5], [(1542551, 4), [['Note also that nested functions can also access the enclosing namespace, ie'], ['HTH']], [[' def main():\n    data = [1, 2, 3]\n    def foo():\n       x = data[2]\n       return x + x\n    print foo()\n    data = [4, 5, 6]\n    print foo()\n    # if you want the nested function to close over its arguments:\n    def bar(data=data):\n       x = data[2]\n       return x + x\n    print bar()\n    data = [7, 8, 9]\n    print bar()\n']], ['binding local variables in python'], 5], [(1543456, 0), [["You can use  list comprehensions  for this. You need to match the items from the two lists, for which the  zip  function is used. This will generate a list of tuples, where each tuple contains one item from each of the original lists (i.e.,  [(11, 'one'), ...] ). Once you have this, you can iterate over the result, check if the first element is below 0 and return the second element. See the linked Python docs for more details about the syntax."], ['The actual problem seems to be about finding items in the  msg  list that don\'t contain the string  "one" . This can be done directly:']], [[' [y for (x, y) in zip(a, msg) if x < 0]\n']], ['simple dropping elements from the list in python'], 2], [(1543456, 1), [['The actual problem seems to be about finding items in the  msg  list that don\'t contain the string  "one" . This can be done directly:'], ['-10000']], [[' [m for m in msg if "one" not in m]\n']], ['simple dropping elements from the list in python'], 2], [(1543820, 0), [['Python allows multiple generators:'], ['And also restrictions:']], [[' >>> [(x,y,x*y) for x in range(1,5) for y in range(1,5)]\n[(1, 1, 1), (1, 2, 2), (1, 3, 3), (1, 4, 4), \n (2, 1, 2), (2, 2, 4), (2, 3, 6), (2, 4, 8), \n (3, 1, 3), (3, 2, 6), (3, 3, 9), (3, 4, 12),\n (4, 1, 4), (4, 2, 8), (4, 3, 12), (4, 4, 16)]\n']], ['Comprehensions in Python and Javascript are only very basic?'], 3], [(1543820, 1), [['And also restrictions:'], ["Update : Javascript's syntax is similar (results from using the  javascript shell  on firefox):"]], [[' >>> [(x,y,x*y) for x in range(1,5) for y in range(1,5) if x*y > 8]\n[(3, 3, 9), (3, 4, 12), (4, 3, 12), (4, 4, 16)]\n']], ['Comprehensions in Python and Javascript are only very basic?'], 3], [(1543820, 2), [["Update : Javascript's syntax is similar (results from using the  javascript shell  on firefox):"], ["(For some reason, something about the context stuff is evaluated in in the javascript shell requires the eval indirection to have list comprehensions work.  Javascript inside a  <script>  tag doesn't require that, of course)"]], [[" var nums = [1, 2, 3, 21, 22, 30];\nvar s = eval('[[i,j] for each (i in nums) for each (j in [3,4]) if (i%2 == 0)]');\ns.toSource();\n[[2, 3], [2, 4], [22, 3], [22, 4], [30, 3], [30, 4]]\n"]], ['Comprehensions in Python and Javascript are only very basic?'], 3], [(1545602, 0), [['-10000'], ['Try this:']], [[' #Python 2.6\nfrom selenium import selenium\nimport unittest, time, re, csv, logging\n\nclass Untitled(unittest.TestCase):\n    def setUp(self):\n        self.verificationErrors = []\n        self.selenium = selenium("localhost", 4444, "*firefox", "http://www.SourceDomain.com")\n        self.selenium.start()\n\n    def test_untitled(self):\n        sel = self.selenium\n        spamReader = csv.reader(open(\'your_file.csv\'))\n        for row in spamReader:\n            sel.open(row[0])\n            sel.wait_for_page_to_load("30000")\n            print sel.get_html_source()\n\n    def tearDown(self):\n        self.selenium.stop()\n        self.assertEqual([], self.verificationErrors)\n\nif __name__ == "__main__":\n    unittest.main()\n']], ['How to apply Loop to working Python Selenium Script?'], 2], [(1545602, 1), [['Try this:'], ['-10000']], [[" import urllib2, csv\n\ndef fetchsource(url):\n    page = urllib2.urlopen(url)\n    source = page.read()\n    return source\n\nfooReader = csv.reader(open('your_file.csv'))\nfor url in fooReader:\n    print fetchsource(url)\n"]], ['How to apply Loop to working Python Selenium Script?'], 2], [(1546355, 0), [['Here is an example. The C program:'], ['and the Python one:']], [[' enum batch_op {\n    OP1 = 2,\n    OP2 = 3,\n    OP3 = -1,\n};\n\nstruct attrl {\n    char *name;\n    struct attrl *next;\n    enum batch_op op;\n};\n\nvoid f(struct attrl *x) {\n    x->op = OP3;\n}\n']], ['Using enums in ctypes.Structure'], 2], [(1546355, 1), [['and the Python one:'], ['-10000']], [[" from ctypes import (Structure, c_char_p, c_uint, c_int,\n    POINTER, CDLL)\n\nclass AttrList(Structure): pass\nAttrList._fields_ = [\n    ('name', c_char_p),\n    ('next', POINTER(AttrList)),\n    ('op', c_int),\n]\n\n(OP1, OP2, OP3) = (2, 3, -1)\n\nenum = CDLL('./libenum.so')\nenum.f.argtypes = [POINTER(AttrList)]\nenum.f.restype = None\n\na = AttrList(name=None, next=None, op=OP2)\nassert a.op == OP2\nenum.f(a)\nassert a.op == OP3\n"]], ['Using enums in ctypes.Structure'], 2], [(1546717, 0), [['Do you mean you do something like this:'], ['Then you will get nicely escaped XML string:']], [[' from xml.dom.minidom import Text, Element\n\nt = Text()\ne = Element(\'p\')\n\nt.data = \'<bar><a/><baz spam="eggs"> & blabla &entity;</>\'\ne.appendChild(t)\n']], ['Python: Escaping strings for use in XML'], 2], [(1546717, 1), [['Then you will get nicely escaped XML string:'], ['-10000']], [[" >>> e.toxml()\n'<p>&lt;bar&gt;&lt;a/&gt;&lt;baz spam=&quot;eggs&quot;&gt; &amp; blabla &amp;entity;&lt;/&gt;</p>'\n"]], ['Python: Escaping strings for use in XML'], 2], [(1546745, 0), [['You can do something like this:'], ['and save it as simpleinjecter.py, if you then do (from the commandline):']], [[' from twisted.web import server\nfrom twisted.web.resource import Resource\nfrom twisted.internet import reactor\nfrom twisted.internet.protocol import Protocol, ClientFactory\n\nclass SomeWebThing(Resource):\n    def render_GET(self, request):\n        return "hello\\n"\n\nclass SomeClient(Protocol):\n    def dataReceived(self, data):\n        p = self.factory.site.buildProtocol(self.transport.addr)\n        p.transport = self.transport\n        p.dataReceived(data)\n\nclass SomeClientFactory(ClientFactory):\n    protocol = SomeClient\n    def __init__(self, site):\n        self.site = site\n\nif __name__ == \'__main__\':\n    root = Resource()\n    root.putChild(\'thing\', SomeWebThing())\n    site = server.Site(root)\n    reactor.listenTCP(8000, site)\n\n    factory = SomeClientFactory(site)\n    reactor.connectTCP(\'localhost\', 9000, factory)\n\n    reactor.run()\n']], ['Manually giving the twisted (web) network stack a packet to process?'], 2], [(1546745, 1), [['and save it as simpleinjecter.py, if you then do (from the commandline):'], ['it should work as expected, with the request from the nc server on port 9000 getting funneled as the payload into the twisted web server, and the response coming back as expected.']], [[' echo -e "GET /thing HTTP/1.1\\r\\n\\r\\n" | nc -l 9000  # runs a server, ready to send req to first client connection\npython simpleinjecter.py\n']], ['Manually giving the twisted (web) network stack a packet to process?'], 2], [(1546816, 0), [['Easiest way is to create a filter.'], ['and in the template:']], [[' @register.filter\ndef is_favourite_of(object, user):\n    return Favourite.objects.is_favourite(user, object)\n']], ['How to create a specific if condition templatetag with Django?'], 2], [(1546816, 1), [['and in the template:'], ['-10000']], [[' {% if restaurant|is_favourite_of:user %}\n']], ['How to create a specific if condition templatetag with Django?'], 2], [(1547365, 0), [['First note that  sqlite is thread safe'], ['I do this using thread local storage to cache the database handle so there is only one per thread.  Something like this... (from a py2.5 prog - hopefully it will work with 3.0!)']], [[' $ python\nPython 2.5.2 (r252:60911, Jul 31 2008, 17:28:52)\n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2\nType "help", "copyright", "credits" or "license" for more information.\n>>> import sqlite\n>>> sqlite.threadsafety\n1\n']], ['A database for python 3?'], 2], [(1547365, 1), [['I do this using thread local storage to cache the database handle so there is only one per thread.  Something like this... (from a py2.5 prog - hopefully it will work with 3.0!)'], ['-10000']], [[' import threading\n\nclass YourClass:\n    def __init__(self):\n        #...\n        self.local = threading.local()  # Thread local storage for db handles\n        self.db_file = "/path/to/db"\n        #...\n    def db_open(self):\n        if not getattr(self.local, "db", None):\n            self.local.db = sqlite3.connect(self.db_file)\n        return self.local.db\n']], ['A database for python 3?'], 2], [(1547494, 0), [['As pccardune says, you get the relevant users like this:'], ['But in fact you can pass this directly into your next query:']], [[' friendships = Friendship.objects.filter(from_friend=some_user)\n']], ['How to do nested Django SELECT?'], 2], [(1547494, 1), [['But in fact you can pass this directly into your next query:'], ['-10000']], [[' second_select = Whatever.objects.filter(friend__in=friendships)\n']], ['How to do nested Django SELECT?'], 2], [(1547733, 0), [['Like this:'], ['Or:']], [[" from operator import itemgetter\nl = sorted(l, key=itemgetter('time'), reverse=True)\n"]], ['How to sort this list in Python?'], 4], [(1547733, 1), [['Or:'], ['output:    ']], [[" l = sorted(l, key=lambda a: a['time'], reverse=True)\n"]], ['How to sort this list in Python?'], 4], [(1547733, 2), [['output:    '], ["If you don't want to keep the original order you can use  your_list.sort  which modifies the original list instead of creating a copy like  sorted(your_list)"]], [[" [{'time': 66}, {'time': 33}, {'time': 11}]\n"]], ['How to sort this list in Python?'], 4], [(1547733, 3), [["If you don't want to keep the original order you can use  your_list.sort  which modifies the original list instead of creating a copy like  sorted(your_list)"], ['-10000']], [[" l.sort(key=lambda a: a['time'], reverse=True)\n"]], ['How to sort this list in Python?'], 4], [(1549037, 0), [['What you are almost certainly looking for is to use the key= option for sorted(), which provides a function which returns an arbitrary sort key for each element. This function can check the type of its argument and take various actions. For instance:'], ["RichieHindle's suggestion of using isinstance is a good one. And while I was at it I thought it might be nice to support arbitrary element names instead of hardcoding 'name':"]], [[" import types\n\nclass obj(object):\n    def __init__(self, arg):\n        self.name = arg\n\ndef extract_name(obj):\n    if type(obj) is types.DictType:\n        return obj['name']\n    else:\n        return obj.__dict__['name']\n\nd = { 'name': 'Jill'}    \nprint sorted([obj('Jack'), d], key=extract_name)\n"]], ['Sorting a heterogeneous list of objects in Python'], 3], [(1549037, 1), [["RichieHindle's suggestion of using isinstance is a good one. And while I was at it I thought it might be nice to support arbitrary element names instead of hardcoding 'name':"], ['Which you can use like so:']], [[' def extract_elem_v2(elem_name):\n    def key_extractor(obj):\n        dct = obj if isinstance(obj, dict) else obj.__dict__\n        return dct[elem_name]\n    return key_extractor\n']], ['Sorting a heterogeneous list of objects in Python'], 3], [(1549037, 2), [['Which you can use like so:'], ['-10000']], [[" print sorted(list_of_stuff, key=extract_elem_v2('name'))\n"]], ['Sorting a heterogeneous list of objects in Python'], 3], [(1549412, 0), [["For completeness, here's a solution with  itertools.groupby , but the dictionary solution will probably be faster (not to mention a lot easier to read)."], ["Note that the above assumes you've got at least one item in each group, otherwise it'll give different results from your script, i.e.:"]], [[' import itertools\nimport operator\n\ndef split_series(points, interval):\n    start = points[0][0]\n\n    return [[v for k, v in grouper] for group, grouper in\n            itertools.groupby((((n - start) // interval, val)\n                               for n, val in points), operator.itemgetter(0))]\n']], ['Grouping data points into series'], 4], [(1549412, 1), [["Note that the above assumes you've got at least one item in each group, otherwise it'll give different results from your script, i.e.:"], ['instead of']], [[" >>> split_series([(1, 'a'), (2, 'b'), (6, 'a'), (6, 'd'), (11, 'c')], 3)\n[['a', 'b'], ['a', 'd'], ['c']]\n"]], ['Grouping data points into series'], 4], [(1549412, 2), [['instead of'], ["Here's a fixed-up dictionary solution.  At some point the dictionary lookup time will begin to dominate, but maybe it's fast enough for you like this."]], [[" [['a', 'b'], ['a', 'd'], [], ['c']]\n"]], ['Grouping data points into series'], 4], [(1549412, 3), [["Here's a fixed-up dictionary solution.  At some point the dictionary lookup time will begin to dominate, but maybe it's fast enough for you like this."], ['-10000']], [[' from collections import defaultdict\n\ndef split_series(points, interval):\n    offset = points[0][0]\n    maxval = (points[-1][0] - offset) // interval\n    vals = defaultdict(list)\n    for key, value in points:\n        vals[(key - offset) // interval].append(value)\n    return [vals[i] for i in xrange(maxval + 1)]\n']], ['Grouping data points into series'], 4], [(1549442, 0), [['To clarify here is the current form:'], ['Add:']], [[' class AuthenticationForm(forms.Form):\n    """\n    Base class for authenticating users. Extend this to get a form that accepts\n    username/password logins.\n    """\n    username = forms.CharField(label=_("Username"), max_length=30)\n    password = forms.CharField(label=_("Password"), widget=forms.PasswordInput)\n\n    def __init__(self, request=None, *args, **kwargs):\n        """\n        If request is passed in, the form will validate that cookies are\n        enabled. Note that the request (a HttpRequest object) must have set a\n        cookie with the key TEST_COOKIE_NAME and value TEST_COOKIE_VALUE before\n        running this validation.\n        """\n        self.request = request\n        self.user_cache = None\n        super(AuthenticationForm, self).__init__(*args, **kwargs)\n\n    def clean(self):\n        username = self.cleaned_data.get(\'username\')\n        password = self.cleaned_data.get(\'password\')\n\n        if username and password:\n            self.user_cache = authenticate(username=username, password=password)\n            if self.user_cache is None:\n                raise forms.ValidationError(_("Please enter a correct username and password. Note that both fields are case-sensitive."))\n            elif not self.user_cache.is_active:\n                raise forms.ValidationError(_("This account is inactive."))\n\n        # TODO: determine whether this should move to its own method.\n        if self.request:\n            if not self.request.session.test_cookie_worked():\n                raise forms.ValidationError(_("Your Web browser doesn\'t appear to have cookies enabled. Cookies are required for logging in."))\n\n        return self.cleaned_data\n\n    def get_user_id(self):\n        if self.user_cache:\n            return self.user_cache.id\n        return None\n\n    def get_user(self):\n        return self.user_cache\n']], ['Separately validating username and password during Django authentication'], 2], [(1549442, 1), [['Add:'], ['-10000']], [[' def clean_username(self):\n    username = self.cleaned_data[\'username\']\n    try:\n        User.objects.get(username=username)\n    except User.DoesNotExist:\n        raise forms.ValidationError("The username you have entered does not exist.")\n    return username\n']], ['Separately validating username and password during Django authentication'], 2], [(1549445, 0), [['As long as all the sublists are of the same length:'], ['Edit: This will work with sublists of different lengths:']], [[' lst = [[5, 44, 73] , [7, 21, 99], [1, 32, 100]]\nlist(reduce(lambda l, r: l + r, zip(*lst)))\n']], ['How do do this list manipulation in Python? This is tricky'], 2], [(1549445, 1), [['Edit: This will work with sublists of different lengths:'], ['-10000']], [[' lst = [[5, 44, 73, 23] , [7, 21, 99], [1, 32, 100]]\nlist(filter(lambda p: p is not None, reduce(lambda x, y: x + y, map(None, *lst))))\n']], ['How do do this list manipulation in Python? This is tricky'], 2], [(1549641, 0), [['The  .title()  method of a string (either ASCII or Unicode is fine) does this:'], ['The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:']], [[' >>> "hello world".title()\n\'Hello World\'\n>>> u"hello world".title()\nu\'Hello World\'\n']], ['How to capitalize the first letter of each word in a string (Python)?'], 2], [(1549641, 1), [['The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:'], ['-10000']], [[' >>> "they\'re bill\'s friends from the UK".title()\n"They\'Re Bill\'S Friends From The Uk"\n']], ['How to capitalize the first letter of each word in a string (Python)?'], 2], [(1550130, 0), [["Here's an elegant, Pythonic way to do it:"], ["the problem with  [16]  seems to be that the transpose has no effect for an array. you're probably wanting a matrix instead:"]], [[' >>> array([[1,2,3],]*3)\narray([[1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3]])\n\n>>> array([[1,2,3],]*3).transpose()\narray([[1, 1, 1],\n       [2, 2, 2],\n       [3, 3, 3]])\n']], ['"Cloning" row or column vectors'], 2], [(1550130, 1), [["the problem with  [16]  seems to be that the transpose has no effect for an array. you're probably wanting a matrix instead:"], ['-10000']], [[' >>> x = array([1,2,3])\n>>> x\narray([1, 2, 3])\n>>> x.transpose()\narray([1, 2, 3])\n>>> matrix([1,2,3])\nmatrix([[1, 2, 3]])\n>>> matrix([1,2,3]).transpose()\nmatrix([[1],\n        [2],\n        [3]])\n']], ['"Cloning" row or column vectors'], 2], [(1551666, 0), [['The "oneliner way", altering neither of the input dicts, is'], ["In case of conflict, the items from  basket_two  will override the ones from  basket_one .  As one-liners go, this is pretty readable and transparent, and I have no compunction against using it any time a dict that's a mix of two others comes in handy (any reader who has trouble understanding it will in fact be very well served by the way this prompts him or hear towards learning about  dict  and the  **  form;-).  So, for example, uses like:"]], [[' basket = dict(basket_one, **basket_two)\n']], ['How can 2 Python dictionaries become 1?'], 2], [(1551666, 1), [["In case of conflict, the items from  basket_two  will override the ones from  basket_one .  As one-liners go, this is pretty readable and transparent, and I have no compunction against using it any time a dict that's a mix of two others comes in handy (any reader who has trouble understanding it will in fact be very well served by the way this prompts him or hear towards learning about  dict  and the  **  form;-).  So, for example, uses like:"], ['are reasonably frequent occurrences in my code.']], [[' x = mungesomedict(dict(adict, **anotherdict))\n']], ['How can 2 Python dictionaries become 1?'], 2], [(1552310, 0), [['-10000'], ["And you can package it up into a function, if you don't mind longer lines:"]], [[' try:\n  bs = a["key"][0][0]\n# Note: the syntax for catching exceptions is different in old versions\n# of Python. Use whichever one of these lines is appropriate to your version.\nexcept KeyError, IndexError, TypeError:   # Python 3\nexcept (KeyError, IndexError, TypeError): # Python 2\n  bs = []\nfor b in bs:\n']], ['Is there a cleaner way to chain empty list checks in Python?'], 2], [(1552310, 1), [["And you can package it up into a function, if you don't mind longer lines:"], ['-10000']], [[' def maybe_list(f):\n  try:\n    return f()\n  except KeyError, IndexError, TypeError:\n    return []\n\nfor b in maybe_list(lambda: a["key"][0][0]):\n']], ['Is there a cleaner way to chain empty list checks in Python?'], 2], [(1553165, 0), [['Finally, do not set DocumentRoot to be where your Django code is as it makes it easier to accidentally expose your source code to download if you stuff up Apache configuration. So, just remove DocumentRoot directive from VirtualHost for Django sites.'], ['BTW, since you are using PHP in same Apache, you would be much better off using mod_wsgi daemon mode and push each Django instance out into its own separate process. That allows those processes to be multithreaded, even though main Apache processes are forced to be single threaded because of PHP. End result will be much much less memory being used than if running multiple Django instances in each process under embedded mode with prefork MPM. Your Django code just needs to be thread safe. Configuration in addition to above would be to add WSGIDaemonProcess/WSGIProcessGroup to each Django VirtualHost, where name of daemon process group is different for each VirtualHost.']], [[' Listen 80\n\n<VirtualHost *:80>\nServerName www.example.com\nWSGIScriptAlias / /opt/django/site1/apache/django.wsgi\nAlias /media /opt/django/site1/media/statics\nAlias /admin_media  /home/myuser/Django-1.1/django/contrib/admin/media\n\n<Directory opt/django/site1/apache>\nOrder allow,deny\nAllow from all\n</Directory>\n\n<Directory /home/myuser/Django-1.1/django/contrib/admin/media>\nOrder allow,deny\nAllow from all\n</Directory>\n</VirtualHost>\n\nListen 8080\n\n<VirtualHost *:8080>\nServerName www.example.com\nWSGIScriptAlias / /opt/django/site2/apache/django.wsgi\nAlias /media /opt/django/site2/media/statics\nAlias /admin_media  /home/myuser/Django-1.1/django/contrib/admin/media\n\n<Directory opt/django/site2/apache>\nOrder allow,deny\nAllow from all\n</Directory>\n\n<Directory /home/myuser/Django-1.1/django/contrib/admin/media>\nOrder allow,deny\nAllow from all\n</Directory>\n</VirtualHost>\n\nListen 8090\n\n<VirtualHost *:8090>\nServerName www.example.com\nWSGIScriptAlias / /opt/django/site3/apache/django.wsgi\nAlias /media /opt/django/site3/media/statics\nAlias /admin_media  /home/myuser/Django-1.1/django/contrib/admin/media\n\n<Directory opt/django/site3/apache>\nOrder allow,deny\nAllow from all\n</Directory>\n\n<Directory /home/myuser/Django-1.1/django/contrib/admin/media>\nOrder allow,deny\nAllow from all\n</Directory>\n</VirtualHost>\n']], ['multiple django sites with apache & mod_wsgi'], 2], [(1553165, 1), [['BTW, since you are using PHP in same Apache, you would be much better off using mod_wsgi daemon mode and push each Django instance out into its own separate process. That allows those processes to be multithreaded, even though main Apache processes are forced to be single threaded because of PHP. End result will be much much less memory being used than if running multiple Django instances in each process under embedded mode with prefork MPM. Your Django code just needs to be thread safe. Configuration in addition to above would be to add WSGIDaemonProcess/WSGIProcessGroup to each Django VirtualHost, where name of daemon process group is different for each VirtualHost.'], ['This also allows you to more easily restart each Django instance without restart whole of Apache. Read:']], [[' <VirtualHost *:80>\nWSGIDaemonProcess site1 display-name=%{GROUP}\nWSGIProcessGroup site1\n... existing stuff\n</VirtualHost>\n\n<VirtualHost *:8080>\nWSGIDaemonProcess site2 display-name=%{GROUP}\nWSGIProcessGroup site2\n... existing stuff\n</VirtualHost>\n\n<VirtualHost *:8090>\nWSGIDaemonProcess site3 display-name=%{GROUP}\nWSGIProcessGroup site3\n... existing stuff\n</VirtualHost>\n']], ['multiple django sites with apache & mod_wsgi'], 2], [(1553275, 0), [['-10000'], ["Second version, inspired by Denis' answer and his use of  itertools.groupby :"]], [[" def cluster(dicts, key):\n    current_value = None\n    current_span = 0\n    result = []\n\n    for d in dicts:\n        value = d[key]\n        if current_value is None:\n            current_value = value\n        elif current_value != value:\n            result.append({'colspan': current_span, key: current_value})\n            current_value = value\n            current_span = 0\n        current_span += 1\n\n    result.append({'colspan': current_span, key: current_value})\n    return result\n\nby_open = cluster(data, 'open')\nby_serve = cluster(data, 'serve')\n"]], ['How to strip a list of tuple with python?'], 2], [(1553275, 1), [["Second version, inspired by Denis' answer and his use of  itertools.groupby :"], ['-10000']], [[" import itertools\nimport operator\n\ndef make_spans(data, key):\n    groups = itertools.groupby(data, operator.itemgetter(key))\n    return [{'colspan': len(list(items)), key: value} for value, items in groups]\n"]], ['How to strip a list of tuple with python?'], 2], [(1553467, 0), [['Use  collections.defaultdict , where the default value is a new  list  instance.'], ['You can instantiate the  defaultdict  with a previously generated list, in case you get the dict  likes  from another source, like so:']], [[' >>> import collections\n>>> mydict = collections.defaultdict(list)\n']], ['Most efficient way to add new keys or append to old keys in a dictionary during iteration in Python?'], 2], [(1553467, 1), [['You can instantiate the  defaultdict  with a previously generated list, in case you get the dict  likes  from another source, like so:'], ['Note that using  list  as the  default_factory  attribute of a  defaultdict  is also discussed as an example in the  documentation .']], [[' >>> mydict = collections.defaultdict(list, likes)\n']], ['Most efficient way to add new keys or append to old keys in a dictionary during iteration in Python?'], 2], [(1556232, 0), [['You can pick items with weighted probabilities if you assign each item a number range proportional to its probability, pick a random number between zero and the sum of the ranges and find what item matches it. The following class does exactly that:'], ['You can then load the CSV file with the  csv  module and feed it to the  WeightedChoice  class:']], [[' from random import random\n\nclass WeightedChoice(object):\n    def __init__(self, weights):\n        """Pick items with weighted probabilities.\n\n            weights\n                a sequence of tuples of item and it\'s weight.\n        """\n        self._total_weight = 0.\n        self._item_levels = []\n        for item, weight in weights:\n            self._total_weight += weight\n            self._item_levels.append((self._total_weight, item))\n\n    def pick(self):\n        pick = self._total_weight * random()\n        for level, item in self._item_levels:\n            if level >= pick:\n                return item\n']], ['How to select an item from a list with known percentages in Python'], 2], [(1556232, 1), [['You can then load the CSV file with the  csv  module and feed it to the  WeightedChoice  class:'], ['-10000']], [[" import csv\n\nweighed_items = [(item,float(weight)) for item,weight in csv.reader(open('file.csv'))]\npicker = WeightedChoice(weighed_items)\nprint(picker.pick())\n"]], ['How to select an item from a list with known percentages in Python'], 2], [(1557571, 0), [['The simplest way in Python:'], ['Prints:']], [[' import time\nstart_time = time.time()\nmain()\nprint("--- %s seconds ---" % (time.time() - start_time))\n']], ["How do I get time of a Python program's execution?"], 2], [(1557571, 1), [['Prints:'], ['-10000']], [[' --- 0.764891862869 seconds ---\n']], ["How do I get time of a Python program's execution?"], 2], [(1561282, 0), [['If you want all of the instances of  mainfunc  to use the same  KeySeq  object, you can use the default parameter value trick:'], ["But it's tricky to create multiple instances of a function (and the code you've posted doesn't).  For example, this function does return a new instance of  g  every time it's called:"]], [[' def mainfunc(ks=KeySeq()):\n   key = ks.next()\n']], ['Structuring a program. Classes and functions in Python'], 2], [(1561282, 1), [["But it's tricky to create multiple instances of a function (and the code you've posted doesn't).  For example, this function does return a new instance of  g  every time it's called:"], ['If I call  g()  with no argument, it returns the default value (initially an empty list) from its  func_defaults  tuple.  Since  g1  and  g2  are different instances of the  g  function, their default value for the  x  argument is  also  a different instance, which the above demonstrates.']], [[" >>> def f():\n        def g(x=[]):\n            return x\n        return g\n>>> g1 = f()\n>>> g2 = f()\n>>> g1().append('a')\n>>> g2().append('b')\n>>> g1()\n['a']\n>>> g2()\n['b']\n"]], ['Structuring a program. Classes and functions in Python'], 2], [(1561655, 0), [['If you look at the  sourcecode  for  OpBasedDocument.InsertInlineBlip()  you will see the following:'], ['The syntax you included in your post looks correct.  As you can see above,  InsertInlineBlip()   returns the value  of  AddBlip() , which is ...dun, dun, dun... a blip.']], [['  412 -  def InsertInlineBlip(self, position): \n 413      """Inserts an inline blip into this blip at a specific position. \n 414   \n 415      Args: \n 416        position: Position to insert the blip at. \n 417   \n 418      Returns: \n 419        The JSON data of the blip that was created. \n 420      """ \n 421      blip_data = self.__context.builder.DocumentInlineBlipInsert( \n 422          self._blip.waveId, \n 423          self._blip.waveletId, \n 424          self._blip.blipId, \n 425          position) \n 426      # TODO(davidbyttow): Add local blip element. \n 427      return self.__context.AddBlip(blip_data) \n']], ['Google wave robot inline reply'], 2], [(1561655, 1), [['The syntax you included in your post looks correct.  As you can see above,  InsertInlineBlip()   returns the value  of  AddBlip() , which is ...dun, dun, dun... a blip.'], ["EDIT:\nIt is interesting to note that the method signature of the Insert method  InsertInlineBlip(self, position)  is significantly different from the Insert method  InsertElement(self, position, element) .  InsertInlineBlip()  doesn't take an element parameter to insert.  It seems the current logic for  InsertInlineBlip()  is more like  Blip.CreateChild() , which returns a new child blip with which to work. From this we can suspect that this API will change as the functionality is added."]], [['  543 -  def AddBlip(self, blip_data): \n 544      """Adds a transient blip based on the data supplied. \n 545   \n 546      Args: \n 547        blip_data: JSON data describing this blip. \n 548   \n 549      Returns: \n 550        An OpBasedBlip that may have operations applied to it. \n 551      """ \n 552      blip = OpBasedBlip(blip_data, self) \n 553      self.blips[blip.GetId()] = blip \n 554      return blip \n']], ['Google wave robot inline reply'], 2], [(1563088, 0), [['In urls.py I have a url-mapping like'], ['in this case the regular expression  (?P<slug>[a-z1-3_]{1,})  will return a variable called slug and send it to my view  cms.views.category_view . In that view I query like this:']], [['   url(r\'(?P<slug>[a-z1-3_]{1,})/$\',\'cms.views.category_view\', name="category-view")\n']], ['URLs stored in database for Django site'], 2], [(1563088, 1), [['in this case the regular expression  (?P<slug>[a-z1-3_]{1,})  will return a variable called slug and send it to my view  cms.views.category_view . In that view I query like this:'], ['(Note: I am using the  annoying-decorator   render_to  – it is the same as  render_to_response , just shorter)']], [[" @render_to('category.html')\ndef category_view(request, slug):\n    return {'cat':Category.objects.get(slug=slug)}\n"]], ['URLs stored in database for Django site'], 2], [(1568856, 0), [['-10000'], ['in python3 parsedate_tz has moved to email.utils']], [[" \nIn [1]: import rfc822     # This only works for python 2 series\n\nIn [2]: rfc822.parsedate_tz('Sun, 09 Mar 1997 13:45:00 -0500')\nOut[2]: (1997, 3, 9, 13, 45, 0, 0, 1, 0, -18000)\n"]], ['How do I convert RFC822 to a python datetime object?'], 2], [(1568856, 1), [['in python3 parsedate_tz has moved to email.utils'], ['-10000']], [[" \n>>> import email.utils   # this works on Python2.5 and up\n>>> email.utils.parsedate_tz('Sun, 09 Mar 1997 13:45:00 -0500')\n(1997, 3, 9, 13, 45, 0, 0, 1, -1, -18000)\n"]], ['How do I convert RFC822 to a python datetime object?'], 2], [(1570339, 0), [['Much to my surprise, it does appear to.'], ["Edit, per your comment that it doesn't work on Windows, this is because of the following in the Django source:"]], [[' web81:~/webapps/dominicrodger2/dominicrodger$ python2.5 manage.py shell\nPython 2.5.4 (r254:67916, Aug  5 2009, 12:42:40)\n[GCC 4.1.2 20080704 (Red Hat 4.1.2-44)] on linux2\nType "help", "copyright", "credits" or "license" for more information.\n(InteractiveConsole)\n>>> import settings\n>>> settings.TIME_ZONE\n\'Europe/London\'\n>>> from datetime import datetime\n>>> datetime.now()\ndatetime.datetime(2009, 10, 15, 6, 29, 58, 85662)\n>>> exit()\nweb81:~/webapps/dominicrodger2/dominicrodger$ date\nThu Oct 15 00:31:10 CDT 2009\n']], ["Does configuring django's setting.TIME_ZONE affect datetime.datetime.now()?"], 4], [(1570339, 1), [["Edit, per your comment that it doesn't work on Windows, this is because of the following in the Django source:"], ['Windows:']], [[" if hasattr(time, 'tzset'):\n    # Move the time zone info into os.environ. See ticket #2315 for why\n    # we don't do this unconditionally (breaks Windows).\n    os.environ['TZ'] = self.TIME_ZONE\n    time.tzset()\n"]], ["Does configuring django's setting.TIME_ZONE affect datetime.datetime.now()?"], 4], [(1570339, 2), [['Windows:'], ['Linux:']], [[' C:\\Documents and Settings\\drodger>python\nActivePython 2.6.1.1 (ActiveState Software Inc.) based on\nPython 2.6.1 (r261:67515, Dec  5 2008, 13:58:38) [MSC v.1500 32 bit (Intel)] on win32\nType "help", "copyright", "credits" or "license" for more information.\n>>> import time\n>>> hasattr(time, \'tzset\')\nFalse\n']], ["Does configuring django's setting.TIME_ZONE affect datetime.datetime.now()?"], 4], [(1570339, 3), [['Linux:'], ['-10000']], [[' web81:~$ python2.5\nPython 2.5.4 (r254:67916, Aug  5 2009, 12:42:40)\n[GCC 4.1.2 20080704 (Red Hat 4.1.2-44)] on linux2\nType "help", "copyright", "credits" or "license" for more information.\n>>> import time\n>>> hasattr(time, \'tzset\')\nTrue\n']], ["Does configuring django's setting.TIME_ZONE affect datetime.datetime.now()?"], 4], [(1571047, 0), [['The contents of the 2.6 version looks like this:'], ['Now, if you not already have those scripts on you machine, you could create those by using the above as template. Just change the first line so it points to the right python interpreter. Probably something like:']], [[" #!/System/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python\nimport sys\nsys.argv[0] = sys.argv[0].replace('-2.6', '')\n# EASY-INSTALL-ENTRY-SCRIPT: 'setuptools==0.6c9','console_scripts','easy_install'\n__requires__ = 'setuptools==0.6c9'\nimport sys\nfrom pkg_resources import load_entry_point\n\nsys.exit(\n   load_entry_point('setuptools==0.6c9', 'console_scripts', 'easy_install')()\n)\n"]], ['Choose Python version for egg installation or install parallel versions of site-package'], 4], [(1571047, 1), [['Now, if you not already have those scripts on you machine, you could create those by using the above as template. Just change the first line so it points to the right python interpreter. Probably something like:'], ['And change the third line to match the current script name; meaning, if the script is called easy_install-2.3, then it should look like this:']], [[' #!/sw/bin/python23\n']], ['Choose Python version for egg installation or install parallel versions of site-package'], 4], [(1571047, 2), [['And change the third line to match the current script name; meaning, if the script is called easy_install-2.3, then it should look like this:'], ['An alternative is to run the easy_install script as an argument of the right python version. Like this:']], [[" sys.argv[0] = sys.argv[0].replace('-2.3', '')\n"]], ['Choose Python version for egg installation or install parallel versions of site-package'], 4], [(1571047, 3), [['An alternative is to run the easy_install script as an argument of the right python version. Like this:'], ['2.']], [[' $ python23 /some/path/easy_install networkx-0.36-py2.5.egg\n']], ['Choose Python version for egg installation or install parallel versions of site-package'], 4], [(1571651, 0), [['Are you trying to do something like this?'], ['of course it could be just ']], [[" ';'.join(encode(i) for i in message.split('.'))\n"]], ['Iterating through a list in Python'], 2], [(1571651, 1), [['of course it could be just '], ['if your  split16  function complicated enough.']], [[" ';'.join(encode(i) for i in result)\n"]], ['Iterating through a list in Python'], 2], [(1571699, 0), [['You are more flexible with  find , and to get what you want you just need to run:'], ['But since it might not be  how  you want to get there, following options might suit you better:']], [[' node = p.find(\'div\', text="Content I Want")\n']], ['Select specific child elements with BeautifulSoup'], 2], [(1571699, 1), [['But since it might not be  how  you want to get there, following options might suit you better:'], ['-10000']], [[' xml = """<div id="top"><div>Content</div><div><div>Content I Want</div></div></div>"""\nfrom BeautifulSoup import BeautifulSoup\np = BeautifulSoup(xml)\n\n# returns a list of texts\nprint p.div.div.findNextSibling().div.contents\n# returns a list of texts\nprint p.div.div.findNextSibling().div(text=True)\n# join (and strip) the values\nprint \'\'.join(s.strip() for s in p.div.div.findNextSibling().div(text=True))\n']], ['Select specific child elements with BeautifulSoup'], 2], [(1572676, 0), [['For instance:'], ['will output:']], [[" def solve(numLegs, numHeads):\n     for numBees in range(0, numHeads + 1):\n             for numChicks in range(0, numHeads - numBees + 1):\n                     numPigs = numHeads - numChicks - numBees\n                     totLegs = 4*numPigs + 2*numChicks + 6*numBees \n                     if totLegs == numLegs:\n                             yield [numPigs, numChicks, numBees]\n\ndef barnYard(heads, legs):\n    for pigs, chickens, bees in solve(legs, heads):\n             print 'Number of pigs: ', pigs\n             print 'Number of chickens: ', chickens\n             print 'Number of bees: ', bees\n\nbarnYard(20,56)\n"]], ['Unexpected result in a simple example'], 2], [(1572676, 1), [['will output:'], ['-10000']], [[' Number of pigs:  8\nNumber of chickens:  12\nNumber of bees:  0\n\nNumber of pigs:  6\nNumber of chickens:  13\nNumber of bees:  1\n\nNumber of pigs:  4\nNumber of chickens:  14\nNumber of bees:  2\n\nNumber of pigs:  2\nNumber of chickens:  15\nNumber of bees:  3\n\nNumber of pigs:  0\nNumber of chickens:  16\nNumber of bees:  4\n']], ['Unexpected result in a simple example'], 2], [(1572967, 0), [['You\'ve explained in a comment why you don\'t want to install "a single site-packages directory", but what about putting in  site-packages  a single, tiny  module , say  jebootstrap.py :'], ['Now everywhere in your code you can just have']], [[" import os, sys\n\ndef relative_dir(apath):\n  return os.path.realpath(\n      os.path.join(os.path.dirname(apath),\n      '../../../Path/To/Shared/Code'))\n\ndef addpack(apath):\n  relative = relative_dir(apath)\n  if relative not in sys.path:\n    sys.path.append(relative)\n"]], ['Importing Python modules from a distant directory'], 2], [(1572967, 1), [['Now everywhere in your code you can just have'], ['and all the rest of your shared codebase can remain independent per-installation.']], [[' import jebootstrap\njebootsrap.addpack(__file__)\n']], ['Importing Python modules from a distant directory'], 2], [(1574064, 0), [['Will return all records that have dups:'], ['Example: select all duplicate records EXCEPT the one with the max ID: ']], [[' SELECT theTable.*\nFROM theTable\nINNER JOIN (\n  SELECT link, size\n  FROM theTable \n  GROUP BY link, size\n  HAVING count(ID) > 1\n) dups ON theTable.link = dups.link AND theTable.size = dups.size\n']], ['How to find duplicates in MySQL'], 2], [(1574064, 1), [['Example: select all duplicate records EXCEPT the one with the max ID: '], ['-10000']], [[' SELECT theTable.*\nFROM theTable\nINNER JOIN (\n  SELECT link, size, max(ID) as maxID\n  FROM theTable \n  GROUP BY link, size\n  HAVING count(ID) > 1\n) dups ON theTable.link = dups.link \n          AND theTable.size = dups.size \n          AND theTable.ID <> dups.maxID\n']], ['How to find duplicates in MySQL'], 2], [(1574458, 0), [["Here is an implementation for you.  Note that the objects you monitor must be hashable and picklable.  Note also the use of a  WeakKeyDictionary  which means that the  Monitor  won't stop the monitored objects from being deleted."], ['If you test it like this']], [[' from weakref import WeakKeyDictionary\nfrom cPickle import dumps\n\nclass Monitor():\n    def __init__(self):\n        self.objects = WeakKeyDictionary()\n    def is_changed(self, obj):\n        current_pickle = dumps(obj, -1)\n        changed = False\n        if obj in self.objects:\n            changed = current_pickle != self.objects[obj]\n        self.objects[obj] = current_pickle\n        return changed\n\nclass MyObject():\n    def __init__(self):\n        self.i = 1\n    def change_somehow(self):\n        self.i += 1\n']], ['Python object that monitors changes in objects'], 3], [(1574458, 1), [['If you test it like this'], ['It prints']], [[' object1 = MyObject()\nmonitor = Monitor()\nprint monitor.is_changed(object1)\nobject1.change_somehow()\nprint monitor.is_changed(object1)\nprint monitor.is_changed(object1)\n']], ['Python object that monitors changes in objects'], 3], [(1574458, 2), [['It prints'], ['-10000']], [[' False\nTrue\nFalse\n']], ['Python object that monitors changes in objects'], 3], [(1574678, 0), [['My original suggestion with a list comprehension.'], ['As to which is most efficient (cpu-cyclewise) is something that should always be tested.\nSome quick testing on my Python 2.6 install indicates  map  is probably the most efficient candidate here (building a list of integers from a value-splitted string). Note that the difference is so small that this does not really matter until you are doing this millions of times (and it is a proven bottleneck)...']], [[' test = \'8743-12083-15\'\nlst_int = [int(x) for x in test.split("-")]\n']], ['Efficient way to convert strings from split function to ints in Python'], 2], [(1574678, 1), [['As to which is most efficient (cpu-cyclewise) is something that should always be tested.\nSome quick testing on my Python 2.6 install indicates  map  is probably the most efficient candidate here (building a list of integers from a value-splitted string). Note that the difference is so small that this does not really matter until you are doing this millions of times (and it is a proven bottleneck)...'], ['-10000']], [[' def v1():\n return [int(x) for x in \'8743-12083-15\'.split(\'-\')]\n\ndef v2():\n return map(int, \'8743-12083-15\'.split(\'-\'))\n\nimport timeit\nprint "v1", timeit.Timer(\'v1()\', \'from __main__ import v1\').timeit(500000)\nprint "v2", timeit.Timer(\'v2()\', \'from __main__ import v2\').timeit(500000)\n\n> output v1 3.73336911201 \n> output v2 3.44717001915\n']], ['Efficient way to convert strings from split function to ints in Python'], 2], [(1575802, 0), [['Thus I think that you have to specialize: for each concrete instantiation of  doCallback  that the host system uses, provide a template specialization for the target type.  With that done, you can generate a Python-friendly wrapping of  data , and pass it to your python function.  The simplest technique for that is probably:'], ["If you do need to retain a reference to  data , you'll need to use whatever mechanism SWIG usually uses to wrap  shared_ptr .  If there's no special-case smart-pointer magic going on, it's probably something like:"]], [[' swigData = SWIG_NewPointerObj((void*)(data.get()), SWIGType_Whatever, 0);\n']], ['Python callback with SWIG wrapped type'], 2], [(1575802, 1), [["If you do need to retain a reference to  data , you'll need to use whatever mechanism SWIG usually uses to wrap  shared_ptr .  If there's no special-case smart-pointer magic going on, it's probably something like:"], ["Regardless, you then you have a Python-friendly SWIG object that's amenable to  Py_BuildValue() ."]], [[' pythonData = new shared_ptr<Whatever>(data);\nswigData = SWIG_NewPointerObj(pythonData, SWIGType_shared_ptr_to_Whatever, 1);\n']], ['Python callback with SWIG wrapped type'], 2], [(1576537, 0), [['Well, it depends how you see it. You can look at the elses like this (excuse the screaming, its the only way to make emphasis in code):'], ['Now, there is an obvious similarity between if/else and try/except/else, if you see the else statement as an else to the except statement. Like this.']], [[' if condition:\n   do_something()\nIF THE PREVIOUS CONDITION WAS FALSE:\n   do_something_else()\n']], ['Why does else behave differently in for/while statements as opposed to if/try statements?'], 6], [(1576537, 1), [['Now, there is an obvious similarity between if/else and try/except/else, if you see the else statement as an else to the except statement. Like this.'], ['Same goes for the else/for:']], [[' try:\n   do_something()\nIF THERE WAS AN EXCEPTION:\n   pass:\nIF THE PREVIOUS CONDITION WAS FALSE:\n   do_something_else()\nfinally:\n   cleanup()\n']], ['Why does else behave differently in for/while statements as opposed to if/try statements?'], 6], [(1576537, 2), [['Same goes for the else/for:'], ['But you can also see the else in this way:']], [[' IF some_iterator IS NOT EMPTY:\n   i = next(some_iterator)\n   print(i)\nIF THE PREVIOUS CONDITION WAS FALSE:\n   print("Iterator is empty!")\n']], ['Why does else behave differently in for/while statements as opposed to if/try statements?'], 6], [(1576537, 3), [['But you can also see the else in this way:'], ['And then it\'s not the same anymore, but the else because a sort of "if nothing else". You can see for/else in the same way:']], [[' try:\n   do_something()\nexcept someException:\n   pass:\nIF NO EXCEPTION:\n   do_something_else()\nfinally:\n   cleanup()\n']], ['Why does else behave differently in for/while statements as opposed to if/try statements?'], 6], [(1576537, 4), [['And then it\'s not the same anymore, but the else because a sort of "if nothing else". You can see for/else in the same way:'], ['But then again, considering the elif, then this way of seeing it works for if/else as well:']], [[' for i in some_iterator:\n   print(i)\nIF NO MORE ITERATING:\n   print("Iterator is empty!")\n']], ['Why does else behave differently in for/while statements as opposed to if/try statements?'], 6], [(1576537, 5), [['But then again, considering the elif, then this way of seeing it works for if/else as well:'], ['Which way you want to look at the else is up to you, but in both ways of viewing, else do have similarities in all three cases.']], [[' if condition:\n   do_something()\nelif otherconditaion:\n   do_anotherthing()\nIF NO CONDITION WAS TRUE:\n   do_something_else()\n']], ['Why does else behave differently in for/while statements as opposed to if/try statements?'], 6], [(1577031, 0), [["Since you modified your question from 'What does this function do' to 'What is some code to execute this function', here is an example:"], ['The output will be:']], [[" def fun1(a):\n    for i in range(len(a)):\n        a[i] = a[i] * a[i]\n    return a\n\ntest1 = [1,2,3,4,5]\nprint 'Original list', test1\ntest2 = fun1(test1)\nprint 'Result', test2\nprint 'Original list', test1\n"]], ['What does this function do?'], 2], [(1577031, 1), [['The output will be:'], ['Because the function modifies the list in place, test1 is also modified.']], [[' Original list [1, 2, 3, 4, 5]\nResult [1, 4, 9, 16, 25]\nOriginal list [1, 4, 9, 16, 25]\n']], ['What does this function do?'], 2], [(1577538, 0), [['-10000'], ["It's a bit more complex if you have to convert from/to actual days."]], [[' >>> def weekdays_between(s, e):\n...     return [n % 7 for n in range(s, e + (1 if e > s else 8))]\n... \n>>> weekdays_between(2, 4)\n[2, 3, 4]\n>>> weekdays_between(5, 1)\n[5, 6, 0, 1]\n']], ['How can I get all days between two days?'], 2], [(1577538, 1), [["It's a bit more complex if you have to convert from/to actual days."], ['-10000']], [[" >>> days = 'Mon Tue Wed Thu Fri Sat Sun'.split()\n>>> days_1 = {d: n for n, d in enumerate(days)}\n>>> def weekdays_between(s, e): \n...     s, e = days_1[s], days_1[e]\n...     return [days[n % 7] for n in range(s, e + (1 if e > s else 8))]\n... \n>>> weekdays_between('Wed', 'Fri')\n['Wed', 'Thu', 'Fri']\n>>> weekdays_between('Sat', 'Tue')\n['Sat', 'Sun', 'Mon', 'Tue']\n"]], ['How can I get all days between two days?'], 2], [(1579350, 0), [['Here is some code which will run all the unit tests in a directory:'], ['If you call it testsuite.py, then you would run it like this:']], [[" #!/usr/bin/env python\nimport unittest\nimport sys\nimport os\n\nunit_dir = sys.argv[1] if len(sys.argv) > 1 else '.'\nos.chdir(unit_dir)\nsuite = unittest.TestSuite()\nfor filename in os.listdir('.'):\n    if filename.endswith('.py') and filename.startswith('test_'):\n        modname = filename[:-2]\n        module = __import__(modname)\n        suite.addTest(unittest.TestLoader().loadTestsFromModule(module))\n\nunittest.TextTestRunner(verbosity=2).run(suite)\n"]], ['Running Tests From a Module'], 2], [(1579350, 1), [['If you call it testsuite.py, then you would run it like this:'], ['-10000']], [[' testsuite.py UnitTests\n']], ['Running Tests From a Module'], 2], [(1579771, 0), [['-10000'], ['-10000']], [['A simple solution that works by sorting the list then using a generator to create groups: def time_offsets(files, offset):\n\n   files = sorted(files, key=lambda x:x.timestamp)\n\n   group = []   \n   timestamp = 0\n\n   for f in files:\n      if f.timestamp < timestamp + offset:\n         group.append(f)\n      else:\n         yield group\n         timestamp = f.timestamp\n         group = [timestamp]\n   else:\n      yield group\n\n# Now you can do this...\nfor group in time_offsets(files, 86400):\n   print group\n']], ['Fastest nested loops over a single list (with elements remove or not)'], 2], [(1579771, 1), [['-10000'], ['-10000']], [['And here\'s a complete script you can run to test: class File:\n   def __init__(self, timestamp):\n      self.timestamp = timestamp\n\n   def __repr__(self):\n      return "File: <%d>" % self.timestamp\n\ndef gen_files(num=100):\n   import random\n   files = []\n   for i in range(num):\n      timestamp = random.randint(0,1000000)\n      files.append(File(timestamp))\n\n   return files\n\n\ndef time_offsets(files, offset):\n\n   files = sorted(files, key=lambda x:x.timestamp)\n\n   group = []   \n   timestamp = 0\n\n   for f in files:\n      if f.timestamp < timestamp + offset:\n         group.append(f)\n      else:\n         yield group\n         timestamp = f.timestamp\n         group = [timestamp]\n   else:\n      yield group\n\n# Now you can do this to group files by day (assuming timestamp in seconds)\nfiles = gen_files()\nfor group in time_offsets(files, 86400):\n   print group\n']], ['Fastest nested loops over a single list (with elements remove or not)'], 2], [(1580828, 0), [['First off, I get a different output on my machine (running Python 2.6):'], ['Filtering is only applied on the logger that the message is issued to, and if it passes the filters, it\'s then propagated to all the handlers of the parent loggers (and not the loggers themselves) - I don\'t know the rationale for this decision. If you want to stop propagation at say the "top" Logger instance, set:']], [[' ROOT\nBOTTOM HANDLER\nTOP HANDLER\nROOT\n']], ['Python logging for non-trivial uses?'], 2], [(1580828, 1), [['Filtering is only applied on the logger that the message is issued to, and if it passes the filters, it\'s then propagated to all the handlers of the parent loggers (and not the loggers themselves) - I don\'t know the rationale for this decision. If you want to stop propagation at say the "top" Logger instance, set:'], ['-10000']], [[' top.propagation = False\n']], ['Python logging for non-trivial uses?'], 2], [(1581799, 0), [['I believe this is the fastest pure TK way to do this.  Generates 10,000 RGB values in a list of lists, creates a Tkinter.PhotoImage and then puts the pixel values into it.'], ["I wrote this as a test.  On my Intel Core 2 duo at 2.67 Ghz, it'll draw about 5000 pixels in 0.6 seconds including the time to generate my random RGB values:"]], [[" import Tkinter, random\nclass App:\n    def __init__(self, t):\n        self.i = Tkinter.PhotoImage(width=100,height=100)\n        colors = [[random.randint(0,255) for i in range(0,3)] for j in range(0,10000)]\n        row = 0; col = 0\n        for color in colors:\n           self.i.put('#%02x%02x%02x' % tuple(color),(row,col))\n           col += 1\n           if col == 100:\n               row +=1; col = 0        \n        c = Tkinter.Canvas(t, width=100, height=100); c.pack()\n        c.create_image(0, 0, image = self.i, anchor=Tkinter.NW)\n\nt = Tkinter.Tk()\na = App(t)    \nt.mainloop()\n"]], ['How to draw a bitmap real quick in python using Tk only?'], 3], [(1581799, 1), [["I wrote this as a test.  On my Intel Core 2 duo at 2.67 Ghz, it'll draw about 5000 pixels in 0.6 seconds including the time to generate my random RGB values:"], ['I know you said TK only but PIL makes this really easy and fast.']], [[" from Tkinter import *\nimport random\n\ndef RGBs(num):\n # random list of list RGBs\n return [[random.randint(0,255) for i in range(0,3)] for j in range(0,num)]\n\ndef rgb2Hex(rgb_tuple):\n    return '#%02x%02x%02x' % tuple(rgb_tuple)\n\ndef drawGrid(w,colors):\n col = 0; row = 0\n colors = [rgb2Hex(color) for color in colors]\n for color in colors:\n  w.create_rectangle(col, row, col+1, row+1, fill=color, outline=color)\n  col+=1\n  if col == 100:\n   row += 1; col = 0\n\nroot = Tk()\nw = Canvas(root)\nw.grid()\ncolors = RGBs(5000)\ndrawGrid(w,colors)\nroot.mainloop()\n"]], ['How to draw a bitmap real quick in python using Tk only?'], 3], [(1581799, 2), [['I know you said TK only but PIL makes this really easy and fast.'], ['-10000']], [[' def rgb2Hex(rgb_tuple):\n    return \'#%02x%02x%02x\' % tuple(rgb_tuple)\n\nnum = 10000 #10,000 pixels in 100,100 image\ncolors = [[random.randint(0,255) for i in range(0,3)] for j in range(0,num)]\ncolors = [rgb2Hex(color) for color in colors]\nim = Image.fromstring(\'RGB\',(100,100),"".join(colors))\ntkpi = ImageTk.PhotoImage(im)\n## add to a label or whatever...\nlabel_image = Tkinter.Label(root, image=tkpi)\n']], ['How to draw a bitmap real quick in python using Tk only?'], 3], [(1581895, 0), [["If you don't care about the order in which items are processed, I'd try a subclass of  Queue  that uses  set  internally:"], ['As Paul McGuire pointed out, this would allow adding a duplicate item after it\'s been removed from the "to-be-processed" set and not yet added to the "processed" set. To solve this, you can store both sets in the  Queue  instance, but since you are using the larger set for checking if the item has been processed, you can just as well go back to  queue  which will order requests properly.']], [[' class SetQueue(Queue):\n\n    def _init(self, maxsize):\n        self.maxsize = maxsize\n        self.queue = set()\n\n    def _put(self, item):\n        self.queue.add(item)\n\n    def _get(self):\n        return self.queue.pop()\n']], ['How check if a task is already in python Queue?'], 2], [(1581895, 1), [['As Paul McGuire pointed out, this would allow adding a duplicate item after it\'s been removed from the "to-be-processed" set and not yet added to the "processed" set. To solve this, you can store both sets in the  Queue  instance, but since you are using the larger set for checking if the item has been processed, you can just as well go back to  queue  which will order requests properly.'], ["The advantage of this, as opposed to using a set separately, is that the  Queue 's methods are thread-safe, so that you don't need additional locking for checking the other set."]], [[' class SetQueue(Queue):\n\n    def _init(self, maxsize):\n        Queue._init(self, maxsize) \n        self.all_items = set()\n\n    def _put(self, item):\n        if item not in self.all_items:\n            Queue._put(self, item) \n            self.all_items.add(item)\n']], ['How check if a task is already in python Queue?'], 2], [(1583293, 0), [['I found an answer.  If I declare the function pointer as a SWIG "member function", it seems to work as expected:'], ['Session:']], [[' %module test\n%{\n\ntypedef struct {\n  int (*my_func)(int);\n} test_struct;\n\nint add1(int n) { return n+1; }\n\ntest_struct *init_test()\n{\n    test_struct *t = (test_struct*) malloc(sizeof(test_struct));\n    t->my_func = add1;\n    return t;\n}\n\n%}\n\ntypedef struct {\n    int my_func(int);\n} test_struct;\n\nextern test_struct *init_test();\n']], ['Using SWIG with pointer to function in C struct'], 2], [(1583293, 1), [['Session:'], ['I was hoping for something that wouldn\'t require writing any custom SWIG-specific code (I\'d prefer to just "%include" my headers without modification), but this will do I guess.']], [[' $ python\nPython 2.6.2 (release26-maint, Apr 19 2009, 01:56:41) \n[GCC 4.3.3] on linux2\nType "help", "copyright", "credits" or "license" for more information.\n>>> import test\n>>> t = test.init_test()\n>>> t.my_func(1)\n2\n']], ['Using SWIG with pointer to function in C struct'], 2], [(1583595, 0), [['I created this model (which mimics the Page class):'], ['In the Save() method of the Page class, I added this code to save a Revision, before I updated the fields with the new data:']], [[' class Revision (db.Model):\n  name = db.StringProperty(required=True)\n  created = db.DateTimeProperty(required=True)\n  modified = db.DateTimeProperty(auto_now_add=True)\n  content = db.TextProperty(required=True)\n  user = db.UserProperty()\n']], ['Storing wiki revisions on Google App Engine/Django - Modifying This Existing Code'], 3], [(1583595, 1), [['In the Save() method of the Page class, I added this code to save a Revision, before I updated the fields with the new data:'], ["I have the wiki set up now to accept a GET parameter to specify which revision you want to see or edit. When the user wants a revision, I fetch the Page from the database, and replace the Page's Content with the Revision's Content:"]], [[' r = Revision(name = self.name,\n             content = self.content,\n             created = self.created,\n             modified = self.modified,\n             user = self.user)\nr.put()\n']], ['Storing wiki revisions on Google App Engine/Django - Modifying This Existing Code'], 3], [(1583595, 2), [["I have the wiki set up now to accept a GET parameter to specify which revision you want to see or edit. When the user wants a revision, I fetch the Page from the database, and replace the Page's Content with the Revision's Content:"], ['-10000']], [[" page = models.Page.load(title)\n\nif request.GET.get('rev'):\n  query = db.Query(models.Revision)\n  query.filter('name =', title).order('created')\n  rev = request.GET.get('rev')\n  rev_page = query.fetch(1, int(rev))\n  page.content = rev_page.content\n"]], ['Storing wiki revisions on Google App Engine/Django - Modifying This Existing Code'], 3], [(1583617, 0), [["Lambda, which originated from  Lambda Calculus  and (AFAIK) was first implemented in  Lisp , is basically an anonymous function - a function which doesn't have a name, and is used in-line, in other words you can assign an identifier to a lambda function in a single expression as such:"], ['The code above is roughly equivalent to:']], [[' >>> addTwo = lambda x: x+2\n>>> addTwo(2)\n4\n']], ['What does "lambda" mean in Python, and what\'s the simplest way to use it?'], 3], [(1583617, 1), [['The code above is roughly equivalent to:'], ['Example of a hash tree using lambdas:']], [[' >>> def addTwo(x):\n...     return x+2\n... \n>>> addTwo(2)\n4\n']], ['What does "lambda" mean in Python, and what\'s the simplest way to use it?'], 3], [(1583617, 2), [['Example of a hash tree using lambdas:'], ["In this example I don't really want to define a name to either of those functions because I'll only use them within the hash, therefore I'll use lambdas."]], [[" >>> mapTree = {\n...     'number': lambda x: x**x,\n...     'string': lambda x: x[1:]\n... }\n>>> otype = 'number'\n>>> mapTree[otype](2)\n4\n>>> otype = 'string'\n>>> mapTree[otype]('foo')\n'oo'\n"]], ['What does "lambda" mean in Python, and what\'s the simplest way to use it?'], 3], [(1584220, 0), [["If you're not using self in the method's body, it's a hint that it might not need to be a class member.  You can either move the _validate_item function into module scope:"], ['Or if it really has to stay in the class, the mark the method static:']], [[' def _validate_item(item):\n    if item <= 0:\n        raise ValueError("item should be positive.")\n']], ['Unit testing a method called during initialization?'], 2], [(1584220, 1), [['Or if it really has to stay in the class, the mark the method static:'], ['Your test should then work as written.']], [[' class Positive(object):\n    def __init__(self, item):\n        self._validate_item(item)\n        self.item = item\n\n    @staticmethod\n    def _validate_item(item):\n        if item <= 0:\n            raise ValueError("item should be positive.")\n']], ['Unit testing a method called during initialization?'], 2], [(1584864, 0), [["I'd split recursive enumeration from grepping:"], ['This way you can do both non-recursive and recursive grepping:']], [[' def enumerate_recursive(iter, base=()):\n    for index, item in enumerate(iter):\n        if isinstance(item, basestring):\n            yield (base + (index,)), item\n        else:\n            for pair in enumerate_recursive(item, (base + (index,))):\n                yield pair\n\ndef grep_index(filt, iter):\n    return (index for index, text in iter if filt in text)\n']], ['Grep multi-layered iterable for strings that match (Python)'], 2], [(1584864, 1), [['This way you can do both non-recursive and recursive grepping:'], ["Also note that we're using iterators here, saving RAM for longer sequences if necessary."]], [[" l = list(grep_index('opt1', enumerate(sys.argv)))   # non-recursive\nr = list(grep_index('diff', enumerate_recursive(your_data)))  # recursive\n"]], ['Grep multi-layered iterable for strings that match (Python)'], 2], [(1587248, 0), [['loops.tex'], ['exam.tex']], [[' \\newproblem{IPOpattern}{Which of the following is not a part of the IPO pattern?\n    \\\\ a) Input \\quad b) Program \\quad c) Process \\quad d) Output}{The correct\n    answer goes here.}\n\n\\newproblem{input}{In Python, getting user input is done with a special expression\n    called: \\\\ a) for \\quad b) read \\quad c) simultaneous assignment \\quad\n    d) input}{The correct answer goes here.}\n']], ['How to write a program that will automically generate sample exam questions from a file?'], 2], [(1587248, 1), [['exam.tex'], ['-10000']], [[" \\documentclass{report}\n\\usepackage{probsoln}\n\\begin{document}\n\\hideanswers\n\\chapter{Loops}\n% randomly select 2 problems from loops.tex and add to\n% the data set called 'loops'\n\\loadrandomproblems[loops]{2}{loops}\n\n% Display the problems\n\\renewcommand{\\theenumi}{\\thechapter.\\arabic{enumi}}\n\\begin{enumerate}\n\\foreachproblem[loops]{\\item\\label{prob:\\thisproblemlabel}\\thisproblem}\n\\end{enumerate}\n% You may need to change \\theenumi back here\n\n\\chapter{Functions}\n% randomly select 2 problems from functions.tex and add to\n% the data set called 'functions'\n\\loadrandomproblems[functions]{2}{functions}\n\n% Display the problems\n\\renewcommand{\\theenumi}{\\thechapter.\\arabic{enumi}}\n\\begin{enumerate}\n\\foreachproblem[functions]{\\item\\label{prob:\\thisproblemlabel}\\thisproblem}\n\\end{enumerate}\n% You may need to change \\theenumi back here\n\n\\appendix\n\n\\chapter{Solutions}\n\\showanswers\n\\begin{itemize}\n\\foreachdataset{\\thisdataset}{%\n\\foreachproblem[\\thisdataset]{\\item[\\ref{prob:\\thisproblemlabel}]\\thisproblem}\n}\n\\end{itemize}\n\n\\end{document}\n"]], ['How to write a program that will automically generate sample exam questions from a file?'], 2], [(1588633, 0), [['Ok, I got my answer from Google Groups (thanks Takashi Matsuo and Mike Armstrong). The solution is to modify my CSV file and combine lat and lng in a double-quoted string. The comma within the double-quoted string will not be counted as a CSV delimiter.'], ['Also, here is my new  loader.py . Note that the GeoPtProperty takes a string with "00.0000,00.0000":']], [[' POSTAL_CODE_ID,PostalCode,City,Province,ProvinceCode,CityType,Point\n1,A0E 2Z0,Monkstown,Newfoundland,NL,D,"47.150300000000001,-55.299500000000002"\n']], ['AppEngine GeoPt Data Upload'], 2], [(1588633, 1), [['Also, here is my new  loader.py . Note that the GeoPtProperty takes a string with "00.0000,00.0000":'], ['-10000']], [[" import datetime\nfrom google.appengine.ext import db\nfrom google.appengine.tools import bulkloader\n\n\nclass PostalCode(db.Model):\n  id = db.IntegerProperty()\n  postal_code = db.PostalAddressProperty()\n  city = db.StringProperty()\n  province = db.StringProperty()\n  province_code = db.StringProperty()\n  city_type = db.StringProperty()\n  geo_pt = db.GeoPtProperty()\n\nclass PostalCodeLoader(bulkloader.Loader):\n  def __init__(self):\n    bulkloader.Loader.__init__(self, 'PostalCode',\n                               [('id', int),\n                                ('postal_code', str),\n                                ('city', str),\n                                ('province', str),\n                                ('province_code', str),\n                                ('city_type', str),\n                                ('geo_pt', str)\n                               ])\n\nloaders = [PostalCodeLoader]\n"]], ['AppEngine GeoPt Data Upload'], 2], [(1589706, 0), [['What you propose is quite fast, but the legibility can be improved with the clearer forms:'], ['or, better (faster, more general and more explicit):']], [[' for i in range(c.shape[-1]):\n    print c[:,:,i]\n']], ['Iterating over arbitrary dimension of numpy.array'], 4], [(1589706, 1), [['or, better (faster, more general and more explicit):'], ['However, the first approach above appears to be about twice as slow as the  swapaxes()  approach:']], [[' for i in range(c.shape[-1]):\n    print c[...,i]\n']], ['Iterating over arbitrary dimension of numpy.array'], 4], [(1589706, 2), [['However, the first approach above appears to be about twice as slow as the  swapaxes()  approach:'], ['Note however that the more explicit second solution  c[...,i]  is both quite legible and quite fast:']], [[" python -m timeit -s 'import numpy; c = numpy.arange(24).reshape(2,3,4)' \\\n    'for r in c.swapaxes(2,0).swapaxes(1,2): u = r'\n100000 loops, best of 3: 3.69 usec per loop\n\npython -m timeit -s 'import numpy; c = numpy.arange(24).reshape(2,3,4)' \\\n    'for i in range(c.shape[-1]): u = c[:,:,i]'\n100000 loops, best of 3: 6.08 usec per loop\n\npython -m timeit -s 'import numpy; c = numpy.arange(24).reshape(2,3,4)' \\\n    'for r in numpy.rollaxis(c, 2): u = r'\n100000 loops, best of 3: 6.46 usec per loop\n"]], ['Iterating over arbitrary dimension of numpy.array'], 4], [(1589706, 3), [['Note however that the more explicit second solution  c[...,i]  is both quite legible and quite fast:'], ['-10000']], [[" python -m timeit -s 'import numpy; c = numpy.arange(24).reshape(2,3,4)' \\\n    'for i in range(c.shape[-1]): u = c[...,i]'\n100000 loops, best of 3: 4.74 usec per loop\n"]], ['Iterating over arbitrary dimension of numpy.array'], 4], [(1589968, 0), [['When you say'], ['you are telling Python that var is the same var that was defined in a global context.\nYou would use it in the following way:']], [[' global var\n']], ["Python: Difference between 'global' & globals().update(var)"], 5], [(1589968, 1), [['you are telling Python that var is the same var that was defined in a global context.\nYou would use it in the following way:'], ['Without the global statement, the var inside the "def f" block would be a local variable,\nand setting its value would have no effect on the var outside the "def f" block.']], [[' var=0\ndef f():\n    global var\n    var=1\nf()\nprint(var)\n# 1  <---- the var outside the "def f" block is affected by calling f()\n']], ["Python: Difference between 'global' & globals().update(var)"], 5], [(1589968, 2), [['Without the global statement, the var inside the "def f" block would be a local variable,\nand setting its value would have no effect on the var outside the "def f" block.'], ['Every dict has a method called "update". So globals().update() is a call to this method.\nThe update method expects at least one argument, and that argument is expected to be a dict. If you tell Python']], [[' var=0\ndef f():\n    var=1\nf()\nprint(var)\n# 0  <---- the var outside the "def f" block is unaffected\n']], ["Python: Difference between 'global' & globals().update(var)"], 5], [(1589968, 3), [['Every dict has a method called "update". So globals().update() is a call to this method.\nThe update method expects at least one argument, and that argument is expected to be a dict. If you tell Python'], ['For example:']], [[' globals().update(var)\n']], ["Python: Difference between 'global' & globals().update(var)"], 5], [(1589968, 4), [['For example:'], ['-10000']], [[" #!/usr/bin/env python\n\n# Here is the original globals() dict\nprint(globals())\n# {'__builtins__': <module '__builtin__' (built-in)>, '__name__': '__main__', '__file__': '/home/unutbu/pybin/test.py', '__doc__': None}\n\nvar={'x':'Howdy'}\nglobals().update(var)\n\n# Now the globals() dict contains both var and 'x'\nprint(globals())\n# {'var': {'x': 'Howdy'}, 'x': 'Howdy', '__builtins__': <module '__builtin__' (built-in)>, '__name__': '__main__', '__file__': '/home/unutbu/pybin/test.py', '__doc__': None}\n\n# Lo and behold, you've defined x without saying x='Howdy' !\nprint(x)\nHowdy\n"]], ["Python: Difference between 'global' & globals().update(var)"], 5], [(1589994, 0), [['so_gen.py (generating a constant stream that we can watch):'], ['so_filter.py (doing what you ask):']], [[" import time\nimport sys\nwhile True:\n    for char in 'abcdefx':\n        sys.stdout.write(char)\n        sys.stdout.flush()\n        time.sleep(0.1)\n"]], ['How do I write a unix filter in python?'], 2], [(1589994, 1), [['so_filter.py (doing what you ask):'], ['Try running  python so_gen.py | python so_filter.py  to see what it does.']], [[" import sys\nwhile True:\n    char = sys.stdin.read(1)\n    if not char:\n        break\n    if char != 'x':\n        sys.stdout.write(char)\n        sys.stdout.flush()\n"]], ['How do I write a unix filter in python?'], 2], [(1593019, 0), [['Have a look at  timeit ,  the python profiler  and  pycallgraph .'], ["timeit.Timer('for i in xrange(10): oct(i)', 'gc.enable()').timeit()"]], [['timeit def test():\n    """Stupid test function"""\n    lst = []\n    for i in range(100):\n        lst.append(i)\n\nif __name__ == \'__main__\':\n    import timeit\n    print(timeit.timeit("test()", setup="from __main__ import test"))\n']], ['Is there any simple way to benchmark python script?'], 4], [(1593019, 1), [["timeit.Timer('for i in xrange(10): oct(i)', 'gc.enable()').timeit()"], ['Which will give you:']], [[' import cProfile\nimport re\ncProfile.run(\'re.compile("foo|bar")\')\n']], ['Is there any simple way to benchmark python script?'], 4], [(1593019, 2), [['Which will give you:'], ['Also, to get to grips with the output of  profile , have a look at  this post']], [['       197 function calls (192 primitive calls) in 0.002 seconds\n\nOrdered by: standard name\n\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n     1    0.000    0.000    0.001    0.001 <string>:1(<module>)\n     1    0.000    0.000    0.001    0.001 re.py:212(compile)\n     1    0.000    0.000    0.001    0.001 re.py:268(_compile)\n     1    0.000    0.000    0.000    0.000 sre_compile.py:172(_compile_charset)\n     1    0.000    0.000    0.000    0.000 sre_compile.py:201(_optimize_charset)\n     4    0.000    0.000    0.000    0.000 sre_compile.py:25(_identityfunction)\n   3/1    0.000    0.000    0.000    0.000 sre_compile.py:33(_compile)\n']], ['Is there any simple way to benchmark python script?'], 4], [(1593019, 3), [['Also, to get to grips with the output of  profile , have a look at  this post'], ['The overhead is quite considerable though. So for already long-running processes, creating the graph can take some time.']], [[' pycallgraph graphviz -- ./mypythonscript.py\n']], ['Is there any simple way to benchmark python script?'], 4], [(1594223, 0), [['If "new" is an existing image (and you want to stretch/shrink/grow the new):'], ['If "new" is a new blank image:']], [[" from PIL import Image\n>>> im1 = Image.open('img1.jpg')\n>>> im2 = Image.open('img2.jpg').resize(im1.size)\n"]], ['Preserving extent from the old image'], 2], [(1594223, 1), [['If "new" is a new blank image:'], ['-10000']], [[" >>> im1 = Image.open('img1.jpg')\n>>> im2 = Image.new(im1.mode, im1.size)\n"]], ['Preserving extent from the old image'], 2], [(1595047, 0), [['-10000'], ['This converts local time to UTC']], [[' def getDateAndTime(seconds=None):\n """\n  Converts seconds since the Epoch to a time tuple expressing UTC.\n  When \'seconds\' is not passed in, convert the current time instead.\n  :Parameters:\n      - `seconds`: time in seconds from the epoch.\n  :Return:\n      Time in UTC format.\n"""\nreturn time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime(seconds))`\n']], ['Convert to UTC Timestamp'], 2], [(1595047, 1), [['This converts local time to UTC'], ['http://feihonghsu.blogspot.com/2008/02/converting-from-local-time-to-utc.html']], [[' time.mktime(time.localtime(calendar.timegm(utc_time)))\n']], ['Convert to UTC Timestamp'], 2], [(1595492, 0), [['The following code now runs perfectly.'], ['EDIT2: Found another solution, with more help from pooryorick - instead of using  close_fds=True  and close  ALL  fds, one could close the  fd s that belongs to the first process, when executing the second, and it will work. The closing must be done in the child so the  preexec_fn  function from Popen comes very handy to do just that. On executing p2 you can do:']], [[' from subprocess import Popen, PIPE\n\np1 = Popen(["grep", "-v", "not"], stdin=PIPE, stdout=PIPE)\np2 = Popen(["cut", "-c", "1-10"], stdin=p1.stdout, stdout=PIPE, close_fds=True)\np1.stdin.write(\'Hello World\\n\')\np1.stdin.close()\nresult = p2.stdout.read() \nassert result == "Hello Worl\\n"\n']], ['blocks - send input to python subprocess pipeline'], 2], [(1595492, 1), [['EDIT2: Found another solution, with more help from pooryorick - instead of using  close_fds=True  and close  ALL  fds, one could close the  fd s that belongs to the first process, when executing the second, and it will work. The closing must be done in the child so the  preexec_fn  function from Popen comes very handy to do just that. On executing p2 you can do:'], ['-10000']], [[' p2 = Popen(cmd2, stdin=p1.stdout, stdout=PIPE, stderr=devnull, preexec_fn=p1.stdin.close)\n']], ['blocks - send input to python subprocess pipeline'], 2], [(1597114, 0), [['You should really only be trying to parse the tokens that you expect to be integers'], ['Arguably more-readable:']], [[' for line in f:\n    tokens = line.split(" ")\n    current_state, input_val, next_state = int(tokens[0]), tokens[1], int(tokens[2])\n']], ['Python graceful fail on int() call?'], 2], [(1597114, 1), [['Arguably more-readable:'], ['-10000']], [[' for line in f:\n    current_state, input_val, next_state = parseline(line)\n\ndef parseline(line):\n    tokens = line.split(" ")\n    return (int(tokens[0]), tokens[1], int(tokens[2]))\n']], ['Python graceful fail on int() call?'], 2], [(1598174, 0), [['-10000'], ['Alex mentioned you can use  __getattr__ , this is how it works']], [[' class myclass(object):\n    def __init__(self):\n        self.__age=None\n    @property\n    def age(self):\n        if self.__age is None:\n            self.__age=21  #This can be a long computation\n        return self.__age\n']], ['Pythonic way to only do work first time a variable is called'], 2], [(1598174, 1), [['Alex mentioned you can use  __getattr__ , this is how it works'], ["__getattr__()  is invoked when the attribute doesn't exist on the object, ie. the first time you try to access  age . Every time after,  age  exists so  __getattr__  doesn't get called "]], [[' class myclass(object):\n    def __getattr__(self, attr):\n        if attr=="age":\n            self.age=21   #This can be a long computation\n        return super(myclass, self).__getattribute__(attr)\n']], ['Pythonic way to only do work first time a variable is called'], 2], [(1598823, 0), [['In each module, I define a logger using'], ["If my app is going to be potentially used in a site which doesn't configure logging in settings.py, I define a NullHandler somewhere as follows:"]], [[' logger = logging.getLogger(__name__)\n']], ['Elegant setup of Python logging in Django'], 3], [(1598823, 1), [["If my app is going to be potentially used in a site which doesn't configure logging in settings.py, I define a NullHandler somewhere as follows:"], ['and ensure that an instance of it is added to all loggers created in the modules in my apps which use logging. (Note: NullHandler is already in the logging package for Python 3.1, and will be in Python 2.7.) So:']], [[' #someutils.py\n\nclass NullHandler(logging.Handler):\n    def emit(self, record):\n        pass\n\nnull_handler = NullHandler()\n']], ['Elegant setup of Python logging in Django'], 3], [(1598823, 2), [['and ensure that an instance of it is added to all loggers created in the modules in my apps which use logging. (Note: NullHandler is already in the logging package for Python 3.1, and will be in Python 2.7.) So:'], ['This is done to ensure that your modules play nicely in a site which doesn\'t configure logging in settings.py, and that you don\'t get any annoying "No handlers could be found for logger X.Y.Z" messages (which are warnings about potentially misconfigured logging).']], [[' logger = logging.getLogger(__name__)\nlogger.addHandler(someutils.null_handler)\n']], ['Elegant setup of Python logging in Django'], 3], [(1598932, 0), [['New in Django 1.1'], ['or using  an F expression :']], [[" Counter.objects.get_or_create(name = name)\nCounter.objects.filter(name = name).update(count = F('count')+1)\n"]], ['Atomic increment of a counter in django'], 2], [(1598932, 1), [['or using  an F expression :'], ['-10000']], [[" counter = Counter.objects.get_or_create(name = name)\ncounter.count = F('count') +1\ncounter.save()\n"]], ['Atomic increment of a counter in django'], 2], [(1600129, 0), [["So having said all that, I tried to keep a log of the console commands being issued.  I'll interject commentary where necessary.  The final code is at the bottom."], ["For space sake, and since the models invariably look the same in the end, I'm only going to demonstrate with 'movies' app."]], [['Command History django-admin.py startproject southtest\nmanage.py startapp movies\nmanage.py startapp tv\nmanage.py syncdb\nmanage.py startmigration movies --initial\nmanage.py startmigration tv --initial\nmanage.py migrate\nmanage.py shell          # added some fake data...\nmanage.py startapp media\nmanage.py startmigration media --initial\nmanage.py migrate\n# edited code, wrote new models, but left old ones intact\nmanage.py startmigration movies unified-videofile --auto\n# create a new (blank) migration to hand-write data migration\nmanage.py startmigration movies videofile-to-movievideofile-data \nmanage.py migrate\n# edited code, wrote new models, but left old ones intact\nmanage.py startmigration tv unified-videofile --auto\n# create a new (blank) migration to hand-write data migration\nmanage.py startmigration tv videofile-to-movievideofile-data\nmanage.py migrate\n# removed old VideoFile model from apps\nmanage.py startmigration movies removed-videofile --auto\nmanage.py startmigration tv removed-videofile --auto\nmanage.py migrate\n']], ['Using south to refactor a Django model with inheritance'], 4], [(1600129, 1), [["For space sake, and since the models invariably look the same in the end, I'm only going to demonstrate with 'movies' app."], ['-10000']], [["movies/models.py from django.db import models\nfrom media.models import VideoFile as BaseVideoFile\n\n# This model remains until the last migration, which deletes \n# it from the schema.  Note the name conflict with media.models\nclass VideoFile(models.Model):\n    movie = models.ForeignKey(Movie, blank=True, null=True)\n    name = models.CharField(max_length=1024, blank=True)\n    size = models.IntegerField(blank=True, null=True)\n    ctime = models.DateTimeField(blank=True, null=True)\n\nclass MovieVideoFile(BaseVideoFile):\n    movie = models.ForeignKey(Movie, blank=True, null=True, related_name='shows')\n"]], ['Using south to refactor a Django model with inheritance'], 4], [(1600129, 2), [['-10000'], ['-10000']], [["movies/migrations/0002_unified-videofile.py (schema migration) from south.db import db\nfrom django.db import models\nfrom movies.models import *\n\nclass Migration:\n\n    def forwards(self, orm):\n\n        # Adding model 'MovieVideoFile'\n        db.create_table('movies_movievideofile', (\n            ('videofile_ptr', orm['movies.movievideofile:videofile_ptr']),\n            ('movie', orm['movies.movievideofile:movie']),\n        ))\n        db.send_create_signal('movies', ['MovieVideoFile'])\n\n    def backwards(self, orm):\n\n        # Deleting model 'MovieVideoFile'\n        db.delete_table('movies_movievideofile')\n"]], ['Using south to refactor a Django model with inheritance'], 4], [(1600129, 3), [['-10000'], ['-10000']], [["movies/migration/0003_videofile-to-movievideofile-data.py (data migration) from south.db import db\nfrom django.db import models\nfrom movies.models import *\n\nclass Migration:\n\n    def forwards(self, orm):\n        for movie in orm['movies.videofile'].objects.all():\n            new_movie = orm.MovieVideoFile.objects.create(movie = movie.movie,)\n            new_movie.videofile_ptr = orm['media.VideoFile'].objects.create()\n\n            # videofile_ptr must be created first before values can be assigned\n            new_movie.videofile_ptr.name = movie.name\n            new_movie.videofile_ptr.size = movie.size\n            new_movie.videofile_ptr.ctime = movie.ctime\n            new_movie.videofile_ptr.save()\n\n    def backwards(self, orm):\n        print 'No Backwards'\n"]], ['Using south to refactor a Django model with inheritance'], 4], [(1602919, 0), [['-10000'], ['See minidom  primer  and  API Reference .']], [[' import xml.dom.minidom\nfilename=\'abc.xml\'\ndoc = xml.dom.minidom.parse(filename)\nprint doc.toxml()\n\nc = doc.getElementsByTagName("c")\nprint c[0].toxml()\nc[0].childNodes[0].nodeValue = \'zip\'\nprint doc.toxml()\n\ndef replace(tagname, newvalue):\n  \'\'\'doc is global, first occurrence of tagname gets it!\'\'\'\n  doc.getElementsByTagName(tagname)[0].childNodes[0].nodeValue = newvalue\nreplace(\'c\', \'zit\')\n\nprint doc.toxml()\n']], ['Setting value for a node in XML document in Python'], 2], [(1602919, 1), [['See minidom  primer  and  API Reference .'], ['-10000']], [[' # cat abc.xml\n<root>\n  <a>\n    <c>zap</c>\n  </a>\n  <b>\n  </b>\n</root>\n']], ['Setting value for a node in XML document in Python'], 2], [(1602934, 0), [['in  is the intended way to test for the existence of a key in a  dict .'], ['If you wanted a default, you can always use  dict.get() :']], [[' d = dict()\n\nfor i in xrange(100):\n    key = i % 10\n    if key in d:\n        d[key] += 1\n    else:\n        d[key] = 1\n']], ['Check if a given key already exists in a dictionary'], 3], [(1602934, 1), [['If you wanted a default, you can always use  dict.get() :'], ['... and if you wanted to always ensure a default value for any key you can use  defaultdict  from the  collections  module, like so:']], [[' d = dict()\n\nfor i in xrange(100):\n    key = i % 10\n    d[key] = d.get(key, 0) + 1\n']], ['Check if a given key already exists in a dictionary'], 3], [(1602934, 2), [['... and if you wanted to always ensure a default value for any key you can use  defaultdict  from the  collections  module, like so:'], ['... but in general, the  in  keyword is the best way to do it.']], [[' from collections import defaultdict\n\nd = defaultdict(lambda: 0)\n\nfor i in xrange(100):\n    d[i % 10] += 1\n']], ['Check if a given key already exists in a dictionary'], 3], [(1603578, 0), [['Approximately:'], ['Now about that global....']], [[" attempts = [\n    { 'database'='postgres', 'user'='pgsql', ...},\n    { 'database'='postgres', 'user'='postgres', 'host'='localhost', 'password'=getpass()},\n    ...\n]\nconn = None\nfor attempt in attempts:\n    try:\n        conn = psycopg2.connect(**attempt)\n        break\n    except psycopg2.OperationalError:\n        pass\nif conn is None:\n    raise a ruckus\nCURSOR = conn.cursor()\n"]], ["Python idiom for 'Try until no exception is raised'"], 3], [(1603578, 1), [['Now about that global....'], ['Bringing it all together:']], [[' class MyCursor:\n    def __init__(self):\n        self.CURSOR = None\n    def __call__(self):\n        if self.CURSOR is None:\n            <insert logic here>\n        return self.CURSOR\n\nget_cursor = MyCursor()\n']], ["Python idiom for 'Try until no exception is raised'"], 3], [(1603578, 2), [['Bringing it all together:'], ['Note: completely untested']], [[" class MyCursor:\n    def __init__(self):\n        self.CURSOR = None\n    def __call__(self):\n        if self.CURSOR is None:\n            attempts = [\n                {'database'='postgres', 'user'='postgres'},\n                {'database'='postgres', 'user'='pgsql'},\n                {'database'='postgres', 'user'='postgres', 'host'='localhost', 'password'=True},\n                {'database'='postgres', 'user'='pgsql', 'host'='localhost', 'password'=True},\n            ]\n            conn = None\n            for attempt in attempts:\n                if 'password' in attempt:\n                    attempt['password'] = getpass()\n                try:\n                    conn = psycopg2.connect(**attempt)\n                    break # that didn't throw an exception, we're done\n                except psycopg2.OperationalError:\n                    pass\n            if conn is None:\n                raise a ruckus # nothin' worked\n            self.CURSOR = conn.cursor()\n        return self.CURSOR\nget_cursor = MyCursor()\n"]], ["Python idiom for 'Try until no exception is raised'"], 3], [(1606436, 0), [['You can achieve this by creating a simple, empty wrapper class around the returned value from  namedtuple .  Contents of a file I created ( nt.py ):'], ['Then in the Python REPL:']], [[' from collections import namedtuple\n\nPoint_ = namedtuple("Point", ["x", "y"])\n\nclass Point(Point_):\n    """ A point in 2d space """\n    pass\n']], ['Adding docstrings to namedtuples?'], 5], [(1606436, 1), [['Then in the Python REPL:'], ['Or you could do:']], [[' >>> print nt.Point.__doc__\n A point in 2d space \n']], ['Adding docstrings to namedtuples?'], 5], [(1606436, 2), [['Or you could do:'], ['-10000']], [[' >>> help(nt.Point)  # which outputs...\n']], ['Adding docstrings to namedtuples?'], 5], [(1606436, 3), [['-10000'], ['which outputs:']], [[' def NamedTupleWithDocstring(docstring, *ntargs):\n    nt = namedtuple(*ntargs)\n    class NT(nt):\n        __doc__ = docstring\n    return NT\n\nPoint3D = NamedTupleWithDocstring("A point in 3d space", "Point3d", ["x", "y", "z"])\n\np3 = Point3D(1,2,3)\n\nprint p3.__doc__\n']], ['Adding docstrings to namedtuples?'], 5], [(1606436, 4), [['which outputs:'], ['-10000']], [[' A point in 3d space\n']], ['Adding docstrings to namedtuples?'], 5], [(1608040, 0), [['For clarity:'], ['For conciseness (this works because True is a subclass of int with a value 1):']], [[' num_true = sum(1 for condition in d.values() if condition)\n']], ['Counting booleans in dictionary'], 2], [(1608040, 1), [['For conciseness (this works because True is a subclass of int with a value 1):'], ['-10000']], [[' num_true = sum(d.values())\n']], ['Counting booleans in dictionary'], 2], [(1609241, 0), [['You may want to take a look in to using a custom manager for the  admin_objects  of your model.'], ['By overwriting the  get_query_set  method you can filter the results. Then just assign this to the  admin_objects  property of your  User  model.']], [[' class UserAdminManager(models.AdminManager):\n"""\nCustom manager for the User model.\n"""\ndef get_query_set(self):\n    """\n    Overwrites the get_query_set to only return Users in the queue.\n    """\n    return super(UserAdminManager, self).get_query_set().filter(userprofile__queue=True)\n']], ['Filter a User list using a UserProfile field in Django Admin'], 2], [(1609241, 1), [['By overwriting the  get_query_set  method you can filter the results. Then just assign this to the  admin_objects  property of your  User  model.'], ["Some of the property names in my example may be wrong, as I don't know your model setup, but hopefully you get the idea."]], [[' admin_objects = UserAdminManager()\n']], ['Filter a User list using a UserProfile field in Django Admin'], 2], [(1610217, 0), [['This should take you most of the way there:'], ["Here's how it looks in python ( example lifted from here ):"]], [[' public class MakeTrans\n{\n    private readonly Dictionary<char, char> d;\n    public MakeTrans(string intab, string outab)\n    {\n        d = Enumerable.Range(0, intab.Length).ToDictionary(i => intab[i], i => outab[i]);\n        //d = new Dictionary<char, char>();\n        //for (int i = 0; i < intab.Length; i++)\n        //    d[intab[i]] = outab[i];\n    }\n    public string Translate(string src)\n    {\n        System.Text.StringBuilder sb = new StringBuilder(src.Length);\n        foreach (char src_c in src)\n            sb.Append(d.ContainsKey(src_c) ? d[src_c] : src_c);\n        return sb.ToString();\n    }\n}\n']], ['C# equivalence of python maketrans and translate'], 4], [(1610217, 1), [["Here's how it looks in python ( example lifted from here ):"], ['Here is C# test code:']], [[' >>> from string import maketrans   # Required to call maketrans function.\n>>>\n>>> intab = "aeiou"\n>>> outtab = "12345"\n>>> trantab = maketrans(intab, outtab)\n>>>\n>>> str = "this is string example....wow!!!";\n>>> print str.translate(trantab);\nth3s 3s str3ng 2x1mpl2....w4w!!!\n']], ['C# equivalence of python maketrans and translate'], 4], [(1610217, 2), [['Here is C# test code:'], ['And here is the output:']], [['     static void Main(string[] args)\n    {\n        MakeTrans.MakeTrans mt = new MakeTrans.MakeTrans("aeiou", "12345");\n        Console.WriteLine("{0}", mt.Translate("this is string example....wow!!!"));\n    }\n']], ['C# equivalence of python maketrans and translate'], 4], [(1610217, 3), [['And here is the output:'], ['-10000']], [[' th3s 3s str3ng 2x1mpl2....w4w!!!\n']], ['C# equivalence of python maketrans and translate'], 4], [(1611019, 0), [["Here is a decorator that seems to work.\nNote that this requires return locals() at the end of the function due to being unable to set locals from the outside (I don't have much experience programming so if there is a way, I don't know it)."], ['The output would be:']], [[" class Static(object):\ndef __init__(self, **kwargs):\n    self.kwargs = kwargs\n\ndef __call__(self, f):\n    def wrapped_f():\n        try:\n            new_kwargs = {}\n            for key in self.kwargs:\n                i = getattr(f, key)\n                new_kwargs[key] = i\n            self.kwargs = new_kwargs\n        except:\n            pass\n        for key, value in f(**self.kwargs).items():\n            setattr(f, key, value)\n    return wrapped_f\n\n@Static(x=0, y=5, z='...')\ndef f(x, y, z):\n    x += 1\n    y += 5\n    print x, y, z\n    return locals()\n"]], ['Python: static variable decorator'], 5], [(1611019, 1), [['The output would be:'], ['EDIT again: Changed to to make it a few seconds faster.\nEdit 3; changed to function instead of class']], [[' >>> f()\n1 10 ...\n>>> f()\n2 15 ...\n>>> f()\n3 20 ...\n']], ['Python: static variable decorator'], 5], [(1611019, 2), [['EDIT again: Changed to to make it a few seconds faster.\nEdit 3; changed to function instead of class'], ['tested:']], [[" def static(**kwargs):\n    def wrap_f(function):\n        def probeFunc(frame, event, arg):\n            if event == 'call':\n                frame.f_locals.update(kwargs)\n                frame.f_globals.update(kwargs)\n            elif event == 'return':\n                for key in kwargs:\n                    kwargs[key] = frame.f_locals[key]\n                sys.settrace(None)\n            return probeFunc\n        def traced():\n            sys.settrace(probeFunc)\n            function()\n        return traced\n    return wrap_f\n"]], ['Python: static variable decorator'], 5], [(1611019, 3), [['tested:'], ['output:']], [[" @static(x=1)\ndef f():\n    x += 1\n\nglobal_x = 1\ndef test_non_static():\n    global global_x\n    global_x += 1\n\n\nprint 'Timeit static function: %s' % timeit.timeit(f)\nprint 'Timeit global variable: %s' % timeit.timeit(test_non_static)\n"]], ['Python: static variable decorator'], 5], [(1611019, 4), [['output:'], ['Using settrace slows it down quite drastically.']], [[' Timeit static function: 5.10412869535\nTimeit global variable: 0.242917510783\n']], ['Python: static variable decorator'], 5], [(1612733, 0), [["Here's a full (but untested) example:"], ["Note the specific line that's critical here:"]], [[" from setuptools import setup, find_packages\n\nsetup(\n    name='your_project_name',\n    version='0.1',\n    description='A description.',\n    packages=find_packages(exclude=['ez_setup', 'tests', 'tests.*']),\n    package_data={'': ['license.txt']},\n    include_package_data=True,\n    install_requires=[],\n)\n"]], ['Including non-Python files with setup.py'], 4], [(1612733, 1), [["Note the specific line that's critical here:"], ['This is a  dict  of package names (empty = all packages) to a list of patterns (can include globs).  For example, if you want to only specify files within your package, you can do that too:']], [[" package_data={'': ['license.txt']}\n"]], ['Including non-Python files with setup.py'], 4], [(1612733, 2), [['This is a  dict  of package names (empty = all packages) to a list of patterns (can include globs).  For example, if you want to only specify files within your package, you can do that too:'], ['For example, if you wanted to include the  requirements.txt  from top-level, recursively include the top-level "data" directory:']], [[" package_data={'yourpackage': ['*.txt', 'path/to/resources/*.txt']}\n"]], ['Including non-Python files with setup.py'], 4], [(1612733, 3), [['For example, if you wanted to include the  requirements.txt  from top-level, recursively include the top-level "data" directory:'], ['-10000']], [[' include requirements.txt\nrecursive-include data *\n']], ['Including non-Python files with setup.py'], 4], [(1613249, 0), [["Actually, there's an even simpler solution than any of these:"], ['The resulting c is then:']], [[' import numpy as np\n\na = array([1,2,3,4,5,6])\nb = array([1,4,5])\n\nc = np.in1d(a,b)\n']], ['NumPy: Comparing Elements in Two Arrays'], 2], [(1613249, 1), [['The resulting c is then:'], ['-10000']], [[' array([ True, False, False,  True,  True, False], dtype=bool)\n']], ['NumPy: Comparing Elements in Two Arrays'], 2], [(1613772, 0), [["Using the  Verifying the Facebook User  page on the developer wiki I tracked down the PyFacebook  getSession ,  validate_signature  and  getLoggedInUser  methods and along with the code found in PyFacebook's example.py for Django:"], ['Got the following quick test for Zope3 working using the FBML button:']], [[" if 'session_key' in request.session and 'uid' in request.session:\n    fb.session_key = request.session['session_key']\n    fb.uid = request.session['uid']\nelse:\n\n    try:\n        fb.auth_token = request.GET['auth_token']\n    except KeyError:\n        # Send user to the Facebook to login\n        return HttpResponseRedirect(fb.get_login_url())\n\n    # getSession sets the session_key and uid\n    # Store these in the cookie so we don't have to get them again\n    fb.auth.getSession()\n    request.session['session_key'] = fb.session_key\n    request.session['uid'] = fb.uid\n"]], ['Accessing Facebook Connect FBML cookie via PyFacebook?'], 2], [(1613772, 1), [['Got the following quick test for Zope3 working using the FBML button:'], ['-10000']], [[" import facebook\n\nAPI_KEY     =   'your_api_key'\nSECRET_KEY  =   'your_secret_key'\n\nfb = odb.facebook.Facebook(API_KEY, SECRET_KEY)\n\nfb_uid = self.request[API_KEY+'_user']\nfb_session_key = self.request[API_KEY+'_session_key']\nfb_ss = self.request[API_KEY+'_ss']\nfb_signature = self.request[API_KEY] #no suffix for signature\n\nfb.session_key = fb_session_key\nfb.uid = fb_uid\n\nfb.friends.get() # Results in list of friends\n"]], ['Accessing Facebook Connect FBML cookie via PyFacebook?'], 2], [(1614190, 0), [['There are plain comments, which start with  # :'], ['And also Docstrings, which document modules, classes, methods and functions:']], [[' return sys.stdin.readline()       # This is a comment\n']], ['How do I add text describing the code into a Python source file?'], 2], [(1614190, 1), [['And also Docstrings, which document modules, classes, methods and functions:'], ['Unlike many other languages, Python does not have a multiline comment syntax (though docstrings can be multiline).']], [[' def getline():\n    """This is a docstring"""\n    return sys.stdin.readline()\n']], ['How do I add text describing the code into a Python source file?'], 2], [(1615379, 0), [['Probably not the most beautiful procedure, but this works:'], ["paste your commands, followed by  ''' :"]], [[" cmds = '''\n"]], ['Pasting multiple lines into IDLE'], 4], [(1615379, 1), [["paste your commands, followed by  ''' :"], ['Or more directly,']], [[" a = 1\nb = 2\nc = 3\n'''\n"]], ['Pasting multiple lines into IDLE'], 4], [(1615379, 2), [['Or more directly,'], ["then paste your commands, followed by  ''') :"]], [[" exec('''\n"]], ['Pasting multiple lines into IDLE'], 4], [(1615379, 3), [["then paste your commands, followed by  ''') :"], ["It's just a trick, maybe there's a more official, elegant way."]], [[" a = 1\nb = 2\nc = 3\n''')\n"]], ['Pasting multiple lines into IDLE'], 4], [(1616342, 0), [['There is a method to create  QPixmap  from a  HBITMAP , so the only problem is how to convert  HICON  to  HBITMAP . This can be done using  GetIconInfo .'], ['EDIT:  This code will not help with antialiasing and alpha channel. Your new code is almost correct, but you need to tell Qt to load the alpha channel. If you replace:']], [[" icons = win32gui.ExtractIconEx('C:/Program Files/Internet Explorer/iexplore.exe', 0, 10)\ninfo = win32gui.GetIconInfo(icons[0][0])\npixmap = QtGui.QPixmap.fromWinHBITMAP(info[4])\ninfo[3].close()\ninfo[4].close()\n# call win32gui.DestroyIcon on all the icons returned by ExtractIconEx\n"]], ['Best way to extract .ico from .exe and paint with PyQt?'], 3], [(1616342, 1), [['EDIT:  This code will not help with antialiasing and alpha channel. Your new code is almost correct, but you need to tell Qt to load the alpha channel. If you replace:'], ['with:']], [[' self.pixmap = QtGui.QPixmap.fromWinHBITMAP(self.bitmapFromHIcon(large[0]))\n']], ['Best way to extract .ico from .exe and paint with PyQt?'], 3], [(1616342, 2), [['with:'], ['it will do the right thing. The "magic" number  2  should be technically  QtGui.QPixmap.Alpha  but for some reason Qt doesn\'t provide the constant.']], [[' self.pixmap = QtGui.QPixmap.fromWinHBITMAP(self.bitmapFromHIcon(large[0]), 2)\n']], ['Best way to extract .ico from .exe and paint with PyQt?'], 3], [(1616767, 0), [["You'll need to represent the image as a 2-dimensional array.  This means either making a list of lists of pixels, or viewing the 1-dimensional array as a 2d one with some clever math.  Then, for each pixel that is targeted, you'll need to find all surrounding pixels.  You could do this with a python generator thus:"], ['So, you would use it like this:']], [[' def targets(x,y):\n    yield (x,y) # Center\n    yield (x+1,y) # Left\n    yield (x-1,y) # Right\n    yield (x,y+1) # Above\n    yield (x,y-1) # Below\n    yield (x+1,y+1) # Above and to the right\n    yield (x+1,y-1) # Below and to the right\n    yield (x-1,y+1) # Above and to the left\n    yield (x-1,y-1) # Below and to the left\n']], ['PIL Best Way To Replace Color?'], 2], [(1616767, 1), [['So, you would use it like this:'], ['-10000']], [[' for x in range(width):\n    for y in range(height):\n        px = pixels[x][y]\n        if px[0] == 255 and px[1] == 255 and px[2] == 255:\n            for i,j in targets(x,y):\n                newpixels[i][j] = replacementColor\n']], ['PIL Best Way To Replace Color?'], 2], [(1617494, 0), [["You asked about static solutions. Here's a dynamic one. Suppose you run the code and see an errant print or write to sys.stdout, and want to know where it comes from. You can replace sys.stdout and let the exception traceback help you:"], ["For something a bit more sophisticated, replace 'sys.stdout' with something which reports where the print statement is located. I'll use traceback.print_stack() to show the full stack, but you can do other things like using sys._getframe() to look up one stack level in order to get the line number and filename."]], [[' >>> import sys\n>>> def go():\n...   sys.stdout = None\n...   print "Hello!"\n... \n>>> go()\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "<stdin>", line 3, in go\nAttributeError: \'NoneType\' object has no attribute \'write\'\n>>> print "Here"\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nAttributeError: \'NoneType\' object has no attribute \'write\'\n>>> \n']], ['Finding a print statement in Python'], 3], [(1617494, 1), [["For something a bit more sophisticated, replace 'sys.stdout' with something which reports where the print statement is located. I'll use traceback.print_stack() to show the full stack, but you can do other things like using sys._getframe() to look up one stack level in order to get the line number and filename."], ["Here's the output"]], [[' import sys\nimport traceback\n\nclass TracePrints(object):\n  def __init__(self):    \n    self.stdout = sys.stdout\n  def write(self, s):\n    self.stdout.write("Writing %r\\n" % s)\n    traceback.print_stack(file=self.stdout)\n\nsys.stdout = TracePrints()\n\ndef a():\n  print "I am here"\n\ndef b():\n  a()\n\nb()\n']], ['Finding a print statement in Python'], 3], [(1617494, 2), [["Here's the output"], ["If you go this route, see also the 'linecache' module, which you can use to print the contents of the line. Take a look at the implementation of traceback.print_stack for details of how to do that."]], [[' Writing \'I am here\'\n  File "stdout.py", line 19, in <module>\n    b()\n  File "stdout.py", line 17, in b\n    a()\n  File "stdout.py", line 14, in a\n    print "I am here"\n  File "stdout.py", line 9, in write\n    traceback.print_stack(file=self.stdout)\nWriting \'\\n\'\n  File "stdout.py", line 19, in <module>\n    b()\n  File "stdout.py", line 17, in b\n    a()\n  File "stdout.py", line 14, in a\n    print "I am here"\n  File "stdout.py", line 9, in write\n    traceback.print_stack(file=self.stdout)\n']], ['Finding a print statement in Python'], 3], [(1619514, 0), [['tuple unpacking works.'], ['My personal favorite for getting arbitrary element is (when you have an unknown number, but also works if you have just one):']], [[' (element,) = myset\n']], ['How to extract the member from single-member set in python?'], 2], [(1619514, 1), [['My personal favorite for getting arbitrary element is (when you have an unknown number, but also works if you have just one):'], ['1 : in Python 2.5 and before, you have to use  iter(myset).next()']], [[' element = next(iter(myset)) ¹\n']], ['How to extract the member from single-member set in python?'], 2], [(1620889, 0), [["Here is some example code which uses regex to find all the text between  <body>...</body>  tags. Although this demonstrates some features of python's re module, note that the  Beautiful Soup  module is very easy to use and is a better tool to use if you plan on parsing HTML or XML. (See below for an example of how you could parse this using BeautifulSoup.)"], ['If you wish to collect all matches, you could use re.findall:']], [[" #!/usr/bin/env python\nimport re\n\n# Here we have a string with a multiline <body>...</body>\nfileString='''baz<body>foo\nbaby foo\nbaby foo\nbaby foo\n</body><body>bar</body>'''\n\n# re.DOTALL tells re that '.' should match any character, including newlines.\nx = re.search('(<body>.*?</body>)', fileString, re.DOTALL)\nfor match in x.groups():\n    print(match)\n# <body>foo\n# baby foo\n# baby foo\n# baby foo\n# </body>\n"]], ['Python RegEx skipping the first few characters?'], 4], [(1620889, 1), [['If you wish to collect all matches, you could use re.findall:'], ['and if you plan to use this pattern more than once, you can pre-compile it:']], [[" print(re.findall('(<body>.*?</body>)', fileString, re.DOTALL))\n# ['<body>foo\\nbaby foo\\nbaby foo\\nbaby foo\\n</body>', '<body>bar</body>']\n"]], ['Python RegEx skipping the first few characters?'], 4], [(1620889, 2), [['and if you plan to use this pattern more than once, you can pre-compile it:'], ['And here is how you could do it with BeautifulSoup:']], [[" pat=re.compile('(<body>.*?</body>)', re.DOTALL)\nprint(pat.findall(fileString))\n# ['<body>foo\\nbaby foo\\nbaby foo\\nbaby foo\\n</body>', '<body>bar</body>']\n"]], ['Python RegEx skipping the first few characters?'], 4], [(1620889, 3), [['And here is how you could do it with BeautifulSoup:'], ['-10000']], [[" #!/usr/bin/env python\nfrom BeautifulSoup import BeautifulSoup\n\nfileString='''baz<body>foo\nbaby foo\nbaby foo\nbaby foo\n</body><body>bar</body>'''\nsoup = BeautifulSoup(fileString)\nprint(soup.body)\n# <body>foo\n# baby foo\n# baby foo\n# baby foo\n# </body>\n\nprint(soup.findAll('body'))\n# [<body>foo\n# baby foo\n# baby foo\n# baby foo\n# </body>, <body>bar</body>]\n"]], ['Python RegEx skipping the first few characters?'], 4], [(1621410, 0), [["In general, to solve such problems you must first download the page of interest as text (use  urllib.urlopen  or anything else, even external utilities such as curl or wget, but not a browser since you want to see how the page looks  before  any Javascript has had a chance to run) and study it to understand its structure.  In this case, after some study, you'll find the relevant parts are (snipping some irrelevant parts in  head  and breaking lines up for readability)...:"], ['The headers you get contain:']], [[' <body onload=nx_init();>\n <dl>\n <dt>\n<a href="http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=&oid=091&aid=0002497340"\n [[snipping other attributes of this tag]]>\nJAPAN TOKYO INTERNATIONAL FILM FESTIVAL</a>\n</dt>\n <dd class="txt_inline">\nEPA¿¬ÇÕ´º½º ¼¼°è <span class="bar">\n|</span>\n 2009.10.25 (ÀÏ) ¿ÀÈÄ 7:21</dd>\n <dd class="sh_news_passage">\n Japan, 25 October 2009. Gayet won the Best Actress Award for her role in the film \'Eight <b>\nTimes</b>\n Up\' directed by French filmmaker Xabi Molia. EPA/DAI KUROKAWA</dd>\n']], ['how to extract some text by use lxml?'], 3], [(1621410, 1), [['The headers you get contain:'], ["For example, here's a script to emit the first few subject/content pairs at that URL (they've changed currently, originally they were being the same as you give;-).  You need a terminal that supports Unicode output (for example, I run this without problem on a Mac's Terminal.App set to utf-8) -- of course, instead of the  print s you can otherwise collect the Unicode fragments (e.g. append them to a list and  ''.join  them when you have all the required pieces), encode them however you wish, etc, etc."]], [[' Content-Type: text/html; charset=ks_c_5601-1987\n']], ['how to extract some text by use lxml?'], 3], [(1621410, 2), [["For example, here's a script to emit the first few subject/content pairs at that URL (they've changed currently, originally they were being the same as you give;-).  You need a terminal that supports Unicode output (for example, I run this without problem on a Mac's Terminal.App set to utf-8) -- of course, instead of the  print s you can otherwise collect the Unicode fragments (e.g. append them to a list and  ''.join  them when you have all the required pieces), encode them however you wish, etc, etc."], ['The logic in lxml, or "BeautifulSoup in lxml clothing", is not very different, just the spelling and capitalization of the various navigational operations changes a bit.']], [[" from BeautifulSoup import BeautifulSoup\nimport urllib\n\ndef getit(pagetext, howmany=0):\n  soup = BeautifulSoup(pagetext)\n  results = []\n  dls = soup.findAll('dl')\n  for adl in dls:\n    thedt = adl.dt\n    while thedt:\n      thea = thedt.a\n      if thea:\n        print 'SUBJECT:', thea.string\n      thedd = thedt.findNextSibling('dd')\n      if thedd:\n        print 'CONTENT:',\n        while thedd:\n          for x in thedd.findAll(text=True):\n            print x,\n          thedd = thedd.findNextSibling('dd')\n        print\n      howmany -= 1\n      if not howmany: return\n      print\n      thedt = thedt.findNextSibling('dt')\n\ntheurl = ('http://news.search.naver.com/search.naver?'\n          'sm=tab%5Fhty&where=news&query=times&x=0&y=0')\nthepage = urllib.urlopen(theurl).read()\ngetit(thepage, 3)\n"]], ['how to extract some text by use lxml?'], 3], [(1622038, 0), [['-10000'], ["Edit : The above is for 'next monday', but since you were looking for 'last monday' you could use"]], [[' >>> import datetime\n>>> today = datetime.date.today()\n>>> today + datetime.timedelta(days=-today.weekday(), weeks=1)\ndatetime.date(2009, 10, 26)\n']], ["Find Monday's date with Python"], 2], [(1622038, 1), [["Edit : The above is for 'next monday', but since you were looking for 'last monday' you could use"], ['-10000']], [[' today - datetime.timedelta(days=today.weekday())\n']], ["Find Monday's date with Python"], 2], [(1622530, 0), [['For example, adding two numbers would be'], ['When in a register machine it would be something like this.']], [[' Push 2 // Push 2 onto the stack\nPush 3 // Push 3 onto the stack\nAdd // Add the top two things on the stack.\n']], ['what exactly is a "register machine"?'], 2], [(1622530, 1), [['When in a register machine it would be something like this.'], ['-10000']], [[' Load x, r0 // Load x onto register 0\nLoad y, r1 // Load y onto register 1\nAdd r0, r1, r2 // Add 1 and 2 and store the result in register 2\n']], ['what exactly is a "register machine"?'], 2], [(1622943, 0), [['Use timeit. Running the test more than once gives me much better results.'], ['->']], [[" func_list=[locals()[key] for key in locals().keys() \n           if callable(locals()[key]) and key.startswith('time')]\n\nalist=range(1000000)\ntimes=[]\nfor f in func_list:\n    n = 10\n    times.append( min(  t for t,_,_ in (f(alist,31) for i in range(n)))) \n\nfor (time,func_name) in zip(times, func_list):\n    print '%s took %0.3fms.' % (func_name, time*1000.)\n"]], ['timeit versus timing decorator'], 2], [(1622943, 1), [['->'], ['-10000']], [[' <function wrapper at 0x01FCB5F0> took 39.000ms.\n<function wrapper at 0x01FCB670> took 41.000ms.\n']], ['timeit versus timing decorator'], 2], [(1623192, 0), [['Keep a dict with the  .pid s of the child processes as keys, and the commandlines to restart them as corresponding values.  i.e.:'], ['os.wait  will return whenever any child process terminates: it gives you (pid, exitstatus) of the child.  So just restart appropriately and maintain  childid .  i.e.:']], [[' childid = []\nfor cmdline in cmdlines:\n  p = subprocess.Popen(cmdline.split())\n  childid[p.pid] = cmdline\n']], ['Execute and monitor multiple instances of external program in Python'], 2], [(1623192, 1), [['os.wait  will return whenever any child process terminates: it gives you (pid, exitstatus) of the child.  So just restart appropriately and maintain  childid .  i.e.:'], ['Presumably you have some criteria for when this infinite loop ends, I just used  mustcontinue  as the name for those criteria here;-).']], [[' while mustcontinue:\n  pid, exitstat = os.wait()\n  cmdline = childid.pop(pid)\n  p = subprocess.Popen(cmdline.split())\n  childid[p.pid] = cmdline\n']], ['Execute and monitor multiple instances of external program in Python'], 2], [(1623849, 0), [['This is a typical job for  NumPy , which is very fast for these kinds of operations:'], ['Now, if you only need the highCountX largest elements, you can even "forget" the small elements (instead of setting them to 0 and sorting them) and only sort the list of large elements:']], [[' array_np = numpy.asarray(array)\nlow_values_flags = array_np < lowValY  # Where values are low\narray_np[low_values_flags] = 0  # All low values set to 0\n']], ['Fastest way to zero out low values in array?'], 2], [(1623849, 1), [['Now, if you only need the highCountX largest elements, you can even "forget" the small elements (instead of setting them to 0 and sorting them) and only sort the list of large elements:'], ['Of course, sorting the whole array if you only need a few elements might not be optimal.  Depending on your needs, you might want to consider the standard  heapq  module.']], [[' array_np = numpy.asarray(array)\nprint numpy.sort(array_np[array_np >= lowValY])[-highCountX:]\n']], ['Fastest way to zero out low values in array?'], 2], [(1624254, 0), [['Use Popen(..., preexec_fn=os.setsid) to create a process group and os.pgkill to kill the entire process group. eg'], ['-10000']], [[' import os\nimport signal\nimport subprocess\nimport time\nfrom threading import Thread\n\nprocess = None\n\ndef executeCommand(command, runCommand):\n    Thread(target=runCommand, args=(command,)).start()\n\ndef runCommand(command):\n    global process\n    args = command.strip().split()\n    process = subprocess.Popen(\n        args, shell=False, stdout=subprocess.PIPE, preexec_fn=os.setsid)\n\n    for line in process.communicate():\n        if line:\n            print "process:", line,\n\nif __name__ == \'__main__\':\n    executeCommand("./ascript.sh", runCommand)\n    time.sleep(1)\n    os.killpg(process.pid, signal.SIGKILL)\n']], ['How do I close the stdout-pipe when killing a process started with python subprocess Popen?'], 2], [(1624254, 1), [['-10000'], ['-10000']], [[' $ time python poc.py \nprocess: sleeping five\n\nreal    0m1.051s\nuser    0m0.032s\nsys 0m0.020s\n']], ['How do I close the stdout-pipe when killing a process started with python subprocess Popen?'], 2], [(1624883, 0), [['A  Python recipe  (In Python 2.6, use  itertools.izip_longest ):'], ['Example usage:']], [[' def grouper(n, iterable, fillvalue=None):\n    "grouper(3, \'ABCDEFG\', \'x\') --> ABC DEF Gxx"\n    args = [iter(iterable)] * n\n    return itertools.zip_longest(*args, fillvalue=fillvalue)\n']], ['Alternative way to split a list into groups of n'], 3], [(1624883, 1), [['Example usage:'], ['If you want the last group to be shorter than the others instead of padded with  fillvalue , then you could e.g. change the code like this:']], [[' >>> list(grouper(3, range(9)))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8)]\n>>> list(grouper(3, range(10)))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, None, None)]\n']], ['Alternative way to split a list into groups of n'], 3], [(1624883, 2), [['If you want the last group to be shorter than the others instead of padded with  fillvalue , then you could e.g. change the code like this:'], ['-10000']], [[' >>> def mygrouper(n, iterable):\n...     args = [iter(iterable)] * n\n...     return ([e for e in t if e != None] for t in itertools.zip_longest(*args))\n... \n>>> list(mygrouper(3, range(9)))\n[[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n>>> list(mygrouper(3, range(10)))\n[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n']], ['Alternative way to split a list into groups of n'], 3], [(1625757, 0), [['This is a much simpler problem if you do it as a recursive generator.  Try this:'], ['As others have pointed out, if what you really want is to pass this into  str.join() , then you will need to convert all the elements to strings.  To do that, you can either replace  yield foo  with  yield str(foo)  throughout my example above, or just use code like the following:']], [[' def flatten(*seq):\n    for item in seq:\n        if isinstance(item, basestring):\n            yield item\n        else:\n            try:\n                it = iter(item)\n            except TypeError:\n                yield item\n                it = None\n            if it is not None:\n                for obj in flatten(it):\n                    yield obj\n']], ['How to convert dumbo sequence file input to tab separated text'], 2], [(1625757, 1), [['As others have pointed out, if what you really want is to pass this into  str.join() , then you will need to convert all the elements to strings.  To do that, you can either replace  yield foo  with  yield str(foo)  throughout my example above, or just use code like the following:'], ['-10000']], [[' "\\t".join(str(o) for o in flatten(seq))\n']], ['How to convert dumbo sequence file input to tab separated text'], 2], [(1628137, 0), [["Most descriptors do their job when accessed as instance attribute only. So it's convenient to return itself when it's accessed for class:"], ['This allows you to get descriptor itself:']], [[' class FixedValueProperty(object):\n    def __init__(self, value):\n        self.value = value\n    def __get__(self, inst, cls):\n        if inst is None:\n            return self\n        return self.value\n']], ['python attribute lookup without any descriptor magic?'], 3], [(1628137, 1), [['This allows you to get descriptor itself:'], ['Note, that this works for (most?) built-in descriptors too:']], [[" >>> class C(object):\n...     prop = FixedValueProperty('abc')\n... \n>>> o = C()\n>>> o.prop\n'abc'\n>>> C.prop\n<__main__.FixedValueProperty object at 0xb7eb290c>\n>>> C.prop.value\n'abc'\n>>> type(o).prop.value\n'abc'\n"]], ['python attribute lookup without any descriptor magic?'], 3], [(1628137, 2), [['Note, that this works for (most?) built-in descriptors too:'], ['Accessing descriptor could be useful when you need to extent it in subclass, but there is a  better way  to do this.']], [[" >>> class C(object):\n...     @property\n...     def prop(self):\n...         return 'abc'\n... \n>>> C.prop\n<property object at 0xb7eb0b6c>\n>>> C.prop.fget\n<function prop at 0xb7ea36f4>\n"]], ['python attribute lookup without any descriptor magic?'], 3], [(1628162, 0), [['Or do something like that:'], ['Note that this is not necessary, you could always do something like:']], [[' from django.utils.itercompat import groupby\navatars = Avatar.objects.select_related("user").filter(valid=True).order_by("-user__date_joined")[:32]\ngrouped_users = groupby(avatars, lambda x: x.user)\nuser_list = []\nfor user, avatar_list in grouped_users:\n    user.avatar = list(avatar_list)[0]\n    user_list.append(user)\n# user_list is now what you asked for in the first_place: \n# a list of users with their avatars\n']], ['chaining queries together in Django'], 2], [(1628162, 1), [['Note that this is not necessary, you could always do something like:'], ['But it might feel more naturally to access the avatars by user.avatar.']], [[' for avatar in avatars:\n    user = avatar.user\n']], ['chaining queries together in Django'], 2], [(1628564, 0), [["If, however, you are trying to load from the  same  server, it should be fairly straightforward. I'm presenting this answer to show how this could be done using jQuery in just a few lines of code."], ['There is one other nice feature to note, which is partial-page-loading. For example, lets say your remote page is a full HTML document, but you only want the content of a single div in that page. You can pass a selector to the  load  method, as in my example above, and this will further simplify your task. For example,']], [[' <div id="placeholder">Please wait, loading...</div>\n\n<script type="text/javascript" src="/path/to/jquery.js">\n</script>\n<script type="text/javascript>\n$(document).ready(function() {\n    $(\'#placeholder\').load(\'/path/to/my/locally-served/page.html\');\n});\n</script>\n']], ['Is it possible access other webpages from within another page'], 2], [(1628564, 1), [['There is one other nice feature to note, which is partial-page-loading. For example, lets say your remote page is a full HTML document, but you only want the content of a single div in that page. You can pass a selector to the  load  method, as in my example above, and this will further simplify your task. For example,'], ['Best of luck! -Mike']], [[" $('#placeholder').load('/path/to/my/locally-served/page.html #someTargetDiv');\n"]], ['Is it possible access other webpages from within another page'], 2], [(1629909, 0), [["The first is to change  'default-directory  to be something local, like:"], ["Another is to change the  'default-directory  just for the invocation of  'py-shell , like so (untested):"]], [[' (add-hook \'python-mode-hook (lambda () (setq default-directory "~"))\n']], ['Emacs: How to start Local python interpreter when editing a remote python file via tramp'], 2], [(1629909, 1), [["Another is to change the  'default-directory  just for the invocation of  'py-shell , like so (untested):"], ['-10000']], [[' (defadvice py-shell (around py-shell-different-directory activate)\n  "set default-directory just for py-shell"\n  (let ((default-directory "~"))\n    ad-do-it))\n']], ['Emacs: How to start Local python interpreter when editing a remote python file via tramp'], 2], [(1630320, 0), [['Most of the times it is easier (and cheaper) to make the  first  iteration the special case instead of the last one:'], ['This will work for any iterable, even for those that have no  len() :']], [[' first = True\nfor data in data_list:\n    if first:\n        first = False\n    else:\n        between_items()\n\n    item()\n']], ["What is the pythonic way to detect the last element in a python 'for' loop?"], 5], [(1630320, 1), [['This will work for any iterable, even for those that have no  len() :'], ['Using the same principle but more compact:']], [[" file = open('/path/to/file')\nfor line in file:\n    process_line(line)\n\n    # No way of telling if this is the last line!\n"]], ["What is the pythonic way to detect the last element in a python 'for' loop?"], 5], [(1630320, 2), [['Using the same principle but more compact:'], ['For @ofko, and others who really need to find out if the current value of an iterable without  len()  is the last one, you will need to look ahead:']], [[' for i, line in enumerate(data_list):\n    if i > 0:\n        between_items()\n    item()\n']], ["What is the pythonic way to detect the last element in a python 'for' loop?"], 5], [(1630320, 3), [['For @ofko, and others who really need to find out if the current value of an iterable without  len()  is the last one, you will need to look ahead:'], ['Then you can use it like this:']], [[' def lookahead(iterable):\n    """Pass through all values from the given iterable, augmented by the\n    information if there are more values to come after the current one\n    (True), or if it is the last value (False).\n    """\n    # Get an iterator and pull the first value.\n    it = iter(iterable)\n    last = next(it)\n    # Run the iterator to exhaustion (starting from the second value).\n    for val in it:\n        # Report the *previous* value (more to come).\n        yield last, True\n        last = val\n    # Report the last value.\n    yield last, False\n']], ["What is the pythonic way to detect the last element in a python 'for' loop?"], 5], [(1630320, 4), [['Then you can use it like this:'], ['-10000']], [[' >>> for i, has_more in lookahead(range(3)):\n...     print(i, has_more)\n0 True\n1 True\n2 False\n']], ["What is the pythonic way to detect the last element in a python 'for' loop?"], 5], [(1632170, 0), [["Since, as @Jonathan says, descriptors (including properties) are per-class, not per-instance, the only way to get different per-instance descriptors is to have each instance individualize its own class. That's pretty shallow and easy as far as metaprogramming goes;-)...:"], ["Now, all that's needed to satisfy the original request is to change:"]], [[" class Individualistic(object_or_whatever_bases):\n  def __init__(self, whatever_args):\n    self.__class__ = type('GottaBeMe', (self.__class__, object), {})\n    # keep rocking...!-)\n"]], ['Using properties defined at a per-instance level not per-class'], 3], [(1632170, 1), [["Now, all that's needed to satisfy the original request is to change:"], ['(also renaming the  object  arg sensibly to avoid trampling on a built-in, and making the class new-style because you should ALWAYS make EVERY class new-style;-), to:']], [[' class WidthVariable:\n    def __init__(self, object)\n        object.width = property(self.get_width)\n']], ['Using properties defined at a per-instance level not per-class'], 3], [(1632170, 2), [['(also renaming the  object  arg sensibly to avoid trampling on a built-in, and making the class new-style because you should ALWAYS make EVERY class new-style;-), to:'], ['Nothing too black-magicky, as you can see!-)']], [[' class WidthVariable(object):\n    def __init__(self, obj)\n        obj.__class__.width = property(self.get_width)\n']], ['Using properties defined at a per-instance level not per-class'], 3], [(1632304, 0), [["Here is a little wrapper class for FooB's to mimic FooA's, but still retain their FooB-ishness."], ['Use it like this:']], [[' from collections import namedtuple\n\n# use namedtuple to define some simple classes (requires Py2.6 or later)\nFooA = namedtuple(\'FooA\', \'id name type foo\')\nFooB = namedtuple(\'FooB\', \'idfoo namefoo spam\')\n\n# create a wrapper class for FooB\'s to look like a FooA\nclass FooAMimic(object):\n    attrMap = dict(zip(FooA._fields, FooB._fields))\n    # or if the fields aren\'t nicely ordered, declare this mapping explicitly\n    #~ attrMap = { \'id\' : \'idfoo\', \'name\' : \'namefoo\', \'foo\' : \'spam\' }\n    def __init__(self, obj):\n        self.obj = obj\n    def __getattr__(self, aname):\n        ob = self.obj\n        if aname in self.attrMap:\n            return getattr(ob, self.attrMap[aname])\n        elif  hasattr(ob, aname):\n            return getattr(ob, aname)\n        else:\n            raise AttributeError("no such attribute " + aname)\n    def __dir__(self):\n        return sorted(set(dir(super(FooAMimic,self)) \n                          + dir(self.obj) \n                          + list(FooA._fields)))\n']], ['Best way to construct a "complex" data structure in Python'], 3], [(1632304, 1), [['Use it like this:'], ['Prints:']], [[' # make some objects, some FooA, some FooB\nfa = FooA(\'a\', \'b\', \'c\',\'d\')\nfb = FooB(\'xx\', \'yy\', \'zz\')\nfc = FooA(\'e\', \'f\', \'g\',\'h\')\n\n# create list of items that are FooA\'s, or FooA lookalikes\ncoll = [fa, FooAMimic(fb), fc]\n\n# access objects like FooA\'s, but notice that the wrapped FooB\n# attributes are still available too\nfor f in sorted(coll, key=lambda k : k.id):\n    print f.id, \'=\', \n    try:\n        print f.namefoo, "(really a namefoo)"\n    except AttributeError:\n        print f.name\n']], ['Best way to construct a "complex" data structure in Python'], 3], [(1632304, 2), [['Prints:'], ['-10000']], [[' a = b\ne = f\nxx = yy (really a namefoo)\n']], ['Best way to construct a "complex" data structure in Python'], 3], [(1633109, 0), [["Here's an update to the previous example:"], ['The following should do it:']], [[' from django.core.mail import EmailMessage\nfrom email.mime.image import MIMEImage\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n# Load the image you want to send as bytes\nimg_data = open(\'logo.jpg\', \'rb\').read()\n\n# Create a "related" message container that will hold the HTML \n# message and the image. These are "related" (not "alternative")\n# because they are different, unique parts of the HTML message,\n# not alternative (html vs. plain text) views of the same content.\nhtml_part = MIMEMultipart(_subtype=\'related\')\n\n# Create the body with HTML. Note that the image, since it is inline, is \n# referenced with the URL cid:myimage... you should take care to make\n# "myimage" unique\nbody = MIMEText(\'<p>Hello <img src="cid:myimage" /></p>\', _subtype=\'html\')\nhtml_part.attach(body)\n\n# Now create the MIME container for the image\nimg = MIMEImage(img_data, \'jpeg\')\nimg.add_header(\'Content-Id\', \'<myimage>\')  # angle brackets are important\nimg.add_header("Content-Disposition", "inline", filename="myimage") # David Hess recommended this edit\nhtml_part.attach(img)\n\n# Configure and send an EmailMessage\n# Note we are passing None for the body (the 2nd parameter). You could pass plain text\n# to create an alternative part for this message\nmsg = EmailMessage(\'Subject Line\', None, \'foo@bar.com\', [\'bar@foo.com\'])\nmsg.attach(html_part) # Attach the raw MIMEBase descendant. This is a public method on EmailMessage\nmsg.send()\n']], ['creating a MIME email template with images to send with python / django'], 2], [(1633109, 1), [['The following should do it:'], ['In reality, you\'ll probably want to send the HTML along with a plain-text alternative. In that case, use MIMEMultipart to create the "related" mimetype container as the root. Then create another MIMEMultipart with the subtype "alternative", and attach both a MIMEText (subtype html) and a MIMEText (subtype plain) to the alternative part. Then attach the image to the related root.']], [[' from email.mime.image import MIMEImage\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n# Load the image you want to send at bytes\nimg_data = open(\'logo.jpg\', \'rb\').read()\n\n# Create a "related" message container that will hold the HTML \n# message and the image\nmsg = MIMEMultipart(_subtype=\'related\')\n\n# Create the body with HTML. Note that the image, since it is inline, is \n# referenced with the URL cid:myimage... you should take care to make\n# "myimage" unique\nbody = MIMEText(\'<p>Hello <img src="cid:myimage" /></p>\', _subtype=\'html\')\nmsg.attach(body)\n\n# Now create the MIME container for the image\nimg = MIMEImage(img_data, \'jpeg\')\nimg.add_header(\'Content-Id\', \'<myimage>\')  # angle brackets are important\nmsg.attach(img)\n\nsend_mail(subject, msg.as_string(), from, [to], priority="high")\n']], ['creating a MIME email template with images to send with python / django'], 2], [(1633932, 0), [['The short answer, as @THC4K points out in a comment:'], ['In action:']], [[' string.split(pattern, 1)[0]\n']], ['Slice a string after a certain phrase?'], 5], [(1633932, 1), [['In action:'], ['And if you need to remove multiple patterns, this is a great candidate for the  reduce  builtin:']], [[' >>> s = "a descriptor 23 fd"\n>>> s.split("23", 1)[0]\n\'a descriptor \'\n>>> s.split("fdasfdsafdsa", 1)[0]\n\'a descriptor 23 fd\'\n']], ['Slice a string after a certain phrase?'], 5], [(1633932, 2), [['And if you need to remove multiple patterns, this is a great candidate for the  reduce  builtin:'], ['The simplest answer is a list/string slice combined with a  string.find :']], [[' >>> string = "a descriptor dps foo 23 bar fd quux"\n>>> patterns = ["dps", "23", "fd"]\n>>> reduce(lambda s, pat: s.split(pat, 1)[0], patterns, string)\n\'a descriptor \'\n>>> reduce(lambda s, pat: s.split(pat, 1)[0], patterns, "uiopuiopuiopuipouiop")\n\'uiopuiopuiopuipouiop\'\n']], ['Slice a string after a certain phrase?'], 5], [(1633932, 3), [['The simplest answer is a list/string slice combined with a  string.find :'], ['A better approach (to avoid cutting off the last character in a missing pattern when  s.find  returns -1) might be to wrap in a simple function:']], [[' >>> s = "a descriptor 23 fd"\n>>> s[:s.find("fd")]\n\'a descriptor 23 \'\n>>> s[:s.find("23")]  \n\'a descriptor \'\n>>> s[:s.find("gggfdf")] # <-- look out! last character got cut off\n\'a descriptor 23 f\'\n']], ['Slice a string after a certain phrase?'], 5], [(1633932, 4), [['A better approach (to avoid cutting off the last character in a missing pattern when  s.find  returns -1) might be to wrap in a simple function:'], ['The  [:s.find(x)]  syntax means take the part of the string from index 0 until the right-hand side of the colon; and in this case, the RHS is the result of  s.find , which returns the index of the string you passed.']], [[' >>> def cutoff(string, pattern):\n...     idx = string.find(pattern)\n...     return string[:idx if idx != -1 else len(string)]\n... \n>>> cutoff(s, "23")\n\'a descriptor \'\n>>> cutoff(s, "asdfdsafdsa")\n\'a descriptor 23 fd\'\n']], ['Slice a string after a certain phrase?'], 5], [(1633984, 0), [['First I check that the expression is syntactically valid and second I break it into individual pieces:'], ['So:']], [[' def parse(expr):\n    if re.match(r\'\\A(("[\\w\\s]+"|\\w+)\\s+)*\\Z\', expr):\n        return re.findall(r\'("[\\w\\s]+"|\\w+)\', expr)\n']], ['Extracting ALL matches of a nested regular expression in python'], 2], [(1633984, 1), [['So:'], ["I'm about 90% sure that this method works appropriately for all strings, but I would still be interested if anyone had a more general solution, this seems sort of kludgey to me."]], [[' >>> parse(\'foo "bar baz" "bob" \')\n[\'foo\', \'"bar baz"\', \'"bob"\']\n>>> parse(\'foo "bar b-&&az" "bob" \')\n>>> parse(\'foo "bar" \')\n[\'foo\', \'"bar"\']\n>>> parse(\'"foo" bar \')\n[\'"foo"\', \'bar\']\n>>> parse(\'foo"bar baz" "bob" \')\n>>> parse(\'&&\')\n']], ['Extracting ALL matches of a nested regular expression in python'], 2], [(1634054, 0), [['Instead of writing something like this:'], ['write this:']], [[' def foreach(self, f):\n    for d in self._data:\n        f(d)\n']], ['Python, lambda, find minimum'], 2], [(1634054, 1), [['write this:'], ['Now you can call  min  as  min(myobj) .']], [[' def __iter__(self):\n    for d in self._data:\n        yield d\n']], ['Python, lambda, find minimum'], 2], [(1635827, 0), [['You could try to encapsulate this in a  struct :'], ['Then you define you multiples with:']], [[' typedef struct s_generator {\n    int current;\n    int (*func)(int);\n} generator;\n\nint next(generator* gen) {\n    int result = gen->current;\n    gen->current = (gen->func)(gen->current);\n    return result;\n}\n']], ['How would one implement Lazy Evaluation in C?'], 3], [(1635827, 1), [['Then you define you multiples with:'], ['You get the next multiple by calling']], [[' int next_multiple(int current) { return 2 + current; }\ngenerator multiples_of_2 = {0, next_multiple};\n']], ['How would one implement Lazy Evaluation in C?'], 3], [(1635827, 2), [['You get the next multiple by calling'], ['-10000']], [[' next(&multiples_of_2);\n']], ['How would one implement Lazy Evaluation in C?'], 3], [(1637479, 0), [["The answer depends what encoding the IDLE REPL is using. You should be more explicit about what's actually unicode text, and what's a byte sequence. Meditate on this example:"], ["As for IDLE, it's kind of  borken , and needs to be patched to work correctly. "]], [[" # -*- coding: utf-8 -*-\nc = u'€'\nprint type(c)\nfor b in c.encode('utf-8'):\n    print ord(b)\n\nc = '€'\nprint type(c)\nfor b in c:\n    print ord(b)\n"]], ['IDLE and unicode chars (2.5.4)'], 2], [(1637479, 1), [["As for IDLE, it's kind of  borken , and needs to be patched to work correctly. "], ['In the first session, by the time the € is interpreted, it has already been mis-encoded, and is unrecoverable.']], [[" IDLE 1.2.2      \n>>> c = u'€'\n>>> ord(c)\n128\n>>> c.encode('utf-8')\n'\\xc2\\x80'\n>>> c\nu'\\x80'\n>>> print c\n[the box thingy]\n\n\n>>> c = u'\\u20ac'\n>>> ord(c)\n8364\n>>> c.encode('utf-8')\n'\\xe2\\x82\\xac'\n>>> c\nu'\\u20ac'\n>>> print c\n€\n"]], ['IDLE and unicode chars (2.5.4)'], 2], [(1638229, 0), [['You need to override  __new__ , not  __init__ :'], ['Now your class work as expected:']], [[' class Foo(int):\n    def __new__(cls, some_argument=None, value=0):\n        i = int.__new__(cls, value)\n        i._some_argument = some_argument\n        return i\n\n    def print_some_argument(self):\n        print self._some_argument\n']], ['Python Class with integer emulation'], 2], [(1638229, 1), [['Now your class work as expected:'], ['More information about overriding  new  can be found in  Unifying types and classes in Python 2.2 .']], [[' >>> f = Foo(some_argument="I am a customized int", value=10)\n>>> f\n10\n>>> f + 8\n18\n>>> f * 0.25\n2.5\n>>> f.print_some_argument()\nI am a customized int\n']], ['Python Class with integer emulation'], 2], [(1638870, 0), [["If there's a django model for it, you can just stick to  django.contrib.admin  or  django.contrib.databrowse .  If not, then you might manage by skipping the django template altogether.  example:"], ['But of course you wanted to avoid even writing that much, so instead of doing html, we can use plain text and the  pprint  module:']], [[' from django.http import HttpResponse\nimport datetime\n\ndef current_datetime(request):\n    now = datetime.datetime.now()\n    html = "<html><body>It is now %s.</body></html>" % now\n    return HttpResponse(html)\n']], ['django generic templates'], 3], [(1638870, 1), [['But of course you wanted to avoid even writing that much, so instead of doing html, we can use plain text and the  pprint  module:'], ['edit:  Hmm... this seems like something a view decorator should handle: ']], [[' from django.http import HttpResponse\nimport datetime\nfrom pprint import pformat\n\ndef current_datetime(request):\n    now = datetime.datetime.now()\n    return HttpResponse(pformat(now), mimetype="text/plain")\n']], ['django generic templates'], 3], [(1638870, 2), [['edit:  Hmm... this seems like something a view decorator should handle: '], ['-10000']], [[' from django.http import HttpResponse\nimport datetime\nimport pprint\n\ndef prettyprint(fun):\n    return lambda request:HttpResponse(\n            pprint.pformat(fun(request)), mimetype="text/plain")\n\n@prettyprint\ndef current_datetime(request):\n    return datetime.datetime.now()\n']], ['django generic templates'], 3], [(1641231, 0), [['You can use something like this to help track down memory leaks'], ['now suppose the tests leaks some memory']], [[' >>> from collections import defaultdict\n>>> from gc import get_objects\n>>> before = defaultdict(int)\n>>> after = defaultdict(int)\n>>> for i in get_objects():\n...     before[type(i)] += 1 \n... \n']], ['Python - Working around memory leaks'], 2], [(1641231, 1), [['now suppose the tests leaks some memory'], ['11 because we have leaked one list containing 10 more lists']], [[" >>> leaked_things = [[x] for x in range(10)]\n>>> for i in get_objects():\n...     after[type(i)] += 1\n... \n>>> print [(k, after[k] - before[k]) for k in after if after[k] - before[k]]\n[(<type 'list'>, 11)]\n"]], ['Python - Working around memory leaks'], 2], [(1645028, 0), [["Updated: here's a simple proof of concept:"], ['when run, the output is:']], [['  1     import sys\n 2\n 3     def trace(frame, event, arg_unused):\n 4         print event, frame.f_lineno, frame.f_locals\n 5         return trace\n 6\n 7     sys.settrace(trace)\n 8\n 9     def foo():\n10         a = 1\n11         b = 2\n12\n13         a = a + b\n14\n15     foo()\n']], ['Trace Table for Python Programs'], 2], [(1645028, 1), [['when run, the output is:'], ['-10000']], [[" call 9 {}\nline 10 {}\nline 11 {'a': 1}\nline 13 {'a': 1, 'b': 2}\nreturn 13 {'a': 3, 'b': 2}\n"]], ['Trace Table for Python Programs'], 2], [(1645778, 0), [['The way you do ORs in django is like this:'], ['so if you actually wanted to do this:']], [[" Model.objects.filter(Q(question__startswith='Who') | Q(question__startswith='What'))\n"]], ['Django: Extending Querysets / Connect multiple filters with OR'], 3], [(1645778, 1), [['so if you actually wanted to do this:'], ['If you are simply concerned about producing clean, DRY code, you can put all the filters that are common to both queries at the top and then "fork" that query set later, like this:']], [[" Model.objects.filter(Q(language='de') | Q(language='en'))\n"]], ['Django: Extending Querysets / Connect multiple filters with OR'], 3], [(1645778, 2), [['If you are simply concerned about producing clean, DRY code, you can put all the filters that are common to both queries at the top and then "fork" that query set later, like this:'], ['-10000']], [[" shared_qs = Model.objects.filter(active=True)\ngerman_entries = shared_qs.filter(language='de')\ngerman_and_english = shared_qs.filter(Q(language='de') | Q(language='en'))\n"]], ['Django: Extending Querysets / Connect multiple filters with OR'], 3], [(1648537, 0), [['One way to do it is to use  findall  with a regex that greedily matches things that can go between separators. eg:'], ['Also note that regexes are  not  suitable for cases where nesting is a possibility. So for example, this would split incorrectly:']], [[' >>> s = "Wilbur Smith (Billy, son of John), Eddie Murphy (John), Elvis Presley, Jane Doe (Jane Doe)"\n>>> r = re.compile(r\'(?:[^,(]|\\([^)]*\\))+\')\n>>> r.findall(s)\n[\'Wilbur Smith (Billy, son of John)\', \' Eddie Murphy (John)\', \' Elvis Presley\', \' Jane Doe (Jane Doe)\']\n']], ['How to split a string by commas positioned outside of parenthesis?'], 2], [(1648537, 1), [['Also note that regexes are  not  suitable for cases where nesting is a possibility. So for example, this would split incorrectly:'], ['If you need to deal with nesting your best bet would be to partition the string into parens, commas, and everthing else (essentially tokenizing it -- this part could still be done with regexes) and then walk through those tokens reassembling the fields, keeping track of your nesting level as you go (this keeping track of the nesting level is what regexes are incapable of doing on their own).']], [[' "Wilbur Smith (son of John (Johnny, son of James), aka Billy), Eddie Murphy (John)"\n']], ['How to split a string by commas positioned outside of parenthesis?'], 2], [(1649351, 0), [['Add the decorator to the view directly in the urlconf:'], ['Import the view into an  <app>/views.py  and add the decorator there:']], [[' ...\n(regexp, decorator(view)),\n...\n']], ['Overriding Django views with decorators'], 3], [(1649351, 1), [['Import the view into an  <app>/views.py  and add the decorator there:'], ['Wrap the view in a new view:']], [[' import view\n\nview = decorator(view)\n']], ['Overriding Django views with decorators'], 3], [(1649351, 2), [['Wrap the view in a new view:'], ['The last one is very handy when you need to change generic views. This is what I often end up doing anyway.']], [[' import view\n\n@decorator\ndef wrapperview(request, *args, **kwargs):\n    ... other stuff ...\n    return view(request, *args, **kwargs)\n']], ['Overriding Django views with decorators'], 3], [(1651154, 0), [['The alternative would be quite heavyweight -- storing "default argument values" in the function object as "thunks" of code to be executed over and over again every time the function is called without a specified value for that argument -- and would make it much harder to get early binding (binding at def time), which is often what you want.  For example, in Python as it exists:'], ['...writing a memoized function like the above is quite an elementary task.  Similarly:']], [[' def ack(m, n, _memo={}):\n  key = m, n\n  if key not in _memo:\n    if m==0: v = n + 1\n    elif n==0: v = ack(m-1, 1)\n    else: v = ack(m-1, ack(m, n-1))\n    _memo[key] = v\n  return _memo[key]\n']], ['Why are default arguments evaluated at definition time in Python?'], 2], [(1651154, 1), [['...writing a memoized function like the above is quite an elementary task.  Similarly:'], ["...the simple  i=i , relying on the early-binding (definition time) of default arg values, is a trivially simple way to get early binding.  So, the current rule is simple, straightforward, and lets you do all you want in a way that's extremely easy to explain and understand: if you want late binding of an expression's value, evaluate that expression in the function body; if you want early binding, evaluate it as the default value of an arg."]], [[" for i in range(len(buttons)):\n  buttons[i].onclick(lambda i=i: say('button %s', i))\n"]], ['Why are default arguments evaluated at definition time in Python?'], 2], [(1653509, 0), [['Looks like you want something like...:'], ['which does emit, as you require,']], [[' import re\n\nx = re.compile(r\'^([^\\|]*?)\\s*\\|[^\\n]*\\n\\s*(.*?)\\s*$\')\n\ns = """NETHERLANDS MUSIC EPA | 36 before\nMichael Buble performs in Amsterdam Canadian singer Michael Buble performs during a concert in Amsterdam, The Netherlands, 30 October 2009. Buble released his new album entitled \'Crazy Love\'. EPA/OLAF KRAAK"""\n\nmo = x.match(s)\n\nsubject, content = mo.groups()\n\nprint \'SUBJECT =\', repr(subject)\nprint \'CONTENT =\', repr(content)\n']], ['How can I parse text in Python?'], 3], [(1653509, 1), [['which does emit, as you require,'], ['Or maybe you want to do the reverse (as a comment suggested)?  then they key RE could be']], [[' SUBJECT = \'NETHERLANDS MUSIC EPA\'\nCONTENT = "Michael Buble performs in Amsterdam Canadian singer Michael Buble performs during a concert in Amsterdam, The Netherlands, 30 October 2009. Buble released his new album entitled \'Crazy Love\'. EPA/OLAF KRAAK"\n']], ['How can I parse text in Python?'], 3], [(1653509, 2), [['Or maybe you want to do the reverse (as a comment suggested)?  then they key RE could be'], ['and you can use this similarly to get a match-object, extract subject and content as its groups, and format them for display as you wish.']], [[' y = re.compile(r\'^.*SUBJECT\\s*=\\s*\\\'([^\\\']*)\\\'.*CONTENT\\s*=\\s*"([^"]*)"\',\n               re.DOTANY)\n']], ['How can I parse text in Python?'], 3], [(1653970, 0), [['There is an  ordered set  (possible  new link ) recipe for this which is referred to from the  Python 2 Documentation . This runs on Py2.6 or later and 3.0 or later without any modifications. The interface is almost exactly the same as a normal set, except that initialisation should be done with a list.'], ["This is a MutableSet, so the signature for  .union  doesn't match that of set, but since it includes  __or__  something similar can easily be added:"]], [[' OrderedSet([1, 2, 3])\n']], ['Does Python have an ordered set?'], 2], [(1653970, 1), [["This is a MutableSet, so the signature for  .union  doesn't match that of set, but since it includes  __or__  something similar can easily be added:"], ['-10000']], [[' @staticmethod\ndef union(*sets):\n    union = OrderedSet()\n    union.union(*sets)\n    return union\n\ndef union(self, *sets):\n    for set in sets:\n        self |= set\n']], ['Does Python have an ordered set?'], 2], [(1654600, 0), [['You want the  shell=True  option to make it execute shell commands:'], ['which yields:']], [[' import subprocess\nsubprocess.Popen("sleep 4s && echo right thar, right thar",shell=True);\nprint \'i like it when you put it\'\n']], ['Run command pipes with subprocess.Popen'], 2], [(1654600, 1), [['which yields:'], ['-10000']], [['  I like it when you put it\n [4 seconds later]\n right thar, right thar\n']], ['Run command pipes with subprocess.Popen'], 2], [(1654875, 0), [['Replace '], ['with ']], [[" sys.stderr = sys.stdout = logFile = open( tmpLogFileName, 'a' )\n"]], ['Ouput file redirection in Python'], 2], [(1654875, 1), [['with '], ['This tells python to not assign any output buffer to file.']], [[" sys.stderr = sys.stdout = logFile = open( tmpLogFileName, 'a', 0 )\n"]], ['Ouput file redirection in Python'], 2], [(1655559, 0), [['-10000'], ['bernoulli, poisson, norm, expon and many others are documented  here  ']], [[' #!/usr/bin/env python\nfrom scipy.stats import bernoulli,poisson,norm,expon\n']], ['How can I generate random numbers in Python?'], 2], [(1655559, 1), [['bernoulli, poisson, norm, expon and many others are documented  here  '], ['All the distributions defined in scipy.stats have a common interface to the pdf, cdf, rvs (random variates). More info  here . ']], [[' print(norm.rvs(size=30))\nprint(bernoulli.rvs(.3,size=30))\nprint(poisson.rvs(1,2,size=30))\nprint(expon.rvs(5,size=30))\n']], ['How can I generate random numbers in Python?'], 2], [(1655745, 0), [['Try this:'], ['My Python tests:']], [[' ^/api/0.6/([^/]+)/([^/]+)/?([^/]*)$\n']], ['Help with a AppEngine Handler Regex?'], 2], [(1655745, 1), [['My Python tests:'], ['-10000']], [[' >>> regex = re.compile(r"^/api/0.6/([^/]+)/([^/]+)/?([^/]*)$")\n>>> regex.match("/api/0.6/changeset") is None\nTrue\n>>> regex.match("/api/0.6/changeset/723").groups()\n(\'changeset\', \'723\', \'\')\n>>> regex.match("/api/0.6/changeset/723/close").groups()\n(\'changeset\', \'723\', \'close\')\n>>> regex.match("/api/0.6/changeset/723/close/extragroup") is None\nTrue\n']], ['Help with a AppEngine Handler Regex?'], 2], [(1656048, 0), [['You could certainly build a string-like class that did this:'], ["and so on.  A weird thing about doing this is that if you subclass  str , every method that you don't explicitly implement will be called on the value that's passed to the constructor:"]], [[' class mystr(str):\n    def __init__(self, value):\n        self.value = value\n        self._decoded = None\n    @property\n    def decoded(self):\n        if self._decoded == None:\n            self._decoded = self.value.decode("hex")\n            return self._decoded\n    def __repr__(self):\n        return self.decoded\n    def __len__(self):\n        return len(self.decoded)\n    def __getitem__(self, i):\n        return self.decoded.__getitem__(i)\n    def __getslice__(self, i, j):\n        return self.decoded.__getslice__(i, j)\n']], ['Python: Lazy String Decoding'], 2], [(1656048, 1), [["and so on.  A weird thing about doing this is that if you subclass  str , every method that you don't explicitly implement will be called on the value that's passed to the constructor:"], ['-10000']], [[" >>> s = mystr('a0a1a2')\n>>> s\n\xa0¡¢\n>>> len(s)\n3\n>>> s.capitalize()\n'A0a1a2'\n"]], ['Python: Lazy String Decoding'], 2], [(1657201, 0), [['So for Shift-JIS (actually typically cp932, the Windows extension of that encoding):'], ['In Python 3 you do it in the quote function itself:']], [[" foo= u'\\u65E5\\u672C\\u8A9E' # 日本語\nurl= 'http://www.example.jp/something?foo='+urllib.quote(foo.encode('cp932'))\n"]], ['how to open a URL with non utf-8 arguments'], 2], [(1657201, 1), [['In Python 3 you do it in the quote function itself:'], ['-10000']], [[" foo= '\\u65E5\\u672C\\u8A9E'\nurl= 'http://www.example.jp/something?foo='+urllib.parse.quote(foo, encoding= 'cp932')\n"]], ['how to open a URL with non utf-8 arguments'], 2], [(1657242, 0), [['A reasonably simple approach to solving your problem is a tiny shim class:'], ['So, armed with this little auxiliary tool, we can proceed easily...:']], [[' class Reverser(object):\n  def __init__(self, s): self.s = s\n  def __lt__(self, other): return other.s < self.s\n  def __eq__(self, other): return other.s == self.s\n']], ['Help sorting: first by this, and then by that '], 3], [(1657242, 1), [['So, armed with this little auxiliary tool, we can proceed easily...:'], ['Performance is clearly not a big issue with such a short list, but with an even modestly longer (10 times) one...:']], [[" def getkey(tup):\n    a, b = tup[0].split('_')\n    return Reverser(a), b\n\nmy_list.sort(key=getkey)\n"]], ['Help sorting: first by this, and then by that '], 3], [(1657242, 2), [['Performance is clearly not a big issue with such a short list, but with an even modestly longer (10 times) one...:'], ['I.e., the  key=  approach is already showing a performance gain of almost two times (sorting the list twice as fast) when working on a 50-items list -- well worth the modest price of "8 lines rather than 5", particularly with all the other advantages I already mentioned!']], [[" # my_list as in the Q, my_cmp as per top A, getkey as here\n\ndef bycmp():\n  return sorted(my_list*10, cmp=my_cmp)\n\ndef bykey():\n  return sorted(my_list*10, key=getkey)\n\n...\n\n$ python -mtimeit -s'import so' 'so.bykey()'\n1000 loops, best of 3: 548 usec per loop\n$ python -mtimeit -s'import so' 'so.bycmp()'\n1000 loops, best of 3: 995 usec per loop\n"]], ['Help sorting: first by this, and then by that '], 3], [(1658722, 0), [["as I explained in another post earlier today, custom comparison functions are  not  the best way to customize sorting in Python (which is why in Python 3 they're not even allowed any more): rather, a custom key-extraction function will serve you much better (future-proof, more general, faster).  I.e., instead of calling, say"], ['call']], [[' somelist.sort(cmp=fit.fitnesscompare)\n']], ['Python: how to make a function visible throughout a program'], 4], [(1658722, 1), [['call'], ['where']], [[' somelist.sort(key=fit.fitnessextract)\n']], ['Python: how to make a function visible throughout a program'], 4], [(1658722, 2), [['where'], ['or, for really blazing speed,']], [[' def fitnessextract(x):\n   return x.fitness\n']], ['Python: how to make a function visible throughout a program'], 4], [(1658722, 3), [['or, for really blazing speed,'], ['-10000']], [[" import operator\nsomelist.sort(key=operator.attrgetter('fitness'))\n"]], ['Python: how to make a function visible throughout a program'], 4], [(1659085, 0), [["You need to call the  gtk.main  function like qba said, however the correct way to call a function every N milliseconds is to use the  gobject.timeout_add  function. In most cases you would want to have anything that could tie up the gui in a separate thread, however in your case where you just have an icon you don't need to. Unless you are planning on making the StatusIcon have a menu. Here is the part of  Linup.py  that I changed:"], ['EDIT:  In  linup_control.py , I would try changing']], [[' # Enter the main loop, where we check to see if there\'s a shot to upload\n# every 1 second\npath = cfg.get("paths","watch_path")\ndef check_for_new():\n\n    if(os.path.exists(path)):\n        linup.uploadImage(path)\n        url = linup.getURL()\n        linup.toClipboard(url)\n        linup.json = ""\n\n        print "Screenshot uploaded!"\n        os.remove(path)\n    # Return True to keep calling this function, False to stop.  \n    return True\n\nif __name__ == "__main__":\n\n    gobject.timeout_add(1000, check_for_new)\n\n    gtk.main()\n']], ['Pygtk StatusIcon not loading?'], 3], [(1659085, 1), [['EDIT:  In  linup_control.py , I would try changing'], ['to ']], [[' # Wait 3 seconds\ntime.sleep(3)\n# Set the icon to idle\nself.statusIcon.set_from_file("img/lin_idle.png")\n']], ['Pygtk StatusIcon not loading?'], 3], [(1659085, 2), [['to '], ['-10000']], [[' gobject.timeout_add(3000, self.statusIcon.set_from_file, "img/lin_idle.png")\n']], ['Pygtk StatusIcon not loading?'], 3], [(1659380, 0), [['You can do it via  downloadPage :'], ['Another approach is to hook into things at the  HTTPPageGetter  level.   HTTPPageGetter  is the protocol used internally by  getPage .']], [[" from xml.sax import make_parser\nfrom twisted.web.client import downloadPage\n\nclass StreamingXMLParser:\n    def __init__(self):\n        self._parser = make_parser()\n\n    def write(self, bytes):\n        self._parser.feed(bytes)\n\n    def close(self):\n        self._parser.feed('', True)\n\nparser = StreamingXMLParser()\nd = downloadPage(url, parser)\n# d fires when the response is completely received\n"]], ['How do I fetch an XML document and parse it with Python twisted?'], 3], [(1659380, 1), [['Another approach is to hook into things at the  HTTPPageGetter  level.   HTTPPageGetter  is the protocol used internally by  getPage .'], ["Finally, there will be a new HTTP client API soon.  Since this isn't part of any release yet, it's not as directly useful as the previous two approaches, but it's somewhat nicer, so I'll include it to give you an idea of what the future will bring. :)  The new API lets you specify a protocol to receive the response body.  So you'd do something like this:"]], [[" class StreamingXMLParsingHTTPClient(HTTPPageGetter):\n    def connectionMade(self):\n        HTTPPageGetter.connectionMade(self)\n        self._parser = make_parser()\n\n    def handleResponsePart(self, bytes):\n        self._parser.feed(bytes)\n\n    def handleResponseEnd(self):\n        self._parser.feed('', True)\n        self.handleResponse(None) # Whatever you pass to handleResponse will be the result of the Deferred below.\n\nfactory = HTTPClientFactory(url)\nfactory.protocol = StreamingXMLParsingHTTPClient\nreactor.connectTCP(host, port, factory)\nd = factory.deferred\n# d fires when the response is completely received\n"]], ['How do I fetch an XML document and parse it with Python twisted?'], 3], [(1659380, 2), [["Finally, there will be a new HTTP client API soon.  Since this isn't part of any release yet, it's not as directly useful as the previous two approaches, but it's somewhat nicer, so I'll include it to give you an idea of what the future will bring. :)  The new API lets you specify a protocol to receive the response body.  So you'd do something like this:"], ['-10000']], [[" class StreamingXMLParser(Protocol):\n    def __init__(self):\n        self.done = Deferred()\n\n    def connectionMade(self):\n        self._parser = make_parser()\n\n    def dataReceived(self, bytes):\n        self._parser.feed(bytes)\n\n    def connectionLost(self, reason):\n        self._parser.feed('', True)\n        self.done.callback(None)\n\nfrom twisted.web.client import Agent\nfrom twisted.internet import reactor\n\nagent = Agent(reactor)\nd = agent.request('GET', url, headers, None)\ndef cbRequest(response):\n    # You can look at the response headers here if you like.\n    protocol = StreamingXMLParser()\n    response.deliverBody(protocol)\n    return protocol.done\nd.addCallback(cbRequest) # d fires when the response is fully received and parsed\n"]], ['How do I fetch an XML document and parse it with Python twisted?'], 3], [(1659659, 0), [['Do not create a huge list of integers with  range'], ['do not create a huge string as the full file body to be written at once']], [[' # use xrange\nfor i in xrange(0, count):\n    # UNPACK FIXED LENGTH OF BINARY DATA HERE\n    yield (field1, field2, field3)\n']], ['How to write a memory efficient Python program?'], 3], [(1659659, 1), [['do not create a huge string as the full file body to be written at once'], ['Even better, you could write the file as:']], [[" # use writelines\nf = open(filename, 'w')\nf.writelines((datum + os.linesep) for datum in data)\nf.close()\n"]], ['How to write a memory efficient Python program?'], 3], [(1659659, 2), [['Even better, you could write the file as:'], ['-10000']], [["     items = GetData(url)\n    f = open(filename, 'w')\n    for item in items:\n        f.write(';'.join(item) + os.linesep)\n    f.close()\n"]], ['How to write a memory efficient Python program?'], 3], [(1660302, 0), [["If you're getting the title it's simply:"], ['or']], [[' soup = BeautifulSoup(html)\nmyTitle = soup.html.head.title\n']], ['Python fetching <title>'], 2], [(1660302, 1), [['or'], ['Taken from  the documentation']], [[" myTitle = soup('title')\n"]], ['Python fetching <title>'], 2], [(1661565, 0), [['If you opt for this framework,  imshow  will do what you need, here is an example:'], ['To keep it simple:']], [[' # Just some data to test:\nfrom random import gauss\na = [[gauss(0, 10) for i in xrange(0, 5)] for j in xrange(0,5)]\n\nfrom pylab import * # or just launch "IPython -pylab" from the command line\n\n# We create a custom colormap:\nmyblue = cm.colors.LinearSegmentedColormap("myblue", {\n    \'red\':   [(0, 1, 1), (1, 0, 0)], \n    \'green\': [(0, 1, 1), (1, 0, 0)],\n    \'blue\':  [(0, 1, 1), (1, 1, 1)]})\n\n# Plotting the graph:\nimshow(a, cmap=myblue)\n']], ['Creating an Infographic In Python'], 2], [(1661565, 1), [['To keep it simple:'], ['-10000']], [[' for i in xrange(0,5):\n    for j in xrange(0,5):\n        text(i, j,\n             "{0:5.2f}".format(a[i][j]),\n             horizontalalignment="center",\n             verticalalignment="center")\n']], ['Creating an Infographic In Python'], 2], [(1663568, 0), [["I think it may be easier to do it by monkeypatching (never a pleasant prospect, but sometimes the only way to perform customization tasks that are otherwise so difficult as to prove almost impossible, like the one you require) -- replace the real inspect.getargspec with your own lookalike function which uses a look-aside table (mapping the wrapper functions you generate to the wrapped functions' argspecs and otherwise delegating to the real thing)."], ['This prints, as required:']], [[' import functools\nimport inspect\n\nrealgas = inspect.getargspec\n\nlookaside = dict()\n\ndef fakegas(f):\n    if f in lookaside:\n        return lookaside[f]\n    return realgas(f)\n\ninspect.getargspec = fakegas\n\ndef deco(fn):\n    @functools.wraps(fn)\n    def x(*args, **kwargs):\n        return fn(*args, **kwargs)\n    lookaside[x] = realgas(fn)\n    return x\n\n@deco\ndef x(a, b=23):\n  """Some doc for x."""\n  return a + b\n\nhelp(x)\n']], ['How to keep help strings the same when applying decorators?'], 2], [(1663568, 1), [['This prints, as required:'], ['-10000']], [[' Help on function x in module __main__:\n\nx(a, b=23)\n    Some doc for x.\n(END)\n']], ['How to keep help strings the same when applying decorators?'], 2], [(1663807, 0), [['-10000'], ['In  Python 2 ,  zip \nreturns a list of tuples. This is fine when  foo  and  bar  are not massive. If\nthey are both massive then forming  zip(foo,bar)  is an unnecessarily massive\ntemporary variable, and should be replaced by  itertools.izip  or\n itertools.izip_longest , which returns an iterator instead of a list.']], [[' for f, b in zip(foo, bar):\n    print(f, b)\n']], ['How to iterate through two lists in parallel?'], 4], [(1663807, 1), [['In  Python 2 ,  zip \nreturns a list of tuples. This is fine when  foo  and  bar  are not massive. If\nthey are both massive then forming  zip(foo,bar)  is an unnecessarily massive\ntemporary variable, and should be replaced by  itertools.izip  or\n itertools.izip_longest , which returns an iterator instead of a list.'], ['Note also that  zip  and its  zip -like brethen can accept an arbitrary number of iterables as arguments. For example,']], [[' import itertools\nfor f,b in itertools.izip(foo,bar):\n    print(f,b)\nfor f,b in itertools.izip_longest(foo,bar):\n    print(f,b)\n']], ['How to iterate through two lists in parallel?'], 4], [(1663807, 2), [['Note also that  zip  and its  zip -like brethen can accept an arbitrary number of iterables as arguments. For example,'], ['prints']], [[" for num, cheese, color in zip([1,2,3], ['manchego', 'stilton', 'brie'], \n                              ['red', 'blue', 'green']):\n    print('{} {} {}'.format(num, color, cheese))\n"]], ['How to iterate through two lists in parallel?'], 4], [(1663807, 3), [['prints'], ['-10000']], [[' 1 red manchego\n2 blue stilton\n3 green brie\n']], ['How to iterate through two lists in parallel?'], 4], [(1664292, 0), [["The 'expression'  y  is evaluated once. I.e., in the following expression, the function is executed only one time."], ['As opposed to:']], [[" >>> def five():\n...    print 'returning 5'\n...    return 5\n... \n>>> 1 < five() <= 5\nreturning 5\nTrue\n"]], ['What does "evaluated only once" mean for chained comparisons in Python?'], 2], [(1664292, 1), [['As opposed to:'], ['-10000']], [[' >>> 1 < five() and five() <= 5\nreturning 5\nreturning 5\nTrue\n']], ['What does "evaluated only once" mean for chained comparisons in Python?'], 2], [(1664567, 0), [['using Iron Python 2.6 RC 2, and C# 3.5'], ['and my loop is']], [[' using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Microsoft.Scripting.Hosting;\nusing IronPython.Hosting;\n\nnamespace IPmemTest {\n    class IPy {\n        private string script = "import random; random.randint(1,10)";\n\n        public IPy() {\n        }\n\n        public void run() {\n            //set up script environment\n            Dictionary<String, Object> options = new Dictionary<string, object>();\n            options["LightweightScopes"] = true;\n            ScriptEngine engine = Python.CreateEngine(options);\n            ScriptRuntime runtime = engine.Runtime;\n            ScriptScope scope = runtime.CreateScope();\n            var source = engine.CreateScriptSourceFromString(this.script);\n            var comped = source.Compile();\n            comped.Execute(scope);\n            runtime.Shutdown();\n            }\n    }\n}\n']], ['Embedded IronPython Memory Leak'], 2], [(1664567, 1), [['and my loop is'], ['memory usage increases to about 70,000K, but then levels off.']], [[' class Program {\n        static void Main(string[] args) {\n            while (true) {\n                var ipy = new IPy();\n                ipy.run();\n            }\n        }\n    }\n']], ['Embedded IronPython Memory Leak'], 2], [(1664636, 0), [['Option 1:'], ['Perform raw sql query:']], [[' from django.db.models import Q\n\ndatafilter = Q()\nfor i in xrange(1, now.day+1):\n    datafilter = datafilter | Q(publish_date__day=i)\ndatafilter = datafilter & Q(publish_date__month=now.month)\nposts = TodaysObject.objects.filter(datafilter)\n']], ['Django date filter by day of month'], 3], [(1664636, 1), [['Perform raw sql query:'], ['Using extra() function:']], [[" def query_dicts(query_string, *query_args):\n    from django.db import connection\n    cursor = connection.cursor()\n    cursor.execute(query_string, query_args)\n    col_names = [desc[0] for desc in cursor.description]\n    while True:\n        row = cursor.fetchone()\n        if row is None:\n            break\n        row_dict = dict(izip(col_names, row))\n        yield row_dict\n    return\nposts = query_dicts('SELECT * FROM tablename WHERE DAY(publish_date)<=%s AND MONTH(publish_date)=%s', now.day, now.month)\n"]], ['Django date filter by day of month'], 3], [(1664636, 2), [['Using extra() function:'], ["It's assumed that you are using MySQL. For PostgreSQL, you need to change DAY(publish_date) and MONTH(publish_date) to DATE_PART('DAY', publish_date) and DATE_PART('MONTH', publish_date) respectively."]], [[" posts = TodaysObject.objects.extra([where='DAY(publish_date)<=%d AND MONTH(publish_date)=%d' % (now.day, now.month)])\n"]], ['Django date filter by day of month'], 3], [(1665176, 0), [["You're dealing with references in each case (more similar to pointers than to values).  You can surely introspect your objects' references to your heart's contents -- for example, if you have a list and want to check if any items are identical references,"], ["DO note that we're talking about references here -- so, two identical references to  None , or two identical references to the  int  value  17 , would also trigger the same alarm.  Of course you can keep introspecting to remove that case, eliminating immutables from the list in a first pass, for example, if you think that multiple references to the same immutable are fine -- e.g.:"]], [[' if len(thelist) != len(set(id(x) for x in thelist)): ...\n']], ['Is there a way to inspect the (differing) internal structures of Python objects that test as equal (==)?'], 2], [(1665176, 1), [["DO note that we're talking about references here -- so, two identical references to  None , or two identical references to the  int  value  17 , would also trigger the same alarm.  Of course you can keep introspecting to remove that case, eliminating immutables from the list in a first pass, for example, if you think that multiple references to the same immutable are fine -- e.g.:"], ['but I would question the return-on-investment of such a deep introspection strategy!']], [[' immutyps = int, long, float, tuple, frozenset, str, unicode\nmutables = [x for x in thelist if not isinstance(x, immutyps)]\nif len(mutables) != len(set(id(x) for x in mutables)):\n  cryhavocandletloosethedogsofwar()\n']], ['Is there a way to inspect the (differing) internal structures of Python objects that test as equal (==)?'], 2], [(1665789, 0), [["Let's assume somebody wants to do this:"], ['So he tries to accomplish it by this class:']], [[' >>> foo = MyInt(8)\n>>> print foo.difference(7)\n1\n']], ['Setting a lambda function as a property'], 8], [(1665789, 1), [['So he tries to accomplish it by this class:'], ["But that's two lines, and since he is a Ruby programmer and believes that good code is code that has few lines of code, he changes it to:"]], [[' class MyInt(int):\n    def difference(self, i):\n        return self - i\n']], ['Setting a lambda function as a property'], 8], [(1665789, 2), [["But that's two lines, and since he is a Ruby programmer and believes that good code is code that has few lines of code, he changes it to:"], ['To save one line of code. But apparently, things are still too easy. He learned in Ruby that a problem is not properly solved unless you use anonymous code blocks, so he will try to use Pythons nearest equivalent, lambdas, for absolutely no reason:']], [[' class MyInt(int):\n    difference = int.__sub__\n']], ['Setting a lambda function as a property'], 8], [(1665789, 3), [['To save one line of code. But apparently, things are still too easy. He learned in Ruby that a problem is not properly solved unless you use anonymous code blocks, so he will try to use Pythons nearest equivalent, lambdas, for absolutely no reason:'], ['All these works. But things are still WAY to uncomplicated, so instead he decides to make things more complex, by not doing the calculation, but returning the sub method:']], [[' class MyInt(int):\n    difference=lambda self, i: self - i\n']], ['Setting a lambda function as a property'], 8], [(1665789, 4), [['All these works. But things are still WAY to uncomplicated, so instead he decides to make things more complex, by not doing the calculation, but returning the sub method:'], ["Ah, but that doesn't work, because he needs to call difference to get the sub-method:"]], [[' class MyInt(int):\n    difference=lambda self: self.__sub__\n']], ['Setting a lambda function as a property'], 8], [(1665789, 5), [["Ah, but that doesn't work, because he needs to call difference to get the sub-method:"], ['So he makes it a property:']], [[' >>> foo = MyInt(8)\n>>> print foo.difference()(7)\n1\n']], ['Setting a lambda function as a property'], 8], [(1665789, 6), [['So he makes it a property:'], ["But normal people wouldn't do any of these, but do:"]], [[' class MyInt(int):\n    difference=property(lambda self: self.__sub__)\n']], ['Setting a lambda function as a property'], 8], [(1665789, 7), [["But normal people wouldn't do any of these, but do:"], ['-10000']], [[' >>> foo = 8\n>>> print foo - 7\n1\n']], ['Setting a lambda function as a property'], 8], [(1665833, 0), [['Consider this example:'], ['Now, suppose you have the integer object with value 1, and you want to work backwards and find its name. What would you print? Three different names have that object bound to them, and all are equally valid.']], [[' foo = 1\nbar = foo\nbaz = foo\n']], ['How do I get the string representation of a variable in python?'], 2], [(1665833, 1), [['Now, suppose you have the integer object with value 1, and you want to work backwards and find its name. What would you print? Three different names have that object bound to them, and all are equally valid.'], ['In Python, a name is a way to access an object, so there is no way to work with names directly. You might be able to search through  locals()  to find the value and recover a name, but that is at best a parlor trick.  And in my above example, which of  foo ,  bar , and  baz  is the "correct" answer?  They all refer to exactly the same object.']], [[' print(bar is foo) # prints True\nprint(baz is foo) # prints True\n']], ['How do I get the string representation of a variable in python?'], 2], [(1666079, 0), [['It works exactly as one would expect it to work...'], ['If you want to know if an  instance  of a class derived from a given base class, you could use:']], [[' class Foo():\n    pass\n\nclass Bar(Foo):\n    pass\n\nclass Bar2():\n    pass\n\nprint issubclass(Bar, Foo)  # True\nprint issubclass(Bar2, Foo) # False\n']], ['What is the issubclass equivalent of isinstance in python?'], 2], [(1666079, 1), [['If you want to know if an  instance  of a class derived from a given base class, you could use:'], ['-10000']], [[' bar_instance = Bar()\nprint issubclass(bar_instance.__class__, Foo)\n']], ['What is the issubclass equivalent of isinstance in python?'], 2], [(1668882, 0), [['Functions have the ability to return something to where they were called. Its called their return value :p'], ['About your update, I think adding something like this to you  __init__.py  does what you want:']], [[' def import_something():\n    # decide what to import\n    # ...\n    mod = __import__( something )\n    return mod\nmy_module = import_something()\nmy_module.do_stuff()\n']], ['Python: importing through function to main namespace'], 3], [(1668882, 1), [['About your update, I think adding something like this to you  __init__.py  does what you want:'], ['somewhere else:']], [[" import os\n\n# make a list of all .py files in the same dir that dont start with _\n__all__ = installed = [ name for (name,ext) in ( os.path.splitext(fn) for fn in os.listdir(os.path.dirname(__file__))) if ext=='.py' and not name.startswith('_') ]\nfor name in installed:\n    # import them all\n    __import__( name, globals(), locals())\n"]], ['Python: importing through function to main namespace'], 3], [(1668882, 2), [['somewhere else:'], ['-10000']], [[" import crunchers\ncrunchers.installed # all names\ncrunchers.cruncherA # actual module object, but you can't use it since you don't know the name when you write the code\n# turns out the be pretty much the same as the first solution :p\nmycruncher = getattr(crunchers, crunchers.installed[0])  \n"]], ['Python: importing through function to main namespace'], 3], [(1670252, 0), [['instead use'], ['then the lines are ']], [[' rprim=infile.readlines()\n']], ['Python auto define variables'], 3], [(1670252, 1), [['then the lines are '], ['you can find out how many rows there are with']], [[' rprim[0], rprim[1], rprim[2], rprim[3], rprim[4], rprim[5], rprim[6]\n']], ['Python auto define variables'], 3], [(1670252, 2), [['you can find out how many rows there are with'], ['-10000']], [[' len(rprim)\n']], ['Python auto define variables'], 3], [(1670480, 0), [['You have to call the  show  function to actually display anything, like'], ['By the way, you can do']], [[' matplotlib.pyplot.show()\n']], ['How can I get pyplot images to show on a console app?'], 2], [(1670480, 1), [['By the way, you can do'], ['to make the typing less tedious (this is pretty much the official standard way).']], [[' import matplotlib.pyplot as plt\n']], ['How can I get pyplot images to show on a console app?'], 2], [(1670569, 0), [['Example from suds site:'], ['Outputs this:']], [[" from suds.client import Client\nurl = 'http://www.thomas-bayer.com/axis2/services/BLZService?wsdl'\nclient = Client(url) \nprint client\n"]], ['Changing web service url in SUDS library'], 3], [(1670569, 1), [['Outputs this:'], ['Each service can be accessed in many ways, but here is a different port from each service qualified by method:']], [[' Suds - version: 0.3.7 build: (beta) R550-20090820\n\nService (BLZService) tns="http://thomas-bayer.com/blz/"\n   Prefixes (1)\n     ns0 = "http://thomas-bayer.com/blz/"\n   Ports (2):\n     (soap)\n       Methods (1):\n         getBank(xs:string blz, )\n     (soap12)\n       Methods (1):\n         getBank(xs:string blz, )\n   Types (5):\n      getBankType\n      getBankResponseType\n      getBankType\n      getBankResponseType\n      detailsType\n\nService (OtherBLZService) tns="http://thomas-bayer.com/blz/"\n   Prefixes (1)\n     ns0 = "http://thomas-bayer.com/blz/"\n   Ports (2):\n     (soap)\n       Methods (1):\n         getBank(xs:string blz, )\n     (soap12)\n       Methods (1):\n         getBank(xs:string blz, )\n   Types (5):\n      getBankType\n      getBankResponseType\n      getBankType\n      getBankResponseType\n      detailsType\n']], ['Changing web service url in SUDS library'], 3], [(1670569, 2), [['Each service can be accessed in many ways, but here is a different port from each service qualified by method:'], ["Is that the kind of thing you're working with?  If so, visit their documentation, which I think you'll find more than adequate.  If not, please consider adding as much detail as possible to your question to give us more to work with!"]], [[" ## service: BLZService, port: soap12, method: getBank\nclient.service['BLZService']['soap12'].getBank()\n## service: OtherBLZService, port: soap, method: getBank\nclient.service['OtherBLZService']['soap'].getBank()\n"]], ['Changing web service url in SUDS library'], 3], [(1673005, 0), [['-10000'], ['The resulting output in the file will be:']], [[' # combine the lists\nzipped = zip(alist, blist)\n\n# write to a file (in append mode)\nfile = open("filename", \'a\') \nfor item in zipped:\n    file.write("%d, %d\\n" % item) \nfile.close()\n']], ['Combining 2 lists in python'], 2], [(1673005, 1), [['The resulting output in the file will be:'], ['-10000']], [['  1,2\n 2,3\n 3,4\n 5,5\n']], ['Combining 2 lists in python'], 2], [(1673071, 0), [['Using the  dis  module proves my assumption:'], ['Disassembling shows:']], [[' def f1(a):\n    return repr(a)\n\ndef f2(a):\n    return a.__repr__()\n\ndef f3(a):\n    return `a`\n']], ['What do backticks mean to the python interpreter: `num`'], 2], [(1673071, 1), [['Disassembling shows:'], ['f1  involves a global lookup for  repr ,  f2  an attribute lookup for  __repr__ , whereas the backtick operator is implemented in a separate opcode. Since there is no overhead for dictionary lookup ( LOAD_GLOBAL / LOAD_ATTR ) nor for function calls ( CALL_FUNCTION ), backticks are faster.']], [[' >>> import dis\n>>> dis.dis(f1)\n  3           0 LOAD_GLOBAL              0 (repr)\n              3 LOAD_FAST                0 (a)\n              6 CALL_FUNCTION            1\n              9 RETURN_VALUE\n>>> dis.dis(f2)\n  6           0 LOAD_FAST                0 (a)\n              3 LOAD_ATTR                0 (__repr__)\n              6 CALL_FUNCTION            0\n              9 RETURN_VALUE        \n>>> dis.dis(f3)\n  9           0 LOAD_FAST                0 (a)\n              3 UNARY_CONVERT       \n              4 RETURN_VALUE   \n']], ['What do backticks mean to the python interpreter: `num`'], 2], [(1673483, 0), [['.'], ['Usage notes:']], [[' class WeakCallback (object):\n    """A Weak Callback object that will keep a reference to\n    the connecting object with weakref semantics.\n\n    This allows object A to pass a callback method to object S,\n    without object S keeping A alive.\n    """\n    def __init__(self, mcallback):\n        """Create a new Weak Callback calling the method @mcallback"""\n        obj = mcallback.im_self\n        attr = mcallback.im_func.__name__\n        self.wref = weakref.ref(obj, self.object_deleted)\n        self.callback_attr = attr\n        self.token = None\n\n    def __call__(self, *args, **kwargs):\n        obj = self.wref()\n        if obj:\n            attr = getattr(obj, self.callback_attr)\n            attr(*args, **kwargs)\n        else:\n            self.default_callback(*args, **kwargs)\n\n    def default_callback(self, *args, **kwargs):\n        """Called instead of callback when expired"""\n        pass\n\n    def object_deleted(self, wref):\n        """Called when callback expires"""\n        pass\n']], ['How to store callback methods?'], 2], [(1673483, 1), [['Usage notes:'], ["I use the  WeakCallback.token  attribute in subclasses I've made to manage disconnecting the callback when the connecter goes away"]], [[' # illustration how I typically use it\nweak_call = WeakCallback(self._something_changed)\nlong_lived_object.connect("on_change", weak_call)\n']], ['How to store callback methods?'], 2], [(1673740, 0), [['-10000'], ['Another idea:']], [[' with open("example.txt") as f:\n    for line in f:\n        key, value = line.strip().split("=")\n        do_something(key,value)\n']], ['Delineating a Read File'], 2], [(1673740, 1), [['Another idea:'], ["Now that's concise and pythonic :)"]], [[' with open("example.txt") as f:\n    d = dict([line.strip().split("=") for line in f])\n']], ['Delineating a Read File'], 2], [(1675321, 0), [['This is the fastest way I can think of:'], ["Slight update: As  jcd  points out, depending on your application, you probably don't need to convert the result back to a list.  Since a set is iterable by itself, you might be able to just use it directly:"]], [[' import itertools\noutput_list = list(set(itertools.chain(first_list, second_list)))\n']], ['Fastest Way To Remove Duplicates In Lists Python'], 2], [(1675321, 1), [["Slight update: As  jcd  points out, depending on your application, you probably don't need to convert the result back to a list.  Since a set is iterable by itself, you might be able to just use it directly:"], ["Beware though that any solution involving the use of  set()  will probably reorder the elements in your list, so there's no guarantee that elements will be in any particular order.  That said, since you're combining two lists, it's hard to come up with a good reason why you would need a particular ordering over them anyway, so this is probably not something you need to worry about."]], [[' output_set = set(itertools.chain(first_list, second_list))\nfor item in output_set:\n    # do something\n']], ['Fastest Way To Remove Duplicates In Lists Python'], 2], [(1675734, 0), [["With the directory structure you've provided:"], ['You should put those two lines in both  Package-1/namespace/__init__.py  and  Package-2/namespace/__init__.py  (*):']], [[' Package-1/namespace/__init__.py\nPackage-1/namespace/module1/__init__.py\nPackage-2/namespace/__init__.py\nPackage-2/namespace/module2/__init__.py\n']], ['How do I create a namespace package in Python?'], 2], [(1675734, 1), [['You should put those two lines in both  Package-1/namespace/__init__.py  and  Package-2/namespace/__init__.py  (*):'], ["(* since -unless you state a dependency between them- you don't know which of them will be recognized first - see  PEP 420  for more information)"]], [[' from pkgutil import extend_path\n__path__ = extend_path(__path__, __name__)\n']], ['How do I create a namespace package in Python?'], 2], [(1675943, 0), [['You can do something like this:'], ['For example applying this algorithm on the  python wikipedia page  entry:']], [[" from textwrap import wrap\n\ndef getAbstract(text, lines=5, screenwidth=100):\n    width = len(' '.join([\n               line for block in text.splitlines()\n               for line in wrap(block, width=screenwidth)\n            ][:lines]))\n    return text[:width] + '...'\n"]], ['Computing article abstracts'], 3], [(1675943, 1), [['For example applying this algorithm on the  python wikipedia page  entry:'], ['For example if you only want 100 character abstracts you can do the following:']], [[' print getAbstract(text, lines=7)\n']], ['Computing article abstracts'], 3], [(1675943, 2), [['For example if you only want 100 character abstracts you can do the following:'], ['That will also replace newlines with spaces which might be desirable depending on your requirements.']], [[' import textwrap\n\nabstract = textwrap.wrap(text, 100)[0]\n']], ['Computing article abstracts'], 3], [(1676520, 0), [['You can add any python package hosted on git-hub by adding a find-links url pointing to the project tarball URL plus a  #egg=packagename  postfix. For pyfacebook that is:'], ['So a simple buildout would be:']], [[' http://github.com/sciyoshi/pyfacebook/tarball/master#egg=pyfacebook\n']], ['Pyfacebook from buildout'], 2], [(1676520, 1), [['So a simple buildout would be:'], ['-10000']], [[' [buildout]\nparts = whatever\nfind-links =\n    http://github.com/sciyoshi/pyfacebook/tarball/master#egg=pyfacebook\neggs = pyfacebook\n']], ['Pyfacebook from buildout'], 2], [(1677468, 0), [['During normal attribute lookup, if a looked-up object  A  has a method  __get__ , that method gets called and what it returns is substituted in place for the object  A .  This is how functions (which are also descriptors) become bound methods when you call a method on an object.'], ['A illustrative doodle:']], [[" class Foo(object):\n     def bar(self, arg1, arg2):\n         print arg1, arg2\n\nfoo = Foo()\n# this:\nfoo.bar(1,2)  # prints '1 2'\n# does about the same thing as this:\nFoo.__dict__['bar'].__get__(foo, type(foo))(1,2)  # prints '1 2'\n"]], ['How does a classmethod object work?'], 3], [(1677468, 1), [['A illustrative doodle:'], ['For the specific task of getting the name of the function wrapped by a  classmethod :']], [[' In [14]: def foo(cls):\n   ....:     print cls\n   ....:     \nIn [15]: classmethod(foo)\nOut[15]: <classmethod object at 0x756e50>\nIn [16]: cm = classmethod(foo)\nIn [17]: cm.__get__(None, dict)\nOut[17]: <bound method type.foo of <type \'dict\'>>\nIn [18]: cm.__get__(None, dict)()\n<type \'dict\'>\nIn [19]: cm.__get__({}, dict)\nOut[19]: <bound method type.foo of <type \'dict\'>>\nIn [20]: cm.__get__({}, dict)()\n<type \'dict\'>\nIn [21]: cm.__get__("Some bogus unused string", dict)()\n<type \'dict\'>\n']], ['How does a classmethod object work?'], 3], [(1677468, 2), [['For the specific task of getting the name of the function wrapped by a  classmethod :'], ['-10000']], [[" In [29]: cm.__get__(None, dict).im_func.__name__\nOut[29]: 'foo'\n"]], ['How does a classmethod object work?'], 3], [(1679126, 0), [['Have you tried to transform the axis? For example:'], ["Let's assume you have your data in an array,  a . You can use a transform like this one:"]], [[' ax = subplot(111)\nax.yaxis.set_ticks([0, 2, 4, 8])\nimshow(data)\n']], ['How to plot an image with non-linear y-axis with Matplotlib using imshow?'], 4], [(1679126, 1), [["Let's assume you have your data in an array,  a . You can use a transform like this one:"], ["Then map your array to this one, which doesn't make a copy but a local reference in the instance:"]], [[' class arr(object):\n    @staticmethod\n    def mylog2(x):\n        lx = 0\n        while x > 1:\n            x >>= 1\n            lx += 1\n        return lx\n    def __init__(self, array):\n        self.array = array\n    def __getitem__(self, index):\n        return self.array[arr.mylog2(index+1)]\n    def __len__(self):\n        return 1 << len(self.array)\n']], ['How to plot an image with non-linear y-axis with Matplotlib using imshow?'], 4], [(1679126, 2), [["Then map your array to this one, which doesn't make a copy but a local reference in the instance:"], ['Now you can display it, for example:']], [[' b = arr(a)\n']], ['How to plot an image with non-linear y-axis with Matplotlib using imshow?'], 4], [(1679126, 3), [['Now you can display it, for example:'], ['Here is a sample (with an array containing random values):']], [[' ax = subplot(111)\nax.yaxis.set_ticks([16, 8, 4, 2, 1, 0])\naxis([-0.5, 4.5, 31.5, 0.5])\nimshow(b, interpolation="nearest")\n']], ['How to plot an image with non-linear y-axis with Matplotlib using imshow?'], 4], [(1680436, 0), [['point to start: '], ['and from python help:']], [[" >>> import sys\n>>> a=list()\n>>> type(a)\n<type 'list'>\n>>> sys.getsizeof(a)\n36\n>>> b=1\n>>> type(b)\n<type 'int'>\n>>> sys.getsizeof(b)\n12\n"]], ['Python: How much space does each element of a list take?'], 2], [(1680436, 1), [['and from python help:'], ['-10000']], [[' >>> help(sys.getsizeof)\nHelp on built-in function getsizeof in module sys:\n\ngetsizeof(...)\n    getsizeof(object, default) -> int\n\n    Return the size of object in bytes.\n']], ['Python: How much space does each element of a list take?'], 2], [(1681208, 0), [['Since  os.pathsep  is the character to separate different paths, you should use this to append each new path:'], ['or, if there are several paths to add in a list:']], [[' os.environ["PATH"] += os.pathsep + path\n']], ['Python: Platform independent way to modify PATH environment variable'], 2], [(1681208, 1), [['or, if there are several paths to add in a list:'], ['As you mentioned,  os.path.join  can also be used for each individual path you have to append in the case you have to construct them from separate parts.']], [[' os.environ["PATH"] += os.pathsep + os.pathsep.join(pathlist)\n']], ['Python: Platform independent way to modify PATH environment variable'], 2], [(1682657, 0), [['A cycle (or "references loop") is two or more objects referring to each other, e.g.:'], ['or']], [[' alist = []\nanoth = [alist]\nalist.append(anoth)\n']], ['What are cycles ? in relation to python'], 2], [(1682657, 1), [['or'], ["Of course, these are extremely simple examples with cycles of just two items; real-life examples are often longer and harder to spot.  There's no magic bullet telling you that you just made a cycle -- you just need to watch for it.  The  gc  module (whose specific job is to garbage-collect unreachable cycles) can help you diagnose existing cycles (when you set the appropriate debug flags).  The  weakref  module can help you to avoid building cycles when you do need (e.g.) a child and parent to know about each other without creating a reference cycle (make just one of the two mutual references into a weak ref or proxy, or use the handy weak-dictionary containers that the module supplies)."]], [[' class Child(object): pass\n\nclass Parent(object): pass\n\nc = Child()\np = Parent()\nc.parent = p\np.child = c\n']], ['What are cycles ? in relation to python'], 2], [(1684099, 0), [['Looks like the way to dir() works by default is:'], ['So an approach would be:']], [[' dir(obj) == sorted(obj.__dict__.keys() + dir(obj.__class__))\n']], ['Is it possible to delete a method from an object (not class) in python?'], 3], [(1684099, 1), [['So an approach would be:'], ['With the behaviour in Py2.6 being:']], [[' class Wizard(object):\n    def __init__(self):\n        self.mana = 0\n\n    def __dir__(self):\n        natdir = set(self.__dict__.keys() + dir(self.__class__))\n        if self.mana <= 0:\n            natdir.remove("domagic")\n        return list(natdir)\n\n    def addmana(self):\n        self.mana += 1\n\n    def domagic(self):\n        if self.mana <= 0:\n            raise NotEnoughMana()\n        print "Abracadabra!"\n        self.mana -= 1\n']], ['Is it possible to delete a method from an object (not class) in python?'], 3], [(1684099, 2), [['With the behaviour in Py2.6 being:'], ['-10000']], [[' >>> wiz = Wizard()\n\n>>> [x for x in dir(wiz) if not x.startswith("_")]\n[\'addmana\', \'mana\']\n\n>>> wiz.addmana()\n\n>>> [x for x in dir(wiz) if not x.startswith("_")]\n[\'addmana\', \'domagic\', \'mana\']\n\n>>> wiz.domagic()\nAbracadabra!\n\n>>> [x for x in dir(wiz) if not x.startswith("_")]\n[\'addmana\', \'mana\']\n\n>>> wiz.domagic()\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "<stdin>", line 13, in domagic\n__main__.NotEnoughMana\n']], ['Is it possible to delete a method from an object (not class) in python?'], 3], [(1684194, 0), [['First, create a file object:'], ['You can print to a file object:']], [[' f = open("myfile.txt", "w") # Use "a" instead of "w" to append to file\n']], ['Saving output of a for-loop to file'], 4], [(1684194, 1), [['You can print to a file object:'], ['Or you can write to it:']], [[" print >> f, '>', alignment.title\nprint >> f, hsp.sbjct \n"]], ['Saving output of a for-loop to file'], 4], [(1684194, 2), [['Or you can write to it:'], ['You can then close it to be nice:']], [[" f.write('> %s\\n' % (alignment.title,))\nf.write('%s\\n' % (hsp.sbjct,))\n"]], ['Saving output of a for-loop to file'], 4], [(1684194, 3), [['You can then close it to be nice:'], ['-10000']], [[' f.close()\n']], ['Saving output of a for-loop to file'], 4], [(1684470, 0), [['This should get all records.  The novelty compared with the original is the'], ['which is a python idiom to iterate through items in a "list-like" object, such as the blast_records (checking the  CBIXML module documentation  showed that parse() indeed returns an iterator)']], [[' for blast_record in blast_records\n']], ['BioPython: extracting sequence IDs from a Blast output file'], 2], [(1684470, 1), [['which is a python idiom to iterate through items in a "list-like" object, such as the blast_records (checking the  CBIXML module documentation  showed that parse() indeed returns an iterator)'], ['-10000']], [[' from Bio.Blast import NCBIXM\nblast_records = NCBIXML.parse(result_handle)\n\nsave_file = open("/Users/jonbra/Desktop/my_fasta_seq.fasta", \'w\')\n\nfor blast_record in blast_records:\n  for alignment in blast_record.alignments:\n      for hsp in alignment.hsps:\n            save_file.write(\'>%s\\n\' % (alignment.title,))\n  #here possibly to output something to file, between each blast_record\nsave_file.close()\n']], ['BioPython: extracting sequence IDs from a Blast output file'], 2], [(1685157, 0), [['So, your new line should look like:'], ['To use your Python script path as cwd,  import os  and define cwd using this:']], [[" subprocess.Popen(r'c:\\mytool\\tool.exe', cwd=r'd:\\test\\local')\n"]], ['Python specify popen working directory via argument'], 2], [(1685157, 1), [['To use your Python script path as cwd,  import os  and define cwd using this:'], ['-10000']], [[' os.path.dirname(os.path.realpath(__file__)) \n']], ['Python specify popen working directory via argument'], 2], [(1685221, 0), [["To pull directly from  timeit.py 's code:"], ["Timeit's setup:"]], [[' if sys.platform == "win32":\n    # On Windows, the best timer is time.clock()\n    default_timer = time.clock\nelse:\n    # On most other platforms the best timer is time.time()\n    default_timer = time.time\n']], ['accurately measure time python function takes'], 3], [(1685221, 1), [["Timeit's setup:"], ['-10000']], [[' def inner(_it, _timer):\n    #Your setup code\n    %(setup)s\n    _t0 = _timer()\n    for _i in _it:\n        #The code you want to time\n        %(stmt)s\n    _t1 = _timer()\n    return _t1 - _t0\n']], ['accurately measure time python function takes'], 3], [(1685221, 2), [['-10000'], ['The new function  process_time  will not include time elapsed during sleep.']], [[' from time import process_time\n\nt = process_time()\n#do some stuff\nelapsed_time = process_time() - t\n']], ['accurately measure time python function takes'], 3], [(1685330, 0), [["Performance is surely an issue, e.g., in terms of size of what you're storing...:"], ['As for speed...']], [[' $ python -c \'import cPickle; d=dict.fromkeys(range(99), "banana"); print len(repr(d))\'\n1376\n$ python -c \'import cPickle; d=dict.fromkeys(range(99), "banana"); print len(cPickle.dumps(d,-1))\'\n412\n']], ['Why we should perfer to store the serialized data not the raw code to DB?'], 4], [(1685330, 1), [['As for speed...'], ["Then there's generality -- not every serializable object can properly round-trip with repr and eval, while pickling is much more general.  E.g.:"]], [[' $ python -mtimeit -s\'import cPickle; d=dict.fromkeys(range(99), "chocolate")\' \'eval(repr(d))\'\n1000 loops, best of 3: 706 usec per loop\n$ python -mtimeit -s\'import cPickle; d=dict.fromkeys(range(99), "chocolate")\' \'cPickle.loads(cPickle.dumps(d, -1))\'\n10000 loops, best of 3: 70.2 usec per loop\n']], ['Why we should perfer to store the serialized data not the raw code to DB?'], 4], [(1685330, 2), [["Then there's generality -- not every serializable object can properly round-trip with repr and eval, while pickling is much more general.  E.g.:"], ['vs']], [[' $ python -c\'def f(): pass\nd={23:f}\nprint d == eval(repr(d))\'\nTraceback (most recent call last):\n  File "<string>", line 3, in <module>\n  File "<string>", line 1\n    {23: <function f at 0x241970>}\n         ^\nSyntaxError: invalid syntax\n']], ['Why we should perfer to store the serialized data not the raw code to DB?'], 4], [(1685330, 3), [['vs'], ['Edit : json is even less general than repr in terms of round-trips.']], [[' $ python -c\'import cPickle\ndef f(): pass\nd={"x":f}\nprint d == cPickle.loads(cPickle.dumps(d, -1))\'\nTrue\n']], ['Why we should perfer to store the serialized data not the raw code to DB?'], 4], [(1685389, 0), [['You can do this:'], ['outputs']], [[' class matrix:\n    def __getitem__(self, pos):\n        x,y = pos\n        return "fetching %s, %s" % (x, y)\n\nm = matrix()\nprint m[1,2]\n']], ['Possible to use more than one argument on __getitem__?'], 2], [(1685389, 1), [['outputs'], ['See  http://docs.python.org/reference/datamodel.html#object. getitem  for more information']], [[' fetching 1, 2\n']], ['Possible to use more than one argument on __getitem__?'], 2], [(1686162, 0), [['So for every access you need to do:'], ['Swap rows as:']], [[' x = data[row][colorder[col]] \n']], ['Matrix data structure'], 3], [(1686162, 1), [['Swap rows as:'], ['And swap columns as:']], [[' data[row1], data[row2] = data[row2], data[row1]\n']], ['Matrix data structure'], 3], [(1686162, 2), [['And swap columns as:'], ['-10000']], [[' colorder[col1], colorder[col2] = colorder[c2], colorder[c1]\n']], ['Matrix data structure'], 3], [(1687125, 0), [['I solved this problem the following way:'], ['This way profiling statistics are gathered within the scope of  _handle . So instead of:']], [[" from cProfile import Profile\nfrom django.core.management.base import BaseCommand\n\n\nclass Command(BaseCommand):\n    ...\n\n    def _handle(self, *args, **options):\n        # Actual code I want to profile\n        pass\n\n    def handle(self, *args, **options):\n        if options['profile']:\n            profiler = Profile()\n            profiler.runcall(self._handle, *args, **options)\n            profiler.print_stats()\n        else:\n            self._handle(*args, **options)\n"]], ['How to profile a Django custom management command exclusively'], 3], [(1687125, 1), [['This way profiling statistics are gathered within the scope of  _handle . So instead of:'], ["I'll have to run:"]], [[' python -m cProfile manage.py testrender\n']], ['How to profile a Django custom management command exclusively'], 3], [(1687125, 2), [["I'll have to run:"], ['which is even better.']], [[' python manage.py testrender --profile\n']], ['How to profile a Django custom management command exclusively'], 3], [(1690331, 0), [["Let's assume the main application is in  main.pyc , and the entry point  main , and let's call the wrapper  top.pyw , which would typically look like:"], ['Your main.py file would then look like this:']], [[' # top.pyw file\nimport main\nif __name__ == "__main__":\n    import sys\n    main.main(*sys.argv[1:])\n']], ['Compile a .pyw file so it can be run like .pyc without console'], 2], [(1690331, 1), [['Your main.py file would then look like this:'], ['Note also that *.pyc tend to be version-specific. You can check whether the solution above would be compatible with  pyInstaller and similar "independent" distribution methods .']], [[' # main.py file\n"""\nMain module documentation (optional)\n"""\n# import modules\n\n# function and class definitions\n\ndef main(*argv):\n    # Parses the options (optional)\n    import optparse\n    parser = optparse.OptionParser(usage="%prog [<options>]\\n" + __doc__)\n    parser.add_option(...)\n    parser.add_option(...)\n    opt, args = parser.parse_args(list(argv))\n    # Calls the appropriate function:\n    my_function(...)\n']], ['Compile a .pyw file so it can be run like .pyc without console'], 2], [(1690446, 0), [['To include cookie handling, you do something like this:'], ['To add basic authentication to the request, you simply do this (I added the base64 encode line for completeness):']], [[' opener = poster.streaminghttp.register_openers()\nopener.add_handler(urllib2.HTTPCookieProcessor(cookielib.CookieJar())) # Add cookie handler\nparams = {\'file\': open("test.txt", "rb"), \'name\': \'upload test\'}\ndatagen, headers = poster.encode.multipart_encode(params)\nrequest = urllib2.Request(upload_url, datagen, headers)\nresult = urllib2.urlopen(request)\n']], ['How to post a file via HTTP with cookies using python poster lib'], 2], [(1690446, 1), [['To add basic authentication to the request, you simply do this (I added the base64 encode line for completeness):'], ['Hope this helps. And another big thanks to Chris AtLee.']], [[' opener = poster.streaminghttp.register_openers()\nparams = {\'file\': open("test.txt", "rb"), \'name\': \'upload test\'}\ndatagen, headers = poster.encode.multipart_encode(params)\nrequest = urllib2.Request(upload_url, datagen, headers)\nauth = base64.encodestring(\'%s:%s\' % (\'username\', \'password\'))[:-1] # This is just standard un/pw encoding  \nrequest.add_header(\'Authorization\', \'Basic %s\' % auth ) # Add Auth header to request\nresult = urllib2.urlopen(request)\n']], ['How to post a file via HTTP with cookies using python poster lib'], 2], [(1692388, 0), [['That is a very strange way to organize things.  If you stored in a dictionary, this is easy:'], ['This code for updating a dictionary of counts is a common "pattern" in Python.  It is so common that there is a special data structure,  defaultdict , created just to make this even easier:']], [[" # This example should work in any version of Python.\n# urls_d will contain URL keys, with counts as values, like: {'http://www.google.fr/' : 1 }\nurls_d = {}\nfor url in list_of_urls:\n    if not url in urls_d:\n        urls_d[url] = 1\n    else:\n        urls_d[url] += 1\n"]], ['Python : List of dict, if exists increment a dict value, if not append a new dict'], 5], [(1692388, 1), [['This code for updating a dictionary of counts is a common "pattern" in Python.  It is so common that there is a special data structure,  defaultdict , created just to make this even easier:'], ['But a dictionary full of counts is also a common pattern, so Python provides a ready-to-use class:  containers.Counter   You just create a  Counter  instance by calling the class, passing in any iterable; it builds a dictionary where the keys are values from the iterable, and the values are counts of how many times the key appeared in the iterable.  The above example then becomes:']], [[' from collections import defaultdict  # available in Python 2.5 and newer\n\nurls_d = defaultdict(int)\nfor url in list_of_urls:\n    urls_d[url] += 1\n']], ['Python : List of dict, if exists increment a dict value, if not append a new dict'], 5], [(1692388, 2), [['But a dictionary full of counts is also a common pattern, so Python provides a ready-to-use class:  containers.Counter   You just create a  Counter  instance by calling the class, passing in any iterable; it builds a dictionary where the keys are values from the iterable, and the values are counts of how many times the key appeared in the iterable.  The above example then becomes:'], ['If you really need to do it the way you showed, the easiest and fastest way would be to use any one of these three examples, and then build the one you need.']], [[' from collections import Counter  # available in Python 2.7 and newer\n\nurls_d = Counter(list_of_urls)\n']], ['Python : List of dict, if exists increment a dict value, if not append a new dict'], 5], [(1692388, 3), [['If you really need to do it the way you showed, the easiest and fastest way would be to use any one of these three examples, and then build the one you need.'], ['If you are using Python 2.7 or newer you can do it in a one-liner:']], [[' from collections import defaultdict  # available in Python 2.5 and newer\n\nurls_d = defaultdict(int)\nfor url in list_of_urls:\n    urls_d[url] += 1\n\nurls = [{"url": key, "nbr": value} for key, value in urls_d.items()]\n']], ['Python : List of dict, if exists increment a dict value, if not append a new dict'], 5], [(1692388, 4), [['If you are using Python 2.7 or newer you can do it in a one-liner:'], ['-10000']], [[' from collections import Counter\n\nurls = [{"url": key, "nbr": value} for key, value in Counter(list_of_urls).items()]\n']], ['Python : List of dict, if exists increment a dict value, if not append a new dict'], 5], [(1694060, 0), [['-10000'], ["EDIT: There doesn't seem to be a straight-forward single reference to the current table but it looks like you can find it by searching the current first document's sheets for a table with a non-null selection_range, so something like this:"]], [[" >>> d = app('Numbers').documents.first()  # reference to current top document\n"]], ['Getting the Current Table in Numbers (Python/Appscript)'], 2], [(1694060, 1), [["EDIT: There doesn't seem to be a straight-forward single reference to the current table but it looks like you can find it by searching the current first document's sheets for a table with a non-null selection_range, so something like this:"], ['-10000']], [[" >>> nu = app('Numbers')\n>>> for sheet in nu.documents.first.sheets():\n...   for table in sheet.tables():\n...     if table.selection_range():\n...        print table.name()\n"]], ['Getting the Current Table in Numbers (Python/Appscript)'], 2], [(1696165, 0), [['Here you go:'], ['When run on your sample data, it prints:']], [[' import struct\n\nclass Particle:\n    """A single particle.  Attributes added in BinFile."""\n    pass\n\nclass BinFile:\n    """Parse and store the contents of a RealFlow .bin file."""\n    def __init__(self, fname):\n        self.bindata = open(fname, "rb").read()\n        self.off = 0\n\n        self.verify = self.peel("=i")[0]\n        assert self.verify == 0xfabada\n        self.name = self.string(250)\n\n        (self.version, self.scale, self.fluid_type, self.simtime, self.frame_number,\n         self.fps, self.num_particles, self.radius) = self.peel("=hfifiiif")\n        self.pressure = self.peel("=fff")\n        self.speed = self.peel("=fff")\n        self.temperature = self.peel("=fff")\n        if self.version >= 7:\n            self.emitter_position = self.peel("=fff")\n            self.emitter_rotation = self.peel("=fff")\n            self.emitter_scale = self.peel("=fff")\n\n        self.particles = [self.peel_particle() for i in range(self.num_particles)]\n\n    def peel_particle(self):\n        """Read one particle from the file."""\n        p = Particle()\n        p.position = self.peel("=fff")\n        p.velocity = self.peel("=fff")\n        p.force = self.peel("=fff")\n        if self.version >= 9:\n            p.vorticity = self.peel("=fff")\n        if self.version >= 3:\n            p.normal = self.peel("=fff")\n        if self.version >= 4:\n            p.neighbors = self.peel("=i")[0]\n        if self.version >= 5:\n            p.texture = self.peel("=fff")\n            p.infobits = self.peel("=h")[0]\n        (p.age, p.isolation_time, p.viscosity, p.density, p.pressure, p.mass,\n         p.temperature, p.id) = self.peel("=fffffffi")\n        print p.id, p.neighbors, p.position\n        return p\n\n    def peel(self, fmt):\n        """Read some struct data from `self.bindata`."""\n        data = struct.unpack_from(fmt, self.bindata, self.off)\n        self.off += struct.calcsize(fmt)\n        return data\n\n    def string(self, length):\n        s = self.bindata[self.off:self.off+length].split("\\0")[0]\n        self.off += length\n        return s\n\nb = BinFile("Circle0100001.bin")\nprint "Name:", b.name\nprint "Particles:", b.num_particles\nprint "Position of first particle", b.particles[0].position\n']], ['How to read .bin files?'], 2], [(1696165, 1), [['When run on your sample data, it prints:'], ['-10000']], [[' Name: Circle01\nParticles: 1066\nPosition of first particle (-1.7062506675720215, 4.9283280372619629, -6.4365010261535645)\n']], ['How to read .bin files?'], 2], [(1697702, 0), [["Use the following method (hopefully it's clear enough):"], ['Create forms like this:']], [[' class BackupForm(ModelForm):\n    """Form for adding and editing backups."""\n\n    def __init__(self, *args, **kwargs):\n        systemid = kwargs.pop(\'systemid\')\n        super(BackupForm, self).__init__(*args, **kwargs)\n        self.fields[\'units\'] = forms.ModelMultipleChoiceField(\n                required=False,\n                queryset=Unit.objects.filter(system__id=systemid),\n                widget=forms.SelectMultiple(attrs={\'title\': _("Add unit")}))\n\n    class Meta:\n        model = Backup\n        exclude = (\'system\',)\n']], ["How to pass initial parameter to django's ModelForm instance?"], 2], [(1697702, 1), [['Create forms like this:'], ['Hope that helps! Let me know if you need me to explain more in depth.']], [[' form_backup = BackupForm(request.POST,\n                         instance=Backup,\n                         systemid=system.id)\nform_backup = BackupForm(initial=form_backup_defaults,\n                         systemid=system.id)\n']], ["How to pass initial parameter to django's ModelForm instance?"], 2], [(1697866, 0), [['In short:'], ['Dynamic way of doing this would be:']], [[" class PartialAuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        fields = ('name', 'title')\n\nclass PartialAuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        exclude = ('birth_date',)\n"]], ['How to create Django FormWizard for one Model?'], 2], [(1697866, 1), [['Dynamic way of doing this would be:'], ['Eventually you can also parametrize the model this way.']], [[' def gimme_my_form(field_tuple):\n    class MyForm(ModelForm):\n        class Meta:\n            model = MyModel\n            fields = field_tuple\n    return MyForm\n']], ['How to create Django FormWizard for one Model?'], 2], [(1698734, 0), [['You then want to create a set of dimension indexes like this.'], ['Your fact table can be this a  collections.namedtuple .  You can use something like this.']], [[' years = collections.defaultdict( list )\nplayers = collections.defaultdict( list )\nteams = collections.defaultdict( list )\n']], ['Python data structure recommendation?'], 4], [(1698734, 1), [['Your fact table can be this a  collections.namedtuple .  You can use something like this.'], ["Now you can find all items in a given dimension value.  It's a simple list attached to a dimension value.  "]], [[' class ScoreFact( object ):\n    def __init__( self, year, player, team, score ):\n        self.year= year\n        self.player= player\n        self.team= team\n        self.score= score\n        years[self.year].append( self )\n        players[self.player].append( self )\n        teams[self.team].append( self )\n']], ['Python data structure recommendation?'], 4], [(1698734, 2), [["Now you can find all items in a given dimension value.  It's a simple list attached to a dimension value.  "], ['etc.  You can simply use  sum()  to add them up.  A multi-dimensional query is something like this.']], [[" years['2001'] are all scores for the given year.\n\nplayers['SEA'] are all scores for the given player.\n"]], ['Python data structure recommendation?'], 4], [(1698734, 3), [['etc.  You can simply use  sum()  to add them up.  A multi-dimensional query is something like this.'], ['-10000']], [[" [ x for x in players['SEA'] if x.year == '2001' ]\n"]], ['Python data structure recommendation?'], 4], [(1700577, 0), [['only way so that django reverse is replaced by ur_reverse is'], ['or if you like decorator syntactic sugar']], [[' django.core.urlresolvers.reverse = ur_reverse\n']], ['Is it possible to redefine reverse in a Django project?'], 2], [(1700577, 1), [['or if you like decorator syntactic sugar'], ['which i would not advice(and many will shout), unless you are not willing to change every usage of reverse with ur_reverse']], [[' django.core.urlresolvers.reverse = ur_reverse_decorator(django.core.urlresolvers.reverse )\n']], ['Is it possible to redefine reverse in a Django project?'], 2], [(1702562, 0), [['Presuming daemon mode, which is better option anyway, this means you would have something like:'], ["With the 'display-name' option to WSGIDaemonProcess you can identify which processes by using BSD style 'ps' program. With 'display-name' set to '%{GROUP}', the 'ps' output should show '(wsgi:django)' as process name. Identify the process ID and do:"]], [[' # Define process group.\n\nWSGIDaemonProcess django display-name=%{GROUP}\n\n# Mount application.\n\nWSGIScriptAlias / /usr/local/django/mysite/apache/django.wsgi\n\n# Ensure application preloaded on process start. Must specify the\n# process group and application group (Python interpreter) to use.\n\nWSGIImportScript /usr/local/django/mysite/apache/django.wsgi \\\n  process-group=django application-group=%{GLOBAL}\n\n<Directory /usr/local/django/mysite/apache>\n\n    # Ensure application runs in same process group and application\n    # group as was preloaded into on process start.\n\n    WSGIProcessGroup django\n    WSGIApplicationGroup %{GLOBAL}\n\n    Order deny,allow\n    Allow from all\n</Directory>\n']], ['Speeding Up the First Page Load in django'], 3], [(1702562, 1), [["With the 'display-name' option to WSGIDaemonProcess you can identify which processes by using BSD style 'ps' program. With 'display-name' set to '%{GROUP}', the 'ps' output should show '(wsgi:django)' as process name. Identify the process ID and do:"], ['In mod_wsgi 3.X the configuration can be simpler and can use instead:']], [[' kill -SIGINT pid\n']], ['Speeding Up the First Page Load in django'], 3], [(1702562, 2), [['In mod_wsgi 3.X the configuration can be simpler and can use instead:'], ['That is, no need to use separate WSGIImportScript directive as can specific process group and application group as arguments to WSGIScriptAlias instead with side effect that it will preload application.']], [[' # Define process group.\n\nWSGIDaemonProcess django display-name=%{GROUP}\n\n# Mount application and designate which process group and\n# application group (Python interpreter) to run it in. As\n# process group and application group named, this will have\n# side effect of preloading application on process start.\n\nWSGIScriptAlias / /usr/local/django/mysite/apache/django.wsgi \\\n  process-group=django application-group=%{GLOBAL}\n\n<Directory /usr/local/django/mysite/apache>\n    Order deny,allow\n    Allow from all\n</Directory>\n']], ['Speeding Up the First Page Load in django'], 3], [(1703471, 0), [['Read in all your lines and use the  string.join()  method to join them together.'], ["Additionally,  join()  can take any sequence, so reading the lines isn't necessary.  The above code can be simplified as:"]], [[' lines = open(file_in).readlines()\n\nout_list = "[\'" + "\',\'".join(lines) + "\']"\n']], ['Basic Python loop question - problem reading a list from a text file'], 2], [(1703471, 1), [["Additionally,  join()  can take any sequence, so reading the lines isn't necessary.  The above code can be simplified as:"], ['-10000']], [[' out_list = "[\'" + "\',\'".join(open(file_in)) + "\']"\n']], ['Basic Python loop question - problem reading a list from a text file'], 2], [(1703678, 0), [["If you're using Django, you could try safe markdown:"], ["If you want to sanitize HTML on save, I've had good luck using feedparser's sanitize ( http://www.feedparser.org/ ). "]], [[' {% load markup %}\n\n{{ foo|markdown:"safe" }}\n']], ['A "safe" python HTML text formatting (ala textile)'], 2], [(1703678, 1), [["If you want to sanitize HTML on save, I've had good luck using feedparser's sanitize ( http://www.feedparser.org/ ). "], ['-10000']], [[" import feedparser\n\nbody = feedparser._sanitizeHTML(body, 'utf8')\n"]], ['A "safe" python HTML text formatting (ala textile)'], 2], [(1704401, 0), [['map(func, iterable[, chunksize])'], ['For example, if you wanted to map this function:']], [[' A parallel equivalent of the map() built-in function (it supports only\none iterable argument though). It blocks till the result is ready.\n\nThis method chops the iterable into a number of chunks which it submits to the \nprocess pool as separate tasks. The (approximate) size of these chunks can be \nspecified by setting chunksize to a positive integ\n']], ['Is there a simple process-based parallel map for python?'], 4], [(1704401, 1), [['For example, if you wanted to map this function:'], ['to range(10), you could do it using the built-in map() function:']], [[' def f(x):\n    return x**2\n']], ['Is there a simple process-based parallel map for python?'], 4], [(1704401, 2), [['to range(10), you could do it using the built-in map() function:'], ["or using a multiprocessing.Poll() object's method map():"]], [[' map(f, range(10))\n']], ['Is there a simple process-based parallel map for python?'], 4], [(1704401, 3), [["or using a multiprocessing.Poll() object's method map():"], ['-10000']], [[' import multiprocessing\npool = multiprocessing.Pool()\nprint pool.map(f, range(10))\n']], ['Is there a simple process-based parallel map for python?'], 4], [(1704823, 0), [['You rarely need loops for vector operations in numpy.\nYou can create an uninitialized array and assign to all entries at once:'], ['I have timed the alternatives  a[:] = numpy.nan  here and  a.fill(numpy.nan)  as posted by Blaenk:']], [[' >>> a = numpy.empty((3,3,))\n>>> a[:] = numpy.nan\n>>> a\narray([[ NaN,  NaN,  NaN],\n       [ NaN,  NaN,  NaN],\n       [ NaN,  NaN,  NaN]])\n']], ['Initializing numpy matrix to something other than zero or one'], 2], [(1704823, 1), [['I have timed the alternatives  a[:] = numpy.nan  here and  a.fill(numpy.nan)  as posted by Blaenk:'], ["The timings show a preference for  ndarray.fill(..)  as the faster alternative. OTOH, I like numpy's convenience implementation where you can assign values to whole slices at the time, the code's intention is very clear."]], [[' $ python -mtimeit "import numpy as np; a = np.empty((100,100));" "a.fill(np.nan)"\n10000 loops, best of 3: 54.3 usec per loop\n$ python -mtimeit "import numpy as np; a = np.empty((100,100));" "a[:] = np.nan" \n10000 loops, best of 3: 88.8 usec per loop\n']], ['Initializing numpy matrix to something other than zero or one'], 2], [(1705077, 0), [['To start/stop python sub processes you can use the subprocess module.\nTo check whether they are running you might use  psutil : '], ['...or this (it will also check if the PID has been reused):']], [[' >>> import psutil\n>>> pid = 1034  # some pid\n>>> psutil.pid_exists(pid)\nTrue\n>>>\n']], ['Python library for Linux process management'], 2], [(1705077, 1), [['...or this (it will also check if the PID has been reused):'], ['-10000']], [[' >>> p = psutil.Process(pid)\n>>> p.is_running()\nTrue\n>>>\n']], ['Python library for Linux process management'], 2], [(1707380, 0), [['optparse has a strange penchange for exiting your program, which I think is really unfortunate.  You can initialize it like this to prevent it:'], ['Note that now you have to handle the  -h  and  --help  options yourself.  You can print the help message formatted by OptionParser like this:']], [[' oparser = OptionParser(add_help_option=False, ...)\n']], ['How to disable the OptionParser default help view?'], 2], [(1707380, 1), [['Note that now you have to handle the  -h  and  --help  options yourself.  You can print the help message formatted by OptionParser like this:'], ['-10000']], [[' print(oparser.format_help().strip())\n']], ['How to disable the OptionParser default help view?'], 2], [(1707709, 0), [["Yes, you want something based on  pkgutil  or similar -- this way you can treat all packages alike regardless if they are in eggs or zips or so (where os.listdir won't help)."], ['How to import them too? You can just use  __import__  as normal:']], [[' import pkgutil\n\n# this is the package we are inspecting -- for example \'email\' from stdlib\nimport email\n\npackage = email\nfor importer, modname, ispkg in pkgutil.iter_modules(package.__path__):\n    print "Found submodule %s (is a package: %s)" % (modname, ispkg)\n']], ['List all the modules that are part of a python package?'], 2], [(1707709, 1), [['How to import them too? You can just use  __import__  as normal:'], ['-10000']], [[' import pkgutil\n\n# this is the package we are inspecting -- for example \'email\' from stdlib\nimport email\n\npackage = email\nprefix = package.__name__ + "."\nfor importer, modname, ispkg in pkgutil.iter_modules(package.__path__, prefix):\n    print "Found submodule %s (is a package: %s)" % (modname, ispkg)\n    module = __import__(modname, fromlist="dummy")\n    print "Imported", module\n']], ['List all the modules that are part of a python package?'], 2], [(1708103, 0), [["I'd do a quick demo of something trivial (in Python, at least) but cool in IDLE.  For instance:"], ["Oh, and I'd then show off how the code works if you set  letters  using a generator expression:"]], [[" >>> text = # some nice long text, e.g. the Gettysburg Address\n>>> letters = [c.lower() for c in text if c.isalpha()]\n>>> letters\n    ['f', 'o', 'u', 'r', 's', 'c', 'o', 'r', 'e', 'a', 'n', 'd', 's', 'e', 'v', 'e',\n    ...\n>>> freq = {}\n>>> for c in letters:\n        freq[c] = freq.get(c, 0) + 1\n\n>>> freq\n    {'a': 102, 'c': 31, 'b': 14, 'e': 165, 'd': 58, 'g': 28, 'f': 27, 'i': 68, 'h': 80, \n    ...\n>>> for c in sorted(freq.keys(), key=lambda x: freq[x], reverse=True):\n        print c, freq[c]\n\ne 165\nt 126\na 102\n...\n"]], ['How to impress developers with IronPython/Python'], 2], [(1708103, 1), [["Oh, and I'd then show off how the code works if you set  letters  using a generator expression:"], ['...which is to say, exactly the same.']], [[' letters = (c.lower() for c in text if c.isalpha())\n']], ['How to impress developers with IronPython/Python'], 2], [(1708392, 0), [['For example, if you had a set  a  and set  b  which are instances of these pseudo sets:'], ['Edit:  Quick example with a very limited API:']], [[' >>> u = Union(a, b)\n']], ['Is there code out there to subclass set in Python for big xranges?'], 3], [(1708392, 1), [['Edit:  Quick example with a very limited API:'], ['Running gives you:']], [[' class Base(object):\n\n    def union(self, other):\n        return Union(self, other)\n\n    def intersection(self, other):\n        return Intersection(self, other)\n\nclass RangeSet(Base):\n\n    def __init__(self, low, high):\n        self.low = low\n        self.high = high\n\n    def __contains__(self, value):\n        return value >= self.low and value < self.high\n\nclass Union(Base):\n    def __init__(self, *sets):\n        self.sets = sets\n\n    def __contains__(self, value):\n        return any(value in x for x in self.sets)\n\nclass Intersection(Base):\n\n    def __init__(self, *sets):\n        self.sets = sets\n\n    def __contains__(self, value):\n        return all(value in x for x in self.sets)\n\n\na = RangeSet(0, 10)\nb = RangeSet(5, 15)\n\nu = a.union(b)\ni = a.intersection(b)\n\nprint 3 in u\nprint 7 in u\nprint 12 in u\n\nprint 3 in i\nprint 7 in i\nprint 12 in i\n']], ['Is there code out there to subclass set in Python for big xranges?'], 3], [(1708392, 2), [['Running gives you:'], ['-10000']], [[' True\nTrue\nTrue\nFalse\nTrue\nFalse\n']], ['Is there code out there to subclass set in Python for big xranges?'], 3], [(1708789, 0), [['How about something like this:'], ['To use it you would then say:']], [[' class BuildInfo(object):\n    def __init__(self, objectFiles = [], sourceFiles = []):\n        self.objectFiles = objectFiles\n        self.sourceFiles = sourceFiles \n    def append(self, build_info):\n        self.objectFiles.extend(build_info.objectFiles)\n        self.sourceFiles.extend(build_info.sourceFiles)\n']], ['python/scons help: maintaining lists of source files + object files'], 3], [(1708789, 1), [['To use it you would then say:'], ['The difference betweeen append and extend is this']], [[' a = BuildInfo() #uses default value of an empty list for object/sourceFiles\nb = BuildInfo(["hello.dat", "world.dat"], ["foo.txt", "bar.txt"])\na.append(b) #a now has the same info as b\na.append(b) #a now has ["hello.dat", "world.dat", "hello.dat", "world.dat"], ["foo.txt", "bar.txt", "foo.txt", "bar.txt"]\n']], ['python/scons help: maintaining lists of source files + object files'], 3], [(1708789, 2), [['The difference betweeen append and extend is this'], ['-10000']], [[' a = [1,2,3]\nb = [4,5,6]\na.append(b) #a is now [1,2,3[4,5,6]]\n\na = [1,2,3]\nb = [4,5,6]\na.extend(b) #a is now [1,2,3,4,5,6]\n']], ['python/scons help: maintaining lists of source files + object files'], 3], [(1709528, 0), [['First you need to copy the  qt_LOCALE.qm  file to your application directory. Mine was :'], ['Secondly, you need to load a translator for your application.']], [[' cp /usr/share/qt4/translations/qt_fr.qm .\n']], ['PyQt: translating standard buttons'], 2], [(1709528, 1), [['Secondly, you need to load a translator for your application.'], ['-10000']], [[' application = QApplication(argv)\n\nlocale = QLocale.system().name()\nqtTranslator = QTranslator()\nif qtTranslator.load("qt_"+locale):\n    application.installTranslator(qtTranslator)\n\nmain_window = QMainWindow()\nmain_window.show()\n\nexit(application.exec_())\n']], ['PyQt: translating standard buttons'], 2], [(1710030, 0), [['This technically answers the direct question:'], ['but there is a fatal flaw. It is OK for throwaway code, but that data looks suspiciously like comma separated values, and the third field may even be space delimited chunks of data. Far better to do it like this so that if the first two columns sprout an extra digit, it will still work:']], [[' lst = [line[6:17] for line in open(fname)]\n']], ['How to read, in a line, all characters from column A to B'], 4], [(1710030, 1), [['but there is a fatal flaw. It is OK for throwaway code, but that data looks suspiciously like comma separated values, and the third field may even be space delimited chunks of data. Far better to do it like this so that if the first two columns sprout an extra digit, it will still work:'], ['And if those space delimited chunks might get longer, then this:']], [[" lst = [x[2].strip()[0:11] for x in [line.split(',') for line in open(fname)]]\n"]], ['How to read, in a line, all characters from column A to B'], 4], [(1710030, 2), [['And if those space delimited chunks might get longer, then this:'], ["Don't forget a comment or two to explain what is going on. Perhaps:"]], [[" lst = [x[2].strip().split()[0:2] for x in [line.split(',') for line in open(fname)]]\n"]], ['How to read, in a line, all characters from column A to B'], 4], [(1710030, 3), [["Don't forget a comment or two to explain what is going on. Perhaps:"], ['Assuming, of course, that those are licence keys. No need to be too abstract in comments.']], [[' # on each line, get the 3rd comma-delimited field and break out the \n# first two space-separated chunks of the licence key\n']], ['How to read, in a line, all characters from column A to B'], 4], [(1711193, 0), [['If you put '], ['You can inspect the call stack using the traceback module:']], [[' import code\ncode.interact(local=locals())\n']], ['Komodo - watch variables and execute code while on pause in the program'], 4], [(1711193, 1), [['You can inspect the call stack using the traceback module:'], ['For example, here is a decorator which prints the call stack:']], [[' import traceback\ntraceback.extract_stack()\n']], ['Komodo - watch variables and execute code while on pause in the program'], 4], [(1711193, 2), [['For example, here is a decorator which prints the call stack:'], ['Use it like this:']], [[" def print_trace(func):\n    '''This decorator prints the call stack\n    '''\n    def wrapper(*args,**kwargs):\n        stacks=traceback.extract_stack()\n        print('\\n'.join(\n            ['  '*i+'%s %s:%s'%(text,line_number,filename)\n             for i,(filename,line_number,function_name,text) in enumerate(stacks)]))\n        res = func(*args,**kwargs)\n        return res\n    return wrapper\n"]], ['Komodo - watch variables and execute code while on pause in the program'], 4], [(1711193, 3), [['Use it like this:'], ['-10000']], [[' @print_trace\ndef f():\n    pass\n']], ['Komodo - watch variables and execute code while on pause in the program'], 4], [(1712348, 0), [['Since the comment is from # to end-of-line, what we usually do is this.'], ['You can also do this']], [[' raw_data, _, _ = line.partition("#")\ndata= raw_data.strip()\nif len(data) == 0:\n    continue # or whatever, the data part of the line is empty\n# you have data \n']], ["In Python: how do I say: if line.partition('#' or 'tab') ... do something"], 2], [(1712348, 1), [['You can also do this'], ["This isn't a general solution because sometimes that whitespace in front of the comment is meaningful."]], [[' data, _, _ = line.strip().partition("#")\n']], ["In Python: how do I say: if line.partition('#' or 'tab') ... do something"], 2], [(1714027, 0), [['Remove the uninteresting part of the string (trailing zeroes and dots), and then compare the lists of numbers.'], ['Some tests, thanks to  this post :']], [[' import re\n\ndef mycmp(version1, version2):\n    def normalize(v):\n        return [int(x) for x in re.sub(r\'(\\.0+)*$\',\'\', v).split(".")]\n    return cmp(normalize(version1), normalize(version2))\n']], ['Version number comparison'], 2], [(1714027, 1), [['Some tests, thanks to  this post :'], ['-10000']], [[' assert mycmp("1", "1") == 0\nassert mycmp("2.1", "2.2") < 0\nassert mycmp("3.0.4.10", "3.0.4.2") > 0\nassert mycmp("4.08", "4.08.01") < 0\nassert mycmp("3.2.1.9.8144", "3.2") > 0\nassert mycmp("3.2", "3.2.1.9.8144") < 0\nassert mycmp("1.2", "2.1") < 0\nassert mycmp("2.1", "1.2") > 0\nassert mycmp("5.6.7", "5.6.7") == 0\nassert mycmp("1.01.1", "1.1.1") == 0\nassert mycmp("1.1.1", "1.01.1") == 0\nassert mycmp("1", "1.0") == 0\nassert mycmp("1.0", "1") == 0\nassert mycmp("1.0", "1.0.1") < 0\nassert mycmp("1.0.1", "1.0") > 0\nassert mycmp("1.0.2.0", "1.0.2") == 0\n']], ['Version number comparison'], 2], [(1716035, 0), [['All key names can be directly used after importing  wx  module e.g'], ['also you do not need to generate key to name map by hand, you generate keycode to name mapping automatically e.g.']], [[' >>> import wx\n>>> wx.WXK_BACK \n8\n']], ['wxPython wx.KeyEvent GetKeyCode()'], 3], [(1716035, 1), [['also you do not need to generate key to name map by hand, you generate keycode to name mapping automatically e.g.'], ['Then in OnChar you can just do this']], [[' import wx\n\nkeyMap = {}\nfor varName in vars(wx):\n    if varName.startswith("WXK_"):\n        keyMap[varName] = getattr(wx, varName)\n\nprint keyMap\n']], ['wxPython wx.KeyEvent GetKeyCode()'], 3], [(1716035, 2), [['Then in OnChar you can just do this'], ['-10000']], [[' def OnChar(self, evt):\n    try:\n        print keyMap[evt.GetKeyCode()]\n    except KeyError:\n        print "keycode",evt.GetKeyCode(), "not found"\n']], ['wxPython wx.KeyEvent GetKeyCode()'], 3], [(1719742, 0), [["A customer connects and retains a socket,  sock . You load his account and stick it in  connections[sock] .  Then you keep a dictionary of account IDs (the other way) with references to the accounts,  accounts[account_id] . Let's try that..."], ['Since we assigned  account  to two different places, any change to that dictionary (in either structure) will be reflected in the other. So...']], [[' connected = {}\naccounts = {}\n\ndef load_account(acct):\n    return db_magic(acct)                             # Grab a dictionary from the DB\n\ndef somebody_connected(sck, acct):\n    global connected, accounts\n    account = load_account(acct)\n    connected[sck] = account                          # Now we have it by socket\n    accounts[acct["accountid"]] = account             # Now we have it by account ID\n']], ['Python organizing data with multiple dictionaries'], 2], [(1719742, 1), [['Since we assigned  account  to two different places, any change to that dictionary (in either structure) will be reflected in the other. So...'], ['The change we execute in  update_username  will automatically be picked up when we do the  sck.send , because the reference is exactly the same.']], [[' def update_username(acct_id, new_username):\n    accounts[acct_id]["username"] = new_username\n\ndef what_is_my_username(sck):\n    sck.send(connected[sck]["username"])              # In response to GIMME_USERNAME\n']], ['Python organizing data with multiple dictionaries'], 2], [(1719865, 0), [['example code:'], ['it outputs:']], [[' data="""AB 500\nBus AB 500\nNews CA\nNews CA BLAH"""\n\ndef getCombinations(tokens):\n    count = len(tokens)\n    for L in range(1,count+1):\n        for i in range(count-L+1):\n            yield tuple(tokens[i:i+L])\n\ngroupDict = {}\nfor s in data.split("\\n"):\n    tokens = s.split()\n    for groupKey in getCombinations(tokens):\n        if groupKey not in groupDict:\n            groupDict[groupKey] = [s]\n        else:\n            groupDict[groupKey].append(s)\n\nfor group, values in groupDict.iteritems():\n    if len(values) > 1:\n        print group, "->", values\n']], ['Classify array of strings based on commonalities'], 2], [(1719865, 1), [['it outputs:'], ['-10000']], [[" ('News', 'CA') -> ['News CA', 'News CA BLAH']\n('AB',) -> ['AB 500', 'Bus AB 500']\n('500',) -> ['AB 500', 'Bus AB 500']\n('CA',) -> ['News CA', 'News CA BLAH']\n('AB', '500') -> ['AB 500', 'Bus AB 500']\n('News',) -> ['News CA', 'News CA BLAH']\n"]], ['Classify array of strings based on commonalities'], 2], [(1721802, 0), [['Matlab:'], ['Python:']], [[' >> repmat([1;1],[1,1,1])\n\nans =\n     1\n     1\n']], ["What is the equivalent of MATLAB's repmat in NumPy"], 2], [(1721802, 1), [['Python:'], ['-10000']], [[' In [46]: a = np.array([[1],[1]])\nIn [47]: np.tile(a, [1,1,1])\nOut[47]: \narray([[[1],\n        [1]]])\n']], ["What is the equivalent of MATLAB's repmat in NumPy"], 2], [(1723072, 0), [['-10000'], ['or:']], [[' common = set(x[0])\nfor l in x[1:]:\n    common &= set(l)\nprint list(common)\n']], ['Find (and keep) duplicates of sublist in python'], 2], [(1723072, 1), [['or:'], ['-10000']], [[' import operator\nprint reduce(operator.iand, map(set, x))\n']], ['Find (and keep) duplicates of sublist in python'], 2], [(1723494, 0), [['Try a more pythonic approach to the filtering, something like'], ['Since your data is a list of lists, you need to do something in order to hash it.\nTry out']], [[' [x for x in list1 if x not in set(list2)]\n']], ['python function slowing down for no apparent reason'], 4], [(1723494, 1), [['Since your data is a list of lists, you need to do something in order to hash it.\nTry out'], ['I tested out your original function, and my approach, using the following test data:']], [[' list2_set = set([tuple(x) for x in list2])\ndiff = [x for x in list1 if tuple(x) not in list2_set]\n']], ['python function slowing down for no apparent reason'], 4], [(1723494, 2), [['I tested out your original function, and my approach, using the following test data:'], ['Timings - not scientific, but still:']], [[' list1 = [[x+1, x*2] for x in range(38000)]\nlist2 = [[x+1, x*2] for x in range(10000, 160000)]\n']], ['python function slowing down for no apparent reason'], 4], [(1723494, 3), [['Timings - not scientific, but still:'], ['-10000']], [['  #Original function\n real    2m16.780s\n user    2m16.744s\n sys     0m0.017s\n\n #My function\n real    0m0.433s\n user    0m0.423s\n sys     0m0.007s\n']], ['python function slowing down for no apparent reason'], 4], [(1724693, 0), [['os.walk  is the answer, this will find the first match:'], ['And this will find all matches:']], [[' import os\n\ndef find(name, path):\n    for root, dirs, files in os.walk(path):\n        if name in files:\n            return os.path.join(root, name)\n']], ['Find a file in python'], 3], [(1724693, 1), [['And this will find all matches:'], ['And this will match a pattern:']], [[' def find_all(name, path):\n    result = []\n    for root, dirs, files in os.walk(path):\n        if name in files:\n            result.append(os.path.join(root, name))\n    return result\n']], ['Find a file in python'], 3], [(1724693, 2), [['And this will match a pattern:'], ['-10000']], [[" import os, fnmatch\ndef find(pattern, path):\n    result = []\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            if fnmatch.fnmatch(name, pattern):\n                result.append(os.path.join(root, name))\n    return result\n\nfind('*.txt', '/path/to/dir')\n"]], ['Find a file in python'], 3], [(1725515, 0), [['-10000'], ['-10000']], [[' """ my module test does x and y\n"""\nclass myclass(object):\n    ...\n']], ['Can a python module have a __repr__?'], 4], [(1725515, 1), [['-10000'], ["You can define your own  __repr__  on a module level (just provide  def __repr__(... ) but then you'd have to do:"]], [[' import testmodule\nprint testmodule.__doc__\n']], ['Can a python module have a __repr__?'], 4], [(1725515, 2), [["You can define your own  __repr__  on a module level (just provide  def __repr__(... ) but then you'd have to do:"], ['Have a look at the following python shell session:']], [[' import mymodule\nprint mymodule.__repr__() \n']], ['Can a python module have a __repr__?'], 4], [(1725515, 3), [['Have a look at the following python shell session:'], ["So I believe the problem lies within these  slot wrapper objects  which (from what can be read at the link) have the result of bypassing the usual 'python' way of looking up item attributes.  "]], [[' >>> import sys                 # we import the module\n>>> sys.__repr__()               # works as usual\n"<module \'sys\' (built-in)>"\n>>> sys.__dict__[\'__repr__\']     # but it\'s not in the modules __dict__ ?\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nKeyError: \'__repr__\'\n>>> sys.__class__.__dict__[\'__repr__\'] # __repr__ is provided on the module type as a slot wrapper\n<slot wrapper \'__repr__\' of \'module\' objects>\n>>> sys.__class__.__dict__[\'__repr__\'](sys) # which we should feed an instance of the module type\n"<module \'sys\' (built-in)>"\n']], ['Can a python module have a __repr__?'], 4], [(1726640, 0), [['The best way to get at it is to sneak the property name into another variable, like so:'], ["In Django 0.96 (the version used by Google AppEngine) the templating language doesn't support tuple expansion, so it's a bit uglier:"]], [[" {% for key, value in hop.items %}\n    {% ifequal key 'boil time' %}\n        {{ value }}\n    {% endifequal %}\n{% endfor %}\n"]], ['Using keys with spaces'], 5], [(1726640, 1), [["In Django 0.96 (the version used by Google AppEngine) the templating language doesn't support tuple expansion, so it's a bit uglier:"], ['So, taking your code, we end up with:']], [[" {% for hop in hops %}\n    <tr>\n        <td>{{ hop.name }}</td>\n        <td>{{ hop.mass }}</td>\n        <td>\n            {% for item in hop.items %}\n                {% ifequal item.0 'boil time' %}\n                    {{ item.1 }}\n                {% endifequal %}\n            {% endfor %}\n        </td>\n    </tr>\n{% endfor %}\n"]], ['Using keys with spaces'], 5], [(1726640, 2), [['So, taking your code, we end up with:'], ['In Django 0.96 (the version on Google AppEnginge), this becomes:']], [[" {% for hop in hops %}\n    <tr>\n        <td>{{ hop.name }}</td>\n        <td>{{ hop.mass }}</td>\n        <td>\n            {% for key, value in hop.items %}\n                {% ifequal key 'boil time' %}\n                    {{ value }}\n                {% endifequal %}\n            {% endfor %}\n        </td>\n    </tr>\n{% endfor %}\n"]], ['Using keys with spaces'], 5], [(1726640, 3), [['In Django 0.96 (the version on Google AppEnginge), this becomes:'], ["There's even a wordier way to get at it, using the regroup tag:"]], [[" {% for hop in hops %}\n    <tr>\n        <td>{{ hop.name }}</td>\n        <td>{{ hop.mass }}</td>\n        <td>\n            {% for item in hop.items %}\n                {% ifequal item.0 'boil time' %}\n                    {{ item.1 }}\n                {% endifequal %}\n            {% endfor %}\n        </td>\n    </tr>\n{% endfor %}\n"]], ['Using keys with spaces'], 5], [(1726640, 4), [["There's even a wordier way to get at it, using the regroup tag:"], ['-10000']], [[" {% regroup hop.items by 'boil time' as bt %}\n    {% for item in bt %}\n        {% if forloop.first %}\n            {% for item2 in item.list %}\n                {% for item3 in item2 %}\n                    {% if not forloop.first %}\n                        {{ item3 }}\n                    {% endif %}\n                {% endfor %}\n            {% endfor %}\n        {% endif %}\n{% endfor %}\n"]], ['Using keys with spaces'], 5], [(1727535, 0), [['You can load the document up with a DOM/HTML parsing library ( see html5lib ), grab all text nodes, match them against a regular expression and replace the text nodes with a regex replacement of the URI with anchors around it using a PCRE such as:'], ['Edit: Try using the answers here:  How do I get python-markdown to additionally "urlify" links when formatting plain text?']], [[" /(https?:[;\\/?\\\\@&=+$,\\[\\]A-Za-z0-9\\-_\\.\\!\\~\\*\\'\\(\\)%][\\;\\/\\?\\:\\@\\&\\=\\+\\$\\,\\[\\]A-Za-z0-9\\-_\\.\\!\\~\\*\\'\\(\\)%#]*|[KZ]:\\\\*.*\\w+)/g\n"]], ['replace URLs in text with links to URLs'], 2], [(1727535, 1), [['Edit: Try using the answers here:  How do I get python-markdown to additionally "urlify" links when formatting plain text?'], ["call urlify2 on a string and I think that's it if you aren't dealing with a DOM object."]], [[' import re\n\nurlfinder = re.compile("([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}|((news|telnet|nttp|file|http|ftp|https)://)|(www|ftp)[-A-Za-z0-9]*\\\\.)[-A-Za-z0-9\\\\.]+):[0-9]*)?/[-A-Za-z0-9_\\\\$\\\\.\\\\+\\\\!\\\\*\\\\(\\\\),;:@&=\\\\?/~\\\\#\\\\%]*[^]\'\\\\.}>\\\\),\\\\\\"]")\n\ndef urlify2(value):\n    return urlfinder.sub(r\'<a href="\\1">\\1</a>\', value)\n']], ['replace URLs in text with links to URLs'], 2], [(1727594, 0), [["Here's the memory layout I use for the blob header:"], ["Here's how I load binary blob file and fix up pointers:"]], [[' // Memory layout\n//\n// p begining of file in memory.\n// p + 0 : num_pointers\n// p + 4 : offset 0\n// p + 8 : offset 1\n// ...\n// p + ((num_pointers - 1) * 4) : offset n-1\n// p + (num_pointers * 4) : num_pointers   // again so we can figure out \n//                                            what memory to free.\n// p + ((num_pointers + 1) * 4) : start of cooked data\n//\n']], ['Optimal datafile format loading on a game console'], 2], [(1727594, 1), [["Here's how I load binary blob file and fix up pointers:"], ["My  bbq  library isn't quite ready for prime time, but it could give you some ideas on how to write one yourself in python."]], [[' void* bbq_load(const char* filename)\n{\n    unsigned char* p;\n    int size = LoadFileToMemory(filename, &p);\n    if(size <= 0)\n        return 0;\n\n    // get the start of the pointer table\n    unsigned int* ptr_table = (unsigned int*)p;\n    unsigned int num_ptrs = *ptr_table;\n    ptr_table++;\n\n    // get the start of the actual data\n    // the 2 is to skip past both num_pointer values\n    unsigned char* base = p + ((num_ptrs + 2) * sizeof(unsigned int));\n\n    // fix up the pointers\n    while ((ptr_table + 1) < (unsigned int*)base)\n    {\n        unsigned int* ptr = (unsigned int*)(base + *ptr_table);\n        *ptr = (unsigned int)((unsigned char*)ptr + *ptr);\n        ptr_table++;\n    }\n\n    return base;\n}\n']], ['Optimal datafile format loading on a game console'], 2], [(1730649, 0), [['At this stage in my arc of learning Python, I find this most Pythonic:'], ['to skip all of the lines at the top of the file starting with  # .  To skip all lines starting with  # :']], [[" def iscomment(s):\n   return s.startswith('#')\n\nfrom itertools import dropwhile\nwith open(filename, 'r') as f:\n    for line in dropwhile(iscomment, f):\n       # do something with line\n"]], ['More pythonic way of skipping header lines'], 4], [(1730649, 1), [['to skip all of the lines at the top of the file starting with  # .  To skip all lines starting with  # :'], ["That's almost all about readability for me; functionally there's almost no difference between:"]], [[" from itertools import ifilterfalse\nwith open(filename, 'r') as f:\n    for line in ifilterfalse(iscomment, f):\n       # do something with line\n"]], ['More pythonic way of skipping header lines'], 4], [(1730649, 2), [["That's almost all about readability for me; functionally there's almost no difference between:"], ['and']], [[' for line in ifilterfalse(iscomment, f))\n']], ['More pythonic way of skipping header lines'], 4], [(1730649, 3), [['and'], ['Breaking out the test into its own function makes the intent of the code a little clearer; it also means that if your definition of a comment changes you have one place to change it.']], [[" for line in (x for x in f if not x.startswith('#'))\n"]], ['More pythonic way of skipping header lines'], 4], [(1730769, 0), [['But, if you insist, then this is one way to do it:'], ['The  solution by SilentGhost  is probably more efficient and works just as well, without resorting to the use of  __getattribute__ . The code then becomes:']], [[' >>> class struct(dict):\n...     def __getattribute__(self, key):\n...         return self[key]\n... \n>>> s = struct(a=5, b=7)\n>>> s.a\n5\n']], ['Is there an existing Python class that can hold any user attributes?'], 2], [(1730769, 1), [['The  solution by SilentGhost  is probably more efficient and works just as well, without resorting to the use of  __getattribute__ . The code then becomes:'], ['-10000']], [[" >>> def struct(**kwargs):\n...     return type('Struct', (object,), kwargs)\n... \n>>> s = struct(a=5, b=7)\n>>> s.a\n5\n"]], ['Is there an existing Python class that can hold any user attributes?'], 2], [(1732452, 0), [['URL mappings are easy to construct, for example:'], ["Django supports  model serialization , so it's easy to turn models into XML:"]], [[" urlpatterns = patterns('books.views',\n  (r'^books/$', 'index'),\n  (r'^books/(\\d+)/$', 'get'))\n"]], ['Django ease of building a RESTful interface'], 3], [(1732452, 1), [["Django supports  model serialization , so it's easy to turn models into XML:"], ['Combine the two with  decorators  and you can build fast, quick handlers:']], [[' from django.core import serializers\nfrom models import Book\n\ndata = serializers.serialize("xml", Book.objects.all())\n']], ['Django ease of building a RESTful interface'], 3], [(1732452, 2), [['Combine the two with  decorators  and you can build fast, quick handlers:'], ['-10000']], [[' from django.http import HttpResponse\nfrom django.shortcuts import get_object_or_404\n\ndef xml_view(func):\n  def wrapper(*args, **kwargs):\n    result = func(*args, **kwargs)\n    return HttpResponse(serializers.serialize("xml", result),\n        mimetype="text/xml")\n  return wrapper\n\n@xml_view\ndef index(request):\n  return Books.objects.all()\n\n@xml_view\ndef get(request, id):\n  return get_object_or_404(Book, pk=id)\n']], ['Django ease of building a RESTful interface'], 3], [(1734125, 0), [['You can use arbitrary regular expression to select an element:'], ['Output:']], [[' #!/usr/bin/env python\nfrom lxml import html\n\ndoc = html.fromstring(\'\'\'\n    <meta name="Description">\n    <meta name="description">\n    <META name="description">\n    <meta NAME="description">\n\'\'\')\nfor meta in doc.xpath(\'//meta[re:test(@name, "^description$", "i")]\',\n                      namespaces={"re": "http://exslt.org/regular-expressions"}):\n    print html.tostring(meta, pretty_print=True),\n']], ['Is it possible for lxml to work in a case-insensitive manner?'], 2], [(1734125, 1), [['Output:'], ['-10000']], [[' <meta name="Description">\n<meta name="description">\n<meta name="description">\n<meta name="description">\n']], ['Is it possible for lxml to work in a case-insensitive manner?'], 2], [(1735025, 0), [['-10000'], ['Using  /=  and  *=  allows you to eliminate an intermediate temporary array, thus saving some memory.  Multiplication is less expensive than division, so ']], [[' audio /= np.max(np.abs(audio),axis=0)\nimage *= (255.0/image.max())\n']], ['How to normalize a NumPy array to within a certain range?'], 3], [(1735025, 1), [['Using  /=  and  *=  allows you to eliminate an intermediate temporary array, thus saving some memory.  Multiplication is less expensive than division, so '], ['is marginally faster than ']], [[' image *= 255.0/image.max()    # Uses 1 division and image.size multiplications\n']], ['How to normalize a NumPy array to within a certain range?'], 3], [(1735025, 2), [['is marginally faster than '], ['Since we are using basic numpy methods here, I think this is about as efficient a solution in numpy as can be.']], [[' image /= image.max()/255.0    # Uses 1+image.size divisions\n']], ['How to normalize a NumPy array to within a certain range?'], 3], [(1735395, 0), [['In  A.py :'], ['In  B.py :']], [[' a = 2\nprint "A.a:", a\nimport B\nprint "B.b:", B.b\nfrom B import *\nprint "b in our namespace:", b\n']], ['passing value to other module python'], 5], [(1735395, 1), [['In  B.py :'], ['This will print:']], [[' b = 3\n']], ['passing value to other module python'], 5], [(1735395, 2), [['This will print:'], ['In  B.py :']], [[' A.a: 2\nB.b: 3\nb in our namespace: 3\n']], ['passing value to other module python'], 5], [(1735395, 3), [['In  B.py :'], ["... and run it again, you'll see some weird output with double lines and the desired  a in B's namespace: 2  line (so it's 50% success). The key is that if you are importing simple scripts without functions and/or module/class declaration, whenever Python imports something, the necessary objects and references will be created inside the Python VM and the imported script gets executed, so you can run into troubles with the previously done circular imports. Use modules or classes and you'll be better, because in those only the parts after"]], [[' b = 3\nfrom A import *\nprint "a in B\'s namespace:", a\n']], ['passing value to other module python'], 5], [(1735395, 4), [["... and run it again, you'll see some weird output with double lines and the desired  a in B's namespace: 2  line (so it's 50% success). The key is that if you are importing simple scripts without functions and/or module/class declaration, whenever Python imports something, the necessary objects and references will be created inside the Python VM and the imported script gets executed, so you can run into troubles with the previously done circular imports. Use modules or classes and you'll be better, because in those only the parts after"], ['will be executed on import.']], [[' if __name__ == "__main__":\n  ...\n']], ['passing value to other module python'], 5], [(1735561, 0), [['I found shuffle can be abused into solving this'], ['The distribution is not uniform however this was not a requirement.']], [[' from random import shuffle\nL = ["Anne", "Beth", "Cath", "Dave", "Emma"]\nshuffle(L, int=lambda n: int(n - 1))\nprint L\n']], ['oneliner scramble program'], 6], [(1735561, 1), [['The distribution is not uniform however this was not a requirement.'], ['For a uniform distribution, this (longer) version can be used']], [[" #For 100,000 samples\n\n(('Beth', 'Cath', 'Dave', 'Emma', 'Anne'), 13417)\n(('Beth', 'Cath', 'Emma', 'Anne', 'Dave'), 6572)\n(('Beth', 'Dave', 'Anne', 'Emma', 'Cath'), 3417)\n(('Beth', 'Dave', 'Emma', 'Cath', 'Anne'), 6581)\n(('Beth', 'Emma', 'Anne', 'Cath', 'Dave'), 3364)\n(('Beth', 'Emma', 'Dave', 'Anne', 'Cath'), 6635)\n(('Cath', 'Anne', 'Dave', 'Emma', 'Beth'), 1703)\n(('Cath', 'Anne', 'Emma', 'Beth', 'Dave'), 1705)\n(('Cath', 'Dave', 'Beth', 'Emma', 'Anne'), 6583)\n(('Cath', 'Dave', 'Emma', 'Anne', 'Beth'), 3286)\n(('Cath', 'Emma', 'Beth', 'Anne', 'Dave'), 3325)\n(('Cath', 'Emma', 'Dave', 'Beth', 'Anne'), 3421)\n(('Dave', 'Anne', 'Beth', 'Emma', 'Cath'), 1653)\n(('Dave', 'Anne', 'Emma', 'Cath', 'Beth'), 1664)\n(('Dave', 'Cath', 'Anne', 'Emma', 'Beth'), 3349)\n(('Dave', 'Cath', 'Emma', 'Beth', 'Anne'), 6727)\n(('Dave', 'Emma', 'Anne', 'Beth', 'Cath'), 3319)\n(('Dave', 'Emma', 'Beth', 'Cath', 'Anne'), 3323)\n(('Emma', 'Anne', 'Beth', 'Cath', 'Dave'), 1682)\n(('Emma', 'Anne', 'Dave', 'Beth', 'Cath'), 1656)\n(('Emma', 'Cath', 'Anne', 'Beth', 'Dave'), 3276)\n(('Emma', 'Cath', 'Dave', 'Anne', 'Beth'), 6638)\n(('Emma', 'Dave', 'Anne', 'Cath', 'Beth'), 3358)\n(('Emma', 'Dave', 'Beth', 'Anne', 'Cath'), 3346)\n"]], ['oneliner scramble program'], 6], [(1735561, 2), [['For a uniform distribution, this (longer) version can be used'], ['Here is the code for  random.shuffle()']], [[' from random import shuffle,randint\nL=["Anne", "Beth", "Cath", "Dave", "Emma"]\nshuffle(L, random=lambda: 1, int=lambda n: randint(0, n - 2))\nprint L\n\n# For 100,000 samples\n\n((\'Beth\', \'Cath\', \'Dave\', \'Emma\', \'Anne\'), 4157)\n((\'Beth\', \'Cath\', \'Emma\', \'Anne\', \'Dave\'), 4155)\n((\'Beth\', \'Dave\', \'Anne\', \'Emma\', \'Cath\'), 4099)\n((\'Beth\', \'Dave\', \'Emma\', \'Cath\', \'Anne\'), 4141)\n((\'Beth\', \'Emma\', \'Anne\', \'Cath\', \'Dave\'), 4243)\n((\'Beth\', \'Emma\', \'Dave\', \'Anne\', \'Cath\'), 4208)\n((\'Cath\', \'Anne\', \'Dave\', \'Emma\', \'Beth\'), 4219)\n((\'Cath\', \'Anne\', \'Emma\', \'Beth\', \'Dave\'), 4087)\n((\'Cath\', \'Dave\', \'Beth\', \'Emma\', \'Anne\'), 4117)\n((\'Cath\', \'Dave\', \'Emma\', \'Anne\', \'Beth\'), 4127)\n((\'Cath\', \'Emma\', \'Beth\', \'Anne\', \'Dave\'), 4198)\n((\'Cath\', \'Emma\', \'Dave\', \'Beth\', \'Anne\'), 4210)\n((\'Dave\', \'Anne\', \'Beth\', \'Emma\', \'Cath\'), 4179)\n((\'Dave\', \'Anne\', \'Emma\', \'Cath\', \'Beth\'), 4119)\n((\'Dave\', \'Cath\', \'Anne\', \'Emma\', \'Beth\'), 4143)\n((\'Dave\', \'Cath\', \'Emma\', \'Beth\', \'Anne\'), 4203)\n((\'Dave\', \'Emma\', \'Anne\', \'Beth\', \'Cath\'), 4252)\n((\'Dave\', \'Emma\', \'Beth\', \'Cath\', \'Anne\'), 4159)\n((\'Emma\', \'Anne\', \'Beth\', \'Cath\', \'Dave\'), 4193)\n((\'Emma\', \'Anne\', \'Dave\', \'Beth\', \'Cath\'), 4177)\n((\'Emma\', \'Cath\', \'Anne\', \'Beth\', \'Dave\'), 4087)\n((\'Emma\', \'Cath\', \'Dave\', \'Anne\', \'Beth\'), 4150)\n((\'Emma\', \'Dave\', \'Anne\', \'Cath\', \'Beth\'), 4268)\n((\'Emma\', \'Dave\', \'Beth\', \'Anne\', \'Cath\'), 4109)\n']], ['oneliner scramble program'], 6], [(1735561, 3), [['Here is the code for  random.shuffle()'], ['The first(non uniform) effectively makes the line work like this']], [[' def shuffle(self, x, random=None, int=int):\n    """x, random=random.random -> shuffle list x in place; return None.\n\n    Optional arg random is a 0-argument function returning a random\n    float in [0.0, 1.0); by default, the standard random.random.\n    """\n\n    if random is None:\n        random = self.random\n    for i in reversed(xrange(1, len(x))):\n        # pick an element in x[:i+1] with which to exchange x[i]\n        j = int(random() * (i+1))\n        x[i], x[j] = x[j], x[i]\n']], ['oneliner scramble program'], 6], [(1735561, 4), [['The first(non uniform) effectively makes the line work like this'], ['The second solution replaces  random()  with a function that always returns 1, and uses  randint  instead of  int . So the line now works like this']], [[' j = int(random() * (i + 1) - 1)\n']], ['oneliner scramble program'], 6], [(1735561, 5), [['The second solution replaces  random()  with a function that always returns 1, and uses  randint  instead of  int . So the line now works like this'], ['-10000']], [[' j = randint(0, i - 1)\n']], ['oneliner scramble program'], 6], [(1736394, 0), [["Create the .tlb file. You'll probably need the Windows SDK, or get an IDL compiler from somewhere else."], ['Load the .tlb (you need the Win32 Extensions for Python,  http://python.net/crew/skippy/win32/Downloads.html ):']], [[' midl TaskbarLib.idl /tlb TaskbarLib.tlb\n']], ['Using Windows 7 taskbar features in PyQt'], 4], [(1736394, 1), [['Load the .tlb (you need the Win32 Extensions for Python,  http://python.net/crew/skippy/win32/Downloads.html ):'], ['Create the TaskbarList object. The function for setting the progress bar is in the interface ITaskbarList3:']], [[' import comtypes.client as cc\ncc.GetModule("TaskbarLib.tlb")\n']], ['Using Windows 7 taskbar features in PyQt'], 4], [(1736394, 2), [['Create the TaskbarList object. The function for setting the progress bar is in the interface ITaskbarList3:'], ['Now you can call the API functions:']], [[' import comtypes.gen.TaskbarLib as tbl\ntaskbar = cc.CreateObject(\n    "{56FDF344-FD6D-11d0-958A-006097C9A090}",\n    interface=tbl.ITaskbarList3)\n']], ['Using Windows 7 taskbar features in PyQt'], 4], [(1736394, 3), [['Now you can call the API functions:'], ["Here's a  complete example script .\nSources:\n     1 \n 2"]], [[' taskbar.HrInit()\ntaskbar.SetProgressValue(self.winId(),40,100)\n']], ['Using Windows 7 taskbar features in PyQt'], 4], [(1737782, 0), [["Strings are immutable, you can't change them. You have to make a new string from parts of the old one:"], ["although depending one what you're doing there may be a more appropriate way of handling it than relying on fixed indices, eg."]], [[" >>> az= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n>>> az= az[:17]+'11'+az[19:]\n>>> az\n'ABCDEFGHIJKLMNOPQ11TUVWXYZ'\n"]], ['change 2 byte in a string'], 2], [(1737782, 1), [["although depending one what you're doing there may be a more appropriate way of handling it than relying on fixed indices, eg."], ['-10000']], [[" >>> 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.replace('RS', '11', 1)\n'ABCDEFGHIJKLMNOPQ11TUVWXYZ'\n"]], ['change 2 byte in a string'], 2], [(1738109, 0), [['This code:'], ['can be thought of working like this:']], [[' for i in range(5):\n    print i\n']], ["How does the Python's range function work?"], 3], [(1738109, 1), [['can be thought of working like this:'], ['I assume that when you say "call a, it gives only 5", you mean like this:']], [[' i = 0\nprint i\ni = 1\nprint i\ni = 2\nprint i\ni = 3\nprint i\ni = 4\nprint i\n']], ["How does the Python's range function work?"], 3], [(1738109, 2), [['I assume that when you say "call a, it gives only 5", you mean like this:'], ['this will print the  last  value that a was given. Every time the loop iterates, the statement  a=i+1  will overwrite the last value  a  had with the new value.']], [[' for i in range(5):\n    a=i+1\nprint a\n']], ["How does the Python's range function work?"], 3], [(1738250, 0), [['memcached  is nice and framework-agnostic, and you just have to write a bit of code to interact with it.  The general idea of memcached is:'], ['This blogger  appears to have implemented them together, and has helpfully provided a link to the code he uses.  The relevant code appears to be this, which might make sense to you:']], [[' object = try_memcached()\nif not object:\n    object = real_query()\n    put_in_memcached(object)\n']], ['Pylons and Memcached'], 3], [(1738250, 1), [['This blogger  appears to have implemented them together, and has helpfully provided a link to the code he uses.  The relevant code appears to be this, which might make sense to you:'], ['Not sure if that helps, but there you have it.  You can see that  memcached  idiom in use:']], [[' #!/usr/bin/python\n"""\nmemcached objects for use with SQLAlchemy\n"""\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU General Public License as published by\n#    the Free Software Foundation, either version 3 of the License, or\n#    (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport memcache\nimport sqlalchemy\nimport sqlalchemy.orm\n\nSQLA_SESSION = sqlalchemy.orm.sessionmaker()\n\nMEMCACHED_CLIENT = memcache.Client([\'127.0.0.1:11211\'])\n\nclass DetachedORMObject(object):\n    """\n    Session-detached object for use with ORM Mapping.  As the SQLAlchemy\n    documentation indicates, creating and closing a session is not analogous\n    to creating and closing a database connection.  Connections are pooled by\n    the database engine by default.  Creating new sessions is of a minimal\n    cost.  Also, objects using this wrapper will not likely interact in with\n    the database through the full power of SQLAlchemy queries.\n\n    """\n    @classmethod\n    def fetch_by_field(cls, field, value):\n        """Fetch a mapped orm object with the give field and value"""\n        session = SQLA_SESSION()\n        try:\n            class_object = session.query(cls).filter(field == value).one()\n        except sqlalchemy.orm.exc.NoResultFound:\n            class_object = None\n        finally:\n            session.close()\n        return class_object\n\n    def update(self):\n        """Update the database with the values of the object"""\n        session = SQLA_SESSION()\n        session.add(self)\n        session.commit()\n        session.refresh(self)\n        session.close()\n\n    def refresh(self):\n        """Refresh the object with the values of the database"""\n        session = SQLA_SESSION()\n        session.add(self)\n        session.refresh(self)\n        session.close()\n\n    def delete(self):\n        """Delete the object from the database"""\n        session = SQLA_SESSION()\n        session.add(self)\n        session.delete(self)\n        session.commit()\n        session.close()\n\n\nclass MemcachedObject(object):\n    """\n    Object Wrapper for serializing objects in memcached. Utilizes an abstract\n    method, get_isntance_key, to understand how to get and set objects that\n    impliment this class.\n    """\n    @classmethod\n    def get_cached_instance(cls, instance_key):\n        """Retrieve and return the object matching the instance_key"""\n        key = str(cls.__module__ + \'.\' + cls.__name__ + \':\' \\\n           + str(instance_key))\n        print "Memcached Getting:", key\n        return MEMCACHED_CLIENT.get(key)\n\n    def set_cached_instance(self, time=0, min_compress_len=0):\n        """Set the cached instance of an object"""\n        print "Memcached Setting:", self.get_cache_key()\n        return MEMCACHED_CLIENT.set(self.get_cache_key(), self, time, \\\n            min_compress_len)\n\n    def delete_cached_instance(self, time=0):\n        """Wrapper for the memcached delete method"""\n        print "Memcached Deleting:", self.get_cache_key()\n        return MEMCACHED_CLIENT.delete(self.get_cache_key(), time)\n\n    def get_cache_key(self):\n        """Prepends the full class path of the object to the instance key"""\n        return self.__class__.__module__ + \'.\' + \\\n            self.__class__.__name__ + \':\' + self.get_instance_key()\n\n    def get_instance_key(self):\n        """Get the instance key, must be implemented by child objects"""\n        raise NotImplementedError \\\n            ("\'GetInstanceKey\' method has not been defined.")\n\n\nclass MemcachedORMObject(DetachedORMObject, MemcachedObject):\n    """\n    Putting it all together now.  Implements both of the above classes. Worth\n    noting is the method for checking to see if the fetch_by_field method is\n    invoked using a primary key of the class.  The same technique is used to\n    generate an instance key for an instance of the class.\n    """\n    @classmethod\n    def fetch_by_field(cls, field, value):\n        """Fetch the requested object from the cache and database"""\n        orm_object = None\n        matched_primary_key = True\n        for key in cls._sa_class_manager.mapper.primary_key:\n            if field.key != key.key:\n                matched_primary_key = False\n        if matched_primary_key:\n            orm_object = cls.get_cached_instance(\'(\' + str(value) + \')\')\n        if orm_object is None:\n            orm_object = super(MemcachedORMObject, cls). \\\n                fetch_by_field(field, value)\n            if orm_object is not None:\n                orm_object.set_cached_instance()\n        return orm_object\n\n    def update(self):\n        """Update the object in the database and memcached"""\n        DetachedORMObject.update(self)\n        self.set_cached_instance()\n\n    def refresh(self):\n        """Refresh the object from the database and memcached"""\n        DetachedORMObject.refresh(self)\n        self.set_cached_instance()\n\n    def delete(self):\n        """Delete the object from the database and memcached"""\n        DetachedORMObject.delete(self)\n        self.delete_cached_instance()\n\n    def get_instance_key(self):\n        """Get the instance key, implimenting abstract method in base"""\n        key = []\n        for column in self._sa_instance_state.manager.mapper.primary_key:\n            key.append(\'(\' + str(getattr(self, column.key)) + \')\')\n        return \'\'.join(key)\n']], ['Pylons and Memcached'], 3], [(1738250, 2), [['Not sure if that helps, but there you have it.  You can see that  memcached  idiom in use:'], ['-10000']], [["     if matched_primary_key:\n        orm_object = cls.get_cached_instance('(' + str(value) + ')')\n    if orm_object is None:\n        orm_object = super(MemcachedORMObject, cls). \\\n            fetch_by_field(field, value)\n"]], ['Pylons and Memcached'], 3], [(1738633, 0), [['Probably the most efficient way to do it, if the string is long enough:'], ['This is making use of the  translate  and  maketrans  methods. You can also move the translate table creation outside the function:']], [[" import string\n\ndef complementary_strand(self, strand):\n    return strand.translate(string.maketrans('TAGCtagc', 'ATCGATCG'))\n"]], ['More pythonic way to find a complementary DNA strand'], 2], [(1738633, 1), [['This is making use of the  translate  and  maketrans  methods. You can also move the translate table creation outside the function:'], ['-10000']], [[" import string\ndef __init__(self, ...):\n    self.trans = string.maketrans('TAGCtagc', 'ATCGATCG')\n\ndef complementary_strand(self, strand):\n    return strand.translate(self.trans)\n"]], ['More pythonic way to find a complementary DNA strand'], 2], [(1739514, 0), [['Yep,  _  is a traditional name for "don\'t care" (which unfortunately clashes with its use in I18N, but that\'s a separate issue;-).  BTW, in today\'s Python, instead of:'], ['you might code']], [[' _,s = min( (len( values[s]), s) \n            for s in squares \n            if len(values[s]) > 1\n        )\n']], ['Underscore _ as variable name in Python'], 2], [(1739514, 1), [['you might code'], ['(not sure what release of Python Peter was writing for, but the idiom he\'s using is an example of "decorate-sort-undecorate" [[DSU]] except with min instead of sort, and in today\'s Python the  key=  optional parameter is generally the best way to do DSU;-).']], [[' s = min((s for s in squares if len(values[s])>1), \n        key=lambda s: len(values[s]))\n']], ['Underscore _ as variable name in Python'], 2], [(1739566, 0), [['Without knowing what  Body  is, this is my solution:'], ['or, if the output has to encapsulated in a cell array:']], [[' bodies = cellfun(@(tuple)Body(tuple{1},tuple{2}), coords);\n']], ['How to translate python tuple unpacking to Matlab?'], 3], [(1739566, 1), [['or, if the output has to encapsulated in a cell array:'], ['And just for testing, I tried it with the following:']], [[" bodies = cellfun(@(tuple)Body(tuple{1},tuple{2}), coords, 'UniformOutput',false);\n"]], ['How to translate python tuple unpacking to Matlab?'], 3], [(1739566, 2), [['And just for testing, I tried it with the following:'], ['-10000']], [[" X1 = @(t) cos(t);\nY1 = @(t) sin(t);\nX2 = @(t) cos(t) + 1;\nY2 = @(t) sin(t) + 1;\n\ncoords = {{X1,Y1}, {X2,Y2}};\n\n%# function that returns a struct (like a constructor)\nBody = @(X,Y) struct('x',X, 'y',Y);\n\n%# tuples unpacking\nbodies = cellfun(@(tuple)Body(tuple{1},tuple{2}), coords);\n\n%# bodies is an array of structs\nbodies(1)\nbodies(2)\n"]], ['How to translate python tuple unpacking to Matlab?'], 3], [(1742236, 0), [["Here's a pyparsing solution:"], ['Prints:']], [[' from pyparsing import QuotedString, Group, delimitedList, OneOrMore\n\n# a row of headings or data is a list of quoted strings, delimited by \';\'s\nqs = QuotedString(\'"\')\ndatarow = Group(delimitedList(qs, \';\'))\n\n# an entire data set is a single data row containing the headings, followed by\n# one or more data rows containing the data\ndataset_parser = datarow("headings") + OneOrMore(datarow)("rows")\n\n# parse the returned response\ndata = dataset_parser.parseString(response)\n\n# create dict by zipping headings with each row\'s data values\ndatadict = [dict(zip(data.headings, row)) for row in data.rows]\n\nprint datadict\n']], ['I am getting this sort of CSV data while making Http request to the CSV file. Very malformed string'], 2], [(1742236, 1), [['Prints:'], ['This will also handle the case if the quoted strings contain embedded semicolons.']], [[" [{'End Date': '16/11/2009', 'Description': '', 'All day event': 'false', \n  'Start Time': '10:00 PM', 'End Time': '11:00 PM', 'Start Date': '16/11/2009', \n  'Subject': 'Play football'}, \n {'End Date': '20/11/2009', 'Description': '', 'All day event': 'false', \n  'Start Time': '07:00 PM', 'End Time': '08:00 PM', 'Start Date': '20/11/2009', \n  'Subject': 'Watch 2012'}]\n"]], ['I am getting this sort of CSV data while making Http request to the CSV file. Very malformed string'], 2], [(1742937, 0), [['Using  %f  format specifier:'], ['Using  round()  function:']], [[" ('%.2f' % (value,)).rstrip('0').rstrip('.')\n"]], ['Convert float to string with cutting zero decimals afer point in Python'], 2], [(1742937, 1), [['Using  round()  function:'], ['-10000']], [[" str(round(value)).rstrip('0').rstrip('.')\n"]], ['Convert float to string with cutting zero decimals afer point in Python'], 2], [(1744989, 0), [['In the simplest terms:'], ['When you need to close the file, you can do this:']], [[' import sys\n# parse command line\nif file_name_given:\n    inf = open(file_name_given)\nelse:\n    inf = sys.stdin\n']], ['Read from File, or STDIN'], 2], [(1744989, 1), [['When you need to close the file, you can do this:'], ["However, in most cases it will be harmless to close  sys.stdin  if you're done with it."]], [[' if inf is not sys.stdin:\n    inf.close()\n']], ['Read from File, or STDIN'], 2], [(1745524, 0), [['The first part can for the most part be done by  ElementTree , but it takes a few more steps:'], ["The second part can be completed by creating Element objects, but you'd need to do some of your own work to make it happen the way you really want:"]], [[' >>> import xml.etree.ElementTree as ET\n>>> html = ET.XML(\'<html><head><title>Hi</title></head><body></body></html>\')\n>>> html.head = html.find(\'head\')\n>>> html.head.append(ET.XML(\'<link type="text/css" href="main.css" rel="stylesheet" />\'))\n>>> html.head.title = html.head.find(\'title\')\n>>> html.head.title.text\n\'Hi\'\n']], ["What's the most Pythonic XHTML/HTML parser/generator/template module that supports DOM like access?"], 4], [(1745524, 1), [["The second part can be completed by creating Element objects, but you'd need to do some of your own work to make it happen the way you really want:"], ['You could create a  stylesheet  function of your own:']], [[' >>> html.body = html.find(\'body\')\n>>> my_h1 = ET.Element(\'h1\', {\'class\': \'roflol\'})\n>>> my_h1.text = \'BIG TITLE!12\'\n>>> html.body.append(my_h1)\n>>> html.body.SOURCE = ET.tostring(html.body)\n>>> html.body.SOURCE\n\'<body><h1 class="roflol">BIG TITLE!12</h1></body>\'\n']], ["What's the most Pythonic XHTML/HTML parser/generator/template module that supports DOM like access?"], 4], [(1745524, 2), [['You could create a  stylesheet  function of your own:'], ['And the whole document:']], [[' >>> def stylesheet(href=\'\', type=\'text/css\', rel=\'stylesheet\', **kwargs):\n...     elem = ET.Element(\'link\', href=href, type=type, rel=rel) \n...     return elem\n... \n>>> html.head.append(stylesheet(href="main.css"))\n']], ["What's the most Pythonic XHTML/HTML parser/generator/template module that supports DOM like access?"], 4], [(1745524, 3), [['And the whole document:'], ["But, I think if you're going to end up writing your own thing, this is a good place to start.  ElementTree is very powerful."]], [[' >>> ET.tostring(html)\n<html><head><title>Hi</title><link href="main.css" rel="stylesheet" type="text/css" /></head><body><h1 class="roflol">BIG TITLE!12</h1></body></html>\n']], ["What's the most Pythonic XHTML/HTML parser/generator/template module that supports DOM like access?"], 4], [(1746116, 0), [['-10000'], ["Why did I use  expandtabs() ? \nWell it's fast"]], [[' TABWIDTH=8\ndef my_len(s):\n    return len(s.expandtabs(TABWIDTH))\n\ndef pad_with_tabs(s,maxlen):\n    return s+"\\t"*((maxlen-len(s)-1)/TABWIDTH+1)\n']], ['Python tabstop-aware len() and padding functions'], 3], [(1746116, 1), [["Why did I use  expandtabs() ? \nWell it's fast"], ['Anything that iterates over your string is going to be slower, because just the iteration is ~4 times slower than  expandtabs  even when you do nothing in the loop.']], [[' $ python -m timeit \'"Bear\\tnecessities\\t".expandtabs()\'\n1000000 loops, best of 3: 0.602 usec per loop\n$ python -m timeit \'for c in "Bear\\tnecessities\\t":pass\'\n100000 loops, best of 3: 2.32 usec per loop\n$ python -m timeit \'[c for c in "Bear\\tnecessities\\t"]\'\n100000 loops, best of 3: 4.17 usec per loop\n$ python -m timeit \'map(None,"Bear\\tnecessities\\t")\'\n100000 loops, best of 3: 2.25 usec per loop\n']], ['Python tabstop-aware len() and padding functions'], 3], [(1746116, 2), [['Anything that iterates over your string is going to be slower, because just the iteration is ~4 times slower than  expandtabs  even when you do nothing in the loop.'], ["Even just splitting on tabs takes longer. You'd still need to iterate over the split and pad each item to the tabstop"]], [[' $ python -m timeit \'"Bear\\tnecessities\\t".split("\\t")\'\n1000000 loops, best of 3: 0.868 usec per loop\n']], ['Python tabstop-aware len() and padding functions'], 3], [(1746167, 0), [['-10000'], ["A colon must be preceded by at least one digit and followed by at least two digits: then it's a time. All other colons will be considered textual colons. "]], [[" # this: D:DD, DD:DDam/pm 12/24 hr\nre = r':(?=..(?<!\\d:\\d\\d))|[^a-zA-Z0-9 ](?<!:)'\n"]], ['Regex, how to remove all non-alphanumeric except colon in a 12/24 hour timestamp?'], 4], [(1746167, 1), [["A colon must be preceded by at least one digit and followed by at least two digits: then it's a time. All other colons will be considered textual colons. "], ['Then when applied to this silly text:']], [["How it works :              // match a colon\n(?=..          // match but not capture two chars\n  (?<!         // start a negative look-behind group (if it matches, the whole fails)\n    \\d:\\d\\d    // time stamp\n  )            // end neg. look behind\n)              // end non-capture two chars\n|              // or\n[^a-zA-Z0-9 ]  // match anything not digits or letters\n(?<!:)         // that isn't a colon\n"]], ['Regex, how to remove all non-alphanumeric except colon in a 12/24 hour timestamp?'], 4], [(1746167, 2), [['Then when applied to this silly text:'], ['...changes it into:']], [[' Today, 3:30pm - Group 1,2,3 Meeting to di4sc::uss3: 2:3:4 "big idea" on 03:33pm or 16:47 is also good\n']], ['Regex, how to remove all non-alphanumeric except colon in a 12/24 hour timestamp?'], 4], [(1746167, 3), [['...changes it into:'], ['-10000']], [[' Today, 3:30pm  Group 123 Meeting to di4scuss3 234 big idea on 03:33pm or 16:47 is also good\n']], ['Regex, how to remove all non-alphanumeric except colon in a 12/24 hour timestamp?'], 4], [(1747130, 0), [['-10000'], ['Example:']], [[' def sumdiv7(limit):\n    for i in range(limit):\n        result = sum(range(i*7)) / 7\n        print "For", i, ", sumdiv = ", result\n']], ['Sum and Division example (Python)'], 2], [(1747130, 1), [['Example:'], ['The trick is very simple, you want to sum multiples of 7,']], [[' >>> sumdiv7(4)\nFor 0 , sumdiv =  0\nFor 1 , sumdiv =  3\nFor 2 , sumdiv =  13\nFor 3 , sumdiv =  30\n']], ['Sum and Division example (Python)'], 2], [(1747713, 0), [['-10000'], ['There is also a divmod function to calculate both together:']], [[' r = (a % d)\ni = (a / d)\n']], ['More efficient method for this calculation?'], 2], [(1747713, 1), [['There is also a divmod function to calculate both together:'], ['-10000']], [[' i, r = divmod(a,d)\n']], ['More efficient method for this calculation?'], 2], [(1747817, 0), [['In Python 2.6 and earlier, the dict constructor can receive an iterable of key/value pairs:'], ['From Python 2.7 and 3 onwards, you can just use the  dict comprehension syntax  directly:']], [[' d = dict((key, value) for (key, value) in iterable)\n']], ['Create a dictionary with list comprehension in Python'], 3], [(1747817, 1), [['From Python 2.7 and 3 onwards, you can just use the  dict comprehension syntax  directly:'], ['Of course, you can use the iterable in any way you want (tuples and lists literals, generator comprehensions, list comprehensions, generator functions, functional composition... feel creative) as long as each element is an iterable itself of two elements:']], [[' d = {key: value for (key, value) in iterable}\n']], ['Create a dictionary with list comprehension in Python'], 3], [(1747817, 2), [['Of course, you can use the iterable in any way you want (tuples and lists literals, generator comprehensions, list comprehensions, generator functions, functional composition... feel creative) as long as each element is an iterable itself of two elements:'], ['-10000']], [[' d = {value: foo(value) for value in sequence if bar(value)}\n\ndef key_value_gen(k):\n   yield chr(k+65)\n   yield chr((k+13)%26+65)\nd = dict(map(key_value_gen, range(26)))\n']], ['Create a dictionary with list comprehension in Python'], 3], [(1748130, 0), [["SQL doesn't have a way to ask for every tenth, so ORMs won't typically give you a way to express that need.  You could do that work in Python:"], ['This will pull all the samples from the database in one query, then only use 10% of them.  You could also pull only the ones you need, one to a query:']], [[' samples = list(Weather.objects.filter().exclude(time__lt=commence).exclude(time__gt=cease))\nfor s10 in samples[::10]:\n    # do something with every tenth...\n']], ['Scheduling Filter on Database with Time Interval'], 3], [(1748130, 1), [['This will pull all the samples from the database in one query, then only use 10% of them.  You could also pull only the ones you need, one to a query:'], ['To elaborate:   range  takes three arguments, start, stop, and step.  For example:']], [[' sample_count = 600 # Somehow determine how many samples are in your time window.\nsamples = Weather.objects.filter().exclude(time__lt=commence).exclude(time__gt=cease)\nfor s_num in range(0, sample_count, 10):\n    s = samples[s_num]\n    # Now you have one sample in s.\n']], ['Scheduling Filter on Database with Time Interval'], 3], [(1748130, 2), [['To elaborate:   range  takes three arguments, start, stop, and step.  For example:'], ['In the second example, the range expression is used to create the index values of the samples we want.  Then  samples[s_num]  evaluates the QuerySet to get just that one value from the database.']], [[' >>> range(0, 100, 10)\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n']], ['Scheduling Filter on Database with Time Interval'], 3], [(1749827, 0), [['A logically cleaner approach is to first split your string into the 2-digits pieces, thus making your unspoken assumption clear and explicit instead:'], ["Now locate all the '00' digits:"]], [[' >>> string = "4100360036000000570046004200410061006200730020003600"\n>>> pieces = [string[i:i+2] for i in range(0, len(string), 2)]\n>>> pieces\n[\'41\', \'00\', \'36\', \'00\', \'36\', \'00\', \'00\', \'00\', \'57\', \'00\', \'46\', \'00\', \'42\', \'00\', \'41\', \'00\', \'61\', \'00\', \'62\', \'00\', \'73\', \'00\', \'20\', \'00\', \'36\', \'00\']\n>>> \n']], ['replace or remove one null (python)'], 3], [(1749827, 1), [["Now locate all the '00' digits:"], ["Now get a random choice out of the where0s and either remove it, or replace it with, for example, 'BA', then rejoin the string:"]], [[" >>> where0s = [i for i in range(len(pieces)) if pieces[i] == '00']\n>>> where0s\n[1, 3, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\n"]], ['replace or remove one null (python)'], 3], [(1749827, 2), [["Now get a random choice out of the where0s and either remove it, or replace it with, for example, 'BA', then rejoin the string:"], ['If this is indeed the exact operation you want to perform, but you want more conciseness and speed rather than this totally-spelled-out clarity, we can of course keep developing the idea!']], [[" >>> import random\n>>> pickone = random.choice(where0s)\n>>> pickone\n25\n>>> # if replacing:\n... \n>>> pieces[pickone] = 'BA'\n>>> ''.join(pieces)\n'41003600360000005700460042004100610062007300200036BA'\n>>> # if removing:\n... \n>>> del pieces[pickone]\n>>> ''.join(pieces)\n'41003600360000005700460042004100610062007300200036'\n>>> \n"]], ['replace or remove one null (python)'], 3], [(1750480, 0), [['Excellent approach (net of some oversimplification in your skeleton code).  Since you ask for an example:'], ["I've made it loop 7 times just to show that each choice is indeed random, i.e., a typical output might be something like:"]], [[' import random\n\ndef main():\n  def process(data):\n     return data + [0]\n  def process1(data):\n     return data + [9]\n  def process2(data):\n     return data + [7]\n  def run(data):\n     test = random.choice([process,process1,process2])\n     print test(data)\n  for i in range(7):\n    run([1, 2, 3])\n\nmain()\n']], ['use random functions (python)'], 2], [(1750480, 1), [["I've made it loop 7 times just to show that each choice is indeed random, i.e., a typical output might be something like:"], ['(changing randomly each and every time, of course;-).']], [[' [1, 2, 3, 7]\n[1, 2, 3, 0]\n[1, 2, 3, 0]\n[1, 2, 3, 7]\n[1, 2, 3, 0]\n[1, 2, 3, 9]\n[1, 2, 3, 9]\n']], ['use random functions (python)'], 2], [(1750803, 0), [["First, you must ping the target.  That will place the target -- as long as it's within your netmask, which it sounds like in this situation it will be -- in your system's ARP cache.  Observe:"], ["Knowing that, you do a little subprocess magic -- otherwise you're writing ARP cache checking code yourself, and you don't want to do that:"]], [[' 13:40 jsmith@undertow% ping 97.107.138.15\nPING 97.107.138.15 (97.107.138.15) 56(84) bytes of data.\n64 bytes from 97.107.138.15: icmp_seq=1 ttl=64 time=1.25 ms\n^C\n\n13:40 jsmith@undertow% arp -n 97.107.138.15\nAddress                  HWtype  HWaddress           Flags Mask            Iface\n97.107.138.15            ether   fe:fd:61:6b:8a:0f   C                     eth0\n']], ['Obtain MAC Address from Devices using Python'], 2], [(1750803, 1), [["Knowing that, you do a little subprocess magic -- otherwise you're writing ARP cache checking code yourself, and you don't want to do that:"], ['-10000']], [[' >>> from subprocess import Popen, PIPE\n>>> IP = "1.2.3.4"\n\n>>> # do_ping(IP)\n>>> # The time between ping and arp check must be small, as ARP may not cache long\n\n>>> pid = Popen(["arp", "-n", IP], stdout=PIPE)\n>>> s = pid.communicate()[0]\n>>> mac = re.search(r"(([a-f\\d]{1,2}\\:){5}[a-f\\d]{1,2})", s).groups()[0]\n>>> mac\n"fe:fd:61:6b:8a:0f"\n']], ['Obtain MAC Address from Devices using Python'], 2], [(1752090, 0), [['Essentially, you want something like this:'], ['where MyMessageView can be something as simple as']], [[' def publishTraverse(self, request, name):\n    if name in self.context:\n        return MyMessageView(self.context[name], request)\n\n    # fall back to views such as index.html\n    view = queryMultiAdapter((self.context, request), name=name)\n    if view is not None:\n        return view\n\n    # give up and return a 404 Not Found error page\n    raise NotFound(self.context, name, request)\n']], ['Custom traversal and page templates'], 2], [(1752090, 1), [['where MyMessageView can be something as simple as'], ["Disclaimer: I'm not sure if the view you instantiate directly will be protected by a security wrapper; make sure your functional tests ensure anonymous users can't view messages if that's what you want."]], [[" class MyMessageView(BrowserPage):\n    __call__ = ViewPageTemplateFile('read.pt')\n"]], ['Custom traversal and page templates'], 2], [(1752283, 0), [['You can always inspect an object using  dir ; that will show you which attributes it has.'], ["Likewise, you can invoke  help , which will show an object's documentation, if it has a  __doc__  attribute. As you can see, this is the case for  res , so try:"]], [[' >>> import httplib\n>>> conn = httplib.HTTPConnection("www.google.nl")\n>>> conn.request("HEAD", "/index.html")\n>>> res = conn.getresponse()\n>>> dir(res)\n[\'__doc__\', \'__init__\', \'__module__\', \'_check_close\', \'_method\', \'_read_chunked\', \'_read_status\', \'_safe_read\', \'begin\', \'chunk_left\', \'chunked\', \'close\', \'debuglevel\', \'fp\', \'getheader\', \'getheaders\', \'isclosed\', \'length\', \'msg\', \'read\', \'reason\', \'status\', \'strict\', \'version\', \'will_close\']\n']], ['In Python, what does getresponse() return?'], 2], [(1752283, 1), [["Likewise, you can invoke  help , which will show an object's documentation, if it has a  __doc__  attribute. As you can see, this is the case for  res , so try:"], ['Other than that, the documentation states that  getresponse  returns an  HTTPResponse  object. Thus, as you can read there (and in  help(res) ), the following properties and methods are defined on  HTTPResponse  objects:']], [[' >>> help(res)\n']], ['In Python, what does getresponse() return?'], 2], [(1752317, 0), [["edit: \nSorry, I haven't done this in a while:  "], ['For example:']], [[' import urllib\nurllib.urlopen(url).geturl()\n']], ['How to get the true URL of a file on the web. (Python)'], 2], [(1752317, 1), [['For example:'], ['-10000']], [[' >>> f = urllib2.urlopen("http://tinyurl.com/oex2e")\n>>> f.geturl()\n\'http://www.amazon.com/All-Creatures-Great-Small-Collection/dp/B00006G8FI\'\n>>> \n']], ['How to get the true URL of a file on the web. (Python)'], 2], [(1752662, 0), [["I've used this:"], ['So...']], [[" def textOf(soup):\n    return u''.join(soup.findAll(text=True))\n"]], ['BeautifulSoup - easy way to to obtain HTML-free contents'], 2], [(1752662, 1), [['So...'], ['-10000']], [[" texts = [textOf(n) for n in soup.findAll('a', href=re.compile('^notizia.php\\?idn=\\d+'))]\n"]], ['BeautifulSoup - easy way to to obtain HTML-free contents'], 2], [(1754781, 0), [['it fits nicely as a generator, too:'], ['used as:']], [[' def timeseq(start,stop,interval):\n    while start <= stop:\n        yield start\n        start += interval\n']], ['Get Intervals Between Two Times'], 3], [(1754781, 1), [['used as:'], ['or:']], [[' for t in timeseq(start,stop,interval):\n    table.objects.filter(t)\n']], ['Get Intervals Between Two Times'], 3], [(1754781, 2), [['or:'], ['-10000']], [[' data = [table.objects.filter(t) for t in timeseq(start,stop,interval)]\n']], ['Get Intervals Between Two Times'], 3], [(1757698, 0), [['If your sets are stored in s, for example:'], ['Then you can use  itertools.combinations  to take them two by two, and calculate the intersection (note that, as Alex pointed out,  combinations  is only available since version 2.6). Here with a list comrehension (just for the sake of the example):']], [[' s = [set([1, 2]), set([1, 3]), set([1, 2, 3]), set([2, 4])]\n']], ['Python: Fast extraction of intersections among all possible 2-combinations in a large number of lists'], 7], [(1757698, 1), [['Then you can use  itertools.combinations  to take them two by two, and calculate the intersection (note that, as Alex pointed out,  combinations  is only available since version 2.6). Here with a list comrehension (just for the sake of the example):'], ['Or, in a loop, which is probably what you need:']], [[' from itertools import combinations\n[ i[0] & i[1] for i in combinations(s,2) ]\n']], ['Python: Fast extraction of intersections among all possible 2-combinations in a large number of lists'], 7], [(1757698, 2), [['Or, in a loop, which is probably what you need:'], ['So, to have the length of each one of them, that "processing" would be:']], [[' for i in combinations(s, 2):\n    inter = i[0] & i[1]\n    # processes the intersection set result "inter"\n']], ['Python: Fast extraction of intersections among all possible 2-combinations in a large number of lists'], 7], [(1757698, 3), [['So, to have the length of each one of them, that "processing" would be:'], ['For example, if each set is made from a function  gen :']], [['     l = len(inter)\n']], ['Python: Fast extraction of intersections among all possible 2-combinations in a large number of lists'], 7], [(1757698, 4), [['For example, if each set is made from a function  gen :'], ['Example with new format:']], [[' def gen(parameter):\n    while more_sets():\n        # ... some code to generate the next set \'x\'\n        yield x\n\nwith open("results", "wt") as f_results:\n    for i in combinations(gen("data"), 2):\n        inter = i[0] & i[1]\n        f_results.write("%d\\n" % len(inter))\n']], ['Python: Fast extraction of intersections among all possible 2-combinations in a large number of lists'], 7], [(1757698, 5), [['Example with new format:'], ['If you are building this list to calculate the combinations anyway, it should be simple to adapt to your new requirements. The main loop becomes:']], [[' s = [(0, set([1, 2])), (1, set([1, 3])), (2, set([1, 2, 3]))]\n']], ['Python: Fast extraction of intersections among all possible 2-combinations in a large number of lists'], 7], [(1757698, 6), [['If you are building this list to calculate the combinations anyway, it should be simple to adapt to your new requirements. The main loop becomes:'], ['In the loop,  i[0]  and  i[1]  would be a tuple  (index, set) , so  i[0][1]  is the first set,  i[0][0]  its index.']], [[' with open("results", "wt") as f_results:\n    for i in combinations(s, 2):\n        inter = i[0][1] & i[1][1]\n        f_results.write("length of %d & %d: %d\\n" % (i[0][0],i[1][0],len(inter))\n']], ['Python: Fast extraction of intersections among all possible 2-combinations in a large number of lists'], 7], [(1758819, 0), [['Sample PYTHONSTARTUP code:'], ['Sample .bashrc code to set your python startup file:']], [[' try:\n  import readline\nexcept ImportError:\n  print "Module readline unavailable."\nelse:\n  import rlcompleter\n  readline.parse_and_bind("tab: complete")\n']], ['python prompt with a bash like interface'], 2], [(1758819, 1), [['Sample .bashrc code to set your python startup file:'], ['-10000']], [[' if [ -f ~/.pythonstartup.py ]\nthen\n  export PYTHONSTARTUP=~/.pythonstartup.py\nfi\n']], ['python prompt with a bash like interface'], 2], [(1759128, 0), [['Your script should work, except that '], ['should be ']], [[' result = unittest.TextTestRunner(verbosity=2).run(suite())\n']], ['What is the right way to organize python unittests into suites?'], 2], [(1759128, 1), [['should be '], ['-10000']], [[' result = unittest.TextTestRunner(verbosity=2).run(suite)\n']], ['What is the right way to organize python unittests into suites?'], 2], [(1760495, 0), [['This is a bit fragile compared to the standard memoization idiom:'], ["or the decorator equivalent.  The standard idiom's also faster (though not by much) -- putting them both in mem.py under names fib1 (the .cache-trick one, without prints and undecorated) and fib2 (my version), we see...:"]], [[' def fib(n, _memo={0:1, 1:1}):\n    if n in _memo:\n        return _memo[n]\n    else:\n        _memo[n] = fib(n-1) + fib(n-2)\n        return _memo[n]\n']], ['Python func_dict used to memoize; other useful tricks?'], 2], [(1760495, 1), [["or the decorator equivalent.  The standard idiom's also faster (though not by much) -- putting them both in mem.py under names fib1 (the .cache-trick one, without prints and undecorated) and fib2 (my version), we see...:"], ["so the standard-idiom version saves about 33% of the time, but that's when almost all calls do actually hit the memoization cache (which is populated after the first one of those million loops) -- fib2's speed advantage is smaller on cache misses, since it comes from the higher speed of accessing  _memo  (a local variable) vs  fib.cache  (a global name, fib, and then an attribute thereof, cache), and cache accesses dominate on cache hits (there's nothing else;-) but there's a little extra work (equal for both functions) on cache misses."]], [[" $ python -mtimeit -s'import mem' 'mem.fib1(20)'\n1000000 loops, best of 3: 0.754 usec per loop\n$ python -mtimeit -s'import mem' 'mem.fib2(20)'\n1000000 loops, best of 3: 0.507 usec per loop\n"]], ['Python func_dict used to memoize; other useful tricks?'], 2], [(1762446, 0), [['So, there are a couple of things you can do. First, you can use\n itertools.chain :'], ['Instead of passing the elements of  mayorPowers  as individual arguments to  chain , you can also use  itertools.chain.from_iterable :']], [[" >>> from itertools import chain\n>>> list(chain(*mayorPowers))\n['germany', 'italy', 'japan', 'russia', 'uk', 'us']\n"]], ["Adding Lists Elements to 'Mega List'"], 5], [(1762446, 1), [['Instead of passing the elements of  mayorPowers  as individual arguments to  chain , you can also use  itertools.chain.from_iterable :'], ['Or you can use  extend :']], [[" >>> list(chain.from_iterable(mayorPowers))\n['germany', 'italy', 'japan', 'russia', 'uk', 'us']\n"]], ["Adding Lists Elements to 'Mega List'"], 5], [(1762446, 2), [['Or you can use  extend :'], ['Or  sum  (I like this one most, I suppose):']], [[" >>> ww2 = []\n>>> for mp in mayorPowers:\n...     ww2.extend(mp)\n...\n>>> ww2\n['germany', 'italy', 'japan', 'russia', 'uk', 'us']\n"]], ["Adding Lists Elements to 'Mega List'"], 5], [(1762446, 3), [['Or  sum  (I like this one most, I suppose):'], ['Or, to be a little crazy (uses  functools.reduce  and  operator.add ),']], [[" >>> sum(mayorPowers, [])\n['germany', 'italy', 'japan', 'russia', 'uk', 'us']\n"]], ["Adding Lists Elements to 'Mega List'"], 5], [(1762446, 4), [['Or, to be a little crazy (uses  functools.reduce  and  operator.add ),'], ['-10000']], [[" >>> from functools import reduce\n>>> from operator import add\n>>> reduce(add, mayorPowers)\n['germany', 'italy', 'japan', 'russia', 'uk', 'us']\n"]], ["Adding Lists Elements to 'Mega List'"], 5], [(1764464, 0), [['Perhaps you are looking for itertools.product:'], ['itertools.product is in Python 2.6. For previous versions, you can use this:']], [[" #!/usr/bin/env python\nimport itertools\na=[1,2]\nb=['a','b']\nc=[str(s)+str(t) for s,t in itertools.product(a,b)]\nprint(c)\n['1a', '1b', '2a', '2b']\n\nv=[1,'a']\nw=[1,'b']\nx=[1,'c']\ny=[1,'d']\nz=[1,'e']\n\nr=[''.join([str(elt) for elt in p]) for p in itertools.product(v,w,x,y,z)]\nprint(r)\n# ['11111', '1111e', '111d1', '111de', '11c11', '11c1e', '11cd1', '11cde', '1b111', '1b11e', '1b1d1', '1b1de', '1bc11', '1bc1e', '1bcd1', '1bcde', 'a1111', 'a111e', 'a11d1', 'a11de', 'a1c11', 'a1c1e', 'a1cd1', 'a1cde', 'ab111', 'ab11e', 'ab1d1', 'ab1de', 'abc11', 'abc1e', 'abcd1', 'abcde']\n"]], ['Is there an algorithm to find unique combinations of 2 lists? 5 lists?'], 3], [(1764464, 1), [['itertools.product is in Python 2.6. For previous versions, you can use this:'], ['Edit: As jellybean points out, the original question asks for unique sets. The above code will not produce unique sets if  a , b , v , w , x , y , or  z  contain repeated elements. If this is an issue for you, then you can convert each list to a set before sending it to itertools.product:']], [[" def product(*args, **kwds):\n        '''\n        Source: http://docs.python.org/library/itertools.html#itertools.product\n        '''\n        # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy\n        # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111\n        pools = map(tuple, args) * kwds.get('repeat', 1)\n        result = [[]]\n        for pool in pools:\n            result = [x+[y] for x in result for y in pool]\n        for prod in result:\n            yield tuple(prod)\n"]], ['Is there an algorithm to find unique combinations of 2 lists? 5 lists?'], 3], [(1764464, 2), [['Edit: As jellybean points out, the original question asks for unique sets. The above code will not produce unique sets if  a , b , v , w , x , y , or  z  contain repeated elements. If this is an issue for you, then you can convert each list to a set before sending it to itertools.product:'], ['-10000']], [[" r=[''.join([str(elt) for elt in p]) for p in itertools.product(*(set(elt) for elt in (v,w,x,y,z)))]\n"]], ['Is there an algorithm to find unique combinations of 2 lists? 5 lists?'], 3], [(1764548, 0), [['You could use  ctypes.c_longlong :'], ['Using  c_longlong , you could do something like this ( note:  Python 3.x only!):']], [[' >>> from ctypes import c_longlong as ll\n>>> ll(2 ** 63 - 1)\nc_longlong(9223372036854775807L)\n>>> ll(2 ** 63)\nc_longlong(-9223372036854775808L)\n>>> ll(2 ** 63).value\n-9223372036854775808L\n']], ["Python type long vs C 'long long'"], 2], [(1764548, 1), [['Using  c_longlong , you could do something like this ( note:  Python 3.x only!):'], ['In this way the result of  ll(2 ** 63) - 1  will indeed be  9223372036854775807 . This construction may result in a performance penalty though, so depending on what you want to do exactly, defining a class such as the above may not be worth it. When in doubt, use  timeit .']], [[' from ctypes import c_longlong\n\nclass ll(int):\n    def __new__(cls, n):\n        return int.__new__(cls, c_longlong(n).value)\n\n    def __add__(self, other):\n        return ll(super().__add__(other))\n\n    def __radd__(self, other):\n        return ll(other.__add__(self))\n\n    def __sub__(self, other):\n        return ll(super().__sub__(other))\n\n    def __rsub__(self, other):\n        return ll(other.__sub__(self))\n\n    ...\n']], ["Python type long vs C 'long long'"], 2], [(1765757, 0), [["So the solution I'm going with for the moment is:"], ['And then:']], [[" COMPETITION_TYPE_CHOICES = [\n     (1, 'Olympic Games'),\n     (2, 'ISU Championships'),\n     (3, 'Grand Prix Series'),\n]\n\nCOMP_TYPE_CHOICES_AND_EMPTY = [('','All')] + COMPETITION_TYPE_CHOICES\n"]], ["ChoiceField doesn't display an empty label when using a tuple"], 2], [(1765757, 1), [['And then:'], ['The model stays the same as it was.']], [[' class CompetitionSearchForm(forms.Form):\n    name = forms.CharField(required=False)\n    type = forms.ChoiceField(choices=COMP_TYPE_CHOICES_AND_EMPTY, required=False)\n']], ["ChoiceField doesn't display an empty label when using a tuple"], 2], [(1765848, 0), [["The strategy I used is to replace a tag with its contents if they are of type  NavigableString  and if they aren't, then recurse into them and replace their contents with  NavigableString , etc. Try this:"], ['The result is:']], [[' from BeautifulSoup import BeautifulSoup, NavigableString\n\ndef strip_tags(html, invalid_tags):\n    soup = BeautifulSoup(html)\n\n    for tag in soup.findAll(True):\n        if tag.name in invalid_tags:\n            s = ""\n\n            for c in tag.contents:\n                if not isinstance(c, NavigableString):\n                    c = strip_tags(unicode(c), invalid_tags)\n                s += unicode(c)\n\n            tag.replaceWith(s)\n\n    return soup\n\nhtml = "<p>Good, <b>bad</b>, and <i>ug<b>l</b><u>y</u></i></p>"\ninvalid_tags = [\'b\', \'i\', \'u\']\nprint strip_tags(html, invalid_tags)\n']], ['Remove a tag using BeautifulSoup but keep its contents'], 2], [(1765848, 1), [['The result is:'], ['I gave this same answer on another question. It seems to come up a lot.']], [[' <p>Good, bad, and ugly</p>\n']], ['Remove a tag using BeautifulSoup but keep its contents'], 2], [(1766823, 0), [['But if you want to take the suggestion from the documentation, derive from RSS2 and implement your own publish_extensions, like this:'], ['And as for making an enclosure, use the Enclosure class, as in']], [[' class YourRSS2Item(PyRSS2Gen.RSSItem):\n    def publish_extensions(self, handler):\n        handler.startElement("show_id")\n        handler.endElement("show_id")\n']], ['How can I generate RSS with arbitrary tags and enclosures'], 2], [(1766823, 1), [['And as for making an enclosure, use the Enclosure class, as in'], ['-10000']], [[' item = RSSItem( .... enclosure = Enclosure("http://url.com", 10, ""), ...)\n']], ['How can I generate RSS with arbitrary tags and enclosures'], 2], [(1767513, 0), [['-10000'], ["Here's another way"]], [[' with open("datafile") as myfile:\n    head = [next(myfile) for x in xrange(N)]\nprint head\n']], ['Read first N lines of a file in python'], 2], [(1767513, 1), [["Here's another way"], ['-10000']], [[' from itertools import islice\nwith open("datafile") as myfile:\n    head = list(islice(myfile, N))\nprint head\n']], ['Read first N lines of a file in python'], 2], [(1767565, 0), [['If it is a frequency plot of some kind, then a simple SQL query should do the trick:'], ['After that, the python code to generate data for a histogram plot is the following (this was written precisely in 5 minutes so it is very crude):']], [[' select total, count(total) from faults GROUP BY total;\n']], ['Plotting Histogram: How can I do it from scratch using data stored in a database?'], 4], [(1767565, 1), [['After that, the python code to generate data for a histogram plot is the following (this was written precisely in 5 minutes so it is very crude):'], ['Step #3: Use GNUPlot to generate the histogram. You can use the following script as a starting point (generates an eps image file):']], [[' import MySQLdb\n\ndef DumpHistogramData(databaseHost, databaseName, databaseUsername, databasePassword, dataTableName, binsTableName, binSize, histogramDataFilename):\n    #Open a file for writing into\n    output = open("./" + histogramDataFilename, "w")\n\n    #Connect to the database\n    db = MySQLdb.connect(databaseHost, databaseUsername, databasePassword, databaseName)\n    cursor = db.cursor()\n\n    #Form the query\n    sql = """select b.*, count(*) as total \n            FROM """ + binsTableName + """ b \n            LEFT OUTER JOIN """ + dataTableName + """ a \n            ON a.total between b.min AND b.max \n            group by b.min;"""\n    cursor.execute(sql)\n\n    #Get the result and print it into a file for further processing\n    count = 0;\n    while True:\n        results = cursor.fetchmany(10000)\n        if not results:\n            break\n        for result in results:\n            #print >> output, str(result[0]) + "-" + str(result[1]) + "\\t" + str(result[2])\n    db.close()\n\ndef PrepareHistogramBins(databaseHost, databaseName, databaseUsername, databasePassword, binsTableName, maxValue, totalBins):\n\n    #Connect to the database    \n    db = MySQLdb.connect(databaseHost, databaseUsername, databasePassword, databaseName)\n    cursor = db.cursor()\n\n    #Check if the table was already created\n    sql = """DROP TABLE IF EXISTS """ + binsTableName\n    cursor.execute(sql)\n\n    #Create the table\n    sql = """CREATE TABLE """ + binsTableName + """(min int(11), max int(11));"""\n    cursor.execute(sql)\n\n    #Calculate the bin size\n    binSize = maxValue/totalBins\n\n    #Generate the bin sizes\n    for i in range(0, maxValue, binSize):\n        if i is 0:\n            min = i\n            max = i+binSize\n        else:\n            min = i+1\n            max = i+binSize\n        sql = """INSERT INTO """ + binsTableName + """(min, max) VALUES(""" + str(min) + """, """ + str(max) + """);"""\n        cursor.execute(sql)\n    db.close()\n    return binSize\n\nbinSize = PrepareHistogramBins("localhost", "testing", "root", "", "bins", 5000, 100)\nDumpHistogramData("localhost", "testing", "root", "", "faults", "bins", binSize, "histogram")\n']], ['Plotting Histogram: How can I do it from scratch using data stored in a database?'], 4], [(1767565, 2), [['Step #3: Use GNUPlot to generate the histogram. You can use the following script as a starting point (generates an eps image file):'], ['Step #4: Use gnuplot with the above input script to generate an eps file']], [[' set terminal postscript eps color lw 2 "Helvetica" 20\nset output "output.eps"\nset xlabel "XLABEL"\nset ylabel "YLABEL"\nset title "TITLE"\nset style data histogram\nset style histogram cluster gap 1\nset style fill solid border -1\nset boxwidth 0.9\nset key autotitle columnheader\nset xtics rotate by -45\nplot "input" using 1:2 with linespoints ls 1\n']], ['Plotting Histogram: How can I do it from scratch using data stored in a database?'], 4], [(1767565, 3), [['Step #4: Use gnuplot with the above input script to generate an eps file'], ['Nothing complicated but I figured a couple of bits from this code can be reused. Again, like I said, it is not perfect but you can get the job done :)']], [[' gnuplot sample.script\n']], ['Plotting Histogram: How can I do it from scratch using data stored in a database?'], 4], [(1768881, 0), [['To invoke the MacPorts python2.5, you either need to ensure that  /opt/local/bin  precedes  /usr/bin  on your shell  $PATH  (you can do this by modifying your  .bash_profile  or other shell initialization script) or you can simply invoke the desired python with an absolute path reference:'], ['to use the Apple-supplied default python;']], [[' $ /usr/bin/python your-program.py\n']], ["How to make python_select work for '$>python' command?"], 4], [(1768881, 1), [['to use the Apple-supplied default python;'], ['to use the version selected with  python_select , or:']], [[' $ /opt/local/bin/python your-program.py\n']], ["How to make python_select work for '$>python' command?"], 4], [(1768881, 2), [['to use the version selected with  python_select , or:'], ['To modify your search PATH to use MacPorts, add this line to  .bash_profile :']], [[' $ /opt/local/bin/python2.5 your-program.py\n']], ["How to make python_select work for '$>python' command?"], 4], [(1768881, 3), [['To modify your search PATH to use MacPorts, add this line to  .bash_profile :'], ['-10000']], [[' export PATH=/opt/local/bin:/opt/local/sbin:$PATH\n']], ["How to make python_select work for '$>python' command?"], 4], [(1769403, 0), [['You can use  **kwargs  to let your functions take an arbitrary number of keyword arguments ("kwargs" means "keyword arguments"):'], ['You can also use the  **kwargs  syntax when calling functions by constructing a dictionary of keyword arguments and passing it to your function:']], [[' >>> def print_keyword_args(**kwargs):\n...     # kwargs is a dict of the keyword args passed to the function\n...     for key, value in kwargs.iteritems():\n...         print "%s = %s" % (key, value)\n... \n>>> print_keyword_args(first_name="John", last_name="Doe")\nfirst_name = John\nlast_name = Doe\n']], ['Understanding kwargs in Python'], 2], [(1769403, 1), [['You can also use the  **kwargs  syntax when calling functions by constructing a dictionary of keyword arguments and passing it to your function:'], ['The  Python Tutorial  contains a good explanation of how it works, along with some nice examples.']], [[" >>> kwargs = {'first_name': 'Bobby', 'last_name': 'Smith'}\n>>> print_keyword_args(**kwargs)\nfirst_name = Bobby\nlast_name = Smith\n"]], ['Understanding kwargs in Python'], 2], [(1769625, 0), [['You have two options:'], ['or']], [[" >>> cgi.parse_qs(qs)\n{'second': ['4'], 'third': ['3'], 'first': ['1']}\n"]], ['parse query string with urllib in Python 2.4'], 3], [(1769625, 1), [['or'], ['The values in the dict returned by  cgi.parse_qs()  are lists rather than strings, in order to handle the case when the same parameter is specified several times:']], [[" >>> cgi.parse_qsl(qs)\n[('first', '1'), ('second', '4'), ('third', '3')]\n"]], ['parse query string with urllib in Python 2.4'], 3], [(1769625, 2), [['The values in the dict returned by  cgi.parse_qs()  are lists rather than strings, in order to handle the case when the same parameter is specified several times:'], ['-10000']], [[" >>> qs = 'tags=python&tags=programming'\n>>> cgi.parse_qs(qs)\n{'tags': ['python', 'programming']}\n"]], ['parse query string with urllib in Python 2.4'], 3], [(1770209, 0), [['The following code is a script (Python 2.4+) that demonstrates how to do this:'], ['Start as root...']], [[" import os\nimport pwd\nimport subprocess\nimport sys\n\n\ndef main(my_args=None):\n    if my_args is None: my_args = sys.argv[1:]\n    user_name, cwd = my_args[:2]\n    args = my_args[2:]\n    pw_record = pwd.getpwnam(user_name)\n    user_name      = pw_record.pw_name\n    user_home_dir  = pw_record.pw_dir\n    user_uid       = pw_record.pw_uid\n    user_gid       = pw_record.pw_gid\n    env = os.environ.copy()\n    env[ 'HOME'     ]  = user_home_dir\n    env[ 'LOGNAME'  ]  = user_name\n    env[ 'PWD'      ]  = cwd\n    env[ 'USER'     ]  = user_name\n    report_ids('starting ' + str(args))\n    process = subprocess.Popen(\n        args, preexec_fn=demote(user_uid, user_gid), cwd=cwd, env=env\n    )\n    result = process.wait()\n    report_ids('finished ' + str(args))\n    print 'result', result\n\n\ndef demote(user_uid, user_gid):\n    def result():\n        report_ids('starting demotion')\n        os.setgid(user_gid)\n        os.setuid(user_uid)\n        report_ids('finished demotion')\n    return result\n\n\ndef report_ids(msg):\n    print 'uid, gid = %d, %d; %s' % (os.getuid(), os.getgid(), msg)\n\n\nif __name__ == '__main__':\n    main()\n"]], ['Run child processes as different user from a long running process'], 4], [(1770209, 1), [['Start as root...'], ['Become non-root in a child process...']], [[' (hale)/tmp/demo$ sudo bash --norc\n(root)/tmp/demo$ ls -l\ntotal 8\ndrwxr-xr-x  2 hale  wheel    68 May 17 16:26 inner\n-rw-r--r--  1 hale  staff  1836 May 17 15:25 test-child.py\n']], ['Run child processes as different user from a long running process'], 4], [(1770209, 2), [['Become non-root in a child process...'], ['When the child process exits, we go back to root in parent ...']], [[" (root)/tmp/demo$ python test-child.py hale inner /bin/bash --norc\nuid, gid = 0, 0; starting ['/bin/bash', '--norc']\nuid, gid = 0, 0; starting demotion\nuid, gid = 501, 20; finished demotion\n(hale)/tmp/demo/inner$ pwd\n/tmp/demo/inner\n(hale)/tmp/demo/inner$ whoami\nhale\n"]], ['Run child processes as different user from a long running process'], 4], [(1770209, 3), [['When the child process exits, we go back to root in parent ...'], ['Note  that having the parent process wait around for the child process to exit is for  demonstration purposes only . I did this so that the parent and child could share a terminal. A daemon would have no terminal and would seldom wait around for a child process to exit.']], [[" (hale)/tmp/demo/inner$ exit\nexit\nuid, gid = 0, 0; finished ['/bin/bash', '--norc']\nresult 0\n(root)/tmp/demo$ pwd\n/tmp/demo\n(root)/tmp/demo$ whoami\nroot\n"]], ['Run child processes as different user from a long running process'], 4], [(1771151, 0), [['It suggest, as others have here using the CSV module. Place the following in your  pipelines.py  file.'], ['Don’t forget to enable the pipeline by adding it to the ITEM_PIPELINES setting in your settings.py, like this:']], [[" import csv\n\nclass CsvWriterPipeline(object):\n\n    def __init__(self):\n        self.csvwriter = csv.writer(open('items.csv', 'wb'))\n\n    def process_item(self, domain, item):\n        self.csvwriter.writerow([item['title'][0], item['link'][0], item['desc'][0]])\n        return item\n"]], ['Newbie Q about Scrapy pipeline.py'], 2], [(1771151, 1), [['Don’t forget to enable the pipeline by adding it to the ITEM_PIPELINES setting in your settings.py, like this:'], ['Adjust to suit the specifics of your project.']], [[" ITEM_PIPELINES = ['dmoz.pipelines.CsvWriterPipeline']\n"]], ['Newbie Q about Scrapy pipeline.py'], 2], [(1774011, 0), [['If you set'], ['in your view, you can display the months and years in the template using the  ifchanged  template tag.']], [[" entry_list = Entry.objects.order_by('pub_date')\n"]], ['Listing blog entries by year,month'], 3], [(1774011, 1), [['in your view, you can display the months and years in the template using the  ifchanged  template tag.'], ['For example ']], [[' {% for entry in entry_list %}\n{% ifchanged %}<h3>{{entry.pub_date|date:"Y"}}</h3>{% endifchanged %}\n{% ifchanged %}<h4>{{entry.pub_date|date:"F"}}</h4>{% endifchanged %}\n<p>{{entry.title}}</p>\n{% endfor %}\n']], ['Listing blog entries by year,month'], 3], [(1774011, 2), [['For example '], ['returns a  DateQuerySet  of  datetime.datetime  objects for each month that has Blog Entries. You can use this queryset in the template to create links to monthly archive pages.']], [[" entry_months = Entry.objects.dates('pub_date','month','DESC')\n"]], ['Listing blog entries by year,month'], 3], [(1775459, 0), [["Your algorithm itself may be implemented pythonically, but it's often useful to re-write algorithms in a functional way - You might end up with a completely different but more readable solution at all (which is even more pythonic)."], ['Usage:']], [[" def primes(upper):\n    n = 2; found = []\n    while n < upper:\n        # If a number is not divisble through all preceding primes, it's prime\n        if all(n % div != 0 for div in found):\n            yield n\n            found.append( n )\n        n += 1\n"]], ['Can this be made more pythonic?'], 3], [(1775459, 1), [['Usage:'], ["Or, with Alasdair's comment taken into account, a more efficient version:"]], [[' for pr in primes(1000):\n    print pr\n']], ['Can this be made more pythonic?'], 3], [(1775459, 2), [["Or, with Alasdair's comment taken into account, a more efficient version:"], ['-10000']], [[" from math import sqrt\nfrom itertools import takewhile\n\ndef primes(upper):\n    n = 2; foundPrimes = []\n    while n < upper:\n        sqrtN = int(sqrt(n))\n        # If a number n is not divisble through all preceding primes up to sqrt(n), it's prime\n        if all(n % div != 0 for div in takewhile(lambda div: div <= sqrtN, foundPrimes)):\n            yield n\n            foundPrimes.append(n)\n        n += 1\n"]], ['Can this be made more pythonic?'], 3], [(1777344, 0), [['-10000'], ["As you see, the first item of the tuple  mac_ver  returns is a string, not a number (hard to make '10.5.8' into a number!-), but it's pretty easy to manipulate the  10.x.y  string into the kind of numbers you want.  For example,"]], [[" >>> import platform\n>>> platform.mac_ver()\n('10.5.8', ('', '', ''), 'i386')\n"]], ['How to detect Mac OS version using Python?'], 2], [(1777344, 1), [["As you see, the first item of the tuple  mac_ver  returns is a string, not a number (hard to make '10.5.8' into a number!-), but it's pretty easy to manipulate the  10.x.y  string into the kind of numbers you want.  For example,"], ["If you prefer the Darwin kernel version rather than the MacOSX version, that's also easy to access -- use the similarly-formatted string that's the third item of the tuple returned by  platform.uname() ."]], [[" >>> v, _, _ = platform.mac_ver()\n>>> v = float('.'.join(v.split('.')[:2]))\n>>> print v\n10.5\n"]], ['How to detect Mac OS version using Python?'], 2], [(1778528, 0), [["Cached images can be extracted from Firefox's cache by navigating to an URL like this one:"], ['The resulting page will contain a line with the "file on disk" label, like this one:']], [[' about:cache-entry?client=HTTP&sb=1&key=http://your.server/image.png\n']], ['How to get image details from firefox webdriver?'], 2], [(1778528, 1), [['The resulting page will contain a line with the "file on disk" label, like this one:'], ["This page will also contain the hex dump of the file's contents. You can load the file from that path or parse the hex dump. Please note, that the path can also be  none  in the case of small files cached only in memory. Your only option is parsing the hex dump in this case."]], [[' file on disk: /home/fviktor/.mozilla/firefox/7jx6k3hx.default/Cache/CF7379D8d01\n']], ['How to get image details from firefox webdriver?'], 2], [(1778846, 0), [['First, setting attributes on the current module'], ['Second, setting into the current globals dict:']], [[" # The first way I had of grabbing the module:\nmod = __import__(__name__, fromlist=['nonempty'])\n\n# From Roger's suggestion:\nimport sys\nmod = sys.modules[__name__]\n\nfor name in ['A', 'B', 'C']:\n    class_ = type(name, (object, ), {})\n    setattr(mod, name, class_)\n\nprint A, B, C\n"]], ['Populating values in module namespace'], 4], [(1778846, 1), [['Second, setting into the current globals dict:'], ['Last, using exec (eww):']], [[" for name in ['A', 'B', 'C']:\n    class_ = type(name, (object, ), {})\n    globals()[name] = class_\n\nprint A, B, C\n"]], ['Populating values in module namespace'], 4], [(1778846, 2), [['Last, using exec (eww):'], ['An interactive session to demonstrate:']], [[' for name in [\'A\', \'B\', \'C\']:\n    class_ = type(name, (object, ), {})\n    exec "%s = class_" % name\n\nprint A, B, C\n']], ['Populating values in module namespace'], 4], [(1778846, 3), [['An interactive session to demonstrate:'], ['-10000']], [[' Python 2.6.4 (r264:75706, Nov  8 2009, 17:35:59) \n[GCC 4.2.1 (Apple Inc. build 5646)] on darwin\nType "help", "copyright", "credits" or "license" for more information.\n>>> import sys\n>>> mod = sys.modules[__name__]\n>>> mod.__dict__ is globals()\nTrue\n']], ['Populating values in module namespace'], 4], [(1779239, 0), [['After the initial declarations, you can do something like this:'], ['and']], [[" o = Course(course_nro='abcd')\nsession.add(o)\nsession.commit()\n"]], ["Converting SQL commands to Python's ORM"], 3], [(1779239, 1), [['and'], ['The declarations could look something like this:']], [[' print session.query(Course).all()\n']], ["Converting SQL commands to Python's ORM"], 3], [(1779239, 2), [['The declarations could look something like this:'], ['This declarative method is just one way of using sqlalchemy.']], [[" from sqlalchemy import *\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import session_maker\n\n# create an engine, and a base class\nengine = create_engine('postgre://naa:123@localhost/tk')\nDeclarativeBase = declarative_base(bind=engine)\nmetadata = DeclarativeBase.metadata\n\n# create a session\nSession = session_maker(engine)\nsession = Session()\n\n# declare the models\nclass Cource(DelcarativeBase):\n    __tablename__ = 'courses'\n\n    course_nro = Column('course_nro', CHAR(12))\n"]], ["Converting SQL commands to Python's ORM"], 3], [(1780174, 0), [['Works for any number of keys'], ['For example:']], [[" >>> map(dict, zip(*[[(k, v) for v in value] for k, value in d.items()]))\n[{'key2': 4, 'key1': 1}, {'key2': 5, 'key1': 2}, {'key2': 6, 'key1': 3}]\n"]], ['Split dictionary of lists into list of dictionaries'], 4], [(1780174, 1), [['For example:'], ['A general solution that works on any number of values or keys: (python2.6)']], [[" d = {'key3': [7, 8, 9], 'key2': [4, 5, 6], 'key1': [1, 2, 3]}\n\n>>> map(dict, zip(*[[(k, v) for v in value] for k, value in d.items()]))\n[{'key3': 7, 'key2': 4, 'key1': 1}, {'key3': 8, 'key2': 5, 'key1': 2}, {'key3': 9, 'key2': 6, 'key1': 3}]\n"]], ['Split dictionary of lists into list of dictionaries'], 4], [(1780174, 2), [['A general solution that works on any number of values or keys: (python2.6)'], ["And if you don't have python2.6:"]], [[" >>> from itertools import izip_longest\n>>> d = {'key2': [3, 4, 5, 6], 'key1': [1, 2]}\n>>> map(lambda a: dict(filter(None, a)), izip_longest(*[[(k, v) for v in value] for k, value in d.items()]))\n[{'key2': 3, 'key1': 1}, {'key2': 4, 'key1': 2}, {'key2': 5}, {'key2': 6}]\n"]], ['Split dictionary of lists into list of dictionaries'], 4], [(1780174, 3), [["And if you don't have python2.6:"], ['-10000']], [[" >>> d = {'key2': [3, 4, 5, 6], 'key1': [1, 2]}\n>>> map(lambda a: dict(filter(None, a)), map(None, *[[(k, v) for v in value] for k, value in d.items()]))\n[{'key2': 3, 'key1': 1}, {'key2': 4, 'key1': 2}, {'key2': 5}, {'key2': 6}]\n"]], ['Split dictionary of lists into list of dictionaries'], 4], [(1780922, 0), [['To 32-bit unsigned integer:'], ['To string:']], [[' uint x = BitConverter.ToUInt32(Encoding.ASCII.GetBytes("isoy"), 0); // 2037347177\n']], ['How do I encode a 4-byte string as a single 32-bit integer?'], 2], [(1780922, 1), [['To string:'], ['BitConverter  uses the native endianness of the machine.']], [[' string s = Encoding.ASCII.GetString(BitConverter.GetBytes(x));      // "isoy"\n']], ['How do I encode a 4-byte string as a single 32-bit integer?'], 2], [(1781554, 0), [['-10000'], ["However, I'd be curious about the context in which you're using this - there might be other options aside from regex which would be either more efficient or more readable, such as..."]], [[' ^(?!mpeg).*\n']], ['regular expression matching everything except a given regular expression'], 2], [(1781554, 1), [["However, I'd be curious about the context in which you're using this - there might be other options aside from regex which would be either more efficient or more readable, such as..."], ['-10000']], [[' if not inputstring.startswith("mpeg"):\n']], ['regular expression matching everything except a given regular expression'], 2], [(1782033, 0), [["You can use sets in Python if you don't care about order:"], ['The other way, only using list comparison.']], [[' file1=set(open("file1").readlines())\nfile2=set(open("file2").readlines())\nintersection = file1 & file2 #common lines\nnon_intersection = file2 - file1  #uncommon lines (in file2 but not file1)\nfor items in intersection:\n    print items\nfor nitems in non_intersection:\n    print nitems\n']], ['Convert Perl script to Python: dedupe 2 files based on hash keys'], 2], [(1782033, 1), [['The other way, only using list comparison.'], ['-10000']], [[' # lines in file2 common with file1\ndata1=map(str.rstrip,open("file1").readlines())\nfor line in open("file2"):\n    line=line.rstrip()\n    if line in data1:\n        print line\n\n# lines in file2 not in file1, use "not"\ndata1=map(str.rstrip,open("file1").readlines())\nfor line in open("file2"):\n    line=line.rstrip()\n    if not line in data1:\n        print line\n']], ['Convert Perl script to Python: dedupe 2 files based on hash keys'], 2], [(1783251, 0), [['NumPy actually does have an  append  function, which it seems might do what you want, e.g.,'], ['your second snippet (hstack) will work if you add another line, e.g.,']], [[' import numpy as NP\nmy_data = NP.random.random_integers(0, 9, 9).reshape(3, 3)\nnew_col = NP.array((5, 5, 5)).reshape(3, 1)\nres = NP.append(my_data, new_col, axis=1)\n']], ['Growing matrices columnwise in NumPy'], 5], [(1783251, 1), [['your second snippet (hstack) will work if you add another line, e.g.,'], ['For that reason, the common pattern in NumPy for iterative addition of columns to a 2D array is to initialize an empty target array  once (or pre-allocate a single 2D NumPy array having all of the empty columns) the successively populate those empty columns by setting the desired column-wise offset (index)--much easier to show than to explain:']], [[' my_data = NP.random.random_integers(0, 9, 16).reshape(4, 4)\n# the line to add--does not depend on array dimensions\nnew_col = NP.zeros_like(my_data[:,-1]).reshape(-1, 1)\nres = NP.hstack((my_data, new_col))\n']], ['Growing matrices columnwise in NumPy'], 5], [(1783251, 2), [['For that reason, the common pattern in NumPy for iterative addition of columns to a 2D array is to initialize an empty target array  once (or pre-allocate a single 2D NumPy array having all of the empty columns) the successively populate those empty columns by setting the desired column-wise offset (index)--much easier to show than to explain:'], ['populate NumPy array as in the OP, except each iteration just re-sets the values of M at successive column-wise offsets']], [[" >>> # initialize your skeleton array using 'empty' for lowest-memory footprint \n>>> M = NP.empty(shape=(10, 5), dtype=float)\n\n>>> # create a small function to mimic step-wise populating this empty 2D array:\n>>> fnx = lambda v : NP.random.randint(0, 10, v)\n"]], ['Growing matrices columnwise in NumPy'], 5], [(1783251, 3), [['populate NumPy array as in the OP, except each iteration just re-sets the values of M at successive column-wise offsets'], ["of course if you don't known in advance what size your array should be\njust create one much bigger than you need and trim the 'unused' portions\nwhen you finish populating it"]], [[' >>> for index, itm in enumerate(range(5)):    \n        M[:,index] = fnx(10)\n\n>>> M\n  array([[ 1.,  7.,  0.,  8.,  7.],\n         [ 9.,  0.,  6.,  9.,  4.],\n         [ 2.,  3.,  6.,  3.,  4.],\n         [ 3.,  4.,  1.,  0.,  5.],\n         [ 2.,  3.,  5.,  3.,  0.],\n         [ 4.,  6.,  5.,  6.,  2.],\n         [ 0.,  6.,  1.,  6.,  8.],\n         [ 3.,  8.,  0.,  8.,  0.],\n         [ 5.,  2.,  5.,  0.,  1.],\n         [ 0.,  6.,  5.,  9.,  1.]])\n']], ['Growing matrices columnwise in NumPy'], 5], [(1783251, 4), [["of course if you don't known in advance what size your array should be\njust create one much bigger than you need and trim the 'unused' portions\nwhen you finish populating it"], ['-10000']], [[' >>> M[:3,:3]\n  array([[ 9.,  3.,  1.],\n         [ 9.,  6.,  8.],\n         [ 9.,  7.,  5.]])\n']], ['Growing matrices columnwise in NumPy'], 5], [(1785005, 0), [["Unless I'm misunderstanding, this is where  numpy  can be put to good use:"], ['This works for multiplication too. And indeed, as noted by  Mark , scalar division (and multiplication) is also possible:']], [[' >>> from numpy import *\n>>> a = array([[1,2,3],[4,5,6],[7,8,9]])\n>>> b = array([[0.5] * 3, [0.5] * 3, [0.5] * 3])\n>>> a / b\narray([[  2.,   4.,   6.],\n       [  8.,  10.,  12.],\n       [ 14.,  16.,  18.]])\n']], ['term by term division in python (division termino a termino en python )'], 3], [(1785005, 1), [['This works for multiplication too. And indeed, as noted by  Mark , scalar division (and multiplication) is also possible:'], ['Edit : to be complete, for lists of lists you could do the following:']], [[' >>> a / 10.0\narray([[ 0.1,  0.2,  0.3],\n       [ 0.4,  0.5,  0.6],\n       [ 0.7,  0.8,  0.9]])\n>>> a * 10\narray([[10, 20, 30],\n       [40, 50, 60],\n       [70, 80, 90]])\n']], ['term by term division in python (division termino a termino en python )'], 3], [(1785005, 2), [['Edit : to be complete, for lists of lists you could do the following:'], ['-10000']], [[' >>> a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n>>> b = [[0.5] * 3, [0.5] * 3, [0.5] * 3]\n>>> def mat_div(a, b): \n...     return [[n / d for n, d in zip(ra, rb)] for ra, rb in zip(a, b)] \n... \n>>> mat_div(a, b)\n[[2.0, 4.0, 6.0], [8.0, 10.0, 12.0], [14.0, 16.0, 18.0]]\n']], ['term by term division in python (division termino a termino en python )'], 3], [(1785867, 0), [['The code you give,'], ['As for efficiency: I expect that using anything else instead of your simple loop will not improve runtime. When in doubt, use  timeit . For example, the following tests seem to indicate that a regular for-loop is faster than a list-comprehension. (I would be reluctant to draw any general conclusions from this test, thought):']], [[' for function in functions:\n    function(x)\n']], ['Efficient way of calling set of functions in Python'], 2], [(1785867, 1), [['As for efficiency: I expect that using anything else instead of your simple loop will not improve runtime. When in doubt, use  timeit . For example, the following tests seem to indicate that a regular for-loop is faster than a list-comprehension. (I would be reluctant to draw any general conclusions from this test, thought):'], ["But again,  even if  these tests would have indicated that list-comprehensions are faster, the point remains that you should not use them when side-effects are involved, for readability's sake."]], [[" >>> timeit.Timer('[f(20) for f in functions]', 'functions = [lambda n: i * n for i in range(100)]').repeat()\n[44.727972984313965, 44.752119779586792, 44.577917814254761]\n>>> timeit.Timer('for f in functions: f(20)', 'functions = [lambda n: i * n for i in range(100)]').repeat()\n[40.320928812026978, 40.491761207580566, 40.303879022598267]\n"]], ['Efficient way of calling set of functions in Python'], 2], [(1786206, 0), [['There is nothing that gives the behaviour of default dict out of the box. However creating your own default dict in Java would not be that difficult.'], ['This class could be used like below:']], [[' import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class DefaultDict<K, V> extends HashMap<K, V> {\n\n    Class<V> klass;\n    public DefaultDict(Class klass) {\n        this.klass = klass;    \n    }\n\n    @Override\n    public V get(Object key) {\n        V returnValue = super.get(key);\n        if (returnValue == null) {\n            try {\n                returnValue = klass.newInstance();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            this.put((K) key, returnValue);\n        }\n        return returnValue;\n    }    \n}\n']], ["is there a Java equivalent of Python's defaultdict?"], 2], [(1786206, 1), [['This class could be used like below:'], ['This code would print:  {1=[2, 3]}']], [[' public static void main(String[] args) {\n    DefaultDict<Integer, List<Integer>> dict =\n        new DefaultDict<Integer, List<Integer>>(ArrayList.class);\n    dict.get(1).add(2);\n    dict.get(1).add(3);\n    System.out.println(dict);\n}\n']], ["is there a Java equivalent of Python's defaultdict?"], 2], [(1786504, 0), [["Edit : ok, so, joking apart, here's a nicely symmetrical solution to print the first ten of the countably-infinite non-empty solutions:"], ['which emits']], [[" import itertools as it\nimport collections\n\nL = ['a', 'ab', 'bba']\nM = ['baa', 'aa', 'bb']\n\ndef cmbs(L=L, M=M):\n  Ucans = collections.defaultdict(list)\n  Vcans = collections.defaultdict(list)\n  sides = (L, Vcans, Ucans), (M, Ucans, Vcans)\n  for i in it.count(1):\n    for k, (G, Ocans, Tcans) in enumerate(sides):\n      for u in it.product(G, repeat=i):\n        j = ''.join(u)\n        if j in Ocans:\n          for samp in Ocans[j]:\n            result = samp, u\n            yield result[1-k], result[k]\n        Tcans[j].append(u)\n\nif __name__ == '__main__':\n  for x, y in it.islice(cmbs(), 10):\n    print x, y, ''.join(x), ''.join(y)\n"]], ['Python - Simple algorithmic task on lists (standard question for a job-interview)'], 2], [(1786504, 1), [['which emits'], ["I'm not sure what's meant by O(N) in the context of a problem with countably infinite solutions -- what's N supposed to  be  here?!-)"]], [[" ('a', 'a') ('aa',) aa aa\n('bba', 'a') ('bb', 'aa') bbaa bbaa\n('a', 'a', 'a', 'a') ('aa', 'aa') aaaa aaaa\n('a', 'a', 'bba', 'a') ('aa', 'bb', 'aa') aabbaa aabbaa\n('a', 'ab', 'a', 'a') ('aa', 'baa') aabaa aabaa\n('a', 'ab', 'bba', 'a') ('aa', 'bb', 'baa') aabbbaa aabbbaa\n('bba', 'a', 'a', 'a') ('bb', 'aa', 'aa') bbaaaa bbaaaa\n('bba', 'ab', 'a', 'a') ('bb', 'aa', 'baa') bbaabaa bbaabaa\n('bba', 'ab', 'bba', 'a') ('bb', 'aa', 'bb', 'baa') bbaabbbaa bbaabbbaa\n('bba', 'a', 'bba', 'a') ('bb', 'aa', 'bb', 'aa') bbaabbaa bbaabbaa\n"]], ['Python - Simple algorithmic task on lists (standard question for a job-interview)'], 2], [(1787056, 0), [['I hesitate to suggest it, but your best bet might be to define a new  help  function:'], ['and then put a  __help__  attribute on your instances:']], [[" old_help = help\ndef help(thing):\n    if hasattr(thing, '__help__'):\n        print thing.__help__\n    else:\n        old_help(thing)\n"]], ["Where does Python's pydoc help function get its content?"], 2], [(1787056, 1), [['and then put a  __help__  attribute on your instances:'], ['-10000']], [[' class myCallable:\n    def __init__(self, doc):\n        self.__doc__ = doc\n        self.__help__ = doc\n']], ["Where does Python's pydoc help function get its content?"], 2], [(1787288, 0), [['SSH uses the SSH_ASKPASS variable only if the process is really detached from TTY (stdin redirecting and setting environment variables is not enough). To detach a process from console it should fork and call os.setsid(). So the first solution I found was:'], ['There is also an elegant way to do this using the subprocess module: in the preexec_fn argument we can pass a Python function that is called in the subprocess before executing the  external command. So the solution for the question is one extra line:']], [[' # Detach process\npid = os.fork()\nif pid == 0:\n    # Ensure that process is detached from TTY\n    os.setsid()\n\n    # call ssh from here\nelse:\n    print "Waiting for ssh (pid %d)" % pid\n    os.waitpid(pid, 0)    \n    print "Done"\n']], ['How to call ssh by subprocess module so that it uses SSH_ASKPASS variable'], 2], [(1787288, 1), [['There is also an elegant way to do this using the subprocess module: in the preexec_fn argument we can pass a Python function that is called in the subprocess before executing the  external command. So the solution for the question is one extra line:'], ['-10000']], [[" env = {'SSH_ASKPASS':'/path/to/myprog', 'DISPLAY':':9999'}\np = subprocess.Popen(['ssh', '-T', '-v', 'user@myhost.com'],\n    stdin=subprocess.PIPE,\n    stdout=subprocess.PIPE,\n    stderr=subprocess.PIPE,\n    env=env,\n    preexec_fn=os.setsid\n)\n"]], ['How to call ssh by subprocess module so that it uses SSH_ASKPASS variable'], 2], [(1788063, 0), [['Yes. This is the code'], ['And this is the output']], [[' import rdflib\nfrom rdflib.Graph import Graph\n\nconj=rdflib.ConjunctiveGraph()\n\nNS=rdflib.Namespace("http://example.com/#")\nNS_CTX=rdflib.Namespace("http://example.com/context/#")\n\nalice=NS.alice\nbob=NS.bob\ncharlie=NS.charlie\n\npizza=NS.pizza\nmeat=NS.meat\nchocolate=NS.chocolate\n\nloves=NS.loves\nhates=NS.hates\nlikes=NS.likes\ndislikes=NS.dislikes\n\nlove_ctx=Graph(conj.store, NS_CTX.love)\nfood_ctx=Graph(conj.store, NS_CTX.food)\n\nlove_ctx.add( (alice, loves, bob) )\nlove_ctx.add( (alice, loves, charlie) )\nlove_ctx.add( (bob, hates, charlie) )\nlove_ctx.add( (charlie, loves, bob) )\n\nfood_ctx.add( (alice, likes, chocolate) )\nfood_ctx.add( (alice, likes, meat) )\nfood_ctx.add( (alice, dislikes, pizza) )\n\nprint "Full context"\nfor t in conj:\n    print t\n\nprint ""\nprint "Contexts"\nfor c in conj.contexts():\n    print c\n\nprint "love context"\nfor t in love_ctx:\n    print t\n\nprint "food context"\nfor t in food_ctx:\n    print t\n']], ['Using contexts in rdflib'], 2], [(1788063, 1), [['And this is the output'], ['-10000']], [[" Full context\n(rdflib.URIRef('http://example.com/#bob'), rdflib.URIRef('http://example.com/#hates'), rdflib.URIRef('http://example.com/#charlie'))\n(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#likes'), rdflib.URIRef('http://example.com/#chocolate'))\n(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#likes'), rdflib.URIRef('http://example.com/#meat'))\n(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#dislikes'), rdflib.URIRef('http://example.com/#pizza'))\n(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#bob'))\n(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#charlie'))\n(rdflib.URIRef('http://example.com/#charlie'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#bob'))\n\nContexts\n<http://example.com/context/#food> a rdfg:Graph;rdflib:storage [a rdflib:Store;rdfs:label 'IOMemory'].\n<http://example.com/context/#love> a rdfg:Graph;rdflib:storage [a rdflib:Store;rdfs:label 'IOMemory'].\nlove context\n(rdflib.URIRef('http://example.com/#bob'), rdflib.URIRef('http://example.com/#hates'), rdflib.URIRef('http://example.com/#charlie'))\n(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#bob'))\n(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#charlie'))\n(rdflib.URIRef('http://example.com/#charlie'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#bob'))\nfood context\n(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#likes'), rdflib.URIRef('http://example.com/#chocolate'))\n(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#likes'), rdflib.URIRef('http://example.com/#meat'))\n(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#dislikes'), rdflib.URIRef('http://example.com/#pizza'))\n"]], ['Using contexts in rdflib'], 2], [(1790520, 0), [['Logical  and  across all elements in  a_list :'], ['Logical  or  across all elements in  a_list :']], [[' all(a_list)\n']], ['How to apply a logical operator to all elements in a python list'], 5], [(1790520, 1), [['Logical  or  across all elements in  a_list :'], ['If you feel creative, you can also do:']], [[' any(a_list)\n']], ['How to apply a logical operator to all elements in a python list'], 5], [(1790520, 2), [['If you feel creative, you can also do:'], ['another funny way:']], [[' import operator\ndef my_all(a_list):\n  return reduce(operator.and_, a_list, True)\n\ndef my_any(a_list):\n  return reduce(operator.or_, a_list, False)\n']], ['How to apply a logical operator to all elements in a python list'], 5], [(1790520, 3), [['another funny way:'], ['and yet another:']], [[' def my_all_v2(a_list):\n  return len(filter(None,a_list)) == len(a_list)\n\ndef my_any_v2(a_list):\n  return len(filter(None,a_list)) > 0\n']], ['How to apply a logical operator to all elements in a python list'], 5], [(1790520, 4), [['and yet another:'], ['and we could go on all day, but yes, the pythonic way is to use  all  and  any  :-)']], [[' def my_all_v3(a_list):\n  for i in a_list:\n    if not i:\n      return False\n  return True\n\ndef my_any_v3(a_list):\n  for i in a_list:\n    if i:\n      return True\n  return False\n']], ['How to apply a logical operator to all elements in a python list'], 5], [(1790550, 0), [['You could write a generator:'], ['Or, given a generator for Cauchy numbers and a utility function for a running sum generator, you can have a neat generator expression:']], [[' def running_average():\n  sum = 0\n  count = 0\n  while True:\n    sum += cauchy(3,1)\n    count += 1\n    yield sum/count\n']], ['Running average in Python'], 2], [(1790550, 1), [['Or, given a generator for Cauchy numbers and a utility function for a running sum generator, you can have a neat generator expression:'], ['-10000']], [[' # Cauchy numbers generator\ndef cauchy_numbers():\n  while True:\n    yield cauchy(3,1)\n\n# running sum utility function\ndef running_sum(iterable):\n  sum = 0\n  for x in iterable:\n    sum += x\n    yield sum\n\n# Running averages generator expression (** the neat part **)\nrunning_avgs = (sum/(i+1) for (i,sum) in enumerate(running_sum(cauchy_numbers())))\n\n# goes on forever\nfor avg in running_avgs:\n  print avg\n\n# alternatively, take just the first 10\nimport itertools\nfor avg in itertools.islice(running_avgs, 10):\n  print avg\n']], ['Running average in Python'], 2], [(1791713, 0), [['You need an additional table for many-to-many relation:'], ['Update : below is an example for ordered list using  association_proxy :']], [[" nodes_list_nodes = Table(\n    'nodes_list_nodes', metadata,\n    Column('parent_id', None, ForeignKey('nodes_list.id'), nullable=False),\n    Column('child_id', None, ForeignKey(Node.id), nullable=False),\n    PrimaryKeyConstraint('parent_id', 'child_id'),\n)\n\nclass ListNode(Node):\n    __mapper_args__ = {'polymorphic_identity': 'list'}\n    __tablename__ = 'nodes_list'\n    id = Column(None, ForeignKey('nodes.id'), primary_key=True)\n    items = relation(Node, secondary=nodes_list_nodes)\n"]], ['Creating container relationship in declarative SQLAlchemy'], 2], [(1791713, 1), [['Update : below is an example for ordered list using  association_proxy :'], ['-10000']], [[" from sqlalchemy.orm.collections import InstrumentedList\nfrom sqlalchemy.ext.associationproxy import association_proxy\n\n\nclass ListNodeAssociation(Base):\n    __tablename__ = 'nodes_list_nodes'\n    parent_id = Column(None, ForeignKey('nodes_list.id'), primary_key=True)\n    child_id = Column(None, ForeignKey(Node.id), primary_key=True)\n    order = Column(Integer, nullable=False, default=0)\n    child = relation(Node)\n    __table_args__ = (\n        PrimaryKeyConstraint('parent_id', 'child_id'),\n        {},\n    )\n\n\nclass OrderedList(InstrumentedList):\n\n    def append(self, item):\n        if self:\n            item.order = self[-1].order+1\n        else:\n            item.order = 1\n        InstrumentedList.append(self, item)\n\n\nclass ListNode(Node):\n    __mapper_args__ = {'polymorphic_identity': 'list'}\n    __tablename__ = 'nodes_list'\n    id = Column(None, ForeignKey('nodes.id'), primary_key=True)\n    _items = relation(ListNodeAssociation,\n                      order_by=ListNodeAssociation.order,\n                      collection_class=OrderedList,\n                      cascade='all, delete-orphan')\n    items = association_proxy(\n                '_items', 'child',\n                creator=lambda item: ListNodeAssociation(child=item))\n"]], ['Creating container relationship in declarative SQLAlchemy'], 2], [(1791791, 0), [['You can use this technique to make a smarter stacking function'], ['This works for both recarrays and regular arrays']], [[' def hstack2(arrays) :\n  return arrays[0].__array_wrap__(numpy.hstack(arrays))\n']], ['Stacking numpy recarrays without losing their recarrayness'], 2], [(1791791, 1), [['This works for both recarrays and regular arrays'], ["I'm not sure what you're planning, but you might want to ask on the  numpy mailing list  is there's a better way than using the documented, but double-underscored method, and what their reasoning is for not doing the wrapping themselves."]], [[" >>> f = hstack2((a,b))\n>>> type(f)\n<class 'numpy.core.records.recarray'>\n>>> f.foo\narray([    140633760262784,     111050731618561,     140633760262800,\n                   7536928, 8391166428122670177])\n>>> x = numpy.random.rand(3)\n>>> y = numpy.random.rand(2)\n>>> z = hstack2((x,y))\n>>> type(z)\n<type 'numpy.ndarray'>\n"]], ['Stacking numpy recarrays without losing their recarrayness'], 2], [(1792807, 0), [['-10000'], ['Output:']], [[" x = '\\xff\\x00'\ny = ['%02x' % ord(c) for c in x]\nprint y\n"]], ['How to treat a returned/stored string like a raw string in Python?'], 2], [(1792807, 1), [['Output:'], ['-10000']], [[" ['ff', '00']\n"]], ['How to treat a returned/stored string like a raw string in Python?'], 2], [(1793214, 0), [['we can create a mulidimensional array:'], ['Now we can use  a.sum([dimension])  where  dimension  is how you want to sum the array. Summing each row is dimension 1:']], [[' >>> import numpy\n>>> a = numpy.array([[1,2,3], [4,5,6], [7,8,9]])\n>>> a\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n']], ['operation in arrays'], 4], [(1793214, 1), [['Now we can use  a.sum([dimension])  where  dimension  is how you want to sum the array. Summing each row is dimension 1:'], ['You can also sum each column:']], [[' >>> a.sum(1)\narray([ 6, 15, 24])\n']], ['operation in arrays'], 4], [(1793214, 2), [['You can also sum each column:'], ['And sum all:']], [[' >>> a.sum(0)\narray([12, 15, 18])\n']], ['operation in arrays'], 4], [(1793214, 3), [['And sum all:'], ['-10000']], [[' >>> a.sum()\n45\n']], ['operation in arrays'], 4], [(1793660, 0), [['Could you recode your original code:'], ['as, say:']], [[' if A or B and ((C or D and E) or F) or G and H:\n']], ['Python: Analyzing complex statements during execution'], 4], [(1793660, 1), [['as, say:'], ["Edit : so here's coding implementing Evaluator and exemplifying its use:"]], [[" e = Evaluator()\nif e('A or B and ((C or D and E) or F) or G and H'):\n"]], ['Python: Analyzing complex statements during execution'], 4], [(1793660, 2), [["Edit : so here's coding implementing Evaluator and exemplifying its use:"], ["and here's output from a sample run:"]], [[" import inspect\nimport random\n\nclass TracingDict(object):\n\n  def __init__(self, loc, glob):\n    self.loc = loc\n    self.glob = glob\n    self.vars = []\n\n  def __getitem__(self, name):\n    try: v = self.loc[name]\n    except KeyError: v = self.glob[name]\n    self.vars.append((name, v))\n    return v\n\n\nclass Evaluator(object):\n\n  def __init__(self):\n    f = inspect.currentframe()\n    f = inspect.getouterframes(f)[1][0]\n    self.d = TracingDict(f.f_locals, f.f_globals)\n\n  def __call__(self, expr):\n    return eval(expr, {}, self.d)\n\n\ndef f(A, B, C, D, E):\n  e = Evaluator()\n  res = e('A or B and ((C or D and E) or F) or G and H')\n  print 'R=%r from %s' % (res, e.d.vars)\n\nfor x in range(20):\n  A, B, C, D, E, F, G, H = [random.randrange(2) for x in range(8)]\n  f(A, B, C, D, E)\n"]], ['Python: Analyzing complex statements during execution'], 4], [(1793660, 3), [["and here's output from a sample run:"], ['You can see that often (about 50% of the time) A is true, which short-circuits everything. When A is false, B evaluates -- when B is also false, then G is next, when B is true, then C.']], [[" R=1 from [('A', 1)]\nR=1 from [('A', 1)]\nR=1 from [('A', 1)]\nR=1 from [('A', 0), ('B', 1), ('C', 1)]\nR=1 from [('A', 1)]\nR=1 from [('A', 0), ('B', 0), ('G', 1), ('H', 1)]\nR=1 from [('A', 1)]\nR=1 from [('A', 1)]\nR=1 from [('A', 0), ('B', 1), ('C', 1)]\nR=1 from [('A', 1)]\nR=1 from [('A', 0), ('B', 1), ('C', 1)]\nR=1 from [('A', 1)]\nR=1 from [('A', 1)]\nR=1 from [('A', 1)]\nR=0 from [('A', 0), ('B', 0), ('G', 0)]\nR=1 from [('A', 1)]\nR=1 from [('A', 1)]\nR=1 from [('A', 1)]\nR=0 from [('A', 0), ('B', 0), ('G', 0)]\nR=1 from [('A', 0), ('B', 1), ('C', 1)]\n"]], ['Python: Analyzing complex statements during execution'], 4], [(1793970, 0), [['Use parameters to  .execute() :'], ['Checking  paramstyle :']], [[' query = """\n     INSERT INTO credit\n         (bank, number, card, int1, value, type, int2)\n     VALUES\n          (?, ?, ?, ?, ?, ?, ?)\n        """\ndata =  [\'Citi\', \'5567\', \'visa\', 6000, 9.99, \'23\', 9000]\n\ncursor.execute(query, data)\n']], ['Passing SQLite variables in Python'], 2], [(1793970, 1), [['Checking  paramstyle :'], ['qmark  means you use  ?  for parameters.']], [[' >>> import sqlite3\n>>> print sqlite3.paramstyle\nqmark\n']], ['Passing SQLite variables in Python'], 2], [(1794346, 0), [['You can access data you need without  ctypes :'], ['Update : But sure you can access internal data with  ctypes  too:']], [[' >>> obj = xrange(1,11,2)\n>>> obj.__reduce__()[1]\n(1, 11, 2)\n>>> len(obj)\n5\n']], ['Accessing xrange internal structure'], 2], [(1794346, 1), [['Update : But sure you can access internal data with  ctypes  too:'], ['-10000']], [[" from ctypes import *\n\nPyObject_HEAD = [\n    ('ob_refcnt', c_size_t),\n    ('ob_type', c_void_p),\n]\n\nclass XRangeType(Structure):\n    _fields_ = PyObject_HEAD + [\n        ('start', c_long),\n        ('step', c_long),\n        ('len', c_long),\n    ]\n\nrange_obj = xrange(1, 11, 2)\n\nc_range_obj = cast(c_void_p(id(range_obj)), POINTER(XRangeType)).contents\nprint c_range_obj.start, c_range_obj.step, c_range_obj.len\n"]], ['Accessing xrange internal structure'], 2], [(1795111, 0), [["Weeell I think you are going to need a little bit of platform-sniffing kludge, but hopefully not as much as the ghastly command-sniffing  webbrowser  module. Here's a first stab at it:"], ["ETA re nosklo's comment: on Windows only, there is a built-in way to do it:"]], [[" if sys.platform=='win32':\n    subprocess.Popen(['start', d], shell= True)\n\nelif sys.platform=='darwin':\n    subprocess.Popen(['open', d])\n\nelse:\n    try:\n        subprocess.Popen(['xdg-open', d])\n    except OSError:\n        # er, think of something else to try\n        # xdg-open *should* be supported by recent Gnome, KDE, Xfce\n"]], ['Is there a cross-platform way to open a file browser in Python?'], 3], [(1795111, 1), [["ETA re nosklo's comment: on Windows only, there is a built-in way to do it:"], ["Here's the not-very-nice alternative solution to find the shell and open a folder with it, which you shouldn't now need, but I'll leave in. (Partly because it might be of use for something else, but mostly because I spent the time to type the damned thing!)"]], [[" if sys.platform=='win32':\n    os.startfile(d)\n"]], ['Is there a cross-platform way to open a file browser in Python?'], 3], [(1795111, 2), [["Here's the not-very-nice alternative solution to find the shell and open a folder with it, which you shouldn't now need, but I'll leave in. (Partly because it might be of use for something else, but mostly because I spent the time to type the damned thing!)"], ['-10000']], [[" if sys.platform=='win32':\n    import _winreg\n    path= r'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon')\n    for root in (_winreg.HKEY_CURRENT_USER, _winreg.HKEY_LOCAL_MACHINE):\n        try:\n            with _winreg.OpenKey(root, path) as k:\n                value, regtype= _winreg.QueryValueEx(k, 'Shell')\n        except WindowsError:\n            pass\n        else:\n            if regtype in (_winreg.REG_SZ, _winreg.REG_EXPAND_SZ):\n                shell= value\n            break\n    else:\n        shell= 'Explorer.exe'\n    subprocess.Popen([shell, d])\n"]], ['Is there a cross-platform way to open a file browser in Python?'], 3], [(1796180, 0), [['Try this:'], ['In your context:']], [[' import sys\ncurrent_module = sys.modules[__name__]\n']], ['How can I get a list of all classes within current module in Python?'], 3], [(1796180, 1), [['In your context:'], ['And even better:']], [[' import sys, inspect\ndef print_classes():\n    for name, obj in inspect.getmembers(sys.modules[__name__]):\n        if inspect.isclass(obj):\n            print(obj)\n']], ['How can I get a list of all classes within current module in Python?'], 3], [(1796180, 2), [['And even better:'], ['Because  inspect.getmembers()  takes a predicate.']], [[' clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)\n']], ['How can I get a list of all classes within current module in Python?'], 3], [(1798656, 0), [['So you could have a  lib/settings.py  file which contains the line'], ['and then say']], [[" BASE = 'http://www.whatever.com'\n"]], ['basic python module design question'], 3], [(1798656, 1), [['and then say'], ['in  game.py  you should then be able to write']], [[' from settings import *\n']], ['basic python module design question'], 3], [(1798656, 2), [['in  game.py  you should then be able to write'], ['-10000']], [[" url = '%syear_%s/month_%s/day_%s/%s/' % (BASE, year, month, day, game_id)\n"]], ['basic python module design question'], 3], [(1801459, 0), [['In Python:'], ['If order does not matter:']], [[' >>> L = [2, 1, 4, 3, 5, 1, 2, 1, 1, 6, 5]\n>>> S = set()\n>>> M = []\n>>> for e in L:\n...     if e in S:\n...         continue\n...     S.add(e)\n...     M.append(e)\n... \n>>> M\n[2, 1, 4, 3, 5, 6]\n']], ['Algorithm - How to delete duplicate elements in a list efficiently?'], 2], [(1801459, 1), [['If order does not matter:'], ['-10000']], [[' M = list(set(L))\n']], ['Algorithm - How to delete duplicate elements in a list efficiently?'], 2], [(1801668, 0), [['It can be done with list comprehensions'], ['or with map function']], [[' >>> [x.lower() for x in ["A","B","C"]]\n[\'a\', \'b\', \'c\']\n>>> [x.upper() for x in ["a","b","c"]]\n[\'A\', \'B\', \'C\']\n']], ['Convert a Python list with strings all to lowercase or uppercase'], 2], [(1801668, 1), [['or with map function'], ['-10000']], [[' >>> map(lambda x:x.lower(),["A","B","C"])\n[\'a\', \'b\', \'c\']\n>>> map(lambda x:x.upper(),["a","b","c"])\n[\'A\', \'B\', \'C\']\n']], ['Convert a Python list with strings all to lowercase or uppercase'], 2], [(1803516, 0), [['With this we can use a list comprehension to replace the  NaN  values in a list as follows:'], ['If you have Python 2.5 we can use the  NaN != NaN  trick from  this question  so you do this:']], [[' import math\nmylist = [0 if math.isnan(x) else x for x in mylist]\n']], ['replace the NaN value zero after an operation with arrays'], 2], [(1803516, 1), [['If you have Python 2.5 we can use the  NaN != NaN  trick from  this question  so you do this:'], ['-10000']], [[' mylist = [0 if x != x else x for x in mylist]\n']], ['replace the NaN value zero after an operation with arrays'], 2], [(1803710, 0), [["Use  getattr 's third argument to set distinct default values:"], ['Edit 2:  Indeed, as  Lac  points out, just using  hasattr  results in a more readable solution:']], [[' def __eq__(self, other):\n    return all(getattr(self, a, Ellipsis) == getattr(other, a, Ellipsis)\n               for a in self.metainfo)\n']], ['Python: Can you make this __eq__ easy to understand?'], 2], [(1803710, 1), [['Edit 2:  Indeed, as  Lac  points out, just using  hasattr  results in a more readable solution:'], ["\xa0  † : for extra obscurity you could write  ...  instead of  Ellipsis , thus  getattr(self, a, ...)  etc. No, don't do it :)"]], [[' def __eq__(self, other):\n    return all(hasattr(self, a) == hasattr(other, a) and\n               getattr(self, a) == getattr(other, a) for a in self.metainfo)\n']], ['Python: Can you make this __eq__ easy to understand?'], 2], [(1803860, 0), [['I wonder if masked arrays might do what you want, e.g.,'], ['The other way to do this of is, of course, to first convert the NaNs to 0s then\nmask the 0s:']], [[" import numpy as NP\nA = NP.random.random_integers(0, 9, 16).reshape(4, 4)\ndg = NP.r_[ [NP.nan] * 4 ]  # proper syntax is 'nan' not 'NaN'\ndg = NP.diag(dg)\nA += dg                     # a 4x4 array w/ NaNs down the main diagonal\nNP.sum(A, axis=1)           # doesn't work, gives: array([ NaN,  NaN,  NaN,  NaN])  \nfrom numpy import ma as MA\nAm = **MA.masked_invalid**(A)\nNP.sum(Am, axis=1)         # now it works (treats 'nan' as 0)\n"]], ['Performing operations on a NumPy arrray but masking  values along the diagonal from these operations'], 3], [(1803860, 1), [['The other way to do this of is, of course, to first convert the NaNs to 0s then\nmask the 0s:'], ["Finally, it's often efficient to mask and convert the NaNs in one step:"]], [[' NP.nan_to_num(A)\nMA.masked_equal(A, 0)\n']], ['Performing operations on a NumPy arrray but masking  values along the diagonal from these operations'], 3], [(1803860, 2), [["Finally, it's often efficient to mask and convert the NaNs in one step:"], ["Pretty straightforward, just keep in mind that 'ma' might not yet be in your namespace and also that these functions deal with 'NaNs'  and  'infs', which is usually what you want."]], [[' MA.fix_invalid(A)\n']], ['Performing operations on a NumPy arrray but masking  values along the diagonal from these operations'], 3], [(1805309, 0), [['I would suggest looking at SkipTo as the pyparsing class that is most appropriate, since you have a good definition of the  unwanted  text, but will accept pretty much anything before that.  Here are a couple of ways to use SkipTo:'], ['Both  for  loops print the following:']], [[' text = """\\\n12 items - Ironing Service    11 Mar 2009 to 10 Apr 2009\nWashing service (3 Shirt)  23 Mar 2009"""\n\n# using tok_period as defined in the OP\n\n# parse each line separately\nfor tx in text.splitlines():\n    print SkipTo(tok_period).parseString(tx)[0]\n\n# or have pyparsing search through the whole input string using searchString\nfor [[td,_]] in SkipTo(tok_period,include=True).searchString(text):\n    print td\n']], ['How to write the grammar for this in pyparsing: match a set of words but not containing a given pattern'], 2], [(1805309, 1), [['Both  for  loops print the following:'], ['-10000']], [[' 12 items - Ironing Service    \nWashing service (3 Shirt) \n']], ['How to write the grammar for this in pyparsing: match a set of words but not containing a given pattern'], 2], [(1806472, 0), [['base.html'], ['and your home.html should look like']], [[' <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n    <html xmlns="http://www.w3.org/1999/xhtml">\n    <head>\n <title>{% block title %}{% endblock %}</title> \n <meta http-equiv="content-type" content="text/html;charset=utf-8" />\n  <link rel="stylesheet" type="text/css" href="/media/css/base.css" />\n  <link rel="stylesheet" type="text/css" href="/media/css/login.css" />\n  <link rel="stylesheet" href="/site_media/css/style.css" type="text/css" />\n  <!--[if lte IE 7]><link rel="stylesheet" type="text/css" href="/media/css/ie.css" /><![endif]-->\n </head>\n  <body class="{% block bodyclass %}{% endblock %}">\n  {% block content %}\n\n     <div id="content">\n\n         {% block navigation %}\n             <ul id="top">\n                <li><a class="{% block home %}{% endblock %}" href="/">Home</a></li>\n                <li><a class="{% block myaccount %}{% endblock %}" href="/profile/">My Account</a></li>\n                {% if perms.staffing.add_staffrequest %}\n                 <li><a class="{% block createsr %}{% endblock %}" \n                  href="/create/staffrequest/">Staff Request</a></li>\n                {% endif %}\n             </ul>\n         {% endblock %}\n\n         {% block real_content %}\n         <div id="intro">\n             <p>Hello, {{ user.first_name }}.</p>\n             <p>Please create a Staff Request here by filling out the form below.</p>\n          </div> <!-- end intro -->\n\n          <div id="logout">\n           <a href="/accounts/logout" alt="Sign Off" title="Sign Off">Sign Off</a>\n          </div>\n          {% endblock %}\n\n     </div> <!-- end content -->\n\n\n  {% endblock %} \n  {% block footer %}{% endblock %}\n </body> \n </html>\n']], ['Navigation menu using Django templates'], 2], [(1806472, 1), [['and your home.html should look like'], ['-10000']], [[' {% extends "base.html" %}\n{% block title %}Home Portal{% endblock %}\n\n{% block home %}current{% endblock %}\n\n\n{% block real_content %}\n\n<div id="content">\n\n <div id="intro">\n  <p>Hello, {{ user.first_name }}.</p>\n  <p>Please create a Staff Request here by filling out the form\n  below.</p>\n </div> <!-- end intro -->\n <div id="logout">\n  <a href="/accounts/logout" alt="Sign Off" title="Sign Off">Sign Off</a>\n </div>\n</div> <!-- end content -->\n\n{% endblock %}\n']], ['Navigation menu using Django templates'], 2], [(1806812, 0), [['You can do this with the inspect module:'], ['Result:']], [[' import inspect\n\na = A.NestA\n\nprint a in [x[1] for x in inspect.getmembers(A, inspect.isclass)]\nprint a in [x[1] for x in inspect.getmembers(B, inspect.isclass)]\n']], ['How to find out the nested class hierarchy?'], 4], [(1806812, 1), [['Result:'], ["If you don't know anything about the classes in the module, you can backtrack and get the module."]], [[' True\nFalse\n']], ['How to find out the nested class hierarchy?'], 4], [(1806812, 2), [["If you don't know anything about the classes in the module, you can backtrack and get the module."], ['Result:']], [[' # for each class in a\'s module...\nfor klass in inspect.getmembers(inspect.getmodule(a), inspect.isclass):\n    # see if a is in that class\n    if a in [x[1] for x in inspect.getmembers(klass[1], inspect.isclass)]:\n        print a, "is a member of", klass[0]\n']], ['How to find out the nested class hierarchy?'], 4], [(1806812, 3), [['Result:'], ['-10000']], [[' __main__.NestA is a member of A\n']], ['How to find out the nested class hierarchy?'], 4], [(1807026, 0), [['I would say that your list comprehension method is the most Pythonic:'], ["If you don't want to step on the lexical variable  i , then a convention in Python is to use  _  for a dummy variable whose value doesn't matter:"]], [[' lst = [Object() for i in range(100)]\n']], ['Initialize a list of objects in Python'], 3], [(1807026, 1), [["If you don't want to step on the lexical variable  i , then a convention in Python is to use  _  for a dummy variable whose value doesn't matter:"], ['For an equivalent of the similar construct in Java, you can of course use  * :']], [[' lst = [Object() for _ in range(100)]\n']], ['Initialize a list of objects in Python'], 3], [(1807026, 2), [['For an equivalent of the similar construct in Java, you can of course use  * :'], ['-10000']], [[' lst = [None] * 100\n']], ['Initialize a list of objects in Python'], 3], [(1808522, 0), [['try:'], ['Incidentally you probably want an absolute import:']], [[" B.__module__= 'a'\n"]], ['Masquerading real module of a class'], 3], [(1808522, 1), [['Incidentally you probably want an absolute import:'], ["Yes, I don't think there's a way around that but you could at least automate it, at the end of  __init__ :"]], [[' from a._b import *\n']], ['Masquerading real module of a class'], 3], [(1808522, 2), [["Yes, I don't think there's a way around that but you could at least automate it, at the end of  __init__ :"], ["(For new-style classes only you could get away with  isinstance(value, type)  instead of  inspect . If the module doesn't have to run as  __main__  you could use  __name__  instead of hard-coding  'a' .)"]], [[" for value in globals().values():\n    if inspect.isclass(value) and value.__module__.startswith('a.'):\n        value.__module__= 'a'\n"]], ['Masquerading real module of a class'], 3], [(1809037, 0), [['So'], ['has become']], [[' """\n>>> from packagename import module\n>>> module.show_real_world_usage()\n\'Hello world!\'\n"""\n']], ['Python doctest: Skip entire block?'], 2], [(1809037, 1), [['has become'], ["Epydoc doesn't display this as nicely as it does doctests, but I can live with this. A skip-until-further-notice directive in doctest would be welcome though."]], [[' """\n>> from packagename import module\n>> module.show_real_world_usage()\n\'Hello world!\'\n"""\n']], ['Python doctest: Skip entire block?'], 2], [(1809232, 0), [["Here's how I would approach the problem, using as much laziness as possible:"], ['For a slightly less readable but much more lazy approach, use  enumerate  and  dropwhile :']], [[' from random import randint\nfrom itertools import takewhile, islice\n\nfile = "/etc/passwd"\nf = open(file, "r")\n\nf.seek(randint(10,250))\npos = f.tell()\n\nprint "pos=%d" % pos\n\ndef countbytes(iterable):\n    bytes = 0\n    for item in iterable:\n        bytes += len(item)\n        yield bytes\n\nprint 1+len(list(takewhile(lambda x: x <= pos, countbytes(open(file, "r")))))\n']], ['How to get the current open file line in python?'], 2], [(1809232, 1), [['For a slightly less readable but much more lazy approach, use  enumerate  and  dropwhile :'], ['-10000']], [[' from random import randint\nfrom itertools import islice, dropwhile\n\nfile = "/etc/passwd"\nf = open(file, "r")\n\nf.seek(randint(10,250))\npos = f.tell()\n\nprint "pos=%d" % pos\n\ndef countbytes(iterable):\n    bytes = 0\n    for item in iterable:\n        bytes += len(item)\n        yield bytes\n\nprint list(\n        islice(\n            dropwhile(lambda x: x[1] <= pos, enumerate(countbytes(open(file, "r"))))\n            , 1))[0][0]+1\n']], ['How to get the current open file line in python?'], 2], [(1809531, 0), [['-10000'], ['Here is an example for unicode string where each character is represented with 2 bytes in UTF-8: ']], [[" def unicode_truncate(s, length, encoding='utf-8'):\n    encoded = s.encode(encoding)[:length]\n    return encoded.decode(encoding, 'ignore')\n"]], ['Truncating unicode so it fits a maximum size when encoded for wire transfer'], 2], [(1809531, 1), [['Here is an example for unicode string where each character is represented with 2 bytes in UTF-8: '], ['-10000']], [[" >>> unicode_truncate(u'абвгд', 5)\nu'\\u0430\\u0431'\n"]], ['Truncating unicode so it fits a maximum size when encoded for wire transfer'], 2], [(1810405, 0), [['This is a fantastic use for Python! The  .URL  file format has a syntax like this:'], ['Something like this (very rough, coding in the SO window):']], [[' [InternetShortcut]\nURL=http://www.example.com/\nOtherStuff=irrelevant\n']], ['How can I create a script that manufactures MLA citations?'], 2], [(1810405, 1), [['Something like this (very rough, coding in the SO window):'], ['-10000']], [[' from glob import glob\nfrom urllib2 import urlopen\nfrom ConfigParser import ConfigParser\nfrom re import search\n\n# I use RE here, you might consider BeautifulSoup because RE can be stupid\nTITLE = r"<title>([^<]+)</title>"\n\nresult = []\nfor file in glob("*.url"):\n    config = ConfigParser.ConfigParser()\n    config.read(file)\n    url = config.get("InternetShortcut", "URL")\n\n    # Get the title\n    page = urlopen(url).read()\n    try: title = search(TITLE, page).groups()[0]\n    except: title = "Couldn\'t find title"\n\n    result.append((url, title))\n\nfor url, title in result:\n    print "\'%s\' <%s>" % (title, url)\n']], ['How can I create a script that manufactures MLA citations?'], 2], [(1810432, 0), [['parse() returns a tuple ( result, type ) where type specifies one of:'], ["Here's a little chunk of code that will convert whatever it returns to a proper python datetime:"]], [['    0 = not parsed at all\n   1 = parsed as a date (of type struct_time)\n   2 = parsed as a time (of type struct_time)\n   3 = parsed as a datetime (of type datetime.datetime)\n']], ['Handling the different results from parsedatetime'], 2], [(1810432, 1), [["Here's a little chunk of code that will convert whatever it returns to a proper python datetime:"], ['-10000']], [[' import parsedatetime.parsedatetime as pdt\n\ndef datetimeFromString( s ):\n\n    c = pdt.Calendar()\n    result, what = c.parse( s )\n\n    dt = None\n\n    # what was returned (see http://code-bear.com/code/parsedatetime/docs/)\n    # 0 = failed to parse\n    # 1 = date (with current time, as a struct_time)\n    # 2 = time (with current date, as a struct_time)\n    # 3 = datetime\n    if what in (1,2):\n        # result is struct_time\n        dt = datetime.datetime( *result[:6] )\n    elif what == 3:\n        # result is a datetime\n        dt = result\n\n    if dt is None:\n        # Failed to parse\n        raise ValueError, ("Don\'t understand date \'"+s+"\'")\n\n    return dt\n']], ['Handling the different results from parsedatetime'], 2], [(1810861, 0), [['A simple way with  re.subn , which can also accept a function instead of a replacement string:'], ['Example:']], [[" import re\nfrom random import randint\n\ndef select(m):\n    choices = m.group(1).split('|')\n    return choices[randint(0, len(choices)-1)]\n\ndef spinner(s):\n    r = re.compile('{([^{}]*)}')\n    while True:\n        s, n = r.subn(select, s)\n        if n == 0: break\n    return s.strip()\n"]], ['How to make article spinner regex?'], 3], [(1810861, 1), [['Example:'], ["For people who like to put as much as possible on one line (which I personally wouldn't encourage):"]], [[' >>> s = "{{Hello|Hi|Hey} {world|earth} | {Goodbye|farewell} {noobs|n3wbz|n00blets}}"\n>>> print spinner(s)\n\'farewell n3wbz\'\n']], ['How to make article spinner regex?'], 3], [(1810861, 2), [["For people who like to put as much as possible on one line (which I personally wouldn't encourage):"], ['-10000']], [[' def spin(s):\n    while True:\n        s, n = re.subn(\'{([^{}]*)}\',\n                       lambda m: random.choice(m.group(1).split("|")),\n                       s)\n        if n == 0: break\n    return s.strip()\n']], ['How to make article spinner regex?'], 3], [(1812191, 0), [['To remove all records from the table: '], ['To reset next ID to 1:']], [[' truncate table product\n']], ['Python MySQL: clean multiple foreign keys table'], 3], [(1812191, 1), [['To reset next ID to 1:'], ['or ']], [[' ALTER TABLE product AUTO_INCREMENT = 1\n']], ['Python MySQL: clean multiple foreign keys table'], 3], [(1812191, 2), [['or '], ["(I haven't tested this. But i should work)     "]], [[' SET insert_id;\nINSERT INTO product ...;\n']], ['Python MySQL: clean multiple foreign keys table'], 3], [(1813117, 0), [['To speed up your existing code measurably, add  def main():  before the assignment to  tokenList , indent everything after that 4 spaces, and at the end put the usual idiom'], ['Edit : as the OP has now applied most of my suggestions, let me follow up with one reasonable way to hive off most functionality to a class in a separate module.  In a new file, for example  foobar.py , in the same directory as the original script (or in  site-packages , or elsewhere on  sys.path ), place this code:']], [[" if __name__ == '__main__':\n  main()\n"]], ['Making a Python script Object-Oriented'], 3], [(1813117, 1), [['Edit : as the OP has now applied most of my suggestions, let me follow up with one reasonable way to hive off most functionality to a class in a separate module.  In a new file, for example  foobar.py , in the same directory as the original script (or in  site-packages , or elsewhere on  sys.path ), place this code:'], ['Your main script then becomes just:']], [[" def token_of(line):\n  return line.partition(':')[-1].strip()\n\nclass FileParser(object):\n  def __init__(self, filename):\n    self.tokenList = open(filename, 'r')\n\n  def cleaned_input(self):\n    cleanedInput = []\n    prevLine = 0\n\n    for line in self.tokenList:\n        if line.startswith('LINE:'):\n            lineNo = int(token_of(line))\n            diff = lineNo - prevLine - 1\n            cleanedInput.append('\\n' * (diff if diff>1 else diff+1))\n            prevLine = lineNo\n        else:\n            cleanedLine = token_of(line)\n            cleanedInput.append(cleanedLine + ' ')\n\n    return cleanedInput\n"]], ['Making a Python script Object-Oriented'], 3], [(1813117, 2), [['Your main script then becomes just:'], ['-10000']], [[" import sys\nimport foobar\n\ndef main():\n    thefile = foobar.FileParser(sys.argv[1])\n    print thefile.cleaned_input()\n\nif __name__ == '__main__':\n  main()\n"]], ['Making a Python script Object-Oriented'], 3], [(1813282, 0), [["Edit : the OP says, in a comment, that  execfile  launches a separate process and does not respect the current working directory.  This is false, and here's an example showing that it is:"], ['Running this on my machine produces output such as:']], [[' import os\n\ndef makeascript(where):\n  f = open(where, \'w\')\n  f.write(\'import os\\nprint "Dir in file:", os.getcwd()\\n\')\n  f.close()\n\ndef main():\n  where = \'/tmp/bah.py\'\n  makeascript(where)\n  execfile(where)\n  os.chdir(\'/tmp\')\n  execfile(where)\n\nif __name__ == \'__main__\':\n  main()\n']], ["Python: execfile from other file's working directory?"], 2], [(1813282, 1), [['Running this on my machine produces output such as:'], ["clearly showing that  execfile   does  keep using the working directory that's set at the time  execfile  executes.  (If the file executed changes the working directory, that will be reflected after  execfile  returns -- exactly because everything  is  taking place in the same process!)."]], [[' Dir in file: /Users/aleax/stko\nDir in file: /private/tmp\n']], ["Python: execfile from other file's working directory?"], 2], [(1813777, 0), [['It\'s a bit easier to understand if you explicitly give your Subthings a "related_name" in their relationship to the Thing'], ['Now, you use  Django join syntax  to build your Q object:']], [[" class Subthing(models.Model):\n    ...\n    thing = models.ForeignKey(Thing, related_name='subthings')\n    ...\n"]], ['A puzzle concerning Q objects and Foreign Keys'], 2], [(1813777, 1), [['Now, you use  Django join syntax  to build your Q object:'], ["The reverse relationship has the default name 'subthing_set', but I find that it's easier to follow if you give it a better name like 'subthings'."]], [[" Q(subthings__main=True) & Q(subthings__subproperty=filter['value'])\n"]], ['A puzzle concerning Q objects and Foreign Keys'], 2], [(1813907, 0), [['Perhaps you could do this using a list of include patterns instead, and use  --delete-excluded  (which does as the name suggests)? Something like:'], ['If filenames are likely to contain wildcard characters ( * ,  ?  and  [ ) then you may need to modify the Python to escape them:']], [[' rsync -r --include-from=<patternlistfile> --exclude=* --delete-excluded / dest/\n']], ['rsync --delete --files-from=list / dest/ does not delete unwanted files'], 8], [(1813907, 1), [['If filenames are likely to contain wildcard characters ( * ,  ?  and  [ ) then you may need to modify the Python to escape them:'], ["Edit:  Pattern-based matching works slightly differently to  --files-from  in that  rsync  won't recurse into directories that match the exclude pattern, for reasons of efficiency. So if your files are in  /some/dir  and  /some/other/dir  then your pattern file needs to look like:"]], [[' re.sub("([[*?])", r"\\\\\\1", "abc[def*ghi?klm")\n']], ['rsync --delete --files-from=list / dest/ does not delete unwanted files'], 8], [(1813907, 2), [["Edit:  Pattern-based matching works slightly differently to  --files-from  in that  rsync  won't recurse into directories that match the exclude pattern, for reasons of efficiency. So if your files are in  /some/dir  and  /some/other/dir  then your pattern file needs to look like:"], ['Alternatively, if all files are in the same directory then you could rewrite the command slightly:']], [[' /some/\n/some/dir/\n/some/dir/file1\n/some/dir/file2\n/some/other/\n/some/other/dir/\n/some/other/dir/file3\n...\n']], ['rsync --delete --files-from=list / dest/ does not delete unwanted files'], 8], [(1813907, 3), [['Alternatively, if all files are in the same directory then you could rewrite the command slightly:'], ['and then your patterns become:']], [[' rsync -r --include-from=<patternlistfile> --exclude=* --delete-excluded /some/dir/ dest/\n']], ['rsync --delete --files-from=list / dest/ does not delete unwanted files'], 8], [(1813907, 4), [['and then your patterns become:'], ['Edit:  Thinking about it, you could include all directories with one pattern:']], [[' /file1\n/file2\n']], ['rsync --delete --files-from=list / dest/ does not delete unwanted files'], 8], [(1813907, 5), [['Edit:  Thinking about it, you could include all directories with one pattern:'], ["but then you'd end up with the entire directory tree in  dest/  which probably isn't what you want. But combining it with  -m  (which prunes empty directories) should solve that - so the command ends up something like:"]], [[' /**/\n']], ['rsync --delete --files-from=list / dest/ does not delete unwanted files'], 8], [(1813907, 6), [["but then you'd end up with the entire directory tree in  dest/  which probably isn't what you want. But combining it with  -m  (which prunes empty directories) should solve that - so the command ends up something like:"], ['and the pattern file:']], [[' rsync -m -r --delete-excluded --include-from=<patternfile> --exclude=* / dest/\n']], ['rsync --delete --files-from=list / dest/ does not delete unwanted files'], 8], [(1813907, 7), [['and the pattern file:'], ['-10000']], [[' /**/\n/some/dir/file1\n/some/other/dir/file3\n']], ['rsync --delete --files-from=list / dest/ does not delete unwanted files'], 8], [(1814053, 0), [['You can set the umask directly in python. The interpreter uses this umask to create the pyc files:'], ['Verify the test.pyc created:']], [[' import os\nos.umask(077) # Only keep rights for owner\nimport test\n']], ['python and securing pyc files on disk'], 2], [(1814053, 1), [['Verify the test.pyc created:'], ['-10000']], [[' $> ls -l test.py*\n-rw-r--r-- 1 shad users  0 2009-11-29 00:15 test.py\n-rw------- 1 shad users 94 2009-11-29 00:15 test.pyc\n']], ['python and securing pyc files on disk'], 2], [(1814255, 0), [["Probably in your case it would be better to put a loop showing rows into the template, then you won't need the sub-view and the loop in your main view."], ['and in stuff.html']], [[" def listEventsSummary(request):\n    listEventsSummary = Event.objects.all().order_by('-id')[:20]\n    return render_to_response('stuff.html',{'events':listEventsSummary})\n"]], ['Django, displaying a view in an another view?'], 2], [(1814255, 1), [['and in stuff.html'], ['-10000']], [[' {% for event in events %}\n    <p>{{event.date}} and whatever else...</p>\n{% endfor %}\n']], ['Django, displaying a view in an another view?'], 2], [(1814750, 0), [['I know BeautifulSoup is the canonical HTML parsing module, but sometimes you just want to scrape out some substrings from some HTML, and pyparsing has some useful methods to do this.  Using this code:'], ['I extracted 914 references from your page, from Abel to Zupikova.']], [[' from pyparsing import makeHTMLTags, withAttribute, SkipTo\nimport urllib\n\n# get the HTML from your URL\nurl = "http://www.whitecase.com/Attorneys/List.aspx?LastName=&FirstName="\npage = urllib.urlopen(url)\nhtml = page.read()\npage.close()\n\n# define opening and closing tag expressions for <td> and <a> tags\n# (makeHTMLTags also comprehends tag variations, including attributes, \n# upper/lower case, etc.)\ntdStart,tdEnd = makeHTMLTags("td")\naStart,aEnd = makeHTMLTags("a")\n\n# only interested in tdStarts if they have "class=altRow" attribute\ntdStart.setParseAction(withAttribute(("class","altRow")))\n\n# compose total matching pattern (add trailing tdStart to filter out \n# extraneous <td> matches)\npatt = tdStart + aStart("a") + SkipTo(aEnd)("text") + aEnd + tdEnd + tdStart\n\n# scan input HTML source for matching refs, and print out the text and \n# href values\nfor ref,s,e in patt.scanString(html):\n    print ref.text, ref.a.href\n']], ['How can I translate this XPath expression to BeautifulSoup?'], 2], [(1814750, 1), [['I extracted 914 references from your page, from Abel to Zupikova.'], ['-10000']], [[' Abel, Christian /cabel\nAcevedo, Linda Jeannine /jacevedo\nAcuÃ±a, Jennifer /jacuna\nAdeyemi, Ike /igbadegesin\nAdler, Avraham /aadler\n...\nZhu, Jie /jzhu\nZÃ\xaddek, AleÅ¡ /azidek\nZiÃ³Å‚ek, Agnieszka /aziolek\nZitter, Adam /azitter\nZupikova, Jana /jzupikova\n']], ['How can I translate this XPath expression to BeautifulSoup?'], 2], [(1815760, 0), [["Edit:   THC4K's answer  shows an example of how to do this, assuming that all output should be silent if  QUIET  is set. Note that in Python 3  from __future__ import print_function  is not necessary:"], ['For for important output that should not be silenced by  --quiet , define e.g.  iprint :']], [[' print = logging.info\nlogging.basicConfig(level=logging.WARNING if QUIET else logging.INFO,\n                    format="%(message)s")\n']], ["What's an easy way to implement a --quiet option in a python script"], 2], [(1815760, 1), [['For for important output that should not be silenced by  --quiet , define e.g.  iprint :'], ['-10000']], [[' iprint = logging.warning\n']], ["What's an easy way to implement a --quiet option in a python script"], 2], [(1816176, 0), [['Looking at the code at  django/utils/dateformat.py :'], ['On reflection you could probably do this;']], [['   def O(self):\n    "Difference to Greenwich time in hours; e.g. \'+0200\'"\n    seconds = self.Z()\n    return u"%+03d%02d" % (seconds // 3600, (seconds // 60) % 60)\n']], ["How to convert seconds to hh:mm:ss with the Django's date template tag?"], 3], [(1816176, 1), [['On reflection you could probably do this;'], ["and then add the ':' "]], [[' >>> from django.utils import dateformat\n>>> fmt = "Y-m-d\\TH:i:sO"\n>>> import datetime\n>>> now = datetime.datetime.now()\n>>> now\ndatetime.datetime(2009, 12, 1, 12, 39, 48, 655867)\n>>> str = dateformat.format(now, fmt)\n>>> print str\n2009-12-01T12:39:48+0000\n>>>\n']], ["How to convert seconds to hh:mm:ss with the Django's date template tag?"], 3], [(1816176, 2), [["and then add the ':' "], ['-10000']], [[" >>> s = str[:-2] + ':' + str[-2:]\n>>> s\nu'2009-12-01T12:39:48+00:00'\n>>> \n"]], ["How to convert seconds to hh:mm:ss with the Django's date template tag?"], 3], [(1816388, 0), [['Make a file (in your PYTHONPATH) called test.py'], ['Then in the emacs python shell (or better yet, the ipython shell), type']], [[" def foo():\n    print('bar')\n"]], ['Reloading a changed python file in emacs python shell'], 3], [(1816388, 1), [['Then in the emacs python shell (or better yet, the ipython shell), type'], ['Now modify test.py:']], [[' >>> import test\n>>> test.foo()\nbar\n']], ['Reloading a changed python file in emacs python shell'], 3], [(1816388, 2), [['Now modify test.py:'], ['-10000']], [[" def foo():\n    print('baz')\n\n>>> reload(test)\n<module 'test' from '/home/unutbu/pybin/test.py'>\n>>> test.foo()\nbaz\n"]], ['Reloading a changed python file in emacs python shell'], 3], [(1816483, 0), [['The savings may not be immediately obvious -- consider...:'], ['From this, it would seem the with-slots size is  larger  than the no-slots size!  But that\'s a mistake, because  sys.getsizeof  doesn\'t consider "object contents" such as the dictionary:']], [[" >>> class NoSlots(object): pass\n... \n>>> n = NoSlots()\n>>> class WithSlots(object): __slots__ = 'a', 'b', 'c'\n... \n>>> w = WithSlots()\n>>> n.a = n.b = n.c = 23\n>>> w.a = w.b = w.c = 23\n>>> sys.getsizeof(n)\n32\n>>> sys.getsizeof(w)\n36\n"]], ['Python: How does inheritance of __slots__ in subclasses actually work?'], 7], [(1816483, 1), [['From this, it would seem the with-slots size is  larger  than the no-slots size!  But that\'s a mistake, because  sys.getsizeof  doesn\'t consider "object contents" such as the dictionary:'], ['Since the dict alone takes 140 bytes, clearly the "32 bytes" object  n  is alleged to take are not considering all that\'s involved in each instance.  You can do a better job with third-party extensions such as  pympler :']], [[' >>> sys.getsizeof(n.__dict__)\n140\n']], ['Python: How does inheritance of __slots__ in subclasses actually work?'], 7], [(1816483, 2), [['Since the dict alone takes 140 bytes, clearly the "32 bytes" object  n  is alleged to take are not considering all that\'s involved in each instance.  You can do a better job with third-party extensions such as  pympler :'], ["This shows much more clearly the memory footprint that's saved by  __slots__ : for a simple object such as this case, it's a bit less than 200 bytes, almost 2/3 of the object's overall footprint.  Now, since these days a megabyte more or less doesn't really matter all that much to most applications, this also tells you that  __slots__  is not worth the bother if you're going to have just a few thousand instances around at a time -- however, for millions of instances, it sure does make a very important difference. You can also get a microscopic speedup (partly due to better cache use for small objects with  __slots__ ):"]], [[' >>> import pympler.asizeof\n>>> pympler.asizeof.asizeof(w)\n96\n>>> pympler.asizeof.asizeof(n)\n288\n']], ['Python: How does inheritance of __slots__ in subclasses actually work?'], 7], [(1816483, 3), [["This shows much more clearly the memory footprint that's saved by  __slots__ : for a simple object such as this case, it's a bit less than 200 bytes, almost 2/3 of the object's overall footprint.  Now, since these days a megabyte more or less doesn't really matter all that much to most applications, this also tells you that  __slots__  is not worth the bother if you're going to have just a few thousand instances around at a time -- however, for millions of instances, it sure does make a very important difference. You can also get a microscopic speedup (partly due to better cache use for small objects with  __slots__ ):"], ["Now, regarding inheritance: for an instance to be dict-less,  all  classes up its inheritance chain must also have dict-less instances.  Classes with dict-less instances are those which define  __slots__ , plus most built-in types (built-in types whose instances have dicts are those on whose instances you can set arbitrary attributes, such as functions). Overlaps in slot names are not forbidden, but they're useless and waste some memory, since slots are inherited:"]], [[' $ python -mtimeit -s\'class S(object): __slots__="x","y"\' -s\'s=S(); s.x=s.y=23\' \'s.x\'\n10000000 loops, best of 3: 0.37 usec per loop\n$ python -mtimeit -s\'class S(object): pass\' -s\'s=S(); s.x=s.y=23\' \'s.x\'\n1000000 loops, best of 3: 0.604 usec per loop\n$ python -mtimeit -s\'class S(object): __slots__="x","y"\' -s\'s=S(); s.x=s.y=23\' \'s.x=45\'\n1000000 loops, best of 3: 0.28 usec per loop\n$ python -mtimeit -s\'class S(object): pass\' -s\'s=S(); s.x=s.y=23\' \'s.x=45\'\n1000000 loops, best of 3: 0.332 usec per loop\n']], ['Python: How does inheritance of __slots__ in subclasses actually work?'], 7], [(1816483, 4), [["Now, regarding inheritance: for an instance to be dict-less,  all  classes up its inheritance chain must also have dict-less instances.  Classes with dict-less instances are those which define  __slots__ , plus most built-in types (built-in types whose instances have dicts are those on whose instances you can set arbitrary attributes, such as functions). Overlaps in slot names are not forbidden, but they're useless and waste some memory, since slots are inherited:"], ["as you see, you can set attribute  a  on an  AB  instance --  AB  itself only defines slot  b , but it inherits slot  a  from  A .  Repeating the inherited slot isn't forbidden:"]], [[" >>> class A(object): __slots__='a'\n... \n>>> class AB(A): __slots__='b'\n... \n>>> ab=AB()\n>>> ab.a = ab.b = 23\n>>> \n"]], ['Python: How does inheritance of __slots__ in subclasses actually work?'], 7], [(1816483, 5), [["as you see, you can set attribute  a  on an  AB  instance --  AB  itself only defines slot  b , but it inherits slot  a  from  A .  Repeating the inherited slot isn't forbidden:"], ['but does waste a little memory:']], [[" >>> class ABRed(A): __slots__='a','b'\n... \n>>> abr=ABRed()\n>>> abr.a = abr.b = 23\n"]], ['Python: How does inheritance of __slots__ in subclasses actually work?'], 7], [(1816483, 6), [['but does waste a little memory:'], ["so there's really no reason to do it."]], [[' >>> pympler.asizeof.asizeof(ab)\n88\n>>> pympler.asizeof.asizeof(abr)\n96\n']], ['Python: How does inheritance of __slots__ in subclasses actually work?'], 7], [(1817144, 0), [['MyModWithContstants.py'], ['anotherMod.py']], [[' x = 0\ny = 0\n\ndef someFunc():\n  dosomethingwithconstants(x,y)\n']], ['Constants in python?'], 2], [(1817144, 1), [['anotherMod.py'], ['-10000']], [[' from MyModWithConstants import x\n# and also we can do\nimport MyModWithConstants as MMWC\n\ndef somOtherFunc():\n  dosomethingNew(x, MMWC.y)  \n  ## x and MMWC.y both refer to things in the other file\n']], ['Constants in python?'], 2], [(1817886, 0), [['-10000'], ['The simplest and ugliest way that just gets the job done is:']], [[' Iterate over each element in the list\n  Unpack the element (which is also a list) into its fields\n  Generate a SQL line from these fields\n']], ['Format Python List to SQL script?'], 2], [(1817886, 1), [['The simplest and ugliest way that just gets the job done is:'], ["Note I cleaned the '\\n' after the 0 (adapt accordingly if it's needed there).\nThis is OK for one-off scripts. For more serious reporting and conversions, look at some template libraries to separate your data and presentation."]], [[' list = [\n    [\'11\', \' 0\', " \'MMB\'", " \'2 MB INTERNATIONAL\'", \' NULL\', \' NULL\', \' 0\'], \n    [\'12\', \' 0\', " \'3D STRUCTURES\'", " \'3D STRUCTURES\'", \' NULL\', \' NULL\', \' 0\'],\n    [\'13\', \' 0\', " \'2 STRUCTURES\'", " \'2D STRUCTURES\'", \' NULL\', \' NULL\', \' 0\']]\n\nfor elem in list:\n    print \'INSERT INTO \\\'Tbl_ABS\\\' VALUES (%s, %s, %s, %s, %s, %s, %s)\' % tuple(elem)\n']], ['Format Python List to SQL script?'], 2], [(1822934, 0), [['It should just be '], ['to use additional assemblies, first need to import  clr  then add a reference to additional assemblies']], [[' import [namespace]\n']], ['How do I reference classes using IronPython?'], 3], [(1822934, 1), [['to use additional assemblies, first need to import  clr  then add a reference to additional assemblies'], ['You generally create instance of classes like so']], [[' import clr\nclr.AddReference("System.Xml")\nfrom System.Xml import *\n']], ['How do I reference classes using IronPython?'], 3], [(1822934, 2), [['You generally create instance of classes like so'], ['-10000']], [[' from System.Collections import *\n# create an instance of Hashtable\nh = Hashtable() \n\nfrom System.Collections.Generic import *\n# create an instance of List<string>\nl = List[str]()\n']], ['How do I reference classes using IronPython?'], 3], [(1825187, 0), [['You can pass functions to  .findall()  like this:'], ['But you might be better off by first building a list of tags and then iterating over it:']], [[' soup.findAll(lambda tag: tag.name in [\'script\', \'form\'] or tag[\'id\'] == "footer")\n']], ["Can I combine two 'findAll' search blocks in beautifulsoup, into one?"], 4], [(1825187, 1), [['But you might be better off by first building a list of tags and then iterating over it:'], ['If you want to filter for several  id s, you can use:']], [[' tags = soup.findAll([\'script\', \'form\'])\ntags.extend(soup.findAll(id="footer"))\n\nfor tag in tags:\n    tag.extract()\n']], ["Can I combine two 'findAll' search blocks in beautifulsoup, into one?"], 4], [(1825187, 2), [['If you want to filter for several  id s, you can use:'], ['A more specific approach would be to assign a lambda to the  id  parameter:']], [[" for tag in soup.findAll(lambda tag: tag.has_key('id') and\n                                    tag['id'] in ['footer', 'content', 'links']):\n    tag.extract()\n"]], ["Can I combine two 'findAll' search blocks in beautifulsoup, into one?"], 4], [(1825187, 3), [['A more specific approach would be to assign a lambda to the  id  parameter:'], ['-10000']], [[" for tag in soup.findAll(id=lambda value: value in ['footer', 'content', 'links']):\n    tag.extract()\n"]], ["Can I combine two 'findAll' search blocks in beautifulsoup, into one?"], 4], [(1825715, 0), [['FAQ: How do I copy bytes to Python from a ctypes.Structure?'], ['FAQ: How do I copy bytes to a ctypes.Structure from Python?']], [[' def send(self):\n    return buffer(self)[:]\n']], ['How to pack and unpack using ctypes (Structure <-> str)'], 2], [(1825715, 1), [['FAQ: How do I copy bytes to a ctypes.Structure from Python?'], ['Their  send  is the (more-or-less) equivalent of  pack , and  receiveSome  is sort of a  pack_into .  If you have a "safe" situation where you\'re unpacking into a struct of the same type as the original, you can one-line it like   memmove(addressof(y), buffer(x)[:], sizeof(y))  to copy  x  into  y .  Of course, you\'ll probably have a variable as the second argument, rather than a literal packing of  x .']], [[' def receiveSome(self, bytes):\n    fit = min(len(bytes), ctypes.sizeof(self))\n    ctypes.memmove(ctypes.addressof(self), bytes, fit)\n']], ['How to pack and unpack using ctypes (Structure <-> str)'], 2], [(1827489, 0), [['Here is the source code of meshgrid:'], ['It is fairly simple to understand.  I extended the pattern to an arbitrary number of dimensions, but this code is by no means optimized (and not thoroughly error-checked either), but you get what you pay for.  Hope it helps:']], [[' def meshgrid(x,y):\n    """\n    Return coordinate matrices from two coordinate vectors.\n\n    Parameters\n    ----------\n    x, y : ndarray\n        Two 1-D arrays representing the x and y coordinates of a grid.\n\n    Returns\n    -------\n    X, Y : ndarray\n        For vectors `x`, `y` with lengths ``Nx=len(x)`` and ``Ny=len(y)``,\n        return `X`, `Y` where `X` and `Y` are ``(Ny, Nx)`` shaped arrays\n        with the elements of `x` and y repeated to fill the matrix along\n        the first dimension for `x`, the second for `y`.\n\n    See Also\n    --------\n    index_tricks.mgrid : Construct a multi-dimensional "meshgrid"\n                         using indexing notation.\n    index_tricks.ogrid : Construct an open multi-dimensional "meshgrid"\n                         using indexing notation.\n\n    Examples\n    --------\n    >>> X, Y = np.meshgrid([1,2,3], [4,5,6,7])\n    >>> X\n    array([[1, 2, 3],\n           [1, 2, 3],\n           [1, 2, 3],\n           [1, 2, 3]])\n    >>> Y\n    array([[4, 4, 4],\n           [5, 5, 5],\n           [6, 6, 6],\n           [7, 7, 7]])\n\n    `meshgrid` is very useful to evaluate functions on a grid.\n\n    >>> x = np.arange(-5, 5, 0.1)\n    >>> y = np.arange(-5, 5, 0.1)\n    >>> xx, yy = np.meshgrid(x, y)\n    >>> z = np.sin(xx**2+yy**2)/(xx**2+yy**2)\n\n    """\n    x = asarray(x)\n    y = asarray(y)\n    numRows, numCols = len(y), len(x)  # yes, reversed\n    x = x.reshape(1,numCols)\n    X = x.repeat(numRows, axis=0)\n\n    y = y.reshape(numRows,1)\n    Y = y.repeat(numCols, axis=1)\n    return X, Y\n']], ['Numpy meshgrid in 3D'], 2], [(1827489, 1), [['It is fairly simple to understand.  I extended the pattern to an arbitrary number of dimensions, but this code is by no means optimized (and not thoroughly error-checked either), but you get what you pay for.  Hope it helps:'], ['-10000']], [[' def meshgrid2(*arrs):\n    arrs = tuple(reversed(arrs))  #edit\n    lens = map(len, arrs)\n    dim = len(arrs)\n\n    sz = 1\n    for s in lens:\n        sz*=s\n\n    ans = []    \n    for i, arr in enumerate(arrs):\n        slc = [1]*dim\n        slc[i] = lens[i]\n        arr2 = asarray(arr).reshape(slc)\n        for j, sz in enumerate(lens):\n            if j!=i:\n                arr2 = arr2.repeat(sz, axis=j) \n        ans.append(arr2)\n\n    return tuple(ans)\n']], ['Numpy meshgrid in 3D'], 2], [(1829205, 0), [['source file 1:'], ['source file 2:']], [[' # foo.py\nclass Foo: pass\n']], ['python modify __metaclass__ for whole program'], 4], [(1829205, 1), [['source file 2:'], ['source file 3:']], [[' # bar.py\nclass Bar: pass\n']], ['python modify __metaclass__ for whole program'], 4], [(1829205, 2), [['source file 3:'], ['and the main event:']], [[' # baaz.py\nclass Baaz: pass\n']], ['python modify __metaclass__ for whole program'], 4], [(1829205, 3), [['and the main event:'], ['-10000']], [[' # chattyimport.py\nimport imp\nimport sys\nimport types\n\nclass ChattyType(type):\n    def __init__(cls, name, bases, dct):\n        print "Class init", name\n        super(ChattyType, cls).__init__(name, bases, dct)\n\nclass ChattyImporter(object):\n\n    __chatty_for__ = []\n\n    def __init__(self, path_entry):\n        pass\n\n    def find_module(self, fullname, path=None):\n        if fullname not in self.__chatty_for__:\n            return None\n        try:\n            if path is None:\n                self.find_results = imp.find_module(fullname)\n            else:\n                self.find_results = imp.find_module(fullname, path)\n        except ImportError:\n            return None\n        (f,fn,(suf,mode,typ)) = self.find_results\n        if typ == imp.PY_SOURCE:\n            return self\n        return None\n\n    def load_module(self, fullname):\n        #print \'%s loading module %s\' % (type(self).__name__, fullname)\n        (f,fn,(suf,mode,typ)) = self.find_results\n        data = f.read()\n        if fullname in sys.modules:\n            module = sys.modules[fullname]\n        else:\n            sys.modules[fullname] = module = types.ModuleType(fullname)\n\n        module.__metaclass__ = ChattyType\n        module.__file__ = fn\n        module.__name__ = fullname\n        codeobj = compile(data, fn, \'exec\')\n        exec codeobj in module.__dict__\n        return module\n\nclass ChattyImportSomeModules(ChattyImporter):\n    __chatty_for__ = \'foo bar\'.split()\n\nsys.meta_path.append(ChattyImportSomeModules(\'\'))\n\nimport foo # prints \'Class init Foo\'\nimport bar # prints \'Class init Bar\'\nimport baaz\n']], ['python modify __metaclass__ for whole program'], 4], [(1829340, 0), [['Perhaps the function you are seeking is  matplotlib.mlab.rec_groupby :'], ['yields']], [[" import matplotlib.mlab\n\ndata=np.array(\n    [('Aaron','Digger',1),\n     ('Bill','Planter',2),\n     ('Carl','Waterer',3),\n     ('Darlene','Planter',3),\n     ('Earl','Digger',7)],\n    dtype=[('name', np.str_,8), ('job', np.str_,8), ('income', np.uint32)])\n\nresult=matplotlib.mlab.rec_groupby(data, ('job',), (('income',np.mean,'avg_income'),))\n"]], ['pythonic way to aggregate arrays (numpy or not)'], 3], [(1829340, 1), [['yields'], ['matplotlib.mlab.rec_groupby  returns a recarray:']], [[" ('Digger', 4.0)\n('Planter', 2.5)\n('Waterer', 3.0)\n"]], ['pythonic way to aggregate arrays (numpy or not)'], 3], [(1829340, 2), [['matplotlib.mlab.rec_groupby  returns a recarray:'], ['You may also be interested in checking out  pandas , which has even  more versatile facilities  for handling  group-by operations .']], [[" print(result.dtype)\n# [('job', '|S7'), ('avg_income', '<f8')]\n"]], ['pythonic way to aggregate arrays (numpy or not)'], 3], [(1829470, 0), [['-10000'], ["Now let's generalize it (to take any iterable, loosen hashable requirement), allow key and reverse parameters (to match sorted), and rename to  freq_sorted :"]], [[' import collections\n\ndata = [\n  [1, 2, 3, 4, 5],\n  [1, 9, 3, 4, 5],\n  [1, 10, 8, 4, 5],\n  [1, 12, 13, 7, 5],\n  [1, 14, 13, 13, 6],\n]\n\ndef sorted_by_count(lists):\n  counts = collections.defaultdict(int)\n  for L in lists:\n    for n in L:\n      counts[n] += 1\n\n  return [num for num, count in\n          sorted(counts.items(),\n                 key=lambda k_v: (k_v[1], k_v[0]),\n                 reverse=True)]\n\nprint sorted_by_count(data)\n']], ['Ranking Elements of multiple Lists by their count in Python'], 3], [(1829470, 1), [["Now let's generalize it (to take any iterable, loosen hashable requirement), allow key and reverse parameters (to match sorted), and rename to  freq_sorted :"], ['Example:']], [[' def freq_sorted(iterable, key=None, reverse=False, include_freq=False):\n  """Return a list of items from iterable sorted by frequency.\n\n  If include_freq, (item, freq) is returned instead of item.\n\n  key(item) must be hashable, but items need not be.\n\n  *Higher* frequencies are returned first.  Within the same frequency group,\n  items are ordered according to key(item).\n  """\n  if key is None:\n    key = lambda x: x\n\n  key_counts = collections.defaultdict(int)\n  items = {}\n  for n in iterable:\n    k = key(n)\n    key_counts[k] += 1\n    items.setdefault(k, n)\n\n  if include_freq:\n    def get_item(k, c):\n      return items[k], c\n  else:\n    def get_item(k, c):\n      return items[k]\n\n  return [get_item(k, c) for k, c in\n          sorted(key_counts.items(),\n                 key=lambda kc: (-kc[1], kc[0]),\n                 reverse=reverse)]\n']], ['Ranking Elements of multiple Lists by their count in Python'], 3], [(1829470, 2), [['Example:'], ['-10000']], [[' >>> import itertools\n>>> print freq_sorted(itertools.chain.from_iterable(data))\n[1, 5, 4, 13, 3, 2, 6, 7, 8, 9, 10, 12, 14]\n>>> print freq_sorted(itertools.chain.from_iterable(data), include_freq=True)\n# (slightly reformatted)\n[(1, 5),\n (5, 4),\n (4, 3), (13, 3),\n (3, 2),\n (2, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (12, 1), (14, 1)]\n']], ['Ranking Elements of multiple Lists by their count in Python'], 3], [(1829926, 0), [['from the  docs :'], ['so this should work:']], [[' notification.send([to_user], "friends_invite", {"from_user": from_user})\n']], ['reusable application for django site wide announcements that displays a message only once per user'], 3], [(1829926, 1), [['so this should work:'], ['and if a queryset isnt right:']], [[' notification.send(Users.objects.all(), "friends_invite", {"from_user": from_user})\n']], ['reusable application for django site wide announcements that displays a message only once per user'], 3], [(1829926, 2), [['and if a queryset isnt right:'], ['-10000']], [[' notification.send([u for u in Users.objects.all()], "friends_invite", {"from_user": from_user})\n']], ['reusable application for django site wide announcements that displays a message only once per user'], 3], [(1831218, 0), [['-10000'], ['Building on other answers, an example of filtering a list of  mytup  objects:']], [[" >>> import collections\n>>> mytup = collections.namedtuple('mytup', ['tag','name', 'values'])\n>>> e1 = mytup('tag1','great',[1,'two',3])\n>>> e1\nmytup(tag='tag1', name='great', values=[1, 'two', 3])\n>>> e1.values\n[1, 'two', 3]\n>>> \n"]], ['Is there a tuple data structure in Python'], 2], [(1831218, 1), [['Building on other answers, an example of filtering a list of  mytup  objects:'], ['Namedtuple  objects can, of course, be used in other structures (e.g a  dict ), as mentioned in other answers. The advantage is, obviously, that the fields are  named , and code using them is clearer.']], [[' >>> tlist = [mytup("foo", "dog", [1,2,3,4]),\n    mytup("bar","cat", [4,5,6,7,8,9]), mytup("moo","cow", [4,5,7,8,9,1,3,4,65])]\n>>> tlist\n[mytup(tag=\'foo\', name=\'dog\', values=[1, 2, 3, 4]),\nmytup(tag=\'bar\', name=\'cat\', values=[4, 5, 6, 7, 8, 9]),\nmytup(tag=\'moo\', name=\'cow\', values=[4, 5, 7, 8, 9, 1, 3, 4, 65])]\n>>> [t for t in tlist if t.tag == \'bar\']\n[mytup(tag=\'bar\', name=\'cat\', values=[4, 5, 6, 7, 8, 9])]\n>>> \n']], ['Is there a tuple data structure in Python'], 2], [(1831979, 0), [['Perform a  file  check against the  _mysql.so  file:'], ['For example, a Universal binary (such as the pre-installed version of Python) would look like this:']], [[' % file _mysql.so\n_mysql.so: Mach-O 64-bit bundle x86_64\n']], ["Why _mysql.co that compiled on one Mac doesn't work on another?"], 2], [(1831979, 1), [['For example, a Universal binary (such as the pre-installed version of Python) would look like this:'], ["So to answer your question:  Yes, it seems like you might have compiled the module without Universal support, however I can't answer this definitively without more information. "]], [[' % file /usr/bin/python\n/usr/bin/python: Mach-O universal binary with 3 architectures\n/usr/bin/python (for architecture x86_64):      Mach-O 64-bit executable x86_64\n/usr/bin/python (for architecture i386):        Mach-O executable i386\n/usr/bin/python (for architecture ppc7400):     Mach-O executable ppc\n']], ["Why _mysql.co that compiled on one Mac doesn't work on another?"], 2], [(1832997, 0), [['So I think it would be acceptable to\n  this into a call to a new (hidden)\n  built-in function, named\n   __build_class__ . Then that this class definition:'], ['would translate into this:']], [['   class C(A, B, metaclass=M, other=42, *more_bases, *more_kwds):\n    ...\n']], ["What does Python's builtin __build_class__ do?"], 2], [(1832997, 1), [['would translate into this:'], ['where  <func>  is a function object for\n  the class body.']], [["   C = __build_class__(<func>, 'C', A, B, metaclass=M, other=42,\n*more_bases, *more_kwds)\n"]], ["What does Python's builtin __build_class__ do?"], 2], [(1834610, 0), [['Well it seems that using app.yaml works out:'], ['Which allows me to refer to image a.jpg in folder my_app/media with a url like:']], [[' - url: /my_app/media/\n  static_dir: my_app/media\n']], ['Serving simple image with App Engine django patch?'], 2], [(1834610, 1), [['Which allows me to refer to image a.jpg in folder my_app/media with a url like:'], ['-10000']], [[' <img src="/my_app/media/a.jpg" />\n']], ['Serving simple image with App Engine django patch?'], 2], [(1835391, 0), [["The  row_key  and  col_key  that you supply don't need to be strings as in the example; they can be tuples -- e.g.  (year, week)  in your case -- or they could be integers -- e.g. you have a mapping of string column name to integer sort key."], ['Output:']], [[' import sys\n\nclass CrossTab(object):\n\n    def __init__(\n        self,\n        missing=0, # what to return for an empty cell. Alternatives: \'\', 0.0, None, \'NULL\'\n        ):\n        self.missing = missing\n        self.col_key_set = set()\n        self.cell_dict = {}\n        self.headings_OK = False\n\n    def add_item(self, row_key, col_key, value):\n        self.col_key_set.add(col_key)\n        try:\n            self.cell_dict[row_key][col_key] += value\n        except KeyError:\n            try:\n                self.cell_dict[row_key][col_key] = value\n            except KeyError:\n                self.cell_dict[row_key] = {col_key: value}\n\n    def _process_headings(self):\n        if self.headings_OK:\n            return\n        self.row_headings = list(sorted(self.cell_dict.iterkeys()))\n        self.col_headings = list(sorted(self.col_key_set))\n        self.headings_OK = True\n\n    def get_col_headings(self):\n        self._process_headings()\n        return self.col_headings\n\n    def generate_row_info(self):\n        self._process_headings()\n        for row_key in self.row_headings:\n            row_dict = self.cell_dict[row_key]\n            row_vals = [row_dict.get(col_key, self.missing) for col_key in self.col_headings]\n            yield row_key, row_vals\n\n    def dump(self, f=None, header=None, footer=\'\', ):\n        if f is None:\n            f = sys.stdout\n        alist = self.__dict__.items()\n        alist.sort()\n        if header is not None:\n            print >> f, header\n        for attr, value in alist:\n            print >> f, "%s: %r" % (attr, value)\n        if footer is not None:\n            print >> f, footer\n\nif __name__ == "__main__":\n\n    data = [\n        [\'Rob\', \'Morn\', 240],\n        [\'Rob\', \'Aft\',  300],\n        [\'Joe\', \'Morn\',  70],\n        [\'Joe\', \'Aft\',   80],\n        [\'Jill\', \'Morn\', 100],\n        [\'Jill\', \'Aft\',  150],\n        [\'Rob\', \'Aft\',   40],\n        [\'Rob\', \'aft\',    5],\n        [\'Dozy\', \'Aft\',   1],\n        # Dozy doesn\'t show up till lunch-time\n        [\'Nemo\', \'never\', -1],\n        ]\n    NAME, TIME, AMOUNT = range(3)\n    xlate_time = {\'morn\': "AM", "aft": "PM"}\n\n    print\n    ctab = CrossTab(missing=None, )\n    # ctab.dump(header=\'=== after init ===\')\n    for s in data:\n        ctab.add_item(\n            row_key=s[NAME],\n            col_key= xlate_time.get(s[TIME].lower(), "XXXX"),\n            value=s[AMOUNT])\n        # ctab.dump(header=\'=== after add_item ===\')\n    print ctab.get_col_headings()\n    # ctab.dump(header=\'=== after get_col_headings ===\')\n    for x in ctab.generate_row_info():\n        print x\n']], ['Pivoting SQLite table, setwise like SQL should be'], 2], [(1835391, 1), [['Output:'], ['-10000']], [[" ['AM', 'PM', 'XXXX']\n('Dozy', [None, 1, None])\n('Jill', [100, 150, None])\n('Joe', [70, 80, None])\n('Nemo', [None, None, -1])\n('Rob', [240, 345, None])\n"]], ['Pivoting SQLite table, setwise like SQL should be'], 2], [(1836721, 0), [['You can fix it by eiditing either the urls.py regex or the .htaccess regex:'], ['-10000']], [["In Django '^blog/0*(?P<object_id>\\d+)/detail$'\n"]], ['Can I remove leading zeros in a url in django?'], 2], [(1836721, 1), [['-10000'], ['-10000']], [['In .htaccess RewriteRule ^blog-0*([0-9]+) http://example.com/blog/$1 [R=301]\n']], ['Can I remove leading zeros in a url in django?'], 2], [(1836881, 0), [['models.py'], ['effects\\spells.py']], [[" class Skill(models.Model):\n    name = models.CharField()\n    cost = models.PositiveIntegerField()\n    effects = models.ManyToManyField(Effect)\n\nclass Effect(models.Model):\n    description = models.CharField()\n    action = models.CharField()\n\n    # Each Django model has a ContentType.  So you could store the contenttypes of\n    # the Player, Enemy, and Breakable model for example\n    objects_usable_on = models.ManyToManyField(ContentType)\n\n    def do_effect(self, **kwargs):\n        // self.action contains the python module to execute\n        // for example self.action = 'effects.spells.frost_damage'\n        // So when called it would look like this:\n        // Effect.do_effect(damage=50, target=target)\n        // 'damage=50' gets passed to actions.spells.frost_damage as\n        // a keyword argument    \n\n        action = __import__(self.action)\n        action(**kwargs)\n"]], ['Django-based skill implementation'], 2], [(1836881, 1), [['effects\\spells.py'], ['-10000']], [[" def frost_damage(**kwargs):\n    if 'damage' in kwargs:\n        target.life -= kwargs['damage']\n\n        if target.left <= 0:\n            # etc. etc.\n"]], ['Django-based skill implementation'], 2], [(1837308, 0), [['CSS:'], ['HTML:']], [[' div.resttext p {\n    /* all the styling you want... */\n}\n']], ['How to get restructuredText to add a class to every html <p> tag?'], 3], [(1837308, 1), [['HTML:'], ['Update: since you are trying to use hyphenator.js, I would suggest using its  selectorfunction  setting to select the elements differently:']], [[" <div class='resttext'>\n<p>Blah</p>\n<p>Bloo</p>\n</div>\n"]], ['How to get restructuredText to add a class to every html <p> tag?'], 3], [(1837308, 2), [['Update: since you are trying to use hyphenator.js, I would suggest using its  selectorfunction  setting to select the elements differently:'], ['-10000']], [[" Hyphenator.config({\n    selectorfunction: function () {\n        /* Use jQuery to find all the REST p tags. */\n        return $('div.resttext p');\n        }\n    });\nHyphenator.run();\n"]], ['How to get restructuredText to add a class to every html <p> tag?'], 3], [(1840628, 0), [['A property is a descriptor, and descriptors only work on new-style classes.  Try:'], ['instead of:']], [[' class User(object): ...\n']], ['How do I call a property setter from __init__'], 2], [(1840628, 1), [['instead of:'], ['A good guide to descriptors can be found  here .']], [[' class User: ...\n']], ['How do I call a property setter from __init__'], 2], [(1843535, 0), [['You can reduce your  start_here  function to '], ['By using RequestContext,  user  is automatically added to the context. Instead of using ']], [[' from django.template import RequestContext\n\ndef start_here(request):\n    return render_to_response("profile.html", {},\n        context_instance=RequestContext(request))\n']], ['User authentication in Django'], 3], [(1843535, 1), [['By using RequestContext,  user  is automatically added to the context. Instead of using '], ['use']], [[' {% if auth %}\n']], ['User authentication in Django'], 3], [(1843535, 2), [['use'], ['-10000']], [[' {% if user.is_authenticated %}\n']], ['User authentication in Django'], 3], [(1844432, 0), [['A general Python pattern for avoiding circular imports is to put one set of the imports inside the dependent functions:'], ['As for caching, it sounds like you need a function that looks a bit like this:']], [[' # module_a.py\nimport module_b\n\ndef foo():\n    return "bar"\n\ndef bar():\n    return module_b.baz()\n\n# module_b.py\ndef baz():\n    import module_a\n    return module_a.foo()\n']], ['Patterns for dealing with memcache Caching in Django'], 3], [(1844432, 1), [['As for caching, it sounds like you need a function that looks a bit like this:'], ['Now you don\'t need to create "getbyid" methods for every one of your models. You can do this instead:']], [[" def get_cached(model, **kwargs):\n    timeout = kwargs.pop('timeout', 60 * 60)\n    key = '%s:%s' % (model, kwargs)\n    result = cache.get(key)\n    if result is None:\n        result = model.objects.get(**kwargs)\n        cache.set(key, result, timeout)\n    return result\n"]], ['Patterns for dealing with memcache Caching in Django'], 3], [(1844432, 2), [['Now you don\'t need to create "getbyid" methods for every one of your models. You can do this instead:'], ['You could write similar functions for dealing with full QuerySets instead of just single model objects using .get() method.']], [[' blog_entry = get_cached(BlogEntry, pk = 4)\n']], ['Patterns for dealing with memcache Caching in Django'], 3], [(1849375, 0), [["SQLalchemy doesn't build this construct for you. You can use the query from text."], ['More than one year later, but now on sqlalchemy 0.6+  you can create it :']], [[" session.execute('INSERT INTO t1 (SELECT * FROM t2)')\n"]], ['How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?'], 4], [(1849375, 1), [['More than one year later, but now on sqlalchemy 0.6+  you can create it :'], ['Produces:']], [[' from sqlalchemy.ext import compiler\nfrom sqlalchemy.sql.expression import Executable, ClauseElement\n\nclass InsertFromSelect(Executable, ClauseElement):\n    def __init__(self, table, select):\n        self.table = table\n        self.select = select\n\n@compiler.compiles(InsertFromSelect)\ndef visit_insert_from_select(element, compiler, **kw):\n    return "INSERT INTO %s (%s)" % (\n        compiler.process(element.table, asfrom=True),\n        compiler.process(element.select)\n    )\n\ninsert = InsertFromSelect(t1, select([t1]).where(t1.c.x>5))\nprint insert\n']], ['How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?'], 4], [(1849375, 2), [['Produces:'], ['Now, 4 years later, the syntax is incorporated in SQLAlchemy 0.9, and backported to 0.8.3; You can create any  select()  and then use the new  from_select()  method of  Insert  objects:']], [[' "INSERT INTO mytable (SELECT mytable.x, mytable.y, mytable.z FROM mytable WHERE mytable.x > :x_1)"\n']], ['How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?'], 4], [(1849375, 3), [['Now, 4 years later, the syntax is incorporated in SQLAlchemy 0.9, and backported to 0.8.3; You can create any  select()  and then use the new  from_select()  method of  Insert  objects:'], ['More information in the docs .']], [[" >>> from sqlalchemy.sql import table, column\n>>> t1 = table('t1', column('a'), column('b'))\n>>> t2 = table('t2', column('x'), column('y'))\n>>> print(t1.insert().from_select(['a', 'b'], t2.select().where(t2.c.y == 5)))\nINSERT INTO t1 (a, b) SELECT t2.x, t2.y\nFROM t2\nWHERE t2.y = :y_1\n"]], ['How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?'], 4], [(1849567, 0), [["SQLAlchemy is designed to have single object with each identity in session. But sometimes you have to recreate an object with known identity, e.g. when you get it from network or when you implement offline lock to avoid long transactions. And when you create an object with known identity that might exist in database, there is a chance that session already track an object with this identity. That's what  merge()  method is for: it returns an object attached to the session, thus avoiding duplicate objects with the same identity in the session. Below is an example illustrating what is going on:"], ['The output is:']], [[" from sqlalchemy import *\nfrom sqlalchemy.orm import *\n\nmetadata = MetaData()\n\nt = Table(\n    't', metadata,\n    Column('id', Integer, primary_key=True),\n    Column('state', String(10)),\n)\n\nclass Model(object): pass\n\nmapper(Model, t)\n\nengine = create_engine('sqlite://')\nmetadata.create_all(engine)\n\nsession = sessionmaker(bind=engine)()\n\nobj1 = Model()\nobj1.state = 'value1'\nsession.add(obj1)\nsession.commit()\nobj_id = obj1.id\n\nobj2 = Model()\nobj2.id = obj_id\nobj2.state = 'value2'\nobj3 = session.merge(obj2)\nsession.commit()\nprint obj3 is obj1, obj3 is obj2\nprint obj3.state\n"]], ["Can SQLAlchemy's session.merge() update its result with newer data from the database?"], 4], [(1849567, 1), [['The output is:'], ['Below is another example, which illustrate loading state from database:']], [[' True False\nvalue2\n']], ["Can SQLAlchemy's session.merge() update its result with newer data from the database?"], 4], [(1849567, 2), [['Below is another example, which illustrate loading state from database:'], ['The output is:']], [[" # ...skipped...\n\nt = Table(\n    't', metadata,\n    Column('id', Integer, primary_key=True),\n    Column('state1', String(10)),\n    Column('state2', String(10)),\n)\n\n# ...skipped...\n\nobj1 = Model()\nobj1.state1 = 'value1-1'\nobj1.state2 = 'value2-1'\nsession.add(obj1)\nsession.commit()\nobj_id = obj1.id\nsession.expunge_all()\n\nobj2 = Model()\nobj2.id = obj_id\nobj2.state1 = 'value1-2'\nobj3 = session.merge(obj2)\nsession.commit()\nprint obj3 is obj1, obj3 is obj2\nprint obj3.state1, obj3.state2\n"]], ["Can SQLAlchemy's session.merge() update its result with newer data from the database?"], 4], [(1849567, 3), [['The output is:'], ["Now  merge()  didn't find the object with the same identity in the session, since we expunged it. Also I created new object with state partially assigned, but the rest is loaded from database."]], [[' False False\nvalue1-2 value2-1\n']], ["Can SQLAlchemy's session.merge() update its result with newer data from the database?"], 4], [(1850463, 0), [['Upd: \nAccording to the article your code will look like this:'], ['to be used as desired:']], [[' class no_share(object):\n    def __init__(self, arg1):\n        self.arg1 = arg1\n\n    def __call__(self, f):\n        """Don\'t let them in if it\'s shared"""\n\n        # Do something with the argument passed to the decorator.\n        print \'Decorator arguments:\', self.arg1\n\n        def wrapped_f(request, *args, **kwargs):\n            if kwargs.get(\'shared\', True):\n                from django.http import Http404\n                raise Http404(\'not availiable for sharing\')\n            f(request, *args, **kwargs)            \n        return wrapped_f\n']], ['Adding an argument to a decorator'], 2], [(1850463, 1), [['to be used as desired:'], ['-10000']], [[" @no_share('prefs')\ndef prefs(request, [...])\n"]], ['Adding an argument to a decorator'], 2], [(1852720, 0), [['You might be looking for something like this:'], ['Yields:']], [[' class UnitFloat(float):\n\n    def __new__(self, value, unit=None):\n       return float.__new__(self, value)\n\n    def __init__(self, value, unit=None):\n        self.unit = unit\n\n\nx = UnitFloat(35.5, "cm")\ny = UnitFloat(42.5)\n\nprint x\nprint x.unit\n\nprint y\nprint y.unit\n\nprint x + y\n']], ['Python values with units'], 2], [(1852720, 1), [['Yields:'], ['-10000']], [[' 35.5\ncm\n42.5\nNone\n78.0\n']], ['Python values with units'], 2], [(1854237, 0), [["If you are extending your form from a ModelForm, use the  instance  keyword argument. Here we pass either an existing  instance  or a new one, depending on whether we're editing or adding an existing article. In both cases the  author  field is set on the instance, so  commit=False  is not required. Note also that I'm assuming only the author may edit their own articles, hence the HttpResponseForbidden response."], ['And in your  urls.py :']], [[" from django.http import HttpResponseForbidden\nfrom django.shortcuts import get_object_or_404, redirect, render, reverse\n\n\n@login_required\ndef edit(request, id=None, template_name='article_edit_template.html'):\n    if id:\n        article = get_object_or_404(Article, pk=id)\n        if article.author != request.user:\n            return HttpResponseForbidden()\n    else:\n        article = Article(author=request.user)\n\n    form = ArticleForm(request.POST or None, instance=article)\n    if request.POST and form.is_valid():\n        form.save()\n\n        # Save was successful, so redirect to another page\n        redirect_url = reverse(article_save_success)\n        return redirect(redirect_url)\n\n    return render(request, template_name, {\n        'form': form\n    })\n"]], ['Django edit form based on add form?'], 3], [(1854237, 1), [['And in your  urls.py :'], ["The same  edit  view is used for both adds and edits, but only the edit url pattern passes an id to the view. To make this work well with your form you'll need to omit the  author  field from the form:"]], [[" (r'^article/new/$', views.edit, {}, 'article_new'),\n(r'^article/edit/(?P<id>\\d+)/$', views.edit, {}, 'article_edit'),\n"]], ['Django edit form based on add form?'], 3], [(1854237, 2), [["The same  edit  view is used for both adds and edits, but only the edit url pattern passes an id to the view. To make this work well with your form you'll need to omit the  author  field from the form:"], ['-10000']], [[" class ArticleForm(forms.ModelForm):\n    class Meta:\n        model = Article\n        exclude = ('author',)\n"]], ['Django edit form based on add form?'], 3], [(1855184, 0), [['Something like (untested):'], ['and you would use it in your template:']], [[' @register.simple_tag\ndef url_with_changed_parameter(request, param, value):\n    params = request.GET\n    request[param] = value\n    return "%s?%s" % (request.path, params.urlencode())\n']], ['Dealing with URLs in Django'], 2], [(1855184, 1), [['and you would use it in your template:'], ['-10000']], [[' {% url_with_changed_parameter request "page" 2 %}\n']], ['Dealing with URLs in Django'], 2], [(1855748, 0), [['Here is a sketch of the jQuery code you will need'], ['Just to clarify on the above, if you want the form to redraw the graph whenever the user clicks any of the controls not just when the user clicks submit, add a few more things like this']], [[' $(function(){\n    // Submit form\n    // Get the returned html, and get the contents of #results and\n    // put it into this page into #results\n    var submit = function() {\n        $.ajax({\n            type: "POST",\n            data: $("form").serialize(),\n            success: function(data, textStatus) {\n                $("#results").replaceWith($("#results", $(data)));\n            }\n        });\n    };\n    $("form input[type=submit]").click(submit);\n    // I think you\'ll need this as well to make sure the form doesn\'t submit via the browser\n    $("form").submit(function () { return false; });\n});\n']], ['Dynamically Refreshed Pages produced by Python'], 2], [(1855748, 1), [['Just to clarify on the above, if you want the form to redraw the graph whenever the user clicks any of the controls not just when the user clicks submit, add a few more things like this'], ['-10000']], [[' $("form input[type=text]").keypress(submit);\n$("form input[type=checkbox], form select").change(submit)\n']], ['Dynamically Refreshed Pages produced by Python'], 2], [(1857346, 0), [['-10000'], ['The default  format_epilog  strips the newlines (uses textwrap), so you would need to override  format_epilog  in your parser like this.']], [[' parser = optparse.OptionParser(epilog="otherstuff")\n']], ['python optparse, how to include additional info in usage output?'], 3], [(1857346, 1), [['The default  format_epilog  strips the newlines (uses textwrap), so you would need to override  format_epilog  in your parser like this.'], ['here is the snippet from optparse.py']], [[' def main():\n\n    class MyParser(optparse.OptionParser):\n        def format_epilog(self, formatter):\n            return self.epilog\n\n    parser =MyParser(epilog=\n"""Examples:\n\ncheck_dell -c all\ncheck_dell -c fans memory voltage\ncheck_dell -s\n""")\n...\n']], ['python optparse, how to include additional info in usage output?'], 3], [(1857346, 2), [['here is the snippet from optparse.py'], ['The default behaviour of  formatter.format_epilog  is to use  textwrap.fill  which amongst other things, strips the newlines from the epilog. Since we want the newlines to be preserved, we subclass  OptionParser  and change the behaviour of  format_epilog']], [[' def format_epilog(self, formatter):\n    return formatter.format_epilog(self.epilog)\n\ndef format_help(self, formatter=None):\n    if formatter is None:\n        formatter = self.formatter\n    result = []\n    if self.usage:\n        result.append(self.get_usage() + "\\n")\n    if self.description:\n        result.append(self.format_description(formatter) + "\\n")\n    result.append(self.format_option_help(formatter))\n    result.append(self.format_epilog(formatter))\n    return "".join(result)\n']], ['python optparse, how to include additional info in usage output?'], 3], [(1858117, 0), [['If you want to convert "localized" numbers such as the American "2,147,483,647" form, you can use the  atof()  function from the  locale  module.  Example:'], ['As for fractions, Python now handles them directly (since version 2.6); they can even be built from a string:']], [[" import locale\nlocale.setlocale(locale.LC_NUMERIC, 'en_US')\nprint locale.atof('1,234,456.23')  # Prints 1234456.23\n"]], ['Flexible numeric string parsing in Python'], 3], [(1858117, 1), [['As for fractions, Python now handles them directly (since version 2.6); they can even be built from a string:'], ['Thus, you can parse a number written in any of the first 3 ways you mention, only with the help of the above two standard modules:']], [[" from fractions import Fraction\nx = Fraction('1/4')\nprint float(x)  # 0.25\n"]], ['Flexible numeric string parsing in Python'], 3], [(1858117, 2), [['Thus, you can parse a number written in any of the first 3 ways you mention, only with the help of the above two standard modules:'], ['-10000']], [[' try:\n    num = float(num_str)\nexcept ValueError:\n    try:\n        num = locale.atof(num_str)\n    except ValueError:\n        try:\n            num = float(Fraction(num_str))\n        except ValueError:\n            raise Exception("Cannot parse \'%s\'" % num_str)  # Or handle \'42 billion\' here\n# \'num\' has the numerical value of \'num_str\', here.        \n']], ['Flexible numeric string parsing in Python'], 3], [(1859049, 0), [['This allows me to get the state of  modifier  keys on my  *nix  system.'], ['To call state to a dictionary,from another file, just call  from FILENAME import *  and do the following:']], [[' #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n"""OSD Neo2\n   ========\n   On screen display for learning the keyboard layout Neo2\n   Copyright (c) 2009 Martin Zuther (http://www.mzuther.de/)\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n   Thank you for using free software!\n"""\n# Here follows a plea in German to keep the comments in English so\n# that you may understand them, dear visitor ...\n#\n# Meine Kommentare in den Quellcodes sind absichtlich auf Englisch\n# gehalten, damit Leute, die im Internet nach Lösungen suchen, den\n# Code nachvollziehen können.  Daher bitte ich darum, zusätzliche\n# Kommentare ebenfalls auf Englisch zu schreiben.  Vielen Dank!\nimport ctypes\nimport ctypes.util\nimport gettext\nimport os\nimport types\n# initialise localisation settings\nmodule_path = os.path.dirname(os.path.realpath(__file__))\ngettext.bindtextdomain(\'OSDneo2\', os.path.join(module_path, \'po/\'))\ngettext.textdomain(\'OSDneo2\')\n_ = gettext.lgettext\nclass SimpleXkbWrapper:\n    """\n    Far from complete wrapper for the "X Keyboard Extension" (well, to\n    be honest, it just wraps what I need using Python\'s "ctypes"\n    library <g>).\n    """\n    # set this to true to get lots of debugging information (and\n    # considerably slow things down)\n    DEBUG_XKB = False\n    # "C defines" from file /usr/include/X11/extensions/XKB.h (Ubuntu 9.04):\n    # $XFree86: xc/include/extensions/XKB.h,v 1.5tsi Exp $\n    #\n    # XkbUseCoreKbd is used to specify the core keyboard without having to\n    # look up its X input extension identifier.\n    XkbUseCoreKbd            = 0x0100\n    # "C defines" from file /usr/include/X11/XKBlib.h (Ubuntu 9.04):\n    # $XFree86: xc/lib/X11/XKBlib.h,v 3.5 2003/04/17 02:06:31 dawes Exp $ #\n    #\n    # XkbOpenDisplay error codes\n    XkbOD_Success            = 0\n    XkbOD_BadLibraryVersion  = 1\n    XkbOD_ConnectionRefused  = 2\n    XkbOD_NonXkbServer       = 3\n    XkbOD_BadServerVersion   = 4\n    # "C typedef" from file /usr/include/X11/extensions/XKBstr.h (Ubuntu 9.04):\n    # $Xorg: XKBstr.h,v 1.3 2000/08/18 04:05:45 coskrey Exp $\n    #\n    # Common data structures and access macros\n    #\n    # typedef struct _XkbStateRec {\n    #         unsigned char   group;\n    #         unsigned char   locked_group;\n    #         unsigned short  base_group;\n    #         unsigned short  latched_group;\n    #         unsigned char   mods;\n    #         unsigned char   base_mods;\n    #         unsigned char   latched_mods;\n    #         unsigned char   locked_mods;\n    #         unsigned char   compat_state;\n    #         unsigned char   grab_mods;\n    #         unsigned char   compat_grab_mods;\n    #         unsigned char   lookup_mods;\n    #         unsigned char   compat_lookup_mods;\n    #         unsigned short  ptr_buttons;\n    # } XkbStateRec,*XkbStatePtr;\n    class XkbStateRec(ctypes.Structure):\n        _fields_ = [\n                        (\'group\',              ctypes.c_ubyte), \\\n                        (\'locked_group\',       ctypes.c_ubyte), \\\n                        (\'base_group\',         ctypes.c_ushort), \\\n                        (\'latched_group\',      ctypes.c_ushort), \\\n                        (\'mods\',               ctypes.c_ubyte), \\\n                        (\'base_mods\',          ctypes.c_ubyte), \\\n                        (\'latched_mods\',       ctypes.c_ubyte), \\\n                        (\'locked_mods\',        ctypes.c_ubyte), \\\n                        (\'compat_state\',       ctypes.c_ubyte), \\\n                        (\'grab_mods\',          ctypes.c_ubyte), \\\n                        (\'compat_grab_mods\',   ctypes.c_ubyte), \\\n                        (\'lookup_mods\',        ctypes.c_ubyte), \\\n                        (\'compat_lookup_mods\', ctypes.c_ubyte), \\\n                        (\'ptr_buttons\',        ctypes.c_ushort) \\\n                   ]\n    # "C defines" from file /usr/include/X11/X.h (Ubuntu 9.04):\n    # $XFree86: xc/include/X.h,v 1.6 2003/07/09 15:27:28 tsi Exp $\n    #\n    # Key masks. Used as modifiers to GrabButton and GrabKey, results of\n    # QueryPointer, state in various key-, mouse-, and button-related\n    # events.\n    ShiftMask                = 1\n    LockMask                 = 2\n    ControlMask              = 4\n    Mod1Mask                 = 8\n    Mod2Mask                 = 16\n    Mod3Mask                 = 32\n    Mod4Mask                 = 64\n    Mod5Mask                 = 128\n    def __init__(self):\n        # dynamically link to "X Keyboard Extension" library\n        library_xf86misc = ctypes.CDLL(ctypes.util.find_library(\'Xxf86misc\'))\n        # print debugging information if requested\n        if self.DEBUG_XKB:\n            print\n            print \'  %s\' % library_xf86misc\n        # define "ctypes" prototype for the function\n        #\n        # Display *XkbOpenDisplay(display_name, event_rtrn, error_rtrn,\n        #                             major_in_out, minor_in_out, reason_rtrn)\n        #\n        #    char * display_name;\n        #    int * event_rtrn;\n        #    int * error_rtrn;\n        #    int * major_in_out;\n        #    int * minor_in_out;\n        #    int * reason_rtrn;\n        paramflags_xkbopendisplay = \\\n            (1, \'display_name\'), \\\n            (2, \'event_rtrn\'), \\\n            (2, \'error_rtrn\'), \\\n            (3, \'major_in_out\'), \\\n            (3, \'minor_in_out\'), \\\n            (2, \'reason_rtrn\')\n        prototype_xkbopendisplay = ctypes.CFUNCTYPE( \\\n            ctypes.c_uint, \\\n                ctypes.c_char_p, \\\n                ctypes.POINTER(ctypes.c_int), \\\n                ctypes.POINTER(ctypes.c_int), \\\n                ctypes.POINTER(ctypes.c_int), \\\n                ctypes.POINTER(ctypes.c_int), \\\n                ctypes.POINTER(ctypes.c_int) \\\n                )\n        # set-up function (low-level)\n        self.__XkbOpenDisplay__ = prototype_xkbopendisplay( \\\n            (\'XkbOpenDisplay\', library_xf86misc), \\\n                paramflags_xkbopendisplay \\\n                )\n        # define error handler\n        def errcheck_xkbopendisplay(result, func, args):\n            # print debugging information if requested\n            if self.DEBUG_XKB:\n                print\n                print \'  [XkbOpenDisplay]\'\n                print \'  Display:       %#010x\' % result\n                print \'  display_name:  %s\' % args[0].value\n                print \'  event_rtrn:    %d\' % args[1].value\n                print \'  error_rtrn:    %d\' % args[2].value\n                print \'  major_in_out:  %d\' % args[3].value\n                print \'  minor_in_out:  %d\' % args[4].value\n                print \'  reason_rt:     %d\' % args[5].value\n            # function didn\'t return display handle, so let\'s see why\n            # not\n            if result == 0:\n                # values were taken from file /usr/include/X11/XKBlib.h (Ubuntu 9.04):\n                # $XFree86: xc/lib/X11/XKBlib.h,v 3.5 2003/04/17 02:06:31 dawes Exp $ #\n                error_id = args[5].value\n                if error_id == self.XkbOD_Success:\n                    error_name = \'XkbOD_Success\'\n                elif error_id == self.XkbOD_BadLibraryVersion:\n                    error_name = \'XkbOD_BadLibraryVersion\'\n                elif error_id == self.XkbOD_ConnectionRefused:\n                    error_name = \'XkbOD_ConnectionRefused\'\n                elif error_id == self.XkbOD_NonXkbServer:\n                    error_name = \'XkbOD_NonXkbServer\'\n                elif error_id == self.XkbOD_BadServerVersion:\n                    error_name = \'XkbOD_BadServerVersion\'\n                else:\n                    error_name = _(\'undefined\')\n                error_message = \\\n                    _(\'"XkbOpenDisplay" reported an error (%(error_name)s).\') % \\\n                    {\'error_name\': error_name}\n                raise OSError(error_message)\n            # return display handle and all function arguments\n            return (ctypes.c_uint(result), args)\n        # connect error handler to function\n        self.__XkbOpenDisplay__.errcheck = errcheck_xkbopendisplay\n        # define "ctypes" prototype for the function\n        #\n        # Bool XkbGetState(display, device_spec, state_return)\n        #\n        #     Display *             display;\n        #     unsigned int          device_spec;\n        #     XkbStatePtr           state_return;\n        paramflags_xkbgetstate = \\\n            (1, \'display\'), \\\n            (1, \'device_spec\'), \\\n            (3, \'state_return\')\n        prototype_xkbgetstate = ctypes.CFUNCTYPE( \\\n            ctypes.c_int, # Python 2.5 doesn\'t yet know c_bool \\\n                ctypes.c_uint, \\\n                ctypes.c_uint, \\\n                ctypes.POINTER(self.XkbStateRec) \\\n                )\n        # set-up function (low-level)\n        self.__XkbGetState__ = prototype_xkbgetstate( \\\n            (\'XkbGetState\', library_xf86misc), \\\n                paramflags_xkbgetstate \\\n                )\n        # define error handler\n        def errcheck_xkbgetstate(result, func, args):\n            # print debugging information if requested\n            if self.DEBUG_XKB:\n                print\n                print \'  [XkbGetState]\'\n                print \'  Status:        %s\' % result\n                print \'  display:       %#010x\' % args[0].value\n                print \'  device_spec:   %d\\n\' % args[1].value\n                print \'  state_return.group:               %d\' % \\\n                    args[2].group\n                print \'  state_return.locked_group:        %d\' % \\\n                    args[2].locked_group\n                print \'  state_return.base_group:          %d\' % \\\n                    args[2].base_group\n                print \'  state_return.latched_group:       %d\' % \\\n                    args[2].latched_group\n                print \'  state_return.mods:                %d\' % \\\n                    args[2].mods\n                print \'  state_return.base_mods:           %d\' % \\\n                    args[2].base_mods\n                print \'  state_return.latched_mods:        %d\' % \\\n                    args[2].latched_mods\n                print \'  state_return.locked_mods:         %d\' % \\\n                    args[2].locked_mods\n                print \'  state_return.compat_state:        %d\' % \\\n                    args[2].compat_state\n                print \'  state_return.grab_mods:           %d\' % \\\n                    args[2].grab_mods\n                print \'  state_return.compat_grab_mods:    %d\' % \\\n                    args[2].compat_grab_mods\n                print \'  state_return.lookup_mods:         %d\' % \\\n                    args[2].lookup_mods\n                print \'  state_return.compat_lookup_mods:  %d\' % \\\n                    args[2].compat_lookup_mods\n                print \'  state_return.ptr_buttons:         %d\\n\' % \\\n                    args[2].ptr_buttons\n                print \'  Mask          mods   base_mods   latched_mods   locked_mods   compat_state\'\n                print \'  --------------------------------------------------------------------------\'\n                print \'  ShiftMask     %-5s  %-5s       %-5s          %-5s         %-5s\' % \\\n                    ((args[2].mods         & self.ShiftMask) != 0, \\\n                     (args[2].base_mods    & self.ShiftMask) != 0, \\\n                     (args[2].latched_mods & self.ShiftMask) != 0, \\\n                     (args[2].locked_mods  & self.ShiftMask) != 0, \\\n                     (args[2].compat_state & self.ShiftMask) != 0)\n                print \'  LockMask      %-5s  %-5s       %-5s          %-5s         %-5s\' % \\\n                    ((args[2].mods         & self.LockMask) != 0, \\\n                     (args[2].base_mods    & self.LockMask) != 0, \\\n                     (args[2].latched_mods & self.LockMask) != 0, \\\n                     (args[2].locked_mods  & self.LockMask) != 0, \\\n                     (args[2].compat_state & self.LockMask) != 0)\n                print \'  ControlMask   %-5s  %-5s       %-5s          %-5s         %-5s\' % \\\n                    ((args[2].mods         & self.ControlMask) != 0, \\\n                     (args[2].base_mods    & self.ControlMask) != 0, \\\n                     (args[2].latched_mods & self.ControlMask) != 0, \\\n                     (args[2].locked_mods  & self.ControlMask) != 0, \\\n                     (args[2].compat_state & self.ControlMask) != 0)\n                print \'  Mod1Mask      %-5s  %-5s       %-5s          %-5s         %-5s\' % \\\n                    ((args[2].mods         & self.Mod1Mask) != 0, \\\n                     (args[2].base_mods    & self.Mod1Mask) != 0, \\\n                     (args[2].latched_mods & self.Mod1Mask) != 0, \\\n                     (args[2].locked_mods  & self.Mod1Mask) != 0, \\\n                     (args[2].compat_state & self.Mod1Mask) != 0)\n                print \'  Mod2Mask      %-5s  %-5s       %-5s          %-5s         %-5s\' % \\\n                    ((args[2].mods         & self.Mod2Mask) != 0, \\\n                     (args[2].base_mods    & self.Mod2Mask) != 0, \\\n                     (args[2].latched_mods & self.Mod2Mask) != 0, \\\n                     (args[2].locked_mods  & self.Mod2Mask) != 0, \\\n                     (args[2].compat_state & self.Mod2Mask) != 0)\n                print \'  Mod3Mask      %-5s  %-5s       %-5s          %-5s         %-5s\' % \\\n                    ((args[2].mods         & self.Mod3Mask) != 0, \\\n                     (args[2].base_mods    & self.Mod3Mask) != 0, \\\n                     (args[2].latched_mods & self.Mod3Mask) != 0, \\\n                     (args[2].locked_mods  & self.Mod3Mask) != 0, \\\n                     (args[2].compat_state & self.Mod3Mask) != 0)\n                print \'  Mod4Mask      %-5s  %-5s       %-5s          %-5s         %-5s\' % \\\n                    ((args[2].mods         & self.Mod4Mask) != 0, \\\n                     (args[2].base_mods    & self.Mod4Mask) != 0, \\\n                     (args[2].latched_mods & self.Mod4Mask) != 0, \\\n                     (args[2].locked_mods  & self.Mod4Mask) != 0, \\\n                     (args[2].compat_state & self.Mod4Mask) != 0)\n                print \'  Mod5Mask      %-5s  %-5s       %-5s          %-5s         %-5s\' % \\\n                    ((args[2].mods         & self.Mod5Mask) != 0, \\\n                     (args[2].base_mods    & self.Mod5Mask) != 0, \\\n                     (args[2].latched_mods & self.Mod5Mask) != 0, \\\n                     (args[2].locked_mods  & self.Mod5Mask) != 0, \\\n                     (args[2].compat_state & self.Mod5Mask) != 0)\n            # return function return value and all function arguments\n            return (result, args)\n        # connect error handler to function\n        self.__XkbGetState__.errcheck = errcheck_xkbgetstate\n    # define high-level version of "XkbOpenDisplay"\n    def XkbOpenDisplay(self, display_name, major_in_out, minor_in_out):\n        # if we don\'t do type checking, nobody ever will\n        assert (type(display_name) == types.NoneType) or \\\n            (type(display_name) == types.StringType)\n        assert type(major_in_out) == types.IntType\n        assert type(minor_in_out) == types.IntType\n        # convert function arguments to "ctypes", ...\n        __display_name__ = ctypes.c_char_p(display_name)\n        __major_in_out__ = ctypes.c_int(major_in_out)\n        __minor_in_out__ = ctypes.c_int(minor_in_out)\n        # ... call low-level function ...\n        ret = self.__XkbOpenDisplay__(__display_name__, __major_in_out__, \\\n                                         __minor_in_out__)\n        # ... and return converted return value and function arguments\n        return {\'display_handle\': ret[0].value, \\\n                    \'server_major_version\': ret[1][3].value, \\\n                    \'server_minor_version\': ret[1][4].value}\n    # define high-level version of "XkbGetState"\n    def XkbGetState(self, display_handle, device_spec):\n        # if we don\'t do type checking, nobody ever will\n        assert type(display_handle) == types.LongType\n        assert type(device_spec) == types.IntType\n        # convert function arguments to "ctypes", ...\n        __display_handle__ = ctypes.c_uint(display_handle)\n        __device_spec__ = ctypes.c_uint(device_spec)\n        __xkbstaterec__ = self.XkbStateRec()\n        # ... call low-level function ...\n        ret = self.__XkbGetState__(__display_handle__, __device_spec__, \\\n                                  __xkbstaterec__)\n        # ... and return converted function argument\n        xkbstaterec = ret[1][2]\n        return xkbstaterec\n    # extract modifier status using bitmasks\n    def ExtractLocks(self, xkbstaterec):\n        return {\'group\': xkbstaterec.group, \\\n                \'shift\': \\\n                    (xkbstaterec.base_mods & self.ShiftMask) != 0, \\\n                \'shift_lock\': \\\n                    (xkbstaterec.locked_mods & self.ShiftMask) != 0, \\\n                \'lock\': \\\n                    (xkbstaterec.base_mods & self.LockMask) != 0, \\\n                \'lock_lock\': \\\n                    (xkbstaterec.locked_mods & self.LockMask) != 0, \\\n                \'control\': \\\n                    (xkbstaterec.base_mods & self.ControlMask) != 0, \\\n                \'control_lock\': \\\n                    (xkbstaterec.locked_mods & self.ControlMask) != 0, \\\n                \'mod1\': \\\n                    (xkbstaterec.base_mods & self.Mod1Mask) != 0, \\\n                \'mod1_lock\': \\\n                    (xkbstaterec.locked_mods & self.Mod1Mask) != 0, \\\n                \'mod2\': \\\n                    (xkbstaterec.base_mods & self.Mod2Mask) != 0, \\\n                \'mod2_lock\': \\\n                    (xkbstaterec.locked_mods & self.Mod2Mask) != 0, \\\n                \'mod3\': \\\n                    (xkbstaterec.base_mods & self.Mod3Mask) != 0, \\\n                \'mod3_lock\': \\\n                    (xkbstaterec.locked_mods & self.Mod3Mask) != 0, \\\n                \'mod4\': \\\n                    (xkbstaterec.base_mods & self.Mod4Mask) != 0, \\\n                \'mod4_lock\': \\\n                    (xkbstaterec.locked_mods & self.Mod4Mask) != 0, \\\n                \'mod5\': \\\n                    (xkbstaterec.base_mods & self.Mod5Mask) != 0, \\\n                \'mod5_lock\': \\\n                    (xkbstaterec.locked_mods & self.Mod5Mask) != 0}\n']], ['Check if key is pressed using python (a daemon in the background)'], 2], [(1859049, 1), [['To call state to a dictionary,from another file, just call  from FILENAME import *  and do the following:'], ['Cheers to the creator whose code can be found  here , and to  Jason Orendorffl  for drawing my attention to it.']], [[" # simple demonstration of this wrapper\nxkb = SimpleXkbWrapper()\n# initialise wrapper for the X Keyboard Extension (v1.0) and\n# open connection to default X display\ndisplay_name = None\nmajor_in_out = 1\nminor_in_out = 0\ntry:\n    ret = xkb.XkbOpenDisplay(display_name, major_in_out, minor_in_out)\nexcept OSError, error:\n    print\n    print '  Error: %s' % error\n    print\n    exit(1)\n# ... get modifier state of core keyboard ...\ndisplay_handle = ret['display_handle']\ndevice_spec = xkb.XkbUseCoreKbd\nxkbstaterec = xkb.XkbGetState(display_handle, device_spec)\n# ... and extract and the information we need\nprint xkb.ExtractLocks(xkbstaterec)\n"]], ['Check if key is pressed using python (a daemon in the background)'], 2], [(1859864, 0), [['If you are not satisfied with lists (because they can contain anything and take up too much memory) you can use efficient array of integers:'], ['If you need to initialize it, ']], [[" import array\narray.array('i')\n"]], ['How to create an integer array in Python?'], 2], [(1859864, 1), [['If you need to initialize it, '], ['-10000']], [[" a = array.array('i',(0 for i in range(0,10)))\n"]], ['How to create an integer array in Python?'], 2], [(1863571, 0), [['try using'], ['Eg.']], [[' list(bytestring)\n']], ['Working with bit streams'], 7], [(1863571, 1), [['Eg.'], ['If you want one huge bitfield instead of all those octets']], [[' >>> bstring=b"Hello World"\n>>> list( bstring)\n[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]\n>>> \n']], ['Working with bit streams'], 7], [(1863571, 2), [['If you want one huge bitfield instead of all those octets'], ["You didn't say how you are counting the bits, perhaps they are supposed to be reversed"]], [[' >>> from functools import reduce\n>>> reduce(lambda x,y:(x<<8)+y,list(b"Hello World"))\n87521618088882533792115812\n>>> bin(_)\n\'0b100100001100101011011000110110001101111001000000101011101101111011100100110110001100100\'\n>>> \n']], ['Working with bit streams'], 7], [(1863571, 3), [["You didn't say how you are counting the bits, perhaps they are supposed to be reversed"], ['and pad the string to even bytes']], [[' >>> reduce(lambda x,y:(x<<8)+y,list(b"Hello World"[::-1]))\n121404708493354166158910792\n>>> bits=bin(_)[2:]\n']], ['Working with bit streams'], 7], [(1863571, 4), [['and pad the string to even bytes'], ['turn the first 6 bits into an int']], [[" >>> bits=bits.zfill(((len(bits)-1)//8+1)*8)\n>>> bits\n'0110010001101100011100100110111101010111001000000110111101101100011011000110010101001000'\n"]], ['Working with bit streams'], 7], [(1863571, 5), [['turn the first 6 bits into an int'], ['and then the following 4 bits']], [[' >>> int(bits[:6],2)\n25\n']], ['Working with bit streams'], 7], [(1863571, 6), [['and then the following 4 bits'], ['-10000']], [[' >>> int(bits[6:10],2)\n1\n']], ['Working with bit streams'], 7], [(1864701, 0), [['If by "octets" you really mean strings in the form \'0xc5\' (rather than \'\\xc5\') you can convert to  bytes  like this:'], ['You can then convert to  str  (ie: Unicode) using the  str  constructor...']], [[" >>> bytes([int(x,0) for x in ['0xc5', '0x81']])\nb'\\xc5\\x81'\n"]], ['Convert UTF-8 octets to unicode code points'], 6], [(1864701, 1), [['You can then convert to  str  (ie: Unicode) using the  str  constructor...'], ["...or by calling  .decode('utf-8')  on the  bytes  object:"]], [[" >>> str(b'\\xc5\\x81', 'utf-8')\n'Ł'\n"]], ['Convert UTF-8 octets to unicode code points'], 6], [(1864701, 2), [["...or by calling  .decode('utf-8')  on the  bytes  object:"], ['-10000']], [[" >>> b'\\xc5\\x81'.decode('utf-8')\n'Ł'\n>>> hex(ord('Ł'))\n'0x141'\n"]], ['Convert UTF-8 octets to unicode code points'], 6], [(1864701, 3), [['-10000'], ['You can then convert to  unicode  using the constructor...']], [[" >>> ''.join(chr(int(x,0)) for x in ['0xc5', '0x81'])\n'\\xc5\\x81'\n"]], ['Convert UTF-8 octets to unicode code points'], 6], [(1864701, 4), [['You can then convert to  unicode  using the constructor...'], ["...or by calling  .decode('utf-8')  on the  str :"]], [[" >>> unicode('\\xc5\\x81', 'utf-8')\nu'\\u0141'\n"]], ['Convert UTF-8 octets to unicode code points'], 6], [(1864701, 5), [["...or by calling  .decode('utf-8')  on the  str :"], ['-10000']], [[" >>> '\\xc5\\x81'.decode('utf-8')\nu'\\u0141'\n"]], ['Convert UTF-8 octets to unicode code points'], 6], [(1865479, 0), [['In views.py:'], ['In models.py:']], [[" def display(request):\n  return render_to_response('template.tmpl', {'obj': models.Book.objects.all()})\n"]], ['Display data from a table using Django'], 3], [(1865479, 1), [['In models.py:'], ['In template.tmpl:']], [[' class Book(models.Model):\n  author = models.CharField(max_length = 20)\n  title = models.CharField(max_length = 40)\n  publication_year = models.IntegerField()\n']], ['Display data from a table using Django'], 3], [(1865479, 2), [['In template.tmpl:'], ['-10000']], [[' <table>\n<tr>\n  <th>author</th>\n  <th>title</th>\n  <th>publication year</th>\n</tr>\n{% for b in obj %}\n<tr>\n  <td>{{ b.author }}</td>\n  <td>{{ b.title }}</td>\n  <td>{{ b.publication_year }}</td>\n</tr>\n{% endfor %}\n</table>\n']], ['Display data from a table using Django'], 3], [(1866329, 0), [['I like that you are using results names, they really improve the robustness of your post-parsing code.  I would recommend using the shortcut form that was added in pyparsing 1.4.7, in which you can replace'], ['with']], [[' busname.setResultsName("bus1")\n']], ['How should I organise my functions with pyparsing?'], 7], [(1866329, 1), [['with'], ['I would look back through your parse actions to see where you are using numeric indexes to access individual tokens, and go back and assign results names instead.  Here is one case, where GetStats returns  (ngroup + sgroup).setParseAction(self.process_stats) .  process_stats has references like:']], [[' busname("bus1")\n']], ['How should I organise my functions with pyparsing?'], 7], [(1866329, 2), [['I would look back through your parse actions to see where you are using numeric indexes to access individual tokens, and go back and assign results names instead.  Here is one case, where GetStats returns  (ngroup + sgroup).setParseAction(self.process_stats) .  process_stats has references like:'], ['I like that you have Group\'ed the values and the stats, but go ahead and give them names, like "network" and "soln".  Then you could write this parse action code as (I\'ve also converted to the - to me - easier-to-read object-attribute notation instead of dict element notation):']], [[' self.num_load = tokens[0]["loads"]\nself.num_generator = tokens[0]["generators"]\nself.num_transformer = tokens[0]["transformers"]\nself.num_line = tokens[0]["lines"]\nself.num_bus = tokens[0]["buses"]\nself.power_rate = tokens[1]["rate"]\n']], ['How should I organise my functions with pyparsing?'], 7], [(1866329, 3), [['I like that you have Group\'ed the values and the stats, but go ahead and give them names, like "network" and "soln".  Then you could write this parse action code as (I\'ve also converted to the - to me - easier-to-read object-attribute notation instead of dict element notation):'], ["Also, a style question: why do you sometimes use the explicit And constructor, instead of using the '+' operator?"]], [[' self.num_load = tokens.network.loads\nself.num_generator = tokens.network.generators\nself.num_transformer = tokens.network.transformers\nself.num_line = tokens.network.lines\nself.num_bus = tokens.network.buses\nself.power_rate = tokens.soln.rate\n']], ['How should I organise my functions with pyparsing?'], 7], [(1866329, 4), [["Also, a style question: why do you sometimes use the explicit And constructor, instead of using the '+' operator?"], ['This is just as easily written:']], [[' busdef = And([busname.setResultsName("bus1"),\n            busname.setResultsName("bus2"),\n            integer.setResultsName("linenum"),\n            decimaltable("pf qf pl ql".split())])\n']], ['How should I organise my functions with pyparsing?'], 7], [(1866329, 5), [['This is just as easily written:'], ['Overall, I think this is about par for a file of this complexity.  I have a similar format (proprietary, unfortunately, so cannot be shared) in which I built the code in pieces similar to the way you have, but in one large method, something like this:']], [[' busdef = (busname("bus1") + busname("bus2") + \n            integer("linenum") + \n            decimaltable("pf qf pl ql".split()))\n']], ['How should I organise my functions with pyparsing?'], 7], [(1866329, 6), [['Overall, I think this is about par for a file of this complexity.  I have a similar format (proprietary, unfortunately, so cannot be shared) in which I built the code in pieces similar to the way you have, but in one large method, something like this:'], ['The Group constructs are especially helpful in a large parser like this, to establish a sort of namespace for results names within each section of the parsed data.']], [[' def parser():\n    header = Group(...)\n    inputsummary = Group(...)\n    jobstats = Group(...)\n    measurements = Group(...)\n    return header("hdr") + inputsummary("inputs") + jobstats("stats") + measurements("meas")\n']], ['How should I organise my functions with pyparsing?'], 7], [(1867357, 0), [['You could start with something like this:'], ['Then you could use it like this:']], [[' class TrackedFile(file):\n    def __init__(self, filename, mode):\n        self.size = 0\n        super(TrackedFile, self).__init__(filename, mode)\n    def write(self, s):\n        self.size += len(s)\n        super(TrackedFile, self).write(s)\n']], ["How do I determine an open file's size in Python?"], 3], [(1867357, 1), [['Then you could use it like this:'], ['This works regardless of encoding, as strings are just sequences of bytes.']], [[" >>> f = TrackedFile('palindrome.txt', 'w')\n>>> f.size\n0\n>>> f.write('A man a plan a canal ')\n>>> f.size\n21\n>>> f.write('Panama')\n27\n"]], ["How do I determine an open file's size in Python?"], 3], [(1867357, 2), [['This works regardless of encoding, as strings are just sequences of bytes.'], ['-10000']], [[" >>> f2 = TrackedFile('palindrome-latin1.txt', 'w')\n>>> f2.write(u'A man a plan a canál '.encode('latin1')\n>>> f3 = TrackedFile('palindrome-utf8.txt', 'w')\n>>> f3.write(u'A man a plan a canál '.encode('utf-8'))\n>>> f2.size\n21\n>>> f3.size\n22\n"]], ["How do I determine an open file's size in Python?"], 3], [(1867715, 0), [['like this?'], ['Or maybe slightly cleaner:']], [[' for i in range(nIterations): y = f(y)\n']], ['Iteration in a single line'], 3], [(1867715, 1), [['Or maybe slightly cleaner:'], ["Since you don't want to have a something that can be split into two separate statements (i think), here's another one:"]], [[' for _ in xrange(nIterations): y = f(y)\n']], ['Iteration in a single line'], 3], [(1867715, 2), [["Since you don't want to have a something that can be split into two separate statements (i think), here's another one:"], ['Still, I would recommend to  just use your original code , which is much more intuitive and readable. Also note what  Guido van Rossum  has to say on loops versus  repeat .\nNote by the way that (in python 2.x)  xrange  is more efficient than  range  for large nIterations as it returns an actual iterator and not an allocated list.']], [[' reduce(lambda y, _: f(y), xrange(nIterations), initValue)\n']], ['Iteration in a single line'], 3], [(1869034, 0), [['You can do this:'], ['You can achieve the same by doing (propably cleaner):']], [[" import sip # you'll need this import (no worries, it ships with your pyqt install)\nsip.delete(self.sv_widgets[purchase.id])\n"]], ['Removing custom widget from QVBoxLayout'], 2], [(1869034, 1), [['You can achieve the same by doing (propably cleaner):'], ['-10000']], [[' self.vl_seatView.removeWidget(self.sv_widgets[purchase.id])\nself.sv_widgets[purchase.id].setParent(None)\ndel self.sv_widgets[purchase.id]\n']], ['Removing custom widget from QVBoxLayout'], 2], [(1870954, 0), [['-10000'], ['UPDATE : because OP edited question, and Thanks Tom for pointing out for +']], [[' x="""Top Assembly Part Number        : 800-25858-06\nTop Assembly Revision Number    : A0\nVersion ID                      : V08\nCLEI Code Number                : COMDE10BRA\nHardware Board Revision Number  : 0x01\n\n\nSwitch   Ports  Model              SW Version              SW Image\n------   -----  -----              ----------              ----------\n*    1   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M\n     2   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M\n     3   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M\n     4   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M\n\n\nSwitch 02\n---------\nSwitch Uptime                   : 11 weeks, 2 days, 16 hours, 27 minutes\nBase ethernet MAC Address       : 00:26:52:96:2A:80\nMotherboard assembly number     : 73-9675-15"""\n\n>>> import re\n>>> re.findall("^\\*?\\s*(\\d)\\s*\\d+\\s*([A-Z\\d-]+)",x,re.MULTILINE)\n[(\'1\', \'WS-C3750-48P\'), (\'2\', \'WS-C3750-48P\'), (\'3\', \'WS-C3750-48P\'), (\'4\', \'WS-C3750-48P\')]\n']], ['python regular expression across multiple lines'], 2], [(1870954, 1), [['UPDATE : because OP edited question, and Thanks Tom for pointing out for +'], ['-10000']], [[' >>> re.findall("^(\\*?)\\s+(\\d)\\s+\\d+\\s+([A-Z\\d-]+)",x,re.MULTILINE)\n[(\'*\', \'1\', \'WS-C3750-48P\'), (\'\', \'2\', \'WS-C3750-48P\'), (\'\', \'3\', \'WS-C3750-48P\'), (\'\', \'4\', \'WS-C3750-48P\')]\n>>>\n']], ['python regular expression across multiple lines'], 2], [(1872861, 0), [["Since you don't provide any information on how you want to format your XML, i just invented my own notation."], ['To print to console, iterate over items in a similar way but change the output (by the  print  commands)']], [[' week=[{\'item\': \'Electrelane\', \'weight\': 140}, {\'item\': \'Kraftwerk\', \'weight\': 117},{\'item\': \'The Flaming Lips\', \'weight\': 113}]\n\nprint "<?xml version=\'1.0\' ?>"\nprint "<week>"\nfor day in week:\n    print "  <day>"\n    for key, value in day.items():\n        print "    <%s>%s</%s>" % (key, value, key)\n    print "  </day>"\nprint "</week>"\n']], ['Extract resulted list data to a xml file in python'], 2], [(1872861, 1), [['To print to console, iterate over items in a similar way but change the output (by the  print  commands)'], ['-10000']], [[' # enumerate the days in the week\nfor i, day in enumerate(week):\n    print "day %d" % i\n    # show values in sorted order\n    for key in sorted(day):\n        print "  - %s\\t: %s" % (key, day[key])\n']], ['Extract resulted list data to a xml file in python'], 2], [(1873735, 0), [["There's traditional server-driven approach, where the script runs just once, but takes a long time to complete, spitting out bits of page as it goes:"], ['WSGI-over-CGI example:']], [[" import sys, time\n\nsys.stdout.write('Content-Type: text/html;charset=utf-8\\r\\n\\r\\n')\n\nprint '<html><body>'\nfor i in range(10):\n    print '<div>%i</div>'%i\n    sys.stdout.flush()\n    time.sleep(1)\n"]], ['Display the result on the webpage as soon as the data is available at server'], 3], [(1873735, 1), [['WSGI-over-CGI example:'], ['This limits you to rendering the page bit-by-bit as new data comes in. You can make it prettier by having the client-side take care of altering the page as new data comes in, eg.:']], [[" import time, wsgiref.handlers\n\nclass MyApplication(object):\n    def __call__(self, environ, start_response):\n        start_response('200 OK', [('Content-Type', 'text/html;charset=utf-8')])\n        return self.page()\n\n    def page(self):\n        yield '<html><body>'\n        for i in range(10):\n            yield '<div>%i</div>'%i\n            time.sleep(1)\n\napplication= MyApplication()\nif __name__=='__main__':\n    wsgiref.handlers.CGIHandler().run(application)\n"]], ['Display the result on the webpage as soon as the data is available at server'], 3], [(1873735, 2), [['This limits you to rendering the page bit-by-bit as new data comes in. You can make it prettier by having the client-side take care of altering the page as new data comes in, eg.:'], ['This relies on client-side scripting so it might be a good idea to include backup non-script-based final output at the end.']], [[' def page(self):\n    yield (\n        \'<html><body><div id="counter">-</div>\'\n        \'<script type="text/javascript">\'\n        \'    function update(n) {\'\n        \'        document.getElementById("counter").firstChild.data= n;\'\n        \'    }\'\n        \'</script>\'\n    )\n    for i in range(10):\n        yield \'<script type="text/javascript">update(%i);</script>\'%i\n        time.sleep(1)\n']], ['Display the result on the webpage as soon as the data is available at server'], 3], [(1874113, 0), [['How about:'], ["An alternative using EXISTS is better in that it doesn't require that all rows be retrieved, but merely that at least one such row exists:"]], [[' >>> import psycopg2\n>>> conn = psycopg2.connect("dbname=\'mydb\' user=\'username\' host=\'localhost\' password=\'foobar\'")\n>>> cur = conn.cursor()\n>>> cur.execute("select * from information_schema.tables where table_name=%s", (\'mytable\',))\n>>> bool(cur.rowcount)\nTrue\n']], ['Checking if a postgresql table exists under python (and probably Psycopg2)'], 2], [(1874113, 1), [["An alternative using EXISTS is better in that it doesn't require that all rows be retrieved, but merely that at least one such row exists:"], ['-10000']], [[' >>> cur.execute("select exists(select * from information_schema.tables where table_name=%s)", (\'mytable\',))\n>>> cur.fetchone()[0]\nTrue\n']], ['Checking if a postgresql table exists under python (and probably Psycopg2)'], 2], [(1875956, 0), [['If you are using Python 2.6 or higher, you can use the  io.StringIO  class after having read your file into memory (using the read() method). Example:'], ['To actually use this in your django view, you may need to convert the input file data to unicode:']], [[' >>> import io\n>>> s = u"a\\r\\nb\\nc\\rd"\n>>> sio = io.StringIO(s, newline=None)\n>>> sio.readlines()\n[u\'a\\n\', u\'b\\n\', u\'c\\n\', u\'d\']\n']], ['How can I access an uploaded file in universal-newline mode?'], 2], [(1875956, 1), [['To actually use this in your django view, you may need to convert the input file data to unicode:'], ['-10000']], [[" stream = io.StringIO(unicode(request.FILES['foo'].read()), newline=None)\n"]], ['How can I access an uploaded file in universal-newline mode?'], 2], [(1876587, 0), [['I would do it like this, assuming that there is at least one element:'], ['this could be optimised further by getting rid of the indexing:']], [[" tmp_iter = iter(tmp)\nprev = tmp_iter.next()\n\nfor x in tmp_iter: \n   print 'seq: ', x[1], 'prev seq:', prev[1], 'variance: ', x[1]-prev[1]\n   prev = x\n"]], ['Optimal way to access a value from the last iteration in a loop'], 2], [(1876587, 1), [['this could be optimised further by getting rid of the indexing:'], ['I use the assignment to spit the list into its constituent parts, and assign the first element to _ because it is not used.']], [[" tmp_iter = iter(tmp)\n[_, prev] = tmp_iter.next()\n\nfor [_, x] in tmp_iter: \n   print 'seq: ', x, 'prev seq:', prev, 'variance: ', x-prev\n   prev = x\n"]], ['Optimal way to access a value from the last iteration in a loop'], 2], [(1876625, 0), [['models.py'], ['urls.py']], [[' class Comment(models.Model):\n    text = models.TextField()\n    created = models.DateTimeField(default=datetime.now())\n']], ['how to auto-update a Django page only when required?'], 3], [(1876625, 1), [['urls.py'], ['views.py']], [[" url(r'^comments/latest/(?P<seconds_old>\\d+)/$',get_latest_comments),\n"]], ['how to auto-update a Django page only when required?'], 3], [(1876625, 2), [['views.py'], ['On the client-side you get the JSON, check if it has a value, if so enumerate the items, and add the new items to your  <div>  tag or whatever.']], [[' def get_latest_comments(request, seconds_old):\n    """\n    Returns comments that have been created since the last given number of seconds\n    have elapsed.\n    """\n\n    # Query comments since the past X seconds\n    comments_since = datetime.datetime.now() - datetime.timedelta(seconds=seconds_old)\n    comments = Comments.objects.filter(created__gte=comments_since)\n\n    # Return serialized data or whatever you\'re doing with it\n    return HttpResponse(simplejson.dumps(comments),mimetype=\'application/json\')\n']], ['how to auto-update a Django page only when required?'], 3], [(1877238, 0), [['Edit .  All python scripts that read files are "custom file parsers".  Without an actual example, it\'s not sensible to provide a detailed example.'], ['Tab-Delim .']], [[' with open( "some file", "r" ) as source:\n    for line in source:\n        process( line )\n']], ['What is the best file parsing solution for converting files?'], 3], [(1877238, 1), [['Tab-Delim .'], ['Fixed Layout .']], [[" from collections import namedtuple\nRecordLayout = namedtuple('RecordLayout',['field1','field2','field3',...])\ndef process( aLine ):\n    record = RecordLayout( aLine.split('\\t') )\n    ...\n"]], ['What is the best file parsing solution for converting files?'], 3], [(1877238, 2), [['Fixed Layout .'], ['-10000']], [[" from collections import namedtuple\nRecordLayout = namedtuple('RecordLayout',['field1','field2','field3',...])\ndef process( aLine ):\n    fields = ( aLine[:10], aLine[10:20], aLine[20:30], ... )\n    record = RecordLayout( fields )\n    ...\n"]], ['What is the best file parsing solution for converting files?'], 3], [(1877725, 0), [['Okay, first off, your code looks incomplete: I see only one return from your function. I think you mean something like this:'], ['Edit: based on my comment below, I would use code like this:']], [[' def sim_distance(prefs, person1, person2): \n  # Get the list of shared_items\n  p1, p2 = prefs[person1], prefs[person2]\n  si = set(p1).intersection(set(p2))\n\n  # Add up the squares of all the differences \n  matches = (p1[item] - p2[item] for item in si)\n  return sum(a * a for a in matches) \n']], ['Euclidian distance between posts based on tags'], 2], [(1877725, 1), [['Edit: based on my comment below, I would use code like this:'], ['-10000']], [[' def sim_distance(prefs, person1, person2):\n    p1, p2 = prefs[person1], prefs[person2]\n    s, t = set(p1), set(p2)\n    return len(s.intersection(t)) / len(s.union(t))\n']], ['Euclidian distance between posts based on tags'], 2], [(1879694, 0), [['You can get id by control.GetID() but you do not need to get ID to bind, you can just do this'], ['It is preferable(id should be implementation detail) and short e.g. in this sample']], [[' self.btn.Bind(wx.EVT_BUTTON, self._onBtnClick)\n']], ['wxPython - How to get the ID of a widget when you passed in -1?'], 2], [(1879694, 1), [['It is preferable(id should be implementation detail) and short e.g. in this sample'], ['-10000']], [[' import wx\n\napp = wx.PySimpleApp()\nframe = wx.Frame(None)\nbtn = wx.Button(frame, -1, "anurag")\nbtn.Bind(wx.EVT_BUTTON, lambda e:wx.MessageBox("Wow it works"))\nframe.Show()\napp.SetTopWindow(frame)\napp.MainLoop()\n']], ['wxPython - How to get the ID of a widget when you passed in -1?'], 2], [(1879872, 0), [['page template:'], ['templatetags/message_tags.py:']], [[' {% load message_tags %}    \n\n<h3>Messages</h3>\n<div class="message_list">\n    {% for message in messages %}\n        {% render_message message %}\n    {% endfor %}\n</div>\n']], ['DJANGO : Update div with AJAX'], 4], [(1879872, 1), [['templatetags/message_tags.py:'], ['now you can use the same template to render the the additional messages you want to add to the  message_list  div in a separate view which you can call from your ajax code']], [[" from django import template\n\nregister = template.Library()\n\n@register.inclusion_tag('individual_message.html')\ndef render_message(message):\n    context_for_rendering_inclusion_tag = {'message': message}\n    return context_for_rendering_inclusion_tag\n"]], ['DJANGO : Update div with AJAX'], 4], [(1879872, 2), [['now you can use the same template to render the the additional messages you want to add to the  message_list  div in a separate view which you can call from your ajax code'], ['And your jQuery will look something like...']], [[" def ajax_retrieve_latest_message(request):\n    # ... Get the lastest message\n    render_to_response('individual_message.html', ... \n"]], ['DJANGO : Update div with AJAX'], 4], [(1879872, 3), [['And your jQuery will look something like...'], ['For completeness, your  individual_message.html  file would contain all the markup for displaying the actual message on the page...']], [[' $.post(url_of_ajax_view, request_data, function(data, status) {\n    if (status == \'success\') {\n        $(".message_list").append(data);\n    }\n});\n']], ['DJANGO : Update div with AJAX'], 4], [(1879914, 0), [['The struct module is designed to unpack heterogeneous data to a tuple based on a format string. It makes more sense to unpack the whole struct at once rather than trying to pull out one field at a time. Here is an example:'], ['Then you can access a given field, for example the first field:']], [[" fields = struct.unpack('!BBI4H20sIB', data)\n"]], ['Decoding packed data into a structure'], 2], [(1879914, 1), [['Then you can access a given field, for example the first field:'], ['You could also use the tuple to initialize a NamedTuple; look at the  documentation for struct  for an example. NamedTuples are only available in Python 2.6+, but they behave more like Python structures in that you can access elements as attributes, e.g. fields.header. Of course, you could also accomplish this with a little more work by writing a class to encapsulate the information from the tuple... again, if you care. You can always just index into fields directly, as I showed above.']], [[' fields[0]\n']], ['Decoding packed data into a structure'], 2], [(1880039, 0), [['In real application you should better write a subclass of  QMainWindow  which could look like this:'], ['And also create a main executable script in the same directory as MyMainWindow.py:']], [[' # Store this code in the file MyMainWindow.py\nfrom PyQt4.QtGui import *\n\nclass MyMainWindow(QMainWindow):\n    def __init__(self, ui_layout):\n        QMainWindow.__init__(self)\n\n        self.ui = ui_layout\n        ui_layout.setupUi(self)\n']], ['How to run the program generated by pyuic4?'], 2], [(1880039, 1), [['And also create a main executable script in the same directory as MyMainWindow.py:'], ['Then run this last script to launch the program.']], [[' from PyQt4.QtGui import *\nfrom MyMainWindow import *\nfrom Form1 import *             # replace Form1 the name of your generated file\nimport sys\n\napp = QApplication(sys.argv)\n\nwindow = MyMainWindow(Ui_Form1())\nwindow.show()\n\nsys.exit(app.exec_())\n']], ['How to run the program generated by pyuic4?'], 2], [(1880404, 0), [["Here's a brief script that illustrates ConfigParser and  optparse  in action."], ['Output:']], [[' import ConfigParser\nfrom optparse import OptionParser\n\nCONFIG_FILENAME = \'defaults.cfg\'\n\ndef main():\n    config = ConfigParser.ConfigParser()\n    config.read(CONFIG_FILENAME)\n\n    parser = OptionParser()\n    parser.add_option("-l",\n                      "--language",\n                      dest="language",\n                      help="The UI language",\n                      default=config.get("Localization", "language"))\n    parser.add_option("-f",\n                      "--flag",\n                      dest="flag",\n                      help="The country flag",\n                      default=config.get("Localization", "flag"))\n\n    print parser.parse_args()\n\nif __name__ == "__main__":\n    main()\n']], ['Using a file to store optparse arguments'], 5], [(1880404, 1), [['Output:'], ['Run with " parser.py --language=French ":']], [[" (<Values at 0x2182c88: {'flag': 'japan.png', 'language': 'Japanese'}>, [])\n"]], ['Using a file to store optparse arguments'], 5], [(1880404, 2), [['Run with " parser.py --language=French ":'], ['Help is built in.\nRun with " parser.py --help ":']], [[" (<Values at 0x2215c60: {'flag': 'japan.png', 'language': 'French'}>, [])\n"]], ['Using a file to store optparse arguments'], 5], [(1880404, 3), [['Help is built in.\nRun with " parser.py --help ":'], ['The config file:']], [[' Usage: parser.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -l LANGUAGE, --language=LANGUAGE\n                        The UI language\n  -f FLAG, --flag=FLAG  The country flag\n']], ['Using a file to store optparse arguments'], 5], [(1880404, 4), [['The config file:'], ['-10000']], [[' [Localization]\nlanguage=Japanese\nflag=japan.png\n']], ['Using a file to store optparse arguments'], 5], [(1880683, 0), [['The most efficient way to do it is this:'], ['output']], [[' tuples = [(1,2), (3,4), (5,6)]\n[item for t in tuples for item in t]\n']], ['pythonic way to explode a list of tuples'], 3], [(1880683, 1), [['output'], ['I know someone is going to suggest this solution']], [[' [1, 2, 3, 4, 5, 6]\n']], ['pythonic way to explode a list of tuples'], 3], [(1880683, 2), [['I know someone is going to suggest this solution'], ["But don't use it, it will create a new intermediate result list for each step! unless you don't care about performance and just want a compact solution.\nFor more details check  Alex's answer"]], [[' sum(tuples, ())\n']], ['pythonic way to explode a list of tuples'], 3], [(1883980, 0), [["Here's an alternative with string-splitting, which can often be useful for finding-related processes:"], ["And here's a quick (and somewhat dirty, in that you have to choose some chaff that can't match the needle) one-liner:"]], [[' def findnth(haystack, needle, n):\n    parts= haystack.split(needle, n+1)\n    if len(parts)<=n+1:\n        return -1\n    return len(haystack)-len(parts[-1])-len(needle)\n']], ['Find the nth occurrence of substring in a string'], 2], [(1883980, 1), [["And here's a quick (and somewhat dirty, in that you have to choose some chaff that can't match the needle) one-liner:"], ['-10000']], [[" 'foo bar bar bar'.replace('bar', 'XXX', 1).find('bar')\n"]], ['Find the nth occurrence of substring in a string'], 2], [(1884323, 0), [['-10000'], ['Edit : note that, with  base_lists  so short, the genexp (with unlimited memory available) is slow.  Consider the following file  tu.py :']], [[' tuple(x for sublist in base_lists for x in sublist)\n']], ['Converting a list of lists to a tuple in Python'], 4], [(1884323, 1), [['Edit : note that, with  base_lists  so short, the genexp (with unlimited memory available) is slow.  Consider the following file  tu.py :'], ['Now:']], [[' base_lists = [[a, b] for a in range(1, 3) for b in range(1, 6)]\n\ndef genexp():\n  return tuple(x for sublist in base_lists for x in sublist)\n\ndef listcomp():\n  return tuple([x for sublist in base_lists for x in sublist])\n\ndef withsum():\n  return tuple(sum(base_lists,[]))\n\nimport itertools as it\n\ndef withit():\n  return tuple(it.chain(*base_lists))\n']], ['Converting a list of lists to a tuple in Python'], 4], [(1884323, 2), [['Now:'], ['When lists are longer (i.e., when performance really matters) things are a bit different.  E.g., putting a  100 *  on the RHS defining  base_lists :']], [[" $ python -mtimeit -s'import tu' 'tu.genexp()'\n100000 loops, best of 3: 7.86 usec per loop\n$ python -mtimeit -s'import tu' 'tu.withsum()'\n100000 loops, best of 3: 5.79 usec per loop\n$ python -mtimeit -s'import tu' 'tu.withit()'\n100000 loops, best of 3: 5.17 usec per loop\n$ python -mtimeit -s'import tu' 'tu.listcomp()'\n100000 loops, best of 3: 5.33 usec per loop\n"]], ['Converting a list of lists to a tuple in Python'], 4], [(1884323, 3), [['When lists are longer (i.e., when performance really matters) things are a bit different.  E.g., putting a  100 *  on the RHS defining  base_lists :'], ['so for long lists only  withsum  is a performance disaster -- the others are in the same ballpark, although clearly  itertools  has the edge, and list comprehensions (when abundant memory is available, as it always will be in microbenchmarks;-) are faster than genexps.']], [[" $ python -mtimeit -s'import tu' 'tu.genexp()'\n1000 loops, best of 3: 408 usec per loop\n$ python -mtimeit -s'import tu' 'tu.withsum()'\n100 loops, best of 3: 5.07 msec per loop\n$ python -mtimeit -s'import tu' 'tu.withit()'\n10000 loops, best of 3: 148 usec per loop\n$ python -mtimeit -s'import tu' 'tu.listcomp()'\n1000 loops, best of 3: 278 usec per loop\n"]], ['Converting a list of lists to a tuple in Python'], 4], [(1884327, 0), [['So for example:'], ["becomes (roughly -- haven't tested it!):"]], [[' def foo(bar, baz="something or other"):\n    print bar, baz\n']], ['Named parameters with Python C API?'], 2], [(1884327, 1), [["becomes (roughly -- haven't tested it!):"], ['-10000']], [[' #include "Python.h"\n\nstatic PyObject *\nthemodule_foo(PyObject *self, PyObject *args, PyObject *keywds)\n{\n    char *bar;\n    char *baz = "something or other";\n\n    static char *kwlist[] = {"bar", "baz", NULL};\n\n    if (!PyArg_ParseTupleAndKeywords(args, keywds, "s|s", kwlist,\n                                     &bar, &baz))\n        return NULL;\n\n    printf("%s %s\\n", bar, baz);\n\n    Py_INCREF(Py_None);\n    return Py_None;\n}\n\nstatic PyMethodDef themodule_methods[] = {\n    {"foo", (PyCFunction)themodule_foo, METH_VARARGS | METH_KEYWORDS,\n     "Print some greeting to standard output."},\n    {NULL, NULL, 0, NULL}   /* sentinel */\n};\n\nvoid\ninitthemodule(void)\n{\n  Py_InitModule("themodule", themodule_methods);\n}\n']], ['Named parameters with Python C API?'], 2], [(1885251, 0), [['-10000'], ['newer versions of pylint will take this line instead']], [[' # pylint: disable-msg=C0103\n']], ['How do I tell PyLint "it\'s a variable, not a constant" to stop message C0103?'], 2], [(1885251, 1), [['newer versions of pylint will take this line instead'], ['-10000']], [[' # pylint: disable=C0103\n']], ['How do I tell PyLint "it\'s a variable, not a constant" to stop message C0103?'], 2], [(1885314, 0), [['-10000'], ['prints']], [[' class ListParser:\n\n def __init__(self, s):\n  self.str = s.split("\\n")\n  print self.str\n  self.answer = []\n\n def parse(self):\n  self.nextLine()\n  self.topList()\n  return\n\n def topList(self):\n  while(len(self.str) > 0):\n   self.topListItem()\n\n def topListItem(self):\n  l = self.nextLine()\n  print "TOP: " + l\n  l = self.nextLine()\n  if l != \'\':\n   raise Exception("expected blank line but found \'%s\'" % l)\n  sub = self.sublist()\n\n def nextLine(self):\n  return self.str.pop(0)\n\n def sublist(self):\n  while True:\n   l = self.nextLine()\n   if l == \'\':\n    return # end of sublist marked by blank line\n   else:\n    print "SUB: " + l\n\nparser = ListParser(s)\nparser.parse() \nprint "done"\n']], ['Parsing multilevel text list'], 2], [(1885314, 1), [['prints'], ['-10000']], [[' TOP: 1 List name\nSUB: 1 item\nSUB: 2 item\nSUB: 3 item\nTOP: 2 List name\nSUB: 1 item\nSUB: 2 item\nSUB: 3 item\nTOP: 3 List name\nSUB: 1 item\nSUB: 2 item\nSUB: 3 item\ndone\n']], ['Parsing multilevel text list'], 2], [(1885324, 0), [['So,'], ['So, suppose you want to read  a.csv  and write  b.csv  with the same column order.  Using plain reader and writer is too easy, so you want to use the Dict varieties instead;-). Well, one way is...:']], [[" for rowdict in myReader:\n  print ['%s:%s' % (f, rowdict[f]) for f in myReader.fieldnames]\n"]], ['Is it possible to keep the column order using the Python csv DictReader'], 2], [(1885324, 1), [['So, suppose you want to read  a.csv  and write  b.csv  with the same column order.  Using plain reader and writer is too easy, so you want to use the Dict varieties instead;-). Well, one way is...:'], ["assuming you have headers in  a.csv  (otherewise you can't use a DictReader on it) and want just the same headers in  b.csv ."]], [[" import csv\n\na = open('a.csv', 'r')\nb = open('b.csv', 'w')\nra = csv.DictReader(a)\nwb = csv.DictWriter(b, None)\n\nfor d in ra:\n\n  if wb.fieldnames is None:\n    # initialize and write b's headers\n    dh = dict((h, h) for h in ra.fieldnames)\n    wb.fieldnames = ra.fieldnames\n    wb.writerow(dh)\n\n  wb.writerow(d)\n\nb.close()\na.close()\n"]], ['Is it possible to keep the column order using the Python csv DictReader'], 2], [(1885868, 0), [['-10000'], ["Since you're going to write header back to the new files, you don't need to do anything with it. To write it back to the new file:"]], [[" f = open('fname')\nheader = [next(f) for _ in range(header_len)]\n"]], ['Pythonic way to ignore for loop control variable'], 3], [(1885868, 1), [["Since you're going to write header back to the new files, you don't need to do anything with it. To write it back to the new file:"], ['if you know the number of lines in the old file,  list_of_lines  would become:']], [[" open('new', 'w').writelines(header + list_of_lines)\n"]], ['Pythonic way to ignore for loop control variable'], 3], [(1885868, 2), [['if you know the number of lines in the old file,  list_of_lines  would become:'], ['-10000']], [[' list_of_lines = [next(f) for _ in range(chunk_len)]\n']], ['Pythonic way to ignore for loop control variable'], 3], [(1886002, 0), [['-10000'], ["The min function compares the given items and returns the minimum one (of course :P).  What isn't obvious at first is you can control what value is used to compare them, this is the 'key' parameter."]], [[" L = list # 'list' is a poor variable name, use something else\nresult = min((n.foo(args) for n in L),\n             key=lambda x: ClassFred.objects.get(arg1=x))\n# if you don't have to use arg1 as a named parameter:\nresult = min((n.foo(args) for n in L), key=ClassFred.objects.get)\n"]], ['Is this control structure a code smell?'], 5], [(1886002, 1), [["The min function compares the given items and returns the minimum one (of course :P).  What isn't obvious at first is you can control what value is used to compare them, this is the 'key' parameter."], ['The key function computes the "comparison key", and that is what is used to compare.  The default key function is identity, where the comparison key for an item is the item itself.']], [[' >>> L = [-2, -1, 3]\n>>> min(L)\n-2\n>>> min(L, key=abs)\n-1\n']], ['Is this control structure a code smell?'], 5], [(1886002, 2), [['The key function computes the "comparison key", and that is what is used to compare.  The default key function is identity, where the comparison key for an item is the item itself.'], ['Another example:']], [[' >>> def identity(x):\n...   return x\n>>> min(L, key=identity)\n-2\n']], ['Is this control structure a code smell?'], 5], [(1886002, 3), [['Another example:'], ['Your code above is using  item.foo(args)  as values, where item comes from your list; but the result of passing that through  ClassFred.objects.get(arg1=..)  is used to compare.  This means that construct is your key function:']], [[' >>> min("0000", "11", "222", "3")\n"0000" # lexicographical minimum\n>>> min("0000", "11", "222", "3", key=len)\n"3"\n']], ['Is this control structure a code smell?'], 5], [(1886002, 4), [['Your code above is using  item.foo(args)  as values, where item comes from your list; but the result of passing that through  ClassFred.objects.get(arg1=..)  is used to compare.  This means that construct is your key function:'], ['My code at the top just puts this together in one statement.']], [[" values = (n.foo(args) for n in L) # this is a generator expression\n# it is similar to a list comprehension, but doesn't compute or store\n# everything immediately\n\ndef keyfunc(x):\n  return ClassFred.objects.get(arg1=x)\n\nresult = min(values, key=keyfunc)\n"]], ['Is this control structure a code smell?'], 5], [(1887641, 0), [['-10000'], ['The setuptools doc is still empty about subclassing Command, but a minimal class will look like this:']], [[' description: describe the command\nuser_options: a list of options\ninitialize_options(): called at startup\nfinalize_options(): called at the end\nrun(): called to run the command\n']], ['Python setuptools custom configuration'], 3], [(1887641, 1), [['The setuptools doc is still empty about subclassing Command, but a minimal class will look like this:'], ['The class can then be hook as a command, using an entry point in its setup.py file:']], [['  class MyCommand(Command):\n     """setuptools Command"""\n     description = "run my command"\n     user_options = tuple()\n     def initialize_options(self):\n         """init options"""\n         pass\n\n     def finalize_options(self):\n         """finalize options"""\n         pass\n\n     def run(self):\n         """runner"""\n         XXX DO THE JOB HERE\n']], ['Python setuptools custom configuration'], 3], [(1887641, 2), [['The class can then be hook as a command, using an entry point in its setup.py file:'], ['-10000']], [['  setup(\n     # ...\n     entry_points = {\n     "distutils.commands": [\n     "my_command = mypackage.some_module:MyCommand"]}\n']], ['Python setuptools custom configuration'], 3], [(1888114, 0), [['Convert your string to an integer, by using the  int()  built-in function and specifying a base:'], ['Now, you have a standard integer representing a bitset. use  & ,  |  and any other bitwise operator to test individual bits.']], [[" >>> int('0x01010000',16)\n16842752\n"]], ['Python hexadecimal comparison'], 3], [(1888114, 1), [['Now, you have a standard integer representing a bitset. use  & ,  |  and any other bitwise operator to test individual bits.'], ['Now, if you need to convert back to your string:']], [[" >>> value  = int('0x01010000',16)\n>>> apple  = 0x01000000\n>>> orange = 0x00010000\n>>> banana = 0x00000100\n>>> bool(value & apple) # tests if apple is part of the value\nTrue\n>>> value |= banana     # adds the banana flag to the value\n>>> value &= ~orange    # removes the orange flag from the value\n"]], ['Python hexadecimal comparison'], 3], [(1888114, 2), [['Now, if you need to convert back to your string:'], ['-10000']], [[" >>> hex(value)\n'0x1000100'\n"]], ['Python hexadecimal comparison'], 3], [(1891884, 0), [['I then have the following rule in my  urls.py  file:'], ['My  settings.py  contains:']], [[" (r'^static/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),\n"]], ["Where to put a Django template's dependent files?"], 2], [(1891884, 1), [['My  settings.py  contains:'], ['-10000']], [[" MEDIA_ROOT = os.path.join(os.path.dirname(__file__), 'static').replace('\\\\', '/')\nADMIN_MEDIA_ROOT = os.path.join(os.path.dirname(__file__), 'static/admin').replace('\\\\', '/')\n"]], ["Where to put a Django template's dependent files?"], 2], [(1892111, 0), [['A graph such as the following:'], ['Would be represented with data such as:']], [[' root --+---> child1\n       +---> child2 --+--> subchild1\n       |              +--> subchild2\n       +---> child3\n']], ['Sqlite3 "chained" query'], 2], [(1892111, 1), [['Would be represented with data such as:'], ['-10000']], [[' id       parent_id     data\n---      -------       ----\n1        NULL          root\n2        1             child1\n3        1             child2\n4        3             subchild1\n5        3             subchild2\n6        1             child3\n']], ['Sqlite3 "chained" query'], 2], [(1893867, 0), [['If you want to allow duplicates you can use randrange instead:'], ['To convert to strings:']], [[' randomInts = [random.randrange(2000) for _ in range(100)]\n']], ['Python random and int to string question'], 2], [(1893867, 1), [['To convert to strings:'], ['-10000']], [[' randomStrings = [str(x) for x in randomInts]\n']], ['Python random and int to string question'], 2], [(1894711, 0), [["It's quite easy with  BeautifulSoup :"], ['Output:']], [[' html = \'\'\'<tr><td valign="top"><img src="/icons/unknown.gif" alt="[   ]">software_0.1-0.log</td><td align="right">17-Nov-2009 13:46  </td><td align="right">186K</td></tr>\'\'\'\n\nimport BeautifulSoup\nsoup = BeautifulSoup.BeautifulSoup(html)\nprint soup.td.next.next\nprint soup.td.nextSibling.next\n']], ['How to filter data from a file using Python?'], 2], [(1894711, 1), [['Output:'], ['-10000']], [[' software_0.1-0.log\n17-Nov-2009 13:46\n']], ['How to filter data from a file using Python?'], 2], [(1895089, 0), [['This is how FastCGI works in python, to put it short:'], ['In PHP/FastCGI this is different, because only the PHP engine is loaded all the time, while the PHP script itself is executed for each request.']], [[' 1. Run startup code\n2. Run request function\n3. Wait for new request, then goto step 2.   \n']], ['Persistent MySQL connections in Python'], 2], [(1895089, 1), [['In PHP/FastCGI this is different, because only the PHP engine is loaded all the time, while the PHP script itself is executed for each request.'], ["So the difference is that in Python you can define your own initialization. And that's where you put your MySQL connection. :)"]], [[' 1. Start PHP Engine\n2. Run script\n3. Wait for new request, then goto step 2.\n']], ['Persistent MySQL connections in Python'], 2], [(1895615, 0), [['-10000'], ['Sample output, for  count=10  and assuming that you mean the Standard Library  random()  function:']], [[' randomSample = [(random() - 0.5, random() - 0.5) for _ in range(count)]\n']], ["Pythonic way to write a for loop that doesn't use the loop index"], 4], [(1895615, 1), [['Sample output, for  count=10  and assuming that you mean the Standard Library  random()  function:'], ['If you really need to make it a function, then you can abbreviate by using a  lambda :']], [[' [(-0.07, -0.40), (0.39, 0.18), (0.13, 0.29), (-0.11, -0.15),\\\n(-0.49, 0.42), (-0.20, 0.21), (-0.44, 0.36), (0.22, -0.08),\\\n(0.21, 0.31), (0.33, 0.02)]\n']], ["Pythonic way to write a for loop that doesn't use the loop index"], 4], [(1895615, 2), [['If you really need to make it a function, then you can abbreviate by using a  lambda :'], ['This way  you can call it like:']], [[' f = lambda count: [(random() - 0.5, random() - 0.5) for _ in range(count)]\n']], ["Pythonic way to write a for loop that doesn't use the loop index"], 4], [(1895615, 3), [['This way  you can call it like:'], ['you get the idea...']], [[' >>> f(1)\nf(1)\n[(0.03, -0.09)]\n>>> f(2)\nf(2)\n[(-0.13, 0.38), (0.10, -0.04)]\n>>> f(5)\nf(5)\n[(-0.38, -0.14), (0.31, -0.16), (-0.34, -0.46), (-0.45, 0.28), (-0.01, -0.18)]\n>>> f(10)\nf(10)\n[(0.01, -0.24), (0.39, -0.11), (-0.06, 0.09), (0.42, -0.26), (0.24, -0.44) , (-0.29, -0.30), (-0.27, 0.45), (0.10, -0.41), (0.36, -0.07), (0.00, -0.42)]\n>>> \n']], ["Pythonic way to write a for loop that doesn't use the loop index"], 4], [(1896628, 0), [['With the help of the  lxml docs  and the dir() built_in, I managed to produce this:'], ['Looks like you need something like']], [[" >>> from lxml import objectify\n>>> import StringIO\n>>> tree = objectify.parse(StringIO.StringIO('<parent><child>Billy</child><child>Bob</child></parent>'))\n>>> root = tree.getroot()\n>>> root.tag\n'parent'\n>>> [(foo.tag, foo.text) for foo in root.getchildren()]\n[('child', 'Billy'), ('child', 'Bob')]\n>>>\n"]], ['lxml[.objectify] documentElement tagName'], 2], [(1896628, 1), [['Looks like you need something like'], ['-10000']], [[" deleg = getattr(self,'elem_' + str(root.tag))\ndeleg(tree)\n"]], ['lxml[.objectify] documentElement tagName'], 2], [(1896674, 0), [["Using numpy you can also do the job, using only about 250MB.  It isn't particular fast to load this way, as you have to count the lines and pre-allocate the array, but it may be the fastest actual sort given that it's in-memory:"], ['Output on my machine with a sample file similar to what you showed:']], [[" import time\nimport numpy as np\nimport csv\n\nstart = time.time()\ndef elapsed():\n    return time.time() - start\n\n# count data rows, to preallocate array\nf = open('links.csv', 'rb')\ndef count(f):\n    while 1:\n        block = f.read(65536)\n        if not block:\n             break\n        yield block.count(',')\n\nlinecount = sum(count(f))\nprint '\\n%.3fs: file has %s rows' % (elapsed(), linecount)\n\n# pre-allocate array and load data into array\nm = np.zeros(linecount, dtype=[('a', np.uint32), ('b', np.uint32)])\nf.seek(0)\nf = csv.reader(open('links.csv', 'rb'))\nfor i, row in enumerate(f):\n    m[i] = int(row[0]), int(row[1])\n\nprint '%.3fs: loaded' % elapsed()\n# sort in-place\nm.sort(order='b')\n\nprint '%.3fs: sorted' % elapsed()\n"]], ['Python: How to read huge text file into memory'], 2], [(1896674, 1), [['Output on my machine with a sample file similar to what you showed:'], ['The default in numpy is  Quicksort .  The ndarray.sort() routine (which sorts in-place) can also take keyword argument  kind="mergesort"  or  kind="heapsort"  but it appears neither of these is capable of sorting on a  Record Array  which, incidentally, I used as the only way I could see to sort the columns  together  as opposed to the default which would sort them independently (totally messing up your data).']], [[' 6.139s: file has 33253213 lines\n238.130s: read into memory\n517.669s: sorted\n']], ['Python: How to read huge text file into memory'], 2], [(1896918, 0), [['For example for a directory structure like this:'], ['You can just run:']], [[' new_project\n├── antigravity.py\n└── test_antigravity.py\n']], ['Running unittest with typical test directory structure'], 7], [(1896918, 1), [['You can just run:'], ['For a directory structure like yours:']], [[' $ cd new_project\n$ python -m unittest test_antigravity\n']], ['Running unittest with typical test directory structure'], 7], [(1896918, 2), [['For a directory structure like yours:'], ['And in the test modules inside the  test  package, you can import the  antigravity  package and its modules as usual:']], [[' new_project\n├── antigravity\n│\xa0\xa0 ├── __init__.py         # make it a package\n│\xa0\xa0 └── antigravity.py\n└── test\n    ├── __init__.py         # also make test a package\n    └── test_antigravity.py\n']], ['Running unittest with typical test directory structure'], 7], [(1896918, 3), [['And in the test modules inside the  test  package, you can import the  antigravity  package and its modules as usual:'], ['To run a single test module, in this case  test_antigravity.py :']], [[' # import the package\nimport antigravity\n\n# import the antigravity module\nfrom antigravity import antigravity\n\n# or an object inside the antigravity module\nfrom antigravity.antigravity import my_object\n']], ['Running unittest with typical test directory structure'], 7], [(1896918, 4), [['To run a single test module, in this case  test_antigravity.py :'], ['Also you can run a single  TestCase  or a single test method:']], [[' $ cd new_project\n$ python -m unittest test.test_antigravity\n']], ['Running unittest with typical test directory structure'], 7], [(1896918, 5), [['Also you can run a single  TestCase  or a single test method:'], ['You can also use  test discovery  which will discover and run all the tests for you, they must be modules or packages named  test*.py  (can be changed with the  -p, --pattern  flag):']], [[' $ python -m unittest test.test_antigravity.GravityTestCase\n$ python -m unittest test.test_antigravity.GravityTestCase.test_method\n']], ['Running unittest with typical test directory structure'], 7], [(1896918, 6), [['You can also use  test discovery  which will discover and run all the tests for you, they must be modules or packages named  test*.py  (can be changed with the  -p, --pattern  flag):'], ['This will run all the  test*.py  modules inside the  test  package.']], [[' $ cd new_project\n$ python -m unittest discover\n']], ['Running unittest with typical test directory structure'], 7], [(1897939, 0), [["I don't know if it's the best way to do this but what I do is instead of:"], ['you can do:']], [[' application = service.Application("chatserver")\ninternet.TCPServer(1025, factory).setServiceParent(application)\n']], ['How do you you run a Twisted application via Python (instead of via Twisted)?'], 3], [(1897939, 1), [['you can do:'], ['Sumarized if you want to have the two options (twistd and python):']], [[' from twisted.internet import reactor\nreactor.listenTCP(1025, factory)\nreactor.run()\n']], ['How do you you run a Twisted application via Python (instead of via Twisted)?'], 3], [(1897939, 2), [['Sumarized if you want to have the two options (twistd and python):'], ['Hope it helps!']], [[' if __name__ == \'__main__\':\n    from twisted.internet import reactor\n    reactor.listenTCP(1025, factory)\n    reactor.run()\nelse:\n    application = service.Application("chatserver")\n    internet.TCPServer(1025, factory).setServiceParent(application)\n']], ['How do you you run a Twisted application via Python (instead of via Twisted)?'], 3], [(1897960, 0), [['You can use  dir  to get a list the methods of any object. This is very useful in the interactive prompt:'], ['The interesting methods are usually those not starting with underscores. You can write your own version of dir that ignores names starting with underscores if you wish:']], [[" >>> dir(l1)\n['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__',\n'__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__',\n'__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__',\n'__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__',\n'__str__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n"]], ['How do I check the methods that an object has, in Python?'], 2], [(1897960, 1), [['The interesting methods are usually those not starting with underscores. You can write your own version of dir that ignores names starting with underscores if you wish:'], ['-10000']], [[" >>> mydir = lambda a:[x for x in dir(a) if not x.startswith('_')]\n>>> mydir([])\n['append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n"]], ['How do I check the methods that an object has, in Python?'], 2], [(1898305, 0), [['-10000'], ['workers now has a list of all the workers']], [[' import csv\n\nreader = csv.reader(open(\'workers.csv\', newline=\'\'), delimiter=\',\', quotechar=\'"\')\nworkers = [ageName(row[0], row[1]) for row in reader]\n']], ['python csv into dictionary'], 4], [(1898305, 1), [['workers now has a list of all the workers'], ["Is there any reason you're using old style classes? I'm using new style here."]], [[" >>> workers[0].name\n'jon'\n"]], ['python csv into dictionary'], 4], [(1898305, 2), [["Is there any reason you're using old style classes? I'm using new style here."], ['Ladies and gentlemen, 7(.5) lines.']], [[' class Student:\n    sports = []\n    def __init__(self, row):\n       self.lname, self.fname, self.ID, self.sport = row\n       self.sports.append(self.sport)\n    def get(self):\n       return (self.lname, self.fname, self.ID, self.sport)\n\nreader = csv.reader(open(\'copy-john.csv\'), delimiter=\',\', quotechar=\'"\')\nprint "%-14s|%-10s|%-5s|%-11s" % tuple(reader.next()) # read header line from csv\nprint "-" * 45\nstudents = list(map(Student, reader)) # read all remaining lines\nfor student in students:\n    print "%-14s|%-10s|%-5s|%3s" % student.get()\n\n# Printing all sports that are specified by students\nfor s in set(Student.sports): # class attribute\n    print s, Student.sports.count(s)\n\n# Printing sports that are not picked \nallsports = [\'Basketball\',\'Football\',\'Other\',\'Baseball\',\'Handball\',\'Soccer\',\'Volleyball\',\'I do not like sport\']\nfor s in set(allsports) - set(Student.sports):\n    print s, 0\n']], ['python csv into dictionary'], 4], [(1898305, 3), [['Ladies and gentlemen, 7(.5) lines.'], ['-10000']], [[' allsports = [\'Basketball\',\'Football\',\'Other\',\'Baseball\',\'Handball\',\n             \'Soccer\',\'Volleyball\',\'I do not like sport\']\nsports = []\nreader = csv.reader(open(\'copy-john.csv\'))\nfor row in reader:\n    if reader.line_num: sports.append(s[3])\n    print "%-14s|%-10s|%-5s|%-11s" % tuple(s)\nfor s in allsports: print s, sports.count(s)\n']], ['python csv into dictionary'], 4], [(1900216, 0), [['-10000'], ['for basename only:']], [[" >>> os.path.basename(r'C:\\abc.txt')\n'abc.txt'\n"]], ['Is there a function that gives me a file name without path?'], 2], [(1900216, 1), [['for basename only:'], ['-10000']], [[" >>> base, ext = os.path.splitext(os.path.basename(r'C:\\abc.txt'))\n>>> base\n'abc'\n"]], ['Is there a function that gives me a file name without path?'], 2], [(1900956, 0), [["the  repr  function will return a string which is the exact definition of your dict (except for the order of the element, dicts are unordered in python). unfortunately, i can't tell a way to automatically get a string which represent the variable name."], ['writing to a file is pretty standard stuff, like any other file write:']], [[' >>> dict = {\'one\': 1, \'two\': 2}\n>>> repr(dict)\n"{\'two\': 2, \'one\': 1}"\n']], ['Write variable to file, including name'], 2], [(1900956, 1), [['writing to a file is pretty standard stuff, like any other file write:'], ['-10000']], [[" f = open( 'file.py', 'w' )\nf.write( 'dict = ' + repr(dict) + '\\n' )\nf.close()\n"]], ['Write variable to file, including name'], 2], [(1904039, 0), [['Then opened the terminal and ran the self update.'], ['That second part, installing Python 2.6, took forever.  But when it completed it prompted me with the following:']], [[' sudo port selfupdate\nsudo port install python26\n']], ['Django + MySQL on Mac OS 10.6.2 Snow Leopard'], 9], [(1904039, 1), [['That second part, installing Python 2.6, took forever.  But when it completed it prompted me with the following:'], ["I forgot to mention how handy 'port search ' command is.  I searched for 'mysql' and similar to find the thing to type after 'install'.  But I proceeded with reinstalling both the client and server for MySQL.  Perhaps I did this in reverse order, but the end result worked fine."]], [[' To fully complete your installation and make python 2.6 the default, please run\n\nsudo port install python_select  \nsudo python_select python26\n']], ['Django + MySQL on Mac OS 10.6.2 Snow Leopard'], 9], [(1904039, 2), [["I forgot to mention how handy 'port search ' command is.  I searched for 'mysql' and similar to find the thing to type after 'install'.  But I proceeded with reinstalling both the client and server for MySQL.  Perhaps I did this in reverse order, but the end result worked fine."], ['So naturally:']], [[' sudo port install mysql5\n...\n--->  Installing mysql5 @5.1.41_0\nThe MySQL client has been installed.\nIf you also want a MySQL server, install the mysql5-server port.\n']], ['Django + MySQL on Mac OS 10.6.2 Snow Leopard'], 9], [(1904039, 3), [['So naturally:'], ['I love how the so many of the macports installations give you feedback as to what to do next.  At the end of the server installation, it said the following:']], [[' sudo port install mysql5-server\n']], ['Django + MySQL on Mac OS 10.6.2 Snow Leopard'], 9], [(1904039, 4), [['I love how the so many of the macports installations give you feedback as to what to do next.  At the end of the server installation, it said the following:'], ["It was a new install for me (didn't have any local schemas).  For completeness, and for my own reference, here is the output of running that command:"]], [[' ******************************************************\n* In order to setup the database, you might want to run\n* sudo -u _mysql mysql_install_db5\n* if this is a new install\n******************************************************\n']], ['Django + MySQL on Mac OS 10.6.2 Snow Leopard'], 9], [(1904039, 5), [["It was a new install for me (didn't have any local schemas).  For completeness, and for my own reference, here is the output of running that command:"], ['With much, much hope that this would provide me with MySQLdb package, I installed it (and it did).']], [[" Installing MySQL system tables...\nOK\nFilling help tables...\nOK\n\nTo start mysqld at boot time you have to copy\nsupport-files/mysql.server to the right place for your system\n\nPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !\nTo do so, start the server, then issue the following commands:\n\n/opt/local/lib/mysql5/bin/mysqladmin -u root password 'new-password'\n/opt/local/lib/mysql5/bin/mysqladmin -u root -h iMac.local password 'new-password'\n\nAlternatively you can run:\n/opt/local/lib/mysql5/bin/mysql_secure_installation\n\nwhich will also give you the option of removing the test\ndatabases and anonymous user created by default.  This is\nstrongly recommended for production servers.\n\nSee the manual for more instructions.\n\nYou can start the MySQL daemon with:\ncd /opt/local ; /opt/local/lib/mysql5/bin/mysqld_safe &\n\nYou can test the MySQL daemon with mysql-test-run.pl\ncd /opt/local/mysql-test ; perl mysql-test-run.pl\n\nPlease report any problems with the /opt/local/lib/mysql5/bin/mysqlbug script!\n\nThe latest information about MySQL is available at http://www.mysql.com/\nSupport MySQL by buying support/licenses from http://shop.mysql.com/\n"]], ['Django + MySQL on Mac OS 10.6.2 Snow Leopard'], 9], [(1904039, 6), [['With much, much hope that this would provide me with MySQLdb package, I installed it (and it did).'], ['Afterwords I cranked up the python interpreter attempted to import MySQLdb, the very thing in my way all this time.']], [[' sudo port install py26-mysql\n']], ['Django + MySQL on Mac OS 10.6.2 Snow Leopard'], 9], [(1904039, 7), [['Afterwords I cranked up the python interpreter attempted to import MySQLdb, the very thing in my way all this time.'], ['Just one more thing:']], [[' iMac:~ drhoden$ python\nPython 2.6.4 (r264:75706, Dec 15 2009, 18:00:14) \n[GCC 4.2.1 (Apple Inc. build 5646) (dot 1)] on darwin\nType "help", "copyright", "credits" or "license" for more information.\n>>> import MySQLdb\n/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/MySQLdb/__init__.py:34: DeprecationWarning: the sets module is deprecated from sets import ImmutableSet\n>>> \n']], ['Django + MySQL on Mac OS 10.6.2 Snow Leopard'], 9], [(1904039, 8), [['Just one more thing:'], ["After all of this I was finally able to crank up my Django project and remotely connect to my company's MySQL server!!  It may not have been necessary to reinstall Django using MacPorts, but I wasn't going to risk complications."]], [[' sudo port install py26-django\n']], ['Django + MySQL on Mac OS 10.6.2 Snow Leopard'], 9], [(1905721, 0), [["Here's a custom template fitler which adds a new argument 'c' that will change (get it, c... change) the functional of a/A.  It basically serves as a switch to toggle the functionality of a/A.  That's hard to explain.  Here's some examples:"], ["And here's the filter..."]], [[' {{ datetime|smartdate:"h:i A" }} = \'12:30 AM\'\n{{ datetime|smartdate:"h:i Ac" }} = \'12:30 A.M.\'\n{{ datetime|smartdate:"h:i a" }} = \'12:30 a.m.\'\n{{ datetime|smartdate:"h:i ac" }} = \'12:30 am\'\n']], ['Django date filter to output "am" or "A.M."'], 2], [(1905721, 1), [["And here's the filter..."], ['Edit -- Slightly optimized the filter']], [[' import re\nfrom django.template.defaultfilters import date as date_filter\n\n# --------------------------------------------------------------------------------\n#   |smartdate:"date format" -- new arg \'c\' (change) alteras the AM/pm appearance\n# --------------------------------------------------------------------------------\n@register.filter\ndef smartdate(value, arg):\n    rendered = date_filter(value, arg)\n    if \'c\' in arg:\n        rendered = re.sub(\'(a|p)\\.m\\.c\', lambda m: \'%sm\' % m.group(1), rendered)\n        rendered = re.sub(\'(A|P)Mc\', lambda m: \'%s.M.\' % m.group(1), rendered)\n    return rendered\n']], ['Django date filter to output "am" or "A.M."'], 2], [(1907610, 0), [["I think you'd want to grab doctests from their respective modules and functions and execute them within the unit testing framework. This would take care of test data setup/teardown. If your doctests were executed from within a test method of something that subclasses Django's unittest.TestCase they'd be able to use that test DB. You'd also be able to pass a mock request object into the doc test's execution context. Here's a  Django snippet  that provides a mock request object and  info  on it. Let's say you wanted to test the docstrings from all of an applications views. You could do something like this in tests.py :"], ['This  should  allow you to do something like this:']], [[" from ??? import RequestFactory\nfrom doctest import testmod, DocTestFailure\nfrom django.test import TestCase\n\nfrom myapp import views\n\nclass MyAppTest(TestCase):\n\n    fixtures = ['test_data.json']\n\n    def test_doctests(self):                \n        try:\n            testmod(views, extraglobs={\n                'REQUEST': RequestFactory()\n            }, raise_on_error=True)\n        except DocTestFailure, e:\n            self.fail(e)\n"]], ['Examples of using Doctests in Django in an Agile / BDD way'], 2], [(1907610, 1), [['This  should  allow you to do something like this:'], ["Again, this is just off the top of my head and not at all tested, but it's the only way that I think you could what you want without just putting all your view tests in the unit testing framework. "]], [[' def index(request):  \n    """\n    returns the top 10 most clicked products\n\n    >>> response = index(REQUEST)\n    >>> [test response content here]\n\n    """     \n    products = Product.objects.all()[:10]  \n    products = match_pictures_with_products( products, 10)  .  \n    return render_to_response(\'products/product_list.html\', {\'products\': products})\n']], ['Examples of using Doctests in Django in an Agile / BDD way'], 2], [(1907911, 0), [['This is fast and simple (assuming table and hashes are numpy.uint32 arrays):'], ['You may want to compare the speed with this:']], [[' table[hashes] = numpy.arange(len(hashes), dtype=numpy.uint32)\n']], ['Higher-performance method do this type of insert from python?'], 2], [(1907911, 1), [['You may want to compare the speed with this:'], ['By the way,  numpy.insert  does not do the same thing as the for-loop you posted.']], [[' table[hashes] = xrange(len(hashes))\n']], ['Higher-performance method do this type of insert from python?'], 2], [(1908741, 0), [['I think to do it in one query you might have to have month and year as separate fields...'], ['If your model were:']], [[" Article.objects.values('pub_date').annotate(article_count=Count('title'))\n"]], ["How to do this GROUP BY query in Django's ORM with annotate and aggregate"], 4], [(1908741, 1), [['If your model were:'], ['Then you could do:']], [[' class Article(models.Model):\n    title = models.CharField(max_length=150, verbose_name=_("title"))\n    # ... more \n    pub_date = models.DateTimeField(verbose_name=_(\'publishing date\'))\n    pub_year = models.IntegerField()\n    pub_month = models.IntegerField()\n']], ["How to do this GROUP BY query in Django's ORM with annotate and aggregate"], 4], [(1908741, 2), [['Then you could do:'], ["One way to do it is to use  extra ; but it won't grant you database independence..."]], [[" Article.objects.values('pub_year', 'pub_month').annotate(article_count=Count('title'))\n"]], ["How to do this GROUP BY query in Django's ORM with annotate and aggregate"], 4], [(1908741, 3), [["One way to do it is to use  extra ; but it won't grant you database independence..."], ['While this will work, I think (untested), it will require you to modify the  extra  fields if you ever change database servers. For instance, in SQL Server you would do  year(pub_date)  instead of  extract(year from pub_date) ...']], [[' models.Issue.objects.extra(select={\'year\': "EXTRACT(year FROM pub_date)", \'month\': "EXTRACT(month from pub_date)"}).values(\'year\', \'month\').annotate(Count(\'title\'))\n']], ["How to do this GROUP BY query in Django's ORM with annotate and aggregate"], 4], [(1909325, 0), [["You can't use the  myFunction  variable before it's assigned. Your example code is similar to:"], ['To do what you want, either re-arrange the order:']], [[' def myFunction():\n    print abc\n    abc = 123\n']], ['Is it possible to use functions before declaring their body in python?'], 4], [(1909325, 1), [['To do what you want, either re-arrange the order:'], ['Or declare  abc  as just a proxy:']], [[' def myFunction():\n    print "123"\n\nabc = myFunction\n']], ['Is it possible to use functions before declaring their body in python?'], 4], [(1909325, 2), [['Or declare  abc  as just a proxy:'], ['If your function takes parameters, use  *args  and  **kwargs :']], [[' # Style 1\nabc = lambda: myFunction()\n\n# Style 2\ndef abc():\n    return myFunction()\n\ndef myFunction():\n    print "123"\n']], ['Is it possible to use functions before declaring their body in python?'], 4], [(1909325, 3), [['If your function takes parameters, use  *args  and  **kwargs :'], ['-10000']], [[' # Style 1\nabc = lambda *args, **kwargs: myFunction(*args, **kwargs)\n\n# Style 2\ndef abc(*args, **kwargs):\n    return myFunction(*args, **kwargs)\n\ndef myFunction(x):\n    print x\n']], ['Is it possible to use functions before declaring their body in python?'], 4], [(1910003, 0), [['Why not exploit tuples?'], ['or, even']], [[" colprint([(name, version[0].summary or '')\n      for (name, version) in sorted(versions.iteritems())])\n"]], ['lisp-style style `let` syntax in Python list-comprehensions'], 2], [(1910003, 1), [['or, even'], ["Also, you may consider (in my first example) removing the  [] s, because that way you get a generator instead of a list (which may or may not be useful, since I'm guessing this'll print the whole array, so you won't be saving any evaluations)."]], [[" colprint(sorted([(name, version[0].summary or '')\n             for (name, version) in versions.iteritems()]))\n"]], ['lisp-style style `let` syntax in Python list-comprehensions'], 2], [(1910744, 0), [['Let v be the number of voxels, m the number of masks, and t the number of tracks. \nLet M be the mask csc matrix, size (m x v), where a 1 at (i,j) means mask i overlaps voxel j. \nLet T be the track csc matrix, size (t x v), where a 1 at (k,j) means track k overlaps voxel j.  '], ['I ran some experiments trying to simulate what I thought was a reasonable amount of data.  The code below takes about 2 minutes on a 2-year old MacBook.  If you use csr_matrices, it takes about 4 minutes.  There is probably a tradeoff depending on how long each track is.  ']], [[' Overlap = (M * T.transpose() > 0)  # track T overlaps mask M  \nConnected = (Overlap * Overlap.tranpose() > 0) # Connected masks\nDensity[mask_idx] = numpy.take(T, nonzero(Overlap[mask_idx, :])[0], axis=0).sum(axis=0)\n']], ['More efficient way to count intersections?'], 2], [(1910744, 1), [['I ran some experiments trying to simulate what I thought was a reasonable amount of data.  The code below takes about 2 minutes on a 2-year old MacBook.  If you use csr_matrices, it takes about 4 minutes.  There is probably a tradeoff depending on how long each track is.  '], ['-10000']], [[' from numpy import *\nfrom scipy.sparse import csc_matrix\n\nnvox = 1000000\nntracks = 300000\nnmask = 100\n\n# create about 100 entries per track\ntcoords = random.uniform(0, ntracks, ntracks * 100).astype(int)\nvcoords = random.uniform(0, nvox, ntracks * 100).astype(int)\nd = ones(ntracks * 100)\nT = csc_matrix((d,  vstack((tcoords, vcoords))), shape=(ntracks, nvox), dtype=bool)\n\n# create around 10000 entries per mask\nmcoords = random.uniform(0, nmask, nmask * 10000).astype(int)\nvcoords = random.uniform(0, nvox, nmask * 10000).astype(int)\nd = ones(nmask * 10000)\nM = csc_matrix((d, vstack((mcoords, vcoords))), shape=(nmask, nvox), dtype=bool)\n\nOverlap = (M * T.transpose()).astype(bool) # mask M overlaps track T\nConnected = (Overlap * Overlap.transpose()).astype(bool) # mask M1 and M2 are connected\nDensity = Overlap * T.astype(float) # number of tracks overlapping mask M summed across voxels\n']], ['More efficient way to count intersections?'], 2], [(1911014, 0), [['Python 3.x:'], ['Python 2.x:']], [[" for k,v in mydict.items():\n  print(k, '=', v)\n"]], ['concatenate items in dictionary in python using list comprehension'], 3], [(1911014, 1), [['Python 2.x:'], ['I made a wrapper function, since editing the main function is out of the question.']], [[" for k,v in mydict.iteritems():\n  print k, '=', v\n"]], ['concatenate items in dictionary in python using list comprehension'], 3], [(1911014, 2), [['I made a wrapper function, since editing the main function is out of the question.'], ['-10000']], [[" def log_wrap(mydict):\n    mystr = '\\n'.join(['%s = %s' % (k,v) for k,v in mydict.iteritems()])\n    write_to_log(mydict)\n\nlog_wrap(mydict)\n"]], ['concatenate items in dictionary in python using list comprehension'], 3], [(1911281, 0), [['An example (listing the methods of the  optparse.OptionParser  class):'], ['You can also pass an instance to  getmembers :']], [[" >>> from optparse import OptionParser\n>>> import inspect\n>>> inspect.getmembers(OptionParser, predicate=inspect.ismethod)\n[([('__init__', <unbound method OptionParser.__init__>),\n...\n ('add_option', <unbound method OptionParser.add_option>),\n ('add_option_group', <unbound method OptionParser.add_option_group>),\n ('add_options', <unbound method OptionParser.add_options>),\n ('check_values', <unbound method OptionParser.check_values>),\n ('destroy', <unbound method OptionParser.destroy>),\n ('disable_interspersed_args',\n  <unbound method OptionParser.disable_interspersed_args>),\n ('enable_interspersed_args',\n  <unbound method OptionParser.enable_interspersed_args>),\n ('error', <unbound method OptionParser.error>),\n ('exit', <unbound method OptionParser.exit>),\n ('expand_prog_name', <unbound method OptionParser.expand_prog_name>),\n ...\n ]\n"]], ['How do I get list of methods in a Python class?'], 2], [(1911281, 1), [['You can also pass an instance to  getmembers :'], ['-10000']], [[' >>> parser = OptionParser()\n>>> inspect.getmembers(parser, predicate=inspect.ismethod)\n...\n']], ['How do I get list of methods in a Python class?'], 2], [(1912253, 0), [["To get around concurrency issues, you can use sqlite, and put the write in a try/except.\nHere's a sample cache implementation using sqlite."], ["Using this sample, you just replace your current calls to 'remote_get_gps_data' with 'get_gps_data'."]], [[' import datetime\nimport sqlite3 \n\nclass GpsCache(object):\n    db_path = \'gps_cache.db\'\n    def __init__(self):\n        self.con = sqlite3.connect(self.db_path)\n        self.cur = self.con.cursor()\n\n    def _get_period(self, dt=None):\n        \'\'\'normalize time to 15 minute periods\'\'\'\n        if dt.minute < 15:\n           minute_period = 0\n        elif 15 <= dt.minute < 30:\n           minute_period = 15\n        elif 30 <= dt_minute < 45: \n           minute_period = 30\n        elif 45 <= dt_minute:\n           minute_period = 25\n        period_dt = datetime.datetime(year=dt.year, month=dt.month, day=dt.day, hour=dt.hour, minute=minute_period)\n        return period_dt\n\n    def get_cache(dt=None):\n        period_dt = self._get_period(dt)\n        select_sql = \'SELECT * FROM GPS_CACHE WHERE date_time = "%s";\' % period_dt.strftime(\'%Y-%m-%d %H:%M\')\n        self.cur.execut(select_sql)\n        result = self.cur.fetchone()[0]\n        return result\n\n\n    def put_cache(dt=None, data=None):\n        period_dt = self._get_period(dt)\n        insert_sql = \'INSERT ....\'  # edit to your table structure\n        try:\n            self.cur.execute(insert_sql)\n            self.con.commit()\n        except sqlite3.OperationalError:\n            # assume db is being updated by another process with the current resutls and ignore\n            pass\n']], ['Limit calls to external database with Python CGI'], 2], [(1912253, 1), [["Using this sample, you just replace your current calls to 'remote_get_gps_data' with 'get_gps_data'."], ['-10000']], [[' from gps_cacher import GpsCache\n\ndef remote_get_gps_data():\n    # your function here\n    return data\n\ndef get_gps_data():\n    data = None\n    gps_cache = GpsCache()\n    current_dt = datetime.datetime.now()\n    cached_data = gps_cache.get_cache(current_dt)    \n    if cached_data:\n        data = cached_data\n    else:\n        data = remote_get_gps_data()\n        gps_cache.put_cache(current_dt, data)\n    return data\n']], ['Limit calls to external database with Python CGI'], 2], [(1912434, 0), [['After building an Element instance  e  from the XML, e.g. with the  XML  function, or by parsing a file with something like'], ['or any of the many other ways shown at  ElementTree , you just do something like:']], [[" import xml.etree.ElementTree\ne = xml.etree.ElementTree.parse('thefile.xml').getroot()\n"]], ['How do I parse XML in Python?'], 2], [(1912434, 1), [['or any of the many other ways shown at  ElementTree , you just do something like:'], ['and similar, usually pretty simple, code patterns.']], [[" for atype in e.findall('type'):\n    print(atype.get('foobar'))\n"]], ['How do I parse XML in Python?'], 2], [(1912635, 0), [['option1:'], ['option2:']], [[' total = sum([project.projectTotal for project in dict.values()])\nsuccess = sum([project.projectSuccess for project in dict.values()])\nfailed = sum([project.projectFailed for project in dict.values()])\n']], ['Organizing python code for handling statistic information'], 2], [(1912635, 1), [['option2:'], ['-10000']], [[' (total,success,failed) = reduce (lambda x,y:(x[0]+y[0],x[1]+y[1],x[2]+y[2]), [(project.projectTotal,project.projectSuccess,project.projectFailed) for project in dict.values()])\n']], ['Organizing python code for handling statistic information'], 2], [(1913722, 0), [['This should work:'], ['It seems that your widgets are parented in a wrong way. I got the "not-clickable" behavior when changing to this:']], [[" import wx\n\nclass MainWindow(wx.Frame):\n    def __init__(self, *args, **kwargs):\n        wx.Frame.__init__(self, *args, **kwargs)\n\n        self.panel = wx.Panel(self)\n\n        self.label1 = wx.StaticText(self.panel)\n        self.fileCtrl = wx.FilePickerCtrl(self.panel)\n        self.mailRadio = wx.RadioButton(self.panel)\n        self.uploadRadio = wx.RadioButton(self.panel)\n\n        row1 = wx.StaticBoxSizer(wx.StaticBox(self.panel, -1, 'this is row one'), orient=wx.HORIZONTAL)\n        row1.Add(self.label1,0,wx.TOP | wx.RIGHT,7)\n        row1.Add(self.fileCtrl)\n\n        row2 = wx.BoxSizer(wx.HORIZONTAL)\n        actionBox = wx.StaticBoxSizer(wx.StaticBox(self.panel, -1, 'asdfasdf'), orient=wx.VERTICAL)\n        actionRow1 = wx.BoxSizer(wx.HORIZONTAL)\n        actionRow1.Add(wx.StaticText(self.panel, -1, 'blah blah ', (5, 5)))\n        actionRow1.Add(self.mailRadio)\n        actionRow2 = wx.BoxSizer(wx.HORIZONTAL)\n        actionRow2.Add(wx.StaticText(self.panel, -1, 'lah dee dah', (5, 5)))\n        actionRow2.Add(self.uploadRadio,5)\n        actionBox.Add(actionRow1,0,wx.EXPAND)\n        actionBox.Add(actionRow2)\n        row2.Add(actionBox)\n\n        wrapper = wx.FlexGridSizer(2,1,5,5)\n        wrapper.AddGrowableCol(0)\n        wrapper.Add(row1,0,wx.TOP | wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER,15)\n        wrapper.Add(row2,0,wx.ALL | wx.ALIGN_CENTER,15)\n        self.panel.SetSizerAndFit(wrapper)\n        self.Centre()\n        self.Fit()\n\n        self.Show()\n\napp = wx.App(False)\nwin = MainWindow(None)\napp.MainLoop()\n"]], ['wxPython controls not clickable'], 2], [(1913722, 1), [['It seems that your widgets are parented in a wrong way. I got the "not-clickable" behavior when changing to this:'], ['-10000']], [[' ...\nself.label1 = wx.StaticText(self)\nself.fileCtrl = wx.FilePickerCtrl(self)\nself.mailRadio = wx.RadioButton(self)\nself.uploadRadio = wx.RadioButton(self)\n...\n']], ['wxPython controls not clickable'], 2], [(1913906, 0), [["So there's space for ample manual micro-optimization -- hoisting, in particular.  I.e., rewrite"], ['as']], [[' for x in whatever():\n    anobj.amethod(x)\n']], ['Python performance characteristics'], 10], [(1913906, 1), [['as'], ["The  timeit  module (best used at a shell prompt IMHO) makes it very simple to measure the overall effects of compilation + bytecode interpretation (just ensure the snippet you're measuring has no side effects that would affect the timing, since  timeit   does  run it over and over in a loop;-).  For example:"]], [[' f = anobj.amethod\nfor x in whatever():\n    f(x)\n']], ['Python performance characteristics'], 10], [(1913906, 2), [["The  timeit  module (best used at a shell prompt IMHO) makes it very simple to measure the overall effects of compilation + bytecode interpretation (just ensure the snippet you're measuring has no side effects that would affect the timing, since  timeit   does  run it over and over in a loop;-).  For example:"], ["you can see the costs of the repeated list construction -- and confirm that is indeed what we're observing by trying a minor tweak:"]], [[" $ python -mtimeit 'for x in (1, 2, 3): pass'\n1000000 loops, best of 3: 0.219 usec per loop\n$ python -mtimeit 'for x in [1, 2, 3]: pass'\n1000000 loops, best of 3: 0.512 usec per loop\n"]], ['Python performance characteristics'], 10], [(1913906, 3), [["you can see the costs of the repeated list construction -- and confirm that is indeed what we're observing by trying a minor tweak:"], ['How fast are the following operations\n  (comparatively)']], [[" $ python -mtimeit -s'Xs=[1,2,3]' 'for x in Xs: pass'\n1000000 loops, best of 3: 0.236 usec per loop\n$ python -mtimeit -s'Xs=(1,2,3)' 'for x in Xs: pass'\n1000000 loops, best of 3: 0.213 usec per loop\n"]], ['Python performance characteristics'], 10], [(1913906, 4), [['How fast are the following operations\n  (comparatively)'], ['-10000']], [[" * Function calls\n* Class instantiation\n* Arithmetic\n* 'Heavier' math operations such as sqrt()\n"]], ['Python performance characteristics'], 10], [(1913906, 5), [['-10000'], ['so we see: instantiating a new-style class and calling a function (both empty) are about the same speed, with instantiations possibly having a tiny speed margin, maybe 5%; instantiating an old-style class is slowest (by about 50%). Tiny differences such as 5% or less of course could be noise, so repeating each try a few times is advisable; but differences like 50% are definitely well beyond noise.']], [[" $ python -mtimeit -s'def f(): pass' 'f()'\n10000000 loops, best of 3: 0.192 usec per loop\n$ python -mtimeit -s'class o: pass' 'o()'\n1000000 loops, best of 3: 0.315 usec per loop\n$ python -mtimeit -s'class n(object): pass' 'n()'\n10000000 loops, best of 3: 0.18 usec per loop\n"]], ['Python performance characteristics'], 10], [(1913906, 6), [['so we see: instantiating a new-style class and calling a function (both empty) are about the same speed, with instantiations possibly having a tiny speed margin, maybe 5%; instantiating an old-style class is slowest (by about 50%). Tiny differences such as 5% or less of course could be noise, so repeating each try a few times is advisable; but differences like 50% are definitely well beyond noise.'], ['and here we see: calling  sqrt  is slower than doing the same computation by operator (using the  **  raise-to-power operator) by roughly the cost of calling an empty function; all arithmetic operators are roughly the same speed to within noise (the tiny difference of 3 or 4 nanoseconds is definitely noise;-).  Checking whether constant folding might interfere:']], [[" $ python -mtimeit -s'from math import sqrt' 'sqrt(1.2)'\n1000000 loops, best of 3: 0.22 usec per loop\n$ python -mtimeit '1.2**0.5'\n10000000 loops, best of 3: 0.0363 usec per loop\n$ python -mtimeit '1.2*0.5'\n10000000 loops, best of 3: 0.0407 usec per loop\n"]], ['Python performance characteristics'], 10], [(1913906, 7), [['and here we see: calling  sqrt  is slower than doing the same computation by operator (using the  **  raise-to-power operator) by roughly the cost of calling an empty function; all arithmetic operators are roughly the same speed to within noise (the tiny difference of 3 or 4 nanoseconds is definitely noise;-).  Checking whether constant folding might interfere:'], ['...we see that this is indeed the case: if either or both numbers are being looked up as variables (which blocks constant folding), we\'re paying the "realistic" cost. Variable lookup has its own cost:']], [[" $ python -mtimeit '1.2*0.5'\n10000000 loops, best of 3: 0.0407 usec per loop\n$ python -mtimeit -s'a=1.2; b=0.5' 'a*b'\n10000000 loops, best of 3: 0.0965 usec per loop\n$ python -mtimeit -s'a=1.2; b=0.5' 'a*0.5'\n10000000 loops, best of 3: 0.0957 usec per loop\n$ python -mtimeit -s'a=1.2; b=0.5' '1.2*b'\n10000000 loops, best of 3: 0.0932 usec per loop\n"]], ['Python performance characteristics'], 10], [(1913906, 8), [['...we see that this is indeed the case: if either or both numbers are being looked up as variables (which blocks constant folding), we\'re paying the "realistic" cost. Variable lookup has its own cost:'], ["and that's far from negligible when we're trying to measure such tiny times anyway.  Indeed  constant  lookup isn't free either:"]], [[" $ python -mtimeit -s'a=1.2; b=0.5' 'a'\n10000000 loops, best of 3: 0.039 usec per loop\n"]], ['Python performance characteristics'], 10], [(1913906, 9), [["and that's far from negligible when we're trying to measure such tiny times anyway.  Indeed  constant  lookup isn't free either:"], ["as you see, while smaller than variable lookup it's quite comparable -- about half."]], [[" $ python -mtimeit -s'a=1.2; b=0.5' '1.2'\n10000000 loops, best of 3: 0.0225 usec per loop\n"]], ['Python performance characteristics'], 10], [(1915170, 0), [['-10000'], ['Some tests:']], [[' from itertools import islice\n\ndef split_every(n, iterable):\n    i = iter(iterable)\n    piece = list(islice(i, n))\n    while piece:\n        yield piece\n        piece = list(islice(i, n))\n']], ['split a generator/iterable every n items in python (splitEvery)'], 2], [(1915170, 1), [['Some tests:'], ['-10000']], [[" >>> list(split_every(5, range(9)))\n[[0, 1, 2, 3, 4], [5, 6, 7, 8]]\n\n>>> list(split_every(3, (x**2 for x in range(20))))\n[[0, 1, 4], [9, 16, 25], [36, 49, 64], [81, 100, 121], [144, 169, 196], [225, 256, 289], [324, 361]]\n\n>>> [''.join(s) for s in split_every(6, 'Hello world')]\n['Hello ', 'world']\n\n>>> list(split_every(100, []))\n[]\n"]], ['split a generator/iterable every n items in python (splitEvery)'], 2], [(1915564, 0), [["A dict's keys, reverse-sorted by the corresponding values, can best be gotten as"], ['since you want key/value pairs, you could work on the items as all other answers suggest, or (to use the nifty  adict.get  bound method instead of itemgetters or weird lambdas;-),']], [[' sorted(adict, key=adict.get, reverse=True)\n']], ['python, convert a dictionary to a sorted list by value instead of key'], 3], [(1915564, 1), [['since you want key/value pairs, you could work on the items as all other answers suggest, or (to use the nifty  adict.get  bound method instead of itemgetters or weird lambdas;-),'], ["Edit : in terms of performance, there isn't much into it either way:"]], [[' [(k, adict[k]) for k in sorted(adict, key=adict.get, reverse=True)]\n']], ['python, convert a dictionary to a sorted list by value instead of key'], 3], [(1915564, 2), [["Edit : in terms of performance, there isn't much into it either way:"], ['So, the  .get -based solution is smack midway in performance between the two  items -based ones -- slightly slower than the  itemgetter , slightly faster than the  lambda . In "bottleneck" cases, where those microsecond fractions are crucial to you, by all means do focus on that. In normal cases, where this operation is only one step within some bigger task and a microsecond more or less matters little, focusing on the simplicity of the  get  idiom is, however, also a reasonable alternative.']], [[" $ python -mtimeit -s'adict=dict((x,x**2) for x in range(-5,6))' '[(k, adict[k]) for k in sorted(adict, key=adict.get, reverse=True)]'\n100000 loops, best of 3: 10.8 usec per loop\n$ python -mtimeit -s'adict=dict((x,x**2) for x in range(-5,6)); from operator import itemgetter' 'sorted(adict.iteritems(), key=itemgetter(1), reverse=True)'\n100000 loops, best of 3: 9.66 usec per loop\n$ python -mtimeit -s'adict=dict((x,x**2) for x in range(-5,6))' 'sorted(adict.iteritems(), key=lambda (k,v): v, reverse=True)'\n100000 loops, best of 3: 11.5 usec per loop\n"]], ['python, convert a dictionary to a sorted list by value instead of key'], 3], [(1915643, 0), [['I would save data on the instance object: '], ['In this case, the data will be stored in the  obj \'s \'varx\' entry in its  __dict__ .  Because of how data descriptor lookup works though, you can "shadow" the storage location with the descriptor:']], [[" class Desc(object):\n    default_value = 10\n    def __init__(self, name):\n        self.name = name\n\n    def __get__(self,obj,objtype):\n        return obj.__dict__.get(self.name, self.default_value)\n        # alternatively the following; but won't work with shadowing:\n        #return getattr(obj, self.name, self.default_value)\n\n    def __set__(self,obj,val):\n        obj.__dict__[self.name] = val\n        # alternatively the following; but won't work with shadowing:\n        #setattr(obj, self.name, val)\n\n    def __delete__(self,obj):\n        pass\n\n\nclass MyClass(object):\n    desc = Desc('varx')\n"]], ['python descriptors sharing values across classes'], 4], [(1915643, 1), [['In this case, the data will be stored in the  obj \'s \'varx\' entry in its  __dict__ .  Because of how data descriptor lookup works though, you can "shadow" the storage location with the descriptor:'], ['In this case, when you do the lookup:']], [[" class MyClass(object):\n    varx = Desc('varx')\n"]], ['python descriptors sharing values across classes'], 4], [(1915643, 2), [['In this case, when you do the lookup:'], ['The descriptor object gets called and can do its lookup, but when the lookup goes like this:']], [[' MyClass().varx\n']], ['python descriptors sharing values across classes'], 4], [(1915643, 3), [['The descriptor object gets called and can do its lookup, but when the lookup goes like this:'], ["The value is returned directly.  Thus the descriptor is able to store its data in a 'hidden' place, so to speak."]], [[" MyClass().__dict__['varx']\n"]], ['python descriptors sharing values across classes'], 4], [(1916218, 0), [['//longest common starting substring in an array'], ['DEMOS']], [[' function sharedStart(array){\n    var A= array.concat().sort(), \n    a1= A[0], a2= A[A.length-1], L= a1.length, i= 0;\n    while(i<L && a1.charAt(i)=== a2.charAt(i)) i++;\n    return a1.substring(0, i);\n}\n']], ['Find the longest common starting substring in a set of strings'], 2], [(1916218, 1), [['DEMOS'], ['-10000']], [[" sharedStart(['interspecies', 'interstelar', 'interstate'])  //=> 'inters'\nsharedStart(['throne', 'throne'])                           //=> 'throne'\nsharedStart(['throne', 'dungeon'])                          //=> ''\nsharedStart(['cheese'])                                     //=> 'cheese'\nsharedStart([])                                             //=> ''\nsharedStart(['prefix', 'suffix'])                           //=> ''\n"]], ['Find the longest common starting substring in a set of strings'], 2], [(1916473, 0), [['For me, in subdir/SConscript:   '], ['produces:']], [[' my_build_directory = \'.\'\n\necho_cmd = Command(\'always.echo\', [],  "echo %s" % (Dir(\'.\').abspath))\nAlias(\'echo\', echo_cmd)\n']], ['Determining Build Directory from SConscript'], 2], [(1916473, 1), [['produces:'], ['-10000']], [[' # => cd test-scons\n# => ls \n#    build/  SConstruct  subdir/\n# => scons echo \n#    scons: Building targets ...\n#    echo HOME/test-scons/build/subdir\n#    HOME/test-scons/build/subdir\n#    scons: done building targets.\n']], ['Determining Build Directory from SConscript'], 2], [(1918851, 0), [['You can do the same thing with a generator expression and the dictionary constructor:'], ['And here is the code in action:']], [[' dict((row[0], {"b": row[1], "c": row[2]}) for row in rows)\n']], ["What's a better way to handle this in Python"], 3], [(1918851, 1), [['And here is the code in action:'], ["I can't remember if MySQLdb returns rows as list of tuples, if that is the case then you can do this:"]], [[' >>> rows = [[1, 2, 3], [4, 5, 6]]\n>>> dict((row[0], {"b": row[1], "c": row[2]}) for row in rows)\n{1: {\'c\': 3, \'b\': 2}, 4: {\'c\': 6, \'b\': 5}}\n']], ["What's a better way to handle this in Python"], 3], [(1918851, 2), [["I can't remember if MySQLdb returns rows as list of tuples, if that is the case then you can do this:"], ['-10000']], [[' dict((a, {"b": b, "c": c}) for a, b, c in rows)\n']], ["What's a better way to handle this in Python"], 3], [(1919096, 0), [['-10000'], ['I took the liberty of comparing a few solutions:']], [[' mydict = {"&y":"\\033[0;30m",\n          "&c":"\\033[0;31m",\n          "&b":"\\033[0;32m",\n          "&Y":"\\033[0;33m",\n          "&u":"\\033[0;34m"}\nmystr = "The &yquick &cbrown &bfox &Yjumps over the &ulazy dog"\n\nfor k, v in mydict.iteritems():\n    mystr = mystr.replace(k, v)\n\nprint mystr\nThe ←[0;30mquick ←[0;31mbrown ←[0;32mfox ←[0;33mjumps over the ←[0;34mlazy dog\n']], ['Mass string replace in python?'], 5], [(1919096, 1), [['I took the liberty of comparing a few solutions:'], ['Results in Python 2.6']], [[' mydict = dict([(\'&\' + chr(i), str(i)) for i in list(range(65, 91)) + list(range(97, 123))])\n\n# random inserts between keys\nfrom random import randint\nrawstr = \'\'.join(mydict.keys())\nmystr = \'\'\nfor i in range(0, len(rawstr), 2):\n    mystr += chr(randint(65,91)) * randint(0,20) # insert between 0 and 20 chars\n\nfrom time import time\n\n# How many times to run each solution\nrep = 10000\n\nprint \'Running %d times with string length %d and \' \\\n      \'random inserts of lengths 0-20\' % (rep, len(mystr))\n\n# My solution\nt = time()\nfor x in range(rep):\n    for k, v in mydict.items():\n        mystr.replace(k, v)\n    #print(mystr)\nprint \'%-30s\' % \'Tor fixed & variable dict\', time()-t\n\nfrom re import sub, compile, escape\n\n# Peter Hansen\nt = time()\nfor x in range(rep):\n    sub(r\'(&[a-zA-Z])\', r\'%(\\1)s\', mystr) % mydict\nprint \'%-30s\' % \'Peter fixed & variable dict\', time()-t\n\n# Claudiu\ndef multiple_replace(dict, text): \n    # Create a regular expression  from the dictionary keys\n    regex = compile("(%s)" % "|".join(map(escape, dict.keys())))\n\n    # For each match, look-up corresponding value in dictionary\n    return regex.sub(lambda mo: dict[mo.string[mo.start():mo.end()]], text)\n\nt = time()\nfor x in range(rep):\n    multiple_replace(mydict, mystr)\nprint \'%-30s\' % \'Claudio variable dict\', time()-t\n\n# Claudiu - Precompiled\nregex = compile("(%s)" % "|".join(map(escape, mydict.keys())))\n\nt = time()\nfor x in range(rep):\n    regex.sub(lambda mo: mydict[mo.string[mo.start():mo.end()]], mystr)\nprint \'%-30s\' % \'Claudio fixed dict\', time()-t\n\n# Andrew Y - variable dict\ndef mysubst(somestr, somedict):\n  subs = somestr.split("&")\n  return subs[0] + "".join(map(lambda arg: somedict["&" + arg[0:1]] + arg[1:], subs[1:]))\n\nt = time()\nfor x in range(rep):\n    mysubst(mystr, mydict)\nprint \'%-30s\' % \'Andrew Y variable dict\', time()-t\n\n# Andrew Y - fixed\ndef repl(s):\n  return mydict["&"+s[0:1]] + s[1:]\n\nt = time()\nfor x in range(rep):\n    subs = mystr.split("&")\n    res = subs[0] + "".join(map(repl, subs[1:]))\nprint \'%-30s\' % \'Andrew Y fixed dict\', time()-t\n']], ['Mass string replace in python?'], 5], [(1919096, 2), [['Results in Python 2.6'], ["I ran it in  Python 3  (because of unicode) with replacements of chars from 39 to 1024 (38 is ampersand, so I didn't wanna include it). String length up to 10.000 including about 980 replacements with variable random inserts of length 0-20. The unicode values from 39 to 1024 causes characters of both 1 and 2 bytes length, which could affect some solutions."]], [[' Running 10000 times with string length 490 and random inserts of lengths 0-20\nTor fixed & variable dict      1.04699993134\nPeter fixed & variable dict    0.218999862671\nClaudio variable dict          2.48400020599\nClaudio fixed dict             0.0940001010895\nAndrew Y variable dict         0.0309998989105\nAndrew Y fixed dict            0.0310001373291\n']], ['Mass string replace in python?'], 5], [(1919096, 3), [["I ran it in  Python 3  (because of unicode) with replacements of chars from 39 to 1024 (38 is ampersand, so I didn't wanna include it). String length up to 10.000 including about 980 replacements with variable random inserts of length 0-20. The unicode values from 39 to 1024 causes characters of both 1 and 2 bytes length, which could affect some solutions."], ['Results:']], [[' mydict = dict([(\'&\' + chr(i), str(i)) for i in range(39,1024)])\n\n# random inserts between keys\nfrom random import randint\nrawstr = \'\'.join(mydict.keys())\nmystr = \'\'\nfor i in range(0, len(rawstr), 2):\n    mystr += chr(randint(65,91)) * randint(0,20) # insert between 0 and 20 chars\n\nfrom time import time\n\n# How many times to run each solution\nrep = 10000\n\nprint(\'Running %d times with string length %d and \' \\\n      \'random inserts of lengths 0-20\' % (rep, len(mystr)))\n\n# Tor Valamo - too long\n#t = time()\n#for x in range(rep):\n#    for k, v in mydict.items():\n#        mystr.replace(k, v)\n#print(\'%-30s\' % \'Tor fixed & variable dict\', time()-t)\n\nfrom re import sub, compile, escape\n\n# Peter Hansen\nt = time()\nfor x in range(rep):\n    sub(r\'(&[a-zA-Z])\', r\'%(\\1)s\', mystr) % mydict\nprint(\'%-30s\' % \'Peter fixed & variable dict\', time()-t)\n\n# Peter 2\ndef dictsub(m):\n    return mydict[m.group()]\n\nt = time()\nfor x in range(rep):\n    sub(r\'(&[a-zA-Z])\', dictsub, mystr)\nprint(\'%-30s\' % \'Peter fixed dict\', time()-t)\n\n# Claudiu - too long\n#def multiple_replace(dict, text): \n#    # Create a regular expression  from the dictionary keys\n#    regex = compile("(%s)" % "|".join(map(escape, dict.keys())))\n#\n#    # For each match, look-up corresponding value in dictionary\n#    return regex.sub(lambda mo: dict[mo.string[mo.start():mo.end()]], text)\n#\n#t = time()\n#for x in range(rep):\n#    multiple_replace(mydict, mystr)\n#print(\'%-30s\' % \'Claudio variable dict\', time()-t)\n\n# Claudiu - Precompiled\nregex = compile("(%s)" % "|".join(map(escape, mydict.keys())))\n\nt = time()\nfor x in range(rep):\n    regex.sub(lambda mo: mydict[mo.string[mo.start():mo.end()]], mystr)\nprint(\'%-30s\' % \'Claudio fixed dict\', time()-t)\n\n# Separate setup for Andrew and gnibbler optimized dict\nmydict = dict((k[1], v) for k, v in mydict.items())\n\n# Andrew Y - variable dict\ndef mysubst(somestr, somedict):\n  subs = somestr.split("&")\n  return subs[0] + "".join(map(lambda arg: somedict[arg[0:1]] + arg[1:], subs[1:]))\n\ndef mysubst2(somestr, somedict):\n  subs = somestr.split("&")\n  return subs[0].join(map(lambda arg: somedict[arg[0:1]] + arg[1:], subs[1:]))\n\nt = time()\nfor x in range(rep):\n    mysubst(mystr, mydict)\nprint(\'%-30s\' % \'Andrew Y variable dict\', time()-t)\nt = time()\nfor x in range(rep):\n    mysubst2(mystr, mydict)\nprint(\'%-30s\' % \'Andrew Y variable dict 2\', time()-t)\n\n# Andrew Y - fixed\ndef repl(s):\n  return mydict[s[0:1]] + s[1:]\n\nt = time()\nfor x in range(rep):\n    subs = mystr.split("&")\n    res = subs[0] + "".join(map(repl, subs[1:]))\nprint(\'%-30s\' % \'Andrew Y fixed dict\', time()-t)\n\n# gnibbler\nt = time()\nfor x in range(rep):\n    myparts = mystr.split("&")\n    myparts[1:]=[mydict[x[0]]+x[1:] for x in myparts[1:]]\n    "".join(myparts)\nprint(\'%-30s\' % \'gnibbler fixed & variable dict\', time()-t)\n']], ['Mass string replace in python?'], 5], [(1919096, 4), [['Results:'], ["(** Note that gnibbler's code uses a different dict, where keys don't have the '&' included. Andrew's code also uses this alternate dict, but it didn't make much of a difference, maybe just 0.01x speedup.)"]], [[' Running 10000 times with string length 9491 and random inserts of lengths 0-20\nTor fixed & variable dict      0.0 # disqualified 329 secs\nPeter fixed & variable dict    2.07799983025\nPeter fixed dict               1.53100013733 \nClaudio variable dict          0.0 # disqualified, 37 secs\nClaudio fixed dict             1.5\nAndrew Y variable dict         0.578000068665\nAndrew Y variable dict 2       0.56299996376\nAndrew Y fixed dict            0.56200003624\ngnibbler fixed & variable dict 0.530999898911\n']], ['Mass string replace in python?'], 5], [(1921027, 0), [['Start with the mapping you like:'], ['then convert it into the mapping you need:']], [[" monty = { \n    ('parrot','spam','cheese_shop'): 'sketch', \n    ('Cleese', 'Gilliam', 'Palin') : 'actors',\n}\n"]], ['Python many-to-one mapping (creating equivalence classes)'], 3], [(1921027, 1), [['then convert it into the mapping you need:'], ['producing:']], [[' working_monty = {}\nfor k, v in monty.items():\n    for key in k:\n        working_monty[key] = v\n']], ['Python many-to-one mapping (creating equivalence classes)'], 3], [(1921027, 2), [['producing:'], ['then use  working_monty  to do the work.']], [[" {'Gilliam': 'actors', 'Cleese': 'actors', 'parrot': 'sketch', 'spam': 'sketch', 'Palin': 'actors', 'cheese_shop': 'sketch'}\n"]], ['Python many-to-one mapping (creating equivalence classes)'], 3], [(1921623, 0), [['If you want to do this recursively, going down a tree visiting all the directories, then you can use os.walk like this:'], ['If you only want the subdirectories you can either call walk once:']], [['   for root, directories, files in os.walk("c:\\\\"):\n    doSomething\n']], ['How do I get names of subdirectories of a directory purely in python?'], 3], [(1921623, 1), [['If you only want the subdirectories you can either call walk once:'], ['Or do some sort of filter like this (walk is more stylish/portable):']], [['   directories = os.walk("c:\\\\").next()[1]\n']], ['How do I get names of subdirectories of a directory purely in python?'], 3], [(1921623, 2), [['Or do some sort of filter like this (walk is more stylish/portable):'], ['-10000']], [['   filter(lambda x: os.path.isdir("c:\\\\"+ x), os.listdir("c:\\\\"))\n']], ['How do I get names of subdirectories of a directory purely in python?'], 3], [(1922426, 0), [['Let your message definition file be a plain Python file:'], ['Your program can then import and use that data structure directly:']], [[' # file messages.py\nmessages = dict(\n    struct1=[\n        dict(field="name", type="string", ignore=False),\n        dict(field="id", type="int", enums={0: "val1", 1: "val2"}),\n        ],\n    struct2=[\n        dict(field="object", type="struct1"),\n        ]\n    )\n']], ['Parsing a datafile in python (2.5.2)'], 5], [(1922426, 1), [['Your program can then import and use that data structure directly:'], ['And you also gain a lot of possibilities. For instance, imagine you (for some strange reason) have a message structure with 1000 fields named "field_N". Using a conventional file format you would have to add 1000 lines of field definitions (unless you build some looping into your config file parser - you are then on your way to creating a programming language anyway). Using Python for this purpose, you could do something like:']], [[' # in your program\nfrom messages import messages\nprint messages[\'struct1\'][0]["type"]\nprint messages[\'struct1\'][1][\'type\']\nprint messages[\'struct1\'][1][\'enums\'][0]\nprint messages[\'struct2\'][0][\'type\']\n']], ['Parsing a datafile in python (2.5.2)'], 5], [(1922426, 2), [['And you also gain a lot of possibilities. For instance, imagine you (for some strange reason) have a message structure with 1000 fields named "field_N". Using a conventional file format you would have to add 1000 lines of field definitions (unless you build some looping into your config file parser - you are then on your way to creating a programming language anyway). Using Python for this purpose, you could do something like:'], ['Below is code that reads message definition files as specified on the command line. It uses  execfile  instead of  import .']], [[' messages = dict(\n    ...\n    strange_msg=[dict(field="field_%d" % i) for i in range(1000)],\n    ...\n    )\n']], ['Parsing a datafile in python (2.5.2)'], 5], [(1922426, 3), [['Below is code that reads message definition files as specified on the command line. It uses  execfile  instead of  import .'], ['Executing:']], [[' # file mainprogram.py\n\ndef read_messages_from_file(filename):\n    module_dict = {}\n    execfile(filename, module_dict)\n    return module_dict[\'messages\']\n\nif __name__ == "__main__":\n    from pprint import pprint\n    import sys\n\n    for arg in sys.argv[1:]:\n        messages = read_messages_from_file(arg)\n        pprint(messages)\n']], ['Parsing a datafile in python (2.5.2)'], 5], [(1922426, 4), [['Executing:'], ['will read and print the messages defined in each file.']], [[' $ python mainprogram.py messages1 messages2 messages3\n']], ['Parsing a datafile in python (2.5.2)'], 5], [(1922771, 0), [['You can get the string you want (apparently implying a big-endian, 32-bit representation; Python internally uses the native endianity and 64-bits for floats) with the  struct  module:'], ["this doesn't yet let you perform bitwise operations, but you can then use struct again to map the string into an int:"]], [[" >>> import struct\n>>> x = 173.125\n>>> s = struct.pack('>f', x)\n>>> ''.join('%2.2x' % ord(c) for c in s)\n'432d2000'\n"]], ['Python: obtain & manipulate (as integers) bit patterns of floats'], 2], [(1922771, 1), [["this doesn't yet let you perform bitwise operations, but you can then use struct again to map the string into an int:"], ['and now you have an  int  which you can use in any sort of bitwise operations (follow the same two steps in reverse if after said operations you need to get a  float  again).']], [[" >>> i = struct.unpack('>l', s)[0]\n>>> print hex(i)\n0x432d2000\n"]], ['Python: obtain & manipulate (as integers) bit patterns of floats'], 2], [(1923826, 0), [['a) Have a try block where you save your model and capture the IntegrityError and deal with it. Something like:'], ['But it would be something like:']], [[' try:\n    new_accountadmin_form.save()\nexcept IntegrityError:\n    new_accountadmin_form._errors["account"] = ["some message"]\n    new_accountadmin_form._errors["is_master"] = ["some message"]\n\n    del new_accountadmin_form.cleaned_data["account"]\n    del new_accountadmin_form.cleaned_data["is_master"]\n']], ['Django: How do I validate unique_together from within the model'], 2], [(1923826, 1), [['But it would be something like:'], ['For what it is worth - I just realized that your unique_together above is referencing a field called username that is not represented in the model.']], [[' class YouForm(forms.Form):\n    # Everything as before.\n    ...\n\n    def clean(self):\n       """ This is the form\'s clean method, not a particular field\'s clean method """\n       cleaned_data = self.cleaned_data\n\n       account = cleaned_data.get("account")\n       is_master = cleaned_data.get("is_master")\n       username = cleaned_data.get("username")\n\n       if AccountAdmin.objects.filter(account=account, is_master=is_master).count() > 0:\n           del cleaned_data["account"]\n           del cleaned_data["is_master"]\n           raise forms.ValidationError("Account and is_master combination already exists.")\n\n       if AccountAdmin.objects.filter(account=account, username=username).count() > 0:\n           del cleaned_data["account"]\n           del cleaned_data["username"]\n           raise forms.ValidationError("Account and username combination already exists.")\n\n    # Always return the full collection of cleaned data.\n    return cleaned_data\n']], ['Django: How do I validate unique_together from within the model'], 2], [(1924323, 0), [['-10000'], ["replaces  %03d  with the integer  i  padded with up to 3 zero's.\nIn Python2.6+, one can do the same thing with the less pretty but more powerful new string formatting syntax:"]], [[" filename='plot%03d.png'%i\n"]], ['Couple of matplotlib newbie doubts'], 3], [(1924323, 1), [["replaces  %03d  with the integer  i  padded with up to 3 zero's.\nIn Python2.6+, one can do the same thing with the less pretty but more powerful new string formatting syntax:"], ['']], [[" filename='plot{0:03d}.png'.format(i)\n"]], ['Couple of matplotlib newbie doubts'], 3], [(1924323, 2), [[''], ['-10000']], [[" #!/usr/bin/env python\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nmatplotlib.use('Agg')   # This can also be set in ~/.matplotlib/matplotlibrc\nfor i in range(0,3):\n    print 'Plotting',i\n    # Reading a single column data file\n    plt.plotfile('gen%s'%i,linestyle='none', marker='*')\n\n    plt.xlabel('Population')\n    plt.ylabel('Function Value')\n    plt.title('Generation%s'%i)\n    plt.axis([0,500,0,180])\n    # This (old-style string formatting) also works, especial for Python versions <2.6:\n    # filename='plot%03d.png'%i\n    filename='plot{0:03d}.png'.format(i)\n    print(filename)\n    plt.savefig(filename)\n    # plt.clf()  # clear current figure\n"]], ['Couple of matplotlib newbie doubts'], 3], [(1924828, 0), [["Let's make it a one-liner:"], ['Obviously you can do:']], [[" import re\n\ndef type_and_size(s):\n    return re.split('[][]', s+'[1]', 2)[:2]\n\ntype_and_size('char')\n['char', '1']\n\ntype_and_size('char[5]')\n['char', '5']\n"]], ['get datatype length in python by parsing a string'], 2], [(1924828, 1), [['Obviously you can do:'], ['-10000']], [[" type, size = type_and_size('char[5]')\n"]], ['get datatype length in python by parsing a string'], 2], [(1925999, 0), [['This part:'], ['should be']], [[" multis = '%s, '*23\nmultis = multis[:-2]\n"]], ['this python script can be shortened/optimized, how?'], 5], [(1925999, 1), [['should be'], ['ziplist  is not used, so you can just remove the line that sets it.']], [[" multis = ', '.join(['%s'] * 23)\n"]], ['this python script can be shortened/optimized, how?'], 5], [(1925999, 2), [['ziplist  is not used, so you can just remove the line that sets it.'], ['The whole loop:']], [['             (row[0], row[1], row[2], row[3], row[4], row[5], row[6],\n            row[7], row[8], row[9], row[10], row[11], row[12],\n            row[13], row[14], row[15], row[16], row[17], row[18],\n            row[19], row[20], row[21], row[22])\n']], ['this python script can be shortened/optimized, how?'], 5], [(1925999, 3), [['The whole loop:'], ['can, optionally, further be compacted to:']], [[' for row in csvReader:\n  c.execute(sql_statement, row)\n']], ['this python script can be shortened/optimized, how?'], 5], [(1925999, 4), [['can, optionally, further be compacted to:'], ['-10000']], [[' c.executemany(sql_statement, csvReader)\n']], ['this python script can be shortened/optimized, how?'], 5], [(1926512, 0), [['You can convert your data text into python dictionary by regular expression'], ['data  will be as follows']], [[' data="""Spec 2 Included : TRUE\nSpec 2 Label: 19-Flat2-HS3\nSpec 3 Included : FALSE\nSpec 3 Label: 4-1-Bead1-HS3"""\n\n#data=open("data.txt").read()\n\nimport re\n\ndata=dict(re.findall(\'(Spec \\d+ (?:Included|Label))\\s*:\\s*(\\S+)\',data))\n']], ['Editing the XML texts from a XML file using Python'], 4], [(1926512, 1), [['data  will be as follows'], ['Then you can convert it by using any of your favoriate xml parser, I will use minidom here.']], [[" {'Spec 3 Included': 'FALSE', 'Spec 2 Included': 'TRUE', 'Spec 3 Label': '4-1-Bead1-HS3', 'Spec 2 Label': '19-Flat2-HS3'}\n"]], ['Editing the XML texts from a XML file using Python'], 4], [(1926512, 2), [['Then you can convert it by using any of your favoriate xml parser, I will use minidom here.'], ['Results']], [[' from xml.dom import minidom\n\ndom = minidom.parseString(xml_text)\nparams=dom.getElementsByTagName("Parameter")\nfor param in params:\n    name=param.getAttribute("name")\n    if name in data:\n        for item in param.getElementsByTagName("*"): # You may change to "Result" or "Value" only\n            item.firstChild.replaceWholeText(data[name])\n\nprint dom.toxml()\n\n#write to file\nopen("output.xml","wb").write(dom.toxml())\n']], ['Editing the XML texts from a XML file using Python'], 4], [(1926512, 3), [['Results'], ['-10000']], [[' <?xml version="1.0" ?><ParameterData>\n  <CreationInfo date="10/28/2009 03:05:14 PM" user="manoj"/>\n  <ParameterList count="85">\n    <Parameter mode="both" name="Spec 2 Included" type="boolean">\n      <Value>TRUE</Value>\n      <Result>TRUE</Result>\n    </Parameter>\n    <Parameter mode="both" name="Spec 2 Label" type="string">\n      <Value>19-Flat2-HS3</Value>\n      <Result>19-Flat2-HS3</Result>\n    </Parameter>\n    <Parameter mode="both" name="Spec 3 Included" type="boolean">\n      <Value>FALSE</Value>\n      <Result>FALSE</Result>\n    </Parameter>\n    <Parameter mode="both" name="Spec 3 Label" type="string">\n      <Value>4-1-Bead1-HS3</Value>\n      <Result>4-1-Bead1-HS3</Result>\n    </Parameter>\n  </ParameterList>\n</ParameterData>\n']], ['Editing the XML texts from a XML file using Python'], 4], [(1927544, 0), [['You have several choices for the  Head-Tail  design pattern.'], ['Or this']], [[' seq= something.get()\nroot.copy( seq[0] )\nfoo( seq[0] )\nfor member in seq[1:]:\n    somewhereElse.copy(member)\n    foo( member )\n']], ['"For" loop first iteration'], 2], [(1927544, 1), [['Or this'], ['People whine that this is somehow not "DRY" because the "redundant foo(member)" code.  That\'s a ridiculous claim.  If that was true then all functions could only be used once.  What\'s the point of defining a function if you can only have one reference?']], [[' seq_iter= iter( something.get() )\nhead = seq_iter.next()\nroot.copy( head )\nfoo( head )\nfor member in seq_iter:\n    somewhereElse.copy( member )\n    foo( member )\n']], ['"For" loop first iteration'], 2], [(1929274, 0), [["I don't like the  dict()  option for the same reason I don't like:"], ["With the  dict()  option you're needlessly calling a function which is adding overhead you don't need:"]], [['  i = int("1")\n']], ['In Python, use "dict" with keywords or anonymous dictionaries?'], 2], [(1929274, 1), [["With the  dict()  option you're needlessly calling a function which is adding overhead you don't need:"], ['-10000']], [[' >>> from timeit import Timer\n>>> Timer("mydict = {\'a\' : 1, \'b\' : 2, \'c\' : \'three\'}").timeit()\n0.91826782454194589\n>>> Timer("mydict = dict(a=1, b=2, c=\'three\')").timeit()\n1.9494664824719337\n']], ['In Python, use "dict" with keywords or anonymous dictionaries?'], 2], [(1930864, 0), [['the purely relational way to do it requires using a subquery to get the "latest" or "max" value, correlated to the parent, then equating that with the members of the collection.  It means you\'ll get best results if you put an index on the column that determines "the latest":'], ['Alternatively, you can on some platforms use LIMIT, which can produce faster results since you avoid the aggregation and can join the collection item on its primary key:']], [[" from sqlalchemy import *\nfrom sqlalchemy.orm import *\n\nengine = create_engine('sqlite:///:memory:', echo='debug')\n\nm = MetaData()\n\nparent = Table('parent', m, \n                Column('id', Integer, primary_key=True)\n)\n\nchild = Table('child', m, \n                Column('id', Integer, primary_key=True),\n                Column('parent_id', Integer, ForeignKey('parent.id')),\n                Column('sortkey', Integer)\n                )\n\nm.create_all(engine)\n\nclass Parent(object):\n    def __init__(self, children):\n        self.all_c = children\n\nclass Child(object):\n    def __init__(self, sortkey):\n        self.sortkey = sortkey\n\nlatest_c = select([func.max(child.c.sortkey)]).\\\n                where(child.c.parent_id==parent.c.id).\\\n                correlate(parent).\\\n                as_scalar()\n\nmapper(Parent, parent, properties={\n    'all_c':relation(Child),\n    'latest_c':relation(Child, \n                            primaryjoin=and_(\n                                child.c.sortkey==latest_c, \n                                child.c.parent_id==parent.c.id\n                            ),\n                            uselist=False\n    )\n})\n\nmapper(Child, child)\n\nsession = sessionmaker(engine)()\n\np1, p2, p3 = Parent([Child('a'), Child('b'), Child('c')]), \\\n                Parent([Child('b'), Child('c')]),\\\n                Parent([Child('f'), Child('g'), Child('c')])\n\nsession.add_all([p1, p2, p3])\nsession.commit()\n\nassert p1.latest_c.sortkey == 'c'\nassert p2.latest_c.sortkey == 'c'\nassert p3.latest_c.sortkey == 'g'\n"]], ['How do I define a SQLAlchemy relation representing the latest object in a collection?'], 2], [(1930864, 1), [['Alternatively, you can on some platforms use LIMIT, which can produce faster results since you avoid the aggregation and can join the collection item on its primary key:'], ['-10000']], [[" latest_c = select([child.c.id]).\\\n                where(child.c.parent_id==parent.c.id).\\\n                order_by(child.c.sortkey.desc()).\\\n                limit(1).\\\n                correlate(parent).\\\n                as_scalar()\n\nmapper(Parent, parent, properties={\n    'all_c':relation(Child),\n    'latest_c':relation(Child, \n                            primaryjoin=and_(\n                                child.c.id==latest_c, \n                                child.c.parent_id==parent.c.id\n                            ),\n                            uselist=False\n    )\n})\n"]], ['How do I define a SQLAlchemy relation representing the latest object in a collection?'], 2], [(1931527, 0), [['startswith  can take a tuple of strings to match, so you can do this:'], ["This will work even if a and b are words or sentences not just characters.\nIf there can be cases where lines don't start with a or b but also don't end with c you can extend the list comprehension to this:"]], [[" [line.strip().split() for line in z if not line.startswith(('a', 'b'))]\n"]], ['Python - ignore lines in a file'], 2], [(1931527, 1), [["This will work even if a and b are words or sentences not just characters.\nIf there can be cases where lines don't start with a or b but also don't end with c you can extend the list comprehension to this:"], ['-10000']], [[" [\n    line.strip().split()\n    for line in z if line.endswith('c') and not line.startswith(('a', 'b'))\n]\n"]], ['Python - ignore lines in a file'], 2], [(1933784, 0), [["I'm pretty sure whatever you are trying to do can be solved in a better way, but here is something that gives you a clone of the class with a new id:"], ['gives:']], [[' def c():\n    class Clone(object):\n        pass\n\n    return Clone\n\nc1 = c()\nc2 = c()\nprint id(c1)\nprint id(c2)\n']], ['How do you clone a class in Python?'], 2], [(1933784, 1), [['gives:'], ['-10000']], [[' 4303713312\n4303831072\n']], ['How do you clone a class in Python?'], 2], [(1935153, 0), [['In your example, there\'re various issues related to the usage of execfile() - which is not a best practice - and the redefinition of global variables. By the way, if you really need to create a pseudo-destructor (i.e. a code that is invoked whenever the object gets garbage collected), write a so-called "finalizer" function (it\'s not properly a destructor) and invoke it using weakref.ref callback. It should NOT be an instance method of course, and remember that lambda actually creates a closure, hence be sure not to leak any reference to self in the callback! If you need data from the destroyed instance, use the func default argument approach, just be sure  never  to reference \'self\' inside the lambda, otherwise it won\'t work.'], ["output (the sleep is there to help see what's happening):"]], [[' from weakref import ref\nfrom time import sleep\n\nclass Person4:\n    \'\'\'Represents a person\'\'\'\n    population = 0\n\n    def __init__(self, name):\n        \'\'\'Initialize the person\'s data\'\'\'\n        self.name = name\n        print \'Initializing %s\'% self.name\n\n        #When the person is created they increase the population\n        Person4.population += 1\n\n        self._wr = ref(self, lambda wr, name=self.name: Person4_finalizer(name))\n\ndef Person4_finalizer(name):\n        \'\'\'I am dying\'\'\'\n        print \'%s says bye\' % name\n\n        Person4.population -= 1\n\n        if Person4.population == 0:\n            print \'I am the last one\'\n        else:\n            print \'There are still %d left\' % Person4.population\n\np1 = Person4("one")\np2 = Person4("two")\np3 = Person4("three")\n\ndel p2\ndel p3\nsleep(5)\n']], ['__del__ method being called in python when it is not expected'], 2], [(1935153, 1), [["output (the sleep is there to help see what's happening):"], ['-10000']], [[' Initializing one\nInitializing two\nInitializing three\ntwo says bye\nThere are still 2 left\nthree says bye\nThere are still 1 left\none says bye\nI am the last one\n']], ['__del__ method being called in python when it is not expected'], 2], [(1938894, 0), [['-10000'], ['Code:']], [[' $ cat 1938894-simplified.csv\n0,32\n1,21\n1,23\n1,32\n2,23\n2,53\n2,82\n3,82\n4,46\n5,75\n7,86\n8,28\n']], ['csv to sparse matrix in python'], 3], [(1938894, 1), [['Code:'], ['Output:']], [[" #!/usr/bin/env python\n\nimport csv\nfrom scipy import sparse\n\nrows, columns = 10, 100\nmatrix = sparse.lil_matrix( (rows, columns) )\n\ncsvreader = csv.reader(open('1938894-simplified.csv'))\nfor line in csvreader:\n    row, column = map(int, line)\n    matrix.data[row].append(column)\n\nprint matrix.data\n"]], ['csv to sparse matrix in python'], 3], [(1938894, 2), [['Output:'], ['-10000']], [[' [[32] [21, 23, 32] [23, 53, 82] [82] [46] [75] [] [86] [28] []]\n']], ['csv to sparse matrix in python'], 3], [(1939107, 0), [['http://www.lag.net/paramiko/'], ['http://media.commandline.org.uk/code/ssh.txt  (example usage:  https://zeth.net/archive/2008/05/29/sftp-python-really-simple-ssh/ )']], [[' #!/usr/bin/env python\nimport paramiko\nfrom contextlib import contextmanager\nhost = \'192.168.10.142\'\nusername = \'slacker\'\npassword = \'password\'\ndef create_ssh(host=host, username=username, password=password):\n    ssh = paramiko.SSHClient()\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \n    try:\n       print "creating connection"\n       ssh.connect(host, username=username, password=password)\n       print "connected"\n       yield ssh\n    finally:\n       print "closing connection"\n       ssh.close()\n       print "closed"\n']], ['python libraries for ssh handling'], 2], [(1939107, 1), [['http://media.commandline.org.uk/code/ssh.txt  (example usage:  https://zeth.net/archive/2008/05/29/sftp-python-really-simple-ssh/ )'], ['Note : The code examples above are provided just for getting an impression; the code is not tested.']], [[" s = ssh.Connection('example.com', 'warrior', password = 'lennalenna')\ns.put('/home/warrior/hello.txt', '/home/zombie/textfiles/report.txt')\ns.get('/var/log/strange.log', '/home/warrior/serverlog.txt')\ns.execute('ls -l')\ns.close()\n"]], ['python libraries for ssh handling'], 2], [(1940528, 0), [["If all of your dynamic content is handled in the template (for example, if it's just simple checking if a user is present on the request), then I recommend using a generic view, specificially the  direct to template  view:"], ['If you want to add a few more bits of information to the template context, there is another argument,  extra_context , that you can pass to the generic view to include it:']], [[" urlpatterns = patterns('django.views.generic.simple',\n    (r'^$', 'direct_to_template', {'template': 'index.html'}),\n)\n"]], ['Django index page best/most common practice'], 2], [(1940528, 1), [['If you want to add a few more bits of information to the template context, there is another argument,  extra_context , that you can pass to the generic view to include it:'], ['-10000']], [[" extra_context = { \n    'foo': 'bar',\n    # etc\n}\nurlpatterns = patterns('django.views.generic.simple',\n    (r'^$', 'direct_to_template', {'template': 'index.html', 'extra_context': extra_context }),\n)\n"]], ['Django index page best/most common practice'], 2], [(1941712, 0), [['-10000'], ['Printing unique slices:']], [[" def slices(seq, length, prefer_last=False):\n  unique = {}\n  if prefer_last: # this doesn't have to be a parameter, just choose one\n    for start in xrange(len(seq) - length + 1):\n      unique[seq[start:start+length]] = start\n  else: # prefer first\n    for start in xrange(len(seq) - length, -1, -1):\n      unique[seq[start:start+length]] = start\n  return unique\n\n# or find all locations for each slice:\nimport collections\ndef slices(seq, length):\n  unique = collections.defaultdict(list)\n  for start in xrange(len(seq) - length + 1):\n    unique[seq[start:start+length]].append(start)\n  return unique\n"]], ['Python, Huge Iteration Performance Problem'], 4], [(1941712, 1), [['Printing unique slices:'], ['Including locations:']], [[' a = set(slices("aab", 2)) # {"aa", "ab"}\nb = set(slices("abb", 2)) # {"ab", "bb"}\nc = set(slices("abc", 2)) # {"ab", "bc"}\nall = [a, b, c]\nimport operator\na_unique = reduce(operator.sub, (x for x in all if x is not a), a)\nprint a_unique # {"aa"}\n']], ['Python, Huge Iteration Performance Problem'], 4], [(1941712, 2), [['Including locations:'], ['In a test script closer to your conditions, using randomly generated words of 5m characters and a slice length of 20, memory usage was so high that my test script quickly hit my 1G main memory limit and started thrashing virtual memory.  At that point Python spent very little time on the CPU and I killed it.  Reducing either the slice length or word length (since I used completely random words that reduces duplicates and increases memory use) to fit within main memory and it ran under a minute.  This situation plus O(n**2) in your original code will take forever, and is why algorithmic time and space complexity are both important.']], [[' a = slices("aab", 2)\nb = slices("abb", 2)\nc = slices("abc", 2)\nall = [a, b, c]\nimport operator\na_unique = reduce(operator.sub, (set(x) for x in all if x is not a), set(a))\n# a_unique is only the keys so far\na_unique = dict((k, a[k]) for k in a_unique)\n# now it\'s a dict of slice -> location(s)\nprint a_unique # {"aa": 0} or {"aa": [0]}\n               # (depending on which slices function used)\n']], ['Python, Huge Iteration Performance Problem'], 4], [(1941712, 3), [['In a test script closer to your conditions, using randomly generated words of 5m characters and a slice length of 20, memory usage was so high that my test script quickly hit my 1G main memory limit and started thrashing virtual memory.  At that point Python spent very little time on the CPU and I killed it.  Reducing either the slice length or word length (since I used completely random words that reduces duplicates and increases memory use) to fit within main memory and it ran under a minute.  This situation plus O(n**2) in your original code will take forever, and is why algorithmic time and space complexity are both important.'], ['-10000']], [[' import operator\nimport random\nimport string\n\ndef slices(seq, length):\n  unique = {}\n  for start in xrange(len(seq) - length, -1, -1):\n    unique[seq[start:start+length]] = start\n  return unique\n\ndef sample_with_repeat(population, length, choice=random.choice):\n  return "".join(choice(population) for _ in xrange(length))\n\nword_length = 5*1000*1000\nwords = [sample_with_repeat(string.lowercase, word_length) for _ in xrange(3)]\nslice_length = 20\nwords_slices_sets = [set(slices(x, slice_length)) for x in words]\nunique_words_slices = [reduce(operator.sub,\n                              (x for x in words_slices_sets if x is not n),\n                              n)\n                       for n in words_slices_sets]\nprint [len(x) for x in unique_words_slices]\n']], ['Python, Huge Iteration Performance Problem'], 4], [(1942328, 0), [['You could create an object and manipulate the  __iter__  interface:'], ['Prints:']], [[" class Foo(object):\n    def __init__(self):\n        self.j = None\n    def __iter__(self):\n        for i in range(10):\n            self.j = 10 - i\n            yield i\n\nmy_generator = Foo()\n\nfor k in my_generator:\n    print 'j is',my_generator.j\n    print 'k is',k\n"]], ['Add a member variable / method to a Python generator?'], 2], [(1942328, 1), [['Prints:'], ['-10000']], [[' j is 10\nk is 0\nj is 9\nk is 1\nj is 8\nk is 2\nj is 7\nk is 3\nj is 6\nk is 4\nj is 5\nk is 5\nj is 4\nk is 6\nj is 3\nk is 7\nj is 2\nk is 8\nj is 1\nk is 9\n']], ['Add a member variable / method to a Python generator?'], 2], [(1946701, 0), [['Why not do this:'], ['And if you use  fileinput  module you can iterate over lines from multiple input streams very easily:']], [[" for line in open(FunctionPath):\n    line = line.strip()\n    if line.startswith('def '):\n        print '%s: %s' % (FunctionPath, line.partition(':')[0])\n"]], ['Making Python code Pythonic'], 5], [(1946701, 1), [['And if you use  fileinput  module you can iterate over lines from multiple input streams very easily:'], ["BTW, if you don't give fileinput.input any path it will use sys.argv by default, so you can run your python script like this:"]], [[" import fileinput\nfor line in fileinput.input(paths):\n    line = line.strip()\n    if line.startswith('def '):\n        print '%s: %s' % (fileinput.filename(), line.partition(':')[0])\n"]], ['Making Python code Pythonic'], 5], [(1946701, 2), [["BTW, if you don't give fileinput.input any path it will use sys.argv by default, so you can run your python script like this:"], ["if you really want to cover all cases, you shouldn't be using replace(':', '') because it is possible to have "]], [[' $ python script.py filepath1 filepath2 filepath3\n']], ['Making Python code Pythonic'], 5], [(1946701, 3), [["if you really want to cover all cases, you shouldn't be using replace(':', '') because it is possible to have "], ['The following will give you the correct result:']], [[' def func(): #comment myfunc():\n   pass\n']], ['Making Python code Pythonic'], 5], [(1946701, 4), [['The following will give you the correct result:'], ['Unless you want the comment as well.']], [[" >>> 'def func(): #comment myfunc():'.partition(':')[0]\n'def func()'\n"]], ['Making Python code Pythonic'], 5], [(1948862, 0), [['It seems you are running your 2.5 in cygwin, which is probably the reason that it shows up there.'], ['In my 2.5 for win32 it looks just like in your 3.1:']], [[' Python 2.5.1 (r251:54863, May 18 2007, 16:56:43)\n[GCC 3.4.4 (cygming special, gdc 0.12, using dmd 0.125)] on cygwin\n']], ['Is the Python 3.x signal library for Windows incomplete?'], 2], [(1948862, 1), [['In my 2.5 for win32 it looks just like in your 3.1:'], ['-10000']], [[' Python 2.5 (r25:51908, Sep 19 2006, 09:52:17) [MSC v.1310 32 bit (Intel)] on win32\nType "help", "copyright", "credits" or "license" for more information.\n>>> import signal\n>>> dir(signal)\n[\'NSIG\', \'SIGABRT\', \'SIGBREAK\', \'SIGFPE\', \'SIGILL\', \'SIGINT\', \'SIGSEGV\', \'SIGTERM\', \'SIG_DFL\', \'SIG_IGN\', \'__doc__\', \'__\nname__\', \'default_int_handler\', \'getsignal\', \'signal\']\n']], ['Is the Python 3.x signal library for Windows incomplete?'], 2], [(1949225, 0), [['In your question you describe a Gaussian filter, for which scipy has support via a  package .\nFor example:'], ['Of course, you can apply this on the whole image, or just on a patch, using slicing:']], [[' from scipy import * # rand\nfrom pylab import * # figure, imshow\nfrom scipy.ndimage import gaussian_filter\n\n# random "image"\nI = rand(100, 100)\nfigure(1)\nimshow(I)\n\n# gaussian filter\nJ = gaussian_filter(I, sigma=10)\nfigure(2)\nimshow(J)\n']], ['"painting" one array onto another using python / numpy'], 3], [(1949225, 1), [['Of course, you can apply this on the whole image, or just on a patch, using slicing:'], ['NOTE:\nfor "painting" with a "brush", I think you could just create a boolean mask array with your brush. For instance:']], [[' J = array(I) # copy image\nJ[30:70, 30:70] = gaussian_filter(I[30:70, 30:70], sigma=1) # apply filter to subregion\nfigure(2)\nimshow(2)\n']], ['"painting" one array onto another using python / numpy'], 3], [(1949225, 2), [['NOTE:\nfor "painting" with a "brush", I think you could just create a boolean mask array with your brush. For instance:'], ['-10000']], [[' # 7x7 boolean mask with the "brush" (example: a _crude_ circle)\nmask = array([[0, 0, 1, 1, 1, 0, 0],\n              [0, 1, 1, 1, 1, 1, 0],\n              [1, 1, 1, 1, 1, 1, 1],\n              [1, 1, 1, 1, 1, 1, 1],\n              [1, 1, 1, 1, 1, 1, 1],\n              [0, 1, 1, 1, 1, 1, 0],\n              [0, 0, 1, 1, 1, 0, 0]], dtype=bool)\n\n# random image\nI = rand(100, 100)\n# apply filter only on mask\n# compute the gauss. filter only on the 7x7 subregion, not the whole image\nI[40:47, 40:47][mask] = gaussian_filter(I[40:47, 40:47][mask], sigma=1)\n']], ['"painting" one array onto another using python / numpy'], 3], [(1950062, 0), [["For example (Py2.4 specific, since that's what you're asking about), save in aim.py the following:"], ['and now:']], [[" import __builtin__\nrealimp = __builtin__.__import__\ndef my_import(name, globals={}, locals={}, fromlist=[]):\n  print 'importing', name, fromlist\n  return realimp(name, globals, locals, fromlist)\n__builtin__.__import__ = my_import\n\nfrom os import path\n"]], ['Python: intercept a class loading action'], 2], [(1950062, 1), [['and now:'], ['So this lets you intercept any specific import request you want, and alter the imported module[s] as you wish before you return them -- see the specs  here .  This is the kind of "hook" you\'re looking for, right?']], [[" $ python2.4 aim.py\nimporting os ('path',)\n"]], ['Python: intercept a class loading action'], 2], [(1950098, 0), [['The elegant and Pythonic way to do it is to encapsulate the idea of a range of dates in its own generator, then use that generator in your code:'], ['prints:']], [[' import datetime\n\ndef daterange(start, end, delta):\n    """ Just like `range`, but for dates! """\n    current = start\n    while current < end:\n        yield current\n        current += delta\n\nstart = datetime.datetime.now()\nend = start + datetime.timedelta(days=20)\n\nfor d in daterange(start, end, datetime.timedelta(days=1)):\n    print d\n']], ['Does Python have any for loop equivalent (not foreach)'], 2], [(1950098, 1), [['prints:'], ["This is similar to the answer about  range , except that the built-in  range  won't work with datetimes, so we have to create our own, but at least we can do it just once in an encapsulated way."]], [[' 2009-12-22 20:12:41.245000\n2009-12-23 20:12:41.245000\n2009-12-24 20:12:41.245000\n2009-12-25 20:12:41.245000\n2009-12-26 20:12:41.245000\n2009-12-27 20:12:41.245000\n2009-12-28 20:12:41.245000\n2009-12-29 20:12:41.245000\n2009-12-30 20:12:41.245000\n2009-12-31 20:12:41.245000\n2010-01-01 20:12:41.245000\n2010-01-02 20:12:41.245000\n2010-01-03 20:12:41.245000\n2010-01-04 20:12:41.245000\n2010-01-05 20:12:41.245000\n2010-01-06 20:12:41.245000\n2010-01-07 20:12:41.245000\n2010-01-08 20:12:41.245000\n2010-01-09 20:12:41.245000\n2010-01-10 20:12:41.245000\n']], ['Does Python have any for loop equivalent (not foreach)'], 2], [(1950414, 0), [['classmethod  is a descriptor, wrapping a function, and you can call the resulting object on a class or (equivalently) an instance thereof:'], ['One of the main uses of classmethod is to define "alternative constructors":']], [[" >>> class x(object):\n...   def c1(*args): print 'c1', args\n...   c1 = classmethod(c1)\n...   @classmethod\n...   def c2(*args): print 'c2', args\n... \n>>> inst = x()\n>>> x.c1()\nc1 (<class '__main__.x'>,)\n>>> x.c2()\nc2 (<class '__main__.x'>,)\n>>> inst.c1()\nc1 (<class '__main__.x'>,)\n>>> inst.c2()\nc2 (<class '__main__.x'>,)\n"]], ['What does classmethod do in this code?'], 3], [(1950414, 1), [['One of the main uses of classmethod is to define "alternative constructors":'], ['Now if you subclass  y , the classmethod keeps working, e.g.:']], [[" >>> class y(object):\n...   def __init__(self, astring):\n...     self.s = astring\n...   @classmethod\n...   def fromlist(cls, alist):\n...     x = cls('')\n...     x.s = ','.join(str(s) for s in alist)\n...     return x\n...   def __repr__(self):\n...     return 'y(%r)' % self.s\n...\n>>> y1 = y('xx')\n>>> y1\ny('xx')\n>>> y2 = y.fromlist(range(3))\n>>> y2\ny('0,1,2')\n"]], ['What does classmethod do in this code?'], 3], [(1950414, 2), [['Now if you subclass  y , the classmethod keeps working, e.g.:'], ['-10000']], [[" >>> class k(y):\n...   def __repr__(self):\n...     return 'k(%r)' % self.s.upper()\n...\n>>> k1 = k.fromlist(['za','bu'])\n>>> k1\nk('ZA,BU')\n"]], ['What does classmethod do in this code?'], 3], [(1954799, 0), [['The simplest example where the default transformations fail to generate a canonical form is for nonlinear polynomials, which can be represented in both factored and expanded form. Although clearly  a(1+b) = a+ab  mathematically, SymPy gives: '], ['Likewise, SymPy fails to detect that the difference is zero: ']], [[' >>> bool(a*(1+b) == a + a*b) False \n']], ['Basics of SymPy'], 4], [(1954799, 1), [['Likewise, SymPy fails to detect that the difference is zero: '], ['If you want to determine the mathematical equivalence of nontrivial expressions, you should apply a more advanced simplification routine to both sides of the equation. In the case of polynomials, expressions can be rewritten in a canonical form by expanding them fully. This is done using the  .expand()  method in SymPy: ']], [['  >>> bool(a*(1+b) - (a+a*b) == 0) False  \n']], ['Basics of SymPy'], 4], [(1954799, 2), [['If you want to determine the mathematical equivalence of nontrivial expressions, you should apply a more advanced simplification routine to both sides of the equation. In the case of polynomials, expressions can be rewritten in a canonical form by expanding them fully. This is done using the  .expand()  method in SymPy: '], ['If  .expand()  does not help, try  simplify() ,  trigsimp() , etc, which attempt more advanced transformations. For example, ']], [[' >>> A, B = a*(1+b), a + a*b \n>>> bool(A.expand() == B.expand()) True \n>>> (A - B).expand() 0 \n']], ['Basics of SymPy'], 4], [(1954799, 3), [['If  .expand()  does not help, try  simplify() ,  trigsimp() , etc, which attempt more advanced transformations. For example, '], ['-10000']], [[' >>> trigsimp(cos(x)**2 + sin(x)**2) == 1 True\n']], ['Basics of SymPy'], 4], [(1954840, 0), [['Get the attribute with  getattr :'], ['You can also call it:']], [[' method = "whatever"\ngetattr(test, method)\n']], ["How do I access a object's method when the method's name is in a variable?"], 2], [(1954840, 1), [['You can also call it:'], ['-10000']], [[' getattr(test, method)()\n']], ["How do I access a object's method when the method's name is in a variable?"], 2], [(1956407, 0), [["Edit : here's a trivial working example ( aview.py ):"], ['Once this  aview  module is properly installed:']], [[' #include "Python.h"\n#include <stdio.h>\n\nstatic PyObject *\naview_write(PyObject *self, PyObject *args)\n{\n    const char *what;\n    if (!PyArg_ParseTuple(args, "s", &what))\n        return NULL;\n    printf("==%s==", what);\n    return Py_BuildValue("");\n}\n\nstatic PyMethodDef a_methods[] = {\n    {"write", aview_write, METH_VARARGS, "Write something."},\n    {NULL, NULL, 0, NULL}\n};\n\nPyMODINIT_FUNC\ninitaview(void)\n{\n    PyObject *m = Py_InitModule("aview", a_methods);\n    if (m == NULL) return;\n    PySys_SetObject("stdout", m);\n}\n']], ['How to redirect stderr in Python? Via Python C API?'], 2], [(1956407, 1), [['Once this  aview  module is properly installed:'], ["...any string emitted to standard output is written with  ==  signs around it (and this  print  calls  .write  twice: with  'ciao' , and then again with a newline)."]], [[' $ python\nPython 2.5.4 (r254:67917, Dec 23 2008, 14:57:27) \n[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin\nType "help", "copyright", "credits" or "license" for more information.\n>>> import aview\n>>> print \'ciao\'\n==ciao====\n==>>> \n']], ['How to redirect stderr in Python? Via Python C API?'], 2], [(1956646, 0), [['One way would be to look at the actual source file for easy_install. Do'], ["to see where it's located, and then use that path in"]], [[' which easy_install\n']], ['Determining version of easy_install/setuptools'], 3], [(1956646, 1), [["to see where it's located, and then use that path in"], ['The second line in my easy_install script says:']], [[' less path/to/easy_install\n']], ['Determining version of easy_install/setuptools'], 3], [(1956646, 2), [['The second line in my easy_install script says:'], ['which suggests that I have easy_install version 0.6c11.']], [[" # EASY-INSTALL-ENTRY-SCRIPT: 'setuptools==0.6c11','console_scripts','easy_install'\n"]], ['Determining version of easy_install/setuptools'], 3], [(1957329, 0), [['An iterator can be iterated:'], ['You can make your class iterable by adding  next(self)  etc, as in your sample. So with']], [[' for item in mylist:\n    print item\n\nfor key,item in enumerate(mylist):\n    print key,":",item\n\nfor i in range(0,50):\n    print i\n']], ["i don't know why iter(not __iter__) function use in this place,what is the mean of iter in this code"], 3], [(1957329, 1), [['You can make your class iterable by adding  next(self)  etc, as in your sample. So with'], ['Then you can do']], [[' class a(object):\n    def __init__(self,x=10):\n        self.x = x\n    def __iter__(self):\n        return self\n    def next(self):\n        if self.x > 0:\n            self.x-=1\n            return self.x\n        else:\n            raise StopIteration\n']], ["i don't know why iter(not __iter__) function use in this place,what is the mean of iter in this code"], 3], [(1957329, 2), [['Then you can do'], ['-10000']], [['  ainst = a()\n for item in aisnt:\n     print item\n']], ["i don't know why iter(not __iter__) function use in this place,what is the mean of iter in this code"], 3], [(1957780, 0), [['You need to use the  __getitem__  method .'], ["And if you're going to be setting values you'll need to implement the  __setitem__  method  too, otherwise this will happen:"]], [[' >>> class MyClass:\n...     def __getitem__(self, key):\n...         return key * 2\n...\n>>> myobj = MyClass()\n>>> myobj[3]\n6\n']], ['How to override the [] operator?'], 2], [(1957780, 1), [["And if you're going to be setting values you'll need to implement the  __setitem__  method  too, otherwise this will happen:"], ['-10000']], [[' >>> myobj[5] = 1\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nAttributeError: MyClass instance has no attribute \'__setitem__\'\n']], ['How to override the [] operator?'], 2], [(1957877, 0), [['-10000'], ['OR']], [[" set2 = set(x['id'] for x in list2)\nfor entry in list1:\n  if entry['id'] in set2:\n    entry['match'] = True\n"]], ['mapping two list'], 2], [(1957877, 1), [['OR'], ['-10000']], [[" set2 = set(x['id'] for x in list2)\nfor entry in list1:\n  entry['match'] = entry['id'] in set2\n"]], ['mapping two list'], 2], [(1960022, 0), [['Perhaps you can decorate your  picture s in the view before you render the template.'], ['Then in the template you can act on the value of that new attribute.']], [[' for picture in pictures:\n    picture.is_in_article = (picture in article.pictures)\n']], ['GAE template code to check is item in the list'], 2], [(1960022, 1), [['Then in the template you can act on the value of that new attribute.'], ['-10000']], [[' {% for picture in pictures %}\n    {% if picture.is_in_article %}\n        <input type="checkbox" checked="true" name="picture" value="{{ picture.key }}"  />\n    {% else %}\n        <input type="checkbox" name="picture" value="{{ picture.key }}"  />\n    {% endif %}\n    <img src=\'/img?img_id={{ picture.key }}\'></img> <br />\n{% endfor %}\n']], ['GAE template code to check is item in the list'], 2], [(1960516, 0), [['How about subclassing  json.JSONEncoder ?'], ['Then use it like so:']], [[" class DecimalEncoder(json.JSONEncoder):\n    def _iterencode(self, o, markers=None):\n        if isinstance(o, decimal.Decimal):\n            # wanted a simple yield str(o) in the next line,\n            # but that would mean a yield on the line with super(...),\n            # which wouldn't work (see my comment below), so...\n            return (str(o) for o in [o])\n        return super(DecimalEncoder, self)._iterencode(o, markers)\n"]], ['Python JSON serialize a Decimal object'], 2], [(1960516, 1), [['Then use it like so:'], ['-10000']], [[" json.dumps({'x': decimal.Decimal('5.5')}, cls=DecimalEncoder)\n"]], ['Python JSON serialize a Decimal object'], 2], [(1962323, 0), [['For example, One artist will have many albums (one to many), one genre will apply to many artists (One to many.) e.g. Metallica (one artist) will have several albums, Black Album, St. Anger, etc. but one album will probably not belong to two artists, e.g. Alicia Keys and Metallica both recording the same album. To achieve this relationship, each Album record must have an artist_id to indicate which artist it is related to.'], ['A tag will describe several artists (e.g. Metal describes Metallica, Pantera, and Sepultura), and one artist will have several tags (e.g. people might tag Metallica as Metal, Rock, and 80s Metal.) This kind of relationship between data would probably produce three tables. An artists table, a tags table, and a join table. Your join records would look like this for example (purely imaginary and hypothetical situation)']], [[' mysql> select * from albums where artist_id = 40;\n+-----+------------------------------+------+---------------------+-----------+----------+------------+\n| id  | name                         | year | created_at          | artist_id | genre_id | updated_at |\n+-----+------------------------------+------+---------------------+-----------+----------+------------+\n| 309 | Reise, Reise                 | 2004 | 2009-11-22 16:01:13 |        40 |        2 | NULL       | \n| 310 | Mutter                       | 2001 | 2009-11-22 16:12:28 |        40 |        2 | NULL       | \n| 311 | Sehnsucht                    | 1998 | 2009-11-22 16:20:22 |        40 |        2 | NULL       | \n| 312 | Live aus Berlin              | 1999 | 2009-11-22 16:29:11 |        40 |        2 | NULL       | \n| 313 | Rosenrot                     | 2005 | 2009-11-22 16:40:43 |        40 |        4 | NULL       | \n| 314 | The Very Best of Rammstein   |    0 | 2009-11-22 16:51:38 |        40 |        2 | NULL       | \n| 315 | Live aus Berlin (bonus disc) |    0 | 2009-11-22 17:05:24 |        40 |        2 | NULL       | \n+-----+------------------------------+------+---------------------+-----------+----------+------------+\n7 rows in set (0.02 sec)\n']], ['How can I get more intuitive feels about django relationships(like:Many-to-one,Many-to-many )'], 2], [(1962323, 1), [['A tag will describe several artists (e.g. Metal describes Metallica, Pantera, and Sepultura), and one artist will have several tags (e.g. people might tag Metallica as Metal, Rock, and 80s Metal.) This kind of relationship between data would probably produce three tables. An artists table, a tags table, and a join table. Your join records would look like this for example (purely imaginary and hypothetical situation)'], ["the artist_id of 34 might be Metallica, and the tag_id of 357 might be Metal. The point is, there's a table that exists to link tags and artists. In this example."]], [[' | id | artist_id | tag_id |\n| 1  | 34        | 357    |\n| 2  | 98        | 234    |\n']], ['How can I get more intuitive feels about django relationships(like:Many-to-one,Many-to-many )'], 2], [(1963171, 0), [['You create one like this:'], ['And you choose your scroll position with the view_x and view_y values.']], [[' scroll_area = pyglet.text.layout.ScrollableTextLayout(my_text, width, height, multiline=True) \n']], ['Render and scroll through multiline paragraphs using pyglet and ScrollableTextLayout'], 2], [(1963171, 1), [['And you choose your scroll position with the view_x and view_y values.'], ['Set different values of view_y to scroll vertically.']], [[' scroll_area.view_y = 30 # start 30 pixels down\n']], ['Render and scroll through multiline paragraphs using pyglet and ScrollableTextLayout'], 2], [(1963568, 0), [["At least at the moment I don't know a way of merging multiple forms onto one page in a FormWizard.  In django 1.2 you will be able to include FormSets as steps in FormWizards (as per  this ticket ) but those only deal with multiple copies of identical forms, not compilations of many forms.  But there is a way to do what you ask:"], ['Your "process_form_list" function will need to loop over the fields using something like:']], [[' from django.contrib.formtools.wizard import FormWizard\nfrom django import forms\n\nclass SubjectForm(forms.Form):\n    subjects = forms.MultipleChoiceField(choices = ((\'language\', \'language\'), \n                                                        (\'sport\',\'sport\')))\n\nclass RelatedQForm(forms.Form):\n    """Overload the __init__ operator to take a list of forms as the first input and generate the \n    fields that way."""\n    def __init__(self, interested_subjects, *args, **kwargs):\n        super(RelatedQForm, self).__init__(*args, **kwargs)\n        for sub in interested_subjects:\n            self.field[sub] = forms.CharField(label = "What do you think about %s" % subject)\n\nclass SubjectWizard(FormWizard):\n    def done(self, request, form_list):\n        process_form_list(form_list)\n\n    def process_step(self, request, form, step):\n        if step == 1:\n            chosen_subs = form.cleaned_data[\'subjects\']\n            self.form_list[1] = RelatedQForm(chosen_subs)\n']], ['Django 1.1 FormWizard, Dynamically extend form'], 2], [(1963568, 1), [['Your "process_form_list" function will need to loop over the fields using something like:'], ['Hope this gets you on your way :)']], [[' for field, val in form.cleaned_data.items():\n    do_stuff\n']], ['Django 1.1 FormWizard, Dynamically extend form'], 2], [(1964999, 0), [['-10000'], ['prints:']], [[' text = """\nWhen in the course of human Events, it becomes necessary for one People to dissolve the Political Bands which have connected them with another, and to assume among the Powers of the Earth, the separate and equal Station to which the Laws of Nature and of Nature?s God entitle them, a decent Respect to the Opinions of Mankind requires that they should declare the causes which impel them to the Separation.\n\nWe hold these Truths to be self-evident, that all Men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty, and the pursuit of Happiness?-That to secure these Rights, Governments are instituted among Men, deriving their just Powers from the Consent of the Governed, that whenever any Form of Government becomes destructive of these Ends, it is the Right of the People to alter or abolish it, and to institute a new Government, laying its Foundation on such Principles, and organizing its Powers in such Form, as to them shall seem most likely to effect their Safety and Happiness. Prudence, indeed, will dictate that Governments long established should not be changed for light and transient Causes; and accordingly all Experience hath shewn, that Mankind are more disposed to suffer, while Evils are sufferable, than to right themselves by abolishing the Forms to which they are accustomed. But when a long Train of Abuses and Usurpations, pursuing invariably the same Object, evinces a Design to reduce them under absolute Despotism, it is their Right, it is their Duty, to throw off such Government, and to provide new Guards for their future Security. Such has been the patient Sufferance of these Colonies; and such is now the Necessity which constrains them to alter their former Systems of Government. The History of the Present King of Great-Britain is a History of repeated Injuries and Usurpations, all having in direct Object the Establishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a candid World.\n"""\n\nwords = text.split()\nsubs = []\nn = 4\nfor i in range(0, len(words), n):\n    subs.append(" ".join(words[i:i+n]))\nprint subs[:10]\n']], ["Split a large string into multiple substrings containing 'n' number of words via python"], 3], [(1964999, 1), [['prints:'], ['or, as a list comprehension:']], [[" ['When in the course', 'of human Events, it', 'becomes necessary for one', 'People to dissolve the', 'Political Bands which have', 'connected them with another,', 'and to assume among', 'the Powers of the', 'Earth, the separate and', 'equal Station to which']\n"]], ["Split a large string into multiple substrings containing 'n' number of words via python"], 3], [(1964999, 2), [['or, as a list comprehension:'], ['-10000']], [[' subs = [" ".join(words[i:i+n]) for i in range(0, len(words), n)]\n']], ["Split a large string into multiple substrings containing 'n' number of words via python"], 3], [(1965486, 0), [["Taking the OP's example as normative (any block including further nested blocks must be removed), what about...:"], ['This emits']], [[" import itertools\n\nx = '''[This] is some text with [some [blocks that are nested [in a [variety]\nof ways]]] and some [which are not], and [any [with nesting] must go] away.'''\n\ndef nonest(txt):\n  pieces = []\n  d = 0\n  level = []\n  for c in txt:\n    if c == '[': d += 1\n    level.append(d)\n    if c == ']': d -= 1\n  for k, g in itertools.groupby(zip(txt, level), lambda x: x[1]>0):\n    block = list(g)\n    if max(d for c, d in block) > 1: continue\n    pieces.append(''.join(c for c, d in block))\n  print ''.join(pieces)\n\nnonest(x)\n"]], ['Remove all nested blocks, whilst leaving non-nested blocks alone via python'], 2], [(1965486, 1), [['This emits'], ['which under the normatime hypothesis would seem to be the desired result.']], [[' [This] is some text with  and some [which are not], and  away.\n']], ['Remove all nested blocks, whilst leaving non-nested blocks alone via python'], 2], [(1965607, 0), [["You can't pass it as its own name, but you can add it to the keywords."], ['Alternatively you can name its own argument:']], [[" def decorate(function):\n    def wrap_function(*args, **kwargs):\n        kwargs['str'] = 'Hello!'\n        return function(*args, **kwargs)\n    return wrap_function\n\n@decorate\ndef print_message(*args, **kwargs):\n    print(kwargs['str'])\n"]], ["How can I pass a variable in a decorator to function's argument in a decorated function?"], 3], [(1965607, 1), [['Alternatively you can name its own argument:'], ['Class method:']], [[" def decorate(function):\n    def wrap_function(*args, **kwargs):\n        str = 'Hello!'\n        return function(str, *args, **kwargs)\n    return wrap_function\n\n@decorate\ndef print_message(str, *args, **kwargs):\n    print(str)\n"]], ["How can I pass a variable in a decorator to function's argument in a decorated function?"], 3], [(1965607, 2), [['Class method:'], ['-10000']], [[" def decorate(function):\n    def wrap_function(*args, **kwargs):\n        str = 'Hello!'\n        args.insert(1, str)\n        return function(*args, **kwargs)\n    return wrap_function\n\nclass Printer:\n    @decorate\n    def print_message(self, str, *args, **kwargs):\n        print(str)\n"]], ["How can I pass a variable in a decorator to function's argument in a decorated function?"], 3], [(1966495, 0), [['-10000'], ['Done via  re.sub :']], [[' >>> import re\n>>> wordlist = [\'Schreiben\\nEs\', \'Schreiben\', \\\n    \'Schreiben\\nEventuell\', \'Schreiben\\nHaruki\']\n>>> [ re.sub("\\n.*", "", word) for word in wordlist ]\n[\'Schreiben\', \'Schreiben\', \'Schreiben\', \'Schreiben\']\n']], ['Delete the \\n and following letters in the end of words in a list'], 2], [(1966495, 1), [['Done via  re.sub :'], ['-10000']], [[" >>> help(re.sub)\n  1 Help on function sub in module re:\n  2 \n  3 sub(pattern, repl, string, count=0)\n  4     Return the string obtained by replacing the leftmost\n  5     non-overlapping occurrences of the pattern in string by the\n  6     replacement repl.  repl can be either a string or a callable;\n  7     if a callable, it's passed the match object and must return\n  8     a replacement string to be used.\n"]], ['Delete the \\n and following letters in the end of words in a list'], 2], [(1967688, 0), [['Instead of:'], ['use:']], [[' path = os.path.abspath(__file__)[:-8]\n']], ['Accessing a file relatively in Python if you do not know your starting point?'], 2], [(1967688, 1), [['use:'], ['See the docs  here .']], [[' path = os.path.dirname(os.path.abspath(__file__))\n']], ['Accessing a file relatively in Python if you do not know your starting point?'], 2], [(1968132, 0), [["Here's the  documentation  page. The older doc page used have a one-liner example:"], ["If you want to see how it's used in action, see the test cases that come with the code. ( mwlib/tests/test_parser.py from git repository ):"]], [[' from mwlib.uparser import simpleparse\nsimpleparse("=h1=\\n*item 1\\n*item2\\n==h2==\\nsome [[Link|caption]] there\\n")\n']], ['How to parse/extract data from a mediawiki marked-up article via python'], 2], [(1968132, 1), [["If you want to see how it's used in action, see the test cases that come with the code. ( mwlib/tests/test_parser.py from git repository ):"], ['Also see  Markup spec  and  Alternative parsers  for more information.']], [[' from mwlib import parser, expander, uparser\nfrom mwlib.expander import DictDB\nfrom mwlib.xfail import xfail\nfrom mwlib.dummydb import DummyDB\nfrom mwlib.refine import util, core\n\nparse = uparser.simpleparse\n\ndef test_headings():\n    r=parse(u"""\n= 1 =\n== 2 ==\n= 3 =\n""")\n\n    sections = [x.children[0].asText().strip() for x in r.children if isinstance(x, parser.Section)]\n    assert sections == [u"1", u"3"]\n']], ['How to parse/extract data from a mediawiki marked-up article via python'], 2], [(1969097, 0), [['However, if I try to "browse the module" (command 4), I get the following error:'], ['Try running']], [[" HlpWiz>>> 4\nWhat module do you want to look more into?:  uu\n\n*An error occurred - probably because the module isn't loaded or is misspelled*\n"]], ["Cant get __import__() to dynamically import a module in python - I know this cause it doesn't show up in sys.modules"], 6], [(1969097, 1), [['Try running'], ['Therefore, change']], [[" #!/usr/bin/env python\nimport sys\n__import__('uu')\nprint(sys.modules['uu'])\nprint(dir(uu))\n"]], ["Cant get __import__() to dynamically import a module in python - I know this cause it doesn't show up in sys.modules"], 6], [(1969097, 2), [['Therefore, change'], ['to']], [['     var_mod = input("What module do you want to look more into?:  ")\n    print "\\n attempting to browse... please wait!"\n    time.sleep(2)\n    browse_mod(zlib = var_mod)\n']], ["Cant get __import__() to dynamically import a module in python - I know this cause it doesn't show up in sys.modules"], 6], [(1969097, 3), [['to'], ['On a minor note, you could also change']], [['     var_mod = raw_input("What module do you want to look more into?:  ")\n    print "\\n attempting to browse... please wait!"\n    time.sleep(2)\n    browse_mod(zlib = sys.modules[var_mod])\n']], ["Cant get __import__() to dynamically import a module in python - I know this cause it doesn't show up in sys.modules"], 6], [(1969097, 4), [['On a minor note, you could also change'], ['to the more pythonic']], [[' i = 1\nfor line in sample:\n    print i, line\n    i = i + 1\n']], ["Cant get __import__() to dynamically import a module in python - I know this cause it doesn't show up in sys.modules"], 6], [(1969097, 5), [['to the more pythonic'], ['Edit : ']], [[' for i,line in enumerate(sample):\n    print i+1, line\n']], ["Cant get __import__() to dynamically import a module in python - I know this cause it doesn't show up in sys.modules"], 6], [(1970028, 0), [["Here's a quick hack that might give you close to what you want:"], ['When I run the above, I get the following output, which is a list of two-tuples containing the two strings you wanted (though in a different order):']], [[' import re\ndata=r\'<wn20schema:NounSynset rdf:about="&dn;synset-56242" rdfs:label="{saddelmageri_1}">"\'\n\nmatches=re.findall(\'synset-([0-9]+).*label="{(.*)_1}"\', data)\nprint "matches:", matches\n']], ['Python regexp find two keywords in a line'], 2], [(1970028, 1), [['When I run the above, I get the following output, which is a list of two-tuples containing the two strings you wanted (though in a different order):'], ['-10000']], [[" matches: [('56242', 'saddelmageri')]\n"]], ['Python regexp find two keywords in a line'], 2], [(1970718, 0), [['-10000'], ['Edit:  Even more readable:']], [[" Keyword.objects.exclude(id__in=PageKeyword.objects.values('keyword_id'))\n"]], ['Django specific sql query'], 2], [(1970718, 1), [['Edit:  Even more readable:'], ['-10000']], [[' Keyword.objects.exclude(pagekeyword__in=PageKeyword.objects.all())\n']], ['Django specific sql query'], 2], [(1971240, 0), [['Check  in this example  how it can be done. Looks like this:'], ['EDIT :  I just found a better implementation . This class is very simple to use, as it can be seen in the docstring.']], [[' myUrlclass.addheader("Range","bytes=%s-" % (existSize))\n']], ['Python seek on remote file using HTTP'], 2], [(1971240, 1), [['EDIT :  I just found a better implementation . This class is very simple to use, as it can be seen in the docstring.'], ['Update : The "better implementation" has moved to  github: excid3/urlgrabber  in the  byterange.py  file.']], [[' class HTTPRangeHandler(urllib2.BaseHandler):\n"""Handler that enables HTTP Range headers.\n\nThis was extremely simple. The Range header is a HTTP feature to\nbegin with so all this class does is tell urllib2 that the \n"206 Partial Content" reponse from the HTTP server is what we \nexpected.\n\nExample:\n    import urllib2\n    import byterange\n\n    range_handler = range.HTTPRangeHandler()\n    opener = urllib2.build_opener(range_handler)\n\n    # install it\n    urllib2.install_opener(opener)\n\n    # create Request and set Range header\n    req = urllib2.Request(\'http://www.python.org/\')\n    req.header[\'Range\'] = \'bytes=30-50\'\n    f = urllib2.urlopen(req)\n"""\n\ndef http_error_206(self, req, fp, code, msg, hdrs):\n    # 206 Partial Content Response\n    r = urllib.addinfourl(fp, hdrs, req.get_full_url())\n    r.code = code\n    r.msg = msg\n    return r\n\ndef http_error_416(self, req, fp, code, msg, hdrs):\n    # HTTP\'s Range Not Satisfiable error\n    raise RangeError(\'Requested Range Not Satisfiable\')\n']], ['Python seek on remote file using HTTP'], 2], [(1972672, 0), [['Both  sort  and  sorted  have three keyword arguments:  cmp ,  key  and  reverse .'], ['key  should be a function which takes an item and returns a value to compare and sort by.  reverse  allows to reverse sort order.']], [[' L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;\ncmp(x, y) -> -1, 0, 1\n\nsorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list\n']], ['What arguments does Python sort function have?'], 3], [(1972672, 1), [['key  should be a function which takes an item and returns a value to compare and sort by.  reverse  allows to reverse sort order.'], ['-10000']], [["Example >>> from operator import itemgetter\n\n>>> a = range(5)\n>>> b = a[::-1]\n>>> c = map(lambda x: chr(((x+3)%5)+97), a)\n>>> sequence = zip(a,b,c)\n\n# sort by first item in a tuple\n>>> sorted(sequence, key = itemgetter(0))\n[(0, 4, 'd'), (1, 3, 'e'), (2, 2, 'a'), (3, 1, 'b'), (4, 0, 'c')]\n\n# sort by second item in a tuple\n>>> sorted(sequence, key = itemgetter(1))\n[(4, 0, 'c'), (3, 1, 'b'), (2, 2, 'a'), (1, 3, 'e'), (0, 4, 'd')]\n\n# sort by third item in a tuple\n>>> sorted(sequence, key = itemgetter(2))\n[(2, 2, 'a'), (3, 1, 'b'), (4, 0, 'c'), (0, 4, 'd'), (1, 3, 'e')]\n"]], ['What arguments does Python sort function have?'], 3], [(1972672, 2), [['-10000'], ['So, sorting with  key  seems to be at least twice as fast as sorting with  cmp . Using  itemgetter  instead of  lambda x: x[1]  makes sort even faster.']], [[' >>> from timeit import Timer\n>>> Timer(stmt="sorted(xs,key=itemgetter(1))",setup="from operator import itemgetter;xs=range(100);xs=zip(xs,xs);").timeit(300000)\n6.7079150676727295\n>>> Timer(stmt="sorted(xs,key=lambda x:x[1])",setup="xs=range(100);xs=zip(xs,xs);").timeit(300000)\n11.609490871429443\n>>> Timer(stmt="sorted(xs,cmp=lambda a,b: cmp(a[1],b[1]))",setup="xs=range(100);xs=zip(xs,xs);").timeit(300000)\n22.335839986801147\n']], ['What arguments does Python sort function have?'], 3], [(1973026, 0), [['given this input:'], ['then example output is :']], [[' \n<html>\n<head>\n</head>\n<body>\n<p>here is some text to bold</p>\n<p>and some more</p>\n</body>\n</html>\n']], ['insert tags in ElementTree text'], 2], [(1973026, 1), [['then example output is :'], ["Here's the code, I have also posted it at  http://bkc.pastebin.com/f545a8e1d"]], [[' \n<?xml version="1.0"?>\n<html>\n<head/>\n<body>\n<p>here is <b>some</b> text to <b>bold</b> </p>\n<p>and <b>some</b> more </p>\n</body>\n</html>\n']], ['insert tags in ElementTree text'], 2], [(1975856, 0), [['Simplest way to get the  first  index satisfying the condition (in Python 2.6 or better:'], ['If you need to do this kind of operation more than very few times between changes to the  hugelist  or its contents, then, as you indicate in the second edit to your question, building an auxiliary dict (from integer to index of first dict containing it) is preferable. Since you want the  first  applicable index, you want to iterate backwards (so hits that are closer to the start of  hugelist  will override ones that are further on) -- for example:']], [[" next((i for i, d in enumerate(hugelist) if 735 in d['ids']), None)\n"]], ['Python: find index of item containing X in list'], 4], [(1975856, 1), [['If you need to do this kind of operation more than very few times between changes to the  hugelist  or its contents, then, as you indicate in the second edit to your question, building an auxiliary dict (from integer to index of first dict containing it) is preferable. Since you want the  first  applicable index, you want to iterate backwards (so hits that are closer to the start of  hugelist  will override ones that are further on) -- for example:'], ['You can build  auxdict  in other ways, including without the reversal, for example:']], [[" auxdict = {}\nL = len(hugelist) - 1\nfor i, d in enumerate(reversed(hugelist)):\n  auxdict.update(dict.fromkeys(d['ids'], L-i))\n"]], ['Python: find index of item containing X in list'], 4], [(1975856, 2), [['You can build  auxdict  in other ways, including without the reversal, for example:'], ['but this is likely to be substantially slower due to the huge number of  if  that execute in the inner loop.  The direct  dict  constructor (taking a sequence of key, value pairs) is also likely to be slower due to the need of inner loops:']], [[" auxdict = {}\nfor i, d in enumerate(hugelist):\n  for item in d['ids']:\n    if item not in auxdict: auxdict[item] =i\n"]], ['Python: find index of item containing X in list'], 4], [(1975856, 3), [['but this is likely to be substantially slower due to the huge number of  if  that execute in the inner loop.  The direct  dict  constructor (taking a sequence of key, value pairs) is also likely to be slower due to the need of inner loops:'], ['However, these are just qualitative considerations -- consider running benchmarks over a few "typical / representative" examples of values you could have in  hugelist  (using  timeit  at the command line prompt, as I\'ve often recommended) to  measure  the relative speeds of these approaches (as well as, how their runtimes compare to that of an unaided lookup as I showed at the start of this answer -- this ratio, plus the average number of lookups you expect to perform between successive  hugelist  changes, will help you select the overall strategy).']], [[" L = len(hugelist) - 1\nauxdict = dict((item, L-i) for i, d in enumerate(reversed(hugelist)) for item in d['ids'])\n"]], ['Python: find index of item containing X in list'], 4], [(1977467, 0), [['Reference:\n http://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.bisplrep.html'], ['Upper solution does not give you perfect fit. \ncheck   ']], [[' import scipy\nimport math\nimport numpy\nfrom scipy import interpolate\n\n\nx= [1,2,3,4,5,6]\ny= [10,20,30]\n\nY = numpy.array([[i]*len(x) for i in y])\nX = numpy.array([x for i in y])\nZ = numpy.array([[2.3,3.4,5.6,7.8,9.6,11.2],\n                 [4.3,5.4,7.6,9.8,11.6,13.2],\n                 [6.3,7.4,8.6,10.8,13.6,15.2]]) \n\ntck = interpolate.bisplrep(X,Y,Z)\nprint interpolate.bisplev(3.5,15,tck) \n\n\n7.84921875\n']], ['2 dimensional interpolation problem'], 5], [(1977467, 1), [['Upper solution does not give you perfect fit. \ncheck   '], ['to overcome this interpolate whit polyinomials of 5rd degree in x and 2nd degree in y direction  ']], [[' print interpolate.bisplev(x,y,tck)\n\n[[  2.2531746    4.2531746    6.39603175]\n [  3.54126984   5.54126984   7.11269841]\n [  5.5031746    7.5031746    8.78888889]\n [  7.71111111   9.71111111  10.9968254 ]\n [  9.73730159  11.73730159  13.30873016]\n [ 11.15396825  13.15396825  15.2968254 ]]\n']], ['2 dimensional interpolation problem'], 5], [(1977467, 2), [['to overcome this interpolate whit polyinomials of 5rd degree in x and 2nd degree in y direction  '], ['This yield ']], [[' tck = interpolate.bisplrep(X,Y,Z,kx=5,ky=2)\nprint interpolate.bisplev(x,y,tck) \n\n[[  2.3   4.3   6.3]\n [  3.4   5.4   7.4]\n [  5.6   7.6   8.6]\n [  7.8   9.8  10.8]\n [  9.6  11.6  13.6]\n [ 11.2  13.2  15.2]]\n']], ['2 dimensional interpolation problem'], 5], [(1977467, 3), [['This yield '], ['Plotting: \nreference  http://matplotlib.sourceforge.net/examples/mplot3d/surface3d_demo.html']], [[' print interpolate.bisplev(3.5,15,tck)\n\n7.88671875\n']], ['2 dimensional interpolation problem'], 5], [(1977467, 4), [['Plotting: \nreference  http://matplotlib.sourceforge.net/examples/mplot3d/surface3d_demo.html'], ['-10000']], [[' fig = plt.figure()\nax = Axes3D(fig)\nax.plot_surface(X, Y, Z,rstride=1, cstride=1, cmap=cm.jet)\nplt.show()\n']], ['2 dimensional interpolation problem'], 5], [(1977900, 0), [['You should use  HTMLParser  module to  decode html :'], ['To escape HTML,  cgi module is fine :']], [[" >>> import HTMLParser\n>>> h= HTMLParser.HTMLParser()\n>>> h.unescape('alpha &lt; &beta;')\nu'alpha < \\u03b2'\n"]], ["How can I change '>' to '&gt;' and '&gt;' to '>'?"], 2], [(1977900, 1), [['To escape HTML,  cgi module is fine :'], ['-10000']], [[" >>> cgi.escape(u'<a>bá</a>').encode('ascii', 'xmlcharrefreplace')\n'&lt;a&gt;b&#225;&lt;/a&gt;\n"]], ["How can I change '>' to '&gt;' and '&gt;' to '>'?"], 2], [(1982176, 0), [['MacPorts also provides a special port package,  python_select , to manage which python version is pointed to by the command  python  in  /opt/local/bin .'], ['Then, to make your scripts use your current preferred python, the traditional solution is to use the  env  program in the shebang line  of your scripts.']], [[' sudo port install python_select\nsudo python_select\n']], ["What's the best way to set up symbolic links to current installs, e.g python -> python2.6"], 2], [(1982176, 1), [['Then, to make your scripts use your current preferred python, the traditional solution is to use the  env  program in the shebang line  of your scripts.'], ['-10000']], [[' #!/usr/bin/env python\n']], ["What's the best way to set up symbolic links to current installs, e.g python -> python2.6"], 2], [(1983177, 0), [['By default, docstrings are present in the  .pyc  bytecode file, and are loaded from them (comments are not).  If you use  python -OO  (the  -OO  flag stands for "optimize intensely", as opposed to  -O  which stands for "optimize mildly), you get and use  .pyo  files instead of  .pyc  files, and those are optimized by omitting the docstrings (in addition to the optimizations done by  -O , which remove  assert  statements).  E.g., consider a file  foo.py  that has:'], ['you could have the following shell session...:']], [[' """This is the documentation for my module foo."""\n\ndef bar(x):\n  """This is the documentation for my function foo.bar."""\n  return x + 1\n']], ['Are Python docstrings and comments stored in memory when a module is loaded?'], 2], [(1983177, 1), [['you could have the following shell session...:'], ['Note that, since we used  -O  first, the  .pyo  file was 327 bytes -- even after using  -OO , because the  .pyo  file was still around and Python didn\'t rebuild/overwrite it, it just used the existing one. Removing the existing  .pyo  (or, equivalently,  touch foo.py  so that Python knows the  .pyo  is "out of date") means that Python rebuilds it (and, in this case, saves 123 bytes on disk, and a little bit more when the module\'s imported -- but all  .__doc__  entries disappear and are replaced by  None ).']], [[" $ python -c'import foo; print foo.bar(22); print foo.__doc__'\n23\nThis is the documentation for my module foo.\n$ ls -l foo.pyc\n-rw-r--r--  1 aleax  eng  327 Dec 30 16:17 foo.pyc\n$ python -O -c'import foo; print foo.bar(22); print foo.__doc__'\n23\nThis is the documentation for my module foo.\n$ ls -l foo.pyo\n-rw-r--r--  1 aleax  eng  327 Dec 30 16:17 foo.pyo\n$ python -OO -c'import foo; print foo.bar(22); print foo.__doc__'\n23\nThis is the documentation for my module foo.\n$ ls -l foo.pyo\n-rw-r--r--  1 aleax  eng  327 Dec 30 16:17 foo.pyo\n$ rm foo.pyo\n$ python -OO -c'import foo; print foo.bar(22); print foo.__doc__'\n23\nNone\n$ ls -l foo.pyo\n-rw-r--r--  1 aleax  eng  204 Dec 30 16:17 foo.pyo\n"]], ['Are Python docstrings and comments stored in memory when a module is loaded?'], 2], [(1983556, 0), [['Updated : look at the absolute path of one of your script: this changes on every deployment. You  can use  http://shell.appspot.com/  to experiment:'], ['Updated 2 : as suggested by @Koen Bok, the environment variable  CURRENT_VERSION_ID  can be used also (part of the absolute path to script files also).']], [['   import sys\n  sys.path\n']], ['How can I have Google App Engine clear memcache every time a site is deployed?'], 2], [(1983556, 1), [['Updated 2 : as suggested by @Koen Bok, the environment variable  CURRENT_VERSION_ID  can be used also (part of the absolute path to script files also).'], ['-10000']], [['  import os\n os.environ["CURRENT_VERSION_ID"]\n']], ['How can I have Google App Engine clear memcache every time a site is deployed?'], 2], [(1983902, 0), [["It's not the fastest way but I think it's quite easy to understand:"], ['Output:']], [[' def transpose(grid):\n    return zip(*grid)\n\ndef removeBlankRows(grid):\n    return [list(row) for row in grid if any(row)]\n\nprint removeBlankRows(transpose(removeBlankRows(transpose(grid))))\n']], ['Remove row or column from 2D list if all values (in that row or column) are None'], 3], [(1983902, 1), [['Output:'], ["If it's important to only strip None and not other things that evaluate to false, change the removeBlankRows function to:"]], [[" [[{'some': 'thing'}, None, None],\n [None, None, {'something': 'else'}],\n [None, {'another': 'thing'}, None]]\n"]], ['Remove row or column from 2D list if all values (in that row or column) are None'], 3], [(1983902, 2), [["If it's important to only strip None and not other things that evaluate to false, change the removeBlankRows function to:"], ['-10000']], [[' def removeBlankRows(grid):\n    return [list(row) for row in grid if any(x is not None for x in row)]\n']], ['Remove row or column from 2D list if all values (in that row or column) are None'], 3], [(1984104, 0), [['One extreme example: you can write a class without any knowledge of what base classes it might have, and always know whether you are accessing a member or not:'], ['Another, where the methods of a class are dynamically composed:']], [[' class A(some_function()):\n  def f(self):\n    self.member = 42\n    self.method()\n']], ["How to avoid explicit 'self' in Python?"], 2], [(1984104, 1), [['Another, where the methods of a class are dynamically composed:'], ["Remember, both of these examples are extreme and you won't see them every day, nor am I suggesting you should often write code like this, but they do clearly show aspects of self being explicitly required."]], [[' class B(object):\n  pass\n\nprint B()\n# <__main__.B object at 0xb7e4082c>\n\ndef B_init(self):\n  self.answer = 42\ndef B_str(self):\n  return "<The answer is %s.>" % self.answer\n# notice these functions require no knowledge of the actual class\n# how hard are they to read and realize that "members" are used?\n\nB.__init__ = B_init\nB.__str__ = B_str\n\nprint B()\n# <The answer is 42.>\n']], ["How to avoid explicit 'self' in Python?"], 2], [(1984847, 0), [['Example:'], ["and then you can control the job using 'initctl'.  For eg:"]], [[' # Start zeya\n#\n\ndescription     "Start Zeya music server"\n\nstart on startup\n\ntask\nexec python /home/r00t/code-hacking/serve-music/zeya/src/zeya/zeya.py\n--path=/home/r00t/Music\n']], ['Need init.d script for Python application'], 2], [(1984847, 1), [["and then you can control the job using 'initctl'.  For eg:"], ['-10000']], [[' initctl status zeya\ninitctl stop zeya\n']], ['Need init.d script for Python application'], 2], [(1986059, 0), [['The  original source  for that states "This pattern should work in most modern regex implementations" and specifically Perl.  Python\'s regex implementation is modern and  similar to Perl\'s  but is missing the  [:punct:]  character class.  You can easily build that using this:'], ['Edit : Using re.escape() works just as well, since it just sticks a backslash in front of  everything .  That felt crude to me at first, but certainly works fine for this case.']], [[" >>> import string, re\n>>> pat = r'\\b(([\\w-]+://?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^%s\\s]|/)))'\n>>> pat = pat % re.sub(r'([-\\\\\\]])', r'\\\\\\1', string.punctuation)\n"]], ['Gruber’s URL Regular Expression in Python'], 2], [(1986059, 1), [['Edit : Using re.escape() works just as well, since it just sticks a backslash in front of  everything .  That felt crude to me at first, but certainly works fine for this case.'], ['-10000']], [[' >>> pat = pat % re.escape(string.punctuation)\n']], ['Gruber’s URL Regular Expression in Python'], 2], [(1986152, 0), [["I don't know why it's not a built-in, but I have some thoughts."], ['Most importantly,  copysign  is a superset of  sign !  Calling  copysign  with x=1 is the same as a  sign  function.  So you could just use  copysign  and  forget about it .']], [[' copysign(x,y):\nReturn x with the sign of y.\n']], ["Why doesn't Python have a sign function?"], 5], [(1986152, 1), [['Most importantly,  copysign  is a superset of  sign !  Calling  copysign  with x=1 is the same as a  sign  function.  So you could just use  copysign  and  forget about it .'], ['If you get sick of passing two whole arguments, you can implement  sign  this way, and it will still be compatible with the IEEE stuff mentioned by others:']], [[' >>> math.copysign(1, -4)\n-1.0\n>>> math.copysign(1, 3)\n1.0\n']], ["Why doesn't Python have a sign function?"], 5], [(1986152, 2), [['If you get sick of passing two whole arguments, you can implement  sign  this way, and it will still be compatible with the IEEE stuff mentioned by others:'], ['So, instead of:']], [[" >>> sign = functools.partial(math.copysign, 1) # either of these\n>>> sign = lambda x: math.copysign(1, x) # two will work\n>>> sign(-4)\n-1.0\n>>> sign(3)\n1.0\n>>> sign(0)\n1.0\n>>> sign(-0.0)\n-1.0\n>>> sign(float('nan'))\n-1.0\n"]], ["Why doesn't Python have a sign function?"], 5], [(1986152, 3), [['So, instead of:'], ['You can just do:']], [[' s = sign(a)\nb = b * s\n']], ["Why doesn't Python have a sign function?"], 5], [(1986152, 4), [['You can just do:'], ["And yes, I'm surprised you've been using Python for 7 years and think  cmp  could be so easily removed and replaced by  sign !  Have you never implemented a class with a  __cmp__  method?  Have you never called  cmp  and specified a custom comparator function?"]], [[' b = copysign(b, a)\n']], ["Why doesn't Python have a sign function?"], 5], [(1986169, 0), [['Read  XEP-163 .  Essentially, you need to implement the send-side of entity caps ( XEP-115 ), so that you send your presence like this:'], ['When you get get a disco#info request like this:']], [[" <presence from='romeo@example.net/home'>\n  <c xmlns='http://jabber.org/protocol/caps' \n     hash='sha-1'\n     node='http://example.com/MYBOT'\n     ver='/FpawanrJ31ymsv4ApCMGcyJmUk='/>\n</presence>\n"]], ["How to query a contact for its PubSub using Python's xmpp?"], 3], [(1986169, 1), [['When you get get a disco#info request like this:'], ['You respond with the list of features you implement:']], [[" <iq to='romeo@example.net/home'\n    id='disco1'\n    from='example.net' \n    type='get'>\n  <query xmlns='http://jabber.org/protocol/disco#info'\n         node='http://example.com/MYBOT#/FpawanrJ31ymsv4ApCMGcyJmUk='/>\n</iq>\n"]], ["How to query a contact for its PubSub using Python's xmpp?"], 3], [(1986169, 2), [['You respond with the list of features you implement:'], ['Add a +notify to each node name that you want to implicitly subscribe to, and add the resulting string as a feature, as above.  Ensuring that the SHA-1 hash in your outbound presence is correct is the only hard part.  ']], [[" <iq from='romeo@example.net/home'\n    id='disco1'\n    to='example.net' \n    type='result'>\n  <query xmlns='http://jabber.org/protocol/disco#info'\n         node='http://example.com/MYBOT#/FpawanrJ31ymsv4ApCMGcyJmUk='>\n    <identity category='client' type='bot' name='MYBOT'/>\n    <feature var='http://jabber.org/protocol/mood+notify'/>\n    <feature var='http://jabber.org/protocol/tune+notify'/>\n  </query>\n</iq>\n"]], ["How to query a contact for its PubSub using Python's xmpp?"], 3], [(1988127, 0), [['Use triple quotes """'], ['Another interesting method is provided in the docs of  timeit :']], [[' setup_code = """\n  from PerformanceTests.Vectors import NaiveVector\n  left = NaiveVector([1,0,0])\n  right = NaiveVector([0,1,0])\n"""\n']], ['Managing Setup code with TimeIt'], 2], [(1988127, 1), [['Another interesting method is provided in the docs of  timeit :'], ["Though this isn't suitable for all needs."]], [[' def test():\n    "Stupid test function"\n    L = []\n    for i in range(100):\n        L.append(i)\n\nif __name__==\'__main__\':\n    from timeit import Timer\n    t = Timer("test()", "from __main__ import test")\n    print t.timeit()\n']], ['Managing Setup code with TimeIt'], 2], [(1988150, 0), [['For page1, the document needs to be displayed by a widget. Add the following to that function'], ['For page2, painting on a widget must be in response to a paint event which requires creating a subclass or event filter. A simpler way to draw some text is using a QLabel. Change the function to the following']], [['     textEdit = QtGui.QTextEdit(self.page1)\n    textEdit.setDocument(document)\n    layout = QtGui.QVBoxLayout(self.page1)\n    layout.addWidget(textEdit)\n']], ['Qt Python - report in toolbox: QTextDocument and QPainter'], 2], [(1988150, 1), [['For page2, painting on a widget must be in response to a paint event which requires creating a subclass or event filter. A simpler way to draw some text is using a QLabel. Change the function to the following'], ['-10000']], [[' def toolbox_page2(self):\n    self.page2 = QtGui.QWidget()\n    self.page2.setGeometry(QtCore.QRect(0, 0, 471, 145))\n\n    label = QtGui.QLabel(self.page2)\n    label.setText("Title - Build a Report : page 2")\n    label.setStyleSheet("font: 10pt \'Helvetica\'; color: rgb(168, 34, 3)")\n    label.setGeometry(QtCore.QRect(QtCore.QPoint(50, 50), label.sizeHint()))\n']], ['Qt Python - report in toolbox: QTextDocument and QPainter'], 2], [(1988599, 0), [['There are a few ways to do this:'], ['or']], [[' mydatetime = datetime.datetime(d.year, d.month, d.day)\n']], ['How do I get datetime from date object python?'], 3], [(1988599, 1), [['or'], ['or ']], [[' mydatetime = datetime.combine(d, datetime.time())\n']], ['How do I get datetime from date object python?'], 3], [(1988599, 2), [['or '], ['I think the first is the most commonly used.']], [[' mydatetime = datetime.datetime.fromordinal(d.toordinal())\n']], ['How do I get datetime from date object python?'], 3], [(1991840, 0), [["Here's a pyparsing version - I hope the comments are sufficiently explanatory."], ['Gives']], [[' src = """<p><i>p</i><sub>0</sub> = (<i>m</i><sup>3</sup>+(2<i>l</i><sub>2</sub>+<i>l</i><sub>1</sub>) """ \\\n      """<i>m</i><sup>2</sup>+(<i>l</i><sub>2</sub><sup>2</sup>+2<i>l</i><sub>1</sub> <i>l</i><sub>2</sub>+""" \\\n      """<i>l</i><sub>1</sub><sup>2</sup>) <i>m</i>) /(<i>m</i><sup>3</sup>+(3<i>l</i><sub>2</sub>+""" \\\n      """2<i>l</i><sub>1</sub>) ) }.</p>"""\n\nfrom pyparsing import makeHTMLTags, anyOpenTag, anyCloseTag, Suppress, replaceWith\n\n# set up tag matching for <sub> and <sup> tags\nSUB,endSUB = makeHTMLTags("sub")\nSUP,endSUP = makeHTMLTags("sup")\n\n# all other tags will be suppressed from the output\nANY,endANY = map(Suppress,(anyOpenTag,anyCloseTag))\n\nSUB.setParseAction(replaceWith("_{"))\nSUP.setParseAction(replaceWith("^{"))\nendSUB.setParseAction(replaceWith("}"))\nendSUP.setParseAction(replaceWith("}"))\n\ntransformer = (SUB | endSUB | SUP | endSUP | ANY | endANY)\n\n# now use the transformer to apply these transforms to the input string\nprint transformer.transformString(src)\n']], ['Parse xml file while a tag is missing'], 2], [(1991840, 1), [['Gives'], ['-10000']], [[' p_{0} = (m^{3}+(2l_{2}+l_{1}) m^{2}+(l_{2}^{2}+2l_{1} l_{2}+l_{1}^{2}) m) /(m^{3}+(3l_{2}+2l_{1}) ) }.\n']], ['Parse xml file while a tag is missing'], 2], [(1993689, 0), [["defaultdict  is not  dict  (it's a subclass, and may do too much of the work for you to help you learn via this exercise), so here's a simple way to do it with plain  dict :"], ['this simple approach works particularly well here because you need the  if i in seqDic  test anyway for the purpose of building  dv  as well as  seqDic .  Otherwise, simpler would be:']], [[' dv = list()\n# arbitrary sequence of numbers\nseq = [2,4,5,2,4,6,3,8,9,3,7,2,47,2]\n\n# dictionary counting number of occurances\nseqDic = { }\n\nfor i in seq:\n  if i in seqDic:\n    seqDic[i] += 1\n  else:\n    dv.append(i)\n    seqDic[i] = 1\n']], ['Learning Python and using dictionaries'], 6], [(1993689, 1), [['this simple approach works particularly well here because you need the  if i in seqDic  test anyway for the purpose of building  dv  as well as  seqDic .  Otherwise, simpler would be:'], ["using the handy method  get  of  dict , which returns the second argument if the first is not a key in the dictionary.  If you like this idea, here's a solution that  also  builds  dv :"]], [[' for i in seq:\n  seqDic[i] = 1 + seqDic.get(i, 0)\n']], ['Learning Python and using dictionaries'], 6], [(1993689, 2), [["using the handy method  get  of  dict , which returns the second argument if the first is not a key in the dictionary.  If you like this idea, here's a solution that  also  builds  dv :"], ["Edit : If you don't case about the order of items in  dv  (rather than wanting  dv  to be in the same order as the first occurrence of item in  seq ), then just using (after the simple version of the loop)"]], [[' for i in seq:\n  seqDic[i] = 1 + seqDic.get(i, 0)\n  if seqDic[i] == 1: dv.append(i)\n']], ['Learning Python and using dictionaries'], 6], [(1993689, 3), [["Edit : If you don't case about the order of items in  dv  (rather than wanting  dv  to be in the same order as the first occurrence of item in  seq ), then just using (after the simple version of the loop)"], ['also works (in Python 2, where  .keys  returns a list), and so does']], [[' dv = seqDic.keys()\n']], ['Learning Python and using dictionaries'], 6], [(1993689, 4), [['also works (in Python 2, where  .keys  returns a list), and so does'], ["which is fine in both Python 2  and  Python 3.  Under the same hypothesis (that you don't care about the order of items in  dv ) there are also other good solutions, such as"]], [[' dv = list(seqDic)\n']], ['Learning Python and using dictionaries'], 6], [(1993689, 5), [["which is fine in both Python 2  and  Python 3.  Under the same hypothesis (that you don't care about the order of items in  dv ) there are also other good solutions, such as"], ['here, we first use the  fromkeys  class method of dictionaries to build a new dict which already has  0  as the value corresponding to each key, so we can then just increment each entry without such precautions as  .get  or membership checks.']], [[' seqDic = dict.fromkeys(seq, 0)\nfor i in seq: seqDic[i] += 1\ndv = list(seqDic)\n']], ['Learning Python and using dictionaries'], 6], [(1993840, 0), [["I don't think a standard function exists that does exactly that, but it's very easy to construct one using the dict builtin and a comprehension:"], ['Output:']], [[' def somefunction(keyFunction, values):\n    return dict((keyFunction(v), v) for v in values)\n\nprint somefunction(lambda a: a[0], ["hello", "world"])\n']], ['Map list onto dictionary'], 2], [(1993840, 1), [['Output:'], ["But coming up with a good name for this function is more difficult than implementing it. I'll leave that as an exercise for the reader."]], [[" {'h': 'hello', 'w': 'world'}\n"]], ['Map list onto dictionary'], 2], [(1993896, 0), [['You might find it easier to solve this using  itertools.groupby .'], ['Another alternative is to use a  regular expression  to match the separators:']], [[" def get_text_blocks(filename):\n    import itertools\n    with open(filename,'r') as f:\n        groups = itertools.groupby(f, lambda line:line.startswith('-- -'))\n        return [''.join(lines) for is_separator, lines in groups if not is_separator]\n"]], ['How to check for EOF in Python?'], 2], [(1993896, 1), [['Another alternative is to use a  regular expression  to match the separators:'], ['-10000']], [[" def get_text_blocks(filename):\n    import re\n    seperator = re.compile('^-- -.*', re.M)\n    with open(filename,'r') as f:\n        return re.split(seperator, f.read())\n"]], ['How to check for EOF in Python?'], 2], [(1995373, 0), [['Via  os.listdir  and  os.remove :'], ['Or via  glob.glob :']], [[' import os\n\nfilelist = [ f for f in os.listdir(mydir) if f.endswith(".bak") ]\nfor f in filelist:\n    os.remove(os.path.join(mydir, f))\n']], ['Deleting all files in a directory with Python'], 2], [(1995373, 1), [['Or via  glob.glob :'], ['Be sure to be in the correct directory, eventually using  os.chdir .']], [[' import glob, os, os.path\n\nfilelist = glob.glob(os.path.join(mydir, "*.bak"))\nfor f in filelist:\n    os.remove(f)\n']], ['Deleting all files in a directory with Python'], 2], [(1995615, 0), [['-10000'], ['If you need the answer to that (along with lots of other useful information), see  the aforementioned section of the docs . Also, if you keep your  Decimal s with two digits of precision beyond the decimal point (meaning as much precision as is necessary to keep all digits to the left of the decimal point and two to the right of it and no more...), then converting them to strings with  str  will work fine:']], [[" >>> TWOPLACES = Decimal(10) ** -2       # same as Decimal('0.01')\n>>> # Round to two places\n>>> Decimal('3.214').quantize(TWOPLACES)\nDecimal('3.21')\n>>> # Validate that a number does not exceed two places\n>>> Decimal('3.21').quantize(TWOPLACES, context=Context(traps=[Inexact]))\nDecimal('3.21')\n>>> Decimal('3.214').quantize(TWOPLACES, context=Context(traps=[Inexact]))\nTraceback (most recent call last):\n   ...\nInexact: None\n"]], ['How can I format a decimal to always show 2 decimal places?'], 2], [(1995615, 1), [['If you need the answer to that (along with lots of other useful information), see  the aforementioned section of the docs . Also, if you keep your  Decimal s with two digits of precision beyond the decimal point (meaning as much precision as is necessary to keep all digits to the left of the decimal point and two to the right of it and no more...), then converting them to strings with  str  will work fine:'], ['-10000']], [[" str(Decimal('10'))\n# -> '10'\nstr(Decimal('10.00'))\n# -> '10.00'\nstr(Decimal('10.000'))\n# -> '10.000'\n"]], ['How can I format a decimal to always show 2 decimal places?'], 2], [(1997678, 0), [["This is the PIL's grabscreen source, Its does not accept any parameters, and Its grab the whole screen and convert it to bitmap."], ['And Python have ctypes, So here is my approach using ctypes']], [[' PyImaging_GrabScreenWin32(PyObject* self, PyObject* args)\n{\n    int width, height;\n    HBITMAP bitmap;\n    BITMAPCOREHEADER core;\n    HDC screen, screen_copy;\n    PyObject* buffer;\n\n    /* step 1: create a memory DC large enough to hold the\n       entire screen */\n\n    screen = CreateDC(";DISPLAY", NULL, NULL, NULL); \n    screen_copy = CreateCompatibleDC(screen); \n\n    width = GetDeviceCaps(screen, HORZRES);\n    height = GetDeviceCaps(screen, VERTRES);\n\n    bitmap = CreateCompatibleBitmap(screen, width, height);\n    if (!bitmap)\n        goto error;\n\n    if (!SelectObject(screen_copy, bitmap))\n        goto error;\n\n    /* step 2: copy bits into memory DC bitmap */\n\n    if (!BitBlt(screen_copy, 0, 0, width, height, screen, 0, 0, SRCCOPY))\n        goto error;\n\n    /* step 3: extract bits from bitmap */\n\n    buffer = PyString_FromStringAndSize(NULL, height * ((width*3 + 3) & -4));\n    if (!buffer)\n        return NULL;\n\n    core.bcSize = sizeof(core);\n    core.bcWidth = width;\n    core.bcHeight = height;\n    core.bcPlanes = 1;\n    core.bcBitCount = 24;\n    if (!GetDIBits(screen_copy, bitmap, 0, height, PyString_AS_STRING(buffer),\n                   (BITMAPINFO*) &core, DIB_RGB_COLORS))\n        goto error;\n\n    DeleteObject(bitmap);\n    DeleteDC(screen_copy);\n    DeleteDC(screen);\n\n    return Py_BuildValue("(ii)N", width, height, buffer);\n\nerror:\n    PyErr_SetString(PyExc_IOError, "screen grab failed");\n\n    DeleteDC(screen_copy);\n    DeleteDC(screen);\n\n    return NULL;\n}\n']], ['Faster method of reading screen pixel in Python than PIL?'], 3], [(1997678, 1), [['And Python have ctypes, So here is my approach using ctypes'], ['You could write a wrapper for function GetPixel like this']], [[' >>> from ctypes import *\n>>> user= windll.LoadLibrary("c:\\\\winnt\\\\system32\\\\user32.dll") #I am in windows 2000, may be yours will be windows\n>>> h = user.GetDC(0)\n>>> gdi= windll.LoadLibrary("c:\\\\winnt\\\\system32\\\\gdi32.dll")\n>>> gdi.GetPixel(h,1023,767)\n16777215 #I believe its white color of RGB or BGR value, #FFFFFF (according to msdn it should be RGB)\n>>> gdi.GetPixel(h,1024,767)\n-1 #because my screen is only 1024x768\n']], ['Faster method of reading screen pixel in Python than PIL?'], 3], [(1997678, 2), [['You could write a wrapper for function GetPixel like this'], ['Then you can use like  getpixel(0,0) ,  getpixel(100,0) , etc...']], [[' from ctypes import windll\ndc= windll.user32.GetDC(0)\n\ndef getpixel(x,y):\n    return windll.gdi32.GetPixel(dc,x,y)\n']], ['Faster method of reading screen pixel in Python than PIL?'], 3], [(1998186, 0), [['You can attach state to your classes using win32com, however, by creating classes dynamically using  new.classobj :'], ['Output:']], [[' from win32com.client import Dispatch, WithEvents\nfrom new import classobj\n\nclass MyEventHandler(object):\n    def OnVisible(self, visible):\n        print "got event from object %d" % self.obj_index\n\nlistOfObjects = []\nfor i in range(3):\n    handler = classobj(\'Handler_%s\' % i,(MyEventHandler,),{})\n    handler.obj_index = i\n    ie = Dispatch("InternetExplorer.Application")\n    listOfObjects.append(ie)\n    WithEvents(ie, handler)\n\nlistOfObjects[0].Visible = 1\nlistOfObjects[2].Visible = 1\n']], ["How to mimic vb's control array in python for win32com?"], 2], [(1998186, 1), [['Output:'], ['You might want to look into the  comtypes  module (see  event handling ) if you want to do this in a saner way.']], [[' got event from object 0\ngot event from object 2\n']], ["How to mimic vb's control array in python for win32com?"], 2], [(1999300, 0), [['master.kid:'], ['mypage.kid:']], [[' <html>\n<head py:match="item.tag == \'head\'">\n  <title>My Site</title>\n</head>\n<body py:match="item.tag == \'body\'">\n  <h1>My Site</h1>\n  <div py:replace="item[:]"></div>\n  <p id="footer">Copyright Blixt 2010</p>\n  <div py:if="defined(\'body_end\')" py:replace="body_end()"></div>\n</body>\n</html>\n']], ['How do I add content before </body> in extended page? (KID templates)'], 2], [(1999300, 1), [['mypage.kid:'], ['The master.kid page checks for a variable defined as  body_end , and if there is such a variable, it will call it, replacing the contents of the element before  </body>  (otherwise it will output nothing).']], [[' <html>\n<head></head>\n<body>\n  <p>Hello World!</p>\n  <div py:def="body_end()" py:strip="True">\n    <script type="text/javascript">alert(\'Hello World!\');</script>\n  </div>\n</body>\n</html>\n']], ['How do I add content before </body> in extended page? (KID templates)'], 2], [(2001703, 0), [['-10000'], ['Try writing  self  more often, e.g.:']], [[' checkedItems = [i for i in range(citList.GetCount()) if citList.IsChecked(i)]\n']], ['Cannot understand how to get data from checklistbox in wxpython'], 3], [(2001703, 1), [['Try writing  self  more often, e.g.:'], ['and change  Clicked  to:']], [[' self.citList = wx.CheckListBox(self, -1, (60, 50), wx.DefaultSize, allLoc)\n# some code\nself.panel = citPanel(self, -1)\n']], ['Cannot understand how to get data from checklistbox in wxpython'], 3], [(2001703, 2), [['and change  Clicked  to:'], ['Hope this helps.']], [[' def Clicked(self, event):\n    checkedItems = [i for i in range(self.panel.citList.GetCount()) if self.panel.citList.IsChecked(i)]\n    print checkedItems\n    event.Skip()\n']], ['Cannot understand how to get data from checklistbox in wxpython'], 3], [(2002415, 0), [['That is, you have the following?'], ['To add another row, use the append method of a list.']], [[' L = [[1,2,3],\n     [4,5,6]]\n']], ['How can I add an additional row and column to an array?'], 5], [(2002415, 1), [['To add another row, use the append method of a list.'], ['giving']], [[' L.append([7,8,9])\n']], ['How can I add an additional row and column to an array?'], 5], [(2002415, 2), [['giving'], ['To add another column, you would have to loop over each row. An easy way to do this is with a list comprehension.']], [[' L = [[1,2,3],\n     [4,5,6],\n     [7,8,9]]\n']], ['How can I add an additional row and column to an array?'], 5], [(2002415, 3), [['To add another column, you would have to loop over each row. An easy way to do this is with a list comprehension.'], ['giving']], [[' L = [x + [0] for x in L]\n']], ['How can I add an additional row and column to an array?'], 5], [(2002415, 4), [['giving'], ['-10000']], [[' L = [[1,2,3,0],\n     [4,5,6,0]]\n']], ['How can I add an additional row and column to an array?'], 5], [(2003841, 0), [['Example code:'], ['Using the generator provided in the previous answer:']], [[' h[1] >>> import datetime\nh[1] >>> Jan1st = datetime.date(2010,1,1)\nh[1] >>> Year,WeekNum,DOW = Jan1st.isocalendar() # DOW = day of week\nh[1] >>> print Year,WeekNum,DOW\n2009 53 5\n']], ['How can I get the current week using Python?'], 2], [(2003841, 1), [['Using the generator provided in the previous answer:'], ['Dict contains the dictionary you request.']], [[' from datetime import date, timedelta\n\n\ndef allsundays(year):\n    """This code was provided in the previous answer! It\'s not mine!"""\n    d = date(year, 1, 1)                    # January 1st                                                          \n    d += timedelta(days = 6 - d.weekday())  # First Sunday                                                         \n    while d.year == year:\n        yield d\n        d += timedelta(days = 7)\n\nDict = {}\nfor wn,d in enumerate(allsundays(2010)):\n    # This is my only contribution!\n    Dict[wn+1] = [(d + timedelta(days=k)).isoformat() for k in range(0,7) ]\n\nprint Dict\n']], ['How can I get the current week using Python?'], 2], [(2004364, 0), [['After you do'], ['why not do:']], [[' bbins=np.bincount(b)\n']], ['Increment Numpy array with repeated indices'], 2], [(2004364, 1), [['why not do:'], ['(Edited for further simplification.)']], [[' a[:len(bbins)] += bbins\n']], ['Increment Numpy array with repeated indices'], 2], [(2004476, 0), [["The filename of the file that is being uploaded can be determined by looking at the  filename  property of the variable that holds the file. For example, let's say that your form has a field named  content :"], ['Inside your Handler, you could find the name of the file with:']], [[' <input type="file" name="content" />\n']], ['Get original filename google app engine'], 2], [(2004476, 1), [['Inside your Handler, you could find the name of the file with:'], ['-10000']], [[' filename = self.request.POST["content"].filename\n']], ['Get original filename google app engine'], 2], [(2005234, 0), [['asynchronousHandler.py:'], ['constants.py:']], [[' import win32com.client\nfrom pythoncom import PumpWaitingMessages\nfrom time import time, strftime\nimport constants\n\nclass EventHandler:\n    def OnProcessEvent(self, result):\n        event = win32com.client.gencache.EnsureDispatch(result) \n        if event.EventType == constants.SUBSCRIPTION_DATA:\n            self.getData(event)\n        elif event.EventType == constants.SUBSCRIPTION_STATUS:\n            self.getStatus(event)\n        else:\n            self.getMisc(event)\n    def getData(self, event):\n        iterator = event.CreateMessageIterator()\n        while iterator.Next():\n            message = iterator.Message  \n            dataString = \'\'\n            for fieldIndex, field in enumerate(constants.fields):           \n                if message.AsElement.HasElement(field):\n                    element = message.GetElement(field)\n                    if element.IsNull:\n                        theValue = \'\'\n                    else:\n                        theValue = \', Value: \' + str(element.Value) \n                    dataString = dataString + \', (Type: \' + element.Name + theValue + \')\'\n            print strftime(\'%m/%d/%y %H:%M:%S\') + \', MessageType: \' + message.MessageTypeAsString + \', CorrelationId: \' + str(message.CorrelationId) + dataString\n    def getMisc(self, event):\n        iterator = event.CreateMessageIterator()\n        while iterator.Next():\n            message = iterator.Message\n            print strftime(\'%m/%d/%y %H:%M:%S\') + \', MessageType: \' + message.MessageTypeAsString\n    def getStatus(self, event):\n        iterator = event.CreateMessageIterator()\n        while iterator.Next():\n            message = iterator.Message\n            if message.AsElement.HasElement(\'reason\'):\n                element = message.AsElement.GetElement(\'reason\')\n                print strftime(\'%m/%d/%y %H:%M:%S\') + \', MessageType: \' + message.MessageTypeAsString + \', CorrelationId: \' + str(message.CorrelationId) + \', Category: \' + element.GetElement(\'category\').Value + \', Description: \' + element.GetElement(\'description\').Value \n            if message.AsElement.HasElement(\'exceptions\'):\n                element = message.AsElement.GetElement(\'exceptions\')\n                exceptionString = \'\'\n                for n in range(element.NumValues):\n                    exceptionInfo = element.GetValue(n)\n                    fieldId = exceptionInfo.GetElement(\'fieldId\')\n                    reason = exceptionInfo.GetElement(\'reason\')\n                    exceptionString = exceptionString + \', (Field: \' + fieldId.Value + \', Category: \' + reason.GetElement(\'category\').Value + \', Description: \' + reason.GetElement(\'description\').Value + \') \' \n                print strftime(\'%m/%d/%y %H:%M:%S\') + \', MessageType: \' + message.MessageTypeAsString + \', CorrelationId: \' + str(message.CorrelationId) + exceptionString\n\nclass bloombergSource:\n    def __init__(self):\n        session = win32com.client.DispatchWithEvents(\'blpapicom.Session\' , EventHandler)\n        session.Start()\n        started = session.OpenService(\'//blp/mktdata\')\n        subscriptions = session.CreateSubscriptionList()\n        for tickerIndex, ticker in enumerate(constants.tickers):\n            if len(constants.interval) > 0:\n                subscriptions.AddEx(ticker, constants.fields, constants.interval, session.CreateCorrelationId(tickerIndex))\n            else:\n                subscriptions.Add(ticker, constants.fields, session.CreateCorrelationId(tickerIndex))   \n        session.Subscribe(subscriptions)\n        endTime = time() + 2\n        while True:\n            PumpWaitingMessages()\n            if endTime < time():                \n                break               \n\nif __name__ == "__main__":\n    aBloombergSource = bloombergSource()\n']], ["Asynchronous data through Bloomberg's new data API (COM v3) with Python?"], 3], [(2005234, 1), [['constants.py:'], ['For historical data I used this simple script:']], [[" ADMIN = 1\nAUTHORIZATION_STATUS = 11\nBLPSERVICE_STATUS = 9\nPARTIAL_RESPONSE = 6\nPUBLISHING_DATA = 13\nREQUEST_STATUS = 4\nRESOLUTION_STATUS = 12\nRESPONSE = 5\nSESSION_STATUS = 2\nSUBSCRIPTION_DATA = 8\nSUBSCRIPTION_STATUS = 3\nTIMEOUT = 10\nTOKEN_STATUS = 15\nTOPIC_STATUS = 14\nUNKNOWN = -1\nfields = ['BID']\ntickers = ['AUD Curncy']\ninterval = '' #'interval=5.0'\n"]], ["Asynchronous data through Bloomberg's new data API (COM v3) with Python?"], 3], [(2005234, 2), [['For historical data I used this simple script:'], ['-10000']], [[" import win32com.client\n\nsession = win32com.client.Dispatch('blpapicom.Session')\nsession.QueueEvents = True\nsession.Start()\nstarted = session.OpenService('//blp/refdata')\ndataService = session.GetService('//blp/refdata')\nrequest = dataService.CreateRequest('HistoricalDataRequest')\nrequest.GetElement('securities').AppendValue('5 HK Equity')\nrequest.GetElement('fields').AppendValue('PX_LAST')\nrequest.Set('periodicitySelection', 'DAILY')\nrequest.Set('startDate', '20090119')\nrequest.Set('endDate', '20090130')\ncid = session.SendRequest(request)\nADMIN = 1\nAUTHORIZATION_STATUS = 11\nBLPSERVICE_STATUS = 9\nPARTIAL_RESPONSE = 6\nPUBLISHING_DATA = 13\nREQUEST_STATUS = 4\nRESOLUTION_STATUS = 12\nRESPONSE = 5\nSESSION_STATUS = 2\nSUBSCRIPTION_DATA = 8\nSUBSCRIPTION_STATUS = 3\nTIMEOUT = 10\nTOKEN_STATUS = 15\nTOPIC_STATUS = 14\nUNKNOWN = -1\nstayHere = True\nwhile stayHere:\n    event = session.NextEvent();\n    if event.EventType == PARTIAL_RESPONSE or event.EventType == RESPONSE:\n        iterator = event.CreateMessageIterator()\n        iterator.Next()\n        message = iterator.Message\n        securityData = message.GetElement('securityData')\n        securityName = securityData.GetElement('security')\n        fieldData = securityData.GetElement('fieldData')\n        returnList = [[0 for col in range(fieldData.GetValue(row).NumValues+1)] for row in range(fieldData.NumValues)]\n        for row in range(fieldData.NumValues):\n            rowField = fieldData.GetValue(row)\n            for col in range(rowField.NumValues+1):\n                colField = rowField.GetElement(col)\n                returnList[row][col] = colField.Value\n        stayHere = False\n        break\nelement = None\niterator = None\nmessage = None\nevent = None\nsession = None\nprint returnList\n"]], ["Asynchronous data through Bloomberg's new data API (COM v3) with Python?"], 3], [(2005345, 0), [['How about'], ['Or']], [[' msg = MIMEText(\n"The nightly build status was a SUCCESS\\n\\n"\n"Build File: http://www.python.org\\n\\n"\n"Build Results File: http://10.51.54.57/sandboxes/"\n, project\n, "\\n"\n)\n']], ['String manipulation in Python'], 4], [(2005345, 1), [['Or'], ['Or']], [[' msg = MIMEText("""The nightly build status was a SUCCESS\n\nBuild File: http://www.python.org\n\nBuild Results File: http://10.51.54.57/sandboxes/""", project, "\\n")\n']], ['String manipulation in Python'], 4], [(2005345, 2), [['Or'], ['UPDATE : because OP added another question']], [[' msg = MIMEText("The nightly build status was a SUCCESS\\n\\n"\n"Build File: http://www.python.org\\n\\n"\n"Build Results File: http://10.51.54.57/sandboxes/"\n, project, "\\n")\n']], ['String manipulation in Python'], 4], [(2005345, 3), [['UPDATE : because OP added another question'], ['-10000']], [[' msg=MIMEText("""The nightly build status was a SUCCESS\\n\\n\n    Build File: %s\n    \\n\\n \n    Build Results File: %s\n    \\n\\n\n    Sandbox Folder: %s \n    \\n\\n\n    Antibrick File: """ % (build_file,build_file,sandbox),\n    antibrick, \n    "\\n\\n"\n)\n']], ['String manipulation in Python'], 4], [(2005759, 0), [['The pseudo-code below is equivalent to yours, but with the above corrections applied:'], ["Visual module updates the screen as soon as the object is changed. The animation is done by that alteration, in realtime, there's no need for a  show()  or  start_animation()  - it happens as it goes. An example you can run on python command line:"]], [[' from visual import *\nstars = []\ngalaxies = []    \nfor i in  range(10):\n   stars.append(sphere(...))\nfor j in range(20):\n   galaxies.append(sphere(...))\nfor star, galaxy, starpos, galaxypos in zip(stars, galaxies, \n                                            position, G_position):\n   star.pos = starpos\n   galaxy.pos = galaxypos\n']], ['Visual module in python assign objects'], 3], [(2005759, 1), [["Visual module updates the screen as soon as the object is changed. The animation is done by that alteration, in realtime, there's no need for a  show()  or  start_animation()  - it happens as it goes. An example you can run on python command line:"], ['That line creates a sphere, and a window, and shows the sphere in the window already!!!']], [[' >>> from visual import sphere\n>>> s = sphere()\n']], ['Visual module in python assign objects'], 3], [(2005759, 2), [['That line creates a sphere, and a window, and shows the sphere in the window already!!!'], ['That line changes the sphere position on  x  axis to  -100 . The change happens immediatelly on the screen. Just after this line runs, you see the sphere appear to the left of the window.']], [[' >>> s.x = -100\n']], ['Visual module in python assign objects'], 3], [(2005956, 0), [['See it as "dynamically creating a function".'], ['This is basic behavior in python, it does the same with multiple assignments.']], [[' def maker(n):\n  def action(x):\n    return x ** n\n  return action\n\nf = maker(2)\n--> def action(x):\n-->   return x ** 2\n']], ['How do nested functions work in Python?'], 3], [(2005956, 1), [['This is basic behavior in python, it does the same with multiple assignments.'], ['Python reads this as']], [[' a = 1\nb = 2\na, b = b, a\n']], ['How do nested functions work in Python?'], 3], [(2005956, 2), [['Python reads this as'], ['It basically inserts the values before doing anything with them.']], [[' a, b = 2, 1\n']], ['How do nested functions work in Python?'], 3], [(2006648, 0), [['Try'], ['Try']], [[' s.sendmail(me, you.split(","), msg.as_string())\n']], ['Email multiple contacts in Python'], 2], [(2006648, 1), [['Try'], ['-10000']], [[' msg[\'To\'] = ",".join(you)\n\n...\n\ns.sendmail(me, you, msg.as_string())\n']], ['Email multiple contacts in Python'], 2], [(2008496, 0), [['Since the curried function was, in this case, produced by code like:'], ['another approach is to examine  f.func_closure , like this:']], [[' def curry(_curried_func,  *args,  **kwargs):\n    def _curried(*moreargs, **morekwargs):\n        return _curried_func(*(args+moreargs), **dict(kwargs, **morekwargs))\n    return _curried\n']], ['How to debug dynamically defined functions in Python?'], 3], [(2008496, 1), [['another approach is to examine  f.func_closure , like this:'], ["The function closes on three variables: a tuple, a dict, and a function. Obviously the function is the one we're interested in (but fyi these three cells correspond to the variables  args ,  kwargs , and  _curried_func  that are defined in the enclosing function  curry  but used by the closure  _curried )."]], [[' >>> f\n<function _curried at 0xb77d64fc>\n>>> f.func_closure\n(<cell at 0xb77eb44c: tuple object at 0xb77dfa0c>, <cell at 0xb77eb5e4: dict object at 0xb77d93e4>, <cell at 0xb77eb5cc: function object at 0xb77d1d84>)\n']], ['How to debug dynamically defined functions in Python?'], 3], [(2008496, 2), [["The function closes on three variables: a tuple, a dict, and a function. Obviously the function is the one we're interested in (but fyi these three cells correspond to the variables  args ,  kwargs , and  _curried_func  that are defined in the enclosing function  curry  but used by the closure  _curried )."], ['-10000']], [[" >>> f.func_closure[2].cell_contents\n<function say at 0xb77d1d84>\n>>> import inspect\n>>> inspect.getsource(_)\n'def say(x):\\n    print x\\n'\n"]], ['How to debug dynamically defined functions in Python?'], 3], [(2010454, 0), [['The single-joined-row way, with a  group_by  added in for all user columns although MySQL will let you group on just the "id" column if you choose:'], ['Or if you just want the users in the result:']], [['     sess.query(User, func.sum(Score.amount).label(\'score_increase\')).\\\n               join(User.scores).\\\n               filter(Score.created_at > someday).\\\n               group_by(User).\\\n               order_by("score increase desc")\n']], ['SQLAlchemy filter query by related object'], 3], [(2010454, 1), [['Or if you just want the users in the result:'], ['The above two have an inefficiency in that you\'re grouping on all columns of "user" (or you\'re using MySQL\'s "group on only a few columns" thing, which is MySQL only).  To minimize that, the subquery approach:']], [[' sess.query(User).\\\n           join(User.scores).\\\n           filter(Score.created_at > someday).\\\n           group_by(User).\\\n           order_by(func.sum(Score.amount))\n']], ['SQLAlchemy filter query by related object'], 3], [(2010454, 2), [['The above two have an inefficiency in that you\'re grouping on all columns of "user" (or you\'re using MySQL\'s "group on only a few columns" thing, which is MySQL only).  To minimize that, the subquery approach:'], ['An example of the identical scenario is in the ORM tutorial at:   http://docs.sqlalchemy.org/en/latest/orm/tutorial.html#selecting-entities-from-subqueries']], [[" subq = sess.query(Score.user_id, func.sum(Score.amount).label('score_increase')).\\\n                  filter(Score.created_at > someday).\\\n                  group_by(Score.user_id).subquery()\nsess.query(User).join((subq, subq.c.user_id==User.user_id)).order_by(subq.c.score_increase)\n"]], ['SQLAlchemy filter query by related object'], 3], [(2011583, 0), [['collections.deque is the only sequence type in python that naturally supports being bounded (and only in Python 2.6 and up.)  If using python 2.6 or newer:'], ["If using python 2.5 or less, you can't use the maxlen argument, and will need to do one more operation to chop off the front of the deque:"]], [[' # Setup\nfrom collections import deque\nfrom random import choice\nused = deque(maxlen=7)\n\n# Now your sampling bit\nitem = random.choice([x for x in list1 if x not in used])\nused.append(item)\n']], ['Display random choice (Python)'], 2], [(2011583, 1), [["If using python 2.5 or less, you can't use the maxlen argument, and will need to do one more operation to chop off the front of the deque:"], ['This isn\'t exactly the most efficient method, but it works. If you need speed, and your objects are hashable (most immutable types), consider using a dictionary instead as your "used" list.']], [[' while len(used) > 7:\n    used.popleft()\n']], ['Display random choice (Python)'], 2], [(2012611, 0), [['How about:'], ['It also works with  all()  of course:']], [[" >>> any(isinstance(e, int) and e > 0 for e in [1,2,'joe'])\nTrue\n"]], ['any() function in Python with a callback'], 2], [(2012611, 1), [['It also works with  all()  of course:'], ['-10000']], [[" >>> all(isinstance(e, int) and e > 0 for e in [1,2,'joe'])\nFalse\n"]], ['any() function in Python with a callback'], 2], [(2013204, 0), [['What you need to do is loop through the directories:'], ['or as a list comprehension:']], [[" for d in os.listdir(os.getcwd()):\n    if not os.path.isdir(d) or not d.startswith(minus_seven):\n        continue\n    # Do what you need to with 'd' here.\n"]], ['How to move into multiple directories Python'], 2], [(2013204, 1), [['or as a list comprehension:'], ["Basically, you can't feed  os  functions a list and expect them to do the right thing.  They work on paths one at a time."]], [[' minus_seven_dirs = [d for d in os.listdir(os.getcwd())\n    if os.path.isdir(d) and d.startswith(minus_seven)]\n']], ['How to move into multiple directories Python'], 2], [(2013835, 0), [['You might want to use the  .quantize()  method. This will round a decimal value to a certain number of places, the argument you provide specifies the number of places:'], ['Below is a custom field that automatically produces the correct value. Note that this is only when it is retrieved from the database, and wont help you when you set it yourself (until you save it to the db and retrieve it again!).']], [[' >>> from decimal import Decimal\n>>> Decimal("12.234").quantize(Decimal("0.00"))\nDecimal("12.23")\n']], ['Django: How should I store a money value?'], 2], [(2013835, 1), [['Below is a custom field that automatically produces the correct value. Note that this is only when it is retrieved from the database, and wont help you when you set it yourself (until you save it to the db and retrieve it again!).'], ['[edit]']], [[' from django.db import models\nfrom decimal import Decimal\nclass CurrencyField(models.DecimalField):\n    __metaclass__ = models.SubfieldBase\n\n    def to_python(self, value):\n        try:\n           return super(CurrencyField, self).to_python(value).quantize(Decimal("0.01"))\n        except AttributeError:\n           return None\n']], ['Django: How should I store a money value?'], 2], [(2015740, 0), [['use a template filter like so:'], ['in your user_template_tags.py:']], [[' {{username|get_user}}\n']], ['Custom Django template tag to look up a string username and return it as a user object'], 3], [(2015740, 1), [['in your user_template_tags.py:'], ['then in your template you can do something like:']], [[" from django import template\nfrom django.contrib.auth.models import User\n\nregister = template.Library()\n\n########################\n\ndef get_user(username):\n    try:\n        user = User.objects.get(username__iexact=username)\n    except User.DoesNotExist: \n        user = User.objects.none()\n    return user\n\nregister.filter('get_user',get_user)\n"]], ['Custom Django template tag to look up a string username and return it as a user object'], 3], [(2015740, 2), [['then in your template you can do something like:'], ['-10000']], [[' {% with username|getuser as user %}\n{% if user %}DO USER STUFF\n{% else %}DO UNREGISTERED STUFF\n{% endif %}\n{% endwith %}\n']], ['Custom Django template tag to look up a string username and return it as a user object'], 3], [(2017045, 0), [['If the paths all look like in your example, this would work:'], ['The basic algorithm stays the same:']], [[" counts = {}\nfor p in paths:\n   parts = p.split('/')\n   branch = counts\n   for part in parts[1:-1]:\n      branch = branch.setdefault(part, {})\n   branch[parts[-1]] = 1 + branch.get(parts[-1], 0)\n"]], ['Python: recursively create dictionary from paths'], 3], [(2017045, 1), [['The basic algorithm stays the same:'], ['With some pretty printing you get:']], [[" class Stats(object):\n   def __init__(self):\n      self.count = 0\n      self.subdirs = {}\n\ncounts = Stats()\nfor p in paths:\n   parts = p.split('/')\n   branch = counts\n   for part in parts[1:]:\n      branch = branch.subdirs.setdefault(part, Stats())\n   branch.count += 1\n"]], ['Python: recursively create dictionary from paths'], 3], [(2017045, 2), [['With some pretty printing you get:'], ['-10000']], [[" def printstats(stats, indent=''):\n   print indent + str(stats.count) + ' times'\n   for (d, s) in stats.subdirs.items():\n       print indent + d + ':'\n       printstats(s, indent + '  ')\n\n>>> printstats(counts)\n0 times\na:\n  0 times\n  c:\n    0 times\n    d:\n      1 times\n  b:\n    0 times\n    c:\n      2 times\n    d:\n      1 times\n...\n"]], ['Python: recursively create dictionary from paths'], 3], [(2017101, 0), [["One very simple reason to use a nested function is simply that the function you're defining doesn't need to be global, because only the enclosing function uses it. A typical example from Python's  quopri.py  standard library module:"], ["Another common use for nested functions is  re.sub . Here's some code from the  json/encode.py  standard library module:"]], [[" def encode(input, output, quotetabs, header = 0):\n    ...\n    def write(s, output=output, lineEnd='\\n'):\n        # RFC 1521 requires that the line ending in a space or tab must have\n        # that trailing character encoded.\n        if s and s[-1:] in ' \\t':\n            output.write(s[:-1] + quote(s[-1]) + lineEnd)\n        elif s == '.':\n            output.write(quote(s) + lineEnd)\n        else:\n            output.write(s + lineEnd)\n\n    ...  # 35 more lines of code that call write in several places\n"]], ['Real-world examples of nested functions'], 3], [(2017101, 1), [["Another common use for nested functions is  re.sub . Here's some code from the  json/encode.py  standard library module:"], ["In fact, any API, like  re.sub , that accepts a function as a parameter can lead to situations where nested functions are convenient. For example, in  turtle.py  there's some silly demo code that does this:"]], [[' def encode_basestring(s):\n    """Return a JSON representation of a Python string\n\n    """\n    def replace(match):\n        return ESCAPE_DCT[match.group(0)]\n    return \'"\' + ESCAPE.sub(replace, s) + \'"\'\n']], ['Real-world examples of nested functions'], 3], [(2017101, 2), [["In fact, any API, like  re.sub , that accepts a function as a parameter can lead to situations where nested functions are convenient. For example, in  turtle.py  there's some silly demo code that does this:"], ['onclick  expects you to pass an event-handler function, so we define one and pass it in.']], [['     def baba(xdummy, ydummy):\n        clearscreen()\n        bye()\n\n    ...\n    tri.write("  Click me!", font = ("Courier", 12, "bold") )\n    tri.onclick(baba, 1)\n']], ['Real-world examples of nested functions'], 3], [(2018282, 0), [["If you want to write a lot of CSV files with the same  dictList  (is that what you're saying...?), turning the function into a class would let you perform initialization just once, and then write repeatedly from the same initialized instance.  E.g., with other minor opts:"], ["This seems a dubious use case, but if it does match your desire, then you'd instantiate and use this class as follows...:"]], [[" class CsvWriter(object):\n\n  def __init__(self, dictList):\n    self.maxline = max(dictList, key=len)\n    self.dictList = [dict((k,k) for k in self.maxline)]\n    self.dictList.extend(dictList)\n\n  def doWrite(self, outfile):\n    csv_file=open(outfile,'ab')\n    writer = csv.DictWriter(csv_file,\n                            fieldnames=self.maxLine.keys(),\n                            restval='notScanned',\n                            dialect='excel')\n    for dataLine in self.dictList:\n        writer.writerow(dataLine)\n    csv_file.close()\n"]], ['How to create a class from function'], 2], [(2018282, 1), [["This seems a dubious use case, but if it does match your desire, then you'd instantiate and use this class as follows...:"], ['-10000']], [[' cw = CsvWriter(dataList)\nfor ou in many_outfiles:\n  cw.doWrite(ou)\n']], ['How to create a class from function'], 2], [(2018512, 0), [['you can use getmembers()'], ['After that, you can use extractfile() to extract the members as file object. Just an example']], [[' >>> import  tarfile\n>>> tar = tarfile.open("test.tar")\n>>> tar.getmembers()\n']], ['reading tar file contents without untarring it, in python script'], 2], [(2018512, 1), [['After that, you can use extractfile() to extract the members as file object. Just an example'], ['With the file object "f" in the above example, you can use read(), readlines() etc. ']], [[' import tarfile,os\nimport sys\nos.chdir("/tmp/foo")\ntar = tarfile.open("test.tar")\nfor member in tar.getmembers():\n    f=tar.extractfile(member)\n    content=f.read()\n    print "%s has %d newlines" %(member, content.count("\\n"))\n    print "%s has %d spaces" % (member,content.count(" "))\n    print "%s has %d characters" % (member, len(content))\n    sys.exit()\ntar.close()\n']], ['reading tar file contents without untarring it, in python script'], 2], [(2019005, 0), [['No, but you can do something like this:'], ['output:']], [[" >>> import re\n>>> p = re.compile('(?m)^(.*?)\\\\s*:\\\\s*(.*)$')\n>>> text = '''person 1: name1\nperson 2: name2\nperson 3: name3\n...\nperson N: nameN'''\n>>> p.findall(text)\n"]], ['Dynamically Naming Groups in Python Regular Expressions'], 3], [(2019005, 1), [['output:'], ['A quick explanation:']], [[" [('person 1', 'name1'), ('person 2', 'name2'), ('person 3', 'name3'), ('person N', 'nameN')]\n"]], ['Dynamically Naming Groups in Python Regular Expressions'], 3], [(2019005, 2), [['A quick explanation:'], ['References']], [[' (?m)     # enable multi-line mode\n^        # match the start of a new line\n(.*?)    # un-greedily match zero or more chars and store it in match group 1\n\\s*:\\s*  # match a colon possibly surrounded by space chars\n(.*)     # match the rest of the line and store it in match group 2\n$        # match the end of the line\n']], ['Dynamically Naming Groups in Python Regular Expressions'], 3], [(2019489, 0), [['What are you trying to do? It works for me:'], ['So this will print:']], [[' class A(object):\n    def __init__(self):\n        self.val = 100\n\n    def __str__(self):\n        """What a looks like if your print it"""\n        return \'A:\'+str(self.val)\n\nimport pickle\na = A()\na_pickled = pickle.dumps(a)\na.val = 200\na2 = pickle.loads(a_pickled)\nprint \'the original a\'\nprint a\nprint # newline\nprint \'a2 - a clone of a before we changed the value\'\nprint a2\nprint \n\nprint \'Why are you trying to use __setstate__, not __init__?\'\nprint\n']], ["how to use 'pickle'"], 4], [(2019489, 1), [['So this will print:'], ['If you need setstate:']], [[' the original a\nA:200\n\na2 - a clone of a before we changed the value\nA:100\n']], ["how to use 'pickle'"], 4], [(2019489, 2), [['If you need setstate:'], ['which prints:']], [[' class B(object):\n    def __init__(self):\n        print \'Perhaps __init__ must not happen twice?\'\n        print\n        self.val = 100\n\n    def __str__(self):\n        """What a looks like if your print it"""\n        return \'B:\'+str(self.val)\n\n    def __getstate__(self):\n        return self.val\n\n    def __setstate__(self,val):\n        self.val = val\n\nb = B()\nb_pickled = pickle.dumps(b)\nb.val = 200\nb2 = pickle.loads(b_pickled)\nprint \'the original b\'\nprint b\nprint # newline\nprint \'b2 - b clone of b before we changed the value\'\nprint b2\n']], ["how to use 'pickle'"], 4], [(2019489, 3), [['which prints:'], ['-10000']], [[' Why are you trying to use __setstate__, not __init__?\n\nPerhaps __init__ must not happen twice?\n\nthe original b\nB:200\n\nb2 - b clone of b before we changed the value\nB:100\n']], ["how to use 'pickle'"], 4], [(2019850, 0), [['Replace the line:'], ['with']], [[' string += str(getbingint) + ":" + str("%.2f") % getsmallint + "," \n']], ['Python basic maths'], 2], [(2019850, 1), [['with'], ['-10000']], [[' string += str(getbingint) + ":" + str("%.2f") % (getsmallint*1.225) + "," \n']], ['Python basic maths'], 2], [(2019929, 0), [['You can use the  struct  module  to pack values into appropriate formats:'], ["By default this will use the native byte order but you can override this using modifiers to format string.  Since your variable is called  pkt_bytes  I'm guessing you want network (big-endian) byte order which is signified by a  ! :"]], [[' >>> pkt_bytes = [0x02, 0x07, 0xff, 0xff, 0x00, 0x03]\n>>> myint = 123\n>>> pkt_bytes[3:5] = [ord(b) for b in struct.pack("H",myint)]\n>>> pkt_bytes\n[2, 7, 255, 123, 0, 3]\n']], ['Python inserting a short integer into a list of bytes'], 2], [(2019929, 1), [["By default this will use the native byte order but you can override this using modifiers to format string.  Since your variable is called  pkt_bytes  I'm guessing you want network (big-endian) byte order which is signified by a  ! :"], ['-10000']], [[' >>> struct.pack("!H",5000)\n\'\\x13\\x88\'\n']], ['Python inserting a short integer into a list of bytes'], 2], [(2020014, 0), [['With the following program'], ['and  Bar  defined as']], [[' #! /usr/bin/env python\n\nimport foo\n\ndef fullname(o):\n  return o.__module__ + "." + o.__class__.__name__\n\nbar = foo.Bar()\nprint fullname(bar)\n']], ['Get fully qualified class name of an object in Python'], 3], [(2020014, 1), [['and  Bar  defined as'], ['the output is']], [[' class Bar(object):\n  def __init__(self, v=42):\n    self.val = v\n']], ['Get fully qualified class name of an object in Python'], 3], [(2020014, 2), [['the output is'], ['-10000']], [[' $ ./prog.py\nfoo.Bar\n']], ['Get fully qualified class name of an object in Python'], 3], [(2022014, 0), [['This works for me:'], ['This pyparsing solution gives some decent output, too:']], [[" soup1 = BeautifulSoup(''.join(str(t) for t in tags)) \n"]], ['Cannot prettify scraped html in BeautifulSoup'], 3], [(2022014, 1), [['This pyparsing solution gives some decent output, too:'], ['prints:']], [[' from pyparsing import makeHTMLTags, originalTextFor, SkipTo, Combine\n\n# makeHTMLTags defines HTML tag patterns for given tag string\naTag,aEnd = makeHTMLTags("A")\n\n# makeHTMLTags by default returns a structure containing\n# the tag\'s attributes - we just want the original input text\naTag = originalTextFor(aTag)\naEnd = originalTextFor(aEnd)\n\n# define an expression for a full link, and use a parse action to\n# combine the returned tokens into a single string\naLink = aTag + SkipTo(aEnd) + aEnd\naLink.setParseAction(lambda tokens : \'\'.join(tokens))\n\n# extract links from the input html\nlinks = aLink.searchString(html)\n\n# build list of strings for output\nout = []\nout.append(pre)\nout.extend([\'  \'+lnk[0] for lnk in links])\nout.append(post)\n\nprint \'\\n\'.join(out)\n']], ['Cannot prettify scraped html in BeautifulSoup'], 3], [(2022014, 2), [['prints:'], ['-10000']], [[' <html><head><title>Page title</title></head>\n  <a href="http://www.reddit.com/r/pics/" >pics</a>\n  <a href="http://www.reddit.com/r/reddit.com/" >reddit.com</a>\n  <a href="http://www.reddit.com/r/politics/" >politics</a>\n  <a href="http://www.reddit.com/r/funny/" >funny</a>\n  <a href="http://www.reddit.com/r/AskReddit/" >AskReddit</a>\n  <a href="http://www.reddit.com/r/WTF/" >WTF</a>\n  .\n  .\n  .\n  <a href="http://reddit.com/help/privacypolicy" >Privacy Policy</a>\n  <a href="#" onclick="return hidecover(this)">close this window</a>\n  <a href="http://www.reddit.com/feedback" >volunteer to translate</a>\n  <a href="#" onclick="return hidecover(this)">close this window</a>\n</html>\n']], ['Cannot prettify scraped html in BeautifulSoup'], 3], [(2022594, 0), [['To catch the paste event, you need to first create a custom entry class ( PastableEntry  in this example) that inherits from  gtksheet.ItemEntry . During its initialisation, we connect to the  paste-clipboard  signal to trap paste events:'], ["The hard work is in the event handler. First we need to get the clipboard contents. In Unix, clipboard sources can advertise multiple data formats. Based on your screenshot, I assume you're trying to copy data from Gnumeric. Gnumeric supports  application/x-gnumeric ,  text/html ,  UTF8_STRING ,  COMPOUND_TEXT , and  STRING . For this example we'll use the UTF8_STRING format, which looks like this:"]], [[" class PastableEntry(gtksheet.ItemEntry):\n    def __init__(self):\n        gtksheet.ItemEntry.__init__(self)\n        self.connect('paste-clipboard', self.__on_paste)\n"]], ['Handling spreadsheet data through the clipboard in GTK'], 5], [(2022594, 1), [["The hard work is in the event handler. First we need to get the clipboard contents. In Unix, clipboard sources can advertise multiple data formats. Based on your screenshot, I assume you're trying to copy data from Gnumeric. Gnumeric supports  application/x-gnumeric ,  text/html ,  UTF8_STRING ,  COMPOUND_TEXT , and  STRING . For this example we'll use the UTF8_STRING format, which looks like this:"], ['Back to our PastableEntry class, now we define the paste event handler:']], [[' 1,1 <tab> 1,2 <tab> 1,3 <newline>\n2,1 <tab> 2,2 <tab> 2,3 <newline>\n3,1 <tab> 3,2 <tab> 3,3\n']], ['Handling spreadsheet data through the clipboard in GTK'], 5], [(2022594, 2), [['Back to our PastableEntry class, now we define the paste event handler:'], ['We then register the class with GObject:']], [["     def __on_paste(self, entry):\n        clip = gtk.Clipboard()\n        data = clip.wait_for_contents('UTF8_STRING')\n        text = data.get_text()\n        sheet = self.parent\n        o_row, o_col = sheet.get_active_cell()\n        for i_row, row in enumerate(text.split('\\n')):\n            for i_col, cell in enumerate(row.split('\\t')):\n                sheet.set_cell_text(o_row + i_row, o_col + i_col, cell)\n        self.stop_emission('paste-clipboard')\n"]], ['Handling spreadsheet data through the clipboard in GTK'], 5], [(2022594, 3), [['We then register the class with GObject:'], ['Finally, to actually use our custom entry class, pass it to the constructor of  gtksheet.Sheet :']], [[' gobject.type_register(PastableEntry)\n']], ['Handling spreadsheet data through the clipboard in GTK'], 5], [(2022594, 4), [['Finally, to actually use our custom entry class, pass it to the constructor of  gtksheet.Sheet :'], ['-10000']], [[' s = gtksheet.Sheet(20, 20, "Sheet 1", entry_type=PastableEntry)\n']], ['Handling spreadsheet data through the clipboard in GTK'], 5], [(2024535, 0), [['For the first case (simple, but easy to get a KeyError when there is no row):'], ['More correct is to implement a new method for the cursor class:']], [[' customerID = self.cursorMySQL.fetchone()[0]\n']], ['Python - automating MySQL query: passing parameter'], 3], [(2024535, 1), [['More correct is to implement a new method for the cursor class:'], ['For the second case:']], [[' def autofetch_value(self, sql, args=None):\n    """ return a single value from a single row or None if there is no row\n    """\n    self.execute(sql, args)\n    returned_val = None\n\n    row = self.fetchone()\n    if row is not None:\n        returned_val = row[0]\n\n    return returned_val\n']], ['Python - automating MySQL query: passing parameter'], 3], [(2024535, 2), [['For the second case:'], ["Make sure you sanitize the data, since the cursor won't."]], [[' def clean_table(self,tableName):\n    cleanTableQuery = """TRUNCATE TABLE %s;""" % (tableName,)\n    self.cursorMySQL.execute(cleanTableQuery)\n\n    setIndexQuery = """ALTER TABLE %s AUTO_INCREMENT = 1;""" % (tableName,)\n    self.cursorMySQL.execute(setIndexQuery)\n']], ['Python - automating MySQL query: passing parameter'], 3], [(2024660, 0), [['a custom template filter will do the trick.'], ["in your example you'd do:"]], [[" from django import template\nregister = template.Library()\n\ndef dict_get(value, arg):\n    #custom template tag used like so:\n    #{{dictionary|dict_get:var}}\n    #where dictionary is duh a dictionary and var is a variable representing\n    #one of it's keys\n\n    return value[arg]\n\nregister.filter('dict_get',dict_get)\n"]], ['Django | sort dict in template'], 2], [(2024660, 1), [["in your example you'd do:"], ['-10000']], [[' {% for employee, dependents in company_dict|company %}\n']], ['Django | sort dict in template'], 2], [(2026876, 0), [['data_files  specifies a sequence of  (directory, files)  pairs in the following way:'], ['When reading the config file on your app, you can merge a  /home  version if it exists, using  .read()  method of  ConfigParser  objects :']], [[" setup(...,\n      data_files=[('/etc', ['cfg/config1.ini', 'cfg/config2.ini']),\n                  ('/etc/init.d', ['bin/initscript1'])],\n      ....\n     )\n"]], ['Packaging Python applications with configuration files'], 2], [(2026876, 1), [['When reading the config file on your app, you can merge a  /home  version if it exists, using  .read()  method of  ConfigParser  objects :'], ["That will read  /etc/config1.ini  and then overwrite the definitions with stuff coming from  .config1.ini  in the user's home directory, if it exists."]], [[' files_read = cfgparserobj.read([\'/etc/config1.ini\', \n                                os.path.expanduser(\'~/.config1.ini\')])\nfor fname in files_read:\n    print "Reading config from", fname\n']], ['Packaging Python applications with configuration files'], 2], [(2029523, 0), [['foo.py  is a module with the single line'], ['And here is a screen transcript of multiple import attempts. ']], [[' print "I am being imported"\n']], ['How to prevent a module from being imported twice?'], 2], [(2029523, 1), [['And here is a screen transcript of multiple import attempts. '], ['-10000']], [['    >>> import foo\n   Hello, I am being imported\n   >>> import foo # Will not print the statement\n   >>> reload(foo) # Will print it again\n   Hello, I am being imported\n']], ['How to prevent a module from being imported twice?'], 2], [(2030053, 0), [['Generating strings from (for example) lowercase characters:'], ['Results:']], [[" import random, string\n\ndef randomword(length):\n   letters = string.ascii_lowercase\n   return ''.join(random.choice(letters) for i in range(length))\n"]], ['Random strings in Python'], 2], [(2030053, 1), [['Results:'], ['-10000']], [[" >>> randomword(10)\n'vxnxikmhdc'\n>>> randomword(10)\n'ytqhdohksy'\n"]], ['Random strings in Python'], 2], [(2032228, 0), [['you can use format specifiers'], ['or say your rdiffArgs is already in a list']], [[' def runScript():\n    script = "%s %s %s@%s %s::%s %s" %(rdiff,rdiffVerbosity,rdiffStatistics,clientName,clientHost,clientDir,serverDir)    \n    os.system(script)\n']], ['Scripting Python for Linux commands'], 4], [(2032228, 1), [['or say your rdiffArgs is already in a list'], ['you can join them with a space']], [[' rdiffArgs = [rdiffVerbosity,rdiffStatistics,clientName,clientHost,clientDir,serverDir]\n']], ['Scripting Python for Linux commands'], 4], [(2032228, 2), [['you can join them with a space'], ['lastly, just so you might want to know, you can import rdiff in your script , since rdiff-backup is written in Python']], [[" rdiffArgs = ' '.join(rdiffArgs)\n"]], ['Scripting Python for Linux commands'], 4], [(2032228, 3), [['lastly, just so you might want to know, you can import rdiff in your script , since rdiff-backup is written in Python'], ["the above backs up /etc/ to /tmp/backup. That way, you don't have to make system call to rdiff-backup. Of course, this is up to you. making system call is sometimes easier"]], [[" from rdiff_backup.Main import Main as backup\ntask=['/etc', '/tmp/backup']\nbackup(task)\n"]], ['Scripting Python for Linux commands'], 4], [(2033150, 0), [["EDIT: I read in another comment that you're not overriding any of dict's method! Then there's no point in subclassing at all, don't do it."], ["EDIT 2: you want to inherit from dict to add new methods, but you don't need to override any. Than a good choice might be:"]], [[' def createImageDb(directory):\n    d = {}\n    # do something to fill in the dict\n    return d\n']], ['Subclassing dict: should dict.__init__() be called?'], 2], [(2033150, 1), [["EDIT 2: you want to inherit from dict to add new methods, but you don't need to override any. Than a good choice might be:"], ['By the way: what methods are you adding? Are you sure you\'re creating a good abstraction? Maybe you\'d better use a class which defines the methods you need and use a "normal" dict internally to it.']], [[' class MyContainer(dict):\n    def newmethod1(self, args):\n        pass\n\n    def newmethod2(self, args2):\n        pass\n\n\ndef createImageDb(directory):\n    d = MyContainer()\n    # fill the container\n    return d\n']], ['Subclassing dict: should dict.__init__() be called?'], 2], [(2034037, 0), [['Within ImageFilter.py you will find this class:'], ['From ImageFilter.py:']], [[' ##\n# Embossing filter.\n\nclass EMBOSS(BuiltinFilter):\n    name = "Emboss"\n    filterargs = (3, 3), 1, 128, (\n        -1,  0,  0,\n        0,  1,  0,\n        0,  0,  0\n        )\n']], ['Image embossing in Python with PIL -- adding depth, azimuth, etc'], 4], [(2034037, 1), [['From ImageFilter.py:'], ['To make temporary changes to the filter without re-saving source code, just do this:']], [[' # @keyparam scale Scale factor.  If given, the result for each\n#    pixel is divided by this value.  The default is the sum\n#    of the kernel weights.\n# @keyparam offset Offset.  If given, this value is added to the\n#    result, after it has been divided by the scale factor.\n']], ['Image embossing in Python with PIL -- adding depth, azimuth, etc'], 4], [(2034037, 2), [['To make temporary changes to the filter without re-saving source code, just do this:'], ['-10000']], [[' ImageFilter.EMBOSS.filterargs=((3, 3), 1, 128, (-1, 0, 0, 0, 1, 0, 0, 0, 0))\n']], ['Image embossing in Python with PIL -- adding depth, azimuth, etc'], 4], [(2034037, 3), [['-10000'], ["I hope this helps.  I can see now why you were disappointed with PIL's results.  Wolfram Mathworld is a good resource for a vector algebra refresher."]], [['Edit: (taking the <a href="http://en.wikipedia.org/wiki/NumPy" rel="nofollow noreferrer">NumPy</a> approach) from PIL import Image\nimport numpy\n\n# defining azimuth, elevation, and depth\nele = numpy.pi/2.2 # radians\nazi = numpy.pi/4.  # radians\ndep = 10.          # (0-100)\n\n# get a B&W version of the image\nimg = Image.open(\'daisy.jpg\').convert(\'L\') \n# get an array\na = numpy.asarray(img).astype(\'float\')\n# find the gradient\ngrad = numpy.gradient(a)\n# (it is two arrays: grad_x and grad_y)\ngrad_x, grad_y = grad\n# getting the unit incident ray\ngd = numpy.cos(ele) # length of projection of ray on ground plane\ndx = gd*numpy.cos(azi)\ndy = gd*numpy.sin(azi)\ndz = numpy.sin(ele)\n# adjusting the gradient by the "depth" factor\n# (I think this is how GIMP defines it)\ngrad_x = grad_x*dep/100.\ngrad_y = grad_y*dep/100.\n# finding the unit normal vectors for the image\nleng = numpy.sqrt(grad_x**2 + grad_y**2 + 1.)\nuni_x = grad_x/leng\nuni_y = grad_y/leng\nuni_z = 1./leng\n# take the dot product\na2 = 255*(dx*uni_x + dy*uni_y + dz*uni_z)\n# avoid overflow\na2 = a2.clip(0,255)\n# you must convert back to uint8 /before/ converting to an image\nimg2 = Image.fromarray(a2.astype(\'uint8\')) \nimg2.save(\'daisy2.png\')\n']], ['Image embossing in Python with PIL -- adding depth, azimuth, etc'], 4], [(2034584, 0), [["This isn't as complicated as you might think. Here's a Category class:"], ['You could use it something like this:']], [[' class Category(db.Model):\n    title = db.StringProperty()\n    subcategories = db.ListProperty(db.Key)\n    quizzes = db.ListProperty(db.Key)\n\n    def add_sub_category(self, title):\n        new_category = Category(title)\n        new_category.put()\n        self.subcategories.append(new_category)\n        self.put()\n\n        return new_category\n']], ['Datastore Design Inquiry'], 2], [(2034584, 1), [['You could use it something like this:'], ['...etc...']], [[' main_category = Category("Main")\nmain_category.put()\n\nsports_category = main_category.add_sub_category("Sports")\nbaseball_category = sports_category.add_sub_category("Baseball")\nfootball_category = sports_category.add_sub_category("Football")\nhockey_category = sports_category.add_sub_category("Hockey")\n\ntv_category = main_category.add_sub_category("TV")\n']], ['Datastore Design Inquiry'], 2], [(2035049, 0), [['you can use  setSelectionMode  of the  QAbstractItemView  class (which  QTreeWidget  is inherited from) to set no selection mode to the component. Something like this (sorry, code in C++):'], ['In this case items would not get selected but you still will see focus rectangle around them. To fix this you can set your widget to not accept focus by calling:']], [[' yourtreeView->setSelectionMode(QAbstractItemView::NoSelection);\n']], ['QTreeWidget turn off selection'], 3], [(2035049, 1), [['In this case items would not get selected but you still will see focus rectangle around them. To fix this you can set your widget to not accept focus by calling:'], ["if your tree widget has to accept focus but should not be drawing focus rectangles you can use custom item delegate and remove  State_HasFocus  state from the item's state before drawing it. Something like this:"]], [[' yourtreeView->setFocusPolicy(Qt::NoFocus);\n']], ['QTreeWidget turn off selection'], 3], [(2035049, 2), [["if your tree widget has to accept focus but should not be drawing focus rectangles you can use custom item delegate and remove  State_HasFocus  state from the item's state before drawing it. Something like this:"], ['-10000']], [[' class NoFocusDelegate : public QStyledItemDelegate\n{\nprotected:\n    void paint(QPainter* painter, const QStyleOptionViewItem& option, const QModelIndex& index) const;\n};\n\nvoid NoFocusDelegate::paint(QPainter* painter, const QStyleOptionViewItem & option, const QModelIndex &index) const\n{\n    QStyleOptionViewItem itemOption(option);\n    if (itemOption.state & QStyle::State_HasFocus)\n        itemOption.state = itemOption.state ^ QStyle::State_HasFocus;\n    QStyledItemDelegate::paint(painter, itemOption, index);\n}\n\n....\n\nNoFocusDelegate* delegate = new NoFocusDelegate();\nyourtreeView->setItemDelegate(delegate);\n']], ['QTreeWidget turn off selection'], 3], [(2035599, 0), [["Here's a simple hello world, with a simple event bound to the button."], ['or, an even simpler example:']], [[' import wx\n\nclass MyFrame(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None)\n        text = wx.StaticText(self, label="hello, world!")\n        button = wx.Button(self, label="press me")\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(text, flag=wx.ALL, border=20)\n        sizer.Add(button, flag=wx.ALL, border=20)\n\n        self.SetSizer(sizer)\n        self.Layout()\n        self.Show(True)\n        self.Bind(wx.EVT_BUTTON, self.on_button, button)\n\n    def on_button(self, event):\n        wx.MessageBox("Hey!")\n\nif __name__ == "__main__":\n    app = wx.App(False)\n    f = MyFrame()\n']], ['Coming from a Visual C# Express IDE/C# programming background, is there a tutorial for creating python applications?'], 2], [(2035599, 1), [['or, an even simpler example:'], ['-10000']], [[' import wx\napp = wx.PySimpleApp()\nframe = wx.Frame(None, wx.ID_ANY, "Hello World")\nframe.Show(True)\napp.MainLoop()\n    app.MainLoop()\n']], ['Coming from a Visual C# Express IDE/C# programming background, is there a tutorial for creating python applications?'], 2], [(2036236, 0), [['A quick and dirty solution is to use python itself:'], ["There are several ways to pull off this trick, e.g., here's a cleaner (albeit somewhat unusual) approach using classes:"]], [[' NINETY_NINE = 99       # Defines the constant `NINETY_NINE` to have the value `99`\n\nrules = {\n  \'*\': {     # Applies to all data\n    \'isYummy\': {},      # Everything must be yummy\n\n    \'chocolate\': {        # To validate, say `validate("chocolate", object)`\n      \'sweet\': {},        # chocolate must be sweet (but not necessarily chocolate.*)\n\n      \'lindt\': {          # To validate, say `validate("chocolate.lindt", object)`\n        \'tasty\':{}        # Applies only to chocolate.lindt (and not to chocolate.lindt.dark, for e.g.)\n\n        \'*\': {            # Applies to all data under chocolate.lindt\n          \'smooth\': {}  # Could also be written smooth()\n          \'creamy\': 1   # Level 1 creamy\n        },\n# ...\n    }\n  }\n}\n']], ['Tips on how to parse custom file format'], 4], [(2036236, 1), [["There are several ways to pull off this trick, e.g., here's a cleaner (albeit somewhat unusual) approach using classes:"], ['As an intermediate step to a full parser, you can use the "batteries-included" Python parser, which parses Python syntax and returns an AST. The AST is very deep with lots of (IMO) unnecessary levels. You can filter these down to a much simpler structure by culling any nodes that have only one child. With this approach you can do something like this:']], [[' class _:\n    class isYummy: pass\n\n    class chocolate:\n        class sweet: pass\n\n        class lindt:\n            class tasty: pass\n\n            class _:\n                class smooth: pass\n                class creamy: level = 1\n# ...\n']], ['Tips on how to parse custom file format'], 4], [(2036236, 2), [['As an intermediate step to a full parser, you can use the "batteries-included" Python parser, which parses Python syntax and returns an AST. The AST is very deep with lots of (IMO) unnecessary levels. You can filter these down to a much simpler structure by culling any nodes that have only one child. With this approach you can do something like this:'], ["This approach does have its limitations. The final AST is still a bit noisy, and the language you define has to be interpretable as valid python code. For instance, you couldn't support this..."]], [[' import parser, token, symbol, pprint\n\n_map = dict(token.tok_name.items() + symbol.sym_name.items())\n\ndef clean_ast(ast):\n    if not isinstance(ast, list):\n        return ast\n    elif len(ast) == 2: # Elide single-child nodes.\n        return clean_ast(ast[1])\n    else:\n        return [_map[ast[0]]] + [clean_ast(a) for a in ast[1:]]\n\nast = parser.expr(\'\'\'{\n\n\'*\': {     # Applies to all data\n  isYummy: _,    # Everything must be yummy\n\n  chocolate: {        # To validate, say `validate("chocolate", object)`\n    sweet: _,        # chocolate must be sweet (but not necessarily chocolate.*)\n\n    lindt: {          # To validate, say `validate("chocolate.lindt", object)`\n      tasty: _,        # Applies only to chocolate.lindt (and not to chocolate.lindt.dark, for e.g.)\n\n      \'*\': {            # Applies to all data under chocolate.lindt\n        smooth: _,  # Could also be written smooth()\n        creamy: 1   # Level 1 creamy\n      }\n# ...\n    }\n  }\n}\n\n}\'\'\').tolist()\npprint.pprint(clean_ast(ast))\n']], ['Tips on how to parse custom file format'], 4], [(2036236, 3), [["This approach does have its limitations. The final AST is still a bit noisy, and the language you define has to be interpretable as valid python code. For instance, you couldn't support this..."], ["...because this syntax doesn't parse as python code. Its big advantage, however, is that you control the AST conversion, so it is impossible to inject arbitrary Python code."]], [[' *:\n    isYummy\n']], ['Tips on how to parse custom file format'], 4], [(2037267, 0), [["The problem is you're iterating over generators instead of lists in the yield version, specifically  secondG  which is exhausted after one loop.  Change the line to this and it works:"], ['Or, you can change your loop:']], [[' firstG, secondG = f(first), list(f(second))\n']], ['Different results from yield vs return'], 5], [(2037267, 1), [['Or, you can change your loop:'], ['Remember that this:']], [[' for e in ("(%s%s%s)" % (e1, op, e2) for e1 in f(first) for e2 in f(second)):\n#                               new generator object every loop  ^^^^^^^^^\n']], ['Different results from yield vs return'], 5], [(2037267, 2), [['Remember that this:'], ['Is equivalent to:']], [[' r = [v for a in A for b in B]\n']], ['Different results from yield vs return'], 5], [(2037267, 3), [['Is equivalent to:'], ['Another example:']], [[' r = []\nfor a in A:\n  for b in B:\n    r.append(v)\n']], ['Different results from yield vs return'], 5], [(2037267, 4), [['Another example:'], ['-10000']], [[' def y():\n  yield 1\n  yield 2\n  yield 3\ndef r():\n  return [1, 2, 3]\n\nvy = y()\nfor v in vy:\n  print v\nfor v in vy:\n  print v\n\nprint "---"\n\nvr = r()\nfor v in vr:\n  print v\nfor v in vr:\n  print v\n']], ['Different results from yield vs return'], 5], [(2038083, 0), [['The sending side is roughly:'], ["And the recv'ing side becomes something like:"]], [[' socket.write(struct.pack("H", len(data))    #send a two-byte size field\nsocket.write(data)\n']], ["How to use Python and Google's Protocol Buffers to deserialize data sent over TCP"], 4], [(2038083, 1), [["And the recv'ing side becomes something like:"], ['This is a common design pattern for socket programming.   Most designs extend the over-the-wire structure to include a type field as well, so your receiving side becomes something like:']], [[' dataToRead = struct.unpack("H", socket.read(2))[0]    \ndata = socket.read(dataToRead)\n']], ["How to use Python and Google's Protocol Buffers to deserialize data sent over TCP"], 4], [(2038083, 2), [['This is a common design pattern for socket programming.   Most designs extend the over-the-wire structure to include a type field as well, so your receiving side becomes something like:'], ['You end up with an over-the-wire message format that looks like:']], [[' type = socket.read(1)                                 # get the type of msg\ndataToRead = struct.unpack("H", socket.read(2))[0]    # get the len of the msg\ndata = socket.read(dataToRead)                        # read the msg\n\nif TYPE_FOO == type:\n    handleFoo(data)\n\nelif TYPE_BAR == type:\n    handleBar(data)\n\nelse:\n    raise UnknownTypeException(type)\n']], ["How to use Python and Google's Protocol Buffers to deserialize data sent over TCP"], 4], [(2038083, 3), [['You end up with an over-the-wire message format that looks like:'], ["This does a reasonable job of future-proofing the wire protocol against unforeseen requirements.   It's a  Type-Length-Value  protocol, which you'll find again and again and again in network protocols.  "]], [[' struct {\n     unsigned char type;\n     unsigned short length;\n     void *data;\n}\n']], ["How to use Python and Google's Protocol Buffers to deserialize data sent over TCP"], 4], [(2038100, 0), [['You can define your own units which you can subsitute into an expression when you need an expression to use particular units:'], ['Then define a dictionary which will substitute the base units for your new units.']], [[" import sympy.physics.units as units\nfrom sympy import Rational\n\nmy_mile = units.Unit('my_mile', 'mile')\nmy_hour = units.Unit('my_hour', 'hour')\n"]], ['SymPy: How to return an expression in terms of other expression(s)?'], 3], [(2038100, 1), [['Then define a dictionary which will substitute the base units for your new units.'], ['Perform all your calculations using the base units. Then if you want a value using miles and hours, you can substitute your new units into the expression.']], [[" converter = {units.m: my_mile/Rational('1609.344'),\n             units.s: my_hour/Rational('3600')}\n"]], ['SymPy: How to return an expression in terms of other expression(s)?'], 3], [(2038100, 2), [['Perform all your calculations using the base units. Then if you want a value using miles and hours, you can substitute your new units into the expression.'], ["Use ars answer for getting the docs. Sympy's repository is here:  https://github.com/sympy/sympy"]], [[' v = 10*units.miles/units.hour\nprint v # = 2794*m/(625*s)\n\nprint v.subs(converter) # = 10*mile/hour\n']], ['SymPy: How to return an expression in terms of other expression(s)?'], 3], [(2038481, 0), [["Yep, it does do constant folding, here's a simpler example:"], ['Edit : for all the optimization flow, see  peephole.c  -- this is also probably the handiest place to "change sources", e.g. change line 320 from']], [[' >>> def f(): return 23+100\n... \n>>> dis.dis(f)\n  1           0 LOAD_CONST               3 (123)\n              3 RETURN_VALUE        \n>>> \n']], ['What optimizations does Python do without the -O flags?'], 3], [(2038481, 1), [['Edit : for all the optimization flow, see  peephole.c  -- this is also probably the handiest place to "change sources", e.g. change line 320 from'], ['to']], [[' if (codelen > 32700)\n']], ['What optimizations does Python do without the -O flags?'], 3], [(2038481, 2), [['to'], ['to make sure all optimizations are unconditionally disabled.']], [[' if (codelen > 0)\n']], ['What optimizations does Python do without the -O flags?'], 3], [(2039140, 0), [["Here's a simple example (Python 2.6)."], ['Further exploration reveals a few quirks of this approach:']], [[' >>> import re\n>>> rx = re.compile("[^\\W\\d_]+", re.UNICODE)\n>>> rx.findall(u"abc_def,k9")\n[u\'abc\', u\'def\', u\'k\']\n']], ['python-re: How do I match an alpha character'], 2], [(2039140, 1), [['Further exploration reveals a few quirks of this approach:'], ['U+3021 (HANGZHOU NUMERAL ONE) is treated as numeric (hence it matches \\w) but it appears that Python interprets "digit" to mean "decimal digit" (category Nd) so it doesn\'t match \\d']], [[' >>> import unicodedata as ucd\n>>> allsorts =u"\\u0473\\u0660\\u06c9\\u24e8\\u4e0a\\u3020\\u3021"\n>>> for x in allsorts:\n...     print repr(x), ucd.category(x), ucd.name(x)\n...\nu\'\\u0473\' Ll CYRILLIC SMALL LETTER FITA\nu\'\\u0660\' Nd ARABIC-INDIC DIGIT ZERO\nu\'\\u06c9\' Lo ARABIC LETTER KIRGHIZ YU\nu\'\\u24e8\' So CIRCLED LATIN SMALL LETTER Y\nu\'\\u4e0a\' Lo CJK UNIFIED IDEOGRAPH-4E0A\nu\'\\u3020\' So POSTAL MARK FACE\nu\'\\u3021\' Nl HANGZHOU NUMERAL ONE\n>>> rx.findall(allsorts)\n[u\'\\u0473\', u\'\\u06c9\', u\'\\u4e0a\', u\'\\u3021\']\n']], ['python-re: How do I match an alpha character'], 2], [(2039958, 0), [['It should be more like this:'], ['As for the vendor field, you simply add another class, much like Class Vuln. For example:']], [[' class Vuln(models.Model): \n  pub_date = models.DateTimeField("Publication Date") \n  short_description = models.CharField("Description", max_length=70)\n  vendor = models.ForeignKey(Vendor, verbose_name="Vendor") \n\nclass Url(models.Model): \n  url = models.URLField("URL", max_length=200)\n  vulnerability = models.ForeignKey(Vuln)\n']], ['Django One-To-Many Models'], 2], [(2039958, 1), [['As for the vendor field, you simply add another class, much like Class Vuln. For example:'], ['Hope this helps!\nRegards, Alex']], [[' class Vendor(models.Model): \n  field_names_go_here = models.TextField(max_length=70)\n  short_description = models.CharField("Description", max_length=70)\n']], ['Django One-To-Many Models'], 2], [(2040998, 0), [['To update global variables you could use'], ['you need to make a function like']], [[' global ID\nID="Yes"\n']], ['How to change variables in Python'], 2], [(2040998, 1), [['you need to make a function like'], ['The whole program may be like this']], [[' def getprojectname(ID):\n    return project+ID\n']], ['How to change variables in Python'], 2], [(2042201, 0), [['You can include this line as the last pattern in your  urls.py  file. It will re-route urls that do not match any other pattern to the login page.'], ['EDIT: To keep raising 404 pages to authenticated users, do the following:']], [[" urlpatterns = patterns('',\n\n    ...\n\n    (r'^(?P<path>.+)$', 'django.views.generic.simple.redirect_to', {\n        'url': '/login/?next=/%(path)s', \n        'permanent': False\n    }),\n)\n"]], ['Django: information leakage problem when using @login_required and setting LOGIN_URL'], 2], [(2042201, 1), [['EDIT: To keep raising 404 pages to authenticated users, do the following:'], ['-10000']], [[" from django.http import Http404, HttpResponseRedirect\ndef fake_redirect(request, path):\n    if request.user.is_authenticated:\n        raise Http404()\n    else:\n        return HttpResponseRedirect('/login/?next=/%s' % path)\n\nurlpatterns = patterns('',\n\n    ...\n\n    (r'^(?P<path>.+)$', fake_redirect),\n)\n"]], ['Django: information leakage problem when using @login_required and setting LOGIN_URL'], 2], [(2042916, 0), [['You can use this class to have your generator of digits :-)'], ['you can use it like this:']], [[' import math\n\nclass DecimalIndexing:\n    def __init__(self, n):\n        self.n = n\n    def __len__(self):\n        return int(math.floor(math.log10(self.n)+1))\n    def __getitem__(self, i):\n        if isinstance(i, slice):\n            return [self[x] for x in range(i.start, i.stop, i.step or 1)]\n        else:\n            return (self.n/(10**i))%10\n    def __iter__(self):\n        for i in xrange(len(self)):\n            yield self[i]\n']], ['Find sequences of digits in long integers efficiently'], 5], [(2042916, 1), [['you can use it like this:'], ['or like this:']], [[' di = DecimalIndexing(31415927)\nfor i in xrange(len(di)):\n    if di[i:i+4] == [9,5,1,4]:\n        print "found"\n']], ['Find sequences of digits in long integers efficiently'], 5], [(2042916, 2), [['or like this:'], ['or like this:']], [[' for i in xrange(len(di)):\n    if di[i:i+3] == [di[i]]*3:\n        print "group of three equal digits at," i\n']], ['Find sequences of digits in long integers efficiently'], 5], [(2042916, 3), [['or like this:'], ['or like this:']], [[' if 5 in di:\n    print "has a five"\n']], ['Find sequences of digits in long integers efficiently'], 5], [(2042916, 4), [['or like this:'], ['etc.']], [[' if any(x > 5 in di):\n    print "some digit was greater than five"\n']], ['Find sequences of digits in long integers efficiently'], 5], [(2044941, 0), [['Python classes can be callable just like functions, if you define a  __call__  method on them, like this:'], ['Doing this also lets you turn similar views into object instances:']], [[' class MyView(object):\n    def __call__(self, request, slug)\n        # do stuff here\n\n    def helper_method(self):\n        # etc.\n']], ['Pythonize Me: how to manage caller context variables in Python? (Python/Django)'], 2], [(2044941, 1), [['Doing this also lets you turn similar views into object instances:'], ['and in urls.py, reference the objects (rather than the class) -- the objects can be called like functions as well.']], [[' class MyView(object):\n    def __init__(self, parameters):\n        # initialize instance\n\n    def __call__(self, request, slug):\n        # main view code goes here\n\nfirst_view = MyView("some parameter")\nsecond_view = MyView("some other parameter") # creates second object instance\n']], ['Pythonize Me: how to manage caller context variables in Python? (Python/Django)'], 2], [(2045175, 0), [['Try this regular expression:'], ['And if the  A s don’t need to be consecutive:']], [[' ^[^A]*((AA)+[^A]*)*$\n']], ['Regex match even number of letters'], 2], [(2045175, 1), [['And if the  A s don’t need to be consecutive:'], ['-10000']], [[' ^[^A]*(A[^A]*A[^A]*)*$\n']], ['Regex match even number of letters'], 2], [(2046050, 0), [['Simplest code I can think:'], ['Example usage:']], [[' import readline\nCOMMANDS = [\'extra\', \'extension\', \'stuff\', \'errors\',\n            \'email\', \'foobar\', \'foo\']\n\ndef complete(text, state):\n    for cmd in COMMANDS:\n        if cmd.startswith(text):\n            if not state:\n                return cmd\n            else:\n                state -= 1\n\nreadline.parse_and_bind("tab: complete")\nreadline.set_completer(complete)\nraw_input(\'Enter section name: \')\n']], ['Tab Completion in Python Command Line Interface - how to catch Tab events'], 2], [(2046050, 1), [['Example usage:'], ['Besides completion,  readline  provides you with:']], [[' Enter section name: <tab>\nemail      errors     extension  extra      foo        foobar    stuff\nEnter section name: e<tab>\nemail      errors     extension  extra      \nEnter section name: ext<tab>\nextension  extra      \n']], ['Tab Completion in Python Command Line Interface - how to catch Tab events'], 2], [(2047067, 0), [['The example suggests synchronizing with events, and leaves mail processing to the reader:'], ['Taking a hint from the question,  "something better"  can be:']], [[' # The method that gets called when a new email arrives. \n# Replace it with something better.\ndef dosync(self):\n    print "Got an event!"\n']], ['Find new messages added to an imap mailbox since I last checked with python imaplib2?'], 2], [(2047067, 1), [['Taking a hint from the question,  "something better"  can be:'], ['-10000']], [[' # Replaced with something better.\ndef dosync(self):\n    print "Got an event!"\n    res = self.M.recent()\n    print res\n']], ['Find new messages added to an imap mailbox since I last checked with python imaplib2?'], 2], [(2047814, 0), [['A quick, simple example you can run:'], ['Then I can use it like this:']], [[" from sqlalchemy import Column, Integer, Unicode, UnicodeText, String\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\nfrom random import choice\nfrom string import letters\n\nengine = create_engine('sqlite:////tmp/teste.db', echo=True)\nBase = declarative_base(bind=engine)\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(Unicode(40))\n    address = Column(UnicodeText, nullable=True)\n    password = Column(String(20))\n\n    def __init__(self, name, address=None, password=None):\n        self.name = name\n        self.address = address\n        if password is None:\n            password = ''.join(choice(letters) for n in xrange(10))\n        self.password = password\n\nBase.metadata.create_all()\n\nSession = sessionmaker(bind=engine)\ns = Session()\n"]], ['Is it possible to store Python class objects in SQLite?'], 4], [(2047814, 1), [['Then I can use it like this:'], ['That would run  INSERT  statements against the database.']], [[" # create instances of my user object\nu = User('nosklo')\nu.address = '66 Some Street #500'\n\nu2 = User('lakshmipathi')\nu2.password = 'ihtapimhskal'\n\n# testing\ns.add_all([u, u2])\ns.commit()\n"]], ['Is it possible to store Python class objects in SQLite?'], 4], [(2047814, 2), [['That would run  INSERT  statements against the database.'], ['The printed result would be:']], [[' # When you query the data back it returns instances of your class:\n\nfor user in s.query(User):\n    print type(user), user.name, user.password\n']], ['Is it possible to store Python class objects in SQLite?'], 4], [(2047814, 3), [['The printed result would be:'], ["So you're effectively storing your object into the database, the best way."]], [[" <class '__main__.User'> nosklo aBPDXlTPJs\n<class '__main__.User'> lakshmipathi ihtapimhskal\n"]], ['Is it possible to store Python class objects in SQLite?'], 4], [(2048779, 0), [['Example (tested) for Python 2.5 and 2.6:'], ["Note: 2.6 only; if you need it for 2.5 use a conditional  heapreplace()  as explained in the docs. Uses  heappush()  and  heappushpop()  which don't have the  key  arg :-( so we have to fake it."]], [[' import heapq, glob\n\ndef my_iterable():\n    for fname in glob.glob("in_s*.txt"):\n        f = open(fname, "r")\n        for line in f:\n            items = line.split()\n            yield fname, items[0], float(items[6])\n        f.close()\n\nresult = heapq.nsmallest(10, my_iterable(), lambda x: x[2])\nprint result\n']], ['Search and sort data from several files'], 2], [(2048779, 1), [["Note: 2.6 only; if you need it for 2.5 use a conditional  heapreplace()  as explained in the docs. Uses  heappush()  and  heappushpop()  which don't have the  key  arg :-( so we have to fake it."], ['-10000']], [[' import glob\nfrom heapq import heappush, heappushpop\nfrom pprint import pprint as pp\n\ndef my_iterable():\n    for fname in glob.glob("in_s*.txt"):\n        f = open(fname, "r")\n        for line in f:\n            items = line.split()\n            yield -float(items[6]), fname, items[0]\n        f.close()\n\ndef homegrown_nlargest(n, iterable):\n    """Ensures heap never has more than n entries"""\n    heap = []\n    for item in iterable:\n        if len(heap) < n:\n            heappush(heap, item)\n        else:\n            heappushpop(heap, item)\n    return heap\n\nresult =  homegrown_nlargest(10, my_iterable())\nresult = sorted(result, reverse=True)\nresult = [(fname, fld0, -negfld6) for negfld6, fname, fld0 in result]\npp(result)\n']], ['Search and sort data from several files'], 2], [(2050637, 0), [['The simplest way to do this is with a list comprehension:'], ['Also, if you do not actually need a list, but just need an iterator, a generator expression can be more efficient (although it does not likely matter on short lists):']], [[' [s + mystring for s in mylist]\n']], ['Appending the same string to a list of strings in Python'], 2], [(2050637, 1), [['Also, if you do not actually need a list, but just need an iterator, a generator expression can be more efficient (although it does not likely matter on short lists):'], ['These are very powerful, flexible, and concise.  Every good python programmer should learn to wield them.']], [[' (s + mystring for s in mylist)\n']], ['Appending the same string to a list of strings in Python'], 2], [(2051744, 0), [['There is a new API that makes this even simpler.'], ['and/or']], [[' plt.gca().invert_xaxis()\n']], ['Reverse Y-Axis in PyPlot'], 2], [(2051744, 1), [['and/or'], ['-10000']], [[' plt.gca().invert_yaxis()\n']], ['Reverse Y-Axis in PyPlot'], 2], [(2051905, 0), [['An example of GConf key editing (background wallpaper) in Python:'], ['Found  http://therning.org/magnus/archives/57  , and I trimmed out the GTK stuff. Of course, this would make some good  getitem  and  setitem  usage to map for example:']], [[' #! /usr/bin/python\n\nimport gtk\nimport gtk.glade\nimport gconf\n\nclass GConfExample:\n    def __init__(self):\n        self.client = gconf.client_get_default()\n\n    def get_key(self, key):\n        return client.get_string(key)\n\n    def set_key(self, key, val):\n        client.set_string(key, str(val))\n']], ['access to gnome configuration information using python'], 3], [(2051905, 1), [['Found  http://therning.org/magnus/archives/57  , and I trimmed out the GTK stuff. Of course, this would make some good  getitem  and  setitem  usage to map for example:'], ['Also some good information  here  about using the API. Of course, my example is poor, but illustrates the simplicity of the API. Here are more methods:']], [[" mygconf['/path/to/key'];\n"]], ['access to gnome configuration information using python'], 3], [(2051905, 2), [['Also some good information  here  about using the API. Of course, my example is poor, but illustrates the simplicity of the API. Here are more methods:'], ['And each  get_*  has an equivalent setter  set_*  in most cases.']], [[' foo = self.gconf_client.get_string("/path/to/my/config/data/foo")\nbar = self.gconf_client.get_int("/path/to/my/config/data/bar")\nbaz = self.gconf_client.get_bool("/path/to/my/config/data/baz")\n']], ['access to gnome configuration information using python'], 3], [(2052111, 0), [["You can use this as a single call that will get b if it exists, or set b to an empty list if it doesn't already exist - and either way, return b:"], ['Combine this with a simple "not in" check and you\'ve done what you\'re after in three lines:']], [[" >>> key = 'b'\n>>> val = 'a'\n>>> print d\n{}\n>>> d.setdefault(key, []).append(val)\n>>> print d\n{'b': ['a']}\n>>> d.setdefault(key, []).append('zee')\n>>> print d\n{'b': ['a', 'zee']}\n"]], ['Efficient way to either create a list, or append to it if one already exists?'], 2], [(2052111, 1), [['Combine this with a simple "not in" check and you\'ve done what you\'re after in three lines:'], ['-10000']], [[" >>> b = d.setdefault('b', [])\n>>> if val not in b:\n...   b.append(val)\n... \n>>> print d\n{'b': ['a', 'zee', 'c']}\n"]], ['Efficient way to either create a list, or append to it if one already exists?'], 2], [(2052369, 0), [["Okay here's some code, first the threading example:"], ['And a second, more simple example with custom events:']], [[' #!usr/bin/env python\n\nimport wx\nimport threading\nimport Queue\nimport random\nimport time\n\nTextEventType = wx.NewEventType()\nEVT_THREAD_TEXT_EVENT = wx.PyEventBinder(TextEventType, 1)\n\nglobal_queue = Queue.Queue()\n\ndef threadStart(numthrds, queue, window):\n    for i in range(numthrds):\n        i = TextThread(queue, window)\n\nclass TextThread(threading.Thread):\n    def __init__(self, queue, output_window):\n        threading.Thread.__init__(self)\n        self.inqueue = queue\n        self.output_window = output_window\n        self.start()\n\n\n    def run(self):\n        word = self.inqueue.get()\n        self.setName(word.upper())\n        wait = random.randrange(1, 10)\n        time.sleep(wait)\n        msg = \'Thread: \' + self.getName() + \'--wait= \' + str(wait) + \' \' + word\n        evt = NewTextEvent(TextEventType, -1)\n        evt.setText(msg)\n        wx.PostEvent(self.output_window, evt) #post EVT_THREAD_TEXT_EVENT\n        #self.inqueue.task_done() #may not need this if non-blocking\n\n\n\nclass NewTextEvent(wx.PyCommandEvent):\n    def __init__(self, evtType, id):\n        wx.PyCommandEvent.__init__(self, evtType, id)\n\n        self.msg = \'\'\n\n    def setText(self, text):\n        self.msg = text\n\n    def getText(self):\n        return self.msg\n\nclass TextFrame(wx.Frame):\n    def __init__(self, parent, id, *args, **kwargs):\n        wx.Frame.__init__(self, parent, id, *args, **kwargs)\n        self.queue = Queue.Queue()\n        framesizer = wx.BoxSizer(wx.VERTICAL)\n        self.panel = ThreadPanel(self, wx.ID_ANY)\n        framesizer.Add(self.panel, 0, wx.EXPAND)\n        self.SetSizerAndFit(framesizer)\n\n        self.Bind(EVT_THREAD_TEXT_EVENT, self.OnThreadText)\n\n    def OnThreadText(self, evt):\n        msg = evt.getText()\n        self.panel.out_tc.AppendText(msg + \'\\n\')\n\nclass ThreadPanel(wx.Panel):\n    def __init__(self, parent, id, *args, **kwargs):\n        wx.Panel.__init__(self, parent, *args, **kwargs)\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        self.wordtc = wx.TextCtrl(self, id=wx.ID_ANY, value=\'\', size=(350, -1))\n        self.inst_text = wx.StaticText(self, wx.ID_ANY,\n            label=\'Enter a list of space-separated words\')\n        self.out_tc = wx.TextCtrl(self, id=wx.ID_ANY, size=(350, 300), \n            value=\'\', style=wx.TE_MULTILINE)\n        self.start_button = wx.Button(self, wx.ID_ANY, label=\'Start Threads\')\n\n        vsizer.Add(self.inst_text, 0, wx.ALIGN_LEFT)\n        vsizer.Add(self.wordtc, 0, wx.EXPAND)\n        vsizer.Add(self.start_button)\n        vsizer.Add((100,100))\n        vsizer.Add(self.out_tc, 0, wx.EXPAND)\n        self.SetSizer(vsizer)\n        self.Bind(wx.EVT_BUTTON, self.OnStartButton, self.start_button)\n\n    def OnStartButton(self, evt):\n        self.out_tc.Clear()\n        text = self.wordtc.GetValue()\n        self.wordtc.Clear()\n        if not text.count(\',\'):\n            text = text.split(\' \')\n        num_thrds = len(text)\n        for word in text:\n            word = word.strip()\n            self.GetParent().queue.put(word)\n        threadStart(num_thrds, self.GetParent().queue, self.GetParent())\n\n\n\n\nif __name__ == "__main__":\n    app = wx.App()\n    frame = TextFrame(None, wx.ID_ANY, \'Thread test\')\n    frame.Show()    \n    app.MainLoop()\n']], ['Updating the wx.gauge without while-loop'], 2], [(2052369, 1), [['And a second, more simple example with custom events:'], ['-10000']], [[' #!usr/bin/env python\n\nimport wx\nimport random\n\ncolorEventType = wx.NewEventType()\nEVT_COLOR_EVENT = wx.PyEventBinder(colorEventType, 1)\n\nclass ButtonPanel(wx.Panel):\n    def __init__(self, parent, *args, **kwargs):\n        wx.Panel.__init__(self, parent, *args, **kwargs)\n\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        self.rstbutt = wx.Button(self, wx.ID_ANY, label=\'Restore\')\n        self.rstbutt.Disable()\n        self.Bind(wx.EVT_BUTTON, self.OnButt, self.rstbutt)\n        vsizer.Add(self.rstbutt, 0, wx.ALIGN_CENTER)\n        vsizer.Add((500,150), 0)\n        self.SetSizer(vsizer)\n\n    def OnButt(self, evt):\n        self.SetBackgroundColour(wx.NullColor)\n        self.GetParent().Refresh()\n        self.rstbutt.Disable()\n\nclass ColorEvent(wx.PyCommandEvent):\n    def __init__(self, evtType, id):\n        wx.PyCommandEvent.__init__(self, evtType, id)\n        self.color = None\n\n    def SetMyColor(self, color):\n        self.color = color\n\n    def GetMyColor(self):\n        return self.color\n\nclass MainFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        wx.Frame.__init__(self, parent, *args, **kwargs)\n        framesizer = wx.BoxSizer(wx.VERTICAL)\n        self.panel = ButtonPanel(self, wx.ID_ANY)\n        framesizer.Add(self.panel, 1, wx.EXPAND)\n\n        menubar = wx.MenuBar()\n        filemenu = wx.Menu()\n        menuquit = filemenu.Append(wx.ID_ANY, \'&Quit\')\n        menubar.Append(filemenu, \'File\')\n        colormenu = wx.Menu()\n        switch = colormenu.Append(wx.ID_ANY, \'&Switch Color\')\n        menubar.Append(colormenu, \'&Color\')\n        self.SetMenuBar(menubar)\n\n        self.Bind(wx.EVT_MENU, self.OnQuit, menuquit)\n        self.Bind(wx.EVT_MENU, self.OnColor, switch)\n        self.Bind(EVT_COLOR_EVENT, self.ColorSwitch)\n        self.SetSizerAndFit(framesizer)\n\n    def OnQuit(self, evt):\n        self.Close()\n\n    def OnColor(self, evt):\n        colevt = ColorEvent(colorEventType, -1) \n        colors = [\'red\', \'green\', \'blue\', \'white\', \'black\', \'pink\', \n            (106, 90, 205), #slate blue\n            (64, 224, 208), #turquoise\n            ]\n        choice = random.choice(colors)\n        colevt.SetMyColor(choice)\n        self.GetEventHandler().ProcessEvent(colevt)\n        #evt.Skip()\n\n    def ColorSwitch(self, evt):\n        color = evt.GetMyColor()\n        #print(color)\n        self.panel.SetBackgroundColour(color)\n        self.Refresh()\n        self.panel.rstbutt.Enable()\n\n\n\nif __name__ == "__main__":\n    app = wx.App()\n    frame = MainFrame(None, wx.ID_ANY, title="Change Panel Color Custom Event")\n    frame.Show(True)\n\n    app.MainLoop()\n']], ['Updating the wx.gauge without while-loop'], 2], [(2052673, 0), [["Here's the solution I came up with. I added the following method to my custom  webapp.RequestHandler  subclass:"], ['Now, when handling uploaded files, I can do something like the following:']], [[' # Required imports\nimport cgi\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\ndef get_uploaded_files(self):\n    """Gets a dictionary mapping field names to SimpleUploadedFile objects\n    for each uploaded file in the given params.  Suitable for passing to a\n    Django form as the `files` argument."""\n    return dict((k, SimpleUploadedFile(v.filename, v.file.read()))\n                for k, v in self.request.params.items()\n                if isinstance(v, cgi.FieldStorage) and v.file)\n']], ['Uploading files to App Engine using webapp and Django forms'], 2], [(2052673, 1), [['Now, when handling uploaded files, I can do something like the following:'], ['This works well for me so far.']], [[' form = MyForm(self.request.params, self.get_uploaded_files())\n']], ['Uploading files to App Engine using webapp and Django forms'], 2], [(2054438, 0), [['After you have updated the names/IDs, then you might look into SVG scripting. I would just create a javascript/ecmascript map or dictionary that has the relevant information for the language:'], ['The SVG would look something like:']], [[' var langaugeMap = {};\nlanguageMap["cah"] = { name: "Cahuilla", color: "rgb(255, 0, 0)" };\nlanguageMap["cup"] = { name: "Cupeño", color: "rgb(255, 64, 0)" };\n// and so on -- this could even be generated from a CSV file or Excel, etc.\n// if the highlighted color is always the same, then you don\'t need it in the map\n// or use style sheets for an activeshape and inactiveshape\n// Put any information that is specific to a language in the map\n']], ['Suggestions on manipulating an SVG map'], 2], [(2054438, 1), [['The SVG would look something like:'], ['For any automation with the SVG file, I would use Inkscape extensions. Look at the  Inkscape wiki  under the Developer Tutorials / Extensions. Otherwise, SVG is still XML so if you have named your language regions in the source file with a distinguishing name, you could use Python to parse the XML and save each path/language region to a separate file.']], [[' <path\n   style="fill:#800000;fill-opacity:1;display:inline"\n   d="m 422.43078,517.40746 c 0.52151,0.006 1.10755,0.0374 1.75925,0.0825 3.82011,0.26462 5.01088,0.75501 5.75001,2.37491 0.51312,1.12355 2.4121,3.0097 4.22213,4.1946 3.906,2.55656 7.38824,2.07964 9.61517,-1.3194 2.12996,-3.25075 9.13451,-3.19196 13.61739,0.11545 1.77185,1.30707 4.04994,2.38037 5.06319,2.38041 1.01325,0 3.34593,0.92548 5.18421,2.06155 2.52816,1.56236 4.9918,2.09869 10.09889,2.19902 3.71359,0.0729 7.68145,0.64349 8.82374,1.26442 2.81717,1.53202 5.67633,1.42382 10.7693,-0.40133 4.97461,-1.78261 6.31161,-1.36525 17.10267,5.31063 3.39862,2.10239 6.90491,4.08094 7.7956,4.39801 2.46593,0.8776 4.55428,4.66976 3.95259,7.17971 -0.29359,1.22605 -0.75898,3.51121 -1.03349,5.07968 -0.27411,1.56855 -0.88382,3.33952 -1.35761,3.93621 -1.50842,1.89871 -20.98501,7.77151 -27.8945,8.41122 -3.66014,0.33879 -8.3091,1.04337 -10.32987,1.56676 -3.50666,0.90799 -3.81743,0.79746 -6.78388,-2.44089 -3.3486,-3.65594 -6.11308,-4.2716 -8.48815,-1.89661 -2.14408,2.14401 -1.85126,3.96434 1.0667,6.66846 1.40725,1.30409 1.85699,2.10446 1.00027,1.77571 -0.85672,-0.32883 -6.3937,-0.12213 -12.3033,0.46176 -5.9096,0.58386 -12.56062,1.27336 -14.78297,1.53381 -4.17058,0.4888 -5.09869,-0.37014 -2.61673,-2.42989 2.1563,-1.78956 1.74245,-2.63318 -1.65999,-3.36449 -1.69931,-0.36525 -4.94789,-1.90738 -7.213,-3.42496 -2.26473,-1.51754 -5.89662,-3.66823 -8.07583,-4.77731 -2.17921,-1.10923 -6.21922,-3.94186 -8.97721,-6.29463 -4.75318,-4.05478 -4.93682,-4.36681 -3.43604,-6.02527 0.96935,-1.07117 2.36209,-1.56397 3.5899,-1.26992 1.62639,0.38937 2.49494,-0.41237 4.59588,-4.24958 1.42481,-2.60257 2.23686,-4.95457 1.80316,-5.22266 -0.4337,-0.26805 -1.06784,-3.14557 -1.40725,-6.39358 -0.33978,-3.24797 -1.19001,-6.79064 -1.89134,-7.87242 -1.74322,-2.68957 -1.2114,-3.65437 2.44111,-3.61188 l 0,0 z"\n   id="cah"\n   inkscape:label="#cah"\n   onmouseover="highlightRegion(evt);"\n   onmouseout="restoreRegion(evt);" />\n']], ['Suggestions on manipulating an SVG map'], 2], [(2055107, 0), [["I've made a small test that does not confirm your results.\nHere is the source:"], ['These are the results with mylist=[]:']], [[' import meminfo, gc, commands\n\npage_size = int(commands.getoutput("getconf PAGESIZE"))\n\ndef stat(message):\n    s = meminfo.proc_stat()\n    print "My memory usage %s: RSS: %dkb, VSIZE: %dkb" % (\n        message, s[\'rss\']*page_size/1024, s[\'vsize\']/1024)\nmylist = []\n\nstat("before allocating a big list")\nfor i in range(0,3000000):\n    mylist.append(\'something here to take memory\')\n\nstat("after allocating big list")\n### uncomment one of these:\nmylist = []\n# del mylist[:]\nstat("after dropping a big list")\ngc.collect()\nstat("after gc.collect()")\ngc.collect()\nstat("after second gc.collect()")\ngc.collect()\nstat("after third gc.collect()")\n']], ['python memory del list[:] vs list = []'], 3], [(2055107, 1), [['These are the results with mylist=[]:'], ['This are the results with del mylist[:]:']], [[' My memory usage before allocating a big list: RSS: 3396kb, VSIZE: 7324kb\nMy memory usage after allocating big list: RSS: 50700kb, VSIZE: 55084kb\nMy memory usage after dropping a big list: RSS: 38980kb, VSIZE: 42824kb\nMy memory usage after gc.collect(): RSS: 38980kb, VSIZE: 42824kb\nMy memory usage after second gc.collect(): RSS: 38980kb, VSIZE: 42824kb\nMy memory usage after third gc.collect(): RSS: 38980kb, VSIZE: 42824kb\n']], ['python memory del list[:] vs list = []'], 3], [(2055107, 2), [['This are the results with del mylist[:]:'], ['Python may allocate memory for its own heap, but it does not necessarily free it immediately after garbage collection.']], [[' My memory usage before allocating a big list: RSS: 3392kb, VSIZE: 7324kb\nMy memory usage after allocating big list: RSS: 50696kb, VSIZE: 55084kb\nMy memory usage after dropping a big list: RSS: 38976kb, VSIZE: 42824kb\nMy memory usage after gc.collect(): RSS: 38976kb, VSIZE: 42824kb\nMy memory usage after second gc.collect(): RSS: 38976kb, VSIZE: 42824kb\nMy memory usage after third gc.collect(): RSS: 38976kb, VSIZE: 42824kb\n']], ['python memory del list[:] vs list = []'], 3], [(2055738, 0), [["Not sure if it's the best way, but here's one way:"], ['Result will contain']], [[" lines = open('file.txt')\nfor line in lines:\n   as_list = line.split()\n   result = [as_list[0], as_list[1], as_list[2:]]\n   print result\n"]], ['Help with Python strings'], 2], [(2055738, 1), [['Result will contain'], ['-10000']], [[" ['index', 'command', ['param1', 'param2', 'param3']]\n"]], ['Help with Python strings'], 2], [(2056752, 0), [['For example :'], ['With Lombok, the above example reduces to :']], [[' class Point{\n  private int x, y;\n\n  public Point(int x, int y){\n    this.x = x;\n    this.y = y;\n  }\n\n  public void setX(int x){\n    this.x = x;\n  }\n\n  public int getX(){\n    return x;\n  }\n\n  public void setY(int y){\n    this.y = y;\n  }\n\n  public int getY(){\n    return y;\n  }\n}\n']], ["What is the Java Equivalent of Python's property()?"], 2], [(2056752, 1), [['With Lombok, the above example reduces to :'], ['-10000']], [[' class Point{\n  @Getter @Setter private int x, y;\n\n  public Point(int x, int y){\n    this.x = x;\n    this.y = y;\n  }\n}\n']], ["What is the Java Equivalent of Python's property()?"], 2], [(2058884, 0), [['In principle, you  could  write something like this:'], ['Alternatively, this works too:']], [[' class Base\n{\n    public static T Get<T>(int id)\n        where T : Base, new()\n    {\n        return new T() { ID = id };\n    }\n\n    public int ID { get; set; }\n}\n']], ['Python-style classmethod for C#?'], 2], [(2058884, 1), [['Alternatively, this works too:'], ['You still need to pass the type back up to the base class, which allows you to write  Puppy.Get(10)  as expected.']], [[' class Base<T> where T : Base<T>, new()\n{\n    public static T Get(int id)\n    {\n        return new T() { ID = id };\n    }\n\n    public int ID { get; set; }\n}\n\nclass Puppy : Base<Puppy>\n{\n}\n\nclass Kitten : Base<Kitten>\n{\n}\n']], ['Python-style classmethod for C#?'], 2], [(2059013, 0), [['-10000'], ['Or, as Ipthnc points out below, the paths function can be shortened to:']], [[" import os\n\ndef paths(filename):\n    dirList = ['c:\\\\', 'y:\\\\', 'z:\\\\']\n    complete = [os.path.join(s, filename) for s in dirList]\n    return complete\n\ndef fileWrite():\n    for each_file in paths('c:\\\\peter.txt'):\n        text = 'Hello World'\n        file = open(each_file, 'w')\n        file.write(text)\n        file.close()\n"]], ['Utilizing objects in another class in Python'], 2], [(2059013, 1), [['Or, as Ipthnc points out below, the paths function can be shortened to:'], ['-10000']], [[" def paths(filename):\n    return [os.path.join(s, filename) for s in ('c:\\\\', 'y:\\\\', 'z:\\\\')]\n"]], ['Utilizing objects in another class in Python'], 2], [(2060972, 0), [["Peter Hansen's suggestion got me to look more carefully at  dictobject.c , and I realised that the update method in my original answer could be simplified a bit, since the built-in dictionary constructor simply calls the built-in update method anyway. So the second update in my answer has been added to the code below (by some helpful person ;-)."], ["I've tested it with this code:"]], [[' class MyUpdateDict(dict):\n    def __init__(self, *args, **kwargs):\n        self.update(*args, **kwargs)\n\n    def __setitem__(self, key, value):\n        # optional processing here\n        super(MyUpdateDict, self).__setitem__(key, value)\n\n    def update(self, *args, **kwargs):\n        if args:\n            if len(args) > 1:\n                raise TypeError("update expected at most 1 arguments, "\n                                "got %d" % len(args))\n            other = dict(args[0])\n            for key in other:\n                self[key] = other[key]\n        for key in kwargs:\n            self[key] = kwargs[key]\n\n    def setdefault(self, key, value=None):\n        if key not in self:\n            self[key] = value\n        return self[key]\n']], ['Subclassing Python dictionary to override __setitem__'], 2], [(2060972, 1), [["I've tested it with this code:"], ["and it passes. All other implementations I've tried have failed at some point. I'll still accept any answers that show me that I've missed something, but otherwise, I'm ticking the checkmark beside this one in a couple of days, and calling it the right answer :)"]], [[' def test_updates(dictish):\n    dictish[\'abc\'] = 123\n    dictish.update({\'def\': 234})\n    dictish.update(red=1, blue=2)\n    dictish.update([(\'orange\', 3), (\'green\',4)])\n    dictish.update({\'hello\': \'kitty\'}, black=\'white\')\n    dictish.update({\'yellow\': 5}, yellow=6)\n    dictish.setdefault(\'brown\',7)\n    dictish.setdefault(\'pink\')\n    try:\n        dictish.update({\'gold\': 8}, [(\'purple\', 9)], silver=10)\n    except TypeError:\n        pass\n    else:\n        raise RunTimeException("Error did not occur as planned")\n\npython_dict = dict([(\'b\',2),(\'c\',3)],a=1)\ntest_updates(python_dict)\n\nmy_dict = MyUpdateDict([(\'b\',2),(\'c\',3)],a=1)\ntest_updates(my_dict)\n']], ['Subclassing Python dictionary to override __setitem__'], 2], [(2061519, 0), [["If for some reason you can't use a more appropriate method from whatever you're searching, this is equivalent to your working code from the question:"], ['However, you\'ll get the most mileage out of writing an iterator for finding these matches, "transforming" your current find function:']], [[' start = 0\ncount = 0\nfor match in iter(lambda: find(target, key, start), -1):\n  count += 1\n  start = match + 1\nreturn count\n']], ['Assigning value in a while comparison expression'], 3], [(2061519, 1), [['However, you\'ll get the most mileage out of writing an iterator for finding these matches, "transforming" your current find function:'], ['Then count from that:']], [[' def findall(target, key, start=0):\n  for match in iter(lambda: find(target, key, start), -1):\n    yield match\n    start = match + 1\n']], ['Assigning value in a while comparison expression'], 3], [(2061519, 2), [['Then count from that:'], ['-10000']], [[' count = sum(1 for m in findall(target, key))\n']], ['Assigning value in a while comparison expression'], 3], [(2061718, 0), [['An approach that works for your specific example is:'], ['which emits']], [[' from BeautifulSoup import BeautifulSoup\n\nht = \'\'\'\n<div id="abc">\n    some long text goes <a href="/"> here </a> and hopefully it \n    will get picked up by the parser as content\n</div>\n\'\'\'\nsoup = BeautifulSoup(ht)\n\nanchors = soup.findAll(\'a\')\nfor a in anchors:\n  a.previousSibling.replaceWith(a.previousSibling + a.string)\n\nresults = soup.findAll(text=lambda(x): len(x) > 20)\n\nprint results\n']], ['Using Beautiful Soup Python module to replace tags with plain text'], 2], [(2061718, 1), [['which emits'], ['Of course, you\'ll probably need to take a bit more care, i.e., what if there\'s no  a.string , or if  a.previousSibling  is  None  -- you\'ll need suitable  if  statements to take care of such corner cases.  But I hope this general idea can help you.  (In fact you may want to  also  merge the  next  sibling if it\'s a string -- not sure how that plays with your heuristics  len(x) > 20 , but say for example that you have two 9-character strings with an  <a>  containing a 5-character strings in the middle, perhaps you\'d want to pick up the lot as a "23-characters string"? I can\'t tell because I don\'t understand the motivation for your heuristic).']], [[" $ python bs.py\n[u'\\n    some long text goes  here ', u' and hopefully it \\n    will get picked up by the parser as content\\n']\n"]], ['Using Beautiful Soup Python module to replace tags with plain text'], 2], [(2062368, 0), [['Definitely a case for a list comprehension:'], ['Here I\'m taking your "having \'a\'  in  the first element" literally, whence the use of the  in  operator.  If you want to restrict this to "having \'a\'  as  the first element" (a very different thing from what you actually wrote!-), then']], [[" m = [row for row in l if 'a' in row[0]]\n"]], ['Filter array to show rows with a specific value in a specific column'], 2], [(2062368, 1), [['Here I\'m taking your "having \'a\'  in  the first element" literally, whence the use of the  in  operator.  If you want to restrict this to "having \'a\'  as  the first element" (a very different thing from what you actually wrote!-), then'], ['is more like it;-).']], [[" m = [row for row in l if 'a' == row[0]]\n"]], ['Filter array to show rows with a specific value in a specific column'], 2], [(2063175, 0), [['See  :h smartindent'], ["I believe you don't need smartindenting while coding python. So just remove it from your settings or add the following to your .vimrc:"]], [[' When typing \'#\' as the first character in a new line, the indent for\nthat line is removed, the \'#\' is put in the first column.  The indent\nis restored for the next line.  If you don\'t want this, use this\nmapping: ":inoremap # X^H#", where ^H is entered with CTRL-V CTRL-H.\nWhen using the ">>" command, lines starting with \'#\' are not shifted\nright.\n']], ['Comments (#) go to start of line in the insert mode in Vim'], 2], [(2063175, 1), [["I believe you don't need smartindenting while coding python. So just remove it from your settings or add the following to your .vimrc:"], ['-10000']], [[' au! FileType python setl nosmartindent\n']], ['Comments (#) go to start of line in the insert mode in Vim'], 2], [(2064389, 0), [['-10000'], ['or']], [[' >>> a = set([1, 2, 3])\n>>> b = set([1, 2, 3, 4, 5, 6])\n>>> a.issubset(b)\nTrue\n']], ['Python not all in operation'], 3], [(2064389, 1), [['or'], ['or (if the number of elements is important)']], [[' >>> a = [1, 2, 3]\n>>> b = [1, 2, 3, 4, 5, 6]\n>>> all(map(lambda x: x in b, a))\nTrue\n>>> a = [1, 2, 3, 9]\n>>> all(map(lambda x: x in b, a))\nFalse\n']], ['Python not all in operation'], 3], [(2064389, 2), [['or (if the number of elements is important)'], ['-10000']], [[' >>> a = [1, 1, 2, 3]\n>>> all(map(lambda x: a.count(x) <= b.count(x), a))\nFalse\n']], ['Python not all in operation'], 3], [(2064491, 0), [['there is  code.InteractiveInterpreter  available, but I think you can take an inspiration in the following simpler example:'], ['producing the following output:']], [[' import code\n\nexprs = [\n    \'d = {}\',\n    \'d\',\n    \'d["x"] = 1\',\n    \'d\',\n   ]\n\nfor e in exprs:\n    print \'>>> %s\' % e\n    cmd = code.compile_command(e)\n    r = eval(cmd)\n    if r:\n        print repr(r)\n']], ['Executing python code from script and getting interpreter-style output'], 2], [(2064491, 1), [['producing the following output:'], ['-10000']], [[' >>> d = {}\n>>> d\n{}\n>>> d["x"] = 1\n>>> d\n{\'x\': 1}\n']], ['Executing python code from script and getting interpreter-style output'], 2], [(2065553, 0), [['Here is one way to solve this problem:'], ['You can use it like this.']], [[' def sum_to_n(n, size, limit=None):\n    """Produce all lists of `size` positive integers in decreasing order\n    that add up to `n`."""\n    if size == 1:\n        yield [n]\n        return\n    if limit is None:\n        limit = n\n    start = (n + size - 1) // size\n    stop = min(limit, n - size + 1) + 1\n    for i in range(start, stop):\n        for tail in sum_to_n(n - i, size - 1, i):\n            yield [i] + tail\n']], ['Get all numbers that add up to a number'], 2], [(2065553, 1), [['You can use it like this.'], ['-10000']], [[' for partition in sum_to_n(6, 3):\n    print partition\n\n[2, 2, 2]\n[3, 2, 1]\n[4, 1, 1]\n']], ['Get all numbers that add up to a number'], 2], [(2067627, 0), [['Objects can be used to retain or even add richness to the data structure in a saner, more organized way. For instance, it appears the  item  and  price  always go together. So the two pieces of data might as well be paired in an object:'], ['Similarly, a person seems to have an  id  and  name  and a set of possessions:']], [[' class Item(object):\n    def __init__(self,name,price):\n        self.name=name\n        self.price=price\n']], ['python list of dicts how to merge key:value where values are same?'], 5], [(2067627, 1), [['Similarly, a person seems to have an  id  and  name  and a set of possessions:'], ['If you buy into the idea of using classes like these, then your  list_dicts  could become']], [[' class Person(object):\n    def __init__(self,id,name,*items):\n        self.id=id\n        self.name=name\n        self.items=set(items)\n']], ['python list of dicts how to merge key:value where values are same?'], 5], [(2067627, 2), [['If you buy into the idea of using classes like these, then your  list_dicts  could become'], ["Then, to merge the people based on  id , you could use Python's  reduce  function,\nalong with  take_items , which takes (merges) the items from one person and gives them to another:"]], [[" list_people = [\n    Person('001','jim',Item('pencil',0.99)),\n    Person('002','mary',Item('book',15.49)),\n    Person('002','mary',Item('tape',7.99)),\n    Person('003','john',Item('pen',3.49)),\n    Person('003','john',Item('stapler',9.49)),\n    Person('003','john',Item('scissors',12.99)), \n]\n"]], ['python list of dicts how to merge key:value where values are same?'], 5], [(2067627, 3), [["Then, to merge the people based on  id , you could use Python's  reduce  function,\nalong with  take_items , which takes (merges) the items from one person and gives them to another:"], ['Putting it all together:']], [[" def take_items(person,other):\n    '''\n    person takes other's items.\n    Note however, that although person may be altered, other remains the same --\n    other does not lose its items.    \n    '''\n    person.items.update(other.items)\n    return person\n"]], ['python list of dicts how to merge key:value where values are same?'], 5], [(2067627, 4), [['Putting it all together:'], ['-10000']], [[" import itertools\nimport operator\n\nclass Item(object):\n    def __init__(self,name,price):\n        self.name=name\n        self.price=price\n    def __str__(self):\n        return '{0} {1}'.format(self.name,self.price)\n\nclass Person(object):\n    def __init__(self,id,name,*items):\n        self.id=id\n        self.name=name\n        self.items=set(items)\n    def __str__(self):\n        return '{0} {1}: {2}'.format(self.id,self.name,map(str,self.items))\n\nlist_people = [\n    Person('001','jim',Item('pencil',0.99)),\n    Person('002','mary',Item('book',15.49)),\n    Person('002','mary',Item('tape',7.99)),\n    Person('003','john',Item('pen',3.49)),\n    Person('003','john',Item('stapler',9.49)),\n    Person('003','john',Item('scissors',12.99)), \n]\n\ndef take_items(person,other):\n    '''\n    person takes other's items.\n    Note however, that although person may be altered, other remains the same --\n    other does not lose its items.    \n    '''\n    person.items.update(other.items)\n    return person\n\nlist_people2 = [reduce(take_items,g)\n                for k,g in itertools.groupby(list_people, lambda person: person.id)]\nfor person in list_people2:\n    print(person)\n"]], ['python list of dicts how to merge key:value where values are same?'], 5], [(2067710, 0), [['Searching for the players using your method will work, but will return 3 results per player. Easier to search for the table itself, and then iterate over the rows (except the header):'], ['To get the data you need:']], [[" table=soup.find('table', 'bioTableAlt')\nfor row in table.findAll('tr')[1:]:\n    cells = row.findAll('td')\n    #retreieve data from cells...\n"]], ['How to fetch some data conditionally with Python and Beautiful Soup'], 2], [(2067710, 1), [['To get the data you need:'], ['-10000']], [["     rank = cells[0].string\n    player = cells[1].a.string\n    link = cells[1].a['href']\n"]], ['How to fetch some data conditionally with Python and Beautiful Soup'], 2], [(2068372, 0), [['Of the plain Python methods tested,  with psyco , for n=1000000,\n rwh_primes1  was the fastest tested.'], ['Of the plain Python methods tested,  without psyco , for n=1000000,\n rwh_primes2  was the fastest.']], [[' +---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| rwh_primes1         | 43.0  |\n| sieveOfAtkin        | 46.4  |\n| rwh_primes          | 57.4  |\n| sieve_wheel_30      | 63.0  |\n| rwh_primes2         | 67.8  |    \n| sieveOfEratosthenes | 147.0 |\n| ambi_sieve_plain    | 152.0 |\n| sundaram3           | 194.0 |\n+---------------------+-------+\n']], ['Fastest way to list all primes below N'], 5], [(2068372, 1), [['Of the plain Python methods tested,  without psyco , for n=1000000,\n rwh_primes2  was the fastest.'], ['Of all the methods tested,  allowing numpy , for n=1000000,\n primesfrom2to  was the fastest tested.']], [[' +---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| rwh_primes2         | 68.1  |\n| rwh_primes1         | 93.7  |\n| rwh_primes          | 94.6  |\n| sieve_wheel_30      | 97.4  |\n| sieveOfEratosthenes | 178.0 |\n| ambi_sieve_plain    | 286.0 |\n| sieveOfAtkin        | 314.0 |\n| sundaram3           | 416.0 |\n+---------------------+-------+\n']], ['Fastest way to list all primes below N'], 5], [(2068372, 2), [['Of all the methods tested,  allowing numpy , for n=1000000,\n primesfrom2to  was the fastest tested.'], ['Timings were measured using the command:']], [[' +---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| primesfrom2to       | 15.9  |\n| primesfrom3to       | 18.4  |\n| ambi_sieve          | 29.3  |\n+---------------------+-------+\n']], ['Fastest way to list all primes below N'], 5], [(2068372, 3), [['Timings were measured using the command:'], ['primes.py:']], [[' python -mtimeit -s"import primes" "primes.{method}(1000000)"\n']], ['Fastest way to list all primes below N'], 5], [(2068372, 4), [['primes.py:'], ['Running the script tests that all implementations give the same result.']], [[' #!/usr/bin/env python\nimport psyco; psyco.full()\nfrom math import sqrt, ceil\nimport numpy as np\n\ndef rwh_primes(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    """ Returns  a list of primes < n """\n    sieve = [True] * n\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i]:\n            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)\n    return [2] + [i for i in xrange(3,n,2) if sieve[i]]\n\ndef rwh_primes1(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    """ Returns  a list of primes < n """\n    sieve = [True] * (n/2)\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)\n    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]\n\ndef rwh_primes2(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    """ Input n>=6, Returns a list of primes, 2 <= p < n """\n    correction = (n%6>1)\n    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]\n    sieve = [True] * (n/3)\n    sieve[0] = False\n    for i in xrange(int(n**0.5)/3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      ((k*k)/3)      ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)\n        sieve[(k*k+4*k-2*k*(i&1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&1))/6-1)/k+1)\n    return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]\n\ndef sieve_wheel_30(N):\n    # http://zerovolt.com/?p=88\n    \'\'\' Returns a list of primes <= N using wheel criterion 2*3*5 = 30\n\nCopyright 2009 by zerovolt.com\nThis code is free for non-commercial purposes, in which case you can just leave this comment as a credit for my work.\nIf you need this code for commercial purposes, please contact me by sending an email to: info [at] zerovolt [dot] com.\'\'\'\n    __smallp = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\n    61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\n    149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\n    229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\n    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\n    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,\n    499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\n    601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\n    691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\n    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\n    907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n\n    wheel = (2, 3, 5)\n    const = 30\n    if N < 2:\n        return []\n    if N <= const:\n        pos = 0\n        while __smallp[pos] <= N:\n            pos += 1\n        return list(__smallp[:pos])\n    # make the offsets list\n    offsets = (7, 11, 13, 17, 19, 23, 29, 1)\n    # prepare the list\n    p = [2, 3, 5]\n    dim = 2 + N // const\n    tk1  = [True] * dim\n    tk7  = [True] * dim\n    tk11 = [True] * dim\n    tk13 = [True] * dim\n    tk17 = [True] * dim\n    tk19 = [True] * dim\n    tk23 = [True] * dim\n    tk29 = [True] * dim\n    tk1[0] = False\n    # help dictionary d\n    # d[a , b] = c  ==> if I want to find the smallest useful multiple of (30*pos)+a\n    # on tkc, then I need the index given by the product of [(30*pos)+a][(30*pos)+b]\n    # in general. If b < a, I need [(30*pos)+a][(30*(pos+1))+b]\n    d = {}\n    for x in offsets:\n        for y in offsets:\n            res = (x*y) % const\n            if res in offsets:\n                d[(x, res)] = y\n    # another help dictionary: gives tkx calling tmptk[x]\n    tmptk = {1:tk1, 7:tk7, 11:tk11, 13:tk13, 17:tk17, 19:tk19, 23:tk23, 29:tk29}\n    pos, prime, lastadded, stop = 0, 0, 0, int(ceil(sqrt(N)))\n    # inner functions definition\n    def del_mult(tk, start, step):\n        for k in xrange(start, len(tk), step):\n            tk[k] = False\n    # end of inner functions definition\n    cpos = const * pos\n    while prime < stop:\n        # 30k + 7\n        if tk7[pos]:\n            prime = cpos + 7\n            p.append(prime)\n            lastadded = 7\n            for off in offsets:\n                tmp = d[(7, off)]\n                start = (pos + prime) if off == 7 else (prime * (const * (pos + 1 if tmp < 7 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 11\n        if tk11[pos]:\n            prime = cpos + 11\n            p.append(prime)\n            lastadded = 11\n            for off in offsets:\n                tmp = d[(11, off)]\n                start = (pos + prime) if off == 11 else (prime * (const * (pos + 1 if tmp < 11 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 13\n        if tk13[pos]:\n            prime = cpos + 13\n            p.append(prime)\n            lastadded = 13\n            for off in offsets:\n                tmp = d[(13, off)]\n                start = (pos + prime) if off == 13 else (prime * (const * (pos + 1 if tmp < 13 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 17\n        if tk17[pos]:\n            prime = cpos + 17\n            p.append(prime)\n            lastadded = 17\n            for off in offsets:\n                tmp = d[(17, off)]\n                start = (pos + prime) if off == 17 else (prime * (const * (pos + 1 if tmp < 17 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 19\n        if tk19[pos]:\n            prime = cpos + 19\n            p.append(prime)\n            lastadded = 19\n            for off in offsets:\n                tmp = d[(19, off)]\n                start = (pos + prime) if off == 19 else (prime * (const * (pos + 1 if tmp < 19 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 23\n        if tk23[pos]:\n            prime = cpos + 23\n            p.append(prime)\n            lastadded = 23\n            for off in offsets:\n                tmp = d[(23, off)]\n                start = (pos + prime) if off == 23 else (prime * (const * (pos + 1 if tmp < 23 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 29\n        if tk29[pos]:\n            prime = cpos + 29\n            p.append(prime)\n            lastadded = 29\n            for off in offsets:\n                tmp = d[(29, off)]\n                start = (pos + prime) if off == 29 else (prime * (const * (pos + 1 if tmp < 29 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # now we go back to top tk1, so we need to increase pos by 1\n        pos += 1\n        cpos = const * pos\n        # 30k + 1\n        if tk1[pos]:\n            prime = cpos + 1\n            p.append(prime)\n            lastadded = 1\n            for off in offsets:\n                tmp = d[(1, off)]\n                start = (pos + prime) if off == 1 else (prime * (const * pos + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n    # time to add remaining primes\n    # if lastadded == 1, remove last element and start adding them from tk1\n    # this way we don\'t need an "if" within the last while\n    if lastadded == 1:\n        p.pop()\n    # now complete for every other possible prime\n    while pos < len(tk1):\n        cpos = const * pos\n        if tk1[pos]: p.append(cpos + 1)\n        if tk7[pos]: p.append(cpos + 7)\n        if tk11[pos]: p.append(cpos + 11)\n        if tk13[pos]: p.append(cpos + 13)\n        if tk17[pos]: p.append(cpos + 17)\n        if tk19[pos]: p.append(cpos + 19)\n        if tk23[pos]: p.append(cpos + 23)\n        if tk29[pos]: p.append(cpos + 29)\n        pos += 1\n    # remove exceeding if present\n    pos = len(p) - 1\n    while p[pos] > N:\n        pos -= 1\n    if pos < len(p) - 1:\n        del p[pos+1:]\n    # return p list\n    return p\n\ndef sieveOfEratosthenes(n):\n    """sieveOfEratosthenes(n): return the list of the primes < n."""\n    # Code from: <dickinsm@gmail.com>, Nov 30 2006\n    # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d\n    if n <= 2:\n        return []\n    sieve = range(3, n, 2)\n    top = len(sieve)\n    for si in sieve:\n        if si:\n            bottom = (si*si - 3) // 2\n            if bottom >= top:\n                break\n            sieve[bottom::si] = [0] * -((bottom - top) // si)\n    return [2] + [el for el in sieve if el]\n\ndef sieveOfAtkin(end):\n    """sieveOfAtkin(end): return a list of all the prime numbers <end\n    using the Sieve of Atkin."""\n    # Code by Steve Krenzel, <Sgk284@gmail.com>, improved\n    # Code: https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83\n    # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin\n    assert end > 0\n    lng = ((end-1) // 2)\n    sieve = [False] * (lng + 1)\n\n    x_max, x2, xd = int(sqrt((end-1)/4.0)), 0, 4\n    for xd in xrange(4, 8*x_max + 2, 8):\n        x2 += xd\n        y_max = int(sqrt(end-x2))\n        n, n_diff = x2 + y_max*y_max, (y_max << 1) - 1\n        if not (n & 1):\n            n -= n_diff\n            n_diff -= 2\n        for d in xrange((n_diff - 1) << 1, -1, -8):\n            m = n % 12\n            if m == 1 or m == 5:\n                m = n >> 1\n                sieve[m] = not sieve[m]\n            n -= d\n\n    x_max, x2, xd = int(sqrt((end-1) / 3.0)), 0, 3\n    for xd in xrange(3, 6 * x_max + 2, 6):\n        x2 += xd\n        y_max = int(sqrt(end-x2))\n        n, n_diff = x2 + y_max*y_max, (y_max << 1) - 1\n        if not(n & 1):\n            n -= n_diff\n            n_diff -= 2\n        for d in xrange((n_diff - 1) << 1, -1, -8):\n            if n % 12 == 7:\n                m = n >> 1\n                sieve[m] = not sieve[m]\n            n -= d\n\n    x_max, y_min, x2, xd = int((2 + sqrt(4-8*(1-end)))/4), -1, 0, 3\n    for x in xrange(1, x_max + 1):\n        x2 += xd\n        xd += 6\n        if x2 >= end: y_min = (((int(ceil(sqrt(x2 - end))) - 1) << 1) - 2) << 1\n        n, n_diff = ((x*x + x) << 1) - 1, (((x-1) << 1) - 2) << 1\n        for d in xrange(n_diff, y_min, -8):\n            if n % 12 == 11:\n                m = n >> 1\n                sieve[m] = not sieve[m]\n            n += d\n\n    primes = [2, 3]\n    if end <= 3:\n        return primes[:max(0,end-2)]\n\n    for n in xrange(5 >> 1, (int(sqrt(end))+1) >> 1):\n        if sieve[n]:\n            primes.append((n << 1) + 1)\n            aux = (n << 1) + 1\n            aux *= aux\n            for k in xrange(aux, end, 2 * aux):\n                sieve[k >> 1] = False\n\n    s  = int(sqrt(end)) + 1\n    if s  % 2 == 0:\n        s += 1\n    primes.extend([i for i in xrange(s, end, 2) if sieve[i >> 1]])\n\n    return primes\n\ndef ambi_sieve_plain(n):\n    s = range(3, n, 2)\n    for m in xrange(3, int(n**0.5)+1, 2): \n        if s[(m-3)/2]: \n            for t in xrange((m*m-3)/2,(n>>1)-1,m):\n                s[t]=0\n    return [2]+[t for t in s if t>0]\n\ndef sundaram3(max_n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279\n    numbers = range(3, max_n+1, 2)\n    half = (max_n)//2\n    initial = 4\n\n    for step in xrange(3, max_n+1, 2):\n        for i in xrange(initial, half, step):\n            numbers[i-1] = 0\n        initial += 2*(step+1)\n\n        if initial > half:\n            return [2] + filter(None, numbers)\n\n################################################################################\n# Using Numpy:\ndef ambi_sieve(n):\n    # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html\n    s = np.arange(3, n, 2)\n    for m in xrange(3, int(n ** 0.5)+1, 2): \n        if s[(m-3)/2]: \n            s[(m*m-3)/2::m]=0\n    return np.r_[2, s[s>0]]\n\ndef primesfrom3to(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    """ Returns a array of primes, p < n """\n    assert n>=2\n    sieve = np.ones(n/2, dtype=np.bool)\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = False\n    return np.r_[2, 2*np.nonzero(sieve)[0][1::]+1]    \n\ndef primesfrom2to(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    """ Input n>=6, Returns a array of primes, 2 <= p < n """\n    sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)\n    sieve[0] = False\n    for i in xrange(int(n**0.5)/3+1):\n        if sieve[i]:\n            k=3*i+1|1\n            sieve[      ((k*k)/3)      ::2*k] = False\n            sieve[(k*k+4*k-2*k*(i&1))/3::2*k] = False\n    return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]\n\nif __name__==\'__main__\':\n    import itertools\n    import sys\n\n    def test(f1,f2,num):\n        print(\'Testing {f1} and {f2} return same results\'.format(\n            f1=f1.func_name,\n            f2=f2.func_name))\n        if not all([a==b for a,b in itertools.izip_longest(f1(num),f2(num))]):\n            sys.exit("Error: %s(%s) != %s(%s)"%(f1.func_name,num,f2.func_name,num))\n\n    n=1000000\n    test(sieveOfAtkin,sieveOfEratosthenes,n)\n    test(sieveOfAtkin,ambi_sieve,n)\n    test(sieveOfAtkin,ambi_sieve_plain,n) \n    test(sieveOfAtkin,sundaram3,n)\n    test(sieveOfAtkin,sieve_wheel_30,n)\n    test(sieveOfAtkin,primesfrom3to,n)\n    test(sieveOfAtkin,primesfrom2to,n)\n    test(sieveOfAtkin,rwh_primes,n)\n    test(sieveOfAtkin,rwh_primes1,n)         \n    test(sieveOfAtkin,rwh_primes2,n)\n']], ['Fastest way to list all primes below N'], 5], [(2069566, 0), [["Sure you can, using threads. Here's a server:"], ["It creates a server to listen on 9999 and another to listen on 12345. \nHere's a sample client you can use for testing this:"]], [[' import SocketServer\nimport threading\n\n\nclass MyUDPHandler(SocketServer.BaseRequestHandler):\n    def handle(self):\n        data = self.request[0].strip()\n        socket = self.request[1]\n        print "%s wrote:" % self.client_address[0]\n        print data\n        socket.sendto(data.upper(), self.client_address)\n\n\ndef serve_thread(host, port):\n    server = SocketServer.UDPServer((host, port), MyUDPHandler)\n    server.serve_forever()\n\n\nthreading.Thread(target=serve_thread,args=(\'localhost\', 9999)).start()\nthreading.Thread(target=serve_thread,args=(\'localhost\', 12345)).start()\n']], ['python listen 2 port same file'], 2], [(2069566, 1), [["It creates a server to listen on 9999 and another to listen on 12345. \nHere's a sample client you can use for testing this:"], ['Note: this was taken from the docs of the  SocketServer  module, and modified with threads.']], [[' import socket\nimport sys\n\nHOST, PORT = "localhost", 12345\ndata = \'da bomb\'\n\n# SOCK_DGRAM is the socket type to use for UDP sockets\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n# As you can see, there is no connect() call; UDP has no connections.\n# Instead, data is directly sent to the recipient via sendto().\nsock.sendto(data + "\\n", (HOST, PORT))\nreceived = sock.recv(1024)\n\nprint "Sent:     %s" % data\nprint "Received: %s" % received\n']], ['python listen 2 port same file'], 2], [(2070643, 0), [['According to the docs you should be able to do something like this (untested, since I do not have either version installed).'], ['i.e.']], [[' from collections import Counter\na = Counter(0,1,2,1)\nb = Counter(0,1,1)\n\nprint a - b  # ignores items in b missing in a\n\n# check every element in a is in b\n# a[key] returns 0 if key not in a, instead of raising an exception\nassert all(a[key] > b[key] for key in b)\n']], ['Subtracting two lists in Python'], 2], [(2070643, 1), [['i.e.'], ['You can find the current Python source  here . ']], [[' try:\n   from collections import Counter\nexcept ImportError:\n    class Counter(dict):\n       ...\n']], ['Subtracting two lists in Python'], 2], [(2072966, 0), [['You need a view that looks something like this:'], ['and you can loop through it like this in  players.html :']], [[" def players(request):\n    players_in_team_one = Player.objects.filter(Team__pk = 1)\n    return render_to_response('players.html', {'players': players_in_team_one})\n"]], ['Django Views Join Models Using Foreign Key'], 2], [(2072966, 1), [['and you can loop through it like this in  players.html :'], ["p.s. As a matter of style, it's more standard to use  all_lowercase_names_with_underscores  as field names."]], [[' {% for player in players %}\n       <tr><td>{{ player.Name }}</td><td> {{ player.Position }}</td></tr>\n{% endfor %}\n']], ['Django Views Join Models Using Foreign Key'], 2], [(2072976, 0), [['Already you are making the call'], ['You should also be able to do']], [[' self.dialog = builder.get_object("config_dialog")\n']], ['Access to widget in GTK+'], 2], [(2072976, 1), [['You should also be able to do'], ['This is at least how python-glade works and I assume GtkBuilder is the same.']], [[' self.nameEntry = builder.get_object("name_entry")\n']], ['Access to widget in GTK+'], 2], [(2073235, 0), [['Generate a Cumulative Distribution Function for each ID1 thus:'], ['So you will have']], [[' cdfs = defaultdict()\nfor id1,id2,val in d:\n    prevtotal = cdfs[id1][-1][0]\n    newtotal = prevtotal + val\n    cdfs[id1].append( (newtotal,id2) )\n']], ['Random weighted choice'], 3], [(2073235, 1), [['So you will have'], ['Then generate a random number and search for it in the list.']], [[' cdfs = { 701 : [ (0.2,1), (0.5,2), (1.0,3) ], \n         702 : [ (0.2,1), (0.5,2) ],\n         703 : [ (0.5,3) ] }\n']], ['Random weighted choice'], 3], [(2073235, 2), [['Then generate a random number and search for it in the list.'], ['-10000']], [[' def func(id1):\n    max = cdfs[id1][-1][0]\n    rand = random.random()*max\n    for upper,id2 in cdfs[id1]:\n        if upper>rand:\n            return id2\n    return None\n']], ['Random weighted choice'], 3], [(2073541, 0), [['This will insert a  <br>  tag after the end of each  <a>...</a>  element:'], ['If you wanted to put the  <a>  elements inside a  <p>  element as you ask in a comment, you can use this:']], [[" from BeautifulSoup import BeautifulSoup, Tag\n\n# ....\n\nsoup = BeautifulSoup(data)\nfor a in soup.findAll('a'):\n    a.parent.insert(a.parent.index(a)+1, Tag(soup, 'br'))\n"]], ['Search and Replace in HTML with BeautifulSoup'], 2], [(2073541, 1), [['If you wanted to put the  <a>  elements inside a  <p>  element as you ask in a comment, you can use this:'], ["Again, you don't create the  <p>  and  </p>  separately because they are part of the same thing."]], [[" for a in soup.findAll('a'):\n    p = Tag(soup, 'p') #create a P element\n    a.replaceWith(p)   #Put it where the A element is\n    p.insert(0, a)     #put the A element inside the P (between <p> and </p>)\n"]], ['Search and Replace in HTML with BeautifulSoup'], 2], [(2073962, 0), [['you should better trigger an image load in javascript : '], ['somewhere on your page :']], [[" function log(info) {\n  document.getElementById('pixel').src = '/tracker?'+info;\n}\n"]], ['django logging local javascript events'], 3], [(2073962, 1), [['somewhere on your page :'], ['then call it this way in javascript : ']], [[" <img id='pixel' src='pixel.gif' style='display:none'/>\n"]], ['django logging local javascript events'], 3], [(2073962, 2), [['then call it this way in javascript : '], ['server side, you could have a django view then records all the data, including date, user, referer....']], [[" log('clicked_Button_BuyStuff');\n"]], ['django logging local javascript events'], 3], [(2074514, 0), [['But you can split it in two queries:'], ["If id's of cakes are progressing along with bake_at timestamps, you can simplify and disambiguate the above code (in case two cakes arrives at the same time you can get both of them):"]], [[" bakeries = Bakery.objects.annotate(hottest_cake_baked_at=Max('cake__baked_at')) \nhottest_cakes = Cake.objects.filter(baked_at__in=[b.hottest_cake_baked_at for b in bakeries])\n"]], ['Django Query That Get Most Recent Objects From Different Categories'], 2], [(2074514, 1), [["If id's of cakes are progressing along with bake_at timestamps, you can simplify and disambiguate the above code (in case two cakes arrives at the same time you can get both of them):"], ['BTW credits for this goes to Daniel Roseman, who once answered similar question of mine:']], [[" hottest_cake_ids = Bakery.objects.annotate(hottest_cake_id=Max('cake__id')).values_list('hottest_cak\u200c\u200be_id', flat=True)\nhottest_cakes = Cake.objects.filter(id__in=hottest_cake_ids)\n"]], ['Django Query That Get Most Recent Objects From Different Categories'], 2], [(2077283, 0), [['In Python 3.2, you could use the  html.escape  function , e.g.'], ['The  cgi  module  that comes with Python has an  escape()  function : ']], [[' >>> string = """ Hello "XYZ" this \'is\' a test & so on """\n>>> import html\n>>> html.escape(string)\n\' Hello &quot;XYZ&quot; this &#x27;is&#x27; a test &amp; so on \'\n']], ['Escape special HTML characters in Python'], 4], [(2077283, 1), [['The  cgi  module  that comes with Python has an  escape()  function : '], ["Here's a small snippet that will let you escape quotes and apostrophes as well: "]], [[' import cgi\n\ns = cgi.escape( """& < >""" )   # s = "&amp; &lt; &gt;"\n']], ['Escape special HTML characters in Python'], 4], [(2077283, 2), [["Here's a small snippet that will let you escape quotes and apostrophes as well: "], ['You can also use  escape()  from  xml.sax.saxutils  to escape html. This function should execute faster. The  unescape()  function of the same module can be passed the same arguments to decode a string. ']], [['  html_escape_table = {\n     "&": "&amp;",\n     \'"\': "&quot;",\n     "\'": "&apos;",\n     ">": "&gt;",\n     "<": "&lt;",\n     }\n\n def html_escape(text):\n     """Produce entities within text."""\n     return "".join(html_escape_table.get(c,c) for c in text)\n']], ['Escape special HTML characters in Python'], 4], [(2077283, 3), [['You can also use  escape()  from  xml.sax.saxutils  to escape html. This function should execute faster. The  unescape()  function of the same module can be passed the same arguments to decode a string. '], ['-10000']], [[' from xml.sax.saxutils import escape, unescape\n# escape() and unescape() takes care of &, < and >.\nhtml_escape_table = {\n    \'"\': "&quot;",\n    "\'": "&apos;"\n}\nhtml_unescape_table = {v:k for k, v in html_escape_table.items()}\n\ndef html_escape(text):\n    return escape(text, html_escape_table)\n\ndef html_unescape(text):\n    return unescape(text, html_unescape_table)\n']], ['Escape special HTML characters in Python'], 4], [(2078752, 0), [['There are also a number of modules imported whenever Python starts up.  On my system, a likely candidate for modification to set options in the manner suggested by other posters are here:'], ['If you simply put this code in that file:']], [[' /usr/lib/python2.6/site-packages/sitecustomize.py\n']], ['Passing options to Python executable in non-interactive mode'], 2], [(2078752, 1), [['If you simply put this code in that file:'], ['it will turn off deprecation warnings for everything always, which may not be what you want.  You could instead put in code that would check your own  PYTHONNODEPRECATIONWARNING  environment variable so you had more control.']], [[' import warnings\nwarnings.simplefilter("ignore", DeprecationWarning)\n']], ['Passing options to Python executable in non-interactive mode'], 2], [(2080071, 0), [['For example:'], ['If you were to copy it instead: (See  http://docs.python.org/library/copy.html  )']], [[' class A:\n  def foo(self, x = [] ):\n    x.append(1)\n    self.x = x\n\na = A()\na.foo()\nprint a.x\n# prints: [1]\na.foo()\nprint a.x\n# prints: [1,1]   # !!!! Consumer would expect this to be [1]\ny = [1,2,3]\na.foo(y)\nprint a.x\n# prints: [1, 2, 3, 1]\nprint y\n# prints: [1, 2, 3, 1]  #  !!!! My list was modified\n']], ['Undesired python feedparser instantiation relic'], 2], [(2080071, 1), [['If you were to copy it instead: (See  http://docs.python.org/library/copy.html  )'], ['-10000']], [[' import copy\nclass A:\n  def foo(self, x = [] ):\n    x = copy.copy(x)\n    x.append(1)\n    self.x = x\n\na = A()\na.foo()\nprint a.x\n# prints: [1]\na.foo()\nprint a.x\n# prints: [1]   # !!! Much better =)\ny = [1,2,3]\na.foo(y)\nprint a.x\n# prints: [1, 2, 3, 1]\nprint y\n# prints: [1, 2, 3]  #  !!!! My list is how I made it\n']], ['Undesired python feedparser instantiation relic'], 2], [(2080110, 0), [["To set up your virtualenv, you'll do something like this at the shell:"], ['Now, when you write your python scripts, you will want to use your private python interpreter, if that is possible:']], [[' $ virtualenv $HOME/my_python\n$ $HOME/my_python/bin/easy_install numpy\n']], ['Python web hosting: Numpy, Matplotlib, Scientific Computing'], 3], [(2080110, 1), [['Now, when you write your python scripts, you will want to use your private python interpreter, if that is possible:'], ['If your python env cannot be specified (such as if run by mod_wsgi), you will need to add it to the import path:']], [[' #!/home/myuser/my_python/bin/python\n\nimport numpy\n\n# script here\n']], ['Python web hosting: Numpy, Matplotlib, Scientific Computing'], 3], [(2080110, 2), [['If your python env cannot be specified (such as if run by mod_wsgi), you will need to add it to the import path:'], ['2: Hosting sites with numpy']], [[" import sys\nsys.path.insert(0, '/home/myuser/my_python/lib/python2.5/site-packages')\n\nimport numpy\n"]], ['Python web hosting: Numpy, Matplotlib, Scientific Computing'], 3], [(2081139, 0), [['-10000'], ['Edit: You can also do it in "one line" using  map  operation:']], [[" #!/usr/bin/env python\n\nimport glob\nimport os\n\nfor i in glob.glob(u'*.txt'):\n  os.unlink (i)\n"]], ['os.unlink multiple file in python'], 2], [(2081139, 1), [['Edit: You can also do it in "one line" using  map  operation:'], ['-10000']], [[" #!/usr/bin/env python\n\nimport glob\nimport os\n\nmap(os.unlink, glob.glob(u'*.txt'))\n"]], ['os.unlink multiple file in python'], 2], [(2081436, 0), [['You could also write a simple templatetag yourself which includes anathor template based on the current language.'], ['Would include  faq/question1.en.html . Here is the code:']], [[' {% i18ninclude "faq/question1.html" "en" %}\n']], ['Technique for multi-language support of big static portions text in Django'], 2], [(2081436, 1), [['Would include  faq/question1.en.html . Here is the code:'], ["Put this in a templatetag library of your app. I also recommend to read the  documentation about custom templatetags  if you haven't done it yet."]], [[" import os\nfrom django import template\nregister = template.Library()\n\n@register.simpletag\ndef i18ninclude(template_name, language):\n    template_name, extension = os.path.splitext(template_name)\n    template_name = '%s.%s%s' % (template_name, language, extension)\n    return template.loader.render_to_string(template_name)\n"]], ['Technique for multi-language support of big static portions text in Django'], 2], [(2081836, 0), [["If the file to read is big, and you don't want to read the whole file in memory at once:"], ['In Python 2.6 or later:']], [[' fp = open("file")\nfor i, line in enumerate(fp):\n    if i == 25:\n        # 26th line\n    elif i == 29:\n        # 30th line\n    elif i > 29:\n        break\nfp.close()\n']], ['Reading specific lines only (Python)'], 2], [(2081836, 1), [['In Python 2.6 or later:'], ['-10000']], [[' with open("file") as fp:\n    for i, line in enumerate(fp):\n        if i == 25:\n            # 26th line\n        elif i == 29:\n            # 30th line\n        elif i > 29:\n            break\n']], ['Reading specific lines only (Python)'], 2], [(2081929, 0), [['Python offers a way to use arbitrary-length argument lists:'], ['If you put  *args  in your function definition, all values passed to the function are available as a tuple called  args . Note that you can also put additional arguments before  *args ,\nlike']], [[' def myfunc(*args):\n    for argument in args:\n        print "myfunc was given", argument\n']], ['Passing multiple values to a function call (Python)'], 2], [(2081929, 1), [['If you put  *args  in your function definition, all values passed to the function are available as a tuple called  args . Note that you can also put additional arguments before  *args ,\nlike'], ['so the first argument will be available as  name , the rest will be in the tuple  args .']], [[' def my_other_func(name, *args):\n']], ['Passing multiple values to a function call (Python)'], 2], [(2082028, 0), [['At the very minimum:'], ['If your C program prints the HTML to standard out, you will need to pipe the output like so:']], [[' import subprocess\nretcode = subprocess.call(["/path/to/myCprogram", "/path/to/file.c"])\nif retcode == 0:\n   print "success!"\n']], ['Simplest way to integrate python gui app with c console app'], 2], [(2082028, 1), [['If your C program prints the HTML to standard out, you will need to pipe the output like so:'], ['-10000']], [[' proc = subprocess.Popen(["/path/to/myCprogram", "/path/to/file.c"], \n                        stdout=subprocess.PIPE, stderr=subprocess.PIPE)\noutput, err_output = proc.communicate()\n# output will now contain the stdout of the program in a string\n']], ['Simplest way to integrate python gui app with c console app'], 2], [(2082387, 0), [['This first program is pretty simple, but only works correctly when there is only 1 line of text waiting for raw_input:'], ['Output:']], [[" #!/usr/bin/python\n\nimport time,readline,thread,sys\n\ndef noisy_thread():\n    while True:\n        time.sleep(3)\n        sys.stdout.write('\\r'+' '*(len(readline.get_line_buffer())+2)+'\\r')\n        print 'Interrupting text!'\n        sys.stdout.write('> ' + readline.get_line_buffer())\n        sys.stdout.flush()\n\nthread.start_new_thread(noisy_thread, ())\nwhile True:\n    s = raw_input('> ')\n"]], ['Reading input from raw_input() without having the prompt overwritten by other threads in Python'], 4], [(2082387, 1), [['Output:'], ['The second correctly handles 2 or more buffered lines, but has more (standard) module dependencies and requires a wee bit of terminal hackery:']], [[' $ ./threads_input.py\nInterrupting text!\nInterrupting text!\nInterrupting text!\n> WELL, PRINCE, Genoa and Lucca are now no more than private estates of the Bo\nInterrupting text!\n> WELL, PRINCE, Genoa and Lucca are now no more than private estates of the Bo\nnaparte family. No, I warn you, that if you do not tell me we are at war,\n']], ['Reading input from raw_input() without having the prompt overwritten by other threads in Python'], 4], [(2082387, 2), [['The second correctly handles 2 or more buffered lines, but has more (standard) module dependencies and requires a wee bit of terminal hackery:'], ['Output. Previous readline lines cleared properly:']], [[" #!/usr/bin/python\n\nimport time,readline,thread\nimport sys,struct,fcntl,termios\n\ndef blank_current_readline():\n    # Next line said to be reasonably portable for various Unixes\n    (rows,cols) = struct.unpack('hh', fcntl.ioctl(sys.stdout, termios.TIOCGWINSZ,'1234'))\n\n    text_len = len(readline.get_line_buffer())+2\n\n    # ANSI escape sequences (All VT100 except ESC[0G)\n    sys.stdout.write('\\x1b[2K')                         # Clear current line\n    sys.stdout.write('\\x1b[1A\\x1b[2K'*(text_len/cols))  # Move cursor up and clear line\n    sys.stdout.write('\\x1b[0G')                         # Move to start of line\n\n\ndef noisy_thread():\n    while True:\n        time.sleep(3)\n        blank_current_readline()\n        print 'Interrupting text!'\n        sys.stdout.write('> ' + readline.get_line_buffer())\n        sys.stdout.flush()          # Needed or text doesn't show until a key is pressed\n\n\nif __name__ == '__main__':\n    thread.start_new_thread(noisy_thread, ())\n    while True:\n        s = raw_input('> ')\n"]], ['Reading input from raw_input() without having the prompt overwritten by other threads in Python'], 4], [(2082387, 3), [['Output. Previous readline lines cleared properly:'], ['Useful sources:']], [[' $ ./threads_input2.py\nInterrupting text!\nInterrupting text!\nInterrupting text!\nInterrupting text!\n> WELL, PRINCE, Genoa and Lucca are now no more than private estates of the Bo\nnaparte family. No, I warn you, that if you do not tell me we are at war,\n']], ['Reading input from raw_input() without having the prompt overwritten by other threads in Python'], 4], [(2084728, 0), [["I'll take a stab at this, 'repr' is the machine representation of the object while 'print' shows the human readable representation of the object. There are built in methods ' repr ', ' str ', and ' unicode ' that can be used by programmers to implement the different printable representations of an object. Here is a simple example"], ['Now if you load this object into a python shell and play around with it you can see how these different methods are used to represent the printable representation of the object']], [[" class PrintObject(object):\n    def __repr__(self):\n        return 'repr'\n\n    def __str__(self):\n        return 'str'\n\n    def __unicode__(self):\n        return 'unicode'\n"]], ['What is the difference between these codes, and what does the repr do?'], 5], [(2084728, 1), [['Now if you load this object into a python shell and play around with it you can see how these different methods are used to represent the printable representation of the object'], ["The ' repr ' method is used if you just type the instance and return"]], [[' Python 2.6.4 (r264:75821M, Oct 27 2009, 19:48:32)\n[GCC 4.0.1 (Apple Inc. build 5493)] on darwin\nType "help", "copyright", "credits" or "license" for more information.\n>>> from printobject import PrintObject\n>>> printObj = PrintObject()\n>>> printObj\n>>> repr(printObj)\n\'repr\'\n>>> str(printObj)\n\'str\'\n>>> unicode(printObj)\nu\'unicode\'\n']], ['What is the difference between these codes, and what does the repr do?'], 5], [(2084728, 2), [["The ' repr ' method is used if you just type the instance and return"], ["The ' str ' method is used if you use print on the instance"]], [[' >>> printObj\nrepr\n']], ['What is the difference between these codes, and what does the repr do?'], 5], [(2084728, 3), [["The ' str ' method is used if you use print on the instance"], ["and the ' unicode ' method is used if you use the instance in a unicode string."]], [[' >>> print(printObj)\nstr\n']], ['What is the difference between these codes, and what does the repr do?'], 5], [(2084728, 4), [["and the ' unicode ' method is used if you use the instance in a unicode string."], ['When and if you start writing your own classes these methods come in really handy.']], [[" >>> print(u'%s' % printObj)\nunicode\n"]], ['What is the difference between these codes, and what does the repr do?'], 5], [(2084832, 0), [['-10000'], ['or  if you want to use Python <2.6']], [[' for i in {0001..1000}\ndo\n  echo "some text" > "file_${i}.txt"\ndone\n']], ['How can I create 1000 files that I can use to test a script?'], 2], [(2084832, 1), [['or  if you want to use Python <2.6'], ['-10000']], [[' for x in range(1000):\n    open("file%03d.txt" % x,"w").write("some text")\n']], ['How can I create 1000 files that I can use to test a script?'], 2], [(2085295, 0), [['I found  pefile read/write module  written in python, there you can find exported entries.'], ['imp.name  will be the one you are looking for. You could use that name in ctypes like ']], [[" for entry in pe.DIRECTORY_ENTRY_IMPORT:\n  print entry.dll\n  for imp in entry.imports:\n    print '\\t', hex(imp.address), imp.name\nOutput\ncomdlg32.dll\n        0x10012A0L PageSetupDlgW\n        0x10012A4L FindTextW\n        0x10012A8L PrintDlgExW\n[snip]\nSHELL32.dll\n        0x1001154L DragFinish\n        0x1001158L DragQueryFileW\n"]], ['When loading a dll in Python does the dir function shows its methods?'], 2], [(2085295, 1), [['imp.name  will be the one you are looking for. You could use that name in ctypes like '], ['-10000']], [[' >>> ctypes.windll.comdlg32.PageSetupDlgW\n<_FuncPtr object at 0x00A97210>\n>>> ctypes.windll.comdlg32.FindTextW\n<_FuncPtr object at 0x00A97288>\n...\n']], ['When loading a dll in Python does the dir function shows its methods?'], 2], [(2087370, 0), [['HTMLParser.unescape  is deprecated, and  was supposed to be removed in 3.5 , although it was left in by mistake. It will be removed from the language soon. Instead, use  html.unescape() :'], ['see  https://docs.python.org/3/library/html.html#html.unescape']], [[" import html\nprint(html.unescape('&pound;682m'))\n"]], ['Decode HTML entities in Python string?'], 3], [(2087370, 1), [['see  https://docs.python.org/3/library/html.html#html.unescape'], ['You can also use the  six  compatibility library to simplify the import:']], [[" >>> try:\n...     # Python 2.6-2.7 \n...     from HTMLParser import HTMLParser\n... except ImportError:\n...     # Python 3\n...     from html.parser import HTMLParser\n... \n>>> h = HTMLParser()\n>>> print(h.unescape('&pound;682m'))\n£682m\n"]], ['Decode HTML entities in Python string?'], 3], [(2087370, 2), [['You can also use the  six  compatibility library to simplify the import:'], ['-10000']], [[" >>> from six.moves.html_parser import HTMLParser\n>>> h = HTMLParser()\n>>> print(h.unescape('&pound;682m'))\n£682m\n"]], ['Decode HTML entities in Python string?'], 3], [(2087911, 0), [['-10000'], ['or you could use  inspect  module:']], [[" >>> def is_func(instance, func):\n    test = getattr(instance, func, None)\n    if test and hasattr(test, '__call__'):\n        return True\n\n>>> is_func('', 'len')\n>>> is_func({}, 'fromkeys')\nTrue\n"]], ['How to find out whether a function defined for an instance of a class in Python?'], 2], [(2087911, 1), [['or you could use  inspect  module:'], ['-10000']], [[" >>> import inspect\n>>> test = getattr(cc, 'func', None)\n>>> inspect.ismethod(test)\nTrue\n"]], ['How to find out whether a function defined for an instance of a class in Python?'], 2], [(2089036, 0), [["Here's Alex's answer, reworked to support column data types:"], ["Here's my implementation, though John Machin's is nicer:"]], [[' import csv\nimport operator\n\ndef sort_csv(csv_filename, types, sort_key_columns):\n    """sort (and rewrite) a csv file.\n    types:  data types (conversion functions) for each column in the file\n    sort_key_columns: column numbers of columns to sort by"""\n    data = []\n    with open(csv_filename, \'rb\') as f:\n        for row in csv.reader(f):\n            data.append(convert(types, row))\n    data.sort(key=operator.itemgetter(*sort_key_columns))\n    with open(csv_filename, \'wb\') as f:\n        csv.writer(f).writerows(data)\n']], ['Sorting CSV in Python'], 3], [(2089036, 1), [["Here's my implementation, though John Machin's is nicer:"], ['Usage:']], [[' def convert(types, values):\n    return [t(v) for t, v in zip(types, values)]\n']], ['Sorting CSV in Python'], 3], [(2089036, 2), [['Usage:'], ['-10000']], [[" import datetime\ndef date(s):\n    return datetime.strptime(s, '%m/%d/%y')\n\n>>> convert((int, date, str), ('1', '2/15/09', 'z'))\n[1, datetime.datetime(2009, 2, 15, 0, 0), 'z']\n"]], ['Sorting CSV in Python'], 3], [(2090921, 0), [['Pretty tediously, but working:'], ["That's assuming a simple document.  More generally, you can select items by name:"]], [[" >>> from appscript import *\n>>> app('Numbers').documents.first.sheets.first.tables.first.selection_range.cells.first.value.set(to=42)\n"]], ['How to set value of current Numbers cell using Py-Appscript'], 2], [(2090921, 1), [["That's assuming a simple document.  More generally, you can select items by name:"], ['-10000']], [[" >>> app('Numbers').documents['MyDocument.numbers'].sheets['MySheet'].tables['MyTable'].selection_range.cells.first.value.set(to='abc')\n"]], ['How to set value of current Numbers cell using Py-Appscript'], 2], [(2091598, 0), [['Using  urllib2.urlopen() :'], ['This XML uses a  Cube  tag for too many constructs, so selecting currencies gets a little heady.']], [[' >>> import urllib2\n>>> from xml.dom.minidom import parse, parseString\n>>> u1=urllib2.urlopen(\'http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml\')\n>>> dom=parse(u1)\n>>> print dom\n<xml.dom.minidom.Document instance at 0x017D73A0>\n>>> dom.childNodes\n[<DOM Element: gesmes:Envelope at 0x17d7c88>]\n>>> dom.childNodes[0].childNodes\n[<DOM Text node "u\'\\n\\t\'">, <DOM Element: gesmes:subject at 0x1041aa8>,\n <DOM Text node "u\'\\n\\t\'">, <DOM Element: gesmes:Sender at 0xff8260>,\n <DOM Text node "u\'\\n\\t\'">, <DOM Element: Cube at 0x17d3dc8>, <DOM Text node "u\'\\n\'">]\n>>> \n']], ['Opening remote documents in Python'], 2], [(2091598, 1), [['This XML uses a  Cube  tag for too many constructs, so selecting currencies gets a little heady.'], ['-10000']], [[" >>> [elem.attributes['currency'].value for elem in\n     dom.getElementsByTagName('Cube') if elem.hasAttribute('currency')]\n[u'USD', u'JPY', u'BGN', u'CZK', u'DKK', u'EEK', u'GBP', u'HUF', u'LTL', u'LVL',\n u'PLN', u'RON', u'SEK', u'CHF', u'NOK', u'HRK', u'RUB', u'TRY', u'AUD', u'BRL',\n u'CAD', u'CNY', u'HKD', u'IDR', u'INR', u'KRW', u'MXN', u'MYR', u'NZD', u'PHP',\n u'SGD', u'THB', u'ZAR']\n>>> \n"]], ['Opening remote documents in Python'], 2], [(2093788, 0), [["The core part of Python's readline is in fileobject.c:get_line and is"], ['where']], [[" FILE_BEGIN_ALLOW_THREADS(f)\nFLOCKFILE(fp);\n\nwhile ((c = GETC(fp)) != EOF &&\n       (*buf++ = c) != '\\n' &&\n       buf != end)\n       ;\nFUNLOCKFILE(fp);\nFILE_END_ALLOW_THREADS(f)\n"]], ['Python readline on a pipe that has been opened as non-blocking'], 2], [(2093788, 1), [['where'], ["There's nothing special going on. Are you sure your observations are what you think they are?"]], [[' #ifdef HAVE_GETC_UNLOCKED\n#define GETC(f) getc_unlocked(f)\n#define FLOCKFILE(f) flockfile(f)\n#define FUNLOCKFILE(f) funlockfile(f)\n#else\n#define GETC(f) getc(f)\n#define FLOCKFILE(f)\n#define FUNLOCKFILE(f)\n#endif\n']], ['Python readline on a pipe that has been opened as non-blocking'], 2], [(2093837, 0), [['So for example, entering'], ['Into the code section of the  Run Shell Script  action will work. So one can call the proper installation ( /Library/Frameworks/Python.framework/Versions/Current/bin/python  above) and put their program between the  <<EOF  ...  EOF  delimeters.']], [[" /Library/Frameworks/Python.framework/Versions/Current/bin/python <<EOF\nfrom appscript import *\nNumbers = app('Numbers')\nEOF\n"]], ['Using Third-Party Modules with Python in an Automator Service'], 2], [(2093837, 1), [['Into the code section of the  Run Shell Script  action will work. So one can call the proper installation ( /Library/Frameworks/Python.framework/Versions/Current/bin/python  above) and put their program between the  <<EOF  ...  EOF  delimeters.'], ['-10000']], [[' /Library/Frameworks/Python.framework/Versions/Current/bin/python script.py {query}\n']], ['Using Third-Party Modules with Python in an Automator Service'], 2], [(2094176, 0), [['If you are concerned only with the trailing newline, you can do:'], ['If you are more generally concerned by superfluous newlines producing empty items, you can do:']], [[" a.rstrip().split('\\n')\n"]], ['split a string in python'], 2], [(2094176, 1), [['If you are more generally concerned by superfluous newlines producing empty items, you can do:'], ['-10000']], [[" filter(None, a.split('\\n'))\n"]], ['split a string in python'], 2], [(2094952, 0), [['Alternatively you can manually prefix your url definitions:'], ['And then mount them as:']], [[' urlpatterns = patterns("myproject.myapp.views",\n    (r"^jobs/(?P<id>\\d+)/edit/$",    "myproject.myapp.views.edit"),\n    (r"^jobs/(?P<id>\\d+)/delete/$",  "myproject.myapp.views.delete"),\n    (r"^jobs/(?P<id>\\d+)/update/$",  "myproject.myapp.views.update"),\n    (r"^jobs/insert/$",              "myproject.myapp.views.insert"),\n)\n\nurlpatterns += patterns("",\n    (r"^blog/(?P<object_id>\\d+)/$",  "django.views.generic.list_detail.object_detail", info_dict, "NOIDEA-detail"),\n    (r"^blog/$",                    "django.views.generic.list_detail.object_list",   info_dict, "NOIDEA-community"),\n)\n']], ['How to use one app to satisfy multiple URLs in Django'], 2], [(2094952, 1), [['And then mount them as:'], ['Personally I would go for more RESTful URL definitions though. Such as  blog/(?P<post_id>\\d+)/edit/$ .']], [[' urlpatterns = patterns("",\n    (r"", include("myapp.urls")),\n)\n']], ['How to use one app to satisfy multiple URLs in Django'], 2], [(2095505, 0), [['For Ubuntu, you can search for packages with the command'], ['This should yield ']], [[' apt-cache search beautifulsoup\n']], ["A few questions regarding Pythons 'import' feature"], 4], [(2095505, 1), [['This should yield '], ['So the easiest way to install BeautifulSoup for ubuntu would be to run']], [[' python-beautifulsoup - error-tolerant HTML parser for Python\n']], ["A few questions regarding Pythons 'import' feature"], 4], [(2095505, 2), [['So the easiest way to install BeautifulSoup for ubuntu would be to run'], ['Once you do this, you can put']], [[' sudo apt-get install python-beautifulsoup\n']], ["A few questions regarding Pythons 'import' feature"], 4], [(2095505, 3), [['Once you do this, you can put'], ['in any of your scripts and your python installation will find the module. ']], [[' import BeautifulSoup \n']], ["A few questions regarding Pythons 'import' feature"], 4], [(2097191, 0), [["In your examples it seems that you can in both cases solve the problem by getting the 'first fields', the 'last fields' and 'everything in between':"], ['And:']], [[' m = line.split("¬")[2].split()\nfirstname = m[0]\nsurname = m[-1]\ninitials = m[1:-1] # Maybe just keep this as a list?\n']], ['Parsing name and address information with differing number of spaces'], 2], [(2097191, 1), [['And:'], ["In general you can handle a single field containing spaces by getting the 'fixed' fields from both the start and the end and whatever is left over is the field that can contain spaces.. As soon as you have two fields containing spaces in the same column, there's nothing you can do. It's ambiguously defined. "]], [[' m = line.split("¬")[4].split()\ncity = \' \'.join(m[:-2])\nstate = m[-2]\nzipCode = m[-1]\n']], ['Parsing name and address information with differing number of spaces'], 2], [(2097225, 0), [["I'll be interested to see if you get any good solutions to this problem.  My own solution, which is far from elegant, is to do this:"], ["Basically, I first create a dummy object ( chapter  in this case) with the correct parent relationship and then pass that as the  instance  argument to the form's constructor.  The form will overwrite the throwaway data I used to create the dummy object with the data given in the request.  At the end, to get the real child object, I do something like this:"]], [[" book = models.Book(title='Foo')\nchapter = models.Chapter(parent=book, title='dummy')\nform = forms.ChapterForm(request.POST, request.FILES, instance=chapter)\n"]], ['Set parent in a ModelForm in Google App Engine'], 2], [(2097225, 1), [["Basically, I first create a dummy object ( chapter  in this case) with the correct parent relationship and then pass that as the  instance  argument to the form's constructor.  The form will overwrite the throwaway data I used to create the dummy object with the data given in the request.  At the end, to get the real child object, I do something like this:"], ['-10000']], [[' if form.is_valid():\n    chapter = form.save()\n    # Now chapter.parent() == book\n']], ['Set parent in a ModelForm in Google App Engine'], 2], [(2098181, 0), [["Here is an example python function that returns a new function based on the parameter passed in.  I'm not sure what you are trying to do but this might help  point you in the right direction."], ["Given your toy example (which seems like a fun thing to do for you sister) you might try something like this (I haven't tested the code, but it should help out):"]], [[' def add_to(amount):\n    def f(x):\n        return x + amount\n    return f\n\nif __name__ == "__main__":\n    add_2 = add_to(2)\n    add_3 = add_to(3)\n\n    print add_2(42)\n    print add_3(42)\n']], ['Using a function to create a function in Python'], 2], [(2098181, 1), [["Given your toy example (which seems like a fun thing to do for you sister) you might try something like this (I haven't tested the code, but it should help out):"], ['-10000']], [[" def create_toy(self, fun_0_3, fun_3_4, fun_4_7, fun_7_9, fun_9_plus):\n    def toy(self):\n        self.happiness_num = float(self.happiness)\n        if float(self.age) <= 3.0:\n            self.happiness_num = self.happiness_num + fun_0_3\n        elif float(self.age) > 3.0 and float(self.age) < 4.0:\n            self.happiness_num = self.happiness_num + fun_3_4\n        elif float(self.age) > 4.0 and float(self.age) < 7.0:\n            self.happiness_num = self.happiness_num + fun_4_7\n        elif float(self.age) > 7.0 and float(self.age) < 9.0:\n            self.happiness_num = self.happiness_num + fun_7_9\n        elif float(self.age) > 9.0:\n            self.happiness_num = self.happiness_num + fun_9_plus\n            gui.msgbox(\n                msg = 'This toy is Only providing minimal fun to your potato head. Either get a new one or play with another!',\n                title = 'WARNING!',\n                ok_button = 'Understood')\n        self.happiness = str(self.happiness_num)\n    return toy\n\n#somewhere else\nplay_Softball = create_toy(0.3, 0.7, 1.0, 0.5, 0.02)\n"]], ['Using a function to create a function in Python'], 2], [(2099037, 0), [["I think this is what you're asking for..."], ["On a side note, by default without changing anything you've got, I think this would work for you..."]], [[" class Article(model.Model):\n    ...\n    author = models.ForeignKey(Author, related_name='articles')\n"]], ['Reverse ForeignKey lookup'], 2], [(2099037, 1), [["On a side note, by default without changing anything you've got, I think this would work for you..."], ['But to maintain the  article.authors  syntax you mention above, you can specify that yourself with  related_name .']], [[' article.author_set\n']], ['Reverse ForeignKey lookup'], 2], [(2099788, 0), [['Quoted from  the documentation :'], ['This is a convenience function for invoking  partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)  as a function decorator when defining a wrapper function. For example:']], [[' functools.wraps(wrapped[, assigned][, updated]) \n']], ['python wraps.who can give a example'], 2], [(2099788, 1), [['This is a convenience function for invoking  partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)  as a function decorator when defining a wrapper function. For example:'], ["Without the use of this decorator factory, the name of the example function would have been 'wrapper', and the docstring of the original example() would have been lost."]], [[' >>> from functools import wraps\n>>> def my_decorator(f):\n...     @wraps(f)\n...     def wrapper(*args, **kwds):\n...         print \'Calling decorated function\'\n...         return f(*args, **kwds)\n...     return wrapper\n...\n>>> @my_decorator\n... def example():\n...     """Docstring"""\n...     print \'Called example function\'\n...\n>>> example()\nCalling decorated function\nCalled example function\n>>> example.__name__\n\'example\'\n>>> example.__doc__\n\'Docstring\'\n']], ['python wraps.who can give a example'], 2], [(2100353, 0), [['-10000'], ['or use lambda']], [[' import operator\nsortedlist = sorted(reader, key=operator.itemgetter(3), reverse=True)\n']], ['sort csv by column'], 2], [(2100353, 1), [['or use lambda'], ['-10000']], [[' sortedlist = sorted(reader, key=lambda row: row[3], reverse=True)\n']], ['sort csv by column'], 2], [(2101426, 0), [['One "old" way is:'], ['The other modern way is to use a  subprocess  module:']], [[' fin,fout=os.popen4("wget --version | grep Wget")\nprint fout.read()\n']], ['Parsing a stdout in Python'], 2], [(2101426, 1), [['The other modern way is to use a  subprocess  module:'], ['-10000']], [[' import subprocess\ncmd = subprocess.Popen(\'wget --version\', shell=True, stdout=subprocess.PIPE)\nfor line in cmd.stdout:\n    if "Wget" in line:\n        print line\n']], ['Parsing a stdout in Python'], 2], [(2101961, 0), [["I don't really get the question.  The  State  Design pattern is pretty clear.  See the  Design Patterns book ."], ['Note that we need to have forward references, so we refer to classes by name, and use  eval  to translate a class name to an actual class.  The alternative is to make the transition rules instance variables instead of class variables and then create the instances after all the classes are defined.']], [[' class SuperState( object ):\n    def someStatefulMethod( self ):\n        raise NotImplementedError()\n    def transitionRule( self, input ):\n        raise NotImplementedError()\n\nclass SomeState( SuperState ):\n    def someStatefulMethod( self ):\n        actually do something()\n    def transitionRule( self, input ):\n        return NextState()\n']], ['Python state-machine design'], 3], [(2101961, 1), [['Note that we need to have forward references, so we refer to classes by name, and use  eval  to translate a class name to an actual class.  The alternative is to make the transition rules instance variables instead of class variables and then create the instances after all the classes are defined.'], ["In some cases, your event isn't as simple as testing objects for equality, so a more general transition rule is to use a proper list of function-object pairs."]], [[' class State( object ):\n    def transitionRule( self, input ):\n        return eval(self.map[input])()\n\nclass S1( State ): \n    map = { "input": "S2", "other": "S3" }\n    pass # Overrides to state-specific methods\n\nclass S2( State ):\n    map = { "foo": "S1", "bar": "S2" }\n\nclass S3( State ):\n    map = { "quux": "S1" }\n']], ['Python state-machine design'], 3], [(2101961, 2), [["In some cases, your event isn't as simple as testing objects for equality, so a more general transition rule is to use a proper list of function-object pairs."], ['Since the rules are evaluated sequentially, this allows a "default" rule.']], [[' class State( object ):\n    def transitionRule( self, input ):\n        next_states = [ s for f,s in self.map if f(input)  ]\n        assert len(next_states) >= 1, "faulty transition rule"\n        return eval(next_states[0])()\n\nclass S1( State ):\n    map = [ (lambda x: x == "input", "S2"), (lambda x: x == "other", "S3" ) ]\n\nclass S2( State ):\n    map = [ (lambda x: "bar" <= x <= "foo", "S3"), (lambda x: True, "S1") ]\n']], ['Python state-machine design'], 3], [(2103532, 0), [['Put this in your  Users :'], ['Now you can:']], [[' def __iter__(self):\n    return iter(self.users)\n']], ['Python newbie class design question'], 2], [(2103532, 1), [['Now you can:'], ['Docs']], [[' for u in users:\n    print u.email\n']], ['Python newbie class design question'], 2], [(2104305, 0), [['I think you want something like this:'], ['But you could easily do this like:']], [[' item = [0,1,2,3,4,5,6,7,8,9]\n\nfor element in item:\n    if element not in z:\n        print element\n']], ['Finding elements not in a list'], 2], [(2104305, 1), [['But you could easily do this like:'], ['-10000']], [[' set(item) - set(z)\n']], ['Finding elements not in a list'], 2], [(2104404, 0), [['The following will do the job for you in Django 1.1, no loop necessary:'], ['You can have a more complicated calculation too:']], [[" from django.db.models import F\nBook.objects.all().update(activity=F('views')*4)\n"]], ['Iterating over a large Django queryset while the data is changing elsewhere'], 2], [(2104404, 1), [['You can have a more complicated calculation too:'], ["Both these options have the potential to leave the activity field out of sync with the rest, but I assume you're ok with that, given that you're calculating it in a cron job."]], [[' for book in Book.objects.all().iterator():\n    Book.objects.filter(pk=book.pk).update(activity=book.calculate_activity())\n']], ['Iterating over a large Django queryset while the data is changing elsewhere'], 2], [(2104921, 0), [['Try this:'], ['Of three expressions generating the same sql query:']], [[" self.fields['nut'].queryset = Nut.objects.exclude(\n    pk__in=Bolt.objects.values('nut').query)\n"]], ['Django queryset that returns all unassigned fks'], 2], [(2104921, 1), [['Of three expressions generating the same sql query:'], ["I'd choose the last one as most straight-forward (although in other two cases the list and dict aren't created in fact: django 'understands' the intention without explicit mentioning of  .query )"]], [[" pk__in=Bolt.objects.values('nut')\npk__in=Bolt.objects.values_list('nut')\npk__in=Bolt.objects.values('nut').query\n"]], ['Django queryset that returns all unassigned fks'], 2], [(2104957, 0), [["Blocks are only definable at a template's top level. If you extend a template, any values set in the child template using a  set  tag will be accessible from the template it is extending. For example, if you have a template named  layout.html :"], ['And you have this child template,  index.html :']], [[' <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"\n"http://www.w3.org/TR/html4/strict.dtd">\n<html>\n  <title>{{ title }} | Site.com</title>\n  ....\n  {% block content %}{% endblock content %}\n  ....\n</html>\n']], ['In Jinja2, how can I use macros in combination with block tags?'], 2], [(2104957, 1), [['And you have this child template,  index.html :'], ["Then the reference to  title  in the parent would resolve to  'Homepage' . You can do this with any type of variable. For what you're doing, I don't think there is any need for macros - if you take advantage of this feature and place blocks well, you will be able to do pretty much everything you need to do as far as layouts are concerned. I would look at some of the templates used by  Plurk Solace , which is written by one of the Jinja2 authors, if you want to get a good idea of when to use various features of Jinja2."]], [[' {% extends "layout.html" %}\n{% set title = \'Homepage\' %}\n{% block content %}\n(html code here)\n{% endblock content %}\n']], ['In Jinja2, how can I use macros in combination with block tags?'], 2], [(2104997, 0), [["I'd recommend against using  os.walk() , since you have to do so much to massage its output.  Instead, just use a recursive function that uses  os.listdir() ,  os.path.join() ,  os.path.isdir() , etc."], ["Personally, I'd recommend a much less verbose XML schema, putting names in attributes and getting rid of the  <files>  group:"]], [[" import os\nfrom xml.sax.saxutils import escape as xml_escape\n\ndef DirAsXML(path):\n    result = '<dir>\\n<name>%s</name>\\n' % xml_escape(os.path.basename(path))\n    dirs = []\n    files = []\n    for item in os.listdir(path):\n        itempath = os.path.join(path, item)\n        if os.path.isdir(itempath):\n            dirs.append(item)\n        elif os.path.isfile(itempath):\n            files.append(item)\n    if files:\n        result += '  <files>\\n' \\\n            + '\\n'.join('    <file>\\n      <name>%s</name>\\n    </file>'\n            % xml_escape(f) for f in files) + '\\n  </files>\\n'\n    if dirs:\n        for d in dirs:\n            x = DirAsXML(os.path.join(path, d))\n            result += '\\n'.join('  ' + line for line in x.split('\\n'))\n    result += '</dir>'\n    return result\n\nif __name__ == '__main__':\n    print '<structure>\\n' + DirAsXML(os.getcwd()) + '\\n</structure>'\n"]], ['os.walk() python: xml representation of a directory structure, recursion'], 3], [(2104997, 1), [["Personally, I'd recommend a much less verbose XML schema, putting names in attributes and getting rid of the  <files>  group:"], ['This gives an output like:']], [[" import os\nfrom xml.sax.saxutils import quoteattr as xml_quoteattr\n\ndef DirAsLessXML(path):\n    result = '<dir name=%s>\\n' % xml_quoteattr(os.path.basename(path))\n    for item in os.listdir(path):\n        itempath = os.path.join(path, item)\n        if os.path.isdir(itempath):\n            result += '\\n'.join('  ' + line for line in \n                DirAsLessXML(os.path.join(path, item)).split('\\n'))\n        elif os.path.isfile(itempath):\n            result += '  <file name=%s />\\n' % xml_quoteattr(item)\n    result += '</dir>'\n    return result\n\nif __name__ == '__main__':\n    print '<structure>\\n' + DirAsLessXML(os.getcwd()) + '\\n</structure>'\n"]], ['os.walk() python: xml representation of a directory structure, recursion'], 3], [(2104997, 2), [['This gives an output like:'], ['etc.']], [[' <structure>\n<dir name="local">\n  <dir name=".hg">\n    <file name="00changelog.i" />\n    <file name="branch" />\n    <file name="branch.cache" />\n    <file name="dirstate" />\n    <file name="hgrc" />\n    <file name="requires" />\n    <dir name="store">\n      <file name="00changelog.i" />\n']], ['os.walk() python: xml representation of a directory structure, recursion'], 3], [(2105022, 0), [['The Windows console subsystem is not Unicode, but code page based. You can play around with setting the code page:'], ['ISE can display Unicode and accept Unicode input, for example,']], [[' PS> chcp 65001\nPS> ipy64.exe\n>>> print unichr(0x3a9)\nΩ\n']], ['Unicode in PowerShell with Python? Alternative shells in Windows?'], 3], [(2105022, 1), [['ISE can display Unicode and accept Unicode input, for example,'], ['Further to the point that ISE seems to handle Unicode coming from a native application via stdout:']], [[' PS> [char]0xf12\n༒\nPS> [char]0xe4\nä\nPS> [char]0x3a9\nΩ\n']], ['Unicode in PowerShell with Python? Alternative shells in Windows?'], 3], [(2105022, 2), [['Further to the point that ISE seems to handle Unicode coming from a native application via stdout:'], ['-10000']], [[' $src = @\'\nnamespace Foo {\n    public class Bar\n    {\n        public static void Baz()\n        {\n            System.Console.Out.WriteLine("\\u0f12");\n            System.Console.Out.WriteLine("\\u00e4");\n            System.Console.Out.WriteLine("\\u03a9");\n        }\n    }\n}\n\'@\n\nAdd-Type -TypeDefinition $src\n\n[Foo.Bar]::Baz()\n༒\nä\nΩ\n']], ['Unicode in PowerShell with Python? Alternative shells in Windows?'], 3], [(2106287, 0), [['This shows  numpy_all_the_way  is faster:'], ['This shows  numpy_all_the_way  uses less memory:']], [[' % python -mtimeit -s"import test" "test.numpy_all_the_way(100)"\n100 loops, best of 3: 1.78 msec per loop\n% python -mtimeit -s"import test" "test.numpy_all_the_way(1000)"\n100 loops, best of 3: 18.1 msec per loop\n% python -mtimeit -s"import test" "test.numpy_all_the_way(5000)"\n10 loops, best of 3: 90.4 msec per loop\n\n% python -mtimeit -s"import test" "test.python_lists_to_array(100)"\n1000 loops, best of 3: 1.97 msec per loop\n% python -mtimeit -s"import test" "test.python_lists_to_array(1000)"\n10 loops, best of 3: 20.3 msec per loop\n% python -mtimeit -s"import test" "test.python_lists_to_array(5000)"\n10 loops, best of 3: 101 msec per loop\n']], ['Pythonic way to create a numpy array from a list of numpy arrays'], 3], [(2106287, 1), [['This shows  numpy_all_the_way  uses less memory:'], ['test.py:']], [[' % test.py\nInitial memory usage: 19788\nAfter python_lists_to_array: 20976\nAfter numpy_all_the_way: 20348\n']], ['Pythonic way to create a numpy array from a list of numpy arrays'], 3], [(2106287, 2), [['test.py:'], ['-10000']], [[" #!/usr/bin/env python\nimport numpy as np\nimport os\n\ndef memory_usage():\n    pid=os.getpid()\n    return next(line for line in open('/proc/%s/status'%pid).read().splitlines()\n            if line.startswith('VmSize')).split()[-2]\n\nN,M=5000,10\n\ndef python_lists_to_array(k):\n    list_of_arrays = map(lambda x: x*np.ones(M), range(k))\n    arr = np.array(list_of_arrays)\n    return arr\n\ndef numpy_all_the_way(k):\n    arr=np.empty((N,M))\n    for x in range(k):\n        arr[x]=x*np.ones(M)\n    arr.resize((k,M))\n    return arr\n\nif __name__=='__main__':\n    print('Initial memory usage: %s'%memory_usage())\n    arr=python_lists_to_array(5000)\n    print('After python_lists_to_array: %s'%memory_usage())    \n    arr=numpy_all_the_way(5000)\n    print('After numpy_all_the_way: %s'%memory_usage())    \n"]], ['Pythonic way to create a numpy array from a list of numpy arrays'], 3], [(2106597, 0), [['Soup is good for you:'], ['There are many arguments you can pass to the  findAll  method; more  here .  The one line below will get you started by returning a list of all links matching some conditions.']], [[' >>> from BeautifulSoup import BeautifulSoup\n>>> soup = BeautifulSoup(\'\'\'<ul class="something">\n... <li id="li_id">\n... <a href="#" title="myurl">URL Text</a>\n... </li>\n... </ul>\'\'\')\n']], ['python, regex to find anchor link html'], 3], [(2106597, 1), [['There are many arguments you can pass to the  findAll  method; more  here .  The one line below will get you started by returning a list of all links matching some conditions.'], ['So let\'s say you\'re interested in only tags within list elements of a certain class  <li class="li_class"> .  You could do something like this:']], [[' >>> soup.findAll(href=\'#\', title=\'myurl\')\n[<a href="#" title="myurl">URL Text</a>]\n']], ['python, regex to find anchor link html'], 3], [(2106597, 2), [['So let\'s say you\'re interested in only tags within list elements of a certain class  <li class="li_class"> .  You could do something like this:'], ['Soup recipe:']], [[' >>> soup = BeautifulSoup(\'\'\'<li class="li_class">\n    <a href="#" title="myurl">URL Text</a>\n    <a href="#" title="myurl2">URL Text2</a></li><li class="foo">\n    <a href="#" title="myurl3">URL Text3</a></li>\'\'\') # just some sample html\n\n>>> for elem in soup.findAll("li", "li_class"):\n...   pprint(elem.findAll(\'a\')) # requires `from pprint import pprint`\n... \n[<a href="#" title="myurl">URL Text</a>,\n <a href="#" title="myurl2">URL Text2</a>]\n']], ['python, regex to find anchor link html'], 3], [(2109265, 0), [['Replicating your image using the plot method:'], ['This uses python multiprocessing library to run the matplotlib animation in a separate process.  The main process uses a queue to pass data to it which then updates the plot image.']], [[" from pylab import *\n\npoints = []\npoints.append((-0.25, -1.0))\npoints.append((0.7, -0.7))\npoints.append((1,0))\npoints.append((0.7,1))\npoints.append((-0.25,1.2))\npoints.append((-1,0.5))\npoints.append((-1,-0.5))\npoints.append((-0.25, -1.0))\n\na_line = plot(*zip(*points))[0]\na_line.set_color('g')\na_line.set_marker('o')\na_line.set_markerfacecolor('b')\na_line.set_markersize(30)\naxis([-1.5,1.5,-1.5,1.5])\n\nshow()\n"]], ['Matplotlib in Python - Drawing shapes and animating them'], 2], [(2109265, 1), [['This uses python multiprocessing library to run the matplotlib animation in a separate process.  The main process uses a queue to pass data to it which then updates the plot image.'], ['Of course, after doing this I think you\'ll be better served with whatnick\'s image solution.  I\'d create my own GUI and not use matplotlibs built in widget.  I\'d then "animate" my GUI by generating PNGs and swapping them.']], [[" # general imports\nimport random, time\nfrom multiprocessing import Process, Queue\n\n# for matplotlib\nimport random\nimport numpy as np\nimport matplotlib\nmatplotlib.use('GTKAgg') # do this before importing pylab\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\n\n\ndef matplotLibAnimate(q,points):\n\n    # set up initial plot\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n\n\n    circles = []\n    for point in points:\n        ax.add_patch(Circle(point,0.1))\n\n    a_line, = ax.plot(*zip(*points))\n    a_line.set_color('g')\n    a_line.set_lw(2)\n\n    currentNode = None  \n    def animate(currentNode = currentNode):\n        while 1:\n            newNode = q.get()\n            if currentNode: currentNode.remove()\n            circle = Circle(newNode,0.1)\n            currentNode = ax.add_patch(circle)\n            circle.set_fc('r')\n            fig.canvas.draw()\n\n    # start the animation\n    import gobject\n    gobject.idle_add(animate)\n    plt.show()\n\n#initial points\npoints = ((-0.25, -1.0),(0.7, -0.7),(1,0),(0.7,1),(-0.25,1.2),(-1,0.5),(-1,-0.5),(-0.25, -1.0))\nq = Queue()\np = Process(target = matplotLibAnimate, args=(q,points,))\np.start()\n\n# feed animation data\nwhile 1:\n    time.sleep(random.randrange(4))\n    q.put(random.sample(points,1)[0])\n"]], ['Matplotlib in Python - Drawing shapes and animating them'], 2], [(2109293, 0), [['If the items are non-unique you can use a PlayerItem model and define it as a  through model  as Daniel Roseman suggested. To avoid saving the same item twice you can use  unique_together :'], ['However if the items will vary slightly or you need to store acquisition date for instance, you need a different setup:']], [[" class Item(models.Model):\n    name = models.CharField(max_length = 200, blank = False)\n\nclass Player(models.Model):\n    items = models.ManyToManyField(Item, through='PlayerItem')\n\nclass PlayerItem(models.Model):\n    player = models.ForeignKey(Player)\n    item = models.ForeignKey(Item)\n    quantity = models.IntegerField(default=1)\n\n    class Meta:\n        unique_together = ('player', 'item')\n"]], ['Django - How to model this correctly?'], 2], [(2109293, 1), [['However if the items will vary slightly or you need to store acquisition date for instance, you need a different setup:'], ['This time you will be saving duplicates of (player, item) tuple, one for each item. And then you can get the number of a specific item via  count() .']], [[" class Item(models.Model):\n    name = models.CharField(max_length = 200, blank = False)\n\nclass Player(models.Model):\n    items = models.ManyToManyField(Item, through='PlayerItem')\n\nclass PlayerItem(models.Model):\n    player = models.ForeignKey(Player)\n    item = models.ForeignKey(Item)\n    acquired = models.DateTimeField(default=datetime.datetime.now)\n"]], ['Django - How to model this correctly?'], 2], [(2109988, 0), [['For example from a shell...'], ['... will rename a file \'blah.txt\' in each immediate sub-directory of "Z:\\FolderCollectionHere" to .csv.']], [[' python renamer.py "Z:\\\\FolderCollectionInHere" blah.txt csv\n']], ['Renaming a file on a remote file server in C# / Python'], 2], [(2109988, 1), [['... will rename a file \'blah.txt\' in each immediate sub-directory of "Z:\\FolderCollectionHere" to .csv.'], ['-10000']], [[' import os\nimport sys\n\nclass Renamer:\n    def start(self, args):\n        os.chdir(args[1])\n        dirs = os.listdir(".")\n\n        for dir in dirs:\n            try:\n                os.rename(dir + "\\\\" + args[2], dir + "\\\\" + dir + "." + args[3])\n                print "Renamed file in directory: " + dir\n            except Exception:\n                print "Couldn\'t find file to rename in directory: " + dir\n\nRenamer().start(sys.argv)\n']], ['Renaming a file on a remote file server in C# / Python'], 2], [(2110753, 0), [['-10000'], ['should be written as']], [[' for i in range(len(somelist)):\n   something( somelist[i] )\n']], ['Cleaning up nested for loops in python'], 4], [(2110753, 1), [['should be written as'], ['Also you can write everything much shorter:']], [[' for x in somelist: \n    something( x )\n']], ['Cleaning up nested for loops in python'], 4], [(2110753, 2), [['Also you can write everything much shorter:'], ['This looks cleaner and actually does what you wanted: ;-)']], [[' def GetSteamAccts():\n    Steamapp_Folders = [f for f in ("C:\\\\Program Files (x86)\\\\Steam\\\\steamapps\\\\", \n                                    "C:\\\\Program Files\\\\Steam\\\\steamapps\\\\") \n                          if os.path.isdir(f)]\n    return [os.path.join(root, folder) \n                    for root in Steamapp_Folders \n                    for folder in os.listdir(root) \n                    if os.path.isdir( os.path.join(root, folder)) ]\n']], ['Cleaning up nested for loops in python'], 4], [(2110753, 3), [['This looks cleaner and actually does what you wanted: ;-)'], ['-10000']], [[' def subfoldernames( root ):\n    for folder in os.listdir(root):\n        path = os.path.join(root, folder)\n        if os.path.isdir(path):\n            yield folder # just the name, not the path\n\n# same, just shorter:\ndef subfoldernames( root ):\n    # this returns a generator, written as a generator expression\n    return ( folder for folder in os.listdir( root ) \n                    if os.path.isdir(os.path.join( root, folder )) )\n\ndef GetSteamAccts():\n        Steamapp_Folders = ("C:\\\\Program Files (x86)\\\\Steam\\\\steamapps\\\\", \n                                             "C:\\\\Program Files\\\\Steam\\\\steamapps\\\\")\n        for folder in Steamapp_Folders:\n            if os.path.isdir(folder):\n                # only the subfolders of the first path that exists are returned\n                return list(subfoldernames( folder )) \n']], ['Cleaning up nested for loops in python'], 4], [(2113126, 0), [["You are probably just missing the 'b' (binary) flag for effectively writing the file as binary:"], ["But I don't see why you need the  shutil.copyfileobj  call in there, why not do something like this:"]], [[" save_file = open(os_path, 'wb')\n"]], ['Pylons Uploading Distorted Images on Windows'], 4], [(2113126, 1), [["But I don't see why you need the  shutil.copyfileobj  call in there, why not do something like this:"], ['Or make the last three lines a bit more pythonic (making sure the file handle gets closed even if the write fails):']], [[" file_save_path = os.path.join(config.images_dir, request.POST['image'].filename)\nfile_contents = request.POST['image'].file.read()\n\n# insert sanity checks here...\n\nsave_file = open(file_save_path, 'wb')\nsave_file.write(file_contents)\nsave_file.close()\n"]], ['Pylons Uploading Distorted Images on Windows'], 4], [(2113126, 2), [['Or make the last three lines a bit more pythonic (making sure the file handle gets closed even if the write fails):'], ["It's possible you need a"]], [[" with open(file_save_path, 'wb') as save_file:\n    save_file.write(file_contents)\n"]], ['Pylons Uploading Distorted Images on Windows'], 4], [(2113126, 3), [["It's possible you need a"], ["at the top of your file if you're below Python 2.6."]], [[' from __future__ import with_statements\n']], ['Pylons Uploading Distorted Images on Windows'], 4], [(2114510, 0), [['Check out  argument lists  in the Python docs.'], ['Then to pass the args along:']], [[" >>> def wrapper(param1, *stuff, **kargs):\n...  print(param1)\n...  print(stuff)\n...  print(args)\n...\n>>> wrapper(3, 4, 5, foo=2)\n3\n(4, 5)\n{'foo': 2}\n"]], ['Preserving argument default values while method chaining'], 2], [(2114510, 1), [['Then to pass the args along:'], ['The  *stuff  is a variable number of non-named arguments, and the  **kargs  is a variable number of named arguments.']], [[' wrapee(param1, *stuff, **kargs)\n']], ['Preserving argument default values while method chaining'], 2], [(2115615, 0), [['You can print your value in Python, like this:'], ['and in your shell script:']], [[' print fooPy()\n']], ['assigning value to shell variable using a function return value from Python'], 2], [(2115615, 1), [['and in your shell script:'], ['Be sure not to leave spaces around the  =  in the shell script.']], [[' fooShell=$(python fooPy.py)\n']], ['assigning value to shell variable using a function return value from Python'], 2], [(2116121, 0), [['I obtain an etree child object with a\n  string value, but the string contains\n  the'], ['I just tried that, and it doesn\'t get "interpreted". The elements attributes as returned after parsed is:']], [[' \\3\n']], ['XML to store system paths in Python with lxml'], 2], [(2116121, 1), [['I just tried that, and it doesn\'t get "interpreted". The elements attributes as returned after parsed is:'], ['So as you see this works just as you expected it to work. If you really have this problem, you are doing something else than what you are saying. Show us the real code, or make a small example code where you demonstrate the problem and use that.']], [[" {'type': 'str', 'name': 'yowza!', 'value': 'c:\\\\test\\\\3 tests\\\\test'}\n"]], ['XML to store system paths in Python with lxml'], 2], [(2116286, 0), [["The same way as you'd do it by hand:"], ["By the way, here's the one liner (without counting the import) that some people were seeking (should be less efficient than the other approach)"]], [[' seen = set()\nrepeated = set()\nfor l in list_of_lists:\n  for i in set(l):\n    if i in seen:\n      repeated.add(i)\n    else:\n      seen.add(i)\n']], ['Python: Find identical items in multiple lists'], 2], [(2116286, 1), [["By the way, here's the one liner (without counting the import) that some people were seeking (should be less efficient than the other approach)"], ['-10000']], [[' from itertools import *\nreduce(set.union, (starmap(set.intersection, combinations(map(set, ll), 2))))\n']], ['Python: Find identical items in multiple lists'], 2], [(2116662, 0), [['Start with the recursive algorithm (pseudocode) : '], ['This is a clear case of tail recursion, so you can easily turn it into a while-loop. ']], [[' traverse(node):\n  if node != None do:\n    traverse(node.left)\n    print node.value\n    traverse(node.right)\n  endif\n']], ['Help me understand Inorder Traversal without using recursion'], 4], [(2116662, 1), [['This is a clear case of tail recursion, so you can easily turn it into a while-loop. '], ['You\'re left with a recursive call. What the recursive call does is push a new context on the stack, run the code from the beginning, then retrieve the context and keep doing what it was doing. So, you create a stack for storage, and a loop that determines, on every iteration, whether we\'re in a "first run" situation (non-null node) or a "returning" situation (null node, non-empty stack) and runs the appropriate code: ']], [[' traverse(node):\n  while node != None do:\n    traverse(node.left)\n    print node.value\n    node = node.right\n  endwhile\n']], ['Help me understand Inorder Traversal without using recursion'], 4], [(2116662, 2), [['You\'re left with a recursive call. What the recursive call does is push a new context on the stack, run the code from the beginning, then retrieve the context and keep doing what it was doing. So, you create a stack for storage, and a loop that determines, on every iteration, whether we\'re in a "first run" situation (non-null node) or a "returning" situation (null node, non-empty stack) and runs the appropriate code: '], ["In this specific situation, we're using the node to keep information about the situation. Another way would be to store that in the stack itself (just like a computer does for recursion). With that technique, the code is less optimal, but easier to follow"]], [[' traverse(node):\n  stack = []\n  while !empty(stack) || node != None do:\n    if node != None do: // this is a normal call, recurse\n      push(stack,node)\n      node = node.left\n    else // we are now returning: pop and print the current node\n      node = pop(stack)\n      print node.value\n      node = node.right\n    endif\n  endwhile\n']], ['Help me understand Inorder Traversal without using recursion'], 4], [(2116662, 3), [["In this specific situation, we're using the node to keep information about the situation. Another way would be to store that in the stack itself (just like a computer does for recursion). With that technique, the code is less optimal, but easier to follow"], ['-10000']], [[" traverse(node):\n  // entry:\n  if node == NULL do return\n  traverse(node.left)\n  // after-left-traversal:\n  print node.value\n  traverse(node.right)\n\ntraverse(node):\n   stack = [node,'entry']\n   while !empty(stack) do:\n     [node,state] = pop(stack)\n     switch state: \n       case 'entry': \n         if node == None do: break; // return\n         push(stack,[node,'after-left-traversal']) // store return address\n         push(stack,[node.left,'entry']) // recursive call\n         break;\n       case 'after-left-traversal': \n         print node.value;\n         // tail call : no return address\n         push(stack,[node.right,'entry']) // recursive call\n      end\n    endwhile \n"]], ['Help me understand Inorder Traversal without using recursion'], 4], [(2118503, 0), [['Do you mean'], ['Or one of many alternatives:']], [[' for key in myDict:\n    if key not in myList:\n        print(key+"\\t"+myDict[key])\n']], ['Python List Exclusions'], 2], [(2118503, 1), [['Or one of many alternatives:'], ['-10000']], [[' for key in (set(myDict)-set(myList)):\n    print(key+"\\t"+myDict[key])\n']], ['Python List Exclusions'], 2], [(2119153, 0), [['Yes, you can do that using SQL only. A solution would be to use a Stored Routine. The bellow Stored Procedure produces following output:'], ['The table  I used:']], [[' start   cnt\n00:05:00   1\n00:10:00   0\n00:15:00   1\n00:20:00   0\n00:25:00   1\n00:30:00   0\n00:35:00   1\n00:40:00   0\n00:45:00   0\n00:50:00   0\n00:55:00   2\n']], ['python : mysql : Return 0 when no rows found'], 5], [(2119153, 1), [['The table  I used:'], ['Here the Stored Procedure  (adjust for your environment):']], [[' CREATE TABLE `timedata` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `c1` datetime DEFAULT NULL,\n  `c2` varchar(20) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n)\n']], ['python : mysql : Return 0 when no rows found'], 5], [(2119153, 2), [['Here the Stored Procedure  (adjust for your environment):'], ["If you save the above into a file called 'per5minproc.sql', you can load it like this:"]], [[' DROP PROCEDURE IF EXISTS per5min;\nDELIMITER //\nCREATE PROCEDURE per5min ()\nBEGIN\n  DECLARE dtMin DATETIME;\n  DECLARE dtMax DATETIME;\n  DECLARE dtStart DATETIME;\n  DECLARE dtStop DATETIME;\n  DECLARE tmDiff TIME;\n  DECLARE result INT UNSIGNED;\n  SET @offset = 5 * 60;\n  SELECT MIN(c1) into dtMin FROM timedata;\n  SELECT MAX(c1) into dtMax FROM timedata;\n\n  CREATE TEMPORARY TABLE tmp_per5min (\n      start TIME,\n      cnt INT UNSIGNED\n  );\n\n  SET dtStart = dtMin;\n  REPEAT\n    SELECT dtStart + INTERVAL @offset SECOND into dtStop;\n    SELECT count(c2) into result FROM timedata WHERE c1 BETWEEN dtStart and dtStop;\n    SELECT TIME(SUBTIME(dtStop,TIME(dtMin))) into tmDiff;\n    INSERT INTO tmp_per5min (start,cnt) VALUES (tmDiff,result);\n    SET dtStart = dtStop;\n  UNTIL dtStop >= dtMax END REPEAT;\n\n  SELECT * FROM tmp_per5min;\n  DROP TABLE tmp_per5min;\nEND;\n//\nDELIMITER ;\n\nCALL per5min();\n']], ['python : mysql : Return 0 when no rows found'], 5], [(2119153, 3), [["If you save the above into a file called 'per5minproc.sql', you can load it like this:"], ["In Python using MySQLdb  (I didn't get this working in MySQL Connector/Python, me ashamed!):"]], [[' shell> mysql -uroot test < per5minproc.sql\n']], ['python : mysql : Return 0 when no rows found'], 5], [(2119153, 4), [["In Python using MySQLdb  (I didn't get this working in MySQL Connector/Python, me ashamed!):"], ["The solution above works, but probably will need some tweaking, e.g. dtStart can be an argument to the SP.\nAnd, it's indeed all SQL!"]], [[' import MySQLdb as m\n\nif __name__ == \'__main__\':\n    db = m.connect(user=\'root\',db=\'test\')\n    c = db.cursor()\n    c.callproc("per5min")\n    print(c.fetchall())\n    c.close()\n    db.close()\n']], ['python : mysql : Return 0 when no rows found'], 5], [(2119761, 0), [['Using  scipy.weave  and  SSE2  intrinsics gives a marginal improvement. The first invocation is a bit slower since the code needs to be loaded from the disk and cached, subsequent invocations are faster:'], ['Taking into account the comments, I revisited the code to find out if the copying could be avoided. Turns out I read the documentation of the string object wrong, so here goes my second try:']], [[' import numpy\nimport time\nfrom os import urandom\nfrom scipy import weave\n\nSIZE = 2**20\n\ndef faster_slow_xor(aa,bb):\n    b = numpy.fromstring(bb, dtype=numpy.uint64)\n    numpy.bitwise_xor(numpy.frombuffer(aa,dtype=numpy.uint64), b, b)\n    return b.tostring()\n\ncode = """\nconst __m128i* pa = (__m128i*)a;\nconst __m128i* pend = (__m128i*)(a + arr_size);\n__m128i* pb = (__m128i*)b;\n__m128i xmm1, xmm2;\nwhile (pa < pend) {\n  xmm1 = _mm_loadu_si128(pa); // must use unaligned access \n  xmm2 = _mm_load_si128(pb); // numpy will align at 16 byte boundaries\n  _mm_store_si128(pb, _mm_xor_si128(xmm1, xmm2));\n  ++pa;\n  ++pb;\n}\n"""\n\ndef inline_xor(aa, bb):\n    a = numpy.frombuffer(aa, dtype=numpy.uint64)\n    b = numpy.fromstring(bb, dtype=numpy.uint64)\n    arr_size = a.shape[0]\n    weave.inline(code, ["a", "b", "arr_size"], headers = [\'"emmintrin.h"\'])\n    return b.tostring()\n']], ['Simple Python Challenge: Fastest Bitwise XOR on Data Buffers'], 2], [(2119761, 1), [['Taking into account the comments, I revisited the code to find out if the copying could be avoided. Turns out I read the documentation of the string object wrong, so here goes my second try:'], ["The difference is that the string is allocated inside the C code. It's impossible to have it aligned at a 16-byte-boundary as required by the SSE2 instructions, therefore the unaligned memory regions at the beginning and the end are copied using byte-wise access. "]], [[' support = """\n#define ALIGNMENT 16\nstatic void memxor(const char* in1, const char* in2, char* out, ssize_t n) {\n    const char* end = in1 + n;\n    while (in1 < end) {\n       *out = *in1 ^ *in2;\n       ++in1; \n       ++in2;\n       ++out;\n    }\n}\n"""\n\ncode2 = """\nPyObject* res = PyString_FromStringAndSize(NULL, real_size);\n\nconst ssize_t tail = (ssize_t)PyString_AS_STRING(res) % ALIGNMENT;\nconst ssize_t head = (ALIGNMENT - tail) % ALIGNMENT;\n\nmemxor((const char*)a, (const char*)b, PyString_AS_STRING(res), head);\n\nconst __m128i* pa = (__m128i*)((char*)a + head);\nconst __m128i* pend = (__m128i*)((char*)a + real_size - tail);\nconst __m128i* pb = (__m128i*)((char*)b + head);\n__m128i xmm1, xmm2;\n__m128i* pc = (__m128i*)(PyString_AS_STRING(res) + head);\nwhile (pa < pend) {\n    xmm1 = _mm_loadu_si128(pa);\n    xmm2 = _mm_loadu_si128(pb);\n    _mm_stream_si128(pc, _mm_xor_si128(xmm1, xmm2));\n    ++pa;\n    ++pb;\n    ++pc;\n}\nmemxor((const char*)pa, (const char*)pb, (char*)pc, tail);\nreturn_val = res;\nPy_DECREF(res);\n"""\n\ndef inline_xor_nocopy(aa, bb):\n    real_size = len(aa)\n    a = numpy.frombuffer(aa, dtype=numpy.uint64)\n    b = numpy.frombuffer(bb, dtype=numpy.uint64)\n    return weave.inline(code2, ["a", "b", "real_size"], \n                        headers = [\'"emmintrin.h"\'], \n                        support_code = support)\n']], ['Simple Python Challenge: Fastest Bitwise XOR on Data Buffers'], 2], [(2122880, 0), [['You can create a list for each key, holding all values for that key:'], ['Edit: If you want the keys/values exactly as specified in your question, you can then do something like:']], [[' d = collections.defaultdict(list)\nfor line in stream:\n    if \'/\' in line:\n        #.....\n        key =  str(hostname)+":"+r.groups()[0][0:2]+r.groups()[2]\n        value = str(line[3])\n        d[key].append(value)\n']], ['Python - uniquifying(!) dictionary keys'], 2], [(2122880, 1), [['Edit: If you want the keys/values exactly as specified in your question, you can then do something like:'], ["I used  ' '.join()  here to join the values into a single string - it isn't really clear from your question if that's what you want."]], [[" d2 = {}\nfor key,values in d.iteritems():\n    d2['%s:%d' % (key, len(values)] = ' '.join(str(v) for v in values)\n"]], ['Python - uniquifying(!) dictionary keys'], 2], [(2123369, 0), [['To get a copy run:'], ['Or install it via PyPI']], [[' bzr branch lp:django-openid-auth\n']], ["What's the best solution for OpenID with Django?"], 2], [(2123369, 1), [['Or install it via PyPI'], ['-10000']], [[' pip install django-openid-auth\n']], ["What's the best solution for OpenID with Django?"], 2], [(2124645, 0), [['you can right-pad like this:'], ['to left pad:']], [[" str = '%-10f' % val\n"]], ['Pretty printing a list of list of floats?'], 4], [(2124645, 1), [['to left pad:'], ['or in combination pad and set the precision to 4 decimal places:']], [[" set = '%10f' % val\n"]], ['Pretty printing a list of list of floats?'], 4], [(2124645, 2), [['or in combination pad and set the precision to 4 decimal places:'], [':']], [[" str = '%-10.4f' % val\n"]], ['Pretty printing a list of list of floats?'], 4], [(2124645, 3), [[':'], ['-10000']], [[' import sys\nrows = [[1.343, 348.222, 484844.3333], [12349.000002, -2.43333]]\nfor row in rows:\n  for val in row:\n    sys.stdout.write(\'%20f\' % val)\n  sys.stdout.write("\\n")\n\n        1.343000          348.222000       484844.333300\n    12349.000002           -2.433330\n']], ['Pretty printing a list of list of floats?'], 4], [(2125724, 0), [["You can't easily store emails in  django.contrib.auth.model.User 's username field, so you'll need a different auth backend. Put the following somewhere and add its path to  AUTHENTICATION_BACKENDS . See  http://docs.djangoproject.com/en/dev/topics/auth/#writing-an-authentication-backend"], ['Set the username in a save method somewhere (eg in your new user form):']], [[' from django.contrib.auth.models import User\n\nclass EmailBackend(object):\n    """ Authenticates against the email field of django.contrib.auth.models.User\n    """\n\n    def authenticate(self, email=None, password=None):\n        # Try using the email if it is given\n        if email:\n            for user in User.objects.filter(email=email):\n                if user.check_password(password):\n                    return user\n\n    def get_user(self, user_id):\n        try:\n            return User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            return None\n']], ["how do I change 'username-password login' to 'email-password login' on django-registration"], 2], [(2125724, 1), [['Set the username in a save method somewhere (eg in your new user form):'], ['-10000']], [[' import uuid, binascii\nusername = binascii.b2a_base64(uuid.uuid4().bytes)\n']], ["how do I change 'username-password login' to 'email-password login' on django-registration"], 2], [(2126551, 0), [['You can construct your own constant of Unicode upper and lower case letters with:'], ['This makes a string 2153 characters long (narrow Unicode Python build).  For code like  letter in unicode_letters  it would be faster to use a set instead:']], [[" import unicodedata as ud\nall_unicode = ''.join(unichr(i) for i in xrange(65536))\nunicode_letters = ''.join(c for c in all_unicode\n                          if ud.category(c)=='Lu' or ud.category(c)=='Ll')\n"]], ['An equivalent to string.ascii_letters for unicode strings in python 2.x?'], 2], [(2126551, 1), [['This makes a string 2153 characters long (narrow Unicode Python build).  For code like  letter in unicode_letters  it would be faster to use a set instead:'], ['-10000']], [[' unicode_letters = set(unicode_letters)\n']], ['An equivalent to string.ascii_letters for unicode strings in python 2.x?'], 2], [(2126811, 0), [['You want to run a pipeline on some dataset. That sounds like a reduce operation (fold in some languages). No need for anything complicated:'], ['This assumes workflow looks like (text-oriented so you can load it with YAML/JSON):']], [[' result = reduce(lambda data, (aname, p): algo_by_name(aname)(p, data), workflow)\n']], ['Processing a simple workflow in Python'], 4], [(2126811, 1), [['This assumes workflow looks like (text-oriented so you can load it with YAML/JSON):'], ['And that your algorithms look like:']], [[" workflow = ['data', ('algo0', {}), ('algo1', {'param': value}), … ]\n"]], ['Processing a simple workflow in Python'], 4], [(2126811, 2), [['And that your algorithms look like:'], ['algo_by_name takes a name and gives you an algo function; for example:']], [[' def algo0(p, data):\n    …\n    return output_data.filename\n']], ['Processing a simple workflow in Python'], 4], [(2126811, 3), [['algo_by_name takes a name and gives you an algo function; for example:'], ["(old edit: if you want a framework for writing pipelines, you could use  Ruffus . It's like a make tool, but with progress support and pretty flow charts.)"]], [[" def algo_by_name(name):\n    return {'algo0': algo0, 'algo1': algo1, }[name]\n"]], ['Processing a simple workflow in Python'], 4], [(2127680, 0), [['Pointed out by  Dave Kirby , simply using  itertools.count  also saves you some time:'], ['Time:  6.2s']], [[' from itertools import count\nKS = count()\n']], ['Python: Optimizing, or at least getting fresh ideas for a tree generator'], 4], [(2127680, 1), [['Time:  6.2s'], ['Time:  5.2s']], [[' class Node(object):\n    isRoot = False\n    left  = None\n    right = None\n    parent = None\n    branch = None\n    seq = 0\n\n    def __init__(self, cargo):\n        self.cargo = cargo\n']], ['Python: Optimizing, or at least getting fresh ideas for a tree generator'], 4], [(2127680, 2), [['Time:  5.2s'], ['Final time: 4.1s']], [[' from collections import namedtuple\nNode = namedtuple("Node", ["cargo", "left", "right", "branch", "seq", "isRoot"])\n# ...\n    def build_nodes (self,  depth = Depth, entry = 1,  pparent = None,\n         bbranch = None):\n        r = random.random()\n\n        if (depth <= 0) or ((r > Ratio) and (not (entry))):\n            this_node = Node(\n                random.choice(Atoms), None, None, bbranch, KS.next(), False)\n            self.thedict[this_node.seq] = this_node\n            return this_node\n\n        else:\n            this_operator = random.choice(OpKeys)\n\n            this_node = Node(\n              this_operator,\n              self.build_nodes(entry = 0, depth = depth - 1,\n                               pparent = None, bbranch = \'left\'),\n              self.build_nodes(entry = 0, depth = depth - 2,\n                               pparent = None, bbranch = \'right\'),\n              bbranch, \n              KS.next(), \n              bool(entry))\n\n            self.thedict[this_node.seq] = this_node    \n            return this_node\n']], ['Python: Optimizing, or at least getting fresh ideas for a tree generator'], 4], [(2127680, 3), [['Final time: 4.1s'], ['This code also decreases the depth with the operator position.']], [[' from collections import namedtuple\nNode = namedtuple("Node", ["cargo", "args", "parent", "branch", "seq", "isRoot"])\n\n    def build_nodes (self,  depth = Depth, entry = 1,  pparent = None,\n         bbranch = None):\n        r = random.random()\n\n        if (depth <= 0) or ((r > Ratio) and (not (entry))):\n            this_node = Node(\n                random.choice(Atoms), None, pparent, bbranch, KS.next(), False)\n            self.thedict[this_node.seq] = this_node\n            return this_node\n\n        else:\n            this_operator = random.choice(OpKeys)\n\n            this_node = Node(\n              this_operator, [], pparent, bbranch,\n              KS.next(), bool(entry))\n            this_node.args.extend(\n              self.build_nodes(entry = 0, depth = depth - (i + 1),\n                               pparent = this_node, bbranch = i)\n              for i in range(Operators[this_operator]))\n\n            self.thedict[this_node.seq] = this_node    \n            return this_node\n']], ['Python: Optimizing, or at least getting fresh ideas for a tree generator'], 4], [(2128266, 0), [["You just want to send python data between nodes (possibly on separate computers)? You might want to look at SimpleXMLRPCServer. It's based on the inbuilt HTTP server, which is based on the inbuilt Socket server, neither of which are the most industrial-strength servers around, but it's easy to set up in a hurry:"], ['And easy to connect to:']], [[' from SimpleXMLRPCServer import SimpleXMLRPCServer\nserver = SimpleXMLRPCServer(("localhost", 9876))\n\ndef my_func(a,b):\n    return a + b\n\nserver.register_function(my_func)\nserver.serve_forever()\n']], ['Network programming in Python'], 2], [(2128266, 1), [['And easy to connect to:'], ["Twisted is popular for industrial applications, but it's got a brutal learning curve. "]], [[" import xmlrpclib\ns = xmlrpclib.ServerProxy('http://localhost:9876')\n\nprint s.my_func(2,3) \n>>> 5\nprint type(s.my_func(2,3))\n>>> <type 'int'>\nprint s.my_func(2,3.0):\n>>> 7.0\n"]], ['Network programming in Python'], 2], [(2128717, 0), [['-10000'], ['If you are using declarative syntax:']], [[' from sqlalchemy.schema import CreateTable\n\nprint(CreateTable(table))\n']], ['SQLAlchemy printing raw SQL from create()'], 4], [(2128717, 1), [['If you are using declarative syntax:'], ['You can get the SQL for your specific database (MySQL, Postgresql, etc.) by compiling with your engine.']], [[' print(CreateTable(Model.__table__))\n']], ['SQLAlchemy printing raw SQL from create()'], 4], [(2128717, 2), [['You can get the SQL for your specific database (MySQL, Postgresql, etc.) by compiling with your engine.'], ['@jackotonye Added in the comments a way to do it without an engine.']], [[' print(CreateTable(Model.__table__).compile(engine))\n']], ['SQLAlchemy printing raw SQL from create()'], 4], [(2128717, 3), [['@jackotonye Added in the comments a way to do it without an engine.'], ['-10000']], [[' print(CreateTable(Model.__table__).compile(dialect=postgresq\u200c\u200bl.dialect()))\n']], ['SQLAlchemy printing raw SQL from create()'], 4], [(2129253, 0), [["In fact, let's see some code:"], ['Well, things are wrapped. A fun Clojuresque unwrapper:']], [[' ;; a handy instance of PythonInterpreter...\n(def python (org.python.util.PythonInterpreter.))\n(.eval python "5")\n; -> #<PyInteger 5>\n']], ['Clojure Jython interop'], 4], [(2129253, 1), [['Well, things are wrapped. A fun Clojuresque unwrapper:'], ['And a counterpart to the above:']], [[" (defmulti py-wrap class)\n;; but let's not wrap if already a PyObject...\n(defmethod py-wrap org.python.core.PyObject [pyo] pyo)\n(defmethod py-wrap Integer [n] (org.python.core.PyInteger n))\n(defmethod py-wrap Long [n] (org.python.core.PyLong n))\n(defmethod py-wrap BigInteger [n] (org.python.core.PyLong n))\n(defmethod py-wrap String [s] (org.python.core.PyString s))\n"]], ['Clojure Jython interop'], 4], [(2129253, 2), [['And a counterpart to the above:'], ["Here's an ultra-basic helper for  ._jcall -type calls:"]], [[" (defmulti py-unwrap class)\n;; if unsure, hope it's not a PyObject at all...\n(defmethod py-unwrap :default [x] x)\n(defmethod py-unwrap org.python.core.PyInteger [n] (.getValue n))\n(defmethod py-unwrap org.python.core.PyString [s] (.toString s))\n"]], ['Clojure Jython interop'], 4], [(2129253, 3), [["Here's an ultra-basic helper for  ._jcall -type calls:"], ['You can  .exec  a string containing a Python definition of  fact , then do  (py-call "fact" 10)  to get a  #<PyInteger 5>  back; unwrap if you feel like it.']], [[' (defn py-call [pyf & args]\n  (apply (fn [pyf & args] (._jcall pyf (into-array args)))\n         (map #(if (string? %) (py-eval %) %)\n              (cons pyf args)))\n']], ['Clojure Jython interop'], 4], [(2129643, 0), [['Here\'s the simple case, with explicit "assign to class" syntax:'], ['and here\'s the fancy version, where you "make it look like" you\'re assigning the special method as an instance attribute (while behind the scene it still goes to the class of course):']], [[" >>> class Individualist(object):\n...   def __init__(self):\n...     self.__class__ = type('GottaBeMe', (self.__class__, object), {})\n... \n>>> a = Individualist()\n>>> b = Individualist()\n>>> a.__class__.__int__ = lambda self: 23\n>>> b.__class__.__int__ = lambda self: 42\n>>> int(a)\n23\n>>> int(b)\n42\n>>> \n"]], ['Dynamically assign special methods to objects but not classes in Python'], 2], [(2129643, 1), [['and here\'s the fancy version, where you "make it look like" you\'re assigning the special method as an instance attribute (while behind the scene it still goes to the class of course):'], ['-10000']], [[" >>> class Sophisticated(Individualist):\n...   def __setattr__(self, n, v):\n...     if n[:2]=='__' and n[-2:]=='__' and n!='__class__':\n...       setattr(self.__class__, n, v)\n...     else:\n...       object.__setattr__(self, n, v)\n... \n>>> c = Sophisticated()\n>>> d = Sophisticated()\n>>> c.__int__ = lambda self: 54\n>>> d.__int__ = lambda self: 88\n>>> int(c)\n54\n>>> int(d)\n88\n"]], ['Dynamically assign special methods to objects but not classes in Python'], 2], [(2129930, 0), [['You can use the descriptor of the method to get a bound method:'], ["Of course, you can use  __class__  if you don't know the type of instOfB:"]], [[' instOfA.printSelf = b.printSelf.__get__(instOfA)\n']], ['copying functions located in instances'], 3], [(2129930, 1), [["Of course, you can use  __class__  if you don't know the type of instOfB:"], ["If  instOfA  doesn't need the method stored, you can just pass in an instance of  a  as  self :"]], [[' instOfA.printSelf = instOfB.__class__.printSelf.__get__(instOfA)\n']], ['copying functions located in instances'], 3], [(2129930, 2), [["If  instOfA  doesn't need the method stored, you can just pass in an instance of  a  as  self :"], ['-10000']], [[' instOfB.printSelf.__func__(instOfA)\n']], ['copying functions located in instances'], 3], [(2130016, 0), [["Here's one that could work:"], ['Testing:']], [[' def chunkIt(seq, num):\n    avg = len(seq) / float(num)\n    out = []\n    last = 0.0\n\n    while last < len(seq):\n        out.append(seq[int(last):int(last + avg)])\n        last += avg\n\n    return out\n']], ['Splitting a list into N parts of approximately equal length'], 2], [(2130016, 1), [['Testing:'], ['-10000']], [[' >>> chunkIt(range(10), 3)\n[[0, 1, 2], [3, 4, 5], [6, 7, 8, 9]]\n>>> chunkIt(range(11), 3)\n[[0, 1, 2], [3, 4, 5, 6], [7, 8, 9, 10]]\n>>> chunkIt(range(12), 3)\n[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]\n']], ['Splitting a list into N parts of approximately equal length'], 2], [(2132985, 0), [['Just import it'], ['or, better']], [[' import script\nprint script.airportCode\n']], ['How to import or include data structures (e.g. a dict) into a Python file from a separate file'], 2], [(2132985, 1), [['or, better'], ['Just be careful to put both scripts on the same directory (or make a python package, a subdir with  __init__.py  file; or put the path to script.py on the PYTHONPATH; but these are "advanced options", just put it on the same directory and it\'ll be fine). ']], [[' from script import airportCode\nprint airportCode\n']], ['How to import or include data structures (e.g. a dict) into a Python file from a separate file'], 2], [(2135457, 0), [['Example:'], ['And on python:']], [[' #include <boost/shared_ptr.hpp>\n#include <boost/python.hpp>\n#include <boost/python/signature.hpp>\n#include <boost/mpl/vector.hpp>\n\n#include <iostream>\n#include <string>\n#include <sstream>\n\nstatic boost::shared_ptr<std::ostringstream> test_stream_data;\n\nstd::ostringstream& test_stream()\n{\n    if (!test_stream_data) {\n        test_stream_data.reset(new std::ostringstream);\n    }\n    return *test_stream_data;\n}\n\n\nstd::string get_value_and_clear_test_stream()\n{\n    std::string result;\n    if (test_stream_data) {\n        result = test_stream_data->str();\n    }\n    test_stream_data.reset(new std::ostringstream);\n    return result;\n}\n\n\nstd::string func(int a, double b)\n{\n    std::ostringstream oss;\n    oss << "func(a=" << a << ", b=" << b << ")";\n    std::string result = oss.str();\n    test_stream() << "- In " << result << std::endl;\n    return result;\n}\n\n\nclass MyClass\n{\npublic:\n    MyClass(std::string p_name)\n        : m_name(p_name)\n    {\n        test_stream() << "- In MyClass::MyClass(p_name=\\"" << p_name << "\\")" << std::endl;\n    }\n\n    MyClass(MyClass const& p_another)\n        : m_name(p_another.m_name)\n    {\n        test_stream()\n            << "- In MyClass::MyClass(p_another=MyClass(\\""\n            << p_another.m_name << "\\"))" << std::endl;\n    }\n\n    ~MyClass()\n    {\n        test_stream() << "- In MyClass(\\"" << this->m_name << "\\")::~MyClass()" << std::endl;\n    }\n\n    boost::shared_ptr<MyClass> clone_and_change(std::string p_new_name)\n    {\n        test_stream()\n            << "- In MyClass(\\"" << this->m_name << "\\").clone_and_change(p_new_name=\\""\n            << p_new_name << "\\")" << std::endl;\n\n        boost::shared_ptr<MyClass> result(new MyClass(*this));\n        result->m_name = p_new_name;\n\n        return result;\n    }\n\n    std::string get_name()\n    {\n        test_stream() << "- In MyClass(\\"" << this->m_name << "\\").get_name()" << std::endl;\n        return this->m_name;\n    }\n\n    std::string m_name;\n};\n\n\nstruct ScopePreAndPostActions\n{\n    ScopePreAndPostActions()\n    {\n        test_stream() << "[Before action...]" << std::endl;\n    }\n\n    ~ScopePreAndPostActions()\n    {\n        test_stream() << "[After action...]" << std::endl;\n    }\n};\n\n\n\n\n\ntemplate <class FuncType_>\nstruct FuncWrapper;\n\n// You can code-generate specializations for other arities...\n\ntemplate <class R_, class A0_, class A1_>\nstruct FuncWrapper<R_ (A0_, A1_)>\n{\n    typedef R_ (*func_type)(A0_, A1_);\n\n    typedef typename boost::add_const<typename boost::add_reference<typename A0_>::type>::type AC0_;\n    typedef typename boost::add_const<typename boost::add_reference<typename A1_>::type>::type AC1_;\n\n    func_type m_wrapped_func;\n\n    FuncWrapper(func_type p_wrapped_func)\n        : m_wrapped_func(p_wrapped_func)\n    {\n    }\n\n    R_ operator()(AC0_ p0, AC1_ p1)\n    {\n        ScopePreAndPostActions actions_guard;\n        return this->m_wrapped_func(p0, p1);\n    }\n};\n\ntemplate <\n    class R_,\n    class C_,\n    class A0_=void,\n    class A1_=void,\n    class A2_=void\n    // ...\n>\nstruct MemberFuncWrapper;\n\ntemplate <class R_, class C_, class A0_>\nstruct MemberFuncWrapper<R_, C_, A0_>\n{\n    typedef R_ (C_::*member_func_type)(A0_);\n\n    typedef typename boost::add_const<typename boost::add_reference<typename A0_>::type>::type AC0_;\n\n    member_func_type m_wrapped_method;\n\n    MemberFuncWrapper(member_func_type p_wrapped_method)\n        : m_wrapped_method(p_wrapped_method)\n    {\n    }\n\n    R_ operator()(C_* p_self, AC0_ p0)\n    {\n        ScopePreAndPostActions actions_guard;\n        return (p_self->*(this->m_wrapped_method))(p0);\n        return R_();\n    }\n};\n\n\n\nnamespace boost { namespace python { namespace detail {\n\n    // You can code-generate specializations for other arities...\n\n    template <class R_, class P0_, class P1_>\n    inline boost::mpl::vector<R_, P0_, P1_>\n    get_signature(FuncWrapper<R_ (P0_, P1_)>, void* = 0)\n    {\n        return boost::mpl::vector<R_, P0_, P1_>();\n    }\n\n    template <class R_, class C_, class P0_>\n    inline boost::mpl::vector<R_, C_*, P0_>\n    get_signature(MemberFuncWrapper<R_, C_, P0_>, void* = 0)\n    {\n        return boost::mpl::vector<R_, C_*, P0_>();\n    }\n\n} } }\n\n// -------------------------------------------------------------------\n\ntemplate <class FuncPtr_>\nvoid make_wrapper(FuncPtr_);\n\n// You can code-generate specializations for other arities...\n\ntemplate <class R_, class A0_, class A1_>\nFuncWrapper<R_ (A0_, A1_)> make_wrapper(R_ (*p_wrapped_func)(A0_, A1_))\n{\n    return FuncWrapper<R_ (A0_, A1_)>(p_wrapped_func);\n}\n\ntemplate <class R_, class C_, class A0_>\nMemberFuncWrapper<R_, C_, A0_> make_wrapper(R_ (C_::*p_wrapped_method)(A0_))\n{\n    return MemberFuncWrapper<R_, C_, A0_>(p_wrapped_method);\n}\n\ntemplate <class R_, class C_, class A0_, class A1_>\nMemberFuncWrapper<R_, C_, A0_, A1_> make_wrapper(R_ (C_::*p_wrapped_method)(A0_, A1_))\n{\n    return MemberFuncWrapper<R_, C_, A0_, A1_>(p_wrapped_method);\n}\n\n\nusing namespace boost::python;\n\nvoid RegisterTestWrapper()\n{\n    def("GetValueAndClearTestStream", &get_value_and_clear_test_stream);\n    def("TestFunc", &func);\n    def(\n        "TestWrappedFunctor",\n        make_wrapper(&func)\n    );\n\n    {\n        class_< MyClass, shared_ptr<MyClass>, boost::noncopyable > c("MyClass", init<std::string>());\n        c.def("CloneAndChange", &MyClass::clone_and_change);\n        c.def("GetName", &MyClass::get_name);\n        c.def("WrappedCloneAndChange", make_wrapper(&MyClass::clone_and_change));\n    }\n}\n']], ['How to write a wrapper over functions and member functions that executes some code before and after the wrapped function?'], 2], [(2135457, 1), [['And on python:'], ['-10000']], [[' import unittest\nfrom _test_wrapper import GetValueAndClearTestStream, TestFunc, TestWrappedFunctor, MyClass\n\nclass Test(unittest.TestCase):\n\n    def setUp(self):\n        GetValueAndClearTestStream()\n\n    def testWrapper(self):\n        self.assertEqual(TestFunc(69, 1.618), \'func(a=69, b=1.618)\')\n        self.assertEqual(GetValueAndClearTestStream(), \'- In func(a=69, b=1.618)\\n\')\n\n        self.assertEqual(TestWrappedFunctor(69, 1.618), \'func(a=69, b=1.618)\')\n        self.assertEqual(\n            GetValueAndClearTestStream(),\n            (\n                \'[Before action...]\\n\'\n                \'- In func(a=69, b=1.618)\\n\'\n                \'[After action...]\\n\'\n            ),\n        )\n\ndef testWrappedMemberFunction(self):\n    from textwrap import dedent\n    x = MyClass("xx")\n    y = x.WrappedCloneAndChange("yy")\n    z = y.WrappedCloneAndChange("zz")\n\n    self.assertEqual(x.GetName(), "xx")\n    self.assertEqual(y.GetName(), "yy")\n    self.assertEqual(z.GetName(), "zz")\n\n    self.assertEqual(\n        GetValueAndClearTestStream(),\n        dedent(\'\'\'\\\n        - In MyClass::MyClass(p_name="xx")\n        [Before action...]\n        - In MyClass("xx").clone_and_change(p_new_name="yy")\n        - In MyClass::MyClass(p_another=MyClass("xx"))\n        [After action...]\n        [Before action...]\n        - In MyClass("yy").clone_and_change(p_new_name="zz")\n        - In MyClass::MyClass(p_another=MyClass("yy"))\n        [After action...]\n        - In MyClass("xx").get_name()\n        - In MyClass("yy").get_name()\n        - In MyClass("zz").get_name()\n        \'\'\'),\n    )\n']], ['How to write a wrapper over functions and member functions that executes some code before and after the wrapped function?'], 2], [(2136151, 0), [['-10000'], ['Or, for lovers of list comprehension:']], [[' import datetime\n\nfirst=datetime.date(2009,10,12)\nlast=datetime.date(2009,10,20)\nadate=first\ndates=[]\nwhile adate<=last:\n    dates.append(adate)\n    adate+=datetime.timedelta(1)\nprint(dates)\n']], ['Enumerate a DateRange'], 2], [(2136151, 1), [['Or, for lovers of list comprehension:'], ['-10000']], [[' len=(last-first).days\ndates=[first+datetime.timedelta(n) for n in range(len+1)]\n']], ['Enumerate a DateRange'], 2], [(2136267, 0), [['You should post your example document, because the code works fine:'], ['Finding  <div> s inside  <div> s works as well:']], [[' >>> import BeautifulSoup\n>>> soup = BeautifulSoup.BeautifulSoup(\'<html><body><div id="articlebody"> ... </div></body></html\')\n>>> soup.find("div", {"id": "articlebody"})\n<div id="articlebody"> ... </div>\n']], ['Beautiful Soup and extracting a div and its contents by ID'], 2], [(2136267, 1), [['Finding  <div> s inside  <div> s works as well:'], ['-10000']], [[' >>> soup = BeautifulSoup.BeautifulSoup(\'<html><body><div><div id="articlebody"> ... </div></div></body></html\')\n>>> soup.find("div", {"id": "articlebody"})\n<div id="articlebody"> ... </div>\n']], ['Beautiful Soup and extracting a div and its contents by ID'], 2], [(2136363, 0), [["My regex powers had gone a bit stale so I've used your question to fresh what I remember.\nIt became a fairly large regex mostly because I also wanted to filter multi-line comments."], ['This regex matches with three different subgroups. One for code and two for comment contents.\nBelow is a example of how to extract those.']], [[' import re\n\nreexpr = r"""\n    (                           # Capture code\n        "(?:\\\\.|[^"\\\\])*"       # String literal\n        |\n        \'(?:\\\\.|[^\'\\\\])*\'       # String literal\n        |\n        (?:[^/\\n"\']|/[^/*\\n"\'])+ # Any code besides newlines or string literals\n        |\n        \\n                      # Newline\n    )|\n    (/\\*  (?:[^*]|\\*[^/])*   \\*/)        # Multi-line comment\n    |\n    (?://(.*)$)                 # Comment\n    $"""\nrx = re.compile(reexpr, re.VERBOSE + re.MULTILINE)\n']], ['Matching one-line JavaScript comments (//) with re'], 2], [(2136363, 1), [['This regex matches with three different subgroups. One for code and two for comment contents.\nBelow is a example of how to extract those.'], ['-10000']], [[' code = r"""// this is a comment\nvar x = 2 * 4 // and this is a comment too\nvar url = "http://www.google.com/" // and "this" too\nurl += \'but // this is not a comment\' // however this one is\nurl += \'this "is not a comment\' + " and \' neither is this " // only this\n\nbar = \'http://no.comments.com/\' // these // are // comments\nbar = \'text // string \\\' no // more //\\\\\' // comments\nbar = \'http://no.comments.com/\'\nbar = /var/ // comment\n\n/* comment 1 */\nbar = open() /* comment 2 */\nbar = open() /* comment 2b */// another comment\nbar = open( /* comment 3 */ file) // another comment \n"""\n\nparts = rx.findall(code)\nprint \'*\' * 80, \'\\nCode:\\n\\n\', \'\\n\'.join([x[0] for x in parts if x[0].strip()])\nprint \'*\' * 80, \'\\nMulti line comments:\\n\\n\', \'\\n\'.join([x[1] for x in parts if x[1].strip()])\nprint \'*\' * 80, \'\\nOne line comments:\\n\\n\', \'\\n\'.join([x[2] for x in parts if x[2].strip()])\n']], ['Matching one-line JavaScript comments (//) with re'], 2], [(2137619, 0), [["While Python generators are cool, trying to duplicate them really isn't the best way to go about in Scala. For instance, the following code does the equivalent job to what you want:"], ["In it the stream is generated lazily, so it won't process any of the elements until asked for, which you can verify by running this:"]], [[' def classStream(clazz: Class[_]): Stream[Class[_]] = clazz match {\n  case null => Stream.empty\n  case _ => (\n    clazz \n    #:: classStream(clazz.getSuperclass) \n    #::: clazz.getInterfaces.toStream.flatMap(classStream) \n    #::: Stream.empty\n  )\n}\n']], ['Scala equivalent to Python generators?'], 5], [(2137619, 1), [["In it the stream is generated lazily, so it won't process any of the elements until asked for, which you can verify by running this:"], ['The result can be converted into an  Iterator  simply by calling  .iterator  on the resulting  Stream :']], [[' def classStream(clazz: Class[_]): Stream[Class[_]] = clazz match {\n  case null => Stream.empty\n  case _ => (\n    clazz \n    #:: { println(clazz.toString+": super"); classStream(clazz.getSuperclass) } \n    #::: { println(clazz.toString+": interfaces"); clazz.getInterfaces.toStream.flatMap(classStream) } \n    #::: Stream.empty\n  )\n}\n']], ['Scala equivalent to Python generators?'], 5], [(2137619, 2), [['The result can be converted into an  Iterator  simply by calling  .iterator  on the resulting  Stream :'], ['The  foo  definition, using  Stream , would be rendered thus:']], [[' def classIterator(clazz: Class[_]): Iterator[Class[_]] = classStream(clazz).iterator\n']], ['Scala equivalent to Python generators?'], 5], [(2137619, 3), [['The  foo  definition, using  Stream , would be rendered thus:'], ["Another alternative would be concatenating the various iterators, taking care to not pre-compute them. Here's an example, also with debugging messages to help trace the execution:"]], [[' scala> def foo(i: Int): Stream[Int] = i #:: (if (i > 0) foo(i - 1) else Stream.empty)\nfoo: (i: Int)Stream[Int]\n\nscala> foo(5) foreach println\n5\n4\n3\n2\n1\n0\n']], ['Scala equivalent to Python generators?'], 5], [(2137619, 4), [["Another alternative would be concatenating the various iterators, taking care to not pre-compute them. Here's an example, also with debugging messages to help trace the execution:"], ['This is pretty close to your code. Instead of  sudoYield , I have definitions, and then I just concatenate them as I wish.']], [[' def yieldClass(clazz: Class[_]): Iterator[Class[_]] = clazz match {\n  case null => println("empty"); Iterator.empty\n  case _ =>\n    def thisIterator = { println("self of "+clazz); Iterator(clazz) }\n    def superIterator = { println("super of "+clazz); yieldClass(clazz.getSuperclass) }\n    def interfacesIterator = { println("interfaces of "+clazz); clazz.getInterfaces.iterator flatMap yieldClass }\n    thisIterator ++ superIterator ++ interfacesIterator\n}\n']], ['Scala equivalent to Python generators?'], 5], [(2139110, 0), [["The alternative to the imp module that (I believe) should be available in GAE is  __import__() . It's in fact what the 'import' statement calls to do the actual importing."], ['or']], [[" user_language = getattr(__import__('localizable.%s' % language), language)\n"]], ['Import by file/module name in GAE'], 2], [(2139110, 1), [['or'], ["(passing a non-empty fourth argument to  __import__  causes it to return the right-most module in the first argument, instead of the left-most. It's a little hacky, so people tend to prefer the first solution over the second.)"]], [[" user_language __import__('localizable.%s' % language, {}, globals(), [''])\n"]], ['Import by file/module name in GAE'], 2], [(2139202, 0), [['Create a C# program like this:'], ['Make a trivial Python class like this:']], [[' using System;\nusing System.IO;\nusing System.Reflection;\nusing IronPython.Hosting;\nusing Microsoft.Scripting.Hosting;\n// we get access to Action and Func on .Net 2.0 through Microsoft.Scripting.Utils\nusing Microsoft.Scripting.Utils;\n\n\nnamespace TestCallIronPython\n{\n    class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine("Hello World!");\n            ScriptEngine pyEngine = Python.CreateEngine();\n\n            Assembly myclass = Assembly.LoadFile(Path.GetFullPath("MyClass.dll"));\n            pyEngine.Runtime.LoadAssembly(myclass);\n            ScriptScope pyScope = pyEngine.Runtime.ImportModule("MyClass");\n\n            // Get the Python Class\n            object MyClass = pyEngine.Operations.Invoke(pyScope.GetVariable("MyClass"));\n\n            // Invoke a method of the class\n            pyEngine.Operations.InvokeMember(MyClass, "somemethod", new object[0]);\n\n            // create a callable function to \'somemethod\'\n            Action SomeMethod2 = pyEngine.Operations.GetMember<Action>(MyClass, "somemethod");\n            SomeMethod2();\n\n            // create a callable function to \'isodd\'\n            Func<int, bool> IsOdd = pyEngine.Operations.GetMember<Func<int, bool>>(MyClass, "isodd");\n            Console.WriteLine(IsOdd(1).ToString());\n            Console.WriteLine(IsOdd(2).ToString());\n\n            Console.Write("Press any key to continue . . . ");\n            Console.ReadKey(true);\n        }\n    }\n}\n']], ['Build Python scripts and call methods from C#'], 3], [(2139202, 1), [['Make a trivial Python class like this:'], ['Compile it (I use  SharpDevelop ) but the  clr.CompileModules  method should also work.  Then shove the compiled  MyClass.dll  into the directory where the compiled C# program lives and run it.  You should get this as the result:']], [[' class MyClass:\n    def __init__(self):\n        print "I\'m in a compiled class (I hope)"\n\n    def somemethod(self):\n        print "in some method"\n\n    def isodd(self, n):\n        return 1 == n % 2\n']], ['Build Python scripts and call methods from C#'], 3], [(2139202, 2), [['Compile it (I use  SharpDevelop ) but the  clr.CompileModules  method should also work.  Then shove the compiled  MyClass.dll  into the directory where the compiled C# program lives and run it.  You should get this as the result:'], ["This incorporates Jeff's more direct solution that eliminates having to create and compile a small Python 'stub' and also shows how you can create C# function calls that access the methods in the Python class."]], [[" Hello World!\nI'm in a compiled class (I hope)\nin some method\nin some method\nTrue\nFalse\nPress any key to continue . . .\n"]], ['Build Python scripts and call methods from C#'], 3], [(2139823, 0), [['In Python, you could do something like that'], ["So, based on Dennis Williamson's answer, I can also propose the following bash code"]], [[" # loop on all the files\nfor num in range(1,1000):\n\n    cfile = open ( 'c%u.dat'%num, mode='r')\n\n    # find the specific line\n    for line in cfile:\n        if line[0]=='@':\n\n            # open the determined file and add the line\n            dfile = open( 'determined_c%u_send.dat'%num, mode='a')\n            dfile.write( line[1:-1] )\n            dfile.close()\n\n    cfile.close()\n"]], ['Bash or Python or Awk to match and modify files'], 2], [(2139823, 1), [["So, based on Dennis Williamson's answer, I can also propose the following bash code"], ['-10000']], [[' for i in {1..2}\ndo\n    mv "determined_c${i}_send.dat" "temp.out"\n    cat c1.dat | grep @ | tr -d "@" >  "determined_c${i}_send.dat"\n    cat temp.out >> "determined_c${i}_send.dat"\ndone\nrm temp.out\n']], ['Bash or Python or Awk to match and modify files'], 2], [(2140550, 0), [['For Django < 1.5, you can add a decorator by wrapping the function in your urls, which allows you to wrap the generic views:'], ['The function-based generic views are deprecated in Django 1.4 and were removed in Django 1.5. But the same principle applies, just wrap the view function of the class based view with the  login_required  decorator:']], [[" from django.contrib.auth.decorators import login_required\nfrom django.views.generic.simple import direct_to_template\nurlpatterns = patterns('',\n    (r'^foo/$', login_required(direct_to_template), {'template': 'foo_index.html'}),\n    )\n"]], ['How to require login for Django Generic Views?'], 2], [(2140550, 1), [['The function-based generic views are deprecated in Django 1.4 and were removed in Django 1.5. But the same principle applies, just wrap the view function of the class based view with the  login_required  decorator:'], ['-10000']], [[" login_required(TemplateView.as_view(template_name='foo_index.html'))\n"]], ['How to require login for Django Generic Views?'], 2], [(2141537, 0), [["This may not be the most Pythonic code in the world, but here's a solution: Cheated by adjusting for time zone (EST here) by doing this: "], ["Here's the function : It assumes that the Chrome history file has been copied from another account into /Users/someuser/Documents/tmp/Chrome/History"]], [[' utctime = datetime.datetime(1601,1,1) + datetime.timedelta(microseconds = ms, hours =-5)\n']], ['Convert datetime fields in Chrome history file (sqlite) to readable format'], 2], [(2141537, 1), [["Here's the function : It assumes that the Chrome history file has been copied from another account into /Users/someuser/Documents/tmp/Chrome/History"], ['-10000']], [[' def getcr():\n    connection = sqlite3.connect(\'/Users/someuser/Documents/tmp/Chrome/History\')\n    cursor = connection.cursor()\n    get_time = list(cursor.execute("""SELECT last_visit_time FROM urls"""))\n    get_url = list(cursor.execute("""SELECT url from urls"""))\n    stripped_time = []\n    crf = open (\'/Users/someuser/Documents/tmp/cr/cr_hist.txt\',\'w\' )\n    itr = iter(get_time)\n    itr2 = iter(get_url)\n\n    while True:\n        try:\n            newdate = str(itr.next())\n            stripped1 = newdate.strip(\' (),L\')\n            ms = int(stripped1)\n            utctime = datetime.datetime(1601,1,1) + datetime.timedelta(microseconds = ms, hours =-5)\n            stripped_time.append(str(utctime))\n            newurl = str(itr2.next())\n            stripped_url = newurl.strip(\' ()\')\n            stripped_time.append(str(stripped_url))\n            crf.write(\'\\n\')\n            crf.write(str(utctime))\n            crf.write(\'\\n\')\n            crf.write(str(newurl))\n            crf.write(\'\\n\')\n            crf.write(\'\\n\')\n            crf.write(\'********* Next Entry *********\') \n            crf.write(\'\\n\')\n        except StopIteration:\n            break\n\n    crf.close()            \n\n    shutil.copy(\'/Users/someuser/Documents/tmp/cr/cr_hist.txt\' , \'/Users/parent/Documents/Chrome_History_Logs\')\n    os.rename(\'/Users/someuser/Documents/Chrome_History_Logs/cr_hist.txt\',\'/Users/someuser/Documents/Chrome_History_Logs/%s.txt\' % formatdate)\n']], ['Convert datetime fields in Chrome history file (sqlite) to readable format'], 2], [(2141978, 0), [['To get the ranking of the user:'], ['Where id_of_user is the parameter containing the id of the current player. To get the neighboring players  and  the current user:']], [[' (SELECT * FROM (\n  SELECT\n    RANK() OVER (ORDER BY Score desc ,Karma desc) AS ranking,\n    Id,\n    Username,\n    Score, karma\n  FROM Players \n) AS players_ranked_by_score\nwhere Id = id_of_user \n']], ['Ranking within Django ORM or SQL?'], 2], [(2141978, 1), [['Where id_of_user is the parameter containing the id of the current player. To get the neighboring players  and  the current user:'], ['Where player_ranking is the ranking obtained from the query above.']], [[' (SELECT * FROM (\n  SELECT\n    RANK() OVER (ORDER BY Score desc ,Karma desc) AS ranking,\n    Id,\n    Username,\n    Score, karma\n  FROM Players \n) AS all_players_ranked\nwhere ranking >= player_ranking - 2 and ranking <= player_ranking + 2;\n']], ['Ranking within Django ORM or SQL?'], 2], [(2142115, 0), [["I haven't tried this, but reading the documentation for  dbus.service.method  reveals the  async_callbacks  parameter.  It sounds like one uses this parameter to provide an asynchronous result.  For example:"], ['If, instead, you have an API which returned a Deferred, then you can easily associate the Deferred with these callbacks:']], [[' @dbus.service.method(\'fm.last.api.account\', out_signature="s",\n                     async_callbacks=("callback", "errback"))\ndef getUsername(self, callback, errback):\n    reactor.callLater(3, callback, "alice")\n']], ['Implementation of an async method in Python DBus'], 2], [(2142115, 1), [['If, instead, you have an API which returned a Deferred, then you can easily associate the Deferred with these callbacks:'], ['As far as the correlation between call and response goes, I assume that all the serial number handling is hidden inside  dbus.service.method .  I suspect that the callback and errback functions that are passed in when you use the  async_callbacks  feature are either instances of some class which is callable and has the serial number as an attribute, or else are defined as nested functions and close over the serial number.  This way, when you call one of them, they can make sure to pass the right value back to the connection to associate the response with the original request.']], [[' d.addCallbacks(callback, errback)\n']], ['Implementation of an async method in Python DBus'], 2], [(2143152, 0), [['-10000'], ['-10000']], [[' I figured out how to do it. See the example below:\n']], ['Open a PyGTK program but do not activate it'], 2], [(2143152, 1), [['-10000'], ['-10000']], [[' #!/usr/bin/env python\n\nimport pygtk\npygtk.require(\'2.0\')\nimport gtk\nimport gobject\n\nclass HelloWorld:\n    window=None\n    def hello(self, widget, data=None, data2=None):\n    HelloWorld.window.set_accept_focus(True)\n    HelloWorld.window.present()\n\n    def __init__(self):\n        HelloWorld.window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n        self.button = gtk.Entry(50)\n        self.button.connect("focus-in-event", self.hello, None)\n        HelloWorld.window.add(self.button)\n        self.button.show()\n    HelloWorld.window.set_accept_focus(False)\n    self.button.connect(\'button-press-event\', self.hello)\n    HelloWorld.window.show()\n    def main(self):\n        gtk.main()\n\nif __name__ == "__main__":\n    hello = HelloWorld()\n    hello.main()\n']], ['Open a PyGTK program but do not activate it'], 2], [(2143897, 0), [['Firstly , on windows, there is no need for shebang. Its best to include the path of the Python interpreter to the PATH environment variable of the user who is running the script. That said, to get the first line in batch, you can use set'], ['since you have multiple version of interpreter, why not just use the correct one when you invoke the script?']], [[' set /p var=<file\n']], ['Read the first line of batch file from the same batch file?'], 4], [(2143897, 1), [['since you have multiple version of interpreter, why not just use the correct one when you invoke the script?'], ['Edit:']], [[' c:\\python27\\bin\\python.exe myscript.py\n']], ['Read the first line of batch file from the same batch file?'], 4], [(2143897, 2), [['Edit:'], ['output']], [[' @echo off\nset /p var=<test.py\ncall %var:~2% test.py\n']], ['Read the first line of batch file from the same batch file?'], 4], [(2143897, 3), [['output'], ['-10000']], [[' C:\\test>more test1.py\n#!c:\\Python26\\python.exe\n\nprint "hello"\n\n\nC:\\test>more test.bat\n@echo off\nset /p var=<test1.py\ncall %var:~2% test1.py\n\nC:\\test>test.bat\nhello\n']], ['Read the first line of batch file from the same batch file?'], 4], [(2144443, 0), [['The function signature is:'], ["We're mostly interested in  a  and  bins .   a  is the input data that needs to be binned.   bins  can be a number of bins (your  num_bins ), or it can be a sequence of scalars, which denote bin edges (half open)."]], [[' numpy.histogram(a, bins=10, range=None, normed=False, weights=None, new=None)\n']], ['assigning points to bins'], 5], [(2144443, 1), [["We're mostly interested in  a  and  bins .   a  is the input data that needs to be binned.   bins  can be a number of bins (your  num_bins ), or it can be a sequence of scalars, which denote bin edges (half open)."], ['All but the last (righthand-most) bin is half-open.  In other words, if  bins  is:']], [[' import numpy\nvalues = numpy.arange(10, dtype=int)\nbins = numpy.arange(-1, 11)\nfreq, bins = numpy.histogram(values, bins)\n# freq is now [0 1 1 1 1 1 1 1 1 1 1]\n# bins is unchanged\n']], ['assigning points to bins'], 5], [(2144443, 2), [['All but the last (righthand-most) bin is half-open.  In other words, if  bins  is:'], ['Edit : You want to know the index in your bins of each element.  For this, you can use  numpy.digitize() .  If your bins are going to be integral, you can use  numpy.bincount()  as well.']], [[' [1, 2, 3, 4]\n']], ['assigning points to bins'], 5], [(2144443, 3), [['Edit : You want to know the index in your bins of each element.  For this, you can use  numpy.digitize() .  If your bins are going to be integral, you can use  numpy.bincount()  as well.'], ['Since the interval is open on the upper limit, the indices are correct:']], [[' >>> values = numpy.random.randint(0, 20, 10)\n>>> values\narray([17, 14,  9,  7,  6,  9, 19,  4,  2, 19])\n>>> bins = numpy.linspace(-1, 21, 23)\n>>> bins\narray([ -1.,   0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,\n        10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.,\n        21.])\n>>> pos = numpy.digitize(values, bins)\n>>> pos\narray([19, 16, 11,  9,  8, 11, 21,  6,  4, 21])\n']], ['assigning points to bins'], 5], [(2144443, 4), [['Since the interval is open on the upper limit, the indices are correct:'], ['-10000']], [[' >>> (bins[pos-1] == values).all()\nTrue\n>>> import sys\n>>> for n in range(len(values)):\n...     sys.stdout.write("%g <= %g < %g\\n"\n...             %(bins[pos[n]-1], values[n], bins[pos[n]]))\n17 <= 17 < 18\n14 <= 14 < 15\n9 <= 9 < 10\n7 <= 7 < 8\n6 <= 6 < 7\n9 <= 9 < 10\n19 <= 19 < 20\n4 <= 4 < 5\n2 <= 2 < 3\n19 <= 19 < 20\n']], ['assigning points to bins'], 5], [(2144630, 0), [['use raw_input()'], ['your while loop should look like this (after fixing the indentation)']], [[' def fileOrRandom():\n  return raw_input("Would you like to read from file or random list? (A or B): ")\n']], ['Nested Choices in a python program'], 2], [(2144630, 1), [['your while loop should look like this (after fixing the indentation)'], ['-10000']], [[' while True :\n    choice=raw_input("Your choice: ")\n    for i in range(2):\n     if choice==i+1 and fileOrRandom()=="A" :\n       fileName=raw_input("Please Enter The Name of the File to sort: ")\n       sorter = choices[choice](fileName)\n       sorter.timedSort(sorter.sort)\n     elif choice==i+1 and fileOrRandom()=="B" :\n       num = raw_input("How many random numbers would you like to sort: ")\n       sorter = choices[choice](None,num)\n       sorter.timedSort(sorter.sort)\n     elif choice in [\'q\',\'Q\']: break\n     else: print "Bad choice"\n']], ['Nested Choices in a python program'], 2], [(2145182, 0), [['The python tarfile module uses TarInfo objects when you add files. Like so:'], ['The TarInfo object contains the file information:']], [[' TarFile.addfile(tarinfo, fileobj=None)\n']], ['Archiving (tar and compress) with metadata (user id, and ctime) in Python'], 2], [(2145182, 1), [['The TarInfo object contains the file information:'], ['And loads of other metadata. See  http://docs.python.org/library/tarfile.html']], [[' TarInfo.mtime\nTime of last modification.\n\nTarInfo.uid\nUser ID of the user who originally stored this member.\n\nTarInfo.gid\nGroup ID of the user who originally stored this member.\n']], ['Archiving (tar and compress) with metadata (user id, and ctime) in Python'], 2], [(2145826, 0), [["str  encoded in UTF-8 and  unicode  are two different types. Don't use  string , use the appropriate method on the unicode object:"], ['Decode  str  to  unicode  before using:']], [[" >>> print u'ĉ'.upper()\nĈ\n"]], ['Convert Unicode/UTF-8 string to lower/upper case using pure & pythonic library'], 2], [(2145826, 1), [['Decode  str  to  unicode  before using:'], ['-10000']], [[" >>> print 'ĉ'.decode('utf-8').upper()\nĈ\n"]], ['Convert Unicode/UTF-8 string to lower/upper case using pure & pythonic library'], 2], [(2148110, 0), [['-10000'], ['By the way,  x & y  is not necessarily "always true" for two positive numbers.  It does  bitwise-and  for elements in  x  and  y :']], [[' result = numpy.where(x == y, x, 0)\n']], ['Looking for the fastest way to find the exact overlap between two arrays of equal length in numpy'], 2], [(2148110, 1), [['By the way,  x & y  is not necessarily "always true" for two positive numbers.  It does  bitwise-and  for elements in  x  and  y :'], ['This is because the bitwise representation of each element in  x  is of the form  1  followed by  n  zeros, and the corresponding element in  y  is  n  1s.  In general, for two non-zero numbers  a  and  b ,  a & b  may equal zero, or non-zero but not necessarily equal to either  a  or  b .']], [[' x = numpy.array([2**p for p in xrange(10)])\n# x is [  1   2   4   8  16  32  64 128 256 512]\ny = x - 1\n# y is [  0   1   3   7  15  31  63 127 255 511]\nx & y\n# result: [0 0 0 0 0 0 0 0 0 0]\n']], ['Looking for the fastest way to find the exact overlap between two arrays of equal length in numpy'], 2], [(2148119, 0), [['Here is the code from the website just in case the link goes bad. '], ['Example usage:']], [[" import cElementTree as ElementTree\n\nclass XmlListConfig(list):\n    def __init__(self, aList):\n        for element in aList:\n            if element:\n                # treat like dict\n                if len(element) == 1 or element[0].tag != element[1].tag:\n                    self.append(XmlDictConfig(element))\n                # treat like list\n                elif element[0].tag == element[1].tag:\n                    self.append(XmlListConfig(element))\n            elif element.text:\n                text = element.text.strip()\n                if text:\n                    self.append(text)\n\n\nclass XmlDictConfig(dict):\n    '''\n    Example usage:\n\n    >>> tree = ElementTree.parse('your_file.xml')\n    >>> root = tree.getroot()\n    >>> xmldict = XmlDictConfig(root)\n\n    Or, if you want to use an XML string:\n\n    >>> root = ElementTree.XML(xml_string)\n    >>> xmldict = XmlDictConfig(root)\n\n    And then use xmldict for what it is... a dict.\n    '''\n    def __init__(self, parent_element):\n        if parent_element.items():\n            self.update(dict(parent_element.items()))\n        for element in parent_element:\n            if element:\n                # treat like dict - we assume that if the first two tags\n                # in a series are different, then they are all different.\n                if len(element) == 1 or element[0].tag != element[1].tag:\n                    aDict = XmlDictConfig(element)\n                # treat like list - we assume that if the first two tags\n                # in a series are the same, then the rest are the same.\n                else:\n                    # here, we put the list in dictionary; the key is the\n                    # tag name the list elements all share in common, and\n                    # the value is the list itself \n                    aDict = {element[0].tag: XmlListConfig(element)}\n                # if the tag has attributes, add those to the dict\n                if element.items():\n                    aDict.update(dict(element.items()))\n                self.update({element.tag: aDict})\n            # this assumes that if you've got an attribute in a tag,\n            # you won't be having any text. This may or may not be a \n            # good idea -- time will tell. It works for the way we are\n            # currently doing XML configuration files...\n            elif element.items():\n                self.update({element.tag: dict(element.items())})\n            # finally, if there are no child tags and no attributes, extract\n            # the text\n            else:\n                self.update({element.tag: element.text})\n"]], ['How to convert an xml string to a dictionary in Python?'], 3], [(2148119, 1), [['Example usage:'], ['//Or, if you want to use an XML string:']], [[" tree = ElementTree.parse('your_file.xml')\nroot = tree.getroot()\nxmldict = XmlDictConfig(root)\n"]], ['How to convert an xml string to a dictionary in Python?'], 3], [(2148119, 2), [['//Or, if you want to use an XML string:'], ['-10000']], [[' root = ElementTree.XML(xml_string)\nxmldict = XmlDictConfig(root)\n']], ['How to convert an xml string to a dictionary in Python?'], 3], [(2148994, 0), [["It doesn't seem like IDLE provides a way to do this through the GUI, but you could do something like:"], ['You can also set  sys.argv  manually, like:']], [[' idle.py -r scriptname.py arg1 arg2 arg3\n']], ['When running a python script in IDLE, is there a way to pass in command line arguments (args)?'], 2], [(2148994, 1), [['You can also set  sys.argv  manually, like:'], ['(Credit  http://wayneandlayne.com/2009/04/14/using-command-line-arguments-in-python-in-idle/ )']], [[" try:\n    __file__\nexcept:\n    sys.argv = [sys.argv[0], 'argument1', 'argument2', 'argument2']\n"]], ['When running a python script in IDLE, is there a way to pass in command line arguments (args)?'], 2], [(2149846, 0), [['Illustrating the differences:'], ['Note that when defining sub1 and sub2, no metaclass functions were called.\nThey will be created exactly as if c1 and c2 had no metaclasses, but instead\nhad been manipulated after creation.']], [[' >>> def m1(name, bases, atts):\n>>>     print "m1 called for " + name\n>>>     return type(name, bases, atts)\n>>>\n\n>>> def m2(name, bases, atts):\n>>>     print "m2 called for " + name\n>>>     return type(name, bases, atts)\n>>>\n\n>>> class c1(object):\n>>>     __metaclass__ = m1\nm1 called for c1\n\n>>> type(c1)\n<type \'type\'>\n\n>>> class sub1(c1):\n>>>     pass\n\n>>> type(sub1)\n<type \'type\'>\n\n>>> class c2(object):\n>>>     __metaclass__ = m2\nm2 called for c2\n\n>>> class sub2(c1, c2):\n>>>     pass\n\n>>> type(sub2)\n<type \'type\'>\n']], ['Customary To Inherit Metaclasses From type?'], 4], [(2149846, 1), [['Note that when defining sub1 and sub2, no metaclass functions were called.\nThey will be created exactly as if c1 and c2 had no metaclasses, but instead\nhad been manipulated after creation.'], ["Note the differences already: M1 was called when creating Sub1, and both\nclasses are instances of M1.  I'm using  super()  for the actual creation here,\nfor reasons which will become clear later."]], [[' >>> class M1(type):\n>>>     def __new__(meta, name, bases, atts):\n>>>         print "M1 called for " + name\n>>>         return super(M1, meta).__new__(meta, name, bases, atts)\n\n>>> class C1(object):\n>>>     __metaclass__ = M1\nM1 called for C1\n\n>>> type(C1)\n<class \'__main__.M1\'>\n\n>>> class Sub1(C1):\n>>>     pass\nM1 called for Sub1\n\n>>> type(Sub1)\n<class \'__main__.M1\'>\n']], ['Customary To Inherit Metaclasses From type?'], 4], [(2149846, 2), [["Note the differences already: M1 was called when creating Sub1, and both\nclasses are instances of M1.  I'm using  super()  for the actual creation here,\nfor reasons which will become clear later."], ["This is the major restriction on multiple inheritance with metaclasses.\nPython doesn't know whether M1 and M2 are compatible metaclasses,\nso it forces you to create a new one to guarantee that it does what you need."]], [[' >>> class M2(type):\n>>>     def __new__(meta, name, bases, atts):\n>>>         print "M2 called for " + name\n>>>         return super(M2, meta).__new__(meta, name, bases, atts)\n\n>>> class C2(object):\n>>>     __metaclass__ = M2\nM2 called for C2\n\n>>> type(C2)\n<class \'__main__.M2\'>\n\n>>> class Sub2(C1, C2):\n>>>     pass\nM1 called for Sub2\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "<stdin>", line 23, in __new__\nTypeError: Error when calling the metaclass bases\n    metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases\n']], ['Customary To Inherit Metaclasses From type?'], 4], [(2149846, 3), [["This is the major restriction on multiple inheritance with metaclasses.\nPython doesn't know whether M1 and M2 are compatible metaclasses,\nso it forces you to create a new one to guarantee that it does what you need."], ['This is why I used  super()  in the metaclass  __new__  functions: so each one\ncan call the next one in the MRO.']], [[' >>> class M3(M1, M2):\n>>>     def __new__(meta, name, bases, atts):\n>>>         print "M3 called for " + name\n>>>         return super(M3, meta).__new__(meta, name, bases, atts)\n\n>>> class C3(C1, C2):\n>>>     __metaclass__ = M3\nM3 called for C3\nM1 called for C3\nM2 called for C3\n\n>>> type(C3)\n<class \'__main__.M3\'>\n']], ['Customary To Inherit Metaclasses From type?'], 4], [(2150205, 0), [['Assuming you want to allow  $5.  but not  5. , the following will accept your language:'], ["Tweaking Mark's nice test harness, we get"]], [[" money = re.compile('|'.join([\n  r'^\\$?(\\d*\\.\\d{1,2})$',  # e.g., $.50, .50, $1.50, $.5, .5\n  r'^\\$?(\\d+)$',           # e.g., $500, $5, 500, 5\n  r'^\\$(\\d+\\.?)$',         # e.g., $5.\n]))\n"]], ['Can somebody explain a money regex that just checks if the value matches some pattern?'], 2], [(2150205, 1), [["Tweaking Mark's nice test harness, we get"], ['Output:']], [[" for test, expected in tests:\n    result = money.match(test) \n    is_match = result is not None\n    if is_match == expected:\n      status = 'OK'\n      if result:\n        amt = [x for x in result.groups() if x is not None].pop()\n        status += ' (%s)' % amt\n    else:\n      status = 'Fail'\n    print test + '\\t' + status\n"]], ['Can somebody explain a money regex that just checks if the value matches some pattern?'], 2], [(2150644, 0), [['I think the most efficient way of calculating this is at write time. You should modify OrganizationalUnit like this:'], ['create the functions that will update the OrganizationalUnit and its parents at write time:']], [[" class OrganizationalUnit(models.Model):\n    name = models.CharField(max_length=100)\n    parent = models.ForeignKey(\n        'self',\n        blank=True, null=True,\n        related_name='children',\n    )\n    checkout_number = models.IntegerField(default=0)\n"]], ["How can I get a total count of a model's related objects and the model's children's related objects?"], 3], [(2150644, 1), [['create the functions that will update the OrganizationalUnit and its parents at write time:'], ['now all you need is connect those functions to the pre_save, post_save and pre_delete signals:']], [[' def pre_save_checkout(sender, instance, **kwargs):\n    if isinstance(instance,Checkout) and instance.id and instance.department:\n         substract_checkout(instance.department)\n\ndef post_save_checkout(sender, instance, **kwargs):\n    if isinstance(instance,Checkout) and instance.department:\n         add_checkout(instance.department)\n\ndef  substract_checkout(organizational_unit):\n    organizational_unit.checkout_number-=1\n    organizational_unit.save()\n    if organizational_unit.parent:\n        substract_checkout(organizational_unit.parent)\n\ndef  add_checkout(organizational_unit):\n    organizational_unit.checkout_number+=1\n    organizational_unit.save()\n    if organizational_unit.parent:\n        add_checkout(organizational_unit.parent)\n']], ["How can I get a total count of a model's related objects and the model's children's related objects?"], 3], [(2150644, 2), [['now all you need is connect those functions to the pre_save, post_save and pre_delete signals:'], ['That should do it...']], [[' from django.db.models.signals import post_save, pre_save, pre_delete\n\npre_save.connect(pre_save_checkout, Checkout)\npre_delete.connect(pre_save_checkout, Checkout)\npost_save.connect(post_save_checkout, Checkout)\n']], ["How can I get a total count of a model's related objects and the model's children's related objects?"], 3], [(2150838, 0), [['-10000'], ['You are replacing an element with a plain string. You need to replace it with a new string element.']], [[" >>> type(o.b)\n<type 'lxml.objectify.StringElement'>\n"]], ['replacing node text using lxml.objectify while preserving attributes'], 4], [(2150838, 1), [['You are replacing an element with a plain string. You need to replace it with a new string element.'], ["For some reason you can't just do:"]], [[" >>> o.b = objectify.E.b('newtext', atr='someatr')\n"]], ['replacing node text using lxml.objectify while preserving attributes'], 4], [(2150838, 2), [["For some reason you can't just do:"], ['However, this seems to work:']], [[" >>> o.b.text = 'newtext'\n"]], ['replacing node text using lxml.objectify while preserving attributes'], 4], [(2150838, 3), [['However, this seems to work:'], ['-10000']], [[" >>> o.b._setText('newtext')\n"]], ['replacing node text using lxml.objectify while preserving attributes'], 4], [(2151354, 0), [['You also need to not shortcircuit the for loop unless you have found a goal'], ['You have the range wrong in your succ function too, you should not subtrace 1 from the size for the range. You could also rewrite it like this to remove one of the conditions from the  if']], [[" tested_nodes=set()\ndef solve_board(dfs_obj, node):\n    if goal(node):  # only 1 peg!\n        print node\n        return node\n\n    for new_node in succ(node):\n        if tuple(new_node) not in tested_nodes:\n            tested_nodes.add(tuple(new_node))\n            print new_node\n            result = solve_board(new_node)\n            if result:  # True if it's a goal, None otherwise\n                return result\n"]], ['Depth-First search in Python'], 3], [(2151354, 1), [['You have the range wrong in your succ function too, you should not subtrace 1 from the size for the range. You could also rewrite it like this to remove one of the conditions from the  if'], ['Another way to write the succ funtion would be']], [[" def succ(self, node):\n    size = len(node)\n\n    # find all legal moves going forward\n    for pos in range(size-2):\n        new_node = list(node)\n        if ((node[pos] == 1) and (node[pos+2] == 0)):\n            new_node[pos] = 0  # we're moving now\n            new_node[pos+2] = 1 # this is where we're moving the peg to\n            new_node[pos+1] = 0  # take out the peg here if there was one\n            yield new_node\n\n    # find all legal moves going backwards\n    for pos in range(1,size):\n        new_node = list(node)\n        if ((node[pos] == 1) and (node[pos-2] == 0)):\n            new_node[pos] = 0  # we're moving now\n            new_node[pos-2] = 1 # this is where we're moving the peg\n            new_node[pos-1] = 0  # take out the peg here if there was one\n            yield new_node\n"]], ['Depth-First search in Python'], 3], [(2151354, 2), [['Another way to write the succ funtion would be'], ['This tunes the depth first slightly by preferring moves that remove a peg']], [[' def succ(self, node):\n    for i in range(len(node)-2):\n        j=i+3\n        if node[i:j]==[1,1,0]:\n            yield node[:i]+[0,0,1]+node[j:]\n        if node[i:j]==[0,1,1]:\n            yield node[:i]+[1,0,0]+node[j:]\n        if node[i:j]==[1,0,0]:\n            yield node[:i]+[0,0,1]+node[j:]\n        if node[i:j]==[0,0,1]:\n            yield node[:i]+[1,0,0]+node[j:]\n']], ['Depth-First search in Python'], 3], [(2151490, 0), [['One option is to return json with the data you need for each area.'], ['What you would be returning is: ']], [[' $.ajax({\n    method:"get",\n    url:"/main/",\n    dataType: "json",\n    data:"q="+query,\n    beforeSend:function() {},\n    success:function(json){\n        $("#main").html(json.main);\n        $("#secondary").html(json.secondary);\n    }\n});\n']], ['Problem with jQuery Ajax...how do I update two DIVs with ONE ajax call?'], 2], [(2151490, 1), [['What you would be returning is: '], ['-10000']], [[' {\n    "main": "<p>{{ num_results }}, you just searched for {{ query }}</p>",\n    "secondary": "{{ num_results }}"\n}\n']], ['Problem with jQuery Ajax...how do I update two DIVs with ONE ajax call?'], 2], [(2151640, 0), [["Problem is that bash doesn't answer to CTRL-C when not connected with a terminal.\nSwitching to SIGHUP or SIGTERM seems to do the trick:"], ['Outputs:']], [[' cmd = ["bash", \'childProc.sh\']\np = subprocess.Popen(cmd, stdout=subprocess.PIPE, \n                          stderr=subprocess.STDOUT, \n                          close_fds=True)\ntime.sleep(3)\nprint \'killing pid\', p.pid\nos.kill(p.pid, signal.SIGTERM)\nprint "timed out and killed child, collecting what output exists so far"\nout  = p.communicate()[0]\nprint "got it", out\n']], ["Python's subprocess.Popen object hangs gathering child output when child process does not exit"], 2], [(2151640, 1), [['Outputs:'], ['-10000']], [[' killing pid 5844\ntimed out and killed child, collecting what output exists so far\ngot it output line 0\noutput line 1\noutput line 2\n']], ["Python's subprocess.Popen object hangs gathering child output when child process does not exit"], 2], [(2152640, 0), [["This is called a sliding window. There's an  example in the  itertools  documentation  that does it. Here's the code:"], ['What that, you can say this:']], [[' from itertools import islice\n\ndef window(seq, n=2):\n    "Returns a sliding window (of width n) over data from the iterable"\n    "   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "\n    it = iter(seq)\n    result = tuple(islice(it, n))\n    if len(result) == n:\n        yield result    \n    for elem in it:\n        result = result[1:] + (elem,)\n        yield result\n']], ['Python looping: idiomatically comparing successive items in a list'], 3], [(2152640, 1), [['What that, you can say this:'], ['Of course you only care about the case where n=2, so you can get away with something much simpler:']], [[' for r1, r2 in window(dm_revisions):\n    summary = svn.diff_summarize(svn_path, revision1=r1, revision2=r2)\n']], ['Python looping: idiomatically comparing successive items in a list'], 3], [(2152640, 2), [['Of course you only care about the case where n=2, so you can get away with something much simpler:'], ['-10000']], [[' def adjacent_pairs(seq):\n    it = iter(seq)\n    a = it.next()\n    for b in it:\n        yield a, b\n        a = b\n\nfor r1, r2 in adjacent_pairs(dm_revisions):\n    summary = svn.diff_summarize(svn_path, revision1=r1, revision2=r2)\n']], ['Python looping: idiomatically comparing successive items in a list'], 3], [(2152652, 0), [['If you want any value in a dictionary, you have to do it on the way'], ["So, to present the value stored with key 'name' "]], [[' dict.key\n']], ['Displaying dictionary value in django template'], 3], [(2152652, 1), [["So, to present the value stored with key 'name' "], ['You need to show then the proper attribute, something like']], [[' {{ sc.name }}\n']], ['Displaying dictionary value in django template'], 3], [(2152652, 2), [['You need to show then the proper attribute, something like'], ['-10000']], [[' {{ sc.name }}\n{{ sc.id }}\n']], ['Displaying dictionary value in django template'], 3], [(2152898, 0), [['This simple filtering can be achieved in many ways with Python. The best approach is to use "list comprehensions" as follows:'], ['Another way is to use the  filter  function:']], [[" >>> lst = ['a', 'ab', 'abc', 'bac']\n>>> res = [k for k in lst if 'ab' in k]\n>>> res\n['ab', 'abc']\n>>> \n"]], ['Filtering a list of strings based on contents'], 2], [(2152898, 1), [['Another way is to use the  filter  function:'], ['-10000']], [[" >>> filter(lambda k: 'ab' in k, lst)\n['ab', 'abc']\n>>> \n"]], ['Filtering a list of strings based on contents'], 2], [(2153976, 0), [['Why not just inline your ij()-function?'], ['zipit.py:']], [[' def zipij(m=mem, ms=mems):\n  return [(i, m) if i < m else (m, i) for i in ms]\n']], ['Efficient reordering of coordinate pairs (2-tuples) in a list of pairs in Python'], 4], [(2153976, 1), [['zipit.py:'], ['Sorted:']], [[' from itertools import repeat\n\nmems = range(1, 50000, 2)\nmem = 8\n\ndef zipij7(m=mem, ms=mems):\n  cpy = sorted(ms + [m])\n  loc = cpy.index(m)\n\n  return zip(ms[:(loc)], repeat(m)) + zip(repeat(m), ms[(loc):])\n\ndef zipinline(m=mem, ms=mems):\n  return [(i, m) if i < m else (m, i) for i in ms]\n']], ['Efficient reordering of coordinate pairs (2-tuples) in a list of pairs in Python'], 4], [(2153976, 2), [['Sorted:'], ['Unsorted:']], [[' >python -m timeit -s "import zipit" "zipit.zipinline()"\n100 loops, best of 3: 4.44 msec per loop\n\n>python -m timeit -s "import zipit" "zipit.zipij7()"\n100 loops, best of 3: 4.8 msec per loop\n']], ['Efficient reordering of coordinate pairs (2-tuples) in a list of pairs in Python'], 4], [(2153976, 3), [['Unsorted:'], ['-10000']], [[' >python -m timeit -s "import zipit, random; random.shuffle(zipit.mems)" "zipit.zipinline()"\n100 loops, best of 3: 4.65 msec per loop\n\np>python -m timeit -s "import zipit, random; random.shuffle(zipit.mems)" "zipit.zipij7()"\n100 loops, best of 3: 17.1 msec per loop\n']], ['Efficient reordering of coordinate pairs (2-tuples) in a list of pairs in Python'], 4], [(2154249, 0), [['EDIT 2: To answer the OP new requirement'], ['Output:']], [[' ranges = []\nfor key, group in groupby(enumerate(data), lambda (index, item): index - item):\n    group = map(itemgetter(1), group)\n    if len(group) > 1:\n        ranges.append(xrange(group[0], group[-1]))\n    else:\n        ranges.append(group[0])\n']], ['Identify groups of continuous numbers in a list'], 8], [(2154249, 1), [['Output:'], ['Python docs have a very neat  recipe  for this:']], [[' [xrange(2, 5), xrange(12, 17), 20]\n']], ['Identify groups of continuous numbers in a list'], 8], [(2154249, 2), [['Python docs have a very neat  recipe  for this:'], ['Output:']], [[' from operator import itemgetter\nfrom itertools import groupby\ndata = [2, 3, 4, 5, 12, 13, 14, 15, 16, 17]\nfor k, g in groupby(enumerate(data), lambda (i,x):i-x):\n    print map(itemgetter(1), g)\n']], ['Identify groups of continuous numbers in a list'], 8], [(2154249, 3), [['Output:'], ['If you want to get the exact same output, you can do this:']], [[' [2, 3, 4, 5]\n[12, 13, 14, 15, 16, 17]\n']], ['Identify groups of continuous numbers in a list'], 8], [(2154249, 4), [['If you want to get the exact same output, you can do this:'], ['output:']], [[' ranges = []\nfor k, g in groupby(enumerate(data), lambda (i,x):i-x):\n    group = map(itemgetter(1), g)\n    ranges.append((group[0], group[-1]))\n']], ['Identify groups of continuous numbers in a list'], 8], [(2154249, 5), [['output:'], ['If the data was:  [2, 3, 4, 5, 12, 13, 14, 15, 16, 17] \nThen  groupby(enumerate(data), lambda (i,x):i-x)  is equivalent of the following:']], [[' [(2, 5), (12, 17)]\n']], ['Identify groups of continuous numbers in a list'], 8], [(2154249, 6), [['If the data was:  [2, 3, 4, 5, 12, 13, 14, 15, 16, 17] \nThen  groupby(enumerate(data), lambda (i,x):i-x)  is equivalent of the following:'], ["The lambda function subtracts the element index from the element value. So when you apply the lambda on each item. You'll get the following keys for groupby:"]], [[' groupby(\n    [(0, 2), (1, 3), (2, 4), (3, 5), (4, 12),\n    (5, 13), (6, 14), (7, 15), (8, 16), (9, 17)],\n    lambda (i,x):i-x\n)\n']], ['Identify groups of continuous numbers in a list'], 8], [(2154249, 7), [["The lambda function subtracts the element index from the element value. So when you apply the lambda on each item. You'll get the following keys for groupby:"], ['groupby groups elements by equal key value, so the first 4 elements will be grouped together and so forth.']], [[' [-2, -2, -2, -2, -8, -8, -8, -8, -8, -8]\n']], ['Identify groups of continuous numbers in a list'], 8], [(2156892, 0), [['In Python 2.x, just use the  ord  and  chr  functions:'], ["But if you're interested in bytes (such as for processing some binary data stream), things are even simpler:"]], [[" >>> ord('c')\n99\n>>> ord('c') + 1\n100\n>>> chr(ord('c') + 1)\n'd'\n>>> \n"]], ['Python: How can I increment a char?'], 2], [(2156892, 1), [["But if you're interested in bytes (such as for processing some binary data stream), things are even simpler:"], ['-10000']], [[" >>> bstr = b'abc'\n>>> bstr[0]\n97\n>>> bytes([97, 98, 99])\nb'abc'\n>>> bytes([bstr[0] + 1, 98, 99])\nb'bbc'\n"]], ['Python: How can I increment a char?'], 2], [(2160994, 0), [['-10000'], ['And finally, to  check if a list is empty :']], [[' >>> stack = [3, 4, 5]\n>>> stack.append(6)\n>>> stack.append(7)\n>>> stack\n[3, 4, 5, 6, 7]\n>>> stack.pop()\n7\n>>> stack\n[3, 4, 5, 6]\n>>> stack.pop()\n6\n>>> stack.pop()\n5\n>>> stack\n[3, 4]\n']], ['Single linked list in Python, how to write pop and push?'], 2], [(2160994, 1), [['And finally, to  check if a list is empty :'], ['-10000']], [[' >>> my_list = []\n>>> not my_list\nTrue\n']], ['Single linked list in Python, how to write pop and push?'], 2], [(2161932, 0), [['A simple approach might be to just write a third file containing your gnuplot commands and then tell Python to execute gnuplot with that file. Say you write '], ['to a file called tmp.gp. Then you can use']], [[' "plot \'%s\' with lines, \'%s\' with points;" % (eout,nout)\n']], ['Calling gnuplot from python'], 2], [(2161932, 1), [['to a file called tmp.gp. Then you can use'], ['-10000']], [[" from os import system, remove\nsystem('gnuplot tmp.gp')\nremove('tmp.gp')\n"]], ['Calling gnuplot from python'], 2], [(2164069, 0), [["Middleware may be your best bet.  I've used this piece of code in the past, modified from a snippet found elsewhere:"], ['Then in settings.py, list the base URLs you want to protect:']], [[' import re\n\nfrom django.conf import settings\nfrom django.contrib.auth.decorators import login_required\n\n\nclass RequireLoginMiddleware(object):\n    """\n    Middleware component that wraps the login_required decorator around\n    matching URL patterns. To use, add the class to MIDDLEWARE_CLASSES and\n    define LOGIN_REQUIRED_URLS and LOGIN_REQUIRED_URLS_EXCEPTIONS in your\n    settings.py. For example:\n    ------\n    LOGIN_REQUIRED_URLS = (\n        r\'/topsecret/(.*)$\',\n    )\n    LOGIN_REQUIRED_URLS_EXCEPTIONS = (\n        r\'/topsecret/login(.*)$\',\n        r\'/topsecret/logout(.*)$\',\n    )\n    ------\n    LOGIN_REQUIRED_URLS is where you define URL patterns; each pattern must\n    be a valid regex.\n\n    LOGIN_REQUIRED_URLS_EXCEPTIONS is, conversely, where you explicitly\n    define any exceptions (like login and logout URLs).\n    """\n    def __init__(self):\n        self.required = tuple(re.compile(url) for url in settings.LOGIN_REQUIRED_URLS)\n        self.exceptions = tuple(re.compile(url) for url in settings.LOGIN_REQUIRED_URLS_EXCEPTIONS)\n\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        # No need to process URLs if user already logged in\n        if request.user.is_authenticated():\n            return None\n\n        # An exception match should immediately return None\n        for url in self.exceptions:\n            if url.match(request.path):\n                return None\n\n        # Requests matching a restricted URL pattern are returned\n        # wrapped with the login_required decorator\n        for url in self.required:\n            if url.match(request.path):\n                return login_required(view_func)(request, *view_args, **view_kwargs)\n\n        # Explicitly return None for all non-matching requests\n        return None\n']], ["Best way to make Django's login_required the default"], 2], [(2164069, 1), [['Then in settings.py, list the base URLs you want to protect:'], ["As long as your site follows URL conventions for the pages requiring authentication, this model will work.  If this isn't a one-to-one fit, you may choose to modify the middleware to suit your circumstances more closely."]], [[" LOGIN_REQUIRED_URLS = (\n    r'/private_stuff/(.*)$',\n    r'/login_required/(.*)$',\n)\n"]], ["Best way to make Django's login_required the default"], 2], [(2164391, 0), [['Here is the final code from getting my progress:'], ["And right now for debugging purposes I'm doing this further in the code:"]], [[' def locateGameDirs(filelist, root=os.curdir): #Find a list of files, return directories.\n    toplevel = [folder for folder in os.listdir(root) if os.path.isdir(os.path.join(root, folder))] #List of top-level directories\n    fileset = set(filelist)\n\n    for path, dirs, files in os.walk(os.path.abspath(root)):\n\n        curdir = path.split(\'\\\\\')[1] #The directory os.walk is currently in.\n\n        try: #Thrown here because there\'s a nonexistant(?) first entry.\n            youarehere = toplevel.index(curdir)\n            progress = int(((youarehere)/len(toplevel))*100)\n        except:\n            pass\n\n        for filename in returnMatches(filelist, [k.lower() for k in files]):\n            yield filename, path + "\\\\", progress\n']], ['How to get progress of os.walk in python?'], 2], [(2164391, 1), [["And right now for debugging purposes I'm doing this further in the code:"], ['Is there a nice little way to get rid of that try/except?; it seems the first iteration of path gives me nothing...']], [['     for wow in locateGameDirs(["wow.exe", "firefox.exe", "vlc.exe"], "C:\\\\"):\n    print wow\n']], ['How to get progress of os.walk in python?'], 2], [(2165449, 0), [['-10000'], ['Edit: Better way to do it']], [[' import operator\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint reduce(operator.mul, [v for (k, v,) in enumerate(l) if k < 5])\n>> 120\n']], ['Multiplying a subset of a list of integers together in python'], 2], [(2165449, 1), [['Edit: Better way to do it'], ['-10000']], [[' print reduce(operator.mul, l[:5])\n>> 120\n']], ['Multiplying a subset of a list of integers together in python'], 2], [(2168123, 0), [['Use the  split  method.  Example:'], ['Or even,']], [[' >>> "0,1,2".split(",")\n[\'0\', \'1\', \'2\']\n']], ['Converting a String to List in Python'], 2], [(2168123, 1), [['Or even,'], ['-10000']], [[' >>> [int(x) for x in "0,1,2".split(",")]\n[0, 1, 2]\n']], ['Converting a String to List in Python'], 2], [(2169623, 0), [['Something like this:'], ['Alternately, the  list  constructor can convert tuples to lists:']], [[' [[c, a] for c, a in zip(cities, airports)]\n']], ['Using list comprehension in Python to do something similar to zip()?'], 3], [(2169623, 1), [['Alternately, the  list  constructor can convert tuples to lists:'], ['Or, the  map  function is slightly less verbose in this case:']], [[' [list(x) for x in zip(cities, airports)]\n']], ['Using list comprehension in Python to do something similar to zip()?'], 3], [(2169623, 2), [['Or, the  map  function is slightly less verbose in this case:'], ['-10000']], [[' map(list, zip(cities, airports))\n']], ['Using list comprehension in Python to do something similar to zip()?'], 3], [(2169682, 0), [["Adding a touch of object orientation here makes things simpler. Have subclasses of Node for each thing in your tree, and use an 'eval' method to evaluate them."], ['To evaluate the tree, just call .eval() on the top level node.']], [[" import random\n\nclass ArithmeticOperatorNode(object):\n    def __init__(self, operator, *args):\n        self.operator = operator\n        self.children = args\n    def eval(self):\n        if self.operator == '+':\n            return sum(x.eval() for x in self.children)\n        assert False, 'Unknown arithmetic operator ' + self.operator\n    def __str__(self):\n        return '(%s)' % (' ' + self.operator + ' ').join(str(x) for x in self.children)\n\nclass ConstantNode(object):\n    def __init__(self, constant):\n        self.constant = constant\n    def eval(self):\n        return self.constant\n    def __str__(self):\n        return str(self.constant)\n\ndef build_tree(n):\n    if n == 0:\n        return ConstantNode(random.randrange(100))\n    else:\n        left = build_tree(n - 1)\n        right = build_tree(n - 1)\n        return ArithmeticOperatorNode('+', left, right)\n\nnode = build_tree(5)\nprint node\nprint node.eval()\n"]], ['Python: Optimizing a tree evaluator'], 2], [(2169682, 1), [['To evaluate the tree, just call .eval() on the top level node.'], ["I also added a  __str__  method to convert the tree to a string so you can see how this generalizes to other tree functions. It just does '+' at the moment, but hopefully it's clear how to extend this to the full range of arithmetic operations."]], [[' node = build_tree(5)\nprint node.eval()\n']], ['Python: Optimizing a tree evaluator'], 2], [(2170228, 0), [["I've come up with the following method, which works for me because in every case the model will have a ModelForm associated with it."], ['Here is an extract from the template I am using for this particular view:']], [[' def GetModelData(form, fields):\n    """\n    Extract data from the bound form model instance and return a\n    dictionary that is easily usable in templates with the actual\n    field verbose name as the label, e.g.\n\n    model_data{"Address line 1": "32 Memory lane",\n               "Address line 2": "Brainville",\n               "Phone": "0212378492"}\n\n    This way, the template has an ordered list that can be easily\n    presented in tabular form.\n    """\n    model_data = {}\n    for field in fields:\n        model_data[form[field].label] = eval("form.data.%s" % form[field].name)\n    return model_data\n\n@login_required\ndef clients_view(request, client_id):\n    client = Client.objects.get(id=client_id)\n    form = AddClientForm(client)\n\n    fields = ("address1", "address2", "address3", "address4",\n              "phone", "fax", "mobile", "email")\n    model_data = GetModelData(form, fields)\n\n    template_vars = RequestContext(request,\n        {\n            "client": client,\n            "model_data": model_data\n        }\n    )\n    return render_to_response("clients-view.html", template_vars)\n']], ['Iterate over model instance field names and values in template'], 2], [(2170228, 1), [['Here is an extract from the template I am using for this particular view:'], ['The nice thing about this method is that I can choose on a template-by-template basis the order in which I would like to display the field labels, using the tuple passed in to GetModelData and specifying the field names.  This also allows me to exclude certain fields (e.g. a User foreign key) as only the field names passed in via the tuple are built into the final dictionary.']], [[' <table class="client-view">\n    <tbody>\n    {% for field, value in model_data.items %}\n        <tr>\n            <td class="field-name">{{ field }}</td><td>{{ value }}</td>\n        </tr>\n    {% endfor %}\n    </tbody>\n</table>\n']], ['Iterate over model instance field names and values in template'], 2], [(2171095, 0), [['The faster way to do it is to use  str.translate() \nThis is ~50 times faster than your way'], ['Here is a version for unicode']], [[' # You only need to do this once\n>>> title_trans=\'\'.join(chr(c) if chr(c).isupper() or chr(c).islower() else \'_\' for c in range(256))\n\n>>> "abcde1234!@%^".translate(title_trans)\n\'abcde________\'\n\n# Using map+lambda\n$ python -m timeit \'"".join(map(lambda x: x if (x.isupper() or x.islower()) else "_", "abcd1234!@#$".strip()))\'\n10000 loops, best of 3: 21.9 usec per loop\n\n# Using str.translate\n$ python -m timeit -s \'titletrans="".join(chr(c) if chr(c).isupper() or chr(c).islower() else "_" for c in range(256))\' \'"abcd1234!@#$".translate(titletrans)\'\n1000000 loops, best of 3: 0.422 usec per loop\n\n# Here is regex for a comparison\n$ python -m timeit -s \'import re;transre=re.compile("[\\W\\d]+")\' \'transre.sub("_","abcd1234!@#$")\'\n100000 loops, best of 3: 3.17 usec per loop\n']], ['Python - efficient method to remove all non-letters and replace them with underscores'], 3], [(2171095, 1), [['Here is a version for unicode'], ['Note that the Greek letters count as upper and lower, so they are not substituted.\nIf they are to be substituted, simply change the condition to']], [[' # coding: UTF-8\n\ndef format_title_unicode_translate(title):\n    return title.translate(title_unicode_trans)\n\nclass TitleUnicodeTranslate(dict):\n    def __missing__(self,item):\n        uni = unichr(item)\n        res = u"_"\n        if uni.isupper() or uni.islower():\n            res = uni\n        self[item] = res\n        return res\ntitle_unicode_trans=TitleUnicodeTranslate()\n\nprint format_title_unicode_translate(u"Metallica Μεταλλικα")\n']], ['Python - efficient method to remove all non-letters and replace them with underscores'], 3], [(2171095, 2), [['Note that the Greek letters count as upper and lower, so they are not substituted.\nIf they are to be substituted, simply change the condition to'], ['-10000']], [['         if item<256 and (uni.isupper() or uni.islower()):\n']], ['Python - efficient method to remove all non-letters and replace them with underscores'], 3], [(2172046, 0), [['Just change your regular expression from:'], ['to']], [[" r'\\[b\\](.*)\\[\\/b\\]'\n"]], ['Python regex for matching bb code'], 2], [(2172046, 1), [['to'], ['The  *  qualifier is greedy, appending a  ?  to it you make it performing as a non-greedy qualifier.']], [[" r'\\[b\\](.*?)\\[\\/b\\]'\n"]], ['Python regex for matching bb code'], 2], [(2173031, 0), [['Assuming that you set the ForeignKey constraints correctly and created mappers:'], ["If you have setup a Many-to-Many relation it's even more simple:"]], [[" q = Session.query(Articles).filter(Articles.article_id == ArticleTags.article_id).\\\n    filter(ArticleTags.tag_id == Tags.tag_id).\\\n    filter(Tags.name == 'tag_name')\n"]], ['How to do a JOIN in SQLAlchemy on 3 tables, where one of them is mapping between other two?'], 2], [(2173031, 1), [["If you have setup a Many-to-Many relation it's even more simple:"], ['For some more examples for blog-related queries look  here .']], [[" q = Session.query(Articles).filter(Articles.tags.any(name = 'tag_name'))\n"]], ['How to do a JOIN in SQLAlchemy on 3 tables, where one of them is mapping between other two?'], 2], [(2173238, 0), [['A more  pythonic  approach would be to use  set s and list comprehensions.'], ['EDIT:  In light of your later comment that the number of occurrences matter, this is the updated version that takes that into account.']], [[' name1 = "naveen"; name2 = "darshana"\n\nname1_set=set(name1)\nname2_set=set(name2)\n\nclean1=[x for x in  name1 if x not in name2_set]\nclean2=[x for x in name2 if x not in name1_set]\n\nclean1.extend([\'0\']*(len(name1)-len(clean1)))\nclean2.extend([\'1\']*(len(name2)-len(clean2)))\n\nprint clean1,clean2\n']], ['Python Iteration Problem!'], 2], [(2173238, 1), [['EDIT:  In light of your later comment that the number of occurrences matter, this is the updated version that takes that into account.'], ['It uses  dict s to keep counts of occurrences. Whenever a character is removed, the corresponding count for the other name is decremented. Complexity is still O(N).']], [[' name1 = "naveen"; name2 = "darshana"\n\ncount1={}\ncount2={}\n\n\nfor x in name1:\n    count1[x]=count1.get(x,0)+1\n\nfor x in name2:\n    count2[x]=count2.get(x,0)+1\n\ndef remove_dups(name,count,null):\n    clean=[]\n    for x in name:\n        if count.get(x,0):\n            count[x]-=1\n        else:\n            clean.append(x)\n    clean.extend([null]*(len(name)-len(clean)))\n    return clean\n\nclean1=remove_dups(name1,count2,\'0\')\nclean2=remove_dups(name2,count1,\'1\')\n\nprint clean1,clean2\n']], ['Python Iteration Problem!'], 2], [(2173449, 0), [['Edit: The wrapper can be very simple, like so:'], ['Note when they are talking about Py or Qt signals, and when they are talking about Python functions or methods. E.g., these are the syntax for connecting a Qt signal to a Python function and a Python method:']], [[' functions = {0: reference_to_function_1, 1: reference_to_function_2}\n\ndef wrapper(index):\n    functions[index]()\n']], ['In PyQt, how can signals and slots be used to connect a dropdownlist to a function?'], 2], [(2173449, 1), [['Note when they are talking about Py or Qt signals, and when they are talking about Python functions or methods. E.g., these are the syntax for connecting a Qt signal to a Python function and a Python method:'], ['-10000']], [[' QtCore.QObject.connect(a, QtCore.SIGNAL("QtSig()"), pyFunction) #function-style\nQtCore.QObject.connect(a, QtCore.SIGNAL("QtSig()"), pyClass.pyMethod) #method-style\n']], ['In PyQt, how can signals and slots be used to connect a dropdownlist to a function?'], 2], [(2173632, 0), [["Honestly, the easiest way is going to be to monkeypatch the TimeFormatter's _formats dictionary:"], ["If you don't want to do this, then you need to subclass TimeFormatter.  That's easy.  What's more cumbersome is making all the existing scale systems that the chaco.scales package creates use your new subclass rather than the built-in TimeFormatter.  If you look at scales.time_scale.TimeScale, it accepts a 'formatter' keyword argument in the constructor.  So, at the bottom of time_scale.py, when the MDYScales list is built, you'd have to create your own:"]], [[" from enthought.chaco.scales.formatters import TimeFormatter\nTimeFormatter._formats['days'] = ('%d/%m', '%d%a',)\n"]], ['python chaco axis labels time formatting'], 4], [(2173632, 1), [["If you don't want to do this, then you need to subclass TimeFormatter.  That's easy.  What's more cumbersome is making all the existing scale systems that the chaco.scales package creates use your new subclass rather than the built-in TimeFormatter.  If you look at scales.time_scale.TimeScale, it accepts a 'formatter' keyword argument in the constructor.  So, at the bottom of time_scale.py, when the MDYScales list is built, you'd have to create your own:"], ['Then, when you create the ScalesTickGenerator, you need to pass in these scales to the ScaleSystem:']], [[' EuroMDYScales = [TimeScale(day_of_month=range(1,31,3), formatter=MyFormatter()),\n             TimeScale(day_of_month=(1,8,15,22), formatter=MyFormatter()),\n             TimeScale(day_of_month=(1,15), formatter=MyFormatter()),\n             TimeScale(month_of_year=range(1,13), formatter=MyFormatter()),\n             TimeScale(month_of_year=range(1,13,3), formatter=MyFormatter()),\n             TimeScale(month_of_year=(1,7), formatter=MyFormatter()),\n             TimeScale(month_of_year=(1,), formatter=MyFormatter())]\n']], ['python chaco axis labels time formatting'], 4], [(2173632, 2), [['Then, when you create the ScalesTickGenerator, you need to pass in these scales to the ScaleSystem:'], ['Then you can create the axis, giving it this tick generator:']], [[' euro_scale_system = CalendarScaleSystem(*(HMSScales + EuroMDYScales))\ntick_gen = ScalesTickGenerator(scale=euro_scale_system)\n']], ['python chaco axis labels time formatting'], 4], [(2173632, 3), [['Then you can create the axis, giving it this tick generator:'], ["HTH, sorry this is about a month lag.  I don't really check StackOverflow very much.  If you have other chaco questions, I'd recommend signing up on the chaco-users mailing list..."]], [[' axis = PlotAxis(tick_generator = tick_gen)\n']], ['python chaco axis labels time formatting'], 4], [(2176424, 0), [['Instead of hiding each element, you can hide the whole axis:'], ['Or, you can set the ticks to an empty list:']], [[' frame1.axes.get_xaxis().set_visible(False)\nframe1.axes.get_yaxis().set_visible(False)\n']], ['Hiding axis text in matplotlib plots'], 2], [(2176424, 1), [['Or, you can set the ticks to an empty list:'], ['In this second option, you can still use  plt.xlabel()  and  plt.ylabel()  to add labels to the axes.']], [[' frame1.axes.get_xaxis().set_ticks([])\nframe1.axes.get_yaxis().set_ticks([])\n']], ['Hiding axis text in matplotlib plots'], 2], [(2177250, 0), [['you might try using  glob.iglob  that returns an iterator:'], ["Another major improvement that you can introduce is to your  filelen  function. If you replace it with the following, you'll save a lot of time. Trust me,  what you have now is the slowest alternative :"]], [[" topdir = os.path.join('/somedir', 'labels', '*')\nfor filename in glob.iglob(topdir):\n     if filelen(filename) > 15:\n          #do stuff\n"]], ['Filter files in a very large folder'], 2], [(2177250, 1), [["Another major improvement that you can introduce is to your  filelen  function. If you replace it with the following, you'll save a lot of time. Trust me,  what you have now is the slowest alternative :"], ['-10000']], [[' def many_line(fname, many=15):\n    for i, line in enumerate(open(fname)):\n        if i > many:\n            return True\n    return False\n']], ['Filter files in a very large folder'], 2], [(2179251, 0), [['This seems to be what you want:'], ["To make it work with Python 2.5 and earlier, where  __import__  doesn't take keyword arguments, you will need to use:"]], [[" def import_path(name):\n    modname, _, attr = name.rpartition('.')\n    if not modname:\n        # name was just a single module name\n        return __import__(attr)\n    m = __import__(modname, fromlist=[attr])\n    return getattr(m, attr)\n"]], ['Dynamically import a callable given the full module path?'], 2], [(2179251, 1), [["To make it work with Python 2.5 and earlier, where  __import__  doesn't take keyword arguments, you will need to use:"], ['-10000']], [[' m = __import__(modname, {}, globals(), [attr])\n']], ['Dynamically import a callable given the full module path?'], 2], [(2179345, 0), [['To start, wrap up your python object with code like this'], ['when in your class define the method like so']], [[' struct timer_func_wrapper_t\n{\n    timer_func_wrapper_t( bp::object callable ) : _callable( callable ) {}\n\n    bool operator()()\n    {\n        // These GIL calls make it thread safe, may or may not be needed depending on your use case\n        PyGILState_STATE gstate = PyGILState_Ensure();\n        bool ret = _callable();\n        PyGILState_Release( gstate );\n        return ret;\n    }\n\n    bp::object _callable;\n};\n\nboost::int32_t createTimerWrapper( Class* class, boost::uint64_t interval, bp::object function, bool recurring = false )\n{\n    return class->createTimer( interval, boost::function<bool ()>( timer_func_wrapper_t( function ) ), recurring );\n}\n']], ['Python method to boost function'], 6], [(2179345, 1), [['when in your class define the method like so'], ['With that little bit of wrapper you can work magic like this']], [[' .def( "createTimer", &createTimerWrapper, ( bp::arg( "interval" ), bp::arg( "function" ), bp::arg( "recurring" ) = false ) )\n']], ['Python method to boost function'], 6], [(2179345, 2), [['With that little bit of wrapper you can work magic like this'], ['With that, we can now do something like this']], [[' import MyLib\nimport time\n\ndef callMePls():\n    print( "Hello world" )\n    return True\n\nclass = MyLib.Class()\n\nclass.createTimer( 3, callMePls )\n\ntime.sleep( 1 )\n']], ['Python method to boost function'], 6], [(2179345, 3), [['With that, we can now do something like this'], ["This finally bugged me enough to do something about it and since I know more about boost::python now I came up with a pretty good 'fits all' solution using converters.\nThis code here will convert a python callable to a boost::python< bool() > object, it can be easily modified to convert to other boost functions."]], [[' import MyLib\nimport time\n\ndef callMePls( str ):\n    print( "Hello", str )\n    return True\n\nclass = MyLib.Class()\n\nclass.createTimer( 3, bind( callMePls, "world" ) )\n\ntime.sleep( 1 )\n']], ['Python method to boost function'], 6], [(2179345, 4), [["This finally bugged me enough to do something about it and since I know more about boost::python now I came up with a pretty good 'fits all' solution using converters.\nThis code here will convert a python callable to a boost::python< bool() > object, it can be easily modified to convert to other boost functions."], ['Then in your init code, ie, BOOST_PYTHON_MODULE(), just register the type by creating the struct']], [[' // Wrapper for timer function parameter\nstruct timer_func_wrapper_t\n{\n    timer_func_wrapper_t( bp::object callable ) : _callable(callable) {}\n\n    bool operator()()\n    {\n        return _callable();\n    }\n\n    bp::object _callable;\n};\n\nstruct BoostFunc_from_Python_Callable\n{\n    BoostFunc_from_Python_Callable()\n    {\n        bp::converter::registry::push_back( &convertible, &construct, bp::type_id< boost::function< bool() > >() );\n    }\n\n    static void* convertible( PyObject* obj_ptr )\n    {\n        if( !PyCallable_Check( obj_ptr ) ) return 0;\n        return obj_ptr;\n    }\n\n    static void construct( PyObject* obj_ptr, bp::converter::rvalue_from_python_stage1_data* data )\n    {\n        bp::object callable( bp::handle<>( bp::borrowed( obj_ptr ) ) );\n        void* storage = ( ( bp::converter::rvalue_from_python_storage< boost::function< bool() > >* ) data )->storage.bytes;\n        new (storage)boost::function< bool() >( timer_func_wrapper_t( callable ) );\n        data->convertible = storage;\n    }\n};\n']], ['Python method to boost function'], 6], [(2179345, 5), [['Then in your init code, ie, BOOST_PYTHON_MODULE(), just register the type by creating the struct'], ['-10000']], [[' BOOST_PYTHON_MODULE(Foo)\n{\n    // Register function converter\n    BoostFunc_from_Python_Callable();\n']], ['Python method to boost function'], 6], [(2180247, 0), [["So let's say your templates are all in  /path/to/templates  and you've set up Jinja like so:"], ["Now, if you'd like to include  /path/to/templates/includes/sidebar.html  in the  /path/to/templates/index.html  template, you'd write the following in your  index.html :"]], [[" import jinja2\ntemplate_dir = '/path/to/templates'\nloader = jinja2.FileSystemLoader(template_dir)\nenvironment = jinja2.Environment(loader=loader)\n"]], ["Does the Jinja2 templating language have the concept of 'here' (current directory)?"], 2], [(2180247, 1), [["Now, if you'd like to include  /path/to/templates/includes/sidebar.html  in the  /path/to/templates/index.html  template, you'd write the following in your  index.html :"], ['and Jinja would figure out how to find it.']], [[" {% include 'includes/sidebar.html' %}\n"]], ["Does the Jinja2 templating language have the concept of 'here' (current directory)?"], 2], [(2180415, 0), [['You just need to configure the Django settings before you do any calls, including importing your models. Something like this:'], ['Again, be sure to run that code before running, e.g.:']], [[" from django.conf import settings\nsettings.configure(\n    DATABASE_ENGINE = 'postgresql_psycopg2',\n    DATABASE_NAME = 'db_name',\n    DATABASE_USER = 'db_user',\n    DATABASE_PASSWORD = 'db_pass',\n    DATABASE_HOST = 'localhost',\n    DATABASE_PORT = '5432',\n    TIME_ZONE = 'America/New_York',\n)\n"]], ['Using Django database layer outside of Django?'], 2], [(2180415, 1), [['Again, be sure to run that code before running, e.g.:'], ['Then just use the DB API as usual.']], [[' from your_app.models import *\n']], ['Using Django database layer outside of Django?'], 2], [(2180522, 0), [['Unfortunately the ORM cannot keep the object state sane without querying the database. However you can easily go around the ORM and insert into the association table. Assuming that Articles_Keywords is a  Table  object:'], ["If you go around the ORM then already loaded collections aren't updated to reflect the changes in the database. If you need to refresh the collection call Session.expire on it. This will cause the collection to be reloaded next time it is accessed."]], [["  meta.Session.execute(Articles_Keywords.delete(Articles_Keywords.c.article_id == 1))\n meta.Session.execute(Articles_Keywords.insert(), [\n     {'article_id': 1, 'keyword_id': 1},\n     {'article_id': 1, 'keyword_id': 2},\n ])\n"]], ['SQLAlchemy ORM Inserting Related Objects without Selecting Them'], 2], [(2180522, 1), [["If you go around the ORM then already loaded collections aren't updated to reflect the changes in the database. If you need to refresh the collection call Session.expire on it. This will cause the collection to be reloaded next time it is accessed."], ['-10000']], [[" meta.Session.expire(article, ['keywords'])\n"]], ['SQLAlchemy ORM Inserting Related Objects without Selecting Them'], 2], [(2181292, 0), [['You should flatten the list so instead of  [(12, 140, 10), (10, 100, 200), ...]  use:'], ['Here is a quick example I just tried:']], [[' [12, 140, 10, 10, 100, 200, ...]\n']], ['Using the Image.point() method in PIL to manipulate pixel data'], 5], [(2181292, 1), [['Here is a quick example I just tried:'], ['The color table actually is like this']], [[' im = im.point(range(256, 0, -1) * 3)\n']], ['Using the Image.point() method in PIL to manipulate pixel data'], 5], [(2181292, 2), [['The color table actually is like this'], ['Each band range next to the other.\nTo change the color (0, 0, 0) to (10, 100, 10) it need to become like this:']], [[' [0, 1, 2, 3, 4, 5, ...255, 0, 1, 2, 3, ....255, 0, 1, 2, 3, ...255]\n']], ['Using the Image.point() method in PIL to manipulate pixel data'], 5], [(2181292, 3), [['Each band range next to the other.\nTo change the color (0, 0, 0) to (10, 100, 10) it need to become like this:'], ['To transform your color list into the right format try this:']], [[' [10, 1, 2, 3, 4, 5, ...255, 100, 1, 2, 3, ....255, 10, 1, 2, 3, ...255]\n']], ['Using the Image.point() method in PIL to manipulate pixel data'], 5], [(2181292, 4), [['To transform your color list into the right format try this:'], ['I think my first example should demonstrate the formate for you.']], [[' table = sum(zip(*colors), ())\n']], ['Using the Image.point() method in PIL to manipulate pixel data'], 5], [(2182196, 0), [['The original MIME tree structure of the incoming message is as follows (using  email.iterators._structure(msg) ):'], ['Replying via GMail results in the following structure:']], [[' multipart/mixed\n    text/html                (message)\n    application/octet-stream (attachment 1)\n    application/octet-stream (attachment 2)\n']], ['How do I reply to an email using the Python imaplib and include the original message?'], 7], [(2182196, 1), [['Replying via GMail results in the following structure:'], ['First, replace all the attachments in the original message with text/plain placeholders:']], [[' multipart/alternative\n    text/plain\n    text/html\n']], ['How do I reply to an email using the Python imaplib and include the original message?'], 7], [(2182196, 2), [['First, replace all the attachments in the original message with text/plain placeholders:'], ['Then create a reply message:']], [[' import email\n\noriginal = email.message_from_string( ... )\n\nfor part in original.walk():\n    if (part.get(\'Content-Disposition\')\n        and part.get(\'Content-Disposition\').startswith("attachment")):\n\n        part.set_type("text/plain")\n        part.set_payload("Attachment removed: %s (%s, %d bytes)"\n                         %(part.get_filename(), \n                           part.get_content_type(), \n                           len(part.get_payload(decode=True))))\n        del part["Content-Disposition"]\n        del part["Content-Transfer-Encoding"]\n']], ['How do I reply to an email using the Python imaplib and include the original message?'], 7], [(2182196, 3), [['Then create a reply message:'], ['Then attach the original MIME message object and send:']], [[' from email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.message import MIMEMessage\n\nnew = MIMEMultipart("mixed")\nbody = MIMEMultipart("alternative")\nbody.attach( MIMEText("reply body text", "plain") )\nbody.attach( MIMEText("<html>reply body text</html>", "html") )\nnew.attach(body)\n\nnew["Message-ID"] = email.utils.make_msgid()\nnew["In-Reply-To"] = original["Message-ID"]\nnew["References"] = original["Message-ID"]\nnew["Subject"] = "Re: "+original["Subject"]\nnew["To"] = original["Reply-To"] or original["From"]\nnew["From"] = "me@mysite.com"\n']], ['How do I reply to an email using the Python imaplib and include the original message?'], 7], [(2182196, 4), [['Then attach the original MIME message object and send:'], ['The resulting structure is:']], [[' new.attach( MIMEMessage(original) )\n\ns = smtplib.SMTP()\ns.sendmail("me@mysite.com", [new["To"]], new.as_string())\ns.quit()\n']], ['How do I reply to an email using the Python imaplib and include the original message?'], 7], [(2182196, 5), [['The resulting structure is:'], ["Or it's a bit simpler using Django:"]], [[' multipart/mixed\n    multipart/alternative\n        text/plain\n        text/html\n    message/rfc822\n        multipart/mixed\n            text/html\n            text/plain\n            text/plain\n']], ['How do I reply to an email using the Python imaplib and include the original message?'], 7], [(2182196, 6), [["Or it's a bit simpler using Django:"], ['The result ends (in GMail at least) showing the original message as "---- Forwarded message ----" which isn\'t quite what I was after, but the general idea works and I hope this answer helps someone trying to figure out how to fiddle with MIME messages.']], [[' from django.core.mail import EmailMultiAlternatives\nfrom email.mime.message import MIMEMessage\n\nnew = EmailMultiAlternatives("Re: "+original["Subject"],\n                             "reply body text", \n                             "me@mysite.com", # from\n                             [original["Reply-To"] or original["From"]], # to\n                             headers = {\'Reply-To\': "me@mysite.com",\n                                        "In-Reply-To": original["Message-ID"],\n                                        "References": original["Message-ID"]})\nnew.attach_alternative("<html>reply body text</html>", "text/html")\nnew.attach( MIMEMessage(original) ) # attach original message\nnew.send()\n']], ['How do I reply to an email using the Python imaplib and include the original message?'], 7], [(2182512, 0), [['This comparison will work in Django 1.2. For 1.1 you have to use  ifequal :'], ['For variable assignment you can use  with .']], [[' {% ifequal subject.id  selected_id %}\n']], ['Django templates condition check'], 2], [(2182512, 1), [['For variable assignment you can use  with .'], ["Don't hesitate to read the  documentation , it doesn't hurt."]], [[" {% with selected as 'selected' %}\n\n{% endwith %}\n"]], ['Django templates condition check'], 2], [(2183008, 0), [['Basically, you need to apply filters, and then apply them again, but on newly-generated queryset. Something like this:'], ['Now when you have correct queryset, you can override providers dynamically in  init :']], [[' f = SomeFilter(request.GET) \nf = SomeFilter(request.GET, queryset=f.qs)\n']], ['Hide filter items that produce zero results in django-filter'], 2], [(2183008, 1), [['Now when you have correct queryset, you can override providers dynamically in  init :'], ['Not pretty but it works. You should probably encapsulate those two calls into more-efficient method on filter.']], [[" def __init__(self, **kw):\n   super(SomeFilter, self).__init__(**kw)\n   self.filters['provider'].extra['queryset'] = Provider.objects.filter(foo__in=self.queryset)\n"]], ['Hide filter items that produce zero results in django-filter'], 2], [(2183786, 0), [['Validate if a UTF8 string is an integer:'], ['Validate if a UTF8 string is of length(1-255):']], [[' try:\n  int(val)\n  is_int = True\nexcept ValueError:\n  is_int = False\n']], ['python regular expression to validate types of strings'], 4], [(2183786, 1), [['Validate if a UTF8 string is of length(1-255):'], ['Validate if a UTF8 string is a valid date: this is not trivial. If you know the right format, you can use  time.strptime()  like this:']], [[' is_of_appropriate_length = 1 <= len(val) <= 255\n']], ['python regular expression to validate types of strings'], 4], [(2183786, 2), [['Validate if a UTF8 string is a valid date: this is not trivial. If you know the right format, you can use  time.strptime()  like this:'], ['EDIT:  Another thing to note. Since you specifically mention UTF-8 strings, it would make sense to decode them into Unicode first. This would be done by:']], [[" # Validate that the date is in the YYYY-MM-DD format.\nimport time\ntry:\n  time.strptime(val, '%Y-%m-%d')\n  is_in_valid_format= True\nexcept ValueError:\n  is_in_valid_format = False\n"]], ['python regular expression to validate types of strings'], 4], [(2183786, 3), [['EDIT:  Another thing to note. Since you specifically mention UTF-8 strings, it would make sense to decode them into Unicode first. This would be done by:'], ['It is interesting to note that when trying to convert a Unicode string to an integer using  int() , for example, you are not limited to the "Western Arabic" numerals used in most of the world.  int(u\'١٧\')  and  int(u\'१७\')  will correctly decode as 17 even though they are Hindu-Arabic and Devangari numerals respectively.']], [[" my_unicode_string = my_utf8_string.decode('utf8')\n"]], ['python regular expression to validate types of strings'], 4], [(2184181, 0), [['I would create a class that is responsible for decoding the packets from a stream, like this:'], ['And then use like this:']], [[" class PacketDecoder(object):\n\n    STX = ...\n    ETX = ...\n\n    def __init__(self):\n        self._stream = ''\n\n    def feed(self, buffer):\n        self._stream += buffer\n\n    def decode(self):\n        '''\n        Yields packets from the current stream.\n        '''\n        while len(self._stream) > 2:\n            end = self._stream.find(self.ETX)\n            if end == -1:\n                break\n\n            packet_len = ord(self._stream[1])\n            packet = self._stream[:end]\n            if packet_len >= 5 and check_sum_valid(packet):\n                yield packet\n            self._stream = self._stream[end+1:]\n"]], ['Decoding tcp packets using python'], 2], [(2184181, 1), [['And then use like this:'], ['-10000']], [[' decoder = PacketDecoder()\nwhile True:\n    data = sock.recv(256) \n    if not data:\n        # handle lost connection... \n    decoder.feed(data)\n    for packet in decoder.decode():\n        process(packet)\n']], ['Decoding tcp packets using python'], 2], [(2185229, 0), [['If you want to match only variable  c :'], ["To answer the updates: yes, that would be too messy. You don't need regex there. Simple string methods are faster:"]], [[" if '-' == something:\n   print 'hurray!'\n"]], ['Python / Regex: exclude everything except one thing'], 2], [(2185229, 1), [["To answer the updates: yes, that would be too messy. You don't need regex there. Simple string methods are faster:"], ['-10000']], [[' >>> lst =["hello", "-hello", "-", "hell-o","    - "]\n>>> for i, item in enumerate(lst):\n    if item == \'-\':\n        print(i, item)\n\n\n2 -\n']], ['Python / Regex: exclude everything except one thing'], 2], [(2186919, 0), [['The pyparsing wiki includes this  helpful expression  for matching on ANSI escape sequences:'], ["Here's how to make this into an escape-sequence-stripper:"]], [[" ESC = Literal('\\x1b')\ninteger = Word(nums)\nescapeSeq = Combine(ESC + '[' + Optional(delimitedList(integer,';')) + \n                oneOf(list(alphas)))\n"]], ['Getting correct string length in Python for strings with ANSI color codes'], 3], [(2186919, 1), [["Here's how to make this into an escape-sequence-stripper:"], ['prints:']], [[" from pyparsing import *\n\nESC = Literal('\\x1b')\ninteger = Word(nums)\nescapeSeq = Combine(ESC + '[' + Optional(delimitedList(integer,';')) + \n                oneOf(list(alphas)))\n\nnonAnsiString = lambda s : Suppress(escapeSeq).transformString(s)\n\nunColorString = nonAnsiString('\\x1b[1m0.0\\x1b[0m')\nprint unColorString, len(unColorString)\n"]], ['Getting correct string length in Python for strings with ANSI color codes'], 3], [(2186919, 2), [['prints:'], ['-10000']], [[' 0.0 3\n']], ['Getting correct string length in Python for strings with ANSI color codes'], 3], [(2187921, 0), [['Python not only lets you catch unspecified named arguments into a dict, but also lets you unpack a dict into arguments:'], ['and pass them down the stream:']], [["     >>> def f(alfa, beta, gamma):\n    ...     print alfa, beta, gamma\n    ...\n    >>> f(**{'alfa': 1, 'beta': 2, 'gamma': 3})\n    1 2 3\n"]], ['Named arguments: C# vs Python'], 2], [(2187921, 1), [['and pass them down the stream:'], ['-10000']], [["     >>> def g(**kwargs):\n    ...     f(**kwargs)\n    ...\n    >>> g(**{'alfa': 1, 'beta': 2, 'gamma': 3})\n    1 2 3\n"]], ['Named arguments: C# vs Python'], 2], [(2187931, 0), [['For example:'], ['this uses a merge strategy which is just to pick the first actual match for each named group in the pattern.  Now for example']], [[' import re\n\ndef mergedgroupdict(pattern, thestring):\n  there = re.compile(pattern)\n  result = {}\n  for mo in there.finditer(thestring):\n    d = mo.groupdict()\n    for k in d:\n      if k not in result and d[k] is not None:\n        result[k] = d[k]\n  return result\n']], ["Possible to retrieve an arbitrary unordered set of named groups in one swoop with Python's re module?"], 2], [(2187931, 1), [['this uses a merge strategy which is just to pick the first actual match for each named group in the pattern.  Now for example'], ['presumably as you desire, if I interpret your question correctly.']], [[" >>> mergedgroupdict('(?P<b>.b.)|(?P<i>.i.)', 'abcdefghijk')\n{'i': 'hij', 'b': 'abc'}\n>>> mergedgroupdict('(?P<b>.b.)|(?P<i>.i.)', 'abcdefghijk'[::-1])\n{'i': 'jih', 'b': 'cba'}\n"]], ["Possible to retrieve an arbitrary unordered set of named groups in one swoop with Python's re module?"], 2], [(2188863, 0), [['-10000'], ['Also, the examples at the bottom of the  itertools  module documentation contains a  unique_everseen  generator that you can use like this:']], [[' seen = set()\nfor x in foo:\n    if x in seen:\n        continue\n    seen.add(x)\n    # do something\n']], ['What is the python equivalent of the Perl pattern to track if something has already been seen?'], 2], [(2188863, 1), [['Also, the examples at the bottom of the  itertools  module documentation contains a  unique_everseen  generator that you can use like this:'], ['-10000']], [[' for x in unique_everseen(foo):\n    # do something\n']], ['What is the python equivalent of the Perl pattern to track if something has already been seen?'], 2], [(2189259, 0), [['Perhaps not the greatest solution, but appears to do what you want:'], ['Personally for your specific example, I would do this:']], [[' l = [huge list from your example]\nfor e in l: # for each list\n    for t in e: # for each tuple\n        for s in t: # each string\n            if \'playAudio\' in s:\n                args = s[9:].split(\',\') #skip \'playAudio\' split on comma\n                print "%s,%s" % (args[0].strip(\'(\'),\n                                 args[1].lstrip(" ")[0:args[1].find(\')\')]\n']], ['What is the elegant way to get the arguments to a playAudio call from this list'], 2], [(2189259, 1), [['Personally for your specific example, I would do this:'], ['-10000']], [[' from BeautifulSoup import BeautifulSoup, SoupStrainer\nimport re\nimport urllib2\n\ndoc = urllib2.urlopen("http://www.learnersdictionary.com/search/python").read()\ndoc = doc.replace(\'</SCR\', \'\')\naudioLinks = SoupStrainer(\'a\', onclick=re.compile(r\'^playAudio\'))\nsoup = [str(elm) for elm in BeautifulSoup(doc, parseOnlyThese=audio)]\nfor elm in soup:\n    print re.search(r\'playAudio\\((.*[^)])\\)\', elm).group(1)\n    # prints \'python01.wav\', \'py*thon\'\n']], ['What is the elegant way to get the arguments to a playAudio call from this list'], 2], [(2189600, 0), [["You're not showing the whole code, so the simplest solution would be:"], ['If you insist on using  struct :']], [[' data = data[1] + data[0]\n']], ["flip bytes using Python's struct module"], 2], [(2189600, 1), [['If you insist on using  struct :'], ["Which first unpacks the string as a little-endian unsigned short, and then packs it back as big-endian unsigned short. You can have it the other way around, of course. When converting between BE and LE it doesn't matter which way you're converting - the conversion function is bi-directional."]], [[" >>> from struct import pack, unpack\n>>> unpack('<H', '\\x12\\x13')\n(4882,)\n>>> pack('>H', *unpack('<H', '\\x12\\x13'))\n'\\x13\\x12'\n"]], ["flip bytes using Python's struct module"], 2], [(2190998, 0), [["From what I see, you do it the way around. You should set the same name on all checkboxes. I don't know why do you send it by GET, I'd suggest sending it by POST."], ['Then, use getlist() method in your view:']], [[' <input type="checkbox" name="vehicle" value="Bike" />\n<input type="checkbox" name="vehicle" value="Car" />\n<input type="checkbox" name="vehicle" value="Airplane" />\n']], ['Jquery and Django multiple checkbox'], 2], [(2190998, 1), [['Then, use getlist() method in your view:'], ["But anyway, unless you really need to do custom stuff (however special cases are not special enough to break the rules ;), use Django forms. There already is a checkbox list OOTB. I'm not sure why do you even consider using JavaScript in this very case."]], [[" def delete(request):\n    values = request.POST.getlist(u'vehicle')\n    # Handling goes here.\n"]], ['Jquery and Django multiple checkbox'], 2], [(2191202, 0), [["Why regexp? I should use split(' ') and use value next to 'version', or simplier:"], ['If you must use regexp then try:']], [[" print results.split(' ')[5]\n"]], ['How to match info from a string'], 2], [(2191202, 1), [['If you must use regexp then try:'], ['-10000']], [[" rx = re.compile('version\\s+([\\d.]+)\\s+')\nrxx = rx.search(results)\nif rxx:\n    print rxx.group(1)\n"]], ['How to match info from a string'], 2], [(2191402, 0), [['-10000'], ['However, it appears you want envar to override "~/myFolder", not "~/myFolder/otherSpecifiedByUser", giving:']], [[" def filepath(filename, foldername=None, envar='MYAPPDIR'):\n  default = '~/myFolder'\n  if foldername:\n    default = os.path.join(default, foldername)\n  dirpath = os.path.expanduser(os.environ.get(envar, default))\n\n  try:\n    os.makedirs(dirpath)\n  except OSError as e:\n    if e.errno != errno.EEXIST:\n      raise\n  return os.path.join(dirpath, filename)\n"]], ['Python Creating Unwanted Folder in Directory'], 3], [(2191402, 1), [['However, it appears you want envar to override "~/myFolder", not "~/myFolder/otherSpecifiedByUser", giving:'], ['Also, if you\'re storing config files, then you can trivially follow the  XDG basedir spec , if you\'re really using something like "~/.myFolder":']], [[' def filepath(filename, foldername=None, envar=\'MYAPPDIR\'):\n  dirpath = os.path.expanduser(os.environ.get(envar, "~/myFolder"))\n  if foldername:\n    dirpath = os.path.join(dirpath, foldername)\n\n  try:\n    os.makedirs(dirpath)\n  except OSError as e:\n    if e.errno != errno.EEXIST:\n      raise\n  return os.path.join(dirpath, filename)\n']], ['Python Creating Unwanted Folder in Directory'], 3], [(2191402, 2), [['Also, if you\'re storing config files, then you can trivially follow the  XDG basedir spec , if you\'re really using something like "~/.myFolder":'], ['-10000']], [[' def filepath(filename, foldername=None, envar=\'MYAPPDIR\'):\n  default = os.path.join(os.environ.get("XDG_CONFIG_HOME", "~/.config"), "myFolder")\n  dirpath = os.path.expanduser(os.environ.get(envar, default))\n  if foldername:\n    dirpath = os.path.join(dirpath, foldername)\n\n  try:\n    os.makedirs(dirpath)\n  except OSError as e:\n    if e.errno != errno.EEXIST:\n      raise\n  return os.path.join(dirpath, filename)\n']], ['Python Creating Unwanted Folder in Directory'], 3], [(2191505, 0), [['Irrevocably tying this with the base class:'], ['Or keeping disparate concerns actually separate:']], [[' class AutoRegister(type):\n  def __new__(mcs, name, bases, D):\n    self = type.__new__(mcs, name, bases, D)\n    if "ID" in D:  # only register if has ID attribute directly\n      if self.ID in self._by_id:\n        raise ValueError("duplicate ID: %r" % self.ID)\n      self._by_id[self.ID] = self\n    return self\n\nclass Base(object):\n  __metaclass__ = AutoRegister\n  _by_id = {}\n  ID = "base"\n\n  @classmethod\n  def from_id(cls, id):\n    return cls._by_id[id]()\n\nclass A(Base):\n  ID = "A"\n\nclass B(Base):\n  ID = "B"\n\nprint Base.from_id("A")\nprint Base.from_id("B")\n']], ['How to get a reference to the current class from class body?'], 4], [(2191505, 1), [['Or keeping disparate concerns actually separate:'], ['You may have picked up on which one I prefer.  Defined separately from the class hierarchy, you can easily extend and modify, such as by registering under two names (using an ID attribute only allows one):']], [[' class IDFactory(object):\n  def __init__(self):\n    self._by_id = {}\n  def register(self, cls):\n    self._by_id[cls.ID] = cls\n    return cls\n\n  def __call__(self, id, *args, **kwds):\n    return self._by_id[id](*args, **kwds)\n  # could use a from_id function instead, as above\n\nfactory = IDFactory()\n\n@factory.register\nclass Base(object):\n  ID = "base"\n\n@factory.register\nclass A(Base):\n  ID = "A"\n\n@factory.register\nclass B(Base):\n  ID = "B"\n\nprint factory("A")\nprint factory("B")\n']], ['How to get a reference to the current class from class body?'], 4], [(2191505, 2), [['You may have picked up on which one I prefer.  Defined separately from the class hierarchy, you can easily extend and modify, such as by registering under two names (using an ID attribute only allows one):'], ['You can also keep the factory instance "inside" the base while keeping it decoupled:']], [[' class IDFactory(object):\n  def __init__(self):\n    self._by_id = {}\n\n  def register(self, cls):\n    self._by_id[cls.ID] = cls\n    return cls\n\n  def register_as(self, name):\n    def wrapper(cls):\n      self._by_id[name] = cls\n      return cls\n    return wrapper\n\n  # ...\n\n@factory.register_as("A")  # doesn\'t require ID anymore\n@factory.register          # can still use ID, even mix and match\n@factory.register_as("B")  # imagine we got rid of B,\nclass A(object):           #  and A fulfills that roll now\n  ID = "A"\n']], ['How to get a reference to the current class from class body?'], 4], [(2191505, 3), [['You can also keep the factory instance "inside" the base while keeping it decoupled:'], ['-10000']], [[' class IDFactory(object):\n  #...\n\nclass Base(object):\n  factory = IDFactory()\n\n  @classmethod\n  def register(cls, subclass):\n    if subclass.ID in cls.factory:\n      raise ValueError("duplicate ID: %r" % subclass.ID)\n    cls.factory[subclass.ID] = subclass\n    return subclass\n\n@Base.factory.register  # still completely decoupled\n                        # (it\'s an attribute of Base, but that can be easily\n                        # changed without modifying the class A below)\n@Base.register  # alternatively more coupled, but possibly desired\nclass A(Base):\n  ID = "A"\n']], ['How to get a reference to the current class from class body?'], 4], [(2191581, 0), [['-10000'], ["it's not clear what you want to capture, that's why I use non-capturing groups. If you need only boolean:"]], [[' (?:[a-z]+-\\d{1,5})(?:, [a-z]+-\\d{1,5})*\\|.*\n']], ['Verify if provided string corresponds to pattern on python'], 3], [(2191581, 1), [["it's not clear what you want to capture, that's why I use non-capturing groups. If you need only boolean:"], ['Of course, the same result can be achieved with the sequence of simple string methods:']], [[" >>> regex = '[a-z]+-\\d{1,5}(?:, [a-z]+-\\d{1,5})*\\|.*'\n>>> re.match(regex, 'proj-234, proj-345|log message') is not None\nTrue\n"]], ['Verify if provided string corresponds to pattern on python'], 3], [(2191581, 2), [['Of course, the same result can be achieved with the sequence of simple string methods:'], ['-10000']], [[" prefs, _, log = subj.partition('|')\nfor group in prefs.split(', '):\n    pref, _, id5 = group.partition('-')\n    if id5.isdigit() and len(id5) <= 5 and pref.isalpha():\n         print(pref, id5)\n"]], ['Verify if provided string corresponds to pattern on python'], 3], [(2191687, 0), [['-10000'], ['If you just want the out edges for a single node, pass that node in inside the nbunch:']], [[' DiGraph.out_edges(nbunch=None, data=False)\n']], ['Is there any function that returns the out edges of a node?'], 2], [(2191687, 1), [['If you just want the out edges for a single node, pass that node in inside the nbunch:'], ['-10000']], [[' graph.out_edges([my_node])\n']], ['Is there any function that returns the out edges of a node?'], 2], [(2192658, 0), [['In Python 2.6 or newer, use  format   syntax :'], ['Edit : For steganography, you might be interested in converting a stream of characters into a stream of bits. Here is how you could do that with generators:']], [[" '{0:0=#10b}'.format(my_num)[2:]\n# '00001010'\n"]], ['Is there a better way to convert from decimal to binary in python?'], 4], [(2192658, 1), [['Edit : For steganography, you might be interested in converting a stream of characters into a stream of bits. Here is how you could do that with generators:'], ['And to convert a stream of bits back into a stream of characters:']], [[" def str2bits(astr):\n    for char in astr:    \n        n=ord(char)\n        for bit in '{0:0=#10b}'.format(n)[2:]:\n            yield int(bit)\n"]], ['Is there a better way to convert from decimal to binary in python?'], 4], [(2192658, 2), [['And to convert a stream of bits back into a stream of characters:'], ['For example, you could use the above functions like this:']], [[' def grouper(n, iterable, fillvalue=None):\n    # Source: http://docs.python.org/library/itertools.html#recipes\n    "grouper(3, \'ABCDEFG\', \'x\') --> ABC DEF Gxx"\n    return itertools.izip_longest(*[iter(iterable)]*n,fillvalue=fillvalue)\n\ndef bits2str(bits):\n    for b in grouper(8,bits):\n        yield chr(int(\'\'.join(map(str,b)),2))\n']], ['Is there a better way to convert from decimal to binary in python?'], 4], [(2192658, 3), [['For example, you could use the above functions like this:'], ['Also, SO guru  Ned Batchelder  does some steganography-related experiments using Python and PIL   here . You may be able to find some useful code there.']], [[" for b in str2bits('Hi Zvarberg'):\n    print b,\n# 0 1 0 0 1 0 0 0 0 1 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 1 0 1 0 0 1 1 1 0 1 1 0 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 1 1 1\n\n# To show bits2str is the inverse of str2bits:\nprint ''.join([c for c in bits2str(str2bits('Hi Zvarberg'))])\n# Hi Zvarberg\n"]], ['Is there a better way to convert from decimal to binary in python?'], 4], [(2193231, 0), [['Alas, the source code is simply gone, not remembered anywhere...:'], ['If you were on a platform using GNU  readline  (basically, any  except  Windows), you might exploit the fact that  readline  itself  does  remember some "history" and can write it out to a file...:']], [[' >>> import inspect\n>>> def f():\n...   print \'ciao\'\n... \n>>> inspect.getsource(f)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/inspect.py", line 694, in getsource\n    lines, lnum = getsourcelines(object)\n  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/inspect.py", line 683, in getsourcelines\n    lines, lnum = findsource(object)\n  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/inspect.py", line 531, in findsource\n    raise IOError(\'could not get source code\')\nIOError: could not get source code\n>>> \n']], ['Display function definition in interactive shell'], 2], [(2193231, 1), [['If you were on a platform using GNU  readline  (basically, any  except  Windows), you might exploit the fact that  readline  itself  does  remember some "history" and can write it out to a file...:'], ['and then read that history file -- however, I know of no way to do this in Windows.']], [[" >>> readline.write_history_file('/tmp/hist.txt')\n"]], ['Display function definition in interactive shell'], 2], [(2193710, 0), [['-10000'], ['If you have more prefixes to exclude you can even do this:']], [[" if not name.startswith('doc'):\n     print name\n"]], ['In python, how do I exclude files from a loop if they begin with a specific set of letters?'], 2], [(2193710, 1), [['If you have more prefixes to exclude you can even do this:'], ['startswith  can accept a tuple of prefixes.']], [[" if not name.startswith(('prefix', 'another', 'yetanother')):\n     print name\n"]], ['In python, how do I exclude files from a loop if they begin with a specific set of letters?'], 2], [(2194684, 0), [['For example:'], ['Output:']], [[' char[] letters = new[] { \'a\', \'b\', \'c\' };\nvar enumerate = letters.Select((c, i) => new { Char = c, Index = i });\nforeach (var result in enumerate) {\n    Console.WriteLine(\n        String.Format("Char = {0}, Index = {1}", result.Char, result.Index)\n    );\n}\n']], ["Is there something similar to python's enumerate for linq"], 2], [(2194684, 1), [['Output:'], ['-10000']], [[' Char = a, Index = 0\nChar = b, Index = 1\nChar = c, Index = 2\n']], ["Is there something similar to python's enumerate for linq"], 2], [(2195340, 0), [['Use  re.sub :'], ['Result:']], [[' import re\ns = "87 foo 87 bar"\nr = re.compile(r"87\\s*")\ns = r.sub(\'\', s)\nprint s\n']], ['Determining the unmatched portion of a string using a regex in Python'], 2], [(2195340, 1), [['Result:'], ['-10000']], [[' foo bar\n']], ['Determining the unmatched portion of a string using a regex in Python'], 2], [(2195755, 0), [["I think I know what's going on here.  Are you doing something like this?"], ['This is a subtle problem due to the way methods are defined in classes.  It is what allows you to make method aliases so easily, e.g.,']], [[" >>> class A(object):\n...     def set(self):\n...             pass\n...     def test(self, x=set):\n...             return x\n... \n>>> set\n<type 'set'>\n>>> A().test()\n<function set at 0x64270>\n"]], ['Python class has method "set", how to reference builtin set type?'], 2], [(2195755, 1), [['This is a subtle problem due to the way methods are defined in classes.  It is what allows you to make method aliases so easily, e.g.,'], ['You can either put  set  at the bottom of your class definition, or you can refer to the builtin set using  __builtins__.set .']], [[' class A(object):\n    def some_method(self):\n        pass\n    some_other_method = some_method\n']], ['Python class has method "set", how to reference builtin set type?'], 2], [(2196376, 0), [['It might look like this.'], ['Want to run this many times?  One way it to do something like this.']], [[' class OurTest( unittest.TestCase ):\n    def setUp( self ):\n        self.load_data()\n        self.load_results()\n        self.uut = ... UUT ...\n    def runTest( self ):\n        ... exercise UUT with source data ...\n        ... check results, using self.assertXXX methods ...\n']], ['How to write a unit-test where each test case has different input but does the same?'], 2], [(2196376, 1), [['Want to run this many times?  One way it to do something like this.'], ['This will allow the unittest main program to find and run your tests.']], [[" class Test1( OurTest ):\n    source_file = 'this'\n    result_file = 'that'\n\nclass Test2( OutTest ):\n    source_file= 'foo'\n    result_file= 'bar'\n"]], ['How to write a unit-test where each test case has different input but does the same?'], 2], [(2196956, 0), [['Is your problem similar to this:'], ['If so, you simply need to copy the objects when you store them:']], [[' l = [[0]] * 4\nl[0][0] += 1\nprint l # prints "[[1], [1], [1], [1]]"\n']], ['Add an object to a python list'], 4], [(2196956, 1), [['If so, you simply need to copy the objects when you store them:'], ["EDIT: Here's the problem:"]], [[' import copy\nl = [copy.copy(x) for x in [[0]] * 4]\nl[0][0] += 1\nprint l # prints "[[1], [0], [0], [0]]"\n']], ['Add an object to a python list'], 4], [(2196956, 2), [["EDIT: Here's the problem:"], ['You need to append a copy:']], [[' arrayList = []\nfor x in allValues:\n    result = model(x)\n    arrayList.append(wM) # appends the wM object to the list\n    wM.reset()           # clears  the wM object\n']], ['Add an object to a python list'], 4], [(2196956, 3), [['You need to append a copy:'], ["But I'm still confused as to where  wM  is coming from. Won't you just be copying the same  wM  object over and over, except clearing it after the first time so all the rest will be empty? Or does  model()  modify the  wM  (which sounds like a terrible design flaw to me)? And why are you throwing away  result ?"]], [[' import copy\narrayList = []\nfor x in allValues:\n    result = model(x)\n    arrayList.append(copy.copy(wM)) # appends a copy to the list\n    wM.reset()                      # clears the wM object\n']], ['Add an object to a python list'], 4], [(2197482, 0), [['Or more concisely'], ['If you really need  True  or  False']], [[' if set(L) & set(M):\n    # there is an intersection\nelse:\n    # no intersection\n']], ['efficiently knowing if intersection of two list is empty or not, in python'], 5], [(2197482, 1), [['If you really need  True  or  False'], ['After running some timings, this seems to be a good option to try too']], [[' bool(set(L) & set(M))\n']], ['efficiently knowing if intersection of two list is empty or not, in python'], 5], [(2197482, 2), [['After running some timings, this seems to be a good option to try too'], ['If the items in M or L are not hashable you have to use a less efficient approach like this']], [[' m_set=set(M)\nany(x in m_set  for x in L)\n']], ['efficiently knowing if intersection of two list is empty or not, in python'], 5], [(2197482, 3), [['If the items in M or L are not hashable you have to use a less efficient approach like this'], ['Here are some timings for 100 item lists. Using sets is considerably faster when there is no intersection, and a bit slower when there is a considerable intersection.']], [[' any(x in M for x in L)\n']], ['efficiently knowing if intersection of two list is empty or not, in python'], 5], [(2197482, 4), [['Here are some timings for 100 item lists. Using sets is considerably faster when there is no intersection, and a bit slower when there is a considerable intersection.'], ['-10000']], [[' M=range(100)\nL=range(100,200)\n\ntimeit set(L) & set(M)\n10000 loops, best of 3: 32.3 µs per loop\n\ntimeit any(x in M for x in L)\n1000 loops, best of 3: 374 µs per loop\n\ntimeit m_set=frozenset(M);any(x in m_set  for x in L)\n10000 loops, best of 3: 31 µs per loop\n\nL=range(50,150)\n\ntimeit set(L) & set(M)\n10000 loops, best of 3: 18 µs per loop\n\ntimeit any(x in M for x in L)\n100000 loops, best of 3: 4.88 µs per loop\n\ntimeit m_set=frozenset(M);any(x in m_set  for x in L)\n100000 loops, best of 3: 9.39 µs per loop\n\n\n# Now for some random lists\nimport random\nL=[random.randrange(200000) for x in xrange(1000)]\nM=[random.randrange(200000) for x in xrange(1000)]\n\ntimeit set(L) & set(M)\n1000 loops, best of 3: 420 µs per loop\n\ntimeit any(x in M for x in L)\n10 loops, best of 3: 21.2 ms per loop\n\ntimeit m_set=set(M);any(x in m_set  for x in L)\n1000 loops, best of 3: 168 µs per loop\n\ntimeit m_set=frozenset(M);any(x in m_set  for x in L)\n1000 loops, best of 3: 371 µs per loop\n']], ['efficiently knowing if intersection of two list is empty or not, in python'], 5], [(2197958, 0), [['Try this:'], ['It will print the second word of every line in lowercase.  split()  will take your line and split it on any whitespace and return a list, then indexing with  [1]  will take the  second  element of the list and  lower()  will convert the result to lowercase. Note that it would make sense to check whether there are at least 2 words on the line, for example:']], [[' >>> f = open("/tmp/gs.pid", "r")\n>>> for line in f:\n    ...   word = line.strip().split()[1].lower()\n    ...   print " -->", word\n>>> f.close()\n']], ['python file reading'], 2], [(2197958, 1), [['It will print the second word of every line in lowercase.  split()  will take your line and split it on any whitespace and return a list, then indexing with  [1]  will take the  second  element of the list and  lower()  will convert the result to lowercase. Note that it would make sense to check whether there are at least 2 words on the line, for example:'], ['-10000']], [[' >>> f = open("/tmp/gs.pid", "r")\n>>> for line in f:\n    ...   words = line.strip().split()\n    ...   if len(words) >= 2:\n    ...      print " -->", words[1].lower()\n    ...   else:\n    ...      print \'Line contains fewer than 2 words.\'\n>>> f.close()\n']], ['python file reading'], 2], [(2198820, 0), [['Next event in each location?'], ['Or perhaps']], [[' [ l.event_set.order_by( start_date ).all()[0] for l in Location.objects.select_related().all() ]\n']], ['Problem writing a database query'], 2], [(2198820, 1), [['Or perhaps'], ['And return that to the template to be rendered.']], [[' events = []\nfor l in Location.objects.select_related().all():\n    events.append( l.event_set.order_by( start_date ).all()[0] )\n']], ['Problem writing a database query'], 2], [(2199940, 0), [['Changed the last 3 lines in the loop to:'], ['where conditionalize is defined as:']], [['     d = conditionalize(d, dim, val)\n']], ['Calculating conditional probabilities from joint pmfs in numpy, too slow. Ideas? (python-numpy)'], 2], [(2199940, 1), [['where conditionalize is defined as:'], ["That made my program's execution time reduce from 15 minutes to 6 seconds. Huge gain."]], [['     def conditionalize(arr, dim, val):\n        arr = arr.swapaxes(dim, 0)\n        shape = arr.shape[1:]       # shape of the sub-array when we omit the desired dimension.\n        count = array(shape).prod() # count of elements omitted the desired dimension.\n        arr = arr.reshape(array(arr.shape).prod()) # flatten the array in-place.\n        arr = arr[val*count:(val+1)*count] # take the needed elements\n        arr = arr.reshape((1,)+shape) # the desired sub-array shape.\n        arr = arr. swapaxes(0, dim)   # fix dimensions\n\n        return arr\n']], ['Calculating conditional probabilities from joint pmfs in numpy, too slow. Ideas? (python-numpy)'], 2], [(2201598, 0), [['For example:'], ['And in your case:']], [[" class MyModel(models.Model):\n  field1 = models.CharField(max_length=50)\n  field2 = models.CharField(max_length=50)\n\n  class Meta:\n    unique_together = ('field1', 'field2',)\n"]], ['How to define two fields "unique" as couple'], 2], [(2201598, 1), [['And in your case:'], ['-10000']], [[' class Volume(models.Model):\n  id = models.AutoField(primary_key=True)\n  journal_id = models.ForeignKey(Journals, db_column=\'jid\', null=True, verbose_name = "Journal")\n  volume_number = models.CharField(\'Volume Number\', max_length=100)\n  comments = models.TextField(\'Comments\', max_length=4000, blank=True)\n\n  class Meta:\n    unique_together = (\'journal_id\', \'volume_number\',)\n']], ['How to define two fields "unique" as couple'], 2], [(2202232, 0), [['Have you tried hasattr()?  Something like this:'], ['If you are unsure about this approach, try it out in a simple test app first.  Here are two simple models that should show if it will work for you and the version of django that you are using (tested in django-1.1.1).']], [[" if hasattr(program, 'swimprogram'):\n    # ...\nelif hasattr(program, 'campprogram'):\n    # ...\n"]], ["Distinguishing parent model's children with Django inheritance"], 3], [(2202232, 1), [['If you are unsure about this approach, try it out in a simple test app first.  Here are two simple models that should show if it will work for you and the version of django that you are using (tested in django-1.1.1).'], ['And then giving it a spin in the shell:']], [[' class Archive(models.Model):\n    pub_date = models.DateField()\n\n    def __unicode__(self):\n        return "Archive: %s" % self.pub_date\n\nclass ArchiveB(Archive):\n    def __unicode__(self):\n        return "ArchiveB: %s" % self.pub_date\n']], ["Distinguishing parent model's children with Django inheritance"], 3], [(2202232, 2), [['And then giving it a spin in the shell:'], ['-10000']], [[' > a_id = Archive.objects.create(pub_date="2010-10-10").id\n> b_id = ArchiveB.objects.create(pub_date="2011-11-11").id\n> a = Archive.objects.get(id=a_id)\n> b = Archive.objects.get(id=b_id)\n> (a, b) # they both look like archive objects\n(<Archive: Archive: 2010-10-10>, <Archive: Archive: 2011-11-11>)\n> hasattr(a, \'archiveb\')\nFalse\n> hasattr(b, \'archiveb\') # but only one has access to an ArchiveB\nTrue\n']], ["Distinguishing parent model's children with Django inheritance"], 3], [(2203351, 0), [['See also the  idle  event in  SystemManager .  This approach works for AIR or Flash Player.'], ['You can get the idle time (in an unsupported way) using ']], [[' application.systemManager.addEventListener(FlexEvent.IDLE, onIdle);\n']], ['Flex: detecting user idle?'], 2], [(2203351, 1), [['You can get the idle time (in an unsupported way) using '], ['-10000']], [[' SystemManager.mx_internal::idleCounter\n']], ['Flex: detecting user idle?'], 2], [(2203438, 0), [['For methods of instances, use  getattr'], ['For functions you can look in the global dict']], [[' >>> class MyClass(object):\n...  def sayhello(self):\n...   print "Hello World!"\n... \n>>> m=MyClass()\n>>> getattr(m,"sayhello")()\nHello World!\n>>> \n']], ['Python: How do you call a method when you only have the string name of the method?'], 4], [(2203438, 1), [['For functions you can look in the global dict'], ['In this case, since there is no function called  prove_riemann_hypothesis  the default function ( sayhello ) is used']], [[' >>> def sayhello():\n...  print "Hello World!"\n... \n>>> globals().get("sayhello")()\nHello World!\n']], ['Python: How do you call a method when you only have the string name of the method?'], 4], [(2203438, 2), [['In this case, since there is no function called  prove_riemann_hypothesis  the default function ( sayhello ) is used'], ['The  problem  with this approach is that you are sharing the namespace with whatever else is in there. You might want to  guard against the json calling methods it is not supposed to . A good way to do this is to decorate your functions like this']], [[' >>> globals().get("prove_riemann_hypothesis", sayhello)()\nHello World!\n']], ['Python: How do you call a method when you only have the string name of the method?'], 4], [(2203438, 3), [['The  problem  with this approach is that you are sharing the namespace with whatever else is in there. You might want to  guard against the json calling methods it is not supposed to . A good way to do this is to decorate your functions like this'], ['-10000']], [[' >>> json_functions={}\n>>> def make_available_to_json(f):\n...  json_functions[f.__name__]=f\n...  return f\n...\n>>> @make_available_to_json\n... def sayhello():\n...  print "Hello World!"\n...\n>>> json_functions.get("sayhello")()\nHello World!\n>>> json_functions["sayhello"]()\nHello World!\n>>> json_functions.get("prove_riemann_hypothesis", sayhello)()\nHello World!\n']], ['Python: How do you call a method when you only have the string name of the method?'], 4], [(2203709, 0), [['first of all you can use the group by clause:'], ['and with this you execute one query for all senders instead of on query for each sender. Another possibility could be:']], [[' select count(*), sender from messages group by sender;\n']], ['How can I optimize multiple nested SELECTs in SQLite (w/Python)?'], 2], [(2203709, 1), [['and with this you execute one query for all senders instead of on query for each sender. Another possibility could be:'], ["i didn't test it but at least now you know the existances of group by clause. this should reduce the number of queries and i think this is the first big step to increase performance."]], [[' select count(*), sender, day, hour\n    from messages group by sender, day, hour\n    order by sender, day, hour;\n']], ['How can I optimize multiple nested SELECTs in SQLite (w/Python)?'], 2], [(2206422, 0), [['You should consider using an  ImageField  in your model.  For example in models.py you would have:'], ['And in your views you would just have:']], [[" def get_random_filename(car_picture, filename):\n    extension = filename.split('.')[-1]\n    return u'_%s_%s.%s' % (random.randint(0,10000000),\n                           random.randint(0,10000000),\n                           extension)\n\nclass CarPicture(models.Model):\n    title = models.TextField()\n    image = models.ImageField(upload_to=get_random_filename)\n"]], ['moving a function out of my method in django'], 4], [(2206422, 1), [['And in your views you would just have:'], ['This will store the image to disk, using the randomly generated filename, and set the image field in the database to the path of the image.  You can also get the url for the image with:']], [[' picture = CarPicture(title="Some Title", image=request.FILES[\'image\'])\npicture.save()\n']], ['moving a function out of my method in django'], 4], [(2206422, 2), [['This will store the image to disk, using the randomly generated filename, and set the image field in the database to the path of the image.  You can also get the url for the image with:'], ['so a template might have:']], [[' picture.image.url()\n']], ['moving a function out of my method in django'], 4], [(2206422, 3), [['so a template might have:'], ['-10000']], [[' <img src="{{picture.image.url}}" title="{{picture.image.title}}"/>\n']], ['moving a function out of my method in django'], 4], [(2207283, 0), [['A better solution would be:'], ["For the values of  cols = 2 ,  rows = 3  we'd get:"]], [[' data = [[0] * cols for i in range(rows)]\n']], ['Python - best way to set a column in a 2d array to a specific value'], 5], [(2207283, 1), [["For the values of  cols = 2 ,  rows = 3  we'd get:"], ['Then you can access it as:']], [[' data = [[0, 0],\n        [0, 0],\n        [0, 0]]\n']], ['Python - best way to set a column in a 2d array to a specific value'], 5], [(2207283, 2), [['Then you can access it as:'], ['Which leads to:']], [[' v = data[row][col]\n']], ['Python - best way to set a column in a 2d array to a specific value'], 5], [(2207283, 3), [['Which leads to:'], ['Or the more Pythonic (thanks J.F. Sebastian):']], [[' val = 10\nset_col = 5\n\nfor row in range(rows):\n    data[row][set_col] = val\n']], ['Python - best way to set a column in a 2d array to a specific value'], 5], [(2207283, 4), [['Or the more Pythonic (thanks J.F. Sebastian):'], ['-10000']], [[' for row in data:\n    row[set_col] = val\n']], ['Python - best way to set a column in a 2d array to a specific value'], 5], [(2207562, 0), [["One way to define relationships between one object and many other types of objects is to use a  GenericForeignKey  and the  ContentType  framework .  I'd guess you would be looking for a  Product  with some more specific related object such as  Jacket .  It may look something like this:"], ['This allows you to define any number of models similar to  Jacket  which can be associated with your product.']], [[" class Product(models.Model):\n    price = models.FloatField()\n    description = models.TextField()\n    content_type = models.ForeignKey(ContentType)\n    object_id = models.PositiveIntegerField()\n    details = generic.GenericForeignKey('content_type', 'object_id')\n\nclass Jacket(models.Model):\n    size = models.PositiveIntegerField()\n    color = models.CharField(max_length=25)\n"]], ['How to write dynamic Django models?'], 2], [(2207562, 1), [['This allows you to define any number of models similar to  Jacket  which can be associated with your product.'], ['This does create the additional work of creating a ton of Models, but it also allows you to be very creative with what data you store and how you store it.']], [[' jacket = Jacket(size=69, color="pink")\njacket.save()\nprod = Product(price=0.99)\nprod.details = jacket  # It\'s like magic!\nprod.save()\n']], ['How to write dynamic Django models?'], 2], [(2208979, 0), [['So, to access these definitions in a Python file  somescript.py , put something like this in your  configure.ac :'], ['Then name your Python file  somescript.py.in  and access the PACKAGE_VERSION output variable like this:']], [[' AC_INIT(MILHOUSE, 0.3.6)\n...blah blah...\nAC_CONFIG_FILES([\n  some/Makefile\n  some/other/Makefile\n  somescript.py\n])\n']], ['Accessing autoconf defined symbols in python'], 2], [(2208979, 1), [['Then name your Python file  somescript.py.in  and access the PACKAGE_VERSION output variable like this:'], ['The triple quotes are probably wise, because you never know when an output variable might contain a quote.']], [[" version = '''@PACKAGE_VERSION@'''\n"]], ['Accessing autoconf defined symbols in python'], 2], [(2210581, 0), [['Assuming all your values are  int s, you could use a  defaultdict  to make this easier:'], ['UPDATE: Thanks to  @gnibbler  for reminding me, but tuples can be unpacked in a for loop:']], [[' from collections import defaultdict\n\nmyDict = defaultdict(int)\n\nfor item in myTupleList:\n    myDict[item[1]] += item[2]\n']], ['Map List of Tuples into a Dictionary, python'], 2], [(2210581, 1), [['UPDATE: Thanks to  @gnibbler  for reminding me, but tuples can be unpacked in a for loop:'], ["Here, the 3-item tuple gets unpacked into the variables  _ ,  key , and  val .  _  is a common placeholder name in Python, used to indicate that the value isn't really important. Using this, we can avoid the hairy  item[1]  and  item[2]  indexing. We can't rely on this if the tuples in  myTupleList  aren't all the same size, but I bet they are."]], [[' from collections import defaultdict\n\nmyDict = defaultdict(int)\n\nfor _, key, val in myTupleList:\n    myDict[key] += val\n']], ['Map List of Tuples into a Dictionary, python'], 2], [(2211631, 0), [['Your second example is pretty close, but you need to understand how the  QuerySet API works across relationships (i.e. joins) .'], ['And keep in mind you can always dump the SQL from a QuerySet like this:']], [[" class Attribute(models.Model):\n    name = models.CharField(max_length=20)\n\nclass Equipment(models.Model):\n    name = models.CharField(max_length=20)\n    attributes = models.ManyToManyField(Attribute)\n\nequips = Equipment.objects.filter(\n    attributes__name='wheels').exclude(attributes__name='blades')\n"]], ['Django model with filterable attributes'], 2], [(2211631, 1), [['And keep in mind you can always dump the SQL from a QuerySet like this:'], ["Sometimes you'll want to see the exact SQL being generated to make sure you're using the API correctly."]], [[' print equips.query.as_sql()\n']], ['Django model with filterable attributes'], 2], [(2212433, 0), [['-10000'], ['or just']], [[' len(yourdict.keys())\n']], ['Counting the Number of keywords in a dictionary in python'], 3], [(2212433, 1), [['or just'], ['If you like to count unique words in the file, you could just use  set  and do like']], [[' len(yourdict)\n']], ['Counting the Number of keywords in a dictionary in python'], 3], [(2212433, 2), [['If you like to count unique words in the file, you could just use  set  and do like'], ['-10000']], [[' len(set(open(yourdictfile).read().split()))\n']], ['Counting the Number of keywords in a dictionary in python'], 3], [(2212643, 0), [['Make sure you understand the three return values of  os.walk :'], ['Another problem are your loops, which should be like this, for example:']], [[' for root, subdirs, files in os.walk(rootdir):\n']], ['Python recursive folder read'], 3], [(2212643, 1), [['Another problem are your loops, which should be like this, for example:'], ["If you didn't know, the  with  statement for files is a shorthand:"]], [[" import os\nimport sys\n\nwalk_dir = sys.argv[1]\n\nprint('walk_dir = ' + walk_dir)\n\n# If your current working directory may change during script execution, it's recommended to\n# immediately convert program arguments to an absolute path. Then the variable root below will\n# be an absolute path as well. Example:\n# walk_dir = os.path.abspath(walk_dir)\nprint('walk_dir (absolute) = ' + os.path.abspath(walk_dir))\n\nfor root, subdirs, files in os.walk(walk_dir):\n    print('--\\nroot = ' + root)\n    list_file_path = os.path.join(root, 'my-directory-list.txt')\n    print('list_file_path = ' + list_file_path)\n\n    with open(list_file_path, 'wb') as list_file:\n        for subdir in subdirs:\n            print('\\t- subdirectory ' + subdir)\n\n        for filename in files:\n            file_path = os.path.join(root, filename)\n\n            print('\\t- file %s (full path: %s)' % (filename, file_path))\n\n            with open(file_path, 'rb') as f:\n                f_content = f.read()\n                list_file.write(('The file %s contains:\\n' % filename).encode('utf-8'))\n                list_file.write(f_content)\n                list_file.write(b'\\n')\n"]], ['Python recursive folder read'], 3], [(2212643, 2), [["If you didn't know, the  with  statement for files is a shorthand:"], ['-10000']], [[" with open('filename', 'rb') as f:\n    dosomething()\n\n# is effectively the same as\n\nf = open('filename', 'rb')\ntry:\n    dosomething()\nfinally:\n    f.close()\n"]], ['Python recursive folder read'], 3], [(2213191, 0), [['As far as I understand your question you have a mod_python-based script and you want to read a POST parameter. Therefore you only have to use the  form  object which is automatically provided by mod_python:'], ['Note that this solution is when your server is configured with  PythonHandler mod_python.psp  which will allow you to use "Python Server Pages" (special <% %> tags, automatically created variables like  form , ...). If you\'re writing a normal mod_python  handler , then it would look something like that:']], [[' myparameter = form.getfirst("name_of_the_post_parameter")\n']], ['Reading request parameters in Python'], 2], [(2213191, 1), [['Note that this solution is when your server is configured with  PythonHandler mod_python.psp  which will allow you to use "Python Server Pages" (special <% %> tags, automatically created variables like  form , ...). If you\'re writing a normal mod_python  handler , then it would look something like that:'], ['-10000']], [[' from mod_python import util\n\ndef handler(req):\n   form = util.FieldStorage(req, keep_blank_values=1)\n   myparameter = form.getfirst("name_of_the_post_parameter")\n   ...other stuff...\n']], ['Reading request parameters in Python'], 2], [(2213289, 0), [["I'm not 100% sure if this is what you want, but it works:"], ['Then']], [[' def proxy_wrapper(name, docstring):\n    def wrapper(self, *args, **kwargs):\n        return self.proxy.__getattribute__(name)(*args, **kwargs)\n    wrapper.__doc__ = docstring\n    wrapper._is_wrapper = True\n    return wrapper\n\nclass Something(object):\n    def __init__(self):\n        self.proxy = {}\n\n    @classmethod\n    def get_proxy_wrappers(cls):\n        return [m for m in dir(cls) if hasattr(getattr(cls, m), "_is_wrapper")]\n\n    update = proxy_wrapper("update", "wraps the proxy\'s update() method")\n    proxy_keys = proxy_wrapper("keys", "wraps the proxy\'s keys() method")    \n']], ['Access a subset of functions of a Python class'], 2], [(2213289, 1), [['Then'], ['-10000']], [[' >>> a = Something()\n>>> print a.proxy\n{}\n>>> a.update({1: 42})\n>>> print a.proxy\n{1: 42}\n>>> a.update({"foo": "bar"})\n>>> print a.proxy_keys()\n[1, \'foo\']\n>>> print a.get_proxy_wrappers()\n[\'proxy_keys\', \'update\']\n']], ['Access a subset of functions of a Python class'], 2], [(2213309, 0), [['You should perhaps implement this by defining a custom manager for your class, and adding two manager methods on that manager (which I believe is the preferred way for adding table-level functionality for any model). However, another way of doing it is by throwing in two  class methods  on your class that query and return resulting objects, such as:'], ['And for an example implementation of how to do the same thing using Django managers, you could do something like this:']], [[' class Status(models.Model):\n    code = models.IntegerField()\n    text = models.CharField(maxlength=255)\n\n    @classmethod\n    def successful(cls):\n        return cls.objects.get(code=0)\n\n    @classmethod\n    def failed(cls):\n        return cls.objects.get(code=1)\n']], ['Django model class methods for predefined values'], 2], [(2213309, 1), [['And for an example implementation of how to do the same thing using Django managers, you could do something like this:'], ['Where, you could do  Status.objects.successful()  and  Status.objects.failed()  to get what you desire.']], [[' class StatusManager(models.Manager):\n    def successful(self):\n        return self.get(code=1)\n\n    def failed(self):\n        return self.get(code=0)\n\nclass Status(models.Model):\n    code = models.IntegerField()\n    text = models.CharField(maxlength=255)\n\n    objects = StatusManager()\n']], ['Django model class methods for predefined values'], 2], [(2213402, 0), [['choices.py'], ['models.py']], [[' _registry = {}\n\ndef register(choice_class):\n    id = len(_registry) + 1\n    choice_class.id = id\n    _registry[id] = choice_class\n\ndef as_list():\n    ret = []\n    for id in sorted(_registry):\n        ret.append((id, _registry[id].name))\n    return ret\n\ndef get_choice(id):\n    return _registry[id]\n\nclass SomeChoice:\n    name = u"lorem"\n\nclass AnotherChoice:\n    name = u"ipsum"\n\nregister(SomeChoice)\nregister(AnotherChoice)\n']], ['How to store python classes into a database with Django?'], 2], [(2213402, 1), [['models.py'], ['-10000']], [[" from django.db import models\nimport choices\n\nclass SomeModel(models.Model):\n    somefield = models.IntegerField('field', choices=choices.as_list())\n"]], ['How to store python classes into a database with Django?'], 2], [(2213551, 0), [['An attempt to  easy_install  indicates a problem with their  listing  in the  Python Package Index , which pip searches.'], ['All is not lost, however;  pip  can install from  Subversion  (SVN),  Git ,  Mercurial , and  Bazaar  repositories. SciPy uses SVN:']], [[' easy_install scipy\nSearching for scipy\nReading http://pypi.python.org/simple/scipy/\nReading http://www.scipy.org\nReading http://sourceforge.net/project/showfiles.php?group_id=27747&package_id=19531\nReading http://new.scipy.org/Wiki/Download\n']], ['Installing SciPy with pip'], 3], [(2213551, 1), [['All is not lost, however;  pip  can install from  Subversion  (SVN),  Git ,  Mercurial , and  Bazaar  repositories. SciPy uses SVN:'], ['Update (12-2012):']], [[' pip install svn+http://svn.scipy.org/svn/scipy/trunk/#egg=scipy\n']], ['Installing SciPy with pip'], 3], [(2213551, 2), [['Update (12-2012):'], ['Since NumPy is a dependency, it should be installed as well.']], [[' pip install git+https://github.com/scipy/scipy.git\n']], ['Installing SciPy with pip'], 3], [(2213923, 0), [['-10000'], ['Careful measurements of "point" performance (code A vs code B for a specific input) are a part of this extremely costly process, and standard library module  timeit  helps here. However, it\'s easier to use it at a shell prompt.  For example, here\'s a short module to showcase the general approach for this problem, save it as  nodup.py :']], [[' >>> k = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4]]\n>>> import itertools\n>>> k.sort()\n>>> list(k for k,_ in itertools.groupby(k))\n[[1, 2], [3], [4], [5, 6, 2]]\n']], ['Python: removing duplicates from a list of lists'], 4], [(2213923, 1), [['Careful measurements of "point" performance (code A vs code B for a specific input) are a part of this extremely costly process, and standard library module  timeit  helps here. However, it\'s easier to use it at a shell prompt.  For example, here\'s a short module to showcase the general approach for this problem, save it as  nodup.py :'], ['Now we can run checks on the tiny example list:']], [[" import itertools\n\nk = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4]]\n\ndef doset(k, map=map, list=list, set=set, tuple=tuple):\n  return map(list, set(map(tuple, k)))\n\ndef dosort(k, sorted=sorted, xrange=xrange, len=len):\n  ks = sorted(k)\n  return [ks[i] for i in xrange(len(ks)) if i == 0 or ks[i] != ks[i-1]]\n\ndef dogroupby(k, sorted=sorted, groupby=itertools.groupby, list=list):\n  ks = sorted(k)\n  return [i for i, _ in itertools.groupby(ks)]\n\ndef donewk(k):\n  newk = []\n  for i in k:\n    if i not in newk:\n      newk.append(i)\n  return newk\n\n# sanity check that all functions compute the same result and don't alter k\nif __name__ == '__main__':\n  savek = list(k)\n  for f in doset, dosort, dogroupby, donewk:\n    resk = f(k)\n    assert k == savek\n    print '%10s %s' % (f.__name__, sorted(resk))\n"]], ['Python: removing duplicates from a list of lists'], 4], [(2213923, 2), [['Now we can run checks on the tiny example list:'], ['confirming that the quadratic approach has small-enough constants to make it attractive for tiny lists with few duplicated values.  With a short list without duplicates:']], [[" $ python -mtimeit -s'import nodup' 'nodup.doset(nodup.k)'\n100000 loops, best of 3: 11.7 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.dosort(nodup.k)'\n100000 loops, best of 3: 9.68 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.dogroupby(nodup.k)'\n100000 loops, best of 3: 8.74 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.donewk(nodup.k)'\n100000 loops, best of 3: 4.44 usec per loop\n"]], ['Python: removing duplicates from a list of lists'], 4], [(2213923, 3), [['confirming that the quadratic approach has small-enough constants to make it attractive for tiny lists with few duplicated values.  With a short list without duplicates:'], ["the quadratic approach isn't bad, but the sort and groupby ones are better.  Etc, etc."]], [[" $ python -mtimeit -s'import nodup' 'nodup.donewk([[i] for i in range(12)])'\n10000 loops, best of 3: 25.4 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.dogroupby([[i] for i in range(12)])'\n10000 loops, best of 3: 23.7 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.doset([[i] for i in range(12)])'\n10000 loops, best of 3: 31.3 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.dosort([[i] for i in range(12)])'\n10000 loops, best of 3: 25 usec per loop\n"]], ['Python: removing duplicates from a list of lists'], 4], [(2214330, 0), [['I think the code you would have to write would be like this: (EDIT)'], ['and you would call it like this:']], [[' def get_value(param1,param2):\n    return "value %s - %s " % (str(param1),str(param2))\n\ndef fetch(key,val_function,**kwargs)\n    val = cache.get(key)\n    if not val:\n        val = val_function(**kwargs)\n        cache.set(key,val)\n    return val\n']], ['cache.fetch in Django?'], 2], [(2214330, 1), [['and you would call it like this:'], ['-10000']], [[" fetch('key',get_value,param1='first',param2='second')\n"]], ['cache.fetch in Django?'], 2], [(2215352, 0), [['Model fields coming from foreign keys can be specified like this:'], ['In your case, the following should work (some of your fields left out for brevity):']], [[" ('foreign_model_field', ('nested_field1', 'nested_field2'))\n"]], ['Django Piston: How can I exclude nested fields from handler results? Is it even possible?'], 2], [(2215352, 1), [['In your case, the following should work (some of your fields left out for brevity):'], ['-10000']], [[" fields = ('updated', 'expires', 'created', \n    ('request', ('incident', 'reason', ('inputter', ('username',)))))\n"]], ['Django Piston: How can I exclude nested fields from handler results? Is it even possible?'], 2], [(2215429, 0), [['-10000'], ['Very silly, but it does meet your equally silly stated restriction (no  if ).  A bit less silly:']], [[" last_name = soup.find('last_name') and soup.find('last_name').string\n"]], ['Parsing XML with BeautifulSoup and handling missing element'], 3], [(2215429, 1), [['Very silly, but it does meet your equally silly stated restriction (no  if ).  A bit less silly:'], ['and:']], [[" last_name_node = soup.find('last_name')\nlast_name = last_name_node and last_name_node.string\n"]], ['Parsing XML with BeautifulSoup and handling missing element'], 3], [(2215429, 2), [['and:'], ["These two don't have the same overhead as the first.  I think a simple  if  is more readable than any of these, though."]], [[" last_name = getattr(soup.find('last_name'), 'string', None)\n"]], ['Parsing XML with BeautifulSoup and handling missing element'], 3], [(2216974, 0), [['The following snippet might be helpful :'], ['This  PizzaForm  can then be used everywhere, even in the admin :']], [[" class PizzaForm(forms.ModelForm):\n    class Meta:\n        model = Pizza\n\n    # Representing the many to many related field in Pizza\n    toppings = forms.ModelMultipleChoiceField(queryset=Topping.objects.all())\n\n    # Overriding __init__ here allows us to provide initial\n    # data for 'toppings' field\n    def __init__(self, *args, **kwargs):\n        # Only in case we build the form from an instance\n        # (otherwise, 'toppings' list should be empty)\n        if kwargs.get('instance'):\n            # We get the 'initial' keyword argument or initialize it\n            # as a dict if it didn't exist.                \n            initial = kwargs.setdefault('initial', {})\n            # The widget for a ModelMultipleChoiceField expects\n            # a list of primary key for the selected data.\n            initial['toppings'] = [t.pk for t in kwargs['instance'].topping_set.all()]\n\n        forms.ModelForm.__init__(self, *args, **kwargs)\n\n    # Overriding save allows us to process the value of 'toppings' field    \n    def save(self, commit=True):\n        # Get the unsave Pizza instance\n        instance = forms.ModelForm.save(self, False)\n\n        # Prepare a 'save_m2m' method for the form,\n        old_save_m2m = self.save_m2m\n        def save_m2m():\n           old_save_m2m()\n           # This is where we actually link the pizza with toppings\n           instance.topping_set.clear()\n           for topping in self.cleaned_data['toppings']:\n               instance.topping_set.add(topping)\n        self.save_m2m = save_m2m\n\n        # Do we need to save all changes now?\n        if commit:\n            instance.save()\n            self.save_m2m()\n\n        return instance\n"]], ['Django ModelForm for Many-to-Many fields'], 3], [(2216974, 1), [['This  PizzaForm  can then be used everywhere, even in the admin :'], ['-10000']], [[' # yourapp/admin.py\nfrom django.contrib.admin import site, ModelAdmin\nfrom yourapp.models import Pizza\nfrom yourapp.forms import PizzaForm\n\nclass PizzaAdmin(ModelAdmin):\n  form = PizzaForm\n\nsite.register(Pizza, PizzaAdmin)\n']], ['Django ModelForm for Many-to-Many fields'], 3], [(2216974, 2), [['-10000'], ['-10000']], [[" def save(self):\n  instance = forms.ModelForm.save(self)\n  instance.topping_set.clear()\n  for topping in self.cleaned_data['toppings']:\n    instance.topping_set.add(topping)\n"]], ['Django ModelForm for Many-to-Many fields'], 3], [(2217072, 0), [["Here's an example, adapted from the module documentation. Server code:"], ['Client code:']], [[' from SimpleXMLRPCServer import SimpleXMLRPCServer\nfrom SimpleXMLRPCServer import SimpleXMLRPCRequestHandler\n\n# Restrict to a particular path.\nclass RequestHandler(SimpleXMLRPCRequestHandler):\n    rpc_paths = (\'/RPC2\',)\n\n# Create server\nserver = SimpleXMLRPCServer(("localhost", 8000),\n                            requestHandler=RequestHandler)\n\ndef myfunction(x, y):\n    status = 1\n    result = [5, 6, [4, 5]]\n    return (status, result)\nserver.register_function(myfunction)\n\n# Run the server\'s main loop\nserver.serve_forever()\n']], ['convention to represent the exit status and actual result in XMLRPC'], 2], [(2217072, 1), [['Client code:'], ['The server function returns a tuple ']], [[" import xmlrpclib\n\ns = xmlrpclib.ServerProxy('http://localhost:8000')\nprint s.myfunction(2, 4)\n"]], ['convention to represent the exit status and actual result in XMLRPC'], 2], [(2218238, 0), [['You could do this with the following list comprehension:'], ['With your example:']], [[' [mylist[i:] + [newelement] + mylist[:i] for i in xrange(len(mylist),-1,-1)]\n']], ['Inserting values into specific locations in a list in Python'], 2], [(2218238, 1), [['With your example:'], ['-10000']], [[" >>> mylist=['A','B']\n>>> newelement='X'\n>>> [mylist[i:] + [newelement] + mylist[:i] for i in xrange(len(mylist),-1,-1)]\n[['X', 'A', 'B'], ['B', 'X', 'A'], ['A', 'B', 'X']]\n"]], ['Inserting values into specific locations in a list in Python'], 2], [(2218737, 0), [['time.localtime()[0]  calls  __gettiem__()  on the  time.struct_time  instance. This is how it gets this list/tuple like behaviour from. Here is a really simple example'], ['You can load up your 5 variables like this']], [[' >>> class MyTime(object):\n...     def __init__(self, year, month, mday, hour, minute):\n...         self.data =  year, month, mday, hour, minute\n...     def __getitem__(self, idx):\n...         return self.data[idx]\n...     def __str__(self):\n...         return "MyTime(tm_year=%s, tm_mon=%s, tm_mday=%s, tm_hour=%s, tm_min=%s)"%self.data\n... \n>>> x=MyTime(2010,2,7,14,46)\n>>> x[0]\n2010\n>>> x[1]\n2\n>>> print x\nMyTime(tm_year=2010, tm_mon=2, tm_mday=7, tm_hour=14, tm_min=46)\n']], ['time.localtime() - how does it work? Brief questions on how to use it too - super easy stuff!'], 2], [(2218737, 1), [['You can load up your 5 variables like this'], ['-10000']], [[' >>> tm_year,tm_mon,tm_mday,tm_hour,tm_min=map(str,time.localtime()[:5])\n']], ['time.localtime() - how does it work? Brief questions on how to use it too - super easy stuff!'], 2], [(2219998, 0), [['If you define your classes as a new-style class (subclass of  object ) then this is possible since the subclasses are saved in  __subclasses__ .'], ['I do not know exactly when this was introduced or if there are any special considerations. It does however work fine to declare a subclass in a function:']], [[' class A(object):\n def hello(self):\n  print "Hello A"\n\nclass B(A):\n def hello(self):\n   print "Hello B"\n\n>>> for cls in A.__subclasses__():\n...  print cls.__name__\n...\nB\n']], ['How to know all the derived classes of a parent?'], 2], [(2219998, 1), [['I do not know exactly when this was introduced or if there are any special considerations. It does however work fine to declare a subclass in a function:'], ['However, you need to note that until the class definitions have been run the interpreter does not know about them. In the example above  C  is not recognized as a subclass of A until the function  f  is executed. But this is the same for python classes every time anyway, as I presume you are already aware of.']], [[' >>> def f(x):\n...  class C(A):\n...   def hello(self):\n...    print "Hello C"\n...  c = C()\n...  c.hello()\n...  print x\n...  for cls in A.__subclasses__():\n...   print cls.__name__\n...\n>>> f(4)\nHello C\n4\nB\nC\n']], ['How to know all the derived classes of a parent?'], 2], [(2223375, 0), [["I've found one way to achieve what I want, by using proxy models to get around the fact that each model may be registered only once."], ["After looking at  http://code.djangoproject.com/wiki/DynamicModels , I've come up with the following function utility function to do the same thing:"]], [[" class PostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'pubdate','user')\n\nclass MyPosts(Post):\n    class Meta:\n        proxy = True\n\nclass MyPostAdmin(PostAdmin):\n    def get_queryset(self, request):\n        return self.model.objects.filter(user = request.user)\n\n\nadmin.site.register(Post, PostAdmin)\nadmin.site.register(MyPost, MyPostAdmin)\n"]], ['Multiple ModelAdmins/views for same model in Django admin'], 3], [(2223375, 1), [["After looking at  http://code.djangoproject.com/wiki/DynamicModels , I've come up with the following function utility function to do the same thing:"], ['This can be used as follows:']], [[" def create_modeladmin(modeladmin, model, name = None):\n    class  Meta:\n        proxy = True\n        app_label = model._meta.app_label\n\n    attrs = {'__module__': '', 'Meta': Meta}\n\n    newmodel = type(name, (model,), attrs)\n\n    admin.site.register(newmodel, modeladmin)\n    return modeladmin\n"]], ['Multiple ModelAdmins/views for same model in Django admin'], 3], [(2223375, 2), [['This can be used as follows:'], ['-10000']], [[" class MyPostAdmin(PostAdmin):\n    def get_queryset(self, request):\n        return self.model.objects.filter(user = request.user)\n\ncreate_modeladmin(MyPostAdmin, name='my-posts', model=Post)\n"]], ['Multiple ModelAdmins/views for same model in Django admin'], 3], [(2224554, 0), [['That depends which functionalities you want. If you just want to print out a file, you can do'], ['or to concatenate some files, you could do']], [[" with open('myfile') as f:\n    for line in f:\n        print line,\n"]], ["python equivalent of GNU 'cat' that shows unique lines"], 2], [(2224554, 1), [['or to concatenate some files, you could do'], ['There is no general answer. Depending on the functionality you want to replicate, your code will be different. To exactly replicate something odd and special, use the  subprocess  module and call cat.']], [[" filenames = ['file1', 'file2', 'file3']\nfor filename in filenames:\n    with open(filename) as f:\n        for line in f:\n            print line,\n"]], ["python equivalent of GNU 'cat' that shows unique lines"], 2], [(2224742, 0), [['Use pandas!'], ['Since today is Thursday, Sept 26, that will give you an output of:']], [[' import pandas as pd\n# BDay is business day, not birthday...\nfrom pandas.tseries.offsets import BDay\n\n# pd.datetime is an alias for datetime.datetime\ntoday = pd.datetime.today()\nprint today - BDay(4)\n']], ['Business days in Python'], 2], [(2224742, 1), [['Since today is Thursday, Sept 26, that will give you an output of:'], ['-10000']], [[' datetime.datetime(2013, 9, 20, 14, 8, 4, 89761)\n']], ['Business days in Python'], 2], [(2224915, 0), [['I had a similar problem with standard emoticons to be replaced with values.  Here  is a list of emoticons. I had them in a plain text file (so that I can append/delete to it as and when required) separated by tab like.  '], ['Then read it into a dictionary']], [[' :[        -1\n:/        -1\n:(          -1\n:)         1\n']], ['translate by replacing words inside existing text'], 6], [(2224915, 1), [['Then read it into a dictionary'], ['Then a lookup function']], [[" emoticons = {}          \nfor line in open('data/emoticons.txt').xreadlines():   \n        symbol, value = line.split('\\t')                                           \n        emoticons[str(symbol)] = int(value)\n"]], ['translate by replacing words inside existing text'], 6], [(2224915, 2), [['Then a lookup function'], ['Call the function with ']], [[' def mark_emoticons(t):\n    for w, v in emoticons.items():\n        match = re.search(re.escape(w),t)\n            if match:\n                print w, "found "\n']], ['translate by replacing words inside existing text'], 6], [(2224915, 3), [['Call the function with '], ['As for L33t-speak I have a separate file slangs.txt, which looks like']], [[" mark_emoticons('Hello ladies! How are you? Fantastic :) Look at your man ...')\n"]], ['translate by replacing words inside existing text'], 6], [(2224915, 4), [['As for L33t-speak I have a separate file slangs.txt, which looks like'], ['A similar function to read it to dictionary slangs{} and a similar function to replace the slangs.']], [[' u   you\nur  you are\nuw  you are welcome\xa0\nwb  welcome back\xa0\nwfm works for me\xa0\nwtf what the fuck\n']], ['translate by replacing words inside existing text'], 6], [(2224915, 5), [['A similar function to read it to dictionary slangs{} and a similar function to replace the slangs.'], ['From  Python library  the re.escape()']], [[' def mark_slangs(t):        \n    for w, v in slangs.items():\n            s = r\'\\b\' + w + r\'\\b\'\n            match = re.search(s,t)\n            if match:\n                    #print w, "found in:",t, "replacing with",readtable.slangs[w]\n                    t = re.sub(w,slangs[w].rstrip(),t)\n                    ...\n']], ['translate by replacing words inside existing text'], 6], [(2225038, 0), [['To get the type of an object, you can use the built-in  type()  function. Passing an object as the only parameter will return the type object of that object:'], ['This of course also works for custom types:']], [[" >>> type([]) is list\nTrue\n>>> type({}) is dict\nTrue\n>>> type('') is str\nTrue\n>>> type(0) is int\nTrue\n>>> type({})\n<type 'dict'>\n>>> type([])\n<type 'list'>\n"]], ['Determine the type of an object?'], 5], [(2225038, 1), [['This of course also works for custom types:'], ['Note that  type()  will only return the immediate type of the object, but won’t be able to tell you about type inheritance.']], [[' >>> class Test1 (object):\n        pass\n>>> class Test2 (Test1):\n        pass\n>>> a = Test1()\n>>> b = Test2()\n>>> type(a) is Test1\nTrue\n>>> type(b) is Test2\nTrue\n']], ['Determine the type of an object?'], 5], [(2225038, 2), [['Note that  type()  will only return the immediate type of the object, but won’t be able to tell you about type inheritance.'], ['To cover that, you should use the  isinstance  function. This of course also works for built-in types:']], [[' >>> type(b) is Test1\nFalse\n']], ['Determine the type of an object?'], 5], [(2225038, 3), [['To cover that, you should use the  isinstance  function. This of course also works for built-in types:'], ['The second parameter of  isinstance()  also accepts a tuple of types, so it’s possible to check for multiple types at once.  isinstance  will then return true, if the object is of any of those types:']], [[' >>> isinstance(b, Test1)\nTrue\n>>> isinstance(b, Test2)\nTrue\n>>> isinstance(a, Test1)\nTrue\n>>> isinstance(a, Test2)\nFalse\n>>> isinstance([], list)\nTrue\n>>> isinstance({}, dict)\nTrue\n']], ['Determine the type of an object?'], 5], [(2225038, 4), [['The second parameter of  isinstance()  also accepts a tuple of types, so it’s possible to check for multiple types at once.  isinstance  will then return true, if the object is of any of those types:'], ['-10000']], [[' >>> isinstance([], (tuple, list, set))\nTrue\n']], ['Determine the type of an object?'], 5], [(2227169, 0), [["By the way, I don't know if you know this, but locking is very easy in Python - create a threading.lock object, and then you can acquire/release it like this:"], ["In Python 2.5, do  from __future__ import with_statement ; Python 2.4 and before don't have this, so you'll want to put the acquire()/release() calls in  try:...finally:  blocks:"]], [[' import threading\nlist1Lock = threading.Lock()\n\nwith list1Lock:\n    # change or read from the list here\n# continue doing other stuff (the lock is released when you leave the with block)\n']], ['Are Python built-in containers thread-safe?'], 2], [(2227169, 1), [["In Python 2.5, do  from __future__ import with_statement ; Python 2.4 and before don't have this, so you'll want to put the acquire()/release() calls in  try:...finally:  blocks:"], ['Some very good information about thread synchronization in Python .']], [[' import threading\nlist1Lock = threading.Lock()\n\ntry:\n    list1Lock.acquire()\n    # change or read from the list here\nfinally:\n    list1Lock.release()\n# continue doing other stuff (the lock is released when you leave the with block)\n']], ['Are Python built-in containers thread-safe?'], 2], [(2228049, 0), [['For example:'], ['The last  print  statement will output this XML document:']], [[' from xml.dom.minidom import parseString\ndocumentNode = parseString("<types name=\'character\' shortName=\'chrs\'></types>")\ntypesNode = documentNode.firstChild\n\n# Getting an attribute\nprint typesNode.attributes["name"].value # will print "character"\n\n# Setting an attribute\ntypesNode.attributes["mynewattribute"] = u"mynewvalue"\nprint documentNode.toprettyxml()\n']], ['How to retrieve attributes of xml tag in Python?'], 2], [(2228049, 1), [['The last  print  statement will output this XML document:'], ['-10000']], [[' <?xml version="1.0" ?>\n<types mynewattribute="mynewvalue" name="character" shortName="chrs"/>\n']], ['How to retrieve attributes of xml tag in Python?'], 2], [(2229427, 0), [['You should use certain models for this. For every form that might be customised this way, a new database entry must be created. I guess, it should look like this:'], ['No in FavouriteFoddForm you look for the settings in database, so you do:']], [[' class FormSettings(Model):\n  form = CharField(..)\n\nclass FormAttrib(Model):\n  form_settings = ForeignKey(FormSettings)\n  field = CharField(..)\n  attrib_name=CharField(..)\n  attrib_value=CharField(..)\n']], ['Dynamic form requirements in Django'], 4], [(2229427, 1), [['No in FavouriteFoddForm you look for the settings in database, so you do:'], ['and you iterate over settings']], [[' settings = FormSettings.objects.get(form=app_name + self.__class__.name)\n']], ['Dynamic form requirements in Django'], 4], [(2229427, 2), [['and you iterate over settings'], ['and here you simple call exec and set proper attribute:']], [[' for setting in settings.formattrib_set():\n']], ['Dynamic form requirements in Django'], 4], [(2229427, 3), [['and here you simple call exec and set proper attribute:'], ['This should set attributes to required=True.']], [[' exec("getattr(self, settings.field)[attrib_name] = %s" % attrib_value)\n']], ['Dynamic form requirements in Django'], 4], [(2229618, 0), [['Create a dictionary:'], ['and then:']], [['   hints = dict(zip(WORD, HINT))\n']], ["Giving 'hints' problem"], 3], [(2229618, 1), [['and then:'], ['Simple  if  is not enough?']], [["   if guess=='hint':\n    print hints[current_word]\n"]], ["Giving 'hints' problem"], 3], [(2229618, 2), [['Simple  if  is not enough?'], ['-10000']], [[' if guess != \'hint\':\n  print "Sorry, that\'s not the answer."\n']], ["Giving 'hints' problem"], 3], [(2231887, 0), [['$ tshark -i eth0 -n -Nn  tcp port 3128 or tcp port 80'], ['-10000']], [[" from mechanize import Browser\nbr = Browser()\nbr.open('http://news.bbc.co.uk')\n"]], ['check that a script is actually using a proxy from a ip list'], 2], [(2231887, 1), [['-10000'], ['-10000']], [[" br.set_proxies({'http':'some.proxy:3128'})\nbr.open('http://news.bbc.co.uk')\n"]], ['check that a script is actually using a proxy from a ip list'], 2], [(2233388, 0), [['Filter (or list comprehension) IS the way to go. If you want to do it inplace, something like this would work:'], ['Or alternatively, the purge list can be made with a comprehension, a shortcut version looks like:']], [[' purge = []\nfor i,object in enumerate(self.list):\n    if object.mycond()\n        purge.append(i)\nfor i in reversed(purge):\n    del self.list[i]\n']], ['How to delete list elements while cycling the list itself without duplicate it'], 2], [(2233388, 1), [['Or alternatively, the purge list can be made with a comprehension, a shortcut version looks like:'], ['-10000']], [[' for i in reversed([ i for (i,o) in enumerate(self.list) if o.mycond() ]):\n    del self.list[i]\n']], ['How to delete list elements while cycling the list itself without duplicate it'], 2], [(2233883, 0), [['This gives you the property names for all related objects:'], ['You can then use something like this to get all related objects:']], [[' links = [rel.get_accessor_name() for rel in a._meta.get_all_related_objects()]\n']], ['Get all related Django model objects'], 2], [(2233883, 1), [['You can then use something like this to get all related objects:'], ['I spent a while trying to figure this out so I could implement a kind of "Observer Pattern" on\none of my models. Hope it\'s helpful.']], [[' for link in links:\n    objects = getattr(a, link).all()\n    for object in objects:\n        # do something with related object instance\n']], ['Get all related Django model objects'], 2], [(2234181, 0), [['I think you can order_by on the FKey model.'], ["Iff you can't, You need to use the Django ORM's Annotation API, to make a new field and you will be able to order it accordingly:"]], [[" A.objects.order_by('B__name')\n"]], ["Django Group By relation's data"], 2], [(2234181, 1), [["Iff you can't, You need to use the Django ORM's Annotation API, to make a new field and you will be able to order it accordingly:"], ['-10000']], [[" A.objects.annotate(bname='B__name').order_by('bname')\n"]], ["Django Group By relation's data"], 2], [(2236010, 0), [["If you're in your template, you can use something like:"], ["Where  start_index  on pagination's page object gives you the 1-based starting index for that page. Of course, the other way around is probably more readable..."]], [[' {{ forloop.counter0|add:page.start_index }}\n']], ['How to get enumerated results from a query in Django?'], 2], [(2236010, 1), [["Where  start_index  on pagination's page object gives you the 1-based starting index for that page. Of course, the other way around is probably more readable..."], ['-10000']], [[' {{ page.start_index|add:forloop.counter0 }}\n']], ['How to get enumerated results from a query in Django?'], 2], [(2236498, 0), [['Looks like name resolution is ultimately handled by  socket.create_connection .'], ['Like this:']], [[' -> urllib2.urlopen\n-> httplib.HTTPConnection\n-> socket.create_connection\n']], ['Tell urllib2 to use custom DNS'], 2], [(2236498, 1), [['Like this:'], ["Obviously there are certificate issues if you use the HTTPS, and you'll need to fill out MyResolver..."]], [[" import urllib2\nimport httplib\nimport socket\n\ndef MyResolver(host):\n  if host == 'news.bbc.co.uk':\n    return '66.102.9.104' # Google IP\n  else:\n    return host\n\nclass MyHTTPConnection(httplib.HTTPConnection):\n  def connect(self):\n    self.sock = socket.create_connection((MyResolver(self.host),self.port),self.timeout)\nclass MyHTTPSConnection(httplib.HTTPSConnection):\n  def connect(self):\n    sock = socket.create_connection((MyResolver(self.host), self.port), self.timeout)\n    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file)\n\nclass MyHTTPHandler(urllib2.HTTPHandler):\n  def http_open(self,req):\n    return self.do_open(MyHTTPConnection,req)\n\nclass MyHTTPSHandler(urllib2.HTTPSHandler):\n  def https_open(self,req):\n    return self.do_open(MyHTTPSConnection,req)\n\nopener = urllib2.build_opener(MyHTTPHandler,MyHTTPSHandler)\nurllib2.install_opener(opener)\n\nf = urllib2.urlopen('http://news.bbc.co.uk')\ndata = f.read()\nfrom lxml import etree\ndoc = etree.HTML(data)\n\n>>> print doc.xpath('//title/text()')\n['Google']\n"]], ['Tell urllib2 to use custom DNS'], 2], [(2236886, 0), [['urls.py:'], ['myapp/views.py']], [[" (r'^category/(?P<category_id>\\d+)$', 'myapp.views.category_list')\n"]], ['Passing arguments to the generic views Django queryset'], 2], [(2236886, 1), [['myapp/views.py'], ["You can also customise the generic view further, using the parameters mentioned  in the documentation . (You may like to also verify that the category exists, throwing a 404 when it doesn't)"]], [[' from django.views.generic.list_detail import object_list\ndef category_list(request, category_id):\n    queryset = ModelObject.objects.filter(category=category_id)\n    return object_list(request, queryset=queryset)\n']], ['Passing arguments to the generic views Django queryset'], 2], [(2237064, 0), [["Add it as keyword argument, say it's called my_arg. Make sure to  pop()  the keyword arg before calling  super() , because the parent class's init method doesn't accept extra keyword arguments."], ["And when you create form it's like this:"]], [[" class DynamicForm(Form):\n  def __init__(self, *args, **kwargs):\n    my_arg = kwargs.pop('my_arg')\n    super(DynamicForm, self).__init__(*args, **kwargs)\n    for item in range(5):\n        self.fields['test_field_%d' % item] = CharField(max_length=255)\n"]], ['passing arguments to a dynamic form in django'], 2], [(2237064, 1), [["And when you create form it's like this:"], ['-10000']], [[" form = DynamicForm(..., my_arg='value')\n"]], ['passing arguments to a dynamic form in django'], 2], [(2237624, 0), [["In Python 2.6, a  class decorator  is definitely the way to go.  E.g., here's a pretty general one for these kind of tasks:"], ['and now, just']], [[" import inspect\n\ndef decallmethods(decorator, prefix='test_'):\n  def dectheclass(cls):\n    for name, m in inspect.getmembers(cls, inspect.ismethod):\n      if name.startswith(prefix):\n        setattr(cls, name, decorator(m))\n    return cls\n  return dectheclass\n"]], ['Applying python decorators to methods in a class'], 3], [(2237624, 1), [['and now, just'], ["will get you what you desire.  In Python 2.5 or worse, the  @decallmethods  syntax doesn't work for class decoration, but with otherwise exactly the same code you can replace it with the following statement right  after  the end of the  class TestCase  statement:"]], [[' @decallmethods(login_testuser)\nclass TestCase(object):\n    def setUp(self):\n        pass\n\n    def test_1(self):\n        print "test_1()"\n\n    def test_2(self):\n        print "test_2()"\n']], ['Applying python decorators to methods in a class'], 3], [(2237624, 2), [["will get you what you desire.  In Python 2.5 or worse, the  @decallmethods  syntax doesn't work for class decoration, but with otherwise exactly the same code you can replace it with the following statement right  after  the end of the  class TestCase  statement:"], ['-10000']], [[' TestCase = decallmethods(login_testuser)(TestCase)\n']], ['Applying python decorators to methods in a class'], 3], [(2241013, 0), [['Why not just benchmark it?'], ['So on my machine,  hash512  is twice as slow as  sha1 . But as  GregS  said, why would you use secure hash for caching? Try the builtin hash algorithms which should be really fast and tuned:']], [[' >>> def sha1(s):\n...     return hashlib.sha1(s).hexdigest()\n...\n>>> def sha512(s):\n...     return hashlib.sha512(s).hexdigest()\n...\n>>> t1 = timeit.Timer("sha1(\'asdf\' * 100)", "from __main__ import sha1")\n>>> t512 = timeit.Timer("sha512(\'asdf\' * 100)", "from __main__ import sha512")\n>>> t1.timeit()\n3.2463729381561279\n>>> t512.timeit()\n6.5079669952392578\n']], ['Is there a significant overhead by using different versions of sha hashing (hashlib module)'], 5], [(2241013, 1), [['So on my machine,  hash512  is twice as slow as  sha1 . But as  GregS  said, why would you use secure hash for caching? Try the builtin hash algorithms which should be really fast and tuned:'], ["EDIT: \nI'm thinking that you are trying to achieve something like this:"]], [[' >>> s = "asdf"\n>>> hash(s)\n-618826466\n>>> s = "xxx"\n>>> hash(s)\n943435\n>>> hash("xxx")\n943435\n']], ['Is there a significant overhead by using different versions of sha hashing (hashlib module)'], 5], [(2241013, 2), [["EDIT: \nI'm thinking that you are trying to achieve something like this:"], ['What I was refferring to by "use the builtin Python dictinoaries" is that you can simplify the above:']], [[' hash = hashlib.sha1(object_to_cache_as_string).hexdigest()\ncache[hash] = object_to_cache\n']], ['Is there a significant overhead by using different versions of sha hashing (hashlib module)'], 5], [(2241013, 3), [['What I was refferring to by "use the builtin Python dictinoaries" is that you can simplify the above:'], ["Regarding your particular problem, you could refer to  Python hashable dicts  in order to make a dictionary hashable. Then, all you'd need to do to cache the object is:"]], [[' cache[object_to_cache_as_string] = object_to_cache\n']], ['Is there a significant overhead by using different versions of sha hashing (hashlib module)'], 5], [(2241013, 4), [["Regarding your particular problem, you could refer to  Python hashable dicts  in order to make a dictionary hashable. Then, all you'd need to do to cache the object is:"], ['-10000']], [[' cache[object_to_cache] = object_to_cache\n']], ['Is there a significant overhead by using different versions of sha hashing (hashlib module)'], 5], [(2242174, 0), [["Here's a simple XML-RPC client in Python:"], ['Works with this server:']], [[" import xmlrpclib\n\ns = xmlrpclib.ServerProxy('http://localhost:8000')\nprint s.myfunction(2, 4)\n"]], ['How to send a xml-rpc request in python?'], 2], [(2242174, 1), [['Works with this server:'], ['To access the guts of  xmlrpclib , i.e. looking at the raw XML requests and so on, look up the  xmlrpclib.Transport  class in the documentation.']], [[' from SimpleXMLRPCServer import SimpleXMLRPCServer\nfrom SimpleXMLRPCServer import SimpleXMLRPCRequestHandler\n\n# Restrict to a particular path.\nclass RequestHandler(SimpleXMLRPCRequestHandler):\n    rpc_paths = (\'/RPC2\',)\n\n# Create server\nserver = SimpleXMLRPCServer(("localhost", 8000),\n                            requestHandler=RequestHandler)\n\ndef myfunction(x, y):\n    status = 1\n    result = [5, 6, [4, 5]]\n    return (status, result)\nserver.register_function(myfunction)\n\n# Run the server\'s main loop\nserver.serve_forever()\n']], ['How to send a xml-rpc request in python?'], 2], [(2243542, 0), [['Use nlargest from heapq module'], ['You can also give a key to nlargest in case you wanna change your criteria:']], [[' from heapq import nlargest\nlst = [9,1,6,4,2,8,3,7,5]\nnlargest(3, lst) # Gives [9,8,7]\n']], ['how to efficiently get the k bigger elements of a list in python'], 2], [(2243542, 1), [['You can also give a key to nlargest in case you wanna change your criteria:'], ['-10000']], [[' from heapq import nlargest\ntags = [ ("python", 30), ("ruby", 25), ("c++", 50), ("lisp", 20) ]\nnlargest(2, tags, key=lambda e:e[1]) # Gives [ ("c++", 50), ("python", 30) ]\n']], ['how to efficiently get the k bigger elements of a list in python'], 2], [(2245161, 0), [["One way to do this would be with a decorator  (PEP for decorators)   (first of a series of tutorial articles on decorators) . Here's an example that does what you want."], ['This is an example of its use']], [[' from functools import wraps\nfrom time import time\n\ndef timed(f):\n  @wraps(f)\n  def wrapper(*args, **kwds):\n    start = time()\n    result = f(*args, **kwds)\n    elapsed = time() - start\n    print "%s took %d time to finish" % (f.__name__, elapsed)\n    return result\n  return wrapper\n']], ['how to measure execution time of functions (automatically) in Python'], 3], [(2245161, 1), [['This is an example of its use'], ['To show how it works I called the function from the python prompt:']], [[' @timed\ndef somefunction(countto):\n  for i in xrange(countto):\n    pass\n  return "Done"\n']], ['how to measure execution time of functions (automatically) in Python'], 3], [(2245161, 2), [['To show how it works I called the function from the python prompt:'], ['-10000']], [[" >>> timedec.somefunction(10000000)\nsomefunction took 0 time to finish\n'Done'\n>>> timedec.somefunction(100000000)\nsomefunction took 2 time to finish\n'Done'\n>>> timedec.somefunction(1000000000)\nsomefunction took 22 time to finish\n'Done'\n"]], ['how to measure execution time of functions (automatically) in Python'], 3], [(2245761, 0), [['For example'], ['prints']], [[' import yaml\n\nsql = """\nquery         : "SELECT * from cities\nWHERE name=\'Unknown\';"\ncount         : 0\nlevel         : 1\nname          : "Check for cities whose name should be null"\nsuggested_fix : "UPDATE cities SET name=NULL WHERE name=\'Unknown\';"\n"""\n\nsql_dict = yaml.safe_load(sql)\n\nprint(sql_dict[\'query\'])\n']], ['Python: Read configuration file with multiple lines per key'], 2], [(2245761, 1), [['prints'], ['-10000']], [[" SELECT * from cities WHERE name='Unknown';\n"]], ['Python: Read configuration file with multiple lines per key'], 2], [(2247205, 0), [['Here are some examples:'], ['Of course, you can also access single characters in an  unicode  object like you would do in a  str  object (they are both inheriting from  basestring  and therefore have the same methods):']], [[" >>> # creates a str literal (with utf-8 encoding, if this was\n>>> # specified on the beginning of the file):\n>>> len('ë́aúlt') \n9\n>>> # creates a unicode literal (you should generally use this\n>>> # version if you are dealing with special characters):\n>>> len(u'ë́aúlt') \n6\n>>> # the same str literal (written in an encoded notation):\n>>> len('\\xc3\\xab\\xcc\\x81a\\xc3\\xbalt') \n9\n>>> # you can convert any str to an unicode object by decoding() it:\n>>> len('\\xc3\\xab\\xcc\\x81a\\xc3\\xbalt'.decode('utf-8')) \n6\n"]], ['Python returning the wrong length of string when using special characters'], 2], [(2247205, 1), [['Of course, you can also access single characters in an  unicode  object like you would do in a  str  object (they are both inheriting from  basestring  and therefore have the same methods):'], ["If you develop localized applications, it's generally a good idea to use only  unicode -objects internally, by decoding all inputs you get. After the work is done, you can encode the result again as 'UTF-8'. If you keep to this principle, you will never see your server crashing because of any internal  UnicodeDecodeError s you might get otherwise ;)"]], [[" >>> test = u'ë́aúlt'\n>>> print test[0]\në\n"]], ['Python returning the wrong length of string when using special characters'], 2], [(2247600, 0), [["Because  remove  is a method that changes the mutable list object it's called on, and returns  None ."], ['Perhaps you want:']], [[" l= MyWords.upper().split()\nl.remove(SpamWords[SpamCheckRange])\n# l is ['YES']\n"]], ['Python String Method Conundrum'], 2], [(2247600, 1), [['Perhaps you want:'], ['-10000']], [[" >>> [word for word in MyWords.split() if word.upper() not in SpamWords]\n['yes']\n"]], ['Python String Method Conundrum'], 2], [(2249132, 0), [['for example'], ['If you look at the  shutil doc , under .move() it says']], [[' import os,shutil\nroot="/home"\ndestination="/tmp"\ndirectory = os.path.join(root,"mydir")\nos.chdir(directory)\nfor file in os.listdir("."):\n    flag=""\n    #check contents of file ?\n    for line in open(file):\n       if "something" in line:\n           flag="found"\n    if flag=="found":\n       try:\n           # or use os.rename() on local\n           shutil.move(file,destination)\n       except Exception,e: print e\n       else:\n           print "success"\n']], ['How to check contents of a folder using Python'], 2], [(2249132, 1), [['If you look at the  shutil doc , under .move() it says'], ['I guess you can use copy2() to move to another file system.']], [[' shutil.move(src, dst)¶\n\n    Recursively move a file or directory to another location.\n    If the destination is on the current filesystem, then simply use rename. \nOtherwise, copy src (with copy2()) to the dst and then remove src.\n']], ['How to check contents of a folder using Python'], 2], [(2250357, 0), [['-10000'], ['Or you can use fileinput with in place edit']], [[' o=open("output.txt","w")\nfor line in open("file"):\n    s=line.split(",")\n    s[0]="1"\n    o.write(\',\'.join(s))\no.close()\n']], ['Replace a word in a file'], 2], [(2250357, 1), [['Or you can use fileinput with in place edit'], ['-10000']], [[' import fileinput\nfor line in fileinput.FileInput("file",inplace=1):\n    s=line.split(",")\n    s[0]="1"\n    print \',\'.join(s)\n']], ['Replace a word in a file'], 2], [(2250477, 0), [["It's very easy to set up when the predefined URLs list is small and fixed.\nYou just need to populate a ListStore:"], ['Users are not likely to bother typing "http://" or even "www.", so you probably want to match any part of the URL (e.g. just "og" works!):']], [[" # simplified example from the tutorial\nimport gtk\n\nurls = [\n    'http://www.google.com',\n    'http://www.google.com/android',\n    'http://www.greatstuff.com',\n    'http://www.facebook.com',\n    ]\nliststore = gtk.ListStore(str)\nfor s in urls:\n    liststore.append([s])\n\ncompletion = gtk.EntryCompletion()\ncompletion.set_model(liststore)\ncompletion.set_text_column(0)\n\nentry = gtk.Entry()\nentry.set_completion(completion)\n\n# boilerplate\nwindow = gtk.Window()\nwindow.add(entry)\n\nwindow.connect('destroy', lambda w: gtk.main_quit())\nwindow.show_all()\ngtk.main()\n"]], ['Entry with suggestions'], 2], [(2250477, 1), [['Users are not likely to bother typing "http://" or even "www.", so you probably want to match any part of the URL (e.g. just "og" works!):'], ["This will test every value in the ListStore for a match, so it's not scalable to huge lists (I mean  huge ; a 1000 works fine)."]], [[' def match_anywhere(completion, entrystr, iter, data):\n    modelstr = completion.get_model()[iter][0]\n    return entrystr in modelstr\ncompletion.set_match_func(match_anywhere, None)\n']], ['Entry with suggestions'], 2], [(2252620, 0), [['I would say you messed up class definition with function stuff. It should look more like this:'], ['and']], [[" class Test(object):\n\n    def __init__(self):\n        self.a = 20\n        self.b = 30\n\nif __name__ == '__main__':\n    test_instance = Test()\n"]], ['Class Inheritance'], 2], [(2252620, 1), [['and'], ['It looks like your problem is not (only) inheritance, but also  how to correctly  define classes in Python .']], [[" from class1 import Test\n\nclass Test2(Test):\n\n    def e(self):\n        print self.a\n        print self.b\n\n\nif __name__ == '__main__':\n    test_instance = Test2()\n    test_instance.e() # prints 20 and 30\n"]], ['Class Inheritance'], 2], [(2254707, 0), [['Your steps seems fine, but Alias node you need to pass to the AlwaysBuild function:'], ['So the end result would be:']], [[" env.AlwaysBuild(env.Alias('convert_all', pix_conversions))\n"]], ['SCons - convert all images in a directory'], 2], [(2254707, 1), [['So the end result would be:'], ['It will work fine without any scanners. SCons will check MD5 hash of your JPEG files and if some file changed since last conversion then builder will be launched again.']], [[" ConvToPNG = Builder(action = 'convert $SOURCE $TARGET',\n        suffix = '.png',\n        src_suffix = '.jpg')\nenv['BUILDERS']['ConvToPNG'] = ConvToPNG\npix_conversions = [env.ConvToPNG(jpg_src) for jpg_src in Glob('pix/img_*.jpg')]\nenv.AlwaysBuild(env.Alias('convert_all', pix_conversions))\n"]], ['SCons - convert all images in a directory'], 2], [(2255177, 0), [['func(2 5)**'], ['func(2 31)**']], [[' hashlookup:          0.13s     100%\nlookup:              0.15s     109%\nstringcount:         0.29s     220%\nunrolled_bitwise:    0.36s     272%\nlog_e:               0.60s     450%\nbitcounter:          0.64s     479%\nlog_2:               0.69s     515%\nilog:                0.81s     609%\nbitwise:             1.10s     821%\nolgn:                1.42s    1065%\n']], ['Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]'], 5], [(2255177, 1), [['func(2 31)**'], ['func(2 128)**']], [[' hashlookup:          0.11s     100%\nunrolled_bitwise:    0.26s     229%\nlog_e:               0.30s     268%\nstringcount:         0.30s     270%\nlog_2:               0.34s     301%\nilog:                0.41s     363%\nbitwise:             0.87s     778%\nolgn:                1.02s     912%\nbitcounter:          1.42s    1264%\n']], ['Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]'], 5], [(2255177, 2), [['func(2 128)**'], ['func(2 1024)**']], [[' hashlookup:     0.01s     100%\nstringcount:    0.03s     264%\nlog_e:          0.04s     315%\nlog_2:          0.04s     383%\nolgn:           0.18s    1585%\nbitcounter:     1.41s   12393%\n']], ['Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]'], 5], [(2255177, 3), [['func(2 1024)**'], ['-10000']], [[' log_e:          0.00s     100%\nlog_2:          0.01s     118%\nstringcount:    0.02s     354%\nolgn:           0.03s     707%\nbitcounter:     1.73s   37695%\n']], ['Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]'], 5], [(2255177, 4), [['-10000'], ['-10000']], [[' import math, sys\n\ndef stringcount(v):\n    """mac"""    \n    return len(bin(v)) - 3\n\ndef log_2(v):\n    """mac"""    \n    return int(round(math.log(v, 2), 0)) # 2**101 generates 100.999999999\n\ndef log_e(v):\n    """bp on mac"""    \n    return int(round(math.log(v)/0.69314718055994529, 0))  # 0.69 == log(2)\n\ndef bitcounter(v):\n    """John Y on mac"""\n    r = 0\n    while v > 1 :\n        v >>= 1\n        r += 1\n    return r\n\ndef olgn(n) :\n    """outis"""\n    if n < 1:\n        return -1\n    low = 0\n    high = sys.getsizeof(n)*8 # not the best upper-bound guesstimate, but...\n    while True:\n        mid = (low+high)//2\n        i = n >> mid\n        if i == 1:\n            return mid\n        if i == 0:\n            high = mid-1\n        else:\n            low = mid+1\n\ndef hashlookup(v):\n    """mac on brone -- limit: v < 2**131"""\n#    def prepareTable(max_log2=130) :\n#        hash_table = {}\n#        for p in range(1, max_log2) :\n#            hash_table[2**p] = p\n#        return hash_table\n\n    global hash_table\n    return hash_table[v] \n\ndef lookup(v):\n    """brone -- limit: v < 2**11"""\n#    def prepareTable(max_log2=10) :\n#        log2s_table=[0]*((1<<max_log2)+1)\n#        for i in range(max_log2+1):\n#            log2s_table[1<<i]=i\n#        return tuple(log2s_table)\n\n    global log2s_table\n    return log2s_table[v]\n\ndef bitwise(v):\n    """Mark Byers -- limit: v < 2**32"""\n    b = (0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000)\n    S = (1, 2, 4, 8, 16)\n    r = 0\n    for i in range(4, -1, -1) :\n        if (v & b[i]) :\n            v >>= S[i];\n            r |= S[i];\n    return r\n\ndef unrolled_bitwise(v):\n    """x4u on Mark Byers -- limit:   v < 2**33"""\n    r = 0;\n    if v > 0xffff : \n        v >>= 16\n        r = 16;\n    if v > 0x00ff :\n        v >>=  8\n        r += 8;\n    if v > 0x000f :\n        v >>=  4\n        r += 4;\n    if v > 0x0003 : \n        v >>=  2\n        r += 2;\n    return r + (v >> 1)\n\ndef ilog(v):\n    """Gregory Maxwell - (Original code: B. Terriberry) -- limit: v < 2**32"""\n    ret = 1\n    m = (not not v & 0xFFFF0000) << 4;\n    v >>= m;\n    ret |= m;\n    m = (not not v & 0xFF00) << 3;\n    v >>= m;\n    ret |= m;\n    m = (not not v & 0xF0) << 2;\n    v >>= m;\n    ret |= m;\n    m = (not not v & 0xC) << 1;\n    v >>= m;\n    ret |= m;\n    ret += (not not v & 0x2);\n    return ret - 1;\n\n\n# following table is equal to "return hashlookup.prepareTable()" \nhash_table = {...} # numbers have been cut out to avoid cluttering the post\n\n# following table is equal to "return lookup.prepareTable()" - cached for speed\nlog2s_table = (...) # numbers have been cut out to avoid cluttering the post\n']], ['Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]'], 5], [(2255488, 0), [['Add a property to your  Event  class e.g.:'], ['The you can do in your template:']], [[' class Event:\n  # stuff here\n\n  @property\n  def status(self):\n     # do the same thing here as in your status function\n     return status\n']], ['Extra data about objects in django templates'], 2], [(2255488, 1), [['The you can do in your template:'], ['-10000']], [[' {{ event.status }}\n']], ['Extra data about objects in django templates'], 2], [(2255837, 0), [["If you really want to do the query in the manner you are requesting, then you could construct such a clause.  Here's an example using part of your data."], ['If you do have artists and ranking tables, you should be able to do something like this (or the equivalent through your ORM).']], [[" create table artists (\nid integer not null primary key,\nname char(1) not null);\n\ninsert into artists\nvalues\n    (8, 'a'),\n    (1, 'b'), \n    (2, 'c'),\n    (15, 'd'),\n    (14, 'e'),\n    (3,  'f'),\n    (13, 'g');\n\nselect *\nfrom artists\nwhere id in (8, 1, 2, 15, 14, 3, 13)\norder by\n    id = 8 desc,\n    id = 1 desc,\n    id = 2 desc,\n    id = 15 desc,\n    id = 14 desc,\n    id = 3 desc,\n    id = 13 desc;\n"]], ['Making PostgreSQL respect the order of the inputted parameters?'], 2], [(2255837, 1), [['If you do have artists and ranking tables, you should be able to do something like this (or the equivalent through your ORM).'], ['-10000']], [[' select\n    a.*\nfrom\n    artists a,\n    rankings r\nwhere\n    a.id = r.artist_id\norder by\n    r.score desc;\n']], ['Making PostgreSQL respect the order of the inputted parameters?'], 2], [(2257101, 0), [["You shouldn't call you variables dict and list, because then, you cant use the build-in methods any more. I have renamed them in this example."], ['But you can create a new list containing the (key, value)-tuples from the dictionary, which is sorted by the first list:']], [[" >>> l = [1, 2, 37, 32, 4]\n>>> d = dict = {\n...     32: 'Megumi', \n...     1: 'Ai',\n...     2: 'Risa',\n...     3: 'Eri', \n...     4: 'Sayumi', \n...     37: 'Mai'\n... }\n"]], ['Sorting dictionary keys by values in a list?'], 3], [(2257101, 1), [['But you can create a new list containing the (key, value)-tuples from the dictionary, which is sorted by the first list:'], ['Or if you are only interested in the values:']], [[" >>> s = list((i, d.get(i)) for i in L)\n>>> print s\n[(1, 'Ai'), (2, 'Risa'), (37, 'Mai'), (32, 'Megumi'), (4, 'Sayumi')]\n"]], ['Sorting dictionary keys by values in a list?'], 3], [(2257101, 2), [['Or if you are only interested in the values:'], ['Hope that helps!']], [[" >>> s = list(d.get(i) for i in L)\n>>> print s\n['Ai', 'Risa', 'Mai', 'Megumi', 'Sayumi']\n"]], ['Sorting dictionary keys by values in a list?'], 3], [(2257441, 0), [['Answer in one line:'], ['or even shorter starting with Python 3.6 using  random.choices() :']], [[" ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n"]], ['Random string generation with upper case letters and digits in Python'], 9], [(2257441, 1), [['or even shorter starting with Python 3.6 using  random.choices() :'], ['A cryptographically more secure version; see  https://stackoverflow.com/a/23728630/2213647 :']], [[" ''.join(random.choices(string.ascii_uppercase + string.digits, k=N))\n"]], ['Random string generation with upper case letters and digits in Python'], 9], [(2257441, 2), [['A cryptographically more secure version; see  https://stackoverflow.com/a/23728630/2213647 :'], ['In details, with a clean function for further reuse:']], [[" ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\n"]], ['Random string generation with upper case letters and digits in Python'], 9], [(2257441, 3), [['In details, with a clean function for further reuse:'], ['string.ascii_uppercase + string.digits  just concatenates the list of characters representing uppercase ASCII chars and digits:']], [[' >>> import string\n>>> import random\n>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):\n...    return \'\'.join(random.choice(chars) for _ in range(size))\n...\n>>> id_generator()\n\'G5G74W\'\n>>> id_generator(3, "6793YUIO")\n\'Y3U\'\n']], ['Random string generation with upper case letters and digits in Python'], 9], [(2257441, 4), [['string.ascii_uppercase + string.digits  just concatenates the list of characters representing uppercase ASCII chars and digits:'], ["Then we use a list comprehension to create a list of 'n' elements:"]], [[" >>> string.ascii_uppercase\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n>>> string.digits\n'0123456789'\n>>> string.ascii_uppercase + string.digits\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n"]], ['Random string generation with upper case letters and digits in Python'], 9], [(2257441, 5), [["Then we use a list comprehension to create a list of 'n' elements:"], ["Instead of asking to create 'n' times the string  elem , we will ask Python to create 'n' times a random character, picked from a sequence of characters:"]], [[" >>> range(4) # range create a list of 'n' numbers\n[0, 1, 2, 3]\n>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'\n['elem', 'elem', 'elem', 'elem']\n"]], ['Random string generation with upper case letters and digits in Python'], 9], [(2257441, 6), [["Instead of asking to create 'n' times the string  elem , we will ask Python to create 'n' times a random character, picked from a sequence of characters:"], ['Therefore  random.choice(chars) for _ in range(size)  really is creating a sequence of  size  characters. Characters that are randomly picked from  chars :']], [[' >>> random.choice("abcde")\n\'a\'\n>>> random.choice("abcde")\n\'d\'\n>>> random.choice("abcde")\n\'b\'\n']], ['Random string generation with upper case letters and digits in Python'], 9], [(2257441, 7), [['Therefore  random.choice(chars) for _ in range(size)  really is creating a sequence of  size  characters. Characters that are randomly picked from  chars :'], ['Then we just join them with an empty string so the sequence becomes a string:']], [[" >>> [random.choice('abcde') for _ in range(3)]\n['a', 'b', 'b']\n>>> [random.choice('abcde') for _ in range(3)]\n['e', 'b', 'e']\n>>> [random.choice('abcde') for _ in range(3)]\n['d', 'a', 'c']\n"]], ['Random string generation with upper case letters and digits in Python'], 9], [(2257441, 8), [['Then we just join them with an empty string so the sequence becomes a string:'], ['-10000']], [[" >>> ''.join(['a', 'b', 'b'])\n'abb'\n>>> [random.choice('abcde') for _ in range(3)]\n['d', 'c', 'b']\n>>> ''.join(random.choice('abcde') for _ in range(3))\n'dac'\n"]], ['Random string generation with upper case letters and digits in Python'], 9], [(2257799, 0), [['I think you want something like this:'], ["EDIT:  As LeafStorm suggested, a dictionary's  get  function can be used to simplify the above code. The code line in the loop would become"]], [[' tokenMapping = {"&&" : "and"}\n\nfor token in source file: # <-- pseudocode\n    translatedToken = tokenMapping[token] if token in tokenMapping else "transliteration unknown"\n']], ['Python - to check if a char is in dictionary and if not to deal with it'], 2], [(2257799, 1), [["EDIT:  As LeafStorm suggested, a dictionary's  get  function can be used to simplify the above code. The code line in the loop would become"], ['-10000']], [['     translatedToken = tokenMapping.get(token, "transliteration unknown")\n']], ['Python - to check if a char is in dictionary and if not to deal with it'], 2], [(2258696, 0), [['If you really want to do what you described, I suggest you use tags to delimit sections within docstrings.  Like so:'], ['Then you can pretty easily split your string into chunks, and when the user chooses a menu item, show just the appropriate chunks.']], [[' def foo(bar, baz):\n    """Function foo()\n\n* Summary:\n    Function foo() handles all your foo-ish needs.  You pass in a bar and a baz and it foos them.\n\n* Developers:\n    When you change foo(), be sure you don\'t add any global variables, and don\'t forget to run the unit tests.\n\n* Testers:\n    When you test foo, be sure to try negative values for baz.\n"""\n    pass # code would go here\n']], ['More than 1 docstrings for a single module/function etc.?'], 4], [(2258696, 1), [['Then you can pretty easily split your string into chunks, and when the user chooses a menu item, show just the appropriate chunks.'], ['doc_developers = {}\ndoc_testers = {}']], [[' s = foo.__doc__  # s now refers to the docstring\n\nlst = s.split("\\n* ")\nsection = [section for section in lst if section.startswith("Developers")][0]\nprint(section) # prints the "Developers" section\n']], ['More than 1 docstrings for a single module/function etc.?'], 4], [(2258696, 2), [['doc_developers = {}\ndoc_testers = {}'], ["The biggest thing I don't like about this is that, if you change the name of function foo, you would need to change it in multiple places: once in the actual  def  and once per dictionary update line.  But you could mostly fix that by writing a function:"]], [[' def foo(bar, baz):\n    """Function foo()\n\nFunction foo() handles all your foo-ish needs.  You pass in a bar and a baz and it foos them."\n    pass # code goes here\n\ndoc_developers["foo"] = "When you change foo(), be sure you don\'t add any global variables, and don\'t forget to run the unit tests."\n\ndoc_testers["foo"] = "When you change foo(), be sure you don\'t add any global variables, and don\'t forget to run the unit tests."\n']], ['More than 1 docstrings for a single module/function etc.?'], 4], [(2258696, 3), [["The biggest thing I don't like about this is that, if you change the name of function foo, you would need to change it in multiple places: once in the actual  def  and once per dictionary update line.  But you could mostly fix that by writing a function:"], ["There is probably a way to turn doc_update() into a decorator, but I'm out of time right now."]], [[' def doc_dict = {} # this will be a dict of dicts\ndoc_dict["developers"] = {}\ndoc_dict["testers"] = {}\n\ndef doc_update(fn, d):\n    name = fn.__name__\n    for key, value in d.items():\n        doc_dict[key][name] = value\n\ndef foo(bar, baz):\n    """Function foo()\n\nFunction foo() handles all your foo-ish needs.  You pass in a bar and a baz and it foos them."\n    pass # code goes here\n\nd = { "developers": "When you change foo(), be sure you don\'t add any global variables, and don\'t forget to run the unit tests.",\n"testers": " When you test foo, be sure to try negative values for baz."}\n\ndoc_update(foo, d)\n']], ['More than 1 docstrings for a single module/function etc.?'], 4], [(2259379, 0), [['net present value of cashflow'], ['get internal rate or return']], [[' >>> cashflow = 2*np.ones(6)\n>>> cashflow[-1] +=100\n>>> cashflow\narray([   2.,    2.,    2.,    2.,    2.,  102.])\n>>> np.npv(0.01, cashflow)\n105.79547647457932\n']], ['Basic Financial Library for Python'], 3], [(2259379, 1), [['get internal rate or return'], ['just the basics:']], [[' >>> n = np.npv(0.01, cashflow)\n>>> np.irr(np.r_[-n, cashflow])\n0.010000000000000231\n']], ['Basic Financial Library for Python'], 3], [(2259379, 2), [['just the basics:'], ["and it's necessary to watch out what the timing is. "]], [[" >>> [f for f in dir(np.lib.financial) if not f[0] == '_']\n['fv', 'ipmt', 'irr', 'mirr', 'np', 'nper', 'npv', 'pmt', 'ppmt', 'pv', 'rate']\n"]], ['Basic Financial Library for Python'], 3], [(2259427, 0), [["Let's say your config file is bar.py and looks like this:"], ['Then your code should look like this:']], [[' x = 3\ny = 4\ndef f(x): return (x<4)\n']], ['load python code at runtime'], 3], [(2259427, 1), [['Then your code should look like this:'], ['I get this output:']], [[" import sys\n\n# somehow modnames should be a list of strings that are the names of config files\n#\n# you can do this more dynamically depending on what you're doing                                                                                                     \nmodnames = ['bar']\n\nfor modname in modnames:\n  exec('import %s' % modname)\n\nfor modname in modnames:\n  mod = sys.modules[modname]\n  for k in mod.__dict__:\n    if k[:2] != '__':\n      print modname, k, mod.__dict__[k]\n"]], ['load python code at runtime'], 3], [(2259427, 2), [['I get this output:'], ["Then you at least have all the variables and functions. I didn't quite get what you wanted from the predicate functions, but maybe you can get that on your own now."]], [[' bar f <function f at 0x7f2354eb4cf8>\nbar x 3\nbar y 4\n']], ['load python code at runtime'], 3], [(2262333, 0), [['This is a pretty regular scenario so I\'ve written an "ignore_exception" decorator that works for all kinds of functions which throw exceptions instead of failing gracefully:'], ['Usage in your case:']], [[' def ignore_exception(IgnoreException=Exception,DefaultVal=None):\n    """ Decorator for ignoring exception from a function\n    e.g.   @ignore_exception(DivideByZero)\n    e.g.2. ignore_exception(DivideByZero)(Divide)(2/0)\n    """\n    def dec(function):\n        def _dec(*args, **kwargs):\n            try:\n                return function(*args, **kwargs)\n            except IgnoreException:\n                return DefaultVal\n        return _dec\n    return dec\n']], ['Is there a built-in or more Pythonic way to try to parse a string to an integer'], 2], [(2262333, 1), [['Usage in your case:'], ['-10000']], [[' sint = ignore_exception(ValueError)(int)\nprint sint("Hello World") # prints none\nprint sint("1340") # prints 1340\n']], ['Is there a built-in or more Pythonic way to try to parse a string to an integer'], 2], [(2263258, 0), [['E.g.'], ['In your  settings.py :']], [[" # in project/app/context_processors.py\nfrom app.models import Product\n\ndef top_products(request):\n    return {'top_products': Products.objects.all()} # of course some filter here\n"]], ['How can I send data to a base template in Django?'], 3], [(2263258, 1), [['In your  settings.py :'], ['And in your template:']], [[" TEMPLATE_CONTEXT_PROCESSORS = (\n    # maybe other here\n    'app.context_processors.top_products',\n)\n"]], ['How can I send data to a base template in Django?'], 3], [(2263258, 2), [['And in your template:'], ['-10000']], [[' {% for product in top_products %}\n    ...\n']], ['How can I send data to a base template in Django?'], 3], [(2264130, 0), [['Edit : forgot to remind you how to format a byte into a text string made up of  0  and  1  characters -- in Python 2.6 or better:'], ['and to get back from such a string to a byte, of course:']], [[" >>> format(23, '08b')\n'00010111'\n"]], ['how to work with strings and integers as bit strings in python?'], 2], [(2264130, 1), [['and to get back from such a string to a byte, of course:'], ['-10000']], [[" >>> int('00010111', 2)\n23\n"]], ['how to work with strings and integers as bit strings in python?'], 2], [(2264504, 0), [['This is what Python generators are all about.'], ['You can use this like a standard Python iterator']], [[' def read_as_flat( someFile ):\n    line_iter= iter(someFile)\n    time_header= None\n    for line in line_iter:\n        words = line.split()\n        if words[0] == \'time\':\n            time_header = [ words[1:] ] # the "time" line\n            description= line_iter.next()\n            time_header.append( description )\n        elif words[0] in subjectNameSet:\n            data = line_iter.next()\n            yield time_header + data\n']], ['processing text from a non-flat file (to extract information as if it *were* a flat file)'], 2], [(2264504, 1), [['You can use this like a standard Python iterator'], ['-10000']], [[' for time, description, var1, var2, var3 in read_as_flat( someFile ):\n    etc.\n']], ['processing text from a non-flat file (to extract information as if it *were* a flat file)'], 2], [(2265928, 0), [["Let's assume for this answer, your class that needs to be persisted across a user session is called  UserInfo . The first thing is to make sure it is marked as Serializable, so that it can be stored in Session:"], ["From code-behind or classes within the ASP.NET application's App_Code folder, you can call session directly:"]], [[' /// <summary>\n/// My custom class stored per user in Session. Marked as Serializable.\n/// </summary>\n[Serializable()]\npublic class UserInfo\n{\n    public string SimpleProperty\n    { get; set;}\n}\n']], ['when a class is instantiated, storing that instance by user'], 6], [(2265928, 1), [["From code-behind or classes within the ASP.NET application's App_Code folder, you can call session directly:"], ['If in a class library / external assembly that is part of the application, referenced by the ASP.NET website /application, you can access session via  HttpContext.Current.Session . Your code otherwise would be very similar:']], [[' //creating the user info as needed:\nUserInfo currentUserInfo = new UserInfo();\n\n//storing the user info instance:    \nSession["UserInfo"] = currentUserInfo;\n\n//getting the user info as needed:\nUserInfo currentUserInfo = (UserInfo)Session["UserInfo"];\n']], ['when a class is instantiated, storing that instance by user'], 6], [(2265928, 2), [['If in a class library / external assembly that is part of the application, referenced by the ASP.NET website /application, you can access session via  HttpContext.Current.Session . Your code otherwise would be very similar:'], ['One last suggestion - you could even create a static utility/helper class which would access this information as needed, so that your code would not continually have to deal with the Session object. Quick example:']], [[' //creating the user info as needed:\nUserInfo currentUserInfo = new UserInfo();\n\n//storing the user info:    \nHttpContext.Current.Session["UserInfo"] = currentUserInfo;\n\n//getting the user info as needed:\nUserInfo currentUserInfo = (UserInfo)HttpContext.Current.Session["UserInfo"];\n']], ['when a class is instantiated, storing that instance by user'], 6], [(2265928, 3), [['One last suggestion - you could even create a static utility/helper class which would access this information as needed, so that your code would not continually have to deal with the Session object. Quick example:'], ['One further suggestion. In our applications when we have to store a class instance per user like you do, we create a base  Page  class, which allows direct access to the class instance via a property. This may also help you keep things well refined:']], [[' public static class UserInfoManager\n{\n    /// <summary>\n    /// Gets or sets the session-scoped user info when needed.\n    /// </summary>\n    public static UserInfo UserInformation\n    {\n        get\n        {\n            if(HttpContext.Current != null)\n                return (UserInfo)HttpContext.Current.Session["UserInfo"];\n\n            return null;\n        }\n        set\n        {\n            HttpContext.Current.Session["UserInfo"] = value;\n        }\n    }\n}\n']], ['when a class is instantiated, storing that instance by user'], 6], [(2265928, 4), [['One further suggestion. In our applications when we have to store a class instance per user like you do, we create a base  Page  class, which allows direct access to the class instance via a property. This may also help you keep things well refined:'], ['Then in each code-behind in the asp.net website or web application:']], [[' /// <summary>\n/// Base page class, which all pages in our site will inherit from\n/// </summary>\npublic class MyBasePage : System.Web.UI.Page\n{\n    /// <summary>\n    /// Gets or sets the session-scoped user info when needed.\n    /// </summary>\n    protected UserInfo UserInformation\n    {\n        get\n        {\n            if(HttpContext.Current != null)\n                return (UserInfo)HttpContext.Current.Session["UserInfo"];\n\n            return null;\n        }\n        set\n        {\n            HttpContext.Current.Session["UserInfo"] = value;\n        }\n    }\n}\n']], ['when a class is instantiated, storing that instance by user'], 6], [(2265928, 5), [['Then in each code-behind in the asp.net website or web application:'], ['As you can see, very little code is needed now to be able to access the class instance.']], [[' /// <summary>\n/// Code-behind class for a page in my site\n/// </summary>\npublic partial class SomePage : MyBasePage \n{\n    public void Page_Load(object sender, EventArgs e)\n    {\n        //access the user info as needed\n        this.UserInformation.SimplyProperty = "something";\n    }\n}\n']], ['when a class is instantiated, storing that instance by user'], 6], [(2266530, 0), [["In your templates/standard/bishop/browse.html template you're doing the following:"], ["You might be able to get away with what you're trying to do by creating your own template loader, otherwise simply specify the actual path to base.html:"]], [[' {% extends "base.html" %}\n']], ['Django Loading Templates with Inheritance from Specific Directory'], 2], [(2266530, 1), [["You might be able to get away with what you're trying to do by creating your own template loader, otherwise simply specify the actual path to base.html:"], ['-10000']], [[' {% extends "standard/bishop/base.html" %}\n']], ['Django Loading Templates with Inheritance from Specific Directory'], 2], [(2268417, 0), [["Here's a solution I wrote to do just what you're talking about on some of my own projects:"], ["To use it in the way you're talking about, try something like:"]], [[' def expire_view_cache(view_name, args=[], namespace=None, key_prefix=None):\n    """\n    This function allows you to invalidate any view-level cache. \n        view_name: view function you wish to invalidate or it\'s named url pattern\n        args: any arguments passed to the view function\n        namepace: optioal, if an application namespace is needed\n        key prefix: for the @cache_page decorator for the function (if any)\n    """\n    from django.core.urlresolvers import reverse\n    from django.http import HttpRequest\n    from django.utils.cache import get_cache_key\n    from django.core.cache import cache\n    # create a fake request object\n    request = HttpRequest()\n    # Loookup the request path:\n    if namespace:\n        view_name = namespace + ":" + view_name\n    request.path = reverse(view_name, args=args)\n    # get cache key, expire if the cached item exists:\n    key = get_cache_key(request, key_prefix=key_prefix)\n    if key:\n        if cache.get(key):\n            # Delete the cache entry.  \n            #\n            # Note that there is a possible race condition here, as another \n            # process / thread may have refreshed the cache between\n            # the call to cache.get() above, and the cache.set(key, None) \n            # below.  This may lead to unexpected performance problems under \n            # severe load.\n            cache.set(key, None, 0)\n        return True\n    return False\n']], ['Expire a view-cache in Django?'], 2], [(2268417, 1), [["To use it in the way you're talking about, try something like:"], ["So basically, when ever a blog Entry object is saved, invalidate_blog_index is called and the cached view is expired. NB: haven't tested this extensively, but it's worked fine for me so far. "]], [[' from django.db.models.signals import post_save\nfrom blog.models import Entry\n\ndef invalidate_blog_index(sender, **kwargs):\n    expire_view_cache("blog")\n\npost_save.connect(invalidate_portfolio_index, sender=Entry)\n']], ['Expire a view-cache in Django?'], 2], [(2268532, 0), [['-10000'], ["As there are down votes probably questioning the efficiency of regex, I've done some profiling to check the efficiency of each cases."]], [[' import re\ns = "\\t\\tthis line has two tabs of indention"\nre.match(r"\\s*", s).group()\n// "\\t\\t"\ns = "    this line has four spaces of indention"\nre.match(r"\\s*", s).group()\n// "    "\n']], ["Grab a line's whitespace/indention with Python"], 5], [(2268532, 1), [["As there are down votes probably questioning the efficiency of regex, I've done some profiling to check the efficiency of each cases."], ['-10000']], [[' >>> timeit.timeit(\'r.match(s).group()\', \'import re;r=re.compile(r"\\s*")s="          hello world!"*10000\', number=100000)\n0.10037684440612793\n>>> timeit.timeit(\'"".join(itertools.takewhile(lambda x:x.isspace(),s))\', \'import itertools;s="          hello world!"*10000\', number=100000)\n0.7092740535736084\n>>> timeit.timeit(\'"".join(itertools.takewhile(str.isspace,s))\', \'import itertools;s="          hello world!"*10000\', number=100000)\n0.51730513572692871\n>>> timeit.timeit(\'s[:-len(s.lstrip())]\', \'s="          hello world!"*10000\', number=100000)\n2.6478431224822998\n']], ["Grab a line's whitespace/indention with Python"], 5], [(2268532, 2), [['-10000'], ['This shows the lstrip trick scales roughly as O(√n) and the RegEx and itertool methods are O(1) if the number of leading spaces is not a lot.']], [[' >>> timeit.timeit(\'r.match(s).group()\', \'import re;r=re.compile(r"\\s*");s="          hello world!"*100\', number=100000)\n0.099548101425170898\n>>> timeit.timeit(\'"".join(itertools.takewhile(str.isspace,s))\', \'import itertools;s="          hello world!"*100\', number=100000)\n0.53602385520935059\n>>> timeit.timeit(\'s[:-len(s.lstrip())]\', \'s="          hello world!"*100\', number=100000)\n0.064291000366210938\n']], ["Grab a line's whitespace/indention with Python"], 5], [(2268532, 3), [['This shows the lstrip trick scales roughly as O(√n) and the RegEx and itertool methods are O(1) if the number of leading spaces is not a lot.'], ['-10000']], [[' >>> timeit.timeit(\'s[:-len(s.lstrip())]\', \'s=" "*2000\', number=10000)\n0.047424077987670898\n>>> timeit.timeit(\'r.match(s).group()\', \'import re;r=re.compile(r"\\s*");s=" "*2000\', number=10000)\n0.2433168888092041\n>>> timeit.timeit(\'"".join(itertools.takewhile(str.isspace,s))\', \'import itertools;s=" "*2000\', number=10000)\n3.9949162006378174\n']], ["Grab a line's whitespace/indention with Python"], 5], [(2268532, 4), [['-10000'], ['This shows all methods scales roughly as O(m) if the non-space part is not a lot.']], [[' >>> timeit.timeit(\'s[:-len(s.lstrip())]\', \'s=" "*200000\', number=10000)\n4.2374031543731689\n>>> timeit.timeit(\'r.match(s).group()\', \'import re;r=re.compile(r"\\s*");s=" "*200000\', number=10000)\n23.877214908599854\n>>> timeit.timeit(\'"".join(itertools.takewhile(str.isspace,s))\', \'import itertools;s=" "*200000\', number=100)*100\n415.72158336639404\n']], ["Grab a line's whitespace/indention with Python"], 5], [(2270345, 0), [["Here's the code, in case those 2006 archives vanish sometime:"], ['Ok - back near a windows box.  Have actually tried this code now.  "Works for me".']], [[' import array\nfrom ctypes import *\n\ndef get_file_info(filename, info):\n    """\n    Extract information from a file.\n    """\n    # Get size needed for buffer (0 if no info)\n    size = windll.version.GetFileVersionInfoSizeA(filename, None)\n    # If no info in file -> empty string\n    if not size:\n        return \'\'\n    # Create buffer\n    res = create_string_buffer(size)\n    # Load file informations into buffer res\n    windll.version.GetFileVersionInfoA(filename, None, size, res)\n    r = c_uint()\n    l = c_uint()\n    # Look for codepages\n    windll.version.VerQueryValueA(res, \'\\\\VarFileInfo\\\\Translation\',\n                                  byref(r), byref(l))\n    # If no codepage -> empty string\n    if not l.value:\n        return \'\'\n    # Take the first codepage (what else ?)\n    codepages = array.array(\'H\', string_at(r.value, l.value))\n    codepage = tuple(codepages[:2].tolist())\n    # Extract information\n    windll.version.VerQueryValueA(res, (\'\\\\StringFileInfo\\\\%04x%04x\\\\\'\n+ info) % codepage, byref(r), byref(l))\n    return string_at(r.value, l.value)\n\nprint get_file_info(r\'C:\\WINDOWS\\system32\\calc.exe\', \'FileVersion\')\n']], ['Finding the version of an application from Python?'], 2], [(2270345, 1), [['Ok - back near a windows box.  Have actually tried this code now.  "Works for me".'], ['-10000']], [[" >>> print get_file_info(r'C:\\WINDOWS\\system32\\calc.exe', 'FileVersion')\n6.1.7600.16385 (win7_rtm.090713-1255)\n"]], ['Finding the version of an application from Python?'], 2], [(2270634, 0), [['Perhaps something like'], ['or you can put tags around the word like this']], [[' \\b__(\\S+)__\\b\n\n>>> import re\n>>> re.findall(r"\\b__(\\S+)__\\b","Here __is__ a __test__ sentence")\n[\'is\', \'test\']    \n>>> re.findall(r"\\b__(\\S+)__\\b","__Here__ is a test __sentence__")\n[\'Here\', \'sentence\']\n>>> re.findall(r"\\b__(\\S+)__\\b","__Here\'s__ a test __sentence__")\n["Here\'s", \'sentence\']\n']], ['Create a Reg Exp to search for __word__?'], 3], [(2270634, 1), [['or you can put tags around the word like this'], ["If you need more fine grained control over the legal word characters it's best to be explicit"]], [[' >>> print re.sub(r"\\b(__)(\\S+)(__)\\b",r"<b>\\2<\\\\b>","__Here__ is a test __sentence__")\n<b>Here<\\b> is a test <b>sentence<\\b>\n']], ['Create a Reg Exp to search for __word__?'], 3], [(2270634, 2), [["If you need more fine grained control over the legal word characters it's best to be explicit"], ['-10000']], [[' \\b__([a-zA-Z0-9_\':])__\\b  ### count "\'" and ":" as part of words\n\n>>> re.findall(r"\\b__([a-zA-Z0-9_\']+)__\\b","__Here\'s__ a test __sentence:__")\n["Here\'s"]\n>>> re.findall(r"\\b__([a-zA-Z0-9_\':]+)__\\b","__Here\'s__ a test __sentence:__")\n["Here\'s", \'sentence:\']\n']], ['Create a Reg Exp to search for __word__?'], 3], [(2273462, 0), [['-10000'], ['Output:']], [[" #! /usr/bin/env python\n\nimport re\nfrom collections import deque\n\npattern = r'([A-Z]{2,}(?=[A-Z]|$)|[A-Z](?=[a-z]|$))'\nchunks = deque(re.split(pattern, 'HDMWhoSomeMONKEYThingXYZ'))\n\nresult = []\nwhile len(chunks):\n  buf = chunks.popleft()\n  if len(buf) == 0:\n    continue\n  if re.match(r'^[A-Z]$', buf) and len(chunks):\n    buf += chunks.popleft()\n  result.append(buf)\n\nprint ' '.join(result)\n"]], ['Regex divide with upper-case'], 2], [(2273462, 1), [['Output:'], ['Output:']], [[" pattern = r'([A-Z]{2,}(?=[A-Z]|$)|[A-Z][a-z]*)'\nprint ' '.join(re.findall(pattern, 'HDMWhoSomeMONKEYThingX'))\n"]], ['Regex divide with upper-case'], 2], [(2273463, 0), [["I've created a  test_data.json  file with the data in the following format:"], ['and then add to the test unit']], [[' [\n{\n    "model": "stats_agg.newevent",\n    "pk": 1,\n    "fields": {\n        "name": "event1",\n        "quantity":0.0,\n        "timestamp": "2010-02-15 00:27:40"\n     }\n},\n{\n    "model": "stats_agg.newevent",\n    "pk": 2,\n    "fields": {\n        "name": "event1",\n        "quantity":1.0,\n        "timestamp": "2010-02-15 00:27:40"\n     }\n},\n...\n']], ['Overwrite auto_now for unittest'], 2], [(2273463, 1), [['and then add to the test unit'], ['-10000']], [[" class SimpleTest(TestCase):\n   fixtures = ['test_data.json']\n"]], ['Overwrite auto_now for unittest'], 2], [(2273691, 0), [['collections.defaultdict  makes this pretty simple:'], ['Output:']], [[" from collections import defaultdict\nimport pprint\n\ndata = {\n 'Bob' : {'item1':3, 'item2':8, 'item3':6},\n 'Jim' : {'item1':6, 'item4':7},\n 'Amy' : {'item1':6,'item2':5,'item3':9,'item4':2}\n}\n\nflipped = defaultdict(dict)\nfor key, val in data.items():\n    for subkey, subval in val.items():\n        flipped[subkey][key] = subval\n\npprint.pprint(dict(flipped))\n"]], ['Pythonic Way to reverse nested dictionaries'], 2], [(2273691, 1), [['Output:'], ['-10000']], [[" {'item1': {'Amy': 6, 'Bob': 3, 'Jim': 6},\n 'item2': {'Amy': 5, 'Bob': 8},\n 'item3': {'Amy': 9, 'Bob': 6},\n 'item4': {'Amy': 2, 'Jim': 7}}\n"]], ['Pythonic Way to reverse nested dictionaries'], 2], [(2275016, 0), [["You need to use views. You can create views (keep reading the official django documentation), then import them into your urls.py file and use them. Here's an example:"], ['-10000']], [['views.py from django.shortcuts import render_to_response\n\ndef index(request):\n   """\n   Main page.\n   """\n   return render_to_response(\'index.html\') # display index.html\n']], ['Where to put Python files to be redirected to by urls.py in Django?'], 2], [(2275016, 1), [['-10000'], ['This example will display your index.html page whenever you visit the root of your website (eg: /).']], [["urls.py from myproject.views import index\nurlpatterns = patterns('',\n   (r'^$', index),\n)\n"]], ['Where to put Python files to be redirected to by urls.py in Django?'], 2], [(2275602, 0), [["I'm guessing you're looking for something like:"], ['You could implement this into a  Custom Manager  class, as well:']], [[' perm = Permission.objects.get(pk=1) # pk #1 for brevity.\ngroup = Group.objects.get(pk=1)     # Again, for brevity.\ngroup_perms = GroupPermission.objects.filter(permission=perm, group=group)\nobjects = [x.content_object for x in group_perms]\n']], ['Django generic relations practice'], 3], [(2275602, 1), [['You could implement this into a  Custom Manager  class, as well:'], ['Which would make your view code simpler:']], [[' class GroupPermissionManager(models.Manager):\n    def for(self, perm):\n        group_perms = GroupPermission.objects.filter(permission=perm, group=self)\n        objects = [x.content_object for x in group_perms]\n\nclass Group(models.Model):\n    name = models.CharField(max_length=30)\n    permissions = GroupPermissionManager()\n']], ['Django generic relations practice'], 3], [(2275602, 2), [['Which would make your view code simpler:'], ['-10000']], [[' perm = Permission.objects.get(pk=1) # pk #1 for brevity.\ngroup = Group.objects.get(pk=1)     # Again, for brevity.\nobjects = group.permissions.for(perm)    \n']], ['Django generic relations practice'], 3], [(2275901, 0), [['-10000'], ['This could be heavily optimized, but this will print the following result, assuming you place the raw data in an external text file:']], [[' f = open(\'data.txt\', \'r\')\nraw = f.readlines()\n\n#generate set of all possible groupings\ngroups = set()\nfor lines in raw:\n    data = lines.strip().split()\n    for items in data:\n        groups.add(items)\n\n#parse input into groups\nfor group in groups:\n    print "Group \\\'%s\\\':" % group\n    for line in raw:\n        if line.find(group) is not -1:\n            print line.strip()\n    print\n\n#consider storing into a dictionary instead of just printing\n']], ['Grouping related search keywords'], 2], [(2275901, 1), [['This could be heavily optimized, but this will print the following result, assuming you place the raw data in an external text file:'], ['-10000']], [[" Group 'trainer':\ngood dog trainer\n\nGroup 'good':\ngood dog trainer\n\nGroup 'food':\ndog food\ncat food\n\nGroup 'dog':\ndog food\ngood dog trainer\n\nGroup 'cat':\ncat food\n\nGroup 'veterinarian':\nveterinarian\n"]], ['Grouping related search keywords'], 2], [(2276800, 0), [["Here's a way to do it with a class decorator"], ['Here is a slightly more complicated version that allows you to specify a list of items to skip']], [[' def make_properties(c):\n    from collections import defaultdict\n    props=defaultdict(dict)\n    for k,v in vars(c).items():\n        if k.startswith("Get"):\n            props[k[3:]][\'getter\']=v\n        if k.startswith("Set"):\n            props[k[3:]][\'setter\']=v\n    for k,v in props.items():\n        setattr(c,k,property(v.get(\'getter\'),v.get(\'setter\')))\n    return c\n\n@make_properties\nclass C(object):\n    def GetX(self):\n        print "GetX"\n        return self._x\n\n    def SetX(self, value):\n        print "SetX"\n        self._x = value\n\nc=C()\nc.X=5\nc.X\n']], ['Automatic transformation from getter/setter to properties'], 2], [(2276800, 1), [['Here is a slightly more complicated version that allows you to specify a list of items to skip'], ['-10000']], [[' def make_properties(skip=None):\n    if skip is None:\n        skip=[]\n    def f(c):\n        from collections import defaultdict\n        props=defaultdict(dict)\n        for k,v in vars(c).items():\n            if k.startswith("Get"):\n                props[k[3:]][\'getter\']=v\n            if k.startswith("Set"):\n                props[k[3:]][\'setter\']=v\n        for k,v in props.items():\n            if k in skip:\n                continue\n            setattr(c,k,property(v.get(\'getter\'),v.get(\'setter\')))\n        return c\n    return f\n\n@make_properties(skip=[\'Y\'])\nclass C(object):\n    def GetX(self):\n        print "GetX"\n        return self._x\n\n    def SetX(self, value):\n        print "SetX"\n        self._x = value\n\n    def GetY(self):\n        print "GetY"\n        return self._y\n\n    def SetY(self, value):\n        print "SetY"\n        self._y = value\n\nc=C()\nc.X=5\nc.X\nc.Y=5\nc.Y\n']], ['Automatic transformation from getter/setter to properties'], 2], [(2278150, 0), [['You could do something like'], ["Edit  Here is what I was referring to, but it's still not really the best solution, as it has a LOT of caveats:"]], [[" pfd = subprocess.Popen(['ls'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\n\nout, err_output = pfd.communicate()\n"]], ['detecting end of tty output'], 2], [(2278150, 1), [["Edit  Here is what I was referring to, but it's still not really the best solution, as it has a LOT of caveats:"], ["Note that this will break out if any other command outputs 'sh#' at the beginning of the line, and also if for some reason the output is different from expected, you will enter the same blocking situation as before. This is why it's a very sub-optimal situation for a shell."]], [[" while 1: \n    c = pfd.stdout.read(1)\n    if not c:\n        break\n    elif c == '\\n': # print line when found\n        print repr(out)\n        out = ''\n    else:\n        out += c\n        if out.strip() == 'sh#':\n            break\n"]], ['detecting end of tty output'], 2], [(2278426, 0), [["In Python 2.6, a class decorator that's also a custom descriptor matches the specs you give:"], ['This emits:']], [[" class InnerClassDescriptor(object):\n  def __init__(self, cls):\n    self.cls = cls\n  def __get__(self, instance, outerclass):\n    class Wrapper(self.cls):\n      outer = instance\n    Wrapper.__name__ = self.cls.__name__\n    return Wrapper\n\nclass Outer(object):\n  @InnerClassDescriptor\n  class Inner(object):\n    def __init__(self):\n      print self.outer\n\no = Outer()\ni = o.Inner()\nprint 'Outer is a', type(Outer)\nprint 'Inner is a', type(o.Inner)\n"]], ['Inner Classes: How can I get the outer-class object at construction time?'], 3], [(2278426, 1), [['This emits:'], ['as per your peculiar specs.  Of course it needs to be a  different  class each time for reentrancy -- even in a single-threaded world, the following:']], [[" <__main__.Outer object at 0x82f90>\nOuter is a <type 'type'>\nInner is a <type 'type'>\n"]], ['Inner Classes: How can I get the outer-class object at construction time?'], 3], [(2278426, 2), [['as per your peculiar specs.  Of course it needs to be a  different  class each time for reentrancy -- even in a single-threaded world, the following:'], ['should work cleanly, and stashing o1 vs o2 anywhere else than in the classes returned by  o1.Inner  vs  o2.Inner  (e.g., in TLS) would mean horrible results for this use.']], [[' o1 = Outer()\no2 = Outer()\ni1 = o1.Inner\ni2 = o2.Inner\nprint i1(), i2(), i1(), i2()\n']], ['Inner Classes: How can I get the outer-class object at construction time?'], 3], [(2279404, 0), [['-10000'], ['Output:']], [['Example <a href="https://stackoverflow.com/questions/459552/beautifulsoup-3-1-parser-breaks-far-too-easily/638597#638597">html5lib parser with BeautifulSoup tree builder</a> #!/usr/bin/env python\nfrom html5lib import HTMLParser, treebuilders\n\nparser = HTMLParser(tree=treebuilders.getTreeBuilder("beautifulsoup"))\n\nc = """<HTML><HEAD><TITLE>Title</TITLE></HEAD><BODY>...... </BODY></HTML>"""\n\nsoup = parser.parse(c)\nprint soup.prettify()\n']], ['How can I add consistent whitespace to existing HTML using Python?'], 2], [(2279404, 1), [['Output:'], ['-10000']], [[' <html>\n <head>\n  <title>\n   Title\n  </title>\n </head>\n <body>\n  ......\n </body>\n</html>\n']], ['How can I add consistent whitespace to existing HTML using Python?'], 2], [(2279749, 0), [['So, there should be nothing preventing you from doing e.g.'], ['Then you could use it like any other shell command:']], [[' $ alias geturl="python /some/cool/script.py"\n']], ['Bash alias to Python script -- is it possible?'], 2], [(2279749, 1), [['Then you could use it like any other shell command:'], ['And this would simply call your Python program.']], [[' $ geturl http://example.com/excitingstuff.jpg\n']], ['Bash alias to Python script -- is it possible?'], 2], [(2281263, 0), [['-10000'], ['Update: ']], [[' for line in open("file"):\n    if " Deposit" in line:\n         line=line.rstrip()\n         print line.split()\n']], ['Removing empty items from a list (Python)'], 2], [(2281263, 1), [['Update: '], ['-10000']], [[' for line in open("file"):\n    if "Deposit" in line:\n         line=line.rstrip()\n         print line[line.index("Deposit"):].split()\n']], ['Removing empty items from a list (Python)'], 2], [(2281850, 0), [["Here's an implementation that creates a decorator (save the following code as  timeout.py )."], ['So, in your application code, you can use the decorator like so:']], [[' from functools import wraps\nimport errno\nimport os\nimport signal\n\nclass TimeoutError(Exception):\n    pass\n\ndef timeout(seconds=10, error_message=os.strerror(errno.ETIME)):\n    def decorator(func):\n        def _handle_timeout(signum, frame):\n            raise TimeoutError(error_message)\n\n        def wrapper(*args, **kwargs):\n            signal.signal(signal.SIGALRM, _handle_timeout)\n            signal.alarm(seconds)\n            try:\n                result = func(*args, **kwargs)\n            finally:\n                signal.alarm(0)\n            return result\n\n        return wraps(func)(wrapper)\n\n    return decorator\n']], ['Timeout function if it takes too long to finish'], 2], [(2281850, 1), [['So, in your application code, you can use the decorator like so:'], ['-10000']], [[' from timeout import timeout\n\n# Timeout a long running function with the default expiry of 10 seconds.\n@timeout\ndef long_running_function1():\n    ...\n\n# Timeout after 5 seconds\n@timeout(5)\ndef long_running_function2():\n    ...\n\n# Timeout after 30 seconds, with the error "Connection timed out"\n@timeout(30, os.strerror(errno.ETIMEDOUT))\ndef long_running_function3():\n    ...\n']], ['Timeout function if it takes too long to finish'], 2], [(2285062, 0), [["You can use a predefined/autoloaded table with declarative_base by assigning it to the __table__ attribute. The columns are picked up from the table, but you'll still have declare any relations you want to use."], ['However if you are going to be inserting a huge amount of rows, then going around the ORM and using executemany will get you a large performance increase. You can use execute many like this:']], [[' class Source(Base):\n    __table__ = source\n\nclass Event(Base):\n    __table__ = event\n    source = relation(Source)\n']], ['sqlalchemy 0.6 legacy database access?'], 2], [(2285062, 1), [['However if you are going to be inserting a huge amount of rows, then going around the ORM and using executemany will get you a large performance increase. You can use execute many like this:'], ['-10000']], [[" conn = engine.connect()\nconn.execute(event.insert(),[\n    {'source_id': 1, 'info': 'xyz', 'item': 'foo'},\n    {'source_id': 1, 'info': 'xyz', 'item': 'bar'},\n    ...\n])\n"]], ['sqlalchemy 0.6 legacy database access?'], 2], [(2285746, 0), [['You can simply use functions to do this:'], ['Or you can put the definitions of the functions in a seperate file, say  functions.py  and use  import functions  in your main program file.']], [[' def function1(a):\n    print a\n\ndef function2(b):\n    print b\n\ndef function3(c):\n    print c\n\ndef function4():\n    return "hello!"\n\ndef main():\n    a, b, c = (1, 2, 3)\n    function1(a)\n    function2(b)\n    function3(c)\n    d = function4()\n    print d\n\nif __name__ == "__main__":\n    main()\n']], ['splitting one program into several smaller and their binding in python?'], 2], [(2285746, 1), [['Or you can put the definitions of the functions in a seperate file, say  functions.py  and use  import functions  in your main program file.'], ['This should be enough to get you started.  I would recommend  Dive Into Python  as a good learning reference if you have some previous experience programming and want to learn more about Python.']], [[' import functions\n\ndef main():\n    a, b, c = (1, 2, 3)\n    functions.function1(a)\n    functions.function2(b)\n    functions.function3(c)\n    d = functions.function4()\n    print d\n\nif __name__ == "__main__":\n    main()\n']], ['splitting one program into several smaller and their binding in python?'], 2], [(2286468, 0), [['Passing an argument via ant can be done via the ant properties. The call would be:'], ['In your ant file specify a property port. The default value will be overridden when you pass the argument via the command line:']], [[' ant devmode -Dport=8821\n']], ['How do I start GWT devmode on a particular port from the console?'], 3], [(2286468, 1), [['In your ant file specify a property port. The default value will be overridden when you pass the argument via the command line:'], ['And in the ant location where you want to use the property, use it as follows:']], [[' <property name="port" value="8080" />  //replace 8080 with the default value you want.\n']], ['How do I start GWT devmode on a particular port from the console?'], 3], [(2286468, 2), [['And in the ant location where you want to use the property, use it as follows:'], ['Update: fixed syntax, as suggested by Stephen, of property to make this example correct.']], [[' <arg value="-port"/>\n<arg value="${port}"/>\n']], ['How do I start GWT devmode on a particular port from the console?'], 3], [(2286557, 0), [['This solution prints the results in the same order as the final placings. \nIf the place has not changed (+0) is printed. \nIf you wish to filter those out instead, simply put an  if diff:  before the print'], ["As pwdyson points out, if your stopwatches aren't good enough, you might get a tie. So this modification uses dicts instead of lists. The order of the placings is still preserved"]], [[' >>> after_short_program = [\n...     \'Evgeni Plushenko\',\n...     \'Evan Lysacek\',\n...     \'Daisuke Takahashi\',\n...     \'Nobunari Oda\',\n...     \'Stephane Lambiel\',\n... ]\n>>> \n>>> after_free_skate = [\n...     \'Evan Lysacek\',\n...     \'Daisuke Takahashi\',\n...     \'Evgeni Plushenko\',\n...     \'Stephane Lambiel\',\n...     \'Nobunari Oda\',\n... ]\n>>> \n>>> for i,item in enumerate(after_free_skate):\n...     diff = after_short_program.index(item)-i\n...     print "%s (%+d)"%(item,diff)\n...     \n... \nEvan Lysacek (+1)\nDaisuke Takahashi (+1)\nEvgeni Plushenko (-2)\nStephane Lambiel (+1)\nNobunari Oda (-1)\n']], ['Positional Comparisons in Python'], 3], [(2286557, 1), [["As pwdyson points out, if your stopwatches aren't good enough, you might get a tie. So this modification uses dicts instead of lists. The order of the placings is still preserved"], ['If there is a possibility of keys in the second dict that are not in the first you can do something like this']], [[' >>> from operator import itemgetter\n>>> \n>>> after_short_program = {\n...     \'Evgeni Plushenko\':1,\n...     \'Evan Lysacek\':2,\n...     \'Daisuke Takahashi\':3,\n...     \'Stephane Lambiel\':4,\n...     \'Nobunari Oda\':5,\n... }\n>>> \n>>> after_free_skate = {\n...     \'Evan Lysacek\':1,\n...     \'Daisuke Takahashi\':2,\n...     \'Evgeni Plushenko\':3,\n...     \'Stephane Lambiel\':4,   # These are tied\n...     \'Nobunari Oda\':4,       # at 4th place\n... }\n>>> \n>>> for k,v in sorted(after_free_skate.items(),key=itemgetter(1)):\n...     diff = after_short_program[k]-v\n...     print "%s (%+d)"%(k,diff)\n...     \n... \nEvan Lysacek (+1)\nDaisuke Takahashi (+1)\nEvgeni Plushenko (-2)\nNobunari Oda (+1)\nStephane Lambiel (+0)\n>>> \n']], ['Positional Comparisons in Python'], 3], [(2286557, 2), [['If there is a possibility of keys in the second dict that are not in the first you can do something like this'], ['-10000']], [[' for k,v in sorted(after_free_skate.items(),key=itemgetter(1)):\n    try:\n        diff = after_short_program[k]-v\n        print "%s (%+d)"%(k,diff)\n    except KeyError:\n        print "%s (new)"%k\n']], ['Positional Comparisons in Python'], 3], [(2289768, 0), [['Fetching  directories:'], ['Or, splitting for directory names:']], [[" >>> files = urllib2.urlopen('ftp://ftp2.census.gov/geo/tiger/TIGER2008/01_ALABAMA/').read().splitlines()\n>>> for l in files[:4]: print l\n... \ndrwxrwsr-x    2 0        4009         4096 Nov 26  2008 01001_Autauga_County\ndrwxrwsr-x    2 0        4009         4096 Nov 26  2008 01003_Baldwin_County\ndrwxrwsr-x    2 0        4009         4096 Nov 26  2008 01005_Barbour_County\ndrwxrwsr-x    2 0        4009         4096 Nov 26  2008 01007_Bibb_County\n>>> \n"]], ['Python and urllib'], 2], [(2289768, 1), [['Or, splitting for directory names:'], ['-10000']], [[' >>> for l in files[:4]: print l.split()[-1]\n... \n01001_Autauga_County\n01003_Baldwin_County\n01005_Barbour_County\n01007_Bibb_County\n']], ['Python and urllib'], 2], [(2289870, 0), [['-10000'], ['Example:']], [[' sorted(array, key=lambda x:x[:24])\n']], ['sort lines in text file, but only use the first N characters'], 2], [(2289870, 1), [['Example:'], ['-10000']], [[' >>> a = ["wxyz", "abce", "abcd", "bcde"]\n>>> sorted(a)\n[\'abcd\', \'abce\', \'bcde\', \'wxyz\']\n>>> sorted(a, key=lambda x:x[:3])\n[\'abce\', \'abcd\', \'bcde\', \'wxyz\']\n']], ['sort lines in text file, but only use the first N characters'], 2], [(2290007, 0), [["Here's a minimal example showing the process for a 1d sum-of-squares function."], ['-10000']], [['ctsquare.c #include <stdlib.h>\n\nfloat mysumsquares(float * array, size_t size) {\n    float total = 0.0f;\n    size_t idx;\n    for (idx = 0; idx < size; ++idx) {\n        total += array[idx]*array[idx];\n    }\n    return total;\n}\n']], ['Beginner extending C with Python (specifically Numpy)'], 3], [(2290007, 1), [['-10000'], ['-10000']], [[' $ gcc -O3 -fPIC -c ctsquare.c -o ctsquare.o\n$ ld -dylib -o ctsquare.so -lc ctsquare.o\n']], ['Beginner extending C with Python (specifically Numpy)'], 3], [(2290007, 2), [['-10000'], ['-10000']], [['ctsquare.py import numpy\nimport ctypes\n\n# pointer to float type, for convenience\nc_float_p = ctypes.POINTER(ctypes.c_float)\n\n# load the library\nctsquarelib = ctypes.cdll.LoadLibrary("ctsquare.so")\n\n# define the return type and arguments of the function\nctsquarelib.mysumsquares.restype = ctypes.c_float\nctsquarelib.mysumsquares.argtypes = [c_float_p, ctypes.c_size_t]\n\n# python front-end function, takes care of the ctypes interface\ndef myssq(arr):\n    # make sure that the array is contiguous and the right data type\n    arr = numpy.ascontiguousarray(arr, dtype=\'float32\')\n\n    # grab a pointer to the array\'s data\n    dataptr = arr.ctypes.data_as(c_float_p)\n\n    # this assumes that the array is 1-dimensional. 2d is more complex.\n    datasize = arr.ctypes.shape[0]\n\n    # call the C function\n    ret = ctsquarelib.mysumsquares(dataptr, datasize)\n\n    return ret\n\nif __name__ == \'__main__\':\n    a = numpy.array([1,2,3,4])\n    print \'sum of squares of [1,2,3,4] =\', myssq(a)\n']], ['Beginner extending C with Python (specifically Numpy)'], 3], [(2290859, 0), [['-10000'], ['edit : indeed the simple version will work too:']], [[" >>> re.findall('Message: (.+?)$', s, re.M)\n['1st message', '2dn message', '3rd message']\n"]], ['How to solve this using regex?'], 2], [(2290859, 1), [['edit : indeed the simple version will work too:'], ["I'm surprised it wasn't in the list of those numerous things you tried :)"]], [[" >>> re.findall('Message: (.+)', s)\n['1st message', '2dn message', '3rd message']\n"]], ['How to solve this using regex?'], 2], [(2290962, 0), [['-10000'], ['So now we can say']], [[' from collections import defaultdict\n\ndef leaders(xs, top=10):\n    counts = defaultdict(int)\n    for x in xs:\n        counts[x] += 1\n    return sorted(counts.items(), reverse=True, key=lambda tup: tup[1])[:top]\n']], ['Python: how to get sorted count of items in a list?'], 2], [(2290962, 1), [['So now we can say'], ['-10000']], [[' >>> xs = list("jkl;fpfmklmcvuioqwerklmwqpmksdvjioh0-45mkofwk903rmiok0fmdfjsd")\n>>> print leaders(xs)\n[(\'k\', 7), (\'m\', 7), (\'f\', 5), (\'o\', 4), (\'0\', 3), (\'d\', 3), (\'i\', 3), (\'j\', 3), (\'l\', 3), (\'w\', 3)]\n']], ['Python: how to get sorted count of items in a list?'], 2], [(2291176, 0), [["There are no encryption algorithms, per se, built in to Python.  However, you might want to look at the  Python Cryptography Toolkit  (PyCrypt).  I've only tinkered with it, but it's referenced in Python's documentation on  cryptographic services .  Here's an example of how you could encrypt a string with AES using PyCrypt:"], ["To decrypt, just reverse the process; assuming that  encryption_obj  is created as above, and that you've retrieved the relevant part of the URL, this would do it:"]], [[' from Crypto.Cipher import AES\nfrom urllib import quote\n\n# Note that for AES the key length must be either 16, 24, or 32 bytes\nencryption_obj = AES.new(\'abcdefghijklmnop\')\nplain = "Testing"\n\n# The plaintext must be a multiple of 16 bytes (for AES), so here we pad it\n# with spaces if necessary.\nmismatch = len(plain) % 16\nif mismatch != 0:\n  padding = (16 - mismatch) * \' \'\n  plain += padding\n\nciph = encryption_obj.encrypt(plain)\n\n# Finally, to make the encrypted string safe to use in a URL we quote it\nquoted_ciph = quote(ciph)\n']], ['django, python and link encryption'], 4], [(2291176, 1), [["To decrypt, just reverse the process; assuming that  encryption_obj  is created as above, and that you've retrieved the relevant part of the URL, this would do it:"], ["As an example, you'd have something like this defined in models.py:"]], [[" from urllib import unquote\n\n# We've already created encryption_object as shown above\n\nciph = unquote(quoted_ciph)\nplain = encryption_obj.decrypt(ciph)\n"]], ['django, python and link encryption'], 4], [(2291176, 2), [["As an example, you'd have something like this defined in models.py:"], ["And you'd generate the hash in a view using something like the following:"]], [[" class Pk_lookup(models.Model):\n  # since we're using sha256, set the max_length of this field to 32\n  hashed_pk = models.CharField(primary_key=True, max_length=32)\n  key = models.IntegerField()\n"]], ['django, python and link encryption'], 4], [(2291176, 3), [["And you'd generate the hash in a view using something like the following:"], ["Note that you'd have to quote this version as well; if you prefer, you can use  hexdigest()  instead of  digest  (you wouldn't have to quote the resulting string), but you'll have to adjust the length of the field to 64."]], [[' import hashlib\nimport Pk_lookup\n\nhash = hashlib.sha256()\nhash.update(str(pk)) # pk has been defined previously\npk_digest = hash.digest()\n\nlookup = Pk_lookup(hashed_pk=pk_digest,key=pk)\nlookup.save()\n']], ['django, python and link encryption'], 4], [(2293968, 0), [["Edit : since the OP has posted code now, I can spot the bug -- it's here:"], ["this is  unconditionally  creating a new lecturer object (trampling over the old one in the  lecturers  dict, if any) so of course the previous set gets tossed away.  This is the code you need:   first  check, and create only if needed!  (also, minor bug,  don't  check  in....keys() , that's horribly inefficient - just check for presence in the dict). As follows:"]], [[' lecturers[lec_id] = Lecturer(lec_id, lec_name)\nif lec_id in lecturers.keys():\n    lecturers[lec_id].offered_proj.add(proj_id)\n']], ['How do I create a list or set object in a class in Python?'], 3], [(2293968, 1), [["this is  unconditionally  creating a new lecturer object (trampling over the old one in the  lecturers  dict, if any) so of course the previous set gets tossed away.  This is the code you need:   first  check, and create only if needed!  (also, minor bug,  don't  check  in....keys() , that's horribly inefficient - just check for presence in the dict). As follows:"], ['You could express this in several different ways, but I hope this is clear enough.  Just for completeness, the way I would normally phrase it (to avoid two lookups into the dictionary) is as follows:']], [[' if lec_id in lecturers:\n    thelec = lecturers[lec_id]\nelse:\n    thelec = lecturers[lec_id] = Lecturer(lec_id, lec_name)\nthelec.offered_proj.add(proj_id)\n']], ['How do I create a list or set object in a class in Python?'], 3], [(2293968, 2), [['You could express this in several different ways, but I hope this is clear enough.  Just for completeness, the way I would normally phrase it (to avoid two lookups into the dictionary) is as follows:'], ['-10000']], [[' thelec = lecturers.get(lec_id)\nif thelec is None:\n    thelec = lecturers[lec_id] = Lecturer(lec_id, lec_name)\nthelec.offered_proj.add(proj_id)\n']], ['How do I create a list or set object in a class in Python?'], 3], [(2294848, 0), [['Replace:'], ['with:']], [[' result = newline #you lose the newline here\n']], ['Replace a whole line in a file'], 2], [(2294848, 1), [['with:'], ['-10000']], [[" result = newline + '\\n' #or '\\r\\n' depending on your newline format.\n"]], ['Replace a whole line in a file'], 2], [(2294869, 0), [["I'm not an expert on this by any means, but it looks like the standard way to maintain session state with urllib2 is to create a custom opener instance for each session.  That looks like this:"], ["Here is an example script that logs in to secondlife.com for multiple users in parallel, and makes multiple page requests for each user, also in parallel.  The login procedure for this particular site is tricky because it involves capturing a CSRF token from the first request before being able to log in with the second.  For that reason, the login method is quite messy.  The principle should be the same, though, for whatever site you're interested in."]], [[' opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())\n']], ['Maintaining session in an Eventlet page scraper?'], 2], [(2294869, 1), [["Here is an example script that logs in to secondlife.com for multiple users in parallel, and makes multiple page requests for each user, also in parallel.  The login procedure for this particular site is tricky because it involves capturing a CSRF token from the first request before being able to log in with the second.  For that reason, the login method is quite messy.  The principle should be the same, though, for whatever site you're interested in."], ['-10000']], [[' import eventlet\nfrom eventlet.green import urllib2\nimport re\n\nlogin_url = \'https://secure-web28.secondlife.com/my/account/login.php?lang=en&type=second-life-member&nextpage=/my/index.php?lang=en\'\n\npool = eventlet.GreenPool(10)\n\ndef fetch_title(opener, url):\n    match = re.search(r\'<title>(.*)</title>\', opener.open(url).read())\n    if match:\n        return match.group(1)\n    else:\n        return "no title"\n\ndef login(login_url, fullname, password):\n    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())\n    login_page = opener.open(login_url).read()\n    csrf_token = re.search(r\'<input type="hidden" name="CSRFToken" value="(.*)"/>\', login_page).group(1)\n    username, lastname = fullname.split()\n    auth = "CSRFToken=%s&form[type]=second-life-member&form[nextpage]=/my/index.php?lang=en&form[persistent]=Y&form[form_action]=Log%%20In&form[form_lang]=en&form[username]=%s&form[lastname]=%s&form[password]=%s&submit=Submit" % (\n        csrf_token, username, lastname, password)\n    logged_in = opener.open(login_url, auth).read()\n    return opener\n\n\ndef login_and_fetch(login_url, fullname, password, page_urls):\n    opener = login(login_url, fullname, password)\n    # note that this deliberately uses the global pool\n    pile = eventlet.GreenPile(pool)\n    for url in page_urls:\n        pile.spawn(fetch_title, opener, url)\n\n    return pile\n\nlogin_urls = [login_url] *2\nusernames = [...]\npasswords = [...]\npage_urls = [[\'https://secure-web28.secondlife.com/my/account/?lang=en-US\',\n        \'https://secure-web28.secondlife.com/my/community/events/index.php?lang=en-US\']] * 2\n\nfor user_iter in pool.imap(login_and_fetch, login_urls, usernames, passwords, page_urls):\n    for title in user_iter:\n        print "got title", title\n']], ['Maintaining session in an Eventlet page scraper?'], 2], [(2295290, 0), [['A little more verbose but less hacky would be to create a new scope each time you create the lambda:'], ['The scope here is created using a new function (a lambda, for brevity), which binds its argument, and passing the value you want to bind as the argument. In real code, though, you most likely will have an ordinary function instead of the lambda to create the new scope:']], [[' >>> adders = [0,1,2,3]\n>>> for i in [0,1,2,3]:\n...     adders[i] = (lambda b: lambda a: b + a)(i)\n...     \n>>> adders[1](3)\n4\n>>> adders[2](3)\n5\n']], ['What do (lambda) function closures capture?'], 2], [(2295290, 1), [['The scope here is created using a new function (a lambda, for brevity), which binds its argument, and passing the value you want to bind as the argument. In real code, though, you most likely will have an ordinary function instead of the lambda to create the new scope:'], ['-10000']], [[' def createAdder(x):\n    return lambda y: y + x\nadders = [createAdder(i) for i in range(4)]\n']], ['What do (lambda) function closures capture?'], 2], [(2295461, 0), [['None  is being returned'], ['If you want to return  1  you have to filter the  None  away:']], [[' >>> print min([None, 1,2])\nNone\n>>> None < 1\nTrue\n']], ['List minimum in Python with None?'], 2], [(2295461, 1), [['If you want to return  1  you have to filter the  None  away:'], ['-10000']], [[' >>> L = [None, 1, 2]\n>>> min(x for x in L if x is not None)\n1\n']], ['List minimum in Python with None?'], 2], [(2295765, 0), [['-10000'], ['This generates the third Friday of every month']], [[' import dateutil.rrule as dr\nimport dateutil.parser as dp\nimport dateutil.relativedelta as drel\n\nstart=dp.parse("19/02/2010")   # Third Friday in Feb 2010\n']], ['Generating recurring dates using python?'], 5], [(2295765, 1), [['This generates the third Friday of every month'], ['This prints every third Friday:']], [[' rr = dr.rrule(dr.MONTHLY,byweekday=drel.FR(3),dtstart=start, count=10)\n']], ['Generating recurring dates using python?'], 5], [(2295765, 2), [['This prints every third Friday:'], ['rr is an iterable, so you can use slicing notation to pick out every other item. This prints the third Friday  of every other month :']], [[" print map(str,rr)\n# ['2010-02-19 00:00:00', '2010-03-19 00:00:00', '2010-04-16 00:00:00', '2010-05-21 00:00:00', '2010-06-18 00:00:00', '2010-07-16 00:00:00', '2010-08-20 00:00:00', '2010-09-17 00:00:00', '2010-10-15 00:00:00', '2010-11-19 00:00:00']\n"]], ['Generating recurring dates using python?'], 5], [(2295765, 3), [['rr is an iterable, so you can use slicing notation to pick out every other item. This prints the third Friday  of every other month :'], ['Above, I used  str  to prettify the output a little bit. For more flexible string formatting of dates, use  strftime : See  http://au2.php.net/strftime  or the man page for strftime for all the options.']], [[" print map(str,rr[::2])\n# ['2010-02-19 00:00:00', '2010-04-16 00:00:00', '2010-06-18 00:00:00', '2010-08-20 00:00:00', '2010-10-15 00:00:00']\n"]], ['Generating recurring dates using python?'], 5], [(2295765, 4), [['Above, I used  str  to prettify the output a little bit. For more flexible string formatting of dates, use  strftime : See  http://au2.php.net/strftime  or the man page for strftime for all the options.'], ['-10000']], [[" print [d.strftime('%d/%m/%Y') for d in rr[::2]]\n# ['19/02/2010', '16/04/2010', '18/06/2010', '20/08/2010', '15/10/2010']\n"]], ['Generating recurring dates using python?'], 5], [(2295993, 0), [['It seems that when circular references are deleted, the weak reference attribute of class A is deleted before the callback has a chance to be called. One solution, is to append the finalizer (i.e., the weak reference and its callback) to a list of finalizers. For example:'], ['will print:']], [[" def del_A(name):\n    print('An A deleted:' + name)\n\nclass A(object):\n    def __init__(self, name, finalizers):\n        print('A created')\n        self.name = name\n        finalizers.append(weakref.ref(self, lambda wr, n = self.name: del_A(n)))\n\nclass B(object):\n    def __init__(self):\n        print('B created')\n\ndef do_work(finalizers):\n    a = A('a1', finalizers)\n    b = B()\n    a.other = b\n    b.other = a\n\nif __name__ == '__main__':\n    finalizers = []\n    do_work(finalizers)\n"]], ['Weak reference callback is not called because of circular references'], 2], [(2295993, 1), [['will print:'], ['Note that do_work() is necessary, otherwise finalizers gets deleted before the callbacks have a chance to be called. Obviously, finalizers has to be managed properly to avoid building a huge list of weak references, but this is another issue.']], [[' A created\nB created\nAn A deleted:a1\n']], ['Weak reference callback is not called because of circular references'], 2], [(2296502, 0), [['As far as I can see, you are looking for events on  child , but change  child.value . Something like this should do the trick:'], ['EDIT-1 : full working example below:']], [[' class ValueAttributeExtension(AttributeExtension):\n  ...\n\nclass Child(Base):\n  ...\n  value = ColumnProperty(Column(Integer, nullable=False, default=0), \n                         extension=ValueAttributeExtension()) \n']], ['Updating a de-normalized attribute automatically with an AttributeExtension'], 2], [(2296502, 1), [['EDIT-1 : full working example below:'], ['-10000']], [[' from sqlalchemy import create_engine, Column, Integer, ForeignKey\nfrom sqlalchemy.orm import relation, scoped_session, sessionmaker, AttributeExtension, ColumnProperty\nfrom sqlalchemy.ext.declarative import declarative_base\n\nengine = create_engine(\'sqlite:///:memory:\', echo=False)\nsession = scoped_session(sessionmaker(bind=engine, autoflush=True))\nBase = declarative_base()\nBase.query = session.query_property()\n\nclass ValueAttributeExtension(AttributeExtension):\n    active_history = True\n\n    def append(self, state, child, initiator):\n        assert False, "should not be called"\n\n    def remove(self, state, child, initiator):\n        assert False, "should not be called"\n\n    def set(self, state, value, oldvalue, initiator):\n        print \'set called\', state.obj(), value, oldvalue\n        child = state.obj()\n        if not(child.parent is None):\n            child.parent.sum_of_children += -oldvalue + value\n        return value\n\nclass ChildrenAttributeExtension(AttributeExtension):\n    active_history = True\n\n    def append(self, state, child, initiator):\n        print \'append called\', state.obj(), child\n        parent = state.obj()\n        parent.sum_of_children += child.value\n        return child\n\n    def remove(self, state, child, initiator):\n        print \'remove called\', state.obj(), child\n        parent = state.obj()\n        parent.sum_of_children -= child.value\n\n    def set(self, state, child, oldchild, initiator):\n        print \'set called\', state, child, oldchild\n        parent = state.obj()\n        parent.parent.sum_of_children += -oldchild.value + child.value\n        #parent.sum_of_children += -oldchild.value + child.value\n        return child\n\nclass Child(Base):\n    __tablename__ = \'child\'\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey(\'parent.id\'), nullable=False)\n    value = ColumnProperty(Column(Integer, nullable=False, default=0),\n                    extension=ValueAttributeExtension())\n\nclass Parent(Base):\n    __tablename__ = \'parent\'\n    id = Column(Integer, primary_key=True)\n    sum_of_children = Column(Integer, nullable=False, default=0)\n\n    children = relation(\'Child\', backref=\'parent\',\n                        extension=ChildrenAttributeExtension())\n\nBase.metadata.create_all(engine)\n\n# Add a parent\np = Parent()\nsession.add(p)\nsession.commit()\n\np = Parent.query.first()\nassert p.sum_of_children == 0\n\n\n# Add a child\nc = Child(parent=p, value=5)\nsession.add(c)\nsession.commit()\n\np = Parent.query.first()\nassert p.sum_of_children == 5\n\n# Change a child\n#c = Child.query.first()\nc.value = 3 # fixed bug: = instead of ==\nsession.commit()  # extension.set() doesn\'t get called\n\np = Parent.query.first()\nassert p.sum_of_children == 3 # Assertion is OK\n']], ['Updating a de-normalized attribute automatically with an AttributeExtension'], 2], [(2296550, 0), [['In module  foo :'], ['In module  bar :']], [['   joe = 5\n']], ['how to have global variables among different modules in Python'], 2], [(2296550, 1), [['In module  bar :'], ["Note that this isn't recommended, though. It's much better to hide access to a module's variables by using functions."]], [['   from foo import joe\n  print joe\n']], ['how to have global variables among different modules in Python'], 2], [(2296565, 0), [['You are trying to remove elements from same list on which you are iterating and that is a sure way of creating bad side effects. e.g. take a simple example'], ["what do you think output should be? It seems you are removing all items and output should be '[]' but output is"]], [[' l = range(10)\nfor a in l:\n    l.remove(a)\nprint l\n']], ['Best way to remove controls from a wx panel'], 4], [(2296565, 1), [["what do you think output should be? It seems you are removing all items and output should be '[]' but output is"], ['because by removing items you alter internal index for interation, so instead you should do it on a copy e.g']], [[' [1, 3, 5, 7, 9]\n']], ['Best way to remove controls from a wx panel'], 4], [(2296565, 2), [['because by removing items you alter internal index for interation, so instead you should do it on a copy e.g'], ['but in your case as you know you are removing all items, just set list empty after looping e.g.']], [[' l = range(10)\nfor a in l[:]:\n    l.remove(a)\nprint l\n']], ['Best way to remove controls from a wx panel'], 4], [(2296565, 3), [['but in your case as you know you are removing all items, just set list empty after looping e.g.'], ['-10000']], [[" for c in self.controls:\n    c['cb'].Destroy()\n    c['label'].Destroy()\n    c['input'].Destroy()\n\nself.controls = []\n"]], ['Best way to remove controls from a wx panel'], 4], [(2297044, 0), [["Based on  Dave Kirby's  suggestion for vim, this does something similar:"], ['Or']], [[' less -p regex file_name\n']], ['Highlighting python stack traces'], 2], [(2297044, 1), [['Or'], ['-10000']], [[' some_command | less -p regex\n']], ['Highlighting python stack traces'], 2], [(2298657, 0), [['Checking if a file exists will not occur every time a render occurs.  It will actually only occur whenever you interpreter process is started, which all depends on your deployment configuration.  This will depend on a variety on your webserver setup, but if you are using apache, chiefly MaxRequestPerChild and StartServers, and related parameters.  For example, if I have'], ['The point is, most implementations that load your code will not re-source the settings.py file very often.  With that in mind, how about:']], [[' StartServers 8\nMaxrequestsPerChild 4000\n']], ['Most optimal way to programmatically check if site is running locally or on a server with Django?'], 2], [(2298657, 1), [['The point is, most implementations that load your code will not re-source the settings.py file very often.  With that in mind, how about:'], ['-10000']], [[" import os\nif os.uname()[1] == 'my.development.server.com':\n    LOCAL = True\nelse:\n    LOCAL = False\n"]], ['Most optimal way to programmatically check if site is running locally or on a server with Django?'], 2], [(2299609, 0), [['If you display your data in a slightly more congenial fashion, like:'], ['Update  In the meantime, here is an answer that uses the structure that is evident in your data and comments and will be more debuggable if there are variations in the structure:']], [[" alist = [\n    '#', '3e98.mtz', 'MR_AUTO', 'with', 'model', '200la_.pdb', 'SPACegroup', 'HALL', 'P', '2yb',\n    '#P', '1', '21', '1', \n    'SOLU', 'SET', 'RFZ=3.0', 'TFZ=4.7', 'PAK=0', 'LLG=30', 'SOLU', '6DIM', 'ENSE', '200la_',\n        'EULER', '321.997', '124.066', '234.744', 'FRAC', '-0.14681', '0.50245', '-0.05722',\n    'SOLU', 'SET', 'RFZ=3.3', 'TFZ=4.2', 'PAK=0', 'LLG=30', 'SOLU', '6DIM', 'ENSE', '200la_',\n        'EULER', '329.492', '34.325', '209.775', 'FRAC', '0.70297', '0.00106', '-0.24023',\n    'SOLU', 'SET', 'RFZ=3.6', 'TFZ=3.6', 'PAK=0', 'LLG=30', 'SOLU', '6DIM', 'ENSE', '200la_', \n        'EULER', '177.344', '78.287', '187.356', 'FRAC', '0.04890', '0.00090', '-0.57497'\n    ]\n"]], ['How to I extract floats from a file in Python?'], 4], [(2299609, 1), [['Update  In the meantime, here is an answer that uses the structure that is evident in your data and comments and will be more debuggable if there are variations in the structure:'], ['Results:']], [[" TAG0 = 'EULER'\nTAG1 = 'FRAC'\n\ndef extract_rows(tokens):\n    pos = 0\n    while True:\n        try:\n            pos = tokens.index(TAG0, pos)\n        except ValueError:\n            return\n        assert pos + 8 <= len(tokens)\n        assert tokens[pos+4] == TAG1\n        yield (\n            tuple(map(float, tokens[pos+1:pos+4])),\n            tuple(map(float, tokens[pos+5:pos+8])),\n            )\n        pos += 8\n\nfor rowx, row in enumerate (extract_rows(alist)):\n    print rowx, 'TAG0', row[0]\n    print rowx, 'TAG1', row[1]\n"]], ['How to I extract floats from a file in Python?'], 4], [(2299609, 2), [['Results:'], ['Update 2  Based on your example file, the following simple code (untested) should do what you want:']], [[' 0 TAG0 (321.99700000000001, 124.066, 234.744)\n0 TAG1 (-0.14681, 0.50244999999999995, -0.05722)\n1 TAG0 (329.49200000000002, 34.325000000000003, 209.77500000000001)\n1 TAG1 (0.70296999999999998, 0.00106, -0.24023)\n2 TAG0 (177.34399999999999, 78.287000000000006, 187.35599999999999)\n2 TAG1 (0.048899999999999999, 0.00089999999999999998, -0.57496999999999998)\n']], ['How to I extract floats from a file in Python?'], 4], [(2299609, 3), [['Update 2  Based on your example file, the following simple code (untested) should do what you want:'], ['Note: it\'s only a coincidence that what you are looking for is "all of the floating point numbers" (which ignores the floating point numbers in  RFZ=3.0 TFZ=4.7  anyway!). What you have is a file with STRUCTURE: two types of SOLU records, and you want the 3 numbers that appear after EULER and the 3 after FRAC in the SOLU 6DIM records. You DON\'T want a list of all of those numbers and have to split them up again into (3 EULER numbers and 3 FRAC numbers) times N.']], [[" for line in open('my_file.txt'):\n    row = line.split()\n    if row[0] == 'SOLU' and row[1] == '6DIM' and row[4] == 'EULER' and row[8] == 'FRAC':\n        euler = map(float, row[5:8])\n        frac = map(float, row[9:12])\n        do_something_with(euler, frac)\n"]], ['How to I extract floats from a file in Python?'], 4], [(2299671, 0), [['Maybe this is what you want?'], ["If run on 'a b c' (for clarity) the result is:"]], [[' s = "orange apple grapes pear"\n\nfrom itertools import product\nl = s.split()\nr=\'/\'.join(\'\'.join(k*v for k,v in zip(l, x))\n           for x in product(range(2), repeat=len(l))\n           if sum(x) > 1)\nprint r\n']], ['Combining words in Python (permutations?)'], 2], [(2299671, 1), [["If run on 'a b c' (for clarity) the result is:"], ['(Updated after comment from poster.)']], [[' bc/ac/ab/abc\n']], ['Combining words in Python (permutations?)'], 2], [(2299696, 0), [['-10000'], ['Remember that dicts are unordered, so to iterate in order of place, you need to do this']], [[" >>> sorted_scores = [\n...     ('Apolo Ohno', 0),\n...     ('Shanie Davis', -1),\n...     ('Bodie Miller', -2),\n...     ('Lindsay Vohn', -3),  \n...     ('Shawn White', -3),\n...     ('Bryan Veloso',-4)\n... ]\n>>> \n>>> res = {}\n>>> prev = None\n>>> for i,(k,v) in enumerate(sorted_scores):\n...     if v!=prev:\n...         place,prev = i+1,v\n...     res[k] = place\n... \n>>> print res\n{'Apolo Ohno': 1, 'Bryan Veloso': 6, 'Shanie Davis': 2, 'Lindsay Vohn': 4, 'Bodie Miller': 3, 'Shawn White': 4}\n"]], ['Positional Rankings and Dealing with Ties in Python'], 2], [(2299696, 1), [['Remember that dicts are unordered, so to iterate in order of place, you need to do this'], ['-10000']], [[" >>> from operator import itemgetter\n>>> print sorted(res.items(),key=itemgetter(1))\n[('Apolo Ohno', 1), ('Shanie Davis', 2), ('Bodie Miller', 3), ('Lindsay Vohn', 4), ('Shawn White', 4), ('Bryan Veloso', 6)]\n"]], ['Positional Rankings and Dealing with Ties in Python'], 2], [(2301789, 0), [['-10000'], ['And in Python 3:']], [[' for line in reversed(open("filename").readlines()):\n    print line.rstrip()\n']], ['Read a file in reverse order using python'], 2], [(2301789, 1), [['And in Python 3:'], ['-10000']], [[' for line in reversed(list(open("filename"))):\n    print(line.rstrip())\n']], ['Read a file in reverse order using python'], 2], [(2304072, 0), [['The data is being buffered by ruby. Use something like'], ['Use  subprocess  module.  os.popen   has been replaced  by it.']], [[' $stdout.flush\n']], ['Print out the output of os.popen() without buffering in python'], 2], [(2304072, 1), [['Use  subprocess  module.  os.popen   has been replaced  by it.'], ['-10000']], [[' import subprocess\nimport sys\n\ncmd = ["ruby", "/Users/smcho/Desktop/testit.rb"]\np = subprocess.Popen(cmd, stdout=subprocess.PIPE)\nfor line in iter(p.stdout.readline, \'\'):\n    print line, \n    sys.stdout.flush() \np.wait()\n']], ['Print out the output of os.popen() without buffering in python'], 2], [(2305115, 0), [['For  python2.6'], ['For  python3.1']], [[' with open("file1") as infile:\n    with open("file2","w") as outfile:\n        for i,line in enumerate(infile):\n            if i==2:\n                # 3rd line\n                outfile.write("new line1\\n")\n                outfile.write("new line2\\n")\n                outfile.write("new line3\\n")\n            elif i==3:\n                # 4th line\n                pass\n            else:\n                outfile.write(line)\n']], ['Remove and insert lines in a text file'], 2], [(2305115, 1), [['For  python3.1'], ['-10000']], [[' with open("file1") as infile, open("file2","w") as outfile:\n    for i,line in enumerate(infile):\n        if i==2:\n            # 3rd line\n            outfile.write("new line1\\n")\n            outfile.write("new line2\\n")\n            outfile.write("new line3\\n")\n        elif i==3:\n            # 4th line\n            pass\n        else:\n            outfile.write(line)\n']], ['Remove and insert lines in a text file'], 2], [(2305501, 0), [['1.  Construct a CDF-like list like this:'], ['2.  Construct the sampler like this:']], [[' def build_cdf(distrib):\n    cdf = []\n    val = 0\n    for key, freq in distrib.items():\n        val += freq\n        cdf.append((val, key))\n    return (val, cdf)\n']], ['Sampling keys due to their values'], 3], [(2305501, 1), [['2.  Construct the sampler like this:'], ['Usage:']], [[' import random\ndef sample_from_cdf(val_and_cdf):\n    (val, cdf) = val_and_cdf;\n    rand = random.uniform(0, val)\n    # use bisect.bisect_left to reduce search time from O(n) to O(log n).\n    return [key for index, key in cdf if index > rand][0]\n']], ['Sampling keys due to their values'], 3], [(2305501, 2), [['Usage:'], ['You may want to make this into a class.']], [[' x = build_cdf({"a":0.2, "b":0.3, "c":0.5});\ny = [sample_from_cdf(x) for i in range(0,100000)];\nprint (len([t for t in y if t == "a"]))   # 19864\nprint (len([t for t in y if t == "b"]))   # 29760\nprint (len([t for t in y if t == "c"]))   # 50376\n']], ['Sampling keys due to their values'], 3], [(2305798, 0), [['Consider this.'], ['Each attribute is wrapped with properties.  Using  Descriptors  us probably better because it can save repeating the observer notification. ']], [[' class Person( object ):\n    def __init__( self, name, addr, email, etc. ):\n        self.observer= []\n        ... etc. ...\n    @property\n    def name( self ): return self._name\n    @name.setter\n    def name( self, value ): \n        self._name= value\n        for observer in self.observedBy: observer.update( self )\n    ... etc. ...\n']], ['python: dictionary dilemma: how to properly index objects based on an attribute'], 3], [(2305798, 1), [['Each attribute is wrapped with properties.  Using  Descriptors  us probably better because it can save repeating the observer notification. '], ['If you want "generic" indexing, then your collection can be parameterized with the names of attributes, and you can use  getattr  to get those named attributes from the underlying objects.']], [[' class PersonCollection( set ):\n    def __init__( self, *args, **kw ):\n        self.byName= collections.defaultdict(list)\n        self.byEmail= collections.defaultdict(list)\n        super( PersonCollection, self ).__init__( *args, **kw )\n    def add( self, person ):\n        super( PersonCollection, self ).append( person )\n        person.observer.append( self )\n        self.byName[person.name].append( person )\n        self.byEmail[person.email].append( person )\n    def update( self, person ):\n        """This person changed.  Find them in old indexes and fix them."""\n        changed = [(k,v) for k,v in self.byName.items() if id(person) == id(v) ]\n        for k, v in changed:\n            self.byName.pop( k )\n        self.byName[person.name].append( person )\n        changed = [(k,v) for k,v in self.byEmail.items() if id(person) == id(v) ]\n        for k, v in changed:\n            self.byEmail.pop( k )\n        self.byEmail[person.email].append( person)\n\n    ... etc. ... for all methods of a collections.Set.\n']], ['python: dictionary dilemma: how to properly index objects based on an attribute'], 3], [(2305798, 2), [['If you want "generic" indexing, then your collection can be parameterized with the names of attributes, and you can use  getattr  to get those named attributes from the underlying objects.'], ["Note.  To properly emulate a database, use a set not a list.  Database tables are (theoretically) sets.  As a practical matter they are unordered, and an index will allow the database to reject duplicates.  Some RDBMS's don't reject duplicate rows because -- without an index -- it's too expensive to check."]], [[' class GenericIndexedCollection( set ):\n    attributes_to_index = [ ] # List of attribute names\n    def __init__( self, *args, **kw ):\n        self.indexes = dict( (n, {}) for n in self.attributes_to_index ]\n        super( PersonCollection, self ).__init__( *args, **kw )\n    def add( self, person ):\n        super( PersonCollection, self ).append( person )\n        for i in self.indexes:\n            self.indexes[i].append( getattr( person, i )\n']], ['python: dictionary dilemma: how to properly index objects based on an attribute'], 3], [(2306171, 0), [['The following should work well as the decorator you want to use:'], ["As you noticed, you could simplify algo1's and algo2's signatures, but it's not really a crucial part, and maybe keeping the signatures intact can simplify your testing and refactoring.  If you  do  want to simplify, you'll change the  def  statements for those to, say,"]], [[' import functools\n\ndef iterate(update):\n    @functools.wraps(update)\n    def inner(X, A=None, S=None, K=2, maxiter=10, c=0.1):\n        M, N = X.shape\n        O = matrix(ones([M, N]))\n        if A is None:\n            A = matrix(rand(M, K))\n        if S is None:\n            S = matrix(rand(K, N))\n        for iter in range(maxiter):\n            A, S = update(X, A, S, K, maxiter, c)\n            for k in range(K):\n                na = norm(A[:,k])\n                A[:,k] /= na\n                S[k,:] *= na\n        return A, S\n    return inner\n']], ['Potential use of Python decorator or other refactorization: iterative optimization'], 2], [(2306171, 1), [["As you noticed, you could simplify algo1's and algo2's signatures, but it's not really a crucial part, and maybe keeping the signatures intact can simplify your testing and refactoring.  If you  do  want to simplify, you'll change the  def  statements for those to, say,"], ["and similarly simplify the call in the  iterator  decorate -- there's no need for two of the arguments, nor for the default values.  However, avoiding this simplification part can actually make your life simpler -- it's normally simpler if the decorated function, and the result of decorating it, keep exactly the same signature as each other, unless you have really specific needs to the contrary."]], [[' def algo1(X, A, S, c):\n']], ['Potential use of Python decorator or other refactorization: iterative optimization'], 2], [(2306280, 0), [['Assuming that it is not very inefficient to find out where  temp_board  is  0 , you can do what you want like this:'], ["If you can't do the above, then here's a way, but I am not sure if it's the most Pythonic:"]], [[' # First figure out where the array is zero\nzindex = numpy.where(temp_board == 0)\n# Make a set of tuples out of it\nzindex = set(zip(*zindex))\n# Make a set of tuples from indices_to_watch too\nindices_to_watch = set([(0,1), (1,2)])\n# Find the intersection.  These are the indices that need to be set\nindices_to_set = indices_to_watch & zindex\n# Set the value\ntemp_board[zip(*indices_to_set)] = level\n']], ['Numpy masked array modification'], 7], [(2306280, 1), [["If you can't do the above, then here's a way, but I am not sure if it's the most Pythonic:"], ['First, convert to a numpy array:']], [[' indices_to_watch = [(0,1), (1,2)]\n']], ['Numpy masked array modification'], 7], [(2306280, 2), [['First, convert to a numpy array:'], ['Then, make it indexable:']], [[' indices_to_watch = numpy.array(indices_to_watch)\n']], ['Numpy masked array modification'], 7], [(2306280, 3), [['Then, make it indexable:'], ['Then, test the condition:']], [[' index = zip(*indices_to_watch)\n']], ['Numpy masked array modification'], 7], [(2306280, 4), [['Then, test the condition:'], ['Then, figure out the actual indices to set:']], [[' indices_to_set = numpy.where(temp_board[index] == 0)\n']], ['Numpy masked array modification'], 7], [(2306280, 5), [['Then, figure out the actual indices to set:'], ['Finally, set the values:']], [[' final_index = zip(*indices_to_watch[indices_to_set])\n']], ['Numpy masked array modification'], 7], [(2306280, 6), [['Finally, set the values:'], ['-10000']], [[' temp_board[final_index] = level\n']], ['Numpy masked array modification'], 7], [(2307739, 0), [['A uuid1 could help:'], ['In the  pp.py  I found:']], [[" >>> import uuid\n>>> uuid.uuid1()\nUUID('b46fa8cf-1fc1-11df-b891-001641ec3fab')\n>>>\n"]], ['When using Parallel Python, is there any way to tell on which machine the job has run?'], 2], [(2307739, 1), [['In the  pp.py  I found:'], ['Can you then use  get_stats()  to get at that:']], [[' self.__stats[hostid] = _Statistics(ncpus, rworker)\n']], ['When using Parallel Python, is there any way to tell on which machine the job has run?'], 2], [(2309783, 0), [['One thing you can do is include it as a string in a module:'], ['Then just import it:']], [[" bigxml = '''<?xml ...\n  ....\n  ....\n  ....\n</topelement>'''\n"]], ['How to Include xml file as .py source file'], 2], [(2309783, 1), [['Then just import it:'], ['-10000']], [[' from xmldoc import bigxml\n']], ['How to Include xml file as .py source file'], 2], [(2310014, 0), [['one way'], ['output']], [[' import fileinput\nf=0\nfor line in fileinput.input("file",inplace=0):\n    if "hostname" in line and "ser1-xyz" in line:\n       line=line.replace("ser1-xyz","ser1")\n       f=1\n    if f and "group" in line:\n       a=line.rstrip().split(" ")\n       a[-1]=str(int(a[-1])+1)\n       line=\' \'.join(a)\n       f=0\n    print line.rstrip()\n']], ['file manipulation and find a word and tricky replace'], 2], [(2310014, 1), [['output'], ['change  inplace=0  to  inplace=1  for inplace edit.']], [[' $ ./python.py\nhostname ser1\nmyuser   name\npasswd   secret\ngroup    1235\n\nhostname ser2-xyz\nmyuser   name\npasswd   secret\ngroup    2345\n']], ['file manipulation and find a word and tricky replace'], 2], [(2310835, 0), [['Then create a file "change_form.html" in that directory and put something similar to this in there:'], ['Now adapt the JavaScript file that does the  tinyMCE.init  to use a different CSS file based \n on the JavaScript variable  MYAPP_objectSlug .']], [[' {% extends "admin/change_form.html" %}\n{% block extrahead %}\n<script type="text/javascript" charset="utf-8">\n    var MYAPP_objectSlug = "{{ original.slug|escapejs }}";\n</script>\n{{ block.super }}\n{% endblock %}\n']], ['django-tinymce: Using different options for different instances'], 2], [(2310835, 1), [['Now adapt the JavaScript file that does the  tinyMCE.init  to use a different CSS file based \n on the JavaScript variable  MYAPP_objectSlug .'], ['-10000']], [[' if (MYAPP_objectSlug == "ticker"){\n    var MYAPP_cssFile = "../css/special.css"; // change to your path\n} else {\n    var MYAPP_cssFile = "../css/default.css"; // change to your path\n}\n\ntinyMCE.init({\n    ...\n    content_css : MYAPP_cssFile,\n    ...\n});\n']], ['django-tinymce: Using different options for different instances'], 2], [(2311102, 0), [['Given this configuration file:'], ["Here's a program that can understand that Section 1 is using the default surname property."]], [[' [DEFAULT]\nname = a\nsurname = b\n\n[Section 1]\nname  = section 1 name\nage = 23\n#we should get a surname value from defaults\n\n[Section 2]\nname = section 2 name\nsurname = section 2 surname\nage = 24\n']], ['Python ConfigParser: how to work out options set in a specific section (rather than defaults)'], 3], [(2311102, 1), [["Here's a program that can understand that Section 1 is using the default surname property."], ["And here's the output:"]], [[' import ConfigParser\n\nparser = ConfigParser.RawConfigParser()\nparser.read("config.ini")\n#Do your normal config processing here\n#When it comes time to audit default vs. explicit,\n#clear the defaults\nparser._defaults = {}\n#Now you will see which options were explicitly defined\nprint parser.options("Section 1")\nprint parser.options("Section 2")\n']], ['Python ConfigParser: how to work out options set in a specific section (rather than defaults)'], 3], [(2311102, 2), [["And here's the output:"], ['-10000']], [[" ['age', 'name']\n['age', 'surname', 'name']\n"]], ['Python ConfigParser: how to work out options set in a specific section (rather than defaults)'], 3], [(2311223, 0), [['Best, under your stated conditions:'], ['To get the dict back later from the string, in either case,']], [[' import cPickle\n   ...\nthestring = cPickle.dumps(thedict, -1)\n']], ['How do I store a dict/list in a database?'], 2], [(2311223, 1), [['To get the dict back later from the string, in either case,'], ['-10000']], [[' thenewdict = cPickle.loads(thestring)\n']], ['How do I store a dict/list in a database?'], 2], [(2313141, 0), [['The usual way to express sums in functional languages is a fold. You can get rid of the need for an index (and a function to raise an int to the power of another int) by multiplying the sum with r in each iteration:'], ['Now the function can be used like this:']], [[' fun eval radix lst = let\n  fun f (element, sum) = sum * radix + element\nin\n  foldr f 0 lst\nend\n']], ['Conversion from imperative to functional programming [Python to Standard ML]'], 2], [(2313141, 1), [['Now the function can be used like this:'], ['-10000']], [[' - eval 10 [1,2,3];\nval it = 321 : int\n']], ['Conversion from imperative to functional programming [Python to Standard ML]'], 2], [(2314292, 0), [['There is a  get_all_field_names()  method that is built into the  Meta  subclass for all models, and can be found in  foo._meta.get_all_field_names() :'], ['So this would be a simple thing:']], [[" >>> from foo.models import Foo\n>>> f = Foo.objects.get(pk=1)\n>>> f._meta.get_all_field_names()\n['active', 'created', 'expires', 'id', , 'inputter', 'reason', 'requester', 'updated']\n"]], ["In model save() how to get all field starting with 'foo'"], 3], [(2314292, 1), [['So this would be a simple thing:'], ['And in your custom  save() :']], [[' def print_all_fields_starting_with(obj, starter):\n    fields = [x for x in obj._meta.get_all_field_names() if x.startswith(starter)]\n    for field in fields:\n        print getattr(obj, field)\n']], ["In model save() how to get all field starting with 'foo'"], 3], [(2314292, 2), [['And in your custom  save() :'], ['-10000']], [[' def save(self):\n    print_all_fields_starting_with(self, "foo_")\n    super(MyModel, self).save()\n']], ["In model save() how to get all field starting with 'foo'"], 3], [(2315659, 0), [['-10000'], ['item_list can be any iterable. Here is an example']], [[" from operator import attrgetter\nsorted(item_list, key=attrgetter('fitness'))\n"]], ['How to sort a collection of objects by an variable they all hold?'], 2], [(2315659, 1), [['item_list can be any iterable. Here is an example'], ['-10000']], [[' >>> class C(object):\n...     def __init__(self, fitness):\n...         self.fitness=fitness\n...     def __repr__(self):\n...         return "fitness: %s"%self.fitness\n... \n>>> \n>>> from operator import attrgetter\n>>> L=[C(10),C(4),C(1),C(99)]\n>>> sorted(L, key=attrgetter(\'fitness\'))\n[fitness: 1, fitness: 4, fitness: 10, fitness: 99]\n>>> S=set(L)\n>>> sorted(S, key=attrgetter(\'fitness\'))\n[fitness: 1, fitness: 4, fitness: 10, fitness: 99]\n']], ['How to sort a collection of objects by an variable they all hold?'], 2], [(2316150, 0), [['-10000'], ['output']], [[' d={}\nf=open("file")\nfor line in f:\n    a,b=map( int, line.split() ) \n    d[a]=b\nf.close()\nprint d\n']], ['How to create a dictionary of integer pairs from a file in python'], 2], [(2316150, 1), [['output'], ['-10000']], [[' $ cat file\n9 120\n10 12\n11 4\n12 1\n13 515\n14 32\n\n$ ./python.py\n{9: 120, 10: 12, 11: 4, 12: 1, 13: 515, 14: 32}\n']], ['How to create a dictionary of integer pairs from a file in python'], 2], [(2316730, 0), [['In IPython you can do this'], ['You could do this I guess']], [[' x = !echo $$$$PATH\n']], ['Pipe output of a command to an interactive python session?'], 2], [(2316730, 1), [['You could do this I guess'], ['-10000']], [[' PATH="$PATH"\nx = !echo $PATH\nx[0].split(":")\n']], ['Pipe output of a command to an interactive python session?'], 2], [(2316764, 0), [['Since it is  not safe  to modify the dict that locals() returns '], ["Edit:  See Mike's reservations about using repr in the comments."]], [[' >>> d={\'a\':6, \'b\':"hello", \'c\':set()}\n>>> exec \'\\n\'.join("%s=%r"%i for i in d.items())\n>>> a\n6\n>>> b\n\'hello\'\n>>> c\nset([])\n']], ['Is there a way to extract a dict in Python into the local namespace?'], 2], [(2316764, 1), [["Edit:  See Mike's reservations about using repr in the comments."], ['-10000']], [[' >>> d={\'a\':6, \'b\':"hello", \'c\':set()}\n>>> exec \'\\n\'.join("%s=d[\'%s\']"%(k,k) for k in d)\n>>> id(d[\'c\'])\n3079176684L\n>>> id(c)\n3079176684L\n']], ['Is there a way to extract a dict in Python into the local namespace?'], 2], [(2317070, 0), [['If you only look for special content, using regexp is fine; if you need to read everything, you should rather build yourself a parser.'], ['edit:  Although the above version should work for multiple  Registry  sections, here is a more stricter version:']], [[' >> s = \'\'\' ... \'\'\' # as above\n>> t = re.search( \'Registry "unique-name" =(.*?)\\n;\', s, re.S ).group( 1 )\n>> u = re.findall( \'^\\s*(\\w+) "?(.*?)"? = "(.*?)";\\s*$\', t, re.M )\n>> for x in u:\n       print( x )\n\n(\'String\', \'name\', \'modulename\')\n(\'String\', \'timestamp\', \'not specified\')\n(\'String\', \'java\', \'not specified\')\n(\'String\', \'user\', \'not specified\')\n(\'String\', \'host\', \'not specified\')\n(\'String\', \'system\', \'not specified\')\n(\'String\', \'version\', \'This I want\')\n(\'String\', \'version-major\', \'not specified\')\n(\'String\', \'version-minor\', \'not specified\')\n(\'String\', \'scm\', \'not specified\')\n(\'String\', \'scmrevision\', \'not specified\')\n(\'String\', \'mode\', \'release\')\n']], ['Python+parsing custom config file'], 2], [(2317070, 1), [['edit:  Although the above version should work for multiple  Registry  sections, here is a more stricter version:'], ['-10000']], [[' t = re.search( \'Registry "unique-name"\\s*=\\s*((?:\\s*\\w+ "?[^"=]+"?\\s*=\\s*"[^"]*?";\\s*)+)\\s*;\', s ).group( 1 )\nu = re.findall( \'^\\s*(\\w+) "?([^"=]+)"?\\s*=\\s*"([^"]*?)";\\s*$\', t, re.M )\n']], ['Python+parsing custom config file'], 2], [(2317081, 0), [["It's easiest to just rename the mapped column and proxy it through a property:"], ["If you need a more SQLAlchemy specific solution and don't mind using specific interfaces, then SQLAlchemy has an extension mechanism for capturing events on attributes. A validator using that would look something like this:"]], [[' class Something(Base):\n    ...\n    _foo = Column(\'foo\', String(123))\n\n    @property\n    def foo(self):\n        return self._foo\n\n    @foo.setter\n    def foo(self, value):\n        if len(value) > _foo.type.length:\n            raise Exception("Value too long")\n        self._foo = value \n']], ['SQLAlchemy - maximum column length'], 2], [(2317081, 1), [["If you need a more SQLAlchemy specific solution and don't mind using specific interfaces, then SQLAlchemy has an extension mechanism for capturing events on attributes. A validator using that would look something like this:"], ['You would then use this extension by setting  __sa_instrumentation_manager__ = InstallValidatorListeners  on any class you want validated. You can also just set it on the Base class if you want it to apply to all classes derived from it.']], [[' from sqlalchemy.orm.interfaces import AttributeExtension, InstrumentationManager\nfrom sqlalchemy.orm import ColumnProperty\n\nclass InstallValidatorListeners(InstrumentationManager):\n    def post_configure_attribute(self, class_, key, inst):\n        """Add validators for any attributes that can be validated."""\n        prop = inst.prop\n        # Only interested in simple columns, not relations\n        if isinstance(prop, ColumnProperty) and len(prop.columns) == 1:\n            col = prop.columns[0]\n            # if we have string column with a length, install a length validator\n            if isinstance(col.type, String) and col.type.length:\n                inst.impl.extensions.insert(0, LengthValidator(col.type.length))\n\nclass ValidationError(Exception):\n    pass\n\nclass LengthValidator(AttributeExtension):\n    def __init__(self, max_length):\n        self.max_length = max_length\n\n    def set(self, state, value, oldvalue, initiator):\n        if len(value) > self.max_length:\n            raise ValidationError("Length %d exceeds allowed %d" %\n                                (len(value), self.max_length))\n        return value\n']], ['SQLAlchemy - maximum column length'], 2], [(2318667, 0), [["However, if that's not an option, then:"], ['Now you must initialize each element of the numpy array to be an 1-d numpy array:']], [[" import numpy as np\nstorageMatrix=np.empty((4,9),dtype='object')\n"]], ['Simple question: In numpy how do you make a multidimensional array of arrays?'], 3], [(2318667, 1), [['Now you must initialize each element of the numpy array to be an 1-d numpy array:'], ['And then you can access the array elements like this:']], [[' storageMatrix[column,row]=np.arange(4096)\n']], ['Simple question: In numpy how do you make a multidimensional array of arrays?'], 3], [(2318667, 2), [['And then you can access the array elements like this:'], ['-10000']], [[' storageMatrix[column,row][0] = 1\nstorageMatrix[column,row][4092] = 2\n']], ['Simple question: In numpy how do you make a multidimensional array of arrays?'], 3], [(2318881, 0), [['Since the  commands  module is deprecated anyway, better use the  subprocess  module which provides a file-like access to the process output. If you need the output for later, just write it into a file on the hard disk'], ['If you want process to process the output, read stdout like this']], [[" cmd = subprocess.Popen(['ls'], stdout=file('output', 'w'))\n"]], ['is there a limit to command.getstatusoutput() buffer in python'], 2], [(2318881, 1), [['If you want process to process the output, read stdout like this'], ['Which will be easier on your memory.']], [[" cmd = subprocess.Popen(['ls'], stdout=subprocess.PIPE)\nfor line in cmd.stdout:\n    do_stuff(line)\n"]], ['is there a limit to command.getstatusoutput() buffer in python'], 2], [(2321155, 0), [["The GTK library for rendering SVG is called RSVG. It has python bindings, but they are undocumented, and they don't wrap the  rsvg_handle_get_pixbuf_sub()  and  rsvg_handle_render_cairo_sub()  functions which you would normally use for that purpose in C. Here's what you have to do as far as I can tell. You extract the XML node as Adam Crossland suggested. To render it, you have to do something like this:"], ["Sorry, I didn't read the python bindings closely enough at first. The  _sub()  functions are implemented using the  id=  argument, so your program can boil down to this:"]], [[' import gtk\nimport rsvg\nhandle = rsvg.Handle()\nhandle.write(buffer=xml_data) \n# xml_data is the XML string for the object you want\nimage = gtk.Image()\nimage.set_from_pixbuf(handle.get_pixbuf())\n']], ['How do I render *parts* of a svg file?'], 2], [(2321155, 1), [["Sorry, I didn't read the python bindings closely enough at first. The  _sub()  functions are implemented using the  id=  argument, so your program can boil down to this:"], ["I tested this and it works. However, the window is the size of the entire SVG canvas, and is clipped to the screen size (which is why I rendered the 3 of diamonds instead of the ace of clubs which is up in the corner.) So you'll still have to find some way to crop the pixbuf around the card that you want, but that shouldn't be too hard."]], [[' #!/usr/bin/env python\n\nimport gtk\nimport rsvg\n\nwindow = gtk.Window()\nwindow.set_title("Foo")\nwindow.connect("destroy", gtk.main_quit)\nwindow.show()\n\nsvg = rsvg.Handle(file=\'cards.svg\')\npixbuf = svg.get_pixbuf(id=\'#3_diamond\')\n\nimage = gtk.Image()\nimage.set_from_pixbuf(pixbuf)\nimage.show()\n\nwindow.add(image)\n\ngtk.main()\n']], ['How do I render *parts* of a svg file?'], 2], [(2321523, 0), [['-10000'], ["If you'd like to extract just the third post, then you could use"]], [[' import feedparser\nurl = "http://..."\nfeed = feedparser.parse(url)\nfor post in feed.entries:\n    title = post.title\n    print(title)\n']], ['Feedparser newbie questions'], 5], [(2321523, 1), [["If you'd like to extract just the third post, then you could use"], ["(since python uses 0-based indexing). Printing  post  might be helpful; it'll show you what information is available:"]], [[' post=feed.entries[2]\n']], ['Feedparser newbie questions'], 5], [(2321523, 2), [["(since python uses 0-based indexing). Printing  post  might be helpful; it'll show you what information is available:"], ['And finally, to grab just the title of the third post:']], [[' print post\n']], ['Feedparser newbie questions'], 5], [(2321523, 3), [['And finally, to grab just the title of the third post:'], ['or']], [[" print post['title']\n"]], ['Feedparser newbie questions'], 5], [(2321523, 4), [['or'], ['-10000']], [[' print post.title\n']], ['Feedparser newbie questions'], 5], [(2321939, 0), [["I wouldn't do it that way, personally. A far less hackish solution is to build a dictionary from your data first, and then pass it whole to a function as  **kwargs . For example (this isn't the most elegant way to do it, but it is illustrative):"], ['This prints:']], [[' import re\n\nremove_non_digits = re.compile(r\'[^\\d.]+\')\n\ninputList = ["a=\'0.015in\' lPrime=\'0.292\' offX=\'45um\' offY=\'75um\' sPrime=\'0.393\' twistLength=\'0\'",\n "a=\'0.015in\' lPrime=\'0.292\' offX=\'60um\' offY=\'75um\' sPrime=\'0.393\' twistLength=\'0\'",\n "a=\'0.015in\' lPrime=\'0.292\' offX=\'75um\' offY=\'75um\' sPrime=\'0.393\' twistLength=\'0\'", \'\']\n\n#remove empty strings\nflag = True\nwhile flag:\n    try:\n        inputList.remove(\'\')\n    except ValueError:\n        flag=False\n\noutputList = []\n\nfor varString in inputList:\n    varStringList = varString.split()\n    varDict = {}\n    for aVar in varStringList:\n        varList = aVar.split(\'=\')\n        varDict[varList[0]] = varList[1]\n    outputList.append(varDict)\n\nfor aDict in outputList:\n    for aKey in aDict:\n        aDict[aKey] = float(remove_non_digits.sub(\'\', aDict[aKey]))\n\nprint outputList\n']], ['assign output of print to a variable in python'], 2], [(2321939, 1), [['This prints:'], ['Which appears to be exactly what you want. ']], [[" [{'a': 0.014999999999999999, 'offY': 75.0, 'offX': 45.0, 'twistLength': 0.0, 'lPrime': 0.29199999999999998, 'sPrime': 0.39300000000000002}, {'a': 0.014999999999999999, 'offY': 75.0, 'offX': 60.0, 'twistLength': 0.0, 'lPrime': 0.29199999999999998, 'sPrime': 0.39300000000000002}, {'a': 0.014999999999999999, 'offY': 75.0, 'offX': 75.0, 'twistLength': 0.0, 'lPrime': 0.29199999999999998, 'sPrime': 0.39300000000000002}]\n"]], ['assign output of print to a variable in python'], 2], [(2322437, 0), [['If you want a way to create cheap pure python clones, share the dict object with the original object:'], ["Found a quick and dirty way that seems to at least somewhat work on 0.5.8 and 0.6. Didn't test it with inheritance or other features that might interact badly. Also, this touches some non-public API's, so beware of breakage when changing versions."]], [[' class CheapClone(object):\n    def __init__(self, original):\n        self.__dict__ = original.__dict__\n']], ['SqlAlchemy optimizations for read-only object models'], 3], [(2322437, 1), [["Found a quick and dirty way that seems to at least somewhat work on 0.5.8 and 0.6. Didn't test it with inheritance or other features that might interact badly. Also, this touches some non-public API's, so beware of breakage when changing versions."], ['Usage example:']], [[' from sqlalchemy.orm.attributes import ClassManager, instrumentation_registry\n\nclass ReadonlyClassManager(ClassManager):\n    """Enables configuring a mapper to return instances of uninstrumented \n    classes instead. To use add a readonly_type attribute referencing the\n    desired class to use instead of the instrumented one."""\n    def __init__(self, class_):\n        ClassManager.__init__(self, class_)\n        self.readonly_version = getattr(class_, \'readonly_type\', None)\n        if self.readonly_version:\n            # default instantiation logic doesn\'t know to install finders\n            # for our alternate class\n            instrumentation_registry._dict_finders[self.readonly_version] = self.dict_getter()\n            instrumentation_registry._state_finders[self.readonly_version] = self.state_getter()\n\n    def new_instance(self, state=None):\n        if self.readonly_version:\n            instance = self.readonly_version.__new__(self.readonly_version)\n            self.setup_instance(instance, state)\n            return instance\n        return ClassManager.new_instance(self, state)\n\nBase = declarative_base()\nBase.__sa_instrumentation_manager__ = ReadonlyClassManager\n']], ['SqlAlchemy optimizations for read-only object models'], 3], [(2322437, 2), [['Usage example:'], ['-10000']], [[" class ReadonlyFoo(object):\n    pass\n\nclass Foo(Base, ReadonlyFoo):\n    __tablename__ = 'foo'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(32))\n\n    readonly_type = ReadonlyFoo\n\nassert type(session.query(Foo).first()) is ReadonlyFoo\n"]], ['SqlAlchemy optimizations for read-only object models'], 3], [(2322642, 0), [['-10000'], ['You could use it like this:']], [[' import itertools\n\nclass Indexable(object):\n    def __init__(self,it):\n        self.it = iter(it)\n    def __iter__(self):\n        return self.it\n    def __getitem__(self,index):\n        try:\n            return next(itertools.islice(self.it,index,index+1))\n        except TypeError:\n            return list(itertools.islice(self.it,index.start,index.stop,index.step))\n']], ['Index and Slice a Generator in Python'], 3], [(2322642, 1), [['You could use it like this:'], ["Edit:  If you'd like  it[2:12:2]  to return  [3, 8, 21, 55, 144]  then perhaps use this instead:"]], [[' it = Indexable(fib())\nprint(it[10])\n#144\nprint(it[2:12:2])\n#[610, 1597, 4181, 10946, 28657]\n']], ['Index and Slice a Generator in Python'], 3], [(2322642, 2), [["Edit:  If you'd like  it[2:12:2]  to return  [3, 8, 21, 55, 144]  then perhaps use this instead:"], ['This version saves the results in  self.already_computed  and uses those results\nif possible. Otherwise, it computes more results until it has sufficiently many\nto return the indexed element or slice.']], [[' class Indexable(object):\n\n    def __init__(self, it):\n        self.it = iter(it)\n        self.already_computed = []\n\n    def __iter__(self):\n        for elt in self.it:\n            self.already_computed.append(elt)\n            yield elt\n\n    def __getitem__(self, index):\n        try:\n            max_idx = index.stop\n        except AttributeError:\n            max_idx = index\n        n = max_idx - len(self.already_computed) + 1\n        if n > 0:\n            self.already_computed.extend(itertools.islice(self.it, n))\n        return self.already_computed[index]\n']], ['Index and Slice a Generator in Python'], 3], [(2323147, 0), [['-10000'], ['alternatively']], [[' any(pred(x) for x in lst)\n']], ["Is there a Python equivalent of Ruby's 'any?' function?"], 2], [(2323147, 1), [['alternatively'], ['-10000']], [[' from itertools import imap\nany(imap(pred, lst))\n']], ["Is there a Python equivalent of Ruby's 'any?' function?"], 2], [(2324453, 0), [["I don't think it has an official name, it's just a clever/lazy way to be concise. It's roughly equivalent to:"], ['or:']], [[' a = b if b else {}\n']], ['What is the official name of this construct?'], 3], [(2324453, 1), [['or:'], ["Here's one way to do it that is safer:"]], [[' if b:\n    a = b\nelse:\n    a = {}\n']], ['What is the official name of this construct?'], 3], [(2324453, 2), [["Here's one way to do it that is safer:"], ['-10000']], [[' a = b if b is not None else {}\n']], ['What is the official name of this construct?'], 3], [(2326359, 0), [['-10000'], ["If you don't need to do it in place, it's even simpler"]], [[' >>>> l = [(1,2), (3,4)]\n>>>> for i, e in enumerate(l):\n....     l[i] = (e[0]+xk, e[1]+yk)\n']], ['Adding a constant tuple value to a list of tuples'], 2], [(2326359, 1), [["If you don't need to do it in place, it's even simpler"], ['-10000']], [[' >>>> l = [(e[0]+xk, e[1]+yk) for e in l]\n']], ['Adding a constant tuple value to a list of tuples'], 2], [(2327719, 0), [['You can do this with the  with  statement. For example:'], ['To be used like this:']], [[" import time    \nfrom contextlib import contextmanager\n\n@contextmanager  \ndef measureTime(title):\n    t1 = time.clock()\n    yield\n    t2 = time.clock()\n    print '%s: %0.2f seconds elapsed' % (title, t2-t1)\n"]], ['timing block of code in Python without putting it in a function'], 2], [(2327719, 1), [['To be used like this:'], ['-10000']], [[" def myFunc():\n    #...\n\n    with measureTime('myFunc'):\n        #block of code to time here\n\n    #...\n"]], ['timing block of code in Python without putting it in a function'], 2], [(2328464, 0), [["You don't have to do it that - using globals is considered bad practice for most uses. You can always return the data you want:"], ['EDIT:\nIf you need to initialize multiple values, or if you see yourself using too much globals to share state between many toplevel functions, then it is time to use a  class .']], [[' def initialize():\n    ... lots of initialization ...\n    return foo.bar.SomeClass(init_variable)\n\nif __name__ == "__main__":\n    myObject = initialize()\n    myObject.member1 # works\n']], ['Change the type of a global variable in a function initializing it'], 2], [(2328464, 1), [['EDIT:\nIf you need to initialize multiple values, or if you see yourself using too much globals to share state between many toplevel functions, then it is time to use a  class .'], ['-10000']], [[' class MyProgram(object):\n    def __init__(self):\n        # ... lots of initialization ...\n        self.myObject = foo.bar.SomeClass(init_variable)\n\n    def usage(self):\n        self.myObject.member1\n\nif __name__ == "__main__":\n    m = MyProgram()\n    m.usage()\n']], ['Change the type of a global variable in a function initializing it'], 2], [(2328493, 0), [['You can add an extra method onto the User class, using MonkeyPatching/DuckPunching:'], ['Now, you can query a User, and ask for the logs attached (for instance, in a view):']], [[' def logs(user):\n    return Log.objects.filter(email=user.email)\n\nfrom django.contrib.auth.models import User\nUser.logs = property(logs)\n']], ['Perform a SQL JOIN on Django models that are not related?'], 2], [(2328493, 1), [['Now, you can query a User, and ask for the logs attached (for instance, in a view):'], ['This type of process is common in the Ruby world, but seems to be frowned upon in Python.']], [[' user = request.user\nlogs = user.logs\n']], ['Perform a SQL JOIN on Django models that are not related?'], 2], [(2328767, 0), [["Be aware of specifying absolute paths in your  settings.py  file. Django doesn't come with an out-of-the-box solution for making everything relative, and you have to employ Python's utilities. The usual solution is something like:"], ['And then use it as follows:']], [[" import os\ndef abspath(file):\n    return os.path.join(os.path.dirname(__file__), file).replace('\\\\','/')\n"]], ['Any potential gotchas or things to be aware of for a newcomer to Django?'], 2], [(2328767, 1), [['And then use it as follows:'], ['etc.']], [[" DATABASE_NAME = abspath('mydb.db')\nMEDIA_ROOT = abspath('media/')\n"]], ['Any potential gotchas or things to be aware of for a newcomer to Django?'], 2], [(2330834, 0), [['proc1.py'], ['proc2.py']], [[" import cPickle\nfrom collections import namedtuple\n\nChanVal= namedtuple( 'ChanVal', ['eventTime','eventTimeExact', 'other_clock', ... ] )\nfor line socket:\n    c= ChanVal( **line.split(',') )\n    cPickle.dump( sys.stdout )\n"]], ['Getting fast translation of string data transmitted via a socket into objects in Python'], 3], [(2330834, 1), [['proc2.py'], ['This idea of processing namedtuples through a pipeline is very scalable.']], [[" import cPickle\nfrom collections import namedtuple\nChanVal= namedtuple( 'ChanVal', ['eventTime','eventTimeExact', 'other_clock', ... ] )\nwhile True:\n    item = cPickle.load( sys.stdin )\n    # processing\n    cPickle.dump( sys.stdout )\n"]], ['Getting fast translation of string data transmitted via a socket into objects in Python'], 3], [(2330834, 2), [['This idea of processing namedtuples through a pipeline is very scalable.'], ['-10000']], [[' python proc1.py | python proc2.py\n']], ['Getting fast translation of string data transmitted via a socket into objects in Python'], 3], [(2330857, 0), [['The string appears to be JSON.  '], ['Or it could be a Python dict.  Try ']], [[" import json\nobj= json.loads( aString )\nobj['session_key']\n"]], ["which is the best way to get the value of 'session_key','uid','expires'"], 2], [(2330857, 1), [['Or it could be a Python dict.  Try '], ['-10000']], [[" obj= eval(myString)\nobj['session_key']\n"]], ["which is the best way to get the value of 'session_key','uid','expires'"], 2], [(2331862, 0), [['Android code:'], ["And here's the python server side, using Django with GAE:"]], [['         url = new URL(SERVER_URL);\n        URLConnection connection = url.openConnection();\n        connection.setDoOutput(true);\n\n        OutputStreamWriter out = new OutputStreamWriter(\n                                  connection.getOutputStream());\n\n        String post_string;\n        post_string = "deviceID="+tm.getDeviceId().toString();\n\n        // send post string to server\n        out.write(post_string);\n        out.close();\n\n        //grab a return string from server\n        BufferedReader in = new BufferedReader(\n                    new InputStreamReader(\n                    connection.getInputStream()));\n\n        Toast.makeText(context, in.readLine(), Toast.LENGTH_SHORT).show();\n']], ['Android app uploading data to a python server via post'], 2], [(2331862, 1), [["And here's the python server side, using Django with GAE:"], ['-10000']], [[" def upload(request):\n    if request.method == 'POST':\n        deviceID = measurement.deviceID = str(request.POST['deviceID'])\n        return HttpResponse('Success!')\n    else:\n        return HttpResponse('Invalid Data')\n"]], ['Android app uploading data to a python server via post'], 2], [(2332164, 0), [['to do 1)  '], ["to do 3) though I've set this to be C-c F9 instead of Alt-F9"]], [[' (defun add-py-debug ()  \n      "add debug code and move line down"  \n    (interactive)  \n    (move-beginning-of-line 1)  \n    (insert "import pdb; pdb.set_trace();\\n"))  \n\n(local-set-key (kbd "<f9>") \'add-py-debug)\n']], ['Emacs: Set/Reset python debug breakpoint'], 3], [(2332164, 1), [["to do 3) though I've set this to be C-c F9 instead of Alt-F9"], ['and to do 4)']], [[' (defun remove-py-debug ()  \n  "remove py debug code, if found"  \n  (interactive)  \n  (let ((x (line-number-at-pos))  \n    (cur (point)))  \n    (search-forward-regexp "^[ ]*import pdb; pdb.set_trace();")  \n    (if (= x (line-number-at-pos))  \n    (let ()  \n      (move-beginning-of-line 1)  \n      (kill-line 1)  \n      (move-beginning-of-line 1))  \n      (goto-char cur))))  \n\n(local-set-key (kbd "C c <f9>") \'remove-py-debug)\n']], ['Emacs: Set/Reset python debug breakpoint'], 3], [(2332164, 2), [['and to do 4)'], ["Note, this is not the best elisp code in the world,  but I've tried to make it clear to you what's going on rather than make it totally idiomatic. The GNU Elsip book is a great place to start if you want to do more with elisp."]], [[' (local-set-key (kbd "<f3>") \'(lambda ()  \n                                 (interactive)   \n                                 (search-forward-regexp "^[ ]*import pdb; pdb.set_trace();")   \n                                 (move-beginning-of-line 1)))\n']], ['Emacs: Set/Reset python debug breakpoint'], 3], [(2334629, 0), [["I don't have an answer for point 1, but some hints for point 2 and 3. In your context, you're not modelling a physical 2D space but a conceptual space with tiles that have 6 neighbors. This can be modelled with square tiles arranged in columns with the odd colums shifted vertically by half the size of a square. I'll try an ASCII diagram:"], ['if j is even: ']], [['  ___     ___     ___     \n|   |___|   |___|   |___\n|___|   |___|   |___|   |\n|   |___|   |___|   |___|\n|___|   |___|   |___|   |\n|   |___|   |___|   |___|\n|___|   |___|   |___|   |\n    |___|   |___|   |___|\n']], ['Hexagonal Self-Organizing map in Python'], 3], [(2334629, 1), [['if j is even: '], ['if j is odd: ']], [[' (i+1, j), (i-1, j), (i, j-1), (i, j+1), (i-1, j-1), (i+1, j-1)\n']], ['Hexagonal Self-Organizing map in Python'], 3], [(2334629, 2), [['if j is odd: '], ['(the 4 first terms are identical)']], [[' (i+1, j), (i-1, j), (i, j-1), (i, j+1), (i+1, j-1), (i+1, j+1)\n']], ['Hexagonal Self-Organizing map in Python'], 3], [(2334698, 0), [['-10000'], ['So I would recommend']], [[" Q(question__startswith='Who') | ~Q(pub_date__year=2005)\n"]], ['Django queries: how to make contains OR not_contains queries'], 2], [(2334698, 1), [['So I would recommend'], ['-10000']], [[' Record.objects.filter( Q(parameter__icontains="wd2") | ~Q(parameter__icontains="wd") )\n']], ['Django queries: how to make contains OR not_contains queries'], 2], [(2335160, 0), [['The list is stored in  f.func_defaults .'], ['Result:']], [[" def f(a, L=[]):\n    L.append(a)\n    return L\n\nprint f(1)\nprint f(2)\nprint f(3)\nprint f.func_defaults\nf.func_defaults = (['foo'],) # Don't do this!\nprint f(4)\n"]], ['What is the scope of a defaulted parameter in Python?'], 2], [(2335160, 1), [['Result:'], ['-10000']], [[" [1]\n[1, 2]\n[1, 2, 3]\n([1, 2, 3],)\n['foo', 4]\n"]], ['What is the scope of a defaulted parameter in Python?'], 2], [(2335856, 0), [['-10000'], ['or the new style formatting:']], [[" >>> '%11.4f' % -3.5\n'    -3.5000'\n"]], ['Is fortran-like print in python possible?'], 2], [(2335856, 1), [['or the new style formatting:'], ['more about  format specifiers in the docs .']], [[" >>> '{:11.4f}'.format(-3.5)\n'    -3.5000'\n"]], ['Is fortran-like print in python possible?'], 2], [(2336270, 0), [['You can add the -u on the shebang line as interjay hinted'], ['You could also reopen stdout with buffering turned off or set to line buffering']], [[' #!/usr/bin/python -u\n']], ['Output of python scripts displayed only at termination when using SSH?'], 2], [(2336270, 1), [['You could also reopen stdout with buffering turned off or set to line buffering'], ['Usually line buffering is a good choice']], [[" import os,sys\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0) # no buffering\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 1) # line buffering\n"]], ['Output of python scripts displayed only at termination when using SSH?'], 2], [(2336961, 0), [['In order to remove the arrays from my SOAP requests, I modified the  dump_list()  function in the  SOAPBuilder  class of the SOAPpy library.'], ['This change gives me the following output for my SOAP XML request.']], [[' # COMMENT: We dont want arrays in SOAP-XML so I commented out the following lines\n# if typed:\n#    self.out.append(\n#        \'<%s %sarrayType="%s[%d]" %stype="%sArray"%s%s%s%s%s%s>\\n\' %\n#        (tag, ens, t, len(data), ins, ens, ndecl, edecl, idecl,\n#         self.genroot(ns_map), id, a))\n\n#if typed:\n#    try: elemsname = obj._elemsname\n#    except: elemsname = "item"\n#else:\nelemsname = tag\n\nfor i in data:\n    self.dump(i, elemsname, not same_type, ns_map)\n\n#if typed: self.out.append(\'</%s>\\n\' % tag)\n']], ['How do I pass a list parameter as multiple link-named elements instead of as an array in SOAPpy?'], 2], [(2336961, 1), [['This change gives me the following output for my SOAP XML request.'], ['-10000']], [[' <SOAP-ENV:Body>\n<ns1:executeCommand xmlns:ns1="urn:SoapOAM">\n<xsd:in-cmd>\n<m-strName xsi:type="xsd:string">set-log-level</m-strName>\n<m-argVector>ERROR_LOG_LEVEL</m-argVector>\n<m-argVector>netborder</m-argVector>\n</xsd:in-cmd>\n</ns1:executeCommand>\n</SOAP-ENV:Body>\n']], ['How do I pass a list parameter as multiple link-named elements instead of as an array in SOAPpy?'], 2], [(2337285, 0), [['The documentation is out of date. Use the source, Luke. I do it something like this.'], ['This prints the following.']], [[" from xml.dom.minidom import DOMImplementation\n\nimp = DOMImplementation()\ndoctype = imp.createDocumentType(\n    qualifiedName='foo',\n    publicId='', \n    systemId='http://www.path.to.my.dtd.com/my.dtd',\n)\ndoc = imp.createDocument(None, 'foo', doctype)\ndoc.toxml()\n"]], ['Set a DTD using minidom in python'], 2], [(2337285, 1), [['This prints the following.'], ["Note how the root element is created automatically by createDocument(). Also, your 'something' has been changed to 'foo': the DTD needs to contain the root element name itself."]], [[' <?xml version="1.0" ?><!DOCTYPE foo  SYSTEM \\\'http://www.path.to.my.dtd.com/my.dtd\\\'><foo/>\n']], ['Set a DTD using minidom in python'], 2], [(2338531, 0), [['-10000'], ["Here's another way to do the same thing that you will often see used:"]], [[' somelist.sort(key = lambda x: x.resultType)\n']], ['Python sorting - A list of objects'], 2], [(2338531, 1), [["Here's another way to do the same thing that you will often see used:"], ["You might also want to look at  sorted  if you haven't seen it already. It doesn't modify the original list - it returns a new sorted list."]], [[" import operator\ns.sort(key = operator.attrgetter('resultType'))\n"]], ['Python sorting - A list of objects'], 2], [(2339358, 0), [['You can duplicate code to avoid the finally block:'], ['Becomes:']], [[' try:\n  yield 42\nfinally:\n  do_something()\n']], ["Workaround for python 2.4's yield not allowed in try block with finally clause"], 2], [(2339358, 1), [['Becomes:'], ["(I've not tried this on Python 2.4, you may have to look at sys.exc_info instead of the  re-raise  statement above, as in  raise sys.exc_info[0], sys.exc_info[1], sys.exc_info[2] .)"]], [[' try:\n  yield 42\nexcept:  # bare except, catches *anything*\n  do_something()\n  raise  # re-raise same exception\ndo_something()\n']], ["Workaround for python 2.4's yield not allowed in try block with finally clause"], 2], [(2341314, 0), [['views.py'], ['upload.html']], [[' from django import forms\nfrom django.shortcuts import render_to_response\n\nclass UploadForm(forms.Form):\n    cpk = forms.CharField(max_length=256)\n    f = forms.FileField()\n\ndef my_upload_view(request):\n    if request.method == \'POST\':\n        form = UploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            print "Got cpk",form.cleaned_data[\'cpk\']\n            print "Got file",request.FILES[\'f\'].read()\n    else:\n        form = UploadForm()\n    return render_to_response(\'upload.html\', {\'form\':form})\n']], ['Django 1.1.1 chokes on multipart/form-data'], 2], [(2341314, 1), [['upload.html'], ['I\'m using the django form instance to render the file input, but it renders the very common  <input type="file" name="f" id="id_f" /> .']], [[' <html>\n<body>\n    <form enctype="multipart/form-data" method="post">\n        {{ form.f }}\n        {{ form.cpk }}\n        <input type="submit" />\n    </form>\n</body>\n</html>\n']], ['Django 1.1.1 chokes on multipart/form-data'], 2], [(2341972, 0), [['You need to include an encoding when converting to a string, for example use:'], ["If you don't use an encoding then as you've discovered you get something a little less helpful:"]], [[" >>> str(b'GET http://...', 'UTF-8')\n'GET http://...'\n"]], ['Python socket data returns <byte> object. How to regexp it?'], 2], [(2341972, 1), [["If you don't use an encoding then as you've discovered you get something a little less helpful:"], ['-10000']], [[' >>> str(b\'GET http://...\')\n"b\'GET http://...\'"\n']], ['Python socket data returns <byte> object. How to regexp it?'], 2], [(2343535, 0), [["I've used this strategy in the past and been pretty happy with it:  Encode your custom objects as JSON object literals (like Python  dict s) with the following structure:"], ["A very simple implementation of an encoder and a decoder (simplified from code I've actually used) is like so:"]], [[" { '__ClassName__': { ... } }\n"]], ['Easiest way to serialize a simple class object with simplejson?'], 4], [(2343535, 1), [["A very simple implementation of an encoder and a decoder (simplified from code I've actually used) is like so:"], ['EDIT , to answer your edit:  The nice thing about an implementation like this is that it will automatically encode and decode instances of any object found in the  TYPES  mapping.  That means that it will automatically handle a ChildClass like so:']], [[' TYPES = { \'ParentClass\': ParentClass,\n          \'ChildClass\': ChildClass }\n\n\nclass CustomTypeEncoder(json.JSONEncoder):\n    """A custom JSONEncoder class that knows how to encode core custom\n    objects.\n\n    Custom objects are encoded as JSON object literals (ie, dicts) with\n    one key, \'__TypeName__\' where \'TypeName\' is the actual name of the\n    type to which the object belongs.  That single key maps to another\n    object literal which is just the __dict__ of the object encoded."""\n\n    def default(self, obj):\n        if isinstance(obj, TYPES.values()):\n            key = \'__%s__\' % obj.__class__.__name__\n            return { key: obj.__dict__ }\n        return json.JSONEncoder.default(self, obj)\n\n\ndef CustomTypeDecoder(dct):\n    if len(dct) == 1:\n        type_name, value = dct.items()[0]\n        type_name = type_name.strip(\'_\')\n        if type_name in TYPES:\n            return TYPES[type_name].from_dict(value)\n    return dct\n']], ['Easiest way to serialize a simple class object with simplejson?'], 4], [(2343535, 2), [['EDIT , to answer your edit:  The nice thing about an implementation like this is that it will automatically encode and decode instances of any object found in the  TYPES  mapping.  That means that it will automatically handle a ChildClass like so:'], ['That should result in JSON something like the following:']], [[" class ChildClass(object):\n    def __init__(self):\n        self.foo = 'foo'\n        self.bar = 1.1\n        self.parent = ParentClass(1)\n"]], ['Easiest way to serialize a simple class object with simplejson?'], 4], [(2343535, 3), [['That should result in JSON something like the following:'], ['-10000']], [[" { '__ChildClass__': {\n    'bar': 1.1,\n    'foo': 'foo',\n    'parent': {\n        '__ParentClass__': {\n            'foo': 1}\n        }\n    }\n}\n"]], ['Easiest way to serialize a simple class object with simplejson?'], 4], [(2344994, 0), [['You can define non-persistent fields in your model.'], ['Alternatively, you can do:']], [[' class Foo(models.Model):\n    name = models.CharField(max_length=50)\n    extra_param = False\n\ndef save(self, *args, **kwargs):\n    ... \n    print self.extra_param\n']], ['Extra parameter for Django models'], 2], [(2344994, 1), [['Alternatively, you can do:'], ['-10000']], [[' Foo(name="Bill Gates").save(extra_param=True)\n\ndef save(self, *args, **kwargs):\n    ... \n    print kwargs["extra_param"]\n']], ['Extra parameter for Django models'], 2], [(2345384, 0), [["I don't know what that one-character-a-line is about because you didn't tell us the reason, but the  textwrap  module will give you what you want:"], ['I reconstructed your original code from your comment, and this is a corrected version:']], [[' s="WE THE PEOPLE OF THE UNITED STATES, IN ORDER TO FORM A MORE PERFECT UNION, ESTABLISH JUSTICE, INSURE DOMESTIC TRANQUILITY, PROVIDE FOR THE COMMON DEFENSE, PROMOTE THE GENERAL WELFARE, AND SECURE THE BLESSINGS OF LIBERTY TO OURSELVES AND OUR POSTERITY, DO ORDAIN AND ESTABLISH THIS CONSTITUTION FOR THE UNITED STATES OF AMERICA."\n\nimport textwrap\nprint "\\n".join(textwrap.wrap(s, 80))\n']], ['What is the Python code to split up a string so that it prints out normally in an 80-character window without wrapping?'], 2], [(2345384, 1), [['I reconstructed your original code from your comment, and this is a corrected version:'], ['-10000']], [[' # You don\'t even use this so why import it? --> import string\n\ndef main():\n    user_string = raw_input()\n    all_caps = user_string.upper() # guess you wanted to make it uppercase\n    output = [] # this will hold the decoded characters\n\n    for char in all_caps:\n        if char.isalpha():\n            value = ord(char)\n            if 70 <= value <= 90: # look at this, almost no other programming language supports that syntax\n                num = value - 5\n            elif 65 <= value <= 69:\n                num = value + 21\n            output.append(chr(num)) # add the decoded character to the output list\n        else:\n            output.append(char) # add the character verbatim to the output list (e.g. whitespace)\n\n    print "".join(output) # print out the list by putting it together into a string\n\nmain()\n']], ['What is the Python code to split up a string so that it prints out normally in an 80-character window without wrapping?'], 2], [(2345862, 0), [['why not just:'], ['Although I have to wonder if that would be slower than just plain:']], [[" if x in set(request.session['vote_set'])\n"]], ['Does turning a list into a set, then back again, cause problems in Python?'], 2], [(2345862, 1), [['Although I have to wonder if that would be slower than just plain:'], ['And ordering, as others have mentioned, would potentially (most likely) be lost.']], [[" if x in request.session['vote_set']\n"]], ['Does turning a list into a set, then back again, cause problems in Python?'], 2], [(2347388, 0), [['Why not do:'], ['Then you can do:']], [[' big(lite, (1, 2, 3))\n']], ['Python: passing a function with parameters as parameter'], 2], [(2347388, 1), [['Then you can do:'], ['-10000']], [[' def big(func, args):\n    func(*args)\n']], ['Python: passing a function with parameters as parameter'], 2], [(2348960, 0), [['The example hear the end of that page worked for me, you just need to explicitly create the conversion, for example:'], ['To modify the C++ class without changing it, I am in the habit of creating a thin wrapper that subclasses the real class.  This makes a nice place to separate out all the crud that makes my C++ objects feel comfortable from Python.']], [['   class_<std::list<Item> >("ItemList")\n    .def("__iter__", iterator<std::list<Item> >());\n']], ['How can I use Boost::Python to add a method to an exported class without modifying the base class?'], 2], [(2348960, 1), [['To modify the C++ class without changing it, I am in the habit of creating a thin wrapper that subclasses the real class.  This makes a nice place to separate out all the crud that makes my C++ objects feel comfortable from Python.'], ['-10000']], [['   class Py_BaseClass : public BaseClass {\n  public:\n    std::list<Item> & py_get_items();\n  }\n']], ['How can I use Boost::Python to add a method to an exported class without modifying the base class?'], 2], [(2349991, 0), [['importlib  is recent addition in Python to programmatically import a module. It just a wrapper around  __import__  \nSee  https://docs.python.org/3/library/importlib.html#module-importlib'], ["You can use the  __import__  function. It takes the module name as a string. (Again: module name without the '.py' extension.)"]], [[" moduleName = input('Enter module name:')\nimport_module(moduleName)\n"]], ['Python: How to import other Python files'], 2], [(2349991, 1), [["You can use the  __import__  function. It takes the module name as a string. (Again: module name without the '.py' extension.)"], ['Type  help(__import__)  for more details.']], [[" pmName = input('Enter module name:')\npm = __import__(pmName)\nprint(dir(pm))\n"]], ['Python: How to import other Python files'], 2], [(2350390, 0), [["Edit : for example, given the OP's code, and assuming  _exec  is a free-standing function since the OP's giving no  class  where it could live, add at the end:"], ["and you'll see this output:"]], [[' print \'one: %r\' % _exec(None, \'"foo"\', \'range\', 7)\nprint \'two: %r\' % allowed_builtins[\'result\']\n']], ['Python Eval executing enviroment'], 2], [(2350390, 1), [["and you'll see this output:"], ['the  result  in the  __dict__  of the current module is of course not affected (how could it conceivably  be , since that dict is never passed to the  exec  in question?!) -- the  allowed_builtins  dictionary is of course the one affected, since it\'s the dict passed as the "global dictionary" and there  is  a  global  statement in the string being  exec uted!']], [[" one: ''\ntwo: [0, 1, 2, 3, 4, 5, 6]\n"]], ['Python Eval executing enviroment'], 2], [(2351857, 0), [['I rather had to change the line:'], ['to:']], [[' separate_in \\n\n']], ['IPython - single line spacing possible?'], 2], [(2351857, 1), [['to:'], ['-10000']], [[' separate_in 0\n']], ['IPython - single line spacing possible?'], 2], [(2352181, 0), [['You can do it using this class I just made. With this class you can use the  Map  object like another dictionary(including json serialization) or with the dot notation. I hope to help you:'], ['Usage examples:']], [[' class Map(dict):\n    """\n    Example:\n    m = Map({\'first_name\': \'Eduardo\'}, last_name=\'Pool\', age=24, sports=[\'Soccer\'])\n    """\n    def __init__(self, *args, **kwargs):\n        super(Map, self).__init__(*args, **kwargs)\n        for arg in args:\n            if isinstance(arg, dict):\n                for k, v in arg.iteritems():\n                    self[k] = v\n\n        if kwargs:\n            for k, v in kwargs.iteritems():\n                self[k] = v\n\n    def __getattr__(self, attr):\n        return self.get(attr)\n\n    def __setattr__(self, key, value):\n        self.__setitem__(key, value)\n\n    def __setitem__(self, key, value):\n        super(Map, self).__setitem__(key, value)\n        self.__dict__.update({key: value})\n\n    def __delattr__(self, item):\n        self.__delitem__(item)\n\n    def __delitem__(self, key):\n        super(Map, self).__delitem__(key)\n        del self.__dict__[key]\n']], ['How to use a dot "." to access members of dictionary?'], 2], [(2352181, 1), [['Usage examples:'], ['-10000']], [[" m = Map({'first_name': 'Eduardo'}, last_name='Pool', age=24, sports=['Soccer'])\n# Add new key\nm.new_key = 'Hello world!'\n# Or\nm['new_key'] = 'Hello world!'\nprint m.new_key\nprint m['new_key']\n# Update values\nm.new_key = 'Yay!'\n# Or\nm['new_key'] = 'Yay!'\n# Delete key\ndel m.new_key\n# Or\ndel m['new_key']\n"]], ['How to use a dot "." to access members of dictionary?'], 2], [(2353112, 0), [['This works for me (turns the led on and off as well as enable/disable caps)'], ['Here are some more examples']], [[" import virtkey\n\nv = virtkey.virtkey()\nv.press_keycode(66)\nv.release_keycode(66)  # first release doesn't release it\nv.release_keycode(66)\n"]], ['Anybody know how to toggle caps lock on/off in Python?'], 3], [(2353112, 1), [['Here are some more examples'], ['You can also get a toggle like behaviour just using release_keycode']], [[' v.press_keycode(66)    # turns capslock on\nv.release_keycode(66)\nv.press_keycode(66)    # turns capslock off\nv.release_keycode(66)\n']], ['Anybody know how to toggle caps lock on/off in Python?'], 3], [(2353112, 2), [['You can also get a toggle like behaviour just using release_keycode'], ['-10000']], [[' v.release_keycode(66)  # toggles capslock\nv.release_keycode(66)  # toggles back again capslock\n']], ['Anybody know how to toggle caps lock on/off in Python?'], 3], [(2353140, 0), [['The first you describe is very common. Some use the shorter'], ["Your second approach isn't common, but a similar version is this:"]], [[' class Foo:\n   def __init__(self, foo, bar):\n       self.foo, self.bar = foo, bar\n']], ['Python 3 object construction: which is the most Pythonic / the accepted way?'], 6], [(2353140, 1), [["Your second approach isn't common, but a similar version is this:"], ['which allows to create objects like']], [[" class Thing:\n   def __init__(self, **kwargs):\n       self.something = kwargs['something']\n       #..\n"]], ['Python 3 object construction: which is the most Pythonic / the accepted way?'], 6], [(2353140, 2), [['which allows to create objects like'], ['This can be further modified to ']], [[' t = Thing(something=1)\n']], ['Python 3 object construction: which is the most Pythonic / the accepted way?'], 6], [(2353140, 3), [['This can be further modified to '], ['allowing']], [[' class Thing:\n   def __init__(self, **kwargs):\n       self.__dict__.update(kwargs)\n']], ['Python 3 object construction: which is the most Pythonic / the accepted way?'], 6], [(2353140, 4), [['allowing'], ['As Debilski points out in the comments, the last method is a bit unsafe, you can add a list of accepted parameters like this:']], [[' t = Thing(a=1, b=2, c=3)\nprint t.a, t.b, t.c # prints 1, 2, 3\n']], ['Python 3 object construction: which is the most Pythonic / the accepted way?'], 6], [(2353140, 5), [['As Debilski points out in the comments, the last method is a bit unsafe, you can add a list of accepted parameters like this:'], ['There are many variations, there is no common standard that I am aware of.']], [[" class Thing:\n    keywords = 'foo', 'bar', 'snafu', 'fnord'\n    def __init__(self, **kwargs):\n        for kw in self.keywords:\n            setattr(self, kw, kwargs[kw])\n"]], ['Python 3 object construction: which is the most Pythonic / the accepted way?'], 6], [(2353768, 0), [['-10000'], ['You can also use the result as a boolean value ']], [[' >>> import networkx as nx\n>>> G=nx.empty_graph()\n>>> G.add_edge(1,2)\n>>> G.add_edge(2,3)\n>>> G.add_edge(4,5)\n>>> nx.path.bidirectional_dijkstra(G,1,2)\n(1, [1, 2])\n>>> nx.path.bidirectional_dijkstra(G,1,3)\n(2, [1, 2, 3])\n>>> nx.path.bidirectional_dijkstra(G,1,4)\nFalse\n>>> nx.path.bidirectional_dijkstra(G,1,5)\nFalse\n>>> \n']], ['Python: How to find if a path exists between 2 nodes in a graph?'], 2], [(2353768, 1), [['You can also use the result as a boolean value '], ['-10000']], [[' >>> if nx.path.bidirectional_dijkstra(G,1,2): print "path exists"\n... \npath exists\n>>> if nx.path.bidirectional_dijkstra(G,1,4): print "path exists"\n... \n>>> \n']], ['Python: How to find if a path exists between 2 nodes in a graph?'], 2], [(2356551, 0), [['Something like:'], ['Now that I understand your question, try this:']], [[' Post.objects.filter(author=user)\n']], ['Django -- How to filter objects with an "author" from a set of "authors"(users)?'], 2], [(2356551, 1), [['Now that I understand your question, try this:'], ['Where users is the set of users']], [[' Post.objects.filter(author__in=users)\n']], ['Django -- How to filter objects with an "author" from a set of "authors"(users)?'], 2], [(2356651, 0), [['Something like this maybe:'], ["Here's an example of redirecting  stdout  and  stderr :"]], [[" import logging, traceback\nlogging.basicConfig(filename=r'C:\\Temp\\log.txt', level=logging.DEBUG)\n\ntry:\n    #do some stuff\n    logging.debug('I did some stuff!')\nexcept SomeException:\n    logging.error(traceback.format_exc())\n"]], ['How do you make Python wait so that you can read the output?'], 2], [(2356651, 1), [["Here's an example of redirecting  stdout  and  stderr :"], ["I'm going to point out that this is not the easiest or most straight forward way to go."]], [[" if __name__ == '__main__':\n    save_out = sys.stdout  # save the original stdout so you can put it back later\n    out_file = open(r'C:\\Temp\\out.txt', 'w')\n    sys.stdout = out_file\n\n    save_err = sys.stderr\n    err_file = open(r'C:\\Temp\\err.txt', 'w')\n    sys.stderr = err_file\n\n    main()  #call your main function\n\n    sys.stdout = save_out  # set stdout back to it's original object\n    sys.stderr = save_err\n\n    out_file.close()\n    err_file.close()\n"]], ['How do you make Python wait so that you can read the output?'], 2], [(2357686, 0), [['Here is one way:'], ['If  X  is given to you as only (9,4), then']], [[' import scipy\nX = scipy.rand(9,4,1)\nY = X.repeat(4096,2)\n']], ['numpy: extending arrays along a new axis?'], 2], [(2357686, 1), [['If  X  is given to you as only (9,4), then'], ['-10000']], [[' import scipy\nX = scipy.rand(9,4)\nY = X.reshape(9,4,1).repeat(4096,2)\n']], ['numpy: extending arrays along a new axis?'], 2], [(2358634, 0), [['You can find aggregate functions in: '], ['In 0.5 you can use an ORM query like a select:']], [[' from sqlalchemy import func \nfunc.avg(...) \nfunc.sum(...) \nfunc.max(...) \n']], ['Database-Independent MAX() Function in SQLAlchemy'], 2], [(2358634, 1), [['In 0.5 you can use an ORM query like a select:'], ['-10000']], [[' session.query(func.max(Table.column)) \n']], ['Database-Independent MAX() Function in SQLAlchemy'], 2], [(2358890, 0), [['Adapting the tokenizer to your problem:'], ['To test it, we do:']], [[' import re\n\ntoken_pattern = r"""\n(?P<identifier>[a-zA-Z_][a-zA-Z0-9_]*)\n|(?P<integer>[0-9]+)\n|(?P<dot>\\.)\n|(?P<open_variable>[$][{])\n|(?P<open_curly>[{])\n|(?P<close_curly>[}])\n|(?P<newline>\\n)\n|(?P<whitespace>\\s+)\n|(?P<equals>[=])\n|(?P<slash>[/])\n"""\n\ntoken_re = re.compile(token_pattern, re.VERBOSE)\n\nclass TokenizerException(Exception): pass\n\ndef tokenize(text):\n    pos = 0\n    while True:\n        m = token_re.match(text, pos)\n        if not m: break\n        pos = m.end()\n        tokname = m.lastgroup\n        tokvalue = m.group(tokname)\n        yield tokname, tokvalue\n    if pos != len(text):\n        raise TokenizerException(\'tokenizer stopped at pos %r of %r\' % (\n            pos, len(text)))\n']], ['Python - lexical analysis and tokenization'], 3], [(2358890, 1), [['To test it, we do:'], ['for:']], [[" stuff = r'property.${general.name}.ip = ${general.ip}'\nstuff2 = r'''\ngeneral {\n  name = myname\n  ip = 127.0.0.1\n}\n'''\n\nprint ' stuff '.center(60, '=')\nfor tok in tokenize(stuff):\n    print tok\n\nprint ' stuff2 '.center(60, '=')\nfor tok in tokenize(stuff2):\n    print tok\n"]], ['Python - lexical analysis and tokenization'], 3], [(2358890, 2), [['for:'], ['-10000']], [[" ========================== stuff ===========================\n('identifier', 'property')\n('dot', '.')\n('open_variable', '${')\n('identifier', 'general')\n('dot', '.')\n('identifier', 'name')\n('close_curly', '}')\n('dot', '.')\n('identifier', 'ip')\n('whitespace', ' ')\n('equals', '=')\n('whitespace', ' ')\n('open_variable', '${')\n('identifier', 'general')\n('dot', '.')\n('identifier', 'ip')\n('close_curly', '}')\n========================== stuff2 ==========================\n('newline', '\\n')\n('identifier', 'general')\n('whitespace', ' ')\n('open_curly', '{')\n('newline', '\\n')\n('whitespace', '  ')\n('identifier', 'name')\n('whitespace', ' ')\n('equals', '=')\n('whitespace', ' ')\n('identifier', 'myname')\n('newline', '\\n')\n('whitespace', '  ')\n('identifier', 'ip')\n('whitespace', ' ')\n('equals', '=')\n('whitespace', ' ')\n('integer', '127')\n('dot', '.')\n('integer', '0')\n('dot', '.')\n('integer', '0')\n('dot', '.')\n('integer', '1')\n('newline', '\\n')\n('close_curly', '}')\n('newline', '\\n')\n"]], ['Python - lexical analysis and tokenization'], 3], [(2360598, 0), [['In  Python3.4+  (thanks to J.F. Sebastian for the update):'], ['In  Python3.3  or older:']], [[' import html\nhtml.unescape(\'Suzy &amp; John\')\n# \'Suzy & John\'\n\nhtml.unescape(\'&quot;\')\n# \'"\'\n']], ['How do I unescape HTML entities in a string in Python 3.1?'], 3], [(2360598, 1), [['In  Python3.3  or older:'], ['In  Python2 :']], [[" import html.parser    \nhtml.parser.HTMLParser().unescape('Suzy &amp; John')\n"]], ['How do I unescape HTML entities in a string in Python 3.1?'], 3], [(2360598, 2), [['In  Python2 :'], ['-10000']], [[" import HTMLParser\nHTMLParser.HTMLParser().unescape('Suzy &amp; John')\n"]], ['How do I unescape HTML entities in a string in Python 3.1?'], 3], [(2360638, 0), [['1) to pass the id in the  /detail/(\\d)  url, you want something like this:'], ['2) to ensure your  Index.py  catches everything, you want something like this:']], [[" class DetailHandler(webapp.RequestHandler):\n    def get(self, detail_id):\n      # put your code here, detail_id contains the passed variable\n\ndef main():\n  # Note the wildcard placeholder in the url matcher\n  application = webapp.WSGIApplication([('/details/(.*)', DetailHandler)]\n  wsgiref.handlers.CGIHandler().run(application)\n"]], ['Google App Engine: Give arguments to a script from URL handler?'], 2], [(2360638, 1), [['2) to ensure your  Index.py  catches everything, you want something like this:'], ['Hope that helps.']], [[" class IndexHandler(webapp.RequestHandler):\n    def get(self):\n      # put your handler code here\n\ndef main():\n  # Note the wildcard without parens\n  application = webapp.WSGIApplication([('/.*', IndexHandler)]\n  wsgiref.handlers.CGIHandler().run(application)\n"]], ['Google App Engine: Give arguments to a script from URL handler?'], 2], [(2361764, 0), [['The magic library to achieve this is called  Babel . Does what I want:'], ['-10000']], [["Before import locale\nsetlocale(LC_ALL, 'de')\nx = locale.format('%.2f', 123)\nsetlocale(LC_ALL, '')\n"]], ["Python: Access Posix' locale database without setlocale()"], 2], [(2361764, 1), [['-10000'], ['...and has a good Djang integration gratis.']], [["After from babel.numbers import format_decimal\nx = format_decimal(123, format='#0.00', locale='de')\n"]], ["Python: Access Posix' locale database without setlocale()"], 2], [(2363954, 0), [['First create a function which can load a given file, as you may want to maintain individual sets and also want to count occurrence of each number, best would be to have a dict for whole file where keys are set names e.g. complex.1 etc, for each such set keep another dict for numbers in set, below code explains it better'], ['Now you can easily write a function which will count a number in given file_dict']], [[" def file_loader(f):\n    file_dict = {}\n    current_set = None\n    for line in f:\n        if line.startswith('d.complex'):\n            file_dict[line] = current_set = {}\n            continue\n\n        if current_set is not None:\n            current_set[line] = current_set.get(line, 0)\n\n    return file_dict\n"]], ['Comparing two lists items in python'], 4], [(2363954, 1), [['Now you can easily write a function which will count a number in given file_dict'], ['e.g here is a usage example']], [[' def count_number(file_dict, num):\n    count = 0\n    for set_name, number_set in file_dict.iteritems():\n        count += number_set.get(num, 0)\n\n    return count\n']], ['Comparing two lists items in python'], 4], [(2363954, 2), [['e.g here is a usage example'], ['output is:']], [[' s = """d.complex.1\n10\n11\n12\n10\n11\n12"""\n\nfile_dict = file_loader(s.split("\\n"))\nprint file_dict\nprint count_number(file_dict, \'10\')\n']], ['Comparing two lists items in python'], 4], [(2363954, 3), [['output is:'], ['You may have to improve file loader, e.g. skip empty lines, convert to int etc']], [[" {'d.complex.1': {'11': 2, '10': 2, '12': 2}}\n2\n"]], ['Comparing two lists items in python'], 4], [(2364382, 0), [['You want to convert  list_2  to a set, and check for membership:'], ['Outputs:']], [[" list_1 = ['a', 'big', 'list']\nlist_2 = ['another', 'big', 'list']\n\ntarget_set = set(list_2)\n\nfor a in list_1:\n    if a in target_set:\n         print a\n"]], ['Avoiding nesting two for loops'], 2], [(2364382, 1), [['Outputs:'], ['A set gives you the advantage of O(1) access time to determine membership, so you only have to read all the way through  list_2  once (when creating the set).  Thereafter, each comparison happens in constant time.']], [[' big\nlist\n']], ['Avoiding nesting two for loops'], 2], [(2367338, 0), [['Are you aware of the fact that  COPY FROM  lets you specify which columns (as well as in which order they) are to be imported?'], ['This having been said, there is a much simpler (and portable) way of using  sed  (than what has been presented in other posts) to  replace an  n  th occurrence , e.g. replace the 4th and 5th occurrences of a comma with double commas:']], [[' COPY tablename ( column1, column2, ... ) FROM ...\n']], ['Sed script to edit csv file Or Python'], 8], [(2367338, 1), [['This having been said, there is a much simpler (and portable) way of using  sed  (than what has been presented in other posts) to  replace an  n  th occurrence , e.g. replace the 4th and 5th occurrences of a comma with double commas:'], ['produces:']], [[" echo '1,23,56,we,89,2009-12-06' | sed -e 's/,/,,/5;s/,/,,/4'\n"]], ['Sed script to edit csv file Or Python'], 8], [(2367338, 2), [['produces:'], ['I see that you have also tagged your question as  perl -related, although you make no explicit reference to  perl  in the body of the question; here would be one possible implementation which gives you the flexibility of also reordering or otherwise processing fields:']], [[' 1,23,56,we,,89,,2009-12-06\n']], ['Sed script to edit csv file Or Python'], 8], [(2367338, 3), [['I see that you have also tagged your question as  perl -related, although you make no explicit reference to  perl  in the body of the question; here would be one possible implementation which gives you the flexibility of also reordering or otherwise processing fields:'], ['also produces:']], [[' echo \'1,23,56,we,89,2009-12-06\' |\n  perl -F/,/ -nae \'print "$F[0],$F[1],$F[2],$F[3],,$F[4],,$F[5]"\'\n']], ['Sed script to edit csv file Or Python'], 8], [(2367338, 4), [['also produces:'], ['Very similarly with  awk , for the record:']], [[' 1,23,56,we,,89,,2009-12-06\n']], ['Sed script to edit csv file Or Python'], 8], [(2367338, 5), [['Very similarly with  awk , for the record:'], ["Small note on the Perl example: I am using the  -a  and  -F  options to autosplit so I have a shorter command string; however, this leaves the newline embedded in the last field ( $F[5] ) which is fine as long as that field doesn't have to be reordered somewhere else. Should that situation arise, slightly more typing would be needed in order to zap the newline via  chomp , then  split  by hand and finally print our own newline character  \\n  (the  awk  example above does not have this problem):"]], [[' echo \'1,23,56,we,89,2009-12-06\' |\n  awk -F, \'{print $1","$2","$3","$4",,"$5",,"$6}\'\n']], ['Sed script to edit csv file Or Python'], 8], [(2367338, 6), [["Small note on the Perl example: I am using the  -a  and  -F  options to autosplit so I have a shorter command string; however, this leaves the newline embedded in the last field ( $F[5] ) which is fine as long as that field doesn't have to be reordered somewhere else. Should that situation arise, slightly more typing would be needed in order to zap the newline via  chomp , then  split  by hand and finally print our own newline character  \\n  (the  awk  example above does not have this problem):"], ['-10000']], [[' perl -ne \'chomp;@F=split/,/;print "$F[0],$F[1],$F[2],$F[3],,$F[4],,$F[5]\\n"\'\n']], ['Sed script to edit csv file Or Python'], 8], [(2367338, 7), [['-10000'], ["Sorry, couldn't resist it. :)"]], [['EDIT (an idea inspired by Vivin): COMMAS_TO_DOUBLE="1 4 5"\necho \'1,23,56,we,89,2009-12-06\' |\n  sed -e `for f in $COMMAS_TO_DOUBLE ; do echo "s/,/,,/$f" ; done |\n    sort -t/ -k4,4nr | paste -s -d \';\'`\n\n1,,23,56,we,,89,,2009-12-06\n']], ['Sed script to edit csv file Or Python'], 8], [(2367892, 0), [['In /etc/crontab:'], ['Second, I usually add something to my script that (almost) cannot possibly fail, like the following:']], [[' MAILTO=username\n']], ['How do I know if jobs have been/are performing? - Crontab'], 2], [(2367892, 1), [['Second, I usually add something to my script that (almost) cannot possibly fail, like the following:'], ["If you're calling a python script directly from cron, you could do something similar or create a wrapper shell script."]], [[' #!/bin/sh\necho "$0 ran on `date +%c`" >> /tmp/crontab_test.log\n\n# ... rest of program\n']], ['How do I know if jobs have been/are performing? - Crontab'], 2], [(2367918, 0), [['I would create a list of all the special categories so for this:'], ['Then for you view you can do something like this:']], [[" special_cats = ['cat1','cat2','cat3']\n"]], ['Django url.py Different view functions with the same regex name pattern'], 2], [(2367918, 1), [['Then for you view you can do something like this:'], ['Then when you add a new special category, you just need to add it to that list']], [[' def generic_cat_view(request, cat_slug):\n    if cat_slug in special_cats:\n        return special_view(request, cat_slug)\n    else:\n        #generic view\n']], ['Django url.py Different view functions with the same regex name pattern'], 2], [(2368337, 0), [['I think it would work something like this:'], ['edit:  I just discovered  dblquad  which seems to do exactly what you want:']], [[' def func(x,y):\n    return cos(x) + cos(y)\n\ndef func2(y, a, b):\n    return integrate.quad(func, a, b, args=(y,))[0]\n\nprint integrate.quad(func2, -pi/2, pi/2, args=(-pi/2, pi/2))[0]\n']], ['2D integrals in SciPy'], 2], [(2368337, 1), [['edit:  I just discovered  dblquad  which seems to do exactly what you want:'], ['-10000']], [[' print integrate.dblquad(func, -pi/2, pi/2, lambda x:-pi/2, lambda x:pi/2)[0]\n']], ['2D integrals in SciPy'], 2], [(2368544, 0), [["I've been wanting this myself and in truth there isn't a great built-in way to do it yet. Here's a way to do it. I chose to make a subclass of lil_matrix and add the remove_col function. If you want, you can instead add the removecol function to the lil_matrix class in your  lib/site-packages/scipy/sparse/lil.py  file. Here's the code:"], ["I decided to make a removerow function as well, but I don't think that it is as good as removecol. I'm limited by not being able to remove one row from an ndarray in the way that I would like. Here is removerow which can be added to the above class"]], [[" from scipy import sparse\nfrom bisect import bisect_left\n\nclass lil2(sparse.lil_matrix):\n    def removecol(self,j):\n        if j < 0:\n            j += self.shape[1]\n\n        if j < 0 or j >= self.shape[1]:\n            raise IndexError('column index out of bounds')\n\n        rows = self.rows\n        data = self.data\n        for i in xrange(self.shape[0]):\n            pos = bisect_left(rows[i], j)\n            if pos == len(rows[i]):\n                continue\n            elif rows[i][pos] == j:\n                rows[i].pop(pos)\n                data[i].pop(pos)\n                if pos == len(rows[i]):\n                    continue\n            for pos2 in xrange(pos,len(rows[i])):\n                rows[i][pos2] -= 1\n\n        self._shape = (self._shape[0],self._shape[1]-1)\n"]], ['How can I remove a column from a sparse matrix efficiently?'], 2], [(2368544, 1), [["I decided to make a removerow function as well, but I don't think that it is as good as removecol. I'm limited by not being able to remove one row from an ndarray in the way that I would like. Here is removerow which can be added to the above class"], ['Perhaps I should submit these functions to the Scipy repository. ']], [["     def removerow(self,i):\n        if i < 0:\n            i += self.shape[0]\n\n        if i < 0 or i >= self.shape[0]:\n            raise IndexError('row index out of bounds')\n\n        self.rows = numpy.delete(self.rows,i,0)\n        self.data = numpy.delete(self.data,i,0)\n        self._shape = (self._shape[0]-1,self.shape[1])\n"]], ['How can I remove a column from a sparse matrix efficiently?'], 2], [(2368857, 0), [['ran'], ['gave me a python Class I could instantiate and populate with data, then render to a stream.']], [[' python generateDS.py -o MedicationDS.py medication.xsd\n']], ['Can generateDS be used like xsd.exe'], 2], [(2368857, 1), [['gave me a python Class I could instantiate and populate with data, then render to a stream.'], ['-10000']], [[" medObj = MedicationDS.Medication.factory()\nmedObj.set_dateStarted('2010-01-01')\nmedObj.set_dateStopped('2010-02-02')\nmedObj.set_reasonStopped('hurt my brain')\nbrandNameObj = MedicationDS.CodedValue.factory()\nbrandNameObj.set_abbrev('aspirin')\nbrandNameObj.set_value('aspirin')\nmedObj.set_brandName(brandNameObj)\n\nxmlStr=StringIO()\nmedObj.export(xmlStr, 0)\n"]], ['Can generateDS be used like xsd.exe'], 2], [(2369346, 0), [['-10000'], ['Here is a pyparsing processor for your input string:']], [[' >>> test = "somestring 363 1 46 17,363 1 34 17,401 3 8 14,"\n']], ['How can I build a regular expression which has options part'], 10], [(2369346, 1), [['Here is a pyparsing processor for your input string:'], ['Using patt.parseString returns a pyparsing ParseResults object, which has some nice list/dict/object properties.  First, just printing out the results as a list:']], [[" >>> from pyparsing import *\n>>> integer = Word(nums)\n>>> patt = Word(alphas) + OneOrMore(Group(integer*4 + Suppress(',')))\n"]], ['How can I build a regular expression which has options part'], 10], [(2369346, 2), [['Using patt.parseString returns a pyparsing ParseResults object, which has some nice list/dict/object properties.  First, just printing out the results as a list:'], ["Now let's have the parser do a bit more work for us.  At parse time, we already know we are parsing valid integers - anything matching  Word(nums)  has to be an integer.  So we can add a parse action to do this conversion at parse time:"]], [[" >>> patt.parseString(test).asList()\n['somestring', ['363', '1', '46', '17'], ['363', '1', '34', '17'], ['401', '3', '8', '14']]\n"]], ['How can I build a regular expression which has options part'], 10], [(2369346, 3), [["Now let's have the parser do a bit more work for us.  At parse time, we already know we are parsing valid integers - anything matching  Word(nums)  has to be an integer.  So we can add a parse action to do this conversion at parse time:"], ['Now, we recreate our pattern, and parsing now gives us groups of numbers:']], [[' >>> integer = Word(nums).setParseAction(lambda tokens:int(tokens[0]))\n']], ['How can I build a regular expression which has options part'], 10], [(2369346, 4), [['Now, we recreate our pattern, and parsing now gives us groups of numbers:'], ['Lastly, we can also assign names to the bits parsed out of this input:']], [[" >>> patt = Word(alphas) + OneOrMore(Group(integer*4 + Suppress(',')))\n>>> patt.parseString(test).asList()\n['somestring', [363, 1, 46, 17], [363, 1, 34, 17], [401, 3, 8, 14]]\n"]], ['How can I build a regular expression which has options part'], 10], [(2369346, 5), [['Lastly, we can also assign names to the bits parsed out of this input:'], ['The list of returned items is the same:']], [[' >>> patt = Word(alphas)("desc") + OneOrMore(Group(integer*4 + Suppress(\',\')))("numgroups")\n']], ['How can I build a regular expression which has options part'], 10], [(2369346, 6), [['The list of returned items is the same:'], ['But if we dump() the results, we see what we can access by name:']], [[" >>> patt.parseString(test).asList()\n['somestring', [363, 1, 46, 17], [363, 1, 34, 17], [401, 3, 8, 14]]\n"]], ['How can I build a regular expression which has options part'], 10], [(2369346, 7), [['But if we dump() the results, we see what we can access by name:'], ["We can use those names for dict-like or attribute-like access.  I'm partial to the attribute style myself:"]], [[" >>> print patt.parseString(test).dump()\n['somestring', [363, 1, 46, 17], [363, 1, 34, 17], [401, 3, 8, 14]]\n- desc: somestring\n- numgroups: [[363, 1, 46, 17], [363, 1, 34, 17], [401, 3, 8, 14]]\n"]], ['How can I build a regular expression which has options part'], 10], [(2369346, 8), [["We can use those names for dict-like or attribute-like access.  I'm partial to the attribute style myself:"], ['Here is the entire parser and output processor:']], [[' >>> res = patt.parseString(test)\n>>> print res.desc\nsomestring\n>>> print res.numgroups\n[[363, 1, 46, 17], [363, 1, 34, 17], [401, 3, 8, 14]]\n>>> for ng in res.numgroups: print sum(ng)\n...\n427\n415\n426\n']], ['How can I build a regular expression which has options part'], 10], [(2369346, 9), [['Here is the entire parser and output processor:'], ['-10000']], [[' test = "somestring 363 1 46 17,363 1 34 17,401 3 8 14,"\nfrom pyparsing import *\ninteger = Word(nums).setParseAction(lambda tokens:int(tokens[0]))\npatt = Word(alphas)("desc") + \\\n    OneOrMore(Group(integer*4 + Suppress(\',\')))("numgroups")\n\nprint patt.parseString(test).asList()\nprint patt.parseString(test).dump()\nres = patt.parseString(test)\nprint res.desc\nprint res.numgroups\nfor ng in res.numgroups: \n    print sum(ng)\n']], ['How can I build a regular expression which has options part'], 10], [(2371405, 0), [["I think you're after this (thanks to  Rick  for the original code):"], ['EDIT:\nYou can change the loop to this:']], [[" def complex_file_to_dict(filename):\n    out = dict()\n    for line in open(filename):\n        line = line.strip()\n        if line.startswith('d.complex'):\n            name = line\n            out[name] = set()\n        elif line:\n            out[name].add(line)\n\n    return out\n\nres_1 = complex_file_to_dict('file1.txt')\nres_2 = complex_file_to_dict('file2.txt')\n\nfor k1, set_1 in res_1.iteritems():\n    for k2, set_2 in res_2.iteritems():\n      print k1\n      print k2\n      for v in set_1 - set_2:\n        print v\n      print\n"]], ['Unable to get set intersection to work'], 3], [(2371405, 1), [['EDIT:\nYou can change the loop to this:'], ['to get the output like this:']], [[" for k1, set_1 in res_1.iteritems():\n    for k2, set_2 in res_2.iteritems():\n      print k1\n      print k2,\n      l = [v for v in set_1 - set_2]\n      print '(' + ', '.join(l) + ')'\n"]], ['Unable to get set intersection to work'], 3], [(2371405, 2), [['to get the output like this:'], ['-10000']], [[' d.complex.1\nd.complex.1 (1, 65, 48)\nd.complex.1\nd.complex.10 (1, 65, 48)\nd.complex.10\nd.complex.1 (46, 109, 192)\nd.complex.10\nd.complex.10 (109, 21)\n']], ['Unable to get set intersection to work'], 3], [(2371436, 0), [["Pyparsing  can be used to parse mathematical expressions. In particular,  fourFn.py \nshows how to parse basic arithmetic expressions. Below, I've rewrapped fourFn into a numeric parser class for easier reuse. "], ['You can use it like this']], [[' from __future__ import division\nfrom pyparsing import (Literal, CaselessLiteral, Word, Combine, Group, Optional,\n                       ZeroOrMore, Forward, nums, alphas, oneOf)\nimport math\nimport operator\n\n__author__ = \'Paul McGuire\'\n__version__ = \'$Revision: 0.0 $\'\n__date__ = \'$Date: 2009-03-20 $\'\n__source__ = \'\'\'http://pyparsing.wikispaces.com/file/view/fourFn.py\nhttp://pyparsing.wikispaces.com/message/view/home/15549426\n\'\'\'\n__note__ = \'\'\'\nAll I\'ve done is rewrap Paul McGuire\'s fourFn.py as a class, so I can use it\nmore easily in other places.\n\'\'\'\n\n\nclass NumericStringParser(object):\n    \'\'\'\n    Most of this code comes from the fourFn.py pyparsing example\n\n    \'\'\'\n\n    def pushFirst(self, strg, loc, toks):\n        self.exprStack.append(toks[0])\n\n    def pushUMinus(self, strg, loc, toks):\n        if toks and toks[0] == \'-\':\n            self.exprStack.append(\'unary -\')\n\n    def __init__(self):\n        """\n        expop   :: \'^\'\n        multop  :: \'*\' | \'/\'\n        addop   :: \'+\' | \'-\'\n        integer :: [\'+\' | \'-\'] \'0\'..\'9\'+\n        atom    :: PI | E | real | fn \'(\' expr \')\' | \'(\' expr \')\'\n        factor  :: atom [ expop factor ]*\n        term    :: factor [ multop factor ]*\n        expr    :: term [ addop term ]*\n        """\n        point = Literal(".")\n        e = CaselessLiteral("E")\n        fnumber = Combine(Word("+-" + nums, nums) +\n                          Optional(point + Optional(Word(nums))) +\n                          Optional(e + Word("+-" + nums, nums)))\n        ident = Word(alphas, alphas + nums + "_$")\n        plus = Literal("+")\n        minus = Literal("-")\n        mult = Literal("*")\n        div = Literal("/")\n        lpar = Literal("(").suppress()\n        rpar = Literal(")").suppress()\n        addop = plus | minus\n        multop = mult | div\n        expop = Literal("^")\n        pi = CaselessLiteral("PI")\n        expr = Forward()\n        atom = ((Optional(oneOf("- +")) +\n                 (ident + lpar + expr + rpar | pi | e | fnumber).setParseAction(self.pushFirst))\n                | Optional(oneOf("- +")) + Group(lpar + expr + rpar)\n                ).setParseAction(self.pushUMinus)\n        # by defining exponentiation as "atom [ ^ factor ]..." instead of\n        # "atom [ ^ atom ]...", we get right-to-left exponents, instead of left-to-right\n        # that is, 2^3^2 = 2^(3^2), not (2^3)^2.\n        factor = Forward()\n        factor << atom + \\\n            ZeroOrMore((expop + factor).setParseAction(self.pushFirst))\n        term = factor + \\\n            ZeroOrMore((multop + factor).setParseAction(self.pushFirst))\n        expr << term + \\\n            ZeroOrMore((addop + term).setParseAction(self.pushFirst))\n        # addop_term = ( addop + term ).setParseAction( self.pushFirst )\n        # general_term = term + ZeroOrMore( addop_term ) | OneOrMore( addop_term)\n        # expr <<  general_term\n        self.bnf = expr\n        # map operator symbols to corresponding arithmetic operations\n        epsilon = 1e-12\n        self.opn = {"+": operator.add,\n                    "-": operator.sub,\n                    "*": operator.mul,\n                    "/": operator.truediv,\n                    "^": operator.pow}\n        self.fn = {"sin": math.sin,\n                   "cos": math.cos,\n                   "tan": math.tan,\n                   "exp": math.exp,\n                   "abs": abs,\n                   "trunc": lambda a: int(a),\n                   "round": round,\n                   "sgn": lambda a: abs(a) > epsilon and cmp(a, 0) or 0}\n\n    def evaluateStack(self, s):\n        op = s.pop()\n        if op == \'unary -\':\n            return -self.evaluateStack(s)\n        if op in "+-*/^":\n            op2 = self.evaluateStack(s)\n            op1 = self.evaluateStack(s)\n            return self.opn[op](op1, op2)\n        elif op == "PI":\n            return math.pi  # 3.1415926535\n        elif op == "E":\n            return math.e  # 2.718281828\n        elif op in self.fn:\n            return self.fn[op](self.evaluateStack(s))\n        elif op[0].isalpha():\n            return 0\n        else:\n            return float(op)\n\n    def eval(self, num_string, parseAll=True):\n        self.exprStack = []\n        results = self.bnf.parseString(num_string, parseAll)\n        val = self.evaluateStack(self.exprStack[:])\n        return val\n']], ['Evaluating a mathematical expression in a string'], 2], [(2371436, 1), [['You can use it like this'], ['-10000']], [[" nsp = NumericStringParser()\nresult = nsp.eval('2^4')\nprint(result)\n# 16.0\n\nresult = nsp.eval('exp(2^4)')\nprint(result)\n# 8886110.520507872\n"]], ['Evaluating a mathematical expression in a string'], 2], [(2371779, 0), [['I am not sure if this is the correct way, but the following appears to work:   '], ['Just a side note, when fetching it back out of the database psycopg2 provides it as a buffer, the first 4 bytes of which are the total length, so get the original data as:']], [['     row = [\'0x14\', \'0xb6\', \'0xa1\', \'0x0\', \'0xa1\', \'0x0\']\n    as_hex = \'\'.join(byte[2:].zfill(2) for byte in row)\n  # as_hex = \'14b6a100a100\'\n    bytes = buffer(as_hex.decode(\'hex\'))\n\n    cur.execute("INSERT INTO mylog (binaryfield) VALUES (%(bytes)s)", \n                {\'bytes\': bytes})\n']], ['Importing bytea field into PostgreSQL database via psycopg2'], 2], [(2371779, 1), [['Just a side note, when fetching it back out of the database psycopg2 provides it as a buffer, the first 4 bytes of which are the total length, so get the original data as:'], ['The string can then be split into pairs and cast to  integers .']], [['     cur.execute("SELECT binaryfield FROM mylog")\n    res = cur.fetchone()\n    my_data = str(res[4:]).encode(\'hex\')\n']], ['Importing bytea field into PostgreSQL database via psycopg2'], 2], [(2372217, 0), [["I personally use  xml.etree.cElementTree , as I've found it works really well, it's fast,  easy to use , and  works well with big (>2GB) files ."], ['In the interactive console']], [[' import xml.etree.cElementTree as etree\n\nwith open(xml_file_path) as xml_file:\n    tree = etree.iterparse(xml_file)\n    for items in tree:\n        for item in items:\n            print item.text\n']], ['Python XML to dictionary to iterate over items'], 2], [(2372217, 1), [['In the interactive console'], ['-10000']], [[' >>> x="""<?xml version="1.0"?>\n<test>\n    <items>\n        <item>item 1</item>\n        <item>item 2</item>\n    </items>\n</test>"""\n>>> x\n\'<?xml version="1.0"?>\\n<test>\\n    <items>\\n        <item>item 1</item>\\n        <item>item 2</item>\\n    </items>\\n</test>\'\n>>> import xml.etree.cElementTree as etree\n>>> tree = etree.fromstring(x)\n>>> tree\n<Element \'test\' at 0xb63ad248>\n>>> for i in tree:\n        for j in i:\n            print j\n\n\n<Element \'item\' at 0xb63ad2f0>\n<Element \'item\' at 0xb63ad338>\n>>> for i in tree:\n        for j in i:\n            j.text\n\n\'item 1\'\n\'item 2\'\n>>>\n']], ['Python XML to dictionary to iterate over items'], 2], [(2374201, 0), [["While I don't know bash and don't see how  permutations  would solve your problem, it seems that  itertools.product  is a fairly straightforward way to do this:"], ["while proposed method is valid in terms of obtaining all possible permutations with replacement of the  'atgc'  string, i.e., finding  sta  string, finding  stb  would be more efficient not through the dictionary look-up, but rather the translation mechanism:"]], [[" >>> s = 'atgc'\n>>> d = dict(zip(s, 'tacg'))\n>>> import itertools\n>>> for i in itertools.product(s, repeat=10):\n    sta = ''.join(i)\n    stb = ''.join(d[x] for x in i)\n"]], ['What is the best, python or bash for generating strings from combinations of letters?'], 2], [(2374201, 1), [["while proposed method is valid in terms of obtaining all possible permutations with replacement of the  'atgc'  string, i.e., finding  sta  string, finding  stb  would be more efficient not through the dictionary look-up, but rather the translation mechanism:"], ['Thanks to Dave, for highlighting more efficient solution.']], [[" >>> trans = str.maketrans(s, 'tacg')\n>>> for i in itertools.product(s, repeat=10):\n    sta = ''.join(i)\n    stb = sta.translate(trans)\n"]], ['What is the best, python or bash for generating strings from combinations of letters?'], 2], [(2375158, 0), [['Adapted from  DaniWeb :'], ['And an alternative way to generate a gradient bitmap, using NumPy (from  wxpython.org ):']], [[" import wx\n\nclass MyFrame(wx.Frame):\n    def __init__(self, parent=None, title=None):\n        wx.Frame.__init__(self, parent, wx.ID_ANY, title)\n        self.panel = wx.Panel(self, size=(350, 450))\n        # this sets up the painting canvas\n        self.panel.Bind(wx.EVT_PAINT, self.on_paint)\n        # set frame size to fit panel\n        self.Fit()\n\n    def on_paint(self, event):\n        # establish the painting canvas\n        dc = wx.PaintDC(self.panel)\n        x = 0\n        y = 0\n        w, h = self.GetSize()\n        dc.GradientFillLinear((x, y, w, h), 'blue', 'black')\n\n\napp = wx.App(0)\nMyFrame(title='Gradient Test').Show()\napp.MainLoop()\n"]], ['How to do a dregradê on wx.Panel Background?'], 2], [(2375158, 1), [['And an alternative way to generate a gradient bitmap, using NumPy (from  wxpython.org ):'], ['-10000']], [[" import numpy as np\n\ndef GetBitmap( self, width=640, height=480, leftColour=(255,128,0), rightColour=(64,0,255) ):\n        ## Create a horizontal gradient\n        array = np.zeros( (height, width, 3),'uint8')\n        # alpha is a one dimensional array with a linear gradient from 0.0 to 1.0\n        alpha = np.linspace( 0., 1., width )\n        # This uses alpha to linearly interpolate between leftColour and rightColour\n        colourGradient = np.outer(alpha, leftColour) + np.outer((1.-alpha), rightColour)\n        # NumPy's broadcasting rules will assign colourGradient to every row of the destination array\n        array[:,:,:] = colourGradient\n        image = wx.EmptyImage(width,height)\n        image.SetData( array.tostring())\n        return image.ConvertToBitmap()# wx.BitmapFromImage(image)\n"]], ['How to do a dregradê on wx.Panel Background?'], 2], [(2375316, 0), [['Very roughly. This accepts kw args and checks to see that the number of args is correct'], ['This version has a few improvements']], [[' def __call__(self, cls):\n    def init(cls_self, *args, **kw):\n        if len(args)+len(kw) != len(self.params):\n            raise RuntimeError("Wrong number of arguments")\n        for param, value in zip(self.params, args):\n            setattr(cls_self, param, value)\n        vars(cls_self).update(kw)\n    cls.__init__ = init\n    return cls\n']], ['Create a python function procedurally (specifically the arguments)'], 3], [(2375316, 1), [['This version has a few improvements'], ['This version also tells you about unexpected keyword args']], [[' def __call__(self, cls):\n    def init(cls_self, *args, **kw):\n        for param, value in zip(self.params, args):\n            if param in kw:\n                raise TypeError("Multiple values for %s"%param)\n            kw[param]=value\n        if len(args) > len(self.params) or set(kw) != set(self.params):\n            raise TypeError("Wrong number of arguments")\n        vars(cls_self).update(kw)\n    cls.__init__ = init\n    return cls\n']], ['Create a python function procedurally (specifically the arguments)'], 3], [(2375316, 2), [['This version also tells you about unexpected keyword args'], ['-10000']], [[' def __call__(self, cls):\n    def init(cls_self, *args, **kw):\n        for param, value in zip(self.params, args):\n            if param in kw:\n                raise TypeError("Multiple values for %s"%param)\n            kw[param]=value\n        unexpected_args = list(set(kw)-set(self.params))\n        if unexpected_args:\n            raise TypeError("Unexpected args %s"%unexpected_args)\n        missing_args = list(set(self.params)-set(kw))\n        if missing_args:\n            raise TypeError("Expected args %s"%missing_args)\n        vars(cls_self).update(kw)\n    cls.__init__ = init\n    return cls\n']], ['Create a python function procedurally (specifically the arguments)'], 3], [(2375334, 0), [['You could do it like this in Python 2.x:'], ['or in Python 3.x:']], [[" >>> l = ((1,2),(3,4))\n>>> dict(map(lambda n: (n[0], unicode(n[1])), l))\n{1: u'2', 3: u'4'}\n"]], ['Python Type Conversion'], 2], [(2375334, 1), [['or in Python 3.x:'], ['Note that strings in Python 3 are the same as unicode strings in Python 2.']], [[" >>> l = ((1,2),(3,4))\n>>> {n[0] : str(n[1]) for n in l}\n{1: '2', 3: '4'}\n"]], ['Python Type Conversion'], 2], [(2375365, 0), [['You should do:'], ['But actually, you are better off using a manager:']], [[" ShoeReview.objects\\\n          .filter(owner_review__ratings__rating_attribute__attribute='overall')\\\n          .order_by(owner_review__ratings__rating)\n"]], ['Help on my django models for my shoe review website'], 4], [(2375365, 1), [['But actually, you are better off using a manager:'], ['This way you can do:']], [[" class BestShoesReviewManager(models.Manager):\n    def get_query_set(self):\n        qs =  super(DahlBookManager, self).get_query_set()\n        return qs.filter(owner_review__ratings__rating_attribute__attribute= 'overall')\\\n                 .order_by(owner_review__ratings__rating)\n"]], ['Help on my django models for my shoe review website'], 4], [(2375365, 2), [['This way you can do:'], ['And so in your code, you can do this:']], [[' class ShoeReview(models.Model)\n\n    objects = models.Manager() # The default manager.\n    best = BestShoesReviewManager() # The best review manager.\n']], ['Help on my django models for my shoe review website'], 4], [(2375365, 3), [['And so in your code, you can do this:'], ['-10000']], [[' ShoeReview.objects.best()\n']], ['Help on my django models for my shoe review website'], 4], [(2375473, 0), [["I don't know Rudel well enough to give a 100% solution, but what you want to do is something like this:"], ['i.e. try the above code but using one of these lines:']], [[' (add-hook \'rudel-document-attach-hook \'my-rudel-set-mode-appropriately)\n(defun my-rudel-set-mode-appropriately (document buffer)\n  "try to set the mode appropriately"\n  (set-buffer buffer)\n  (let ((buffer-file-name ...get-name-from-document...))\n    (set-auto-mode)))\n']], ['Emacs collaborative buffers open in the wrong mode'], 3], [(2375473, 1), [['i.e. try the above code but using one of these lines:'], ['and']], [['   (let ((buffer-file-name (buffer-name)))\n']], ['Emacs collaborative buffers open in the wrong mode'], 3], [(2375473, 2), [['and'], ['The  set-auto-mode  will use value of  buffer-file-name  to determine the major mode using the  general Emacs mechanisms .']], [['   (let ((buffer-file-name (rudel-suggested-buffer-name document)))\n']], ['Emacs collaborative buffers open in the wrong mode'], 3], [(2376833, 0), [['For:'], ['you could use a  list comprehension :']], [[' items = []\nfor entry in cartEntries:\n    items.append(entry.item) \n']], ['Python: How to refactor this simple list code?'], 2], [(2376833, 1), [['you could use a  list comprehension :'], ["Seasoned Python programmers find it easier to read and it's fewer lines."]], [[' items = [entry.item for entry in cartEntries]\n']], ['Python: How to refactor this simple list code?'], 2], [(2378521, 0), [['Assuming time are in same timezone and no DST'], ['output:']], [[' import datetime\n\ndef minute_interval(start, end):\n     reverse = False\n     if start > end:\n          start, end = end, start\n          reverse = True\n\n     delta = (end.hour - start.hour)*60 + end.minute - start.minute + (end.second - start.second)/60.0\n     if reverse:\n          delta = 24*60 - delta\n     return delta\n\nt1 = datetime.time(12, 10, 0) # 12:10\nt2 = datetime.time(13, 13, 0) #13:13\nt3 = datetime.time(23, 55, 0) #23:55 \nt4 = end = datetime.time(01, 10, 0) #01:10\n\nprint minute_interval(t1, t2)\nprint minute_interval(t3, t4)\n']], ['python datetime.time operation'], 2], [(2378521, 1), [['output:'], ['otherwise you are better of using datetime.datetime, which supports subtraction and gives datetime.timedelta, for timezone you can use pytz library.']], [[' 63\n75\n']], ['python datetime.time operation'], 2], [(2378834, 0), [['Using ElementTree:'], ['Using minidom:']], [[' import xml.etree.ElementTree as E\ne = E.parse("test.xml")\nprint(e.find("type").text)\n']], ['Accessing child nodein an xml in python'], 3], [(2378834, 1), [['Using minidom:'], ['Using  BeautifulSoup :']], [[' import xml.dom.minidom\nd = xml.dom.minidom.parse("test.xml")\nprint(d.getElementsByTagName("type")[0].firstChild.data)\n']], ['Accessing child nodein an xml in python'], 3], [(2378834, 2), [['Using  BeautifulSoup :'], ['-10000']], [[' from BeautifulSoup import BeautifulStoneSoup\nsoup = BeautifulStoneSoup(open("test.xml"))\nprint(soup.find("type").text)\n']], ['Accessing child nodein an xml in python'], 3], [(2380031, 0), [['An Applescript example is  here , and the relevant part is:'], ['Python/AppleScript translation is covered  here .  E.g., install appscript as described  here :']], [[' tell application "Safari"\n    set url_list to URL of every document\nend tell\n']], ['Determine current Mac Safari web page using Python'], 3], [(2380031, 1), [['Python/AppleScript translation is covered  here .  E.g., install appscript as described  here :'], ['and then, as shown  here , you can do e.g.:']], [[' sudo easy_install appscript\n']], ['Determine current Mac Safari web page using Python'], 3], [(2380031, 2), [['and then, as shown  here , you can do e.g.:'], ['-10000']], [[' >>> import appscript\n>>> print appscript.app("Safari").windows.first.current_tab.URL()\nhttp://wiki.python.org/moin/MacPython/Safari\n']], ['Determine current Mac Safari web page using Python'], 3], [(2380394, 0), [['For the cosine_similarity:'], ['For ngrams:']], [[' \ndef cosine_distance(u, v):\n    """\n    Returns the cosine of the angle between vectors v and u. This is equal to\n    u.v / |u||v|.\n    """\n    return numpy.dot(u, v) / (math.sqrt(numpy.dot(u, u)) * math.sqrt(numpy.dot(v, v))) \n']], ['Simple implementation of N-Gram, tf-idf and Cosine similarity in Python'], 3], [(2380394, 1), [['For ngrams:'], ['if you like pylucene, this will tell you how to comute tf.idf']], [[' \ndef ngrams(sequence, n, pad_left=False, pad_right=False, pad_symbol=None):\n    """\n    A utility that produces a sequence of ngrams from a sequence of items.\n    For example:\n\n    >>> ngrams([1,2,3,4,5], 3)\n    [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n\n    Use ingram for an iterator version of this function.  Set pad_left\n    or pad_right to true in order to get additional ngrams:\n\n    >>> ngrams([1,2,3,4,5], 2, pad_right=True)\n    [(1, 2), (2, 3), (3, 4), (4, 5), (5, None)]\n\n    @param sequence: the source data to be converted into ngrams\n    @type sequence: C{sequence} or C{iterator}\n    @param n: the degree of the ngrams\n    @type n: C{int}\n    @param pad_left: whether the ngrams should be left-padded\n    @type pad_left: C{boolean}\n    @param pad_right: whether the ngrams should be right-padded\n    @type pad_right: C{boolean}\n    @param pad_symbol: the symbol to use for padding (default is None)\n    @type pad_symbol: C{any}\n    @return: The ngrams\n    @rtype: C{list} of C{tuple}s\n    """\n\n    if pad_left:\n        sequence = chain((pad_symbol,) * (n-1), sequence)\n    if pad_right:\n        sequence = chain(sequence, (pad_symbol,) * (n-1))\n    sequence = list(sequence)\n\n    count = max(0, len(sequence) - n + 1)\n    return [tuple(sequence[i:i+n]) for i in range(count)] \n']], ['Simple implementation of N-Gram, tf-idf and Cosine similarity in Python'], 3], [(2380394, 2), [['if you like pylucene, this will tell you how to comute tf.idf'], ['-10000']], [['     # reader = lucene.IndexReader(FSDirectory.open(index_loc))\n    docs = reader.numDocs()\n    for i in xrange(docs):\n        tfv = reader.getTermFreqVector(i, fieldname)\n        if tfv:\n            rec = {}\n            terms = tfv.getTerms()\n            frequencies = tfv.getTermFrequencies()\n            for (t,f,x) in zip(terms,frequencies,xrange(maxtokensperdoc)):\n                    df= searcher.docFreq(Term(fieldname, t)) # number of docs with the given term\n                        tmap.setdefault(t, len(tmap))\n                        rec[t] = sim.tf(f) * sim.idf(df, max_doc)  #compute TF.IDF\n            # and normalize the values using cosine normalization\n            if cosine_normalization:\n                denom = sum([x**2 for x in rec.values()])**0.5\n                for k,v in rec.items():\n                    rec[k] = v / denom\n']], ['Simple implementation of N-Gram, tf-idf and Cosine similarity in Python'], 3], [(2380527, 0), [['You can do this by adding/editing the suite() function in tests.py which defines what tests will be run by the django test runner.'], ['Then just run your tests as usual and you should see your doctests in views.py run.']], [[' import unittest\nimport doctest\nfrom project import views\n\ndef suite():\n    suite = unittest.TestSuite()\n    suite.addTest(doctest.DocTestSuite(views))\n    return suite\n']], ['Django doctests in views.py'], 3], [(2380527, 1), [['Then just run your tests as usual and you should see your doctests in views.py run.'], ["However, keep in mind that constructing your own test suite means that the django test runner will not automatically run any tests you have in tests.py.  You'll have to add these into your suite manually, for example"]], [[' $ python manage.py test project\n']], ['Django doctests in views.py'], 3], [(2380527, 2), [["However, keep in mind that constructing your own test suite means that the django test runner will not automatically run any tests you have in tests.py.  You'll have to add these into your suite manually, for example"], ['-10000']], [[" import unittest\nimport doctest\nfrom project import views\n\nclass FooTestCase(unittest.TestCase):\n    def testFoo(self):\n        self.assertEquals('foo', 'bar')\n\ndef suite():\n    suite = unittest.TestSuite()\n    suite.addTest(doctest.DocTestSuite(views))\n    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(FooTestCase))\n    return suite\n"]], ['Django doctests in views.py'], 3], [(2381786, 0), [['I think you want this. If the specified day is a Wednesday it will give you that day.'], ['Example, the last wednesday for every day in March:']], [[' from datetime import date\nfrom datetime import timedelta\n\ntoday = date.today()\noffset = (today.weekday() - 2) % 7\nlast_wednesday = today - timedelta(days=offset)\n']], ['How to get the Python date object for last Wednesday'], 2], [(2381786, 1), [['Example, the last wednesday for every day in March:'], ['-10000']], [[' for x in xrange(1, 32):\n    today = date(year=2010, month=3, day=x)\n    offset = (today.weekday() - 2) % 7\n    last_wednesday = today - timedelta(days=offset)\n\n    print last_wednesday\n']], ['How to get the Python date object for last Wednesday'], 2], [(2382905, 0), [['It looks like you might be in need of'], ['Or if you simply need to iterate over this and not necessarily form the list, use']], [[' mus.extend(reversed(mus))\n']], ['Creating a palindrome list with reverse()'], 2], [(2382905, 1), [['Or if you simply need to iterate over this and not necessarily form the list, use'], ['-10000']], [[' import itertools\nfor item in itertools.chain(mus, reversed(mus)):\n    do_something...\n']], ['Creating a palindrome list with reverse()'], 2], [(2383036, 0), [["Nginx can return an empty GIF, it's built in:"], ['Nginx writes log very effectively, you can easily define format and write query arguments, request and response headers to the log:']], [[' location /tracking {\n  empty_gif;\n}\n']], ['Can nginx forward to Pylons, ignore response, return alternate response?'], 4], [(2383036, 1), [['Nginx writes log very effectively, you can easily define format and write query arguments, request and response headers to the log:'], ["Since you are going to use memcached, you probably wanted to cache responses and this is what Nginx can do for you (I shall show an example with proxy, but it's possible with FastCGI as well):"]], [[' log_format tracking \'$remote_addr "$request" "$http_referer" $arg_param $upstream_x_track_id\';\n\nlocation /tracking {\n  access_log /var/log/tracking.log tracking buffer=16k;\n  proxy_pass http://upstream;\n}\n']], ['Can nginx forward to Pylons, ignore response, return alternate response?'], 4], [(2383036, 2), [["Since you are going to use memcached, you probably wanted to cache responses and this is what Nginx can do for you (I shall show an example with proxy, but it's possible with FastCGI as well):"], ['You can define your own cache key and do not pass it to a client:']], [[' proxy_cache_path /var/cache/nginx/cache_tracking keys_zone=tracking:20m;\n\nlocation /tracking {\n  access_log /var/log/tracking.log tracking buffer=16k;\n  proxy_cache tracking;\n  proxy_cache_valid 200 1m; # Cache responses with code 200 for 1 minute\n  proxy_pass http://upstream;\n}\n']], ['Can nginx forward to Pylons, ignore response, return alternate response?'], 4], [(2383036, 3), [['You can define your own cache key and do not pass it to a client:'], ['-10000']], [[' location /tracking {\n  access_log /var/log/tracking.log tracking buffer=16k;\n  proxy_cache_key $upstream_x_track_id;\n  proxy_cache tracking;\n  proxy_cache_valid 200 1m; # Cache responses with code 200 for 1 minute\n  proxy_hide_header X-Track_Id;\n  proxy_pass http://upstream;\n}\n']], ['Can nginx forward to Pylons, ignore response, return alternate response?'], 4], [(2384436, 0), [["You can use model's  _meta  attribute to get field object and from field you can get relationship and much more e.g. consider a employee table which has a foreign key to a department table"], ['from django/db/models/options.py']], [[" In [1]: from django.db import models\n\nIn [2]: model = models.get_model('timeapp', 'Employee')\n\nIn [3]: dep_field = model._meta.get_field_by_name('department')\n\nIn [4]: dep_field[0].rel.field_name\nOut[4]: 'id'\n\nIn [5]: dep_field[0].rel.to\nOut[5]: <class 'timesite.timeapp.models.Department'>\n"]], ['How to introspect django model fields?'], 2], [(2384436, 1), [['from django/db/models/options.py'], ['-10000']], [[' def get_field_by_name(self, name):\n    """\n    Returns the (field_object, model, direct, m2m), where field_object is\n    the Field instance for the given name, model is the model containing\n    this field (None for local fields), direct is True if the field exists\n    on this model, and m2m is True for many-to-many relations. When\n    \'direct\' is False, \'field_object\' is the corresponding RelatedObject\n    for this field (since the field doesn\'t have an instance associated\n    with it).\n\n    Uses a cache internally, so after the first access, this is very fast.\n    """\n']], ['How to introspect django model fields?'], 2], [(2385762, 0), [['Or is about the only thing you can do:'], ['An alternative is to match:']], [[' \\b(I[MBDPI]{2}|[MBDPI]I[MBDPI]|[MBDPI]{2}I)\\b\n']], ['how do I include a boolean AND within a regex?'], 3], [(2385762, 1), [['An alternative is to match:'], ["Edit:  for the sake of having a complete answer, I'll adapt  Jens' answer  that uses  Testing The Same Part of a String for More Than One Requirement :"]], [[' \\b[MBDPI]{3}\\b\n']], ['how do I include a boolean AND within a regex?'], 3], [(2385762, 2), [["Edit:  for the sake of having a complete answer, I'll adapt  Jens' answer  that uses  Testing The Same Part of a String for More Than One Requirement :"], ["with the word boundary checks to ensure it's only three characters long."]], [[' \\b(?=[MBDPI]{3}\\b)\\w*I\\w*\n']], ['how do I include a boolean AND within a regex?'], 3], [(2387558, 0), [['I like'], ['and a obligatory itertools solution']], [[' my_list.extend(reversed(color[-bits:]))\n']], ['What is the most pythonic way to extend a list with the reversal of another?'], 2], [(2387558, 1), [['and a obligatory itertools solution'], ['-10000']], [[' my_list.extend( itertools.islice( reversed(color), 0, bits))\n']], ['What is the most pythonic way to extend a list with the reversal of another?'], 2], [(2387816, 0), [["The fastbinary.c will be patched, but setup.py patch will fail, update manually from hints at setup.py.rej, here's a (seemingly) correct copy:"], ['Endianness test will fail, modify fastbinary.c (around line 68):']], [[" from distutils.core import setup, Extension\nimport sys\n\nlibraries = []\n\nif sys.platform == 'win32':\n    libraries.append('ws2_32')\n\nfastbinarymod = Extension('thrift.protocol.fastbinary',\n                          sources = ['src/protocol/fastbinary.c'],\n                          libraries = libraries, \n        )\n\nsetup(name = 'Thrift',\n      version = '0.1',\n      description = 'Thrift Python Libraries',\n      author = 'Thrift Developers',\n      author_email = 'thrift-dev@incubator.apache.org',\n      url = 'http://incubator.apache.org/thrift/',\n      license = 'Apache License 2.0',\n      packages = [\n        'thrift',\n        'thrift.protocol',\n        'thrift.transport',\n        'thrift.server',\n      ],\n      package_dir = {'thrift' : 'src'},\n      ext_modules = [fastbinarymod],\n      )\n"]], ['Error setting up thrift modules for python'], 2], [(2387816, 1), [['Endianness test will fail, modify fastbinary.c (around line 68):'], ["After that run  python setup.py install , hopefully, you'll get what you need."]], [[' #ifdef _MSC_VER\n  #define __BYTE_ORDER __LITTLE_ENDIAN\n#endif\n']], ['Error setting up thrift modules for python'], 2], [(2387981, 0), [['-10000'], ['Output:']], [[' list1=[1,2,3,4]\nlist2=[1,5,3,4]\nprint [(i,j) for i,j in zip(list1,list2) if i!=j]\n']], ['Pythonic way to compare two lists and print out the differences'], 3], [(2387981, 1), [['Output:'], ['Edit:  Easily extended to skip  n  first items (same output):']], [[' [(2, 5)]\n']], ['Pythonic way to compare two lists and print out the differences'], 3], [(2387981, 2), [['Edit:  Easily extended to skip  n  first items (same output):'], ['-10000']], [[' list1=[1,2,3,4]\nlist2=[2,5,3,4]\nprint [(i,j) for i,j in zip(list1,list2)[1:] if i!=j]\n']], ['Pythonic way to compare two lists and print out the differences'], 3], [(2389846, 0), [['If you have Python 2.6 or newer, use  format :'], ['For Python 2.5 or older:']], [[" '{0:.3g}'.format(num)\n"]], ['Python Decimals format'], 4], [(2389846, 1), [['For Python 2.5 or older:'], ['For example:']], [[" '%.3g'%(num)\n"]], ['Python Decimals format'], 4], [(2389846, 2), [['For example:'], ['yields']], [[" tests=[(1.00, '1'),\n       (1.2, '1.2'),\n       (1.23, '1.23'),\n       (1.234, '1.23'),\n       (1.2345, '1.23')]\n\nfor num, answer in tests:\n    result = '{0:.3g}'.format(num)\n    if result != answer:\n        print('Error: {0} --> {1} != {2}'.format(num, result, answer))\n        exit()\n    else:\n        print('{0} --> {1}'.format(num,result))\n"]], ['Python Decimals format'], 4], [(2389846, 3), [['yields'], ['-10000']], [[' 1.0 --> 1\n1.2 --> 1.2\n1.23 --> 1.23\n1.234 --> 1.23\n1.2345 --> 1.23\n']], ['Python Decimals format'], 4], [(2390501, 0), [['for each line you can use'], ['and for bonus points:']], [[' re.sub(r\'\'\'(?<![^\\t\\n])\\W*b(["\'])(.*)\\1\\W*(?![^\\t\\n])\'\'\', r\'\\2\', line)\n']], ['Regex + Python to remove specific trailing and ending characters from value in tab delimited file'], 2], [(2390501, 1), [['and for bonus points:'], ['-10000']], [[' import re\n\npattern = re.compile(r\'\'\'(?<![^\\t\\n])\\W*b(["\'])(.*?)\\1\\W*?(?![^\\t\\n])\'\'\')\nwith open(\'outfile\', \'w\') as outfile:\n    for line in open(\'infile\'):\n        outfile.write(pattern.sub(r\'\\2\', line))\n']], ['Regex + Python to remove specific trailing and ending characters from value in tab delimited file'], 2], [(2391788, 0), [['Save your data to the database as normal, and then the first time it is accessed, cache them:'], ['Make sure you kill the cache on  object deletion  or  change :']], [[" from django.core.cache import cache\n\ndef some_view_that_accesses_date(request):\n  my_data = cache.get('some_key')\n\n  if my_data is None:\n    my_data = MyObject.objects.all()\n    cache.set('some_key', my_data)\n\n  ... snip ... normal view code\n"]], ['Models in database speed vs static dictionaries speed'], 2], [(2391788, 1), [['Make sure you kill the cache on  object deletion  or  change :'], ["I've got something similar to this in one of my apps, and it works great. Obviously you won't see any performance improvements if you then go and use the database backend, but this is a more Django-like (Djangonic?) approach than using memcached directly."]], [[" from django.core.cache import cache\nfrom django.db.models.signals import post_save\nfrom myapp.models import MyModel\n\ndef kill_object_cache(sender, **kwargs):\n    cache.delete('some_key')\n\npost_save.connect(kill_object_cache, sender=MyModel)\npost_delete.connect(kill_object_cache, sender=MyModel)\n"]], ['Models in database speed vs static dictionaries speed'], 2], [(2392920, 0), [['Not sure what you are trying to do, but perhaps you mean:'], ['note that you can make three different kinds of iterators from a dictionary:']], [[" aa = {'ALA':'A'}\ntest = ['ALA']  ###\xa0note this is now a list!\n\nfor i in test:\n    if i in aa:\n        print i, aa[i]  #### note i is the key, aa[i] is the value\n"]], ['Python: Simple Dictionary referencing Problem'], 2], [(2392920, 1), [['note that you can make three different kinds of iterators from a dictionary:'], ['-10000']], [[" aa.iteritems()   # tuples of (key, value)\n                 # ('ALA', 'A')\naa.iterkeys()    # keys only -- equivalent to just making an iterator directly from aa\n                 # 'ALA'\naa.itervalues()  # items only\n                 # 'A'\n"]], ['Python: Simple Dictionary referencing Problem'], 2], [(2393237, 0), [['My "/templates/comments/form.html" is:'], ['My "/templates/comments/list.html" is:']], [[' {% load comments i18n %}\n{% if user.is_authenticated %}\n    <form action="{% comment_form_target %}" method="post">\n        {% csrf_token %}\n        {% if next %}<input type="hidden" name="next" value="{{ next }}" />{% endif %}\n        {% for field in form %}\n            {% if field.is_hidden %}\n                {{ field }}\n            {% else %}\n                {% if field.name != "name" and field.name != "email" and field.name != "url" %}\n                    {% if field.errors %}{{ field.errors }}{% endif %}\n                    <p {% if field.errors %} class="error"{% endif %} {% ifequal field.name "honeypot" %} style="display:none;"{% endifequal %}>\n                    {{ field }}\n                    </p>\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n        <input type="submit" name="post" class="submit-post" value="{% trans "Add Comment" %}" />\n    </form>\n{% else %}\n    I\'m sorry, but you must be <a href="javascript:alert(\'send to login page\')">logged in</a> to submit comments.\n{% endif %}\n']], ['How to extend the comments framework (django) by removing unnecesary fields?'], 2], [(2393237, 1), [['My "/templates/comments/list.html" is:'], ['On the page I want the form, I first call  {% load comments %}  and then  {% render_comment_form for [object] % } to show the form, or  {% render_comment_list for [object] %}  to generate a list of the comments on the object (replace [object] with your appropriate object name). ']], [[' <div class="comment_start"></div>\n{% for comment in comment_list %}\n    <div class="comment">\n       {{ comment.comment }} \n       (from <a href="javascript:alert(\'show user profile/stats\')">{{ comment.user }}</a> - {{ comment.submit_date|timesince }} ago)\n    </div>\n{% endfor %}\n']], ['How to extend the comments framework (django) by removing unnecesary fields?'], 2], [(2393851, 0), [['Change the set you are asking  random.choice  to pick from:'], ['Edit:  As SilentGhost points out, if your ultimate goal is only to make a string, skipping the intermediate list is more memory-efficient:']], [[' import random\n\nd =[random.choice(\'ACUG\') for x in xrange(3355)]\ns = "".join(d)\n\nprint s\n']], ['Python: Random sequence'], 2], [(2393851, 1), [['Edit:  As SilentGhost points out, if your ultimate goal is only to make a string, skipping the intermediate list is more memory-efficient:'], ['-10000']], [[' s = "".join(random.choice(\'ACUG\') for x in xrange(3355))\n']], ['Python: Random sequence'], 2], [(2394235, 0), [['I don\'t think that @ast4 really means "nth day of nth week of nth month algorithm". The notion of "nth week in nth month" is mind-snapping (like the "ISO calendar"). I\'ve never seen a holiday defined in terms of "nth week". Martin Luther King Day is an example of the"Nth weekday in month" type of holiday:'], ["The USA doesn't have Easter-related holidays. Definition is not difficult:"]], [[' MONDAY, ...., SATURDAY = range(7)\nJAN, ....., DEC = range(1, 12)\n\nHoliday("Martin L King\'s Birthday", type=\'floating\',\n    ordinal=3, weekday=MON, month=JAN)\nHoliday("Memorial Day", type=\'floating\',\n    ordinal=-1, weekday=MON, month=MAY)\n']], ['Detecting a US Holiday'], 3], [(2394235, 1), [["The USA doesn't have Easter-related holidays. Definition is not difficult:"], ['The so-called "static" holidays are not fixed when the "fixed" date is a Saturday or Sunday and may even vanish (no alternative day off work):']], [[' Holiday("Good Friday", type=\'moveable\',\n    base=\'gregorian_easter\', delta_days=-2)\nHoliday("Easter Monday", etc, delta_days=1)\n# Some states in Australia used to have Easter Tuesday (no kidding)\nHoliday("Easter Tuesday", etc, delta_days=2)\n']], ['Detecting a US Holiday'], 3], [(2394235, 2), [['The so-called "static" holidays are not fixed when the "fixed" date is a Saturday or Sunday and may even vanish (no alternative day off work):'], ["I'm sure there are ways of specifying holidays that aren't catered for by the above rules ... any such news is welcome."]], [[' # Americans will get a day off on Friday 31 Dec 2010\n# because 1 Jan 2011 is a Saturday.\nHoliday("New Year\'s Day", type=\'fixed\',\n    day=1, month=JAN, sat_adj=-1, sun_adj=????)\n\n# Australia observes ANZAC Day on the day, with no day off\n# if the fixed date falls on a weekend.\nHoliday("ANZAC Day", type=\'fixed\', day=25, month=APR, sat_adj=0, sun_adj=0)\n\n# Two consecutive "fixed" holidays is OK; three would need re-thinking.\n# Australia again:\nHoliday("Christmas Day", type=\'fixed\', day=25, month=DEC, sat_adj=2, sun_adj=1)\nHoliday("Boxing Day",    type=\'fixed\', day=26, month=DEC, sat_adj=2, sun_adj=2)\n']], ['Detecting a US Holiday'], 3], [(2394493, 0), [["Once you've got ahold of the Plone site object, you can do a catalog query to find all content items in the site:"], ['This returns a list of "catalog brains", each of which contains some metadata about the item.  You can get the full item from the brain:']], [['  >>> brains = site.portal_catalog.unrestrictedSearchResults()\n']], ["Migrating data from Plone to Liferay, or how could I retrieve information from Plone's Data.fs"], 3], [(2394493, 1), [['This returns a list of "catalog brains", each of which contains some metadata about the item.  You can get the full item from the brain:'], ["Assuming your Plone site is using Archetypes-based content, you can then iterate through the fields of the item's schema and use each field's accessor to retrieve its value:"]], [['  >>> for b in brains:\n ...     obj = b.getObject()\n']], ["Migrating data from Plone to Liferay, or how could I retrieve information from Plone's Data.fs"], 3], [(2394493, 2), [["Assuming your Plone site is using Archetypes-based content, you can then iterate through the fields of the item's schema and use each field's accessor to retrieve its value:"], ["Since the ZODB is an object database that stores pickled Python objects, you will need to have the correct version of Archetypes present in your Python environment, as well as the package that defines the class of the objects you're trying to retrieve."]], [['  >>> for field in obj.Schema().fields():\n ...     field_id = field.__name__\n ...     field_value = field.getAccessor(obj)()\n']], ["Migrating data from Plone to Liferay, or how could I retrieve information from Plone's Data.fs"], 3], [(2395675, 0), [["You can do this pretty easily from python's interactive console:"], ['You can perform search queries directly on your index and do all sorts of fun stuff. To get every document I could do this:']], [[" >>> from whoosh.index import open_dir\n>>> ix = open_dir('whoosh_index')\n>>> ix.schema\n<<< <Schema: ['author', 'author_exact', 'content', 'django_ct', 'django_id', 'id', 'lexer', 'lexer_exact', 'published', 'published_exact']>\n"]], ['Whoosh index viewer'], 3], [(2395675, 1), [['You can perform search queries directly on your index and do all sorts of fun stuff. To get every document I could do this:'], ['If you wanted to print it all out (for viewing or whatnot), you could do so pretty easily using a python script.']], [[" >>> from whoosh.query import Every\n>>> results = ix.searcher().search(Every('content'))\n"]], ['Whoosh index viewer'], 3], [(2395675, 2), [['If you wanted to print it all out (for viewing or whatnot), you could do so pretty easily using a python script.'], ["You could also return the documents directly from whoosh in a django view (for pretty formatting using django's template system perhaps): Refer to the whoosh documentation for more info:  http://packages.python.org/Whoosh/index.html ."]], [[' for result in results:\n    print "Rank: %s Id: %s Author: %s" % (result.rank, result[\'id\'], result[\'author\'])\n    print "Content:"\n    print result[\'content\']\n']], ['Whoosh index viewer'], 3], [(2396209, 0), [['Reading from  /dev/random  is a good idea. Just convert the 4 byte string into an Integer:'], ['Either using struct:']], [[' f = open("/dev/random","rb")\nrnd_str = f.read(4)\n']], ['Best seed for parallel process'], 3], [(2396209, 1), [['Either using struct:'], ['Or multiply and add:']], [[" import struct\nrand_int = struct.unpack('I', rnd_string)[0]\n"]], ['Best seed for parallel process'], 3], [(2396209, 2), [['Or multiply and add:'], ['-10000']], [[' rand_int = 0\nfor c in rnd_str:\n    rand_int <<= 8\n    rand_int += ord(c)\n']], ['Best seed for parallel process'], 3], [(2396529, 0), [['in mybot/settings.py:'], ['in mybot/spidermanager.py:']], [[" SPIDER_MANAGER_CLASS = 'mybot.spidermanager.MySpiderManager'\n"]], ['Using one Scrapy spider for several websites'], 3], [(2396529, 1), [['in mybot/spidermanager.py:'], ['and now your custom spider class, in mybot/spider.py:']], [[' from mybot.spider import MyParametrizedSpider\n\nclass MySpiderManager(object):\n    loaded = True\n\n    def fromdomain(self, name):\n        start_urls, extra_domain_names, regexes = self._get_spider_info(name)\n        return MyParametrizedSpider(name, start_urls, extra_domain_names, regexes)\n\n    def close_spider(self, spider):\n        # Put here code you want to run before spiders is closed\n        pass\n\n    def _get_spider_info(self, name):\n        # query your backend (maybe a sqldb) using `name` as primary key, \n        # and return start_urls, extra_domains and regexes\n        ...\n        return (start_urls, extra_domains, regexes)\n']], ['Using one Scrapy spider for several websites'], 3], [(2396529, 2), [['and now your custom spider class, in mybot/spider.py:'], ['Notes:']], [[' from scrapy.spider import BaseSpider\n\nclass MyParametrizedSpider(BaseSpider):\n\n    def __init__(self, name, start_urls, extra_domain_names, regexes):\n        self.domain_name = name\n        self.start_urls = start_urls\n        self.extra_domain_names = extra_domain_names\n        self.regexes = regexes\n\n     def parse(self, response):\n         ...\n']], ['Using one Scrapy spider for several websites'], 3], [(2397141, 0), [['A pattern that often came up in Python was'], ['which helped motivate the introduction of list comprehensions, which convert that snippet to']], [[' bar = []\nfor item in some_iterable:\n    bar.append(SOME EXPRESSION)\n']], ['How to initialize a two-dimensional array in Python?'], 3], [(2397141, 1), [['which helped motivate the introduction of list comprehensions, which convert that snippet to'], ['Your code follows this pattern twice']], [[' bar = [SOME EXPRESSION for item in some_iterable]\n']], ['How to initialize a two-dimensional array in Python?'], 3], [(2397141, 2), [['Your code follows this pattern twice'], ['-10000']], [[' twod_list = []                                       \\                      \nfor i in range (0, 10):                               \\\n    new = []                  \\ can be replaced        } this too\n    for j in range (0, 10):    } with a list          /\n        new.append(foo)       / comprehension        /\n    twod_list.append(new)                           /\n']], ['How to initialize a two-dimensional array in Python?'], 3], [(2397295, 0), [['Use  BeautifulSoup  as a tree builder for  html5lib :'], ['Output:']], [[' from html5lib import HTMLParser, treebuilders\n\nparser = HTMLParser(tree=treebuilders.getTreeBuilder("beautifulsoup"))\n\ntext = "a<b>b<b>c"\nsoup = parser.parse(text)\nprint soup.prettify()\n']], ['Web scraping with Python'], 2], [(2397295, 1), [['Output:'], ['-10000']], [[' <html>\n <head>\n </head>\n <body>\n  a\n  <b>\n   b\n   <b>\n    c\n   </b>\n  </b>\n </body>\n</html>\n']], ['Web scraping with Python'], 2], [(2397791, 0), [['Sure. Add an  Axes  using  add_subplot . (Edited  import .) (Edited  show .)'], ['Alternatively, use  add_axes .']], [[' import matplotlib.pyplot as plt\nf1 = plt.figure()\nf2 = plt.figure()\nax1 = f1.add_subplot(111)\nax1.plot(range(0,10))\nax2 = f2.add_subplot(111)\nax2.plot(range(10,20))\nplt.show()\n']], ['How can I show figures separately in matplotlib?'], 2], [(2397791, 1), [['Alternatively, use  add_axes .'], ['-10000']], [[' ax1 = f1.add_axes([0.1,0.1,0.8,0.8])\nax1.plot(range(0,10))\nax2 = f2.add_axes([0.1,0.1,0.8,0.8])\nax2.plot(range(10,20))\n']], ['How can I show figures separately in matplotlib?'], 2], [(2398661, 0), [["The normal pattern (in any language) to transform a one-off scheduler into a periodic scheduler is to have each event re-schedule itself at the specified interval.  For example, with  sched , I would not use a loop like you're doing, but rather something like:"], ['and initiate the whole "forever periodic schedule" with a call']], [[' def periodic(scheduler, interval, action, actionargs=()):\n    scheduler.enter(interval, 1, periodic,\n                    (scheduler, interval, action, actionargs))\n    action(*actionargs)\n']], ['Schedule a repeating event in Python 3'], 2], [(2398661, 1), [['and initiate the whole "forever periodic schedule" with a call'], ["Or, I could use  threading.Timer  instead of  scheduler.enter , but the pattern's quite similar."]], [[' periodic(scheduler, 3600, query_rate_limit)\n']], ['Schedule a repeating event in Python 3'], 2], [(2398800, 0), [['Another way to use .ui in your code is:'], ['both approaches are good. Do not forget, that if you use Qt resource files (extremely useful) for icons and so on, you must compile it too:']], [[" from PyQt4 import QtCore, QtGui, uic\nclass MyWidget(QtGui.QWidget)\n    ...\n    #somewhere in constructor:\n    uic.loadUi('MyWidget.ui', self)\n"]], ['Linking a qtDesigner .ui file to python/pyqt?'], 2], [(2398800, 1), [['both approaches are good. Do not forget, that if you use Qt resource files (extremely useful) for icons and so on, you must compile it too:'], ["Note, when  uic  compiles interface, it adds 'import images_rc' at the end of .py file, so you must compile resources into the file with this name, or rename it in generated code."]], [[' pyrcc4.exe -o ui/images_rc.py ui/images/images.qrc\n']], ['Linking a qtDesigner .ui file to python/pyqt?'], 2], [(2400504, 0), [['Using re:'], ["This will match whole words only. If you don't need that, use the pattern:"]], [[" import re\n\ns = 'Спорт not russianA'\nd = {\n'Спорт':'Досуг',\n'russianA':'englishA'\n}\n\npattern = re.compile(r'\\b(' + '|'.join(d.keys()) + r')\\b')\nresult = pattern.sub(lambda x: d[x.group()], s)\n# Output: 'Досуг not englishA'\n"]], ['Easiest way to replace a string using a dictionary of replacements?'], 2], [(2400504, 1), [["This will match whole words only. If you don't need that, use the pattern:"], ['Note that in this case you should sort the words descending by length if some of your dictionary entries are substrings of others.']], [[" pattern = re.compile('|'.join(d.keys()))\n"]], ['Easiest way to replace a string using a dictionary of replacements?'], 2], [(2401305, 0), [['An easy way to do this is with the "code" module:'], ['Your command would look something like this:']], [[' python -c "import code; code.interact(local=locals())"\n']], ['Importing Python module from the Bash'], 2], [(2401305, 1), [['Your command would look something like this:'], ['which drops you into an interpreter that has the correct environment.']], [[' python -c "import mymodule, code; code.interact(local=locals())"\n']], ['Importing Python module from the Bash'], 2], [(2401447, 0), [['By the way, a tail-recursive equivalent of your function could be:'], ['Another "by the way", you shouldn\'t construct a list if you\'re using it just to add up the values... The Pythonic way to solve Project Euler\'s 10th problem is:']], [[' def primeList(n, i=2, acc=None):\n    return i > n and (acc or []) or primeList(n, i+1, (acc or []) + (isPrime(i) and [i] or []))\n']], ['Python recursive function error: "maximum recursion depth exceeded"'], 2], [(2401447, 1), [['Another "by the way", you shouldn\'t construct a list if you\'re using it just to add up the values... The Pythonic way to solve Project Euler\'s 10th problem is:'], ['(OK, maybe splitting it in various lines would be even more Pythonic, but I love one liners ^_^)']], [[' print sum(n for n in xrange(2, 2000001) if all(n % i for i in xrange(2, int(n**0.5)+1)))\n']], ['Python recursive function error: "maximum recursion depth exceeded"'], 2], [(2402646, 0), [['-10000'], ["The main thing is,  don't  use something like"]], [[' alist, blist, clist, dlist, elist = ([] for i in range(5))\n']], ['Python - Initializing Multiple Lists/Line'], 3], [(2402646, 1), [["The main thing is,  don't  use something like"], ['nor']], [[' alist, blist, clist, dlist, elist = [[]] * 5\n']], ['Python - Initializing Multiple Lists/Line'], 3], [(2402646, 2), [['nor'], ['which would make all names refer to the  same  empty list!']], [[' alist = blist = clist = dlist = elist = []\n']], ['Python - Initializing Multiple Lists/Line'], 3], [(2404317, 0), [['Instead of using '], ['use specifically using selector types..']], [[' self.groupBox.setStyleSheet("background-color: rgb(255, 255, 255);\\n"\n                                    "border:1px solid rgb(255, 170, 255);")\n']], ['Applying style sheets in pyqt'], 2], [(2404317, 1), [['use specifically using selector types..'], ['This solves the problem.. ']], [[' self.groupBox.setStyleSheet("QGroupBox { background-color: rgb(255, 255,\\\n255); border:1px solid rgb(255, 170, 255); }")\n']], ['Applying style sheets in pyqt'], 2], [(2405292, 0), [['-10000'], ['Alternatively, you could use']], [[' yourString.isspace()\n']], ['How to check if text is "empty" (spaces, tabs, newlines) in Python?'], 2], [(2405292, 1), [['Alternatively, you could use'], ['And then check if strippedString is empty.']], [[' strippedString = yourString.strip()\n']], ['How to check if text is "empty" (spaces, tabs, newlines) in Python?'], 2], [(2406416, 0), [["Here's a small example that shows how words are stored (the root node is the variable  _d ):"], ['Source Code']], [[" >>> x = patricia()\n>>> x.addWord('abcabc')\n>>> x._d\n{'a': ['bcabc', {}]}\n>>> x.addWord('abcdef')\n>>> x._d\n{'a': ['bc', {'a': ['bc', {}], 'd': ['ef', {}]}]}\n>>> x.addWord('abc')\n{'a': ['bc', {'a': ['bc', {}], '': ['', {}], 'd': ['ef', {}]}]}\n"]], ['Implementing a Patricia Trie for use as a dictionary'], 3], [(2406416, 1), [['Source Code'], ['You may have noticed that at the end I set  __getitem__  to the isWord method. This means that ']], [[' class patricia():\n    def __init__(self):\n        self._data = {}\n\n    def addWord(self, word):\n        data = self._data\n        i = 0\n        while 1:\n            try:\n                node = data[word[i:i+1]]\n            except KeyError:\n                if data:\n                    data[word[i:i+1]] = [word[i+1:],{}]\n                else:\n                    if word[i:i+1] == \'\':\n                        return\n                    else:\n                        if i != 0:\n                            data[\'\'] = [\'\',{}]\n                        data[word[i:i+1]] = [word[i+1:],{}]\n                return\n\n            i += 1\n            if word.startswith(node[0],i):\n                if len(word[i:]) == len(node[0]):\n                    if node[1]:\n                        try:\n                            node[1][\'\']\n                        except KeyError:\n                            data = node[1]\n                            data[\'\'] = [\'\',{}]\n                    return\n                else:\n                    i += len(node[0])\n                    data = node[1]\n            else:\n                ii = i\n                j = 0\n                while ii != len(word) and j != len(node[0]) and \\\n                      word[ii:ii+1] == node[0][j:j+1]:\n                    ii += 1\n                    j += 1\n                tmpdata = {}\n                tmpdata[node[0][j:j+1]] = [node[0][j+1:],node[1]]\n                tmpdata[word[ii:ii+1]] = [word[ii+1:],{}]\n                data[word[i-1:i]] = [node[0][:j],tmpdata]\n                return\n\n    def isWord(self,word):\n        data = self._data\n        i = 0\n        while 1:\n            try:\n                node = data[word[i:i+1]]\n            except KeyError:\n                return False\n            i += 1\n            if word.startswith(node[0],i):\n                if len(word[i:]) == len(node[0]):\n                    if node[1]:\n                        try:\n                            node[1][\'\']\n                        except KeyError:\n                            return False\n                    return True\n                else:\n                    i += len(node[0])\n                    data = node[1]\n            else:\n                return False\n\n    def isPrefix(self,word):\n        data = self._data\n        i = 0\n        wordlen = len(word)\n        while 1:\n            try:\n                node = data[word[i:i+1]]\n            except KeyError:\n                return False\n            i += 1\n            if word.startswith(node[0][:wordlen-i],i):\n                if wordlen - i > len(node[0]):\n                    i += len(node[0])\n                    data = node[1]\n                else:\n                    return True\n            else:\n                return False\n\n    def removeWord(self,word):\n        data = self._data\n        i = 0\n        while 1:\n            try:\n                node = data[word[i:i+1]]\n            except KeyError:\n                print "Word is not in trie."\n                return\n            i += 1\n            if word.startswith(node[0],i):\n                if len(word[i:]) == len(node[0]):\n                    if node[1]:\n                        try:\n                            node[1][\'\']\n                            node[1].pop(\'\')\n                        except KeyError:\n                            print "Word is not in trie."\n                        return\n                    data.pop(word[i-1:i])\n                    return\n                else:\n                    i += len(node[0])\n                    data = node[1]\n            else:\n                print "Word is not in trie."\n                return\n\n\n    __getitem__ = isWord\n']], ['Implementing a Patricia Trie for use as a dictionary'], 3], [(2406416, 2), [['You may have noticed that at the end I set  __getitem__  to the isWord method. This means that '], ["will return whether 'abc' in the trie or not. "]], [[" x['abc']\n"]], ['Implementing a Patricia Trie for use as a dictionary'], 3], [(2406537, 0), [['Found a better solution:'], ['Then create your formset like this:']], [[' class RequiredFormSet(BaseFormSet):\n    def __init__(self, *args, **kwargs):\n        super(RequiredFormSet, self).__init__(*args, **kwargs)\n        for form in self.forms:\n            form.empty_permitted = False\n']], ['Django formsets: make first required?'], 2], [(2406537, 1), [['Then create your formset like this:'], ["I  really  don't know why this wasn't an option to begin with... but, whatever. It only took a few hours of my life to figure out."]], [[' MyFormSet = formset_factory(MyForm, formset=RequiredFormSet)\n']], ['Django formsets: make first required?'], 2], [(2406959, 0), [['Because In Python,  bool  is the subclass/subtype of  int .'], ['From  boolobject.c']], [[' >>> issubclass(bool,int)\nTrue\n']], ['Why does concatenating a boolean value return an integer?'], 2], [(2406959, 1), [['From  boolobject.c'], ['-10000']], [[' /* Boolean type, a subtype of int */\n\n/* We need to define bool_print to override int_print */\nbool_print\n    fputs(self->ob_ival == 0 ? "False" : "True", fp);\n\n/* We define bool_repr to return "False" or "True" */\nbool_repr\n    ...\n\n/* We define bool_new to always return either Py_True or Py_False */\n    ...\n\n// Arithmetic methods -- only so we can override &, |, ^\nbool_as_number\n    bool_and,       /* nb_and */\n    bool_xor,       /* nb_xor */\n    bool_or,        /* nb_or */\n\nPyBool_Type\n    "bool",\n    sizeof(PyIntObject),\n    (printfunc)bool_print,          /* tp_print */\n    (reprfunc)bool_repr,            /* tp_repr */\n    &bool_as_number,                /* tp_as_number */\n    (reprfunc)bool_repr,            /* tp_str */\n    &PyInt_Type,                    /* tp_base */\n    bool_new,                       /* tp_new */\n']], ['Why does concatenating a boolean value return an integer?'], 2], [(2408560, 0), [['For Windows, console only, use the  msvcrt  module:'], ['For Linux, this  article  describes the following solution, it requires the  termios  module:']], [[' import msvcrt\n\nnum = 0\ndone = False\nwhile not done:\n    print num\n    num += 1\n\n    if msvcrt.kbhit():\n        print "you pressed",msvcrt.getch(),"so now i will quit"\n        done = True\n']], ['Python nonblocking console input'], 3], [(2408560, 1), [['For Linux, this  article  describes the following solution, it requires the  termios  module:'], ['For cross platform, or in case you want a GUI as well, you can use Pygame:']], [[" import sys\nimport select\nimport tty\nimport termios\n\ndef isData():\n    return select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], [])\n\nold_settings = termios.tcgetattr(sys.stdin)\ntry:\n    tty.setcbreak(sys.stdin.fileno())\n\n    i = 0\n    while 1:\n        print i\n        i += 1\n\n        if isData():\n            c = sys.stdin.read(1)\n            if c == '\\x1b':         # x1b is ESC\n                break\n\nfinally:\n    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)\n"]], ['Python nonblocking console input'], 3], [(2408560, 2), [['For cross platform, or in case you want a GUI as well, you can use Pygame:'], ['-10000']], [[" import pygame\nfrom pygame.locals import *\n\ndef display(str):\n    text = font.render(str, True, (255, 255, 255), (159, 182, 205))\n    textRect = text.get_rect()\n    textRect.centerx = screen.get_rect().centerx\n    textRect.centery = screen.get_rect().centery\n\n    screen.blit(text, textRect)\n    pygame.display.update()\n\npygame.init()\nscreen = pygame.display.set_mode( (640,480) )\npygame.display.set_caption('Python numbers')\nscreen.fill((159, 182, 205))\n\nfont = pygame.font.Font(None, 17)\n\nnum = 0\ndone = False\nwhile not done:\n    display( str(num) )\n    num += 1\n\n    pygame.event.pump()\n    keys = pygame.key.get_pressed()\n    if keys[K_ESCAPE]:\n        done = True\n"]], ['Python nonblocking console input'], 3], [(2408650, 0), [["Don't  ever  use  shell=True  - it needlessy invokes a shell to in turn call your program, so there will be another process between you and your program. That has lots of unpleasant side-effects. The default is  shell=False  so you should stick with that.\nChange your  Popen  line to: "], ["Here's some example code, based on what you describe. It could work depending on how  AO_FelixStrategy_UnitTest  was developed:"]], [[' p = subprocess.Popen(["./AO_FelixStrategy_UnitTest",\n                      "--bats", "31441", "--chix", "12467",\n                      "--enxutp", "31884", "--turq", "26372",\n                      "--symbol", "SOGN", "--target_date", \'2009-Oct-16\'],\n                     stdin=subprocess.PIPE, \n                     stdout=subprocess.PIPE)\n']], ['why does python.subprocess hang after proc.communicate()?'], 2], [(2408650, 1), [["Here's some example code, based on what you describe. It could work depending on how  AO_FelixStrategy_UnitTest  was developed:"], ['-10000']], [[' p = subprocess.Popen(["./AO_FelixStrategy_UnitTest",\n                      "--bats", "31441", "--chix", "12467",\n                      "--enxutp", "31884", "--turq", "26372",\n                      "--symbol", "SOGN", "--target_date", \'2009-Oct-16\'],\n                     stdin=subprocess.PIPE, \n                     stdout=subprocess.PIPE)\noutput = p.communicate(\'S\\nL\\n\')[0]\nprint output\n']], ['why does python.subprocess hang after proc.communicate()?'], 2], [(2409636, 0), [['Without regex (may be a bit more verbose but also easier to understand):'], ["EDIT after extra specification:  if you want case insensitive replace (which a regular string replace can't do):"]], [[' hay = "The fox jumped up the tree."\nneedle = "umpe"\n\nprint hay.replace(needle, "<strong>%s<strong>" % needle)\n']], ['How do I do this regex in Python?'], 2], [(2409636, 1), [["EDIT after extra specification:  if you want case insensitive replace (which a regular string replace can't do):"], ['-10000']], [[' import re\n\nhay = "The fox jUMPed up the tree."\nneedle = "umpe"\n\nregex = re.compile(\'(%s)\' % needle, re.I)\nprint regex.sub(\'<strong>\\\\1</strong>\', hay)\n']], ['How do I do this regex in Python?'], 2], [(2410619, 0), [["Another option that doesn't involve the  csv  module is:"], ['As a multiple line statement it would look like this:']], [[" data = [[item.strip() for item in line.rstrip('\\r\\n').split('\\t')] for line in open('input.txt')]\n"]], ['Python - file contents to nested list'], 2], [(2410619, 1), [['As a multiple line statement it would look like this:'], ['-10000']], [[" data = []\nfor line in open('input.txt'):\n    items = line.rstrip('\\r\\n').split('\\t')   # strip new-line characters and split on column delimiter\n    items = [item.strip() for item in items]  # strip extra whitespace off data items\n    data.append(items)\n"]], ['Python - file contents to nested list'], 2], [(2411203, 0), [['Your question is worded... strangely.  Are you having trouble with  setting default arguments  in a function definition?  '], ["If that wasn't what you were looking for, did you want to prompt the user for a missing argument? "]], [[' >>> def f(arg1="hello", arg2="goodbye"):\n    print "arg1 is", arg1\n    print "arg2 is", arg2\n\n\n>>> f()\narg1 is hello\narg2 is goodbye\n>>> f(arg2="two")\narg1 is hello\narg2 is two\n>>> f(1,2)\narg1 is 1\narg2 is 2\n>>> f(arg2="foo", arg1="bar")\narg1 is bar\narg2 is foo\n']], ['pymssql connect function'], 2], [(2411203, 1), [["If that wasn't what you were looking for, did you want to prompt the user for a missing argument? "], ['Using a sentinel value of None for a missing argument is the idiomatic way in Python to detect a missing argument and execute another function.']], [[' >>> def g(arg=None):\n    if arg is None:\n        arg = raw_input("What is the argument?")\n    print "The argument was", arg\n\n\n>>> g(123)\nThe argument was 123\n>>> g()\nWhat is the argument? foo bar\nThe argument was  foo bar\n']], ['pymssql connect function'], 2], [(2412350, 0), [['I put the following at the HEAD tag:'], ['And the following at the bottom:']], [[' <div tal:replace="structure provider:plone.resourceregistries.styles" />\n']], ['separating JSS from CSS at plone.htmlhead'], 2], [(2412350, 1), [['And the following at the bottom:'], ["Done! the CSSs will be located at the page's top and the JSs at page's bottom"]], [[' <div tal:replace="structure provider:plone.resourceregistries.scripts" />\n<div tal:replace="structure provider:plone.resourceregistries.kineticstylesheets" />\n']], ['separating JSS from CSS at plone.htmlhead'], 2], [(2412562, 0), [["I'd build an auxiliary dict to store  listA 's information more sensibly:"], ['then the task becomes very easy:']], [[" auxdict = dict((d['name'], d['val']) for d in listA)\n"]], ['List of Dicts comparision to match between lists and detect value changes in Python'], 2], [(2412562, 1), [['then the task becomes very easy:'], ['-10000']], [[" changed = [d['name'] for d in listB \n           if d['name'] in auxdict and d['val'] != auxdict[d['name']]]\n"]], ['List of Dicts comparision to match between lists and detect value changes in Python'], 2], [(2412770, 0), [['What about'], ['Example:']], [[" import operator\n\nauths = Author.objects.order_by('-score')[:30]\nordered = sorted(auths, key=operator.attrgetter('last_name'))\n"]], ['Good ways to sort a queryset? - Django'], 2], [(2412770, 1), [['Example:'], ['The result above will be ordered by  score  descending, then by  last_name  ascending. The negative sign in front of  "-score"  indicates descending order. Ascending order is implied.']], [[" ordered_authors = Author.objects.order_by('-score', 'last_name')[:30]\n"]], ['Good ways to sort a queryset? - Django'], 2], [(2413144, 0), [["To make this as easy as possible to work with, there's two steps: Converting the timedelta to an int or a float, and storing it in the datastore. First things first, converting a timedelta to a microtime:"], ["You don't have to do the conversion yourself, though - you can define a custom datastore property, which will allow you to store timedeltas directly to your model:"]], [[' def timedelta_to_microtime(td):\n  return td.microseconds + (td.seconds + td.days * 86400) * 1000000\n']], ['timedelta convert to time or int and store it in GAE (python) datastore'], 3], [(2413144, 1), [["You don't have to do the conversion yourself, though - you can define a custom datastore property, which will allow you to store timedeltas directly to your model:"], ['Now you can use this property like any other:']], [[' class TimeDeltaProperty(db.Property):\n  def get_value_for_datastore(self, model_instance):\n    value = self.__get__(model_instance, model_instance.__class__)\n    if value is not None:\n      return timedelta_to_microtime(value)\n\n  def make_value_from_datastore(self, value):\n    if value is not None:\n      return datetime.timedelta(microseconds=value)\n']], ['timedelta convert to time or int and store it in GAE (python) datastore'], 3], [(2413144, 2), [['Now you can use this property like any other:'], ['-10000']], [[' class MyModel(db.Model):\n  td = TimeDeltaProperty(required=True)\n\nentity = MyModel(td=datetime.datetime.now()-some_datetime)\nkey = entity.put()\n\nentity = db.get(key)\nprint entity.td\n']], ['timedelta convert to time or int and store it in GAE (python) datastore'], 3], [(2417215, 0), [['If you want to modules directory by specifying  module_name  as string  i.e. without actually importing the module  then use'], ['output:']], [[" def get_dir(module_name):\n    import os,imp\n    (file, pathname, description) = imp.find_module(module_name)\n    return os.path.dirname(pathname)\n\nprint get_dir('os')\n"]], ["Finding a module's directory"], 5], [(2417215, 1), [['output:'], ['']], [[' C:\\Python26\\lib\n']], ["Finding a module's directory"], 5], [(2417215, 2), [[''], ['bar.py']], [[" def foo():\n    print 'foo'\n"]], ["Finding a module's directory"], 5], [(2417215, 3), [['bar.py'], ['output:']], [[' import foo\nimport os\nprint os.path.dirname(foo.__file__)\nfoo.foo()\n']], ["Finding a module's directory"], 5], [(2417215, 4), [['output:'], ['-10000']], [[' C:\\Documents and Settings\\xxx\\My Documents\nfoo\n']], ["Finding a module's directory"], 5], [(2418910, 0), [['in the AppleScript Script Editor, write the following script:'], ["If you want to make sure you're running the Python from a certain shell (in my case, I'm using tcsh generally, and have a .tcshrc file that defines some environment variables that I want to have access to) then that middle line might want to be:"]], [[' on open location this_URL\n    do shell script "/scripts/runLocalCommand.py \'" & this_URL & "\'"\nend open location\n']], ['OSX : Defining a new URL handler that points straight at a Python script'], 6], [(2418910, 1), [["If you want to make sure you're running the Python from a certain shell (in my case, I'm using tcsh generally, and have a .tcshrc file that defines some environment variables that I want to have access to) then that middle line might want to be:"], ['Find the saved Application Bundle, and Open Contents. Find the Info.plist file, and open it. Add the following:']], [[' do shell script "tcsh -c \\"/scripts/localCommand.py \'" & this_URL & "\'\\""\n']], ['OSX : Defining a new URL handler that points straight at a Python script'], 6], [(2418910, 2), [['Find the saved Application Bundle, and Open Contents. Find the Info.plist file, and open it. Add the following:'], ['Just before the last two lines, which should be:']], [[' <key>CFBundleIdentifier</key>\n<string>com.mycompany.AppleScript.LocalCommand</string>\n<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleURLName</key>\n    <string>LocalCommand</string>\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <string>local</string>\n    </array>\n  </dict>\n</array>\n']], ['OSX : Defining a new URL handler that points straight at a Python script'], 6], [(2418910, 3), [['Just before the last two lines, which should be:'], ['There are three strings in there that might want to be changed:']], [[' </dict>\n</plist>\n']], ['OSX : Defining a new URL handler that points straight at a Python script'], 6], [(2418910, 4), [['There are three strings in there that might want to be changed:'], ["This is what I've got for this:"]], [[' com.mycompany.AppleScript.LocalCommand\nLocalCommand\nlocal\n']], ['OSX : Defining a new URL handler that points straight at a Python script'], 6], [(2418910, 5), [["This is what I've got for this:"], ['-10000']], [[' #!/usr/bin/env python\nimport sys\nimport urllib\narg = sys.argv[1]\nhandler, fullPath = arg.split(":", 1)\npath, fullArgs = fullPath.split("?", 1)\naction = path.strip("/")\nargs = fullArgs.split("&")\nparams = {}\nfor arg in args:\n    key, value = map(urllib.unquote, arg.split("=", 1))\n    params[key] = value\n']], ['OSX : Defining a new URL handler that points straight at a Python script'], 6], [(2420412, 0), [['If you have a Hamming distance match function (see e.g. the link provided by Ignacio), you could use it like this to do a search for the first match:'], ['You can overcome (1) with a function like this:']], [[' any(Hamming_distance(genome[x:x+25], sequence) == 1 for x in xrange(len(genome)))\n']], ['Search for string allowing for one mismatch in any location of the string'], 3], [(2420412, 1), [['You can overcome (1) with a function like this:'], ['Details from  this technical report . The algorithm there is for approximate search usin Levenshtein distance. To convert to using Hamming distance, I simply (!) removed the pieces of statement 2.1 that handle insertion and deletion. You\'ll notice lots of reference to "R" with a "d" superscript. "d" is distance. We need only 0 and 1. These "R"s become the R0 and R1 variables in the code below.']], [[' def Hamming_check_0_or_1(genome, posn, sequence):\n    errors = 0\n    for i in xrange(25):\n        if genome[posn+i] != sequence[i]:\n            errors += 1\n            if errors >= 2:\n                return errors\n    return errors \n']], ['Search for string allowing for one mismatch in any location of the string'], 3], [(2420412, 2), [['Details from  this technical report . The algorithm there is for approximate search usin Levenshtein distance. To convert to using Hamming distance, I simply (!) removed the pieces of statement 2.1 that handle insertion and deletion. You\'ll notice lots of reference to "R" with a "d" superscript. "d" is distance. We need only 0 and 1. These "R"s become the R0 and R1 variables in the code below.'], ['-10000']], [[' # coding: ascii\n\nfrom collections import defaultdict\nimport re\n\n_DEBUG = 0\n\n\n# "Fast Text Searching with Errors" by Sun Wu and Udi Manber\n# TR 91-11, Dept of Computer Science, University of Arizona, June 1991.\n# http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.20.8854\n\ndef WM_approx_Ham1_search(pattern, text):\n    """Generate (Hamming_dist, start_offset)\n    for matches with distance 0 or 1"""\n    m = len(pattern)\n    S_table = defaultdict(int)\n    for i, c in enumerate(pattern):\n        S_table[c] |= 1 << i\n    R0 = 0\n    R1 = 0\n    mask = 1 << (m - 1)\n    for j, c in enumerate(text):\n        S = S_table[c]\n        shR0 = (R0 << 1) | 1\n        R0 = shR0 & S\n        R1 = ((R1 << 1) | 1) & S | shR0\n        if _DEBUG:\n            print "j= %2d msk=%s S=%s R0=%s R1=%s" \\\n                % tuple([j] + map(bitstr, [mask, S, R0, R1]))\n        if R0 & mask: # exact match\n            yield 0, j - m + 1\n        elif R1 & mask: # match with one substitution\n            yield 1, j - m + 1\n\nif _DEBUG:\n\n    def bitstr(num, mlen=8):\n       wstr = ""\n       for i in xrange(mlen):\n          if num & 1:\n             wstr = "1" + wstr\n          else:\n             wstr = "0" + wstr\n          num >>= 1\n       return wstr\n\ndef Ham_dist(s1, s2):\n    """Calculate Hamming distance between 2 sequences."""\n    assert len(s1) == len(s2)\n    return sum(c1 != c2 for c1, c2 in zip(s1, s2))\n\ndef long_check(pattern, text):\n    """Naively and understandably generate (Hamming_dist, start_offset)\n    for matches with distance 0 or 1"""\n    m = len(pattern)\n    for i in xrange(len(text) - m + 1):\n        d = Ham_dist(pattern, text[i:i+m])\n        if d < 2:\n            yield d, i\n\ndef Paul_McGuire_regex(pattern, text):\n    searchSeqREStr = (\n        \'(\'\n        + pattern\n        + \')|(\'\n        + \')|(\'.join(\n            pattern[:i]\n            + "[ACTGN]".replace(c,\'\')\n            + pattern[i+1:]\n            for i,c in enumerate(pattern)\n            )\n        + \')\'\n        )\n    searchSeqRE = re.compile(searchSeqREStr)\n    for match in searchSeqRE.finditer(text):\n        locn = match.start()\n        dist = int(bool(match.lastindex - 1))\n        yield dist, locn\n\n\nif __name__ == "__main__":\n\n    genome1 = "TTTACGTAAACTAAACTGTAA"\n    #         01234567890123456789012345\n    #                   1         2\n\n    tests = [\n        (genome1, "ACGT ATGT ACTA ATCG TTTT ATTA TTTA"),\n        ("T" * 10, "TTTT"),\n        ("ACGTCGTAAAA", "TCGT"), # partial match can shadow an exact match\n        ]\n\n    nfailed = 0\n    for genome, patterns in tests:\n        print "genome:", genome\n        for pattern in patterns.split():\n            print pattern\n            a1 = list(WM_approx_Ham1_search(pattern, genome))\n            a2 = list(long_check(pattern, genome))\n            a3 = list(Paul_McGuire_regex(pattern, genome))\n            print a1\n            print a2\n            print a3\n            print a1 == a2, a2 == a3\n            nfailed += (a1 != a2 or a2 != a3)\n    print "***", nfailed\n']], ['Search for string allowing for one mismatch in any location of the string'], 3], [(2420516, 0), [['For example in your admin class you could do something like this (you need to write and import hide_fields).'], ['This might end up being interpreted as the following, assuming content is in the settings file as something you want to hide:']], [[" fieldsets = hide_fields(\n    (None,\n        {'fields':('title', 'content')}\n    )\n)\n"]], ['How To Collapse Just One Field in Django Admin?'], 2], [(2420516, 1), [['This might end up being interpreted as the following, assuming content is in the settings file as something you want to hide:'], ['-10000']], [[" fieldsets = (\n    (None,\n        {'fields':('title',)}\n    ),\n    ('Extra',\n        {\n            'fields':  ('content',),\n            'classes':('collapse',),\n        }\n    ),\n)\n"]], ['How To Collapse Just One Field in Django Admin?'], 2], [(2421145, 0), [["Still, Python knows about that. From  cmd.exe  you'll probably get something like:"], ["whereas within  Sublime Text  you'll get something like"]], [[" >>> import sys\n>>> sys.stdin.encoding\n'cp437'\n"]], ['Python Unicode strings and the Python interactive interpreter'], 2], [(2421145, 1), [["whereas within  Sublime Text  you'll get something like"], ['-10000']], [[" >>> import sys\n>>> sys.stdin.encoding\n'utf-8'\n"]], ['Python Unicode strings and the Python interactive interpreter'], 2], [(2424226, 0), [['Should be done like this'], ['Or']], [[' for i in range(len(words)):\n    words[i]=words[i].rstrip()\n']], ['manipulating list items python'], 4], [(2424226, 1), [['Or'], ['Or one liner with list comprehension']], [[' words=map(str.rstrip,words)\n']], ['manipulating list items python'], 4], [(2424226, 2), [['Or one liner with list comprehension'], ['Or with regex .findall']], [[' words=[x.rstrip() for x in line.split("\\t")]\n']], ['manipulating list items python'], 4], [(2424226, 3), [['Or with regex .findall'], ['-10000']], [[' words=re.findall("[^\\t]+",line)\n']], ['manipulating list items python'], 4], [(2424412, 0), [['Python 2.x:'], ['Python 3.x (in 3.x,  map  returns an iterator, not a list as in 2.x):']], [[' map(int, ["1", "2", "3"])\n']], ['What is the easiest way to convert list with str into list with int?'], 2], [(2424412, 1), [['Python 3.x (in 3.x,  map  returns an iterator, not a list as in 2.x):'], ['map  documentation:  2.6 ,  3.1']], [[' list(map(int, ["1", "2", "3"]))\n']], ['What is the easiest way to convert list with str into list with int?'], 2], [(2424921, 0), [['Typical mainframe flow...'], ['Typical Linux flow...']], [[" Input Disk/Tape/User (runtime) --> Job Control Language (JCL) --> Output Disk/Tape/Screen/Printer\n                                   |                          ^\n                                   v                          |\n                                   `--> COBOL Program --------' \n"]], ['Python vs Bash - In which kind of tasks each one outruns the other performance-wise?'], 2], [(2424921, 1), [['Typical Linux flow...'], ['-10000']], [[" Input Disk/SSD/User (runtime) --> sh/bash/ksh/zsh/... ----------> Output Disk/SSD/Screen/Printer\n                                   |                          ^\n                                   v                          |\n                                   `--> Python script --------'\n                                   |                          ^\n                                   v                          |\n                                   `--> awk script -----------'\n                                   |                          ^\n                                   v                          |\n                                   `--> sed script -----------'\n                                   |                          ^\n                                   v                          |\n                                   `--> C/C++ program --------'\n                                   |                          ^\n                                   v                          |\n                                   `--- Java program ---------'\n                                   |                          ^\n                                   v                          |\n                                   :                          :\n"]], ['Python vs Bash - In which kind of tasks each one outruns the other performance-wise?'], 2], [(2426246, 0), [['eg'], ['visual note: if you think of the compare as a matrix (item number of one on one axis item of the other on the other axis) this looks at one of the triangles.']], [[' for (firstitem = 1 to maxitemnumber)\n  for (seconditem = firstitemnumber+1 to maxitemnumber)\n    compare(firstitem, seconditem)\n']], ['Compare DB row values efficiently'], 2], [(2426246, 1), [['visual note: if you think of the compare as a matrix (item number of one on one axis item of the other on the other axis) this looks at one of the triangles.'], ['-10000']], [[' ........\nx.......\nxx......\nxxx.....\nxxxx....\nxxxxx...\nxxxxxx..\nxxxxxxx.\n']], ['Compare DB row values efficiently'], 2], [(2429098, 0), [['-10000'], ["If you don't want to make a copy of list, you can make a simple generator:"]], [[' for item in list[:-1]:\n    print "Not last: ", item\nprint "Last: ", list[-1]\n']], ['How to treat the last element in list differently in Python?'], 3], [(2429098, 1), [["If you don't want to make a copy of list, you can make a simple generator:"], ['Another definition for notlast:']], [[' # itr is short for "iterable" and can be any sequence, iterator, or generator\n\ndef notlast(itr):\n    itr = iter(itr)  # ensure we have an iterator\n    prev = itr.next()\n    for item in itr:\n        yield prev\n        prev = item\n\n# lst is short for "list" and does not shadow the built-in list()\n# \'L\' is also commonly used for a random list name\nlst = range(4)\nfor x in notlast(lst):\n    print "Not last: ", x\nprint "Last: ", lst[-1]\n']], ['How to treat the last element in list differently in Python?'], 3], [(2429098, 2), [['Another definition for notlast:'], ['-10000']], [[' import itertools\nnotlast = lambda lst:itertools.islice(lst, 0, len(lst)-1)\n']], ['How to treat the last element in list differently in Python?'], 3], [(2435261, 0), [['Server .  Use a dictionary to get labels on the fields.  Write this as the response.'], ['Client .  After reading the response string, create a Python dictionary this way.']], [[' >>> import json\n>>> json.dumps( {\'vld_id\':1,\'vls_error\':2,\'something_else\':True} )\n\'{"vld_id": 1, "something_else": true, "vls_error": 2}\'\n']], ['Passing a Python list using JSON and Django '], 2], [(2435261, 1), [['Client .  After reading the response string, create a Python dictionary this way.'], ['-10000']], [[' >>> json.loads( \'{"vld_id": 1, "something_else": true, "vls_error": 2}\' )\n{u\'vld_id\': 1, u\'something_else\': True, u\'vls_error\': 2}\n']], ['Passing a Python list using JSON and Django '], 2], [(2435283, 0), [['pyDes  can be used for both, DES and 3DES. Sample usage:'], ['An alternative is the  Chillkat Python Encryption Library  which supports a lot of encryption algorithms (including DES & 3DES), but it is  not  free. Sample usage:']], [[' from pyDes import *\n\ndata = "Please encrypt my data"\nk = des("DESCRYPT", CBC, "\\0\\0\\0\\0\\0\\0\\0\\0", pad=None, padmode=PAD_PKCS5)\nd = k.encrypt(data)\nprint "Encrypted: %r" % d\nprint "Decrypted: %r" % k.decrypt(d)\nassert k.decrypt(d, padmode=PAD_PKCS5) == data\n']], ['using DES/3DES with python'], 2], [(2435283, 1), [['An alternative is the  Chillkat Python Encryption Library  which supports a lot of encryption algorithms (including DES & 3DES), but it is  not  free. Sample usage:'], ['Anyway, I hope that you are aware that neither DES nor 3DES are considered paritcularly safe nowadays, there are  many better alternatives  (AES in the first place if you want to stick to standards, or Twofish, Blowfish, etc...)']], [[' crypt.put_CryptAlgorithm("des")\ncrypt.put_CipherMode("cbc")\ncrypt.put_KeyLength(64)\ncrypt.put_PaddingScheme(0)\ncrypt.put_EncodingMode("hex")\nivHex = "0001020304050607"\ncrypt.SetEncodedIV(ivHex,"hex")\nkeyHex = "0001020304050607"\ncrypt.SetEncodedKey(keyHex,"hex")\nencStr = crypt.encryptStringENC("The quick brown fox jumps over the lazy dog.")\nprint encStr\ndecStr = crypt.decryptStringENC(encStr)\nprint decStr\n']], ['using DES/3DES with python'], 2], [(2435764, 0), [['So (pseudocode as I have comments in lieu of what you want to do in either case...):'], ["One alternative would be to do the decoration in the decorator itself under the hypothesis of a real function, but also make available the original function object as  wrapper._f .  Then, the metaclass's  __init__  can re-do the decoration for all functions in the class body that it sees have been marked this way.  This approach is much more solid than the convention-relying one I just sketched, even with the extra checks.  Still, something like"]], [[' import inspect\nimport functools\n\ndef decorator(f):\n  args = inspect.getargspec(f)\n  if args and args[0] == \'self\':\n     # looks like a (future) method...\n  else:\n     # looks like a "real" function\n     @functools.wraps(f)\n     def wrapper  # etc etc\n']], ['How to differentiate between method and function in a decorator?'], 2], [(2435764, 1), [["One alternative would be to do the decoration in the decorator itself under the hypothesis of a real function, but also make available the original function object as  wrapper._f .  Then, the metaclass's  __init__  can re-do the decoration for all functions in the class body that it sees have been marked this way.  This approach is much more solid than the convention-relying one I just sketched, even with the extra checks.  Still, something like"], ['would still be problematic -- you could try intercepting this with a  __setattr__  in your metaclass (but then other assignments to class attributes after the  class  statement can become problematic).']], [[' class Foo(Bar): ... # no decorations\n\n@decorator\ndef f(*a, **k): ...\n\nFoo.f = f   # "a killer"... function becomes method!\n']], ['How to differentiate between method and function in a decorator?'], 2], [(2436220, 0), [['We do this.'], ["It doesn't take much to set them up"]], [[' class FakeSomethingOrOther( object ):\n   def __init__( self ):\n       self._count_me= 0\n   def method_required_by_test( self ):\n       return self.special_answer_required_by_test\n   def count_this_method( self, *args, *kw ):\n       self._count_me += 1\n']], ['Python library for creating stubs/fake objects'], 2], [(2436220, 1), [["It doesn't take much to set them up"], ["Since you don't require complex statically checked type declarations, all you need is a class with the right methods.  You can force test attribute values in trivially."]], [[' class TestSomething( unittest.TestCase ):\n    def setUp( self ):\n        self.requiredSomething = FakeSomethingOrOther()\n        self.requiredSomething.attribute_required_by_test= 12\n        self.requiredSomething.special_answer_required_by_test = 32\n        self.to_be_tested = ActualThing( self.requiredSomething )\n']], ['Python library for creating stubs/fake objects'], 2], [(2437978, 0), [['Combined result:'], ["And if you don't need the two dictionaries for anything else, you could create only the A one and iterate over the B (key, value) tuples as they pop out of your B query. After the  docb = cursor2.fetchall() , replace all following code by this:"]], [[' if len(doca_dic) < len(docb_dict):\n    short_dict, long_dict = doca_dic, docb_dic\nelse:\n    short_dict, long_dict = docb_dic, doca_dic\nsimilarity = 0\nfor x in short_dict:\n    if x in long_dict:\n        #calculate the similarity by summing the products of the tf-idf_norm \n        similarity += short_dict[x] * long_dict[x]\n']], ['Document Similarity: Comparing two documents efficiently'], 5], [(2437978, 1), [["And if you don't need the two dictionaries for anything else, you could create only the A one and iterate over the B (key, value) tuples as they pop out of your B query. After the  docb = cursor2.fetchall() , replace all following code by this:"], ["Alternative to the above code: This is doing more work but it's doing more of the iterating in C instead of Python and may be faster."]], [[' similarity = 0\nfor b_token, b_value in docb:\n    if b_token in doca_dic:\n        similarity += doca_dic[b_token] * b_value\n']], ['Document Similarity: Comparing two documents efficiently'], 5], [(2437978, 2), [["Alternative to the above code: This is doing more work but it's doing more of the iterating in C instead of Python and may be faster."], ['Final version of the Python code']], [[' similarity = sum(\n    doca_dic[k] * docb_dic[k]\n    for k in set(doca_dic) & set(docb_dic)\n    )\n']], ['Document Similarity: Comparing two documents efficiently'], 5], [(2437978, 3), [['Final version of the Python code'], ['Consider pushing ALL the work onto the database. Following example uses a hardwired SQLite query but the principle is the same.']], [[' # Doc A\ncursor1.execute("SELECT token, tfidf_norm FROM index WHERE doc_id = %s", (docid[i][0]))\ndoca = cursor1.fetchall()\n# Doc B\ncursor2.execute("SELECT token, tfidf_norm FROM index WHERE doc_id = %s", (docid[j][0]))\ndocb = cursor2.fetchall()\nif len(doca) < len(docb):\n    short_doc, long_doc = doca, docb\nelse:\n    short_doc, long_doc = docb, doca\nlong_dict = dict(long_doc) # yes, it should be that simple\nsimilarity = 0\nfor key, value in short_doc:\n    if key in long_dict:\n        similarity += long_dict[key] * value\n']], ['Document Similarity: Comparing two documents efficiently'], 5], [(2437978, 4), [['Consider pushing ALL the work onto the database. Following example uses a hardwired SQLite query but the principle is the same.'], ["And it's worth checking that the database table is appropriately indexed (e.g. one on  token  by itself) ... not having a usable index is a good way of making an SQL query run very slowly."]], [[' C:\\junk\\so>sqlite3\nSQLite version 3.6.14\nEnter ".help" for instructions\nEnter SQL statements terminated with a ";"\nsqlite> create table atable(docid text, token text, score float,\n    primary key (docid, token));\nsqlite> insert into atable values(\'a\', \'apple\', 12.2);\nsqlite> insert into atable values(\'a\', \'word\', 29.67);\nsqlite> insert into atable values(\'a\', \'zulu\', 78.56);\nsqlite> insert into atable values(\'b\', \'apple\', 11.0);\nsqlite> insert into atable values(\'b\', \'word\', 33.21);\nsqlite> insert into atable values(\'b\', \'zealot\', 11.56);\nsqlite> select sum(A.score * B.score) from atable A, atable B\n    where A.token = B.token and A.docid = \'a\' and B.docid = \'b\';\n1119.5407\nsqlite>\n']], ['Document Similarity: Comparing two documents efficiently'], 5], [(2438235, 0), [['Whilst ActionScript has the  *args  construct ( params ... ) there is no equivalent to  **kwargs , although if you do need to send arbitrary named arguments, then you can always send a dict as a positional argument to the service. E.g.'], ['And the calling ActionScript:']], [[" def some_service_function(kwargs): # <- note the lack of **\n    foo = kwargs.get('foo')\n    bar = kwargs.get('bar')\n"]], ['Passing in **kwargs from Flex over PyAMF'], 2], [(2438235, 1), [['And the calling ActionScript:'], ['-10000']], [[' nc.call("some_service_function", {foo: "some", bar: "thing"})\n']], ['Passing in **kwargs from Flex over PyAMF'], 2], [(2438690, 0), [['For the first question, something like this if I understand your question correctly'], ['Either way, if you select all matching rows and insert the difference you should be done :)\nSomething like this should work:']], [[' mytable.__table__.select(mytable.value.in_(values)\n']], ['Batch select with SQLAlchemy'], 2], [(2438690, 1), [['Either way, if you select all matching rows and insert the difference you should be done :)\nSomething like this should work:'], ['-10000']], [[' results = self.conn.execute(mytable.__table__.select(mytable.value.in_(values))\navailable_values = set(row.value for row in results)\nto_insert = set(values) - available_values\n']], ['Batch select with SQLAlchemy'], 2], [(2439824, 0), [['You can definitely use the API to check if a page exists:'], ['Now pages you will contain xml like this:']], [[' #Assuming words is a list of words you wish to query for\nimport urllib\n\n# replace en.wikipedia.org with the address of the wiki you want to access\nquery = "http://en.wikipedia.org/w/api?action=query&titles=%s&format=xml" % "|".join(words)\npages = urllib.urlopen(query)\n']], ['Check if a MediaWiki page exists (Python)'], 2], [(2439824, 1), [['Now pages you will contain xml like this:'], ['Pages which don\'t exist will appear here but they have the missing="" attribute set, as can be seen above. You can also check for the invalid attribute to be on the save side.']], [[' <?xml version="1.0"?><api><query><pages>\n\n   <page ns="0" title="DOESNOTEXIST" missing="" />\n\n   <page pageid="600799" ns="0" title="FOO" />\n\n   <page pageid="11178" ns="0" title="Foobar" />\n\n</pages></query></api>\n']], ['Check if a MediaWiki page exists (Python)'], 2], [(2439986, 0), [['Look at this Python 2.6 code:'], ["Now look at this code, which has an 'if' in the list comprehension:"]], [[' >>> def foo(func, iterable):\n...     return [func(i) for i in iterable]\n...\n>>> import dis; dis.dis(foo)\n  2           0 BUILD_LIST               0 #### build empty list\n              3 DUP_TOP\n              4 STORE_FAST               2 (_[1])\n              7 LOAD_FAST                1 (iterable)\n             10 GET_ITER\n        >>   11 FOR_ITER                19 (to 33)\n             14 STORE_FAST               3 (i)\n             17 LOAD_FAST                2 (_[1])\n             20 LOAD_FAST                0 (func)\n             23 LOAD_FAST                3 (i)\n             26 CALL_FUNCTION            1\n             29 LIST_APPEND      #### stack[-2].append(stack[-1]); pop()\n             30 JUMP_ABSOLUTE           11\n        >>   33 DELETE_FAST              2 (_[1])\n             36 RETURN_VALUE\n']], ['Python 3: Most efficient way to create a [func(i) for i in range(N)] list comprehension'], 3], [(2439986, 1), [["Now look at this code, which has an 'if' in the list comprehension:"], ['In Python 3.X, you need to dig a little deeper:']], [[' >>> def bar(func, iterable):\n...     return [func(i) for i in iterable if i]\n...\n>>> import dis; dis.dis(bar)\n  2           0 BUILD_LIST               0\n              3 DUP_TOP\n              4 STORE_FAST               2 (_[1])\n              7 LOAD_FAST                1 (iterable)\n             10 GET_ITER\n        >>   11 FOR_ITER                30 (to 44)\n             14 STORE_FAST               3 (i)\n             17 LOAD_FAST                3 (i)\n             20 JUMP_IF_FALSE           17 (to 40)\n             23 POP_TOP\n             24 LOAD_FAST                2 (_[1])\n             27 LOAD_FAST                0 (func)\n             30 LOAD_FAST                3 (i)\n             33 CALL_FUNCTION            1\n             36 LIST_APPEND\n             37 JUMP_ABSOLUTE           11\n        >>   40 POP_TOP\n             41 JUMP_ABSOLUTE           11\n        >>   44 DELETE_FAST              2 (_[1])\n             47 RETURN_VALUE\n>>>\n']], ['Python 3: Most efficient way to create a [func(i) for i in range(N)] list comprehension'], 3], [(2439986, 2), [['In Python 3.X, you need to dig a little deeper:'], ["It's the same old schtick: start off with building an empty list, then iterate over the iterable, appending to the list as required. I see no preallocation here."]], [[' >>> import dis\n>>> def comprehension(f, iterable): return [f(i) for i in iterable]\n...\n>>> dis.dis(comprehension)\n  1           0 LOAD_CLOSURE             0 (f)\n              3 BUILD_TUPLE              1\n              6 LOAD_CONST               1 (<code object <listcomp> at 0x00C4B8D\n8, file "<stdin>", line 1>)\n              9 MAKE_CLOSURE             0\n             12 LOAD_FAST                1 (iterable)\n             15 GET_ITER\n             16 CALL_FUNCTION            1\n             19 RETURN_VALUE\n>>> dis.dis(comprehension.__code__.co_consts[1])\n  1           0 BUILD_LIST               0\n              3 LOAD_FAST                0 (.0)\n        >>    6 FOR_ITER                18 (to 27)\n              9 STORE_FAST               1 (i)\n             12 LOAD_DEREF               0 (f)\n             15 LOAD_FAST                1 (i)\n             18 CALL_FUNCTION            1\n             21 LIST_APPEND              2\n             24 JUMP_ABSOLUTE            6\n        >>   27 RETURN_VALUE\n>>>\n']], ['Python 3: Most efficient way to create a [func(i) for i in range(N)] list comprehension'], 3], [(2440554, 0), [['-10000'], ['-10000']], [[' #!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import division\n\nimport sys\nimport gobject\ngobject.threads_init()\nimport pygst\npygst.require("0.10")\nimport gst\nd = gst.parse_launch("filesrc name=source ! decodebin2 ! fakesink")\nsource = d.get_by_name("source")\nsource.set_property("location", sys.argv[1])\nd.set_state(gst.STATE_PLAYING)\nd.get_state()\nformat = gst.Format(gst.FORMAT_TIME)\nduration = d.query_duration(format)[0]\nd.set_state(gst.STATE_NULL)\n\nimport datetime\ndelta = datetime.timedelta(seconds=(duration / gst.SECOND))\nprint delta\n']], ['How do I find the length of media with gstreamer?'], 2], [(2440554, 1), [['-10000'], ['-10000']], [[' $ python duration.py VIDEO_TS/VTS_03_1.VOB\n0:20:10.528000\n$ python duration.py ~/Movies/BigBuckBunny_640x360.m4v\n0:09:56.461667\n']], ['How do I find the length of media with gstreamer?'], 2], [(2441682, 0), [['repr()  is your friend (except on Python 3.X; use  ascii()  instead).'], ['The following should help with what to do next:']], [[' prompt>\\python26\\python -c "print repr(open(\'report.csv\',\'rb\').read()[:300])"\n\'\\xff\\xfeW\\x00e\\x00b\\x00 \\x00S\\x00e\\x00a\\x00r\\x00c\\x00h\\x00 \\x00I\\x00n\\x00t\\x00e\n\\x00r\\x00e\\x00s\\x00t\\x00:\\x00 \\x00f\\x00o\\x00o\\x00b\\x00a\\x00r\\x00\\r\\x00\\n\\x00W\\x0\n[snip]\nx001\\x007\\x00\\t\\x004\\x004\\x00\\r\\x00\\n\\x002\\x000\\x00\'\n']], ['Weird characters in exported csv files when converting'], 2], [(2441682, 1), [['The following should help with what to do next:'], ['Update:  Why your output file looks like gobbledegook.']], [[" >>> import codecs\n>>> lines = list(codecs.open('report.csv', 'r', encoding='UTF-16'))\n>>> import pprint\n>>> pprint.pprint(lines[:8])\n[u'Web Search Interest: foobar\\r\\n',\n u'Worldwide; 2004 - present\\r\\n',\n u'\\r\\n',\n u'Interest over time\\r\\n',\n u'Week\\tfoobar\\r\\n',\n u'2004-01-04 - 2004-01-10\\t44\\r\\n',\n u'2004-01-11 - 2004-01-17\\t44\\r\\n',\n u'2004-01-18 - 2004-01-24\\t37\\r\\n']\n>>>\n"]], ['Weird characters in exported csv files when converting'], 2], [(2442933, 0), [['So you have a dictionary with string keys and values that can be numbers, nested dictionaries, lists, and you\'d like to wrap that into an instance which lets you use attribute access in lieu of dict indexing, and "call with an index" in lieu of list indexing -- not sure what "strongly typed" has to do with this, or why you think  .features(0)  is better than  .features[0]  (such a more natural way to index a list!), but, sure, it\'s feasible.  For example, a simple approach might be:'], ['Edit : as the OP says he does want  features[0]  rather than  features(0) , just change the last two lines to']], [[" def wrap(datum):\n  # don't wrap strings\n  if isinstance(datum, basestring):\n    return datum\n  # don't wrap numbers, either\n  try: return datum + 0\n  except TypeError: pass\n  return Fourie(datum)\n\nclass Fourie(object):\n  def __init__(self, data):\n    self._data = data\n  def __getattr__(self, n):\n    return wrap(self._data[n])\n  def __call__(self, n):\n    return wrap(self._data[n])\n"]], ['PyYAML parse into arbitary object'], 2], [(2442933, 1), [['Edit : as the OP says he does want  features[0]  rather than  features(0) , just change the last two lines to'], ['i.e., define  __getitem__  (the magic method underlying indexing) instead of  __call__  (the magic method underlying instance-call).']], [['   def __getitem__(self, n):\n    return wrap(self._data[n])\n']], ['PyYAML parse into arbitary object'], 2], [(2442972, 0), [['To check if there are any factors of the number  guess  remaining you can use  any() :'], ['To check if all the remaining numbers are prime,  all()  can be used. (Since you say you already prevented the user from inputting prime numbers I assume you have some kind of  isprime()  function):']], [[' hasfactors = any(guess % n == 0 for n in numbers)\n']], ['Python - Check if numbers in list are factors of a number'], 2], [(2442972, 1), [['To check if all the remaining numbers are prime,  all()  can be used. (Since you say you already prevented the user from inputting prime numbers I assume you have some kind of  isprime()  function):'], ['-10000']], [[' onlyprimes = all(isprime(n) for n in numbers)\n']], ['Python - Check if numbers in list are factors of a number'], 2], [(2443252, 0), [['So you could use it as:'], ['which would output:']], [[' import itertools\n\ndef my_generator():\n    yield 1\n    yield 2\n\nfor i in itertools.chain(my_generator(), [5]):\n    print i\n']], ['Concatenate generator and item'], 2], [(2443252, 1), [['which would output:'], ['-10000']], [[' 1\n2\n5\n']], ['Concatenate generator and item'], 2], [(2445080, 0), [['You can use control.GetBuffer() to get RichTextBuffer and use RichTextXMLHandler to save buffer to a stream, which could be any file type object e.g. StringIO e.g. if rt is your rich text control'], ['here is a complete example which you can run and see it prints out xml, when you click outside rich text cntrl in frame']], [[' import cStringIO\nbuf = cStringIO.StringIO()\nhandler = wx.richtext.RichTextXMLHandler()\nhandler.SetFlags(wx.richtext.RICHTEXT_HANDLER_INCLUDE_STYLESHEET)\nhandler.SaveStream(rt.GetBuffer(), buf)\nprint buf.getvalue()\n']], ['save data in wxRichTextCtrl'], 3], [(2445080, 1), [['here is a complete example which you can run and see it prints out xml, when you click outside rich text cntrl in frame'], ['output:']], [[' import wx\nimport wx.richtext\n\napp = wx.App(False)\nf=wx.Frame(None, title="Test")\nf.Show()\nrt = wx.richtext.RichTextCtrl(f, size=(200,200))\ndef onEvent(evt):\n    import cStringIO\n    buf = cStringIO.StringIO()\n    handler = wx.richtext.RichTextXMLHandler()\n    handler.SetFlags(wx.richtext.RICHTEXT_HANDLER_INCLUDE_STYLESHEET)\n    handler.SaveStream(rt.GetBuffer(), buf)\n    print buf.getvalue()\n\nf.Bind(wx.EVT_LEFT_DOWN, onEvent)\napp.MainLoop()\n']], ['save data in wxRichTextCtrl'], 3], [(2445080, 2), [['output:'], ['-10000']], [[' <?xml version="1.0" encoding="UTF-8"?>\n<richtext version="1.0.0.0" xmlns="http://www.wxwidgets.org">\n  <paragraphlayout textcolor="#101010" fontsize="10" fontstyle="90" fontweight="90" fontunderlined="0" fontface="Sans" alignment="1" parspacingafter="10" parspacingbefore="0" linespacing="10">\n    <paragraph>\n      <text>sdsa</text>\n    </paragraph>\n  </paragraphlayout>\n</richtext>\n']], ['save data in wxRichTextCtrl'], 3], [(2446447, 0), [['-10000'], ['Example:']], [[" #!/usr/bin/env python\nimport datetime, fileinput, re\n\nfor line in fileinput.input():\n    if 'FILED AS OF DATE' in line:\n       line = line.rstrip()\n       dt = datetime.datetime.strptime(line, 'FILED AS OF DATE:       %Y%m%d')\n\n       # or with regex\n       date_str, = re.findall(r'\\d+', line)\n       dt = datetime.datetime.strptime(date_str, '%Y%m%d')\n\n       print dt.date()\n"]], ['read a text field in Python using regular expressions'], 3], [(2446447, 1), [['Example:'], ['Output:']], [[' $ ./finddate.py input.txt\n']], ['read a text field in Python using regular expressions'], 3], [(2446447, 2), [['Output:'], ['-10000']], [[' 2009-02-09\n']], ['read a text field in Python using regular expressions'], 3], [(2447257, 0), [['Well assuming you have the appropriate model, '], ['it would look like:']], [[' from django.contrib.gis.db import models\n\nclass User(models.Model):\n    location = models.PointField()\n    objects = models.GeoManager()\n']], ["How would I write this query in GeoDjango? (It's a library for geographic calculations in Django)"], 2], [(2447257, 1), [['it would look like:'], ['But note that such  distance lookups  are not supported by MySQL.']], [[' User.objects.filter(location__dwithin=(current_user.location, D(m=500)))\n']], ["How would I write this query in GeoDjango? (It's a library for geographic calculations in Django)"], 2], [(2451776, 0), [['Perhaps you would accomplish this with something to the effect of'], ['or maybe']], [[' text = raw_input("please give 2 numbers to multiply separated with a comma:")\nsplit_text = text.split(\',\')\na = int(split_text[0])\nb = int(split_text[1])\n# The last three lines could be written: a, b = map(int, text.split(\',\'))\n# but you may find the code I used a bit easier to understand for now.\n\nif b > 0:\n    num_times = b\nelse:\n    num_times = -b\n\ntotal = 0\n# While loops with counters basically should not be used, so I replaced the loop \n# with a for loop. Using a while loop at all is rare.\nfor i in xrange(num_times):\n    total += a \n    # We do this a times, giving us total == a * abs(b)\n\nif b < 0:\n    # If b is negative, adjust the total to reflect this.\n    total = -total\n\nprint total\n']], ['working with negative numbers in python'], 2], [(2451776, 1), [['or maybe'], ['-10000']], [[' a * b\n']], ['working with negative numbers in python'], 2], [(2452093, 0), [['-10000'], ['But it sounds like you want to use a dictionary:']], [[' L = [([1, 2, 3], 4), ([5, 6, 7], 8)]\nelement = [5, 6, 7]\n\nfor a, b in L:\n  if a == element:\n    print b\n    break\nelse:\n  print "not found"\n']], ['how to get the index or the element itself of an element found with "if element in list"'], 2], [(2452093, 1), [['But it sounds like you want to use a dictionary:'], ['Note that while there are more compact forms using  next  below, I imagined the reality of your code (rather than the contrived example) to be doing something at least slightly more complicated, so that using an block for the  if  and  else  becomes more readable with multiple statements.']], [[' L = [([1, 2, 3], 4), ([5, 6, 7], 8)]\nelement = [5, 6, 7]\n\nD = dict((tuple(a), b) for a, b in L)\n# keys must be hashable: list is not, but tuple is\n# or you could just build the dict directly:\n#D = {(1,2,3): 4, (5,6,7): 8}\n\nv = D.get(tuple(element))\nif v is not None:\n  print v\nelse:\n  print "not found"\n']], ['how to get the index or the element itself of an element found with "if element in list"'], 2], [(2452861, 0), [["Thanks to  Chad  for pointing out that this wasn't quite right"], ['The output is hex. Obviously you can skip that if you want the binary stream']], [['Python2 version # -*- coding: utf8 -*- \ngsm = (u"@£$¥èéùìòÇ\\nØø\\rÅåΔ_ΦΓΛΩΠΨΣΘΞ\\x1bÆæßÉ !\\"#¤%&\'()*+,-./0123456789:;<=>"\n       u"?¡ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÑÜ§¿abcdefghijklmnopqrstuvwxyzäöñüà")\next = (u"````````````````````^```````````````````{}`````\\\\````````````[~]`"\n       u"|````````````````````````````````````€``````````````````````````")\n\ndef gsm_encode(plaintext):\n    res = ""\n    for c in plaintext:\n        idx = gsm.find(c)\n        if idx != -1:\n            res += chr(idx)\n            continue\n        idx = ext.find(c)\n        if idx != -1:\n            res += chr(27) + chr(idx)\n    return res.encode(\'hex\')\n\nprint gsm_encode(u"Hello World")\n']], ['Python library for converting plain text (ASCII) into GSM 7-bit character set?'], 2], [(2452861, 1), [['The output is hex. Obviously you can skip that if you want the binary stream'], ['-10000']], [['Python3 version # -*- coding: utf8 -*- \nimport binascii\ngsm = ("@£$¥èéùìòÇ\\nØø\\rÅåΔ_ΦΓΛΩΠΨΣΘΞ\\x1bÆæßÉ !\\"#¤%&\'()*+,-./0123456789:;<=>?"\n       "¡ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÑÜ§¿abcdefghijklmnopqrstuvwxyzäöñüà")\next = ("````````````````````^```````````````````{}`````\\\\````````````[~]`"\n       "|````````````````````````````````````€``````````````````````````")\n\ndef gsm_encode(plaintext):\n    res = ""\n    for c in plaintext:\n        idx = gsm.find(c);\n        if idx != -1:\n            res += chr(idx)\n            continue\n        idx = ext.find(c)\n        if idx != -1:\n            res += chr(27) + chr(idx)\n    return binascii.b2a_hex(res.encode(\'utf-8\'))\n\nprint(gsm_encode("Hello World"))\n']], ['Python library for converting plain text (ASCII) into GSM 7-bit character set?'], 2], [(2454494, 0), [['However,'], ['Indeed, this appears to be the case.']], [[' help(httplib.HTTPMessage)\n...\n\nIf multiple header fields with the same name occur, they are combined\naccording to the rules in RFC 2616 sec 4.2:\n\nAppending each subsequent field-value to the first, each separated\nby a comma. The order in which header fields with the same field-name\nare received is significant to the interpretation of the combined\nfield value.\n']], ['urllib2 multiple Set-Cookie headers in response'], 2], [(2454494, 1), [['Indeed, this appears to be the case.'], ['-10000']], [[' import httplib\nfrom StringIO import StringIO\n\nmsg = \\\n"""Set-Cookie: Foo\nSet-Cookie: Bar\nSet-Cookie: Baz\n\nThis is the message"""\n\nmsg = StringIO(msg)\n\nmsg = httplib.HTTPMessage(msg)\n\nassert msg[\'Set-Cookie\'] == \'Foo, Bar, Baz\'\n']], ['urllib2 multiple Set-Cookie headers in response'], 2], [(2457193, 0), [['You can just say'], ['For example:']], [[' for col in row:\n    total += int(col)\n']], ['Looping through columns in a .csv files in Python'], 3], [(2457193, 1), [['For example:'], ['However, in your case, since you know that you have a file with a single line of comma-separated integers, you could make this much simpler:']], [[' import csv\nfrom StringIO import StringIO\n\ntotal = 0\nfor row in csv.reader(StringIO("1,2,3,4")):\n    for col in row:\n        total += int(col)\n\nprint total    # prints 10\n']], ['Looping through columns in a .csv files in Python'], 3], [(2457193, 2), [['However, in your case, since you know that you have a file with a single line of comma-separated integers, you could make this much simpler:'], ['-10000']], [[' line = open("ints.txt").read().split(",")\ntotal = sum(int(i) for i in line)\n']], ['Looping through columns in a .csv files in Python'], 3], [(2458904, 0), [["The first thing to understand is why that  setEqual  method can't work: you need to know  how identifiers work . (Reading that link should be very helpful.) For a quick rundown with probably too much terminology: in your function, the parameter  restore  is bound to an object, and you are merely re-binding that identifier with the  =  operator. Here are some examples of binding the identifier  restore  to things."], ['So, in your function, when you say:']], [[" # Bind the identifier `restore` to the number object 1.\nrestore = 1\n# Bind the identifier `restore` to the string object 'Some string.'\n# The original object that `restore` was bound to is unaffected.\nrestore = 'Some string.'\n"]], ['How do I copy only the values and not the references from a Python list?'], 4], [(2458904, 1), [['So, in your function, when you say:'], ["You are actually binding restore to a new list object you're creating. Because Python has function-local scoping,  restore  in your example is binding the function-local identifier  restore  to the new list. This will not change anything you're passing in to  setEqual  as restore. For example,"]], [[' restore = []\n']], ['How do I copy only the values and not the references from a Python list?'], 4], [(2458904, 2), [["You are actually binding restore to a new list object you're creating. Because Python has function-local scoping,  restore  in your example is binding the function-local identifier  restore  to the new list. This will not change anything you're passing in to  setEqual  as restore. For example,"], ['Simplifying a bit, you can only bind identifiers in the currently executing scope -- you can never write a function like  def set_foo_to_bar(foo, bar)  that affects the scope outside of that function. As @Ignacio says, you can use something like a copy function to rebind the identifier in the current scope:']], [[" test_variable = 1\nsetEqual(test_variable, [1, 2, 3, 4])\n# Passes, because the identifier test_variable\n# CAN'T be rebound within this scope from setEqual.\nassert test_variable == 1 \n"]], ['How do I copy only the values and not the references from a Python list?'], 4], [(2458904, 3), [['Simplifying a bit, you can only bind identifiers in the currently executing scope -- you can never write a function like  def set_foo_to_bar(foo, bar)  that affects the scope outside of that function. As @Ignacio says, you can use something like a copy function to rebind the identifier in the current scope:'], ['-10000']], [[" original = [1, 2, 3, 4]\nbackup = list(original) # Make a shallow copy of the original.\nbackup.remove(3)\nassert original == [1, 2, 3, 4] # It's okay!\n"]], ['How do I copy only the values and not the references from a Python list?'], 4], [(2460491, 0), [['To convert from a UNIX timestamp to a Python datetime object, use  datetime.fromtimestamp()  ( documentation ).'], ['From Python datetime to UNIX timestamp:']], [[' >>> from datetime import datetime\n>>> datetime.fromtimestamp(0)\ndatetime.datetime(1970, 1, 1, 1, 0)\n>>> datetime.fromtimestamp(1268816500)\ndatetime.datetime(2010, 3, 17, 10, 1, 40)\n']], ['In Python, if I have a unix timestamp, how do I insert that into a MySQL datetime field?'], 2], [(2460491, 1), [['From Python datetime to UNIX timestamp:'], ['-10000']], [[' >>> import time\n>>> time.mktime(datetime(2010, 3, 17, 10, 1, 40).timetuple())\n1268816500.0\n']], ['In Python, if I have a unix timestamp, how do I insert that into a MySQL datetime field?'], 2], [(2461169, 0), [['You could always use  StringIO  ( documentation ), it is a memory buffer that is a file-like object.'], ['Note that the  writelines  method does not add line separators. So you need to make sure that each string in mylist ends with a  \\n . If the items in mylist do not end with a  \\n , you can do:']], [[' from io import StringIO    # version < 2.6: from StringIO import StringIO\n\nbuffer = StringIO()\nbuffer.writelines(mylist)\nbuffer.seek(0)\n\nsession.storlines("...", buffer)\n']], ['Is there a simple way to make lists behave as files (with ftplib)'], 2], [(2461169, 1), [['Note that the  writelines  method does not add line separators. So you need to make sure that each string in mylist ends with a  \\n . If the items in mylist do not end with a  \\n , you can do:'], ['-10000']], [[" buffer.writelines(line + '\\n' for line in mylist)\n"]], ['Is there a simple way to make lists behave as files (with ftplib)'], 2], [(2462156, 0), [['The code to walk the visual tree:'], ['It is called like this:']], [[' from System.Windows.Media import VisualTreeHelper\n\ndef findChildren(parent, findType):\n    count = VisualTreeHelper.GetChildrenCount(parent)\n    for i in range(count):\n        child = VisualTreeHelper.GetChild(parent, i)\n        if isinstance(child, findType):\n            yield child\n        else:\n            for entry in findChildren(child, findType):\n                yield entry\n']], ['Access Controls in Silverlight DataGrid Column Header from Code'], 2], [(2462156, 1), [['It is called like this:'], ['Note that a convenient time to call this code is from the grid.Loaded event, this ensures that the headers have been created.']], [[' from System.Windows.Controls import Button\nfrom System.Windows.Controls.Primitives import DataGridColumnHeader\n\nfor entry in findChildren(self._gridControl, DataGridColumnHeader):\n    for button in findChildren(entry, Button):\n        button.Click += handler\n']], ['Access Controls in Silverlight DataGrid Column Header from Code'], 2], [(2463196, 0), [["I know other people have been faster and their solutions are similar, but here's my take (take it or leave it):"], ['which generates the file test.csv:']], [[" a = ['apple', 'orange']\n\nd ={'apple': [2,4], 'carrot': [44,33], 'orange': [345,667]}\n\nfo = open('test.csv','w')\nfo.write(',\\t'.join(a)+'\\n')\nfor y in xrange(len(d[a[0]])):\n    fo.write(',\\t'.join([str(d[i][y]) for i in a])+'\\n')\n\nfo.close()\n"]], ['Get the dictionary values for every key in a list'], 2], [(2463196, 1), [['which generates the file test.csv:'], ['-10000']], [[' apple,  orange\n2,      345\n4,      667\n']], ['Get the dictionary values for every key in a list'], 2], [(2463770, 0), [['According to the  Python docs :'], ['So, to open the file in memory, just create a file-like object (perhaps using  BytesIO ).']], [[' class zipfile.ZipFile(file[, mode[, compression[, allowZip64]]])\n\n  Open a ZIP file, where file can be either a path to a file (a string) or a file-like object. \n']], ['Python in-memory zip library'], 2], [(2463770, 1), [['So, to open the file in memory, just create a file-like object (perhaps using  BytesIO ).'], ['-10000']], [[' file_like_object = io.BytesIO(my_zip_data)\nzipfile_ob = zipfile.ZipFile(file_like_object)\n']], ['Python in-memory zip library'], 2], [(2465675, 0), [["I've used the code below in a project before.  It will work as long as the field on which you're basing your key name on is required."], ['You could then modify your example model like so:']], [[' class NamedModel(db.Model):\n    """A Model subclass for entities which automatically generate their own key\n    names on creation. See documentation for _generate_key function for\n    requirements."""\n\n    def __init__(self, *args, **kwargs):\n        kwargs[\'key_name\'] = _generate_key(self, kwargs)\n        super(NamedModel, self).__init__(*args, **kwargs)\n\n\ndef _generate_key(entity, kwargs):\n    """Generates a key name for the given entity, which was constructed with\n    the given keyword args.  The entity must have a KEY_NAME property, which\n    can either be a string or a callable.\n\n    If KEY_NAME is a string, the keyword args are interpolated into it.  If\n    it\'s a callable, it is called, with the keyword args passed to it as a\n    single dict."""\n\n    # Make sure the class has its KEY_NAME property set\n    if not hasattr(entity, \'KEY_NAME\'):\n        raise RuntimeError, \'%s entity missing KEY_NAME property\' % (\n            entity.entity_type())\n\n    # Make a copy of the kwargs dict, so any modifications down the line don\'t\n    # hurt anything\n    kwargs = dict(kwargs)\n\n    # The KEY_NAME must either be a callable or a string.  If it\'s a callable,\n    # we call it with the given keyword args.\n    if callable(entity.KEY_NAME):\n        return entity.KEY_NAME(kwargs)\n\n    # If it\'s a string, we just interpolate the keyword args into the string,\n    # ensuring that this results in a different string.\n    elif isinstance(entity.KEY_NAME, basestring):\n        # Try to create the key name, catching any key errors arising from the\n        # string interpolation\n        try:\n            key_name = entity.KEY_NAME % kwargs\n        except KeyError:\n            raise RuntimeError, \'Missing keys required by %s entity\\\'s KEY_NAME \'\\\n                \'property (got %r)\' % (entity.entity_type(), kwargs)\n\n        # Make sure the generated key name is actually different from the\n        # template\n        if key_name == entity.KEY_NAME:\n            raise RuntimeError, \'Key name generated for %s entity is same as \'\\\n                \'KEY_NAME template\' % entity.entity_type()\n\n        return key_name\n\n    # Otherwise, the KEY_NAME is invalid\n    else:\n        raise TypeError, \'KEY_NAME of %s must be a string or callable\' % (\n            entity.entity_type())\n']], ['Custom keys for Google App Engine models (Python)'], 3], [(2465675, 1), [['You could then modify your example model like so:'], ["Of course, this could be dramatically simplified in your case, changing the first line of the  NamedModel 's  __init__  method to something like:"]], [[" class Foo(NamedModel):\n    KEY_NAME = '%(name)s'\n    name = db.StringProperty()\n"]], ['Custom keys for Google App Engine models (Python)'], 3], [(2465675, 2), [["Of course, this could be dramatically simplified in your case, changing the first line of the  NamedModel 's  __init__  method to something like:"], ['-10000']], [[" kwargs['key_name'] = kwargs['name']\n"]], ['Custom keys for Google App Engine models (Python)'], 3], [(2465719, 0), [["Here's a brute force solution that should work. It has a running time of O(L^max_length) (where L is the size of the alphabet), so use it at your own risk."], ['example usage:']], [[' def all_matching_strings(alphabet, max_length, regex):\n"""Find the list of all strings over \'alphabet\' of length up to \'max_length\' that match \'regex\'"""\n\nif max_length == 0: return \n\nL = len(alphabet)\nfor N in range(1, max_length+1):\n    indices = [0]*N\n    for z in xrange(L**N):\n        r = \'\'.join(alphabet[i] for i in indices)\n        if regex.match(r):                \n           yield(r)\n\n        i = 0\n        indices[i] += 1\n        while (i<N) and (indices[i]==L):\n            indices[i] = 0\n            i += 1\n            if i<N: indices[i] += 1\n\nreturn\n']], ['Generating a list of values a regex COULD match in Python'], 3], [(2465719, 1), [['example usage:'], ["which would output all strings up to length 5, starting with a sequence of f's, and then a non empty sequence of 1-3, then ending:"]], [[" alphabet = 'abcdef1234567890'\nimport re\nregex = re.compile('f*[1-3]+$')\nfor r in all_matching_strings(alphabet, 5, regex): \n    print r\n"]], ['Generating a list of values a regex COULD match in Python'], 3], [(2465719, 2), [["which would output all strings up to length 5, starting with a sequence of f's, and then a non empty sequence of 1-3, then ending:"], ['-10000']], [[' 1\n2\n3\nf1\n11\n21\n31\nf2\n12\n22\n32\nf3\n13\n23\n33\nff1\n[more output omitted...]\n']], ['Generating a list of values a regex COULD match in Python'], 3], [(2466191, 0), [['Sure, something like this:'], ['As Brent Nash suggests, you can make this more flexible by allowing keyword arguments as well:']], [[' class Employee(object):\n    def __init__(self, initial_data):\n        for key in initial_data:\n            setattr(self, key, initial_data[key])\n']], ['Set attributes from dictionary in python'], 5], [(2466191, 1), [['As Brent Nash suggests, you can make this more flexible by allowing keyword arguments as well:'], ['Then you can call it like this:']], [[' class Employee(object):\n    def __init__(self, *initial_data, **kwargs):\n        for dictionary in initial_data:\n            for key in dictionary:\n                setattr(self, key, dictionary[key])\n        for key in kwargs:\n            setattr(self, key, kwargs[key])\n']], ['Set attributes from dictionary in python'], 5], [(2466191, 2), [['Then you can call it like this:'], ['or like this:']], [[' e = Employee({"name": "abc", "age": 32})\n']], ['Set attributes from dictionary in python'], 5], [(2466191, 3), [['or like this:'], ['or even like this:']], [[' e = Employee(name="abc", age=32)\n']], ['Set attributes from dictionary in python'], 5], [(2466191, 4), [['or even like this:'], ['-10000']], [[' employee_template = {"role": "minion"}\ne = Employee(employee_template, name="abc", age=32)\n']], ['Set attributes from dictionary in python'], 5], [(2468334, 0), [['-10000'], ['or shorter:']], [[' userdata = { "data":[]}\n\ndef fil_userdata():\n  for i in xrange(0,5):\n    user = {}\n    user["name"]=...\n    user["age"]=...\n    user["country"]=...\n    add_user(user)\n\ndef add_user(user):\n  userdata["data"].append(user)\n']], ['Python | How to create dynamic and expandable dictionaries'], 2], [(2468334, 1), [['or shorter:'], ['-10000']], [[' def gen_user():\n  return {"name":"foo", "age":22}\n\nuserdata = {"data": [gen_user() for i in xrange(0,5)]}\n\n# or fill separated from declaration so you can fill later\nuserdata ={"data":None} # None: not initialized\nuserdata["data"]=[gen_user() for i in xrange(0,5)]\n']], ['Python | How to create dynamic and expandable dictionaries'], 2], [(2469640, 0), [['-10000'], ["if  param  is a string like  '[2,6,3]'  you can use ast.literal_eval()  or json.loads():"]], [[" >>> param = [2, 6, 3]\n>>> pattern = 'www.url?param=%s&param2=%s&param3=%s'\n>>> url = pattern % tuple(param)\n>>> url\n'www.url?param=2&param2=6&param3=3'\n"]], ['Django store regular expression in DB which then gets evaluated on page'], 4], [(2469640, 1), [["if  param  is a string like  '[2,6,3]'  you can use ast.literal_eval()  or json.loads():"], ['or']], [[" >>> ast.literal_eval('[2,6,3]')\n[2, 6, 3]\n"]], ['Django store regular expression in DB which then gets evaluated on page'], 4], [(2469640, 2), [['or'], ['or']], [[' >>> json.loads(param)\n[2, 6, 3]\n']], ['Django store regular expression in DB which then gets evaluated on page'], 4], [(2469640, 3), [['or'], ['-10000']], [[' >>> simplejson.loads(param)\n[2, 6, 3]\n']], ['Django store regular expression in DB which then gets evaluated on page'], 4], [(2469988, 0), [['I have worked out how to enter in new headers and namespaces in suds.\nAs stated above you create an Element and pass it in as a soapheader as so:'], ["But if you would like to add a namespace I have found adding a prefix seem's to do the trick. So when you create one of the elements you add  addPrefix . I'm not sure if this was the way it was intended to be done but it work's."]], [[" from suds.sax.element import Element \nclient = client(url) \nssnns = ('ssn', 'http://namespaces/sessionid') \nssn = Element('SessionID', ns=ssnns).setText('123') \nclient.set_options(soapheaders=ssn)  \nresult = client.service.addPerson(person)\n"]], ['How to pass SOAP headers into python SUDS that are not defined in WSDL file'], 4], [(2469988, 1), [["But if you would like to add a namespace I have found adding a prefix seem's to do the trick. So when you create one of the elements you add  addPrefix . I'm not sure if this was the way it was intended to be done but it work's."], ['A complete script that would run could be:']], [[" ssn = Element('SessionID', ns=ssnns).setText('123').addPrefix(p='SOAP-ENC', u='http://www.w3.org/2003/05/soap-encoding')\n"]], ['How to pass SOAP headers into python SUDS that are not defined in WSDL file'], 4], [(2469988, 2), [['A complete script that would run could be:'], ["You can add logging into this script whci allow's you to check what xml command you have sent which is handy:"]], [[' #!/usr/local/bin/python2.6\n\nimport suds\n#import logging\nfrom suds.client import Client\nfrom suds.sax.element import Element\nfrom suds.sax.attribute import Attribute\nfrom suds.xsd.sxbasic import Import\n\ndef absoluteMove():\n\n    # connects to WSDL file and stores location in variable \'client\'\n    client = Client(\'http://10.10.10.10/p.wsdl\')\n    client.options.location = \'http://10.10.10.10:32963\'\n\n    # Create the header\n    wsans = (\'wsa\', \'http://schemas.xmlsoap.org/ws/2004/08/addressing\')\n    mustAttribute = Attribute(\'SOAP-ENV:mustUnderstand\', \'true\')\n    n1s = (\'SOAP-ENC\', \'http://www.w3.org/2003/05/soap-encoding\')\n    msgId = Element(\'Element\').addPrefix(p=\'SOAP-ENC\', u=\'http://www.w3.org/2003/05/soap-encoding\')\n\n    msgId2 = Element(\'Address\', ns=wsans).setText(\'http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\')\n    msgId1 = Element(\'ReplyTo\', ns=wsans).insert(msgId2)\n    msgId1.append(mustAttribute)\n\n    msgId3 = Element(\'To\', ns=wsans).setText(\'http://10.10.10.10:32954\')\n    msgId3.append(mustAttribute)\n\n    client.set_options(soapheaders=[msgId, msgId1, msgId3, msgId2])\n\n    # Create \'token\' object to pass as an argument using the \'factory\' namespace\n    token = client.factory.create(\'ns4:ReferenceToken\')\n\n    # Create \'dest\' object to pass as an argument and values passed to this object\n    dest = client.factory.create(\'ns4:PTZVector\')\n    dest.PanTilt._x=1\n    dest.PanTilt._y=4.9\n    dest.Zoom._x=1\n\n\n    # Create \'speed\' object to pass as an argument and values passed to this object\n    speed = client.factory.create(\'ns4:PTZSpeed\')\n    speed.PanTilt._x=0\n    speed.PanTilt._y=0\n    speed.Zoom._x=1\n\n    # \'AbsoluteMove\' method invoked passing in the new values entered in the above objects\n\n    try:\n        result = client.service.AbsoluteMove(token, dest, speed)\n        print "absoluteMove result ", result\n        return result\n    except suds.WebFault, e:\n        print "suds.WebFaults caught: "\n        print e\n\nif __name__ == \'__main__\': result = absoluteMove()\n']], ['How to pass SOAP headers into python SUDS that are not defined in WSDL file'], 4], [(2469988, 3), [["You can add logging into this script whci allow's you to check what xml command you have sent which is handy:"], ['The location can be put into the script as an option if the location is not in the wsdl file.']], [[" import logging\nlogging.basicConfig(level=logging.INFO)\nlogging.getLogger('suds.client').setLevel(logging.DEBUG)\n"]], ['How to pass SOAP headers into python SUDS that are not defined in WSDL file'], 4], [(2470764, 0), [['Create an auxiliary dict (work is  O(len(A) ) -- assuming the first three items of a sublist in A uniquely identify it (otherwise you need a dict of lists):'], ['Use said dict to loop once on B (work is  O(len(B)) ) to get B sublists and A indices:']], [[' aud = dict((tuple(a[:3]), i) for i, a in enumerate(A))\n']], ['python union of 2 nested lists with index'], 2], [(2470764, 1), [['Use said dict to loop once on B (work is  O(len(B)) ) to get B sublists and A indices:'], ['-10000']], [[' result = [(b, aud[tuple(b[:3])]) for b in B if tuple(b[:3]) in aud]\n']], ['python union of 2 nested lists with index'], 2], [(2471942, 0), [["The triple-quote form you suggested will still create a python string, whereas Perl's parser simply ignores anything after  __END__ . You can't write:"], ['Comments are more suitable in my opinion.']], [[' """\nI can put anything in here...\nAnything!\n"""\nimport os\nos.system("rm -rf /")\n']], ["In Python what's the best way to emulate Perl's __END__?"], 2], [(2471942, 1), [['Comments are more suitable in my opinion.'], ['-10000']], [[' #__END__\n#Whatever I write here will be ignored\n#Woohoo !\n']], ["In Python what's the best way to emulate Perl's __END__?"], 2], [(2472364, 0), [['In my project, I have a header file that contains all "important" classes and global functions and their abbreviation. Two example lines:'], ['In my  rst  files, I include this header file. Then I can use the macros in any  rst  file:']], [[' .. |PostItem| replace:: :class:`PostItem <hklib.PostItem>`\n.. |PostNotFoundError| replace:: :class:`PostNotFoundError <hklib.PostNotFoundError>`\n']], ['In Sphinx, can I register a bunch of keywords that should always be translated into links?'], 3], [(2472364, 1), [['In my  rst  files, I include this header file. Then I can use the macros in any  rst  file:'], ['About your example: I would add  Foo  to the header file and write the docstring this way:']], [[' .. include:: defs.hrst\n\n|PostItem| is a nice class. |PostNotFoundError|, on the other hand is not.\n']], ['In Sphinx, can I register a bunch of keywords that should always be translated into links?'], 3], [(2472364, 2), [['About your example: I would add  Foo  to the header file and write the docstring this way:'], ['-10000']], [[" '''This class contains a bunch of |Foo| objects'''\n"]], ['In Sphinx, can I register a bunch of keywords that should always be translated into links?'], 3], [(2473710, 0), [['__delslice__  should be faster than  __setslice__ + filter'], ['So the loop becomes.']], [[' >>> L=[2,3,4,5,6,7,8,9,10,11,12]\n>>> lucky=[]\n>>> lucky.append(L[0])\n>>> del L[::L[0]]\n>>> L\n[3, 5, 7, 9, 11]\n>>> lucky.append(L[0])\n>>> del L[::L[0]]\n>>> L\n[5, 7, 11]\n']], ['Python: speed up removal of every n-th element from list'], 2], [(2473710, 1), [['So the loop becomes.'], ['Which runs in less than 0.1 second']], [[' while len(luckynumbers) < 3000:\n    item = sieve[0]\n    luckynumbers.append(item)\n    del sieve[::item] \n']], ['Python: speed up removal of every n-th element from list'], 2], [(2475176, 0), [["It's not too hard to code yourself:"], ["Here's an example of how to use this function, and it's output:"]], [[' def intersection_graph(sets):\n    adjacency_list = {}\n    for i, s1 in enumerate(sets):\n        for j, s2 in enumerate(sets):\n            if j == i:\n                continue\n            try:\n                lst = adjacency_list[i]\n            except KeyError:\n                adjacency_list[i] = lst = []\n            weight = len(s1.intersection(s2))\n            lst.append( (j, weight) )\n    return adjacency_list\n']], ['construct graph from python set type'], 2], [(2475176, 1), [["Here's an example of how to use this function, and it's output:"], ['-10000']], [[' >>> sets = [set([1,2,3]), set([2,3,4]), set([4,2])]\n>>> intersection_graph(sets)\n{0: [(1, 2), (2, 1)], 1: [(0, 2), (2, 2)], 2: [(0, 1), (1, 2)]}\n']], ['construct graph from python set type'], 2], [(2475518, 0), [['If you need to perform single insert in a random position then the already given trivial exapmle works:'], ['However if you need to insert k items to a list of length n then using the previously given function is O(n*k + k**2) complexity. However inserting multiple items can be done in linear time O(n+k) if you calculate the target positions ahead of time and rewrite the input list in one go:']], [[' from random import randrange, sample\n\ndef random_insert(lst, item):\n    lst.insert(randrange(len(lst)+1), item)\n']], ['Python | How to append elements to a list randomly'], 2], [(2475518, 1), [['However if you need to insert k items to a list of length n then using the previously given function is O(n*k + k**2) complexity. However inserting multiple items can be done in linear time O(n+k) if you calculate the target positions ahead of time and rewrite the input list in one go:'], ['-10000']], [[' def random_insert_seq(lst, seq):\n    insert_locations = sample(xrange(len(lst) + len(seq)), len(seq))\n    inserts = dict(zip(insert_locations, seq))\n    input = iter(lst)\n    lst[:] = [inserts[pos] if pos in inserts else next(input)\n        for pos in xrange(len(lst) + len(seq))]\n']], ['Python | How to append elements to a list randomly'], 2], [(2476953, 0), [['Using the  unicodedata.east_asian_width  function, keep track of which characters are narrow and wide when computing the length of the string.'], ['Outputs:']], [[' #!/usr/bin/python\n# coding=utf-8\n\nimport sys\nimport codecs\nimport unicodedata\n\nout = codecs.getwriter(\'utf-8\')(sys.stdout)\n\ndef width(string):\n    return sum(1+(unicodedata.east_asian_width(c) in "WF")\n        for c in string)\n\na1=[u\'する\', u\'します\', u\'trazan\', u\'した\', u\'しました\']\na2=[u\'dipsy\', u\'laa-laa\', u\'banarne\', u\'po\', u\'tinky winky\']\n\nfor i,j in zip(a1,a2):\n    out.write(\'%s %s: %s\\n\' % (i, \' \'*(12-width(i)), j))\n']], ['Python utf-8, howto align printout'], 2], [(2476953, 1), [['Outputs:'], ['It doesn’t look right in some web browser fonts, but in a terminal window they line up properly.']], [[' する          : dipsy\nします        : laa-laa\ntrazan        : banarne\nした          : po\nしました      : tinky winky\n']], ['Python utf-8, howto align printout'], 2], [(2477117, 0), [['requirements.txt :'], ['Example:']], [[' -i http://dist.repoze.org/zope2/2.10/simple\nzopelib\n']], ['pip requirements.txt with alternative index'], 2], [(2477117, 1), [['Example:'], ['-10000']], [[' $ pip install -r requirements.txt\n...\nSuccessfully installed zopelib\n']], ['pip requirements.txt with alternative index'], 2], [(2479690, 0), [['It might help if you included a full script and its actual and expected outputs instead of the REPL fragments.'], ['I get this on my 10.4 system with  cd "$HOME" && python test.py tempfile 5  (system default Python 2.3.6 and MacPorts Python 2.6.4 both give the same result (leaving out the initial times and  ctime , of course)):']], [[" import sys, os, stat, time\n\ndef get_times(p):\n    s = os.stat(p)\n    return ( \n        os.path.getatime(p),\n        os.path.getmtime(p),\n        os.path.getctime(p),\n        s[stat.ST_ATIME],\n        s[stat.ST_MTIME],\n        s[stat.ST_CTIME],\n    )\n\ndef main(p, delay=1):\n    delay = float(delay)\n    (a,b) = (1000000000, 1500000000)\n\n    open(p,'w').close()\n\n    print 'initial:'\n    print get_times(p)\n\n    for t in [ (a,a), (a,b), (b,a), (b,b) ]:\n        print\n        print 'test:', t\n        os.utime(p,t)\n        print get_times(p)\n        time.sleep(delay)\n        print get_times(p)\n\nmain(*sys.argv[1:])\n"]], ['Inconsistency in modified/created/accessed time on mac'], 4], [(2479690, 1), [['I get this on my 10.4 system with  cd "$HOME" && python test.py tempfile 5  (system default Python 2.3.6 and MacPorts Python 2.6.4 both give the same result (leaving out the initial times and  ctime , of course)):'], ['If you have the Developer tools installed, you can use  /Developer/Tools/GetFileInfo  to see the HFS creationDate. I added the following lines after every  print get_times(p)  line:']], [[' % python /tmp/test.py tempfile 5\ninitial:\n(1000000000.0, 1000000000.0, 1269629881.0, 1000000000, 1000000000, 1269629881)\n\ntest: (1000000000, 1000000000)\n(1000000000.0, 1000000000.0, 1269629881.0, 1000000000, 1000000000, 1269629881)\n(1000000000.0, 1000000000.0, 1269629881.0, 1000000000, 1000000000, 1269629881)\n\ntest: (1000000000, 1500000000)\n(1000000000.0, 1500000000.0, 1269629886.0, 1000000000, 1500000000, 1269629886)\n(1000000000.0, 1500000000.0, 1269629886.0, 1000000000, 1500000000, 1269629886)\n\ntest: (1500000000, 1000000000)\n(1500000000.0, 1000000000.0, 1269629891.0, 1500000000, 1000000000, 1269629891)\n(1500000000.0, 1000000000.0, 1269629891.0, 1500000000, 1000000000, 1269629891)\n\ntest: (1500000000, 1500000000)\n(1500000000.0, 1500000000.0, 1269629896.0, 1500000000, 1500000000, 1269629896)\n(1500000000.0, 1500000000.0, 1269629896.0, 1500000000, 1500000000, 1269629896)\n']], ['Inconsistency in modified/created/accessed time on mac'], 4], [(2479690, 2), [['If you have the Developer tools installed, you can use  /Developer/Tools/GetFileInfo  to see the HFS creationDate. I added the following lines after every  print get_times(p)  line:'], ['The result now looks like this:']], [[" sys.stdout.flush()\nos.system('/Developer/Tools/GetFileInfo ' + p)\n"]], ['Inconsistency in modified/created/accessed time on mac'], 4], [(2479690, 3), [['The result now looks like this:'], ['This seems to be consistent with your observations from your Get Info window in  Finder . My interpretation (borne out by other experimentation) is that the HFS creationDate is updated by utime, but it only ever goes backwards (never forwards). If you want to update the HFS creationDate to a newer value, then you probably will have to use a Mac-specific API to do it.']], [[' % rm /tmp/tempfile; python /tmp/test.py /tmp/tempfile 1\ninitial:\n(1269636574.0, 1269636574.0, 1269636574.0, 1269636574, 1269636574, 1269636574)\nfile: "/private/tmp/tempfile"\ntype: ""\ncreator: ""\nattributes: avbstclinmedz\ncreated: 03/26/2010 15:49:34\nmodified: 03/26/2010 15:49:34\n\ntest: (1000000000, 1500000000)\n(1000000000.0, 1500000000.0, 1269636574.0, 1000000000, 1500000000, 1269636574)\nfile: "/private/tmp/tempfile"\ntype: ""\ncreator: ""\nattributes: avbstclinmedz\ncreated: 03/26/2010 15:49:34\nmodified: 07/13/2017 21:40:00\n(1000000000.0, 1500000000.0, 1269636574.0, 1000000000, 1500000000, 1269636574)\nfile: "/private/tmp/tempfile"\ntype: ""\ncreator: ""\nattributes: avbstclinmedz\ncreated: 03/26/2010 15:49:34\nmodified: 07/13/2017 21:40:00\n\ntest: (1000000000, 1000000000)\n(1000000000.0, 1000000000.0, 1269636576.0, 1000000000, 1000000000, 1269636576)\nfile: "/private/tmp/tempfile"\ntype: ""\ncreator: ""\nattributes: avbstclinmedz\ncreated: 09/08/2001 20:46:40\nmodified: 09/08/2001 20:46:40\n(1000000000.0, 1000000000.0, 1269636576.0, 1000000000, 1000000000, 1269636576)\nfile: "/private/tmp/tempfile"\ntype: ""\ncreator: ""\nattributes: avbstclinmedz\ncreated: 09/08/2001 20:46:40\nmodified: 09/08/2001 20:46:40\n\ntest: (1500000000, 1000000000)\n(1500000000.0, 1000000000.0, 1269636577.0, 1500000000, 1000000000, 1269636577)\nfile: "/private/tmp/tempfile"\ntype: ""\ncreator: ""\nattributes: avbstclinmedz\ncreated: 09/08/2001 20:46:40\nmodified: 09/08/2001 20:46:40\n(1500000000.0, 1000000000.0, 1269636577.0, 1500000000, 1000000000, 1269636577)\nfile: "/private/tmp/tempfile"\ntype: ""\ncreator: ""\nattributes: avbstclinmedz\ncreated: 09/08/2001 20:46:40\nmodified: 09/08/2001 20:46:40\n\ntest: (1500000000, 1500000000)\n(1500000000.0, 1500000000.0, 1269636578.0, 1500000000, 1500000000, 1269636578)\nfile: "/private/tmp/tempfile"\ntype: ""\ncreator: ""\nattributes: avbstclinmedz\ncreated: 09/08/2001 20:46:40\nmodified: 07/13/2017 21:40:00\n(1500000000.0, 1500000000.0, 1269636578.0, 1500000000, 1500000000, 1269636578)\nfile: "/private/tmp/tempfile"\ntype: ""\ncreator: ""\nattributes: avbstclinmedz\ncreated: 09/08/2001 20:46:40\nmodified: 07/13/2017 21:40:00\n']], ['Inconsistency in modified/created/accessed time on mac'], 4], [(2481945, 0), [['You can use the StringIO class to wrap that content as a seekable file-like object:'], ['In your case, do:']], [[" >>> import StringIO\n>>> content = 'big\\nugly\\ncontents\\nof\\nmultiple\\npdf files'\n>>> buf = StringIO.StringIO(content)\n>>> buf.readline()\n'big\\n'\n>>> buf.readline()\n'ugly\\n'\n>>> buf.readline()\n'contents\\n'\n>>> buf.readline()\n'of\\n'\n>>> buf.readline()\n'multiple\\n'\n>>> buf.readline()\n'pdf files'\n>>> buf.seek(0)\n>>> buf.readline()\n'big\\n'\n"]], ['How to read line by line in pdf file using PyPdf?'], 2], [(2481945, 1), [['In your case, do:'], ['-10000']], [[' from StringIO import StringIO\n\n# Read each line of the PDF\npdfContent = StringIO(getPDFContent("test.pdf").encode("ascii", "ignore"))\nfor line in pdfContent:\n    doSomething(line.strip())\n']], ['How to read line by line in pdf file using PyPdf?'], 2], [(2482024, 0), [['With third-party project  mysqldb  installed you can easily read that table, e.g:'], ["You can of course write each row to a  csv  file with Python's standard library  csv  module -- you'll just need an  import csv  at the start of your code.  Then, after the  cursor.execute , you can use code such as:"]], [[' import MySQLdb\nconn = MySQLdb.connect (host = "localhost",\n                        user = "testuser",\n                        passwd = "testpass",\n                        db = "test")\ncursor = conn.cursor()\ncursor.execute("SELECT * FROM thetable")\nwhile True:\n   row = cursor.fetchone()\n   if row is None: break\n   # here: do something with the row\n']], ['Convert the mysql table details to an Excel (.xls) or comma separated file (.csv) using Python'], 2], [(2482024, 1), [["You can of course write each row to a  csv  file with Python's standard library  csv  module -- you'll just need an  import csv  at the start of your code.  Then, after the  cursor.execute , you can use code such as:"], ['If you want to write to an  .xls  file instead of a  .csv , see third-party module  xlwt .']], [[" with open('thefile.csv', 'w') as f:\n    writer = csv.writer(f)\n    while True:\n        row = cursor.fetchone()\n        if row is None: break\n        writer.writerow(row)\n"]], ['Convert the mysql table details to an Excel (.xls) or comma separated file (.csv) using Python'], 2], [(2483696, 0), [['aargsort  is holding a permutation of  range(len(a))  telling you where the items of  aSort  came from -- much like, in pure Python:'], ['So given the sorted version, you can reconstruct the original by "putting items back where they came from":']], [[" >>> x = list('ciaobelu')\n>>> r = range(len(x))\n>>> r.sort(key=x.__getitem__)\n>>> r\n[2, 4, 0, 5, 1, 6, 3, 7]\n>>> \n"]], ['undo or reverse argsort(), python'], 2], [(2483696, 1), [['So given the sorted version, you can reconstruct the original by "putting items back where they came from":'], ['Of course there are going to be tighter and faster ways to express this in  numpy  (which unfortunately I don\'t know inside-out as much as I know Python itself;-), but I hope this helps by showing the underlying logic of the "putting things back in place" operation you need to perform.']], [[" >>> s = sorted(x)\n>>> s\n['a', 'b', 'c', 'e', 'i', 'l', 'o', 'u']\n>>> original = [None] * len(s)\n>>> for i, c in zip(r, s): original[i] = c\n... \n>>> original\n['c', 'i', 'a', 'o', 'b', 'e', 'l', 'u']\n>>> \n"]], ['undo or reverse argsort(), python'], 2], [(2484215, 0), [["Let's look at the easiest example:"], ['The disassembly is as follows:']], [[' from dis import dis\n\nclass A(object):\n  def __pick(self):\n      print "1"\n\n  def doitinA(self):\n      self.__pick()\n\nclass B(A):\n  def __pick(self):\n      print "2"\n\n  def doitinB(self):\n      self.__pick()\n\nb = B()\nb.doitinA() # prints 1\nb.doitinB() # prints 2\n\ndis(A.doitinA)\nprint\ndis(B.doitinB)\n']], ["How do I override a parent class's functions in python?"], 2], [(2484215, 1), [['The disassembly is as follows:'], ['As you can see, Python mangles function names that begin with two underscores (and accesses to such names!!) to a name that includes the class name - in this case  _A__pick  and  _B__pick ). That means that the class in which a function is defined determines which of the  __pick  methods is called.']], [['   8           0 LOAD_FAST                0 (self)\n              3 LOAD_ATTR                0 (_A__pick)\n              6 CALL_FUNCTION            0\n              9 POP_TOP\n             10 LOAD_CONST               0 (None)\n             13 RETURN_VALUE\n\n 15           0 LOAD_FAST                0 (self)\n              3 LOAD_ATTR                0 (_B__pick)\n              6 CALL_FUNCTION            0\n              9 POP_TOP\n             10 LOAD_CONST               0 (None)\n             13 RETURN_VALUE\n']], ["How do I override a parent class's functions in python?"], 2], [(2485295, 0), [['The PIL version packaged on pypi (by the author) is incompatible with setuptools and thus not easy_installable. People have created easy_installable versions elsewhere. Currently, you need to specify a find-links URL and use  pip  get a good package:'], ['By using  pip install  with the  --no-index  you avoid running the risk of finding the PyPI (non-fixed) original of PIL. If you were to use  easy_install , you must use a direct link to the source tarball of a corrected version; easy_install stubbornly still uses the PyPI link over the find-links URL:']], [[' pip install --no-index -f http://dist.plone.org/thirdparty/ -U PIL\n']], ['The problem with installing PIL using virtualenv or buildout'], 3], [(2485295, 1), [['By using  pip install  with the  --no-index  you avoid running the risk of finding the PyPI (non-fixed) original of PIL. If you were to use  easy_install , you must use a direct link to the source tarball of a corrected version; easy_install stubbornly still uses the PyPI link over the find-links URL:'], ['To include PIL in a buildout, either specify the egg with the same version pin or use a versions section:']], [[' easy_install http://dist.plone.org/thirdparty/PIL-1.1.7.tar.gz\n']], ['The problem with installing PIL using virtualenv or buildout'], 3], [(2485295, 2), [['To include PIL in a buildout, either specify the egg with the same version pin or use a versions section:'], ["Edit March 2011: Fixes to address the packaging issues have been merged into  PIL's development tree  now, so this workaround may soon be obsolete."]], [[' [buildout]\nparts =\nfind-links =\n    http://dist.plone.org/thirdparty/\neggs =\n    PIL\nversions = versions\n\n[versions]\nPIL = 1.1.7\n']], ['The problem with installing PIL using virtualenv or buildout'], 3], [(2485669, 0), [['The fastest way seems to be to preallocate the array, given as option 7 right at the bottom of this answer.'], ['You can easily adapt this to do it for variable chunk size.']], [[' >>> import numpy as np\n>>> A=np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n>>> A\narray([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n>>> np.array(zip(A,A[1:],A[2:],A[3:]))\narray([[ 1,  2,  3,  4],\n       [ 2,  3,  4,  5],\n       [ 3,  4,  5,  6],\n       [ 4,  5,  6,  7],\n       [ 5,  6,  7,  8],\n       [ 6,  7,  8,  9],\n       [ 7,  8,  9, 10],\n       [ 8,  9, 10, 11],\n       [ 9, 10, 11, 12],\n       [10, 11, 12, 13],\n       [11, 12, 13, 14]])\n>>> \n']], ['Consecutive, Overlapping Subsets of Array (NumPy, Python)'], 4], [(2485669, 1), [['You can easily adapt this to do it for variable chunk size.'], ['You may wish to compare performance between this and using  itertools.islice .']], [[' >>> n=5\n>>> np.array(zip(*(A[i:] for i in range(n))))\narray([[ 1,  2,  3,  4,  5],\n       [ 2,  3,  4,  5,  6],\n       [ 3,  4,  5,  6,  7],\n       [ 4,  5,  6,  7,  8],\n       [ 5,  6,  7,  8,  9],\n       [ 6,  7,  8,  9, 10],\n       [ 7,  8,  9, 10, 11],\n       [ 8,  9, 10, 11, 12],\n       [ 9, 10, 11, 12, 13],\n       [10, 11, 12, 13, 14]])\n']], ['Consecutive, Overlapping Subsets of Array (NumPy, Python)'], 4], [(2485669, 2), [['You may wish to compare performance between this and using  itertools.islice .'], ['-10000']], [[' >>> from itertools import islice\n>>> n=4\n>>> np.array(zip(*[islice(A,i,None) for i in range(n)]))\narray([[ 1,  2,  3,  4],\n       [ 2,  3,  4,  5],\n       [ 3,  4,  5,  6],\n       [ 4,  5,  6,  7],\n       [ 5,  6,  7,  8],\n       [ 6,  7,  8,  9],\n       [ 7,  8,  9, 10],\n       [ 8,  9, 10, 11],\n       [ 9, 10, 11, 12],\n       [10, 11, 12, 13],\n       [11, 12, 13, 14]])\n']], ['Consecutive, Overlapping Subsets of Array (NumPy, Python)'], 4], [(2485669, 3), [['-10000'], ['As len(A) increases (20000) 4 and 5 converge to be equivalent speed (44 ms). 1,2,3 and 6 all remain about 3 times slower (135 ms). 7 is much faster (1.36 ms).']], [['My timing results: 1. timeit np.array(zip(A,A[1:],A[2:],A[3:]))\n10000 loops, best of 3: 92.9 us per loop\n\n2. timeit np.array(zip(*(A[i:] for i in range(4))))\n10000 loops, best of 3: 101 us per loop\n\n3. timeit np.array(zip(*[islice(A,i,None) for i in range(4)]))\n10000 loops, best of 3: 101 us per loop\n\n4. timeit numpy.array([ A[i:i+4] for i in range(len(A)-3) ])\n10000 loops, best of 3: 37.8 us per loop\n\n5. timeit numpy.array(list(chunks(A, 4)))\n10000 loops, best of 3: 43.2 us per loop\n\n6. timeit numpy.array(byN(A, 4))\n10000 loops, best of 3: 100 us per loop\n\n# Does preallocation of the array help? (11 is from len(A)+1-4)\n7. timeit B=np.zeros(shape=(11, 4),dtype=np.int32)\n100000 loops, best of 3: 2.19 us per loop\n   timeit for i in range(4):B[:,i]=A[i:11+i]\n10000 loops, best of 3: 20.9 us per loop\ntotal 23.1us per loop\n']], ['Consecutive, Overlapping Subsets of Array (NumPy, Python)'], 4], [(2488654, 0), [['On my (slow-ish;-) first-day Macbook Air, 1.6GHz Core 2 Duo, system Python 2.5 on MacOSX 10.5, after saving your code in  op.py  I see the following timings:'], ['The fastest code I have for this task is:']], [[" $ python -mtimeit -s'import op' 'op.f1()'\n10 loops, best of 3: 5.58 sec per loop\n$ python -mtimeit -s'import op' 'op.f2()'\n10 loops, best of 3: 3.15 sec per loop\n"]], ['Python performance: iteration and operations on nested lists'], 6], [(2488654, 1), [['The fastest code I have for this task is:'], ['which times as:']], [[' def f3(x=x,y=y,n=n,z=z):\n    rows = [[0]*y for i in range(x)]\n    rr = random.randrange\n    inc = (1).__add__\n    sat = (0xff).__and__\n\n    for i in range(n):\n        inputX, inputY = rr(x), rr(y)\n        b = max(0, inputX - z)\n        t = min(inputX + z, x)\n        l = max(0, inputY - z)\n        r = min(inputY + z, y)\n        for i in range(b, t):\n            rows[i][l:r] = map(inc, rows[i][l:r])\n    for i in range(x):\n      rows[i] = map(sat, rows[i])\n']], ['Python performance: iteration and operations on nested lists'], 6], [(2488654, 2), [['which times as:'], ['With a simple C-coded extensions,  exte.c ...:']], [[" $ python -mtimeit -s'import op' 'op.f3()'\n10 loops, best of 3: 3 sec per loop\n"]], ['Python performance: iteration and operations on nested lists'], 6], [(2488654, 3), [['With a simple C-coded extensions,  exte.c ...:'], ["(note: I haven't checked it carefully -- I think it doesn't leak memory due to the correct interplay of reference stealing and borrowing, but it should be code inspected very carefully before being put in production;-), we could do"]], [[' #include "Python.h"\n\nstatic PyObject*\ndopoint(PyObject* self, PyObject* args)\n{\n    int x, y, z, px, py;\n    int b, t, l, r;\n    int i, j;\n    PyObject* rows;\n\n    if(!PyArg_ParseTuple(args, "iiiiiO",\n                         &x, &y, &z, &px, &py, &rows\n        ))\n        return 0;\n\n    b = px - z;\n    if (b < 0) b = 0;\n    t = px + z;\n    if (t > x) t = x;\n    l = py - z;\n    if (l < 0) l = 0;\n    r = py + z;\n    if (r > y) r = y;\n\n    for(i = b; i < t; ++i) {\n        PyObject* row = PyList_GetItem(rows, i);\n        for(j = l; j < r; ++j) {\n            PyObject* pyitem = PyList_GetItem(row, j);\n            long item = PyInt_AsLong(pyitem);\n            if (item < 255) {\n                PyObject* newitem = PyInt_FromLong(item + 1);\n                PyList_SetItem(row, j, newitem);\n            }\n        }\n    }\n\n    Py_RETURN_NONE;\n}\n\nstatic PyMethodDef exteMethods[] = {\n    {"dopoint", dopoint, METH_VARARGS, "process a point"},\n    {0}\n};\n\nvoid\ninitexte()\n{\n    Py_InitModule("exte", exteMethods);\n}\n']], ['Python performance: iteration and operations on nested lists'], 6], [(2488654, 4), [["(note: I haven't checked it carefully -- I think it doesn't leak memory due to the correct interplay of reference stealing and borrowing, but it should be code inspected very carefully before being put in production;-), we could do"], ['and the timing']], [[' import exte\ndef f4(x=x,y=y,n=n,z=z):\n    rows = [[0]*y for i in range(x)]\n    rr = random.randrange\n\n    for i in range(n):\n        inputX, inputY = rr(x), rr(y)\n        exte.dopoint(x, y, z, inputX, inputY, rows)\n']], ['Python performance: iteration and operations on nested lists'], 6], [(2488654, 5), [['and the timing'], ["shows an acceleration of 8-9 times, which should put you in the ballpark you desire. I've seen a comment saying you don't want any third-party extension, but, well, this tiny extension you could make entirely your own;-).  ((Not sure what licensing conditions apply to code on Stack Overflow, but I'll be glad to re-release this under the Apache 2 license or the like, if you need that;-))."]], [[" $ python -mtimeit -s'import op' 'op.f4()'\n10 loops, best of 3: 345 msec per loop\n"]], ['Python performance: iteration and operations on nested lists'], 6], [(2488769, 0), [['-10000'], ['If you want to be extra short and get ints try this:']], [[' values = raw_input()\n# 1 3 15\na, b, c = values.split()\n']], ['Read more numbers in a line in Python'], 2], [(2488769, 1), [['If you want to be extra short and get ints try this:'], ['-10000']], [[' a, b, c = [int(_) for _ in raw_input().split()]\n']], ['Read more numbers in a line in Python'], 2], [(2489435, 0), [["The problem with relying on any floating point computation ( math.sqrt(x) , or  x**0.5 ) is that you can't really be sure it's exact (for sufficiently large integers  x , it won't be, and might even overflow). Fortunately (if one's in no hurry;-) there are many pure integer approaches, such as the following...:"], ["Edit : let's see an example..."]], [[' def is_square(apositiveint):\n  x = apositiveint // 2\n  seen = set([x])\n  while x * x != apositiveint:\n    x = (x + (apositiveint // x)) // 2\n    if x in seen: return False\n    seen.add(x)\n  return True\n\nfor i in range(110, 130):\n   print i, is_square(i)\n']], ['How could I check if a number is a perfect square?'], 5], [(2489435, 1), [["Edit : let's see an example..."], ['this prints, as desired (and in a reasonable amount of time, too;-):']], [[' x = 12345678987654321234567 ** 2\n\nfor i in range(x, x+2):\n   print i, is_square(i)\n']], ['How could I check if a number is a perfect square?'], 5], [(2489435, 2), [['this prints, as desired (and in a reasonable amount of time, too;-):'], ["And then try with  x**7  and find clever way to work around the problem you'll get,"]], [[' 152415789666209426002111556165263283035677489 True\n152415789666209426002111556165263283035677490 False\n']], ['How could I check if a number is a perfect square?'], 5], [(2489435, 3), [["And then try with  x**7  and find clever way to work around the problem you'll get,"], ["If I  was  in a hurry, of course, I'd use  gmpy  -- but then, I'm clearly biased;-)."]], [[' OverflowError: long int too large to convert to float\n']], ['How could I check if a number is a perfect square?'], 5], [(2489435, 4), [["If I  was  in a hurry, of course, I'd use  gmpy  -- but then, I'm clearly biased;-)."], ["Yeah, I know, that's just so easy it feels like cheating (a bit the way I feel towards Python in general;-) -- no cleverness at all, just perfect directness and simplicity (and, in the case of gmpy, sheer speed;-)..."]], [[' >>> import gmpy\n>>> gmpy.is_square(x**7)\n1\n>>> gmpy.is_square(x**7 + 1)\n0\n']], ['How could I check if a number is a perfect square?'], 5], [(2489643, 0), [['I started to write my first PyQT application (PyQT is used only to handle GUI), and it seems, that good toolchain is: QtDesigner to generate .ui s and handle resources and some IDE, that can set QtDesigner to edit those. I use Eclipse, cause it is highly customisable.\nYou can compile your .qrc and .ui by demand by doing somewhat like this at application start, or at setup, or any other time:'], ['and then using generated classes this way:']], [[' os.system("pyrcc4.exe -o ui/images_rc.py ui/images/images.qrc")\nuic.compileUiDir(appDir + \'/ui\', True)\n']], ['Using QTDesigner with PyQT and Python 2.6'], 3], [(2489643, 1), [['and then using generated classes this way:'], ['or you can load .ui directly when container inits:']], [[" class MyMainWindow(QtGui.QMainWindow):\n\n    def __init__(self, owner):\n        QtGui.QMainWindow.__init__(self)\n        # 'Ui_MyMainWindow' is the class, that was generated by uic, \n        # naming convention is: 'Ui_' plus the name of root widget in designer\n        self.ui = Ui_MyMainWindow()\n        self.ui.setupUi(self)\n"]], ['Using QTDesigner with PyQT and Python 2.6'], 3], [(2489643, 2), [['or you can load .ui directly when container inits:'], ["note, that I have added UI suffix to .ui file's name, it was done to avoid name intersection , cause name of .py file, generated by uic, is not class name starting with 'Ui_', but just root widget's one."]], [["     QtGui.QMainWindow.__init__(self)\n    self.ui = None\n    uic.loadUi('MyMainWindowUI.ui', self.ui)\n    #now you have the instance of Ui_MyMainWindow in self.ui too, as above\n"]], ['Using QTDesigner with PyQT and Python 2.6'], 3], [(2491141, 0), [['The following code for read the content from a file '], ['The following code for writing the content to the file ']], [[" handle=open('file','r+')\nvar=handle.read()\nprint var\n"]], ['How to read and write a file using python?'], 2], [(2491141, 1), [['The following code for writing the content to the file '], ['-10000']], [[' handle1=open(\'file.txt\',\'r+\')\nhandle1.write("I AM NEW FILE")\nhandle1.close()\n']], ['How to read and write a file using python?'], 2], [(2494501, 0), [['You can do this with a custom model manager and override the  get_queryset  function to always filter canceled=False.'], ['EDIT:\nPerhaps a better approach with a custom manager would be to attach it to another property, other than objects, such as:']], [[' class CustomManager(models.Manager):\n    def get_queryset(self):\n        return super(CustomManager, self).get_queryset().filter(canceled=False)\n\nclass MyModel(models.Model):\n    # Blah blah\n    objects = CustomManager()\n']], ['Modify default queryset in django'], 2], [(2494501, 1), [['EDIT:\nPerhaps a better approach with a custom manager would be to attach it to another property, other than objects, such as:'], ['And in your views your queries would look like  MyModel.active.all() .']], [[' class MyModel(models.Model):\n    # Blah blah\n    active = CustomManager()\n']], ['Modify default queryset in django'], 2], [(2495046, 0), [['-10000'], ['Replace  3  by the number of lines you want as a result:']], [[' >>> l = [1,2,3,4,5,6,7,8,9,10]\n>>> [l[i::3] for i in xrange(3)]\n[[1, 4, 7, 10], [2, 5, 8], [3, 6, 9]]\n']], ['Displaying a list of items vertically in a table instead of horizonally'], 2], [(2495046, 1), [['Replace  3  by the number of lines you want as a result:'], ['-10000']], [[' >>> [l[i::5] for i in xrange(5)]\n[[1, 6], [2, 7], [3, 8], [4, 9], [5, 10]]\n']], ['Displaying a list of items vertically in a table instead of horizonally'], 2], [(2495306, 0), [["Use separate processed_countries lists for each graph path. They say one code example is worth thousand words, so I've changed your code a little (untested):"], ['Unrelated matters:']], [[' def get_longest_trip(self, board, processed_countries = list()):\n    # see https://stackoverflow.com/questions/576988/python-specific-antipatterns-and-bad-practices/577198#577198\n    processed_countries = list(processed_countries)\n    processed_countries.append(self)\n\n    longest_trip = list()\n    if self.get_connections(board):\n        possible_trips = list()\n        for card in self.get_connections(board):\n            if card not in processed_countries:\n                possible_trips.append(card.get_longest_trip(board, \n                                                            processed_countries))\n        if possible_trips:\n            longest_trip = max(possible_trips, key=len)\n            longest_trip.append(self)\n\n    if not longest_trip:\n        longest_trip.append(self)\n    return longest_trip\n']], ['Help finding longest non-repeating path through connected nodes - Python'], 2], [(2495306, 1), [['Unrelated matters:'], ['There are 16 different  bak  files in your source package. Sixteen. Sixteeeen. Think about it and start to use  version control.']], [[' Traceback (most recent call last):\n  File "main.py", line 1171, in <module>\n    main()\n  File "main.py", line 1162, in main\n    interface = Interface(continent, screen, ev_manager)    \n  File "main.py", line 72, in __init__\n    self.deck = Deck(ev_manager, continent)\n  File "main.py", line 125, in __init__\n    self.rebuild(continent)  \n  File "main.py", line 148, in rebuild\n    self.stack.append(CountryCard(country, self.ev_manager))\n  File "main.py", line 1093, in __init__\n    Card.__init__(self, COUNTRY, country.name, country.image, country.color, ev_manager)  \n  File "main.py", line 693, in __init__\n    self.set_text(text)\n  File "main.py", line 721, in set_text\n    self.rendered_text = self.render_text_rec(text)  \n  File "main.py", line 817, in render_text_rec\n    return render_textrect(text, self.font, text_rect, self.text_color, self.text_bgcolor, 1)       \n  File "/home/vasi/Desktop/Planes and Trains/src/textrect.py", line 47, in render_textrect\n    raise TextRectException, "The word " + word + " is too long to fit in the rect passed."\ntextrect.TextRectException: The word Montenegro is too long to fit in the rect passed.\n']], ['Help finding longest non-repeating path through connected nodes - Python'], 2], [(2495656, 0), [['One thing that you can do is modify what you put into imshow. The first variable can be grayscale values as you have used or it can be RGB or RGBA values. If you RGB/RGBA values then the cmap is ignored. So for instance,'], ['will generate the same image as']], [[' imshow(Z1, cmap=cm.hsv, alpha=.6, extent=extent)\n']], ['Variable alpha blending in pylab'], 3], [(2495656, 1), [['will generate the same image as'], ['because  cm.hsv() just returns RGBA values. If you take a look at the values it returns, they all have 1.0 as the A value (the transparency). So one way to make variable transparency would be something like this:']], [[' imshow(cm.hsv(Z1), alpha=.6, extent=extent)\n']], ['Variable alpha blending in pylab'], 3], [(2495656, 2), [['because  cm.hsv() just returns RGBA values. If you take a look at the values it returns, they all have 1.0 as the A value (the transparency). So one way to make variable transparency would be something like this:'], ['You might find a little more elegant way of doing this, but hopefully you get the idea.']], [[' def mycmap(x):\n    tmp = cm.hsv(x)\n    for i in xrange(tmp.shape[0]):\n        for j in xrange(tmp.shape[0]):\n            tmp[i,j][3] = somefunction of x[i,j] that generates the transparency\n    return tmp\n\nimshow(mycmap(Z1), extent=extent)\nimshow(mycmap(Z2), extent=extent)\n']], ['Variable alpha blending in pylab'], 3], [(2497790, 0), [['Special method  __str__  defined in a class works only for the instances of that class, to have the different behavior for class objects you will have to do it in a metaclass of that class e.g. (python 2.5)'], ['output:']], [[' class Meta(type):\n    def __str__(self):\n        return "Klass"\n\nclass A(object):\n    __metaclass__ = Meta\n\n    def __str__(self):\n        return "instance"\n\nprint A\nprint A()\n']], ['Python overriding class (not instance) special methods'], 2], [(2497790, 1), [['output:'], ['-10000']], [[' Klass\ninstance\n']], ['Python overriding class (not instance) special methods'], 2], [(2499865, 0), [['You could take the slice of the string without the first and last characters, then split on  ][ :'], ['outputs']], [[' s = "[segment1][segment2][segment2]"\ns[1:-1].split(\'][\')\n']], ['Segment string into array, regex?'], 2], [(2499865, 1), [['outputs'], ['-10000']], [[" ['segment1', 'segment2', 'segment2']\n"]], ['Segment string into array, regex?'], 2], [(2500584, 0), [["Each ship has its own fuel, so static isn't the way to go.  If you don't want the parameter to look like a method, consider a property.  It encapsulates the value-checking of the fuel as well."], ['In main(), consider loops to initialize the ships and display status instead of repeating code, and use ship.fuel instead of self.fuel.  self is only valid in methods of the class.']], [[' class Ship(object):\n\n    def __init__(self, name="Enterprise", fuel=0):\n        self.name = name\n        self._fuel = fuel\n        print "The spaceship", name, "has arrived!"\n\n    def status(self):\n        print "Name: ", self.name\n        print "Fuel level: ", self.fuel\n\n    @property\n    def fuel(self):\n        return self._fuel\n\n    @fuel.setter\n    def fuel(self,level):\n        if level < 0:\n            self._fuel = 0\n        else:\n            self._fuel = level\n']], ['Spaceship objects'], 2], [(2500584, 1), [['In main(), consider loops to initialize the ships and display status instead of repeating code, and use ship.fuel instead of self.fuel.  self is only valid in methods of the class.'], ['-10000']], [[' def main():\n\n    ships = []\n    for n in range(4):\n        ship = Ship(raw_input("What would you like to name this ship?"))\n        ship.fuel = int(raw_input("How much fuel does this ship have?"))\n        ships.append(ship)\n\n    for ship in ships:\n        ship.status()\n\nmain()\nraw_input("Press enter to exit.")\n']], ['Spaceship objects'], 2], [(2501138, 0), [['At least according to documentation from the project this line:'], ['Should really be:']], [[' pc = pcap.pcapObject()\n']], ["'module' object has no attribute 'pcapObject'"], 2], [(2501138, 1), [['Should really be:'], ['-10000']], [[' pc = pcap.pcap()\n']], ["'module' object has no attribute 'pcapObject'"], 2], [(2501529, 0), [['You could implement  memoize  as a function and use the built-in  __get__  magic that functions already have'], ['or by modifying your class along the lines of']], [[' import functools\n\ndef memoize(f):\n    @functools.wraps(f)\n    def memoized(*args, _cache={}): \n        # This abuses the normally-unwanted behaviour of mutable default arguments.\n        if args not in _cache:\n            _cache[args] = f(*args)\n        return _cache[args]\n    return memoized\n']], ['add a decorate function to a class'], 2], [(2501529, 1), [['or by modifying your class along the lines of'], ['Note that both of these choke if any of the arguments you pass in are mutable (well, unhashable technically). This might be suitable for your case, but you may also want to deal with the case where  args  is unhashable.']], [[' import functools\n\nclass Memoize(object): #inherit object\n    def __init__(self, function):\n        self.function = function\n        self.memoized = {}\n    def __call__(self, *args): #don\'t accept kwargs you don\'t want.\n        # I removed "hash = args" because it shadowed a builtin function and \n        # because it was untrue--it wasn\'t a hash, it was something you intended for\n        # Python to hash for you.\n        try:\n            return self.memoized[args]\n        except KeyError:\n            self.memoized[args] = self.function(*args)\n            return self.memoized[args]\n    def __get__(self, obj, type):\n        if obj is None: #We looked up on the class\n            return self\n\n        return functools.partial(self, obj)\n']], ['add a decorate function to a class'], 2], [(2501882, 0), [['Replace'], ['with']], [[' mybytes = data[16:19]\n']], ['Reading UDP Packets'], 2], [(2501882, 1), [['with'], ['(right number is the first byte not included, i.e. range(16,19) = [16,17,18]) and you should be good to go.']], [[' mybytes = data[16:20]\n']], ['Reading UDP Packets'], 2], [(2502833, 0), [['Instead of making a  Popen  object directly, you can use the  subprocess.check_output()  function  to store output of a command in a string:'], ['Use the  communicate  method.']], [[' from subprocess import check_output\nout = check_output(["ntpq", "-p"])\n']], ['Store output of subprocess.Popen call in a string'], 2], [(2502833, 1), [['Use the  communicate  method.'], ['out  is what you want.']], [[' import subprocess\np = subprocess.Popen(["ntpq", "-p"], stdout=subprocess.PIPE)\nout, err = p.communicate()\n']], ['Store output of subprocess.Popen call in a string'], 2], [(2504411, 0), [['You probably want to line up with the  """'], ["Since the newlines and spaces are included in the string itself, you will have to postprocess it. If you don't want to do that and you have a whole lot of text, you might want to store it separately in a text file. If a text file does not work well for your application and you don't want to postprocess, I'd probably go with"]], [[' def foo():\n    string = """line one\n             line two\n             line three"""\n']], ['Proper indentation for Python multiline strings'], 3], [(2504411, 1), [["Since the newlines and spaces are included in the string itself, you will have to postprocess it. If you don't want to do that and you have a whole lot of text, you might want to store it separately in a text file. If a text file does not work well for your application and you don't want to postprocess, I'd probably go with"], ["If you want to postprocess a multiline string to trim out the parts you don't need, you should consider the  textwrap  module or the technique for postprocessing docstrings presented in  PEP 257 :"]], [[' def foo():\n    string = ("this is an "\n              "implicitly joined "\n              "string")\n']], ['Proper indentation for Python multiline strings'], 3], [(2504411, 2), [["If you want to postprocess a multiline string to trim out the parts you don't need, you should consider the  textwrap  module or the technique for postprocessing docstrings presented in  PEP 257 :"], ['-10000']], [[" def trim(docstring):\n    if not docstring:\n        return ''\n    # Convert tabs to spaces (following the normal Python rules)\n    # and split into a list of lines:\n    lines = docstring.expandtabs().splitlines()\n    # Determine minimum indentation (first line doesn't count):\n    indent = sys.maxint\n    for line in lines[1:]:\n        stripped = line.lstrip()\n        if stripped:\n            indent = min(indent, len(line) - len(stripped))\n    # Remove indentation (first line is special):\n    trimmed = [lines[0].strip()]\n    if indent < sys.maxint:\n        for line in lines[1:]:\n            trimmed.append(line[indent:].rstrip())\n    # Strip off trailing and leading blank lines:\n    while trimmed and not trimmed[-1]:\n        trimmed.pop()\n    while trimmed and not trimmed[0]:\n        trimmed.pop(0)\n    # Return a single string:\n    return '\\n'.join(trimmed)\n"]], ['Proper indentation for Python multiline strings'], 3], [(2505251, 0), [['-10000'], ['or with filter (would be a little bit slower if you have big list, because of lambda)']], [[' >>> l = [11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10]\n>>> sorted(x for x in l if x > 13)\n[14, 15, 16]\n']], ['Splitting a list in python'], 2], [(2505251, 1), [['or with filter (would be a little bit slower if you have big list, because of lambda)'], ['-10000']], [[' >>> sorted(filter(lambda x: x > 13, l))\n[14, 15, 16]\n']], ['Splitting a list in python'], 2], [(2509260, 0), [['recursively:'], ['test:']], [[' import itertools, operator\n\ndef catalog(fields,people):\n    cur_field = operator.itemgetter(fields[0])\n    groups = itertools.groupby(sorted(people, key=cur_field),cur_field)\n    if len(fields)==1:\n        return dict((k,list(v)) for k,v in groups)\n    else:\n        return dict((k,catalog(fields[1:],v)) for k,v in groups)\n']], ['catalogue a list of dictionaries'], 2], [(2509260, 1), [['test:'], ['-10000']], [[" import pprint\npprint.pprint(catalog(('sex','age'), people))\n{'F': {30: [{'age': 30, 'city': 'Dallas', 'name': 'Dana', 'sex': 'F'}]},\n 'M': {20: [{'age': 20, 'city': 'NY', 'name': 'Roger', 'sex': 'M'},\n            {'age': 20, 'city': 'Boston', 'name': 'Dan', 'sex': 'M'}],\n       21: [{'age': 21, 'city': 'Boston', 'name': 'Roger', 'sex': 'M'}]}}\n"]], ['catalogue a list of dictionaries'], 2], [(2510755, 0), [['If you define an alphabet of characters, you can just convert to base 10, do an average, and convert back to base-N where N is the size of the alphabet.'], ['Edit : Based on comments and other answers, you might want to handle strings of different lengths by appending the first letter of the alphabet to the shorter word until they\'re the same length.  This will result in the "average" falling between the two inputs in a lexicographical sort.  Code changes and new outputs below.']], [[" alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef enbase(x):\n    n = len(alphabet)\n    if x < n:\n        return alphabet[x]\n    return enbase(x/n) + alphabet[x%n]\n\ndef debase(x):\n    n = len(alphabet)\n    result = 0\n    for i, c in enumerate(reversed(x)):\n        result += alphabet.index(c) * (n**i)\n    return result\n\ndef average(a, b):\n    a = debase(a)\n    b = debase(b)\n    return enbase((a + b) / 2)\n\nprint average('a', 'z') #m\nprint average('aa', 'zz') #mz\nprint average('cat', 'doggie') #budeel\nprint average('google', 'microsoft') #gebmbqkil\nprint average('microsoft', 'google') #gebmbqkil\n"]], ['Average of two strings in alphabetical/lexicographical order'], 2], [(2510755, 1), [['Edit : Based on comments and other answers, you might want to handle strings of different lengths by appending the first letter of the alphabet to the shorter word until they\'re the same length.  This will result in the "average" falling between the two inputs in a lexicographical sort.  Code changes and new outputs below.'], ['-10000']], [[" def pad(x, n):\n    p = alphabet[0] * (n - len(x)) \n    return '%s%s' % (x, p)\n\ndef average(a, b):\n    n = max(len(a), len(b))\n    a = debase(pad(a, n))\n    b = debase(pad(b, n))\n    return enbase((a + b) / 2)\n\nprint average('a', 'z') #m\nprint average('aa', 'zz') #mz\nprint average('aa', 'az') #m (equivalent to ma)\nprint average('cat', 'doggie') #cumqec\nprint average('google', 'microsoft') #jlilzyhcw\nprint average('microsoft', 'google') #jlilzyhcw\n"]], ['Average of two strings in alphabetical/lexicographical order'], 2], [(2511058, 0), [["If a hash function really won't work for you, you can turn the string into a number. "], ['This is invertible, by mapping each triplet through  chr .']], [[" my_string = 'my string'\ndef string_to_int(s):\n    ord3 = lambda x : '%.3d' % ord(x)\n    return int(''.join(map(ord3, s)))\n\nIn[10]: string_to_int(my_string)\nOut[11]: 109121032115116114105110103L\n"]], ['Persistent Hashing of Strings in Python'], 2], [(2511058, 1), [['This is invertible, by mapping each triplet through  chr .'], ['-10000']], [[" def int_to_string(n)\n    s = str(n)\n    return ''.join([chr(int(s[i:i+3])) for i in range(0, len(s), 3)])\n\nIn[12]: int_to_string(109121032115116114105110103L)\nOut[13]: 'my string'\n"]], ['Persistent Hashing of Strings in Python'], 2], [(2511556, 0), [['Can you just pass the parameters into the constructor like this?'], ['There\'s nothing to "reset" in the code you posted.  Upon constructing a user, they don\'t even have a name or email attribute until you set them later.  An alternative would be to just initialize them to some default values as shown below, but the code I posted above is better so there won\'t be any uninitialized User objects.']], [[" class User(object):\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    def commit(self):\n        pass\n\njason = User('jason', 'jason@email.com')\njack = User('jack', 'jack@yahoo.com')\n"]], ['Clear all class variables between instances'], 2], [(2511556, 1), [['There\'s nothing to "reset" in the code you posted.  Upon constructing a user, they don\'t even have a name or email attribute until you set them later.  An alternative would be to just initialize them to some default values as shown below, but the code I posted above is better so there won\'t be any uninitialized User objects.'], ['-10000']], [[' def __init__(self):\n    self.user = None\n    self.email = None\n']], ['Clear all class variables between instances'], 2], [(2512671, 0), [["You can't use the same implementation as the result object of os.stat() and others. However Python 2.6 has a new factory function that creates a similar datatype called named tuple. A named tuple is a tuple whose slots can also be addressed by name. The named tuple should not require any more memory, according to the documentation, than a regular tuple, since they don't have a per instance dictionary. The factory function signature is: "], ['Suppose you have a tuple containing a username and password. To access the username you get the item at position zero and the password is accessed at position one: ']], [[' collections.namedtuple(typename, field_names[, verbose])  \n']], ['Structure accessible by attribute name or index options'], 5], [(2512671, 1), [['Suppose you have a tuple containing a username and password. To access the username you get the item at position zero and the password is accessed at position one: '], ["There's nothing wrong with this code but the tuple isn't self-documenting. You have to find and read the documentation about the positioning of the fields in the tuple. This is where named tuple can come to the rescue. We can recode the previous example as follows: "]], [[" credential = ('joeuser', 'secret123')  \nprint 'Username:', credential[0]  \nprint 'Password:', credential[1]  \n"]], ['Structure accessible by attribute name or index options'], 5], [(2512671, 2), [["There's nothing wrong with this code but the tuple isn't self-documenting. You have to find and read the documentation about the positioning of the fields in the tuple. This is where named tuple can come to the rescue. We can recode the previous example as follows: "], ['If you are interested of what the code looks like for the newly created Credential-type you can add verbose=True to the argument list when creating the type, in this particular case we get the following output:']], [[" import collections  \n# Create a new sub-tuple named Credential  \nCredential = collections.namedtuple('Credential', 'username, password')  \n\ncredential = Credential(username='joeuser', password='secret123')  \n\nprint 'Username:', credential.username  \nprint 'Password:', credential.password  \n"]], ['Structure accessible by attribute name or index options'], 5], [(2512671, 3), [['If you are interested of what the code looks like for the newly created Credential-type you can add verbose=True to the argument list when creating the type, in this particular case we get the following output:'], ["The named tuple doesn't only provide access to fields by name but also contains helper functions such as the _make() function which helps creating an Credential instance from a sequence or iterable. For example: "]], [[" import collections  \nCredential = collections.namedtuple('Credential', 'username, password', verbose=True)  \n\nclass Credential(tuple):                                       \n    'Credential(username, password)'                       \n\n    __slots__ = ()   \n\n    _fields = ('username', 'password')   \n\n    def __new__(_cls, username, password):  \n        return _tuple.__new__(_cls, (username, password))   \n\n    @classmethod  \n    def _make(cls, iterable, new=tuple.__new__, len=len):  \n        'Make a new Credential object from a sequence or iterable'  \n        result = new(cls, iterable)                                 \n        if len(result) != 2:                                        \n            raise TypeError('Expected 2 arguments, got %d' % len(result))  \n        return result  \n\n    def __repr__(self):  \n        return 'Credential(username=%r, password=%r)' % self  \n\n    def _asdict(t):  \n        'Return a new dict which maps field names to their values'  \n        return {'username': t[0], 'password': t[1]}  \n\n    def _replace(_self, **kwds):  \n        'Return a new Credential object replacing specified fields with new values'  \n        result = _self._make(map(kwds.pop, ('username', 'password'), _self))  \n        if kwds:  \n            raise ValueError('Got unexpected field names: %r' % kwds.keys())  \n        return result  \n\n    def __getnewargs__(self):  \n        return tuple(self)  \n\n    username = _property(_itemgetter(0))  \n    password = _property(_itemgetter(1))  \n"]], ['Structure accessible by attribute name or index options'], 5], [(2512671, 4), [["The named tuple doesn't only provide access to fields by name but also contains helper functions such as the _make() function which helps creating an Credential instance from a sequence or iterable. For example: "], ['The python library documentation for namedtuple has more information and code examples, so I suggest that you  take a peek.']], [[" cred_tuple = ('joeuser', 'secret123')  \ncredential = Credential._make(cred_tuple) \n"]], ['Structure accessible by attribute name or index options'], 5], [(2515244, 0), [['Create a pad:'], ['Then you can scroll by increasing/decreasing mypad_pos depending on the input from window.getch() in cmd:']], [[' mypad = curses.newpad(40,60)\nmypad_pos = 0\nmypad.refresh(mypad_pos, 0, 5, 5, 10, 60)\n']], ['How to scroll text in Python/Curses subwindow?'], 2], [(2515244, 1), [['Then you can scroll by increasing/decreasing mypad_pos depending on the input from window.getch() in cmd:'], ['-10000']], [[' if  cmd == curses.KEY_DOWN:\n    mypad_pos += 1\n    mypad.refresh(mypad_pos, 0, 5, 5, 10, 60)\nelif cmd == curses.KEY_UP:\n    mypad_pos -= 1\n    mypad.refresh(mypad_pos, 0, 5, 5, 10, 60)\n']], ['How to scroll text in Python/Curses subwindow?'], 2], [(2515782, 0), [['PRTime is the number of microseconds since 1-Jan-1970 (see  https://developer.mozilla.org/en/PRTime ) so just do this to get UTC time'], ['e.g.']], [[' datetime.datetime(1970, 1, 1) + datetime.timedelta(microseconds=pr_time)\n']], ['PRTime to datetime in Python'], 3], [(2515782, 1), [['e.g.'], ['output:']], [[' print datetime.datetime(1970, 1, 1) + datetime.timedelta(microseconds=time.time()*1000*1000)\n']], ['PRTime to datetime in Python'], 3], [(2515782, 2), [['output:'], ['-10000']], [[' 2010-03-25 13:30:02.243000\n']], ['PRTime to datetime in Python'], 3], [(2516553, 0), [['Sources of python-suds-0.3.9\\suds\\transport\\https.py says:'], ['Try with the following snippet as described  here :']], [[' class WindowsHttpAuthenticated(HttpAuthenticated):\n    """\n    Provides Windows (NTLM) http authentication.\n    @ivar pm: The password manager.\n    @ivar handler: The authentication handler.\n    """\n\n    def u2handlers(self):\n        # try to import ntlm support  \n        try:\n            from ntlm import HTTPNtlmAuthHandler\n        except ImportError:\n            raise Exception("Cannot import python-ntlm module")\n        handlers = HttpTransport.u2handlers(self)\n        handlers.append(HTTPNtlmAuthHandler.HTTPNtlmAuthHandler(self.pm))\n        return handlers\n']], ['Has anyone combined soap.py or suds with python-ntlm?'], 2], [(2516553, 1), [['Try with the following snippet as described  here :'], ['-10000']], [[" from suds.transport.https import WindowsHttpAuthenticated\nntlm = WindowsHttpAuthenticated(username='xx', password='xx')\nclient = Client(url, transport=ntlm)\n"]], ['Has anyone combined soap.py or suds with python-ntlm?'], 2], [(2519580, 0), [['But for strings of length 1, CPython does look into the pool (cf. "stringobject.c"):'], ['So:']], [[' static PyStringObject *characters[UCHAR_MAX + 1];\n\n...\n\nPyObject *\nPyString_FromStringAndSize(const char *str, Py_ssize_t size)\n{\n\n...\n\n    if (size == 1 && str != NULL &&\n    (op = characters[*str & UCHAR_MAX]) != NULL)\n    {\n        #ifdef COUNT_ALLOCS\n            one_strings++;\n        #endif\n\n        Py_INCREF(op);\n        return (PyObject *)op;\n    }\n\n...\n']], ['Are strings pooled in Python'], 3], [(2519580, 1), [['So:'], ['But when using  constant  strings directly in your code, CPython uses the same string instance:']], [[' a = str(num)\nb = str(num)\nprint a is b # <-- this will print False in most cases (but try str(1) is str(1))\n']], ['Are strings pooled in Python'], 3], [(2519580, 2), [['But when using  constant  strings directly in your code, CPython uses the same string instance:'], ['-10000']], [[' a = "text"\nb = "text"\nprint a is b # <-- this will print True\n']], ['Are strings pooled in Python'], 3], [(2519682, 0), [['The problem is here:'], ['You are not modifying the set. You are creating a new set which is then discarded. The original set is still in the  lf  array. Use update instead:']], [[' lfi=lfi.union(set(li))\n']], ['Using set in Python inside a loop'], 3], [(2519682, 1), [['You are not modifying the set. You are creating a new set which is then discarded. The original set is still in the  lf  array. Use update instead:'], ['This modifies the original set instead of creating a new one. The result after making this change:']], [[' lfi.update(li)\n']], ['Using set in Python inside a loop'], 3], [(2519682, 2), [['This modifies the original set instead of creating a new one. The result after making this change:'], ['-10000']], [[' [set([1, 2, 7]), set([9, 3, 4, 6])]\n']], ['Using set in Python inside a loop'], 3], [(2520282, 0), [["You can do your custom sort without a need to refill tree. You just need to overload item's 'less' operator.\nNote, that QT figures out, what to draw in the cell, what size it should be, what text should it contain, by looking in item's"], ['when you create an item, you provide some string to constructor for item to show. This string is placed into data(.., QtCore.Qt.EditRole), so, the equivalent of passing data into constuctor is to set data with:']], [[' virtual QVariant data ( int column, int role ) const\n']], ['QTreeWidget insertTopLevelItem - index given not accurately displayed in Tree?'], 3], [(2520282, 1), [['when you create an item, you provide some string to constructor for item to show. This string is placed into data(.., QtCore.Qt.EditRole), so, the equivalent of passing data into constuctor is to set data with:'], ["Internally, data is just an array, you can place anything youn want, and indexes of it are roles (Qt.EditRole is 2, Qt.ToolTipRole is 3 etc.), so we just let some role to contain our data, tell comparison operator to compare these values, and tell setData set DisplayRole when we set our, let's say, ValueRole. Here is the sample:"]], [[' virtual void setData ( int column, int role, const QVariant & value)\n']], ['QTreeWidget insertTopLevelItem - index given not accurately displayed in Tree?'], 3], [(2520282, 2), [["Internally, data is just an array, you can place anything youn want, and indexes of it are roles (Qt.EditRole is 2, Qt.ToolTipRole is 3 etc.), so we just let some role to contain our data, tell comparison operator to compare these values, and tell setData set DisplayRole when we set our, let's say, ValueRole. Here is the sample:"], ["I've tested, it works fine. Of cource, you can avoid inheritance and override  lt  directly, since we had duck typing, use UserRole itself to hold your data and set data do display directly with setData(col, role, val), or even hold only text in edit/display role and convert it in datetime only while comparing, but it seems ugly.\nNote, that data() contains QVariant. When you set data, your py object automatcally converts, and you need to call toPyObject() to get your value back as it was. "]], [[" class TreeItem(QtGui.QTreeWidgetItem):\n\n    PythonValueRole = QtCore.Qt.UserRole\n\n    #values are list of python objects, that have __str__ and can be compared\n    def __init__(self, tree, values):\n        QtGui.QTreeWidgetItem.__init__(self, tree)\n        i = 0\n        for v in values:\n            self.setData(i, TreeItem.PythonValueRole, v)\n            i += 1\n\n    #overridden to simplify data assigning. When called with PythonValueRole, passes\n    #that object's string representation to DisplayRole and EditRole\n    def setData(self, col, role, value):\n        if role == TreeItem.PythonValueRole:\n            QtGui.QTreeWidgetItem.setData(self, col, TreeItem.PythonValueRole, value)\n            # sets DisplayRole and EditRole\n            QtGui.QTreeWidgetItem.setData(self, col, QtCore.Qt.EditRole, str(value)) \n            QtGui.QTreeWidgetItem.setData(self, col, QtCore.Qt.DisplayRole, str(value))\n        else:\n            QtGui.QTreeWidgetItem.setData(self, col, role, value)\n\n    def __lt__(self, other):\n        c = self.treeWidget().sortColumn()\n        return self.data(c, TreeItem.PythonValueRole).toPyObject() < \n               other.data(c, TreeItem.PythonValueRole).toPyObject()\n"]], ['QTreeWidget insertTopLevelItem - index given not accurately displayed in Tree?'], 3], [(2520893, 0), [["I was curious and threw together a solution using curses, but this won't work on Windows either:"], ["EDIT: ah, Windows. Then you can use the msvcrt module. Note that the code below isn't perfect, and it doesn't work in IDLE at all:"]], [[' #!/usr/bin/python                                                               \n\nimport time\nimport sys\nimport curses\n\ndef alarmloop(stdscr):\n    stdscr.addstr("How many seconds (alarm1)? ")\n    curses.echo()\n    alarm1 = int(stdscr.getstr())\n    while (1):\n        time.sleep(alarm1)\n        curses.flushinp()\n        stdscr.clear()\n        stdscr.addstr("Alarm1\\n")\n        stdscr.addstr("Continue (Y/N)?[Y]:")\n        doit = stdscr.getch()\n        stdscr.addstr("\\n")\n        stdscr.addstr("Input "+chr(doit)+"\\n")\n        stdscr.refresh()\n        if doit == ord(\'N\') or doit == ord(\'n\'):\n            stdscr.addstr("Exiting.....\\n")\n            break\n\ncurses.wrapper(alarmloop)\n']], ['How to flush the input stream in python?'], 2], [(2520893, 1), [["EDIT: ah, Windows. Then you can use the msvcrt module. Note that the code below isn't perfect, and it doesn't work in IDLE at all:"], ['-10000']], [[' #!/usr/bin/python\n\nimport time\nimport subprocess\nimport sys\nimport msvcrt\n\nalarm1 = int(raw_input("How many seconds (alarm1)? "))\n\nwhile (1):\n    time.sleep(alarm1)\n    print "Alarm1"\n    sys.stdout.flush()\n\n    # Try to flush the buffer\n    while msvcrt.kbhit():\n        msvcrt.getch()\n\n    print "Continue (Y/N)?[Y]"\n    doit = msvcrt.getch()\n    print "Input",doit\n    if doit == \'N\' or doit==\'n\':\n        print "Exiting....."\n        break\n']], ['How to flush the input stream in python?'], 2], [(2521901, 0), [['You can use  locals()  to get a dict of the local variables in your function, like this:'], ["This is a bit hackish, however, as  locals()  returns all variables in the local scope, not only the arguments passed to the function, so if you don't call it at the very top of the function the result might contain more information than you want:"]], [[" def foo(a, b, c):\n    print locals()\n\n>>> foo(1, 2, 3)\n{'a': 1, 'c': 3, 'b': 2}\n"]], ['Get a list/tuple/dict of the arguments passed to a function?'], 2], [(2521901, 1), [["This is a bit hackish, however, as  locals()  returns all variables in the local scope, not only the arguments passed to the function, so if you don't call it at the very top of the function the result might contain more information than you want:"], ["I would rather construct a dict or list of the variables you need at the top of your function, as suggested in the other answers.  It's more explicit and communicates the intent of your code in a more clear way, IMHO."]], [[" def foo(a, b, c):\n    x = 4\n    y = 5\n    print locals()\n\n>>> foo(1, 2, 3)\n{'y': 5, 'x': 4, 'c': 3, 'b': 2, 'a': 1}\n"]], ['Get a list/tuple/dict of the arguments passed to a function?'], 2], [(2522152, 0), [["Note: time in the table doesn't include the time it takes to load files."], ['The fastest solution is Python extension written in Cython:']], [[" | approach       | american-english, |      big.txt, | time w.r.t. defaultdict |\n|                |     time, seconds | time, seconds |                         |\n|----------------+-------------------+---------------+-------------------------|\n| Counter        |             0.451 |         3.367 |                     3.6 |\n| setdefault     |             0.348 |         2.320 |                     2.5 |\n| list           |             0.277 |         1.822 |                       2 |\n| try/except     |             0.158 |         1.068 |                     1.2 |\n| defaultdict    |             0.141 |         0.925 |                       1 |\n| numpy          |             0.012 |         0.076 |                   0.082 |\n| S.Mark's ext.  |             0.003 |         0.019 |                   0.021 |\n| ext. in Cython |             0.001 |         0.008 |                  0.0086 |\n#+TBLFM: $4=$3/@7$3;%.2g\n"]], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 1), [['The fastest solution is Python extension written in Cython:'], ['-10000']], [[' import cython\n\n@cython.locals(\n    chars=unicode,\n    i=cython.Py_ssize_t,\n    L=cython.Py_ssize_t[0x10000])\ndef countchars_cython(chars):\n    for i in range(0x10000): # unicode code points > 0xffff are not supported\n        L[i] = 0\n\n    for c in chars:\n        L[c] += 1\n\n    return {unichr(i): L[i] for i in range(0x10000) if L[i]}\n']], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 2), [['-10000'], ['Input data:']], [['Previous comparison: * python (dict) : 0.5  seconds\n* python (list) : 0.5  (ascii) (0.2 if read whole file in memory)\n* perl          : 0.5\n* python (numpy): 0.07 \n* c++           : 0.05\n* c             : 0.008 (ascii)\n']], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 3), [['Input data:'], ['-10000']], [[" $ tail /usr/share/dict/american-english\néclat's\nélan\nélan's\némigré\némigrés\népée\népées\nétude\nétude's\nétudes\n\n$ du -h /usr/share/dict/american-english\n912K    /usr/share/dict/american-english\n"]], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 4), [['-10000'], ['Run it:']], [['python (Counter): 0.5 seconds #!/usr/bin/env python3.1\nimport collections, fileinput, textwrap\n\nchars = (ch for word in fileinput.input() for ch in word.rstrip())\n# faster (0.4s) but less flexible: chars = open(filename).read()\nprint(textwrap.fill(str(collections.Counter(chars)), width=79))\n']], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 5), [['Run it:'], ['-10000']], [[' $ time -p python3.1 count_char.py /usr/share/dict/american-english\n']], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 6), [['-10000'], ['Output:']], [["perl: 0.5 seconds time -p perl -MData::Dumper -F'' -lanwe'$c{$_}++ for (@F);\nEND{ $Data::Dumper::Terse = 1; $Data::Dumper::Indent = 0; print Dumper(\\%c) }\n' /usr/share/dict/american-english\n"]], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 7), [['Output:'], ['Output:']], [[' #!/usr/bin/env python\nimport codecs, itertools, operator, sys\nimport numpy\n\nfilename = sys.argv[1] if len(sys.argv)>1 else \'/usr/share/dict/american-english\'\n\n# ucs2 or ucs4 python?\ndtype = {2: numpy.uint16, 4: numpy.uint32}[len(buffer(u"u"))]\n\n# count ordinals\ntext = codecs.open(filename, encoding=\'utf-8\').read()\na = numpy.frombuffer(text, dtype=dtype)\ncounts = numpy.bincount(a)\n\n# pretty print\ncounts = [(unichr(i), v) for i, v in enumerate(counts) if v]\ncounts.sort(key=operator.itemgetter(1))\nprint \' \'.join(\'("%s" %d)\' % c for c in counts  if c[0] not in \' \\t\\n\')\n']], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 8), [['Output:'], ['-10000']], [[' ("Å" 1) ("í" 2) ("ô" 2) ("å" 3) ("û" 3) ("ç" 4) ("â" 6) ("ê" 6) ("ñ" 6) ("ä" 7) ("á" 10) ("ó" 10) ("ö" 12) ("ü" 12) ("è" 29) ("X" 42) ("Q" 63) ("U" 117) ("é" 128) ("Y" 140) ("Z" 150) ("V" 330) ("I" 344) ("O" 354) ("F" 502) ("W" 507) ("N" 531) ("J" 539) ("E" 618) ("K" 656) ("R" 749) ("D" 809) ("G" 811) ("T" 858) ("H" 860) ("L" 912) ("P" 974) ("A" 1345) ("j" 1376) ("B" 1387) ("q" 1447) ("S" 1515) ("C" 1549) ("M" 1686) ("x" 2082) ("z" 3088) ("w" 6924) ("v" 7573) ("k" 7800) ("f" 10049) ("y" 12367) ("b" 14137) ("h" 18453) ("m" 20747) ("p" 20917) ("g" 22262) ("\'" 24511) ("u" 25810) ("d" 28068) ("c" 30020) ("l" 39914) ("o" 48425) ("t" 51588) ("r" 56286) ("n" 56696) ("a" 62778) ("i" 66548) ("s" 86620) ("e" 87823)\nreal 0.07\nuser 0.06\nsys 0.01\n']], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 9), [['-10000'], ['Result:']], [['c++: 0.05 seconds // $ g++ *.cc -lboost_program_options \n// $ ./a.out /usr/share/dict/american-english    \n#include <iostream>\n#include <fstream>\n#include <cstdlib> // exit\n\n#include <boost/program_options/detail/utf8_codecvt_facet.hpp>\n#include <boost/tr1/unordered_map.hpp>\n#include <boost/foreach.hpp>\n\nint main(int argc, char* argv[]) {\n  using namespace std;\n\n  // open input file\n  if (argc != 2) {\n    cerr << "Usage: " << argv[0] << " <filename>\\n";\n    exit(2);\n  }\n  wifstream f(argv[argc-1]); \n\n  // assume the file has utf-8 encoding\n  locale utf8_locale(locale(""), \n      new boost::program_options::detail::utf8_codecvt_facet);\n  f.imbue(utf8_locale); \n\n  // count characters frequencies\n  typedef std::tr1::unordered_map<wchar_t, size_t> hashtable_t;  \n  hashtable_t counts;\n  for (wchar_t ch; f >> ch; )\n    counts[ch]++;\n\n  // print result\n  wofstream of("output.utf8");\n  of.imbue(utf8_locale);\n  BOOST_FOREACH(hashtable_t::value_type i, counts) \n    of << "(" << i.first << " " << i.second << ") ";\n  of << endl;\n}\n']], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 10), [['Result:'], ['-10000']], [[' $ cat output.utf8 \n']], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2522152, 11), [['-10000'], ['-10000']], [['c (ascii): 0.0079 seconds // $ gcc -O3 cc_ascii.c -o cc_ascii && time -p ./cc_ascii < input.txt\n#include <stdio.h>\n\nenum { N = 256 };\nsize_t counts[N];\n\nint main(void) {\n  // count characters\n  int ch = -1;\n  while((ch = getchar()) != EOF)\n    ++counts[ch];\n\n  // print result\n  size_t i = 0;\n  for (; i < N; ++i) \n    if (counts[i])\n      printf("(\'%c\' %zu) ", (int)i, counts[i]);\n  return 0;\n}\n']], ['Python - Is a dictionary slow to find frequency of each character?'], 12], [(2524600, 0), [['You model with the test code becomes:'], ['which produces following output:']], [[' from sqlalchemy import create_engine, Column, Integer, DateTime, String, ForeignKey, Table\nfrom sqlalchemy.orm import relation, scoped_session, sessionmaker, eagerload\nfrom sqlalchemy.ext.declarative import declarative_base\n\nengine = create_engine(\'sqlite:///:memory:\', echo=True)\nsession = scoped_session(sessionmaker(bind=engine, autoflush=True))\nBase = declarative_base()\n\nt_subscription = Table(\'subscription\', Base.metadata,\n    Column(\'userId\', Integer, ForeignKey(\'user.id\')),\n    Column(\'channelId\', Integer, ForeignKey(\'channel.id\')),\n)\n\nclass Channel(Base):\n    __tablename__ = \'channel\'\n\n    id = Column(Integer, primary_key = True)\n    title = Column(String)\n    description = Column(String)\n    link = Column(String)\n    pubDate = Column(DateTime)\n\nclass User(Base):\n    __tablename__ = \'user\'\n\n    id = Column(Integer, primary_key = True)\n    username = Column(String)\n    password = Column(String)\n    sessionId = Column(String)\n\n    channels = relation("Channel", secondary=t_subscription)\n\n# NOTE: no need for this class\n# class Subscription(Base):\n    # ...\n\nBase.metadata.create_all(engine)\n\n\n# ######################\n# Add test data\nc1 = Channel()\nc1.title = \'channel-1\'\nc2 = Channel()\nc2.title = \'channel-2\'\nc3 = Channel()\nc3